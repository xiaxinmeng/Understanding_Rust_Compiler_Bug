{"sha": "38e5a964f2c90d46dfa8dff17a2ce251e7465da1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ZTVhOTY0ZjJjOTBkNDZkZmE4ZGZmMTdhMmNlMjUxZTc0NjVkYTE=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-10-12T06:08:48Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-10-16T18:19:18Z"}, "message": "code suggestions for no-mangle lints\n\nAt reviewer's suggestion, we remove the function/static name from the\nmain lint message. While we're correspondingly adjusting the\nexpectations of a compile-fail test, we remove an obsolete FIXME\ncomment, another quantum of progress towards resolving the fabulous\nmetabug #44366.", "tree": {"sha": "bf3a61ad4cb4b8ccbd60c8d5248f1a021f63837f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf3a61ad4cb4b8ccbd60c8d5248f1a021f63837f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38e5a964f2c90d46dfa8dff17a2ce251e7465da1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38e5a964f2c90d46dfa8dff17a2ce251e7465da1", "html_url": "https://github.com/rust-lang/rust/commit/38e5a964f2c90d46dfa8dff17a2ce251e7465da1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38e5a964f2c90d46dfa8dff17a2ce251e7465da1/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f98939c6fd73e0cb776b7ddbc732827b04a4b2a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f98939c6fd73e0cb776b7ddbc732827b04a4b2a3", "html_url": "https://github.com/rust-lang/rust/commit/f98939c6fd73e0cb776b7ddbc732827b04a4b2a3"}], "stats": {"total": 57, "additions": 38, "deletions": 19}, "files": [{"sha": "bc2a1f08441d1a57582e645ce8e96ac2613e171c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 35, "deletions": 15, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/38e5a964f2c90d46dfa8dff17a2ce251e7465da1/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e5a964f2c90d46dfa8dff17a2ce251e7465da1/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=38e5a964f2c90d46dfa8dff17a2ce251e7465da1", "patch": "@@ -44,7 +44,7 @@ use std::collections::HashSet;\n use syntax::ast;\n use syntax::attr;\n use syntax::feature_gate::{AttributeGate, AttributeType, Stability, deprecated_attributes};\n-use syntax_pos::{Span, SyntaxContext};\n+use syntax_pos::{BytePos, Span, SyntaxContext};\n use syntax::symbol::keywords;\n \n use rustc::hir::{self, PatKind};\n@@ -1133,35 +1133,55 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n         match it.node {\n             hir::ItemFn(.., ref generics, _) => {\n-                if attr::contains_name(&it.attrs, \"no_mangle\") &&\n-                   !attr::contains_name(&it.attrs, \"linkage\") {\n+                if let Some(no_mangle_attr) = attr::find_by_name(&it.attrs, \"no_mangle\") {\n+                    if attr::contains_name(&it.attrs, \"linkage\") {\n+                        return;\n+                    }\n                     if !cx.access_levels.is_reachable(it.id) {\n-                        let msg = format!(\"function {} is marked #[no_mangle], but not exported\",\n-                                          it.name);\n-                        cx.span_lint(PRIVATE_NO_MANGLE_FNS, it.span, &msg);\n+                        let msg = \"function is marked #[no_mangle], but not exported\";\n+                        let mut err = cx.struct_span_lint(PRIVATE_NO_MANGLE_FNS, it.span, msg);\n+                        let insertion_span = it.span.with_hi(it.span.lo());\n+                        err.span_suggestion(insertion_span,\n+                                            \"try making it public\",\n+                                            \"pub \".to_owned());\n+                        err.emit();\n                     }\n                     if generics.is_type_parameterized() {\n-                        cx.span_lint(NO_MANGLE_GENERIC_ITEMS,\n-                                     it.span,\n-                                     \"functions generic over types must be mangled\");\n+                        let mut err = cx.struct_span_lint(NO_MANGLE_GENERIC_ITEMS,\n+                                                          it.span,\n+                                                          \"functions generic over \\\n+                                                           types must be mangled\");\n+                        err.span_suggestion_short(no_mangle_attr.span,\n+                                                  \"remove this attribute\",\n+                                                  \"\".to_owned());\n+                        err.emit();\n                     }\n                 }\n             }\n             hir::ItemStatic(..) => {\n                 if attr::contains_name(&it.attrs, \"no_mangle\") &&\n                    !cx.access_levels.is_reachable(it.id) {\n-                    let msg = format!(\"static {} is marked #[no_mangle], but not exported\",\n-                                      it.name);\n-                    cx.span_lint(PRIVATE_NO_MANGLE_STATICS, it.span, &msg);\n+                       let msg = \"static is marked #[no_mangle], but not exported\";\n+                       let mut err = cx.struct_span_lint(PRIVATE_NO_MANGLE_STATICS, it.span, msg);\n+                       let insertion_span = it.span.with_hi(it.span.lo());\n+                       err.span_suggestion(insertion_span,\n+                                           \"try making it public\",\n+                                           \"pub \".to_owned());\n+                       err.emit();\n                 }\n             }\n             hir::ItemConst(..) => {\n                 if attr::contains_name(&it.attrs, \"no_mangle\") {\n                     // Const items do not refer to a particular location in memory, and therefore\n                     // don't have anything to attach a symbol to\n-                    let msg = \"const items should never be #[no_mangle], consider instead using \\\n-                               `pub static`\";\n-                    cx.span_lint(NO_MANGLE_CONST_ITEMS, it.span, msg);\n+                    let msg = \"const items should never be #[no_mangle]\";\n+                    let mut err = cx.struct_span_lint(NO_MANGLE_CONST_ITEMS, it.span, msg);\n+                    // `const` is 5 chars\n+                    let const_span = it.span.with_hi(BytePos(it.span.lo().0 + 5));\n+                    err.span_suggestion(const_span,\n+                                        \"try a static value\",\n+                                        \"pub static\".to_owned());\n+                    err.emit();\n                 }\n             }\n             _ => {}"}, {"sha": "ab2fe02bb147667a75677d1846e049b5d29b9f8f", "filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38e5a964f2c90d46dfa8dff17a2ce251e7465da1/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e5a964f2c90d46dfa8dff17a2ce251e7465da1/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs?ref=38e5a964f2c90d46dfa8dff17a2ce251e7465da1", "patch": "@@ -424,7 +424,7 @@ mod no_mangle {\n     mod inner { #![no_mangle=\"3500\"] }\n \n     #[no_mangle = \"3500\"] fn f() { }\n-    //~^ WARN function f is marked #[no_mangle], but not exported\n+    //~^ WARN function is marked #[no_mangle], but not exported\n \n     #[no_mangle = \"3500\"] struct S;\n "}, {"sha": "cd64dfa7a47dd291292e86fda10c9220c97dc4d3", "filename": "src/test/compile-fail/lint-unexported-no-mangle.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38e5a964f2c90d46dfa8dff17a2ce251e7465da1/src%2Ftest%2Fcompile-fail%2Flint-unexported-no-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e5a964f2c90d46dfa8dff17a2ce251e7465da1/src%2Ftest%2Fcompile-fail%2Flint-unexported-no-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unexported-no-mangle.rs?ref=38e5a964f2c90d46dfa8dff17a2ce251e7465da1", "patch": "@@ -10,9 +10,8 @@\n \n // compile-flags:-F private_no_mangle_fns -F no_mangle_const_items -F private_no_mangle_statics\n \n-// FIXME(#19495) no_mangle'ing main ICE's.\n #[no_mangle]\n-fn foo() { //~ ERROR function foo is marked #[no_mangle], but not exported\n+fn foo() { //~ ERROR function is marked #[no_mangle], but not exported\n }\n \n #[allow(dead_code)]\n@@ -31,7 +30,7 @@ pub static BAR: u64 = 1;\n \n #[allow(dead_code)]\n #[no_mangle]\n-static PRIVATE_BAR: u64 = 1; //~ ERROR static PRIVATE_BAR is marked #[no_mangle], but not exported\n+static PRIVATE_BAR: u64 = 1; //~ ERROR static is marked #[no_mangle], but not exported\n \n \n fn main() {"}]}