{"sha": "db23e773e326edccf38d8ddfd42310fc169b861d", "node_id": "C_kwDOAAsO6NoAKGRiMjNlNzczZTMyNmVkY2NmMzhkOGRkZmQ0MjMxMGZjMTY5Yjg2MWQ", "commit": {"author": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-04-22T00:42:38Z"}, "committer": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-04-22T00:42:38Z"}, "message": "use references to avoid function calls", "tree": {"sha": "ffd267964e3a112296c7373d2bb9c1c0fcc12cc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffd267964e3a112296c7373d2bb9c1c0fcc12cc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db23e773e326edccf38d8ddfd42310fc169b861d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db23e773e326edccf38d8ddfd42310fc169b861d", "html_url": "https://github.com/rust-lang/rust/commit/db23e773e326edccf38d8ddfd42310fc169b861d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db23e773e326edccf38d8ddfd42310fc169b861d/comments", "author": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d256b3ecbf340f752a78f653c37c5ff14834da9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d256b3ecbf340f752a78f653c37c5ff14834da9", "html_url": "https://github.com/rust-lang/rust/commit/3d256b3ecbf340f752a78f653c37c5ff14834da9"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "691f4fb0e54259a29e5532a8f154274d76e59cc8", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/db23e773e326edccf38d8ddfd42310fc169b861d/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db23e773e326edccf38d8ddfd42310fc169b861d/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=db23e773e326edccf38d8ddfd42310fc169b861d", "patch": "@@ -12,8 +12,9 @@ use rustc_middle::mir::visit::{\n     MutVisitor, MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor,\n };\n use rustc_middle::mir::{\n-    BasicBlock, BinOp, Body, Constant, ConstantKind, Local, LocalKind, Location, Operand, Place,\n-    Rvalue, SourceInfo, Statement, StatementKind, Terminator, TerminatorKind, UnOp, RETURN_PLACE,\n+    BasicBlock, BinOp, Body, Constant, ConstantKind, Local, LocalDecl, LocalKind, Location,\n+    Operand, Place, Rvalue, SourceInfo, Statement, StatementKind, Terminator, TerminatorKind, UnOp,\n+    RETURN_PLACE,\n };\n use rustc_middle::ty::layout::{LayoutError, LayoutOf, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n@@ -312,6 +313,7 @@ struct ConstPropagator<'mir, 'tcx> {\n     ecx: InterpCx<'mir, 'tcx, ConstPropMachine<'mir, 'tcx>>,\n     tcx: TyCtxt<'tcx>,\n     param_env: ParamEnv<'tcx>,\n+    local_decls: &'mir IndexVec<Local, LocalDecl<'tcx>>,\n     // Because we have `MutVisitor` we can't obtain the `SourceInfo` from a `Location`. So we store\n     // the last known `SourceInfo` here and just keep revisiting it.\n     source_info: Option<SourceInfo>,\n@@ -393,7 +395,13 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         )\n         .expect(\"failed to push initial stack frame\");\n \n-        ConstPropagator { ecx, tcx, param_env, source_info: None }\n+        ConstPropagator {\n+            ecx,\n+            tcx,\n+            param_env,\n+            local_decls: &dummy_body.local_decls,\n+            source_info: None,\n+        }\n     }\n \n     fn get_const(&self, place: Place<'tcx>) -> Option<OpTy<'tcx>> {\n@@ -494,7 +502,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             let r = r?;\n             // We need the type of the LHS. We cannot use `place_layout` as that is the type\n             // of the result, which for checked binops is not the same!\n-            let left_ty = left.ty(&self.ecx.frame().body.local_decls, self.tcx);\n+            let left_ty = left.ty(self.local_decls, self.tcx);\n             let left_size = self.ecx.layout_of(left_ty).ok()?.size;\n             let right_size = r.layout.size;\n             let r_bits = r.to_scalar().ok();\n@@ -1116,7 +1124,7 @@ impl<'tcx> MutVisitor<'tcx> for ConstPropagator<'_, 'tcx> {\n                 assert!(\n                     self.get_const(local.into()).is_none()\n                         || self\n-                            .layout_of(self.ecx.frame().body.local_decls[local].ty)\n+                            .layout_of(self.local_decls[local].ty)\n                             .map_or(true, |layout| layout.is_zst())\n                 )\n             }"}, {"sha": "4945c10c9aaa900aa35f826435a2dd7f083ebd85", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/db23e773e326edccf38d8ddfd42310fc169b861d/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db23e773e326edccf38d8ddfd42310fc169b861d/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=db23e773e326edccf38d8ddfd42310fc169b861d", "patch": "@@ -11,9 +11,9 @@ use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::{\n-    AssertKind, BasicBlock, BinOp, Body, Constant, ConstantKind, Local, LocalKind, Location,\n-    Operand, Place, Rvalue, SourceInfo, Statement, StatementKind, Terminator, TerminatorKind, UnOp,\n-    RETURN_PLACE,\n+    AssertKind, BasicBlock, BinOp, Body, Constant, ConstantKind, Local, LocalDecl, LocalKind,\n+    Location, Operand, Place, Rvalue, SourceInfo, SourceScope, SourceScopeData, Statement,\n+    StatementKind, Terminator, TerminatorKind, UnOp, RETURN_PLACE,\n };\n use rustc_middle::ty::layout::{LayoutError, LayoutOf, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n@@ -308,6 +308,8 @@ struct ConstPropagator<'mir, 'tcx> {\n     ecx: InterpCx<'mir, 'tcx, ConstPropMachine<'mir, 'tcx>>,\n     tcx: TyCtxt<'tcx>,\n     param_env: ParamEnv<'tcx>,\n+    source_scopes: &'mir IndexVec<SourceScope, SourceScopeData<'tcx>>,\n+    local_decls: &'mir IndexVec<Local, LocalDecl<'tcx>>,\n     // Because we have `MutVisitor` we can't obtain the `SourceInfo` from a `Location`. So we store\n     // the last known `SourceInfo` here and just keep revisiting it.\n     source_info: Option<SourceInfo>,\n@@ -389,7 +391,14 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         )\n         .expect(\"failed to push initial stack frame\");\n \n-        ConstPropagator { ecx, tcx, param_env, source_info: None }\n+        ConstPropagator {\n+            ecx,\n+            tcx,\n+            param_env,\n+            source_scopes: &dummy_body.source_scopes,\n+            local_decls: &dummy_body.local_decls,\n+            source_info: None,\n+        }\n     }\n \n     fn get_const(&self, place: Place<'tcx>) -> Option<OpTy<'tcx>> {\n@@ -417,7 +426,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     }\n \n     fn lint_root(&self, source_info: SourceInfo) -> Option<HirId> {\n-        source_info.scope.lint_root(&self.ecx.frame().body.source_scopes)\n+        source_info.scope.lint_root(self.source_scopes)\n     }\n \n     fn use_ecx<F, T>(&mut self, f: F) -> Option<T>\n@@ -554,7 +563,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             let r = r?;\n             // We need the type of the LHS. We cannot use `place_layout` as that is the type\n             // of the result, which for checked binops is not the same!\n-            let left_ty = left.ty(&self.ecx.frame().body.local_decls, self.tcx);\n+            let left_ty = left.ty(self.local_decls, self.tcx);\n             let left_size = self.ecx.layout_of(left_ty).ok()?.size;\n             let right_size = r.layout.size;\n             let r_bits = r.to_scalar().ok();\n@@ -1008,7 +1017,7 @@ impl<'tcx> Visitor<'tcx> for ConstPropagator<'_, 'tcx> {\n                 assert!(\n                     self.get_const(local.into()).is_none()\n                         || self\n-                            .layout_of(self.ecx.frame().body.local_decls[local].ty)\n+                            .layout_of(self.local_decls[local].ty)\n                             .map_or(true, |layout| layout.is_zst())\n                 )\n             }"}]}