{"sha": "9d188e680e5558af2842231e6c32a676afc0086b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMTg4ZTY4MGU1NTU4YWYyODQyMjMxZTZjMzJhNjc2YWZjMDA4NmI=", "commit": {"author": {"name": "Tommy Ip", "email": "hkmp7tommy@gmail.com", "date": "2017-06-05T10:14:48Z"}, "committer": {"name": "Tommy Ip", "email": "hkmp7tommy@gmail.com", "date": "2017-06-05T11:01:58Z"}, "message": "Better closure error message\n\nUse tracked data introduced in #42196 to provide a better closure\nerror message by showing why a closure implements `FnOnce`.\n\n```\nerror[E0525]: expected a closure that implements the `Fn` trait, but\nthis closure only implements `FnOnce`\n --> $DIR/issue_26046.rs:4:19\n  |\n4 |       let closure = move || {\n  |  ___________________^\n5 | |         vec\n6 | |     };\n  | |_____^\n  |\nnote: closure is `FnOnce` because it moves the variable `vec` out of\nits environment\n --> $DIR/issue_26046.rs:5:9\n  |\n5 |         vec\n  |         ^^^\n\nerror: aborting due to previous error(s)\n```\n\nFixes #26046", "tree": {"sha": "56cab4b094a50d37addcb7d3f3064da309c5bf43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56cab4b094a50d37addcb7d3f3064da309c5bf43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d188e680e5558af2842231e6c32a676afc0086b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d188e680e5558af2842231e6c32a676afc0086b", "html_url": "https://github.com/rust-lang/rust/commit/9d188e680e5558af2842231e6c32a676afc0086b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d188e680e5558af2842231e6c32a676afc0086b/comments", "author": {"login": "tommyip", "id": 18504232, "node_id": "MDQ6VXNlcjE4NTA0MjMy", "avatar_url": "https://avatars.githubusercontent.com/u/18504232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tommyip", "html_url": "https://github.com/tommyip", "followers_url": "https://api.github.com/users/tommyip/followers", "following_url": "https://api.github.com/users/tommyip/following{/other_user}", "gists_url": "https://api.github.com/users/tommyip/gists{/gist_id}", "starred_url": "https://api.github.com/users/tommyip/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tommyip/subscriptions", "organizations_url": "https://api.github.com/users/tommyip/orgs", "repos_url": "https://api.github.com/users/tommyip/repos", "events_url": "https://api.github.com/users/tommyip/events{/privacy}", "received_events_url": "https://api.github.com/users/tommyip/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tommyip", "id": 18504232, "node_id": "MDQ6VXNlcjE4NTA0MjMy", "avatar_url": "https://avatars.githubusercontent.com/u/18504232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tommyip", "html_url": "https://github.com/tommyip", "followers_url": "https://api.github.com/users/tommyip/followers", "following_url": "https://api.github.com/users/tommyip/following{/other_user}", "gists_url": "https://api.github.com/users/tommyip/gists{/gist_id}", "starred_url": "https://api.github.com/users/tommyip/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tommyip/subscriptions", "organizations_url": "https://api.github.com/users/tommyip/orgs", "repos_url": "https://api.github.com/users/tommyip/repos", "events_url": "https://api.github.com/users/tommyip/events{/privacy}", "received_events_url": "https://api.github.com/users/tommyip/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c94a9ac8ae33e6580940e02abb425dd2fe69b5d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c94a9ac8ae33e6580940e02abb425dd2fe69b5d8", "html_url": "https://github.com/rust-lang/rust/commit/c94a9ac8ae33e6580940e02abb425dd2fe69b5d8"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "e29e4786671bf01ddcb86038165a3e874308b093", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9d188e680e5558af2842231e6c32a676afc0086b/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d188e680e5558af2842231e6c32a676afc0086b/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=9d188e680e5558af2842231e6c32a676afc0086b", "patch": "@@ -29,7 +29,7 @@ use hir::{self, intravisit, Local, Pat, Body};\n use hir::intravisit::{Visitor, NestedVisitorMap};\n use hir::map::NodeExpr;\n use hir::def_id::DefId;\n-use infer::{self, InferCtxt};\n+use infer::{self, InferCtxt, InferTables, InferTablesRef};\n use infer::type_variable::TypeVariableOrigin;\n use rustc::lint::builtin::EXTRA_REQUIREMENT_IN_IMPL;\n use std::fmt;\n@@ -640,16 +640,38 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     ty::Predicate::ClosureKind(closure_def_id, kind) => {\n                         let found_kind = self.closure_kind(closure_def_id).unwrap();\n                         let closure_span = self.tcx.hir.span_if_local(closure_def_id).unwrap();\n+                        let node_id = self.tcx.hir.as_local_node_id(closure_def_id).unwrap();\n                         let mut err = struct_span_err!(\n                             self.tcx.sess, closure_span, E0525,\n                             \"expected a closure that implements the `{}` trait, \\\n                                 but this closure only implements `{}`\",\n                             kind,\n                             found_kind);\n-                        err.span_note(\n-                            obligation.cause.span,\n-                            &format!(\"the requirement to implement \\\n-                                        `{}` derives from here\", kind));\n+\n+                        let infer_tables = match self.tables {\n+                            InferTables::Interned(tables) =>\n+                                Some(InferTablesRef::Interned(tables)),\n+                            InferTables::InProgress(tables) =>\n+                                Some(InferTablesRef::InProgress(tables.borrow())),\n+                            InferTables::Missing => None,\n+                        };\n+\n+                        if let Some(tables) = infer_tables {\n+                            if let Some(&(ty::ClosureKind::FnOnce, Some((span, name)))) =\n+                                tables.closure_kinds.get(&node_id)\n+                            {\n+                                err.span_note(\n+                                    span,\n+                                    &format!(\"closure is `FnOnce` because it moves the \\\n+                                              variable `{}` out of its environment\", name));\n+                            }\n+                        } else {\n+                            err.span_note(\n+                                obligation.cause.span,\n+                                &format!(\"the requirement to implement `{}` \\\n+                                          derives from here\", kind));\n+                        }\n+\n                         err.emit();\n                         return;\n                     }"}]}