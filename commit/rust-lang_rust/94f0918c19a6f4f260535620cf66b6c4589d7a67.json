{"sha": "94f0918c19a6f4f260535620cf66b6c4589d7a67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ZjA5MThjMTlhNmY0ZjI2MDUzNTYyMGNmNjZiNmM0NTg5ZDdhNjc=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2016-05-19T02:25:03Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2016-05-19T06:42:24Z"}, "message": "[MIR] Add PointerCast for Unsize casts of fat pointers.", "tree": {"sha": "2a969a30723bc5a2d37400dfdea25661518b494b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a969a30723bc5a2d37400dfdea25661518b494b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94f0918c19a6f4f260535620cf66b6c4589d7a67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94f0918c19a6f4f260535620cf66b6c4589d7a67", "html_url": "https://github.com/rust-lang/rust/commit/94f0918c19a6f4f260535620cf66b6c4589d7a67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94f0918c19a6f4f260535620cf66b6c4589d7a67/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a140454ea47b7fd107b6e963b7ea2aef74e9518", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a140454ea47b7fd107b6e963b7ea2aef74e9518", "html_url": "https://github.com/rust-lang/rust/commit/9a140454ea47b7fd107b6e963b7ea2aef74e9518"}], "stats": {"total": 72, "additions": 68, "deletions": 4}, "files": [{"sha": "0b54ccef7a395f99c03f2355305eb79f93150b91", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94f0918c19a6f4f260535620cf66b6c4589d7a67/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f0918c19a6f4f260535620cf66b6c4589d7a67/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=94f0918c19a6f4f260535620cf66b6c4589d7a67", "patch": "@@ -617,7 +617,13 @@ pub fn coerce_unsized_into<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         (&ty::TyRawPtr(..), &ty::TyRawPtr(..)) => {\n             let (base, info) = if common::type_is_fat_ptr(bcx.tcx(), src_ty) {\n                 // fat-ptr to fat-ptr unsize preserves the vtable\n-                load_fat_ptr(bcx, src, src_ty)\n+                // i.e. &'a fmt::Debug+Send => &'a fmt::Debug\n+                // So we need to pointercast the base to ensure\n+                // the types match up.\n+                let (base, info) = load_fat_ptr(bcx, src, src_ty);\n+                let llcast_ty = type_of::fat_ptr_base_ty(bcx.ccx(), dst_ty);\n+                let base = PointerCast(bcx, base, llcast_ty);\n+                (base, info)\n             } else {\n                 let base = load_ty(bcx, src, src_ty);\n                 unsize_thin_ptr(bcx, base, src_ty, dst_ty)"}, {"sha": "5945e8813a48ddc96101b5e700075973537b2cde", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/94f0918c19a6f4f260535620cf66b6c4589d7a67/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f0918c19a6f4f260535620cf66b6c4589d7a67/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=94f0918c19a6f4f260535620cf66b6c4589d7a67", "patch": "@@ -262,14 +262,17 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                         assert!(common::type_is_fat_ptr(bcx.tcx(), cast_ty));\n \n                         match operand.val {\n-                            OperandValue::FatPtr(..) => {\n+                            OperandValue::FatPtr(lldata, llextra) => {\n                                 // unsize from a fat pointer - this is a\n                                 // \"trait-object-to-supertrait\" coercion, for\n                                 // example,\n                                 //   &'a fmt::Debug+Send => &'a fmt::Debug,\n-                                // and is a no-op at the LLVM level\n+                                // So we need to pointercast the base to ensure\n+                                // the types match up.\n                                 self.set_operand_dropped(&bcx, source);\n-                                operand.val\n+                                let llcast_ty = type_of::fat_ptr_base_ty(bcx.ccx(), cast_ty);\n+                                let lldata = bcx.pointercast(lldata, llcast_ty);\n+                                OperandValue::FatPtr(lldata, llextra)\n                             }\n                             OperandValue::Immediate(lldata) => {\n                                 // \"standard\" unsize"}, {"sha": "e5acb9b6699bd2ea5bb6ce9924a6c8192f22a89e", "filename": "src/librustc_trans/type_of.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/94f0918c19a6f4f260535620cf66b6c4589d7a67/src%2Flibrustc_trans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f0918c19a6f4f260535620cf66b6c4589d7a67/src%2Flibrustc_trans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_of.rs?ref=94f0918c19a6f4f260535620cf66b6c4589d7a67", "patch": "@@ -157,6 +157,17 @@ pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Typ\n     llsizingty\n }\n \n+pub fn fat_ptr_base_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> Type {\n+    match ty.sty {\n+        ty::TyBox(t) |\n+        ty::TyRef(_, ty::TypeAndMut { ty: t, .. }) |\n+        ty::TyRawPtr(ty::TypeAndMut { ty: t, .. }) if !type_is_sized(ccx.tcx(), t) => {\n+            in_memory_type_of(ccx, t).ptr_to()\n+        }\n+        _ => bug!(\"expected fat ptr ty but got {:?}\", ty)\n+    }\n+}\n+\n fn unsized_info_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> Type {\n     let unsized_part = ccx.tcx().struct_tail(ty);\n     match unsized_part.sty {"}, {"sha": "a4b85bc7a091d89f3bb6fc71ba0482c7d2a67898", "filename": "src/test/run-pass/issue-33387.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/94f0918c19a6f4f260535620cf66b6c4589d7a67/src%2Ftest%2Frun-pass%2Fissue-33387.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f0918c19a6f4f260535620cf66b6c4589d7a67/src%2Ftest%2Frun-pass%2Fissue-33387.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-33387.rs?ref=94f0918c19a6f4f260535620cf66b6c4589d7a67", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+\n+use std::sync::Arc;\n+\n+trait Foo {\n+    fn get(&self) -> [u8; 2];\n+}\n+\n+impl Foo for [u8; 2] {\n+    fn get(&self) -> [u8; 2] {\n+        *self\n+    }\n+}\n+\n+struct Bar<T: ?Sized>(T);\n+\n+#[rustc_mir]\n+fn unsize_fat_ptr<'a>(x: &'a Bar<Foo + Send + 'a>) -> &'a Bar<Foo + 'a> {\n+    x\n+}\n+\n+#[rustc_mir]\n+fn unsize_nested_fat_ptr(x: Arc<Foo + Send>) -> Arc<Foo> {\n+    x\n+}\n+\n+#[rustc_mir]\n+fn main() {\n+    let x: Box<Bar<Foo + Send>> = Box::new(Bar([1,2]));\n+    assert_eq!(unsize_fat_ptr(&*x).0.get(), [1, 2]);\n+\n+    let x: Arc<Foo + Send> = Arc::new([3, 4]);\n+    assert_eq!(unsize_nested_fat_ptr(x).get(), [3, 4]);\n+}"}]}