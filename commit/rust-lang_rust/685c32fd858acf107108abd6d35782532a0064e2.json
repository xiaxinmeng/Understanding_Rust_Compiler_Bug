{"sha": "685c32fd858acf107108abd6d35782532a0064e2", "node_id": "C_kwDOAAsO6NoAKDY4NWMzMmZkODU4YWNmMTA3MTA4YWJkNmQzNTc4MjUzMmEwMDY0ZTI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-17T20:24:58Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-18T14:59:15Z"}, "message": "Sized, Copy/Clone", "tree": {"sha": "27f1a7914099257e56bd1767121939b32ebe6a26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27f1a7914099257e56bd1767121939b32ebe6a26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/685c32fd858acf107108abd6d35782532a0064e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/685c32fd858acf107108abd6d35782532a0064e2", "html_url": "https://github.com/rust-lang/rust/commit/685c32fd858acf107108abd6d35782532a0064e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/685c32fd858acf107108abd6d35782532a0064e2/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45aa5c0f90124e926662f2c2c2d9efca065e0397", "url": "https://api.github.com/repos/rust-lang/rust/commits/45aa5c0f90124e926662f2c2c2d9efca065e0397", "html_url": "https://github.com/rust-lang/rust/commit/45aa5c0f90124e926662f2c2c2d9efca065e0397"}], "stats": {"total": 154, "additions": 151, "deletions": 3}, "files": [{"sha": "2336fb53aec282a8e902bc408836033dfd42c80d", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/685c32fd858acf107108abd6d35782532a0064e2/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/685c32fd858acf107108abd6d35782532a0064e2/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=685c32fd858acf107108abd6d35782532a0064e2", "patch": "@@ -112,7 +112,13 @@ pub(super) trait GoalKind<'tcx>: TypeFoldable<'tcx> + Copy {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx>;\n+\n+    fn consider_builtin_copy_clone_candidate(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx>;\n }\n+\n impl<'tcx> EvalCtxt<'_, 'tcx> {\n     pub(super) fn assemble_and_evaluate_candidates<G: GoalKind<'tcx>>(\n         &mut self,\n@@ -214,6 +220,10 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             G::consider_trait_alias_candidate(self, goal)\n         } else if lang_items.sized_trait() == Some(trait_def_id) {\n             G::consider_builtin_sized_candidate(self, goal)\n+        } else if lang_items.copy_trait() == Some(trait_def_id)\n+            || lang_items.clone_trait() == Some(trait_def_id)\n+        {\n+            G::consider_builtin_copy_clone_candidate(self, goal)\n         } else {\n             Err(NoSolution)\n         };"}, {"sha": "5c1f3f02e93a84b19a431ec981163c7f79c53c35", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/685c32fd858acf107108abd6d35782532a0064e2/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/685c32fd858acf107108abd6d35782532a0064e2/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=685c32fd858acf107108abd6d35782532a0064e2", "patch": "@@ -347,6 +347,13 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n     ) -> QueryResult<'tcx> {\n         bug!(\"`Sized` does not have an associated type: {:?}\", goal);\n     }\n+\n+    fn consider_builtin_copy_clone_candidate(\n+        _ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx> {\n+        bug!(\"`Copy`/`Clone` does not have an associated type: {:?}\", goal);\n+    }\n }\n \n /// This behavior is also implemented in `rustc_ty_utils` and in the old `project` code."}, {"sha": "4d94265dc07f5cc5b638c484bced6d40c4cb2437", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 134, "deletions": 3, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/685c32fd858acf107108abd6d35782532a0064e2/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/685c32fd858acf107108abd6d35782532a0064e2/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=685c32fd858acf107108abd6d35782532a0064e2", "patch": "@@ -6,6 +6,7 @@ use super::assembly::{self, Candidate, CandidateSource};\n use super::infcx_ext::InferCtxtExt;\n use super::{EvalCtxt, Goal, QueryResult};\n use rustc_hir::def_id::DefId;\n+use rustc_hir::{Movability, Mutability};\n use rustc_infer::infer::InferCtxt;\n use rustc_infer::traits::query::NoSolution;\n use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n@@ -106,10 +107,27 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n     }\n \n     fn consider_builtin_sized_candidate(\n-        _ecx: &mut EvalCtxt<'_, 'tcx>,\n-        _goal: Goal<'tcx, Self>,\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n-        unimplemented!();\n+        ecx.infcx.probe(|_| {\n+            let constituent_tys =\n+                instantiate_constituent_tys_for_sized_trait(ecx.infcx, goal.predicate.self_ty())?;\n+            ecx.evaluate_goal_for_constituent_tys_and_make_canonical_response(goal, constituent_tys)\n+        })\n+    }\n+\n+    fn consider_builtin_copy_clone_candidate(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx> {\n+        ecx.infcx.probe(|_| {\n+            let constituent_tys = instantiate_constituent_tys_for_copy_clone_trait(\n+                ecx.infcx,\n+                goal.predicate.self_ty(),\n+            )?;\n+            ecx.evaluate_goal_for_constituent_tys_and_make_canonical_response(goal, constituent_tys)\n+        })\n     }\n }\n \n@@ -278,3 +296,116 @@ fn instantiate_constituent_tys_for_auto_trait<'tcx>(\n         }\n     }\n }\n+\n+fn instantiate_constituent_tys_for_sized_trait<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n+    ty: Ty<'tcx>,\n+) -> Result<Vec<Ty<'tcx>>, NoSolution> {\n+    match *ty.kind() {\n+        ty::Infer(ty::IntVar(_) | ty::FloatVar(_))\n+        | ty::Uint(_)\n+        | ty::Int(_)\n+        | ty::Bool\n+        | ty::Float(_)\n+        | ty::FnDef(..)\n+        | ty::FnPtr(_)\n+        | ty::RawPtr(..)\n+        | ty::Char\n+        | ty::Ref(..)\n+        | ty::Generator(..)\n+        | ty::GeneratorWitness(..)\n+        | ty::Array(..)\n+        | ty::Closure(..)\n+        | ty::Never\n+        | ty::Dynamic(_, _, ty::DynStar)\n+        | ty::Error(_) => Ok(vec![]),\n+\n+        ty::Str\n+        | ty::Slice(_)\n+        | ty::Dynamic(..)\n+        | ty::Foreign(..)\n+        | ty::Alias(..)\n+        | ty::Param(_) => Err(NoSolution),\n+\n+        ty::Infer(ty::TyVar(_)) => bug!(\"FIXME: ambiguous\"),\n+\n+        ty::Placeholder(..)\n+        | ty::Bound(..)\n+        | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => bug!(),\n+\n+        ty::Tuple(tys) => Ok(tys.to_vec()),\n+\n+        ty::Adt(def, substs) => {\n+            let sized_crit = def.sized_constraint(infcx.tcx);\n+            Ok(sized_crit\n+                .0\n+                .iter()\n+                .map(|ty| sized_crit.rebind(*ty).subst(infcx.tcx, substs))\n+                .collect())\n+        }\n+    }\n+}\n+\n+fn instantiate_constituent_tys_for_copy_clone_trait<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n+    ty: Ty<'tcx>,\n+) -> Result<Vec<Ty<'tcx>>, NoSolution> {\n+    match *ty.kind() {\n+        ty::Infer(ty::IntVar(_) | ty::FloatVar(_))\n+        | ty::FnDef(..)\n+        | ty::FnPtr(_)\n+        | ty::Error(_) => Ok(vec![]),\n+\n+        // Implementations are provided in core\n+        ty::Uint(_)\n+        | ty::Int(_)\n+        | ty::Bool\n+        | ty::Float(_)\n+        | ty::Char\n+        | ty::RawPtr(..)\n+        | ty::Never\n+        | ty::Ref(_, _, Mutability::Not)\n+        | ty::Array(..) => Err(NoSolution),\n+\n+        ty::Dynamic(..)\n+        | ty::Str\n+        | ty::Slice(_)\n+        | ty::Generator(_, _, Movability::Static)\n+        | ty::Foreign(..)\n+        | ty::Ref(_, _, Mutability::Mut)\n+        | ty::Adt(_, _)\n+        | ty::Alias(_, _)\n+        | ty::Param(_) => Err(NoSolution),\n+\n+        ty::Infer(ty::TyVar(_)) => bug!(\"FIXME: ambiguous\"),\n+\n+        ty::Placeholder(..)\n+        | ty::Bound(..)\n+        | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => bug!(),\n+\n+        ty::Tuple(tys) => Ok(tys.to_vec()),\n+\n+        ty::Closure(_, substs) => match *substs.as_closure().tupled_upvars_ty().kind() {\n+            ty::Tuple(tys) => Ok(tys.to_vec()),\n+            ty::Infer(ty::TyVar(_)) => bug!(\"FIXME: ambiguous\"),\n+            _ => bug!(),\n+        },\n+\n+        ty::Generator(_, substs, Movability::Movable) => {\n+            if infcx.tcx.features().generator_clone {\n+                let generator = substs.as_generator();\n+                match *generator.tupled_upvars_ty().kind() {\n+                    ty::Tuple(tys) => Ok(tys.iter().chain([generator.witness()]).collect()),\n+                    ty::Infer(ty::TyVar(_)) => bug!(\"FIXME: ambiguous\"),\n+                    _ => bug!(),\n+                }\n+            } else {\n+                Err(NoSolution)\n+            }\n+        }\n+\n+        ty::GeneratorWitness(types) => {\n+            Ok(infcx.replace_bound_vars_with_placeholders(types).to_vec())\n+        }\n+    }\n+}"}]}