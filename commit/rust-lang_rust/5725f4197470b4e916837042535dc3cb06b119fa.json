{"sha": "5725f4197470b4e916837042535dc3cb06b119fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MjVmNDE5NzQ3MGI0ZTkxNjgzNzA0MjUzNWRjM2NiMDZiMTE5ZmE=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-12-22T08:55:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-12-22T08:55:07Z"}, "message": "Merge pull request #2298 from davidalber/fix-2269\n\nAdding --version to cargo-fmt", "tree": {"sha": "0257cc0c55c38eb787ba49071525f646bf7adac6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0257cc0c55c38eb787ba49071525f646bf7adac6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5725f4197470b4e916837042535dc3cb06b119fa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaPMhrCRBK7hj4Ov3rIwAAdHIIABykg408aaiT3eNrvlei3cgu\narC3QSHdzGl9zljVBo22rjl8NHXgPaWXrvGKFvIfUtYJz9UcAg4m3M2Ef3K16eyz\nB31NeohswbQCdpRvHjgKM/x9azQo28xyFvzJEKrtSGrMgYmM9iSh25ii6nMDU4EU\nQMJq4QBlPzr6f1fkS3ZcbfczhPJxflEgPAKxYB3RR4UqXwgX6jI78diMGw9sB8I/\nQDc+2RqBsK5i/tf9X97MBpk/2LTi2Zl8BXUa8FldDPxjd+KPjUPAMAFsGHwQSjIF\n6ix7o9J5PJTbXBMkTL/zt5FEUi1Z0sPLysiI31tC7o68fWnOVtnbPEtw99WAgco=\n=FLvP\n-----END PGP SIGNATURE-----\n", "payload": "tree 0257cc0c55c38eb787ba49071525f646bf7adac6\nparent fb0e449ab33861e3939ad80c6b61f47d99f86e8b\nparent 09d0ca48920cafafe8e1a053ae355ee6edf9e7b7\nauthor Nick Cameron <nrc@ncameron.org> 1513932907 +1300\ncommitter GitHub <noreply@github.com> 1513932907 +1300\n\nMerge pull request #2298 from davidalber/fix-2269\n\nAdding --version to cargo-fmt"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5725f4197470b4e916837042535dc3cb06b119fa", "html_url": "https://github.com/rust-lang/rust/commit/5725f4197470b4e916837042535dc3cb06b119fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5725f4197470b4e916837042535dc3cb06b119fa/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb0e449ab33861e3939ad80c6b61f47d99f86e8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb0e449ab33861e3939ad80c6b61f47d99f86e8b", "html_url": "https://github.com/rust-lang/rust/commit/fb0e449ab33861e3939ad80c6b61f47d99f86e8b"}, {"sha": "09d0ca48920cafafe8e1a053ae355ee6edf9e7b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/09d0ca48920cafafe8e1a053ae355ee6edf9e7b7", "html_url": "https://github.com/rust-lang/rust/commit/09d0ca48920cafafe8e1a053ae355ee6edf9e7b7"}], "stats": {"total": 58, "additions": 35, "deletions": 23}, "files": [{"sha": "dda99b43d4b83c989cc47a38115aebfabe08e909", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 35, "deletions": 23, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/5725f4197470b4e916837042535dc3cb06b119fa/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5725f4197470b4e916837042535dc3cb06b119fa/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=5725f4197470b4e916837042535dc3cb06b119fa", "patch": "@@ -35,10 +35,10 @@ fn main() {\n     std::process::exit(exit_status);\n }\n \n-fn execute() -> i32 {\n-    let success = 0;\n-    let failure = 1;\n+const SUCCESS: i32 = 0;\n+const FAILURE: i32 = 1;\n \n+fn execute() -> i32 {\n     let mut opts = getopts::Options::new();\n     opts.optflag(\"h\", \"help\", \"show this message\");\n     opts.optflag(\"q\", \"quiet\", \"no output printed to stdout\");\n@@ -49,6 +49,7 @@ fn execute() -> i32 {\n         \"specify package to format (only usable in workspaces)\",\n         \"<package>\",\n     );\n+    opts.optflag(\"\", \"version\", \"print rustfmt version and exit\");\n     opts.optflag(\"\", \"all\", \"format all packages (only usable in workspaces)\");\n \n     // If there is any invalid argument passed to `cargo fmt`, return without formatting.\n@@ -58,7 +59,7 @@ fn execute() -> i32 {\n             is_package_arg = arg.starts_with(\"--package\");\n         } else if !is_package_arg {\n             print_usage_to_stderr(&opts, &format!(\"Invalid argument: `{}`.\", arg));\n-            return failure;\n+            return FAILURE;\n         } else {\n             is_package_arg = false;\n         }\n@@ -68,7 +69,7 @@ fn execute() -> i32 {\n         Ok(m) => m,\n         Err(e) => {\n             print_usage_to_stderr(&opts, &e.to_string());\n-            return failure;\n+            return FAILURE;\n         }\n     };\n \n@@ -78,30 +79,21 @@ fn execute() -> i32 {\n         (true, false) => Verbosity::Verbose,\n         (true, true) => {\n             print_usage_to_stderr(&opts, \"quiet mode and verbose mode are not compatible\");\n-            return failure;\n+            return FAILURE;\n         }\n     };\n \n     if matches.opt_present(\"h\") {\n         print_usage_to_stdout(&opts, \"\");\n-        return success;\n+        return SUCCESS;\n     }\n \n-    let strategy = CargoFmtStrategy::from_matches(&matches);\n-\n-    match format_crate(verbosity, &strategy) {\n-        Err(e) => {\n-            print_usage_to_stderr(&opts, &e.to_string());\n-            failure\n-        }\n-        Ok(status) => {\n-            if status.success() {\n-                success\n-            } else {\n-                status.code().unwrap_or(failure)\n-            }\n-        }\n+    if matches.opt_present(\"version\") {\n+        return handle_command_status(get_version(verbosity), &opts);\n     }\n+\n+    let strategy = CargoFmtStrategy::from_matches(&matches);\n+    handle_command_status(format_crate(verbosity, &strategy), &opts)\n }\n \n macro_rules! print_usage {\n@@ -130,6 +122,26 @@ pub enum Verbosity {\n     Quiet,\n }\n \n+fn handle_command_status(status: Result<ExitStatus, io::Error>, opts: &getopts::Options) -> i32 {\n+    match status {\n+        Err(e) => {\n+            print_usage_to_stderr(&opts, &e.to_string());\n+            FAILURE\n+        }\n+        Ok(status) => {\n+            if status.success() {\n+                SUCCESS\n+            } else {\n+                status.code().unwrap_or(FAILURE)\n+            }\n+        }\n+    }\n+}\n+\n+fn get_version(verbosity: Verbosity) -> Result<ExitStatus, io::Error> {\n+    run_rustfmt(&vec![], &vec![String::from(\"--version\")], verbosity)\n+}\n+\n fn format_crate(\n     verbosity: Verbosity,\n     strategy: &CargoFmtStrategy,\n@@ -152,7 +164,7 @@ fn format_crate(\n         .map(|t| t.path)\n         .collect();\n \n-    format_files(&files, &rustfmt_args, verbosity)\n+    run_rustfmt(&files, &rustfmt_args, verbosity)\n }\n \n fn get_fmt_args() -> Vec<String> {\n@@ -323,7 +335,7 @@ fn add_targets(target_paths: &[cargo_metadata::Target], targets: &mut HashSet<Ta\n     }\n }\n \n-fn format_files(\n+fn run_rustfmt(\n     files: &[PathBuf],\n     fmt_args: &[String],\n     verbosity: Verbosity,"}]}