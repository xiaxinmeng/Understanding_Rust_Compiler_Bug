{"sha": "e65bcff7d5aa8040058580ff256cc9521ff40f29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NWJjZmY3ZDVhYTgwNDAwNTg1ODBmZjI1NmNjOTUyMWZmNDBmMjk=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-07-04T07:15:18Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-07-31T20:14:06Z"}, "message": "Add some benchmarks for TLD", "tree": {"sha": "03d94fc81b2c61c75d11abff37fef4e0d9cc045a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03d94fc81b2c61c75d11abff37fef4e0d9cc045a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e65bcff7d5aa8040058580ff256cc9521ff40f29", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e65bcff7d5aa8040058580ff256cc9521ff40f29", "html_url": "https://github.com/rust-lang/rust/commit/e65bcff7d5aa8040058580ff256cc9521ff40f29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e65bcff7d5aa8040058580ff256cc9521ff40f29/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24a62e176ab1a91a249d040143cb91bac882cf7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/24a62e176ab1a91a249d040143cb91bac882cf7c", "html_url": "https://github.com/rust-lang/rust/commit/24a62e176ab1a91a249d040143cb91bac882cf7c"}], "stats": {"total": 146, "additions": 145, "deletions": 1}, "files": [{"sha": "c290b59b61b7a69e2b9dbd69b18b86cd462cb85c", "filename": "src/librustrt/local_data.rs", "status": "modified", "additions": 145, "deletions": 1, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/e65bcff7d5aa8040058580ff256cc9521ff40f29/src%2Flibrustrt%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e65bcff7d5aa8040058580ff256cc9521ff40f29/src%2Flibrustrt%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal_data.rs?ref=e65bcff7d5aa8040058580ff256cc9521ff40f29", "patch": "@@ -285,6 +285,20 @@ impl<T: 'static> KeyValue<T> {\n             None => None\n         }\n     }\n+\n+    // it's not clear if this is the right design for a public API, or if\n+    // there's even a need for this as a public API, but our benchmarks need\n+    // this to ensure consistent behavior on each run.\n+    #[cfg(test)]\n+    fn clear(&'static self) {\n+        let map = match unsafe { get_local_map() } {\n+            Some(map) => map,\n+            None => return\n+        };\n+        let keyval = key_to_key_value(self);\n+        self.replace(None); // ensure we have no outstanding borrows\n+        map.remove(&keyval);\n+    }\n }\n \n impl<T: 'static> Deref<T> for Ref<T> {\n@@ -392,6 +406,8 @@ impl Drop for TLDValue {\n \n #[cfg(test)]\n mod tests {\n+    extern crate test;\n+\n     use std::prelude::*;\n     use std::gc::{Gc, GC};\n     use super::*;\n@@ -495,6 +511,26 @@ mod tests {\n         fail!();\n     }\n \n+    #[test]\n+    fn test_cleanup_drops_values() {\n+        let (tx, rx) = channel::<()>();\n+        struct Dropper {\n+            tx: Sender<()>\n+        };\n+        impl Drop for Dropper {\n+            fn drop(&mut self) {\n+                self.tx.send(());\n+            }\n+        }\n+        static key: Key<Dropper> = &Key;\n+        let _ = task::try(proc() {\n+            key.replace(Some(Dropper{ tx: tx }));\n+        });\n+        // At this point the task has been cleaned up and the TLD dropped.\n+        // If the channel doesn't have a value now, then the Sender was leaked.\n+        assert_eq!(rx.try_recv(), Ok(()));\n+    }\n+\n     #[test]\n     fn test_static_pointer() {\n         static key: Key<&'static int> = &Key;\n@@ -543,9 +579,117 @@ mod tests {\n     #[should_fail]\n     fn test_nested_get_set1() {\n         static key: Key<int> = &Key;\n-        key.replace(Some(4));\n+        assert_eq!(key.replace(Some(4)), None);\n \n         let _k = key.get();\n         key.replace(Some(4));\n     }\n+\n+    // ClearKey is a RAII class that ensures the keys are cleared from the map.\n+    // This is so repeated runs of a benchmark don't bloat the map with extra\n+    // keys and distort the measurements.\n+    // It's not used on the tests because the tests run in separate tasks.\n+    struct ClearKey<T>(Key<T>);\n+    #[unsafe_destructor]\n+    impl<T: 'static> Drop for ClearKey<T> {\n+        fn drop(&mut self) {\n+            let ClearKey(ref key) = *self;\n+            key.clear();\n+        }\n+    }\n+\n+    #[bench]\n+    fn bench_replace_none(b: &mut test::Bencher) {\n+        static key: Key<uint> = &Key;\n+        let _clear = ClearKey(key);\n+        key.replace(None);\n+        b.iter(|| {\n+            key.replace(None)\n+        });\n+    }\n+\n+    #[bench]\n+    fn bench_replace_some(b: &mut test::Bencher) {\n+        static key: Key<uint> = &Key;\n+        let _clear = ClearKey(key);\n+        key.replace(Some(1u));\n+        b.iter(|| {\n+            key.replace(Some(2))\n+        });\n+    }\n+\n+    #[bench]\n+    fn bench_replace_none_some(b: &mut test::Bencher) {\n+        static key: Key<uint> = &Key;\n+        let _clear = ClearKey(key);\n+        key.replace(Some(0u));\n+        b.iter(|| {\n+            let old = key.replace(None).unwrap();\n+            let new = old + 1;\n+            key.replace(Some(new))\n+        });\n+    }\n+\n+    #[bench]\n+    fn bench_100_keys_replace_last(b: &mut test::Bencher) {\n+        static keys: [KeyValue<uint>, ..100] = [Key, ..100];\n+        let _clear = keys.iter().map(ClearKey).collect::<Vec<ClearKey<uint>>>();\n+        for (i, key) in keys.iter().enumerate() {\n+            key.replace(Some(i));\n+        }\n+        b.iter(|| {\n+            let key: Key<uint> = &keys[99];\n+            key.replace(Some(42))\n+        });\n+    }\n+\n+    #[bench]\n+    fn bench_1000_keys_replace_last(b: &mut test::Bencher) {\n+        static keys: [KeyValue<uint>, ..1000] = [Key, ..1000];\n+        let _clear = keys.iter().map(ClearKey).collect::<Vec<ClearKey<uint>>>();\n+        for (i, key) in keys.iter().enumerate() {\n+            key.replace(Some(i));\n+        }\n+        b.iter(|| {\n+            let key: Key<uint> = &keys[999];\n+            key.replace(Some(42))\n+        });\n+        for key in keys.iter() { key.clear(); }\n+    }\n+\n+    #[bench]\n+    fn bench_get(b: &mut test::Bencher) {\n+        static key: Key<uint> = &Key;\n+        let _clear = ClearKey(key);\n+        key.replace(Some(42));\n+        b.iter(|| {\n+            key.get()\n+        });\n+    }\n+\n+    #[bench]\n+    fn bench_100_keys_get_last(b: &mut test::Bencher) {\n+        static keys: [KeyValue<uint>, ..100] = [Key, ..100];\n+        let _clear = keys.iter().map(ClearKey).collect::<Vec<ClearKey<uint>>>();\n+        for (i, key) in keys.iter().enumerate() {\n+            key.replace(Some(i));\n+        }\n+        b.iter(|| {\n+            let key: Key<uint> = &keys[99];\n+            key.get()\n+        });\n+    }\n+\n+    #[bench]\n+    fn bench_1000_keys_get_last(b: &mut test::Bencher) {\n+        static keys: [KeyValue<uint>, ..1000] = [Key, ..1000];\n+        let _clear = keys.iter().map(ClearKey).collect::<Vec<ClearKey<uint>>>();\n+        for (i, key) in keys.iter().enumerate() {\n+            key.replace(Some(i));\n+        }\n+        b.iter(|| {\n+            let key: Key<uint> = &keys[999];\n+            key.get()\n+        });\n+    }\n }"}]}