{"sha": "13d636dff2a25b64ec8b7d661ef1ca5b9956a946", "node_id": "C_kwDOAAsO6NoAKDEzZDYzNmRmZjJhMjViNjRlYzhiN2Q2NjFlZjFjYTViOTk1NmE5NDY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-11T20:48:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-11T20:48:48Z"}, "message": "Rollup merge of #93782 - adamgemmell:dev/adagem01/split-pauth, r=Amanieu\n\nSplit `pauth` target feature\n\nPer discussion on https://github.com/rust-lang/rust/issues/86941 we'd like to split `pauth` into `paca` and `pacg` in order to better support possible future environments that only have the keys available for address or generic authentication. At the moment LLVM has the one `pauth` target_feature while Linux presents separate `paca` and `pacg` flags for feature detection.\n\nBecause the use of [target_feature](https://rust-lang.github.io/rfcs/2045-target-feature.html) will \"allow the compiler to generate code under the assumption that this code will only be reached in hosts that support the feature\", it does not make sense to simply translate `paca` into the LLVM feature `pauth`, as it will generate code as if `pacg` is available.\n\nTo accommodate this we error if only one of the two features is present. If LLVM splits them in the future we can remove this restriction without making a breaking change.\n\nr? ```@Amanieu```", "tree": {"sha": "ed940d5318610d3b8fa592224226604012679424", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed940d5318610d3b8fa592224226604012679424"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13d636dff2a25b64ec8b7d661ef1ca5b9956a946", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiBsuwCRBK7hj4Ov3rIwAAB0AIAJtBH7Ibpj+iVyeTe1qh+Per\nq1D/SoEndTW0YjVZ6OzM8bZYeImfSNZVE5SQtj/8UpWkYrIyoRoNvc0pXH9ClgDT\nGY5EQbMVxJOD4/6KaYXg3bPmOmtRuhtrYPTjD5eoCNoJeOaQFBJWNZZV/l364zMN\nzAIzfDonUx8us3A6nUra1/D79Q1LhAzCnsDK5Jj34zMTBz8AdrP/0td5TfRPuHbx\nwZc3dOZP62azspjiPNjyEiS1PUTX0DgNbwmvP0ljUJGekkyqtPjGjrIAYdjsWtWh\nAGC9O7eySxJM9cosCQ1eb3Xq7Y5JyU/kSbS5YR47HboDPwA9DJ7/Tvw+GPNPQG4=\n=Wv/q\n-----END PGP SIGNATURE-----\n", "payload": "tree ed940d5318610d3b8fa592224226604012679424\nparent ffa8d6b47d2b3f7e8931eae7d07f87e3585597b8\nparent d39a6377e9cfa108eb181ea892366e6b01fd753f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1644612528 +0100\ncommitter GitHub <noreply@github.com> 1644612528 +0100\n\nRollup merge of #93782 - adamgemmell:dev/adagem01/split-pauth, r=Amanieu\n\nSplit `pauth` target feature\n\nPer discussion on https://github.com/rust-lang/rust/issues/86941 we'd like to split `pauth` into `paca` and `pacg` in order to better support possible future environments that only have the keys available for address or generic authentication. At the moment LLVM has the one `pauth` target_feature while Linux presents separate `paca` and `pacg` flags for feature detection.\n\nBecause the use of [target_feature](https://rust-lang.github.io/rfcs/2045-target-feature.html) will \"allow the compiler to generate code under the assumption that this code will only be reached in hosts that support the feature\", it does not make sense to simply translate `paca` into the LLVM feature `pauth`, as it will generate code as if `pacg` is available.\n\nTo accommodate this we error if only one of the two features is present. If LLVM splits them in the future we can remove this restriction without making a breaking change.\n\nr? ```@Amanieu```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13d636dff2a25b64ec8b7d661ef1ca5b9956a946", "html_url": "https://github.com/rust-lang/rust/commit/13d636dff2a25b64ec8b7d661ef1ca5b9956a946", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13d636dff2a25b64ec8b7d661ef1ca5b9956a946/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffa8d6b47d2b3f7e8931eae7d07f87e3585597b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffa8d6b47d2b3f7e8931eae7d07f87e3585597b8", "html_url": "https://github.com/rust-lang/rust/commit/ffa8d6b47d2b3f7e8931eae7d07f87e3585597b8"}, {"sha": "d39a6377e9cfa108eb181ea892366e6b01fd753f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d39a6377e9cfa108eb181ea892366e6b01fd753f", "html_url": "https://github.com/rust-lang/rust/commit/d39a6377e9cfa108eb181ea892366e6b01fd753f"}], "stats": {"total": 163, "additions": 148, "deletions": 15}, "files": [{"sha": "2472789601e70dc1c1da8d98be08cb1682744369", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/13d636dff2a25b64ec8b7d661ef1ca5b9956a946/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d636dff2a25b64ec8b7d661ef1ca5b9956a946/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=13d636dff2a25b64ec8b7d661ef1ca5b9956a946", "patch": "@@ -322,12 +322,33 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n     // The target doesn't care; the subtarget reads our attribute.\n     apply_tune_cpu_attr(cx, llfn);\n \n-    let mut function_features = codegen_fn_attrs\n-        .target_features\n+    let function_features =\n+        codegen_fn_attrs.target_features.iter().map(|f| f.as_str()).collect::<Vec<&str>>();\n+\n+    if let Some(f) = llvm_util::check_tied_features(\n+        cx.tcx.sess,\n+        &function_features.iter().map(|f| (*f, true)).collect(),\n+    ) {\n+        let span = cx\n+            .tcx\n+            .get_attrs(instance.def_id())\n+            .iter()\n+            .find(|a| a.has_name(rustc_span::sym::target_feature))\n+            .map_or_else(|| cx.tcx.def_span(instance.def_id()), |a| a.span);\n+        let msg = format!(\n+            \"the target features {} must all be either enabled or disabled together\",\n+            f.join(\", \")\n+        );\n+        let mut err = cx.tcx.sess.struct_span_err(span, &msg);\n+        err.help(\"add the missing features in a `target_feature` attribute\");\n+        err.emit();\n+        return;\n+    }\n+\n+    let mut function_features = function_features\n         .iter()\n-        .flat_map(|f| {\n-            let feature = f.as_str();\n-            llvm_util::to_llvm_feature(cx.tcx.sess, feature)\n+        .flat_map(|feat| {\n+            llvm_util::to_llvm_feature(cx.tcx.sess, feat)\n                 .into_iter()\n                 .map(|f| format!(\"+{}\", f))\n                 .collect::<Vec<String>>()"}, {"sha": "727d079d83d937452ab3f3db0c44857a433f69a1", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 41, "deletions": 8, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/13d636dff2a25b64ec8b7d661ef1ca5b9956a946/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d636dff2a25b64ec8b7d661ef1ca5b9956a946/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=13d636dff2a25b64ec8b7d661ef1ca5b9956a946", "patch": "@@ -2,8 +2,8 @@ use crate::back::write::create_informational_target_machine;\n use crate::{llvm, llvm_util};\n use libc::c_int;\n use libloading::Library;\n-use rustc_codegen_ssa::target_features::supported_target_features;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_codegen_ssa::target_features::{supported_target_features, tied_target_features};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_fs_util::path_to_c_string;\n use rustc_middle::bug;\n use rustc_session::config::PrintRequest;\n@@ -191,10 +191,30 @@ pub fn to_llvm_feature<'a>(sess: &Session, s: &'a str) -> Vec<&'a str> {\n         (\"aarch64\", \"frintts\") => vec![\"fptoint\"],\n         (\"aarch64\", \"fcma\") => vec![\"complxnum\"],\n         (\"aarch64\", \"pmuv3\") => vec![\"perfmon\"],\n+        (\"aarch64\", \"paca\") => vec![\"pauth\"],\n+        (\"aarch64\", \"pacg\") => vec![\"pauth\"],\n         (_, s) => vec![s],\n     }\n }\n \n+// Given a map from target_features to whether they are enabled or disabled,\n+// ensure only valid combinations are allowed.\n+pub fn check_tied_features(\n+    sess: &Session,\n+    features: &FxHashMap<&str, bool>,\n+) -> Option<&'static [&'static str]> {\n+    for tied in tied_target_features(sess) {\n+        // Tied features must be set to the same value, or not set at all\n+        let mut tied_iter = tied.iter();\n+        let enabled = features.get(tied_iter.next().unwrap());\n+\n+        if tied_iter.any(|f| enabled != features.get(f)) {\n+            return Some(tied);\n+        }\n+    }\n+    None\n+}\n+\n pub fn target_features(sess: &Session) -> Vec<Symbol> {\n     let target_machine = create_informational_target_machine(sess);\n     supported_target_features(sess)\n@@ -395,15 +415,19 @@ pub fn llvm_global_features(sess: &Session) -> Vec<String> {\n         Some(_) | None => {}\n     };\n \n+    fn strip(s: &str) -> &str {\n+        s.strip_prefix(&['+', '-']).unwrap_or(s)\n+    }\n+\n     let filter = |s: &str| {\n         if s.is_empty() {\n             return vec![];\n         }\n-        let feature = if s.starts_with('+') || s.starts_with('-') {\n-            &s[1..]\n-        } else {\n+        let feature = strip(s);\n+        if feature == s {\n             return vec![s.to_string()];\n-        };\n+        }\n+\n         // Rustc-specific feature requests like `+crt-static` or `-crt-static`\n         // are not passed down to LLVM.\n         if RUSTC_SPECIFIC_FEATURES.contains(&feature) {\n@@ -420,8 +444,17 @@ pub fn llvm_global_features(sess: &Session) -> Vec<String> {\n     features.extend(sess.target.features.split(',').flat_map(&filter));\n \n     // -Ctarget-features\n-    features.extend(sess.opts.cg.target_feature.split(',').flat_map(&filter));\n-\n+    let feats: Vec<&str> = sess.opts.cg.target_feature.split(',').collect();\n+    // LLVM enables based on the last occurence of a feature\n+    if let Some(f) =\n+        check_tied_features(sess, &feats.iter().map(|f| (strip(f), !f.starts_with(\"-\"))).collect())\n+    {\n+        sess.err(&format!(\n+            \"Target features {} must all be enabled or disabled together\",\n+            f.join(\", \")\n+        ));\n+    }\n+    features.extend(feats.iter().flat_map(|&f| filter(f)));\n     features\n }\n "}, {"sha": "f31b0ee592e9cb9b98acededf52e8b6543239cee", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/13d636dff2a25b64ec8b7d661ef1ca5b9956a946/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d636dff2a25b64ec8b7d661ef1ca5b9956a946/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=13d636dff2a25b64ec8b7d661ef1ca5b9956a946", "patch": "@@ -74,8 +74,10 @@ const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"ssbs\", Some(sym::aarch64_target_feature)),\n     // FEAT_SB\n     (\"sb\", Some(sym::aarch64_target_feature)),\n-    // FEAT_PAUTH\n-    (\"pauth\", Some(sym::aarch64_target_feature)),\n+    // FEAT_PAUTH (address authentication)\n+    (\"paca\", Some(sym::aarch64_target_feature)),\n+    // FEAT_PAUTH (generic authentication)\n+    (\"pacg\", Some(sym::aarch64_target_feature)),\n     // FEAT_DPB\n     (\"dpb\", Some(sym::aarch64_target_feature)),\n     // FEAT_DPB2\n@@ -137,6 +139,8 @@ const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"v8.7a\", Some(sym::aarch64_target_feature)),\n ];\n \n+const AARCH64_TIED_FEATURES: &[&[&str]] = &[&[\"paca\", \"pacg\"]];\n+\n const X86_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"adx\", Some(sym::adx_target_feature)),\n     (\"aes\", None),\n@@ -256,6 +260,13 @@ pub fn supported_target_features(sess: &Session) -> &'static [(&'static str, Opt\n     }\n }\n \n+pub fn tied_target_features(sess: &Session) -> &'static [&'static [&'static str]] {\n+    match &*sess.target.arch {\n+        \"aarch64\" => AARCH64_TIED_FEATURES,\n+        _ => &[],\n+    }\n+}\n+\n pub(crate) fn provide(providers: &mut Providers) {\n     providers.supported_target_features = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);"}, {"sha": "2bc64a76aae8dfbbd68414fc6ce7d220ab114b9f", "filename": "src/test/ui/target-feature/tied-features-cli.one.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13d636dff2a25b64ec8b7d661ef1ca5b9956a946/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13d636dff2a25b64ec8b7d661ef1ca5b9956a946/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.one.stderr?ref=13d636dff2a25b64ec8b7d661ef1ca5b9956a946", "patch": "@@ -0,0 +1,4 @@\n+error: Target features paca, pacg must all be enabled or disabled together\n+\n+error: aborting due to previous error\n+"}, {"sha": "ea09d4fc460934c244260777a6b2597dd8a8f28e", "filename": "src/test/ui/target-feature/tied-features-cli.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/13d636dff2a25b64ec8b7d661ef1ca5b9956a946/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d636dff2a25b64ec8b7d661ef1ca5b9956a946/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.rs?ref=13d636dff2a25b64ec8b7d661ef1ca5b9956a946", "patch": "@@ -0,0 +1,9 @@\n+// only-aarch64\n+// revisions: one two three four\n+//[one] compile-flags: -C target-feature=+paca\n+//[two] compile-flags: -C target-feature=-pacg,+pacg\n+//[three] compile-flags: -C target-feature=+paca,+pacg,-paca\n+//[four] check-pass\n+//[four] compile-flags: -C target-feature=-paca,+pacg -C target-feature=+paca\n+\n+fn main() {}"}, {"sha": "2bc64a76aae8dfbbd68414fc6ce7d220ab114b9f", "filename": "src/test/ui/target-feature/tied-features-cli.three.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13d636dff2a25b64ec8b7d661ef1ca5b9956a946/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.three.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13d636dff2a25b64ec8b7d661ef1ca5b9956a946/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.three.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.three.stderr?ref=13d636dff2a25b64ec8b7d661ef1ca5b9956a946", "patch": "@@ -0,0 +1,4 @@\n+error: Target features paca, pacg must all be enabled or disabled together\n+\n+error: aborting due to previous error\n+"}, {"sha": "2bc64a76aae8dfbbd68414fc6ce7d220ab114b9f", "filename": "src/test/ui/target-feature/tied-features-cli.two.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13d636dff2a25b64ec8b7d661ef1ca5b9956a946/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.two.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13d636dff2a25b64ec8b7d661ef1ca5b9956a946/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.two.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.two.stderr?ref=13d636dff2a25b64ec8b7d661ef1ca5b9956a946", "patch": "@@ -0,0 +1,4 @@\n+error: Target features paca, pacg must all be enabled or disabled together\n+\n+error: aborting due to previous error\n+"}, {"sha": "86400361db3143e896ebbd69651223ebe2f38b21", "filename": "src/test/ui/target-feature/tied-features.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/13d636dff2a25b64ec8b7d661ef1ca5b9956a946/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d636dff2a25b64ec8b7d661ef1ca5b9956a946/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.rs?ref=13d636dff2a25b64ec8b7d661ef1ca5b9956a946", "patch": "@@ -0,0 +1,29 @@\n+// only-aarch64\n+// build-fail\n+\n+#![feature(aarch64_target_feature, target_feature_11)]\n+\n+fn main() {\n+    #[target_feature(enable = \"pacg\")]\n+    //~^ ERROR must all be either enabled or disabled together\n+    unsafe fn inner() {}\n+\n+    unsafe {\n+        foo();\n+        bar();\n+        baz();\n+        inner();\n+    }\n+}\n+\n+#[target_feature(enable = \"paca\")]\n+//~^ ERROR must all be either enabled or disabled together\n+unsafe fn foo() {}\n+\n+\n+#[target_feature(enable = \"paca,pacg\")]\n+unsafe fn bar() {}\n+\n+#[target_feature(enable = \"paca\")]\n+#[target_feature(enable = \"pacg\")]\n+unsafe fn baz() {}"}, {"sha": "0b1460e0b753fbffcaae0d828184d8140e1f22c7", "filename": "src/test/ui/target-feature/tied-features.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/13d636dff2a25b64ec8b7d661ef1ca5b9956a946/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13d636dff2a25b64ec8b7d661ef1ca5b9956a946/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.stderr?ref=13d636dff2a25b64ec8b7d661ef1ca5b9956a946", "patch": "@@ -0,0 +1,18 @@\n+error: the target features paca, pacg must all be either enabled or disabled together\n+  --> $DIR/tied-features.rs:7:5\n+   |\n+LL |     #[target_feature(enable = \"pacg\")]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add the missing features in a `target_feature` attribute\n+\n+error: the target features paca, pacg must all be either enabled or disabled together\n+  --> $DIR/tied-features.rs:19:1\n+   |\n+LL | #[target_feature(enable = \"paca\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add the missing features in a `target_feature` attribute\n+\n+error: aborting due to 2 previous errors\n+"}]}