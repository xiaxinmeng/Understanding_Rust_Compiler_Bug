{"sha": "637818fd858c30620afe8286f80d2c94b9aee07c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNzgxOGZkODU4YzMwNjIwYWZlODI4NmY4MGQyYzk0YjlhZWUwN2M=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-12-24T19:29:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-12-24T19:29:33Z"}, "message": "Rollup merge of #38568 - chris-morgan:fix-markdown-lists, r=frewsxcv\n\nFix Markdown list formatting.\n\nThe Markdown engine used by the book can cope with a single leading space on the list marker:\n\n    Like this:\n\n     * List item\n\n    Rather than like this:\n\n    * List item\n\n\u2026 but it\u2019s not the typical convention employed in the book, and moreover the Markdown engine used for producing the error index *can\u2019t* cope with it (its behaviour looks like a bug, as it appears to lose one of the two line breaks as well, but that\u2019s immaterial here).\n\nSo, we shift to a single convention which doesn\u2019t trigger bugs in the Markdown renderer.\n\n----\n\nSee https://doc.rust-lang.org/error-index.html#E0458 and https://doc.rust-lang.org/error-index.html#E0101 for the bad current rendering in the error index.", "tree": {"sha": "3b39ebe2960becd276e7e07d759da94657bfccb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b39ebe2960becd276e7e07d759da94657bfccb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/637818fd858c30620afe8286f80d2c94b9aee07c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/637818fd858c30620afe8286f80d2c94b9aee07c", "html_url": "https://github.com/rust-lang/rust/commit/637818fd858c30620afe8286f80d2c94b9aee07c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/637818fd858c30620afe8286f80d2c94b9aee07c/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8836a9da72073174aa1295952af2ad2475a88485", "url": "https://api.github.com/repos/rust-lang/rust/commits/8836a9da72073174aa1295952af2ad2475a88485", "html_url": "https://github.com/rust-lang/rust/commit/8836a9da72073174aa1295952af2ad2475a88485"}, {"sha": "40b9352aa371d5984c7e84cad5e2f597dbecf177", "url": "https://api.github.com/repos/rust-lang/rust/commits/40b9352aa371d5984c7e84cad5e2f597dbecf177", "html_url": "https://github.com/rust-lang/rust/commit/40b9352aa371d5984c7e84cad5e2f597dbecf177"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "a8f8224c58b81e3ca43c6b83bccfb2aa8715e712", "filename": "src/doc/book/casting-between-types.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/637818fd858c30620afe8286f80d2c94b9aee07c/src%2Fdoc%2Fbook%2Fcasting-between-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/637818fd858c30620afe8286f80d2c94b9aee07c/src%2Fdoc%2Fbook%2Fcasting-between-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fcasting-between-types.md?ref=637818fd858c30620afe8286f80d2c94b9aee07c", "patch": "@@ -16,18 +16,18 @@ function result.\n \n The most common case of coercion is removing mutability from a reference:\n \n- * `&mut T` to `&T`\n+* `&mut T` to `&T`\n \n An analogous conversion is to remove mutability from a\n [raw pointer](raw-pointers.md):\n \n- * `*mut T` to `*const T`\n+* `*mut T` to `*const T`\n \n References can also be coerced to raw pointers:\n \n- * `&T` to `*const T`\n+* `&T` to `*const T`\n \n- * `&mut T` to `*mut T`\n+* `&mut T` to `*mut T`\n \n Custom coercions may be defined using [`Deref`](deref-coercions.md).\n \n@@ -59,11 +59,11 @@ A cast `e as U` is valid if `e` has type `T` and `T` *coerces* to `U`.\n \n A cast `e as U` is also valid in any of the following cases:\n \n- * `e` has type `T` and `T` and `U` are any numeric types; *numeric-cast*\n- * `e` is a C-like enum (with no data attached to the variants),\n-    and `U` is an integer type; *enum-cast*\n- * `e` has type `bool` or `char` and `U` is an integer type; *prim-int-cast*\n- * `e` has type `u8` and `U` is `char`; *u8-char-cast*\n+* `e` has type `T` and `T` and `U` are any numeric types; *numeric-cast*\n+* `e` is a C-like enum (with no data attached to the variants),\n+   and `U` is an integer type; *enum-cast*\n+* `e` has type `bool` or `char` and `U` is an integer type; *prim-int-cast*\n+* `e` has type `u8` and `U` is `char`; *u8-char-cast*\n \n For example\n "}, {"sha": "d3a2b6f1683e228994ae2c66d84836edac885b6e", "filename": "src/librustc_metadata/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/637818fd858c30620afe8286f80d2c94b9aee07c/src%2Flibrustc_metadata%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637818fd858c30620afe8286f80d2c94b9aee07c/src%2Flibrustc_metadata%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdiagnostics.rs?ref=637818fd858c30620afe8286f80d2c94b9aee07c", "patch": "@@ -57,9 +57,9 @@ An unknown \"kind\" was specified for a link attribute. Erroneous code example:\n \n Please specify a valid \"kind\" value, from one of the following:\n \n- * static\n- * dylib\n- * framework\n+* static\n+* dylib\n+* framework\n \n \"##,\n "}, {"sha": "2b17ac94b2238fea3bc93fdb2278658b9713b1df", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/637818fd858c30620afe8286f80d2c94b9aee07c/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637818fd858c30620afe8286f80d2c94b9aee07c/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=637818fd858c30620afe8286f80d2c94b9aee07c", "patch": "@@ -1378,8 +1378,8 @@ let x = |_| {}; // error: cannot determine a type for this expression\n \n You have two possibilities to solve this situation:\n \n- * Give an explicit definition of the expression\n- * Infer the expression\n+* Give an explicit definition of the expression\n+* Infer the expression\n \n Examples:\n "}]}