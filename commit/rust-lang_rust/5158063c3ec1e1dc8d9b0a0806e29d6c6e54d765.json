{"sha": "5158063c3ec1e1dc8d9b0a0806e29d6c6e54d765", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNTgwNjNjM2VjMWUxZGM4ZDliMGEwODA2ZTI5ZDZjNmU1NGQ3NjU=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-04-11T23:53:32Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-04-11T23:54:33Z"}, "message": "Switch to multipart suggestions.\n\nThis commit changes the suggestion so that it is split into multiple\nparts in an effort to reduce the impact the applied suggestion could\nhave on formatting.", "tree": {"sha": "dcd9614b15aca3f853a831cc81c9f62e1790a689", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcd9614b15aca3f853a831cc81c9f62e1790a689"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5158063c3ec1e1dc8d9b0a0806e29d6c6e54d765", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlyv07kACgkQAXYLT59T\n8VTwuA//Wd6aUY1oCWKmWxjUIyugM8il26IrXvemGLE7TOzN0Wxdhn7dkFwxWHux\nnivlruO9meYdnwTH4ewcwrUetj0llOxjyfQJ7NscW2ChFjVmM72gIvv00yGbobXl\n9F5r3e3oxQO5eLwS16hMCp00PggXP3cdbpf8cXl7cDvS2aDsQY6z7duigRbFHbHN\nPrpB4juMExL2idIy69rk7g/kxFYlWb5ZQNtSzslsAFpBwJgjGal20UefuMKAQ/HA\nD/amIh/3otf2PwPEjsycGFzkQpA2tZhTffASVf/FLcl4rBNK4L8Cr6fK8T6LElsh\nePIu83AqPCNsMk22bq710SRdexlILNUcDMRKFYE6QcpcnkVjYdQTZm94rhsqrPDq\njRpjSURh8mW2UUQc9y4YM771/2gdcRGjyCRMYN3pBGHnxzhkHHl2nxyuXbtnJlgq\nbzDTqwri7qHt4SHlK5bjv168RM8v3X+v7S1nuNCU70/Zuo2yGEmFuPB3hqVVcQ1G\nXnNRmqVo7rQVBfqI6guj5RmABPeVUehK6B6UNXnLjLk9w0pAQH9bZumscb3cGZyH\nyUuXHBnzDhEgVv8fkXKeL7nmoj/tOrk0n6mrWiuRK2wOF3YKLGzh9U8Gtte+86U5\nw2vzhinXuOvyEZ6a7RChQ5+NH5NcijRGfZB/UKPYTRsfKDL7j+8=\n=6q+V\n-----END PGP SIGNATURE-----", "payload": "tree dcd9614b15aca3f853a831cc81c9f62e1790a689\nparent 137ffa10229bfec497a446d24045388ee3c418d6\nauthor David Wood <david@davidtw.co> 1555026812 +0200\ncommitter David Wood <david@davidtw.co> 1555026873 +0200\n\nSwitch to multipart suggestions.\n\nThis commit changes the suggestion so that it is split into multiple\nparts in an effort to reduce the impact the applied suggestion could\nhave on formatting.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5158063c3ec1e1dc8d9b0a0806e29d6c6e54d765", "html_url": "https://github.com/rust-lang/rust/commit/5158063c3ec1e1dc8d9b0a0806e29d6c6e54d765", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5158063c3ec1e1dc8d9b0a0806e29d6c6e54d765/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "137ffa10229bfec497a446d24045388ee3c418d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/137ffa10229bfec497a446d24045388ee3c418d6", "html_url": "https://github.com/rust-lang/rust/commit/137ffa10229bfec497a446d24045388ee3c418d6"}], "stats": {"total": 276, "additions": 68, "deletions": 208}, "files": [{"sha": "931bce91d7d43afe158de1308d053b4d0d8a9cd9", "filename": "src/librustc_resolve/error_reporting.rs", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/5158063c3ec1e1dc8d9b0a0806e29d6c6e54d765/src%2Flibrustc_resolve%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5158063c3ec1e1dc8d9b0a0806e29d6c6e54d765/src%2Flibrustc_resolve%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_reporting.rs?ref=5158063c3ec1e1dc8d9b0a0806e29d6c6e54d765", "patch": "@@ -617,14 +617,12 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                 _ => format!(\"{}\", ident),\n             };\n \n-            // Assume this is the easy case of `use issue_59764::foo::makro;` and just remove\n-            // intermediate segments.\n-            let (mut span, mut correction) = (directive.span,\n-                                              format!(\"{}::{}\", module_name, import));\n-\n-            if directive.is_nested() {\n-                span = directive.use_span;\n-\n+            let mut corrections: Vec<(Span, String)> = Vec::new();\n+            if !directive.is_nested() {\n+                // Assume this is the easy case of `use issue_59764::foo::makro;` and just remove\n+                // intermediate segments.\n+                corrections.push((directive.span, format!(\"{}::{}\", module_name, import)));\n+            } else {\n                 // Find the binding span (and any trailing commas and spaces).\n                 //   ie. `use a::b::{c, d, e};`\n                 //                      ^^^\n@@ -652,6 +650,9 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                 }\n                 debug!(\"check_for_module_export_macro: removal_span={:?}\", removal_span);\n \n+                // Remove the `removal_span`.\n+                corrections.push((removal_span, \"\".to_string()));\n+\n                 // Find the span after the crate name and if it has nested imports immediatately\n                 // after the crate name already.\n                 //   ie. `use a::b::{c, d};`\n@@ -666,34 +667,32 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n \n                 let source_map = self.resolver.session.source_map();\n \n-                // Remove two bytes at the end to keep all but the `};` characters.\n-                //   ie. `{b::{c, d}, e::{f, g}};`\n-                //        ^^^^^^^^^^^^^^^^^^^^^\n-                let end_bytes = BytePos(if has_nested { 2 } else { 1 });\n-                let mut remaining_span = after_crate_name.with_hi(\n-                    after_crate_name.hi() - end_bytes);\n-                if has_nested {\n-                    // Remove two bytes at the start to keep all but the initial `{` character.\n-                    //   ie. `{b::{c, d}, e::{f, g}`\n-                    //         ^^^^^^^^^^^^^^^^^^^^\n-                    remaining_span = remaining_span.with_lo(after_crate_name.lo() + BytePos(1));\n+                // Add the import to the start, with a `{` if required.\n+                let start_point = source_map.start_point(after_crate_name);\n+                if let Ok(start_snippet) = source_map.span_to_snippet(start_point) {\n+                    corrections.push((\n+                        start_point,\n+                        if has_nested {\n+                            // In this case, `start_snippet` must equal '{'.\n+                            format!(\"{}{}, \", start_snippet, import)\n+                        } else {\n+                            // In this case, add a `{`, then the moved import, then whatever\n+                            // was there before.\n+                            format!(\"{{{}, {}\", import, start_snippet)\n+                        }\n+                    ));\n                 }\n \n-                // Calculate the number of characters into a snippet to remove the removal\n-                // span.\n-                let lo = removal_span.lo() - remaining_span.lo();\n-                let hi = lo + (removal_span.hi() - removal_span.lo());\n-                if let Ok(mut remaining) = source_map.span_to_snippet(remaining_span) {\n-                    // Remove the original location of the binding.\n-                    remaining.replace_range((lo.0 as usize)..(hi.0 as usize), \"\");\n-                    correction = format!(\"use {}::{{{}, {}}};\", module_name, import, remaining);\n+                // Add a `};` to the end if nested, matching the `{` added at the start.\n+                if !has_nested {\n+                    corrections.push((source_map.end_point(after_crate_name),\n+                                     \"};\".to_string()));\n                 }\n             }\n \n             let suggestion = Some((\n-                span,\n+                corrections,\n                 String::from(\"a macro with this name exists at the root of the crate\"),\n-                correction,\n                 Applicability::MaybeIncorrect,\n             ));\n             let note = vec!["}, {"sha": "c1353d771c26fc55ac6d9f6377b090db0e6c25f9", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5158063c3ec1e1dc8d9b0a0806e29d6c6e54d765/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5158063c3ec1e1dc8d9b0a0806e29d6c6e54d765/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5158063c3ec1e1dc8d9b0a0806e29d6c6e54d765", "patch": "@@ -139,8 +139,8 @@ impl Ord for BindingError {\n     }\n }\n \n-/// A span, message, replacement text, and applicability.\n-type Suggestion = (Span, String, String, Applicability);\n+/// A vector of spans and replacements, a message and applicability.\n+type Suggestion = (Vec<(Span, String)>, String, Applicability);\n \n enum ResolutionError<'a> {\n     /// Error E0401: can't use type or const parameters from outer function.\n@@ -390,8 +390,8 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver<'_>,\n                                            \"failed to resolve: {}\", &label);\n             err.span_label(span, label);\n \n-            if let Some((span, msg, suggestion, applicability)) = suggestion {\n-                err.span_suggestion(span, &msg, suggestion, applicability);\n+            if let Some((suggestions, msg, applicability)) = suggestion {\n+                err.multipart_suggestion(&msg, suggestions, applicability);\n             }\n \n             err\n@@ -3774,9 +3774,8 @@ impl<'a> Resolver<'a> {\n                             (\n                                 String::from(\"unresolved import\"),\n                                 Some((\n-                                    ident.span,\n+                                    vec![(ident.span, candidate.path.to_string())],\n                                     String::from(\"a similar path exists\"),\n-                                    candidate.path.to_string(),\n                                     Applicability::MaybeIncorrect,\n                                 )),\n                             )"}, {"sha": "62af6e19603c4beeb29a184c5705ab8783857c54", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5158063c3ec1e1dc8d9b0a0806e29d6c6e54d765/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5158063c3ec1e1dc8d9b0a0806e29d6c6e54d765/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=5158063c3ec1e1dc8d9b0a0806e29d6c6e54d765", "patch": "@@ -793,8 +793,8 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                 diag.span_label(err.span, label);\n             }\n \n-            if let Some((span, msg, suggestion, applicability)) = err.suggestion {\n-                diag.span_suggestion(span, &msg, suggestion, applicability);\n+            if let Some((suggestions, msg, applicability)) = err.suggestion {\n+                diag.multipart_suggestion(&msg, suggestions, applicability);\n             }\n         }\n \n@@ -947,9 +947,8 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                                 label: None,\n                                 note,\n                                 suggestion: Some((\n-                                    span,\n+                                    vec![(span, Segment::names_to_string(&suggestion))],\n                                     String::from(\"a similar path exists\"),\n-                                    Segment::names_to_string(&suggestion),\n                                     Applicability::MaybeIncorrect,\n                                 )),\n                             }\n@@ -1113,8 +1112,9 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n \n                 let lev_suggestion = find_best_match_for_name(names, &ident.as_str(), None)\n                    .map(|suggestion|\n-                        (ident.span, String::from(\"a similar name exists in the module\"),\n-                         suggestion.to_string(), Applicability::MaybeIncorrect)\n+                        (vec![(ident.span, suggestion.to_string())],\n+                         String::from(\"a similar name exists in the module\"),\n+                         Applicability::MaybeIncorrect)\n                     );\n \n                 let (suggestion, note) = match self.check_for_module_export_macro("}, {"sha": "ad3bab50cfca33e49fcdf4250a2d5acb00f84115", "filename": "src/test/ui/issue-59764.fixed", "status": "removed", "additions": 0, "deletions": 134, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/137ffa10229bfec497a446d24045388ee3c418d6/src%2Ftest%2Fui%2Fissue-59764.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/137ffa10229bfec497a446d24045388ee3c418d6/src%2Ftest%2Fui%2Fissue-59764.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-59764.fixed?ref=137ffa10229bfec497a446d24045388ee3c418d6", "patch": "@@ -1,134 +0,0 @@\n-// aux-build:issue-59764.rs\n-// compile-flags:--extern issue_59764\n-// edition:2018\n-// run-rustfix\n-\n-#![allow(warnings)]\n-\n-// This tests the suggestion to import macros from the root of a crate. This aims to capture\n-// the case where a user attempts to import a macro from the definition location instead of the\n-// root of the crate and the macro is annotated with `#![macro_export]`.\n-\n-// Edge cases..\n-\n-mod multiple_imports_same_line_at_end {\n-    use issue_59764::{makro, foo::{baz}};\n-    //~^ ERROR unresolved import `issue_59764::foo::makro` [E0432]\n-}\n-\n-mod multiple_imports_multiline_at_end_trailing_comma {\n-    use issue_59764::{makro, foo::{\n-        baz,\n-        //~ ERROR unresolved import `issue_59764::foo::makro` [E0432]\n-    }};\n-}\n-\n-mod multiple_imports_multiline_at_end {\n-    use issue_59764::{makro, foo::{\n-        baz,\n-        //~ ERROR unresolved import `issue_59764::foo::makro` [E0432]\n-    }};\n-}\n-\n-mod multiple_imports_same_line_in_middle {\n-    use issue_59764::{makro, foo::{baz, foobar}};\n-    //~^ ERROR unresolved import `issue_59764::foo::makro` [E0432]\n-}\n-\n-mod multiple_imports_multiline_in_middle_trailing_comma {\n-    use issue_59764::{makro, foo::{\n-        baz,\n-        //~ ERROR unresolved import `issue_59764::foo::makro` [E0432]\n-        foobar,\n-    }};\n-}\n-\n-mod multiple_imports_multiline_in_middle {\n-    use issue_59764::{makro, foo::{\n-        baz,\n-        //~ ERROR unresolved import `issue_59764::foo::makro` [E0432]\n-        foobar\n-    }};\n-}\n-\n-mod nested_imports {\n-    use issue_59764::{makro, foobaz};\n-    //~^ ERROR unresolved import `issue_59764::foo::makro` [E0432]\n-}\n-\n-mod nested_multiple_imports {\n-    use issue_59764::{makro, foobaz, foo::{baz}};\n-    //~^ ERROR unresolved import `issue_59764::foo::makro` [E0432]\n-}\n-\n-mod nested_multiline_multiple_imports_trailing_comma {\n-    use issue_59764::{makro, \n-        foobaz,\n-        foo::{\n-            baz,\n-            //~ ERROR unresolved import `issue_59764::foo::makro` [E0432]\n-        },\n-    };\n-}\n-\n-mod nested_multiline_multiple_imports {\n-    use issue_59764::{makro, \n-        foobaz,\n-        foo::{\n-            baz,\n-            //~ ERROR unresolved import `issue_59764::foo::makro` [E0432]\n-        }\n-    };\n-}\n-\n-mod doubly_nested_multiple_imports {\n-    use issue_59764::{makro, foobaz, foo::{baz, barbaz::{barfoo}}};\n-    //~^ ERROR unresolved import `issue_59764::foo::makro` [E0432]\n-}\n-\n-mod doubly_multiline_nested_multiple_imports {\n-    use issue_59764::{makro, \n-        foobaz,\n-        foo::{\n-            baz,\n-            //~ ERROR unresolved import `issue_59764::foo::makro` [E0432]\n-            barbaz::{\n-                barfoo,\n-            }\n-        }\n-    };\n-}\n-\n-mod renamed_import {\n-    use issue_59764::makro as baz;\n-    //~^ ERROR unresolved import `issue_59764::foo::makro` [E0432]\n-}\n-\n-mod renamed_multiple_imports {\n-    use issue_59764::{makro as foobar, foo::{baz}};\n-    //~^ ERROR unresolved import `issue_59764::foo::makro` [E0432]\n-}\n-\n-mod lots_of_whitespace {\n-    use issue_59764::{makro as foobar, \n-\n-            foobaz,\n-\n-\n-            foo::{baz} //~ ERROR unresolved import `issue_59764::foo::makro` [E0432]\n-\n-        };\n-}\n-\n-// Simple case..\n-\n-use issue_59764::makro;\n-//~^ ERROR unresolved import `issue_59764::foo::makro` [E0432]\n-\n-makro!(bar);\n-//~^ ERROR cannot determine resolution for the macro `makro`\n-\n-fn main() {\n-    bar();\n-    //~^ ERROR cannot find function `bar` in this scope [E0425]\n-}"}, {"sha": "09dee8c2732681e4f2298b3a1a51b58872c5ee9d", "filename": "src/test/ui/issue-59764.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5158063c3ec1e1dc8d9b0a0806e29d6c6e54d765/src%2Ftest%2Fui%2Fissue-59764.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5158063c3ec1e1dc8d9b0a0806e29d6c6e54d765/src%2Ftest%2Fui%2Fissue-59764.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-59764.rs?ref=5158063c3ec1e1dc8d9b0a0806e29d6c6e54d765", "patch": "@@ -1,7 +1,6 @@\n // aux-build:issue-59764.rs\n // compile-flags:--extern issue_59764\n // edition:2018\n-// run-rustfix\n \n #![allow(warnings)]\n "}, {"sha": "924e69f5f97033fb32a1d9368e62ff71b5cc98ff", "filename": "src/test/ui/issue-59764.stderr", "status": "modified", "additions": 29, "deletions": 32, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/5158063c3ec1e1dc8d9b0a0806e29d6c6e54d765/src%2Ftest%2Fui%2Fissue-59764.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5158063c3ec1e1dc8d9b0a0806e29d6c6e54d765/src%2Ftest%2Fui%2Fissue-59764.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-59764.stderr?ref=5158063c3ec1e1dc8d9b0a0806e29d6c6e54d765", "patch": "@@ -1,5 +1,5 @@\n error[E0432]: unresolved import `issue_59764::foo::makro`\n-  --> $DIR/issue-59764.rs:15:33\n+  --> $DIR/issue-59764.rs:14:33\n    |\n LL |     use issue_59764::foo::{baz, makro};\n    |                                 ^^^^^ no `makro` in `foo`\n@@ -8,10 +8,10 @@ LL |     use issue_59764::foo::{baz, makro};\n help: a macro with this name exists at the root of the crate\n    |\n LL |     use issue_59764::{makro, foo::{baz}};\n-   |\n+   |                      ^^^^^^^^^       --^^\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n-  --> $DIR/issue-59764.rs:22:9\n+  --> $DIR/issue-59764.rs:21:9\n    |\n LL |         makro,\n    |         ^^^^^ no `makro` in `foo`\n@@ -26,7 +26,7 @@ LL |     }};\n    |\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n-  --> $DIR/issue-59764.rs:29:9\n+  --> $DIR/issue-59764.rs:28:9\n    |\n LL |         makro\n    |         ^^^^^ no `makro` in `foo`\n@@ -41,7 +41,7 @@ LL |     }};\n    |\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n-  --> $DIR/issue-59764.rs:34:33\n+  --> $DIR/issue-59764.rs:33:33\n    |\n LL |     use issue_59764::foo::{baz, makro, foobar};\n    |                                 ^^^^^ no `makro` in `foo`\n@@ -50,10 +50,10 @@ LL |     use issue_59764::foo::{baz, makro, foobar};\n help: a macro with this name exists at the root of the crate\n    |\n LL |     use issue_59764::{makro, foo::{baz, foobar}};\n-   |\n+   |                      ^^^^^^^^^         --      ^^\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n-  --> $DIR/issue-59764.rs:41:9\n+  --> $DIR/issue-59764.rs:40:9\n    |\n LL |         makro,\n    |         ^^^^^ no `makro` in `foo`\n@@ -69,7 +69,7 @@ LL |     }};\n    |\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n-  --> $DIR/issue-59764.rs:49:9\n+  --> $DIR/issue-59764.rs:48:9\n    |\n LL |         makro,\n    |         ^^^^^ no `makro` in `foo`\n@@ -85,7 +85,7 @@ LL |     }};\n    |\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n-  --> $DIR/issue-59764.rs:55:31\n+  --> $DIR/issue-59764.rs:54:31\n    |\n LL |     use issue_59764::{foobaz, foo::makro};\n    |                               ^^^^^^^^^^ no `makro` in `foo`\n@@ -94,10 +94,10 @@ LL |     use issue_59764::{foobaz, foo::makro};\n help: a macro with this name exists at the root of the crate\n    |\n LL |     use issue_59764::{makro, foobaz};\n-   |\n+   |                      ^^^^^^^      --\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n-  --> $DIR/issue-59764.rs:60:42\n+  --> $DIR/issue-59764.rs:59:42\n    |\n LL |     use issue_59764::{foobaz, foo::{baz, makro}};\n    |                                          ^^^^^ no `makro` in `foo`\n@@ -106,10 +106,10 @@ LL |     use issue_59764::{foobaz, foo::{baz, makro}};\n help: a macro with this name exists at the root of the crate\n    |\n LL |     use issue_59764::{makro, foobaz, foo::{baz}};\n-   |\n+   |                      ^^^^^^^                 --\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n-  --> $DIR/issue-59764.rs:69:13\n+  --> $DIR/issue-59764.rs:68:13\n    |\n LL |             makro,\n    |             ^^^^^ no `makro` in `foo`\n@@ -122,11 +122,10 @@ LL |         foobaz,\n LL |         foo::{\n LL |             baz,\n LL |\n-LL |         },\n- ...\n+   |\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n-  --> $DIR/issue-59764.rs:79:13\n+  --> $DIR/issue-59764.rs:78:13\n    |\n LL |             makro\n    |             ^^^^^ no `makro` in `foo`\n@@ -139,11 +138,10 @@ LL |         foobaz,\n LL |         foo::{\n LL |             baz,\n LL |\n-LL |         }\n- ...\n+   |\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n-  --> $DIR/issue-59764.rs:85:42\n+  --> $DIR/issue-59764.rs:84:42\n    |\n LL |     use issue_59764::{foobaz, foo::{baz, makro, barbaz::{barfoo}}};\n    |                                          ^^^^^ no `makro` in `foo`\n@@ -152,10 +150,10 @@ LL |     use issue_59764::{foobaz, foo::{baz, makro, barbaz::{barfoo}}};\n help: a macro with this name exists at the root of the crate\n    |\n LL |     use issue_59764::{makro, foobaz, foo::{baz, barbaz::{barfoo}}};\n-   |\n+   |                      ^^^^^^^                   --\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n-  --> $DIR/issue-59764.rs:94:13\n+  --> $DIR/issue-59764.rs:93:13\n    |\n LL |             makro,\n    |             ^^^^^ no `makro` in `foo`\n@@ -168,11 +166,10 @@ LL |         foobaz,\n LL |         foo::{\n LL |             baz,\n LL |\n-LL |             barbaz::{\n- ...\n+   |\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n-  --> $DIR/issue-59764.rs:103:9\n+  --> $DIR/issue-59764.rs:102:9\n    |\n LL |     use issue_59764::foo::makro as baz;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `makro` in `foo`\n@@ -184,7 +181,7 @@ LL |     use issue_59764::makro as baz;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n-  --> $DIR/issue-59764.rs:108:33\n+  --> $DIR/issue-59764.rs:107:33\n    |\n LL |     use issue_59764::foo::{baz, makro as foobar};\n    |                                 ^^^^^^^^^^^^^^^ no `makro` in `foo`\n@@ -193,27 +190,27 @@ LL |     use issue_59764::foo::{baz, makro as foobar};\n help: a macro with this name exists at the root of the crate\n    |\n LL |     use issue_59764::{makro as foobar, foo::{baz}};\n-   |\n+   |                      ^^^^^^^^^^^^^^^^^^^       --^^\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n-  --> $DIR/issue-59764.rs:121:17\n+  --> $DIR/issue-59764.rs:120:17\n    |\n LL |                 makro as foobar}\n    |                 ^^^^^^^^^^^^^^^ no `makro` in `foo`\n    |\n    = note: this could be because a macro annotated with `#[macro_export]` will be exported at the root of the crate instead of the module where it is defined\n help: a macro with this name exists at the root of the crate\n    |\n-LL |     use issue_59764::{makro as foobar, \n+LL |         issue_59764::{makro as foobar, \n LL | \n LL |             foobaz,\n LL | \n LL | \n LL |             foo::{baz}\n- ...\n+   |\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n-  --> $DIR/issue-59764.rs:128:5\n+  --> $DIR/issue-59764.rs:127:5\n    |\n LL | use issue_59764::foo::makro;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ no `makro` in `foo`\n@@ -225,15 +222,15 @@ LL | use issue_59764::makro;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: cannot determine resolution for the macro `makro`\n-  --> $DIR/issue-59764.rs:131:1\n+  --> $DIR/issue-59764.rs:130:1\n    |\n LL | makro!(bar);\n    | ^^^^^\n    |\n    = note: import resolution is stuck, try simplifying macro imports\n \n error[E0425]: cannot find function `bar` in this scope\n-  --> $DIR/issue-59764.rs:135:5\n+  --> $DIR/issue-59764.rs:134:5\n    |\n LL |     bar();\n    |     ^^^ not found in this scope"}]}