{"sha": "dad194a10d1e05d77516f4052859c2f9315e434a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZDE5NGExMGQxZTA1ZDc3NTE2ZjQwNTI4NTljMmY5MzE1ZTQzNGE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-03-01T15:50:08Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-04-06T10:14:08Z"}, "message": "Allow for representing exported monomorphizations in crate metadata.", "tree": {"sha": "5bf9cca8d51613e262725d60e129f717f3288810", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bf9cca8d51613e262725d60e129f717f3288810"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dad194a10d1e05d77516f4052859c2f9315e434a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dad194a10d1e05d77516f4052859c2f9315e434a", "html_url": "https://github.com/rust-lang/rust/commit/dad194a10d1e05d77516f4052859c2f9315e434a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dad194a10d1e05d77516f4052859c2f9315e434a/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3b5451991fb1bc09a809547374883340117236b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3b5451991fb1bc09a809547374883340117236b", "html_url": "https://github.com/rust-lang/rust/commit/d3b5451991fb1bc09a809547374883340117236b"}], "stats": {"total": 128, "additions": 89, "deletions": 39}, "files": [{"sha": "2652eb0091cb1bf9862141670e9363ece89291a9", "filename": "src/librustc/middle/exported_symbols.rs", "status": "modified", "additions": 63, "deletions": 25, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/dad194a10d1e05d77516f4052859c2f9315e434a/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad194a10d1e05d77516f4052859c2f9315e434a/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs?ref=dad194a10d1e05d77516f4052859c2f9315e434a", "patch": "@@ -9,8 +9,13 @@\n // except according to those terms.\n \n use hir::def_id::{DefId, LOCAL_CRATE};\n+use ich::StableHashingContext;\n+use rustc_data_structures::stable_hasher::{StableHasher, HashStable,\n+                                           StableHasherResult};\n use std::cmp;\n+use std::mem;\n use ty;\n+use ty::subst::Substs;\n \n /// The SymbolExportLevel of a symbols specifies from which kinds of crates\n /// the symbol will be exported. `C` symbols will be exported from any\n@@ -40,56 +45,89 @@ impl SymbolExportLevel {\n }\n \n #[derive(Eq, PartialEq, Debug, Copy, Clone, RustcEncodable, RustcDecodable)]\n-pub enum ExportedSymbol {\n+pub enum ExportedSymbol<'tcx> {\n     NonGeneric(DefId),\n+    Generic(DefId, &'tcx Substs<'tcx>),\n     NoDefId(ty::SymbolName),\n }\n \n-impl ExportedSymbol {\n-    pub fn symbol_name(&self, tcx: ty::TyCtxt) -> ty::SymbolName {\n+impl<'tcx> ExportedSymbol<'tcx> {\n+    pub fn symbol_name(&self,\n+                       tcx: ty::TyCtxt<'_, 'tcx, '_>)\n+                       -> ty::SymbolName {\n         match *self {\n             ExportedSymbol::NonGeneric(def_id) => {\n                 tcx.symbol_name(ty::Instance::mono(tcx, def_id))\n             }\n+            ExportedSymbol::Generic(def_id, substs) => {\n+                tcx.symbol_name(ty::Instance::new(def_id, substs))\n+            }\n             ExportedSymbol::NoDefId(symbol_name) => {\n                 symbol_name\n             }\n         }\n     }\n \n-    pub fn compare_stable(&self, tcx: ty::TyCtxt, other: &ExportedSymbol) -> cmp::Ordering {\n+    pub fn compare_stable(&self,\n+                          tcx: ty::TyCtxt<'_, 'tcx, '_>,\n+                          other: &ExportedSymbol<'tcx>)\n+                          -> cmp::Ordering {\n         match *self {\n-            ExportedSymbol::NonGeneric(self_def_id) => {\n-                match *other {\n-                    ExportedSymbol::NonGeneric(other_def_id) => {\n-                        tcx.def_path_hash(self_def_id).cmp(&tcx.def_path_hash(other_def_id))\n-                    }\n-                    ExportedSymbol::NoDefId(_) => {\n-                        cmp::Ordering::Less\n-                    }\n+            ExportedSymbol::NonGeneric(self_def_id) => match *other {\n+                ExportedSymbol::NonGeneric(other_def_id) => {\n+                    tcx.def_path_hash(self_def_id).cmp(&tcx.def_path_hash(other_def_id))\n+                }\n+                ExportedSymbol::Generic(..) |\n+                ExportedSymbol::NoDefId(_) => {\n+                    cmp::Ordering::Less\n+                }\n+            }\n+            ExportedSymbol::Generic(..) => match *other {\n+                ExportedSymbol::NonGeneric(_) => {\n+                    cmp::Ordering::Greater\n+                }\n+                ExportedSymbol::Generic(..) => {\n+                    self.symbol_name(tcx).cmp(&other.symbol_name(tcx))\n+                }\n+                ExportedSymbol::NoDefId(_) => {\n+                    cmp::Ordering::Less\n                 }\n             }\n-            ExportedSymbol::NoDefId(self_symbol_name) => {\n-                match *other {\n-                    ExportedSymbol::NonGeneric(_) => {\n-                        cmp::Ordering::Greater\n-                    }\n-                    ExportedSymbol::NoDefId(ref other_symbol_name) => {\n-                        self_symbol_name.cmp(other_symbol_name)\n-                    }\n+            ExportedSymbol::NoDefId(self_symbol_name) => match *other {\n+                ExportedSymbol::NonGeneric(_) |\n+                ExportedSymbol::Generic(..) => {\n+                    cmp::Ordering::Greater\n+                }\n+                ExportedSymbol::NoDefId(ref other_symbol_name) => {\n+                    self_symbol_name.cmp(other_symbol_name)\n                 }\n             }\n         }\n     }\n }\n \n-impl_stable_hash_for!(enum self::ExportedSymbol {\n-    NonGeneric(def_id),\n-    NoDefId(symbol_name)\n-});\n-\n pub fn metadata_symbol_name(tcx: ty::TyCtxt) -> String {\n     format!(\"rust_metadata_{}_{}\",\n             tcx.original_crate_name(LOCAL_CRATE),\n             tcx.crate_disambiguator(LOCAL_CRATE).to_fingerprint().to_hex())\n }\n+\n+impl<'gcx> HashStable<StableHashingContext<'gcx>> for ExportedSymbol<'gcx> {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'gcx>,\n+                                          hasher: &mut StableHasher<W>) {\n+        mem::discriminant(self).hash_stable(hcx, hasher);\n+        match *self {\n+            ExportedSymbol::NonGeneric(def_id) => {\n+                def_id.hash_stable(hcx, hasher);\n+            }\n+            ExportedSymbol::Generic(def_id, substs) => {\n+                def_id.hash_stable(hcx, hasher);\n+                substs.hash_stable(hcx, hasher);\n+            }\n+            ExportedSymbol::NoDefId(symbol_name) => {\n+                symbol_name.hash_stable(hcx, hasher);\n+            }\n+        }\n+    }\n+}"}, {"sha": "786113470770c44646b31ca73e1f4b9136e90202", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dad194a10d1e05d77516f4052859c2f9315e434a/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad194a10d1e05d77516f4052859c2f9315e434a/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=dad194a10d1e05d77516f4052859c2f9315e434a", "patch": "@@ -381,7 +381,7 @@ define_maps! { <'tcx>\n     [] fn all_crate_nums: all_crate_nums_node(CrateNum) -> Lrc<Vec<CrateNum>>,\n \n     [] fn exported_symbols: ExportedSymbols(CrateNum)\n-        -> Arc<Vec<(ExportedSymbol, SymbolExportLevel)>>,\n+        -> Arc<Vec<(ExportedSymbol<'tcx>, SymbolExportLevel)>>,\n     [] fn collect_and_partition_translation_items:\n         collect_and_partition_translation_items_node(CrateNum)\n         -> (Arc<DefIdSet>, Arc<Vec<Arc<CodegenUnit<'tcx>>>>),"}, {"sha": "30055bea635ac2710eff455bd7f92dd481934ca8", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dad194a10d1e05d77516f4052859c2f9315e434a/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad194a10d1e05d77516f4052859c2f9315e434a/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=dad194a10d1e05d77516f4052859c2f9315e434a", "patch": "@@ -268,7 +268,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n             return Arc::new(Vec::new())\n         }\n \n-        Arc::new(cdata.exported_symbols())\n+        Arc::new(cdata.exported_symbols(tcx))\n     }\n \n     wasm_custom_sections => { Lrc::new(cdata.wasm_custom_sections()) }"}, {"sha": "42e208ded49fd0f1f0782836dc3d219a8e5d700c", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dad194a10d1e05d77516f4052859c2f9315e434a/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad194a10d1e05d77516f4052859c2f9315e434a/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=dad194a10d1e05d77516f4052859c2f9315e434a", "patch": "@@ -1065,11 +1065,13 @@ impl<'a, 'tcx> CrateMetadata {\n         arg_names.decode(self).collect()\n     }\n \n-    pub fn exported_symbols(&self) -> Vec<(ExportedSymbol, SymbolExportLevel)> {\n-        self.root\n-            .exported_symbols\n-            .decode(self)\n-            .collect()\n+    pub fn exported_symbols(&self,\n+                            tcx: TyCtxt<'a, 'tcx, 'tcx>)\n+                            -> Vec<(ExportedSymbol<'tcx>, SymbolExportLevel)> {\n+        let lazy_seq: LazySeq<(ExportedSymbol<'tcx>, SymbolExportLevel)> =\n+            LazySeq::with_position_and_length(self.root.exported_symbols.position,\n+                                              self.root.exported_symbols.len);\n+        lazy_seq.decode((self, tcx)).collect()\n     }\n \n     pub fn wasm_custom_sections(&self) -> Vec<DefId> {"}, {"sha": "1b208a512e2a46c6a977b5c272aef67f8a7e95a7", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dad194a10d1e05d77516f4052859c2f9315e434a/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad194a10d1e05d77516f4052859c2f9315e434a/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=dad194a10d1e05d77516f4052859c2f9315e434a", "patch": "@@ -1444,13 +1444,12 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n     // definition (as that's not defined in this crate).\n     fn encode_exported_symbols(&mut self,\n                                exported_symbols: &[(ExportedSymbol, SymbolExportLevel)])\n-                               -> LazySeq<(ExportedSymbol, SymbolExportLevel)> {\n-\n+                               -> EncodedExportedSymbols {\n         // The metadata symbol name is special. It should not show up in\n         // downstream crates.\n         let metadata_symbol_name = SymbolName::new(&metadata_symbol_name(self.tcx));\n \n-        self.lazy_seq(exported_symbols\n+        let lazy_seq = self.lazy_seq(exported_symbols\n             .iter()\n             .filter(|&&(ref exported_symbol, _)| {\n                 match *exported_symbol {\n@@ -1460,7 +1459,12 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                     _ => true,\n                 }\n             })\n-            .cloned())\n+            .cloned());\n+\n+        EncodedExportedSymbols {\n+            len: lazy_seq.len,\n+            position: lazy_seq.position,\n+        }\n     }\n \n     fn encode_wasm_custom_sections(&mut self, statics: &[DefId]) -> LazySeq<DefIndex> {"}, {"sha": "e3986bb7d91f94c5bdbde85cef7b828b75cf6d58", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dad194a10d1e05d77516f4052859c2f9315e434a/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad194a10d1e05d77516f4052859c2f9315e434a/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=dad194a10d1e05d77516f4052859c2f9315e434a", "patch": "@@ -15,7 +15,6 @@ use rustc::hir;\n use rustc::hir::def::{self, CtorKind};\n use rustc::hir::def_id::{DefIndex, DefId, CrateNum};\n use rustc::ich::StableHashingContext;\n-use rustc::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc::middle::cstore::{DepKind, LinkagePreference, NativeLibrary, ForeignModule};\n use rustc::middle::lang_items;\n use rustc::mir;\n@@ -206,7 +205,7 @@ pub struct CrateRoot {\n     pub codemap: LazySeq<syntax_pos::FileMap>,\n     pub def_path_table: Lazy<hir::map::definitions::DefPathTable>,\n     pub impls: LazySeq<TraitImpls>,\n-    pub exported_symbols: LazySeq<(ExportedSymbol, SymbolExportLevel)>,\n+    pub exported_symbols: EncodedExportedSymbols,\n     pub wasm_custom_sections: LazySeq<DefIndex>,\n \n     pub index: LazySeq<index::Index>,\n@@ -531,3 +530,9 @@ impl_stable_hash_for!(struct GeneratorData<'tcx> { layout });\n // Tags used for encoding Spans:\n pub const TAG_VALID_SPAN: u8 = 0;\n pub const TAG_INVALID_SPAN: u8 = 1;\n+\n+#[derive(RustcEncodable, RustcDecodable)]\n+pub struct EncodedExportedSymbols {\n+    pub position: usize,\n+    pub len: usize,\n+}"}, {"sha": "ce737f1c28c48202a773ee1d4f6e7401b359f569", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dad194a10d1e05d77516f4052859c2f9315e434a/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad194a10d1e05d77516f4052859c2f9315e434a/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=dad194a10d1e05d77516f4052859c2f9315e434a", "patch": "@@ -94,7 +94,7 @@ fn is_reachable_non_generic_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n fn exported_symbols_provider_local<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                              cnum: CrateNum)\n-                                             -> Arc<Vec<(ExportedSymbol,\n+                                             -> Arc<Vec<(ExportedSymbol<'tcx>,\n                                                          SymbolExportLevel)>>\n {\n     assert_eq!(cnum, LOCAL_CRATE);"}, {"sha": "f8f2fdd9320d2a5fd061a7137664f1b9200eb465", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dad194a10d1e05d77516f4052859c2f9315e434a/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad194a10d1e05d77516f4052859c2f9315e434a/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=dad194a10d1e05d77516f4052859c2f9315e434a", "patch": "@@ -33,6 +33,7 @@\n #![cfg_attr(stage0, feature(conservative_impl_trait))]\n #![feature(optin_builtin_traits)]\n #![feature(inclusive_range_fields)]\n+#![feature(underscore_lifetimes)]\n \n use rustc::dep_graph::WorkProduct;\n use syntax_pos::symbol::Symbol;"}]}