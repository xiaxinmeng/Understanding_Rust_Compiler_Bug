{"sha": "c42bdb8c7465389a4d71d88ff8d910d6307be9ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MmJkYjhjNzQ2NTM4OWE0ZDcxZDg4ZmY4ZDkxMGQ2MzA3YmU5YmE=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-11-05T00:52:19Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-12-02T13:38:16Z"}, "message": "Undo minor changes that weren't needed, fix one lifetime typo", "tree": {"sha": "1e0e74b119291959103f9963dfc4c5685e377eda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e0e74b119291959103f9963dfc4c5685e377eda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c42bdb8c7465389a4d71d88ff8d910d6307be9ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c42bdb8c7465389a4d71d88ff8d910d6307be9ba", "html_url": "https://github.com/rust-lang/rust/commit/c42bdb8c7465389a4d71d88ff8d910d6307be9ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c42bdb8c7465389a4d71d88ff8d910d6307be9ba/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e54c610f8543348b92665a86f0c642bdfbd75197", "url": "https://api.github.com/repos/rust-lang/rust/commits/e54c610f8543348b92665a86f0c642bdfbd75197", "html_url": "https://github.com/rust-lang/rust/commit/e54c610f8543348b92665a86f0c642bdfbd75197"}], "stats": {"total": 61, "additions": 31, "deletions": 30}, "files": [{"sha": "d6fa67b053354786ccb804203c4b009273e331ae", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c42bdb8c7465389a4d71d88ff8d910d6307be9ba/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42bdb8c7465389a4d71d88ff8d910d6307be9ba/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=c42bdb8c7465389a4d71d88ff8d910d6307be9ba", "patch": "@@ -17,13 +17,14 @@ use super::FunctionCx;\n use crate::traits::*;\n \n pub fn non_ssa_locals<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n-    fx: &FunctionCx<'a, 'tcx, Bx>\n+    fx: &FunctionCx<'a, 'tcx, Bx>,\n ) -> BitSet<mir::Local> {\n+    let mir = fx.mir;\n     let mut analyzer = LocalAnalyzer::new(fx);\n \n-    analyzer.visit_body(fx.mir);\n+    analyzer.visit_body(mir);\n \n-    for (local, decl) in fx.mir.local_decls.iter_enumerated()\n+    for (local, decl) in mir.local_decls.iter_enumerated()\n     {\n         // FIXME(eddyb): We should figure out how to use llvm.dbg.value instead\n         // of putting everything in allocas just so we can use llvm.dbg.declare.\n@@ -65,7 +66,7 @@ struct LocalAnalyzer<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n     first_assignment: IndexVec<mir::Local, Location>,\n }\n \n-impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n+impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n     fn new(fx: &'mir FunctionCx<'a, 'tcx, Bx>) -> Self {\n         let invalid_location =\n             mir::BasicBlock::new(fx.mir.basic_blocks().len()).start_location();"}, {"sha": "2d41c8426decc854a8811c3642570a1e666363de", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c42bdb8c7465389a4d71d88ff8d910d6307be9ba/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42bdb8c7465389a4d71d88ff8d910d6307be9ba/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=c42bdb8c7465389a4d71d88ff8d910d6307be9ba", "patch": "@@ -46,7 +46,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'a, 'tcx> {\n     fn lltarget<'b, 'c, Bx: BuilderMethods<'b, 'tcx>>(\n         &self,\n         fx: &'c mut FunctionCx<'b, 'tcx, Bx>,\n-        target: mir::BasicBlock\n+        target: mir::BasicBlock,\n     ) -> (Bx::BasicBlock, bool) {\n         let span = self.terminator.source_info.span;\n         let lltarget = fx.blocks[target];\n@@ -66,7 +66,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'a, 'tcx> {\n     fn llblock<'c, 'b, Bx: BuilderMethods<'b, 'tcx>>(\n         &self,\n         fx: &'c mut FunctionCx<'b, 'tcx, Bx>,\n-        target: mir::BasicBlock\n+        target: mir::BasicBlock,\n     ) -> Bx::BasicBlock {\n         let (lltarget, is_cleanupret) = self.lltarget(fx, target);\n         if is_cleanupret {\n@@ -153,7 +153,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'a, 'tcx> {\n     // a loop.\n     fn maybe_sideeffect<'b, 'tcx2: 'b, Bx: BuilderMethods<'b, 'tcx2>>(\n         &self,\n-        mir: mir::ReadOnlyBodyCache<'_, 'tcx>,\n+        mir: mir::ReadOnlyBodyCache<'b, 'tcx>,\n         bx: &mut Bx,\n         targets: &[mir::BasicBlock],\n     ) {\n@@ -173,9 +173,9 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'a, 'tcx> {\n /// Codegen implementations for some terminator variants.\n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     /// Generates code for a `Resume` terminator.\n-    fn codegen_resume_terminator<'c>(\n+    fn codegen_resume_terminator<'b>(\n         &mut self,\n-        helper: TerminatorCodegenHelper<'c, 'tcx>,\n+        helper: TerminatorCodegenHelper<'b, 'tcx>,\n         mut bx: Bx,\n     ) {\n         if let Some(funclet) = helper.funclet(self) {\n@@ -201,9 +201,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         }\n     }\n \n-    fn codegen_switchint_terminator<'c>(\n+    fn codegen_switchint_terminator<'b>(\n         &mut self,\n-        helper: TerminatorCodegenHelper<'c, 'tcx>,\n+        helper: TerminatorCodegenHelper<'b, 'tcx>,\n         mut bx: Bx,\n         discr: &mir::Operand<'tcx>,\n         switch_ty: Ty<'tcx>,\n@@ -316,9 +316,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     }\n \n \n-    fn codegen_drop_terminator<'c>(\n+    fn codegen_drop_terminator<'b>(\n         &mut self,\n-        helper: TerminatorCodegenHelper<'c, 'tcx>,\n+        helper: TerminatorCodegenHelper<'b, 'tcx>,\n         mut bx: Bx,\n         location: &mir::Place<'tcx>,\n         target: mir::BasicBlock,\n@@ -367,9 +367,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                        unwind);\n     }\n \n-    fn codegen_assert_terminator<'c>(\n+    fn codegen_assert_terminator<'b>(\n         &mut self,\n-        helper: TerminatorCodegenHelper<'c, 'tcx>,\n+        helper: TerminatorCodegenHelper<'b, 'tcx>,\n         mut bx: Bx,\n         terminator: &mir::Terminator<'tcx>,\n         cond: &mir::Operand<'tcx>,\n@@ -446,9 +446,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         helper.do_call(self, &mut bx, fn_abi, llfn, &args, None, cleanup);\n     }\n \n-    fn codegen_call_terminator<'c>(\n+    fn codegen_call_terminator<'b>(\n         &mut self,\n-        helper: TerminatorCodegenHelper<'c, 'tcx>,\n+        helper: TerminatorCodegenHelper<'b, 'tcx>,\n         mut bx: Bx,\n         terminator: &mir::Terminator<'tcx>,\n         func: &mir::Operand<'tcx>,\n@@ -581,7 +581,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         // Prepare the return value destination\n         let ret_dest = if let Some((ref dest, _)) = *destination {\n             let is_intrinsic = intrinsic.is_some();\n-            self.make_return_dest(&mut bx, dest, &fn_abi.ret, &mut llargs, is_intrinsic)\n+            self.make_return_dest(&mut bx, dest, &fn_abi.ret, &mut llargs,\n+                                  is_intrinsic)\n         } else {\n             ReturnDest::Nothing\n         };\n@@ -805,7 +806,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         &mut self,\n         mut bx: Bx,\n         bb: mir::BasicBlock,\n-        terminator: &mir::Terminator<'tcx>,\n+        terminator: &mir::Terminator<'tcx>\n     ) {\n         debug!(\"codegen_terminator: {:?}\", terminator);\n \n@@ -834,7 +835,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::TerminatorKind::SwitchInt {\n                 ref discr, switch_ty, ref values, ref targets\n             } => {\n-                self.codegen_switchint_terminator(helper, bx, discr, switch_ty, values, targets);\n+                self.codegen_switchint_terminator(helper, bx, discr, switch_ty,\n+                                                  values, targets);\n             }\n \n             mir::TerminatorKind::Return => {\n@@ -1034,7 +1036,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     /// No-op in MSVC SEH scheme.\n     fn landing_pad_to(\n         &mut self,\n-        target_bb: mir::BasicBlock,\n+        target_bb: mir::BasicBlock\n     ) -> Bx::BasicBlock {\n         if let Some(block) = self.landing_pads[target_bb] {\n             return block;\n@@ -1103,7 +1105,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         bx: &mut Bx,\n         dest: &mir::Place<'tcx>,\n         fn_ret: &ArgAbi<'tcx, Ty<'tcx>>,\n-        llargs: &mut Vec<Bx::Value>, is_intrinsic: bool,\n+        llargs: &mut Vec<Bx::Value>, is_intrinsic: bool\n     ) -> ReturnDest<'tcx, Bx::Value> {\n         // If the return is ignored, we can just return a do-nothing `ReturnDest`.\n         if fn_ret.is_ignore() {"}, {"sha": "9549749f5120eae3c438ef050eba69c772ebb8f0", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c42bdb8c7465389a4d71d88ff8d910d6307be9ba/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42bdb8c7465389a4d71d88ff8d910d6307be9ba/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=c42bdb8c7465389a4d71d88ff8d910d6307be9ba", "patch": "@@ -323,13 +323,14 @@ fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     fx: &FunctionCx<'a, 'tcx, Bx>,\n     memory_locals: &BitSet<mir::Local>,\n ) -> Vec<LocalRef<'tcx, Bx::Value>> {\n+    let mir = fx.mir;\n     let mut idx = 0;\n     let mut llarg_idx = fx.fn_abi.ret.is_indirect() as usize;\n \n-    fx.mir.args_iter().enumerate().map(|(arg_index, local)| {\n-        let arg_decl = &fx.mir.local_decls[local];\n+    mir.args_iter().enumerate().map(|(arg_index, local)| {\n+        let arg_decl = &mir.local_decls[local];\n \n-        if Some(local) == fx.mir.spread_arg {\n+        if Some(local) == mir.spread_arg {\n             // This argument (e.g., the last argument in the \"rust-call\" ABI)\n             // is a tuple that was spread at the ABI level and now we have\n             // to reconstruct it into a tuple local variable, from multiple"}, {"sha": "fb5fc561b08dee75f2025c7d7272b3ac30dc7c38", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c42bdb8c7465389a4d71d88ff8d910d6307be9ba/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42bdb8c7465389a4d71d88ff8d910d6307be9ba/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=c42bdb8c7465389a4d71d88ff8d910d6307be9ba", "patch": "@@ -696,11 +696,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n }\n \n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n-    pub fn rvalue_creates_operand(\n-        &self,\n-        rvalue: &mir::Rvalue<'tcx>,\n-        span: Span,\n-    ) -> bool {\n+    pub fn rvalue_creates_operand(&self, rvalue: &mir::Rvalue<'tcx>, span: Span) -> bool {\n         match *rvalue {\n             mir::Rvalue::Ref(..) |\n             mir::Rvalue::Len(..) |"}, {"sha": "9442bb3cdec3b8a11cf73122535d98c569a7f011", "filename": "src/librustc_data_structures/graph/reference.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c42bdb8c7465389a4d71d88ff8d910d6307be9ba/src%2Flibrustc_data_structures%2Fgraph%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42bdb8c7465389a4d71d88ff8d910d6307be9ba/src%2Flibrustc_data_structures%2Fgraph%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Freference.rs?ref=c42bdb8c7465389a4d71d88ff8d910d6307be9ba", "patch": "@@ -21,6 +21,7 @@ impl<'graph, G: WithSuccessors> WithSuccessors for &'graph G {\n         (**self).successors(node)\n     }\n }\n+\n impl<'graph, G: WithPredecessors> WithPredecessors for &'graph G {\n     fn predecessors(&self,\n                     node: Self::Node)"}]}