{"sha": "14a94f0bcd4d6892674cbe7dcaf8f3613cac30fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0YTk0ZjBiY2Q0ZDY4OTI2NzRjYmU3ZGNhZjhmMzYxM2NhYzMwZmM=", "commit": {"author": {"name": "Christoph Burgdorf", "email": "christoph.burgdorf@bvsn.org", "date": "2015-09-04T21:01:20Z"}, "committer": {"name": "Christoph Burgdorf", "email": "christoph.burgdorf@bvsn.org", "date": "2015-09-04T22:09:26Z"}, "message": "Allow partial rustfmt.toml\n\nWith this change one can use a config file\nthat only specifies a subset of config keys\nto overwrite. E.g. a config file that looks like this\n\nstruct_trailing_comma = \"Never\"\nstruct_lit_trailing_comma = \"Never\"\n\nFixes #255", "tree": {"sha": "51db46d53df05955b7dddaa10e0b4da955ce9e23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51db46d53df05955b7dddaa10e0b4da955ce9e23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14a94f0bcd4d6892674cbe7dcaf8f3613cac30fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14a94f0bcd4d6892674cbe7dcaf8f3613cac30fc", "html_url": "https://github.com/rust-lang/rust/commit/14a94f0bcd4d6892674cbe7dcaf8f3613cac30fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14a94f0bcd4d6892674cbe7dcaf8f3613cac30fc/comments", "author": {"login": "cburgdorf", "id": 521109, "node_id": "MDQ6VXNlcjUyMTEwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cburgdorf", "html_url": "https://github.com/cburgdorf", "followers_url": "https://api.github.com/users/cburgdorf/followers", "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}", "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}", "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions", "organizations_url": "https://api.github.com/users/cburgdorf/orgs", "repos_url": "https://api.github.com/users/cburgdorf/repos", "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}", "received_events_url": "https://api.github.com/users/cburgdorf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cburgdorf", "id": 521109, "node_id": "MDQ6VXNlcjUyMTEwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cburgdorf", "html_url": "https://github.com/cburgdorf", "followers_url": "https://api.github.com/users/cburgdorf/followers", "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}", "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}", "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions", "organizations_url": "https://api.github.com/users/cburgdorf/orgs", "repos_url": "https://api.github.com/users/cburgdorf/repos", "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}", "received_events_url": "https://api.github.com/users/cburgdorf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17302f8967f22919ff374cb8e57f81e3741a85f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/17302f8967f22919ff374cb8e57f81e3741a85f3", "html_url": "https://github.com/rust-lang/rust/commit/17302f8967f22919ff374cb8e57f81e3741a85f3"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "c7525e930ec5d683cf97566b27c3d227d8f325ac", "filename": "src/config.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/14a94f0bcd4d6892674cbe7dcaf8f3613cac30fc/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a94f0bcd4d6892674cbe7dcaf8f3613cac30fc/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=14a94f0bcd4d6892674cbe7dcaf8f3613cac30fc", "patch": "@@ -52,18 +52,39 @@ macro_rules! create_config {\n             $(pub $i: $ty),+\n         }\n \n+        // Just like the Config struct but with each property wrapped\n+        // as Option<T>. This is used to parse a rustfmt.toml that doesn't\n+        // specity all properties of `Config`.\n+        // We first parse into `ParsedConfig`, then create a default `Config`\n+        // and overwrite the properties with corresponding values from `ParsedConfig`\n+        #[derive(RustcDecodable, Clone)]\n+        pub struct ParsedConfig {\n+            $(pub $i: Option<$ty>),+\n+        }\n+\n         impl Config {\n+\n+            fn fill_from_parsed_config(mut self, parsed: &ParsedConfig) -> Config {\n+            $(\n+                if let Some(val) = parsed.$i {\n+                    self.$i = val;\n+                }\n+            )+\n+                self\n+            }\n+\n             pub fn from_toml(toml: &str) -> Config {\n                 let parsed = toml.parse().unwrap();\n-                match toml::decode(parsed) {\n+                let parsed_config:ParsedConfig = match toml::decode(parsed) {\n                     Some(decoded) => decoded,\n                     None => {\n                         println!(\"Decoding config file failed. Config:\\n{}\", toml);\n                         let parsed: toml::Value = toml.parse().unwrap();\n                         println!(\"\\n\\nParsed:\\n{:?}\", parsed);\n                         panic!();\n                     }\n-                }\n+                };\n+                Config::default().fill_from_parsed_config(&parsed_config)\n             }\n \n             pub fn override_value(&mut self, key: &str, val: &str) {"}]}