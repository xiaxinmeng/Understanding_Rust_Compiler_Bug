{"sha": "6e7fcc44aef7b457f3be3a1971d9f026957678d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlN2ZjYzQ0YWVmN2I0NTdmM2JlM2ExOTcxZDlmMDI2OTU3Njc4ZDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-13T23:35:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-13T23:35:28Z"}, "message": "Auto merge of #26278 - tamird:compiletest, r=alexcrichton", "tree": {"sha": "ea8457420942aa97cbb25244c92f2c2330991676", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea8457420942aa97cbb25244c92f2c2330991676"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e7fcc44aef7b457f3be3a1971d9f026957678d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e7fcc44aef7b457f3be3a1971d9f026957678d5", "html_url": "https://github.com/rust-lang/rust/commit/6e7fcc44aef7b457f3be3a1971d9f026957678d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e7fcc44aef7b457f3be3a1971d9f026957678d5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f3233f0924ccff5e94cddd7fa9355f4e9ad78f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f3233f0924ccff5e94cddd7fa9355f4e9ad78f3", "html_url": "https://github.com/rust-lang/rust/commit/5f3233f0924ccff5e94cddd7fa9355f4e9ad78f3"}, {"sha": "7f04b8ff07ba0c27c2aef957d7aa3ed4404fc877", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f04b8ff07ba0c27c2aef957d7aa3ed4404fc877", "html_url": "https://github.com/rust-lang/rust/commit/7f04b8ff07ba0c27c2aef957d7aa3ed4404fc877"}], "stats": {"total": 46, "additions": 12, "deletions": 34}, "files": [{"sha": "eb6c29eefbe78c33459e67972fe1f83a3513ecc7", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e7fcc44aef7b457f3be3a1971d9f026957678d5/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7fcc44aef7b457f3be3a1971d9f026957678d5/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=6e7fcc44aef7b457f3be3a1971d9f026957678d5", "patch": "@@ -124,9 +124,6 @@ pub struct Config {\n     // Flags to pass to the compiler when building for the target\n     pub target_rustcflags: Option<String>,\n \n-    // Run tests using the JIT\n-    pub jit: bool,\n-\n     // Target system to be tested\n     pub target: String,\n "}, {"sha": "1471e30baa6b02fabe8d4d7f8750308e2ea719f7", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e7fcc44aef7b457f3be3a1971d9f026957678d5/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7fcc44aef7b457f3be3a1971d9f026957678d5/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=6e7fcc44aef7b457f3be3a1971d9f026957678d5", "patch": "@@ -79,7 +79,6 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n           optopt(\"\", \"target-rustcflags\", \"flags to pass to rustc for target\", \"FLAGS\"),\n           optflag(\"\", \"verbose\", \"run tests verbosely, showing all output\"),\n           optopt(\"\", \"logfile\", \"file to log test execution to\", \"FILE\"),\n-          optflag(\"\", \"jit\", \"run tests under the JIT\"),\n           optopt(\"\", \"target\", \"the target to build for\", \"TARGET\"),\n           optopt(\"\", \"host\", \"the host to build for\", \"HOST\"),\n           optopt(\"\", \"gdb-version\", \"the version of GDB used\", \"VERSION STRING\"),\n@@ -146,7 +145,6 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n         runtool: matches.opt_str(\"runtool\"),\n         host_rustcflags: matches.opt_str(\"host-rustcflags\"),\n         target_rustcflags: matches.opt_str(\"target-rustcflags\"),\n-        jit: matches.opt_present(\"jit\"),\n         target: opt_str2(matches.opt_str(\"target\")),\n         host: opt_str2(matches.opt_str(\"host\")),\n         gdb_version: extract_gdb_version(matches.opt_str(\"gdb-version\")),\n@@ -186,7 +184,6 @@ pub fn log_config(config: &Config) {\n                     opt_str(&config.host_rustcflags)));\n     logv(c, format!(\"target-rustcflags: {}\",\n                     opt_str(&config.target_rustcflags)));\n-    logv(c, format!(\"jit: {}\", config.jit));\n     logv(c, format!(\"target: {}\", config.target));\n     logv(c, format!(\"host: {}\", config.host));\n     logv(c, format!(\"android-cross-path: {:?}\","}, {"sha": "5a076b8437e2694695d9f2528a4c4c716deb1f33", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 12, "deletions": 28, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6e7fcc44aef7b457f3be3a1971d9f026957678d5/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7fcc44aef7b457f3be3a1971d9f026957678d5/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=6e7fcc44aef7b457f3be3a1971d9f026957678d5", "patch": "@@ -98,17 +98,13 @@ fn run_cfail_test(config: &Config, props: &TestProps, testfile: &Path) {\n }\n \n fn run_rfail_test(config: &Config, props: &TestProps, testfile: &Path) {\n-    let proc_res = if !config.jit {\n-        let proc_res = compile_test(config, props, testfile);\n+    let proc_res = compile_test(config, props, testfile);\n \n-        if !proc_res.status.success() {\n-            fatal_proc_rec(\"compilation failed!\", &proc_res);\n-        }\n+    if !proc_res.status.success() {\n+        fatal_proc_rec(\"compilation failed!\", &proc_res);\n+    }\n \n-        exec_compiled_test(config, props, testfile)\n-    } else {\n-        jit_test(config, props, testfile)\n-    };\n+    let proc_res = exec_compiled_test(config, props, testfile);\n \n     // The value our Makefile configures valgrind to return on failure\n     const VALGRIND_ERR: i32 = 100;\n@@ -133,24 +129,16 @@ fn check_correct_failure_status(proc_res: &ProcRes) {\n }\n \n fn run_rpass_test(config: &Config, props: &TestProps, testfile: &Path) {\n-    if !config.jit {\n-        let mut proc_res = compile_test(config, props, testfile);\n-\n-        if !proc_res.status.success() {\n-            fatal_proc_rec(\"compilation failed!\", &proc_res);\n-        }\n+    let proc_res = compile_test(config, props, testfile);\n \n-        proc_res = exec_compiled_test(config, props, testfile);\n+    if !proc_res.status.success() {\n+        fatal_proc_rec(\"compilation failed!\", &proc_res);\n+    }\n \n-        if !proc_res.status.success() {\n-            fatal_proc_rec(\"test run failed!\", &proc_res);\n-        }\n-    } else {\n-        let proc_res = jit_test(config, props, testfile);\n+    let proc_res = exec_compiled_test(config, props, testfile);\n \n-        if !proc_res.status.success() {\n-            fatal_proc_rec(\"jit failed!\", &proc_res);\n-        }\n+    if !proc_res.status.success() {\n+        fatal_proc_rec(\"test run failed!\", &proc_res);\n     }\n }\n \n@@ -1141,10 +1129,6 @@ fn compile_test(config: &Config, props: &TestProps,\n     compile_test_(config, props, testfile, &[])\n }\n \n-fn jit_test(config: &Config, props: &TestProps, testfile: &Path) -> ProcRes {\n-    compile_test_(config, props, testfile, &[\"--jit\".to_string()])\n-}\n-\n fn compile_test_(config: &Config, props: &TestProps,\n                  testfile: &Path, extra_args: &[String]) -> ProcRes {\n     let aux_dir = aux_output_dir_name(config, testfile);"}]}