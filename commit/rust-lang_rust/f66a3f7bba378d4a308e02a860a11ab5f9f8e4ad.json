{"sha": "f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NmEzZjdiYmEzNzhkNGEzMDhlMDJhODYwYTExYWI1ZjlmOGU0YWQ=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-02-27T19:14:42Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-02-27T19:17:05Z"}, "message": "Replace MacExpr / MacPat / MacItems with MacEager\n\nMacEager is a MacResult implementation for the common case where you've already\nbuilt each form of AST that you might return.\n\nFixes #17637. Based on #18814.\n\nThis is a [breaking-change] for syntax extensions:\n\n  * MacExpr::new becomes MacEager::expr.\n\n  * MacPat::new becomes MacEager::pat.\n\n  * MacItems::new becomes MacEager::items. It takes a SmallVector directly,\n    not an iterator.", "tree": {"sha": "3df59faefa3919c47ffb988c1644b93b90f90b89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3df59faefa3919c47ffb988c1644b93b90f90b89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad", "html_url": "https://github.com/rust-lang/rust/commit/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd0d8e47e53f25bbd50418a0f117973c366c1b08", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd0d8e47e53f25bbd50418a0f117973c366c1b08", "html_url": "https://github.com/rust-lang/rust/commit/bd0d8e47e53f25bbd50418a0f117973c366c1b08"}], "stats": {"total": 202, "additions": 113, "deletions": 89}, "files": [{"sha": "a093b97eefbc4b34cbbd31e3eefee5c547ef0eae", "filename": "src/doc/trpl/plugins.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Fdoc%2Ftrpl%2Fplugins.md", "raw_url": "https://github.com/rust-lang/rust/raw/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Fdoc%2Ftrpl%2Fplugins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fplugins.md?ref=f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad", "patch": "@@ -71,8 +71,8 @@ extern crate rustc;\n use syntax::codemap::Span;\n use syntax::parse::token;\n use syntax::ast::{TokenTree, TtToken};\n-use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacExpr};\n-use syntax::ext::build::AstBuilder;  // trait for expr_uint\n+use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacEager};\n+use syntax::ext::build::AstBuilder;  // trait for expr_usize\n use rustc::plugin::Registry;\n \n fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n@@ -107,7 +107,7 @@ fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n         }\n     }\n \n-    MacExpr::new(cx.expr_uint(sp, total))\n+    MacEager::expr(cx.expr_usize(sp, total))\n }\n \n #[plugin_registrar]\n@@ -183,7 +183,7 @@ with\n [`syntax::print::pprust::*_to_string`](http://doc.rust-lang.org/syntax/print/pprust/index.html#functions).\n \n The example above produced an integer literal using\n-[`AstBuilder::expr_uint`](../syntax/ext/build/trait.AstBuilder.html#tymethod.expr_uint).\n+[`AstBuilder::expr_usize`](../syntax/ext/build/trait.AstBuilder.html#tymethod.expr_usize).\n As an alternative to the `AstBuilder` trait, `libsyntax` provides a set of\n [quasiquote macros](../syntax/ext/quote/index.html).  They are undocumented and\n very rough around the edges.  However, the implementation may be a good"}, {"sha": "59fe3658437bdefbc356473fb04e564772f0f78e", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad", "patch": "@@ -14,10 +14,11 @@ use std::collections::BTreeMap;\n use ast;\n use ast::{Ident, Name, TokenTree};\n use codemap::Span;\n-use ext::base::{ExtCtxt, MacExpr, MacResult, MacItems};\n+use ext::base::{ExtCtxt, MacEager, MacResult};\n use ext::build::AstBuilder;\n use parse::token;\n use ptr::P;\n+use util::small_vector::SmallVector;\n \n thread_local! {\n     static REGISTERED_DIAGNOSTICS: RefCell<BTreeMap<Name, Option<Name>>> = {\n@@ -73,7 +74,7 @@ pub fn expand_diagnostic_used<'cx>(ecx: &'cx mut ExtCtxt,\n             ));\n         }\n     });\n-    MacExpr::new(quote_expr!(ecx, ()))\n+    MacEager::expr(quote_expr!(ecx, ()))\n }\n \n pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt,\n@@ -101,7 +102,7 @@ pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt,\n     let sym = Ident::new(token::gensym(&(\n         \"__register_diagnostic_\".to_string() + &token::get_ident(*code)\n     )));\n-    MacItems::new(vec![quote_item!(ecx, mod $sym {}).unwrap()].into_iter())\n+    MacEager::items(SmallVector::many(vec![quote_item!(ecx, mod $sym {}).unwrap()]))\n }\n \n pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n@@ -126,7 +127,7 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n             (descriptions.len(), ecx.expr_vec(span, descriptions))\n         });\n \n-    MacItems::new(vec![quote_item!(ecx,\n+    MacEager::items(SmallVector::many(vec![quote_item!(ecx,\n         pub static $name: [(&'static str, &'static str); $count] = $expr;\n-    ).unwrap()].into_iter())\n+    ).unwrap()]))\n }"}, {"sha": "ae48084947e4393b5531c9dc3c6de0a6c9e206af", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad", "patch": "@@ -217,7 +217,7 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n         },\n     });\n \n-    MacExpr::new(P(ast::Expr {\n+    MacEager::expr(P(ast::Expr {\n         id: ast::DUMMY_NODE_ID,\n         node: ast::ExprInlineAsm(ast::InlineAsm {\n             asm: token::intern_and_get_ident(&asm),"}, {"sha": "e5d1fe2388c50ee2f01937dfd09f8aa9d194097b", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 69, "deletions": 47, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad", "patch": "@@ -28,6 +28,7 @@ use fold::Folder;\n \n use std::collections::HashMap;\n use std::rc::Rc;\n+use std::default::Default;\n \n pub trait ItemDecorator {\n     fn expand(&self,\n@@ -226,9 +227,17 @@ impl<F> IdentMacroExpander for F\n     }\n }\n \n+// Use a macro because forwarding to a simple function has type system issues\n+macro_rules! make_stmt_default {\n+    ($me:expr) => {\n+        $me.make_expr().map(|e| {\n+            P(codemap::respan(e.span, ast::StmtExpr(e, ast::DUMMY_NODE_ID)))\n+        })\n+    }\n+}\n+\n /// The result of a macro expansion. The return values of the various\n-/// methods are spliced into the AST at the callsite of the macro (or\n-/// just into the compiler's internal macro table, for `make_def`).\n+/// methods are spliced into the AST at the callsite of the macro.\n pub trait MacResult {\n     /// Create an expression.\n     fn make_expr(self: Box<Self>) -> Option<P<ast::Expr>> {\n@@ -254,63 +263,76 @@ pub trait MacResult {\n     /// By default this attempts to create an expression statement,\n     /// returning None if that fails.\n     fn make_stmt(self: Box<Self>) -> Option<P<ast::Stmt>> {\n-        self.make_expr()\n-            .map(|e| P(codemap::respan(e.span, ast::StmtExpr(e, ast::DUMMY_NODE_ID))))\n+        make_stmt_default!(self)\n     }\n }\n \n-/// A convenience type for macros that return a single expression.\n-pub struct MacExpr {\n-    e: P<ast::Expr>\n-}\n-impl MacExpr {\n-    pub fn new(e: P<ast::Expr>) -> Box<MacResult+'static> {\n-        box MacExpr { e: e } as Box<MacResult+'static>\n-    }\n-}\n-impl MacResult for MacExpr {\n-    fn make_expr(self: Box<MacExpr>) -> Option<P<ast::Expr>> {\n-        Some(self.e)\n-    }\n-    fn make_pat(self: Box<MacExpr>) -> Option<P<ast::Pat>> {\n-        match self.e.node {\n-            ast::ExprLit(_) => Some(P(ast::Pat {\n-                id: ast::DUMMY_NODE_ID,\n-                span: self.e.span,\n-                node: ast::PatLit(self.e)\n-            })),\n-            _ => None\n+macro_rules! make_MacEager {\n+    ( $( $fld:ident: $t:ty, )* ) => {\n+        /// `MacResult` implementation for the common case where you've already\n+        /// built each form of AST that you might return.\n+        #[derive(Default)]\n+        pub struct MacEager {\n+            $(\n+                pub $fld: Option<$t>,\n+            )*\n+        }\n+\n+        impl MacEager {\n+            $(\n+                pub fn $fld(v: $t) -> Box<MacResult> {\n+                    box MacEager {\n+                        $fld: Some(v),\n+                        ..Default::default()\n+                    } as Box<MacResult>\n+                }\n+            )*\n         }\n     }\n }\n-/// A convenience type for macros that return a single pattern.\n-pub struct MacPat {\n-    p: P<ast::Pat>\n+\n+make_MacEager! {\n+    expr: P<ast::Expr>,\n+    pat: P<ast::Pat>,\n+    items: SmallVector<P<ast::Item>>,\n+    methods: SmallVector<P<ast::Method>>,\n+    stmt: P<ast::Stmt>,\n }\n-impl MacPat {\n-    pub fn new(p: P<ast::Pat>) -> Box<MacResult+'static> {\n-        box MacPat { p: p } as Box<MacResult+'static>\n+\n+impl MacResult for MacEager {\n+    fn make_expr(self: Box<Self>) -> Option<P<ast::Expr>> {\n+        self.expr\n     }\n-}\n-impl MacResult for MacPat {\n-    fn make_pat(self: Box<MacPat>) -> Option<P<ast::Pat>> {\n-        Some(self.p)\n+\n+    fn make_items(self: Box<Self>) -> Option<SmallVector<P<ast::Item>>> {\n+        self.items\n     }\n-}\n-/// A type for macros that return multiple items.\n-pub struct MacItems {\n-    items: SmallVector<P<ast::Item>>\n-}\n \n-impl MacItems {\n-    pub fn new<I: Iterator<Item=P<ast::Item>>>(it: I) -> Box<MacResult+'static> {\n-        box MacItems { items: it.collect() } as Box<MacResult+'static>\n+    fn make_methods(self: Box<Self>) -> Option<SmallVector<P<ast::Method>>> {\n+        self.methods\n     }\n-}\n \n-impl MacResult for MacItems {\n-    fn make_items(self: Box<MacItems>) -> Option<SmallVector<P<ast::Item>>> {\n-        Some(self.items)\n+    fn make_stmt(self: Box<Self>) -> Option<P<ast::Stmt>> {\n+        match self.stmt {\n+            None => make_stmt_default!(self),\n+            s => s,\n+        }\n+    }\n+\n+    fn make_pat(self: Box<Self>) -> Option<P<ast::Pat>> {\n+        if let Some(p) = self.pat {\n+            return Some(p);\n+        }\n+        if let Some(e) = self.expr {\n+            if let ast::ExprLit(_) = e.node {\n+                return Some(P(ast::Pat {\n+                    id: ast::DUMMY_NODE_ID,\n+                    span: e.span,\n+                    node: ast::PatLit(e),\n+                }));\n+            }\n+        }\n+        None\n     }\n }\n "}, {"sha": "6a2209bf0aee2f7adbd9a96666a8635fcbf63a53", "filename": "src/libsyntax/ext/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Flibsyntax%2Fext%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Flibsyntax%2Fext%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fcfg.rs?ref=f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad", "patch": "@@ -35,5 +35,5 @@ pub fn expand_cfg<'cx>(cx: &mut ExtCtxt,\n     }\n \n     let matches_cfg = attr::cfg_matches(&cx.parse_sess.span_diagnostic, &cx.cfg, &*cfg);\n-    MacExpr::new(cx.expr_bool(sp, matches_cfg))\n+    MacEager::expr(cx.expr_bool(sp, matches_cfg))\n }"}, {"sha": "754c73a9d7838485869216b364c0ca64ca8e35f9", "filename": "src/libsyntax/ext/concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Flibsyntax%2Fext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Flibsyntax%2Fext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat.rs?ref=f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad", "patch": "@@ -60,7 +60,7 @@ pub fn expand_syntax_ext(cx: &mut base::ExtCtxt,\n             }\n         }\n     }\n-    base::MacExpr::new(cx.expr_str(\n+    base::MacEager::expr(cx.expr_str(\n             sp,\n             token::intern_and_get_ident(&accumulator[..])))\n }"}, {"sha": "e350ce6101737ac3ca2bdd0e8c32ecfdd206f2bf", "filename": "src/libsyntax/ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat_idents.rs?ref=f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad", "patch": "@@ -67,5 +67,5 @@ pub fn expand_syntax_ext<'cx>(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree]\n         ),\n         span: sp,\n     });\n-    MacExpr::new(e)\n+    MacEager::expr(e)\n }"}, {"sha": "f72303985e78cc24d45888e7e7081eb0b90b2543", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad", "patch": "@@ -59,7 +59,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenT\n                                           &s[..]))))\n       }\n     };\n-    MacExpr::new(e)\n+    MacEager::expr(e)\n }\n \n pub fn expand_env<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n@@ -108,5 +108,5 @@ pub fn expand_env<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n         }\n         Ok(s) => cx.expr_str(sp, token::intern_and_get_ident(&s))\n     };\n-    MacExpr::new(e)\n+    MacEager::expr(e)\n }"}, {"sha": "0eaca9af4f08d41258287ac5c0dc24704b848caa", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad", "patch": "@@ -633,7 +633,7 @@ pub fn expand_format_args<'cx>(ecx: &'cx mut ExtCtxt, sp: Span,\n \n     match parse_args(ecx, sp, tts) {\n         Some((efmt, args, order, names)) => {\n-            MacExpr::new(expand_preparsed_format_args(ecx, sp, efmt,\n+            MacEager::expr(expand_preparsed_format_args(ecx, sp, efmt,\n                                                       args, order, names))\n         }\n         None => DummyResult::expr(sp)"}, {"sha": "544fb15dcde7b0a829963bb40cc694e4009d9b30", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad", "patch": "@@ -402,15 +402,15 @@ pub fn expand_quote_tokens<'cx>(cx: &'cx mut ExtCtxt,\n                                 -> Box<base::MacResult+'cx> {\n     let (cx_expr, expr) = expand_tts(cx, sp, tts);\n     let expanded = expand_wrapper(cx, sp, cx_expr, expr);\n-    base::MacExpr::new(expanded)\n+    base::MacEager::expr(expanded)\n }\n \n pub fn expand_quote_expr<'cx>(cx: &'cx mut ExtCtxt,\n                               sp: Span,\n                               tts: &[ast::TokenTree])\n                               -> Box<base::MacResult+'cx> {\n     let expanded = expand_parse_call(cx, sp, \"parse_expr\", Vec::new(), tts);\n-    base::MacExpr::new(expanded)\n+    base::MacEager::expr(expanded)\n }\n \n pub fn expand_quote_item<'cx>(cx: &mut ExtCtxt,\n@@ -419,31 +419,31 @@ pub fn expand_quote_item<'cx>(cx: &mut ExtCtxt,\n                               -> Box<base::MacResult+'cx> {\n     let expanded = expand_parse_call(cx, sp, \"parse_item_with_outer_attributes\",\n                                     vec!(), tts);\n-    base::MacExpr::new(expanded)\n+    base::MacEager::expr(expanded)\n }\n \n pub fn expand_quote_pat<'cx>(cx: &'cx mut ExtCtxt,\n                              sp: Span,\n                              tts: &[ast::TokenTree])\n                              -> Box<base::MacResult+'cx> {\n     let expanded = expand_parse_call(cx, sp, \"parse_pat\", vec!(), tts);\n-    base::MacExpr::new(expanded)\n+    base::MacEager::expr(expanded)\n }\n \n pub fn expand_quote_arm(cx: &mut ExtCtxt,\n                         sp: Span,\n                         tts: &[ast::TokenTree])\n                         -> Box<base::MacResult+'static> {\n     let expanded = expand_parse_call(cx, sp, \"parse_arm\", vec!(), tts);\n-    base::MacExpr::new(expanded)\n+    base::MacEager::expr(expanded)\n }\n \n pub fn expand_quote_ty(cx: &mut ExtCtxt,\n                        sp: Span,\n                        tts: &[ast::TokenTree])\n                        -> Box<base::MacResult+'static> {\n     let expanded = expand_parse_call(cx, sp, \"parse_ty\", vec!(), tts);\n-    base::MacExpr::new(expanded)\n+    base::MacEager::expr(expanded)\n }\n \n pub fn expand_quote_method(cx: &mut ExtCtxt,\n@@ -452,7 +452,7 @@ pub fn expand_quote_method(cx: &mut ExtCtxt,\n                            -> Box<base::MacResult+'static> {\n     let expanded = expand_parse_call(cx, sp, \"parse_method_with_outer_attributes\",\n                                      vec!(), tts);\n-    base::MacExpr::new(expanded)\n+    base::MacEager::expr(expanded)\n }\n \n pub fn expand_quote_stmt(cx: &mut ExtCtxt,\n@@ -462,7 +462,7 @@ pub fn expand_quote_stmt(cx: &mut ExtCtxt,\n     let e_attrs = cx.expr_vec_ng(sp);\n     let expanded = expand_parse_call(cx, sp, \"parse_stmt\",\n                                     vec!(e_attrs), tts);\n-    base::MacExpr::new(expanded)\n+    base::MacEager::expr(expanded)\n }\n \n fn ids_ext(strs: Vec<String> ) -> Vec<ast::Ident> {"}, {"sha": "ba3743cdb335bcf8855af674f06704c605c65aa8", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad", "patch": "@@ -35,7 +35,7 @@ pub fn expand_line(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n     let topmost = cx.original_span_in_file();\n     let loc = cx.codemap().lookup_char_pos(topmost.lo);\n \n-    base::MacExpr::new(cx.expr_u32(topmost, loc.line as u32))\n+    base::MacEager::expr(cx.expr_u32(topmost, loc.line as u32))\n }\n \n /* column!(): expands to the current column number */\n@@ -46,7 +46,7 @@ pub fn expand_column(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n     let topmost = cx.original_span_in_file();\n     let loc = cx.codemap().lookup_char_pos(topmost.lo);\n \n-    base::MacExpr::new(cx.expr_u32(topmost, loc.col.to_usize() as u32))\n+    base::MacEager::expr(cx.expr_u32(topmost, loc.col.to_usize() as u32))\n }\n \n /// file!(): expands to the current filename */\n@@ -59,13 +59,13 @@ pub fn expand_file(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n     let topmost = cx.original_span_in_file();\n     let loc = cx.codemap().lookup_char_pos(topmost.lo);\n     let filename = token::intern_and_get_ident(&loc.file.name);\n-    base::MacExpr::new(cx.expr_str(topmost, filename))\n+    base::MacEager::expr(cx.expr_str(topmost, filename))\n }\n \n pub fn expand_stringify(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                         -> Box<base::MacResult+'static> {\n     let s = pprust::tts_to_string(tts);\n-    base::MacExpr::new(cx.expr_str(sp,\n+    base::MacEager::expr(cx.expr_str(sp,\n                                    token::intern_and_get_ident(&s[..])))\n }\n \n@@ -77,7 +77,7 @@ pub fn expand_mod(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                    .map(|x| token::get_ident(*x).to_string())\n                    .collect::<Vec<String>>()\n                    .connect(\"::\");\n-    base::MacExpr::new(cx.expr_str(\n+    base::MacEager::expr(cx.expr_str(\n             sp,\n             token::intern_and_get_ident(&string[..])))\n }\n@@ -155,7 +155,7 @@ pub fn expand_include_str(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n             let interned = token::intern_and_get_ident(&src[..]);\n             cx.codemap().new_filemap(filename, src);\n \n-            base::MacExpr::new(cx.expr_str(sp, interned))\n+            base::MacEager::expr(cx.expr_str(sp, interned))\n         }\n         Err(_) => {\n             cx.span_err(sp,\n@@ -181,7 +181,7 @@ pub fn expand_include_bytes(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n         }\n         Ok(bytes) => {\n             let bytes = bytes.iter().cloned().collect();\n-            base::MacExpr::new(cx.expr_lit(sp, ast::LitBinary(Rc::new(bytes))))\n+            base::MacEager::expr(cx.expr_lit(sp, ast::LitBinary(Rc::new(bytes))))\n         }\n     }\n }"}, {"sha": "f5a9063e1def5107f29a03f5633bf4f7f0cfc392", "filename": "src/test/auxiliary/issue_16723_multiple_items_syntax_ext.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Ftest%2Fauxiliary%2Fissue_16723_multiple_items_syntax_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Ftest%2Fauxiliary%2Fissue_16723_multiple_items_syntax_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_16723_multiple_items_syntax_ext.rs?ref=f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad", "patch": "@@ -19,7 +19,8 @@ extern crate rustc;\n \n use syntax::ast;\n use syntax::codemap;\n-use syntax::ext::base::{ExtCtxt, MacResult, MacItems};\n+use syntax::ext::base::{ExtCtxt, MacResult, MacEager};\n+use syntax::util::small_vector::SmallVector;\n use rustc::plugin::Registry;\n \n #[plugin_registrar]\n@@ -28,8 +29,8 @@ pub fn plugin_registrar(reg: &mut Registry) {\n }\n \n fn expand(cx: &mut ExtCtxt, _: codemap::Span, _: &[ast::TokenTree]) -> Box<MacResult+'static> {\n-    MacItems::new(vec![\n+    MacEager::items(SmallVector::many(vec![\n         quote_item!(cx, struct Struct1;).unwrap(),\n         quote_item!(cx, struct Struct2;).unwrap()\n-    ].into_iter())\n+    ]))\n }"}, {"sha": "01bfbd3dbceb6f65e52de3217a9773bac356455f", "filename": "src/test/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs?ref=f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad", "patch": "@@ -47,7 +47,7 @@ fn expand_make_a_1(cx: &mut ExtCtxt, sp: Span, tts: &[TokenTree])\n     if !tts.is_empty() {\n         cx.span_fatal(sp, \"make_a_1 takes no arguments\");\n     }\n-    MacExpr::new(quote_expr!(cx, 1))\n+    MacEager::expr(quote_expr!(cx, 1))\n }\n \n // See Issue #15750\n@@ -57,7 +57,7 @@ fn expand_identity(cx: &mut ExtCtxt, _span: Span, tts: &[TokenTree])\n     let mut parser = parse::new_parser_from_tts(cx.parse_sess(),\n         cx.cfg(), tts.to_vec());\n     let expr = parser.parse_expr();\n-    MacExpr::new(quote_expr!(&mut *cx, $expr))\n+    MacEager::expr(quote_expr!(&mut *cx, $expr))\n }\n \n fn expand_into_foo(cx: &mut ExtCtxt, sp: Span, attr: &MetaItem, it: P<Item>)\n@@ -114,7 +114,7 @@ fn expand_forged_ident(cx: &mut ExtCtxt, sp: Span, tts: &[TokenTree]) -> Box<Mac\n         let mut parser = new_parser_from_tts(parse_sess, cfg, tt);\n         parser.parse_expr()\n     };\n-    MacExpr::new(expr)\n+    MacEager::expr(expr)\n }\n \n pub fn foo() {}"}, {"sha": "1775bbf4af21f635ce32c5d6434d9daae132ded1", "filename": "src/test/auxiliary/plugin_args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Ftest%2Fauxiliary%2Fplugin_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Ftest%2Fauxiliary%2Fplugin_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fplugin_args.rs?ref=f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad", "patch": "@@ -20,7 +20,7 @@ use std::borrow::ToOwned;\n use syntax::ast;\n use syntax::codemap::Span;\n use syntax::ext::build::AstBuilder;\n-use syntax::ext::base::{TTMacroExpander, ExtCtxt, MacResult, MacExpr, NormalTT};\n+use syntax::ext::base::{TTMacroExpander, ExtCtxt, MacResult, MacEager, NormalTT};\n use syntax::parse::token;\n use syntax::print::pprust;\n use syntax::ptr::P;\n@@ -38,7 +38,7 @@ impl TTMacroExpander for Expander {\n         let args = self.args.iter().map(|i| pprust::meta_item_to_string(&*i))\n             .collect::<Vec<_>>().connect(\", \");\n         let interned = token::intern_and_get_ident(&args[..]);\n-        MacExpr::new(ecx.expr_str(sp, interned))\n+        MacEager::expr(ecx.expr_str(sp, interned))\n     }\n }\n "}, {"sha": "e5c4211110558f21adb45c51e2d07be93a504551", "filename": "src/test/auxiliary/roman_numerals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Ftest%2Fauxiliary%2Froman_numerals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Ftest%2Fauxiliary%2Froman_numerals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Froman_numerals.rs?ref=f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad", "patch": "@@ -19,7 +19,7 @@ extern crate rustc;\n use syntax::codemap::Span;\n use syntax::parse::token;\n use syntax::ast::{TokenTree, TtToken};\n-use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacExpr};\n+use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacEager};\n use syntax::ext::build::AstBuilder;  // trait for expr_usize\n use rustc::plugin::Registry;\n \n@@ -61,7 +61,7 @@ fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n         }\n     }\n \n-    MacExpr::new(cx.expr_usize(sp, total))\n+    MacEager::expr(cx.expr_usize(sp, total))\n }\n \n #[plugin_registrar]"}, {"sha": "07f3b863af8a1f98006d1e2b2b4b3bc9aa35d3ee", "filename": "src/test/auxiliary/syntax_extension_with_dll_deps_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Ftest%2Fauxiliary%2Fsyntax_extension_with_dll_deps_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad/src%2Ftest%2Fauxiliary%2Fsyntax_extension_with_dll_deps_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsyntax_extension_with_dll_deps_2.rs?ref=f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad", "patch": "@@ -30,5 +30,5 @@ pub fn plugin_registrar(reg: &mut Registry) {\n fn expand_foo(cx: &mut ExtCtxt, sp: Span, tts: &[TokenTree])\n               -> Box<MacResult+'static> {\n     let answer = other::the_answer();\n-    MacExpr::new(quote_expr!(cx, $answer))\n+    MacEager::expr(quote_expr!(cx, $answer))\n }"}]}