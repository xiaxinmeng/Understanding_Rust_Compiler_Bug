{"sha": "845ad1b4ed9e1ca67abaa20414698c1fa0959489", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NWFkMWI0ZWQ5ZTFjYTY3YWJhYTIwNDE0Njk4YzFmYTA5NTk0ODk=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-17T09:29:17Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-17T23:55:00Z"}, "message": "Stop trying to resolve an import directive after the resolution fails", "tree": {"sha": "23a5da9b745cbe0371dcb4511cb9caa19c41a781", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23a5da9b745cbe0371dcb4511cb9caa19c41a781"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/845ad1b4ed9e1ca67abaa20414698c1fa0959489", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/845ad1b4ed9e1ca67abaa20414698c1fa0959489", "html_url": "https://github.com/rust-lang/rust/commit/845ad1b4ed9e1ca67abaa20414698c1fa0959489", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/845ad1b4ed9e1ca67abaa20414698c1fa0959489/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57c357d89183df173b0e42a0f745d9cfdb67fb1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/57c357d89183df173b0e42a0f745d9cfdb67fb1a", "html_url": "https://github.com/rust-lang/rust/commit/57c357d89183df173b0e42a0f745d9cfdb67fb1a"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "459a7392f6cf4a5bb1d311a85d6b9bacded2725f", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/845ad1b4ed9e1ca67abaa20414698c1fa0959489/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/845ad1b4ed9e1ca67abaa20414698c1fa0959489/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=845ad1b4ed9e1ca67abaa20414698c1fa0959489", "patch": "@@ -173,13 +173,14 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n     fn resolve_imports(&mut self) {\n         let mut i = 0;\n         let mut prev_unresolved_imports = 0;\n+        let mut errors = Vec::new();\n+\n         loop {\n             debug!(\"(resolving imports) iteration {}, {} imports left\",\n                    i,\n                    self.resolver.unresolved_imports);\n \n-            let module_root = self.resolver.graph_root;\n-            let errors = self.resolve_imports_for_module_subtree(module_root);\n+            self.resolve_imports_for_module_subtree(self.resolver.graph_root, &mut errors);\n \n             if self.resolver.unresolved_imports == 0 {\n                 debug!(\"(resolving imports) success\");\n@@ -197,7 +198,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                     // to avoid generating multiple errors on the same import.\n                     // Imports that are still indeterminate at this point are actually blocked\n                     // by errored imports, so there is no point reporting them.\n-                    self.resolver.report_unresolved_imports(module_root);\n+                    self.resolver.report_unresolved_imports(self.resolver.graph_root);\n                 }\n                 break;\n             }\n@@ -234,30 +235,27 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n     /// Attempts to resolve imports for the given module and all of its\n     /// submodules.\n     fn resolve_imports_for_module_subtree(&mut self,\n-                                          module_: Module<'b>)\n-                                          -> Vec<ImportResolvingError<'b>> {\n-        let mut errors = Vec::new();\n+                                          module_: Module<'b>,\n+                                          errors: &mut Vec<ImportResolvingError<'b>>) {\n         debug!(\"(resolving imports for module subtree) resolving {}\",\n                module_to_string(&module_));\n         let orig_module = replace(&mut self.resolver.current_module, module_);\n-        errors.extend(self.resolve_imports_for_module(module_));\n+        self.resolve_imports_for_module(module_, errors);\n         self.resolver.current_module = orig_module;\n \n         for (_, child_module) in module_.module_children.borrow().iter() {\n-            errors.extend(self.resolve_imports_for_module_subtree(child_module));\n+            self.resolve_imports_for_module_subtree(child_module, errors);\n         }\n-\n-        errors\n     }\n \n     /// Attempts to resolve imports for the given module only.\n-    fn resolve_imports_for_module(&mut self, module: Module<'b>) -> Vec<ImportResolvingError<'b>> {\n-        let mut errors = Vec::new();\n-\n+    fn resolve_imports_for_module(&mut self,\n+                                  module: Module<'b>,\n+                                  errors: &mut Vec<ImportResolvingError<'b>>) {\n         if module.all_imports_resolved() {\n             debug!(\"(resolving imports for module) all imports resolved for {}\",\n                    module_to_string(&module));\n-            return errors;\n+            return;\n         }\n \n         let mut imports = module.imports.borrow_mut();\n@@ -278,6 +276,8 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                         span: span,\n                         help: help,\n                     });\n+                    module.resolved_import_count.set(module.resolved_import_count.get() + 1);\n+                    continue;\n                 }\n                 ResolveResult::Indeterminate => {}\n                 ResolveResult::Success(()) => {\n@@ -293,8 +293,6 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         }\n \n         imports.extend(indeterminate_imports);\n-\n-        errors\n     }\n \n     /// Attempts to resolve the given import. The return value indicates\n@@ -562,6 +560,13 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                        ns: Namespace,\n                        binding: &'b NameBinding<'b>,\n                        old_binding: &'b NameBinding<'b>) {\n+        // Error on the second of two conflicting imports\n+        if old_binding.is_import() && binding.is_import() &&\n+           old_binding.span.unwrap().lo > binding.span.unwrap().lo {\n+            self.report_conflict(name, ns, old_binding, binding);\n+            return;\n+        }\n+\n         if old_binding.is_extern_crate() {\n             let msg = format!(\"import `{0}` conflicts with imported crate \\\n                                in this module (maybe you meant `use {0}::*`?)\","}, {"sha": "fa3b75c70f0b68a75250c93b5c50638e20257bf6", "filename": "src/test/compile-fail/import-shadow-6.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/845ad1b4ed9e1ca67abaa20414698c1fa0959489/src%2Ftest%2Fcompile-fail%2Fimport-shadow-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/845ad1b4ed9e1ca67abaa20414698c1fa0959489/src%2Ftest%2Fcompile-fail%2Fimport-shadow-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-6.rs?ref=845ad1b4ed9e1ca67abaa20414698c1fa0959489", "patch": "@@ -12,8 +12,8 @@\n \n #![no_implicit_prelude]\n \n-use qux::*; //~ERROR a type named `Baz` has already been imported in this module\n-use foo::*;\n+use qux::*;\n+use foo::*; //~ERROR a type named `Baz` has already been imported in this module\n \n mod foo {\n     pub type Baz = isize;"}]}