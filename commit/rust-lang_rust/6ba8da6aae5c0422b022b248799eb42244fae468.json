{"sha": "6ba8da6aae5c0422b022b248799eb42244fae468", "node_id": "C_kwDOAAsO6NoAKDZiYThkYTZhYWU1YzA0MjJiMDIyYjI0ODc5OWViNDIyNDRmYWU0Njg", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-25T14:01:06Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-25T14:01:06Z"}, "message": "Fall through to check other arguments instead of bailing out on the first error", "tree": {"sha": "7dbbab8c9a3387bf6e81c54e796131c0aa72ae2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7dbbab8c9a3387bf6e81c54e796131c0aa72ae2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ba8da6aae5c0422b022b248799eb42244fae468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ba8da6aae5c0422b022b248799eb42244fae468", "html_url": "https://github.com/rust-lang/rust/commit/6ba8da6aae5c0422b022b248799eb42244fae468", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ba8da6aae5c0422b022b248799eb42244fae468/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46a23420b6c2134b9f023898e22b9868d3bc664e", "url": "https://api.github.com/repos/rust-lang/rust/commits/46a23420b6c2134b9f023898e22b9868d3bc664e", "html_url": "https://github.com/rust-lang/rust/commit/46a23420b6c2134b9f023898e22b9868d3bc664e"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "ea81f1ef90c9a148a82e26b8b25405a4f11d1987", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6ba8da6aae5c0422b022b248799eb42244fae468/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba8da6aae5c0422b022b248799eb42244fae468/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=6ba8da6aae5c0422b022b248799eb42244fae468", "patch": "@@ -296,6 +296,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             ExprKind::Path(ref qpath) => self.check_expr_path(qpath, expr, &[]),\n             ExprKind::InlineAsm(asm) => {\n+                // We defer some asm checks as we may not have resolved the input and output types yet (they may still be infer vars).\n                 self.deferred_asm_checks.borrow_mut().push((asm, expr.hir_id));\n                 self.check_expr_asm(asm)\n             }\n@@ -539,6 +540,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if tcx.fn_sig(did).abi() == RustIntrinsic && tcx.item_name(did) == sym::transmute {\n                 let from = fn_sig.inputs().skip_binder()[0];\n                 let to = fn_sig.output().skip_binder();\n+                // We defer the transmute to the end of typeck, once all inference vars have\n+                // been resolved or we errored. This is important as we can only check transmute\n+                // on concrete types, but the output type may not be known yet (it would only\n+                // be known if explicitly specified via turbofish).\n                 self.deferred_transmute_checks.borrow_mut().push((from, to, expr.span));\n             }\n             if !tcx.features().unsized_fn_params {"}, {"sha": "027868be8bb0df8ab3046a6eff7115e7a992ed55", "filename": "compiler/rustc_typeck/src/check/intrinsicck.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ba8da6aae5c0422b022b248799eb42244fae468/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba8da6aae5c0422b022b248799eb42244fae468/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsicck.rs?ref=6ba8da6aae5c0422b022b248799eb42244fae468", "patch": "@@ -361,7 +361,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // target. Reject those here.\n                 if let InlineAsmRegOrRegClass::Reg(reg) = reg {\n                     if let InlineAsmReg::Err = reg {\n-                        return;\n+                        // `validate` will panic on `Err`, as an error must\n+                        // already have been reported.\n+                        continue;\n                     }\n                     if let Err(msg) = reg.validate(\n                         asm_arch,\n@@ -380,7 +382,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let mut missing_required_features = vec![];\n                     let reg_class = reg.reg_class();\n                     if let InlineAsmRegClass::Err = reg_class {\n-                        return;\n+                        continue;\n                     }\n                     for &(_, feature) in reg_class.supported_types(asm_arch) {\n                         match feature {"}]}