{"sha": "e5e6375352636360add297c1f5a1f37ce71506e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZTYzNzUzNTI2MzYzNjBhZGQyOTdjMWY1YTFmMzdjZTcxNTA2ZTk=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-08-05T10:04:56Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-08-13T20:11:57Z"}, "message": "Move SmallVec and ThinVec out of libsyntax", "tree": {"sha": "9274f6f905ccbcfe493fbc161838084f977a180a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9274f6f905ccbcfe493fbc161838084f977a180a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5e6375352636360add297c1f5a1f37ce71506e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5e6375352636360add297c1f5a1f37ce71506e9", "html_url": "https://github.com/rust-lang/rust/commit/e5e6375352636360add297c1f5a1f37ce71506e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5e6375352636360add297c1f5a1f37ce71506e9/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5a448b3f47b22c9cb010198bdcc49d4392b090b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5a448b3f47b22c9cb010198bdcc49d4392b090b", "html_url": "https://github.com/rust-lang/rust/commit/d5a448b3f47b22c9cb010198bdcc49d4392b090b"}], "stats": {"total": 490, "additions": 245, "deletions": 245}, "files": [{"sha": "9465f45dc19a47edbf2b8dc582d7b96b3571e1f2", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -2049,6 +2049,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"log 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n+ \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"rustc_target 0.0.0\",\n  \"syntax 0.0.0\","}, {"sha": "9ae5ab7f8be2e161631230486a3641c6d4e90608", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -51,6 +51,8 @@ use lint::builtin::{self, PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n                     ELIDED_LIFETIMES_IN_PATHS};\n use middle::cstore::CrateStore;\n use rustc_data_structures::indexed_vec::IndexVec;\n+use rustc_data_structures::small_vec::OneVector;\n+use rustc_data_structures::thin_vec::ThinVec;\n use session::Session;\n use util::common::FN_OUTPUT_NAME;\n use util::nodemap::{DefIdMap, NodeMap};\n@@ -71,7 +73,6 @@ use syntax::std_inject;\n use syntax::symbol::{keywords, Symbol};\n use syntax::tokenstream::{Delimited, TokenStream, TokenTree};\n use syntax::parse::token::Token;\n-use syntax::util::small_vector::SmallVector;\n use syntax::visit::{self, Visitor};\n use syntax_pos::{Span, MultiSpan};\n \n@@ -3136,12 +3137,12 @@ impl<'a> LoweringContext<'a> {\n         &mut self,\n         decl: &FnDecl,\n         header: &FnHeader,\n-        ids: &mut SmallVector<hir::ItemId>,\n+        ids: &mut OneVector<hir::ItemId>,\n     ) {\n         if let Some(id) = header.asyncness.opt_return_id() {\n             ids.push(hir::ItemId { id });\n         }\n-        struct IdVisitor<'a> { ids: &'a mut SmallVector<hir::ItemId> }\n+        struct IdVisitor<'a> { ids: &'a mut OneVector<hir::ItemId> }\n         impl<'a, 'b> Visitor<'a> for IdVisitor<'b> {\n             fn visit_ty(&mut self, ty: &'a Ty) {\n                 match ty.node {\n@@ -3174,36 +3175,36 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_item_id(&mut self, i: &Item) -> SmallVector<hir::ItemId> {\n+    fn lower_item_id(&mut self, i: &Item) -> OneVector<hir::ItemId> {\n         match i.node {\n             ItemKind::Use(ref use_tree) => {\n-                let mut vec = SmallVector::one(hir::ItemId { id: i.id });\n+                let mut vec = OneVector::one(hir::ItemId { id: i.id });\n                 self.lower_item_id_use_tree(use_tree, i.id, &mut vec);\n                 vec\n             }\n-            ItemKind::MacroDef(..) => SmallVector::new(),\n+            ItemKind::MacroDef(..) => OneVector::new(),\n             ItemKind::Fn(ref decl, ref header, ..) => {\n-                let mut ids = SmallVector::one(hir::ItemId { id: i.id });\n+                let mut ids = OneVector::one(hir::ItemId { id: i.id });\n                 self.lower_impl_trait_ids(decl, header, &mut ids);\n                 ids\n             },\n             ItemKind::Impl(.., None, _, ref items) => {\n-                let mut ids = SmallVector::one(hir::ItemId { id: i.id });\n+                let mut ids = OneVector::one(hir::ItemId { id: i.id });\n                 for item in items {\n                     if let ImplItemKind::Method(ref sig, _) = item.node {\n                         self.lower_impl_trait_ids(&sig.decl, &sig.header, &mut ids);\n                     }\n                 }\n                 ids\n             },\n-            _ => SmallVector::one(hir::ItemId { id: i.id }),\n+            _ => OneVector::one(hir::ItemId { id: i.id }),\n         }\n     }\n \n     fn lower_item_id_use_tree(&mut self,\n                               tree: &UseTree,\n                               base_id: NodeId,\n-                              vec: &mut SmallVector<hir::ItemId>)\n+                              vec: &mut OneVector<hir::ItemId>)\n     {\n         match tree.kind {\n             UseTreeKind::Nested(ref nested_vec) => for &(ref nested, id) in nested_vec {\n@@ -4295,8 +4296,8 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_stmt(&mut self, s: &Stmt) -> SmallVector<hir::Stmt> {\n-        SmallVector::one(match s.node {\n+    fn lower_stmt(&mut self, s: &Stmt) -> OneVector<hir::Stmt> {\n+        OneVector::one(match s.node {\n             StmtKind::Local(ref l) => Spanned {\n                 node: hir::StmtKind::Decl(\n                     P(Spanned {"}, {"sha": "589f3c9d87cf57fb1c6014c19ef3206b8a07c9d7", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -33,13 +33,13 @@ use syntax::ext::hygiene::SyntaxContext;\n use syntax::ptr::P;\n use syntax::symbol::{Symbol, keywords};\n use syntax::tokenstream::TokenStream;\n-use syntax::util::ThinVec;\n use syntax::util::parser::ExprPrecedence;\n use ty::AdtKind;\n use ty::query::Providers;\n \n use rustc_data_structures::indexed_vec;\n use rustc_data_structures::sync::{ParallelIterator, par_iter, Send, Sync, scope};\n+use rustc_data_structures::thin_vec::ThinVec;\n \n use serialize::{self, Encoder, Encodable, Decoder, Decodable};\n use std::collections::BTreeMap;"}, {"sha": "83a918f2af83706ea4d4baf7a31fba915378a779", "filename": "src/librustc_allocator/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibrustc_allocator%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibrustc_allocator%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2FCargo.toml?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -10,6 +10,7 @@ test = false\n \n [dependencies]\n rustc = { path = \"../librustc\" }\n+rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_target = { path = \"../librustc_target\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "676dbeeeeb00b5666e11538a5884a268ac10a4b6", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use rustc::middle::allocator::AllocatorKind;\n+use rustc_data_structures::small_vec::OneVector;\n use rustc_errors;\n use syntax::{\n     ast::{\n@@ -28,8 +29,7 @@ use syntax::{\n     fold::{self, Folder},\n     parse::ParseSess,\n     ptr::P,\n-    symbol::Symbol,\n-    util::small_vector::SmallVector,\n+    symbol::Symbol\n };\n use syntax_pos::Span;\n \n@@ -65,7 +65,7 @@ struct ExpandAllocatorDirectives<'a> {\n }\n \n impl<'a> Folder for ExpandAllocatorDirectives<'a> {\n-    fn fold_item(&mut self, item: P<Item>) -> SmallVector<P<Item>> {\n+    fn fold_item(&mut self, item: P<Item>) -> OneVector<P<Item>> {\n         debug!(\"in submodule {}\", self.in_submod);\n \n         let name = if attr::contains_name(&item.attrs, \"global_allocator\") {\n@@ -78,20 +78,20 @@ impl<'a> Folder for ExpandAllocatorDirectives<'a> {\n             _ => {\n                 self.handler\n                     .span_err(item.span, \"allocators must be statics\");\n-                return SmallVector::one(item);\n+                return OneVector::one(item);\n             }\n         }\n \n         if self.in_submod > 0 {\n             self.handler\n                 .span_err(item.span, \"`global_allocator` cannot be used in submodules\");\n-            return SmallVector::one(item);\n+            return OneVector::one(item);\n         }\n \n         if self.found {\n             self.handler\n                 .span_err(item.span, \"cannot define more than one #[global_allocator]\");\n-            return SmallVector::one(item);\n+            return OneVector::one(item);\n         }\n         self.found = true;\n \n@@ -152,7 +152,7 @@ impl<'a> Folder for ExpandAllocatorDirectives<'a> {\n         let module = f.cx.monotonic_expander().fold_item(module).pop().unwrap();\n \n         // Return the item and new submodule\n-        let mut ret = SmallVector::with_capacity(2);\n+        let mut ret = OneVector::with_capacity(2);\n         ret.push(item);\n         ret.push(module);\n "}, {"sha": "d020fe96335e91345fa20e09a3a111cfe5dac199", "filename": "src/librustc_allocator/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibrustc_allocator%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibrustc_allocator%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Flib.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -13,6 +13,7 @@\n \n #[macro_use] extern crate log;\n extern crate rustc;\n+extern crate rustc_data_structures;\n extern crate rustc_errors;\n extern crate rustc_target;\n extern crate syntax;"}, {"sha": "5699512326a37d128936c371344808174a7b3109", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -79,6 +79,7 @@ pub mod sorted_map;\n #[macro_use] pub mod stable_hasher;\n pub mod sync;\n pub mod tiny_list;\n+pub mod thin_vec;\n pub mod transitive_relation;\n pub mod tuple_slice;\n pub use ena::unify;"}, {"sha": "6f101b20d880659cd19ba20a35dedc652cc48435", "filename": "src/librustc_data_structures/small_vec.rs", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibrustc_data_structures%2Fsmall_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibrustc_data_structures%2Fsmall_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsmall_vec.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -29,6 +29,8 @@ use array_vec::Array;\n \n pub struct SmallVec<A: Array>(AccumulateVec<A>);\n \n+pub type OneVector<T> = SmallVec<[T; 1]>;\n+\n impl<A> Clone for SmallVec<A>\n     where A: Array,\n           A::Element: Clone {\n@@ -227,6 +229,69 @@ mod tests {\n \n     use super::*;\n \n+    #[test]\n+    fn test_len() {\n+        let v: OneVector<isize> = OneVector::new();\n+        assert_eq!(0, v.len());\n+\n+        assert_eq!(1, OneVector::one(1).len());\n+        assert_eq!(5, OneVector::many(vec![1, 2, 3, 4, 5]).len());\n+    }\n+\n+    #[test]\n+    fn test_push_get() {\n+        let mut v = OneVector::new();\n+        v.push(1);\n+        assert_eq!(1, v.len());\n+        assert_eq!(1, v[0]);\n+        v.push(2);\n+        assert_eq!(2, v.len());\n+        assert_eq!(2, v[1]);\n+        v.push(3);\n+        assert_eq!(3, v.len());\n+        assert_eq!(3, v[2]);\n+    }\n+\n+    #[test]\n+    fn test_from_iter() {\n+        let v: OneVector<isize> = (vec![1, 2, 3]).into_iter().collect();\n+        assert_eq!(3, v.len());\n+        assert_eq!(1, v[0]);\n+        assert_eq!(2, v[1]);\n+        assert_eq!(3, v[2]);\n+    }\n+\n+    #[test]\n+    fn test_move_iter() {\n+        let v = OneVector::new();\n+        let v: Vec<isize> = v.into_iter().collect();\n+        assert_eq!(v, Vec::new());\n+\n+        let v = OneVector::one(1);\n+        assert_eq!(v.into_iter().collect::<Vec<_>>(), [1]);\n+\n+        let v = OneVector::many(vec![1, 2, 3]);\n+        assert_eq!(v.into_iter().collect::<Vec<_>>(), [1, 2, 3]);\n+    }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_expect_one_zero() {\n+        let _: isize = OneVector::new().expect_one(\"\");\n+    }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_expect_one_many() {\n+        OneVector::many(vec![1, 2]).expect_one(\"\");\n+    }\n+\n+    #[test]\n+    fn test_expect_one_one() {\n+        assert_eq!(1, OneVector::one(1).expect_one(\"\"));\n+        assert_eq!(1, OneVector::many(vec![1]).expect_one(\"\"));\n+    }\n+\n     #[bench]\n     fn fill_small_vec_1_10_with_cap(b: &mut Bencher) {\n         b.iter(|| {"}, {"sha": "546686b46b8db4c92f2474b4f64ee354938cbe5a", "filename": "src/librustc_data_structures/thin_vec.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibrustc_data_structures%2Fthin_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibrustc_data_structures%2Fthin_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fthin_vec.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "previous_filename": "src/libsyntax/util/thin_vec.rs"}, {"sha": "a66392833f69598ce7405b29da89b51cf9e2a30a", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -24,6 +24,8 @@ use rustc::session::Session;\n use rustc::session::config::{Input, OutputFilenames};\n use rustc_borrowck as borrowck;\n use rustc_borrowck::graphviz as borrowck_dot;\n+use rustc_data_structures::small_vec::OneVector;\n+use rustc_data_structures::thin_vec::ThinVec;\n use rustc_metadata::cstore::CStore;\n \n use rustc_mir::util::{write_mir_pretty, write_mir_graphviz};\n@@ -33,8 +35,6 @@ use syntax::fold::{self, Folder};\n use syntax::print::{pprust};\n use syntax::print::pprust::PrintState;\n use syntax::ptr::P;\n-use syntax::util::ThinVec;\n-use syntax::util::small_vector::SmallVector;\n use syntax_pos::{self, FileName};\n \n use graphviz as dot;\n@@ -727,7 +727,7 @@ impl<'a> fold::Folder for ReplaceBodyWithLoop<'a> {\n         self.run(is_const, |s| fold::noop_fold_item_kind(i, s))\n     }\n \n-    fn fold_trait_item(&mut self, i: ast::TraitItem) -> SmallVector<ast::TraitItem> {\n+    fn fold_trait_item(&mut self, i: ast::TraitItem) -> OneVector<ast::TraitItem> {\n         let is_const = match i.node {\n             ast::TraitItemKind::Const(..) => true,\n             ast::TraitItemKind::Method(ast::MethodSig { ref decl, ref header, .. }, _) =>\n@@ -737,7 +737,7 @@ impl<'a> fold::Folder for ReplaceBodyWithLoop<'a> {\n         self.run(is_const, |s| fold::noop_fold_trait_item(i, s))\n     }\n \n-    fn fold_impl_item(&mut self, i: ast::ImplItem) -> SmallVector<ast::ImplItem> {\n+    fn fold_impl_item(&mut self, i: ast::ImplItem) -> OneVector<ast::ImplItem> {\n         let is_const = match i.node {\n             ast::ImplItemKind::Const(..) => true,\n             ast::ImplItemKind::Method(ast::MethodSig { ref decl, ref header, .. }, _) =>\n@@ -785,7 +785,7 @@ impl<'a> fold::Folder for ReplaceBodyWithLoop<'a> {\n             node: ast::ExprKind::Loop(P(empty_block), None),\n             id: self.sess.next_node_id(),\n             span: syntax_pos::DUMMY_SP,\n-            attrs: ast::ThinVec::new(),\n+                attrs: ThinVec::new(),\n         });\n \n         let loop_stmt = ast::Stmt {"}, {"sha": "919ffcb8d0980af09b4990d4181fbc31e87be2d3", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -13,7 +13,6 @@\n pub use self::UnsafeSource::*;\n pub use self::GenericArgs::*;\n pub use symbol::{Ident, Symbol as Name};\n-pub use util::ThinVec;\n pub use util::parser::ExprPrecedence;\n \n use syntax_pos::{Span, DUMMY_SP};\n@@ -25,6 +24,7 @@ use ptr::P;\n use rustc_data_structures::indexed_vec;\n use rustc_data_structures::indexed_vec::Idx;\n use symbol::{Symbol, keywords};\n+use ThinVec;\n use tokenstream::{ThinTokenStream, TokenStream};\n \n use serialize::{self, Encoder, Decoder};"}, {"sha": "879f555ba03ee958d6961f122b7b1c3e759eac75", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -33,8 +33,8 @@ use parse::{self, ParseSess, PResult};\n use parse::token::{self, Token};\n use ptr::P;\n use symbol::Symbol;\n+use ThinVec;\n use tokenstream::{TokenStream, TokenTree, Delimited};\n-use util::ThinVec;\n use GLOBALS;\n \n use std::iter;"}, {"sha": "4fe78bf829a1ca732332530dbb2ad64f82e0b1ae", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -15,9 +15,9 @@ use ast;\n use codemap::Spanned;\n use edition::Edition;\n use parse::{token, ParseSess};\n+use OneVector;\n \n use ptr::P;\n-use util::small_vector::SmallVector;\n \n /// A folder that strips out items that do not belong in the current configuration.\n pub struct StripUnconfigured<'a> {\n@@ -319,22 +319,22 @@ impl<'a> fold::Folder for StripUnconfigured<'a> {\n         Some(P(fold::noop_fold_expr(expr, self)))\n     }\n \n-    fn fold_stmt(&mut self, stmt: ast::Stmt) -> SmallVector<ast::Stmt> {\n+    fn fold_stmt(&mut self, stmt: ast::Stmt) -> OneVector<ast::Stmt> {\n         match self.configure_stmt(stmt) {\n             Some(stmt) => fold::noop_fold_stmt(stmt, self),\n-            None => return SmallVector::new(),\n+            None => return OneVector::new(),\n         }\n     }\n \n-    fn fold_item(&mut self, item: P<ast::Item>) -> SmallVector<P<ast::Item>> {\n+    fn fold_item(&mut self, item: P<ast::Item>) -> OneVector<P<ast::Item>> {\n         fold::noop_fold_item(configure!(self, item), self)\n     }\n \n-    fn fold_impl_item(&mut self, item: ast::ImplItem) -> SmallVector<ast::ImplItem> {\n+    fn fold_impl_item(&mut self, item: ast::ImplItem) -> OneVector<ast::ImplItem> {\n         fold::noop_fold_impl_item(configure!(self, item), self)\n     }\n \n-    fn fold_trait_item(&mut self, item: ast::TraitItem) -> SmallVector<ast::TraitItem> {\n+    fn fold_trait_item(&mut self, item: ast::TraitItem) -> OneVector<ast::TraitItem> {\n         fold::noop_fold_trait_item(configure!(self, item), self)\n     }\n "}, {"sha": "6a5a2a5e500ff8f1dcdefda011ff7e00139c7dbc", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -19,9 +19,9 @@ use ext::base::{ExtCtxt, MacEager, MacResult};\n use ext::build::AstBuilder;\n use parse::token;\n use ptr::P;\n+use OneVector;\n use symbol::{keywords, Symbol};\n use tokenstream::{TokenTree};\n-use util::small_vector::SmallVector;\n \n use diagnostics::metadata::output_metadata;\n \n@@ -131,7 +131,7 @@ pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt,\n     let sym = Ident::with_empty_ctxt(Symbol::gensym(&format!(\n         \"__register_diagnostic_{}\", code\n     )));\n-    MacEager::items(SmallVector::many(vec![\n+    MacEager::items(OneVector::many(vec![\n         ecx.item_mod(\n             span,\n             span,\n@@ -214,7 +214,7 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n         ),\n     );\n \n-    MacEager::items(SmallVector::many(vec![\n+    MacEager::items(OneVector::many(vec![\n         P(ast::Item {\n             ident: *name,\n             attrs: Vec::new(),"}, {"sha": "482d8c2cf9866a390979abaf2e573e6fb1ce55fc", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -22,8 +22,9 @@ use fold::{self, Folder};\n use parse::{self, parser, DirectoryOwnership};\n use parse::token;\n use ptr::P;\n+use OneVector;\n use symbol::{keywords, Ident, Symbol};\n-use util::small_vector::SmallVector;\n+use ThinVec;\n \n use std::collections::HashMap;\n use std::iter;\n@@ -315,7 +316,7 @@ impl<F> IdentMacroExpander for F\n // Use a macro because forwarding to a simple function has type system issues\n macro_rules! make_stmts_default {\n     ($me:expr) => {\n-        $me.make_expr().map(|e| SmallVector::one(ast::Stmt {\n+        $me.make_expr().map(|e| OneVector::one(ast::Stmt {\n             id: ast::DUMMY_NODE_ID,\n             span: e.span,\n             node: ast::StmtKind::Expr(e),\n@@ -331,22 +332,22 @@ pub trait MacResult {\n         None\n     }\n     /// Create zero or more items.\n-    fn make_items(self: Box<Self>) -> Option<SmallVector<P<ast::Item>>> {\n+    fn make_items(self: Box<Self>) -> Option<OneVector<P<ast::Item>>> {\n         None\n     }\n \n     /// Create zero or more impl items.\n-    fn make_impl_items(self: Box<Self>) -> Option<SmallVector<ast::ImplItem>> {\n+    fn make_impl_items(self: Box<Self>) -> Option<OneVector<ast::ImplItem>> {\n         None\n     }\n \n     /// Create zero or more trait items.\n-    fn make_trait_items(self: Box<Self>) -> Option<SmallVector<ast::TraitItem>> {\n+    fn make_trait_items(self: Box<Self>) -> Option<OneVector<ast::TraitItem>> {\n         None\n     }\n \n     /// Create zero or more items in an `extern {}` block\n-    fn make_foreign_items(self: Box<Self>) -> Option<SmallVector<ast::ForeignItem>> { None }\n+    fn make_foreign_items(self: Box<Self>) -> Option<OneVector<ast::ForeignItem>> { None }\n \n     /// Create a pattern.\n     fn make_pat(self: Box<Self>) -> Option<P<ast::Pat>> {\n@@ -357,7 +358,7 @@ pub trait MacResult {\n     ///\n     /// By default this attempts to create an expression statement,\n     /// returning None if that fails.\n-    fn make_stmts(self: Box<Self>) -> Option<SmallVector<ast::Stmt>> {\n+    fn make_stmts(self: Box<Self>) -> Option<OneVector<ast::Stmt>> {\n         make_stmts_default!(self)\n     }\n \n@@ -393,11 +394,11 @@ macro_rules! make_MacEager {\n make_MacEager! {\n     expr: P<ast::Expr>,\n     pat: P<ast::Pat>,\n-    items: SmallVector<P<ast::Item>>,\n-    impl_items: SmallVector<ast::ImplItem>,\n-    trait_items: SmallVector<ast::TraitItem>,\n-    foreign_items: SmallVector<ast::ForeignItem>,\n-    stmts: SmallVector<ast::Stmt>,\n+    items: OneVector<P<ast::Item>>,\n+    impl_items: OneVector<ast::ImplItem>,\n+    trait_items: OneVector<ast::TraitItem>,\n+    foreign_items: OneVector<ast::ForeignItem>,\n+    stmts: OneVector<ast::Stmt>,\n     ty: P<ast::Ty>,\n }\n \n@@ -406,23 +407,23 @@ impl MacResult for MacEager {\n         self.expr\n     }\n \n-    fn make_items(self: Box<Self>) -> Option<SmallVector<P<ast::Item>>> {\n+    fn make_items(self: Box<Self>) -> Option<OneVector<P<ast::Item>>> {\n         self.items\n     }\n \n-    fn make_impl_items(self: Box<Self>) -> Option<SmallVector<ast::ImplItem>> {\n+    fn make_impl_items(self: Box<Self>) -> Option<OneVector<ast::ImplItem>> {\n         self.impl_items\n     }\n \n-    fn make_trait_items(self: Box<Self>) -> Option<SmallVector<ast::TraitItem>> {\n+    fn make_trait_items(self: Box<Self>) -> Option<OneVector<ast::TraitItem>> {\n         self.trait_items\n     }\n \n-    fn make_foreign_items(self: Box<Self>) -> Option<SmallVector<ast::ForeignItem>> {\n+    fn make_foreign_items(self: Box<Self>) -> Option<OneVector<ast::ForeignItem>> {\n         self.foreign_items\n     }\n \n-    fn make_stmts(self: Box<Self>) -> Option<SmallVector<ast::Stmt>> {\n+    fn make_stmts(self: Box<Self>) -> Option<OneVector<ast::Stmt>> {\n         match self.stmts.as_ref().map_or(0, |s| s.len()) {\n             0 => make_stmts_default!(self),\n             _ => self.stmts,\n@@ -482,7 +483,7 @@ impl DummyResult {\n             id: ast::DUMMY_NODE_ID,\n             node: ast::ExprKind::Lit(P(codemap::respan(sp, ast::LitKind::Bool(false)))),\n             span: sp,\n-            attrs: ast::ThinVec::new(),\n+            attrs: ThinVec::new(),\n         })\n     }\n \n@@ -513,41 +514,41 @@ impl MacResult for DummyResult {\n         Some(P(DummyResult::raw_pat(self.span)))\n     }\n \n-    fn make_items(self: Box<DummyResult>) -> Option<SmallVector<P<ast::Item>>> {\n+    fn make_items(self: Box<DummyResult>) -> Option<OneVector<P<ast::Item>>> {\n         // this code needs a comment... why not always just return the Some() ?\n         if self.expr_only {\n             None\n         } else {\n-            Some(SmallVector::new())\n+            Some(OneVector::new())\n         }\n     }\n \n-    fn make_impl_items(self: Box<DummyResult>) -> Option<SmallVector<ast::ImplItem>> {\n+    fn make_impl_items(self: Box<DummyResult>) -> Option<OneVector<ast::ImplItem>> {\n         if self.expr_only {\n             None\n         } else {\n-            Some(SmallVector::new())\n+            Some(OneVector::new())\n         }\n     }\n \n-    fn make_trait_items(self: Box<DummyResult>) -> Option<SmallVector<ast::TraitItem>> {\n+    fn make_trait_items(self: Box<DummyResult>) -> Option<OneVector<ast::TraitItem>> {\n         if self.expr_only {\n             None\n         } else {\n-            Some(SmallVector::new())\n+            Some(OneVector::new())\n         }\n     }\n \n-    fn make_foreign_items(self: Box<Self>) -> Option<SmallVector<ast::ForeignItem>> {\n+    fn make_foreign_items(self: Box<Self>) -> Option<OneVector<ast::ForeignItem>> {\n         if self.expr_only {\n             None\n         } else {\n-            Some(SmallVector::new())\n+            Some(OneVector::new())\n         }\n     }\n \n-    fn make_stmts(self: Box<DummyResult>) -> Option<SmallVector<ast::Stmt>> {\n-        Some(SmallVector::one(ast::Stmt {\n+    fn make_stmts(self: Box<DummyResult>) -> Option<OneVector<ast::Stmt>> {\n+        Some(OneVector::one(ast::Stmt {\n             id: ast::DUMMY_NODE_ID,\n             node: ast::StmtKind::Expr(DummyResult::raw_expr(self.span)),\n             span: self.span,"}, {"sha": "1a17aa3e8fb649a571d4fb1433fcbfd574c3fb33", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -16,6 +16,7 @@ use codemap::{dummy_spanned, respan, Spanned};\n use ext::base::ExtCtxt;\n use ptr::P;\n use symbol::{Symbol, keywords};\n+use ThinVec;\n \n // Transitional re-exports so qquote can find the paths it is looking for\n mod syntax {\n@@ -519,7 +520,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             init: Some(ex),\n             id: ast::DUMMY_NODE_ID,\n             span: sp,\n-            attrs: ast::ThinVec::new(),\n+            attrs: ThinVec::new(),\n         });\n         ast::Stmt {\n             id: ast::DUMMY_NODE_ID,\n@@ -547,7 +548,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             init: Some(ex),\n             id: ast::DUMMY_NODE_ID,\n             span: sp,\n-            attrs: ast::ThinVec::new(),\n+            attrs: ThinVec::new(),\n         });\n         ast::Stmt {\n             id: ast::DUMMY_NODE_ID,\n@@ -564,7 +565,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             init: None,\n             id: ast::DUMMY_NODE_ID,\n             span,\n-            attrs: ast::ThinVec::new(),\n+            attrs: ThinVec::new(),\n         });\n         ast::Stmt {\n             id: ast::DUMMY_NODE_ID,\n@@ -603,7 +604,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             id: ast::DUMMY_NODE_ID,\n             node,\n             span,\n-            attrs: ast::ThinVec::new(),\n+            attrs: ThinVec::new(),\n         })\n     }\n \n@@ -678,7 +679,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             expr: e,\n             span,\n             is_shorthand: false,\n-            attrs: ast::ThinVec::new(),\n+            attrs: ThinVec::new(),\n         }\n     }\n     fn expr_struct(&self, span: Span, path: ast::Path, fields: Vec<ast::Field>) -> P<ast::Expr> {"}, {"sha": "f7ea781e0211538a97e7a821cc7f1f1c7c1549c0", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -26,12 +26,12 @@ use parse::{DirectoryOwnership, PResult, ParseSess};\n use parse::token::{self, Token};\n use parse::parser::Parser;\n use ptr::P;\n+use OneVector;\n use symbol::Symbol;\n use symbol::keywords;\n use syntax_pos::{Span, DUMMY_SP, FileName};\n use syntax_pos::hygiene::ExpnFormat;\n use tokenstream::{TokenStream, TokenTree};\n-use util::small_vector::SmallVector;\n use visit::{self, Visitor};\n \n use std::collections::HashMap;\n@@ -131,7 +131,7 @@ macro_rules! ast_fragments {\n                 self.expand_fragment(AstFragment::$Kind(ast)).$make_ast()\n             })*)*\n             $($(fn $fold_ast_elt(&mut self, ast_elt: <$AstTy as IntoIterator>::Item) -> $AstTy {\n-                self.expand_fragment(AstFragment::$Kind(SmallVector::one(ast_elt))).$make_ast()\n+                self.expand_fragment(AstFragment::$Kind(OneVector::one(ast_elt))).$make_ast()\n             })*)*\n         }\n \n@@ -148,15 +148,15 @@ ast_fragments! {\n     Expr(P<ast::Expr>) { \"expression\"; one fn fold_expr; fn visit_expr; fn make_expr; }\n     Pat(P<ast::Pat>) { \"pattern\"; one fn fold_pat; fn visit_pat; fn make_pat; }\n     Ty(P<ast::Ty>) { \"type\"; one fn fold_ty; fn visit_ty; fn make_ty; }\n-    Stmts(SmallVector<ast::Stmt>) { \"statement\"; many fn fold_stmt; fn visit_stmt; fn make_stmts; }\n-    Items(SmallVector<P<ast::Item>>) { \"item\"; many fn fold_item; fn visit_item; fn make_items; }\n-    TraitItems(SmallVector<ast::TraitItem>) {\n+    Stmts(OneVector<ast::Stmt>) { \"statement\"; many fn fold_stmt; fn visit_stmt; fn make_stmts; }\n+    Items(OneVector<P<ast::Item>>) { \"item\"; many fn fold_item; fn visit_item; fn make_items; }\n+    TraitItems(OneVector<ast::TraitItem>) {\n         \"trait item\"; many fn fold_trait_item; fn visit_trait_item; fn make_trait_items;\n     }\n-    ImplItems(SmallVector<ast::ImplItem>) {\n+    ImplItems(OneVector<ast::ImplItem>) {\n         \"impl item\"; many fn fold_impl_item; fn visit_impl_item; fn make_impl_items;\n     }\n-    ForeignItems(SmallVector<ast::ForeignItem>) {\n+    ForeignItems(OneVector<ast::ForeignItem>) {\n         \"foreign item\"; many fn fold_foreign_item; fn visit_foreign_item; fn make_foreign_items;\n     }\n }\n@@ -279,7 +279,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n         let orig_mod_span = krate.module.inner;\n \n-        let krate_item = AstFragment::Items(SmallVector::one(P(ast::Item {\n+        let krate_item = AstFragment::Items(OneVector::one(P(ast::Item {\n             attrs: krate.attrs,\n             span: krate.span,\n             node: ast::ItemKind::Mod(krate.module),\n@@ -989,28 +989,28 @@ impl<'a> Parser<'a> {\n                               -> PResult<'a, AstFragment> {\n         Ok(match kind {\n             AstFragmentKind::Items => {\n-                let mut items = SmallVector::new();\n+                let mut items = OneVector::new();\n                 while let Some(item) = self.parse_item()? {\n                     items.push(item);\n                 }\n                 AstFragment::Items(items)\n             }\n             AstFragmentKind::TraitItems => {\n-                let mut items = SmallVector::new();\n+                let mut items = OneVector::new();\n                 while self.token != token::Eof {\n                     items.push(self.parse_trait_item(&mut false)?);\n                 }\n                 AstFragment::TraitItems(items)\n             }\n             AstFragmentKind::ImplItems => {\n-                let mut items = SmallVector::new();\n+                let mut items = OneVector::new();\n                 while self.token != token::Eof {\n                     items.push(self.parse_impl_item(&mut false)?);\n                 }\n                 AstFragment::ImplItems(items)\n             }\n             AstFragmentKind::ForeignItems => {\n-                let mut items = SmallVector::new();\n+                let mut items = OneVector::new();\n                 while self.token != token::Eof {\n                     if let Some(item) = self.parse_foreign_item()? {\n                         items.push(item);\n@@ -1019,7 +1019,7 @@ impl<'a> Parser<'a> {\n                 AstFragment::ForeignItems(items)\n             }\n             AstFragmentKind::Stmts => {\n-                let mut stmts = SmallVector::new();\n+                let mut stmts = OneVector::new();\n                 while self.token != token::Eof &&\n                       // won't make progress on a `}`\n                       self.token != token::CloseDelim(token::Brace) {\n@@ -1086,12 +1086,12 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n \n     /// Folds the item allowing tests to be expanded because they are still nameable.\n     /// This should probably only be called with module items\n-    fn fold_nameable(&mut self, item: P<ast::Item>) -> SmallVector<P<ast::Item>> {\n+    fn fold_nameable(&mut self, item: P<ast::Item>) -> OneVector<P<ast::Item>> {\n         fold::noop_fold_item(item, self)\n     }\n \n     /// Folds the item but doesn't allow tests to occur within it\n-    fn fold_unnameable(&mut self, item: P<ast::Item>) -> SmallVector<P<ast::Item>> {\n+    fn fold_unnameable(&mut self, item: P<ast::Item>) -> OneVector<P<ast::Item>> {\n         let was_nameable = mem::replace(&mut self.tests_nameable, false);\n         let items = fold::noop_fold_item(item, self);\n         self.tests_nameable = was_nameable;\n@@ -1254,10 +1254,10 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n         })\n     }\n \n-    fn fold_stmt(&mut self, stmt: ast::Stmt) -> SmallVector<ast::Stmt> {\n+    fn fold_stmt(&mut self, stmt: ast::Stmt) -> OneVector<ast::Stmt> {\n         let mut stmt = match self.cfg.configure_stmt(stmt) {\n             Some(stmt) => stmt,\n-            None => return SmallVector::new(),\n+            None => return OneVector::new(),\n         };\n \n         // we'll expand attributes on expressions separately\n@@ -1313,7 +1313,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n         result\n     }\n \n-    fn fold_item(&mut self, item: P<ast::Item>) -> SmallVector<P<ast::Item>> {\n+    fn fold_item(&mut self, item: P<ast::Item>) -> OneVector<P<ast::Item>> {\n         let item = configure!(self, item);\n \n         let (attr, traits, mut item) = self.classify_item(item);\n@@ -1422,7 +1422,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n                         ui\n                     });\n \n-                    SmallVector::many(\n+                    OneVector::many(\n                         self.fold_unnameable(item).into_iter()\n                             .chain(self.fold_unnameable(use_item)))\n                 } else {\n@@ -1433,7 +1433,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n         }\n     }\n \n-    fn fold_trait_item(&mut self, item: ast::TraitItem) -> SmallVector<ast::TraitItem> {\n+    fn fold_trait_item(&mut self, item: ast::TraitItem) -> OneVector<ast::TraitItem> {\n         let item = configure!(self, item);\n \n         let (attr, traits, item) = self.classify_item(item);\n@@ -1453,7 +1453,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n         }\n     }\n \n-    fn fold_impl_item(&mut self, item: ast::ImplItem) -> SmallVector<ast::ImplItem> {\n+    fn fold_impl_item(&mut self, item: ast::ImplItem) -> OneVector<ast::ImplItem> {\n         let item = configure!(self, item);\n \n         let (attr, traits, item) = self.classify_item(item);\n@@ -1490,7 +1490,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n     }\n \n     fn fold_foreign_item(&mut self,\n-                         foreign_item: ast::ForeignItem) -> SmallVector<ast::ForeignItem> {\n+                         foreign_item: ast::ForeignItem) -> OneVector<ast::ForeignItem> {\n         let (attr, traits, foreign_item) = self.classify_item(foreign_item);\n \n         if attr.is_some() || !traits.is_empty() {"}, {"sha": "1dc9bae8848f3b9f0d9dd209181a25b51def74af", "filename": "src/libsyntax/ext/placeholders.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fplaceholders.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -16,9 +16,10 @@ use ext::hygiene::Mark;\n use tokenstream::TokenStream;\n use fold::*;\n use ptr::P;\n+use OneVector;\n use symbol::keywords;\n+use ThinVec;\n use util::move_map::MoveMap;\n-use util::small_vector::SmallVector;\n \n use std::collections::HashMap;\n \n@@ -38,31 +39,31 @@ pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId) -> AstFragment {\n     let span = DUMMY_SP;\n     let expr_placeholder = || P(ast::Expr {\n         id, span,\n-        attrs: ast::ThinVec::new(),\n+        attrs: ThinVec::new(),\n         node: ast::ExprKind::Mac(mac_placeholder()),\n     });\n \n     match kind {\n         AstFragmentKind::Expr => AstFragment::Expr(expr_placeholder()),\n         AstFragmentKind::OptExpr => AstFragment::OptExpr(Some(expr_placeholder())),\n-        AstFragmentKind::Items => AstFragment::Items(SmallVector::one(P(ast::Item {\n+        AstFragmentKind::Items => AstFragment::Items(OneVector::one(P(ast::Item {\n             id, span, ident, vis, attrs,\n             node: ast::ItemKind::Mac(mac_placeholder()),\n             tokens: None,\n         }))),\n-        AstFragmentKind::TraitItems => AstFragment::TraitItems(SmallVector::one(ast::TraitItem {\n+        AstFragmentKind::TraitItems => AstFragment::TraitItems(OneVector::one(ast::TraitItem {\n             id, span, ident, attrs, generics,\n             node: ast::TraitItemKind::Macro(mac_placeholder()),\n             tokens: None,\n         })),\n-        AstFragmentKind::ImplItems => AstFragment::ImplItems(SmallVector::one(ast::ImplItem {\n+        AstFragmentKind::ImplItems => AstFragment::ImplItems(OneVector::one(ast::ImplItem {\n             id, span, ident, vis, attrs, generics,\n             node: ast::ImplItemKind::Macro(mac_placeholder()),\n             defaultness: ast::Defaultness::Final,\n             tokens: None,\n         })),\n         AstFragmentKind::ForeignItems =>\n-            AstFragment::ForeignItems(SmallVector::one(ast::ForeignItem {\n+            AstFragment::ForeignItems(OneVector::one(ast::ForeignItem {\n                 id, span, ident, vis, attrs,\n                 node: ast::ForeignItemKind::Macro(mac_placeholder()),\n             })),\n@@ -72,8 +73,8 @@ pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId) -> AstFragment {\n         AstFragmentKind::Ty => AstFragment::Ty(P(ast::Ty {\n             id, span, node: ast::TyKind::Mac(mac_placeholder()),\n         })),\n-        AstFragmentKind::Stmts => AstFragment::Stmts(SmallVector::one({\n-            let mac = P((mac_placeholder(), ast::MacStmtStyle::Braces, ast::ThinVec::new()));\n+        AstFragmentKind::Stmts => AstFragment::Stmts(OneVector::one({\n+            let mac = P((mac_placeholder(), ast::MacStmtStyle::Braces, ThinVec::new()));\n             ast::Stmt { id, span, node: ast::StmtKind::Mac(mac) }\n         })),\n     }\n@@ -114,31 +115,31 @@ impl<'a, 'b> PlaceholderExpander<'a, 'b> {\n }\n \n impl<'a, 'b> Folder for PlaceholderExpander<'a, 'b> {\n-    fn fold_item(&mut self, item: P<ast::Item>) -> SmallVector<P<ast::Item>> {\n+    fn fold_item(&mut self, item: P<ast::Item>) -> OneVector<P<ast::Item>> {\n         match item.node {\n             ast::ItemKind::Mac(_) => return self.remove(item.id).make_items(),\n-            ast::ItemKind::MacroDef(_) => return SmallVector::one(item),\n+            ast::ItemKind::MacroDef(_) => return OneVector::one(item),\n             _ => {}\n         }\n \n         noop_fold_item(item, self)\n     }\n \n-    fn fold_trait_item(&mut self, item: ast::TraitItem) -> SmallVector<ast::TraitItem> {\n+    fn fold_trait_item(&mut self, item: ast::TraitItem) -> OneVector<ast::TraitItem> {\n         match item.node {\n             ast::TraitItemKind::Macro(_) => self.remove(item.id).make_trait_items(),\n             _ => noop_fold_trait_item(item, self),\n         }\n     }\n \n-    fn fold_impl_item(&mut self, item: ast::ImplItem) -> SmallVector<ast::ImplItem> {\n+    fn fold_impl_item(&mut self, item: ast::ImplItem) -> OneVector<ast::ImplItem> {\n         match item.node {\n             ast::ImplItemKind::Macro(_) => self.remove(item.id).make_impl_items(),\n             _ => noop_fold_impl_item(item, self),\n         }\n     }\n \n-    fn fold_foreign_item(&mut self, item: ast::ForeignItem) -> SmallVector<ast::ForeignItem> {\n+    fn fold_foreign_item(&mut self, item: ast::ForeignItem) -> OneVector<ast::ForeignItem> {\n         match item.node {\n             ast::ForeignItemKind::Macro(_) => self.remove(item.id).make_foreign_items(),\n             _ => noop_fold_foreign_item(item, self),\n@@ -159,7 +160,7 @@ impl<'a, 'b> Folder for PlaceholderExpander<'a, 'b> {\n         }\n     }\n \n-    fn fold_stmt(&mut self, stmt: ast::Stmt) -> SmallVector<ast::Stmt> {\n+    fn fold_stmt(&mut self, stmt: ast::Stmt) -> OneVector<ast::Stmt> {\n         let (style, mut stmts) = match stmt.node {\n             ast::StmtKind::Mac(mac) => (mac.1, self.remove(stmt.id).make_stmts()),\n             _ => return noop_fold_stmt(stmt, self),"}, {"sha": "bc891700fc1b6a9183a132c9cfa1bbec28ddafaa", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -34,6 +34,7 @@ pub mod rt {\n     use parse::token::{self, Token};\n     use ptr::P;\n     use symbol::Symbol;\n+    use ThinVec;\n \n     use tokenstream::{self, TokenTree, TokenStream};\n \n@@ -274,7 +275,7 @@ pub mod rt {\n                 id: ast::DUMMY_NODE_ID,\n                 node: ast::ExprKind::Lit(P(self.clone())),\n                 span: DUMMY_SP,\n-                attrs: ast::ThinVec::new(),\n+                attrs: ThinVec::new(),\n             }).to_tokens(cx)\n         }\n     }\n@@ -305,7 +306,7 @@ pub mod rt {\n                         id: ast::DUMMY_NODE_ID,\n                         node: ast::ExprKind::Lit(P(dummy_spanned(lit))),\n                         span: DUMMY_SP,\n-                        attrs: ast::ThinVec::new(),\n+                        attrs: ThinVec::new(),\n                     });\n                     if *self >= 0 {\n                         return lit.to_tokens(cx);\n@@ -314,7 +315,7 @@ pub mod rt {\n                         id: ast::DUMMY_NODE_ID,\n                         node: ast::ExprKind::Unary(ast::UnOp::Neg, lit),\n                         span: DUMMY_SP,\n-                        attrs: ast::ThinVec::new(),\n+                        attrs: ThinVec::new(),\n                     }).to_tokens(cx)\n                 }\n             }"}, {"sha": "9b7e0fe1ae55cbe476fa3b4385180c86077d9fc0", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -17,9 +17,9 @@ use parse::{token, DirectoryOwnership};\n use parse;\n use print::pprust;\n use ptr::P;\n+use OneVector;\n use symbol::Symbol;\n use tokenstream;\n-use util::small_vector::SmallVector;\n \n use std::fs::File;\n use std::io::prelude::*;\n@@ -111,8 +111,8 @@ pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[tokenstream::T\n             Some(panictry!(self.p.parse_expr()))\n         }\n         fn make_items(mut self: Box<ExpandResult<'a>>)\n-                      -> Option<SmallVector<P<ast::Item>>> {\n-            let mut ret = SmallVector::new();\n+                      -> Option<OneVector<P<ast::Item>>> {\n+            let mut ret = OneVector::new();\n             while self.p.token != token::Eof {\n                 match panictry!(self.p.parse_item()) {\n                     Some(item) => ret.push(item),"}, {"sha": "82f88d1d8643eff41d574090b3e57a7d3fa890e0", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -92,9 +92,9 @@ use parse::{Directory, ParseSess};\n use parse::parser::{Parser, PathStyle};\n use parse::token::{self, DocComment, Nonterminal, Token};\n use print::pprust;\n+use OneVector;\n use symbol::keywords;\n use tokenstream::TokenStream;\n-use util::small_vector::SmallVector;\n \n use std::mem;\n use std::ops::{Deref, DerefMut};\n@@ -440,10 +440,10 @@ fn token_name_eq(t1: &Token, t2: &Token) -> bool {\n /// A `ParseResult`. Note that matches are kept track of through the items generated.\n fn inner_parse_loop<'a>(\n     sess: &ParseSess,\n-    cur_items: &mut SmallVector<MatcherPosHandle<'a>>,\n+    cur_items: &mut OneVector<MatcherPosHandle<'a>>,\n     next_items: &mut Vec<MatcherPosHandle<'a>>,\n-    eof_items: &mut SmallVector<MatcherPosHandle<'a>>,\n-    bb_items: &mut SmallVector<MatcherPosHandle<'a>>,\n+    eof_items: &mut OneVector<MatcherPosHandle<'a>>,\n+    bb_items: &mut OneVector<MatcherPosHandle<'a>>,\n     token: &Token,\n     span: syntax_pos::Span,\n ) -> ParseResult<()> {\n@@ -644,15 +644,15 @@ pub fn parse(\n     // This MatcherPos instance is allocated on the stack. All others -- and\n     // there are frequently *no* others! -- are allocated on the heap.\n     let mut initial = initial_matcher_pos(ms, parser.span.lo());\n-    let mut cur_items = SmallVector::one(MatcherPosHandle::Ref(&mut initial));\n+    let mut cur_items = OneVector::one(MatcherPosHandle::Ref(&mut initial));\n     let mut next_items = Vec::new();\n \n     loop {\n         // Matcher positions black-box parsed by parser.rs (`parser`)\n-        let mut bb_items = SmallVector::new();\n+        let mut bb_items = OneVector::new();\n \n         // Matcher positions that would be valid if the macro invocation was over now\n-        let mut eof_items = SmallVector::new();\n+        let mut eof_items = OneVector::new();\n         assert!(next_items.is_empty());\n \n         // Process `cur_items` until either we have finished the input or we need to get some"}, {"sha": "d451227e77cf3d7ffac51dc2cea844fbf1c7f5a7", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -15,9 +15,9 @@ use ext::tt::macro_parser::{NamedMatch, MatchedSeq, MatchedNonterminal};\n use ext::tt::quoted;\n use fold::noop_fold_tt;\n use parse::token::{self, Token, NtTT};\n+use OneVector;\n use syntax_pos::{Span, DUMMY_SP};\n use tokenstream::{TokenStream, TokenTree, Delimited};\n-use util::small_vector::SmallVector;\n \n use std::rc::Rc;\n use rustc_data_structures::sync::Lrc;\n@@ -70,7 +70,7 @@ pub fn transcribe(cx: &ExtCtxt,\n                   interp: Option<HashMap<Ident, Rc<NamedMatch>>>,\n                   src: Vec<quoted::TokenTree>)\n                   -> TokenStream {\n-    let mut stack = SmallVector::one(Frame::new(src));\n+    let mut stack = OneVector::one(Frame::new(src));\n     let interpolations = interp.unwrap_or_else(HashMap::new); /* just a convenience */\n     let mut repeats = Vec::new();\n     let mut result: Vec<TokenStream> = Vec::new();"}, {"sha": "3209939d9b14d7c3e7038839fc1bdf93a6fdccdc", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -24,9 +24,10 @@ use syntax_pos::Span;\n use codemap::{Spanned, respan};\n use parse::token::{self, Token};\n use ptr::P;\n+use OneVector;\n use symbol::keywords;\n+use ThinVec;\n use tokenstream::*;\n-use util::small_vector::SmallVector;\n use util::move_map::MoveMap;\n \n use rustc_data_structures::sync::Lrc;\n@@ -60,15 +61,15 @@ pub trait Folder : Sized {\n         noop_fold_use_tree(use_tree, self)\n     }\n \n-    fn fold_foreign_item(&mut self, ni: ForeignItem) -> SmallVector<ForeignItem> {\n+    fn fold_foreign_item(&mut self, ni: ForeignItem) -> OneVector<ForeignItem> {\n         noop_fold_foreign_item(ni, self)\n     }\n \n     fn fold_foreign_item_simple(&mut self, ni: ForeignItem) -> ForeignItem {\n         noop_fold_foreign_item_simple(ni, self)\n     }\n \n-    fn fold_item(&mut self, i: P<Item>) -> SmallVector<P<Item>> {\n+    fn fold_item(&mut self, i: P<Item>) -> OneVector<P<Item>> {\n         noop_fold_item(i, self)\n     }\n \n@@ -88,11 +89,11 @@ pub trait Folder : Sized {\n         noop_fold_item_kind(i, self)\n     }\n \n-    fn fold_trait_item(&mut self, i: TraitItem) -> SmallVector<TraitItem> {\n+    fn fold_trait_item(&mut self, i: TraitItem) -> OneVector<TraitItem> {\n         noop_fold_trait_item(i, self)\n     }\n \n-    fn fold_impl_item(&mut self, i: ImplItem) -> SmallVector<ImplItem> {\n+    fn fold_impl_item(&mut self, i: ImplItem) -> OneVector<ImplItem> {\n         noop_fold_impl_item(i, self)\n     }\n \n@@ -108,7 +109,7 @@ pub trait Folder : Sized {\n         noop_fold_block(b, self)\n     }\n \n-    fn fold_stmt(&mut self, s: Stmt) -> SmallVector<Stmt> {\n+    fn fold_stmt(&mut self, s: Stmt) -> OneVector<Stmt> {\n         noop_fold_stmt(s, self)\n     }\n \n@@ -960,8 +961,8 @@ pub fn noop_fold_item_kind<T: Folder>(i: ItemKind, folder: &mut T) -> ItemKind {\n }\n \n pub fn noop_fold_trait_item<T: Folder>(i: TraitItem, folder: &mut T)\n-                                       -> SmallVector<TraitItem> {\n-    SmallVector::one(TraitItem {\n+                                       -> OneVector<TraitItem> {\n+    OneVector::one(TraitItem {\n         id: folder.new_id(i.id),\n         ident: folder.fold_ident(i.ident),\n         attrs: fold_attrs(i.attrs, folder),\n@@ -989,8 +990,8 @@ pub fn noop_fold_trait_item<T: Folder>(i: TraitItem, folder: &mut T)\n }\n \n pub fn noop_fold_impl_item<T: Folder>(i: ImplItem, folder: &mut T)\n-                                      -> SmallVector<ImplItem> {\n-    SmallVector::one(ImplItem {\n+                                      -> OneVector<ImplItem> {\n+    OneVector::one(ImplItem {\n         id: folder.new_id(i.id),\n         vis: folder.fold_vis(i.vis),\n         ident: folder.fold_ident(i.ident),\n@@ -1065,8 +1066,8 @@ pub fn noop_fold_crate<T: Folder>(Crate {module, attrs, span}: Crate,\n }\n \n // fold one item into possibly many items\n-pub fn noop_fold_item<T: Folder>(i: P<Item>, folder: &mut T) -> SmallVector<P<Item>> {\n-    SmallVector::one(i.map(|i| folder.fold_item_simple(i)))\n+pub fn noop_fold_item<T: Folder>(i: P<Item>, folder: &mut T) -> OneVector<P<Item>> {\n+    OneVector::one(i.map(|i| folder.fold_item_simple(i)))\n }\n \n // fold one item into exactly one item\n@@ -1087,8 +1088,8 @@ pub fn noop_fold_item_simple<T: Folder>(Item {id, ident, attrs, node, vis, span,\n }\n \n pub fn noop_fold_foreign_item<T: Folder>(ni: ForeignItem, folder: &mut T)\n--> SmallVector<ForeignItem> {\n-    SmallVector::one(folder.fold_foreign_item_simple(ni))\n+-> OneVector<ForeignItem> {\n+    OneVector::one(folder.fold_foreign_item_simple(ni))\n }\n \n pub fn noop_fold_foreign_item_simple<T: Folder>(ni: ForeignItem, folder: &mut T) -> ForeignItem {\n@@ -1366,25 +1367,25 @@ pub fn noop_fold_exprs<T: Folder>(es: Vec<P<Expr>>, folder: &mut T) -> Vec<P<Exp\n     es.move_flat_map(|e| folder.fold_opt_expr(e))\n }\n \n-pub fn noop_fold_stmt<T: Folder>(Stmt {node, span, id}: Stmt, folder: &mut T) -> SmallVector<Stmt> {\n+pub fn noop_fold_stmt<T: Folder>(Stmt {node, span, id}: Stmt, folder: &mut T) -> OneVector<Stmt> {\n     let id = folder.new_id(id);\n     let span = folder.new_span(span);\n     noop_fold_stmt_kind(node, folder).into_iter().map(|node| {\n         Stmt { id: id, node: node, span: span }\n     }).collect()\n }\n \n-pub fn noop_fold_stmt_kind<T: Folder>(node: StmtKind, folder: &mut T) -> SmallVector<StmtKind> {\n+pub fn noop_fold_stmt_kind<T: Folder>(node: StmtKind, folder: &mut T) -> OneVector<StmtKind> {\n     match node {\n-        StmtKind::Local(local) => SmallVector::one(StmtKind::Local(folder.fold_local(local))),\n+        StmtKind::Local(local) => OneVector::one(StmtKind::Local(folder.fold_local(local))),\n         StmtKind::Item(item) => folder.fold_item(item).into_iter().map(StmtKind::Item).collect(),\n         StmtKind::Expr(expr) => {\n             folder.fold_opt_expr(expr).into_iter().map(StmtKind::Expr).collect()\n         }\n         StmtKind::Semi(expr) => {\n             folder.fold_opt_expr(expr).into_iter().map(StmtKind::Semi).collect()\n         }\n-        StmtKind::Mac(mac) => SmallVector::one(StmtKind::Mac(mac.map(|(mac, semi, attrs)| {\n+        StmtKind::Mac(mac) => OneVector::one(StmtKind::Mac(mac.map(|(mac, semi, attrs)| {\n             (folder.fold_mac(mac), semi, fold_attrs(attrs.into(), folder).into())\n         }))),\n     }"}, {"sha": "c48ad0a802cb0470402f99154adea000f12c3e22", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -45,6 +45,8 @@ extern crate serialize as rustc_serialize; // used by deriving\n \n use rustc_data_structures::sync::Lock;\n use rustc_data_structures::bitvec::BitVector;\n+pub use rustc_data_structures::small_vec::OneVector;\n+pub use rustc_data_structures::thin_vec::ThinVec;\n use ast::AttrId;\n \n // A variant of 'try!' that panics on an Err. This is used as a crutch on the\n@@ -124,12 +126,8 @@ pub mod util {\n     pub mod parser;\n     #[cfg(test)]\n     pub mod parser_testing;\n-    pub mod small_vector;\n     pub mod move_map;\n \n-    mod thin_vec;\n-    pub use self::thin_vec::ThinVec;\n-\n     mod rc_slice;\n     pub use self::rc_slice::RcSlice;\n }"}, {"sha": "0e45cacaf38c91727ae3227bb5763898eed3ec13", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -53,9 +53,9 @@ use util::parser::{AssocOp, Fixity};\n use print::pprust;\n use ptr::P;\n use parse::PResult;\n+use ThinVec;\n use tokenstream::{self, Delimited, ThinTokenStream, TokenTree, TokenStream};\n use symbol::{Symbol, keywords};\n-use util::ThinVec;\n \n use std::borrow::Cow;\n use std::cmp;"}, {"sha": "1cbaf3cc312b7c66b0ec67677e70d4d3ca44fd9b", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -38,8 +38,9 @@ use parse::{token, ParseSess};\n use print::pprust;\n use ast::{self, Ident};\n use ptr::P;\n+use OneVector;\n use symbol::{self, Symbol, keywords};\n-use util::small_vector::SmallVector;\n+use ThinVec;\n \n enum ShouldPanic {\n     No,\n@@ -115,7 +116,7 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n         folded\n     }\n \n-    fn fold_item(&mut self, i: P<ast::Item>) -> SmallVector<P<ast::Item>> {\n+    fn fold_item(&mut self, i: P<ast::Item>) -> OneVector<P<ast::Item>> {\n         let ident = i.ident;\n         if ident.name != keywords::Invalid.name() {\n             self.cx.path.push(ident);\n@@ -182,7 +183,7 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n         if ident.name != keywords::Invalid.name() {\n             self.cx.path.pop();\n         }\n-        SmallVector::one(P(item))\n+        OneVector::one(P(item))\n     }\n \n     fn fold_mac(&mut self, mac: ast::Mac) -> ast::Mac { mac }\n@@ -194,7 +195,7 @@ struct EntryPointCleaner {\n }\n \n impl fold::Folder for EntryPointCleaner {\n-    fn fold_item(&mut self, i: P<ast::Item>) -> SmallVector<P<ast::Item>> {\n+    fn fold_item(&mut self, i: P<ast::Item>) -> OneVector<P<ast::Item>> {\n         self.depth += 1;\n         let folded = fold::noop_fold_item(i, self).expect_one(\"noop did something\");\n         self.depth -= 1;\n@@ -234,7 +235,7 @@ impl fold::Folder for EntryPointCleaner {\n             EntryPointType::OtherMain => folded,\n         };\n \n-        SmallVector::one(folded)\n+        OneVector::one(folded)\n     }\n \n     fn fold_mac(&mut self, mac: ast::Mac) -> ast::Mac { mac }\n@@ -675,10 +676,10 @@ fn mk_test_descs(cx: &TestCtxt) -> P<ast::Expr> {\n                     mk_test_desc_and_fn_rec(cx, test)\n                 }).collect()),\n                 span: DUMMY_SP,\n-                attrs: ast::ThinVec::new(),\n+                attrs: ThinVec::new(),\n             })),\n         span: DUMMY_SP,\n-        attrs: ast::ThinVec::new(),\n+        attrs: ThinVec::new(),\n     })\n }\n "}, {"sha": "eb2c5a2458c1590b06e9d0e7ec506427f1a3f4c9", "filename": "src/libsyntax/util/move_map.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Futil%2Fmove_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax%2Futil%2Fmove_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fmove_map.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -9,8 +9,7 @@\n // except according to those terms.\n \n use std::ptr;\n-\n-use util::small_vector::SmallVector;\n+use OneVector;\n \n pub trait MoveMap<T>: Sized {\n     fn move_map<F>(self, mut f: F) -> Self where F: FnMut(T) -> T {\n@@ -78,7 +77,7 @@ impl<T> MoveMap<T> for ::ptr::P<[T]> {\n     }\n }\n \n-impl<T> MoveMap<T> for SmallVector<T> {\n+impl<T> MoveMap<T> for OneVector<T> {\n     fn move_flat_map<F, I>(mut self, mut f: F) -> Self\n         where F: FnMut(T) -> I,\n               I: IntoIterator<Item=T>"}, {"sha": "31e675836fc72b9e876c97eef8e137a739d3120a", "filename": "src/libsyntax/util/small_vector.rs", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=d5a448b3f47b22c9cb010198bdcc49d4392b090b", "patch": "@@ -1,81 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use rustc_data_structures::small_vec::SmallVec;\n-\n-pub type SmallVector<T> = SmallVec<[T; 1]>;\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::*;\n-\n-    #[test]\n-    fn test_len() {\n-        let v: SmallVector<isize> = SmallVector::new();\n-        assert_eq!(0, v.len());\n-\n-        assert_eq!(1, SmallVector::one(1).len());\n-        assert_eq!(5, SmallVector::many(vec![1, 2, 3, 4, 5]).len());\n-    }\n-\n-    #[test]\n-    fn test_push_get() {\n-        let mut v = SmallVector::new();\n-        v.push(1);\n-        assert_eq!(1, v.len());\n-        assert_eq!(1, v[0]);\n-        v.push(2);\n-        assert_eq!(2, v.len());\n-        assert_eq!(2, v[1]);\n-        v.push(3);\n-        assert_eq!(3, v.len());\n-        assert_eq!(3, v[2]);\n-    }\n-\n-    #[test]\n-    fn test_from_iter() {\n-        let v: SmallVector<isize> = (vec![1, 2, 3]).into_iter().collect();\n-        assert_eq!(3, v.len());\n-        assert_eq!(1, v[0]);\n-        assert_eq!(2, v[1]);\n-        assert_eq!(3, v[2]);\n-    }\n-\n-    #[test]\n-    fn test_move_iter() {\n-        let v = SmallVector::new();\n-        let v: Vec<isize> = v.into_iter().collect();\n-        assert_eq!(v, Vec::new());\n-\n-        let v = SmallVector::one(1);\n-        assert_eq!(v.into_iter().collect::<Vec<_>>(), [1]);\n-\n-        let v = SmallVector::many(vec![1, 2, 3]);\n-        assert_eq!(v.into_iter().collect::<Vec<_>>(), [1, 2, 3]);\n-    }\n-\n-    #[test]\n-    #[should_panic]\n-    fn test_expect_one_zero() {\n-        let _: isize = SmallVector::new().expect_one(\"\");\n-    }\n-\n-    #[test]\n-    #[should_panic]\n-    fn test_expect_one_many() {\n-        SmallVector::many(vec![1, 2]).expect_one(\"\");\n-    }\n-\n-    #[test]\n-    fn test_expect_one_one() {\n-        assert_eq!(1, SmallVector::one(1).expect_one(\"\"));\n-        assert_eq!(1, SmallVector::many(vec![1]).expect_one(\"\"));\n-    }\n-}"}, {"sha": "026ddccd7be9793ca40cd0dbd434fecf01cec28b", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -12,6 +12,8 @@\n //\n use self::State::*;\n \n+use rustc_data_structures::thin_vec::ThinVec;\n+\n use syntax::ast;\n use syntax::ext::base;\n use syntax::ext::base::*;\n@@ -263,6 +265,6 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt,\n             ctxt: cx.backtrace(),\n         })),\n         span: sp,\n-        attrs: ast::ThinVec::new(),\n+        attrs: ThinVec::new(),\n     }))\n }"}, {"sha": "c8cc11e43545ade92abb67c581a25717d1711f94", "filename": "src/libsyntax_ext/concat_idents.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax_ext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax_ext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat_idents.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use rustc_data_structures::thin_vec::ThinVec;\n+\n use syntax::ast;\n use syntax::ext::base::*;\n use syntax::ext::base;\n@@ -68,7 +70,7 @@ pub fn expand_syntax_ext<'cx>(cx: &'cx mut ExtCtxt,\n                 id: ast::DUMMY_NODE_ID,\n                 node: ast::ExprKind::Path(None, ast::Path::from_ident(self.ident)),\n                 span: self.ident.span,\n-                attrs: ast::ThinVec::new(),\n+                attrs: ThinVec::new(),\n             }))\n         }\n "}, {"sha": "df9c351ef1c958f3a84da3a7cbd50bde2cde8ee3", "filename": "src/libsyntax_ext/deriving/debug.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -12,6 +12,8 @@ use deriving::path_std;\n use deriving::generic::*;\n use deriving::generic::ty::*;\n \n+use rustc_data_structures::thin_vec::ThinVec;\n+\n use syntax::ast::{self, Ident};\n use syntax::ast::{Expr, MetaItem};\n use syntax::ext::base::{Annotatable, ExtCtxt};\n@@ -139,7 +141,7 @@ fn stmt_let_undescore(cx: &mut ExtCtxt, sp: Span, expr: P<ast::Expr>) -> ast::St\n         init: Some(expr),\n         id: ast::DUMMY_NODE_ID,\n         span: sp,\n-        attrs: ast::ThinVec::new(),\n+        attrs: ThinVec::new(),\n     });\n     ast::Stmt {\n         id: ast::DUMMY_NODE_ID,"}, {"sha": "2e0ba65dc6509ab86906473cecb2269982ab13b7", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -191,6 +191,7 @@ use std::cell::RefCell;\n use std::iter;\n use std::vec;\n \n+use rustc_data_structures::thin_vec::ThinVec;\n use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, BinOpKind, EnumDef, Expr, Generics, Ident, PatKind};\n use syntax::ast::{VariantData, GenericParamKind, GenericArg};\n@@ -1624,7 +1625,7 @@ impl<'a> TraitDef<'a> {\n                                 ident: ident.unwrap(),\n                                 pat,\n                                 is_shorthand: false,\n-                                attrs: ast::ThinVec::new(),\n+                                attrs: ThinVec::new(),\n                             },\n                         }\n                     })"}, {"sha": "7290b701e4deccf7e0c10077f469e85793ff8d81", "filename": "src/libsyntax_ext/global_asm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax_ext%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Flibsyntax_ext%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_asm.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -18,6 +18,8 @@\n /// LLVM's `module asm \"some assembly here\"`. All of LLVM's caveats\n /// therefore apply.\n \n+use rustc_data_structures::small_vec::OneVector;\n+\n use syntax::ast;\n use syntax::codemap::respan;\n use syntax::ext::base;\n@@ -28,8 +30,6 @@ use syntax::symbol::Symbol;\n use syntax_pos::Span;\n use syntax::tokenstream;\n \n-use syntax::util::small_vector::SmallVector;\n-\n pub const MACRO: &'static str = \"global_asm\";\n \n pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt,\n@@ -52,7 +52,7 @@ pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt,\n         None => return DummyResult::any(sp),\n     };\n \n-    MacEager::items(SmallVector::one(P(ast::Item {\n+    MacEager::items(OneVector::one(P(ast::Item {\n         ident: ast::Ident::with_empty_ctxt(Symbol::intern(\"\")),\n         attrs: Vec::new(),\n         id: ast::DUMMY_NODE_ID,"}, {"sha": "ff5d9a59bfa0071c497ecf19f07b8a729d034256", "filename": "src/test/run-pass-fulldeps/auxiliary/issue-16723.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fissue-16723.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fissue-16723.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fissue-16723.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -15,12 +15,12 @@\n \n extern crate syntax;\n extern crate rustc;\n+extern crate rustc_data_structures;\n extern crate rustc_plugin;\n extern crate syntax_pos;\n \n-use syntax::ast;\n+use rustc_data_structures::small_vec::OneVector;\n use syntax::ext::base::{ExtCtxt, MacResult, MacEager};\n-use syntax::util::small_vector::SmallVector;\n use syntax::tokenstream;\n use rustc_plugin::Registry;\n \n@@ -31,7 +31,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n \n fn expand(cx: &mut ExtCtxt, _: syntax_pos::Span, _: &[tokenstream::TokenTree])\n           -> Box<MacResult+'static> {\n-    MacEager::items(SmallVector::many(vec![\n+    MacEager::items(OneVector::many(vec![\n         quote_item!(cx, struct Struct1;).unwrap(),\n         quote_item!(cx, struct Struct2;).unwrap()\n     ]))"}, {"sha": "3da50f1696545442786ce688ac1703d08c5c35a1", "filename": "src/test/run-pass-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e6375352636360add297c1f5a1f37ce71506e9/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs?ref=e5e6375352636360add297c1f5a1f37ce71506e9", "patch": "@@ -30,16 +30,17 @@\n \n #![feature(rustc_private)]\n \n+extern crate rustc_data_structures;\n extern crate syntax;\n \n+use rustc_data_structures::thin_vec::ThinVec;\n use syntax::ast::*;\n use syntax::codemap::{Spanned, DUMMY_SP, FileName};\n use syntax::codemap::FilePathMapping;\n use syntax::fold::{self, Folder};\n use syntax::parse::{self, ParseSess};\n use syntax::print::pprust;\n use syntax::ptr::P;\n-use syntax::util::ThinVec;\n \n \n fn parse_expr(ps: &ParseSess, src: &str) -> P<Expr> {"}]}