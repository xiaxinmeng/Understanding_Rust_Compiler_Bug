{"sha": "ebe8411874f8bb8ba2f7eae2f482a54d34195f69", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViZTg0MTE4NzRmOGJiOGJhMmY3ZWFlMmY0ODJhNTRkMzQxOTVmNjk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T01:17:15Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T01:17:15Z"}, "message": "rollup merge of #20237: RustOS-Fork-Holding-Ground/master\n\nlibc is only used when the heap allocations are not defined externally, or defined in another crate. I assume these extern* configurations were added for the sake of those of us experimenting with freestanding Rust. Avoiding libc where possible is often very important for us.", "tree": {"sha": "f2ff04717f465fef5ee50e96a7d1ba98a136e27d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2ff04717f465fef5ee50e96a7d1ba98a136e27d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebe8411874f8bb8ba2f7eae2f482a54d34195f69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebe8411874f8bb8ba2f7eae2f482a54d34195f69", "html_url": "https://github.com/rust-lang/rust/commit/ebe8411874f8bb8ba2f7eae2f482a54d34195f69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebe8411874f8bb8ba2f7eae2f482a54d34195f69/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f1ead8fadc56bad30dc74f5cc50d78af4fbc972", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f1ead8fadc56bad30dc74f5cc50d78af4fbc972", "html_url": "https://github.com/rust-lang/rust/commit/9f1ead8fadc56bad30dc74f5cc50d78af4fbc972"}, {"sha": "b1b4bc90b8a1d2fc73b76cbbd0104f6c1acee33f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1b4bc90b8a1d2fc73b76cbbd0104f6c1acee33f", "html_url": "https://github.com/rust-lang/rust/commit/b1b4bc90b8a1d2fc73b76cbbd0104f6c1acee33f"}], "stats": {"total": 45, "additions": 29, "deletions": 16}, "files": [{"sha": "439bb6c55dcf6b01c3668f716575be35faa6559a", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ebe8411874f8bb8ba2f7eae2f482a54d34195f69/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe8411874f8bb8ba2f7eae2f482a54d34195f69/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=ebe8411874f8bb8ba2f7eae2f482a54d34195f69", "patch": "@@ -115,16 +115,20 @@ unsafe fn exchange_free(ptr: *mut u8, old_size: uint, align: uint) {\n // The minimum alignment guaranteed by the architecture. This value is used to\n // add fast paths for low alignment values. In practice, the alignment is a\n // constant at the call site and the branch will be optimized out.\n-#[cfg(any(target_arch = \"arm\",\n-          target_arch = \"mips\",\n-          target_arch = \"mipsel\"))]\n+#[cfg(all(not(feature = \"external_funcs\"),\n+          not(feature = \"external_crate\"),\n+          any(target_arch = \"arm\",\n+              target_arch = \"mips\",\n+              target_arch = \"mipsel\")))]\n const MIN_ALIGN: uint = 8;\n-#[cfg(any(target_arch = \"x86\",\n-          target_arch = \"x86_64\",\n-          target_arch = \"aarch64\"))]\n+#[cfg(all(not(feature = \"external_funcs\"),\n+          not(feature = \"external_crate\"),\n+          any(target_arch = \"x86\",\n+              target_arch = \"x86_64\",\n+              target_arch = \"aarch64\"))]\n const MIN_ALIGN: uint = 16;\n \n-#[cfg(external_funcs)]\n+#[cfg(feature = \"external_funcs\")]\n mod imp {\n     extern {\n         fn rust_allocate(size: uint, align: uint) -> *mut u8;\n@@ -142,14 +146,13 @@ mod imp {\n     }\n \n     #[inline]\n-    pub unsafe fn reallocate_inplace(ptr: *mut u8, old_size: uint, size: uint,\n-                                     align: uint) -> uint {\n-        rust_reallocate_inplace(ptr, old_size, size, align)\n+    pub unsafe fn deallocate(ptr: *mut u8, old_size: uint, align: uint) {\n+        rust_deallocate(ptr, old_size, align)\n     }\n \n     #[inline]\n-    pub unsafe fn deallocate(ptr: *mut u8, old_size: uint, align: uint) {\n-        rust_deallocate(ptr, old_size, align)\n+    pub unsafe fn reallocate(ptr: *mut u8, old_size: uint, size: uint, align: uint) -> *mut u8 {\n+        rust_reallocate(ptr, old_size, size, align)\n     }\n \n     #[inline]\n@@ -169,14 +172,16 @@ mod imp {\n     }\n }\n \n-#[cfg(external_crate)]\n+#[cfg(feature = \"external_crate\")]\n mod imp {\n     extern crate external;\n     pub use self::external::{allocate, deallocate, reallocate_inplace, reallocate};\n     pub use self::external::{usable_size, stats_print};\n }\n \n-#[cfg(all(not(external_funcs), not(external_crate), jemalloc))]\n+#[cfg(all(not(feature = \"external_funcs\"),\n+          not(feature = \"external_crate\"),\n+          jemalloc))]\n mod imp {\n     use core::option::Option;\n     use core::option::Option::None;\n@@ -253,7 +258,10 @@ mod imp {\n     }\n }\n \n-#[cfg(all(not(external_funcs), not(external_crate), not(jemalloc), unix))]\n+#[cfg(all(not(feature = \"external_funcs\"),\n+          not(feature = \"external_crate\"),\n+          not(jemalloc),\n+          unix))]\n mod imp {\n     use core::cmp;\n     use core::ptr;\n@@ -314,7 +322,10 @@ mod imp {\n     pub fn stats_print() {}\n }\n \n-#[cfg(all(not(external_funcs), not(external_crate), not(jemalloc), windows))]\n+#[cfg(all(not(feature = \"external_funcs\"),\n+          not(feature = \"external_crate\"),\n+          not(jemalloc),\n+          windows))]\n mod imp {\n     use libc::{c_void, size_t};\n     use libc;"}, {"sha": "72509d34f29d7e16872efca39b0739315e0220f0", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebe8411874f8bb8ba2f7eae2f482a54d34195f69/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe8411874f8bb8ba2f7eae2f482a54d34195f69/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=ebe8411874f8bb8ba2f7eae2f482a54d34195f69", "patch": "@@ -69,6 +69,8 @@\n \n #[macro_use]\n extern crate core;\n+\n+#[cfg(all(not(feature = \"external_funcs\"), not(feature = \"external_crate\")))]\n extern crate libc;\n \n // Allow testing this library"}]}