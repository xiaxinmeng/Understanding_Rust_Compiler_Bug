{"sha": "fe1e324694425e9b683b72be5371a555601ffe6c", "node_id": "C_kwDOAAsO6NoAKGZlMWUzMjQ2OTQ0MjVlOWI2ODNiNzJiZTUzNzFhNTU1NjAxZmZlNmM", "commit": {"author": {"name": "Chayim Refael Friedman", "email": "chayimfr@gmail.com", "date": "2022-01-23T03:59:35Z"}, "committer": {"name": "Chayim Refael Friedman", "email": "chayimfr@gmail.com", "date": "2022-02-21T06:34:35Z"}, "message": "Type-inference for `let` expressions", "tree": {"sha": "01843db0b48e04503481f844f7bb52a2e5539bae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01843db0b48e04503481f844f7bb52a2e5539bae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe1e324694425e9b683b72be5371a555601ffe6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe1e324694425e9b683b72be5371a555601ffe6c", "html_url": "https://github.com/rust-lang/rust/commit/fe1e324694425e9b683b72be5371a555601ffe6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe1e324694425e9b683b72be5371a555601ffe6c/comments", "author": {"login": "ChayimFriedman2", "id": 24700207, "node_id": "MDQ6VXNlcjI0NzAwMjA3", "avatar_url": "https://avatars.githubusercontent.com/u/24700207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChayimFriedman2", "html_url": "https://github.com/ChayimFriedman2", "followers_url": "https://api.github.com/users/ChayimFriedman2/followers", "following_url": "https://api.github.com/users/ChayimFriedman2/following{/other_user}", "gists_url": "https://api.github.com/users/ChayimFriedman2/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChayimFriedman2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChayimFriedman2/subscriptions", "organizations_url": "https://api.github.com/users/ChayimFriedman2/orgs", "repos_url": "https://api.github.com/users/ChayimFriedman2/repos", "events_url": "https://api.github.com/users/ChayimFriedman2/events{/privacy}", "received_events_url": "https://api.github.com/users/ChayimFriedman2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChayimFriedman2", "id": 24700207, "node_id": "MDQ6VXNlcjI0NzAwMjA3", "avatar_url": "https://avatars.githubusercontent.com/u/24700207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChayimFriedman2", "html_url": "https://github.com/ChayimFriedman2", "followers_url": "https://api.github.com/users/ChayimFriedman2/followers", "following_url": "https://api.github.com/users/ChayimFriedman2/following{/other_user}", "gists_url": "https://api.github.com/users/ChayimFriedman2/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChayimFriedman2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChayimFriedman2/subscriptions", "organizations_url": "https://api.github.com/users/ChayimFriedman2/orgs", "repos_url": "https://api.github.com/users/ChayimFriedman2/repos", "events_url": "https://api.github.com/users/ChayimFriedman2/events{/privacy}", "received_events_url": "https://api.github.com/users/ChayimFriedman2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bf6f4ff1dd8d342c061708041810c64fe983ab8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bf6f4ff1dd8d342c061708041810c64fe983ab8", "html_url": "https://github.com/rust-lang/rust/commit/6bf6f4ff1dd8d342c061708041810c64fe983ab8"}], "stats": {"total": 29, "additions": 11, "deletions": 18}, "files": [{"sha": "13f64d682521e8733ec67b6fd2edb44990f02736", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fe1e324694425e9b683b72be5371a555601ffe6c/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1e324694425e9b683b72be5371a555601ffe6c/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=fe1e324694425e9b683b72be5371a555601ffe6c", "patch": "@@ -8,10 +8,7 @@ use std::{\n \n use chalk_ir::{cast::Cast, fold::Shift, Mutability, TyVariableKind};\n use hir_def::{\n-    expr::{\n-        ArithOp, Array, BinaryOp, CmpOp, Expr, ExprId, Literal, MatchGuard, Ordering, Statement,\n-        UnaryOp,\n-    },\n+    expr::{ArithOp, Array, BinaryOp, CmpOp, Expr, ExprId, Literal, Ordering, Statement, UnaryOp},\n     path::{GenericArg, GenericArgs},\n     resolver::resolver_for_expr,\n     FieldId, FunctionId, ItemContainerId, Lookup,\n@@ -158,6 +155,11 @@ impl<'a> InferenceContext<'a> {\n \n                 coerce.complete()\n             }\n+            &Expr::Let { pat, expr } => {\n+                let input_ty = self.infer_expr(expr, &Expectation::none());\n+                self.infer_pat(pat, &input_ty, BindingMode::default());\n+                TyKind::Scalar(Scalar::Bool).intern(Interner)\n+            }\n             Expr::Block { statements, tail, label, id: _ } => {\n                 let old_resolver = mem::replace(\n                     &mut self.resolver,\n@@ -378,20 +380,11 @@ impl<'a> InferenceContext<'a> {\n                 for arm in arms.iter() {\n                     self.diverges = Diverges::Maybe;\n                     let _pat_ty = self.infer_pat(arm.pat, &input_ty, BindingMode::default());\n-                    match arm.guard {\n-                        Some(MatchGuard::If { expr: guard_expr }) => {\n-                            self.infer_expr(\n-                                guard_expr,\n-                                &Expectation::has_type(\n-                                    TyKind::Scalar(Scalar::Bool).intern(Interner),\n-                                ),\n-                            );\n-                        }\n-                        Some(MatchGuard::IfLet { expr, pat }) => {\n-                            let input_ty = self.infer_expr(expr, &Expectation::none());\n-                            let _pat_ty = self.infer_pat(pat, &input_ty, BindingMode::default());\n-                        }\n-                        _ => {}\n+                    if let Some(guard_expr) = arm.guard {\n+                        self.infer_expr(\n+                            guard_expr,\n+                            &Expectation::has_type(TyKind::Scalar(Scalar::Bool).intern(Interner)),\n+                        );\n                     }\n \n                     let arm_ty = self.infer_expr_inner(arm.expr, &expected);"}]}