{"sha": "62e9473d07ec9a35e1c1e63140381055d86bb478", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZTk0NzNkMDdlYzlhMzVlMWMxZTYzMTQwMzgxMDU1ZDg2YmI0Nzg=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-11T23:53:19Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-11T23:53:19Z"}, "message": "Update rewrite_trait_ref to return Option<String>", "tree": {"sha": "3d89d7b75de8b8857c4044559c79ee7cb6477105", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d89d7b75de8b8857c4044559c79ee7cb6477105"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62e9473d07ec9a35e1c1e63140381055d86bb478", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62e9473d07ec9a35e1c1e63140381055d86bb478", "html_url": "https://github.com/rust-lang/rust/commit/62e9473d07ec9a35e1c1e63140381055d86bb478", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62e9473d07ec9a35e1c1e63140381055d86bb478/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e94fcfcd39c2658812a59f1adc0f6fca5a36a0cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e94fcfcd39c2658812a59f1adc0f6fca5a36a0cf", "html_url": "https://github.com/rust-lang/rust/commit/e94fcfcd39c2658812a59f1adc0f6fca5a36a0cf"}], "stats": {"total": 74, "additions": 36, "deletions": 38}, "files": [{"sha": "6b9e1e411f1e4f0eebae45f250d89b71acfd2db9", "filename": "src/items.rs", "status": "modified", "additions": 36, "deletions": 38, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/62e9473d07ec9a35e1c1e63140381055d86bb478/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62e9473d07ec9a35e1c1e63140381055d86bb478/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=62e9473d07ec9a35e1c1e63140381055d86bb478", "patch": "@@ -676,25 +676,26 @@ fn format_impl_ref_and_type(context: &RewriteContext,\n         };\n \n         if let Some(ref trait_ref) = *trait_ref {\n-            let success = format_trait_ref_then_update_result(context,\n-                                                              &trait_ref,\n-                                                              offset,\n-                                                              &generics_str,\n-                                                              true,\n-                                                              polarity_str,\n-                                                              &mut result);\n-            if !success {\n+            let result_len = result.len();\n+            if let Some(trait_ref_str) =\n+                rewrite_trait_ref(context,\n+                                  &trait_ref,\n+                                  offset,\n+                                  &generics_str,\n+                                  true,\n+                                  polarity_str,\n+                                  result_len) {\n+                result.push_str(&trait_ref_str);\n+            } else {\n                 let generics_str =\n                     try_opt!(rewrite_generics_inner(context, generics, shape, 0, mk_sp(lo, hi)));\n-                if !format_trait_ref_then_update_result(context,\n-                                                        &trait_ref,\n-                                                        offset,\n-                                                        &generics_str,\n-                                                        false,\n-                                                        polarity_str,\n-                                                        &mut result) {\n-                    return None;\n-                }\n+                result.push_str(&try_opt!(rewrite_trait_ref(context,\n+                                                            &trait_ref,\n+                                                            offset,\n+                                                            &generics_str,\n+                                                            false,\n+                                                            polarity_str,\n+                                                            result_len)));\n             }\n         } else {\n             result.push_str(&generics_str);\n@@ -752,43 +753,40 @@ fn format_impl_ref_and_type(context: &RewriteContext,\n     }\n }\n \n-// Returns false if failed to update result: then, try using multiline.\n-fn format_trait_ref_then_update_result(context: &RewriteContext,\n-                                       trait_ref: &ast::TraitRef,\n-                                       offset: Indent,\n-                                       generics_str: &str,\n-                                       retry: bool,\n-                                       polarity_str: &str,\n-                                       result: &mut String)\n-                                       -> bool {\n+fn rewrite_trait_ref(context: &RewriteContext,\n+                     trait_ref: &ast::TraitRef,\n+                     offset: Indent,\n+                     generics_str: &str,\n+                     retry: bool,\n+                     polarity_str: &str,\n+                     result_len: usize)\n+                     -> Option<String> {\n     // 1 = space between generics and trait_ref\n     let used_space = 1 + polarity_str.len() +\n                      if generics_str.contains('\\n') {\n                          last_line_width(&generics_str)\n                      } else {\n-                         result.len() + generics_str.len()\n+                         result_len + generics_str.len()\n                      };\n     let shape = Shape::indented(offset + used_space, context.config);\n     if let Some(trait_ref_str) = trait_ref.rewrite(context, shape) {\n         if !(retry && trait_ref_str.contains('\\n')) {\n-            result.push_str(&format!(\"{} {}{}\", generics_str, polarity_str, &trait_ref_str));\n-            return true;\n+            return Some(format!(\"{} {}{}\", generics_str, polarity_str, &trait_ref_str));\n         }\n     }\n     // We could not make enough space for trait_ref, so put it on new line.\n     if !retry {\n         let offset = offset.block_indent(context.config);\n         let shape = Shape::indented(offset, context.config);\n-        if let Some(trait_ref_str) = trait_ref.rewrite(context, shape) {\n-            result.push_str(&format!(\"{}\\n{}{}{}\",\n-                                     generics_str,\n-                                     &offset.to_string(context.config),\n-                                     polarity_str,\n-                                     &trait_ref_str));\n-            return true;\n-        }\n+        let trait_ref_str = try_opt!(trait_ref.rewrite(context, shape));\n+        Some(format!(\"{}\\n{}{}{}\",\n+                     generics_str,\n+                     &offset.to_string(context.config),\n+                     polarity_str,\n+                     &trait_ref_str))\n+    } else {\n+        None\n     }\n-    false\n }\n \n pub fn format_struct(context: &RewriteContext,"}]}