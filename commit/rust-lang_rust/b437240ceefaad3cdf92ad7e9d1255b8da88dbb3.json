{"sha": "b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MzcyNDBjZWVmYWFkM2NkZjkyYWQ3ZTlkMTI1NWI4ZGE4OGRiYjM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-04T01:15:18Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-05T16:35:15Z"}, "message": "Replace diagnostic plugins with macro_rules", "tree": {"sha": "ad724c143dc6cf6b20b214fa00e4572571e87399", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad724c143dc6cf6b20b214fa00e4572571e87399"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "comment_count": 3, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "html_url": "https://github.com/rust-lang/rust/commit/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74563b41666228e46f892e795108e06306b2b514", "url": "https://api.github.com/repos/rust-lang/rust/commits/74563b41666228e46f892e795108e06306b2b514", "html_url": "https://github.com/rust-lang/rust/commit/74563b41666228e46f892e795108e06306b2b514"}], "stats": {"total": 438, "additions": 87, "deletions": 351}, "files": [{"sha": "eee33846139e673dcdea38ac9a8977807ae573af", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -2184,11 +2184,7 @@ Examples of erroneous code:\n static X: u32 = 42;\n ```\n \"##,\n-\n-}\n-\n-\n-register_diagnostics! {\n+;\n //  E0006, // merged with E0005\n //  E0101, // replaced with E0282\n //  E0102, // replaced with E0282"}, {"sha": "c5d2b2d7e7f873ef9b9bc327e4337d65c2a87c98", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -88,8 +88,6 @@ mod tests;\n #[macro_use]\n mod macros;\n \n-// N.B., this module needs to be declared first so diagnostics are\n-// registered before they are used.\n pub mod error_codes;\n \n #[macro_use]\n@@ -143,6 +141,3 @@ pub mod util {\n \n // Allows macros to refer to this crate as `::rustc`\n extern crate self as rustc;\n-\n-// Build the diagnostics array at the end so that the metadata includes error use sites.\n-__build_diagnostic_array! { librustc, DIAGNOSTICS }"}, {"sha": "042e51ed2ba7a4e95e0f4bacd7e16142947df71c", "filename": "src/librustc_codegen_llvm/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_codegen_llvm%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_codegen_llvm%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ferror_codes.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -1,4 +1,4 @@\n-register_long_diagnostics! {\n+register_diagnostics! {\n \n E0511: r##\"\n Invalid monomorphization of an intrinsic function was used. Erroneous code"}, {"sha": "f032d0ff0464c61b7145f766686273825f2e2006", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -256,7 +256,7 @@ impl CodegenBackend for LlvmCodegenBackend {\n     }\n \n     fn diagnostics(&self) -> &[(&'static str, &'static str)] {\n-        &DIAGNOSTICS\n+        &error_codes::DIAGNOSTICS\n     }\n \n     fn target_features(&self, sess: &Session) -> Vec<Symbol> {\n@@ -425,5 +425,3 @@ impl Drop for ModuleLlvm {\n         }\n     }\n }\n-\n-__build_diagnostic_array! { librustc_codegen_llvm, DIAGNOSTICS }"}, {"sha": "8ff41c275a8f45283e387847e7d5861dd3abd94b", "filename": "src/librustc_codegen_ssa/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_codegen_ssa%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_codegen_ssa%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ferror_codes.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -1,4 +1,4 @@\n-register_long_diagnostics! {\n+syntax::register_diagnostics! {\n \n E0668: r##\"\n Malformed inline assembly rejected by LLVM."}, {"sha": "0f98310722ee38ef0a95932f3ee1eea1cbce58ae", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -35,8 +35,6 @@ use rustc_data_structures::svh::Svh;\n use rustc::middle::cstore::{LibSource, CrateSource, NativeLibrary};\n use syntax_pos::symbol::Symbol;\n \n-// N.B., this module needs to be declared first so diagnostics are\n-// registered before they are used.\n mod error_codes;\n \n pub mod common;\n@@ -158,5 +156,3 @@ pub struct CodegenResults {\n     pub linker_info: back::linker::LinkerInfo,\n     pub crate_info: CrateInfo,\n }\n-\n-__build_diagnostic_array! { librustc_codegen_ssa, DIAGNOSTICS }"}, {"sha": "bd9b240e24efa9afd1455d3b311e67305e289fe7", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -34,7 +34,7 @@ use rustc_privacy;\n use rustc_resolve::{Resolver, ResolverArenas};\n use rustc_traits;\n use rustc_typeck as typeck;\n-use syntax::{self, ast, diagnostics, visit};\n+use syntax::{self, ast, visit};\n use syntax::early_buffered_lints::BufferedEarlyLint;\n use syntax::ext::base::{NamedSyntaxExtension, ExtCtxt};\n use syntax::mut_visit::MutVisitor;\n@@ -292,18 +292,7 @@ pub fn register_plugins<'a>(\n \n     time(sess, \"plugin registration\", || {\n         if sess.features_untracked().rustc_diagnostic_macros {\n-            registry.register_macro(\n-                \"__diagnostic_used\",\n-                diagnostics::plugin::expand_diagnostic_used,\n-            );\n-            registry.register_macro(\n-                \"__register_diagnostic\",\n-                diagnostics::plugin::expand_register_diagnostic,\n-            );\n-            registry.register_macro(\n-                \"__build_diagnostic_array\",\n-                diagnostics::plugin::expand_build_diagnostic_array,\n-            );\n+            // FIXME: remove feature gate\n         }\n \n         for registrar in registrars {"}, {"sha": "9eaf7b77716f3f0d62c25d3d4e2f6c54839de019", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -43,17 +43,17 @@ use std::{thread, panic};\n \n pub fn diagnostics_registry() -> Registry {\n     let mut all_errors = Vec::new();\n-    all_errors.extend_from_slice(&rustc::DIAGNOSTICS);\n-    all_errors.extend_from_slice(&rustc_typeck::DIAGNOSTICS);\n-    all_errors.extend_from_slice(&rustc_resolve::DIAGNOSTICS);\n-    all_errors.extend_from_slice(&rustc_privacy::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&rustc::error_codes::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&rustc_typeck::error_codes::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&rustc_resolve::error_codes::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&rustc_privacy::error_codes::DIAGNOSTICS);\n     // FIXME: need to figure out a way to get these back in here\n     // all_errors.extend_from_slice(get_codegen_backend(sess).diagnostics());\n-    all_errors.extend_from_slice(&rustc_metadata::DIAGNOSTICS);\n-    all_errors.extend_from_slice(&rustc_passes::DIAGNOSTICS);\n-    all_errors.extend_from_slice(&rustc_plugin::DIAGNOSTICS);\n-    all_errors.extend_from_slice(&rustc_mir::DIAGNOSTICS);\n-    all_errors.extend_from_slice(&syntax::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&rustc_metadata::error_codes::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&rustc_passes::error_codes::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&rustc_plugin::error_codes::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&rustc_mir::error_codes::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&syntax::error_codes::DIAGNOSTICS);\n \n     Registry::new(&all_errors)\n }"}, {"sha": "ea2e1d9ecc53f46553207c643ec5eed7c560de96", "filename": "src/librustc_lint/error_codes.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_lint%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_lint%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ferror_codes.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -1,5 +1,4 @@\n-use syntax::register_diagnostics;\n-\n-register_diagnostics! {\n+syntax::register_diagnostics! {\n+;\n     E0721, // `await` keyword\n }"}, {"sha": "cd8e95e6c3a1101786cd08bc55fba6b8bc0c7a37", "filename": "src/librustc_metadata/error_codes.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_metadata%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_metadata%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ferror_codes.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -1,6 +1,4 @@\n-use syntax::{register_diagnostics, register_long_diagnostics};\n-\n-register_long_diagnostics! {\n+syntax::register_diagnostics! {\n E0454: r##\"\n A link name was given with an empty name. Erroneous code example:\n \n@@ -84,10 +82,7 @@ You need to link your code to the relevant crate in order to be able to use it\n (through Cargo or the `-L` option of rustc example). Plugins are crates as\n well, and you link to them the same way.\n \"##,\n-\n-}\n-\n-register_diagnostics! {\n+;\n     E0456, // plugin `..` is not available for triple `..`\n     E0457, // plugin `..` only found in rlib format, but must be available...\n     E0514, // metadata version mismatch"}, {"sha": "3ab7d372461b80e70e45e6ee85cf22edcc944bca", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -23,7 +23,7 @@ extern crate rustc;\n #[macro_use]\n extern crate rustc_data_structures;\n \n-mod error_codes;\n+pub mod error_codes;\n \n mod index;\n mod encoder;\n@@ -68,5 +68,3 @@ pub fn validate_crate_name(\n         sess.unwrap().abort_if_errors();\n     }\n }\n-\n-__build_diagnostic_array! { librustc_metadata, DIAGNOSTICS }"}, {"sha": "74b3eff0906acfd7326cc2825805bf80411d5716", "filename": "src/librustc_mir/error_codes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_mir%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_mir%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ferror_codes.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -1,4 +1,4 @@\n-register_long_diagnostics! {\n+syntax::register_diagnostics! {\n \n \n E0001: r##\"\n@@ -2448,9 +2448,9 @@ information.\n \n There are some known bugs that trigger this message.\n \"##,\n-}\n \n-register_diagnostics! {\n+;\n+\n //  E0298, // cannot compare constants\n //  E0299, // mismatched types between arms\n //  E0471, // constant evaluation error (in pattern)"}, {"sha": "7a5db4fc19d02f5f874c911d7d9e125a656fb0ad", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -32,7 +32,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #[macro_use] extern crate rustc_data_structures;\n #[macro_use] extern crate syntax;\n \n-mod error_codes;\n+pub mod error_codes;\n \n mod borrow_check;\n mod build;\n@@ -62,5 +62,3 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n     providers.type_name = interpret::type_name;\n }\n-\n-__build_diagnostic_array! { librustc_mir, DIAGNOSTICS }"}, {"sha": "af07c790e2a8799a35e82878719ab7d1af97d0f4", "filename": "src/librustc_passes/error_codes.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_passes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_passes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Ferror_codes.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -1,6 +1,4 @@\n-use syntax::{register_diagnostics, register_long_diagnostics};\n-\n-register_long_diagnostics! {\n+syntax::register_diagnostics! {\n /*\n E0014: r##\"\n Constants can only be initialized by a constant value or, in a future\n@@ -320,10 +318,8 @@ async fn foo() {}\n ```\n \n Switch to the Rust 2018 edition to use `async fn`.\n-\"##\n-}\n-\n-register_diagnostics! {\n+\"##,\n+;\n     E0226, // only a single explicit lifetime bound is permitted\n     E0472, // asm! is unsupported on this target\n     E0561, // patterns aren't allowed in function pointer types"}, {"sha": "2070f306112a12c33a60dc5d0e18e6f36c6a318f", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -18,16 +18,14 @@ extern crate rustc;\n \n use rustc::ty::query::Providers;\n \n-mod error_codes;\n+pub mod error_codes;\n \n pub mod ast_validation;\n pub mod rvalue_promotion;\n pub mod hir_stats;\n pub mod layout_test;\n pub mod loops;\n \n-__build_diagnostic_array! { librustc_passes, DIAGNOSTICS }\n-\n pub fn provide(providers: &mut Providers<'_>) {\n     rvalue_promotion::provide(providers);\n     loops::provide(providers);"}, {"sha": "7b3f01c0ee11144b6cea496836470e049e398462", "filename": "src/librustc_plugin/error_codes.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_plugin%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_plugin%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Ferror_codes.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -1,9 +1,4 @@\n-use syntax::{register_diagnostics, register_long_diagnostics};\n-\n-register_long_diagnostics! {\n-\n-}\n-\n-register_diagnostics! {\n-    E0498  // malformed plugin attribute\n+syntax::register_diagnostics! {\n+;\n+    E0498,  // malformed plugin attribute\n }"}, {"sha": "1cf01d481e4681e39eb5273277b08028ff57120a", "filename": "src/librustc_plugin/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Flib.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -60,9 +60,7 @@\n \n pub use registry::Registry;\n \n-mod error_codes;\n+pub mod error_codes;\n pub mod registry;\n pub mod load;\n pub mod build;\n-\n-__build_diagnostic_array! { librustc_plugin, DIAGNOSTICS }"}, {"sha": "67066466f1d222d0d0af63a786a193a46f45f137", "filename": "src/librustc_privacy/error_codes.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_privacy%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_privacy%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Ferror_codes.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -1,4 +1,4 @@\n-register_long_diagnostics! {\n+syntax::register_diagnostics! {\n \n E0445: r##\"\n A private trait was used on a public type parameter bound. Erroneous code\n@@ -154,8 +154,5 @@ let f = Bar::Foo::new(); // ok!\n ```\n \"##,\n \n-}\n-\n-register_diagnostics! {\n //  E0450, moved into resolve\n }"}, {"sha": "28ef3b794babda8d5b97adc27f98179135c184bd", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -31,7 +31,7 @@ use syntax_pos::Span;\n use std::{cmp, fmt, mem};\n use std::marker::PhantomData;\n \n-mod error_codes;\n+pub mod error_codes;\n \n ////////////////////////////////////////////////////////////////////////////////\n /// Generic infrastructure used to implement specific visitors below.\n@@ -2035,5 +2035,3 @@ fn check_private_in_public(tcx: TyCtxt<'_>, krate: CrateNum) {\n     };\n     krate.visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));\n }\n-\n-__build_diagnostic_array! { librustc_privacy, DIAGNOSTICS }"}, {"sha": "adbff67cc8dac2942728becb3c9039b9533023a2", "filename": "src/librustc_resolve/error_codes.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_resolve%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_resolve%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_codes.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -1,9 +1,7 @@\n-use syntax::{register_diagnostics, register_long_diagnostics};\n-\n // Error messages for EXXXX errors.  Each message should start and end with a\n // new line, and be wrapped to 80 characters.  In vim you can `:set tw=80` and\n // use `gq` to wrap paragraphs. Use `:set tw=0` to disable.\n-register_long_diagnostics! {\n+syntax::register_diagnostics! {\n \n E0128: r##\"\n Type parameter defaults can only use parameters that occur before them.\n@@ -1662,10 +1660,7 @@ fn const_id<T, const N: T>() -> T { // error: const parameter\n }\n ```\n \"##,\n-\n-}\n-\n-register_diagnostics! {\n+;\n //  E0153, unused error code\n //  E0157, unused error code\n //  E0257,"}, {"sha": "4570bbbe3392601020a05fa0e6122e5ce2290064", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -286,18 +286,18 @@ impl<'a> PathSource<'a> {\n     }\n \n     fn error_code(self, has_unexpected_resolution: bool) -> &'static str {\n-        __diagnostic_used!(E0404);\n-        __diagnostic_used!(E0405);\n-        __diagnostic_used!(E0412);\n-        __diagnostic_used!(E0422);\n-        __diagnostic_used!(E0423);\n-        __diagnostic_used!(E0425);\n-        __diagnostic_used!(E0531);\n-        __diagnostic_used!(E0532);\n-        __diagnostic_used!(E0573);\n-        __diagnostic_used!(E0574);\n-        __diagnostic_used!(E0575);\n-        __diagnostic_used!(E0576);\n+        syntax::diagnostic_used!(E0404);\n+        syntax::diagnostic_used!(E0405);\n+        syntax::diagnostic_used!(E0412);\n+        syntax::diagnostic_used!(E0422);\n+        syntax::diagnostic_used!(E0423);\n+        syntax::diagnostic_used!(E0425);\n+        syntax::diagnostic_used!(E0531);\n+        syntax::diagnostic_used!(E0532);\n+        syntax::diagnostic_used!(E0573);\n+        syntax::diagnostic_used!(E0574);\n+        syntax::diagnostic_used!(E0575);\n+        syntax::diagnostic_used!(E0576);\n         match (self, has_unexpected_resolution) {\n             (PathSource::Trait(_), true) => \"E0404\",\n             (PathSource::Trait(_), false) => \"E0405\","}, {"sha": "0c86d8494fde833afcf0f92760d8b8821a14c219", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -113,7 +113,7 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n \n         // Emit special messages for unresolved `Self` and `self`.\n         if is_self_type(path, ns) {\n-            __diagnostic_used!(E0411);\n+            syntax::diagnostic_used!(E0411);\n             err.code(DiagnosticId::Error(\"E0411\".into()));\n             err.span_label(span, format!(\"`Self` is only available in impls, traits, \\\n                                           and type definitions\"));\n@@ -122,7 +122,7 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n         if is_self_value(path, ns) {\n             debug!(\"smart_resolve_path_fragment: E0424, source={:?}\", source);\n \n-            __diagnostic_used!(E0424);\n+            syntax::diagnostic_used!(E0424);\n             err.code(DiagnosticId::Error(\"E0424\".into()));\n             err.span_label(span, match source {\n                 PathSource::Pat => {"}, {"sha": "6ba08ccef030744715b6899f9a1ccd45677b46a6", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -67,9 +67,7 @@ use macros::{LegacyBinding, LegacyScope};\n \n type Res = def::Res<NodeId>;\n \n-// N.B., this module needs to be declared first so diagnostics are\n-// registered before they are used.\n-mod error_codes;\n+pub mod error_codes;\n mod diagnostics;\n mod late;\n mod macros;\n@@ -2817,5 +2815,3 @@ impl CrateLint {\n         }\n     }\n }\n-\n-__build_diagnostic_array! { librustc_resolve, DIAGNOSTICS }"}, {"sha": "e11dcfafb8f8b1f10b31972b543b838fd716e0f2", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -1,6 +1,6 @@\n // ignore-tidy-filelength\n \n-register_long_diagnostics! {\n+syntax::register_diagnostics! {\n \n E0023: r##\"\n A pattern used to match against an enum variant must provide a sub-pattern for\n@@ -4870,10 +4870,7 @@ fn foo_recursive(n: usize) -> Pin<Box<dyn Future<Output = ()>>> {\n The `Box<...>` ensures that the result is of known size,\n and the pin is required to keep it in the same place in memory.\n \"##,\n-\n-}  // (end of detailed error messages)\n-\n-register_diagnostics! {\n+;\n //  E0035, merged into E0087/E0089\n //  E0036, merged into E0087/E0089\n //  E0068,"}, {"sha": "91c7522280af221fdec761a82e36e7c3d9e289e5", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -78,9 +78,7 @@ This API is completely unstable and subject to change.\n \n #[macro_use] extern crate rustc;\n \n-// N.B., this module needs to be declared first so diagnostics are\n-// registered before they are used.\n-mod error_codes;\n+pub mod error_codes;\n \n mod astconv;\n mod check;\n@@ -389,5 +387,3 @@ pub fn hir_trait_to_predicates<'tcx>(\n \n     bounds\n }\n-\n-__build_diagnostic_array! { librustc_typeck, DIAGNOSTICS }"}, {"sha": "273a36edc56ff47068cd4b38518e7c12a189cdd1", "filename": "src/librustc_typeck/structured_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_typeck%2Fstructured_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibrustc_typeck%2Fstructured_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fstructured_errors.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -48,7 +48,7 @@ impl<'tcx> StructuredDiagnostic<'tcx> for VariadicError<'tcx> {\n     fn session(&self) -> &Session { self.sess }\n \n     fn code(&self) -> DiagnosticId {\n-        __diagnostic_used!(E0617);\n+        syntax::diagnostic_used!(E0617);\n         DiagnosticId::Error(\"E0617\".to_owned())\n     }\n \n@@ -104,7 +104,7 @@ impl<'tcx> StructuredDiagnostic<'tcx> for SizedUnsizedCastError<'tcx> {\n     fn session(&self) -> &Session { self.sess }\n \n     fn code(&self) -> DiagnosticId {\n-        __diagnostic_used!(E0607);\n+        syntax::diagnostic_used!(E0607);\n         DiagnosticId::Error(\"E0607\".to_owned())\n     }\n "}, {"sha": "c95c5bd5d02d4d20479a9b6ec806985c19dd2989", "filename": "src/libsyntax/diagnostics/macros.rs", "status": "modified", "additions": 29, "deletions": 26, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -1,13 +1,14 @@\n #[macro_export]\n-macro_rules! register_diagnostic {\n-    ($code:tt, $description:tt) => (__register_diagnostic! { $code, $description });\n-    ($code:tt) => (__register_diagnostic! { $code })\n+macro_rules! diagnostic_used {\n+    ($code:ident) => (\n+        let _ = crate::error_codes::$code;\n+    )\n }\n \n #[macro_export]\n macro_rules! span_fatal {\n     ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n-        __diagnostic_used!($code);\n+        $crate::diagnostic_used!($code);\n         $session.span_fatal_with_code(\n             $span,\n             &format!($($message)*),\n@@ -19,7 +20,7 @@ macro_rules! span_fatal {\n #[macro_export]\n macro_rules! span_err {\n     ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n-        __diagnostic_used!($code);\n+        $crate::diagnostic_used!($code);\n         $session.span_err_with_code(\n             $span,\n             &format!($($message)*),\n@@ -31,7 +32,7 @@ macro_rules! span_err {\n #[macro_export]\n macro_rules! span_warn {\n     ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n-        __diagnostic_used!($code);\n+        $crate::diagnostic_used!($code);\n         $session.span_warn_with_code(\n             $span,\n             &format!($($message)*),\n@@ -43,7 +44,7 @@ macro_rules! span_warn {\n #[macro_export]\n macro_rules! struct_err {\n     ($session:expr, $code:ident, $($message:tt)*) => ({\n-        __diagnostic_used!($code);\n+        $crate::diagnostic_used!($code);\n         $session.struct_err_with_code(\n             &format!($($message)*),\n             $crate::errors::DiagnosticId::Error(stringify!($code).to_owned()),\n@@ -54,7 +55,7 @@ macro_rules! struct_err {\n #[macro_export]\n macro_rules! span_err_or_warn {\n     ($is_warning:expr, $session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n-        __diagnostic_used!($code);\n+        $crate::diagnostic_used!($code);\n         if $is_warning {\n             $session.span_warn_with_code(\n                 $span,\n@@ -74,7 +75,7 @@ macro_rules! span_err_or_warn {\n #[macro_export]\n macro_rules! struct_span_fatal {\n     ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n-        __diagnostic_used!($code);\n+        $crate::diagnostic_used!($code);\n         $session.struct_span_fatal_with_code(\n             $span,\n             &format!($($message)*),\n@@ -86,7 +87,7 @@ macro_rules! struct_span_fatal {\n #[macro_export]\n macro_rules! struct_span_err {\n     ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n-        __diagnostic_used!($code);\n+        $crate::diagnostic_used!($code);\n         $session.struct_span_err_with_code(\n             $span,\n             &format!($($message)*),\n@@ -98,7 +99,7 @@ macro_rules! struct_span_err {\n #[macro_export]\n macro_rules! stringify_error_code {\n     ($code:ident) => ({\n-        __diagnostic_used!($code);\n+        $crate::diagnostic_used!($code);\n         $crate::errors::DiagnosticId::Error(stringify!($code).to_owned())\n     })\n }\n@@ -117,7 +118,7 @@ macro_rules! type_error_struct {\n #[macro_export]\n macro_rules! struct_span_warn {\n     ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n-        __diagnostic_used!($code);\n+        $crate::diagnostic_used!($code);\n         $session.struct_span_warn_with_code(\n             $span,\n             &format!($($message)*),\n@@ -129,7 +130,7 @@ macro_rules! struct_span_warn {\n #[macro_export]\n macro_rules! struct_span_err_or_warn {\n     ($is_warning:expr, $session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n-        __diagnostic_used!($code);\n+        $crate::diagnostic_used!($code);\n         if $is_warning {\n             $session.struct_span_warn_with_code(\n                 $span,\n@@ -169,20 +170,22 @@ macro_rules! help {\n \n #[macro_export]\n macro_rules! register_diagnostics {\n-    ($($code:tt),*) => (\n-        $($crate::register_diagnostic! { $code })*\n+    ($($ecode:ident: $message:expr,)*) => (\n+        $crate::register_diagnostics!{$($ecode:$message,)* ;}\n     );\n-    ($($code:tt),*,) => (\n-        $($crate::register_diagnostic! { $code })*\n-    )\n-}\n \n-#[macro_export]\n-macro_rules! register_long_diagnostics {\n-    ($($code:tt: $description:tt),*) => (\n-        $($crate::register_diagnostic! { $code, $description })*\n-    );\n-    ($($code:tt: $description:tt),*,) => (\n-        $($crate::register_diagnostic! { $code, $description })*\n+    ($($ecode:ident: $message:expr,)* ; $($code:ident,)*) => (\n+        pub static DIAGNOSTICS: &[(&str, &str)] = &[\n+            $( (stringify!($ecode), $message), )*\n+        ];\n+\n+        $(\n+            #[deny(unused)]\n+            pub(crate) const $ecode: &str = $message;\n+        )*\n+        $(\n+            #[deny(unused)]\n+            pub(crate) const $code: () = ();\n+        )*\n     )\n }"}, {"sha": "5de39c8d14d17d2af304947be1489049c0914f49", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "removed", "additions": 0, "deletions": 185, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/74563b41666228e46f892e795108e06306b2b514/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74563b41666228e46f892e795108e06306b2b514/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=74563b41666228e46f892e795108e06306b2b514", "patch": "@@ -1,185 +0,0 @@\n-use std::collections::BTreeMap;\n-\n-use crate::ast::{self, Ident, Name};\n-use crate::source_map;\n-use crate::ext::base::{ExtCtxt, MacEager, MacResult};\n-use crate::parse::token::{self, Token};\n-use crate::ptr::P;\n-use crate::symbol::kw;\n-use crate::tokenstream::{TokenTree, TokenStream};\n-\n-use smallvec::smallvec;\n-use syntax_pos::Span;\n-\n-pub use errors::*;\n-\n-// Maximum width of any line in an extended error description (inclusive).\n-const MAX_DESCRIPTION_WIDTH: usize = 80;\n-\n-/// Error information type.\n-pub struct ErrorInfo {\n-    pub description: Option<Name>,\n-    pub use_site: Option<Span>\n-}\n-\n-/// Mapping from error codes to metadata.\n-pub type ErrorMap = BTreeMap<Name, ErrorInfo>;\n-\n-pub fn expand_diagnostic_used<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n-                                   span: Span,\n-                                   tts: TokenStream)\n-                                   -> Box<dyn MacResult+'cx> {\n-    assert_eq!(tts.len(), 1);\n-    let code = match tts.into_trees().next() {\n-        Some(TokenTree::Token(Token { kind: token::Ident(code, _), .. })) => code,\n-        _ => unreachable!()\n-    };\n-\n-    ecx.parse_sess.registered_diagnostics.with_lock(|diagnostics| {\n-        match diagnostics.get_mut(&code) {\n-            // Previously used errors.\n-            Some(&mut ErrorInfo { description: _, use_site: Some(previous_span) }) => {\n-                ecx.struct_span_warn(span, &format!(\n-                    \"diagnostic code {} already used\", code\n-                )).span_note(previous_span, \"previous invocation\")\n-                  .emit();\n-            }\n-            // Newly used errors.\n-            Some(ref mut info) => {\n-                info.use_site = Some(span);\n-            }\n-            // Unregistered errors.\n-            None => {\n-                ecx.span_err(span, &format!(\n-                    \"used diagnostic code {} not registered\", code\n-                ));\n-            }\n-        }\n-    });\n-    MacEager::expr(ecx.expr_tuple(span, Vec::new()))\n-}\n-\n-pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n-                                       span: Span,\n-                                       tts: TokenStream)\n-                                       -> Box<dyn MacResult+'cx> {\n-    assert!(tts.len() == 1 || tts.len() == 3);\n-    let mut cursor = tts.into_trees();\n-    let code = match cursor.next() {\n-        Some(TokenTree::Token(Token { kind: token::Ident(code, _), .. })) => code,\n-        _ => unreachable!()\n-    };\n-    let description = match  (cursor.next(), cursor.next()) {\n-        (None, None) => None,\n-        (\n-            Some(TokenTree::Token(Token { kind: token::Comma, .. })),\n-            Some(TokenTree::Token(Token { kind: token::Literal(token::Lit { symbol, .. }), ..}))\n-        ) => {\n-            Some(symbol)\n-        },\n-        _ => unreachable!()\n-    };\n-\n-    // Check that the description starts and ends with a newline and doesn't\n-    // overflow the maximum line width.\n-    description.map(|raw_msg| {\n-        let msg = raw_msg.as_str();\n-        if !msg.starts_with(\"\\n\") || !msg.ends_with(\"\\n\") {\n-            ecx.span_err(span, &format!(\n-                \"description for error code {} doesn't start and end with a newline\",\n-                code\n-            ));\n-        }\n-\n-        // URLs can be unavoidably longer than the line limit, so we allow them.\n-        // Allowed format is: `[name]: https://www.rust-lang.org/`\n-        let is_url = |l: &str| l.starts_with(\"[\") && l.contains(\"]:\") && l.contains(\"http\");\n-\n-        if msg.lines().any(|line| line.len() > MAX_DESCRIPTION_WIDTH && !is_url(line)) {\n-            ecx.span_err(span, &format!(\n-                \"description for error code {} contains a line longer than {} characters.\\n\\\n-                 if you're inserting a long URL use the footnote style to bypass this check.\",\n-                code, MAX_DESCRIPTION_WIDTH\n-            ));\n-        }\n-    });\n-    // Add the error to the map.\n-    ecx.parse_sess.registered_diagnostics.with_lock(|diagnostics| {\n-        let info = ErrorInfo {\n-            description,\n-            use_site: None\n-        };\n-        if diagnostics.insert(code, info).is_some() {\n-            ecx.span_err(span, &format!(\n-                \"diagnostic code {} already registered\", code\n-            ));\n-        }\n-    });\n-\n-    MacEager::items(smallvec![])\n-}\n-\n-pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n-                                          span: Span,\n-                                          tts: TokenStream)\n-                                          -> Box<dyn MacResult+'cx> {\n-    assert_eq!(tts.len(), 3);\n-    let ident = match tts.into_trees().nth(2) {\n-        // DIAGNOSTICS ident.\n-        Some(TokenTree::Token(Token { kind: token::Ident(name, _), span }))\n-        => Ident::new(name, span),\n-        _ => unreachable!()\n-    };\n-\n-    // Construct the output expression.\n-    let (count, expr) =\n-        ecx.parse_sess.registered_diagnostics.with_lock(|diagnostics| {\n-            let descriptions: Vec<P<ast::Expr>> =\n-                diagnostics.iter().filter_map(|(&code, info)| {\n-                    info.description.map(|description| {\n-                        ecx.expr_tuple(span, vec![\n-                            ecx.expr_str(span, code),\n-                            ecx.expr_str(span, description)\n-                        ])\n-                    })\n-                }).collect();\n-            (descriptions.len(), ecx.expr_vec(span, descriptions))\n-        });\n-\n-    let static_ = ecx.lifetime(span, Ident::with_dummy_span(kw::StaticLifetime));\n-    let ty_str = ecx.ty_rptr(\n-        span,\n-        ecx.ty_ident(span, ecx.ident_of(\"str\")),\n-        Some(static_),\n-        ast::Mutability::Immutable,\n-    );\n-\n-    let ty = ecx.ty(\n-        span,\n-        ast::TyKind::Array(\n-            ecx.ty(\n-                span,\n-                ast::TyKind::Tup(vec![ty_str.clone(), ty_str])\n-            ),\n-            ast::AnonConst {\n-                id: ast::DUMMY_NODE_ID,\n-                value: ecx.expr_usize(span, count),\n-            },\n-        ),\n-    );\n-\n-    MacEager::items(smallvec![\n-        P(ast::Item {\n-            ident,\n-            attrs: Vec::new(),\n-            id: ast::DUMMY_NODE_ID,\n-            node: ast::ItemKind::Const(\n-                ty,\n-                expr,\n-            ),\n-            vis: source_map::respan(span.shrink_to_lo(), ast::VisibilityKind::Public),\n-            span,\n-            tokens: None,\n-        })\n-    ])\n-}"}, {"sha": "9925dd8ada0d51520cf413608243e35a690784dc", "filename": "src/libsyntax/error_codes.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibsyntax%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibsyntax%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferror_codes.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -421,9 +421,8 @@ Delete the offending feature attribute, or add it to the list of allowed\n features in the `-Z allow_features` flag.\n \"##,\n \n-}\n+;\n \n-register_diagnostics! {\n     E0539, // incorrect meta item\n     E0540, // multiple rustc_deprecated attributes\n     E0542, // missing 'since'\n@@ -447,7 +446,7 @@ register_diagnostics! {\n     // attribute\n     E0630,\n     E0693, // incorrect `repr(align)` attribute format\n-    E0694, // an unknown tool name found in scoped attributes\n+//  E0694, // an unknown tool name found in scoped attributes\n     E0703, // invalid ABI\n     E0717, // rustc_promotable without stability attribute\n }"}, {"sha": "75ce306df800e190d0b6845528be482a9d188604", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -123,11 +123,8 @@ scoped_tls::scoped_thread_local!(pub static GLOBALS: Globals);\n pub mod diagnostics {\n     #[macro_use]\n     pub mod macros;\n-    pub mod plugin;\n }\n \n-// N.B., this module needs to be declared first so diagnostics are\n-// registered before they are used.\n pub mod error_codes;\n \n pub mod util {\n@@ -182,5 +179,3 @@ pub mod ext {\n }\n \n pub mod early_buffered_lints;\n-\n-__build_diagnostic_array! { libsyntax, DIAGNOSTICS }"}, {"sha": "981f5f1f7b004ca6d209235962977d09c16e9fcd", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -8,7 +8,6 @@ use crate::parse::parser::Parser;\n use crate::parse::parser::emit_unclosed_delims;\n use crate::parse::token::TokenKind;\n use crate::tokenstream::{TokenStream, TokenTree};\n-use crate::diagnostics::plugin::ErrorMap;\n use crate::print::pprust;\n use crate::symbol::Symbol;\n \n@@ -64,8 +63,6 @@ pub struct ParseSess {\n     pub missing_fragment_specifiers: Lock<FxHashSet<Span>>,\n     /// Places where raw identifiers were used. This is used for feature-gating raw identifiers.\n     pub raw_identifier_spans: Lock<Vec<Span>>,\n-    /// The registered diagnostics codes.\n-    crate registered_diagnostics: Lock<ErrorMap>,\n     /// Used to determine and report recursive module inclusions.\n     included_mod_stack: Lock<Vec<PathBuf>>,\n     source_map: Lrc<SourceMap>,\n@@ -95,7 +92,6 @@ impl ParseSess {\n             config: FxHashSet::default(),\n             missing_fragment_specifiers: Lock::new(FxHashSet::default()),\n             raw_identifier_spans: Lock::new(Vec::new()),\n-            registered_diagnostics: Lock::new(ErrorMap::new()),\n             included_mod_stack: Lock::new(vec![]),\n             source_map,\n             buffered_lints: Lock::new(vec![]),"}, {"sha": "2bc990574f7a878a838bec630a98415978506f96", "filename": "src/libsyntax_ext/error_codes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibsyntax_ext%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b437240ceefaad3cdf92ad7e9d1255b8da88dbb3/src%2Flibsyntax_ext%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ferror_codes.rs?ref=b437240ceefaad3cdf92ad7e9d1255b8da88dbb3", "patch": "@@ -1,5 +1,3 @@\n-use syntax::register_long_diagnostics;\n-\n // Error messages for EXXXX errors.\n // Each message should start and end with a new line, and be wrapped to 80\n // characters.  In vim you can `:set tw=80` and use `gq` to wrap paragraphs. Use"}]}