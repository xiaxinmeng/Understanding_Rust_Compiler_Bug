{"sha": "a135347f5d638788f4546d684e0d1d64baaeb607", "node_id": "C_kwDOAAsO6NoAKGExMzUzNDdmNWQ2Mzg3ODhmNDU0NmQ2ODRlMGQxZDY0YmFhZWI2MDc", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-11-24T21:06:13Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-11-25T01:16:27Z"}, "message": "Run rustfix for `strlen_on_c_strings` tests", "tree": {"sha": "812b1f78e71753630cc54480c66fe0464a36ef43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/812b1f78e71753630cc54480c66fe0464a36ef43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a135347f5d638788f4546d684e0d1d64baaeb607", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a135347f5d638788f4546d684e0d1d64baaeb607", "html_url": "https://github.com/rust-lang/rust/commit/a135347f5d638788f4546d684e0d1d64baaeb607", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a135347f5d638788f4546d684e0d1d64baaeb607/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d1f1cec44c501971b9f89e4c26346eeb5d4de18", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d1f1cec44c501971b9f89e4c26346eeb5d4de18", "html_url": "https://github.com/rust-lang/rust/commit/0d1f1cec44c501971b9f89e4c26346eeb5d4de18"}], "stats": {"total": 93, "additions": 65, "deletions": 28}, "files": [{"sha": "947a59bcc027a255dc5f81d90f3bcd37021ec1f5", "filename": "tests/ui/strlen_on_c_strings.fixed", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a135347f5d638788f4546d684e0d1d64baaeb607/tests%2Fui%2Fstrlen_on_c_strings.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a135347f5d638788f4546d684e0d1d64baaeb607/tests%2Fui%2Fstrlen_on_c_strings.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstrlen_on_c_strings.fixed?ref=a135347f5d638788f4546d684e0d1d64baaeb607", "patch": "@@ -0,0 +1,34 @@\n+// run-rustfix\n+\n+#![warn(clippy::strlen_on_c_strings)]\n+#![allow(dead_code)]\n+#![feature(rustc_private)]\n+extern crate libc;\n+\n+#[allow(unused)]\n+use libc::strlen;\n+use std::ffi::{CStr, CString};\n+\n+fn main() {\n+    // CString\n+    let cstring = CString::new(\"foo\").expect(\"CString::new failed\");\n+    let _ = cstring.as_bytes().len();\n+\n+    // CStr\n+    let cstr = CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\");\n+    let _ = cstr.to_bytes().len();\n+\n+    let _ = cstr.to_bytes().len();\n+\n+    let pcstr: *const &CStr = &cstr;\n+    let _ = unsafe { (*pcstr).to_bytes().len() };\n+\n+    unsafe fn unsafe_identity<T>(x: T) -> T {\n+        x\n+    }\n+    let _ = unsafe { unsafe_identity(cstr).to_bytes().len() };\n+    let _ = unsafe { unsafe_identity(cstr) }.to_bytes().len();\n+\n+    let f: unsafe fn(_) -> _ = unsafe_identity;\n+    let _ = unsafe { f(cstr).to_bytes().len() };\n+}"}, {"sha": "1237f1ab03acd07ebe1f5037fd28eb07fddb7048", "filename": "tests/ui/strlen_on_c_strings.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a135347f5d638788f4546d684e0d1d64baaeb607/tests%2Fui%2Fstrlen_on_c_strings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a135347f5d638788f4546d684e0d1d64baaeb607/tests%2Fui%2Fstrlen_on_c_strings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstrlen_on_c_strings.rs?ref=a135347f5d638788f4546d684e0d1d64baaeb607", "patch": "@@ -1,31 +1,34 @@\n+// run-rustfix\n+\n #![warn(clippy::strlen_on_c_strings)]\n #![allow(dead_code)]\n #![feature(rustc_private)]\n extern crate libc;\n \n+#[allow(unused)]\n use libc::strlen;\n use std::ffi::{CStr, CString};\n \n fn main() {\n     // CString\n     let cstring = CString::new(\"foo\").expect(\"CString::new failed\");\n-    let len = unsafe { libc::strlen(cstring.as_ptr()) };\n+    let _ = unsafe { libc::strlen(cstring.as_ptr()) };\n \n     // CStr\n     let cstr = CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\");\n-    let len = unsafe { libc::strlen(cstr.as_ptr()) };\n+    let _ = unsafe { libc::strlen(cstr.as_ptr()) };\n \n-    let len = unsafe { strlen(cstr.as_ptr()) };\n+    let _ = unsafe { strlen(cstr.as_ptr()) };\n \n     let pcstr: *const &CStr = &cstr;\n-    let len = unsafe { strlen((*pcstr).as_ptr()) };\n+    let _ = unsafe { strlen((*pcstr).as_ptr()) };\n \n     unsafe fn unsafe_identity<T>(x: T) -> T {\n         x\n     }\n-    let len = unsafe { strlen(unsafe_identity(cstr).as_ptr()) };\n-    let len = unsafe { strlen(unsafe { unsafe_identity(cstr) }.as_ptr()) };\n+    let _ = unsafe { strlen(unsafe_identity(cstr).as_ptr()) };\n+    let _ = unsafe { strlen(unsafe { unsafe_identity(cstr) }.as_ptr()) };\n \n     let f: unsafe fn(_) -> _ = unsafe_identity;\n-    let len = unsafe { strlen(f(cstr).as_ptr()) };\n+    let _ = unsafe { strlen(f(cstr).as_ptr()) };\n }"}, {"sha": "296268a5f1df79988635dd896c9715e3215cb9c9", "filename": "tests/ui/strlen_on_c_strings.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a135347f5d638788f4546d684e0d1d64baaeb607/tests%2Fui%2Fstrlen_on_c_strings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a135347f5d638788f4546d684e0d1d64baaeb607/tests%2Fui%2Fstrlen_on_c_strings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstrlen_on_c_strings.stderr?ref=a135347f5d638788f4546d684e0d1d64baaeb607", "patch": "@@ -1,46 +1,46 @@\n error: using `libc::strlen` on a `CString` or `CStr` value\n-  --> $DIR/strlen_on_c_strings.rs:12:15\n+  --> $DIR/strlen_on_c_strings.rs:15:13\n    |\n-LL |     let len = unsafe { libc::strlen(cstring.as_ptr()) };\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `cstring.as_bytes().len()`\n+LL |     let _ = unsafe { libc::strlen(cstring.as_ptr()) };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `cstring.as_bytes().len()`\n    |\n    = note: `-D clippy::strlen-on-c-strings` implied by `-D warnings`\n \n error: using `libc::strlen` on a `CString` or `CStr` value\n-  --> $DIR/strlen_on_c_strings.rs:16:15\n+  --> $DIR/strlen_on_c_strings.rs:19:13\n    |\n-LL |     let len = unsafe { libc::strlen(cstr.as_ptr()) };\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `cstr.to_bytes().len()`\n+LL |     let _ = unsafe { libc::strlen(cstr.as_ptr()) };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `cstr.to_bytes().len()`\n \n error: using `libc::strlen` on a `CString` or `CStr` value\n-  --> $DIR/strlen_on_c_strings.rs:18:15\n+  --> $DIR/strlen_on_c_strings.rs:21:13\n    |\n-LL |     let len = unsafe { strlen(cstr.as_ptr()) };\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `cstr.to_bytes().len()`\n+LL |     let _ = unsafe { strlen(cstr.as_ptr()) };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `cstr.to_bytes().len()`\n \n error: using `libc::strlen` on a `CString` or `CStr` value\n-  --> $DIR/strlen_on_c_strings.rs:21:24\n+  --> $DIR/strlen_on_c_strings.rs:24:22\n    |\n-LL |     let len = unsafe { strlen((*pcstr).as_ptr()) };\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(*pcstr).to_bytes().len()`\n+LL |     let _ = unsafe { strlen((*pcstr).as_ptr()) };\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(*pcstr).to_bytes().len()`\n \n error: using `libc::strlen` on a `CString` or `CStr` value\n-  --> $DIR/strlen_on_c_strings.rs:26:24\n+  --> $DIR/strlen_on_c_strings.rs:29:22\n    |\n-LL |     let len = unsafe { strlen(unsafe_identity(cstr).as_ptr()) };\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unsafe_identity(cstr).to_bytes().len()`\n+LL |     let _ = unsafe { strlen(unsafe_identity(cstr).as_ptr()) };\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unsafe_identity(cstr).to_bytes().len()`\n \n error: using `libc::strlen` on a `CString` or `CStr` value\n-  --> $DIR/strlen_on_c_strings.rs:27:15\n+  --> $DIR/strlen_on_c_strings.rs:30:13\n    |\n-LL |     let len = unsafe { strlen(unsafe { unsafe_identity(cstr) }.as_ptr()) };\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unsafe { unsafe_identity(cstr) }.to_bytes().len()`\n+LL |     let _ = unsafe { strlen(unsafe { unsafe_identity(cstr) }.as_ptr()) };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unsafe { unsafe_identity(cstr) }.to_bytes().len()`\n \n error: using `libc::strlen` on a `CString` or `CStr` value\n-  --> $DIR/strlen_on_c_strings.rs:30:24\n+  --> $DIR/strlen_on_c_strings.rs:33:22\n    |\n-LL |     let len = unsafe { strlen(f(cstr).as_ptr()) };\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `f(cstr).to_bytes().len()`\n+LL |     let _ = unsafe { strlen(f(cstr).as_ptr()) };\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `f(cstr).to_bytes().len()`\n \n error: aborting due to 7 previous errors\n "}]}