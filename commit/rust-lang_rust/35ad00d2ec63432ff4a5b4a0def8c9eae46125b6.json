{"sha": "35ad00d2ec63432ff4a5b4a0def8c9eae46125b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YWQwMGQyZWM2MzQzMmZmNGE1YjRhMGRlZjhjOWVhZTQ2MTI1YjY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-17T18:00:02Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-28T05:45:44Z"}, "message": "alloc: Make deriving more friendly with Arc\n\nThis adds impls of Eq/Ord/PartialEq/PartialOrd/Show/Default to Arc<T>, and it\nalso removes the `Send + Sync` bound on the `Clone` impl of Arc to make it more\nderiving-friendly. The `Send + Sync` requirement is still enforce on\nconstruction, of course!", "tree": {"sha": "0b048eedac6c2ec6519b7ca20582ea9ce6adc683", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b048eedac6c2ec6519b7ca20582ea9ce6adc683"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35ad00d2ec63432ff4a5b4a0def8c9eae46125b6", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35ad00d2ec63432ff4a5b4a0def8c9eae46125b6", "html_url": "https://github.com/rust-lang/rust/commit/35ad00d2ec63432ff4a5b4a0def8c9eae46125b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35ad00d2ec63432ff4a5b4a0def8c9eae46125b6/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "823f8054532ac87af6d6e486b3167d9367f239f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/823f8054532ac87af6d6e486b3167d9367f239f0", "html_url": "https://github.com/rust-lang/rust/commit/823f8054532ac87af6d6e486b3167d9367f239f0"}], "stats": {"total": 74, "additions": 54, "deletions": 20}, "files": [{"sha": "cc6f2d76eaf2fa35e9796da74013b06fd5e59d07", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 53, "deletions": 19, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/35ad00d2ec63432ff4a5b4a0def8c9eae46125b6/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ad00d2ec63432ff4a5b4a0def8c9eae46125b6/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=35ad00d2ec63432ff4a5b4a0def8c9eae46125b6", "patch": "@@ -16,13 +16,15 @@\n use core::atomic;\n use core::clone::Clone;\n use core::fmt::{mod, Show};\n+use core::cmp::{Eq, Ord, PartialEq, PartialOrd, Ordering};\n+use core::default::Default;\n use core::kinds::{Sync, Send};\n use core::mem::{min_align_of, size_of, drop};\n use core::mem;\n use core::ops::{Drop, Deref};\n use core::option::{Some, None, Option};\n-use core::ptr;\n use core::ptr::RawPtr;\n+use core::ptr;\n use heap::deallocate;\n \n /// An atomically reference counted wrapper for shared state.\n@@ -92,16 +94,6 @@ impl<T: Sync + Send> Arc<T> {\n         Arc { _ptr: unsafe { mem::transmute(x) } }\n     }\n \n-    #[inline]\n-    fn inner(&self) -> &ArcInner<T> {\n-        // This unsafety is ok because while this arc is alive we're guaranteed\n-        // that the inner pointer is valid. Furthermore, we know that the\n-        // `ArcInner` structure itself is `Sync` because the inner data is\n-        // `Sync` as well, so we're ok loaning out an immutable pointer to\n-        // these contents.\n-        unsafe { &*self._ptr }\n-    }\n-\n     /// Downgrades a strong pointer to a weak pointer.\n     ///\n     /// Weak pointers will not keep the data alive. Once all strong references\n@@ -115,8 +107,20 @@ impl<T: Sync + Send> Arc<T> {\n     }\n }\n \n+impl<T> Arc<T> {\n+    #[inline]\n+    fn inner(&self) -> &ArcInner<T> {\n+        // This unsafety is ok because while this arc is alive we're guaranteed\n+        // that the inner pointer is valid. Furthermore, we know that the\n+        // `ArcInner` structure itself is `Sync` because the inner data is\n+        // `Sync` as well, so we're ok loaning out an immutable pointer to\n+        // these contents.\n+        unsafe { &*self._ptr }\n+    }\n+}\n+\n #[unstable = \"waiting on stability of Clone\"]\n-impl<T: Sync + Send> Clone for Arc<T> {\n+impl<T> Clone for Arc<T> {\n     /// Duplicate an atomically reference counted wrapper.\n     ///\n     /// The resulting two `Arc` objects will point to the same underlying data\n@@ -141,19 +145,13 @@ impl<T: Sync + Send> Clone for Arc<T> {\n }\n \n #[experimental = \"Deref is experimental.\"]\n-impl<T: Send + Sync> Deref<T> for Arc<T> {\n+impl<T> Deref<T> for Arc<T> {\n     #[inline]\n     fn deref(&self) -> &T {\n         &self.inner().data\n     }\n }\n \n-impl<T: Send + Sync + Show> Show for Arc<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        (**self).fmt(f)\n-    }\n-}\n-\n impl<T: Send + Sync + Clone> Arc<T> {\n     /// Acquires a mutable pointer to the inner contents by guaranteeing that\n     /// the reference count is one (no sharing is possible).\n@@ -279,6 +277,38 @@ impl<T: Sync + Send> Drop for Weak<T> {\n     }\n }\n \n+#[unstable = \"waiting on PartialEq\"]\n+impl<T: PartialEq> PartialEq for Arc<T> {\n+    fn eq(&self, other: &Arc<T>) -> bool { *(*self) == *(*other) }\n+    fn ne(&self, other: &Arc<T>) -> bool { *(*self) != *(*other) }\n+}\n+#[unstable = \"waiting on PartialOrd\"]\n+impl<T: PartialOrd> PartialOrd for Arc<T> {\n+    fn partial_cmp(&self, other: &Arc<T>) -> Option<Ordering> {\n+        (**self).partial_cmp(&**other)\n+    }\n+    fn lt(&self, other: &Arc<T>) -> bool { *(*self) < *(*other) }\n+    fn le(&self, other: &Arc<T>) -> bool { *(*self) <= *(*other) }\n+    fn ge(&self, other: &Arc<T>) -> bool { *(*self) >= *(*other) }\n+    fn gt(&self, other: &Arc<T>) -> bool { *(*self) > *(*other) }\n+}\n+#[unstable = \"waiting on Ord\"]\n+impl<T: Ord> Ord for Arc<T> {\n+    fn cmp(&self, other: &Arc<T>) -> Ordering { (**self).cmp(&**other) }\n+}\n+#[unstable = \"waiting on Eq\"]\n+impl<T: Eq> Eq for Arc<T> {}\n+\n+impl<T: fmt::Show> fmt::Show for Arc<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        (**self).fmt(f)\n+    }\n+}\n+\n+impl<T: Default + Sync + Send> Default for Arc<T> {\n+    fn default() -> Arc<T> { Arc::new(Default::default()) }\n+}\n+\n #[cfg(test)]\n #[allow(experimental)]\n mod tests {\n@@ -440,4 +470,8 @@ mod tests {\n         let a = Arc::new(5u32);\n         assert!(format!(\"{}\", a).as_slice() == \"5\")\n     }\n+\n+    // Make sure deriving works with Arc<T>\n+    #[deriving(Eq, Ord, PartialEq, PartialOrd, Clone, Show, Default)]\n+    struct Foo { inner: Arc<int> }\n }"}, {"sha": "1cd1738e36972c75a6809a7f1d6e8bab344945a1", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ad00d2ec63432ff4a5b4a0def8c9eae46125b6/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ad00d2ec63432ff4a5b4a0def8c9eae46125b6/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=35ad00d2ec63432ff4a5b4a0def8c9eae46125b6", "patch": "@@ -557,7 +557,7 @@ impl<E, D: Decoder<E>, T: Decodable<D, E>> Decodable<D, E> for RefCell<T> {\n     }\n }\n \n-impl<E, S:Encoder<E>, T:Encodable<S, E>+Send+Sync> Encodable<S, E> for Arc<T> {\n+impl<E, S:Encoder<E>, T:Encodable<S, E>> Encodable<S, E> for Arc<T> {\n     fn encode(&self, s: &mut S) -> Result<(), E> {\n         (**self).encode(s)\n     }"}]}