{"sha": "65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1Yzc3YmMwOWFiMzhiM2Q5Mzc3MTY4ZDY3M2VkN2IwYTJjMWUwYzM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-08T15:50:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-08T15:50:41Z"}, "message": "Rollup merge of #66188 - Centril:fnsig, r=davidtwco\n\n`MethodSig` -> `FnSig` & Use it in `ItemKind::Fn`\n\nIn both AST & HIR, rename `MethodSig` to `FnSig` and then proceed to use it in `ItemKind::Fn` so that the overall structure is more regular.\n\nr? @davidtwco", "tree": {"sha": "32241bdad56a558bbfa93093ba4cc65797df3498", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32241bdad56a558bbfa93093ba4cc65797df3498"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdxY7RCRBK7hj4Ov3rIwAAdHIIAFA5S6yJR8oJ1Qhv44n10PVW\nV3JTlZLg61JWM6JE5wxmvfHhCTAG4J2eWH5phYnmKgbKWzXXHzU3vwx2MROzETtA\nMC8AmoA7kcqUhIDZVf0gi8FnAE31o4VGRgVU6b4fZW1zRzRhxA2jUIQ/IydI6nbb\nVd1ZXwZ2bOlfzC8fMd//bu7XKMFLFluRXG87YWoElkYklcc7vWBha6hKMae0rUx3\n2Ut/7KZj24OJ2SI04zEKdqa4PDT9DgaMe2AzaYqvydMqm99IXKkH2QyCpPefc6zu\n52SaFd/TTgKswKStDokT8kv+0gMTa4Q8y4pw7NpVQejbLJ8g4tZmKhAhR4exQuM=\n=7Axf\n-----END PGP SIGNATURE-----\n", "payload": "tree 32241bdad56a558bbfa93093ba4cc65797df3498\nparent 76db11c1651dd4826532693fcb5469a30e5d61e6\nparent b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1573228241 +0100\ncommitter GitHub <noreply@github.com> 1573228241 +0100\n\nRollup merge of #66188 - Centril:fnsig, r=davidtwco\n\n`MethodSig` -> `FnSig` & Use it in `ItemKind::Fn`\n\nIn both AST & HIR, rename `MethodSig` to `FnSig` and then proceed to use it in `ItemKind::Fn` so that the overall structure is more regular.\n\nr? @davidtwco\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "html_url": "https://github.com/rust-lang/rust/commit/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76db11c1651dd4826532693fcb5469a30e5d61e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/76db11c1651dd4826532693fcb5469a30e5d61e6", "html_url": "https://github.com/rust-lang/rust/commit/76db11c1651dd4826532693fcb5469a30e5d61e6"}, {"sha": "b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52", "html_url": "https://github.com/rust-lang/rust/commit/b4c6abcf9e6c1d2710e7ad6a9ce44b3ca6b10d52"}], "stats": {"total": 349, "additions": 167, "deletions": 182}, "files": [{"sha": "29e3f7132766ee27c10f97e21704f43762a31476", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -45,7 +45,7 @@ pub enum FnKind<'a> {\n     ItemFn(Ident, &'a Generics, FnHeader, &'a Visibility, &'a [Attribute]),\n \n     /// `fn foo(&self)`\n-    Method(Ident, &'a MethodSig, Option<&'a Visibility>, &'a [Attribute]),\n+    Method(Ident, &'a FnSig, Option<&'a Visibility>, &'a [Attribute]),\n \n     /// `|x, y| {}`\n     Closure(&'a [Attribute]),\n@@ -481,13 +481,13 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             visitor.visit_ty(typ);\n             visitor.visit_nested_body(body);\n         }\n-        ItemKind::Fn(ref declaration, header, ref generics, body_id) => {\n+        ItemKind::Fn(ref sig, ref generics, body_id) => {\n             visitor.visit_fn(FnKind::ItemFn(item.ident,\n                                             generics,\n-                                            header,\n+                                            sig.header,\n                                             &item.vis,\n                                             &item.attrs),\n-                             declaration,\n+                             &sig.decl,\n                              body_id,\n                              item.span,\n                              item.hir_id)"}, {"sha": "7aa1aa8bb514a82f6fe6cba02772b47384fcfd81", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -306,7 +306,7 @@ impl LoweringContext<'_> {\n                     self.lower_const_body(e)\n                 )\n             }\n-            ItemKind::Fn(ref decl, header, ref generics, ref body) => {\n+            ItemKind::Fn(FnSig { ref decl, header }, ref generics, ref body) => {\n                 let fn_def_id = self.resolver.definitions().local_def_id(id);\n                 self.with_new_scopes(|this| {\n                     this.current_item = Some(ident.span);\n@@ -317,7 +317,7 @@ impl LoweringContext<'_> {\n                     // declaration (decl), not the return types.\n                     let body_id = this.lower_maybe_async_body(&decl, header.asyncness.node, body);\n \n-                    let (generics, fn_decl) = this.add_in_band_defs(\n+                    let (generics, decl) = this.add_in_band_defs(\n                         generics,\n                         fn_def_id,\n                         AnonymousLifetimeMode::PassThrough,\n@@ -328,13 +328,8 @@ impl LoweringContext<'_> {\n                             header.asyncness.node.opt_return_id()\n                         ),\n                     );\n-\n-                    hir::ItemKind::Fn(\n-                        fn_decl,\n-                        this.lower_fn_header(header),\n-                        generics,\n-                        body_id,\n-                    )\n+                    let sig = hir::FnSig { decl, header: this.lower_fn_header(header) };\n+                    hir::ItemKind::Fn(sig, generics, body_id)\n                 })\n             }\n             ItemKind::Mod(ref m) => hir::ItemKind::Mod(self.lower_mod(m)),\n@@ -1260,11 +1255,11 @@ impl LoweringContext<'_> {\n     fn lower_method_sig(\n         &mut self,\n         generics: &Generics,\n-        sig: &MethodSig,\n+        sig: &FnSig,\n         fn_def_id: DefId,\n         impl_trait_return_allow: bool,\n         is_async: Option<NodeId>,\n-    ) -> (hir::Generics, hir::MethodSig) {\n+    ) -> (hir::Generics, hir::FnSig) {\n         let header = self.lower_fn_header(sig.header);\n         let (generics, decl) = self.add_in_band_defs(\n             generics,\n@@ -1277,7 +1272,7 @@ impl LoweringContext<'_> {\n                 is_async,\n             ),\n         );\n-        (generics, hir::MethodSig { header, decl })\n+        (generics, hir::FnSig { header, decl })\n     }\n \n     fn lower_is_auto(&mut self, a: IsAuto) -> hir::IsAuto {"}, {"sha": "f25f3b5741a0ef2984e1c9287e96722f413da9b5", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -158,25 +158,25 @@ impl<'a> FnLikeNode<'a> {\n \n     pub fn body(self) -> ast::BodyId {\n         self.handle(|i: ItemFnParts<'a>| i.body,\n-                    |_, _, _: &'a ast::MethodSig, _, body: ast::BodyId, _, _| body,\n+                    |_, _, _: &'a ast::FnSig, _, body: ast::BodyId, _, _| body,\n                     |c: ClosureParts<'a>| c.body)\n     }\n \n     pub fn decl(self) -> &'a FnDecl {\n         self.handle(|i: ItemFnParts<'a>| &*i.decl,\n-                    |_, _, sig: &'a ast::MethodSig, _, _, _, _| &sig.decl,\n+                    |_, _, sig: &'a ast::FnSig, _, _, _, _| &sig.decl,\n                     |c: ClosureParts<'a>| c.decl)\n     }\n \n     pub fn span(self) -> Span {\n         self.handle(|i: ItemFnParts<'_>| i.span,\n-                    |_, _, _: &'a ast::MethodSig, _, _, span, _| span,\n+                    |_, _, _: &'a ast::FnSig, _, _, span, _| span,\n                     |c: ClosureParts<'_>| c.span)\n     }\n \n     pub fn id(self) -> ast::HirId {\n         self.handle(|i: ItemFnParts<'_>| i.id,\n-                    |id, _, _: &'a ast::MethodSig, _, _, _, _| id,\n+                    |id, _, _: &'a ast::FnSig, _, _, _, _| id,\n                     |c: ClosureParts<'_>| c.id)\n     }\n \n@@ -199,7 +199,7 @@ impl<'a> FnLikeNode<'a> {\n         let closure = |c: ClosureParts<'a>| {\n             FnKind::Closure(c.attrs)\n         };\n-        let method = |_, ident: Ident, sig: &'a ast::MethodSig, vis, _, _, attrs| {\n+        let method = |_, ident: Ident, sig: &'a ast::FnSig, vis, _, _, attrs| {\n             FnKind::Method(ident, sig, vis, attrs)\n         };\n         self.handle(item, method, closure)\n@@ -209,7 +209,7 @@ impl<'a> FnLikeNode<'a> {\n         I: FnOnce(ItemFnParts<'a>) -> A,\n         M: FnOnce(ast::HirId,\n                   Ident,\n-                  &'a ast::MethodSig,\n+                  &'a ast::FnSig,\n                   Option<&'a ast::Visibility>,\n                   ast::BodyId,\n                   Span,\n@@ -219,16 +219,16 @@ impl<'a> FnLikeNode<'a> {\n     {\n         match self.node {\n             map::Node::Item(i) => match i.kind {\n-                ast::ItemKind::Fn(ref decl, header, ref generics, block) =>\n+                ast::ItemKind::Fn(ref sig, ref generics, block) =>\n                     item_fn(ItemFnParts {\n                         id: i.hir_id,\n                         ident: i.ident,\n-                        decl: &decl,\n+                        decl: &sig.decl,\n                         body: block,\n                         vis: &i.vis,\n                         span: i.span,\n                         attrs: &i.attrs,\n-                        header,\n+                        header: sig.header,\n                         generics,\n                     }),\n                 _ => bug!(\"item FnLikeNode that is not fn-like\"),"}, {"sha": "d858e00a2e9cdd7c204789326fbb3644d535b61a", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -100,7 +100,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n         // Pick the def data. This need not be unique, but the more\n         // information we encapsulate into, the better\n-        let def_data = match i.kind {\n+        let def_data = match &i.kind {\n             ItemKind::Impl(..) => DefPathData::Impl,\n             ItemKind::Mod(..) if i.ident.name == kw::Invalid => {\n                 return visit::walk_item(self, i);\n@@ -109,19 +109,14 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) |\n             ItemKind::OpaqueTy(..) | ItemKind::ExternCrate(..) | ItemKind::ForeignMod(..) |\n             ItemKind::TyAlias(..) => DefPathData::TypeNs(i.ident.name),\n-            ItemKind::Fn(\n-                ref decl,\n-                ref header,\n-                ref generics,\n-                ref body,\n-            ) if header.asyncness.node.is_async() => {\n+            ItemKind::Fn(sig, generics, body) if sig.header.asyncness.node.is_async() => {\n                 return self.visit_async_fn(\n                     i.id,\n                     i.ident.name,\n                     i.span,\n-                    header,\n+                    &sig.header,\n                     generics,\n-                    decl,\n+                    &sig.decl,\n                     body,\n                 )\n             }\n@@ -228,7 +223,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n     fn visit_impl_item(&mut self, ii: &'a ImplItem) {\n         let def_data = match ii.kind {\n-            ImplItemKind::Method(MethodSig {\n+            ImplItemKind::Method(FnSig {\n                 ref header,\n                 ref decl,\n             }, ref body) if header.asyncness.node.is_async() => {"}, {"sha": "d7b1676c1d4d397ac3ad1e72b7de81031292eba8", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -49,21 +49,21 @@ impl<'hir> Entry<'hir> {\n         match self.node {\n             Node::Item(ref item) => {\n                 match item.kind {\n-                    ItemKind::Fn(ref fn_decl, _, _, _) => Some(fn_decl),\n+                    ItemKind::Fn(ref sig, _, _) => Some(&sig.decl),\n                     _ => None,\n                 }\n             }\n \n             Node::TraitItem(ref item) => {\n                 match item.kind {\n-                    TraitItemKind::Method(ref method_sig, _) => Some(&method_sig.decl),\n+                    TraitItemKind::Method(ref sig, _) => Some(&sig.decl),\n                     _ => None\n                 }\n             }\n \n             Node::ImplItem(ref item) => {\n                 match item.kind {\n-                    ImplItemKind::Method(ref method_sig, _) => Some(&method_sig.decl),\n+                    ImplItemKind::Method(ref sig, _) => Some(&sig.decl),\n                     _ => None,\n                 }\n             }\n@@ -85,7 +85,7 @@ impl<'hir> Entry<'hir> {\n                 match item.kind {\n                     ItemKind::Const(_, body) |\n                     ItemKind::Static(.., body) |\n-                    ItemKind::Fn(_, _, _, body) => Some(body),\n+                    ItemKind::Fn(.., body) => Some(body),\n                     _ => None,\n                 }\n             }\n@@ -605,7 +605,7 @@ impl<'hir> Map<'hir> {\n                 Node::TraitItem(ref trait_item) => Some(&trait_item.generics),\n                 Node::Item(ref item) => {\n                     match item.kind {\n-                        ItemKind::Fn(_, _, ref generics, _) |\n+                        ItemKind::Fn(_, ref generics, _) |\n                         ItemKind::TyAlias(_, ref generics) |\n                         ItemKind::Enum(_, ref generics) |\n                         ItemKind::Struct(_, ref generics) |\n@@ -702,9 +702,9 @@ impl<'hir> Map<'hir> {\n                 ..\n             }) => true,\n             Node::Item(&Item {\n-                kind: ItemKind::Fn(_, header, ..),\n+                kind: ItemKind::Fn(ref sig, ..),\n                 ..\n-            }) => header.constness == Constness::Const,\n+            }) => sig.header.constness == Constness::Const,\n             _ => false,\n         }\n     }"}, {"sha": "83f68e210bd94f1761b6dbb4000c2eb87bbb77b4", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -1876,9 +1876,10 @@ pub struct MutTy {\n     pub mutbl: Mutability,\n }\n \n-/// Represents a method's signature in a trait declaration or implementation.\n+/// Represents a function's signature in a trait declaration,\n+/// trait implementation, or a free function.\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n-pub struct MethodSig {\n+pub struct FnSig {\n     pub header: FnHeader,\n     pub decl: P<FnDecl>,\n }\n@@ -1921,7 +1922,7 @@ pub enum TraitItemKind {\n     /// An associated constant with an optional value (otherwise `impl`s must contain a value).\n     Const(P<Ty>, Option<BodyId>),\n     /// A method with an optional body.\n-    Method(MethodSig, TraitMethod),\n+    Method(FnSig, TraitMethod),\n     /// An associated type with (possibly empty) bounds and optional concrete\n     /// type.\n     Type(GenericBounds, Option<P<Ty>>),\n@@ -1955,7 +1956,7 @@ pub enum ImplItemKind {\n     /// of the expression.\n     Const(P<Ty>, BodyId),\n     /// A method implementation with the given signature and body.\n-    Method(MethodSig, BodyId),\n+    Method(FnSig, BodyId),\n     /// An associated type.\n     TyAlias(P<Ty>),\n     /// An associated `type = impl Trait`.\n@@ -2534,7 +2535,7 @@ pub enum ItemKind {\n     /// A `const` item.\n     Const(P<Ty>, BodyId),\n     /// A function declaration.\n-    Fn(P<FnDecl>, FnHeader, Generics, BodyId),\n+    Fn(FnSig, Generics, BodyId),\n     /// A module.\n     Mod(Mod),\n     /// An external module, e.g. `extern { .. }`.\n@@ -2599,7 +2600,7 @@ impl ItemKind {\n \n     pub fn generics(&self) -> Option<&Generics> {\n         Some(match *self {\n-            ItemKind::Fn(_, _, ref generics, _) |\n+            ItemKind::Fn(_, ref generics, _) |\n             ItemKind::TyAlias(_, ref generics) |\n             ItemKind::OpaqueTy(OpaqueTy { ref generics, impl_trait_fn: None, .. }) |\n             ItemKind::Enum(_, ref generics) |"}, {"sha": "d5fdde8732929537347a5aafd48ad46258276633", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -533,10 +533,10 @@ impl<'a> State<'a> {\n                 self.s.word(\";\");\n                 self.end(); // end the outer cbox\n             }\n-            hir::ItemKind::Fn(ref decl, header, ref param_names, body) => {\n+            hir::ItemKind::Fn(ref sig, ref param_names, body) => {\n                 self.head(\"\");\n-                self.print_fn(decl,\n-                              header,\n+                self.print_fn(&sig.decl,\n+                              sig.header,\n                               Some(item.ident.name),\n                               param_names,\n                               &item.vis,\n@@ -835,7 +835,7 @@ impl<'a> State<'a> {\n     }\n     pub fn print_method_sig(&mut self,\n                             ident: ast::Ident,\n-                            m: &hir::MethodSig,\n+                            m: &hir::FnSig,\n                             generics: &hir::Generics,\n                             vis: &hir::Visibility,\n                             arg_names: &[ast::Ident],"}, {"sha": "db5557204e4da2945d6b9ddfa9590aa750a0aa61", "filename": "src/librustc/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -31,10 +31,10 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             if let Some(hir_id) = self.tcx().hir().as_local_hir_id(def_id) {\n                 let fndecl = match self.tcx().hir().get(hir_id) {\n                     Node::Item(&hir::Item {\n-                        kind: hir::ItemKind::Fn(ref fndecl, ..),\n+                        kind: hir::ItemKind::Fn(ref m, ..),\n                         ..\n-                    }) => &fndecl,\n-                    Node::TraitItem(&hir::TraitItem {\n+                    })\n+                    | Node::TraitItem(&hir::TraitItem {\n                         kind: hir::TraitItemKind::Method(ref m, ..),\n                         ..\n                     })"}, {"sha": "f77f5a72e60ce88cd0010206598fa34e0d8ed4a3", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -33,7 +33,7 @@ fn item_might_be_inlined(tcx: TyCtxt<'tcx>, item: &hir::Item, attrs: CodegenFnAt\n     }\n \n     match item.kind {\n-        hir::ItemKind::Fn(_, header, ..) if header.is_const() => {\n+        hir::ItemKind::Fn(ref sig, ..) if sig.header.is_const() => {\n             return true;\n         }\n         hir::ItemKind::Impl(..) |\n@@ -225,8 +225,8 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             // If we are building an executable, only explicitly extern\n             // types need to be exported.\n             if let Node::Item(item) = *node {\n-                let reachable = if let hir::ItemKind::Fn(_, header, ..) = item.kind {\n-                    header.abi != Abi::Rust\n+                let reachable = if let hir::ItemKind::Fn(ref sig, ..) = item.kind {\n+                    sig.header.abi != Abi::Rust\n                 } else {\n                     false\n                 };"}, {"sha": "f37d9b2827be03c26cc4b2b1cca2c857d1f7624b", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -460,8 +460,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         match item.kind {\n-            hir::ItemKind::Fn(ref decl, _, ref generics, _) => {\n-                self.visit_early_late(None, decl, generics, |this| {\n+            hir::ItemKind::Fn(ref sig, ref generics, _) => {\n+                self.visit_early_late(None, &sig.decl, generics, |this| {\n                     intravisit::walk_item(this, item);\n                 });\n             }\n@@ -1524,8 +1524,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             {\n                 match parent {\n                     Node::Item(item) => {\n-                        if let hir::ItemKind::Fn(decl, _, _, _) = &item.kind {\n-                            find_arg_use_span(&decl.inputs);\n+                        if let hir::ItemKind::Fn(sig, _, _) = &item.kind {\n+                            find_arg_use_span(&sig.decl.inputs);\n                         }\n                     },\n                     Node::ImplItem(impl_item) => {"}, {"sha": "54c01034221734ff456b29ea73ccbab837117091", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -383,9 +383,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let hir = &self.tcx.hir();\n         let node = hir.find(hir_id)?;\n         if let hir::Node::Item(\n-            hir::Item{kind: hir::ItemKind::Fn(_ ,fn_header ,_ , body_id), .. }) = &node {\n+            hir::Item{kind: hir::ItemKind::Fn(sig, _, body_id), .. }) = &node {\n             self.describe_generator(*body_id).or_else(||\n-                Some(if let hir::FnHeader{ asyncness: hir::IsAsync::Async, .. } = fn_header {\n+                Some(if let hir::FnHeader{ asyncness: hir::IsAsync::Async, .. } = sig.header {\n                     \"an async function\"\n                 } else {\n                     \"a function\"\n@@ -1081,7 +1081,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n \n                 hir::Node::Item(hir::Item {\n-                    kind: hir::ItemKind::Fn(_, _, generics, _), ..\n+                    kind: hir::ItemKind::Fn(_, generics, _), ..\n                 }) |\n                 hir::Node::TraitItem(hir::TraitItem {\n                     generics,\n@@ -1112,7 +1112,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     kind: hir::ItemKind::Impl(_, _, _, generics, ..), span, ..\n                 }) |\n                 hir::Node::Item(hir::Item {\n-                    kind: hir::ItemKind::Fn(_, _, generics, _), span, ..\n+                    kind: hir::ItemKind::Fn(_, generics, _), span, ..\n                 }) |\n                 hir::Node::Item(hir::Item {\n                     kind: hir::ItemKind::TyAlias(_, generics), span, ..\n@@ -1436,12 +1436,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let parent_node = hir.get_parent_node(obligation.cause.body_id);\n         let node = hir.find(parent_node);\n         if let Some(hir::Node::Item(hir::Item {\n-            kind: hir::ItemKind::Fn(decl, _, _, body_id),\n+            kind: hir::ItemKind::Fn(sig, _, body_id),\n             ..\n         })) = node {\n             let body = hir.body(*body_id);\n             if let hir::ExprKind::Block(blk, _) = &body.value.kind {\n-                if decl.output.span().overlaps(span) && blk.expr.is_none() &&\n+                if sig.decl.output.span().overlaps(span) && blk.expr.is_none() &&\n                     \"()\" == &trait_ref.self_ty().to_string()\n                 {\n                     // FIXME(estebank): When encountering a method with a trait\n@@ -1493,20 +1493,20 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n             Node::Item(&hir::Item {\n                 span,\n-                kind: hir::ItemKind::Fn(ref decl, ..),\n+                kind: hir::ItemKind::Fn(ref sig, ..),\n                 ..\n             }) |\n             Node::ImplItem(&hir::ImplItem {\n                 span,\n-                kind: hir::ImplItemKind::Method(hir::MethodSig { ref decl, .. }, _),\n+                kind: hir::ImplItemKind::Method(ref sig, _),\n                 ..\n             }) |\n             Node::TraitItem(&hir::TraitItem {\n                 span,\n-                kind: hir::TraitItemKind::Method(hir::MethodSig { ref decl, .. }, _),\n+                kind: hir::TraitItemKind::Method(ref sig, _),\n                 ..\n             }) => {\n-                (self.tcx.sess.source_map().def_span(span), decl.inputs.iter()\n+                (self.tcx.sess.source_map().def_span(span), sig.decl.inputs.iter()\n                         .map(|arg| match arg.clone().kind {\n                     hir::TyKind::Tup(ref tys) => ArgKind::Tuple(\n                         Some(arg.span),\n@@ -2040,11 +2040,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             .and_then(|parent_did| self.tcx.hir().get_if_local(parent_did));\n         debug!(\"note_obligation_cause_for_async_await: parent_node={:?}\", parent_node);\n         if let Some(hir::Node::Item(hir::Item {\n-            kind: hir::ItemKind::Fn(_, header, _, _),\n+            kind: hir::ItemKind::Fn(sig, _, _),\n             ..\n         })) = parent_node {\n-            debug!(\"note_obligation_cause_for_async_await: header={:?}\", header);\n-            if header.asyncness != hir::IsAsync::Async {\n+            debug!(\"note_obligation_cause_for_async_await: header={:?}\", sig.header);\n+            if sig.header.asyncness != hir::IsAsync::Async {\n                 return false;\n             }\n         }"}, {"sha": "a74ea4bca39eb9d0a4103fdbd5a03e776f7283d3", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -786,14 +786,17 @@ impl<'a> ReplaceBodyWithLoop<'a> {\n             false\n         }\n     }\n+\n+    fn is_sig_const(sig: &ast::FnSig) -> bool {\n+        sig.header.constness.node == ast::Constness::Const || Self::should_ignore_fn(&sig.decl)\n+    }\n }\n \n impl<'a> MutVisitor for ReplaceBodyWithLoop<'a> {\n     fn visit_item_kind(&mut self, i: &mut ast::ItemKind) {\n         let is_const = match i {\n             ast::ItemKind::Static(..) | ast::ItemKind::Const(..) => true,\n-            ast::ItemKind::Fn(ref decl, ref header, _, _) =>\n-                header.constness.node == ast::Constness::Const || Self::should_ignore_fn(decl),\n+            ast::ItemKind::Fn(ref sig, _, _) => Self::is_sig_const(sig),\n             _ => false,\n         };\n         self.run(is_const, |s| noop_visit_item_kind(i, s))\n@@ -802,8 +805,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a> {\n     fn flat_map_trait_item(&mut self, i: ast::TraitItem) -> SmallVec<[ast::TraitItem; 1]> {\n         let is_const = match i.kind {\n             ast::TraitItemKind::Const(..) => true,\n-            ast::TraitItemKind::Method(ast::MethodSig { ref decl, ref header, .. }, _) =>\n-                header.constness.node == ast::Constness::Const || Self::should_ignore_fn(decl),\n+            ast::TraitItemKind::Method(ref sig, _) => Self::is_sig_const(sig),\n             _ => false,\n         };\n         self.run(is_const, |s| noop_flat_map_trait_item(i, s))\n@@ -812,8 +814,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a> {\n     fn flat_map_impl_item(&mut self, i: ast::ImplItem) -> SmallVec<[ast::ImplItem; 1]> {\n         let is_const = match i.kind {\n             ast::ImplItemKind::Const(..) => true,\n-            ast::ImplItemKind::Method(ast::MethodSig { ref decl, ref header, .. }, _) =>\n-                header.constness.node == ast::Constness::Const || Self::should_ignore_fn(decl),\n+            ast::ImplItemKind::Method(ref sig, _) => Self::is_sig_const(sig),\n             _ => false,\n         };\n         self.run(is_const, |s| noop_flat_map_impl_item(i, s))"}, {"sha": "c6677ea3534d028fd81912986192edb730889efc", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -1095,10 +1095,10 @@ impl EncodeContext<'tcx> {\n                     self.encode_rendered_const_for_body(body_id)\n                 )\n             }\n-            hir::ItemKind::Fn(_, header, .., body) => {\n+            hir::ItemKind::Fn(ref sig, .., body) => {\n                 let data = FnData {\n-                    asyncness: header.asyncness,\n-                    constness: header.constness,\n+                    asyncness: sig.header.asyncness,\n+                    constness: sig.header.constness,\n                     param_names: self.encode_fn_param_names_for_body(body),\n                 };\n \n@@ -1284,14 +1284,14 @@ impl EncodeContext<'tcx> {\n \n         let mir = match item.kind {\n             hir::ItemKind::Static(..) | hir::ItemKind::Const(..) => true,\n-            hir::ItemKind::Fn(_, header, ..) => {\n+            hir::ItemKind::Fn(ref sig, ..) => {\n                 let generics = tcx.generics_of(def_id);\n                 let needs_inline =\n                     (generics.requires_monomorphization(tcx) ||\n                         tcx.codegen_fn_attrs(def_id).requests_inline()) &&\n                         !self.metadata_output_only();\n                 let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;\n-                needs_inline || header.constness == hir::Constness::Const || always_encode_mir\n+                needs_inline || sig.header.constness == hir::Constness::Const || always_encode_mir\n             }\n             _ => false,\n         };"}, {"sha": "e2541eeedbc06a5707ce91fe105febb669091a84", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -30,17 +30,22 @@ pub fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> Body<'_> {\n     // Figure out what primary body this item has.\n     let (body_id, return_ty_span) = match tcx.hir().get(id) {\n         Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(_, decl, body_id, _, _), .. })\n-        | Node::Item(hir::Item { kind: hir::ItemKind::Fn(decl, _, _, body_id), .. })\n+        | Node::Item(\n+            hir::Item {\n+                kind: hir::ItemKind::Fn(hir::FnSig { decl, .. }, _, body_id),\n+                ..\n+            }\n+        )\n         | Node::ImplItem(\n             hir::ImplItem {\n-                kind: hir::ImplItemKind::Method(hir::MethodSig { decl, .. }, body_id),\n+                kind: hir::ImplItemKind::Method(hir::FnSig { decl, .. }, body_id),\n                 ..\n             }\n         )\n         | Node::TraitItem(\n             hir::TraitItem {\n                 kind: hir::TraitItemKind::Method(\n-                    hir::MethodSig { decl, .. },\n+                    hir::FnSig { decl, .. },\n                     hir::TraitMethod::Provided(body_id),\n                 ),\n                 .."}, {"sha": "49cdd9142345dbfe49b8ae17a91ea4e555834814", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -1071,7 +1071,7 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n \n     fn visit_impl_item(&mut self, ii: &'v hir::ImplItem) {\n         match ii.kind {\n-            hir::ImplItemKind::Method(hir::MethodSig { .. }, _) => {\n+            hir::ImplItemKind::Method(hir::FnSig { .. }, _) => {\n                 let def_id = self.tcx.hir().local_def_id(ii.hir_id);\n                 self.push_if_root(def_id);\n             }"}, {"sha": "e29239a4536c27e169a2c497cfda9ebebc0dd76c", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -571,10 +571,10 @@ fn is_enclosed(\n         if used_unsafe.contains(&parent_id) {\n             Some((\"block\".to_string(), parent_id))\n         } else if let Some(Node::Item(&hir::Item {\n-            kind: hir::ItemKind::Fn(_, header, _, _),\n+            kind: hir::ItemKind::Fn(ref sig, _, _),\n             ..\n         })) = tcx.hir().find(parent_id) {\n-            match header.unsafety {\n+            match sig.header.unsafety {\n                 hir::Unsafety::Unsafe => Some((\"fn\".to_string(), parent_id)),\n                 hir::Unsafety::Normal => None,\n             }"}, {"sha": "8cf83d41ac2daf82af167d58fd3786d746554fe7", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -489,12 +489,12 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         .note(\"only trait implementations may be annotated with default\").emit();\n                 }\n             }\n-            ItemKind::Fn(ref decl, ref header, ref generics, _) => {\n-                self.visit_fn_header(header);\n-                self.check_fn_decl(decl);\n+            ItemKind::Fn(ref sig, ref generics, _) => {\n+                self.visit_fn_header(&sig.header);\n+                self.check_fn_decl(&sig.decl);\n                 // We currently do not permit const generics in `const fn`, as\n                 // this is tantamount to allowing compile-time dependent typing.\n-                if header.constness.node == Constness::Const {\n+                if sig.header.constness.node == Constness::Const {\n                     // Look for const generics and error if we find any.\n                     for param in &generics.params {\n                         match param.kind {"}, {"sha": "3340566a8758e81dfcc7c438c4b67da6985cb19a", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -731,7 +731,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n         match item.kind {\n             ItemKind::TyAlias(_, ref generics) |\n             ItemKind::OpaqueTy(_, ref generics) |\n-            ItemKind::Fn(_, _, ref generics, _) => {\n+            ItemKind::Fn(_, ref generics, _) => {\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes),\n                                             |this| visit::walk_item(this, item));\n             }"}, {"sha": "92c391fb4a338ca8189305e3299b1cf4ca99f375", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -272,7 +272,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n \n     fn process_method(\n         &mut self,\n-        sig: &'l ast::MethodSig,\n+        sig: &'l ast::FnSig,\n         body: Option<&'l ast::Block>,\n         id: ast::NodeId,\n         ident: ast::Ident,\n@@ -1334,8 +1334,8 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                     );\n                 }\n             }\n-            Fn(ref decl, ref header, ref ty_params, ref body) => {\n-                self.process_fn(item, &decl, &header, ty_params, &body)\n+            Fn(ref sig, ref ty_params, ref body) => {\n+                self.process_fn(item, &sig.decl, &sig.header, ty_params, &body)\n             }\n             Static(ref typ, _, ref expr) => self.process_static_or_const_item(item, typ, expr),\n             Const(ref typ, ref expr) => self.process_static_or_const_item(item, &typ, &expr),"}, {"sha": "424d57c8fe7fa7175afd200865a2fb86843e6ffa", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -180,7 +180,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n \n     pub fn get_item_data(&self, item: &ast::Item) -> Option<Data> {\n         match item.kind {\n-            ast::ItemKind::Fn(ref decl, .., ref generics, _) => {\n+            ast::ItemKind::Fn(ref sig, .., ref generics, _) => {\n                 let qualname = format!(\"::{}\",\n                     self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id)));\n                 filter!(self.span_utils, item.ident.span);\n@@ -190,7 +190,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                     span: self.span_from_span(item.ident.span),\n                     name: item.ident.to_string(),\n                     qualname,\n-                    value: make_signature(decl, generics),\n+                    value: make_signature(&sig.decl, generics),\n                     parent: None,\n                     children: vec![],\n                     decl_id: None,"}, {"sha": "d1b9b8ff44ddbdaee5c96597734938845c50329e", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -72,7 +72,7 @@ pub fn method_signature(\n     id: NodeId,\n     ident: ast::Ident,\n     generics: &ast::Generics,\n-    m: &ast::MethodSig,\n+    m: &ast::FnSig,\n     scx: &SaveContext<'_, '_>,\n ) -> Option<Signature> {\n     if !scx.config.signatures {\n@@ -376,7 +376,7 @@ impl Sig for ast::Item {\n \n                 Ok(extend_sig(ty, text, defs, vec![]))\n             }\n-            ast::ItemKind::Fn(ref decl, header, ref generics, _) => {\n+            ast::ItemKind::Fn(ast::FnSig { ref decl, header }, ref generics, _) => {\n                 let mut text = String::new();\n                 if header.constness.node == ast::Constness::Const {\n                     text.push_str(\"const \");\n@@ -932,7 +932,7 @@ fn make_method_signature(\n     id: NodeId,\n     ident: ast::Ident,\n     generics: &ast::Generics,\n-    m: &ast::MethodSig,\n+    m: &ast::FnSig,\n     scx: &SaveContext<'_, '_>,\n ) -> Result {\n     // FIXME code dup with function signature"}, {"sha": "39a7996df0cdca2c41ef8bcb82dedf6be6fbc710", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -815,8 +815,8 @@ fn primary_body_of(\n                 hir::ItemKind::Const(ref ty, body) |\n                 hir::ItemKind::Static(ref ty, _, body) =>\n                     Some((body, Some(ty), None, None)),\n-                hir::ItemKind::Fn(ref decl, ref header, .., body) =>\n-                    Some((body, None, Some(header), Some(decl))),\n+                hir::ItemKind::Fn(ref sig, .., body) =>\n+                    Some((body, None, Some(&sig.header), Some(&sig.decl))),\n                 _ =>\n                     None,\n             }\n@@ -1297,7 +1297,7 @@ fn check_fn<'a, 'tcx>(\n                     }\n \n                     if let Node::Item(item) = fcx.tcx.hir().get(fn_id) {\n-                        if let ItemKind::Fn(_, _, ref generics, _) = item.kind {\n+                        if let ItemKind::Fn(_, ref generics, _) = item.kind {\n                             if !generics.params.is_empty() {\n                                 fcx.tcx.sess.span_err(\n                                     span,\n@@ -1345,7 +1345,7 @@ fn check_fn<'a, 'tcx>(\n                     }\n \n                     if let Node::Item(item) = fcx.tcx.hir().get(fn_id) {\n-                        if let ItemKind::Fn(_, _, ref generics, _) = item.kind {\n+                        if let ItemKind::Fn(_, ref generics, _) = item.kind {\n                             if !generics.params.is_empty() {\n                                 fcx.tcx.sess.span_err(\n                                     span,\n@@ -4278,7 +4278,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let node = self.tcx.hir().get(self.tcx.hir().get_parent_item(id));\n         match node {\n             Node::Item(&hir::Item {\n-                kind: hir::ItemKind::Fn(_, _, _, body_id), ..\n+                kind: hir::ItemKind::Fn(_, _, body_id), ..\n             }) |\n             Node::ImplItem(&hir::ImplItem {\n                 kind: hir::ImplItemKind::Method(_, body_id), ..\n@@ -4303,23 +4303,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn get_node_fn_decl(&self, node: Node<'tcx>) -> Option<(&'tcx hir::FnDecl, ast::Ident, bool)> {\n         match node {\n             Node::Item(&hir::Item {\n-                ident, kind: hir::ItemKind::Fn(ref decl, ..), ..\n+                ident, kind: hir::ItemKind::Fn(ref sig, ..), ..\n             }) => {\n                 // This is less than ideal, it will not suggest a return type span on any\n                 // method called `main`, regardless of whether it is actually the entry point,\n                 // but it will still present it as the reason for the expected type.\n-                Some((decl, ident, ident.name != sym::main))\n+                Some((&sig.decl, ident, ident.name != sym::main))\n             }\n             Node::TraitItem(&hir::TraitItem {\n-                ident, kind: hir::TraitItemKind::Method(hir::MethodSig {\n-                    ref decl, ..\n-                }, ..), ..\n-            }) => Some((decl, ident, true)),\n+                ident, kind: hir::TraitItemKind::Method(ref sig, ..), ..\n+            }) => Some((&sig.decl, ident, true)),\n             Node::ImplItem(&hir::ImplItem {\n-                ident, kind: hir::ImplItemKind::Method(hir::MethodSig {\n-                    ref decl, ..\n-                }, ..), ..\n-            }) => Some((decl, ident, false)),\n+                ident, kind: hir::ImplItemKind::Method(ref sig, ..), ..\n+            }) => Some((&sig.decl, ident, false)),\n             _ => None,\n         }\n     }"}, {"sha": "5b25d8f25a9566d7ab5edd4e0a07867e8116b5cc", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -190,7 +190,7 @@ fn check_associated_item(\n     tcx: TyCtxt<'_>,\n     item_id: hir::HirId,\n     span: Span,\n-    sig_if_method: Option<&hir::MethodSig>,\n+    sig_if_method: Option<&hir::FnSig>,\n ) {\n     debug!(\"check_associated_item: {:?}\", item_id);\n \n@@ -783,7 +783,7 @@ const HELP_FOR_SELF_TYPE: &str =\n \n fn check_method_receiver<'fcx, 'tcx>(\n     fcx: &FnCtxt<'fcx, 'tcx>,\n-    method_sig: &hir::MethodSig,\n+    fn_sig: &hir::FnSig,\n     method: &ty::AssocItem,\n     self_ty: Ty<'tcx>,\n ) {\n@@ -794,7 +794,7 @@ fn check_method_receiver<'fcx, 'tcx>(\n         return;\n     }\n \n-    let span = method_sig.decl.inputs[0].span;\n+    let span = fn_sig.decl.inputs[0].span;\n \n     let sig = fcx.tcx.fn_sig(method.def_id);\n     let sig = fcx.normalize_associated_types_in(span, &sig);"}, {"sha": "9c1da65c84687de2a571ac5073f429d3cdd33a52", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -885,8 +885,8 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n             _ => None,\n         },\n         Node::Item(item) => match item.kind {\n-            hir::ItemKind::Fn(ref fn_decl, .., ref generics, _) => {\n-                has_late_bound_regions(tcx, generics, fn_decl)\n+            hir::ItemKind::Fn(ref sig, .., ref generics, _) => {\n+                has_late_bound_regions(tcx, generics, &sig.decl)\n             }\n             _ => None,\n         },\n@@ -1779,17 +1779,17 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n \n     match tcx.hir().get(hir_id) {\n         TraitItem(hir::TraitItem {\n-            kind: TraitItemKind::Method(MethodSig { header, decl }, TraitMethod::Provided(_)),\n+            kind: TraitItemKind::Method(sig, TraitMethod::Provided(_)),\n             ..\n         })\n         | ImplItem(hir::ImplItem {\n-            kind: ImplItemKind::Method(MethodSig { header, decl }, _),\n+            kind: ImplItemKind::Method(sig, _),\n             ..\n         })\n         | Item(hir::Item {\n-            kind: ItemKind::Fn(decl, header, _, _),\n+            kind: ItemKind::Fn(sig, _, _),\n             ..\n-        }) => match get_infer_ret_ty(&decl.output) {\n+        }) => match get_infer_ret_ty(&sig.decl.output) {\n             Some(ty) => {\n                 let fn_sig = tcx.typeck_tables_of(def_id).liberated_fn_sigs()[hir_id];\n                 let mut diag = bad_placeholder_type(tcx, ty.span);\n@@ -1805,11 +1805,11 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n                 diag.emit();\n                 ty::Binder::bind(fn_sig)\n             },\n-            None => AstConv::ty_of_fn(&icx, header.unsafety, header.abi, decl)\n+            None => AstConv::ty_of_fn(&icx, sig.header.unsafety, sig.header.abi, &sig.decl)\n         },\n \n         TraitItem(hir::TraitItem {\n-            kind: TraitItemKind::Method(MethodSig { header, decl }, _),\n+            kind: TraitItemKind::Method(FnSig { header, decl }, _),\n             ..\n         }) => {\n             AstConv::ty_of_fn(&icx, header.unsafety, header.abi, decl)"}, {"sha": "6696447ceae575c2389e947b03eba6f4fb3801ee", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -1984,7 +1984,7 @@ pub struct Method {\n     pub ret_types: Vec<Type>,\n }\n \n-impl<'a> Clean<Method> for (&'a hir::MethodSig, &'a hir::Generics, hir::BodyId,\n+impl<'a> Clean<Method> for (&'a hir::FnSig, &'a hir::Generics, hir::BodyId,\n                             Option<hir::Defaultness>) {\n     fn clean(&self, cx: &DocContext<'_>) -> Method {\n         let (generics, decl) = enter_impl_trait(cx, || {"}, {"sha": "aea9b7c38efba1734c8ae23055d112f68c67b92d", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -438,8 +438,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 om.structs.push(self.visit_variant_data(item, ident.name, sd, gen)),\n             hir::ItemKind::Union(ref sd, ref gen) =>\n                 om.unions.push(self.visit_union_data(item, ident.name, sd, gen)),\n-            hir::ItemKind::Fn(ref fd, header, ref gen, body) =>\n-                self.visit_fn(om, item, ident.name, &**fd, header, gen, body),\n+            hir::ItemKind::Fn(ref sig, ref gen, body) =>\n+                self.visit_fn(om, item, ident.name, &sig.decl, sig.header, gen, body),\n             hir::ItemKind::TyAlias(ref ty, ref gen) => {\n                 let t = Typedef {\n                     ty,"}, {"sha": "b57d223899184ddd407b60a4dbf62759482cbcd7", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -1501,10 +1501,10 @@ pub struct MutTy {\n     pub mutbl: Mutability,\n }\n \n-/// Represents a method's signature in a trait declaration,\n-/// or in an implementation.\n+/// Represents a function's signature in a trait declaration,\n+/// trait implementation, or free function.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub struct MethodSig {\n+pub struct FnSig {\n     pub header: FnHeader,\n     pub decl: P<FnDecl>,\n }\n@@ -1528,7 +1528,7 @@ pub struct TraitItem {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum TraitItemKind {\n     Const(P<Ty>, Option<P<Expr>>),\n-    Method(MethodSig, Option<P<Block>>),\n+    Method(FnSig, Option<P<Block>>),\n     Type(GenericBounds, Option<P<Ty>>),\n     Macro(Mac),\n }\n@@ -1552,7 +1552,7 @@ pub struct ImplItem {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum ImplItemKind {\n     Const(P<Ty>, P<Expr>),\n-    Method(MethodSig, P<Block>),\n+    Method(FnSig, P<Block>),\n     TyAlias(P<Ty>),\n     OpaqueTy(GenericBounds),\n     Macro(Mac),\n@@ -2433,7 +2433,7 @@ pub enum ItemKind {\n     /// A function declaration (`fn`).\n     ///\n     /// E.g., `fn foo(bar: usize) -> usize { .. }`.\n-    Fn(P<FnDecl>, FnHeader, Generics, P<Block>),\n+    Fn(FnSig, Generics, P<Block>),\n     /// A module declaration (`mod`).\n     ///\n     /// E.g., `mod foo;` or `mod foo { .. }`."}, {"sha": "7696ea48f9338392f1fc94893fc5c250711fef34", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -357,7 +357,7 @@ pub fn visit_bounds<T: MutVisitor>(bounds: &mut GenericBounds, vis: &mut T) {\n }\n \n // No `noop_` prefix because there isn't a corresponding method in `MutVisitor`.\n-pub fn visit_method_sig<T: MutVisitor>(MethodSig { header, decl }: &mut MethodSig, vis: &mut T) {\n+pub fn visit_fn_sig<T: MutVisitor>(FnSig { header, decl }: &mut FnSig, vis: &mut T) {\n     vis.visit_fn_header(header);\n     vis.visit_fn_decl(decl);\n }\n@@ -878,9 +878,8 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n             vis.visit_ty(ty);\n             vis.visit_expr(expr);\n         }\n-        ItemKind::Fn(decl, header, generics, body) => {\n-            vis.visit_fn_decl(decl);\n-            vis.visit_fn_header(header);\n+        ItemKind::Fn(sig, generics, body) => {\n+            visit_fn_sig(sig, vis);\n             vis.visit_generics(generics);\n             vis.visit_block(body);\n         }\n@@ -938,7 +937,7 @@ pub fn noop_flat_map_trait_item<T: MutVisitor>(mut item: TraitItem, vis: &mut T)\n             visit_opt(default, |default| vis.visit_expr(default));\n         }\n         TraitItemKind::Method(sig, body) => {\n-            visit_method_sig(sig, vis);\n+            visit_fn_sig(sig, vis);\n             visit_opt(body, |body| vis.visit_block(body));\n         }\n         TraitItemKind::Type(bounds, default) => {\n@@ -970,7 +969,7 @@ pub fn noop_flat_map_impl_item<T: MutVisitor>(mut item: ImplItem, visitor: &mut\n             visitor.visit_expr(expr);\n         }\n         ImplItemKind::Method(sig, body) => {\n-            visit_method_sig(sig, visitor);\n+            visit_fn_sig(sig, visitor);\n             visitor.visit_block(body);\n         }\n         ImplItemKind::TyAlias(ty) => visitor.visit_ty(ty),"}, {"sha": "531ad532a54dc5b4c1924aacb1ce0cd6a3d2efed", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -8,7 +8,7 @@ use crate::ast::{ItemKind, ImplItem, ImplItemKind, TraitItem, TraitItemKind, Use\n use crate::ast::{PathSegment, IsAuto, Constness, IsAsync, Unsafety, Defaultness};\n use crate::ast::{Visibility, VisibilityKind, Mutability, FnHeader, ForeignItem, ForeignItemKind};\n use crate::ast::{Ty, TyKind, Generics, GenericBounds, TraitRef, EnumDef, VariantData, StructField};\n-use crate::ast::{Mac, MacDelimiter, Block, BindingMode, FnDecl, MethodSig, SelfKind, Param};\n+use crate::ast::{Mac, MacDelimiter, Block, BindingMode, FnDecl, FnSig, SelfKind, Param};\n use crate::parse::token;\n use crate::tokenstream::{TokenTree, TokenStream};\n use crate::symbol::{kw, sym};\n@@ -1800,7 +1800,7 @@ impl<'a> Parser<'a> {\n             is_name_required: |_| true,\n         })?;\n         let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n-        let kind = ItemKind::Fn(decl, header, generics, body);\n+        let kind = ItemKind::Fn(FnSig { decl, header }, generics, body);\n         self.mk_item_with_info(attrs, lo, vis, (ident, kind, Some(inner_attrs)))\n     }\n \n@@ -1897,14 +1897,14 @@ impl<'a> Parser<'a> {\n     fn parse_method_sig(\n         &mut self,\n         is_name_required: fn(&token::Token) -> bool,\n-    ) -> PResult<'a, (Ident, MethodSig, Generics)> {\n+    ) -> PResult<'a, (Ident, FnSig, Generics)> {\n         let header = self.parse_fn_front_matter()?;\n         let (ident, decl, generics) = self.parse_fn_sig(ParamCfg {\n             is_self_allowed: true,\n             allow_c_variadic: false,\n             is_name_required,\n         })?;\n-        Ok((ident, MethodSig { header, decl }, generics))\n+        Ok((ident, FnSig { header, decl }, generics))\n     }\n \n     /// Parses all the \"front matter\" for a `fn` declaration, up to"}, {"sha": "2203e8d9d0637a64ae0fcb3a152937b4dc20d45f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -1199,11 +1199,11 @@ impl<'a> State<'a> {\n                 self.s.word(\";\");\n                 self.end(); // end the outer cbox\n             }\n-            ast::ItemKind::Fn(ref decl, header, ref param_names, ref body) => {\n+            ast::ItemKind::Fn(ref sig, ref param_names, ref body) => {\n                 self.head(\"\");\n                 self.print_fn(\n-                    decl,\n-                    header,\n+                    &sig.decl,\n+                    sig.header,\n                     Some(item.ident),\n                     param_names,\n                     &item.vis\n@@ -1541,7 +1541,7 @@ impl<'a> State<'a> {\n     crate fn print_method_sig(&mut self,\n                             ident: ast::Ident,\n                             generics: &ast::Generics,\n-                            m: &ast::MethodSig,\n+                            m: &ast::FnSig,\n                             vis: &ast::Visibility)\n                             {\n         self.print_fn(&m.decl,"}, {"sha": "ea2dc357e6ebf0630284b6c436e0274f67c9a586", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -25,7 +25,7 @@ pub enum FnKind<'a> {\n     ItemFn(Ident, &'a FnHeader, &'a Visibility, &'a Block),\n \n     /// E.g., `fn foo(&self)`.\n-    Method(Ident, &'a MethodSig, Option<&'a Visibility>, &'a Block),\n+    Method(Ident, &'a FnSig, Option<&'a Visibility>, &'a Block),\n \n     /// E.g., `|x, y| body`.\n     Closure(&'a Expr),\n@@ -244,12 +244,11 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             visitor.visit_ty(typ);\n             visitor.visit_expr(expr);\n         }\n-        ItemKind::Fn(ref declaration, ref header, ref generics, ref body) => {\n+        ItemKind::Fn(ref sig, ref generics, ref body) => {\n             visitor.visit_generics(generics);\n-            visitor.visit_fn_header(header);\n-            visitor.visit_fn(FnKind::ItemFn(item.ident, header,\n-                                            &item.vis, body),\n-                             declaration,\n+            visitor.visit_fn_header(&sig.header);\n+            visitor.visit_fn(FnKind::ItemFn(item.ident, &sig.header, &item.vis, body),\n+                             &sig.decl,\n                              item.span,\n                              item.id)\n         }"}, {"sha": "b24306def7482941591fbdbd6692aeb15dc35c11", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -950,7 +950,7 @@ impl<'a> MethodDef<'a> {\n \n         let trait_lo_sp = trait_.span.shrink_to_lo();\n \n-        let sig = ast::MethodSig {\n+        let sig = ast::FnSig {\n             header: ast::FnHeader {\n                 unsafety,\n                 abi: Abi::new(abi, trait_lo_sp),"}, {"sha": "dc29e057455d131141ab42aae6f9effd2e176622", "filename": "src/libsyntax_ext/global_allocator.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibsyntax_ext%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibsyntax_ext%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_allocator.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -1,7 +1,7 @@\n use crate::util::check_builtin_macro_attribute;\n \n use syntax::ast::{ItemKind, Mutability, Stmt, Ty, TyKind, Unsafety};\n-use syntax::ast::{self, Param, Attribute, Expr, FnHeader, Generics, Ident};\n+use syntax::ast::{self, Param, Attribute, Expr, FnSig, FnHeader, Generics, Ident};\n use syntax::expand::allocator::{AllocatorKind, AllocatorMethod, AllocatorTy, ALLOCATOR_METHODS};\n use syntax::ptr::P;\n use syntax::symbol::{kw, sym, Symbol};\n@@ -73,15 +73,10 @@ impl AllocFnFactory<'_, '_> {\n             .collect();\n         let result = self.call_allocator(method.name, args);\n         let (output_ty, output_expr) = self.ret_ty(&method.output, result);\n-        let kind = ItemKind::Fn(\n-            self.cx.fn_decl(abi_args, ast::FunctionRetTy::Ty(output_ty)),\n-            FnHeader {\n-                unsafety: Unsafety::Unsafe,\n-                ..FnHeader::default()\n-            },\n-            Generics::default(),\n-            self.cx.block_expr(output_expr),\n-        );\n+        let decl = self.cx.fn_decl(abi_args, ast::FunctionRetTy::Ty(output_ty));\n+        let header = FnHeader { unsafety: Unsafety::Unsafe, ..FnHeader::default() };\n+        let sig = FnSig { decl, header };\n+        let kind = ItemKind::Fn(sig, Generics::default(), self.cx.block_expr(output_expr));\n         let item = self.cx.item(\n             self.span,\n             self.cx.ident_of(&self.kind.fn_name(method.name), self.span),"}, {"sha": "8656100c92127ae9eda4b6b80fb9b0832b795b52", "filename": "src/libsyntax_ext/test.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibsyntax_ext%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibsyntax_ext%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -310,15 +310,15 @@ fn test_type(cx: &ExtCtxt<'_>) -> TestType {\n fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n     let has_should_panic_attr = attr::contains_name(&i.attrs, sym::should_panic);\n     let ref sd = cx.parse_sess.span_diagnostic;\n-    if let ast::ItemKind::Fn(ref decl, ref header, ref generics, _) = i.kind {\n-        if header.unsafety == ast::Unsafety::Unsafe {\n+    if let ast::ItemKind::Fn(ref sig, ref generics, _) = i.kind {\n+        if sig.header.unsafety == ast::Unsafety::Unsafe {\n             sd.span_err(\n                 i.span,\n                 \"unsafe functions cannot be used for tests\"\n             );\n             return false\n         }\n-        if header.asyncness.node.is_async() {\n+        if sig.header.asyncness.node.is_async() {\n             sd.span_err(\n                 i.span,\n                 \"async functions cannot be used for tests\"\n@@ -329,13 +329,13 @@ fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n \n         // If the termination trait is active, the compiler will check that the output\n         // type implements the `Termination` trait as `libtest` enforces that.\n-        let has_output = match decl.output {\n+        let has_output = match sig.decl.output {\n             ast::FunctionRetTy::Default(..) => false,\n             ast::FunctionRetTy::Ty(ref t) if t.kind.is_unit() => false,\n             _ => true\n         };\n \n-        if !decl.inputs.is_empty() {\n+        if !sig.decl.inputs.is_empty() {\n             sd.span_err(i.span, \"functions used as tests can not have any arguments\");\n             return false;\n         }\n@@ -361,10 +361,10 @@ fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n }\n \n fn has_bench_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n-    let has_sig = if let ast::ItemKind::Fn(ref decl, _, _, _) = i.kind {\n+    let has_sig = if let ast::ItemKind::Fn(ref sig, _, _) = i.kind {\n         // N.B., inadequate check, but we're running\n         // well before resolve, can't get too deep.\n-        decl.inputs.len() == 1\n+        sig.decl.inputs.len() == 1\n     } else {\n         false\n     };"}, {"sha": "1492f6f575ff71a64c7ee77e6a24871df05ea524", "filename": "src/libsyntax_ext/test_harness.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibsyntax_ext%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3/src%2Flibsyntax_ext%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_harness.rs?ref=65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "patch": "@@ -306,10 +306,9 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n         ecx.block(sp, vec![call_test_main])\n     };\n \n-    let main = ast::ItemKind::Fn(ecx.fn_decl(vec![], ast::FunctionRetTy::Ty(main_ret_ty)),\n-                           ast::FnHeader::default(),\n-                           ast::Generics::default(),\n-                           main_body);\n+    let decl = ecx.fn_decl(vec![], ast::FunctionRetTy::Ty(main_ret_ty));\n+    let sig = ast::FnSig { decl, header: ast::FnHeader::default() };\n+    let main = ast::ItemKind::Fn(sig, ast::Generics::default(), main_body);\n \n     // Honor the reexport_test_harness_main attribute\n     let main_id = match cx.reexport_test_harness_main {"}]}