{"sha": "aad1c998c7a08dd06719845dd5b3b962dfcb0be7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhZDFjOTk4YzdhMDhkZDA2NzE5ODQ1ZGQ1YjNiOTYyZGZjYjBiZTc=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-10-05T03:01:41Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-10-05T03:01:41Z"}, "message": "Remove nacl from libstd", "tree": {"sha": "2e1eb9c18906080481e3f1f1856194643d24bb0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e1eb9c18906080481e3f1f1856194643d24bb0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aad1c998c7a08dd06719845dd5b3b962dfcb0be7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aad1c998c7a08dd06719845dd5b3b962dfcb0be7", "html_url": "https://github.com/rust-lang/rust/commit/aad1c998c7a08dd06719845dd5b3b962dfcb0be7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aad1c998c7a08dd06719845dd5b3b962dfcb0be7/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8fad2d21961307ec908ced9d3e2a64595eb5deb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8fad2d21961307ec908ced9d3e2a64595eb5deb", "html_url": "https://github.com/rust-lang/rust/commit/b8fad2d21961307ec908ced9d3e2a64595eb5deb"}], "stats": {"total": 236, "additions": 4, "deletions": 232}, "files": [{"sha": "122f15d1d4c4feed68c29b5af7d1c6bcf7c7079f", "filename": "src/libstd/os/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aad1c998c7a08dd06719845dd5b3b962dfcb0be7/src%2Flibstd%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aad1c998c7a08dd06719845dd5b3b962dfcb0be7/src%2Flibstd%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmod.rs?ref=aad1c998c7a08dd06719845dd5b3b962dfcb0be7", "patch": "@@ -38,7 +38,6 @@ pub mod linux;\n #[cfg(all(not(dox), target_os = \"haiku\"))]      pub mod haiku;\n #[cfg(all(not(dox), target_os = \"ios\"))]        pub mod ios;\n #[cfg(all(not(dox), target_os = \"macos\"))]      pub mod macos;\n-#[cfg(all(not(dox), target_os = \"nacl\"))]       pub mod nacl;\n #[cfg(all(not(dox), target_os = \"netbsd\"))]     pub mod netbsd;\n #[cfg(all(not(dox), target_os = \"openbsd\"))]    pub mod openbsd;\n #[cfg(all(not(dox), target_os = \"solaris\"))]    pub mod solaris;"}, {"sha": "3e0fb44b01e30bd9719b61d9672ef9806deffcea", "filename": "src/libstd/os/nacl/fs.rs", "status": "removed", "additions": 0, "deletions": 128, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/b8fad2d21961307ec908ced9d3e2a64595eb5deb/src%2Flibstd%2Fos%2Fnacl%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8fad2d21961307ec908ced9d3e2a64595eb5deb/src%2Flibstd%2Fos%2Fnacl%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fnacl%2Ffs.rs?ref=b8fad2d21961307ec908ced9d3e2a64595eb5deb", "patch": "@@ -1,128 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-\n-use libc;\n-\n-use fs::Metadata;\n-use sys_common::AsInner;\n-\n-#[allow(deprecated)]\n-use os::nacl::raw;\n-\n-/// OS-specific extension methods for `fs::Metadata`\n-#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-pub trait MetadataExt {\n-    /// Gain a reference to the underlying `stat` structure which contains\n-    /// the raw information returned by the OS.\n-    ///\n-    /// The contents of the returned `stat` are **not** consistent across\n-    /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n-    /// cross-Unix abstractions contained within the raw stat.\n-    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(since = \"1.8.0\",\n-                       reason = \"deprecated in favor of the accessor \\\n-                                 methods of this trait\")]\n-    #[allow(deprecated)]\n-    fn as_raw_stat(&self) -> &raw::stat;\n-\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_dev(&self) -> u64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_ino(&self) -> u64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_mode(&self) -> u32;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_nlink(&self) -> u64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_uid(&self) -> u32;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_gid(&self) -> u32;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_rdev(&self) -> u64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_size(&self) -> u64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_atime(&self) -> i64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_atime_nsec(&self) -> i64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_mtime(&self) -> i64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_mtime_nsec(&self) -> i64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_ctime(&self) -> i64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_ctime_nsec(&self) -> i64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_blksize(&self) -> u64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_blocks(&self) -> u64;\n-}\n-\n-#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-impl MetadataExt for Metadata {\n-    #[allow(deprecated)]\n-    fn as_raw_stat(&self) -> &raw::stat {\n-        unsafe {\n-            &*(self.as_inner().as_inner() as *const libc::stat64\n-                                          as *const raw::stat)\n-        }\n-    }\n-    fn st_dev(&self) -> u64 {\n-        self.as_inner().as_inner().st_dev as u64\n-    }\n-    fn st_ino(&self) -> u64 {\n-        self.as_inner().as_inner().st_ino as u64\n-    }\n-    fn st_mode(&self) -> u32 {\n-        self.as_inner().as_inner().st_mode as u32\n-    }\n-    fn st_nlink(&self) -> u64 {\n-        self.as_inner().as_inner().st_nlink as u64\n-    }\n-    fn st_uid(&self) -> u32 {\n-        self.as_inner().as_inner().st_uid as u32\n-    }\n-    fn st_gid(&self) -> u32 {\n-        self.as_inner().as_inner().st_gid as u32\n-    }\n-    fn st_rdev(&self) -> u64 {\n-        self.as_inner().as_inner().st_rdev as u64\n-    }\n-    fn st_size(&self) -> u64 {\n-        self.as_inner().as_inner().st_size as u64\n-    }\n-    fn st_atime(&self) -> i64 {\n-        self.as_inner().as_inner().st_atime as i64\n-    }\n-    fn st_atime_nsec(&self) -> i64 {\n-        self.as_inner().as_inner().st_atime_nsec as i64\n-    }\n-    fn st_mtime(&self) -> i64 {\n-        self.as_inner().as_inner().st_mtime as i64\n-    }\n-    fn st_mtime_nsec(&self) -> i64 {\n-        self.as_inner().as_inner().st_mtime_nsec as i64\n-    }\n-    fn st_ctime(&self) -> i64 {\n-        self.as_inner().as_inner().st_ctime as i64\n-    }\n-    fn st_ctime_nsec(&self) -> i64 {\n-        self.as_inner().as_inner().st_ctime_nsec as i64\n-    }\n-    fn st_blksize(&self) -> u64 {\n-        self.as_inner().as_inner().st_blksize as u64\n-    }\n-    fn st_blocks(&self) -> u64 {\n-        self.as_inner().as_inner().st_blocks as u64\n-    }\n-}"}, {"sha": "7dfa2eabe3e1721b4ae240cdd53f34c8046f5389", "filename": "src/libstd/os/nacl/mod.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b8fad2d21961307ec908ced9d3e2a64595eb5deb/src%2Flibstd%2Fos%2Fnacl%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8fad2d21961307ec908ced9d3e2a64595eb5deb/src%2Flibstd%2Fos%2Fnacl%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fnacl%2Fmod.rs?ref=b8fad2d21961307ec908ced9d3e2a64595eb5deb", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Nacl-specific definitions\n-\n-#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-\n-pub mod raw;\n-pub mod fs;"}, {"sha": "3c3d4410a2a16bc89dc93499fb10eff32d5da164", "filename": "src/libstd/os/nacl/raw.rs", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b8fad2d21961307ec908ced9d3e2a64595eb5deb/src%2Flibstd%2Fos%2Fnacl%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8fad2d21961307ec908ced9d3e2a64595eb5deb/src%2Flibstd%2Fos%2Fnacl%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fnacl%2Fraw.rs?ref=b8fad2d21961307ec908ced9d3e2a64595eb5deb", "patch": "@@ -1,56 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Nacl-specific raw type definitions\n-\n-#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(since = \"1.8.0\",\n-                    reason = \"these type aliases are no longer supported by \\\n-                              the standard library, the `libc` crate on \\\n-                              crates.io should be used instead for the correct \\\n-                              definitions\")]\n-#![allow(deprecated)]\n-\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type pid_t = i32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type uid_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type gid_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n-\n-#[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n-pub type pthread_t = usize;\n-\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-pub struct stat {\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_dev: dev_t,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_ino: ino_t,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_mode: mode_t,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_nlink: nlink_t,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_uid: uid_t,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_gid: gid_t,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_rdev: dev_t,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_size: off_t,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_blksize: blksize_t,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_blocks: blkcnt_t,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_atime: time_t,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_atime_nsec: i64,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_mtime: time_t,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_mtime_nsec: i64,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_ctime: time_t,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_ctime_nsec: i64,\n-}"}, {"sha": "00cf7eca75dc3eaf8148896027e938d621fd85a4", "filename": "src/libstd/sys/unix/env.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aad1c998c7a08dd06719845dd5b3b962dfcb0be7/src%2Flibstd%2Fsys%2Funix%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aad1c998c7a08dd06719845dd5b3b962dfcb0be7/src%2Flibstd%2Fsys%2Funix%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fenv.rs?ref=aad1c998c7a08dd06719845dd5b3b962dfcb0be7", "patch": "@@ -118,27 +118,6 @@ pub mod os {\n     pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n-#[cfg(all(target_os = \"nacl\", not(target_arch = \"le32\")))]\n-pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"nacl\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \".nexe\";\n-    pub const EXE_EXTENSION: &'static str = \"nexe\";\n-}\n-#[cfg(all(target_os = \"nacl\", target_arch = \"le32\"))]\n-pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"pnacl\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".pso\";\n-    pub const DLL_EXTENSION: &'static str = \"pso\";\n-    pub const EXE_SUFFIX: &'static str = \".pexe\";\n-    pub const EXE_EXTENSION: &'static str = \"pexe\";\n-}\n-\n #[cfg(target_os = \"haiku\")]\n pub mod os {\n     pub const FAMILY: &'static str = \"unix\";"}, {"sha": "c2772e2e2cc9a35e7317fbb326b22520b80bb82a", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aad1c998c7a08dd06719845dd5b3b962dfcb0be7/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aad1c998c7a08dd06719845dd5b3b962dfcb0be7/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=aad1c998c7a08dd06719845dd5b3b962dfcb0be7", "patch": "@@ -22,7 +22,6 @@ use libc;\n #[cfg(all(not(dox), target_os = \"haiku\"))]     pub use os::haiku as platform;\n #[cfg(all(not(dox), target_os = \"ios\"))]       pub use os::ios as platform;\n #[cfg(all(not(dox), target_os = \"macos\"))]     pub use os::macos as platform;\n-#[cfg(all(not(dox), target_os = \"nacl\"))]      pub use os::nacl as platform;\n #[cfg(all(not(dox), target_os = \"netbsd\"))]    pub use os::netbsd as platform;\n #[cfg(all(not(dox), target_os = \"openbsd\"))]   pub use os::openbsd as platform;\n #[cfg(all(not(dox), target_os = \"solaris\"))]   pub use os::solaris as platform;\n@@ -77,11 +76,11 @@ pub fn init() {\n         reset_sigpipe();\n     }\n \n-    #[cfg(not(any(target_os = \"nacl\", target_os = \"emscripten\", target_os=\"fuchsia\")))]\n+    #[cfg(not(any(target_os = \"emscripten\", target_os=\"fuchsia\")))]\n     unsafe fn reset_sigpipe() {\n         assert!(signal(libc::SIGPIPE, libc::SIG_IGN) != libc::SIG_ERR);\n     }\n-    #[cfg(any(target_os = \"nacl\", target_os = \"emscripten\", target_os=\"fuchsia\"))]\n+    #[cfg(any(target_os = \"emscripten\", target_os=\"fuchsia\"))]\n     unsafe fn reset_sigpipe() {}\n }\n "}, {"sha": "d8c30534eede2c2e55a7253183b9f1f4a92b9d61", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aad1c998c7a08dd06719845dd5b3b962dfcb0be7/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aad1c998c7a08dd06719845dd5b3b962dfcb0be7/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=aad1c998c7a08dd06719845dd5b3b962dfcb0be7", "patch": "@@ -483,12 +483,10 @@ pub fn home_dir() -> Option<PathBuf> {\n \n     #[cfg(any(target_os = \"android\",\n               target_os = \"ios\",\n-              target_os = \"nacl\",\n               target_os = \"emscripten\"))]\n     unsafe fn fallback() -> Option<OsString> { None }\n     #[cfg(not(any(target_os = \"android\",\n                   target_os = \"ios\",\n-                  target_os = \"nacl\",\n                   target_os = \"emscripten\")))]\n     unsafe fn fallback() -> Option<OsString> {\n         let amt = match libc::sysconf(libc::_SC_GETPW_R_SIZE_MAX) {"}, {"sha": "383434b1cd870316fb4d0bf5c2b6e12e0a21373b", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aad1c998c7a08dd06719845dd5b3b962dfcb0be7/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aad1c998c7a08dd06719845dd5b3b962dfcb0be7/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=aad1c998c7a08dd06719845dd5b3b962dfcb0be7", "patch": "@@ -464,7 +464,6 @@ mod tests {\n     // test from being flaky we ignore it on macOS.\n     #[test]\n     #[cfg_attr(target_os = \"macos\", ignore)]\n-    #[cfg_attr(target_os = \"nacl\", ignore)] // no signals on NaCl.\n     // When run under our current QEMU emulation test suite this test fails,\n     // although the reason isn't very clear as to why. For now this test is\n     // ignored there."}, {"sha": "743c458d580c68ebe77c791333df2757357bff1d", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aad1c998c7a08dd06719845dd5b3b962dfcb0be7/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aad1c998c7a08dd06719845dd5b3b962dfcb0be7/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=aad1c998c7a08dd06719845dd5b3b962dfcb0be7", "patch": "@@ -184,8 +184,8 @@ impl Command {\n             *sys::os::environ() = envp.as_ptr();\n         }\n \n-        // NaCl has no signal support.\n-        #[cfg(not(any(target_os = \"nacl\", target_os = \"emscripten\")))]\n+        // emscripten has no signal support.\n+        #[cfg(not(any(target_os = \"emscripten\")))]\n         {\n             use mem;\n             // Reset signal handling so the child process starts in a"}, {"sha": "8f78c2e6f59d7d384a701fa0fc6c573c1aa15583", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aad1c998c7a08dd06719845dd5b3b962dfcb0be7/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aad1c998c7a08dd06719845dd5b3b962dfcb0be7/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=aad1c998c7a08dd06719845dd5b3b962dfcb0be7", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![cfg_attr(target_os = \"nacl\", allow(dead_code))]\n-\n /// Common code for printing the backtrace in the same way across the different\n /// supported platforms.\n "}]}