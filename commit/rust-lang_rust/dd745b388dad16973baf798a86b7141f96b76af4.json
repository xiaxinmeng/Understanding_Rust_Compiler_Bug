{"sha": "dd745b388dad16973baf798a86b7141f96b76af4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNzQ1YjM4OGRhZDE2OTczYmFmNzk4YTg2YjcxNDFmOTZiNzZhZjQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-20T04:03:08Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:28Z"}, "message": "librustc: De-`@mut` the capture map", "tree": {"sha": "483c96b60bb919aac0be5d8e5818ccbaa8d4d30b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/483c96b60bb919aac0be5d8e5818ccbaa8d4d30b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd745b388dad16973baf798a86b7141f96b76af4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd745b388dad16973baf798a86b7141f96b76af4", "html_url": "https://github.com/rust-lang/rust/commit/dd745b388dad16973baf798a86b7141f96b76af4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd745b388dad16973baf798a86b7141f96b76af4/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72f9cbe8ac36196bfb55b78e35fd92a0749d4740", "url": "https://api.github.com/repos/rust-lang/rust/commits/72f9cbe8ac36196bfb55b78e35fd92a0749d4740", "html_url": "https://github.com/rust-lang/rust/commit/72f9cbe8ac36196bfb55b78e35fd92a0749d4740"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "ad5f9b7bf30535055b4e7648d38e45e1cb40a19f", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dd745b388dad16973baf798a86b7141f96b76af4/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd745b388dad16973baf798a86b7141f96b76af4/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=dd745b388dad16973baf798a86b7141f96b76af4", "patch": "@@ -1017,7 +1017,8 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n     }\n \n     {\n-        let r = maps.capture_map.find(&id);\n+        let capture_map = maps.capture_map.borrow();\n+        let r = capture_map.get().find(&id);\n         for &cap_vars in r.iter() {\n             ebml_w.tag(c::tag_table_capture_map, |ebml_w| {\n                 ebml_w.id(id);\n@@ -1283,7 +1284,10 @@ fn decode_side_tables(xcx: @ExtendedDecodeContext,\n                             at_vec::to_managed_move(\n                                 val_dsr.read_to_vec(\n                                     |val_dsr| val_dsr.read_capture_var(xcx)));\n-                        dcx.maps.capture_map.insert(id, cvars);\n+                        let mut capture_map = dcx.maps\n+                                                 .capture_map\n+                                                 .borrow_mut();\n+                        capture_map.get().insert(id, cvars);\n                     }\n                     _ => {\n                         xcx.dcx.tcx.sess.bug("}, {"sha": "5c50b8c55a905c84571193d45a3e9808d24aeda4", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd745b388dad16973baf798a86b7141f96b76af4/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd745b388dad16973baf798a86b7141f96b76af4/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=dd745b388dad16973baf798a86b7141f96b76af4", "patch": "@@ -713,7 +713,8 @@ fn check_loans_in_fn<'a>(this: &mut CheckLoanCtxt<'a>,\n     fn check_captured_variables(this: &CheckLoanCtxt,\n                                 closure_id: ast::NodeId,\n                                 span: Span) {\n-        let cap_vars = this.bccx.capture_map.get(&closure_id);\n+        let capture_map = this.bccx.capture_map.borrow();\n+        let cap_vars = capture_map.get().get(&closure_id);\n         for cap_var in cap_vars.iter() {\n             let var_id = ast_util::def_id_of_def(cap_var.def).node;\n             let var_path = @LpVar(var_id);"}, {"sha": "2dafcbef61f0609d617d87e55b69c6a1d5eb34f9", "filename": "src/librustc/middle/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd745b388dad16973baf798a86b7141f96b76af4/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd745b388dad16973baf798a86b7141f96b76af4/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=dd745b388dad16973baf798a86b7141f96b76af4", "patch": "@@ -69,7 +69,8 @@ fn gather_move_from_expr_or_pat(bccx: &BorrowckCtxt,\n pub fn gather_captures(bccx: &BorrowckCtxt,\n                        move_data: &mut MoveData,\n                        closure_expr: @ast::Expr) {\n-    let captured_vars = bccx.capture_map.get(&closure_expr.id);\n+    let capture_map = bccx.capture_map.borrow();\n+    let captured_vars = capture_map.get().get(&closure_expr.id);\n     for captured_var in captured_vars.iter() {\n         match captured_var.mode {\n             moves::CapMove => {"}, {"sha": "055515e12d1df07172de8879e794a7306531b094", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd745b388dad16973baf798a86b7141f96b76af4/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd745b388dad16973baf798a86b7141f96b76af4/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=dd745b388dad16973baf798a86b7141f96b76af4", "patch": "@@ -124,7 +124,7 @@ pub fn lookup_variant_by_id(tcx: ty::ctxt,\n             method_map: @mut HashMap::new(),\n             vtable_map: @mut HashMap::new(),\n             write_guard_map: @mut HashSet::new(),\n-            capture_map: @mut HashMap::new()\n+            capture_map: @RefCell::new(HashMap::new())\n         };\n         let e = match csearch::maybe_get_item_ast(tcx, enum_def,\n             |a, b, c, d| astencode::decode_inlined_item(a,\n@@ -174,7 +174,7 @@ pub fn lookup_const_by_id(tcx: ty::ctxt,\n             method_map: @mut HashMap::new(),\n             vtable_map: @mut HashMap::new(),\n             write_guard_map: @mut HashSet::new(),\n-            capture_map: @mut HashMap::new()\n+            capture_map: @RefCell::new(HashMap::new())\n         };\n         let e = match csearch::maybe_get_item_ast(tcx, def_id,\n             |a, b, c, d| astencode::decode_inlined_item(a, b, maps, c, d)) {"}, {"sha": "0f814aba099f928cbec85a7bb9b23c5195f2750c", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd745b388dad16973baf798a86b7141f96b76af4/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd745b388dad16973baf798a86b7141f96b76af4/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=dd745b388dad16973baf798a86b7141f96b76af4", "patch": "@@ -495,7 +495,8 @@ fn visit_expr(v: &mut LivenessVisitor, expr: @Expr, this: @mut IrMaps) {\n         // being the location that the variable is used.  This results\n         // in better error messages than just pointing at the closure\n         // construction site.\n-        let cvs = this.capture_map.get(&expr.id);\n+        let capture_map = this.capture_map.borrow();\n+        let cvs = capture_map.get().get(&expr.id);\n         let mut call_caps = ~[];\n         for cv in cvs.iter() {\n             match moves::moved_variable_node_id_from_def(cv.def) {"}, {"sha": "2e15517898b3d8b43943ea792ec6b13917eee705", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dd745b388dad16973baf798a86b7141f96b76af4/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd745b388dad16973baf798a86b7141f96b76af4/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=dd745b388dad16973baf798a86b7141f96b76af4", "patch": "@@ -137,6 +137,7 @@ use util::common::indenter;\n use util::ppaux::UserString;\n \n use std::at_vec;\n+use std::cell::RefCell;\n use std::hashmap::{HashSet, HashMap};\n use syntax::ast::*;\n use syntax::ast_util;\n@@ -158,7 +159,7 @@ pub struct CaptureVar {\n     mode: CaptureMode // How variable is being accessed\n }\n \n-pub type CaptureMap = @mut HashMap<NodeId, @[CaptureVar]>;\n+pub type CaptureMap = @RefCell<HashMap<NodeId, @[CaptureVar]>>;\n \n pub type MovesMap = @mut HashSet<NodeId>;\n \n@@ -215,7 +216,7 @@ pub fn compute_moves(tcx: ty::ctxt,\n         method_map: method_map,\n         move_maps: MoveMaps {\n             moves_map: @mut HashSet::new(),\n-            capture_map: @mut HashMap::new(),\n+            capture_map: @RefCell::new(HashMap::new()),\n             moved_variables_set: @mut HashSet::new()\n         }\n     };\n@@ -564,7 +565,12 @@ impl VisitContext {\n                     self.use_pat(a.pat);\n                 }\n                 let cap_vars = self.compute_captures(expr.id);\n-                self.move_maps.capture_map.insert(expr.id, cap_vars);\n+                {\n+                    let mut capture_map = self.move_maps\n+                                              .capture_map\n+                                              .borrow_mut();\n+                    capture_map.get().insert(expr.id, cap_vars);\n+                }\n                 self.consume_block(body);\n             }\n "}, {"sha": "6e29d3c1ee2e119b976880ebf5e6af53ce2705f5", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dd745b388dad16973baf798a86b7141f96b76af4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd745b388dad16973baf798a86b7141f96b76af4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=dd745b388dad16973baf798a86b7141f96b76af4", "patch": "@@ -400,7 +400,10 @@ pub fn trans_expr_fn(bcx: @Block,\n \n     let Result {bcx: bcx, val: closure} = match sigil {\n         ast::BorrowedSigil | ast::ManagedSigil | ast::OwnedSigil => {\n-            let cap_vars = ccx.maps.capture_map.get_copy(&user_id);\n+            let cap_vars = {\n+                let capture_map = ccx.maps.capture_map.borrow();\n+                capture_map.get().get_copy(&user_id)\n+            };\n             let ClosureResult {llbox, cdata_ty, bcx}\n                 = build_closure(bcx, cap_vars, sigil);\n             trans_closure(ccx,"}]}