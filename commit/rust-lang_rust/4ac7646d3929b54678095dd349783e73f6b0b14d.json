{"sha": "4ac7646d3929b54678095dd349783e73f6b0b14d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhYzc2NDZkMzkyOWI1NDY3ODA5NWRkMzQ5NzgzZTczZjZiMGIxNGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-18T00:26:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-18T00:26:08Z"}, "message": "Auto merge of #43832 - huntiep:compiler-desugaring-enum, r=nikomatsakis\n\nImplement CompilerDesugaringKind enum\n\nThis is the first step outlined in #35946. I think that the variants of `CompilerDesugaringKind` should be changed, I didn't know what the official names for `...` and `<-` are.\n\nI'm not to sure how tests for the compiler work, but I would imagine that tests should be added such that\n`Symbol::intern(s) == CompilerDesugaringKind::from(s).as_symbol()` for valid `s`.", "tree": {"sha": "8355a67a27c87510229c01eb480c1fd62e0e99ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8355a67a27c87510229c01eb480c1fd62e0e99ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ac7646d3929b54678095dd349783e73f6b0b14d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ac7646d3929b54678095dd349783e73f6b0b14d", "html_url": "https://github.com/rust-lang/rust/commit/4ac7646d3929b54678095dd349783e73f6b0b14d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ac7646d3929b54678095dd349783e73f6b0b14d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59ccba995de202fb9d9a8d795d2770fb2d199db0", "url": "https://api.github.com/repos/rust-lang/rust/commits/59ccba995de202fb9d9a8d795d2770fb2d199db0", "html_url": "https://github.com/rust-lang/rust/commit/59ccba995de202fb9d9a8d795d2770fb2d199db0"}, {"sha": "ff047a8a25738badbb88b97edf0f8108b4bc356b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff047a8a25738badbb88b97edf0f8108b4bc356b", "html_url": "https://github.com/rust-lang/rust/commit/ff047a8a25738badbb88b97edf0f8108b4bc356b"}], "stats": {"total": 59, "additions": 48, "deletions": 11}, "files": [{"sha": "58bb5b9580f51f2897a7c3bdc70c156a1438a016", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4ac7646d3929b54678095dd349783e73f6b0b14d/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac7646d3929b54678095dd349783e73f6b0b14d/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=4ac7646d3929b54678095dd349783e73f6b0b14d", "patch": "@@ -59,7 +59,7 @@ use syntax::ast::*;\n use syntax::errors;\n use syntax::ext::hygiene::{Mark, SyntaxContext};\n use syntax::ptr::P;\n-use syntax::codemap::{self, respan, Spanned};\n+use syntax::codemap::{self, respan, Spanned, CompilerDesugaringKind};\n use syntax::std_inject;\n use syntax::symbol::{Symbol, keywords};\n use syntax::util::small_vector::SmallVector;\n@@ -414,12 +414,14 @@ impl<'a> LoweringContext<'a> {\n         Symbol::gensym(s)\n     }\n \n-    fn allow_internal_unstable(&self, reason: &'static str, mut span: Span) -> Span {\n+    fn allow_internal_unstable(&self, reason: CompilerDesugaringKind, mut span: Span)\n+        -> Span\n+    {\n         let mark = Mark::fresh(Mark::root());\n         mark.set_expn_info(codemap::ExpnInfo {\n             call_site: span,\n             callee: codemap::NameAndSpan {\n-                format: codemap::CompilerDesugaring(Symbol::intern(reason)),\n+                format: codemap::CompilerDesugaring(reason),\n                 span: Some(span),\n                 allow_internal_unstable: true,\n                 allow_internal_unsafe: false,\n@@ -1790,7 +1792,8 @@ impl<'a> LoweringContext<'a> {\n                 let move_val_init = [\"intrinsics\", \"move_val_init\"];\n                 let inplace_finalize = [\"ops\", \"InPlace\", \"finalize\"];\n \n-                let unstable_span = self.allow_internal_unstable(\"<-\", e.span);\n+                let unstable_span =\n+                    self.allow_internal_unstable(CompilerDesugaringKind::BackArrow, e.span);\n                 let make_call = |this: &mut LoweringContext, p, args| {\n                     let path = P(this.expr_std_path(unstable_span, p, ThinVec::new()));\n                     P(this.expr_call(e.span, path, args))\n@@ -2007,12 +2010,14 @@ impl<'a> LoweringContext<'a> {\n                     e1.iter().map(|e| (\"start\", e)).chain(e2.iter().map(|e| (\"end\", e)))\n                     .map(|(s, e)| {\n                         let expr = P(self.lower_expr(&e));\n-                        let unstable_span = self.allow_internal_unstable(\"...\", e.span);\n+                        let unstable_span =\n+                            self.allow_internal_unstable(CompilerDesugaringKind::DotFill, e.span);\n                         self.field(Symbol::intern(s), expr, unstable_span)\n                     }).collect::<P<[hir::Field]>>();\n \n                 let is_unit = fields.is_empty();\n-                let unstable_span = self.allow_internal_unstable(\"...\", e.span);\n+                let unstable_span =\n+                    self.allow_internal_unstable(CompilerDesugaringKind::DotFill, e.span);\n                 let struct_path =\n                     iter::once(\"ops\").chain(iter::once(path))\n                     .collect::<Vec<_>>();\n@@ -2353,7 +2358,8 @@ impl<'a> LoweringContext<'a> {\n                 //                 return Try::from_error(From::from(err)),\n                 // }\n \n-                let unstable_span = self.allow_internal_unstable(\"?\", e.span);\n+                let unstable_span =\n+                    self.allow_internal_unstable(CompilerDesugaringKind::QuestionMark, e.span);\n \n                 // Try::into_result(<expr>)\n                 let discr = {"}, {"sha": "919804d7efd6fe1aa366b26cc5960cd2910305f4", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4ac7646d3929b54678095dd349783e73f6b0b14d/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac7646d3929b54678095dd349783e73f6b0b14d/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=4ac7646d3929b54678095dd349783e73f6b0b14d", "patch": "@@ -323,8 +323,8 @@ impl NameAndSpan {\n     pub fn name(&self) -> Symbol {\n         match self.format {\n             ExpnFormat::MacroAttribute(s) |\n-            ExpnFormat::MacroBang(s) |\n-            ExpnFormat::CompilerDesugaring(s) => s,\n+            ExpnFormat::MacroBang(s) => s,\n+            ExpnFormat::CompilerDesugaring(ref kind) => kind.as_symbol(),\n         }\n     }\n }\n@@ -337,7 +337,27 @@ pub enum ExpnFormat {\n     /// e.g. `format!()`\n     MacroBang(Symbol),\n     /// Desugaring done by the compiler during HIR lowering.\n-    CompilerDesugaring(Symbol)\n+    CompilerDesugaring(CompilerDesugaringKind)\n+}\n+\n+/// The kind of compiler desugaring.\n+#[derive(Clone, Hash, Debug, PartialEq, Eq)]\n+pub enum CompilerDesugaringKind {\n+    BackArrow,\n+    DotFill,\n+    QuestionMark,\n+}\n+\n+impl CompilerDesugaringKind {\n+    pub fn as_symbol(&self) -> Symbol {\n+        use CompilerDesugaringKind::*;\n+        let s = match *self {\n+            BackArrow => \"<-\",\n+            DotFill => \"...\",\n+            QuestionMark => \"?\",\n+        };\n+        Symbol::intern(s)\n+    }\n }\n \n impl Encodable for SyntaxContext {"}, {"sha": "2385e3509ad1c14ff6928476784880b73aaa8a6a", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4ac7646d3929b54678095dd349783e73f6b0b14d/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac7646d3929b54678095dd349783e73f6b0b14d/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=4ac7646d3929b54678095dd349783e73f6b0b14d", "patch": "@@ -47,7 +47,7 @@ extern crate serialize;\n extern crate serialize as rustc_serialize; // used by deriving\n \n pub mod hygiene;\n-pub use hygiene::{SyntaxContext, ExpnInfo, ExpnFormat, NameAndSpan};\n+pub use hygiene::{SyntaxContext, ExpnInfo, ExpnFormat, NameAndSpan, CompilerDesugaringKind};\n \n pub mod symbol;\n \n@@ -153,6 +153,17 @@ impl Span {\n         }\n     }\n \n+    /// Check if this span arises from a compiler desugaring of kind `kind`.\n+    pub fn is_compiler_desugaring(&self, kind: CompilerDesugaringKind) -> bool {\n+        match self.ctxt.outer().expn_info() {\n+            Some(info) => match info.callee.format {\n+                ExpnFormat::CompilerDesugaring(k) => k == kind,\n+                _ => false,\n+            },\n+            None => false,\n+        }\n+    }\n+\n     /// Check if a span is \"internal\" to a macro in which `unsafe`\n     /// can be used without triggering the `unsafe_code` lint\n     //  (that is, a macro marked with `#[allow_internal_unsafe]`)."}]}