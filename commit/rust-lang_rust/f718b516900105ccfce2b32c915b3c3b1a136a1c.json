{"sha": "f718b516900105ccfce2b32c915b3c3b1a136a1c", "node_id": "C_kwDOAAsO6NoAKGY3MThiNTE2OTAwMTA1Y2NmY2UyYjMyYzkxNWIzYzNiMWExMzZhMWM", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2022-02-09T10:19:31Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2022-02-12T13:39:52Z"}, "message": "Update chalk tests", "tree": {"sha": "93e3fe5582390535246206c76d3c7851f028cd08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93e3fe5582390535246206c76d3c7851f028cd08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f718b516900105ccfce2b32c915b3c3b1a136a1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f718b516900105ccfce2b32c915b3c3b1a136a1c", "html_url": "https://github.com/rust-lang/rust/commit/f718b516900105ccfce2b32c915b3c3b1a136a1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f718b516900105ccfce2b32c915b3c3b1a136a1c/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caa10dc57200a71839ad72d2bf1fd64611721851", "url": "https://api.github.com/repos/rust-lang/rust/commits/caa10dc57200a71839ad72d2bf1fd64611721851", "html_url": "https://github.com/rust-lang/rust/commit/caa10dc57200a71839ad72d2bf1fd64611721851"}], "stats": {"total": 231, "additions": 119, "deletions": 112}, "files": [{"sha": "d180de9be3bf310896f4f65b601240a691ebb9da", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,6 +1,5 @@\n // NOTE: rustc cannot currently handle bounds of the form `for<'a> <Foo as Bar<'a>>::Assoc: Baz`.\n // This should hopefully be fixed with Chalk.\n-// ignore-compare-mode-chalk\n \n #![feature(associated_type_bounds)]\n "}, {"sha": "c23e54594ee301f679c2cd46c48929dbc4f55693", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `<<Self as Case1>::C as Iterator>::Item` cannot be sent between threads safely\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:27:36\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:26:36\n    |\n LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8, App: Debug>> + Sync>;\n    |                                    ^^^^ `<<Self as Case1>::C as Iterator>::Item` cannot be sent between threads safely\n@@ -11,7 +11,7 @@ LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Send {\n    |             ++++++++++++++++++++++++++++++++++++++++++++++++++\n \n error[E0277]: `<<Self as Case1>::C as Iterator>::Item` is not an iterator\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:27:43\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:26:43\n    |\n LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8, App: Debug>> + Sync>;\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `<<Self as Case1>::C as Iterator>::Item` is not an iterator\n@@ -23,7 +23,7 @@ LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Iterator {\n    |             ++++++++++++++++++++++++++++++++++++++++++++++++++++++\n \n error[E0277]: `<<Self as Case1>::C as Iterator>::Item` cannot be shared between threads safely\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:27:93\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:26:93\n    |\n LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8, App: Debug>> + Sync>;\n    |                                                                                             ^^^^ `<<Self as Case1>::C as Iterator>::Item` cannot be shared between threads safely"}, {"sha": "b0703a4ee22b3b35fc792be2e98cd53a4a46c004", "filename": "src/test/ui/associated-type-bounds/trait-params.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-params.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,5 +1,4 @@\n // build-pass (FIXME(62277): could be check-pass?)\n-// ignore-compare-mode-chalk\n \n #![feature(associated_type_bounds)]\n "}, {"sha": "97c5acf1f72ca42129efce0205612dc331f7719d", "filename": "src/test/ui/associated-type-bounds/union-bounds.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fassociated-type-bounds%2Funion-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fassociated-type-bounds%2Funion-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Funion-bounds.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-compare-mode-chalk\n \n #![feature(associated_type_bounds)]\n #![feature(untagged_unions)]"}, {"sha": "c9b302b96919fef3c818c780a4e6a9cc9ff2396d", "filename": "src/test/ui/associated-types/associated-types-stream.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-stream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-stream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-stream.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n // Test references to the trait `Stream` in the bounds for associated\n // types defined on `Stream`. Issue #20551.\n-// ignore-compare-mode-chalk\n-\n \n trait Stream {\n     type Car;"}, {"sha": "f74c5a8590d1d5989766217919f176d4e05b5e9d", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,4 +1,3 @@\n-// ignore-compare-mode-chalk\n trait Z<'a, T: ?Sized>\n where\n     T: Z<'a, u16>,"}, {"sha": "354caef1e41d8e4594e5d1a11fc63813c9f1a4cb", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `str: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-2.rs:4:8\n+  --> $DIR/hr-associated-type-bound-param-2.rs:3:8\n    |\n LL |     T: Z<'a, u16>,\n    |        ^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n    |\n note: required by a bound in `Z`\n-  --> $DIR/hr-associated-type-bound-param-2.rs:7:35\n+  --> $DIR/hr-associated-type-bound-param-2.rs:6:35\n    |\n LL | trait Z<'a, T: ?Sized>\n    |       - required by a bound in this\n@@ -14,13 +14,13 @@ LL |     for<'b> <T as Z<'b, u16>>::W: Clone,\n    |                                   ^^^^^ required by this bound in `Z`\n \n error[E0277]: the trait bound `str: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-2.rs:4:8\n+  --> $DIR/hr-associated-type-bound-param-2.rs:3:8\n    |\n LL |     T: Z<'a, u16>,\n    |        ^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n    |\n note: required by a bound in `Z`\n-  --> $DIR/hr-associated-type-bound-param-2.rs:7:35\n+  --> $DIR/hr-associated-type-bound-param-2.rs:6:35\n    |\n LL | trait Z<'a, T: ?Sized>\n    |       - required by a bound in this\n@@ -29,13 +29,13 @@ LL |     for<'b> <T as Z<'b, u16>>::W: Clone,\n    |                                   ^^^^^ required by this bound in `Z`\n \n error[E0277]: the trait bound `str: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-2.rs:16:14\n+  --> $DIR/hr-associated-type-bound-param-2.rs:15:14\n    |\n LL |     type W = str;\n    |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n note: required by a bound in `Z`\n-  --> $DIR/hr-associated-type-bound-param-2.rs:7:35\n+  --> $DIR/hr-associated-type-bound-param-2.rs:6:35\n    |\n LL | trait Z<'a, T: ?Sized>\n    |       - required by a bound in this"}, {"sha": "d7f3151a502ee667dba173f83e5b583e243522a2", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-5.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,4 +1,3 @@\n-// ignore-compare-mode-chalk\n trait Cycle: Sized {\n     type Next: Cycle<Next = Self>;\n }"}, {"sha": "4c04d12a71470d25f0f9b33a88ae6c4bb7c95b02", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-5.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `str: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-5.rs:27:14\n+  --> $DIR/hr-associated-type-bound-param-5.rs:26:14\n    |\n LL |     type U = str;\n    |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n note: required by a bound in `X`\n-  --> $DIR/hr-associated-type-bound-param-5.rs:18:45\n+  --> $DIR/hr-associated-type-bound-param-5.rs:17:45\n    |\n LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n    |       - required by a bound in this\n@@ -14,13 +14,13 @@ LL |     for<'b> <T::Next as X<'b, T::Next>>::U: Clone,\n    |                                             ^^^^^ required by this bound in `X`\n \n error[E0277]: the trait bound `str: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-5.rs:32:14\n+  --> $DIR/hr-associated-type-bound-param-5.rs:31:14\n    |\n LL |     type U = str;\n    |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n note: required by a bound in `X`\n-  --> $DIR/hr-associated-type-bound-param-5.rs:18:45\n+  --> $DIR/hr-associated-type-bound-param-5.rs:17:45\n    |\n LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n    |       - required by a bound in this"}, {"sha": "47ee3e7ad70e83a8267515af1f933d6a7095653b", "filename": "src/test/ui/associated-types/issue-50301.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fassociated-types%2Fissue-50301.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fassociated-types%2Fissue-50301.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-50301.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,6 +1,5 @@\n // Tests that HRTBs are correctly accepted -- https://github.com/rust-lang/rust/issues/50301\n // check-pass\n-// ignore-compare-mode-chalk\n trait Trait\n where\n     for<'a> &'a Self::IntoIter: IntoIterator<Item = u32>,"}, {"sha": "f4ebf91924ced1384025f84367366d7af67e70ce", "filename": "src/test/ui/chalkify/assert.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fchalkify%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fchalkify%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fassert.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -0,0 +1,6 @@\n+// run-pass\n+// compile-flags: -Z chalk\n+\n+fn main() {\n+    assert_eq!(1, 1);\n+}"}, {"sha": "0f0df29019e7bbc1dbea32322013e0b696abb71e", "filename": "src/test/ui/chalkify/println.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fchalkify%2Fprintln.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fchalkify%2Fprintln.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fprintln.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -2,6 +2,5 @@\n // compile-flags: -Z chalk\n \n fn main() {\n-    // FIXME(chalk): Require `RegionOutlives`/`TypeOutlives`/`Subtype` support\n-    //println!(\"hello\");\n+    println!(\"hello\");\n }"}, {"sha": "d56abc42bf540c048951ac55830e97e3c50bf309", "filename": "src/test/ui/chalkify/trait-objects.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -5,8 +5,7 @@ use std::fmt::Display;\n \n fn main() {\n     let d: &dyn Display = &mut 3;\n-    // FIXME(chalk) should be able to call d.to_string() as well, but doing so\n-    // requires Chalk to be able to prove trait object well-formed goals.\n+    d.to_string();\n     (&d).to_string();\n     let f: &dyn Fn(i32) -> _ = &|x| x + x;\n     f(2);"}, {"sha": "2a4b6f3b76f90b7119fae794caf481c1b4187f88", "filename": "src/test/ui/consts/const-eval/ub-nonnull.chalk.64bit.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.chalk.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.chalk.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.chalk.64bit.stderr?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -0,0 +1,9 @@\n+error[E0284]: type annotations needed: cannot satisfy `<usize as SliceIndex<[u8]>>::Output == _`\n+  --> $DIR/ub-nonnull.rs:19:30\n+   |\n+LL |     let out_of_bounds_ptr = &ptr[255];\n+   |                              ^^^^^^^^ cannot satisfy `<usize as SliceIndex<[u8]>>::Output == _`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0284`."}, {"sha": "39352ca848a8020cc23b557aaadff070679d03ab", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.chalk.64bit.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.chalk.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.chalk.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.chalk.64bit.stderr?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -0,0 +1,9 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/ub-wide-ptr.rs:90:67\n+   |\n+LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n+   |                                                                   ^^^^^^^^^^^^^^ cannot infer type for type parameter `U` declared on the function `transmute`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "4b1cbe80c506dabfa6c7432f7d4def8caac36f69", "filename": "src/test/ui/deriving/deriving-associated-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fderiving%2Fderiving-associated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fderiving%2Fderiving-associated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-associated-types.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-compare-mode-chalk\n pub trait DeclaredTrait {\n     type Type;\n }"}, {"sha": "da45f0d133deb955110f952a392c4acb68efb8dd", "filename": "src/test/ui/impl-trait/example-calendar.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fimpl-trait%2Fexample-calendar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fimpl-trait%2Fexample-calendar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexample-calendar.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-compare-mode-chalk\n \n #![feature(fn_traits,\n            step_trait,"}, {"sha": "17a6a85787442cf8489e2bb712af3a57c4362ac6", "filename": "src/test/ui/impl-trait/issue-55872-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,5 +1,4 @@\n // edition:2018\n-// ignore-compare-mode-chalk\n \n #![feature(type_alias_impl_trait)]\n "}, {"sha": "b76b564dfb139352cd83be0a07b8d560c69b0d0d", "filename": "src/test/ui/impl-trait/issue-55872-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `impl Future<Output = [async output]>: Copy` is not satisfied\n-  --> $DIR/issue-55872-2.rs:14:20\n+  --> $DIR/issue-55872-2.rs:13:20\n    |\n LL |     fn foo<T>() -> Self::E {\n    |                    ^^^^^^^ the trait `Copy` is not implemented for `impl Future<Output = [async output]>`\n \n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872-2.rs:14:28\n+  --> $DIR/issue-55872-2.rs:13:28\n    |\n LL |       fn foo<T>() -> Self::E {\n    |  ____________________________^"}, {"sha": "183728b0f7f0a5224386c52da030a73c3899ea6d", "filename": "src/test/ui/impl-trait/issue-55872.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,4 +1,3 @@\n-// ignore-compare-mode-chalk\n #![feature(type_alias_impl_trait)]\n \n pub trait Bar {"}, {"sha": "39d870dc003bb580de5d2e8f0cc66cd99141bdd3", "filename": "src/test/ui/impl-trait/issue-55872.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.stderr?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,5 +1,5 @@\n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872.rs:13:28\n+  --> $DIR/issue-55872.rs:12:28\n    |\n LL |       fn foo<T>() -> Self::E {\n    |  ____________________________^"}, {"sha": "b947fc1d2396faca035781daa60a7ed5b4dda046", "filename": "src/test/ui/impl-trait/issues/issue-65581.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-65581.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-65581.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-65581.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,4 +1,5 @@\n // check-pass\n+// ignore-compare-mode-chalk\n \n #![allow(dead_code)]\n "}, {"sha": "7fe0900ed5fde143d23b9553d1a0208db49b357a", "filename": "src/test/ui/issues/issue-23122-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,10 +1,10 @@\n-// ignore-compare-mode-chalk\n-\n trait Next {\n     type Next: Next;\n }\n \n-struct GetNext<T: Next> { t: T }\n+struct GetNext<T: Next> {\n+    t: T,\n+}\n \n impl<T: Next> Next for GetNext<T> {\n     type Next = <GetNext<T> as Next>::Next;"}, {"sha": "95e1f60d8b029b607d7dacc9a0785ce84f9c534c", "filename": "src/test/ui/issues/issue-23122-2.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,9 +1,10 @@\n-// ignore-compare-mode-chalk\n trait Next {\n     type Next: Next;\n }\n \n-struct GetNext<T: Next> { t: T }\n+struct GetNext<T: Next> {\n+    t: T,\n+}\n \n impl<T: Next> Next for GetNext<T> {\n     type Next = <GetNext<T::Next> as Next>::Next;"}, {"sha": "7519e632d5446ac10cd64a698b6199bac31214ac", "filename": "src/test/ui/issues/issue-23122-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,12 +1,12 @@\n error[E0275]: overflow evaluating the requirement `<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next: Sized`\n-  --> $DIR/issue-23122-2.rs:9:17\n+  --> $DIR/issue-23122-2.rs:10:17\n    |\n LL |     type Next = <GetNext<T::Next> as Next>::Next;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_23122_2`)\n note: required because of the requirements on the impl of `Next` for `GetNext<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next>`\n-  --> $DIR/issue-23122-2.rs:8:15\n+  --> $DIR/issue-23122-2.rs:9:15\n    |\n LL | impl<T: Next> Next for GetNext<T> {\n    |               ^^^^     ^^^^^^^^^^"}, {"sha": "1241fb0b1f85f88bee59636c155911ea3e0fd0f5", "filename": "src/test/ui/issues/issue-28561.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fissues%2Fissue-28561.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fissues%2Fissue-28561.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28561.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,5 +1,4 @@\n // check-pass\n-// ignore-compare-mode-chalk\n #[derive(Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]\n struct Array<T> {\n     f00: [T; 00],"}, {"sha": "8db9e00588564c3ca4c102feb72598ae6eb9429c", "filename": "src/test/ui/issues/issue-33187.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fissues%2Fissue-33187.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fissues%2Fissue-33187.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33187.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,10 +1,15 @@\n // run-pass\n-// ignore-compare-mode-chalk\n+\n struct Foo<A: Repr>(<A as Repr>::Data);\n \n-impl<A> Copy for Foo<A> where <A as Repr>::Data: Copy { }\n-impl<A> Clone for Foo<A> where <A as Repr>::Data: Clone {\n-    fn clone(&self) -> Self { Foo(self.0.clone()) }\n+impl<A> Copy for Foo<A> where <A as Repr>::Data: Copy {}\n+impl<A> Clone for Foo<A>\n+where\n+    <A as Repr>::Data: Clone,\n+{\n+    fn clone(&self) -> Self {\n+        Foo(self.0.clone())\n+    }\n }\n \n trait Repr {\n@@ -15,5 +20,4 @@ impl<A> Repr for A {\n     type Data = u32;\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "9cae6cf5e7665ced8faeb73dab67ad3676e0b3c0", "filename": "src/test/ui/issues/issue-37051.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fissues%2Fissue-37051.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fissues%2Fissue-37051.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37051.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,5 +1,4 @@\n // check-pass\n-// ignore-compare-mode-chalk\n \n #![feature(associated_type_defaults)]\n "}, {"sha": "5809a56cd4b6b638d5f6811fd8b72d28aebae0ab", "filename": "src/test/ui/issues/issue-55796.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fissues%2Fissue-55796.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fissues%2Fissue-55796.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.nll.stderr?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-55796.rs:18:9\n+  --> $DIR/issue-55796.rs:16:9\n    |\n LL | pub trait Graph<'a> {\n    |                 -- lifetime `'a` defined here\n@@ -8,7 +8,7 @@ LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/issue-55796.rs:23:9\n+  --> $DIR/issue-55796.rs:21:9\n    |\n LL | pub trait Graph<'a> {\n    |                 -- lifetime `'a` defined here"}, {"sha": "d802ce3b6cfbf88f70715c8436d79afd35c34e6a", "filename": "src/test/ui/issues/issue-55796.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,5 +1,3 @@\n-// ignore-compare-mode-chalk\n-\n pub trait EdgeTrait<N> {\n     fn target(&self) -> N;\n }\n@@ -16,12 +14,12 @@ pub trait Graph<'a> {\n \n     fn out_neighbors(&'a self, u: &Self::Node) -> Box<dyn Iterator<Item = Self::Node>> {\n         Box::new(self.out_edges(u).map(|e| e.target()))\n-//~^ ERROR cannot infer\n+        //~^ ERROR cannot infer\n     }\n \n     fn in_neighbors(&'a self, u: &Self::Node) -> Box<dyn Iterator<Item = Self::Node>> {\n         Box::new(self.in_edges(u).map(|e| e.target()))\n-//~^ ERROR cannot infer\n+        //~^ ERROR cannot infer\n     }\n }\n "}, {"sha": "569a13f45bce8580fbd013d176e9bdf017e061fe", "filename": "src/test/ui/issues/issue-55796.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,47 +1,47 @@\n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/issue-55796.rs:18:9\n+  --> $DIR/issue-55796.rs:16:9\n    |\n LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n-  --> $DIR/issue-55796.rs:7:17\n+  --> $DIR/issue-55796.rs:5:17\n    |\n LL | pub trait Graph<'a> {\n    |                 ^^\n-note: ...so that the type `Map<<Self as Graph<'a>>::EdgesIter, [closure@$DIR/issue-55796.rs:18:40: 18:54]>` will meet its required lifetime bounds\n-  --> $DIR/issue-55796.rs:18:9\n+note: ...so that the type `Map<<Self as Graph<'a>>::EdgesIter, [closure@$DIR/issue-55796.rs:16:40: 16:54]>` will meet its required lifetime bounds\n+  --> $DIR/issue-55796.rs:16:9\n    |\n LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that the types are compatible\n-  --> $DIR/issue-55796.rs:18:9\n+  --> $DIR/issue-55796.rs:16:9\n    |\n LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected `Box<(dyn Iterator<Item = <Self as Graph<'a>>::Node> + 'static)>`\n               found `Box<dyn Iterator<Item = <Self as Graph<'a>>::Node>>`\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/issue-55796.rs:23:9\n+  --> $DIR/issue-55796.rs:21:9\n    |\n LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n-  --> $DIR/issue-55796.rs:7:17\n+  --> $DIR/issue-55796.rs:5:17\n    |\n LL | pub trait Graph<'a> {\n    |                 ^^\n-note: ...so that the type `Map<<Self as Graph<'a>>::EdgesIter, [closure@$DIR/issue-55796.rs:23:39: 23:53]>` will meet its required lifetime bounds\n-  --> $DIR/issue-55796.rs:23:9\n+note: ...so that the type `Map<<Self as Graph<'a>>::EdgesIter, [closure@$DIR/issue-55796.rs:21:39: 21:53]>` will meet its required lifetime bounds\n+  --> $DIR/issue-55796.rs:21:9\n    |\n LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that the types are compatible\n-  --> $DIR/issue-55796.rs:23:9\n+  --> $DIR/issue-55796.rs:21:9\n    |\n LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "36e9932602fb035ae668baa819915bbb57b88f7a", "filename": "src/test/ui/issues/issue-74564-if-expr-stack-overflow.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fissues%2Fissue-74564-if-expr-stack-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fissues%2Fissue-74564-if-expr-stack-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-74564-if-expr-stack-overflow.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,6 +1,5 @@\n // build-pass\n // ignore-tidy-filelength\n-// ignore-compare-mode-chalk\n #![crate_type = \"rlib\"]\n \n fn banana(v: &str) -> u32 {"}, {"sha": "5109a0e4a683de41ab74b825f5589f5b709011dc", "filename": "src/test/ui/nll/ty-outlives/issue-53789-2.rs", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fissue-53789-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fissue-53789-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fissue-53789-2.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,16 +1,14 @@\n // Regression test for #53789.\n //\n // check-pass\n-// ignore-compare-mode-chalk\n \n+use std::cmp::Ord;\n use std::collections::BTreeMap;\n use std::ops::Range;\n-use std::cmp::Ord;\n \n macro_rules! valuetree {\n     () => {\n-        type ValueTree =\n-            <Self::Strategy as $crate::Strategy>::Value;\n+        type ValueTree = <Self::Strategy as $crate::Strategy>::Value;\n     };\n }\n \n@@ -41,7 +39,9 @@ macro_rules! product_type {\n macro_rules! default {\n     ($type: ty, $val: expr) => {\n         impl Default for $type {\n-            fn default() -> Self { $val.into() }\n+            fn default() -> Self {\n+                $val.into()\n+            }\n         }\n     };\n }\n@@ -90,21 +90,17 @@ trait ValueTree {\n }\n \n trait Strategy {\n-    type Value : ValueTree;\n+    type Value: ValueTree;\n }\n \n #[derive(Clone)]\n-struct VecStrategy<T : Strategy> {\n+struct VecStrategy<T: Strategy> {\n     element: T,\n     size: Range<usize>,\n }\n \n-fn vec<T : Strategy>(element: T, size: Range<usize>)\n-                     -> VecStrategy<T> {\n-    VecStrategy {\n-        element: element,\n-        size: size,\n-    }\n+fn vec<T: Strategy>(element: T, size: Range<usize>) -> VecStrategy<T> {\n+    VecStrategy { element: element, size: size }\n }\n \n type ValueFor<S> = <<S as Strategy>::Value as ValueTree>::Value;\n@@ -124,7 +120,6 @@ type StrategyType<'a, A> = <A as Arbitrary<'a>>::Strategy;\n struct SizeBounds(Range<usize>);\n default!(SizeBounds, 0..100);\n \n-\n impl From<Range<usize>> for SizeBounds {\n     fn from(high: Range<usize>) -> Self {\n         unimplemented!()\n@@ -137,24 +132,26 @@ impl From<SizeBounds> for Range<usize> {\n     }\n }\n \n-\n-fn any_with<'a, A: Arbitrary<'a>>(args: A::Parameters)\n-                                  -> StrategyType<'a, A> {\n+fn any_with<'a, A: Arbitrary<'a>>(args: A::Parameters) -> StrategyType<'a, A> {\n     unimplemented!()\n }\n \n-impl<K: ValueTree, V: ValueTree> Strategy for (K, V) where\n-    <K as ValueTree>::Value: Ord {\n+impl<K: ValueTree, V: ValueTree> Strategy for (K, V)\n+where\n+    <K as ValueTree>::Value: Ord,\n+{\n     type Value = TupleValueTree<(K, V)>;\n }\n \n-impl<K: ValueTree, V: ValueTree> ValueTree for TupleValueTree<(K, V)> where\n-    <K as ValueTree>::Value: Ord {\n+impl<K: ValueTree, V: ValueTree> ValueTree for TupleValueTree<(K, V)>\n+where\n+    <K as ValueTree>::Value: Ord,\n+{\n     type Value = BTreeMapValueTree<K, V>;\n }\n \n #[derive(Clone)]\n-struct VecValueTree<T : ValueTree> {\n+struct VecValueTree<T: ValueTree> {\n     elements: Vec<T>,\n }\n \n@@ -185,8 +182,8 @@ impl<'a, A, B> Arbitrary<'a> for BTreeMap<A, B>\n where\n     A: Arbitrary<'static> + Ord,\n     B: Arbitrary<'static>,\n-StrategyFor<A>: 'static,\n-StrategyFor<B>: 'static,\n+    StrategyFor<A>: 'static,\n+    StrategyFor<B>: 'static,\n {\n     valuetree!();\n     type Parameters = RangedParams2<A::Parameters, B::Parameters>;\n@@ -208,10 +205,14 @@ mapfn! {\n     }\n }\n \n-fn btree_map<K : Strategy + 'static, V : Strategy + 'static>\n-    (key: K, value: V, size: Range<usize>)\n-     -> BTreeMapStrategy<K, V>\n-where ValueFor<K> : Ord {\n+fn btree_map<K: Strategy + 'static, V: Strategy + 'static>(\n+    key: K,\n+    value: V,\n+    size: Range<usize>,\n+) -> BTreeMapStrategy<K, V>\n+where\n+    ValueFor<K>: Ord,\n+{\n     unimplemented!()\n }\n \n@@ -245,4 +246,4 @@ mod statics {\n     }\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "c043114b565c8945a3ae406553c536775723e63d", "filename": "src/test/ui/specialization/default-associated-type-bound-1.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-1.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,6 +1,5 @@\n // Check that we check that default associated types satisfy the required\n // bounds on them.\n-// ignore-compare-mode-chalk\n \n #![feature(specialization)]\n //~^ WARNING `specialization` is incomplete", "previous_filename": "src/test/ui/specialization/deafult-associated-type-bound-1.rs"}, {"sha": "6680a29f94245eb27f5c1aa74230dd4f140c06b2", "filename": "src/test/ui/specialization/default-associated-type-bound-1.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-1.stderr?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/deafult-associated-type-bound-1.rs:5:12\n+  --> $DIR/default-associated-type-bound-1.rs:4:12\n    |\n LL | #![feature(specialization)]\n    |            ^^^^^^^^^^^^^^\n@@ -9,13 +9,13 @@ LL | #![feature(specialization)]\n    = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0277]: the trait bound `str: Clone` is not satisfied\n-  --> $DIR/deafult-associated-type-bound-1.rs:19:22\n+  --> $DIR/default-associated-type-bound-1.rs:18:22\n    |\n LL |     default type U = str;\n    |                      ^^^ the trait `Clone` is not implemented for `str`\n    |\n note: required by a bound in `X::U`\n-  --> $DIR/deafult-associated-type-bound-1.rs:9:13\n+  --> $DIR/default-associated-type-bound-1.rs:8:13\n    |\n LL |     type U: Clone;\n    |             ^^^^^ required by this bound in `X::U`", "previous_filename": "src/test/ui/specialization/deafult-associated-type-bound-1.stderr"}, {"sha": "0a21b1f09106ba36feeef0cd479eb277603586ba", "filename": "src/test/ui/specialization/default-associated-type-bound-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-2.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "previous_filename": "src/test/ui/specialization/deafult-associated-type-bound-2.rs"}, {"sha": "0fd1f65b0a2014709e6290cbca5c92964761853a", "filename": "src/test/ui/specialization/default-associated-type-bound-2.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-2.stderr?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/deafult-associated-type-bound-2.rs:2:12\n+  --> $DIR/default-associated-type-bound-2.rs:2:12\n    |\n LL | #![feature(specialization)]\n    |            ^^^^^^^^^^^^^^\n@@ -9,14 +9,14 @@ LL | #![feature(specialization)]\n    = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0277]: can't compare `&'static B` with `B`\n-  --> $DIR/deafult-associated-type-bound-2.rs:16:22\n+  --> $DIR/default-associated-type-bound-2.rs:16:22\n    |\n LL |     default type U = &'static B;\n    |                      ^^^^^^^^^^ no implementation for `&'static B == B`\n    |\n    = help: the trait `PartialEq<B>` is not implemented for `&'static B`\n note: required by a bound in `X::U`\n-  --> $DIR/deafult-associated-type-bound-2.rs:6:13\n+  --> $DIR/default-associated-type-bound-2.rs:6:13\n    |\n LL |     type U: PartialEq<T>;\n    |             ^^^^^^^^^^^^ required by this bound in `X::U`", "previous_filename": "src/test/ui/specialization/deafult-associated-type-bound-2.stderr"}, {"sha": "0f5714e996a17cef78e0dd3c6112882e72c57db3", "filename": "src/test/ui/specialization/default-generic-associated-type-bound.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fspecialization%2Fdefault-generic-associated-type-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fspecialization%2Fdefault-generic-associated-type-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefault-generic-associated-type-bound.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "previous_filename": "src/test/ui/specialization/deafult-generic-associated-type-bound.rs"}, {"sha": "58c6667c8c7ad651b525da7ab18729a68df71862", "filename": "src/test/ui/specialization/default-generic-associated-type-bound.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fspecialization%2Fdefault-generic-associated-type-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Fspecialization%2Fdefault-generic-associated-type-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefault-generic-associated-type-bound.stderr?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/deafult-generic-associated-type-bound.rs:3:12\n+  --> $DIR/default-generic-associated-type-bound.rs:3:12\n    |\n LL | #![feature(specialization)]\n    |            ^^^^^^^^^^^^^^\n@@ -9,14 +9,14 @@ LL | #![feature(specialization)]\n    = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0277]: can't compare `T` with `T`\n-  --> $DIR/deafult-generic-associated-type-bound.rs:18:26\n+  --> $DIR/default-generic-associated-type-bound.rs:18:26\n    |\n LL |     default type U<'a> = &'a T;\n    |                          ^^^^^ no implementation for `T == T`\n    |\n    = note: required because of the requirements on the impl of `PartialEq` for `&'a T`\n note: required by a bound in `X::U`\n-  --> $DIR/deafult-generic-associated-type-bound.rs:8:17\n+  --> $DIR/default-generic-associated-type-bound.rs:8:17\n    |\n LL |     type U<'a>: PartialEq<&'a Self> where Self: 'a;\n    |                 ^^^^^^^^^^^^^^^^^^^ required by this bound in `X::U`", "previous_filename": "src/test/ui/specialization/deafult-generic-associated-type-bound.stderr"}, {"sha": "f936dc42f133d0af0fc012b06d855dd54b4be427", "filename": "src/test/ui/type-alias-impl-trait/issue-53598.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,4 +1,3 @@\n-// ignore-compare-mode-chalk\n #![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;"}, {"sha": "9971c7e0e20ee16ee809ebb6318fb454f8233490", "filename": "src/test/ui/type-alias-impl-trait/issue-53598.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.stderr?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,5 +1,5 @@\n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-53598.rs:20:42\n+  --> $DIR/issue-53598.rs:19:42\n    |\n LL |       fn foo<T: Debug>(_: T) -> Self::Item {\n    |  __________________________________________^"}, {"sha": "13a6b7c2f7ceb1706a27be93e232c557bcb26d7f", "filename": "src/test/ui/type-alias-impl-trait/issue-57700.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,4 +1,3 @@\n-// ignore-compare-mode-chalk\n #![feature(arbitrary_self_types)]\n #![feature(type_alias_impl_trait)]\n "}, {"sha": "b2e3f46f1f5823bebe23ad90879ee45f5c82c15d", "filename": "src/test/ui/type-alias-impl-trait/issue-57700.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.stderr?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,5 +1,5 @@\n error: type parameter `impl Deref<Target = Self>` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-57700.rs:16:58\n+  --> $DIR/issue-57700.rs:15:58\n    |\n LL |       fn foo(self: impl Deref<Target = Self>) -> Self::Bar {\n    |  __________________________________________________________^"}, {"sha": "badf35484f3604c737c38b56a64c575f34b4d988", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,5 +1,3 @@\n-// ignore-compare-mode-chalk\n-\n trait Bug {\n     type Item: Bug;\n "}, {"sha": "dc8a381aece9411300d61c334140986d94a65523", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f718b516900105ccfce2b32c915b3c3b1a136a1c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr?ref=f718b516900105ccfce2b32c915b3c3b1a136a1c", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/issue-60371.rs:10:17\n+  --> $DIR/issue-60371.rs:8:17\n    |\n LL |     type Item = impl Bug;\n    |                 ^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     type Item = impl Bug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `(): Bug` is not satisfied\n-  --> $DIR/issue-60371.rs:12:40\n+  --> $DIR/issue-60371.rs:10:40\n    |\n LL |     const FUN: fn() -> Self::Item = || ();\n    |                                        ^ the trait `Bug` is not implemented for `()`\n@@ -17,7 +17,7 @@ LL |     const FUN: fn() -> Self::Item = || ();\n              <&() as Bug>\n \n error: non-defining opaque type use in defining scope\n-  --> $DIR/issue-60371.rs:12:37\n+  --> $DIR/issue-60371.rs:10:37\n    |\n LL | impl Bug for &() {\n    |              - cannot use static lifetime; use a bound lifetime instead or remove the lifetime parameter from the opaque type"}]}