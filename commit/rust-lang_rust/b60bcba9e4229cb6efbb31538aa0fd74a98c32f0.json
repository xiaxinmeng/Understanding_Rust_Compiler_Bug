{"sha": "b60bcba9e4229cb6efbb31538aa0fd74a98c32f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MGJjYmE5ZTQyMjljYjZlZmJiMzE1MzhhYTBmZDc0YTk4YzMyZjA=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-03T08:38:17Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-03T23:48:24Z"}, "message": "Make `ast::ExprKind` smaller.", "tree": {"sha": "daf2b60410b0389903f623f82119561a2dfd05da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/daf2b60410b0389903f623f82119561a2dfd05da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b60bcba9e4229cb6efbb31538aa0fd74a98c32f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b60bcba9e4229cb6efbb31538aa0fd74a98c32f0", "html_url": "https://github.com/rust-lang/rust/commit/b60bcba9e4229cb6efbb31538aa0fd74a98c32f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b60bcba9e4229cb6efbb31538aa0fd74a98c32f0/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e9bf12c6f22661f48e160a8bc23be0e72eff538", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e9bf12c6f22661f48e160a8bc23be0e72eff538", "html_url": "https://github.com/rust-lang/rust/commit/6e9bf12c6f22661f48e160a8bc23be0e72eff538"}], "stats": {"total": 106, "additions": 43, "deletions": 63}, "files": [{"sha": "105a9e099b1a4e50af9c1f30cabd518f25f53a88", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 24, "deletions": 30, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b60bcba9e4229cb6efbb31538aa0fd74a98c32f0/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60bcba9e4229cb6efbb31538aa0fd74a98c32f0/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=b60bcba9e4229cb6efbb31538aa0fd74a98c32f0", "patch": "@@ -1208,36 +1208,30 @@ impl<'a> LoweringContext<'a> {\n                 ExprKind::Break(opt_ident) => hir::ExprBreak(self.lower_opt_sp_ident(opt_ident)),\n                 ExprKind::Continue(opt_ident) => hir::ExprAgain(self.lower_opt_sp_ident(opt_ident)),\n                 ExprKind::Ret(ref e) => hir::ExprRet(e.as_ref().map(|x| self.lower_expr(x))),\n-                ExprKind::InlineAsm(InlineAsm {\n-                        ref inputs,\n-                        ref outputs,\n-                        ref asm,\n-                        asm_str_style,\n-                        ref clobbers,\n-                        volatile,\n-                        alignstack,\n-                        dialect,\n-                        expn_id,\n-                    }) => hir::ExprInlineAsm(P(hir::InlineAsm {\n-                    inputs: inputs.iter().map(|&(ref c, _)| c.clone()).collect(),\n-                    outputs: outputs.iter()\n-                                    .map(|out| {\n-                                        hir::InlineAsmOutput {\n-                                            constraint: out.constraint.clone(),\n-                                            is_rw: out.is_rw,\n-                                            is_indirect: out.is_indirect,\n-                                        }\n-                                    })\n-                                    .collect(),\n-                    asm: asm.clone(),\n-                    asm_str_style: asm_str_style,\n-                    clobbers: clobbers.clone().into(),\n-                    volatile: volatile,\n-                    alignstack: alignstack,\n-                    dialect: dialect,\n-                    expn_id: expn_id,\n-                }), outputs.iter().map(|out| self.lower_expr(&out.expr)).collect(),\n-                   inputs.iter().map(|&(_, ref input)| self.lower_expr(input)).collect()),\n+                ExprKind::InlineAsm(ref asm) => {\n+                    let hir_asm = hir::InlineAsm {\n+                        inputs: asm.inputs.iter().map(|&(ref c, _)| c.clone()).collect(),\n+                        outputs: asm.outputs.iter().map(|out| {\n+                            hir::InlineAsmOutput {\n+                                constraint: out.constraint.clone(),\n+                                is_rw: out.is_rw,\n+                                is_indirect: out.is_indirect,\n+                            }\n+                        }).collect(),\n+                        asm: asm.asm.clone(),\n+                        asm_str_style: asm.asm_str_style,\n+                        clobbers: asm.clobbers.clone().into(),\n+                        volatile: asm.volatile,\n+                        alignstack: asm.alignstack,\n+                        dialect: asm.dialect,\n+                        expn_id: asm.expn_id,\n+                    };\n+                    let outputs =\n+                        asm.outputs.iter().map(|out| self.lower_expr(&out.expr)).collect();\n+                    let inputs =\n+                        asm.inputs.iter().map(|&(_, ref input)| self.lower_expr(input)).collect();\n+                    hir::ExprInlineAsm(P(hir_asm), outputs, inputs)\n+                }\n                 ExprKind::Struct(ref path, ref fields, ref maybe_expr) => {\n                     hir::ExprStruct(self.lower_path(path),\n                                     fields.iter().map(|x| self.lower_field(x)).collect(),"}, {"sha": "f7581924eb19fadb7770d73ef468420098ad767e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b60bcba9e4229cb6efbb31538aa0fd74a98c32f0/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60bcba9e4229cb6efbb31538aa0fd74a98c32f0/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b60bcba9e4229cb6efbb31538aa0fd74a98c32f0", "patch": "@@ -1050,7 +1050,7 @@ pub enum ExprKind {\n     Ret(Option<P<Expr>>),\n \n     /// Output of the `asm!()` macro\n-    InlineAsm(InlineAsm),\n+    InlineAsm(P<InlineAsm>),\n \n     /// A macro invocation; pre-expansion\n     Mac(Mac),"}, {"sha": "1deeaf422316c29391b7dd63f8d0b6ebd9d8f817", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 16, "deletions": 30, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b60bcba9e4229cb6efbb31538aa0fd74a98c32f0/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60bcba9e4229cb6efbb31538aa0fd74a98c32f0/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=b60bcba9e4229cb6efbb31538aa0fd74a98c32f0", "patch": "@@ -1249,36 +1249,22 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span, attrs}: Expr, folder: &mu\n                        folder.fold_ident(label.node)))\n             ),\n             ExprKind::Ret(e) => ExprKind::Ret(e.map(|x| folder.fold_expr(x))),\n-            ExprKind::InlineAsm(InlineAsm {\n-                inputs,\n-                outputs,\n-                asm,\n-                asm_str_style,\n-                clobbers,\n-                volatile,\n-                alignstack,\n-                dialect,\n-                expn_id,\n-            }) => ExprKind::InlineAsm(InlineAsm {\n-                inputs: inputs.move_map(|(c, input)| {\n-                    (c, folder.fold_expr(input))\n-                }),\n-                outputs: outputs.move_map(|out| {\n-                    InlineAsmOutput {\n-                        constraint: out.constraint,\n-                        expr: folder.fold_expr(out.expr),\n-                        is_rw: out.is_rw,\n-                        is_indirect: out.is_indirect,\n-                    }\n-                }),\n-                asm: asm,\n-                asm_str_style: asm_str_style,\n-                clobbers: clobbers,\n-                volatile: volatile,\n-                alignstack: alignstack,\n-                dialect: dialect,\n-                expn_id: expn_id,\n-            }),\n+            ExprKind::InlineAsm(asm) => ExprKind::InlineAsm(asm.map(|asm| {\n+                InlineAsm {\n+                    inputs: asm.inputs.move_map(|(c, input)| {\n+                        (c, folder.fold_expr(input))\n+                    }),\n+                    outputs: asm.outputs.move_map(|out| {\n+                        InlineAsmOutput {\n+                            constraint: out.constraint,\n+                            expr: folder.fold_expr(out.expr),\n+                            is_rw: out.is_rw,\n+                            is_indirect: out.is_indirect,\n+                        }\n+                    }),\n+                    ..asm\n+                }\n+            })),\n             ExprKind::Mac(mac) => ExprKind::Mac(folder.fold_mac(mac)),\n             ExprKind::Struct(path, fields, maybe_expr) => {\n                 ExprKind::Struct(folder.fold_path(path),"}, {"sha": "e4d0cb74046037a9407e421640445adaaacb8d16", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b60bcba9e4229cb6efbb31538aa0fd74a98c32f0/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60bcba9e4229cb6efbb31538aa0fd74a98c32f0/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=b60bcba9e4229cb6efbb31538aa0fd74a98c32f0", "patch": "@@ -250,7 +250,7 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt,\n \n     MacEager::expr(P(ast::Expr {\n         id: ast::DUMMY_NODE_ID,\n-        node: ast::ExprKind::InlineAsm(ast::InlineAsm {\n+        node: ast::ExprKind::InlineAsm(P(ast::InlineAsm {\n             asm: token::intern_and_get_ident(&asm),\n             asm_str_style: asm_str_style.unwrap(),\n             outputs: outputs,\n@@ -260,7 +260,7 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt,\n             alignstack: alignstack,\n             dialect: dialect,\n             expn_id: expn_id,\n-        }),\n+        })),\n         span: sp,\n         attrs: ast::ThinVec::new(),\n     }))"}]}