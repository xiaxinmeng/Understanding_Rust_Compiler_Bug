{"sha": "f04a2f4b8e89eac1119061ea2055d33c97e618b4", "node_id": "C_kwDOAAsO6NoAKGYwNGEyZjRiOGU4OWVhYzExMTkwNjFlYTIwNTVkMzNjOTdlNjE4YjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-01T13:33:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-01T13:33:33Z"}, "message": "Auto merge of #91255 - b-naber:normalization-ice, r=jackh276\n\nImplement version of normalize_erasing_regions that allows for normalization failure\n\nFixes https://github.com/rust-lang/rust/issues/59324\nFixes https://github.com/rust-lang/rust/issues/67684\nFixes https://github.com/rust-lang/rust/issues/69398\nFixes https://github.com/rust-lang/rust/issues/71113\nFixes https://github.com/rust-lang/rust/issues/82079\nFixes #85103\nFixes https://github.com/rust-lang/rust/issues/88856\nFixes #91231\nFixes https://github.com/rust-lang/rust/issues/91234\n\nPreviously we called `normalize_erasing_regions` inside `layout_of`. `normalize_erasing_regions` assumes that the normalization succeeds. Since some `layout_of` calls happen before typecheck has finished, we introduce a new variant that allows for returning an error.", "tree": {"sha": "915594a7e1efa285136276bd9bd1a87b81be1365", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/915594a7e1efa285136276bd9bd1a87b81be1365"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f04a2f4b8e89eac1119061ea2055d33c97e618b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f04a2f4b8e89eac1119061ea2055d33c97e618b4", "html_url": "https://github.com/rust-lang/rust/commit/f04a2f4b8e89eac1119061ea2055d33c97e618b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f04a2f4b8e89eac1119061ea2055d33c97e618b4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26b45573be204da2cc0db12828b7a03c41c73793", "url": "https://api.github.com/repos/rust-lang/rust/commits/26b45573be204da2cc0db12828b7a03c41c73793", "html_url": "https://github.com/rust-lang/rust/commit/26b45573be204da2cc0db12828b7a03c41c73793"}, {"sha": "6952470095180e74d59ae372d06a75818368000b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6952470095180e74d59ae372d06a75818368000b", "html_url": "https://github.com/rust-lang/rust/commit/6952470095180e74d59ae372d06a75818368000b"}], "stats": {"total": 605, "additions": 600, "deletions": 5}, "files": [{"sha": "b20f7357b35b898ac537887318b59999575b6bcf", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f04a2f4b8e89eac1119061ea2055d33c97e618b4/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04a2f4b8e89eac1119061ea2055d33c97e618b4/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=f04a2f4b8e89eac1119061ea2055d33c97e618b4", "patch": "@@ -1337,7 +1337,9 @@ impl<'tcx> LateLintPass<'tcx> for VariantSizeDifferences {\n             let layout = match cx.layout_of(ty) {\n                 Ok(layout) => layout,\n                 Err(\n-                    ty::layout::LayoutError::Unknown(_) | ty::layout::LayoutError::SizeOverflow(_),\n+                    ty::layout::LayoutError::Unknown(_)\n+                    | ty::layout::LayoutError::SizeOverflow(_)\n+                    | ty::layout::LayoutError::NormalizationFailure(_, _),\n                 ) => return,\n             };\n             let (variants, tag) = match layout.variants {"}, {"sha": "8e4a17bfa65cb531c578999f827b596570f9ef6a", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f04a2f4b8e89eac1119061ea2055d33c97e618b4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04a2f4b8e89eac1119061ea2055d33c97e618b4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=f04a2f4b8e89eac1119061ea2055d33c97e618b4", "patch": "@@ -492,9 +492,6 @@ impl dyn MachineStopType {\n     }\n }\n \n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(InterpError<'_>, 64);\n-\n pub enum InterpError<'tcx> {\n     /// The program caused undefined behavior.\n     UndefinedBehavior(UndefinedBehaviorInfo<'tcx>),"}, {"sha": "8667a6bea11f664eae6186f0ebb5fc4ca923d84a", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f04a2f4b8e89eac1119061ea2055d33c97e618b4/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04a2f4b8e89eac1119061ea2055d33c97e618b4/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=f04a2f4b8e89eac1119061ea2055d33c97e618b4", "patch": "@@ -1644,6 +1644,11 @@ rustc_queries! {\n         desc { \"normalizing `{:?}`\", goal }\n     }\n \n+    // FIXME: Implement `normalize_generic_arg_after_erasing_regions` and\n+    // `normalize_mir_const_after_erasing_regions` in terms of\n+    // `try_normalize_generic_arg_after_erasing_regions` and\n+    // `try_normalize_mir_const_after_erasing_regions`, respectively.\n+\n     /// Do not call this query directly: invoke `normalize_erasing_regions` instead.\n     query normalize_generic_arg_after_erasing_regions(\n         goal: ParamEnvAnd<'tcx, GenericArg<'tcx>>\n@@ -1658,6 +1663,20 @@ rustc_queries! {\n         desc { \"normalizing `{}`\", goal.value }\n     }\n \n+    /// Do not call this query directly: invoke `try_normalize_erasing_regions` instead.\n+    query try_normalize_generic_arg_after_erasing_regions(\n+        goal: ParamEnvAnd<'tcx, GenericArg<'tcx>>\n+    ) -> Result<GenericArg<'tcx>, NoSolution> {\n+        desc { \"normalizing `{}`\", goal.value }\n+    }\n+\n+    /// Do not call this query directly: invoke `try_normalize_erasing_regions` instead.\n+    query try_normalize_mir_const_after_erasing_regions(\n+        goal: ParamEnvAnd<'tcx, mir::ConstantKind<'tcx>>\n+    ) -> Result<mir::ConstantKind<'tcx>, NoSolution> {\n+        desc { \"normalizing `{}`\", goal.value }\n+    }\n+\n     query implied_outlives_bounds(\n         goal: CanonicalTyGoal<'tcx>\n     ) -> Result<"}, {"sha": "57506bc68345b7c688f02c93daa8c28530085b0b", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f04a2f4b8e89eac1119061ea2055d33c97e618b4/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04a2f4b8e89eac1119061ea2055d33c97e618b4/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=f04a2f4b8e89eac1119061ea2055d33c97e618b4", "patch": "@@ -1,5 +1,6 @@\n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::mir::{GeneratorLayout, GeneratorSavedLocal};\n+use crate::ty::normalize_erasing_regions::NormalizationError;\n use crate::ty::subst::Subst;\n use crate::ty::{self, subst::SubstsRef, ReprOptions, Ty, TyCtxt, TypeFoldable};\n use rustc_ast as ast;\n@@ -199,6 +200,7 @@ pub const MAX_SIMD_LANES: u64 = 1 << 0xF;\n pub enum LayoutError<'tcx> {\n     Unknown(Ty<'tcx>),\n     SizeOverflow(Ty<'tcx>),\n+    NormalizationFailure(Ty<'tcx>, NormalizationError<'tcx>),\n }\n \n impl<'tcx> fmt::Display for LayoutError<'tcx> {\n@@ -208,16 +210,24 @@ impl<'tcx> fmt::Display for LayoutError<'tcx> {\n             LayoutError::SizeOverflow(ty) => {\n                 write!(f, \"values of the type `{}` are too big for the current architecture\", ty)\n             }\n+            LayoutError::NormalizationFailure(t, e) => write!(\n+                f,\n+                \"unable to determine layout for `{}` because `{}` cannot be normalized\",\n+                t,\n+                e.get_type_for_failure()\n+            ),\n         }\n     }\n }\n \n+#[instrument(skip(tcx, query), level = \"debug\")]\n fn layout_of<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,\n ) -> Result<TyAndLayout<'tcx>, LayoutError<'tcx>> {\n     ty::tls::with_related_context(tcx, move |icx| {\n         let (param_env, ty) = query.into_parts();\n+        debug!(?ty);\n \n         if !tcx.recursion_limit().value_within_limit(icx.layout_depth) {\n             tcx.sess.fatal(&format!(\"overflow representing the type `{}`\", ty));\n@@ -229,7 +239,18 @@ fn layout_of<'tcx>(\n         ty::tls::enter_context(&icx, |_| {\n             let param_env = param_env.with_reveal_all_normalized(tcx);\n             let unnormalized_ty = ty;\n-            let ty = tcx.normalize_erasing_regions(param_env, ty);\n+\n+            // FIXME: We might want to have two different versions of `layout_of`:\n+            // One that can be called after typecheck has completed and can use\n+            // `normalize_erasing_regions` here and another one that can be called\n+            // before typecheck has completed and uses `try_normalize_erasing_regions`.\n+            let ty = match tcx.try_normalize_erasing_regions(param_env, ty) {\n+                Ok(t) => t,\n+                Err(normalization_error) => {\n+                    return Err(LayoutError::NormalizationFailure(ty, normalization_error));\n+                }\n+            };\n+\n             if ty != unnormalized_ty {\n                 // Ensure this layout is also cached for the normalized type.\n                 return tcx.layout_of(param_env.and(ty));"}, {"sha": "fce7cbfbb3d1e58f3e8d6e254eb64b1287cc3d58", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/f04a2f4b8e89eac1119061ea2055d33c97e618b4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04a2f4b8e89eac1119061ea2055d33c97e618b4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=f04a2f4b8e89eac1119061ea2055d33c97e618b4", "patch": "@@ -8,10 +8,28 @@\n //! or constant found within. (This underlying query is what is cached.)\n \n use crate::mir;\n+use crate::traits::query::NoSolution;\n use crate::ty::fold::{TypeFoldable, TypeFolder};\n use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt};\n \n+#[derive(Debug, Copy, Clone, HashStable, TyEncodable, TyDecodable)]\n+pub enum NormalizationError<'tcx> {\n+    Type(Ty<'tcx>),\n+    Const(ty::Const<'tcx>),\n+    ConstantKind(mir::ConstantKind<'tcx>),\n+}\n+\n+impl<'tcx> NormalizationError<'tcx> {\n+    pub fn get_type_for_failure(&self) -> String {\n+        match self {\n+            NormalizationError::Type(t) => format!(\"{}\", t),\n+            NormalizationError::Const(c) => format!(\"{}\", c),\n+            NormalizationError::ConstantKind(ck) => format!(\"{}\", ck),\n+        }\n+    }\n+}\n+\n impl<'tcx> TyCtxt<'tcx> {\n     /// Erase the regions in `value` and then fully normalize all the\n     /// types found within. The result will also have regions erased.\n@@ -32,6 +50,8 @@ impl<'tcx> TyCtxt<'tcx> {\n         // Erase first before we do the real query -- this keeps the\n         // cache from being too polluted.\n         let value = self.erase_regions(value);\n+        debug!(?value);\n+\n         if !value.has_projections() {\n             value\n         } else {\n@@ -41,6 +61,39 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n+    /// Tries to erase the regions in `value` and then fully normalize all the\n+    /// types found within. The result will also have regions erased.\n+    ///\n+    /// Contrary to `normalize_erasing_regions` this function does not assume that normalization\n+    /// succeeds.\n+    pub fn try_normalize_erasing_regions<T>(\n+        self,\n+        param_env: ty::ParamEnv<'tcx>,\n+        value: T,\n+    ) -> Result<T, NormalizationError<'tcx>>\n+    where\n+        T: TypeFoldable<'tcx>,\n+    {\n+        debug!(\n+            \"try_normalize_erasing_regions::<{}>(value={:?}, param_env={:?})\",\n+            std::any::type_name::<T>(),\n+            value,\n+            param_env,\n+        );\n+\n+        // Erase first before we do the real query -- this keeps the\n+        // cache from being too polluted.\n+        let value = self.erase_regions(value);\n+        debug!(?value);\n+\n+        if !value.has_projections() {\n+            Ok(value)\n+        } else {\n+            let mut folder = TryNormalizeAfterErasingRegionsFolder::new(self, param_env);\n+            value.fold_with(&mut folder)\n+        }\n+    }\n+\n     /// If you have a `Binder<'tcx, T>`, you can do this to strip out the\n     /// late-bound regions and then normalize the result, yielding up\n     /// a `T` (with regions erased). This is appropriate when the\n@@ -91,11 +144,14 @@ struct NormalizeAfterErasingRegionsFolder<'tcx> {\n }\n \n impl<'tcx> NormalizeAfterErasingRegionsFolder<'tcx> {\n+    #[instrument(skip(self), level = \"debug\")]\n     fn normalize_generic_arg_after_erasing_regions(\n         &self,\n         arg: ty::GenericArg<'tcx>,\n     ) -> ty::GenericArg<'tcx> {\n         let arg = self.param_env.and(arg);\n+        debug!(?arg);\n+\n         self.tcx.normalize_generic_arg_after_erasing_regions(arg)\n     }\n }\n@@ -126,3 +182,62 @@ impl TypeFolder<'tcx> for NormalizeAfterErasingRegionsFolder<'tcx> {\n         Ok(self.tcx.normalize_mir_const_after_erasing_regions(arg))\n     }\n }\n+\n+struct TryNormalizeAfterErasingRegionsFolder<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+}\n+\n+impl<'tcx> TryNormalizeAfterErasingRegionsFolder<'tcx> {\n+    fn new(tcx: TyCtxt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> Self {\n+        TryNormalizeAfterErasingRegionsFolder { tcx, param_env }\n+    }\n+\n+    #[instrument(skip(self), level = \"debug\")]\n+    fn try_normalize_generic_arg_after_erasing_regions(\n+        &self,\n+        arg: ty::GenericArg<'tcx>,\n+    ) -> Result<ty::GenericArg<'tcx>, NoSolution> {\n+        let arg = self.param_env.and(arg);\n+        debug!(?arg);\n+\n+        self.tcx.try_normalize_generic_arg_after_erasing_regions(arg)\n+    }\n+}\n+\n+impl TypeFolder<'tcx> for TryNormalizeAfterErasingRegionsFolder<'tcx> {\n+    type Error = NormalizationError<'tcx>;\n+\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n+    fn fold_ty(&mut self, ty: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {\n+        match self.try_normalize_generic_arg_after_erasing_regions(ty.into()) {\n+            Ok(t) => Ok(t.expect_ty()),\n+            Err(_) => Err(NormalizationError::Type(ty)),\n+        }\n+    }\n+\n+    fn fold_const(\n+        &mut self,\n+        c: &'tcx ty::Const<'tcx>,\n+    ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {\n+        match self.try_normalize_generic_arg_after_erasing_regions(c.into()) {\n+            Ok(t) => Ok(t.expect_const()),\n+            Err(_) => Err(NormalizationError::Const(*c)),\n+        }\n+    }\n+\n+    fn fold_mir_const(\n+        &mut self,\n+        c: mir::ConstantKind<'tcx>,\n+    ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {\n+        // FIXME: This *probably* needs canonicalization too!\n+        let arg = self.param_env.and(c);\n+        match self.tcx.try_normalize_mir_const_after_erasing_regions(arg) {\n+            Ok(c) => Ok(c),\n+            Err(_) => Err(NormalizationError::ConstantKind(c)),\n+        }\n+    }\n+}"}, {"sha": "4f35909df7f6a8d1ff200a93dad4dcbc21fe5b2c", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f04a2f4b8e89eac1119061ea2055d33c97e618b4/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04a2f4b8e89eac1119061ea2055d33c97e618b4/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=f04a2f4b8e89eac1119061ea2055d33c97e618b4", "patch": "@@ -20,6 +20,14 @@ crate fn provide(p: &mut Providers) {\n         normalize_mir_const_after_erasing_regions: |tcx, goal| {\n             normalize_after_erasing_regions(tcx, goal)\n         },\n+        try_normalize_generic_arg_after_erasing_regions: |tcx, goal| {\n+            debug!(\"try_normalize_generic_arg_after_erasing_regions(goal={:#?}\", goal);\n+\n+            try_normalize_after_erasing_regions(tcx, goal)\n+        },\n+        try_normalize_mir_const_after_erasing_regions: |tcx, goal| {\n+            try_normalize_after_erasing_regions(tcx, goal)\n+        },\n         ..*p\n     };\n }\n@@ -56,6 +64,38 @@ fn normalize_after_erasing_regions<'tcx, T: TypeFoldable<'tcx> + PartialEq + Cop\n     })\n }\n \n+#[instrument(level = \"debug\", skip(tcx))]\n+fn try_normalize_after_erasing_regions<'tcx, T: TypeFoldable<'tcx> + PartialEq + Copy>(\n+    tcx: TyCtxt<'tcx>,\n+    goal: ParamEnvAnd<'tcx, T>,\n+) -> Result<T, NoSolution> {\n+    let ParamEnvAnd { param_env, value } = goal;\n+    tcx.infer_ctxt().enter(|infcx| {\n+        let cause = ObligationCause::dummy();\n+        match infcx.at(&cause, param_env).normalize(value) {\n+            Ok(Normalized { value: normalized_value, obligations: normalized_obligations }) => {\n+                // We don't care about the `obligations`; they are\n+                // always only region relations, and we are about to\n+                // erase those anyway:\n+                debug_assert_eq!(\n+                    normalized_obligations.iter().find(|p| not_outlives_predicate(&p.predicate)),\n+                    None,\n+                );\n+\n+                let resolved_value = infcx.resolve_vars_if_possible(normalized_value);\n+                // It's unclear when `resolve_vars` would have an effect in a\n+                // fresh `InferCtxt`. If this assert does trigger, it will give\n+                // us a test case.\n+                debug_assert_eq!(normalized_value, resolved_value);\n+                let erased = infcx.tcx.erase_regions(resolved_value);\n+                debug_assert!(!erased.needs_infer(), \"{:?}\", erased);\n+                Ok(erased)\n+            }\n+            Err(NoSolution) => Err(NoSolution),\n+        }\n+    })\n+}\n+\n fn not_outlives_predicate(p: &ty::Predicate<'tcx>) -> bool {\n     match p.kind().skip_binder() {\n         ty::PredicateKind::RegionOutlives(..) | ty::PredicateKind::TypeOutlives(..) => false,"}, {"sha": "62fdec15af42091bf4db8381f2d815bf84b09140", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f04a2f4b8e89eac1119061ea2055d33c97e618b4/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04a2f4b8e89eac1119061ea2055d33c97e618b4/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=f04a2f4b8e89eac1119061ea2055d33c97e618b4", "patch": "@@ -1769,6 +1769,13 @@ fn document_type_layout(w: &mut Buffer, cx: &Context<'_>, ty_def_id: DefId) {\n                  the type was too big.</p>\"\n             );\n         }\n+        Err(LayoutError::NormalizationFailure(_, _)) => {\n+            writeln!(\n+                w,\n+                \"<p><strong>Note:</strong> Encountered an error during type layout; \\\n+                the type failed to be normalized.</p>\"\n+            )\n+        }\n     }\n \n     writeln!(w, \"</div>\");"}, {"sha": "9e68e9e77515bc6633b0ad3e8a603f98c765d587", "filename": "src/test/ui/associated-types/issue-59324.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f04a2f4b8e89eac1119061ea2055d33c97e618b4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04a2f4b8e89eac1119061ea2055d33c97e618b4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.rs?ref=f04a2f4b8e89eac1119061ea2055d33c97e618b4", "patch": "@@ -0,0 +1,26 @@\n+trait NotFoo {}\n+\n+pub trait Foo: NotFoo {\n+    type OnlyFoo;\n+}\n+\n+pub trait Service {\n+    type AssocType;\n+}\n+\n+pub trait ThriftService<Bug: NotFoo>:\n+//~^ ERROR the trait bound `Bug: Foo` is not satisfied\n+//~| ERROR the trait bound `Bug: Foo` is not satisfied\n+    Service<AssocType = <Bug as Foo>::OnlyFoo>\n+{\n+    fn get_service(\n+    //~^ ERROR the trait bound `Bug: Foo` is not satisfied\n+    //~| ERROR the trait bound `Bug: Foo` is not satisfied\n+        &self,\n+    ) -> Self::AssocType;\n+}\n+\n+fn with_factory<H>(factory: dyn ThriftService<()>) {}\n+//~^ ERROR the trait bound `(): Foo` is not satisfied\n+\n+fn main() {}"}, {"sha": "2f430d3055e1938d3820856af3c291d0988d808a", "filename": "src/test/ui/associated-types/issue-59324.stderr", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/f04a2f4b8e89eac1119061ea2055d33c97e618b4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f04a2f4b8e89eac1119061ea2055d33c97e618b4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.stderr?ref=f04a2f4b8e89eac1119061ea2055d33c97e618b4", "patch": "@@ -0,0 +1,69 @@\n+error[E0277]: the trait bound `Bug: Foo` is not satisfied\n+  --> $DIR/issue-59324.rs:11:1\n+   |\n+LL | / pub trait ThriftService<Bug: NotFoo>:\n+LL | |\n+LL | |\n+LL | |     Service<AssocType = <Bug as Foo>::OnlyFoo>\n+...  |\n+LL | |     ) -> Self::AssocType;\n+LL | | }\n+   | |_^ the trait `Foo` is not implemented for `Bug`\n+   |\n+help: consider further restricting this bound\n+   |\n+LL | pub trait ThriftService<Bug: NotFoo + Foo>:\n+   |                                     +++++\n+\n+error[E0277]: the trait bound `Bug: Foo` is not satisfied\n+  --> $DIR/issue-59324.rs:11:1\n+   |\n+LL | / pub trait ThriftService<Bug: NotFoo>:\n+LL | |\n+LL | |\n+LL | |     Service<AssocType = <Bug as Foo>::OnlyFoo>\n+...  |\n+LL | |     ) -> Self::AssocType;\n+LL | | }\n+   | |_^ the trait `Foo` is not implemented for `Bug`\n+   |\n+help: consider further restricting this bound\n+   |\n+LL | pub trait ThriftService<Bug: NotFoo + Foo>:\n+   |                                     +++++\n+\n+error[E0277]: the trait bound `Bug: Foo` is not satisfied\n+  --> $DIR/issue-59324.rs:16:5\n+   |\n+LL | /     fn get_service(\n+LL | |\n+LL | |\n+LL | |         &self,\n+LL | |     ) -> Self::AssocType;\n+   | |_________________________^ the trait `Foo` is not implemented for `Bug`\n+   |\n+help: consider further restricting this bound\n+   |\n+LL | pub trait ThriftService<Bug: NotFoo + Foo>:\n+   |                                     +++++\n+\n+error[E0277]: the trait bound `Bug: Foo` is not satisfied\n+  --> $DIR/issue-59324.rs:16:8\n+   |\n+LL |     fn get_service(\n+   |        ^^^^^^^^^^^ the trait `Foo` is not implemented for `Bug`\n+   |\n+help: consider further restricting this bound\n+   |\n+LL | pub trait ThriftService<Bug: NotFoo + Foo>:\n+   |                                     +++++\n+\n+error[E0277]: the trait bound `(): Foo` is not satisfied\n+  --> $DIR/issue-59324.rs:23:29\n+   |\n+LL | fn with_factory<H>(factory: dyn ThriftService<()>) {}\n+   |                             ^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `()`\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "49efe8a1bdaaca43c268d75d9e3ec6d69fb44775", "filename": "src/test/ui/associated-types/issue-67684.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/f04a2f4b8e89eac1119061ea2055d33c97e618b4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-67684.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04a2f4b8e89eac1119061ea2055d33c97e618b4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-67684.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-67684.rs?ref=f04a2f4b8e89eac1119061ea2055d33c97e618b4", "patch": "@@ -0,0 +1,62 @@\n+// check-pass\n+\n+#![allow(dead_code)]\n+\n+trait ParseError {\n+    type StreamError;\n+}\n+\n+impl<T> ParseError for T {\n+    type StreamError = ();\n+}\n+\n+trait Stream {\n+    type Item;\n+    type Error: ParseError;\n+}\n+\n+trait Parser\n+where\n+    <Self as Parser>::PartialState: Default,\n+{\n+    type PartialState;\n+    fn parse_mode(_: &Self, _: Self::PartialState) {\n+        loop {}\n+    }\n+}\n+\n+impl Stream for () {\n+    type Item = ();\n+    type Error = ();\n+}\n+\n+impl Parser for () {\n+    type PartialState = ();\n+}\n+\n+struct AndThen<A, B>(core::marker::PhantomData<(A, B)>);\n+\n+impl<A, B> Parser for AndThen<A, B>\n+where\n+    A: Stream,\n+    B: Into<<A::Error as ParseError>::StreamError>,\n+{\n+    type PartialState = ();\n+}\n+\n+fn expr<A>() -> impl Parser\n+where\n+    A: Stream<Error = <A as Stream>::Item>,\n+{\n+    AndThen::<A, ()>(core::marker::PhantomData)\n+}\n+\n+fn parse_mode_impl<A>()\n+where\n+    <A as Stream>::Error: ParseError,\n+    A: Stream<Error = <A as Stream>::Item>,\n+{\n+    Parser::parse_mode(&expr::<A>(), Default::default())\n+}\n+\n+fn main() {}"}, {"sha": "ca3d66b1c8eb7d9cb96551589f5a97b26da50e31", "filename": "src/test/ui/associated-types/issue-69398.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f04a2f4b8e89eac1119061ea2055d33c97e618b4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-69398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04a2f4b8e89eac1119061ea2055d33c97e618b4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-69398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-69398.rs?ref=f04a2f4b8e89eac1119061ea2055d33c97e618b4", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+\n+pub trait Foo {\n+    type Bar;\n+}\n+\n+pub trait Broken {\n+    type Assoc;\n+    fn broken(&self) where Self::Assoc: Foo;\n+}\n+\n+impl<T> Broken for T {\n+    type Assoc = ();\n+    fn broken(&self) where Self::Assoc: Foo {\n+        let _x: <Self::Assoc as Foo>::Bar;\n+    }\n+}\n+\n+fn main() {\n+    let _m: &dyn Broken<Assoc=()> = &();\n+}"}, {"sha": "48de89127f4a5cd1e8389e63ffa606b5294a0770", "filename": "src/test/ui/associated-types/issue-71113.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f04a2f4b8e89eac1119061ea2055d33c97e618b4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-71113.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04a2f4b8e89eac1119061ea2055d33c97e618b4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-71113.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-71113.rs?ref=f04a2f4b8e89eac1119061ea2055d33c97e618b4", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+use std::borrow::Cow;\n+\n+enum _Recursive<'a>\n+where\n+    Self: ToOwned<Owned=Box<Self>>\n+{\n+    Variant(MyCow<'a, _Recursive<'a>>),\n+}\n+\n+pub struct Wrapper<T>(T);\n+\n+pub struct MyCow<'a, T: ToOwned<Owned=Box<T>> + 'a>(Wrapper<Cow<'a, T>>);\n+\n+fn main() {}"}, {"sha": "590c799c2d71c61ae5368da8343757369676a38b", "filename": "src/test/ui/associated-types/issue-82079.rs", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/f04a2f4b8e89eac1119061ea2055d33c97e618b4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-82079.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04a2f4b8e89eac1119061ea2055d33c97e618b4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-82079.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-82079.rs?ref=f04a2f4b8e89eac1119061ea2055d33c97e618b4", "patch": "@@ -0,0 +1,121 @@\n+// check-pass\n+\n+mod convenience_operators {\n+    use crate::{Op, Relation};\n+    use std::ops::AddAssign;\n+    use std::ops::Mul;\n+\n+    impl<C: Op> Relation<C> {\n+        pub fn map<F: Fn(C::D) -> D2 + 'static, D2: 'static>(\n+            self,\n+            f: F,\n+        ) -> Relation<impl Op<D = D2, R = C::R>> {\n+            self.map_dr(move |x, r| (f(x), r))\n+        }\n+    }\n+\n+    impl<K: 'static, V: 'static, C: Op<D = (K, V)>> Relation<C> {\n+        pub fn semijoin<C2: Op<D = K, R = R2>, R2, R3: AddAssign<R3>>(\n+            self,\n+            other: Relation<C2>,\n+        ) -> Relation<impl Op<D = C::D, R = R3>>\n+        where\n+            C::R: Mul<R2, Output = R3>,\n+        {\n+            self.join(other.map(|x| (x, ()))).map(|(k, x, ())| (k, x))\n+        }\n+    }\n+}\n+\n+mod core {\n+    mod operator {\n+        mod join {\n+            use super::Op;\n+            use crate::core::Relation;\n+            use std::ops::{AddAssign, Mul};\n+            struct Join<LC, RC> {\n+                _left: LC,\n+                _right: RC,\n+            }\n+            impl<\n+                    LC: Op<D = (K, LD), R = LR>,\n+                    RC: Op<D = (K, RD), R = RR>,\n+                    K: 'static,\n+                    LD: 'static,\n+                    LR: AddAssign<LR> + Mul<RR, Output = OR>,\n+                    RD: 'static,\n+                    RR: AddAssign<RR>,\n+                    OR: AddAssign<OR>,\n+                > Op for Join<LC, RC>\n+            {\n+                type D = (K, LD, RD);\n+                type R = OR;\n+            }\n+            impl<K: 'static, D: 'static, C: Op<D = (K, D)>> Relation<C> {\n+                pub fn join<C2: Op<D = (K, D2)>, D2: 'static, OR: AddAssign<OR>>(\n+                    self,\n+                    other: Relation<C2>,\n+                ) -> Relation<impl Op<D = (K, D, D2), R = OR>>\n+                where\n+                    C::R: Mul<C2::R, Output = OR>,\n+                {\n+                    Relation {\n+                        inner: Join {\n+                            _left: self.inner,\n+                            _right: other.inner,\n+                        },\n+                    }\n+                }\n+            }\n+        }\n+        mod map {\n+            use super::Op;\n+            use crate::core::Relation;\n+            use std::ops::AddAssign;\n+            struct Map<C, MF> {\n+                _inner: C,\n+                _op: MF,\n+            }\n+            impl<\n+                    D1,\n+                    R1,\n+                    D2: 'static,\n+                    R2: AddAssign<R2>,\n+                    C: Op<D = D1, R = R1>,\n+                    MF: Fn(D1, R1) -> (D2, R2),\n+                > Op for Map<C, MF>\n+            {\n+                type D = D2;\n+                type R = R2;\n+            }\n+            impl<C: Op> Relation<C> {\n+                pub fn map_dr<F: Fn(C::D, C::R) -> (D2, R2), D2: 'static, R2: AddAssign<R2>>(\n+                    self,\n+                    f: F,\n+                ) -> Relation<impl Op<D = D2, R = R2>> {\n+                    Relation {\n+                        inner: Map {\n+                            _inner: self.inner,\n+                            _op: f,\n+                        },\n+                    }\n+                }\n+            }\n+        }\n+        use std::ops::AddAssign;\n+        pub trait Op {\n+            type D: 'static;\n+            type R: AddAssign<Self::R>;\n+        }\n+    }\n+    pub use self::operator::Op;\n+    #[derive(Clone)]\n+    pub struct Relation<C> {\n+        inner: C,\n+    }\n+}\n+\n+use self::core::Op;\n+pub use self::core::Relation;\n+\n+fn main() {}"}, {"sha": "c5e13856178de7594df00acfe134d0df067262c3", "filename": "src/test/ui/associated-types/issue-85103.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f04a2f4b8e89eac1119061ea2055d33c97e618b4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-85103.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04a2f4b8e89eac1119061ea2055d33c97e618b4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-85103.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-85103.rs?ref=f04a2f4b8e89eac1119061ea2055d33c97e618b4", "patch": "@@ -0,0 +1,9 @@\n+#![feature(rustc_attrs)]\n+\n+use std::borrow::Cow;\n+\n+#[rustc_layout(debug)]\n+type Edges<'a, E> = Cow<'a, [E]>;\n+//~^ ERROR layout error: NormalizationFailure\n+\n+fn main() {}"}, {"sha": "142f3c411ec5c28e3c7388a3fe1ddc99c47722fc", "filename": "src/test/ui/associated-types/issue-85103.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f04a2f4b8e89eac1119061ea2055d33c97e618b4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-85103.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f04a2f4b8e89eac1119061ea2055d33c97e618b4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-85103.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-85103.stderr?ref=f04a2f4b8e89eac1119061ea2055d33c97e618b4", "patch": "@@ -0,0 +1,8 @@\n+error: layout error: NormalizationFailure(<[E] as std::borrow::ToOwned>::Owned, Type(<[E] as std::borrow::ToOwned>::Owned))\n+  --> $DIR/issue-85103.rs:6:1\n+   |\n+LL | type Edges<'a, E> = Cow<'a, [E]>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "7cae7c71cd2d01e0d5419a05d180eea09636bdc6", "filename": "src/test/ui/associated-types/issue-88856.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f04a2f4b8e89eac1119061ea2055d33c97e618b4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-88856.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04a2f4b8e89eac1119061ea2055d33c97e618b4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-88856.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-88856.rs?ref=f04a2f4b8e89eac1119061ea2055d33c97e618b4", "patch": "@@ -0,0 +1,32 @@\n+// check-pass\n+\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+pub trait Trait{\n+    type R;\n+    fn func(self)->Self::R;\n+}\n+\n+pub struct TraitImpl<const N:usize>(pub i32);\n+\n+impl<const N:usize> Trait for TraitImpl<N>\n+where [();N/2]:,\n+{\n+    type R = Self;\n+    fn func(self)->Self::R {\n+        self\n+    }\n+}\n+\n+fn sample<P,Convert>(p:P,f:Convert) -> i32\n+where\n+    P:Trait,Convert:Fn(P::R)->i32\n+{\n+    f(p.func())\n+}\n+\n+fn main() {\n+    let t = TraitImpl::<10>(4);\n+    sample(t,|x|x.0);\n+}"}, {"sha": "3c1cb81f097560a439bacb52e760fadd30749d59", "filename": "src/test/ui/associated-types/issue-91231.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f04a2f4b8e89eac1119061ea2055d33c97e618b4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-91231.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04a2f4b8e89eac1119061ea2055d33c97e618b4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-91231.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-91231.rs?ref=f04a2f4b8e89eac1119061ea2055d33c97e618b4", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+\n+#![feature(extern_types)]\n+#![allow(dead_code)]\n+\n+extern {\n+    type Extern;\n+}\n+\n+trait Trait {\n+    type Type;\n+}\n+\n+#[inline]\n+fn f<'a>(_: <&'a Extern as Trait>::Type) where &'a Extern: Trait {}\n+\n+fn main() {}"}, {"sha": "2f6c2d3aebd0a85b15d4b6ea3734be89aaeb671b", "filename": "src/test/ui/associated-types/issue-91234.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f04a2f4b8e89eac1119061ea2055d33c97e618b4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-91234.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04a2f4b8e89eac1119061ea2055d33c97e618b4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-91234.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-91234.rs?ref=f04a2f4b8e89eac1119061ea2055d33c97e618b4", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+\n+struct Struct;\n+\n+trait Trait {\n+    type Type;\n+}\n+\n+enum Enum<'a> where &'a Struct: Trait {\n+    Variant(<&'a Struct as Trait>::Type)\n+}\n+\n+fn main() {}"}]}