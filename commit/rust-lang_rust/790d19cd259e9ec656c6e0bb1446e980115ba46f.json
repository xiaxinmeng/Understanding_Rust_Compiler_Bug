{"sha": "790d19cd259e9ec656c6e0bb1446e980115ba46f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5MGQxOWNkMjU5ZTllYzY1NmM2ZTBiYjE0NDZlOTgwMTE1YmE0NmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-10T19:26:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-10T19:26:13Z"}, "message": "Auto merge of #77798 - JohnTitor:rollup-82u711m, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #77195 (Link to documentation-specific guidelines.)\n - #77629 (Cleanup of `eat_while()` in lexer)\n - #77709 (Link Vec leak doc to Box)\n - #77738 (fix __rust_alloc_error_handler comment)\n - #77748 (Dead code cleanup in windows-gnu std)\n - #77754 (Add TraitDef::find_map_relevant_impl)\n - #77766 (Clarify the debug-related values should take boolean)\n - #77777 (doc: disambiguate stat in MetadataExt::as_raw_stat)\n - #77782 (Fix typo in error code description)\n - #77787 (Update `changelog-seen` in config.toml.example)\n\nFailed merges:\n\nr? `@ghost`", "tree": {"sha": "c0be1893b9b08186ceb7fe94fbba4b3c3898f547", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0be1893b9b08186ceb7fe94fbba4b3c3898f547"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/790d19cd259e9ec656c6e0bb1446e980115ba46f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/790d19cd259e9ec656c6e0bb1446e980115ba46f", "html_url": "https://github.com/rust-lang/rust/commit/790d19cd259e9ec656c6e0bb1446e980115ba46f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/790d19cd259e9ec656c6e0bb1446e980115ba46f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bc5839e99411aad9061a632b62075d1346cbb3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc5839e99411aad9061a632b62075d1346cbb3b", "html_url": "https://github.com/rust-lang/rust/commit/7bc5839e99411aad9061a632b62075d1346cbb3b"}, {"sha": "c98b3e86c0359526624542a9d3c8be96dfd2cd62", "url": "https://api.github.com/repos/rust-lang/rust/commits/c98b3e86c0359526624542a9d3c8be96dfd2cd62", "html_url": "https://github.com/rust-lang/rust/commit/c98b3e86c0359526624542a9d3c8be96dfd2cd62"}], "stats": {"total": 201, "additions": 76, "deletions": 125}, "files": [{"sha": "a58c16b59e91e3f1318badda8105faa4afa34cca", "filename": "compiler/rustc_error_codes/src/error_codes/E0424.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/790d19cd259e9ec656c6e0bb1446e980115ba46f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0424.md", "raw_url": "https://github.com/rust-lang/rust/raw/790d19cd259e9ec656c6e0bb1446e980115ba46f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0424.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0424.md?ref=790d19cd259e9ec656c6e0bb1446e980115ba46f", "patch": "@@ -21,7 +21,7 @@ impl Foo {\n The `self` keyword can only be used inside methods, which are associated\n functions (functions defined inside of a `trait` or `impl` block) that have a\n `self` receiver as its first parameter, like `self`, `&self`, `&mut self` or\n-`self: &mut Pin<Self>` (this last one is an example of an [\"abitrary `self`\n+`self: &mut Pin<Self>` (this last one is an example of an [\"arbitrary `self`\n type\"](https://github.com/rust-lang/rust/issues/44874)).\n \n Check if the associated function's parameter list should have contained a `self`"}, {"sha": "c5b59a041abf6a99e620ba33397907eccfa488ee", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/790d19cd259e9ec656c6e0bb1446e980115ba46f/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790d19cd259e9ec656c6e0bb1446e980115ba46f/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=790d19cd259e9ec656c6e0bb1446e980115ba46f", "patch": "@@ -48,6 +48,7 @@ impl Token {\n }\n \n /// Enum representing common lexeme types.\n+// perf note: Changing all `usize` to `u32` doesn't change performance. See #77629\n #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]\n pub enum TokenKind {\n     // Multi-char tokens:\n@@ -160,6 +161,7 @@ pub enum LiteralKind {\n /// - `r##~\"abcde\"##`: `InvalidStarter`\n /// - `r###\"abcde\"##`: `NoTerminator { expected: 3, found: 2, possible_terminator_offset: Some(11)`\n /// - Too many `#`s (>65535): `TooManyDelimiters`\n+// perf note: It doesn't matter that this makes `Token` 36 bytes bigger. See #77629\n #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]\n pub enum RawStrError {\n     /// Non `#` characters exist between `r` and `\"` eg. `r#~\"..`\n@@ -689,7 +691,12 @@ impl Cursor<'_> {\n         let mut max_hashes = 0;\n \n         // Count opening '#' symbols.\n-        let n_start_hashes = self.eat_while(|c| c == '#');\n+        let mut eaten = 0;\n+        while self.first() == '#' {\n+            eaten += 1;\n+            self.bump();\n+        }\n+        let n_start_hashes = eaten;\n \n         // Check that string is started.\n         match self.bump() {\n@@ -724,16 +731,11 @@ impl Cursor<'_> {\n             // Note that this will not consume extra trailing `#` characters:\n             // `r###\"abcde\"####` is lexed as a `RawStr { n_hashes: 3 }`\n             // followed by a `#` token.\n-            let mut hashes_left = n_start_hashes;\n-            let is_closing_hash = |c| {\n-                if c == '#' && hashes_left != 0 {\n-                    hashes_left -= 1;\n-                    true\n-                } else {\n-                    false\n-                }\n-            };\n-            let n_end_hashes = self.eat_while(is_closing_hash);\n+            let mut n_end_hashes = 0;\n+            while self.first() == '#' && n_end_hashes < n_start_hashes {\n+                n_end_hashes += 1;\n+                self.bump();\n+            }\n \n             if n_end_hashes == n_start_hashes {\n                 return (n_start_hashes, None);\n@@ -807,17 +809,9 @@ impl Cursor<'_> {\n     }\n \n     /// Eats symbols while predicate returns true or until the end of file is reached.\n-    /// Returns amount of eaten symbols.\n-    fn eat_while<F>(&mut self, mut predicate: F) -> usize\n-    where\n-        F: FnMut(char) -> bool,\n-    {\n-        let mut eaten: usize = 0;\n+    fn eat_while(&mut self, mut predicate: impl FnMut(char) -> bool) {\n         while predicate(self.first()) && !self.is_eof() {\n-            eaten += 1;\n             self.bump();\n         }\n-\n-        eaten\n     }\n }"}, {"sha": "86476dffc0312d4690f786b90f169ca8743501f0", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/790d19cd259e9ec656c6e0bb1446e980115ba46f/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790d19cd259e9ec656c6e0bb1446e980115ba46f/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=790d19cd259e9ec656c6e0bb1446e980115ba46f", "patch": "@@ -123,10 +123,26 @@ impl<'tcx> TyCtxt<'tcx> {\n         self_ty: Ty<'tcx>,\n         mut f: F,\n     ) {\n+        let _: Option<()> = self.find_map_relevant_impl(def_id, self_ty, |did| {\n+            f(did);\n+            None\n+        });\n+    }\n+\n+    /// Applies function to every impl that could possibly match the self type `self_ty` and returns\n+    /// the first non-none value.\n+    pub fn find_map_relevant_impl<T, F: FnMut(DefId) -> Option<T>>(\n+        self,\n+        def_id: DefId,\n+        self_ty: Ty<'tcx>,\n+        mut f: F,\n+    ) -> Option<T> {\n         let impls = self.trait_impls_of(def_id);\n \n         for &impl_def_id in impls.blanket_impls.iter() {\n-            f(impl_def_id);\n+            if let result @ Some(_) = f(impl_def_id) {\n+                return result;\n+            }\n         }\n \n         // simplify_type(.., false) basically replaces type parameters and\n@@ -157,14 +173,20 @@ impl<'tcx> TyCtxt<'tcx> {\n         if let Some(simp) = fast_reject::simplify_type(self, self_ty, true) {\n             if let Some(impls) = impls.non_blanket_impls.get(&simp) {\n                 for &impl_def_id in impls {\n-                    f(impl_def_id);\n+                    if let result @ Some(_) = f(impl_def_id) {\n+                        return result;\n+                    }\n                 }\n             }\n         } else {\n             for &impl_def_id in impls.non_blanket_impls.values().flatten() {\n-                f(impl_def_id);\n+                if let result @ Some(_) = f(impl_def_id) {\n+                    return result;\n+                }\n             }\n         }\n+\n+        None\n     }\n \n     /// Returns an iterator containing all impls"}, {"sha": "d8ea2f67393b25dfe2436e458cb5971fc7a4076c", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/790d19cd259e9ec656c6e0bb1446e980115ba46f/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790d19cd259e9ec656c6e0bb1446e980115ba46f/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=790d19cd259e9ec656c6e0bb1446e980115ba46f", "patch": "@@ -346,14 +346,14 @@ impl<'tcx> TyCtxt<'tcx> {\n         let drop_trait = self.lang_items().drop_trait()?;\n         self.ensure().coherent_trait(drop_trait);\n \n-        let mut dtor_did = None;\n         let ty = self.type_of(adt_did);\n-        self.for_each_relevant_impl(drop_trait, ty, |impl_did| {\n+        let dtor_did = self.find_map_relevant_impl(drop_trait, ty, |impl_did| {\n             if let Some(item) = self.associated_items(impl_did).in_definition_order().next() {\n                 if validate(self, impl_did).is_ok() {\n-                    dtor_did = Some(item.def_id);\n+                    return Some(item.def_id);\n                 }\n             }\n+            None\n         });\n \n         Some(ty::Destructor { did: dtor_did? })"}, {"sha": "26993a6b941fbb26a455da0544f04a34a4876461", "filename": "compiler/rustc_mir/src/transform/check_const_item_mutation.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/790d19cd259e9ec656c6e0bb1446e980115ba46f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790d19cd259e9ec656c6e0bb1446e980115ba46f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs?ref=790d19cd259e9ec656c6e0bb1446e980115ba46f", "patch": "@@ -34,7 +34,6 @@ impl<'a, 'tcx> ConstMutationChecker<'a, 'tcx> {\n \n     fn is_const_item_without_destructor(&self, local: Local) -> Option<DefId> {\n         let def_id = self.is_const_item(local)?;\n-        let mut any_dtor = |_tcx, _def_id| Ok(());\n \n         // We avoid linting mutation of a const item if the const's type has a\n         // Drop impl. The Drop logic observes the mutation which was performed.\n@@ -54,7 +53,7 @@ impl<'a, 'tcx> ConstMutationChecker<'a, 'tcx> {\n         //\n         //     #[const_mutation_allowed]\n         //     pub const LOG: Log = Log { msg: \"\" };\n-        match self.tcx.calculate_dtor(def_id, &mut any_dtor) {\n+        match self.tcx.calculate_dtor(def_id, &mut |_, _| Ok(())) {\n             Some(_) => None,\n             None => Some(def_id),\n         }"}, {"sha": "05e3ed343511338af7fc5ef3b06ef4912a6379b3", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/790d19cd259e9ec656c6e0bb1446e980115ba46f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790d19cd259e9ec656c6e0bb1446e980115ba46f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=790d19cd259e9ec656c6e0bb1446e980115ba46f", "patch": "@@ -1384,17 +1384,11 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n         trait_ref: &ty::PolyTraitRef<'tcx>,\n     ) {\n         let get_trait_impl = |trait_def_id| {\n-            let mut trait_impl = None;\n-            self.tcx.for_each_relevant_impl(\n+            self.tcx.find_map_relevant_impl(\n                 trait_def_id,\n                 trait_ref.skip_binder().self_ty(),\n-                |impl_def_id| {\n-                    if trait_impl.is_none() {\n-                        trait_impl = Some(impl_def_id);\n-                    }\n-                },\n-            );\n-            trait_impl\n+                |impl_def_id| Some(impl_def_id),\n+            )\n         };\n         let required_trait_path = self.tcx.def_path_str(trait_ref.def_id());\n         let all_traits = self.tcx.all_traits(LOCAL_CRATE);"}, {"sha": "e7e37c679e545ed66309e0878c7b7c64d3b0d976", "filename": "config.toml.example", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/790d19cd259e9ec656c6e0bb1446e980115ba46f/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/790d19cd259e9ec656c6e0bb1446e980115ba46f/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=790d19cd259e9ec656c6e0bb1446e980115ba46f", "patch": "@@ -13,7 +13,7 @@\n # If it does not match the version that is currently running,\n # `x.py` will prompt you to update it and read the changelog.\n # See `src/bootstrap/CHANGELOG.md` for more information.\n-changelog-seen = 1\n+changelog-seen = 2\n \n # =============================================================================\n # Global Settings\n@@ -370,13 +370,13 @@ changelog-seen = 1\n # binary, otherwise they are omitted.\n #\n # Defaults to rust.debug value\n-#debug-assertions = debug\n+#debug-assertions = rust.debug (boolean)\n \n # Whether or not debug assertions are enabled for the standard library.\n # Overrides the `debug-assertions` option, if defined.\n #\n # Defaults to rust.debug-assertions value\n-#debug-assertions-std = debug-assertions\n+#debug-assertions-std = rust.debug-assertions (boolean)\n \n # Whether or not to leave debug! and trace! calls in the rust binary.\n # Overrides the `debug-assertions` option, if defined.\n@@ -386,7 +386,7 @@ changelog-seen = 1\n # If you see a message from `tracing` saying\n # `max_level_info` is enabled and means logging won't be shown,\n # set this value to `true`.\n-#debug-logging = debug-assertions\n+#debug-logging = rust.debug-assertions (boolean)\n \n # Debuginfo level for most of Rust code, corresponds to the `-C debuginfo=N` option of `rustc`.\n # `0` - no debug info"}, {"sha": "4646d4a833525e9e4c01979a85fe6133503fa4c5", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/790d19cd259e9ec656c6e0bb1446e980115ba46f/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790d19cd259e9ec656c6e0bb1446e980115ba46f/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=790d19cd259e9ec656c6e0bb1446e980115ba46f", "patch": "@@ -14,8 +14,9 @@ mod tests;\n \n extern \"Rust\" {\n     // These are the magic symbols to call the global allocator.  rustc generates\n-    // them from the `#[global_allocator]` attribute if there is one, or uses the\n-    // default implementations in libstd (`__rdl_alloc` etc in `src/libstd/alloc.rs`)\n+    // them to call `__rg_alloc` etc if there is a `#[global_allocator]` attribute\n+    // (the code expanding that attribute macro generates those functions), or to call\n+    // the default implementations in libstd (`__rdl_alloc` etc in `src/libstd/alloc.rs`)\n     // otherwise.\n     #[rustc_allocator]\n     #[rustc_allocator_nounwind]\n@@ -26,8 +27,6 @@ extern \"Rust\" {\n     fn __rust_realloc(ptr: *mut u8, old_size: usize, align: usize, new_size: usize) -> *mut u8;\n     #[rustc_allocator_nounwind]\n     fn __rust_alloc_zeroed(size: usize, align: usize) -> *mut u8;\n-    #[rustc_allocator_nounwind]\n-    fn __rust_alloc_error_handler(size: usize, align: usize) -> !;\n }\n \n /// The global memory allocator.\n@@ -323,6 +322,16 @@ pub(crate) unsafe fn box_free<T: ?Sized>(ptr: Unique<T>) {\n     }\n }\n \n+// # Allocation error handler\n+\n+extern \"Rust\" {\n+    // This is the magic symbol to call the global alloc error handler.  rustc generates\n+    // it to call `__rg_oom` if there is a `#[alloc_error_handler]`, or to call the\n+    // default implementations below (`__rdl_oom`) otherwise.\n+    #[rustc_allocator_nounwind]\n+    fn __rust_alloc_error_handler(size: usize, align: usize) -> !;\n+}\n+\n /// Abort on memory allocation error or failure.\n ///\n /// Callers of memory allocation APIs wishing to abort computation\n@@ -367,7 +376,7 @@ pub fn handle_alloc_error(layout: Layout) -> ! {\n #[doc(hidden)]\n #[allow(unused_attributes)]\n #[unstable(feature = \"alloc_internals\", issue = \"none\")]\n-pub mod __default_lib_allocator {\n+pub mod __alloc_error_handler {\n     use crate::alloc::Layout;\n \n     // called via generated `__rust_alloc_error_handler`"}, {"sha": "5e68f76693fcf6b1e1bd1058a2acf8d267016393", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/790d19cd259e9ec656c6e0bb1446e980115ba46f/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790d19cd259e9ec656c6e0bb1446e980115ba46f/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=790d19cd259e9ec656c6e0bb1446e980115ba46f", "patch": "@@ -1476,7 +1476,8 @@ impl<T> Vec<T> {\n     /// `'a`. If the type has only static references, or none at all, then this\n     /// may be chosen to be `'static`.\n     ///\n-    /// This function is similar to the `leak` function on `Box`.\n+    /// This function is similar to the [`leak`][Box::leak] function on [`Box`]\n+    /// except that there is no way to recover the leaked memory.\n     ///\n     /// This function is mainly useful for data that lives for the remainder of\n     /// the program's life. Dropping the returned reference will cause a memory"}, {"sha": "5224672adb28b7cfb81b5b304e21c1648fdfd536", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/790d19cd259e9ec656c6e0bb1446e980115ba46f/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790d19cd259e9ec656c6e0bb1446e980115ba46f/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=790d19cd259e9ec656c6e0bb1446e980115ba46f", "patch": "@@ -85,7 +85,7 @@\n //! # Contributing changes to the documentation\n //!\n //! Check out the rust contribution guidelines [here](\n-//! https://rustc-dev-guide.rust-lang.org/getting-started.html).\n+//! https://rustc-dev-guide.rust-lang.org/contributing.html#writing-documentation).\n //! The source for this documentation can be found on\n //! [GitHub](https://github.com/rust-lang/rust).\n //! To contribute changes, make sure you read the guidelines first, then submit"}, {"sha": "9b7af97616c9d304b77d9060e1c113469dfdb621", "filename": "library/std/src/os/linux/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/790d19cd259e9ec656c6e0bb1446e980115ba46f/library%2Fstd%2Fsrc%2Fos%2Flinux%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790d19cd259e9ec656c6e0bb1446e980115ba46f/library%2Fstd%2Fsrc%2Fos%2Flinux%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Ffs.rs?ref=790d19cd259e9ec656c6e0bb1446e980115ba46f", "patch": "@@ -20,7 +20,7 @@ pub trait MetadataExt {\n     /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n     /// cross-Unix abstractions contained within the raw stat.\n     ///\n-    /// [`stat`]: crate::os::linux::raw::stat\n+    /// [`stat`]: struct@crate::os::linux::raw::stat\n     ///\n     /// # Examples\n     ///"}, {"sha": "657421e3fa4cc7982fb433036c37c8378a267a93", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/790d19cd259e9ec656c6e0bb1446e980115ba46f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790d19cd259e9ec656c6e0bb1446e980115ba46f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=790d19cd259e9ec656c6e0bb1446e980115ba46f", "patch": "@@ -47,7 +47,6 @@ pub type LPWCH = *mut WCHAR;\n pub type LPWIN32_FIND_DATAW = *mut WIN32_FIND_DATAW;\n pub type LPWSADATA = *mut WSADATA;\n pub type LPWSAPROTOCOL_INFO = *mut WSAPROTOCOL_INFO;\n-pub type LPSTR = *mut CHAR;\n pub type LPWSTR = *mut WCHAR;\n pub type LPFILETIME = *mut FILETIME;\n pub type LPWSABUF = *mut WSABUF;\n@@ -876,16 +875,6 @@ extern \"system\" {\n     pub fn DeleteFileW(lpPathName: LPCWSTR) -> BOOL;\n     pub fn GetCurrentDirectoryW(nBufferLength: DWORD, lpBuffer: LPWSTR) -> DWORD;\n     pub fn SetCurrentDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n-    pub fn WideCharToMultiByte(\n-        CodePage: UINT,\n-        dwFlags: DWORD,\n-        lpWideCharStr: LPCWSTR,\n-        cchWideChar: c_int,\n-        lpMultiByteStr: LPSTR,\n-        cbMultiByte: c_int,\n-        lpDefaultChar: LPCSTR,\n-        lpUsedDefaultChar: LPBOOL,\n-    ) -> c_int;\n \n     pub fn closesocket(socket: SOCKET) -> c_int;\n     pub fn recv(socket: SOCKET, buf: *mut c_void, len: c_int, flags: c_int) -> c_int;"}, {"sha": "8c19cc78b09cd2fe968dcb51ea81af694e9eeb73", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/790d19cd259e9ec656c6e0bb1446e980115ba46f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790d19cd259e9ec656c6e0bb1446e980115ba46f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=790d19cd259e9ec656c6e0bb1446e980115ba46f", "patch": "@@ -4,7 +4,6 @@ use crate::ffi::{OsStr, OsString};\n use crate::io::ErrorKind;\n use crate::os::windows::ffi::{OsStrExt, OsStringExt};\n use crate::path::PathBuf;\n-use crate::ptr;\n use crate::time::Duration;\n \n pub use self::rand::hashmap_random_keys;\n@@ -206,58 +205,6 @@ fn os2path(s: &[u16]) -> PathBuf {\n     PathBuf::from(OsString::from_wide(s))\n }\n \n-#[allow(dead_code)] // Only used in backtrace::gnu::get_executable_filename()\n-fn wide_char_to_multi_byte(\n-    code_page: u32,\n-    flags: u32,\n-    s: &[u16],\n-    no_default_char: bool,\n-) -> crate::io::Result<Vec<i8>> {\n-    unsafe {\n-        let mut size = c::WideCharToMultiByte(\n-            code_page,\n-            flags,\n-            s.as_ptr(),\n-            s.len() as i32,\n-            ptr::null_mut(),\n-            0,\n-            ptr::null(),\n-            ptr::null_mut(),\n-        );\n-        if size == 0 {\n-            return Err(crate::io::Error::last_os_error());\n-        }\n-\n-        let mut buf = Vec::with_capacity(size as usize);\n-        buf.set_len(size as usize);\n-\n-        let mut used_default_char = c::FALSE;\n-        size = c::WideCharToMultiByte(\n-            code_page,\n-            flags,\n-            s.as_ptr(),\n-            s.len() as i32,\n-            buf.as_mut_ptr(),\n-            buf.len() as i32,\n-            ptr::null(),\n-            if no_default_char { &mut used_default_char } else { ptr::null_mut() },\n-        );\n-        if size == 0 {\n-            return Err(crate::io::Error::last_os_error());\n-        }\n-        if no_default_char && used_default_char == c::TRUE {\n-            return Err(crate::io::Error::new(\n-                crate::io::ErrorKind::InvalidData,\n-                \"string cannot be converted to requested code page\",\n-            ));\n-        }\n-\n-        buf.set_len(size as usize);\n-\n-        Ok(buf)\n-    }\n-}\n-\n pub fn truncate_utf16_at_nul(v: &[u16]) -> &[u16] {\n     match unrolled_find_u16s(0, v) {\n         // don't include the 0"}, {"sha": "ff1d82fc990407bbe290dbb879acb138ef42eba8", "filename": "library/unwind/src/libunwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/790d19cd259e9ec656c6e0bb1446e980115ba46f/library%2Funwind%2Fsrc%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790d19cd259e9ec656c6e0bb1446e980115ba46f/library%2Funwind%2Fsrc%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flibunwind.rs?ref=790d19cd259e9ec656c6e0bb1446e980115ba46f", "patch": "@@ -89,7 +89,7 @@ extern \"C\" {\n }\n \n cfg_if::cfg_if! {\n-if #[cfg(all(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\"))))] {\n+if #[cfg(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\")))] {\n     // Not ARM EHABI\n     #[repr(C)]\n     #[derive(Copy, Clone, PartialEq)]"}, {"sha": "34eac31890cbe00880af850648ed091327b72bda", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/790d19cd259e9ec656c6e0bb1446e980115ba46f/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790d19cd259e9ec656c6e0bb1446e980115ba46f/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=790d19cd259e9ec656c6e0bb1446e980115ba46f", "patch": "@@ -650,14 +650,9 @@ fn traits_implemented_by(cx: &DocContext<'_>, type_: DefId, module: DefId) -> Fx\n     let ty = cx.tcx.type_of(type_);\n     let iter = in_scope_traits.iter().flat_map(|&trait_| {\n         trace!(\"considering explicit impl for trait {:?}\", trait_);\n-        let mut saw_impl = false;\n-        // Look at each trait implementation to see if it's an impl for `did`\n-        cx.tcx.for_each_relevant_impl(trait_, ty, |impl_| {\n-            // FIXME: this is inefficient, find a way to short-circuit for_each_* so this doesn't take as long\n-            if saw_impl {\n-                return;\n-            }\n \n+        // Look at each trait implementation to see if it's an impl for `did`\n+        cx.tcx.find_map_relevant_impl(trait_, ty, |impl_| {\n             let trait_ref = cx.tcx.impl_trait_ref(impl_).expect(\"this is not an inherent impl\");\n             // Check if these are the same type.\n             let impl_type = trait_ref.self_ty();\n@@ -668,7 +663,7 @@ fn traits_implemented_by(cx: &DocContext<'_>, type_: DefId, module: DefId) -> Fx\n                 type_\n             );\n             // Fast path: if this is a primitive simple `==` will work\n-            saw_impl = impl_type == ty\n+            let saw_impl = impl_type == ty\n                 || match impl_type.kind() {\n                     // Check if these are the same def_id\n                     ty::Adt(def, _) => {\n@@ -678,8 +673,9 @@ fn traits_implemented_by(cx: &DocContext<'_>, type_: DefId, module: DefId) -> Fx\n                     ty::Foreign(def_id) => *def_id == type_,\n                     _ => false,\n                 };\n-        });\n-        if saw_impl { Some(trait_) } else { None }\n+\n+            if saw_impl { Some(trait_) } else { None }\n+        })\n     });\n     iter.collect()\n }"}]}