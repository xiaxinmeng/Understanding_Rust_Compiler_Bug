{"sha": "b08a557f80865433d39d47934904a81b8ab3d720", "node_id": "C_kwDOAAsO6NoAKGIwOGE1NTdmODA4NjU0MzNkMzlkNDc5MzQ5MDRhODFiOGFiM2Q3MjA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-29T08:37:47Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-04-04T09:44:45Z"}, "message": "rust-analyzer guided enum variant structification", "tree": {"sha": "f4cdac16cdb87e09fd3d5b1c9eb4935ea455f357", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4cdac16cdb87e09fd3d5b1c9eb4935ea455f357"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b08a557f80865433d39d47934904a81b8ab3d720", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b08a557f80865433d39d47934904a81b8ab3d720", "html_url": "https://github.com/rust-lang/rust/commit/b08a557f80865433d39d47934904a81b8ab3d720", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b08a557f80865433d39d47934904a81b8ab3d720/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35d06f9c747bc791d7d6902248d851da98616a57", "url": "https://api.github.com/repos/rust-lang/rust/commits/35d06f9c747bc791d7d6902248d851da98616a57", "html_url": "https://github.com/rust-lang/rust/commit/35d06f9c747bc791d7d6902248d851da98616a57"}], "stats": {"total": 61, "additions": 36, "deletions": 25}, "files": [{"sha": "6c18e15ceb868a29db7fd6886233cb572d1ccbee", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b08a557f80865433d39d47934904a81b8ab3d720/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08a557f80865433d39d47934904a81b8ab3d720/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=b08a557f80865433d39d47934904a81b8ab3d720", "patch": "@@ -2890,6 +2890,9 @@ pub struct Fn {\n     pub body: Option<P<Block>>,\n }\n \n+#[derive(Clone, Encodable, Decodable, Debug)]\n+pub struct Static(pub P<Ty>, pub Mutability, pub Option<P<Expr>>);\n+\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum ItemKind {\n     /// An `extern crate` item, with the optional *original* crate name if the crate was renamed.\n@@ -2903,7 +2906,7 @@ pub enum ItemKind {\n     /// A static item (`static`).\n     ///\n     /// E.g., `static FOO: i32 = 42;` or `static FOO: &'static str = \"bar\";`.\n-    Static(P<Ty>, Mutability, Option<P<Expr>>),\n+    Static(Static),\n     /// A constant item (`const`).\n     ///\n     /// E.g., `const FOO: i32 = 42;`.\n@@ -2975,7 +2978,7 @@ impl ItemKind {\n         match self {\n             ItemKind::ExternCrate(..) => \"extern crate\",\n             ItemKind::Use(..) => \"`use` import\",\n-            ItemKind::Static(..) => \"static item\",\n+            ItemKind::Static(Static(..)) => \"static item\",\n             ItemKind::Const(..) => \"constant item\",\n             ItemKind::Fn(..) => \"function\",\n             ItemKind::Mod(..) => \"module\",\n@@ -3084,7 +3087,7 @@ pub enum ForeignItemKind {\n impl From<ForeignItemKind> for ItemKind {\n     fn from(foreign_item_kind: ForeignItemKind) -> ItemKind {\n         match foreign_item_kind {\n-            ForeignItemKind::Static(a, b, c) => ItemKind::Static(a, b, c),\n+            ForeignItemKind::Static(a, b, c) => ItemKind::Static(Static(a, b, c)),\n             ForeignItemKind::Fn(fn_kind) => ItemKind::Fn(fn_kind),\n             ForeignItemKind::TyAlias(ty_alias_kind) => ItemKind::TyAlias(ty_alias_kind),\n             ForeignItemKind::MacCall(a) => ItemKind::MacCall(a),\n@@ -3097,7 +3100,7 @@ impl TryFrom<ItemKind> for ForeignItemKind {\n \n     fn try_from(item_kind: ItemKind) -> Result<ForeignItemKind, ItemKind> {\n         Ok(match item_kind {\n-            ItemKind::Static(a, b, c) => ForeignItemKind::Static(a, b, c),\n+            ItemKind::Static(Static(a, b, c)) => ForeignItemKind::Static(a, b, c),\n             ItemKind::Fn(fn_kind) => ForeignItemKind::Fn(fn_kind),\n             ItemKind::TyAlias(ty_alias_kind) => ForeignItemKind::TyAlias(ty_alias_kind),\n             ItemKind::MacCall(a) => ForeignItemKind::MacCall(a),"}, {"sha": "d5b5faf5cd77f9d90142773ae8f65a03381ac571", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b08a557f80865433d39d47934904a81b8ab3d720/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08a557f80865433d39d47934904a81b8ab3d720/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=b08a557f80865433d39d47934904a81b8ab3d720", "patch": "@@ -7,10 +7,10 @@\n //! a `MutVisitor` renaming item names in a module will miss all of those\n //! that are created by the expansion of a macro.\n \n-use crate::ast::*;\n use crate::ptr::P;\n use crate::token::{self, Token};\n use crate::tokenstream::*;\n+use crate::{ast::*, Static};\n \n use rustc_data_structures::flat_map_in_place::FlatMapInPlace;\n use rustc_data_structures::sync::Lrc;\n@@ -1030,7 +1030,7 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n     match kind {\n         ItemKind::ExternCrate(_orig_name) => {}\n         ItemKind::Use(use_tree) => vis.visit_use_tree(use_tree),\n-        ItemKind::Static(ty, _, expr) => {\n+        ItemKind::Static(Static(ty, _, expr)) => {\n             vis.visit_ty(ty);\n             visit_opt(expr, |expr| vis.visit_expr(expr));\n         }"}, {"sha": "bfd047c67c466136123909c3c0efecd08d55e7fa", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b08a557f80865433d39d47934904a81b8ab3d720/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08a557f80865433d39d47934904a81b8ab3d720/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=b08a557f80865433d39d47934904a81b8ab3d720", "patch": "@@ -13,7 +13,7 @@\n //! instance, a walker looking for item names in a module will miss all of\n //! those that are created by the expansion of a macro.\n \n-use crate::ast::*;\n+use crate::{ast::*, Static};\n \n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n@@ -305,7 +305,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n     match &item.kind {\n         ItemKind::ExternCrate(_) => {}\n         ItemKind::Use(use_tree) => visitor.visit_use_tree(use_tree, item.id, false),\n-        ItemKind::Static(typ, _, expr) | ItemKind::Const(_, typ, expr) => {\n+        ItemKind::Static(Static(typ, _, expr)) | ItemKind::Const(_, typ, expr) => {\n             visitor.visit_ty(typ);\n             walk_list!(visitor, visit_expr, expr);\n         }"}, {"sha": "cfcb55275c1082bcbb462ca7a8b8d1aa52c4c0bc", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08a557f80865433d39d47934904a81b8ab3d720/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08a557f80865433d39d47934904a81b8ab3d720/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=b08a557f80865433d39d47934904a81b8ab3d720", "patch": "@@ -229,7 +229,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n                 self.lower_use_tree(use_tree, &prefix, id, vis_span, ident, attrs)\n             }\n-            ItemKind::Static(t, m, e) => {\n+            ItemKind::Static(ast::Static(t, m, e)) => {\n                 let (ty, body_id) = self.lower_const_item(t, span, e.as_deref());\n                 hir::ItemKind::Static(ty, *m, body_id)\n             }"}, {"sha": "777a1763e261fe9241b9f5ffcc218252a79dc7ac", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b08a557f80865433d39d47934904a81b8ab3d720/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08a557f80865433d39d47934904a81b8ab3d720/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=b08a557f80865433d39d47934904a81b8ab3d720", "patch": "@@ -9,8 +9,8 @@\n use itertools::{Either, Itertools};\n use rustc_ast::ptr::P;\n use rustc_ast::visit::{self, AssocCtxt, BoundKind, FnCtxt, FnKind, Visitor};\n-use rustc_ast::walk_list;\n use rustc_ast::*;\n+use rustc_ast::{walk_list, Static};\n use rustc_ast_pretty::pprust::{self, State};\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_macros::Subdiagnostic;\n@@ -990,7 +990,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     replace_span: self.ending_semi_or_hi(item.span),\n                 });\n             }\n-            ItemKind::Static(.., None) => {\n+            ItemKind::Static(Static(.., None)) => {\n                 self.session.emit_err(errors::StaticWithoutBody {\n                     span: item.span,\n                     replace_span: self.ending_semi_or_hi(item.span),"}, {"sha": "b62e006fbb745e013b36310aec98f1ec5b0e7f26", "filename": "compiler/rustc_ast_pretty/src/pprust/state/item.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b08a557f80865433d39d47934904a81b8ab3d720/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08a557f80865433d39d47934904a81b8ab3d720/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs?ref=b08a557f80865433d39d47934904a81b8ab3d720", "patch": "@@ -2,6 +2,7 @@ use crate::pp::Breaks::Inconsistent;\n use crate::pprust::state::delimited::IterDelimited;\n use crate::pprust::state::{AnnNode, PrintState, State, INDENT_UNIT};\n \n+use ast::Static;\n use rustc_ast as ast;\n use rustc_ast::GenericBound;\n use rustc_ast::ModKind;\n@@ -156,7 +157,7 @@ impl<'a> State<'a> {\n                 self.print_use_tree(tree);\n                 self.word(\";\");\n             }\n-            ast::ItemKind::Static(ty, mutbl, body) => {\n+            ast::ItemKind::Static(Static(ty, mutbl, body)) => {\n                 let def = ast::Defaultness::Final;\n                 self.print_item_const(\n                     item.ident,"}, {"sha": "f817b20daf403500ad72af5baa61a3afa0fbef08", "filename": "compiler/rustc_builtin_macros/src/global_allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b08a557f80865433d39d47934904a81b8ab3d720/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08a557f80865433d39d47934904a81b8ab3d720/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs?ref=b08a557f80865433d39d47934904a81b8ab3d720", "patch": "@@ -25,12 +25,12 @@ pub fn expand(\n     // FIXME - if we get deref patterns, use them to reduce duplication here\n     let (item, is_stmt, ty_span) =\n         if let Annotatable::Item(item) = &item\n-            && let ItemKind::Static(ty, ..) = &item.kind\n+            && let ItemKind::Static(ast::Static(ty, ..)) = &item.kind\n         {\n             (item, false, ecx.with_def_site_ctxt(ty.span))\n         } else if let Annotatable::Stmt(stmt) = &item\n             && let StmtKind::Item(item) = &stmt.kind\n-            && let ItemKind::Static(ty, ..) = &item.kind\n+            && let ItemKind::Static(ast::Static(ty, ..)) = &item.kind\n         {\n             (item, true, ecx.with_def_site_ctxt(ty.span))\n         } else {"}, {"sha": "82d1ff46ba9a00c8e993467c3e907433d996b91b", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b08a557f80865433d39d47934904a81b8ab3d720/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08a557f80865433d39d47934904a81b8ab3d720/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=b08a557f80865433d39d47934904a81b8ab3d720", "patch": "@@ -623,7 +623,12 @@ impl<'a> ExtCtxt<'a> {\n         mutbl: ast::Mutability,\n         expr: P<ast::Expr>,\n     ) -> P<ast::Item> {\n-        self.item(span, name, AttrVec::new(), ast::ItemKind::Static(ty, mutbl, Some(expr)))\n+        self.item(\n+            span,\n+            name,\n+            AttrVec::new(),\n+            ast::ItemKind::Static(ast::Static(ty, mutbl, Some(expr))),\n+        )\n     }\n \n     pub fn item_const("}, {"sha": "fbcc40f6657b5e6b100b273e4c2944d2789722bb", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b08a557f80865433d39d47934904a81b8ab3d720/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08a557f80865433d39d47934904a81b8ab3d720/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=b08a557f80865433d39d47934904a81b8ab3d720", "patch": "@@ -43,6 +43,7 @@ use crate::{\n     types::{transparent_newtype_field, CItemKind},\n     EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext,\n };\n+use ast::Static;\n use hir::IsAsync;\n use rustc_ast::attr;\n use rustc_ast::tokenstream::{TokenStream, TokenTree};\n@@ -370,7 +371,7 @@ impl EarlyLintPass for UnsafeCode {\n                 }\n             }\n \n-            ast::ItemKind::Static(..) => {\n+            ast::ItemKind::Static(Static(..)) => {\n                 if let Some(attr) = attr::find_by_name(&it.attrs, sym::no_mangle) {\n                     self.report_unsafe(cx, attr.span, BuiltinUnsafe::NoMangleStatic);\n                 }"}, {"sha": "b620e4592f5df9914875910dc10905573b6f1a9e", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08a557f80865433d39d47934904a81b8ab3d720/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08a557f80865433d39d47934904a81b8ab3d720/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=b08a557f80865433d39d47934904a81b8ab3d720", "patch": "@@ -805,7 +805,7 @@ trait UnusedDelimLint {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &ast::Item) {\n         use ast::ItemKind::*;\n \n-        if let Const(.., Some(expr)) | Static(.., Some(expr)) = &item.kind {\n+        if let Const(.., Some(expr)) | Static(ast::Static(.., Some(expr))) = &item.kind {\n             self.check_unused_delims_expr(\n                 cx,\n                 expr,"}, {"sha": "f2d37d810cfca808f3104b22d5d94b5425553bdc", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b08a557f80865433d39d47934904a81b8ab3d720/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08a557f80865433d39d47934904a81b8ab3d720/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=b08a557f80865433d39d47934904a81b8ab3d720", "patch": "@@ -3,6 +3,7 @@ use crate::errors;\n use super::diagnostics::{dummy_arg, ConsumeClosingDelim};\n use super::ty::{AllowPlus, RecoverQPath, RecoverReturnSign};\n use super::{AttrWrapper, FollowedByType, ForceCollect, Parser, PathStyle, TrailingToken};\n+use ast::Static;\n use rustc_ast::ast::*;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter, TokenKind};\n@@ -227,7 +228,7 @@ impl<'a> Parser<'a> {\n             self.bump(); // `static`\n             let m = self.parse_mutability();\n             let (ident, ty, expr) = self.parse_item_global(Some(m))?;\n-            (ident, ItemKind::Static(ty, m, expr))\n+            (ident, ItemKind::Static(Static(ty, m, expr)))\n         } else if let Const::Yes(const_span) = self.parse_constness(Case::Sensitive) {\n             // CONST ITEM\n             if self.token.is_keyword(kw::Impl) {\n@@ -862,7 +863,7 @@ impl<'a> Parser<'a> {\n                 let kind = match AssocItemKind::try_from(kind) {\n                     Ok(kind) => kind,\n                     Err(kind) => match kind {\n-                        ItemKind::Static(a, _, b) => {\n+                        ItemKind::Static(Static(a, _, b)) => {\n                             self.sess.emit_err(errors::AssociatedStaticItemNotAllowed { span });\n                             AssocItemKind::Const(Defaultness::Final, a, b)\n                         }"}, {"sha": "b66df4752704d259c4a8f4c34641db28b8ba645a", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08a557f80865433d39d47934904a81b8ab3d720/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08a557f80865433d39d47934904a81b8ab3d720/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=b08a557f80865433d39d47934904a81b8ab3d720", "patch": "@@ -688,7 +688,7 @@ impl<'a, 'b, 'tcx> BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n             }\n \n             // These items live in the value namespace.\n-            ItemKind::Static(_, mt, _) => {\n+            ItemKind::Static(ast::Static(_, mt, _)) => {\n                 let res = Res::Def(DefKind::Static(mt), def_id);\n                 self.r.define(parent, ident, ValueNS, (res, vis, sp, expansion));\n             }"}, {"sha": "7e3c43e380760f5d9f331c11c759c9622e465860", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08a557f80865433d39d47934904a81b8ab3d720/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08a557f80865433d39d47934904a81b8ab3d720/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=b08a557f80865433d39d47934904a81b8ab3d720", "patch": "@@ -2346,7 +2346,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 });\n             }\n \n-            ItemKind::Static(ref ty, _, ref expr) | ItemKind::Const(_, ref ty, ref expr) => {\n+            ItemKind::Static(ast::Static(ref ty, _, ref expr)) | ItemKind::Const(_, ref ty, ref expr) => {\n                 self.with_static_rib(|this| {\n                     this.with_lifetime_rib(LifetimeRibKind::Elided(LifetimeRes::Static), |this| {\n                         this.visit_ty(ty);"}, {"sha": "d2f03f2a97fb058fc81144c5511d4e0a0f49ad44", "filename": "src/tools/clippy/clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b08a557f80865433d39d47934904a81b8ab3d720/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08a557f80865433d39d47934904a81b8ab3d720/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=b08a557f80865433d39d47934904a81b8ab3d720", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet;\n-use rustc_ast::ast::{Item, ItemKind, Ty, TyKind};\n+use rustc_ast::ast::{Item, ItemKind, Ty, TyKind, Static};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -106,7 +106,7 @@ impl EarlyLintPass for RedundantStaticLifetimes {\n                 // #2438)\n             }\n \n-            if let ItemKind::Static(ref var_type, _, _) = item.kind {\n+            if let ItemKind::Static(Static(ref var_type, _, _)) = item.kind {\n                 Self::visit_type(var_type, cx, \"statics have by default a `'static` lifetime\");\n             }\n         }"}, {"sha": "30be129ad75a1230c1ae25828658373f55c8b930", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08a557f80865433d39d47934904a81b8ab3d720/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08a557f80865433d39d47934904a81b8ab3d720/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=b08a557f80865433d39d47934904a81b8ab3d720", "patch": "@@ -286,7 +286,7 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n     match (l, r) {\n         (ExternCrate(l), ExternCrate(r)) => l == r,\n         (Use(l), Use(r)) => eq_use_tree(l, r),\n-        (Static(lt, lm, le), Static(rt, rm, re)) => lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re),\n+        (Static(ast::Static(lt, lm, le)), Static(ast::Static(rt, rm, re))) => lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re),\n         (Const(ld, lt, le), Const(rd, rt, re)) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n         (\n             Fn(box ast::Fn {"}, {"sha": "520bb5278001f97a5e3e7902e4aa931f23e9ed66", "filename": "src/tools/rustfmt/src/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08a557f80865433d39d47934904a81b8ab3d720/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08a557f80865433d39d47934904a81b8ab3d720/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs?ref=b08a557f80865433d39d47934904a81b8ab3d720", "patch": "@@ -1805,7 +1805,7 @@ pub(crate) struct StaticParts<'a> {\n impl<'a> StaticParts<'a> {\n     pub(crate) fn from_item(item: &'a ast::Item) -> Self {\n         let (defaultness, prefix, ty, mutability, expr) = match item.kind {\n-            ast::ItemKind::Static(ref ty, mutability, ref expr) => {\n+            ast::ItemKind::Static(ast::Static(ref ty, mutability, ref expr)) => {\n                 (None, \"static\", ty, mutability, expr)\n             }\n             ast::ItemKind::Const(defaultness, ref ty, ref expr) => {"}]}