{"sha": "1288b80affc300819a38cf56de9d4776f3e50e1f", "node_id": "C_kwDOAAsO6NoAKDEyODhiODBhZmZjMzAwODE5YTM4Y2Y1NmRlOWQ0Nzc2ZjNlNTBlMWY", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-12-18T12:07:58Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-01-09T01:22:04Z"}, "message": "rustc_metadata: Optimize and document module children decoding", "tree": {"sha": "e9610c8f88e353627605c90ce4b450e580bb8d86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9610c8f88e353627605c90ce4b450e580bb8d86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1288b80affc300819a38cf56de9d4776f3e50e1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1288b80affc300819a38cf56de9d4776f3e50e1f", "html_url": "https://github.com/rust-lang/rust/commit/1288b80affc300819a38cf56de9d4776f3e50e1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1288b80affc300819a38cf56de9d4776f3e50e1f/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c34e3f0f83660e02a7545ac52f4c8023044868c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c34e3f0f83660e02a7545ac52f4c8023044868c2", "html_url": "https://github.com/rust-lang/rust/commit/c34e3f0f83660e02a7545ac52f4c8023044868c2"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "bd6851d1fbba24917ba5fcf60c2694b306ff6dda", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1288b80affc300819a38cf56de9d4776f3e50e1f/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1288b80affc300819a38cf56de9d4776f3e50e1f/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=1288b80affc300819a38cf56de9d4776f3e50e1f", "patch": "@@ -82,7 +82,6 @@ use rustc_hir::{\n     TraitItemKind, TraitRef, TyKind, UnOp, ArrayLen\n };\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n-use rustc_middle::hir::exports::Export;\n use rustc_middle::hir::map::Map;\n use rustc_middle::hir::place::PlaceBase;\n use rustc_middle::ty as rustc_ty;\n@@ -523,10 +522,21 @@ pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n             }\n         };\n     }\n-    fn item_child_by_name<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, name: &str) -> Option<&'tcx Export> {\n-        tcx.item_children(def_id)\n-            .iter()\n-            .find(|item| item.ident.name.as_str() == name)\n+    fn item_child_by_name<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, name: &str) -> Option<Res> {\n+        match tcx.def_kind(def_id) {\n+            DefKind::Mod | DefKind::Enum | DefKind::Trait => tcx\n+                .item_children(def_id)\n+                .iter()\n+                .find(|item| item.ident.name.as_str() == name)\n+                .map(|child| child.res.expect_non_local()),\n+            DefKind::Impl => tcx\n+                .associated_item_def_ids(def_id)\n+                .iter()\n+                .copied()\n+                .find(|assoc_def_id| tcx.item_name(*assoc_def_id).as_str() == name)\n+                .map(|assoc_def_id| Res::Def(tcx.def_kind(assoc_def_id), assoc_def_id)),\n+            _ => None,\n+        }\n     }\n \n     let (krate, first, path) = match *path {\n@@ -543,15 +553,12 @@ pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n     let last = path\n         .iter()\n         .copied()\n-        // `get_def_path` seems to generate these empty segments for extern blocks.\n-        // We can just ignore them.\n-        .filter(|segment| !segment.is_empty())\n         // for each segment, find the child item\n-        .try_fold(first, |item, segment| {\n-            let def_id = item.res.def_id();\n+        .try_fold(first, |res, segment| {\n+            let def_id = res.def_id();\n             if let Some(item) = item_child_by_name(tcx, def_id, segment) {\n                 Some(item)\n-            } else if matches!(item.res, Res::Def(DefKind::Enum | DefKind::Struct, _)) {\n+            } else if matches!(res, Res::Def(DefKind::Enum | DefKind::Struct, _)) {\n                 // it is not a child item so check inherent impl items\n                 tcx.inherent_impls(def_id)\n                     .iter()\n@@ -560,7 +567,7 @@ pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n                 None\n             }\n         });\n-    try_res!(last).res.expect_non_local()\n+    try_res!(last).expect_non_local()\n }\n \n /// Convenience function to get the `DefId` of a trait by path."}]}