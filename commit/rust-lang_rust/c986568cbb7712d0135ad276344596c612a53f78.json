{"sha": "c986568cbb7712d0135ad276344596c612a53f78", "node_id": "C_kwDOAAsO6NoAKGM5ODY1NjhjYmI3NzEyZDAxMzVhZDI3NjM0NDU5NmM2MTJhNTNmNzg", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-10T10:26:07Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-10T10:26:07Z"}, "message": "move test", "tree": {"sha": "5184626f47d4e6a5e1a70de4a2e7e960dd4d523a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5184626f47d4e6a5e1a70de4a2e7e960dd4d523a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c986568cbb7712d0135ad276344596c612a53f78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c986568cbb7712d0135ad276344596c612a53f78", "html_url": "https://github.com/rust-lang/rust/commit/c986568cbb7712d0135ad276344596c612a53f78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c986568cbb7712d0135ad276344596c612a53f78/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b447701028a74bc47d42045fd5448fe9eaf806f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b447701028a74bc47d42045fd5448fe9eaf806f", "html_url": "https://github.com/rust-lang/rust/commit/5b447701028a74bc47d42045fd5448fe9eaf806f"}], "stats": {"total": 126, "additions": 90, "deletions": 36}, "files": [{"sha": "cf62b4f5885c786117c0eee699f2b7deeaca5ac1", "filename": "crates/hir_def/src/macro_expansion_tests/mbe.rs", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/c986568cbb7712d0135ad276344596c612a53f78/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c986568cbb7712d0135ad276344596c612a53f78/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs?ref=c986568cbb7712d0135ad276344596c612a53f78", "patch": "@@ -1468,3 +1468,93 @@ fn main() {\n \"#]],\n     );\n }\n+\n+#[test]\n+fn test_winapi_struct() {\n+    // from https://github.com/retep998/winapi-rs/blob/a7ef2bca086aae76cf6c4ce4c2552988ed9798ad/src/macros.rs#L366\n+\n+    check(\n+        r#\"\n+macro_rules! STRUCT {\n+    ($(#[$attrs:meta])* struct $name:ident {\n+        $($field:ident: $ftype:ty,)+\n+    }) => (\n+        #[repr(C)] #[derive(Copy)] $(#[$attrs])*\n+        pub struct $name {\n+            $(pub $field: $ftype,)+\n+        }\n+        impl Clone for $name {\n+            #[inline]\n+            fn clone(&self) -> $name { *self }\n+        }\n+        #[cfg(feature = \"impl-default\")]\n+        impl Default for $name {\n+            #[inline]\n+            fn default() -> $name { unsafe { $crate::_core::mem::zeroed() } }\n+        }\n+    );\n+}\n+\n+// from https://github.com/retep998/winapi-rs/blob/a7ef2bca086aae76cf6c4ce4c2552988ed9798ad/src/shared/d3d9caps.rs\n+STRUCT!{struct D3DVSHADERCAPS2_0 {Caps: u8,}}\n+\n+STRUCT!{#[cfg_attr(target_arch = \"x86\", repr(packed))] struct D3DCONTENTPROTECTIONCAPS {Caps : u8 ,}}\n+\"#,\n+        expect![[r##\"\n+macro_rules! STRUCT {\n+    ($(#[$attrs:meta])* struct $name:ident {\n+        $($field:ident: $ftype:ty,)+\n+    }) => (\n+        #[repr(C)] #[derive(Copy)] $(#[$attrs])*\n+        pub struct $name {\n+            $(pub $field: $ftype,)+\n+        }\n+        impl Clone for $name {\n+            #[inline]\n+            fn clone(&self) -> $name { *self }\n+        }\n+        #[cfg(feature = \"impl-default\")]\n+        impl Default for $name {\n+            #[inline]\n+            fn default() -> $name { unsafe { $crate::_core::mem::zeroed() } }\n+        }\n+    );\n+}\n+\n+#[repr(C)]\n+#[derive(Copy)] pub struct D3DVSHADERCAPS2_0 {\n+    pub Caps: u8,\n+}\n+impl Clone for D3DVSHADERCAPS2_0 {\n+    #[inline] fn clone(&self ) -> D3DVSHADERCAPS2_0 {\n+        *self\n+    }\n+}\n+#[cfg(feature = \"impl-default\")] impl Default for D3DVSHADERCAPS2_0 {\n+    #[inline] fn default() -> D3DVSHADERCAPS2_0 {\n+        unsafe {\n+            $crate::_core::mem::zeroed()\n+        }\n+    }\n+}\n+\n+#[repr(C)]\n+#[derive(Copy)]\n+#[cfg_attr(target_arch = \"x86\", repr(packed))] pub struct D3DCONTENTPROTECTIONCAPS {\n+    pub Caps: u8,\n+}\n+impl Clone for D3DCONTENTPROTECTIONCAPS {\n+    #[inline] fn clone(&self ) -> D3DCONTENTPROTECTIONCAPS {\n+        *self\n+    }\n+}\n+#[cfg(feature = \"impl-default\")] impl Default for D3DCONTENTPROTECTIONCAPS {\n+    #[inline] fn default() -> D3DCONTENTPROTECTIONCAPS {\n+        unsafe {\n+            $crate::_core::mem::zeroed()\n+        }\n+    }\n+}\n+\"##]],\n+    );\n+}"}, {"sha": "7b6c5a8bddf020491c2223967f7f7596ad256d85", "filename": "crates/mbe/src/tests/expand.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c986568cbb7712d0135ad276344596c612a53f78/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c986568cbb7712d0135ad276344596c612a53f78/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs?ref=c986568cbb7712d0135ad276344596c612a53f78", "patch": "@@ -98,42 +98,6 @@ fn test_attr_to_token_tree() {\n     );\n }\n \n-#[test]\n-fn test_winapi_struct() {\n-    // from https://github.com/retep998/winapi-rs/blob/a7ef2bca086aae76cf6c4ce4c2552988ed9798ad/src/macros.rs#L366\n-\n-    parse_macro(\n-        r#\"\n-macro_rules! STRUCT {\n-    ($(#[$attrs:meta])* struct $name:ident {\n-        $($field:ident: $ftype:ty,)+\n-    }) => (\n-        #[repr(C)] #[derive(Copy)] $(#[$attrs])*\n-        pub struct $name {\n-            $(pub $field: $ftype,)+\n-        }\n-        impl Clone for $name {\n-            #[inline]\n-            fn clone(&self) -> $name { *self }\n-        }\n-        #[cfg(feature = \"impl-default\")]\n-        impl Default for $name {\n-            #[inline]\n-            fn default() -> $name { unsafe { $crate::_core::mem::zeroed() } }\n-        }\n-    );\n-}\n-\"#,\n-    ).\n-    // from https://github.com/retep998/winapi-rs/blob/a7ef2bca086aae76cf6c4ce4c2552988ed9798ad/src/shared/d3d9caps.rs\n-    assert_expand_items(r#\"STRUCT!{struct D3DVSHADERCAPS2_0 {Caps: u8,}}\"#,\n-        \"# [repr (C)] # [derive (Copy)] pub struct D3DVSHADERCAPS2_0 {pub Caps : u8 ,} impl Clone for D3DVSHADERCAPS2_0 {# [inline] fn clone (& self) -> D3DVSHADERCAPS2_0 {* self}} # [cfg (feature = \\\"impl-default\\\")] impl Default for D3DVSHADERCAPS2_0 {# [inline] fn default () -> D3DVSHADERCAPS2_0 {unsafe {$crate :: _core :: mem :: zeroed ()}}}\"\n-    )\n-    .assert_expand_items(r#\"STRUCT!{#[cfg_attr(target_arch = \"x86\", repr(packed))] struct D3DCONTENTPROTECTIONCAPS {Caps : u8 ,}}\"#,\n-        \"# [repr (C)] # [derive (Copy)] # [cfg_attr (target_arch = \\\"x86\\\" , repr (packed))] pub struct D3DCONTENTPROTECTIONCAPS {pub Caps : u8 ,} impl Clone for D3DCONTENTPROTECTIONCAPS {# [inline] fn clone (& self) -> D3DCONTENTPROTECTIONCAPS {* self}} # [cfg (feature = \\\"impl-default\\\")] impl Default for D3DCONTENTPROTECTIONCAPS {# [inline] fn default () -> D3DCONTENTPROTECTIONCAPS {unsafe {$crate :: _core :: mem :: zeroed ()}}}\"\n-    );\n-}\n-\n #[test]\n fn test_int_base() {\n     parse_macro("}]}