{"sha": "ef3c7af172de035f77732f8444ca073154b10307", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmM2M3YWYxNzJkZTAzNWY3NzczMmY4NDQ0Y2EwNzMxNTRiMTAzMDc=", "commit": {"author": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2015-03-02T16:54:49Z"}, "committer": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2015-03-03T02:55:38Z"}, "message": "metadata: Bump the metadata encoding version.\n\nWe have changed the encoding enough to bump that.\nAlso added some notes about metadata encoding to librbml/lib.rs.", "tree": {"sha": "54a8e3796fc1a8ad09a370ce828fd6d2fc65cf74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54a8e3796fc1a8ad09a370ce828fd6d2fc65cf74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef3c7af172de035f77732f8444ca073154b10307", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef3c7af172de035f77732f8444ca073154b10307", "html_url": "https://github.com/rust-lang/rust/commit/ef3c7af172de035f77732f8444ca073154b10307", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef3c7af172de035f77732f8444ca073154b10307/comments", "author": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe73d382eeabaed0c37425388ab15ad690e5906f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe73d382eeabaed0c37425388ab15ad690e5906f", "html_url": "https://github.com/rust-lang/rust/commit/fe73d382eeabaed0c37425388ab15ad690e5906f"}], "stats": {"total": 108, "additions": 102, "deletions": 6}, "files": [{"sha": "77204c91aba3bb898da91dc42f1191fe9742bbb8", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 101, "deletions": 5, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/ef3c7af172de035f77732f8444ca073154b10307/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3c7af172de035f77732f8444ca073154b10307/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=ef3c7af172de035f77732f8444ca073154b10307", "patch": "@@ -8,12 +8,108 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Really Bad Markup Language (rbml) is a temporary measure until we migrate\n-//! the rust object metadata to a better serialization format. It is not\n-//! intended to be used by users.\n+//! Really Bad Markup Language (rbml) is an internal serialization format of rustc.\n+//! This is not intended to be used by users.\n //!\n-//! It is loosely based on the Extensible Binary Markup Language (ebml):\n-//!     http://www.matroska.org/technical/specs/rfc/index.html\n+//! Originally based on the Extensible Binary Markup Language\n+//! (ebml; http://www.matroska.org/technical/specs/rfc/index.html),\n+//! it is now a separate format tuned for the rust object metadata.\n+//!\n+//! # Encoding\n+//!\n+//! RBML document consists of the tag, length and data.\n+//! The encoded data can contain multiple RBML documents concatenated.\n+//!\n+//! **Tags** are a hint for the following data.\n+//! Tags are a number from 0x000 to 0xfff, where 0xf0 through 0xff is reserved.\n+//! Tags less than 0xf0 are encoded in one literal byte.\n+//! Tags greater than 0xff are encoded in two big-endian bytes,\n+//! where the tag number is ORed with 0xf000. (E.g. tag 0x123 = `f1 23`)\n+//!\n+//! **Lengths** encode the length of the following data.\n+//! It is a variable-length unsigned int, and one of the following forms:\n+//!\n+//! - `80` through `fe` for lengths up to 0x7e;\n+//! - `40 ff` through `7f ff` for lengths up to 0x3fff;\n+//! - `20 40 00` through `3f ff ff` for lengths up to 0x1fffff;\n+//! - `10 20 00 00` through `1f ff ff ff` for lengths up to 0xfffffff.\n+//!\n+//! The \"overlong\" form is allowed so that the length can be encoded\n+//! without the prior knowledge of the encoded data.\n+//! For example, the length 0 can be represented either by `80`, `40 00`,\n+//! `20 00 00` or `10 00 00 00`.\n+//! The encoder tries to minimize the length if possible.\n+//! Also, some predefined tags listed below are so commonly used that\n+//! their lengths are omitted (\"implicit length\").\n+//!\n+//! **Data** can be either binary bytes or zero or more nested RBML documents.\n+//! Nested documents cannot overflow, and should be entirely contained\n+//! within a parent document.\n+//!\n+//! # Predefined Tags\n+//!\n+//! Most RBML tags are defined by the application.\n+//! (For the rust object metadata, see also `rustc::metadata::common`.)\n+//! RBML itself does define a set of predefined tags however,\n+//! intended for the auto-serialization implementation.\n+//!\n+//! Predefined tags with an implicit length:\n+//!\n+//! - `U64` (`00`): 8-byte big endian unsigned integer.\n+//! - `U32` (`01`): 4-byte big endian unsigned integer.\n+//! - `U16` (`02`): 2-byte big endian unsigned integer.\n+//! - `U8`  (`03`): 1-byte unsigned integer.\n+//!   Any of `U*` tags can be used to encode primitive unsigned integer types,\n+//!   as long as it is no greater than the actual size.\n+//!   For example, `u8` can only be represented via the `U8` tag.\n+//!\n+//! - `I64` (`04`): 8-byte big endian signed integer.\n+//! - `I32` (`05`): 4-byte big endian signed integer.\n+//! - `I16` (`06`): 2-byte big endian signed integer.\n+//! - `I8`  (`07`): 1-byte signed integer.\n+//!   Similar to `U*` tags. Always uses two's complement encoding.\n+//!\n+//! - `Bool` (`08`): 1-byte boolean value, `00` for false and `01` for true.\n+//!\n+//! - `Char` (`09`): 4-byte big endian Unicode scalar value.\n+//!   Surrogate pairs or out-of-bound values are invalid.\n+//!\n+//! - `F64` (`0a`): 8-byte big endian unsigned integer representing\n+//!   IEEE 754 binary64 floating-point format.\n+//! - `F32` (`0b`): 4-byte big endian unsigned integer representing\n+//!   IEEE 754 binary32 floating-point format.\n+//!\n+//! - `Sub8`  (`0c`): 1-byte unsigned integer for supplementary information.\n+//! - `Sub32` (`0d`): 4-byte unsigned integer for supplementary information.\n+//!   Those two tags normally occur as the first subdocument of certain tags,\n+//!   namely `Enum`, `Vec` and `Map`, to provide a variant or size information.\n+//!   They can be used interchangably.\n+//!\n+//! Predefined tags with an explicit length:\n+//!\n+//! - `Str` (`0e`): A UTF-8-encoded string.\n+//!\n+//! - `Enum` (`0f`): An enum.\n+//!   The first subdocument should be `Sub*` tags with a variant ID.\n+//!   Subsequent subdocuments, if any, encode variant arguments.\n+//!\n+//! - `Vec` (`10`): A vector (sequence).\n+//! - `VecElt` (`11`): A vector element.\n+//!   The first subdocument should be `Sub*` tags with the number of elements.\n+//!   Subsequent subdocuments should be `VecElt` tag per each element.\n+//!\n+//! - `Map` (`12`): A map (associated array).\n+//! - `MapKey` (`13`): A key part of the map entry.\n+//! - `MapVal` (`14`): A value part of the map entry.\n+//!   The first subdocument should be `Sub*` tags with the number of entries.\n+//!   Subsequent subdocuments should be an alternating sequence of\n+//!   `MapKey` and `MapVal` tags per each entry.\n+//!\n+//! - `Opaque` (`15`): An opaque, custom-format tag.\n+//!   Used to wrap ordinary custom tags or data in the auto-serialized context.\n+//!   Rustc typically uses this to encode type informations.\n+//!\n+//! First 0x20 tags are reserved by RBML; custom tags start at 0x20.\n \n #![crate_name = \"rbml\"]\n #![unstable(feature = \"rustc_private\")]"}, {"sha": "131a299cc500fc9af6e4fd5ad050be88e6b274c4", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef3c7af172de035f77732f8444ca073154b10307/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3c7af172de035f77732f8444ca073154b10307/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=ef3c7af172de035f77732f8444ca073154b10307", "patch": "@@ -1920,7 +1920,7 @@ fn encode_dylib_dependency_formats(rbml_w: &mut Encoder, ecx: &EncodeContext) {\n \n // NB: Increment this as you change the metadata encoding version.\n #[allow(non_upper_case_globals)]\n-pub const metadata_encoding_version : &'static [u8] = &[b'r', b'u', b's', b't', 0, 0, 0, 1 ];\n+pub const metadata_encoding_version : &'static [u8] = &[b'r', b'u', b's', b't', 0, 0, 0, 2 ];\n \n pub fn encode_metadata(parms: EncodeParams, krate: &ast::Crate) -> Vec<u8> {\n     let mut wr = SeekableMemWriter::new();"}]}