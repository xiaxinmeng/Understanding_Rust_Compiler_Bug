{"sha": "42d924dd3ea1346d04324872e7b08b29146ed42f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyZDkyNGRkM2VhMTM0NmQwNDMyNDg3MmU3YjA4YjI5MTQ2ZWQ0MmY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-25T21:21:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-25T21:21:07Z"}, "message": "Rollup merge of #62942 - KevinWMatthews:condvar_docs_match_ergo, r=sfackler\n\nUse match ergonomics in Condvar documentation\n\nDocumentation was written before match ergonomics was merged. See #62857.\n\nIn short, replaces\n\n```rust\nlet &(ref lock, ref cvar) = &*pair;\n```\n\nwith\n\n```rust\nlet (lock, cvar) = &*pair\n```\n\nin the docs of `std::sync::Condvar`.", "tree": {"sha": "a4f496ba3084f4b165a64d73eee55cc668a57966", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4f496ba3084f4b165a64d73eee55cc668a57966"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42d924dd3ea1346d04324872e7b08b29146ed42f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdOh1ECRBK7hj4Ov3rIwAAdHIIADLd0KxvMmbzMM3gLrnzIJqf\n4WBOkRCf9ftTsO89nvovHPjmHKpxha26xcaWw5koKTo7zJWvEGYHoZB9f3R1NAWP\nMRneIWBaG5SaJtDHoKQSChYjG7OToId/mcQrgWcBuwWfydRPUjgkWrKevGnzVTuR\nN/RcpKP5SHm0Dq7Qj3DcvFtExPu3vetP+SMCDlo+603coVcElRraRSsdLhIIAJ0x\nYV7LWZ0nGDz2jnBKEUvMFWvVkG/EoZp+zSeGEbs1hHOL0M4QS+9W6a3c0ZTO9KlD\nLgf0QMHGG68Mp2o4dKESswmFwVaOnGgtL5hcyJ5aEJmKyIAgYRGDx9zwe1SIcxY=\n=vAv2\n-----END PGP SIGNATURE-----\n", "payload": "tree a4f496ba3084f4b165a64d73eee55cc668a57966\nparent 6e8d7b6e48da6078b4196c0ca47d41b7a1224fa1\nparent c0918183a7888ed028e41ca2e2e917a0d377aee8\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564089667 +0200\ncommitter GitHub <noreply@github.com> 1564089667 +0200\n\nRollup merge of #62942 - KevinWMatthews:condvar_docs_match_ergo, r=sfackler\n\nUse match ergonomics in Condvar documentation\n\nDocumentation was written before match ergonomics was merged. See #62857.\n\nIn short, replaces\n\n```rust\nlet &(ref lock, ref cvar) = &*pair;\n```\n\nwith\n\n```rust\nlet (lock, cvar) = &*pair\n```\n\nin the docs of `std::sync::Condvar`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42d924dd3ea1346d04324872e7b08b29146ed42f", "html_url": "https://github.com/rust-lang/rust/commit/42d924dd3ea1346d04324872e7b08b29146ed42f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42d924dd3ea1346d04324872e7b08b29146ed42f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e8d7b6e48da6078b4196c0ca47d41b7a1224fa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e8d7b6e48da6078b4196c0ca47d41b7a1224fa1", "html_url": "https://github.com/rust-lang/rust/commit/6e8d7b6e48da6078b4196c0ca47d41b7a1224fa1"}, {"sha": "c0918183a7888ed028e41ca2e2e917a0d377aee8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0918183a7888ed028e41ca2e2e917a0d377aee8", "html_url": "https://github.com/rust-lang/rust/commit/c0918183a7888ed028e41ca2e2e917a0d377aee8"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "aeff57716e86b26769b37e22162964df8c861ab8", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/42d924dd3ea1346d04324872e7b08b29146ed42f/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42d924dd3ea1346d04324872e7b08b29146ed42f/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=42d924dd3ea1346d04324872e7b08b29146ed42f", "patch": "@@ -36,7 +36,7 @@ impl WaitTimeoutResult {\n     /// let pair2 = pair.clone();\n     ///\n     /// thread::spawn(move|| {\n-    ///     let &(ref lock, ref cvar) = &*pair2;\n+    ///     let (lock, cvar) = &*pair2;\n     ///\n     ///     // Let's wait 20 milliseconds before notifying the condvar.\n     ///     thread::sleep(Duration::from_millis(20));\n@@ -48,7 +48,7 @@ impl WaitTimeoutResult {\n     /// });\n     ///\n     /// // Wait for the thread to start up.\n-    /// let &(ref lock, ref cvar) = &*pair;\n+    /// let (lock, cvar) = &*pair;\n     /// let mut started = lock.lock().unwrap();\n     /// loop {\n     ///     // Let's put a timeout on the condvar's wait.\n@@ -94,15 +94,15 @@ impl WaitTimeoutResult {\n ///\n /// // Inside of our lock, spawn a new thread, and then wait for it to start.\n /// thread::spawn(move|| {\n-///     let &(ref lock, ref cvar) = &*pair2;\n+///     let (lock, cvar) = &*pair2;\n ///     let mut started = lock.lock().unwrap();\n ///     *started = true;\n ///     // We notify the condvar that the value has changed.\n ///     cvar.notify_one();\n /// });\n ///\n /// // Wait for the thread to start up.\n-/// let &(ref lock, ref cvar) = &*pair;\n+/// let (lock, cvar) = &*pair;\n /// let mut started = lock.lock().unwrap();\n /// while !*started {\n ///     started = cvar.wait(started).unwrap();\n@@ -180,15 +180,15 @@ impl Condvar {\n     /// let pair2 = pair.clone();\n     ///\n     /// thread::spawn(move|| {\n-    ///     let &(ref lock, ref cvar) = &*pair2;\n+    ///     let (lock, cvar) = &*pair2;\n     ///     let mut started = lock.lock().unwrap();\n     ///     *started = true;\n     ///     // We notify the condvar that the value has changed.\n     ///     cvar.notify_one();\n     /// });\n     ///\n     /// // Wait for the thread to start up.\n-    /// let &(ref lock, ref cvar) = &*pair;\n+    /// let (lock, cvar) = &*pair;\n     /// let mut started = lock.lock().unwrap();\n     /// // As long as the value inside the `Mutex<bool>` is `false`, we wait.\n     /// while !*started {\n@@ -245,15 +245,15 @@ impl Condvar {\n     /// let pair2 = pair.clone();\n     ///\n     /// thread::spawn(move|| {\n-    ///     let &(ref lock, ref cvar) = &*pair2;\n+    ///     let (lock, cvar) = &*pair2;\n     ///     let mut started = lock.lock().unwrap();\n     ///     *started = true;\n     ///     // We notify the condvar that the value has changed.\n     ///     cvar.notify_one();\n     /// });\n     ///\n     /// // Wait for the thread to start up.\n-    /// let &(ref lock, ref cvar) = &*pair;\n+    /// let (lock, cvar) = &*pair;\n     /// // As long as the value inside the `Mutex<bool>` is `false`, we wait.\n     /// let _guard = cvar.wait_until(lock.lock().unwrap(), |started| { *started }).unwrap();\n     /// ```\n@@ -301,15 +301,15 @@ impl Condvar {\n     /// let pair2 = pair.clone();\n     ///\n     /// thread::spawn(move|| {\n-    ///     let &(ref lock, ref cvar) = &*pair2;\n+    ///     let (lock, cvar) = &*pair2;\n     ///     let mut started = lock.lock().unwrap();\n     ///     *started = true;\n     ///     // We notify the condvar that the value has changed.\n     ///     cvar.notify_one();\n     /// });\n     ///\n     /// // Wait for the thread to start up.\n-    /// let &(ref lock, ref cvar) = &*pair;\n+    /// let (lock, cvar) = &*pair;\n     /// let mut started = lock.lock().unwrap();\n     /// // As long as the value inside the `Mutex<bool>` is `false`, we wait.\n     /// loop {\n@@ -374,15 +374,15 @@ impl Condvar {\n     /// let pair2 = pair.clone();\n     ///\n     /// thread::spawn(move|| {\n-    ///     let &(ref lock, ref cvar) = &*pair2;\n+    ///     let (lock, cvar) = &*pair2;\n     ///     let mut started = lock.lock().unwrap();\n     ///     *started = true;\n     ///     // We notify the condvar that the value has changed.\n     ///     cvar.notify_one();\n     /// });\n     ///\n     /// // wait for the thread to start up\n-    /// let &(ref lock, ref cvar) = &*pair;\n+    /// let (lock, cvar) = &*pair;\n     /// let mut started = lock.lock().unwrap();\n     /// // as long as the value inside the `Mutex<bool>` is `false`, we wait\n     /// loop {\n@@ -449,15 +449,15 @@ impl Condvar {\n     /// let pair2 = pair.clone();\n     ///\n     /// thread::spawn(move|| {\n-    ///     let &(ref lock, ref cvar) = &*pair2;\n+    ///     let (lock, cvar) = &*pair2;\n     ///     let mut started = lock.lock().unwrap();\n     ///     *started = true;\n     ///     // We notify the condvar that the value has changed.\n     ///     cvar.notify_one();\n     /// });\n     ///\n     /// // wait for the thread to start up\n-    /// let &(ref lock, ref cvar) = &*pair;\n+    /// let (lock, cvar) = &*pair;\n     /// let result = cvar.wait_timeout_until(\n     ///     lock.lock().unwrap(),\n     ///     Duration::from_millis(100),\n@@ -508,15 +508,15 @@ impl Condvar {\n     /// let pair2 = pair.clone();\n     ///\n     /// thread::spawn(move|| {\n-    ///     let &(ref lock, ref cvar) = &*pair2;\n+    ///     let (lock, cvar) = &*pair2;\n     ///     let mut started = lock.lock().unwrap();\n     ///     *started = true;\n     ///     // We notify the condvar that the value has changed.\n     ///     cvar.notify_one();\n     /// });\n     ///\n     /// // Wait for the thread to start up.\n-    /// let &(ref lock, ref cvar) = &*pair;\n+    /// let (lock, cvar) = &*pair;\n     /// let mut started = lock.lock().unwrap();\n     /// // As long as the value inside the `Mutex<bool>` is `false`, we wait.\n     /// while !*started {\n@@ -548,15 +548,15 @@ impl Condvar {\n     /// let pair2 = pair.clone();\n     ///\n     /// thread::spawn(move|| {\n-    ///     let &(ref lock, ref cvar) = &*pair2;\n+    ///     let (lock, cvar) = &*pair2;\n     ///     let mut started = lock.lock().unwrap();\n     ///     *started = true;\n     ///     // We notify the condvar that the value has changed.\n     ///     cvar.notify_all();\n     /// });\n     ///\n     /// // Wait for the thread to start up.\n-    /// let &(ref lock, ref cvar) = &*pair;\n+    /// let (lock, cvar) = &*pair;\n     /// let mut started = lock.lock().unwrap();\n     /// // As long as the value inside the `Mutex<bool>` is `false`, we wait.\n     /// while !*started {"}]}