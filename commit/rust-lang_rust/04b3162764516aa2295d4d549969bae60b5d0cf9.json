{"sha": "04b3162764516aa2295d4d549969bae60b5d0cf9", "node_id": "C_kwDOAAsO6NoAKDA0YjMxNjI3NjQ1MTZhYTIyOTVkNGQ1NDk5NjliYWU2MGI1ZDBjZjk", "commit": {"author": {"name": "fren_gor", "email": "goro@frengor.com", "date": "2022-02-20T00:46:55Z"}, "committer": {"name": "fren_gor", "email": "goro@frengor.com", "date": "2022-02-20T00:57:32Z"}, "message": "Add collect_into", "tree": {"sha": "f3df0bd08cb2b9b8362275298992849c259c25a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3df0bd08cb2b9b8362275298992849c259c25a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04b3162764516aa2295d4d549969bae60b5d0cf9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEnvwGTbGb3IOQ4iEXtbyNv7JzyMQFAmIRkf0ACgkQtbyNv7Jz\nyMTiSA//YaOb6kvEe5Bq6+wE+2SfNw8muHeqvSpvZIUwFERPAkLEDDvlMuITmKHt\npr5UdxGwRV2AzXNdl70plR5wvVNjraq0KjlOB1/wZI1vm+IJteo/ovdx4iuScOmU\n9J7WbIG/glltsllV0PQ8RLgQY+H8g3Vi/PIMef9EE4LT0xdg4Xj9NtMWHnU8CiRb\noRnmZQpQcGSoN0pn1m3r4FBPWNjFByMzFUiK13LYZF7pPKI6bQDtFR2V8FQ8x2xy\nv+mtmPqa4863IVyr97Xli+JTq00PSM2Z2mcTJMfq8dPjAWZ2iMr6iWRiAcH1dBg5\nwjFSgmL6fBgBmDLUOS6u8oIJov/wvouEH2vPQrxs1K4CLuV2SIK8RgYwjiw+GgZo\nzW5Kq62woDq8ihsS7qfCYZYmVBjqLcu50elUhWb24oqryhEcEOdtZNoPAJckXd+w\niTdK8GZH/8aN4RVO3e8Q8yZimuJF9WB9gtw47QlgbkVSmj4f4sKKfiohIJKJwTCL\nNP6pMZ4apRvkNlOIOeJwBQDTcKjwbOR1vqZmrUUVSgZIcNZUkMEwkttydSYhUFpY\ngy6wP+B8BhXb1744ySoIsuThTA1L9pupV1OwNfnItluqlGvCRrHkfdwLAeRXq3QB\nAJV5etsq7zsGPsdo1SHO9b75PArI3zPJ5PYTQM+GKTgVQyzxypI=\n=H1as\n-----END PGP SIGNATURE-----", "payload": "tree f3df0bd08cb2b9b8362275298992849c259c25a9\nparent 3b348d932aa5c9884310d025cf7c516023fd0d9a\nauthor fren_gor <goro@frengor.com> 1645318015 +0100\ncommitter fren_gor <goro@frengor.com> 1645318652 +0100\n\nAdd collect_into\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04b3162764516aa2295d4d549969bae60b5d0cf9", "html_url": "https://github.com/rust-lang/rust/commit/04b3162764516aa2295d4d549969bae60b5d0cf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04b3162764516aa2295d4d549969bae60b5d0cf9/comments", "author": {"login": "frengor", "id": 31711263, "node_id": "MDQ6VXNlcjMxNzExMjYz", "avatar_url": "https://avatars.githubusercontent.com/u/31711263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frengor", "html_url": "https://github.com/frengor", "followers_url": "https://api.github.com/users/frengor/followers", "following_url": "https://api.github.com/users/frengor/following{/other_user}", "gists_url": "https://api.github.com/users/frengor/gists{/gist_id}", "starred_url": "https://api.github.com/users/frengor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frengor/subscriptions", "organizations_url": "https://api.github.com/users/frengor/orgs", "repos_url": "https://api.github.com/users/frengor/repos", "events_url": "https://api.github.com/users/frengor/events{/privacy}", "received_events_url": "https://api.github.com/users/frengor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frengor", "id": 31711263, "node_id": "MDQ6VXNlcjMxNzExMjYz", "avatar_url": "https://avatars.githubusercontent.com/u/31711263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frengor", "html_url": "https://github.com/frengor", "followers_url": "https://api.github.com/users/frengor/followers", "following_url": "https://api.github.com/users/frengor/following{/other_user}", "gists_url": "https://api.github.com/users/frengor/gists{/gist_id}", "starred_url": "https://api.github.com/users/frengor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frengor/subscriptions", "organizations_url": "https://api.github.com/users/frengor/orgs", "repos_url": "https://api.github.com/users/frengor/repos", "events_url": "https://api.github.com/users/frengor/events{/privacy}", "received_events_url": "https://api.github.com/users/frengor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b348d932aa5c9884310d025cf7c516023fd0d9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b348d932aa5c9884310d025cf7c516023fd0d9a", "html_url": "https://github.com/rust-lang/rust/commit/3b348d932aa5c9884310d025cf7c516023fd0d9a"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "9b22023b09e3e9759a218a4d7cd228ccb4d896fb", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/04b3162764516aa2295d4d549969bae60b5d0cf9/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04b3162764516aa2295d4d549969bae60b5d0cf9/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=04b3162764516aa2295d4d549969bae60b5d0cf9", "patch": "@@ -1859,6 +1859,77 @@ pub trait Iterator {\n         try_process(self, |i| i.collect())\n     }\n \n+    /// Collects all the items from an iterator into a collection.\n+    ///\n+    /// This method consumes the iterator and adds all its items to the\n+    /// passed collection. The collection is then returned, so the call chain\n+    /// can be continued.\n+    ///\n+    /// This is useful when you already have a collection and wants to add\n+    /// the iterator items to it.\n+    ///\n+    /// This method is a convenience method to call [Extend::extend](trait.Extend.html),\n+    /// but instead of being called on a collection, it's called on an iterator.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(iter_collect_into)]\n+    ///\n+    /// let a = [1, 2, 3];\n+    /// let mut vec: Vec::<i32> = vec![0, 1];\n+    ///\n+    /// a.iter().map(|&x| x * 2).collect_into(&mut vec);\n+    /// a.iter().map(|&x| x * 10).collect_into(&mut vec);\n+    ///\n+    /// assert_eq!(vec![0, 1, 2, 4, 6, 10, 20, 30], vec);\n+    /// ```\n+    ///\n+    /// `Vec` can have a manual set capacity to avoid reallocating it:\n+    ///\n+    /// ```\n+    /// #![feature(iter_collect_into)]\n+    ///\n+    /// let a = [1, 2, 3];\n+    /// let mut vec: Vec::<i32> = Vec::with_capacity(6);\n+    ///\n+    /// a.iter().map(|&x| x * 2).collect_into(&mut vec);\n+    /// a.iter().map(|&x| x * 10).collect_into(&mut vec);\n+    ///\n+    /// assert_eq!(6, vec.capacity());\n+    /// println!(\"{:?}\", vec);\n+    /// ```\n+    ///\n+    /// The returned mutable reference can be used to continue the call chain:\n+    ///\n+    /// ```\n+    /// #![feature(iter_collect_into)]\n+    ///\n+    /// let a = [1, 2, 3];\n+    /// let mut vec: Vec::<i32> = Vec::with_capacity(6);\n+    ///\n+    /// let count = a.iter().collect_into(&mut vec).iter().count();\n+    ///\n+    /// assert_eq!(count, vec.len());\n+    /// println!(\"Vec len is {}\", count);\n+    ///\n+    /// let count = a.iter().collect_into(&mut vec).iter().count();\n+    ///\n+    /// assert_eq!(count, vec.len());\n+    /// println!(\"Vec len now is {}\", count);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iter_collect_into\", reason = \"new API\", issue = \"none\")]\n+    fn collect_into<E: Extend<Self::Item>>(self, collection: &mut E) -> &mut E\n+    where\n+        Self: Sized,\n+    {\n+        collection.extend(self);\n+        collection\n+    }\n+\n     /// Consumes an iterator, creating two collections from it.\n     ///\n     /// The predicate passed to `partition()` can return `true`, or `false`."}, {"sha": "32bd68e3d2554a2c717d428c8635cff70ac1eaf8", "filename": "library/core/tests/iter/traits/iterator.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04b3162764516aa2295d4d549969bae60b5d0cf9/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04b3162764516aa2295d4d549969bae60b5d0cf9/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs?ref=04b3162764516aa2295d4d549969bae60b5d0cf9", "patch": "@@ -543,6 +543,14 @@ fn test_try_collect() {\n     assert_eq!(v, Continue(vec![4, 5]));\n }\n \n+#[test]\n+fn test_collect_into() {\n+    let a = vec![1, 2, 3, 4, 5];\n+    let mut b = Vec::new();\n+    a.iter().cloned().collect_into(&mut b);\n+    assert!(a == b);\n+}\n+\n // just tests by whether or not this compiles\n fn _empty_impl_all_auto_traits<T>() {\n     use std::panic::{RefUnwindSafe, UnwindSafe};"}, {"sha": "39d8625e8bf6c252b572ef8a71fc608226523914", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04b3162764516aa2295d4d549969bae60b5d0cf9/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04b3162764516aa2295d4d549969bae60b5d0cf9/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=04b3162764516aa2295d4d549969bae60b5d0cf9", "patch": "@@ -63,6 +63,7 @@\n #![feature(slice_partition_dedup)]\n #![feature(int_log)]\n #![feature(iter_advance_by)]\n+#![feature(iter_collect_into)]\n #![feature(iter_partition_in_place)]\n #![feature(iter_intersperse)]\n #![feature(iter_is_partitioned)]"}]}