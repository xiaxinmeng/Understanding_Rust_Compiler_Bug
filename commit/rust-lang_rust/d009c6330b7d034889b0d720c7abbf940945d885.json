{"sha": "d009c6330b7d034889b0d720c7abbf940945d885", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMDljNjMzMGI3ZDAzNDg4OWIwZDcyMGM3YWJiZjk0MDk0NWQ4ODU=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-02-10T19:44:47Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-02-17T20:20:42Z"}, "message": "Make univariant enums act like structs, so that they're aligned correctly.\n\nConsts of such enums are aligned correctly, so we could either misalign\nthem to match the type_of, or fix the type_of.  The latter seems like a\nbetter idea.", "tree": {"sha": "b1095635fb458800eeff12bf344ec5e4e7c06fa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1095635fb458800eeff12bf344ec5e4e7c06fa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d009c6330b7d034889b0d720c7abbf940945d885", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d009c6330b7d034889b0d720c7abbf940945d885", "html_url": "https://github.com/rust-lang/rust/commit/d009c6330b7d034889b0d720c7abbf940945d885", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d009c6330b7d034889b0d720c7abbf940945d885/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ea05a4d3e5a8ca5a5ca9585f88d3fadda83b60c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea05a4d3e5a8ca5a5ca9585f88d3fadda83b60c", "html_url": "https://github.com/rust-lang/rust/commit/9ea05a4d3e5a8ca5a5ca9585f88d3fadda83b60c"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "6be82f833a6aec6e65a28c3f588e2738ea4894a2", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d009c6330b7d034889b0d720c7abbf940945d885/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d009c6330b7d034889b0d720c7abbf940945d885/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=d009c6330b7d034889b0d720c7abbf940945d885", "patch": "@@ -328,11 +328,20 @@ pub fn type_of(cx: @crate_ctxt, t: ty::t) -> TypeRef {\n pub fn enum_body_types(cx: @crate_ctxt, did: ast::def_id, t: ty::t)\n                     -> ~[TypeRef] {\n     let univar = ty::enum_is_univariant(cx.tcx, did);\n-    let size = machine::static_size_of_enum(cx, t);\n     if !univar {\n+        let size = machine::static_size_of_enum(cx, t);\n         ~[T_enum_discrim(cx), T_array(T_i8(), size)]\n-    } else {\n-        ~[T_array(T_i8(), size)]\n+    }\n+    else {\n+        // Use the actual fields, so we get the alignment right.\n+        match ty::get(t).sty {\n+            ty::ty_enum(_, ref substs) => {\n+                do ty::enum_variants(cx.tcx, did)[0].args.map |&field_ty| {\n+                    sizing_type_of(cx, ty::subst(cx.tcx, substs, field_ty))\n+                }\n+            }\n+            _ => cx.sess.bug(~\"enum is not an enum\")\n+        }\n     }\n }\n "}, {"sha": "126af6ae73012735dea9c1067fddd0cc80fb11ba", "filename": "src/test/run-pass/const-enum-newtype-align.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d009c6330b7d034889b0d720c7abbf940945d885/src%2Ftest%2Frun-pass%2Fconst-enum-newtype-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d009c6330b7d034889b0d720c7abbf940945d885/src%2Ftest%2Frun-pass%2Fconst-enum-newtype-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-newtype-align.rs?ref=d009c6330b7d034889b0d720c7abbf940945d885", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum E = u32;\n+struct S { a: u8, b: E }\n+const C: S = S { a: 0xA5, b: E(0xDEADBEEF) };\n+\n+fn main() {\n+    assert C.b == 0xDEADBEEF;\n+}"}]}