{"sha": "5da73311be4c6cefc557c8615d39b0e44ef8de95", "node_id": "C_kwDOAAsO6NoAKDVkYTczMzExYmU0YzZjZWZjNTU3Yzg2MTVkMzliMGU0NGVmOGRlOTU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-11T07:22:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-11T07:22:33Z"}, "message": "Rollup merge of #91553 - devnexen:anc_data_dfbsd, r=yaahc\n\nsocket ancillary data implementation for dragonflybsd.", "tree": {"sha": "91c09376c48c26405b482b881ab8fcf6cea77020", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91c09376c48c26405b482b881ab8fcf6cea77020"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5da73311be4c6cefc557c8615d39b0e44ef8de95", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhtFG6CRBK7hj4Ov3rIwAAmHYIAID6j5tHY9tcDwPUylmtedSh\nJRV5abbfy7YPrccDv+LlRJgym/rXQr1P179ocJXToXtpwVohl9ZLtudQx7rGfxJr\nddBdDAwPTGfTE1BCcWYzHn1QHOu7k0yOcEMq7XVAzEUpUjkUIoYPhj+px9haF5h3\n0hAL9IxAYF7cR6+3D6CqDFoNrhnPmLHrLYW90QYmiBsdqNZjpJtZg5vC3sufRrfs\nl7r1KEt62l6qpVCREkRO2gYjzVVH1X0ZpbPJstDkOaw8GytpzkMOrGjWGq3TB2ES\n1NH1cS5ZXWS5Rzv3rbMXhsW+CgbyAv7kneTXsckInNrgqZosLTxWD0MTiXJ5u2g=\n=9sUc\n-----END PGP SIGNATURE-----\n", "payload": "tree 91c09376c48c26405b482b881ab8fcf6cea77020\nparent 27c791ca86335f7301ca38b8944ae97da20d60ab\nparent e68887e67cc6b7bb4ea5113a40eaa4c0831bda13\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639207353 +0100\ncommitter GitHub <noreply@github.com> 1639207353 +0100\n\nRollup merge of #91553 - devnexen:anc_data_dfbsd, r=yaahc\n\nsocket ancillary data implementation for dragonflybsd.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5da73311be4c6cefc557c8615d39b0e44ef8de95", "html_url": "https://github.com/rust-lang/rust/commit/5da73311be4c6cefc557c8615d39b0e44ef8de95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5da73311be4c6cefc557c8615d39b0e44ef8de95/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27c791ca86335f7301ca38b8944ae97da20d60ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/27c791ca86335f7301ca38b8944ae97da20d60ab", "html_url": "https://github.com/rust-lang/rust/commit/27c791ca86335f7301ca38b8944ae97da20d60ab"}, {"sha": "e68887e67cc6b7bb4ea5113a40eaa4c0831bda13", "url": "https://api.github.com/repos/rust-lang/rust/commits/e68887e67cc6b7bb4ea5113a40eaa4c0831bda13", "html_url": "https://github.com/rust-lang/rust/commit/e68887e67cc6b7bb4ea5113a40eaa4c0831bda13"}], "stats": {"total": 100, "additions": 92, "deletions": 8}, "files": [{"sha": "a29008140f784fbde78e86c5926e732498728c79", "filename": "library/std/src/os/unix/net/ancillary.rs", "status": "modified", "additions": 80, "deletions": 2, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/5da73311be4c6cefc557c8615d39b0e44ef8de95/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da73311be4c6cefc557c8615d39b0e44ef8de95/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs?ref=5da73311be4c6cefc557c8615d39b0e44ef8de95", "patch": "@@ -16,6 +16,8 @@ mod libc {\n     pub use libc::c_int;\n     pub struct ucred;\n     pub struct cmsghdr;\n+    #[cfg(target_os = \"dragonfly\")]\n+    pub struct cmsgcred;\n     pub type pid_t = i32;\n     pub type gid_t = u32;\n     pub type uid_t = u32;\n@@ -183,6 +185,11 @@ impl<'a, T> Iterator for AncillaryDataIter<'a, T> {\n #[derive(Clone)]\n pub struct SocketCred(libc::ucred);\n \n+#[cfg(target_os = \"dragonfly\")]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+#[derive(Clone)]\n+pub struct SocketCred(libc::cmsgcred);\n+\n #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n impl SocketCred {\n     /// Create a Unix credential struct.\n@@ -234,6 +241,57 @@ impl SocketCred {\n     }\n }\n \n+#[cfg(target_os = \"dragonfly\")]\n+impl SocketCred {\n+    /// Create a Unix credential struct.\n+    ///\n+    /// PID, UID and GID is set to 0.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    #[must_use]\n+    pub fn new() -> SocketCred {\n+        SocketCred(libc::cmsgcred { cmsgcred_pid: 0, cmsgcred_uid: 0, cmsgcred_gid: 0 })\n+    }\n+\n+    /// Set the PID.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn set_pid(&mut self, pid: libc::pid_t) {\n+        self.0.cmsgcred_pid = pid;\n+    }\n+\n+    /// Get the current PID.\n+    #[must_use]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn get_pid(&self) -> libc::pid_t {\n+        self.0.cmsgcred_pid\n+    }\n+\n+    /// Set the UID.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn set_uid(&mut self, uid: libc::uid_t) {\n+        self.0.cmsgcred_uid = uid;\n+    }\n+\n+    /// Get the current UID.\n+    #[must_use]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn get_uid(&self) -> libc::uid_t {\n+        self.0.cmsgcred_uid\n+    }\n+\n+    /// Set the GID.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn set_gid(&mut self, gid: libc::gid_t) {\n+        self.0.cmsgcred_gid = gid;\n+    }\n+\n+    /// Get the current GID.\n+    #[must_use]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn get_gid(&self) -> libc::gid_t {\n+        self.0.cmsgcred_gid\n+    }\n+}\n+\n /// This control message contains file descriptors.\n ///\n /// The level is equal to `SOL_SOCKET` and the type is equal to `SCM_RIGHTS`.\n@@ -256,7 +314,11 @@ impl<'a> Iterator for ScmRights<'a> {\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n pub struct ScmCredentials<'a>(AncillaryDataIter<'a, libc::ucred>);\n \n-#[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+#[cfg(target_os = \"dragonfly\")]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+pub struct ScmCredentials<'a>(AncillaryDataIter<'a, libc::cmsgcred>);\n+\n+#[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"dragonfly\",))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n impl<'a> Iterator for ScmCredentials<'a> {\n     type Item = SocketCred;\n@@ -300,7 +362,7 @@ impl<'a> AncillaryData<'a> {\n     /// # Safety\n     ///\n     /// `data` must contain a valid control message and the control message must be type of\n-    /// `SOL_SOCKET` and level of `SCM_CREDENTIALS` or `SCM_CREDENTIALS`.\n+    /// `SOL_SOCKET` and level of `SCM_CREDENTIALS` or `SCM_CREDS`.\n     #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n     unsafe fn as_credentials(data: &'a [u8]) -> Self {\n         let ancillary_data_iter = AncillaryDataIter::new(data);\n@@ -320,6 +382,9 @@ impl<'a> AncillaryData<'a> {\n                     libc::SCM_RIGHTS => Ok(AncillaryData::as_rights(data)),\n                     #[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n                     libc::SCM_CREDENTIALS => Ok(AncillaryData::as_credentials(data)),\n+                    #[cfg(target_os = \"dragonfly\")]\n+                    libc::SCM_CREDS => Ok(AncillaryData::as_credentials(data)),\n+\n                     cmsg_type => {\n                         Err(AncillaryError::Unknown { cmsg_level: libc::SOL_SOCKET, cmsg_type })\n                     }\n@@ -544,6 +609,19 @@ impl<'a> SocketAncillary<'a> {\n         )\n     }\n \n+    #[cfg(target_os = \"dragonfly\")]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn add_creds(&mut self, creds: &[SocketCred]) -> bool {\n+        self.truncated = false;\n+        add_to_ancillary_data(\n+            &mut self.buffer,\n+            &mut self.length,\n+            creds,\n+            libc::SOL_SOCKET,\n+            libc::SCM_CREDS,\n+        )\n+    }\n+\n     /// Clears the ancillary data, removing all values.\n     ///\n     /// # Example"}, {"sha": "f23f8f94a242fdbd777e012424894201433b0af2", "filename": "library/std/src/os/unix/net/datagram.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5da73311be4c6cefc557c8615d39b0e44ef8de95/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da73311be4c6cefc557c8615d39b0e44ef8de95/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs?ref=5da73311be4c6cefc557c8615d39b0e44ef8de95", "patch": "@@ -854,8 +854,14 @@ impl UnixDatagram {\n     ///\n     /// # Examples\n     ///\n-    #[cfg_attr(any(target_os = \"android\", target_os = \"linux\"), doc = \"```no_run\")]\n-    #[cfg_attr(not(any(target_os = \"android\", target_os = \"linux\")), doc = \"```ignore\")]\n+    #[cfg_attr(\n+        any(target_os = \"android\", target_os = \"linux\", target_os = \"dragonfly\"),\n+        doc = \"```no_run\"\n+    )]\n+    #[cfg_attr(\n+        not(any(target_os = \"android\", target_os = \"linux\", target_os = \"dragonfly\")),\n+        doc = \"```ignore\"\n+    )]\n     /// #![feature(unix_socket_ancillary_data)]\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n@@ -865,7 +871,7 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"dragonfly\",))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {\n         self.0.set_passcred(passcred)\n@@ -877,7 +883,7 @@ impl UnixDatagram {\n     /// Get the socket option `SO_PASSCRED`.\n     ///\n     /// [`set_passcred`]: UnixDatagram::set_passcred\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"dragonfly\",))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn passcred(&self) -> io::Result<bool> {\n         self.0.passcred()"}, {"sha": "15d0dbe07fe7ec52f13e92b1896b9f320689c657", "filename": "library/std/src/sys/unix/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5da73311be4c6cefc557c8615d39b0e44ef8de95/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da73311be4c6cefc557c8615d39b0e44ef8de95/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs?ref=5da73311be4c6cefc557c8615d39b0e44ef8de95", "patch": "@@ -408,12 +408,12 @@ impl Socket {\n         Ok(raw != 0)\n     }\n \n-    #[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n+    #[cfg(any(target_os = \"android\", target_os = \"linux\", target_os = \"dragonfly\",))]\n     pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {\n         setsockopt(self, libc::SOL_SOCKET, libc::SO_PASSCRED, passcred as libc::c_int)\n     }\n \n-    #[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n+    #[cfg(any(target_os = \"android\", target_os = \"linux\", target_os = \"dragonfly\",))]\n     pub fn passcred(&self) -> io::Result<bool> {\n         let passcred: libc::c_int = getsockopt(self, libc::SOL_SOCKET, libc::SO_PASSCRED)?;\n         Ok(passcred != 0)"}]}