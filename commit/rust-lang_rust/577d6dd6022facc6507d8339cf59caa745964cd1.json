{"sha": "577d6dd6022facc6507d8339cf59caa745964cd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3N2Q2ZGQ2MDIyZmFjYzY1MDdkODMzOWNmNTljYWE3NDU5NjRjZDE=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-13T15:43:01Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-13T15:43:01Z"}, "message": "Improve lexing of float literals\n\nCloses #575", "tree": {"sha": "4e986413c71db1132317b9a053a2d5e9b320393e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e986413c71db1132317b9a053a2d5e9b320393e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/577d6dd6022facc6507d8339cf59caa745964cd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/577d6dd6022facc6507d8339cf59caa745964cd1", "html_url": "https://github.com/rust-lang/rust/commit/577d6dd6022facc6507d8339cf59caa745964cd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/577d6dd6022facc6507d8339cf59caa745964cd1/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f72573cce824429cab75200b84229b2d239c7d60", "url": "https://api.github.com/repos/rust-lang/rust/commits/f72573cce824429cab75200b84229b2d239c7d60", "html_url": "https://github.com/rust-lang/rust/commit/f72573cce824429cab75200b84229b2d239c7d60"}], "stats": {"total": 75, "additions": 36, "deletions": 39}, "files": [{"sha": "ed842322f5dd440b394488578e9841a1252d4aab", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 36, "deletions": 39, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/577d6dd6022facc6507d8339cf59caa745964cd1/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577d6dd6022facc6507d8339cf59caa745964cd1/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=577d6dd6022facc6507d8339cf59caa745964cd1", "patch": "@@ -195,7 +195,7 @@ fn scan_dec_digits(rdr: reader) -> str {\n \n fn scan_number(c: char, rdr: reader) -> token::token {\n     let accum_int = 0;\n-    let dec_str: str = \"\";\n+    let num_str: str = \"\";\n     let is_dec_integer: bool = false;\n     let n = rdr.next();\n     if c == '0' && n == 'x' {\n@@ -216,8 +216,8 @@ fn scan_number(c: char, rdr: reader) -> token::token {\n             rdr.bump();\n             c = rdr.curr();\n         }\n-    } else { dec_str = scan_dec_digits(rdr); is_dec_integer = true; }\n-    if is_dec_integer { accum_int = digits_to_string(dec_str); }\n+    } else { num_str = scan_dec_digits(rdr); is_dec_integer = true; }\n+    if is_dec_integer { accum_int = digits_to_string(num_str); }\n     c = rdr.curr();\n     n = rdr.next();\n     if c == 'u' || c == 'i' {\n@@ -256,53 +256,50 @@ fn scan_number(c: char, rdr: reader) -> token::token {\n             ret token::LIT_INT(accum_int);\n         } else {\n             // FIXME: should cast in the target bit-width.\n-\n             ret token::LIT_UINT(accum_int as uint);\n         }\n     }\n-    c = rdr.curr();\n-    if c == '.' {\n-        // Parse a floating-point number.\n-\n+    let is_float = false;\n+    if rdr.curr() == '.' {\n+        is_float = true;\n         rdr.bump();\n         let dec_part = scan_dec_digits(rdr);\n-        let float_str = dec_str + \".\" + dec_part;\n-        c = rdr.curr();\n-        let exponent_str = scan_exponent(rdr);\n-        alt exponent_str { some(s) { float_str += s; } none. { } }\n+        num_str += \".\" + dec_part;\n+    }\n+    alt scan_exponent(rdr) {\n+      some(s) {\n+        is_float = true;\n+        num_str += s;\n+      }\n+      none. {}\n+    }\n+    if rdr.curr() == 'f' {\n+        rdr.bump();\n         c = rdr.curr();\n-        if c == 'f' {\n+        n = rdr.next();\n+        if c == '3' && n == '2' {\n             rdr.bump();\n-            c = rdr.curr();\n-            n = rdr.next();\n-            if c == '3' && n == '2' {\n-                rdr.bump();\n-                rdr.bump();\n-                ret token::LIT_MACH_FLOAT(ast::ty_f32,\n-                                          intern(*rdr.get_interner(),\n-                                                 float_str));\n-            } else if c == '6' && n == '4' {\n-                rdr.bump();\n-                rdr.bump();\n-                ret token::LIT_MACH_FLOAT(ast::ty_f64,\n-                                          intern(*rdr.get_interner(),\n-                                                 float_str));\n-                /* FIXME: if this is out of range for either a 32-bit or\n-                   64-bit float, it won't be noticed till the back-end */\n-\n-            }\n+            rdr.bump();\n+            ret token::LIT_MACH_FLOAT(ast::ty_f32,\n+                                      intern(*rdr.get_interner(),\n+                                             num_str));\n+        } else if c == '6' && n == '4' {\n+            rdr.bump();\n+            rdr.bump();\n+            ret token::LIT_MACH_FLOAT(ast::ty_f64,\n+                                      intern(*rdr.get_interner(),\n+                                             num_str));\n+            /* FIXME: if this is out of range for either a 32-bit or\n+            64-bit float, it won't be noticed till the back-end */\n         } else {\n-            ret token::LIT_FLOAT(interner::intern::<str>(*rdr.get_interner(),\n-                                                         float_str));\n+            is_float = true;\n         }\n     }\n-    let maybe_exponent = scan_exponent(rdr);\n-    alt maybe_exponent {\n-      some(s) {\n+    if is_float {\n         ret token::LIT_FLOAT(interner::intern::<str>(*rdr.get_interner(),\n-                                                     dec_str + s));\n-      }\n-      none. { ret token::LIT_INT(accum_int); }\n+                                                     num_str));\n+    } else {\n+        ret token::LIT_INT(accum_int);\n     }\n }\n "}]}