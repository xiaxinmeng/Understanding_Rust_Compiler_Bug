{"sha": "ca258c5d1fa13523c40ff8b2f46fa33c79110579", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMjU4YzVkMWZhMTM1MjNjNDBmZjhiMmY0NmZhMzNjNzkxMTA1Nzk=", "commit": {"author": {"name": "Without Boats", "email": "boats@mozilla.com", "date": "2018-08-20T18:18:29Z"}, "committer": {"name": "Without Boats", "email": "boats@mozilla.com", "date": "2018-08-20T18:18:29Z"}, "message": "Add Error::source method per RFC 2504.", "tree": {"sha": "bee6193f071ca9eb17e2666ac6dca71a4627c53f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bee6193f071ca9eb17e2666ac6dca71a4627c53f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca258c5d1fa13523c40ff8b2f46fa33c79110579", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQB1BAAWCAAdFiEEcsU1MS52w+AyCfaTF0Yl5eh3wNkFAlt7B0kACgkQF0Yl5eh3wNnANAD/crmo\nHYlQzDyJnLVvNMnsnk+9/MKv5Nc7azod3NNlslcBALZa2sAIqcwt+3Og7kpnMVMmC4YV2fqqktNn\nDvUxLRMN\n=0+T6\n-----END PGP SIGNATURE-----\n", "payload": "tree bee6193f071ca9eb17e2666ac6dca71a4627c53f\nparent bf1e461173e3936e4014cc951dfbdd7d9ec9190b\nauthor Without Boats <boats@mozilla.com> 1534789109 +0200\ncommitter Without Boats <boats@mozilla.com> 1534789109 +0200\n\nAdd Error::source method per RFC 2504.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca258c5d1fa13523c40ff8b2f46fa33c79110579", "html_url": "https://github.com/rust-lang/rust/commit/ca258c5d1fa13523c40ff8b2f46fa33c79110579", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca258c5d1fa13523c40ff8b2f46fa33c79110579/comments", "author": null, "committer": null, "parents": [{"sha": "bf1e461173e3936e4014cc951dfbdd7d9ec9190b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf1e461173e3936e4014cc951dfbdd7d9ec9190b", "html_url": "https://github.com/rust-lang/rust/commit/bf1e461173e3936e4014cc951dfbdd7d9ec9190b"}], "stats": {"total": 67, "additions": 66, "deletions": 1}, "files": [{"sha": "af5a0571c884ebf46b3e1c523f01d4c94a177bb5", "filename": "src/libstd/error.rs", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/ca258c5d1fa13523c40ff8b2f46fa33c79110579/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca258c5d1fa13523c40ff8b2f46fa33c79110579/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=ca258c5d1fa13523c40ff8b2f46fa33c79110579", "patch": "@@ -138,7 +138,72 @@ pub trait Error: Debug + Display {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn cause(&self) -> Option<&dyn Error> { None }\n+    #[rustc_deprecated(since = \"1.33.0\", reason = \"replaced by Error::source, which can support \\\n+                                                   downcasting\")]\n+    fn cause(&self) -> Option<&dyn Error> {\n+        self.source()\n+    }\n+\n+    /// The lower-level source of this error, if any.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::fmt;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct SuperError {\n+    ///     side: SuperErrorSideKick,\n+    /// }\n+    ///\n+    /// impl fmt::Display for SuperError {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f, \"SuperError is here!\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Error for SuperError {\n+    ///     fn description(&self) -> &str {\n+    ///         \"I'm the superhero of errors\"\n+    ///     }\n+    ///\n+    ///     fn source(&self) -> Option<&dyn (Error + 'static)> {\n+    ///         Some(&self.side)\n+    ///     }\n+    /// }\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct SuperErrorSideKick;\n+    ///\n+    /// impl fmt::Display for SuperErrorSideKick {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f, \"SuperErrorSideKick is here!\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Error for SuperErrorSideKick {\n+    ///     fn description(&self) -> &str {\n+    ///         \"I'm SuperError side kick\"\n+    ///     }\n+    /// }\n+    ///\n+    /// fn get_super_error() -> Result<(), SuperError> {\n+    ///     Err(SuperError { side: SuperErrorSideKick })\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     match get_super_error() {\n+    ///         Err(e) => {\n+    ///             println!(\"Error: {}\", e.description());\n+    ///             println!(\"Caused by: {}\", e.source().unwrap());\n+    ///         }\n+    ///         _ => println!(\"No error\"),\n+    ///     }\n+    /// }\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.30.0\")]\n+    fn source(&self) -> Option<&(dyn Error + 'static)> { None }\n \n     /// Get the `TypeId` of `self`\n     #[doc(hidden)]"}]}