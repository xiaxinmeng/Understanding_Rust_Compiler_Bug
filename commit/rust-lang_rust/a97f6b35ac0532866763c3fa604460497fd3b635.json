{"sha": "a97f6b35ac0532866763c3fa604460497fd3b635", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5N2Y2YjM1YWMwNTMyODY2NzYzYzNmYTYwNDQ2MDQ5N2ZkM2I2MzU=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2016-05-28T19:50:33Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2016-06-02T01:02:36Z"}, "message": "[MIR] Use If terminator for switches on bools rather than SwitchInt.", "tree": {"sha": "3baa61d4d8248f10067770fdfe34c2777ac709b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3baa61d4d8248f10067770fdfe34c2777ac709b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a97f6b35ac0532866763c3fa604460497fd3b635", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a97f6b35ac0532866763c3fa604460497fd3b635", "html_url": "https://github.com/rust-lang/rust/commit/a97f6b35ac0532866763c3fa604460497fd3b635", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a97f6b35ac0532866763c3fa604460497fd3b635/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1776fe244d8603006536dceb7a21967e1c21f9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1776fe244d8603006536dceb7a21967e1c21f9c", "html_url": "https://github.com/rust-lang/rust/commit/f1776fe244d8603006536dceb7a21967e1c21f9c"}], "stats": {"total": 90, "additions": 78, "deletions": 12}, "files": [{"sha": "79656ea21f755bacbbf0debd5ba1d225962c56ad", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 44, "deletions": 12, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a97f6b35ac0532866763c3fa604460497fd3b635/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f6b35ac0532866763c3fa604460497fd3b635/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=a97f6b35ac0532866763c3fa604460497fd3b635", "patch": "@@ -162,21 +162,53 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }\n \n             TestKind::SwitchInt { switch_ty, ref options, indices: _ } => {\n-                let otherwise = self.cfg.start_new_block();\n-                let targets: Vec<_> =\n-                    options.iter()\n-                           .map(|_| self.cfg.start_new_block())\n-                           .chain(Some(otherwise))\n-                           .collect();\n+                let (targets, term) = match switch_ty.sty {\n+                    // If we're matching on boolean we can\n+                    // use the If TerminatorKind instead\n+                    ty::TyBool => {\n+                        assert!(options.len() > 0 && options.len() <= 2);\n+\n+                        let (true_bb, else_bb) =\n+                            (self.cfg.start_new_block(),\n+                             self.cfg.start_new_block());\n+\n+                        let targets = match &options[0] {\n+                            &ConstVal::Bool(true) => vec![true_bb, else_bb],\n+                            &ConstVal::Bool(false) => vec![else_bb, true_bb],\n+                            v => span_bug!(test.span, \"expected boolean value but got {:?}\", v)\n+                        };\n+\n+                        (targets,\n+                         TerminatorKind::If {\n+                             cond: Operand::Consume(lvalue.clone()),\n+                             targets: (true_bb, else_bb)\n+                         })\n+\n+                    }\n+                    _ => {\n+                        // The switch may be inexhaustive so we\n+                        // add a catch all block\n+                        let otherwise = self.cfg.start_new_block();\n+                        let targets: Vec<_> =\n+                            options.iter()\n+                                   .map(|_| self.cfg.start_new_block())\n+                                   .chain(Some(otherwise))\n+                                   .collect();\n+\n+                        (targets.clone(),\n+                         TerminatorKind::SwitchInt {\n+                             discr: lvalue.clone(),\n+                             switch_ty: switch_ty,\n+                             values: options.clone(),\n+                             targets: targets\n+                         })\n+                    }\n+                };\n+\n                 self.cfg.terminate(block,\n                                    scope_id,\n                                    test.span,\n-                                   TerminatorKind::SwitchInt {\n-                                       discr: lvalue.clone(),\n-                                       switch_ty: switch_ty,\n-                                       values: options.clone(),\n-                                       targets: targets.clone(),\n-                                   });\n+                                   term);\n                 targets\n             }\n "}, {"sha": "d88a5f12e303dd17ce017b1accfe197f7437080b", "filename": "src/test/run-pass/exhaustive-bool-match-sanity.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a97f6b35ac0532866763c3fa604460497fd3b635/src%2Ftest%2Frun-pass%2Fexhaustive-bool-match-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f6b35ac0532866763c3fa604460497fd3b635/src%2Ftest%2Frun-pass%2Fexhaustive-bool-match-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexhaustive-bool-match-sanity.rs?ref=a97f6b35ac0532866763c3fa604460497fd3b635", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue #33540\n+// We previously used to generate a 3-armed boolean `SwitchInt` in the\n+// MIR of the function `foo` below. #33583 changed rustc to\n+// generate an `If` terminator instead. This test is to just ensure\n+// sanity in that we generate an if-else chain giving the correct\n+// results.\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_mir]\n+fn foo(x: bool, y: bool) -> u32 {\n+    match (x, y) {\n+        (false, _) => 0,\n+        (_, false) => 1,\n+        (true, true) => 2\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(foo(false, true), 0);\n+    assert_eq!(foo(false, false), 0);\n+    assert_eq!(foo(true, false), 1);\n+    assert_eq!(foo(true, true), 2);\n+}"}]}