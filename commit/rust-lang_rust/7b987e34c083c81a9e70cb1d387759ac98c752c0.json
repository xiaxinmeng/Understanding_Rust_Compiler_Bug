{"sha": "7b987e34c083c81a9e70cb1d387759ac98c752c0", "node_id": "C_kwDOAAsO6NoAKDdiOTg3ZTM0YzA4M2M4MWE5ZTcwY2IxZDM4Nzc1OWFjOThjNzUyYzA", "commit": {"author": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2022-05-21T18:45:14Z"}, "committer": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2022-05-21T21:02:55Z"}, "message": "Merge crate and restricted visibilities", "tree": {"sha": "10c8a23db1578e3d6978fe0ee2ea7321515c0794", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10c8a23db1578e3d6978fe0ee2ea7321515c0794"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b987e34c083c81a9e70cb1d387759ac98c752c0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQTgxeqBxcDGar1sVhy4DhnkZitapAUCYolTfwAKCRC4DhnkZita\npEkZAQCJaQtt2pNEtBT4PGqSk7It1sG2IMteOwxOp2zP9YbNXQD7B0gpO3tKAJQG\nkJYaw9jP5PnowwNtiSOGcW8L6Xs2OwQ=\n=TyM5\n-----END PGP SIGNATURE-----", "payload": "tree 10c8a23db1578e3d6978fe0ee2ea7321515c0794\nparent 8cece636b22620717d6e242ec20fa8d5cf979072\nauthor Jacob Pratt <jacob@jhpratt.dev> 1653158714 -0400\ncommitter Jacob Pratt <jacob@jhpratt.dev> 1653166975 -0400\n\nMerge crate and restricted visibilities\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b987e34c083c81a9e70cb1d387759ac98c752c0", "html_url": "https://github.com/rust-lang/rust/commit/7b987e34c083c81a9e70cb1d387759ac98c752c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b987e34c083c81a9e70cb1d387759ac98c752c0/comments", "author": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cece636b22620717d6e242ec20fa8d5cf979072", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cece636b22620717d6e242ec20fa8d5cf979072", "html_url": "https://github.com/rust-lang/rust/commit/8cece636b22620717d6e242ec20fa8d5cf979072"}], "stats": {"total": 44, "additions": 12, "deletions": 32}, "files": [{"sha": "2c047fbc53945ab04f2166e571283f71788c1b49", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b987e34c083c81a9e70cb1d387759ac98c752c0/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b987e34c083c81a9e70cb1d387759ac98c752c0/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=7b987e34c083c81a9e70cb1d387759ac98c752c0", "patch": "@@ -2576,7 +2576,6 @@ pub struct Visibility {\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum VisibilityKind {\n     Public,\n-    Crate,\n     Restricted { path: P<Path>, id: NodeId },\n     Inherited,\n }"}, {"sha": "85bb52964865bab31cae06050335eb19295e823a", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b987e34c083c81a9e70cb1d387759ac98c752c0/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b987e34c083c81a9e70cb1d387759ac98c752c0/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=7b987e34c083c81a9e70cb1d387759ac98c752c0", "patch": "@@ -1469,7 +1469,7 @@ pub fn noop_flat_map_stmt_kind<T: MutVisitor>(\n \n pub fn noop_visit_vis<T: MutVisitor>(visibility: &mut Visibility, vis: &mut T) {\n     match &mut visibility.kind {\n-        VisibilityKind::Public | VisibilityKind::Crate | VisibilityKind::Inherited => {}\n+        VisibilityKind::Public | VisibilityKind::Inherited => {}\n         VisibilityKind::Restricted { path, id } => {\n             vis.visit_path(path);\n             vis.visit_id(id);"}, {"sha": "67b539a7ad41b77f25b231fe34c89773704ed1b8", "filename": "compiler/rustc_ast_pretty/src/pprust/state/item.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b987e34c083c81a9e70cb1d387759ac98c752c0/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b987e34c083c81a9e70cb1d387759ac98c752c0/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs?ref=7b987e34c083c81a9e70cb1d387759ac98c752c0", "patch": "@@ -403,10 +403,9 @@ impl<'a> State<'a> {\n     pub(crate) fn print_visibility(&mut self, vis: &ast::Visibility) {\n         match vis.kind {\n             ast::VisibilityKind::Public => self.word_nbsp(\"pub\"),\n-            ast::VisibilityKind::Crate => self.word_nbsp(\"pub(crate)\"),\n             ast::VisibilityKind::Restricted { ref path, .. } => {\n                 let path = Self::to_string(|s| s.print_path(path, false, 0));\n-                if path == \"self\" || path == \"super\" {\n+                if path == \"crate\" || path == \"self\" || path == \"super\" {\n                     self.word_nbsp(format!(\"pub({})\", path))\n                 } else {\n                     self.word_nbsp(format!(\"pub(in {})\", path))"}, {"sha": "6e6c1ffe747375853822230e5be16add2f1f3c43", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7b987e34c083c81a9e70cb1d387759ac98c752c0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b987e34c083c81a9e70cb1d387759ac98c752c0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=7b987e34c083c81a9e70cb1d387759ac98c752c0", "patch": "@@ -1245,8 +1245,8 @@ impl<'a> Parser<'a> {\n         res\n     }\n \n-    /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `pub(self)` for `pub(in self)`\n-    /// and `pub(super)` for `pub(in super)`.\n+    /// Parses `pub` and `pub(in path)` plus shortcuts `pub(crate)` for `pub(in crate)`, `pub(self)`\n+    /// for `pub(in self)` and `pub(super)` for `pub(in super)`.\n     /// If the following element can't be a tuple (i.e., it's a function definition), then\n     /// it's not a tuple struct field), and the contents within the parentheses aren't valid,\n     /// so emit a proper diagnostic.\n@@ -1271,19 +1271,7 @@ impl<'a> Parser<'a> {\n             // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.\n             // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so\n             // by the following tokens.\n-            if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)\n-            // account for `pub(crate::foo)`\n-            {\n-                // Parse `pub(crate)`.\n-                self.bump(); // `(`\n-                self.bump(); // `crate`\n-                self.expect(&token::CloseDelim(Delimiter::Parenthesis))?; // `)`\n-                return Ok(Visibility {\n-                    span: lo.to(self.prev_token.span),\n-                    kind: VisibilityKind::Crate,\n-                    tokens: None,\n-                });\n-            } else if self.is_keyword_ahead(1, &[kw::In]) {\n+            if self.is_keyword_ahead(1, &[kw::In]) {\n                 // Parse `pub(in path)`.\n                 self.bump(); // `(`\n                 self.bump(); // `in`\n@@ -1296,11 +1284,11 @@ impl<'a> Parser<'a> {\n                     tokens: None,\n                 });\n             } else if self.look_ahead(2, |t| t == &token::CloseDelim(Delimiter::Parenthesis))\n-                && self.is_keyword_ahead(1, &[kw::Super, kw::SelfLower])\n+                && self.is_keyword_ahead(1, &[kw::Crate, kw::Super, kw::SelfLower])\n             {\n-                // Parse `pub(self)` or `pub(super)`.\n+                // Parse `pub(crate)`, `pub(self)`, or `pub(super)`.\n                 self.bump(); // `(`\n-                let path = self.parse_path(PathStyle::Mod)?; // `super`/`self`\n+                let path = self.parse_path(PathStyle::Mod)?; // `crate`/`super`/`self`\n                 self.expect(&token::CloseDelim(Delimiter::Parenthesis))?; // `)`\n                 let vis = VisibilityKind::Restricted { path: P(path), id: ast::DUMMY_NODE_ID };\n                 return Ok(Visibility {"}, {"sha": "20d9123e411ab2361a1ef9f5c10028accd40448b", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b987e34c083c81a9e70cb1d387759ac98c752c0/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b987e34c083c81a9e70cb1d387759ac98c752c0/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=7b987e34c083c81a9e70cb1d387759ac98c752c0", "patch": "@@ -249,7 +249,6 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         let parent_scope = &self.parent_scope;\n         match vis.kind {\n             ast::VisibilityKind::Public => Ok(ty::Visibility::Public),\n-            ast::VisibilityKind::Crate => Ok(ty::Visibility::Restricted(CRATE_DEF_ID.to_def_id())),\n             ast::VisibilityKind::Inherited => {\n                 Ok(match self.parent_scope.module.kind {\n                     // Any inherited visibility resolved directly inside an enum or trait"}, {"sha": "09e8fa4be41fd440cded5f8ea30c7a61fdfc129d", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b987e34c083c81a9e70cb1d387759ac98c752c0/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b987e34c083c81a9e70cb1d387759ac98c752c0/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=7b987e34c083c81a9e70cb1d387759ac98c752c0", "patch": "@@ -545,7 +545,7 @@ pub fn eq_defaultness(l: Defaultness, r: Defaultness) -> bool {\n pub fn eq_vis(l: &Visibility, r: &Visibility) -> bool {\n     use VisibilityKind::*;\n     match (&l.kind, &r.kind) {\n-        (Public, Public) | (Inherited, Inherited) | (Crate, Crate) => true,\n+        (Public, Public) | (Inherited, Inherited) => true,\n         (Restricted { path: l, .. }, Restricted { path: r, .. }) => eq_path(l, r),\n         _ => false,\n     }"}, {"sha": "8816d7d2f1fe2623da86deca3f056547e42d88bf", "filename": "src/tools/rustfmt/src/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b987e34c083c81a9e70cb1d387759ac98c752c0/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b987e34c083c81a9e70cb1d387759ac98c752c0/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs?ref=7b987e34c083c81a9e70cb1d387759ac98c752c0", "patch": "@@ -1361,7 +1361,7 @@ pub(crate) fn format_struct_struct(\n \n fn get_bytepos_after_visibility(vis: &ast::Visibility, default_span: Span) -> BytePos {\n     match vis.kind {\n-        ast::VisibilityKind::Crate | ast::VisibilityKind::Restricted { .. } => vis.span.hi(),\n+        ast::VisibilityKind::Restricted { .. } => vis.span.hi(),\n         _ => default_span.lo(),\n     }\n }"}, {"sha": "58fd95c656e799fafccf22f41a52483495c0ce16", "filename": "src/tools/rustfmt/src/utils.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7b987e34c083c81a9e70cb1d387759ac98c752c0/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b987e34c083c81a9e70cb1d387759ac98c752c0/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs?ref=7b987e34c083c81a9e70cb1d387759ac98c752c0", "patch": "@@ -44,11 +44,7 @@ pub(crate) fn is_same_visibility(a: &Visibility, b: &Visibility) -> bool {\n             VisibilityKind::Restricted { path: q, .. },\n         ) => pprust::path_to_string(p) == pprust::path_to_string(q),\n         (VisibilityKind::Public, VisibilityKind::Public)\n-        | (VisibilityKind::Inherited, VisibilityKind::Inherited)\n-        | (\n-            VisibilityKind::Crate,\n-            VisibilityKind::Crate,\n-        ) => true,\n+        | (VisibilityKind::Inherited, VisibilityKind::Inherited) => true,\n         _ => false,\n     }\n }\n@@ -61,7 +57,6 @@ pub(crate) fn format_visibility(\n     match vis.kind {\n         VisibilityKind::Public => Cow::from(\"pub \"),\n         VisibilityKind::Inherited => Cow::from(\"\"),\n-        VisibilityKind::Crate => Cow::from(\"pub(crate) \"),\n         VisibilityKind::Restricted { ref path, .. } => {\n             let Path { ref segments, .. } = **path;\n             let mut segments_iter = segments.iter().map(|seg| rewrite_ident(context, seg.ident));\n@@ -70,7 +65,7 @@ pub(crate) fn format_visibility(\n                     .next()\n                     .expect(\"Non-global path in pub(restricted)?\");\n             }\n-            let is_keyword = |s: &str| s == \"self\" || s == \"super\";\n+            let is_keyword = |s: &str| s == \"crate\" || s == \"self\" || s == \"super\";\n             let path = segments_iter.collect::<Vec<_>>().join(\"::\");\n             let in_str = if is_keyword(&path) { \"\" } else { \"in \" };\n "}]}