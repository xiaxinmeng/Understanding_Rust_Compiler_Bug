{"sha": "73317f8b0d3217c5fac70f7638d0e3bd84bb37c4", "node_id": "C_kwDOAAsO6NoAKDczMzE3ZjhiMGQzMjE3YzVmYWM3MGY3NjM4ZDBlM2JkODRiYjM3YzQ", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-04-26T13:56:38Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-04-26T20:16:07Z"}, "message": "linker: Stop using whole-archive on dependencies of dylibs\n\nhttps://github.com/rust-lang/rust/pull/95604 implemented a better and more fine-grained way of keeping exported symbols alive.", "tree": {"sha": "b284f52d090a16c46e2c7b60197aaa5c3d80e384", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b284f52d090a16c46e2c7b60197aaa5c3d80e384"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73317f8b0d3217c5fac70f7638d0e3bd84bb37c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73317f8b0d3217c5fac70f7638d0e3bd84bb37c4", "html_url": "https://github.com/rust-lang/rust/commit/73317f8b0d3217c5fac70f7638d0e3bd84bb37c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73317f8b0d3217c5fac70f7638d0e3bd84bb37c4/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "082e4ca49770ebc9cb0ee616f3726a67471be8cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/082e4ca49770ebc9cb0ee616f3726a67471be8cb", "html_url": "https://github.com/rust-lang/rust/commit/082e4ca49770ebc9cb0ee616f3726a67471be8cb"}], "stats": {"total": 52, "additions": 8, "deletions": 44}, "files": [{"sha": "b02da5db630005db42c05d174f0c4ebb87b5e08b", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 6, "deletions": 31, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/73317f8b0d3217c5fac70f7638d0e3bd84bb37c4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73317f8b0d3217c5fac70f7638d0e3bd84bb37c4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=73317f8b0d3217c5fac70f7638d0e3bd84bb37c4", "patch": "@@ -1920,7 +1920,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     // This change is somewhat breaking in practice due to local static libraries being linked\n     // as whole-archive (#85144), so removing whole-archive may be a pre-requisite.\n     if sess.opts.debugging_opts.link_native_libraries {\n-        add_local_native_libraries(cmd, sess, codegen_results, crate_type);\n+        add_local_native_libraries(cmd, sess, codegen_results);\n     }\n \n     // Upstream rust libraries and their nobundle static libraries\n@@ -2092,16 +2092,6 @@ fn add_order_independent_options(\n     add_rpath_args(cmd, sess, codegen_results, out_filename);\n }\n \n-// A dylib may reexport symbols from the linked rlib or native static library.\n-// Even if some symbol is reexported it's still not necessarily counted as used and may be\n-// dropped, at least with `ld`-like ELF linkers. So we have to link some rlibs and static\n-// libraries as whole-archive to avoid losing reexported symbols.\n-// FIXME: Find a way to mark reexported symbols as used and avoid this use of whole-archive.\n-fn default_to_whole_archive(sess: &Session, crate_type: CrateType, cmd: &dyn Linker) -> bool {\n-    crate_type == CrateType::Dylib\n-        && !(sess.target.limit_rdylib_exports && cmd.exported_symbol_means_used_symbol())\n-}\n-\n /// # Native library linking\n ///\n /// User-supplied library search paths (-L on the command line). These are the same paths used to\n@@ -2115,7 +2105,6 @@ fn add_local_native_libraries(\n     cmd: &mut dyn Linker,\n     sess: &Session,\n     codegen_results: &CodegenResults,\n-    crate_type: CrateType,\n ) {\n     let filesearch = sess.target_filesearch(PathKind::All);\n     for search_path in filesearch.search_paths() {\n@@ -2157,7 +2146,6 @@ fn add_local_native_libraries(\n             }\n             NativeLibKind::Static { whole_archive, bundle, .. } => {\n                 if whole_archive == Some(true)\n-                    || (whole_archive == None && default_to_whole_archive(sess, crate_type, cmd))\n                     // Backward compatibility case: this can be a rlib (so `+whole-archive` cannot\n                     // be added explicitly if necessary, see the error in `fn link_rlib`) compiled\n                     // as an executable due to `--test`. Use whole-archive implicitly, like before\n@@ -2276,7 +2264,7 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n         let src = &codegen_results.crate_info.used_crate_source[&cnum];\n         match data[cnum.as_usize() - 1] {\n             _ if codegen_results.crate_info.profiler_runtime == Some(cnum) => {\n-                add_static_crate::<B>(cmd, sess, codegen_results, tmpdir, crate_type, cnum);\n+                add_static_crate::<B>(cmd, sess, codegen_results, tmpdir, cnum);\n             }\n             // compiler-builtins are always placed last to ensure that they're\n             // linked correctly.\n@@ -2286,7 +2274,7 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n             }\n             Linkage::NotLinked | Linkage::IncludedFromDylib => {}\n             Linkage::Static => {\n-                add_static_crate::<B>(cmd, sess, codegen_results, tmpdir, crate_type, cnum);\n+                add_static_crate::<B>(cmd, sess, codegen_results, tmpdir, cnum);\n \n                 // Link static native libs with \"-bundle\" modifier only if the crate they originate from\n                 // is being linked statically to the current crate.  If it's linked dynamically\n@@ -2317,10 +2305,7 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n                             lib.kind\n                         {\n                             let verbatim = lib.verbatim.unwrap_or(false);\n-                            if whole_archive == Some(true)\n-                                || (whole_archive == None\n-                                    && default_to_whole_archive(sess, crate_type, cmd))\n-                            {\n+                            if whole_archive == Some(true) {\n                                 cmd.link_whole_staticlib(\n                                     name,\n                                     verbatim,\n@@ -2347,7 +2332,7 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n     // was already \"included\" in a dylib (e.g., `libstd` when `-C prefer-dynamic`\n     // is used)\n     if let Some(cnum) = compiler_builtins {\n-        add_static_crate::<B>(cmd, sess, codegen_results, tmpdir, crate_type, cnum);\n+        add_static_crate::<B>(cmd, sess, codegen_results, tmpdir, cnum);\n     }\n \n     // Converts a library file-stem into a cc -l argument\n@@ -2378,23 +2363,13 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n         sess: &'a Session,\n         codegen_results: &CodegenResults,\n         tmpdir: &Path,\n-        crate_type: CrateType,\n         cnum: CrateNum,\n     ) {\n         let src = &codegen_results.crate_info.used_crate_source[&cnum];\n         let cratepath = &src.rlib.as_ref().unwrap().0;\n \n         let mut link_upstream = |path: &Path| {\n-            // We don't want to include the whole compiler-builtins crate (e.g., compiler-rt)\n-            // regardless of the default because it'll get repeatedly linked anyway.\n-            let path = fix_windows_verbatim_for_gcc(path);\n-            if default_to_whole_archive(sess, crate_type, cmd)\n-                && codegen_results.crate_info.compiler_builtins != Some(cnum)\n-            {\n-                cmd.link_whole_rlib(&path);\n-            } else {\n-                cmd.link_rlib(&path);\n-            }\n+            cmd.link_rlib(&fix_windows_verbatim_for_gcc(path));\n         };\n \n         // See the comment above in `link_staticlib` and `link_rlib` for why if"}, {"sha": "9c13568e186b945c0e1c366f38df99bf62a65864", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/73317f8b0d3217c5fac70f7638d0e3bd84bb37c4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73317f8b0d3217c5fac70f7638d0e3bd84bb37c4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=73317f8b0d3217c5fac70f7638d0e3bd84bb37c4", "patch": "@@ -187,9 +187,6 @@ pub trait Linker {\n     fn no_crt_objects(&mut self);\n     fn no_default_libraries(&mut self);\n     fn export_symbols(&mut self, tmpdir: &Path, crate_type: CrateType, symbols: &[String]);\n-    fn exported_symbol_means_used_symbol(&self) -> bool {\n-        true\n-    }\n     fn subsystem(&mut self, subsystem: &str);\n     fn group_start(&mut self);\n     fn group_end(&mut self);\n@@ -728,10 +725,6 @@ impl<'a> Linker for GccLinker<'a> {\n         }\n     }\n \n-    fn exported_symbol_means_used_symbol(&self) -> bool {\n-        self.sess.target.is_like_windows || self.sess.target.is_like_osx\n-    }\n-\n     fn subsystem(&mut self, subsystem: &str) {\n         self.linker_arg(\"--subsystem\");\n         self.linker_arg(&subsystem);\n@@ -1479,10 +1472,6 @@ impl<'a> Linker for L4Bender<'a> {\n         return;\n     }\n \n-    fn exported_symbol_means_used_symbol(&self) -> bool {\n-        false\n-    }\n-\n     fn subsystem(&mut self, subsystem: &str) {\n         self.cmd.arg(&format!(\"--subsystem {}\", subsystem));\n     }"}, {"sha": "bee9a8d808fb4afcdb47a9091981661b9349c1f7", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73317f8b0d3217c5fac70f7638d0e3bd84bb37c4/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/73317f8b0d3217c5fac70f7638d0e3bd84bb37c4/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=73317f8b0d3217c5fac70f7638d0e3bd84bb37c4", "patch": "@@ -80,8 +80,8 @@ to `/WHOLEARCHIVE` for `link.exe`, and to `-force_load` for `ld64`.\n The modifier does nothing for linkers that don't support it.\n \n The default for this modifier is `-whole-archive`. \\\n-NOTE: The default may currently be different when building dylibs for some targets,\n-but it is not guaranteed.\n+NOTE: The default may currently be different in some cases for backward compatibility,\n+but it is not guaranteed. If you need whole archive semantics use `+whole-archive` explicitly.\n \n <a id=\"option-crate-type\"></a>\n ## `--crate-type`: a list of types of crates for the compiler to emit"}]}