{"sha": "5e52edca529ba5051d0bb752c751159d3057ab15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNTJlZGNhNTI5YmE1MDUxZDBiYjc1MmM3NTExNTlkMzA1N2FiMTU=", "commit": {"author": {"name": "jumbatm", "email": "fungjys@gmail.com", "date": "2020-07-04T02:07:43Z"}, "committer": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2020-07-30T11:59:02Z"}, "message": "Apply suggested wording changes from code review.\n\nCo-authored-by: Teymour Aldridge <42674621+teymour-aldridge@users.noreply.github.com>", "tree": {"sha": "d2c5b8b30902459d3345eaefdbb6453c50e43a27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2c5b8b30902459d3345eaefdbb6453c50e43a27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e52edca529ba5051d0bb752c751159d3057ab15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e52edca529ba5051d0bb752c751159d3057ab15", "html_url": "https://github.com/rust-lang/rust/commit/5e52edca529ba5051d0bb752c751159d3057ab15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e52edca529ba5051d0bb752c751159d3057ab15/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3eaead7d51f3d680bdae596e9c4ef00bdc03403e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eaead7d51f3d680bdae596e9c4ef00bdc03403e", "html_url": "https://github.com/rust-lang/rust/commit/3eaead7d51f3d680bdae596e9c4ef00bdc03403e"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "7b4c1a3f4bdc6237db88632c4730aad24bfd4789", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e52edca529ba5051d0bb752c751159d3057ab15/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e52edca529ba5051d0bb752c751159d3057ab15/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=5e52edca529ba5051d0bb752c751159d3057ab15", "patch": "@@ -2215,7 +2215,7 @@ impl ClashingExternDeclarations {\n \n                 // Disjoint kinds.\n                 (_, _) => {\n-                    // First, check if the conversion is FFI-safe. This can be so if the type is an\n+                    // First, check if the conversion is FFI-safe. This can happen if the type is an\n                     // enum with a non-null field (see improper_ctypes).\n                     let is_primitive_or_pointer =\n                         |ty: Ty<'tcx>| ty.is_primitive() || matches!(ty.kind, RawPtr(..));"}, {"sha": "a147e05e10dac8df2a1efa100b6a8d5da960d0ba", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e52edca529ba5051d0bb752c751159d3057ab15/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e52edca529ba5051d0bb752c751159d3057ab15/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=5e52edca529ba5051d0bb752c751159d3057ab15", "patch": "@@ -563,7 +563,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     }\n \n     /// Check if this enum can be safely exported based on the \"nullable pointer optimization\". If\n-    /// the type is it is, return the known non-null field type, else None.  Currently restricted\n+    /// it can, return the known non-null field type, otherwise return `None`. Currently restricted\n     /// to function pointers, boxes, references, `core::num::NonZero*`, `core::ptr::NonNull`, and\n     /// `#[repr(transparent)]` newtypes.\n     crate fn is_repr_nullable_ptr("}, {"sha": "44c2067edc0374b04be7f444293eb37b027a535f", "filename": "src/test/ui/lint/clashing-extern-fn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e52edca529ba5051d0bb752c751159d3057ab15/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e52edca529ba5051d0bb752c751159d3057ab15/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs?ref=5e52edca529ba5051d0bb752c751159d3057ab15", "patch": "@@ -202,9 +202,9 @@ mod missing_return_type {\n \n     mod b {\n         extern \"C\" {\n-            // This should warn, because we can't assume that the first declaration is the correct\n-            // one -- if this one is the correct one, then calling the usize-returning version\n-            // would allow reads into uninitialised memory.\n+            // This should output a warning because we can't assume that the first declaration is\n+            // the correct one -- if this one is the correct one, then calling the usize-returning\n+            // version would allow reads into uninitialised memory.\n             fn missing_return_type();\n             //~^ WARN `missing_return_type` redeclared with a different signature\n         }\n@@ -220,7 +220,7 @@ mod non_zero_and_non_null {\n     }\n     mod b {\n         extern \"C\" {\n-            // For both of these cases, if there's a clash, you're either gaining an incorrect\n+            // If there's a clash in either of these cases you're either gaining an incorrect\n             // invariant that the value is non-zero, or you're missing out on that invariant. Both\n             // cases are warning for, from both a caller-convenience and optimisation perspective.\n             fn non_zero_usize() -> usize;"}]}