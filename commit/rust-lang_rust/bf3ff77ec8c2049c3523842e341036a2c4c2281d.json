{"sha": "bf3ff77ec8c2049c3523842e341036a2c4c2281d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmM2ZmNzdlYzhjMjA0OWMzNTIzODQyZTM0MTAzNmEyYzRjMjI4MWQ=", "commit": {"author": {"name": "rphmeier", "email": "rphmeier@gmail.com", "date": "2016-02-17T01:31:52Z"}, "committer": {"name": "rphmeier", "email": "rphmeier@gmail.com", "date": "2016-02-17T01:31:52Z"}, "message": "Fix #31706", "tree": {"sha": "e11f2337fa7c093bf3f706754ea25f29fef094f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e11f2337fa7c093bf3f706754ea25f29fef094f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf3ff77ec8c2049c3523842e341036a2c4c2281d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf3ff77ec8c2049c3523842e341036a2c4c2281d", "html_url": "https://github.com/rust-lang/rust/commit/bf3ff77ec8c2049c3523842e341036a2c4c2281d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf3ff77ec8c2049c3523842e341036a2c4c2281d/comments", "author": {"login": "rphmeier", "id": 10121380, "node_id": "MDQ6VXNlcjEwMTIxMzgw", "avatar_url": "https://avatars.githubusercontent.com/u/10121380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rphmeier", "html_url": "https://github.com/rphmeier", "followers_url": "https://api.github.com/users/rphmeier/followers", "following_url": "https://api.github.com/users/rphmeier/following{/other_user}", "gists_url": "https://api.github.com/users/rphmeier/gists{/gist_id}", "starred_url": "https://api.github.com/users/rphmeier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rphmeier/subscriptions", "organizations_url": "https://api.github.com/users/rphmeier/orgs", "repos_url": "https://api.github.com/users/rphmeier/repos", "events_url": "https://api.github.com/users/rphmeier/events{/privacy}", "received_events_url": "https://api.github.com/users/rphmeier/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rphmeier", "id": 10121380, "node_id": "MDQ6VXNlcjEwMTIxMzgw", "avatar_url": "https://avatars.githubusercontent.com/u/10121380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rphmeier", "html_url": "https://github.com/rphmeier", "followers_url": "https://api.github.com/users/rphmeier/followers", "following_url": "https://api.github.com/users/rphmeier/following{/other_user}", "gists_url": "https://api.github.com/users/rphmeier/gists{/gist_id}", "starred_url": "https://api.github.com/users/rphmeier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rphmeier/subscriptions", "organizations_url": "https://api.github.com/users/rphmeier/orgs", "repos_url": "https://api.github.com/users/rphmeier/repos", "events_url": "https://api.github.com/users/rphmeier/events{/privacy}", "received_events_url": "https://api.github.com/users/rphmeier/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57c357d89183df173b0e42a0f745d9cfdb67fb1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/57c357d89183df173b0e42a0f745d9cfdb67fb1a", "html_url": "https://github.com/rust-lang/rust/commit/57c357d89183df173b0e42a0f745d9cfdb67fb1a"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "865ecd79e2773c2b04f06bdf20960371144cd3cc", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf3ff77ec8c2049c3523842e341036a2c4c2281d/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf3ff77ec8c2049c3523842e341036a2c4c2281d/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=bf3ff77ec8c2049c3523842e341036a2c4c2281d", "patch": "@@ -710,7 +710,7 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n             NamedField(name) => format!(\"field `{}` of {} is private\",\n                                         name, struct_desc),\n             UnnamedField(idx) => format!(\"field #{} of {} is private\",\n-                                         idx + 1, struct_desc),\n+                                         idx, struct_desc),\n         };\n         span_err!(self.tcx.sess, span, E0451,\n                   \"{}\", &msg[..]);"}, {"sha": "588c9be3065f82c32890e1ab1951d99474d71dad", "filename": "src/test/compile-fail/privacy5.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bf3ff77ec8c2049c3523842e341036a2c4c2281d/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf3ff77ec8c2049c3523842e341036a2c4c2281d/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs?ref=bf3ff77ec8c2049c3523842e341036a2c4c2281d", "patch": "@@ -63,25 +63,25 @@ fn this_crate() {\n     let c = a::C(2, 3); //~ ERROR: cannot invoke tuple struct constructor\n     let d = a::D(4);\n \n-    let a::A(()) = a; //~ ERROR: field #1 of struct `a::A` is private\n+    let a::A(()) = a; //~ ERROR: field #0 of struct `a::A` is private\n     let a::A(_) = a;\n-    match a { a::A(()) => {} } //~ ERROR: field #1 of struct `a::A` is private\n+    match a { a::A(()) => {} } //~ ERROR: field #0 of struct `a::A` is private\n     match a { a::A(_) => {} }\n \n     let a::B(_) = b;\n-    let a::B(_b) = b; //~ ERROR: field #1 of struct `a::B` is private\n+    let a::B(_b) = b; //~ ERROR: field #0 of struct `a::B` is private\n     match b { a::B(_) => {} }\n-    match b { a::B(_b) => {} } //~ ERROR: field #1 of struct `a::B` is private\n-    match b { a::B(1) => {} a::B(_) => {} } //~ ERROR: field #1 of struct `a::B` is private\n+    match b { a::B(_b) => {} } //~ ERROR: field #0 of struct `a::B` is private\n+    match b { a::B(1) => {} a::B(_) => {} } //~ ERROR: field #0 of struct `a::B` is private\n \n     let a::C(_, _) = c;\n     let a::C(_a, _) = c;\n-    let a::C(_, _b) = c; //~ ERROR: field #2 of struct `a::C` is private\n-    let a::C(_a, _b) = c; //~ ERROR: field #2 of struct `a::C` is private\n+    let a::C(_, _b) = c; //~ ERROR: field #1 of struct `a::C` is private\n+    let a::C(_a, _b) = c; //~ ERROR: field #1 of struct `a::C` is private\n     match c { a::C(_, _) => {} }\n     match c { a::C(_a, _) => {} }\n-    match c { a::C(_, _b) => {} } //~ ERROR: field #2 of struct `a::C` is private\n-    match c { a::C(_a, _b) => {} } //~ ERROR: field #2 of struct `a::C` is private\n+    match c { a::C(_, _b) => {} } //~ ERROR: field #1 of struct `a::C` is private\n+    match c { a::C(_a, _b) => {} } //~ ERROR: field #1 of struct `a::C` is private\n \n     let a::D(_) = d;\n     let a::D(_d) = d;\n@@ -101,30 +101,30 @@ fn xcrate() {\n     let c = other::C(2, 3); //~ ERROR: cannot invoke tuple struct constructor\n     let d = other::D(4);\n \n-    let other::A(()) = a; //~ ERROR: field #1 of struct `other::A` is private\n+    let other::A(()) = a; //~ ERROR: field #0 of struct `other::A` is private\n     let other::A(_) = a;\n     match a { other::A(()) => {} }\n-    //~^ ERROR: field #1 of struct `other::A` is private\n+    //~^ ERROR: field #0 of struct `other::A` is private\n     match a { other::A(_) => {} }\n \n     let other::B(_) = b;\n-    let other::B(_b) = b; //~ ERROR: field #1 of struct `other::B` is private\n+    let other::B(_b) = b; //~ ERROR: field #0 of struct `other::B` is private\n     match b { other::B(_) => {} }\n     match b { other::B(_b) => {} }\n-    //~^ ERROR: field #1 of struct `other::B` is private\n+    //~^ ERROR: field #0 of struct `other::B` is private\n     match b { other::B(1) => {} other::B(_) => {} }\n-    //~^ ERROR: field #1 of struct `other::B` is private\n+    //~^ ERROR: field #0 of struct `other::B` is private\n \n     let other::C(_, _) = c;\n     let other::C(_a, _) = c;\n-    let other::C(_, _b) = c; //~ ERROR: field #2 of struct `other::C` is private\n-    let other::C(_a, _b) = c; //~ ERROR: field #2 of struct `other::C` is private\n+    let other::C(_, _b) = c; //~ ERROR: field #1 of struct `other::C` is private\n+    let other::C(_a, _b) = c; //~ ERROR: field #1 of struct `other::C` is private\n     match c { other::C(_, _) => {} }\n     match c { other::C(_a, _) => {} }\n     match c { other::C(_, _b) => {} }\n-    //~^ ERROR: field #2 of struct `other::C` is private\n+    //~^ ERROR: field #1 of struct `other::C` is private\n     match c { other::C(_a, _b) => {} }\n-    //~^ ERROR: field #2 of struct `other::C` is private\n+    //~^ ERROR: field #1 of struct `other::C` is private\n \n     let other::D(_) = d;\n     let other::D(_d) = d;"}]}