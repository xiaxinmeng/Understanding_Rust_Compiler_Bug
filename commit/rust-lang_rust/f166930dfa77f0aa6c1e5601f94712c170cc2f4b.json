{"sha": "f166930dfa77f0aa6c1e5601f94712c170cc2f4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNjY5MzBkZmE3N2YwYWE2YzFlNTYwMWY5NDcxMmMxNzBjYzJmNGI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-10-12T17:26:06Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-10-12T17:26:06Z"}, "message": "Inject bitcast if types mismatch when building a store instruction.", "tree": {"sha": "a79addf5ae9a6731245ff55954fbca0df5cc1d2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a79addf5ae9a6731245ff55954fbca0df5cc1d2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f166930dfa77f0aa6c1e5601f94712c170cc2f4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f166930dfa77f0aa6c1e5601f94712c170cc2f4b", "html_url": "https://github.com/rust-lang/rust/commit/f166930dfa77f0aa6c1e5601f94712c170cc2f4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f166930dfa77f0aa6c1e5601f94712c170cc2f4b/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97e41435581ddefa68fc34d318658593190eb1c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/97e41435581ddefa68fc34d318658593190eb1c0", "html_url": "https://github.com/rust-lang/rust/commit/97e41435581ddefa68fc34d318658593190eb1c0"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "8556e95903c18b51b055a0d9af6aa4c53bbc06a2", "filename": "src/librustc_trans/builder.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f166930dfa77f0aa6c1e5601f94712c170cc2f4b/src%2Flibrustc_trans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f166930dfa77f0aa6c1e5601f94712c170cc2f4b/src%2Flibrustc_trans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbuilder.rs?ref=f166930dfa77f0aa6c1e5601f94712c170cc2f4b", "patch": "@@ -543,6 +543,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         debug!(\"Store {:?} -> {:?}\", Value(val), Value(ptr));\n         assert!(!self.llbuilder.is_null());\n         self.count_insn(\"store\");\n+        let ptr = self.check_store(val, ptr);\n         unsafe {\n             llvm::LLVMBuildStore(self.llbuilder, val, ptr)\n         }\n@@ -552,6 +553,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         debug!(\"Store {:?} -> {:?}\", Value(val), Value(ptr));\n         assert!(!self.llbuilder.is_null());\n         self.count_insn(\"store.volatile\");\n+        let ptr = self.check_store(val, ptr);\n         unsafe {\n             let insn = llvm::LLVMBuildStore(self.llbuilder, val, ptr);\n             llvm::LLVMSetVolatile(insn, llvm::True);\n@@ -562,6 +564,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     pub fn atomic_store(&self, val: ValueRef, ptr: ValueRef, order: AtomicOrdering) {\n         debug!(\"Store {:?} -> {:?}\", Value(val), Value(ptr));\n         self.count_insn(\"store.atomic\");\n+        let ptr = self.check_store(val, ptr);\n         unsafe {\n             let ty = Type::from_ref(llvm::LLVMTypeOf(ptr));\n             let align = llalign_of_pref(self.ccx, ty.element_type());\n@@ -1100,6 +1103,27 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n \n+    /// Returns the ptr value that should be used for storing `val`.\n+    fn check_store<'b>(&self,\n+                       val: ValueRef,\n+                       ptr: ValueRef) -> ValueRef {\n+        let dest_ptr_ty = val_ty(ptr);\n+        let stored_ty = val_ty(val);\n+        let stored_ptr_ty = stored_ty.ptr_to();\n+\n+        assert_eq!(dest_ptr_ty.kind(), llvm::TypeKind::Pointer);\n+\n+        if dest_ptr_ty == stored_ptr_ty {\n+            ptr\n+        } else {\n+            debug!(\"Type mismatch in store. \\\n+                    Expected {:?}, got {:?}; inserting bitcast\",\n+                   dest_ptr_ty, stored_ptr_ty);\n+            self.bitcast(ptr, stored_ptr_ty)\n+        }\n+    }\n+\n+    /// Returns the args that should be used for a call to `llfn`.\n     fn check_call<'b>(&self,\n                       typ: &str,\n                       llfn: ValueRef,"}]}