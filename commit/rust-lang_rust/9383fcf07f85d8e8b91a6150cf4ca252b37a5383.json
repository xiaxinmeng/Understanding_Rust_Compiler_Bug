{"sha": "9383fcf07f85d8e8b91a6150cf4ca252b37a5383", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzODNmY2YwN2Y4NWQ4ZThiOTFhNjE1MGNmNGNhMjUyYjM3YTUzODM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-11-14T16:46:20Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-11-24T09:30:18Z"}, "message": "Add `-Z print-type-sizes`, a tool for digging into how variants are laid out.", "tree": {"sha": "6bfa0dc5689d5fcdd2cea55d1267957121f7e008", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bfa0dc5689d5fcdd2cea55d1267957121f7e008"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9383fcf07f85d8e8b91a6150cf4ca252b37a5383", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9383fcf07f85d8e8b91a6150cf4ca252b37a5383", "html_url": "https://github.com/rust-lang/rust/commit/9383fcf07f85d8e8b91a6150cf4ca252b37a5383", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9383fcf07f85d8e8b91a6150cf4ca252b37a5383/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "696fab844aef55eb4bcbeb470c01ce7d301c51ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/696fab844aef55eb4bcbeb470c01ce7d301c51ed", "html_url": "https://github.com/rust-lang/rust/commit/696fab844aef55eb4bcbeb470c01ce7d301c51ed"}], "stats": {"total": 239, "additions": 238, "deletions": 1}, "files": [{"sha": "26dafed7019ed7b9e25c8f6732fb222636aa4ab6", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9383fcf07f85d8e8b91a6150cf4ca252b37a5383/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9383fcf07f85d8e8b91a6150cf4ca252b37a5383/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=9383fcf07f85d8e8b91a6150cf4ca252b37a5383", "patch": "@@ -909,6 +909,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"keep the AST after lowering it to HIR\"),\n     show_span: Option<String> = (None, parse_opt_string, [TRACKED],\n           \"show spans for compiler debugging (expr|pat|ty)\"),\n+    print_type_sizes: bool = (false, parse_bool, [UNTRACKED],\n+          \"print layout information for each type encountered\"),\n     print_trans_items: Option<String> = (None, parse_opt_string, [UNTRACKED],\n           \"print the result of the translation item collection pass\"),\n     mir_opt_level: Option<usize> = (None, parse_opt_uint, [TRACKED],"}, {"sha": "128e4d878a8dc6db134ca6184b4154aba676510f", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 73, "deletions": 1, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/9383fcf07f85d8e8b91a6150cf4ca252b37a5383/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9383fcf07f85d8e8b91a6150cf4ca252b37a5383/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=9383fcf07f85d8e8b91a6150cf4ca252b37a5383", "patch": "@@ -112,9 +112,80 @@ pub struct Session {\n     /// Some measurements that are being gathered during compilation.\n     pub perf_stats: PerfStats,\n \n+    /// Data about code being compiled, gathered during compilation.\n+    pub code_stats: RefCell<CodeStats>,\n+\n     next_node_id: Cell<ast::NodeId>,\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+pub enum VariantSize {\n+    Exact(u64),\n+    Min(u64),\n+}\n+\n+#[derive(PartialEq, Eq, Debug)]\n+pub struct TypeSizeInfo {\n+    pub type_description: String,\n+    pub overall_size: u64,\n+    pub variant_sizes: Option<Vec<VariantSize>>,\n+}\n+\n+#[derive(PartialEq, Eq, Debug)]\n+pub struct CodeStats {\n+    pub type_sizes: Vec<TypeSizeInfo>,\n+}\n+\n+impl CodeStats {\n+    fn new() -> Self {\n+        CodeStats { type_sizes: Vec::new() }\n+    }\n+\n+    pub fn record_type_size<S: ToString>(&mut self,\n+                                         type_desc: S,\n+                                         overall_size: u64,\n+                                         variant_sizes: Vec<VariantSize>) {\n+        let sizes = if variant_sizes.len() == 0 { None } else { Some(variant_sizes) };\n+        let info = TypeSizeInfo {\n+            type_description: type_desc.to_string(),\n+            overall_size: overall_size,\n+            variant_sizes: sizes,\n+        };\n+        if !self.type_sizes.contains(&info) {\n+            self.type_sizes.push(info);\n+        }\n+    }\n+\n+    pub fn sort_by_type_description(&mut self) {\n+        self.type_sizes.sort_by(|info1, info2| {\n+            info1.type_description.cmp(&info2.type_description)\n+        });\n+    }\n+\n+    pub fn sort_by_overall_size(&mut self) {\n+        self.type_sizes.sort_by(|info1, info2| {\n+            // (reversing cmp order to get large-to-small ordering)\n+            info2.overall_size.cmp(&info1.overall_size)\n+        });\n+    }\n+\n+    pub fn print_type_sizes(&self) {\n+        for info in &self.type_sizes {\n+            println!(\"print-type-size t: `{}` overall bytes: {}\",\n+                     info.type_description, info.overall_size);\n+            if let Some(ref variant_sizes) = info.variant_sizes {\n+                for (i, variant_size) in variant_sizes.iter().enumerate() {\n+                    let (kind, s) = match *variant_size {\n+                        VariantSize::Exact(s) => { (\"exact\", s) }\n+                        VariantSize::Min(s) =>   { (\"  min\", s) }\n+                    };\n+                    println!(\"print-type-size    variant[{}] {} bytes: {}\", i, kind, s);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n pub struct PerfStats {\n     // The accumulated time needed for computing the SVH of the crate\n     pub svh_time: Cell<Duration>,\n@@ -624,7 +695,8 @@ pub fn build_session_(sopts: config::Options,\n             incr_comp_hashes_count: Cell::new(0),\n             incr_comp_bytes_hashed: Cell::new(0),\n             symbol_hash_time: Cell::new(Duration::from_secs(0)),\n-        }\n+        },\n+        code_stats: RefCell::new(CodeStats::new()),\n     };\n \n     init_llvm(&sess);"}, {"sha": "a91525c6b2d0a649d51997d5ba00298351ebf750", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9383fcf07f85d8e8b91a6150cf4ca252b37a5383/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9383fcf07f85d8e8b91a6150cf4ca252b37a5383/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=9383fcf07f85d8e8b91a6150cf4ca252b37a5383", "patch": "@@ -215,6 +215,13 @@ pub fn compile_input(sess: &Session,\n         })??\n     };\n \n+    if sess.opts.debugging_opts.print_type_sizes {\n+        // (these are stable sorts)\n+        sess.code_stats.borrow_mut().sort_by_type_description();\n+        sess.code_stats.borrow_mut().sort_by_overall_size();\n+        sess.code_stats.borrow().print_type_sizes();\n+    }\n+\n     let phase5_result = phase_5_run_llvm_passes(sess, &trans, &outputs);\n \n     controller_entry_point!(after_llvm,\n@@ -1008,6 +1015,9 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     time(time_passes, \"MIR optimisations\", || {\n         let mut passes = ::rustc::mir::transform::Passes::new();\n         passes.push_hook(box mir::transform::dump_mir::DumpMir);\n+        if tcx.sess.opts.debugging_opts.print_type_sizes {\n+            passes.push_pass(box mir::transform::print_type_sizes::GatherTypeSizesMir::new());\n+        }\n         passes.push_pass(box mir::transform::no_landing_pads::NoLandingPads);\n         passes.push_pass(box mir::transform::simplify::SimplifyCfg::new(\"no-landing-pads\"));\n "}, {"sha": "eed4763c17dd285ee5062de8dee9e3fb489ba052", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9383fcf07f85d8e8b91a6150cf4ca252b37a5383/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9383fcf07f85d8e8b91a6150cf4ca252b37a5383/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=9383fcf07f85d8e8b91a6150cf4ca252b37a5383", "patch": "@@ -13,6 +13,7 @@ pub mod simplify;\n pub mod erase_regions;\n pub mod no_landing_pads;\n pub mod type_check;\n+pub mod print_type_sizes;\n pub mod add_call_guards;\n pub mod promote_consts;\n pub mod qualify_consts;"}, {"sha": "617a5ac78df351809ff095ed0d506994a90663fb", "filename": "src/librustc_mir/transform/print_type_sizes.rs", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/9383fcf07f85d8e8b91a6150cf4ca252b37a5383/src%2Flibrustc_mir%2Ftransform%2Fprint_type_sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9383fcf07f85d8e8b91a6150cf4ca252b37a5383/src%2Flibrustc_mir%2Ftransform%2Fprint_type_sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fprint_type_sizes.rs?ref=9383fcf07f85d8e8b91a6150cf4ca252b37a5383", "patch": "@@ -0,0 +1,152 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! This pass implements instrumentation to gather the layout of every type.\n+\n+use rustc::session::{VariantSize};\n+use rustc::traits::{Reveal};\n+use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::fold::{TypeFoldable};\n+use rustc::ty::layout::{Layout};\n+use rustc::mir::{Mir};\n+use rustc::mir::transform::{MirPass, MirPassHook, MirSource, Pass};\n+use rustc::mir::visit::Visitor;\n+\n+use std::collections::HashSet;\n+\n+pub struct GatherTypeSizesMir {\n+    _hidden: (),\n+}\n+\n+impl GatherTypeSizesMir {\n+    pub fn new() -> Self {\n+        GatherTypeSizesMir { _hidden: () }\n+    }\n+}\n+\n+impl Pass for GatherTypeSizesMir {\n+}\n+\n+impl<'tcx> MirPassHook<'tcx> for GatherTypeSizesMir {\n+    fn on_mir_pass<'a>(&mut self,\n+                       tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                       src: MirSource,\n+                       mir: &Mir<'tcx>,\n+                       _pass: &Pass,\n+                       _is_after: bool) {\n+        debug!(\"on_mir_pass: {}\", tcx.node_path_str(src.item_id()));\n+        self.go(tcx, mir);\n+    }\n+}\n+\n+impl<'tcx> MirPass<'tcx> for GatherTypeSizesMir {\n+    fn run_pass<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                    src: MirSource, mir: &mut Mir<'tcx>) {\n+        debug!(\"run_pass: {}\", tcx.node_path_str(src.item_id()));\n+        self.go(tcx, mir);\n+    }\n+}\n+\n+impl GatherTypeSizesMir {\n+    fn go<'a, 'tcx>(&mut self,\n+                    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                    mir: &Mir<'tcx>) {\n+        if tcx.sess.err_count() > 0 {\n+            // compiling a broken program can obviously result in a\n+            // broken MIR, so do not bother trying to process it.\n+            return;\n+        }\n+\n+        let mut visitor = TypeVisitor {\n+            tcx: tcx,\n+            seen: HashSet::new(),\n+        };\n+        visitor.visit_mir(mir);\n+    }\n+}\n+\n+struct TypeVisitor<'a, 'tcx: 'a> {\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    seen: HashSet<Ty<'tcx>>,\n+}\n+\n+impl<'a, 'tcx: 'a> Visitor<'tcx> for TypeVisitor<'a, 'tcx> {\n+    fn visit_ty(&mut self, ty: &Ty<'tcx>) {\n+        debug!(\"TypeVisitor::visit_ty ty=`{:?}`\", ty);\n+\n+        match ty.sty {\n+            ty::TyAdt(..) |\n+            ty::TyClosure(..) => {} // fall through\n+            _ => {\n+                debug!(\"print-type-size t: `{:?}` skip non-nominal\", ty);\n+                return;\n+            }\n+        }\n+\n+        if ty.has_param_types() {\n+            debug!(\"print-type-size t: `{:?}` skip has param types\", ty);\n+            return;\n+        }\n+        if ty.has_projection_types() {\n+            debug!(\"print-type-size t: `{:?}` skip has projections\", ty);\n+            return;\n+        }\n+\n+        if self.seen.contains(ty) {\n+            return;\n+        }\n+        self.seen.insert(ty);\n+\n+        let reveal = Reveal::All;\n+        // let reveal = Reveal::NotSpecializable;\n+\n+        self.tcx.infer_ctxt(None, None, reveal).enter(|infcx| {\n+            match ty.layout(&infcx) {\n+                Ok(layout) => {\n+                    let type_desc = format!(\"{:?}\", ty);\n+                    let overall_size = layout.size(&Default::default());\n+\n+                    let variant_sizes: Vec<_> = match *layout {\n+                        Layout::General { ref variants, .. } => {\n+                            variants.iter()\n+                                .map(|v| if v.sized {\n+                                    VariantSize::Exact(v.min_size.bytes())\n+                                } else {\n+                                    VariantSize::Min(v.min_size.bytes())\n+                                })\n+                                .collect()\n+                        }\n+\n+                        Layout::UntaggedUnion { variants: _ } => {\n+                            /* layout does not currently store info about each variant... */\n+                            Vec::new()\n+                        }\n+\n+                        // RawNullablePointer/StructWrappedNullablePointer\n+                        // don't provide any interesting size info\n+                        // beyond what we already reported for their\n+                        // total size.\n+                        _ => {\n+                            Vec::new()\n+                        }\n+                    };\n+\n+                    self.tcx.sess.code_stats.borrow_mut()\n+                        .record_type_size(type_desc,\n+                                          overall_size.bytes(),\n+                                          variant_sizes);\n+                }\n+                Err(err) => {\n+                    self.tcx.sess.warn(&format!(\"print-type-size t: `{:?}` err: {:?}\", ty, err));\n+                }\n+            }\n+        });\n+    }\n+}"}]}