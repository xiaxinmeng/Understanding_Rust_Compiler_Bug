{"sha": "ecd5da5b0cae5b3af95f5b86a8157a1f57a944c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZDVkYTViMGNhZTViM2FmOTVmNWI4NmE4MTU3YTFmNTdhOTQ0YzU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-01T08:58:19Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-01T08:58:19Z"}, "message": "Introduce drop-bomb", "tree": {"sha": "eb14d6c340e2ee96666c90637c1ca3fc7ba1b5ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb14d6c340e2ee96666c90637c1ca3fc7ba1b5ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecd5da5b0cae5b3af95f5b86a8157a1f57a944c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecd5da5b0cae5b3af95f5b86a8157a1f57a944c5", "html_url": "https://github.com/rust-lang/rust/commit/ecd5da5b0cae5b3af95f5b86a8157a1f57a944c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecd5da5b0cae5b3af95f5b86a8157a1f57a944c5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37e1625f0139da07c2690b6ee6ca7eae5ebb061a", "url": "https://api.github.com/repos/rust-lang/rust/commits/37e1625f0139da07c2690b6ee6ca7eae5ebb061a", "html_url": "https://github.com/rust-lang/rust/commit/37e1625f0139da07c2690b6ee6ca7eae5ebb061a"}], "stats": {"total": 63, "additions": 43, "deletions": 20}, "files": [{"sha": "750904a0136403428e52c25992a9a46722f2d188", "filename": "src/drop_bomb.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ecd5da5b0cae5b3af95f5b86a8157a1f57a944c5/src%2Fdrop_bomb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd5da5b0cae5b3af95f5b86a8157a1f57a944c5/src%2Fdrop_bomb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdrop_bomb.rs?ref=ecd5da5b0cae5b3af95f5b86a8157a1f57a944c5", "patch": "@@ -0,0 +1,21 @@\n+use std::borrow::Cow;\n+\n+pub struct DropBomb {\n+    msg: Cow<'static, str>,\n+    defused: bool,\n+}\n+\n+impl DropBomb {\n+    pub fn new(msg: impl Into<Cow<'static, str>>) -> DropBomb {\n+        DropBomb { msg: msg.into(), defused: false }\n+    }\n+    pub fn defuse(&mut self) { self.defused = true }\n+}\n+\n+impl Drop for DropBomb {\n+    fn drop(&mut self) {\n+        if !self.defused && !::std::thread::panicking() {\n+            panic!(\"{}\", self.msg)\n+        }\n+    }\n+}"}, {"sha": "d9572912cc6bb96dd46b040953b7e36df2c94ed1", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ecd5da5b0cae5b3af95f5b86a8157a1f57a944c5/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd5da5b0cae5b3af95f5b86a8157a1f57a944c5/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=ecd5da5b0cae5b3af95f5b86a8157a1f57a944c5", "patch": "@@ -31,6 +31,7 @@ mod lexer;\n mod parser_api;\n mod grammar;\n mod parser_impl;\n+mod drop_bomb;\n \n mod syntax_kinds;\n /// Utilities for simple uses of the parser."}, {"sha": "3cad91976cb71c83bd3fbdcf237f628bbf6dac34", "filename": "src/parser_api.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ecd5da5b0cae5b3af95f5b86a8157a1f57a944c5/src%2Fparser_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd5da5b0cae5b3af95f5b86a8157a1f57a944c5/src%2Fparser_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser_api.rs?ref=ecd5da5b0cae5b3af95f5b86a8157a1f57a944c5", "patch": "@@ -1,6 +1,7 @@\n use {\n     parser_impl::ParserImpl,\n     SyntaxKind::{self, ERROR},\n+    drop_bomb::DropBomb,\n };\n \n #[derive(Clone, Copy)]\n@@ -76,7 +77,7 @@ impl<'t> Parser<'t> {\n     /// consumed between the `start` and the corresponding `Marker::complete`\n     /// belong to the same node.\n     pub(crate) fn start(&mut self) -> Marker {\n-        Marker(self.0.start())\n+        Marker::new(self.0.start())\n     }\n \n     /// Advances the parser by one token.\n@@ -131,31 +132,31 @@ impl<'t> Parser<'t> {\n }\n \n /// See `Parser::start`.\n-pub(crate) struct Marker(u32);\n+pub(crate) struct Marker {\n+    pos: u32,\n+    bomb: DropBomb,\n+}\n \n impl Marker {\n+    fn new(pos: u32) -> Marker {\n+        Marker {\n+            pos,\n+            bomb: DropBomb::new(\"Marker must be either completed or abandoned\")\n+        }\n+    }\n+\n     /// Finishes the syntax tree node and assigns `kind` to it.\n-    pub(crate) fn complete(self, p: &mut Parser, kind: SyntaxKind) -> CompletedMarker {\n-        let pos = self.0;\n-        ::std::mem::forget(self);\n-        p.0.complete(pos, kind);\n-        CompletedMarker(pos)\n+    pub(crate) fn complete(mut self, p: &mut Parser, kind: SyntaxKind) -> CompletedMarker {\n+        self.bomb.defuse();\n+        p.0.complete(self.pos, kind);\n+        CompletedMarker(self.pos)\n     }\n \n     /// Abandons the syntax tree node. All its children\n     /// are attached to its parent instead.\n-    pub(crate) fn abandon(self, p: &mut Parser) {\n-        let pos = self.0;\n-        ::std::mem::forget(self);\n-        p.0.abandon(pos);\n-    }\n-}\n-\n-impl Drop for Marker {\n-    fn drop(&mut self) {\n-        if !::std::thread::panicking() {\n-            panic!(\"Marker must be either completed or abandoned\");\n-        }\n+    pub(crate) fn abandon(mut self, p: &mut Parser) {\n+        self.bomb.defuse();\n+        p.0.abandon(self.pos);\n     }\n }\n \n@@ -170,6 +171,6 @@ impl CompletedMarker {\n     /// `B` before starting `A`. `precede` allows to do exactly\n     /// that. See also docs about `forward_parent` in `Event::Start`.\n     pub(crate) fn precede(self, p: &mut Parser) -> Marker {\n-        Marker(p.0.precede(self.0))\n+        Marker::new(p.0.precede(self.0))\n     }\n }"}]}