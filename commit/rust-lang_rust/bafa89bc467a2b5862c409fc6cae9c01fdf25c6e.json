{"sha": "bafa89bc467a2b5862c409fc6cae9c01fdf25c6e", "node_id": "C_kwDOAAsO6NoAKGJhZmE4OWJjNDY3YTJiNTg2MmM0MDlmYzZjYWU5YzAxZmRmMjVjNmU", "commit": {"author": {"name": "Hirochika Matsumoto", "email": "git@hkmatsumoto.com", "date": "2022-08-21T07:59:09Z"}, "committer": {"name": "Hirochika Matsumoto", "email": "git@hkmatsumoto.com", "date": "2022-08-21T08:00:18Z"}, "message": "Suggest moving redundant generic args of an assoc fn to its trait", "tree": {"sha": "deba6f9b635573d2a038632865920866e509a38b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/deba6f9b635573d2a038632865920866e509a38b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bafa89bc467a2b5862c409fc6cae9c01fdf25c6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bafa89bc467a2b5862c409fc6cae9c01fdf25c6e", "html_url": "https://github.com/rust-lang/rust/commit/bafa89bc467a2b5862c409fc6cae9c01fdf25c6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bafa89bc467a2b5862c409fc6cae9c01fdf25c6e/comments", "author": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "908fc5b26d15fc96d630ab921e70b2db77a532c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/908fc5b26d15fc96d630ab921e70b2db77a532c4", "html_url": "https://github.com/rust-lang/rust/commit/908fc5b26d15fc96d630ab921e70b2db77a532c4"}], "stats": {"total": 160, "additions": 160, "deletions": 0}, "files": [{"sha": "cfa8191d953d58e048736b0b18340b5993b3e783", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/bafa89bc467a2b5862c409fc6cae9c01fdf25c6e/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bafa89bc467a2b5862c409fc6cae9c01fdf25c6e/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=bafa89bc467a2b5862c409fc6cae9c01fdf25c6e", "patch": "@@ -525,6 +525,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n                     self.suggest_adding_args(err);\n                 } else if self.too_many_args_provided() {\n                     self.suggest_removing_args_or_generics(err);\n+                    self.suggest_moving_args(err);\n                 } else {\n                     unreachable!();\n                 }\n@@ -654,6 +655,64 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n         }\n     }\n \n+    /// Suggests moving redundant argument(s) of an associate function to the\n+    /// trait it belongs to.\n+    ///\n+    /// ```compile_fail\n+    /// Into::into::<Option<_>>(42) // suggests considering `Into::<Option<_>>::into(42)`\n+    /// ```\n+    fn suggest_moving_args(&self, err: &mut Diagnostic) {\n+        if let Some(trait_) = self.tcx.trait_of_item(self.def_id) {\n+            // HACK(hkmatsumoto): Ugly way to tell \"<trait>::<assoc fn>()\" from \"x.<assoc fn>()\";\n+            // we don't care the latter (for now).\n+            if self.path_segment.res == Some(hir::def::Res::Err) {\n+                return;\n+            }\n+\n+            // Say, if the assoc fn takes `A`, `B` and `C` as generic arguments while expecting 1\n+            // argument, and its trait expects 2 arguments. It is hard to \"split\" them right as\n+            // there are too many cases to handle: `A` `B` | `C`, `A` `B` | `C`, `A` `C` | `B`, ...\n+            let num_assoc_fn_expected_args =\n+                self.num_expected_type_or_const_args() + self.num_expected_lifetime_args();\n+            if num_assoc_fn_expected_args > 0 {\n+                return;\n+            }\n+\n+            let num_assoc_fn_excess_args =\n+                self.num_excess_type_or_const_args() + self.num_excess_lifetime_args();\n+\n+            let trait_generics = self.tcx.generics_of(trait_);\n+            let num_trait_generics_except_self =\n+                trait_generics.count() - if trait_generics.has_self { 1 } else { 0 };\n+\n+            // FIXME(hkmatsumoto): RHS of this condition ideally should be\n+            // `num_trait_generics_except_self` - \"# of generic args already provided to trait\"\n+            // but unable to get that information with `self.def_id`.\n+            if num_assoc_fn_excess_args == num_trait_generics_except_self {\n+                if let Some(span) = self.gen_args.span_ext()\n+                && let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n+                    let msg = format!(\n+                        \"consider moving {these} generic argument{s} to the `{name}` trait, which takes up to {num} argument{s}\",\n+                        these = pluralize!(\"this\", num_assoc_fn_excess_args),\n+                        s = pluralize!(num_assoc_fn_excess_args),\n+                        name = self.tcx.item_name(trait_),\n+                        num = num_trait_generics_except_self,\n+                    );\n+                    let sugg = vec![\n+                        (self.path_segment.ident.span, format!(\"{}::{}\", snippet, self.path_segment.ident)),\n+                        (span.with_lo(self.path_segment.ident.span.hi()), \"\".to_owned())\n+                    ];\n+\n+                    err.multipart_suggestion(\n+                        msg,\n+                        sugg,\n+                        Applicability::MaybeIncorrect\n+                    );\n+                }\n+            }\n+        }\n+    }\n+\n     /// Suggests to remove redundant argument(s):\n     ///\n     /// ```text"}, {"sha": "c0fcad4236e8427e1e7ee9936f4ab1fb061f39b4", "filename": "src/test/ui/suggestions/issue-89064.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bafa89bc467a2b5862c409fc6cae9c01fdf25c6e/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89064.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bafa89bc467a2b5862c409fc6cae9c01fdf25c6e/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89064.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89064.rs?ref=bafa89bc467a2b5862c409fc6cae9c01fdf25c6e", "patch": "@@ -0,0 +1,32 @@\n+use std::convert::TryInto;\n+\n+trait A<T> {\n+    fn foo() {}\n+}\n+\n+trait B<T, U> {\n+    fn bar() {}\n+}\n+\n+struct S;\n+\n+impl<T> A<T> for S {}\n+impl<T, U> B<T, U> for S {}\n+\n+fn main() {\n+    let _ = A::foo::<S>();\n+    //~^ ERROR\n+    //~| HELP remove these generics\n+    //~| HELP consider moving this generic argument\n+\n+    let _ = B::bar::<S, S>();\n+    //~^ ERROR\n+    //~| HELP remove these generics\n+    //~| HELP consider moving these generic arguments\n+\n+    // bad suggestion\n+    let _ = A::<S>::foo::<S>();\n+    //~^ ERROR\n+    //~| HELP remove these generics\n+    //~| HELP consider moving this generic argument\n+}"}, {"sha": "11d652b4c6035cf743920d3afd1a8e2f2a976363", "filename": "src/test/ui/suggestions/issue-89064.stderr", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/bafa89bc467a2b5862c409fc6cae9c01fdf25c6e/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89064.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bafa89bc467a2b5862c409fc6cae9c01fdf25c6e/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89064.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89064.stderr?ref=bafa89bc467a2b5862c409fc6cae9c01fdf25c6e", "patch": "@@ -0,0 +1,69 @@\n+error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n+  --> $DIR/issue-89064.rs:17:16\n+   |\n+LL |     let _ = A::foo::<S>();\n+   |                ^^^ expected 0 generic arguments\n+   |\n+note: associated function defined here, with 0 generic parameters\n+  --> $DIR/issue-89064.rs:4:8\n+   |\n+LL |     fn foo() {}\n+   |        ^^^\n+help: remove these generics\n+   |\n+LL -     let _ = A::foo::<S>();\n+LL +     let _ = A::foo();\n+   |\n+help: consider moving this generic argument to the `A` trait, which takes up to 1 argument\n+   |\n+LL -     let _ = A::foo::<S>();\n+LL +     let _ = A::<S>::foo();\n+   |\n+\n+error[E0107]: this associated function takes 0 generic arguments but 2 generic arguments were supplied\n+  --> $DIR/issue-89064.rs:22:16\n+   |\n+LL |     let _ = B::bar::<S, S>();\n+   |                ^^^ expected 0 generic arguments\n+   |\n+note: associated function defined here, with 0 generic parameters\n+  --> $DIR/issue-89064.rs:8:8\n+   |\n+LL |     fn bar() {}\n+   |        ^^^\n+help: remove these generics\n+   |\n+LL -     let _ = B::bar::<S, S>();\n+LL +     let _ = B::bar();\n+   |\n+help: consider moving these generic arguments to the `B` trait, which takes up to 2 arguments\n+   |\n+LL -     let _ = B::bar::<S, S>();\n+LL +     let _ = B::<S, S>::bar();\n+   |\n+\n+error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n+  --> $DIR/issue-89064.rs:28:21\n+   |\n+LL |     let _ = A::<S>::foo::<S>();\n+   |                     ^^^ expected 0 generic arguments\n+   |\n+note: associated function defined here, with 0 generic parameters\n+  --> $DIR/issue-89064.rs:4:8\n+   |\n+LL |     fn foo() {}\n+   |        ^^^\n+help: remove these generics\n+   |\n+LL -     let _ = A::<S>::foo::<S>();\n+LL +     let _ = A::<S>::foo();\n+   |\n+help: consider moving this generic argument to the `A` trait, which takes up to 1 argument\n+   |\n+LL -     let _ = A::<S>::foo::<S>();\n+LL +     let _ = A::<S>::<S>::foo();\n+   |\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0107`."}]}