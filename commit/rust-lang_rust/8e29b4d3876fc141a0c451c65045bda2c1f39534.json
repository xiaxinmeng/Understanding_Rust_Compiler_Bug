{"sha": "8e29b4d3876fc141a0c451c65045bda2c1f39534", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMjliNGQzODc2ZmMxNDFhMGM0NTFjNjUwNDViZGEyYzFmMzk1MzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-19T18:32:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-19T18:32:12Z"}, "message": "Auto merge of #38465 - japaric:msp430-interrupt, r=eddyb\n\ncalling convention for MSP430 interrupts\n\nThis calling convention is used to define interrup handlers on MSP430 microcontrollers. Usage looks like this:\n\n``` rust\n#[no_mangle]\n#[link_section = \"__interrupt_vector_10\"]\npub static TIM0_VECTOR: unsafe extern \"msp430-interrupt\" fn() = tim0;\n\nunsafe extern \"msp430-interrupt\" fn tim0() {\n  P1OUT.write(0x00);\n}\n```\n\nwhich generates the following assembly:\n\n``` asm\nDisassembly of section __interrupt_vector_10:\n\n0000fff2 <TIM0_VECTOR>:\n    fff2:       10 c0           interrupt service routine at 0xc010\n\nDisassembly of section .text:\n\n0000c010 <_ZN3msp4tim017h3193b957fd6a4fd4E>:\n    c010:       c2 43 21 00     mov.b   #0,     &0x0021 ;r3 As==00\n    c014:       00 13           reti\n        ...\n```", "tree": {"sha": "ff288889fb694407db09c1a0f87d50f12ab3269d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff288889fb694407db09c1a0f87d50f12ab3269d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e29b4d3876fc141a0c451c65045bda2c1f39534", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e29b4d3876fc141a0c451c65045bda2c1f39534", "html_url": "https://github.com/rust-lang/rust/commit/8e29b4d3876fc141a0c451c65045bda2c1f39534", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e29b4d3876fc141a0c451c65045bda2c1f39534/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47965f51e6d91ae33bf2b0da0f5510f03766feac", "url": "https://api.github.com/repos/rust-lang/rust/commits/47965f51e6d91ae33bf2b0da0f5510f03766feac", "html_url": "https://github.com/rust-lang/rust/commit/47965f51e6d91ae33bf2b0da0f5510f03766feac"}, {"sha": "e928c7584769fe4d445862d05928486e49d5b505", "url": "https://api.github.com/repos/rust-lang/rust/commits/e928c7584769fe4d445862d05928486e49d5b505", "html_url": "https://github.com/rust-lang/rust/commit/e928c7584769fe4d445862d05928486e49d5b505"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "caa27404086b99fdc6dfd1f5fe00770e26f652e5", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e29b4d3876fc141a0c451c65045bda2c1f39534/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e29b4d3876fc141a0c451c65045bda2c1f39534/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=8e29b4d3876fc141a0c451c65045bda2c1f39534", "patch": "@@ -42,6 +42,7 @@ pub enum CallConv {\n     X86StdcallCallConv = 64,\n     X86FastcallCallConv = 65,\n     ArmAapcsCallConv = 67,\n+    Msp430Intr = 69,\n     PtxKernel = 71,\n     X86_64_SysV = 78,\n     X86_64_Win64 = 79,"}, {"sha": "577744653f09bf5371dfdf1456d55b21a4d04ee1", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e29b4d3876fc141a0c451c65045bda2c1f39534/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e29b4d3876fc141a0c451c65045bda2c1f39534/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=8e29b4d3876fc141a0c451c65045bda2c1f39534", "patch": "@@ -356,6 +356,7 @@ impl FnType {\n             SysV64 => llvm::X86_64_SysV,\n             Aapcs => llvm::ArmAapcsCallConv,\n             PtxKernel => llvm::PtxKernel,\n+            Msp430Interrupt => llvm::Msp430Intr,\n \n             // These API constants ought to be more specific...\n             Cdecl => llvm::CCallConv,"}, {"sha": "3b0db7b50a63ed8a41901f307cb77a9fb219e35e", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e29b4d3876fc141a0c451c65045bda2c1f39534/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e29b4d3876fc141a0c451c65045bda2c1f39534/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=8e29b4d3876fc141a0c451c65045bda2c1f39534", "patch": "@@ -42,6 +42,7 @@ pub enum Abi {\n     Win64,\n     SysV64,\n     PtxKernel,\n+    Msp430Interrupt,\n \n     // Multiplatform / generic ABIs\n     Rust,\n@@ -85,6 +86,7 @@ const AbiDatas: &'static [AbiData] = &[\n     AbiData {abi: Abi::Win64, name: \"win64\", generic: false },\n     AbiData {abi: Abi::SysV64, name: \"sysv64\", generic: false },\n     AbiData {abi: Abi::PtxKernel, name: \"ptx-kernel\", generic: false },\n+    AbiData {abi: Abi::Msp430Interrupt, name: \"msp430-interrupt\", generic: false },\n \n     // Cross-platform ABIs\n     AbiData {abi: Abi::Rust, name: \"Rust\", generic: true },"}, {"sha": "924f51fd95251694f2257b1ff599730673da4ca3", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8e29b4d3876fc141a0c451c65045bda2c1f39534/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e29b4d3876fc141a0c451c65045bda2c1f39534/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=8e29b4d3876fc141a0c451c65045bda2c1f39534", "patch": "@@ -321,6 +321,9 @@ declare_features! (\n \n     // Allows attributes on struct literal fields.\n     (active, struct_field_attributes, \"1.16.0\", Some(38814)),\n+\n+    // `extern \"msp430-interrupt\" fn()`\n+    (active, abi_msp430_interrupt, \"1.16.0\", Some(38487)),\n );\n \n declare_features! (\n@@ -995,6 +998,10 @@ impl<'a> PostExpansionVisitor<'a> {\n                 gate_feature_post!(&self, abi_unadjusted, span,\n                                    \"unadjusted ABI is an implementation detail and perma-unstable\");\n             },\n+            Abi::Msp430Interrupt => {\n+                gate_feature_post!(&self, abi_msp430_interrupt, span,\n+                                   \"msp430-interrupt ABI is experimental and subject to change\");\n+            },\n             // Stable\n             Abi::Cdecl |\n             Abi::Stdcall |"}, {"sha": "030e37475c0a8fd70d2249164252a15f5e4ffc68", "filename": "src/test/compile-fail/feature-gate-abi-msp430-interrupt.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8e29b4d3876fc141a0c451c65045bda2c1f39534/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi-msp430-interrupt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e29b4d3876fc141a0c451c65045bda2c1f39534/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi-msp430-interrupt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi-msp430-interrupt.rs?ref=8e29b4d3876fc141a0c451c65045bda2c1f39534", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the MSP430 interrupt ABI cannot be used when msp430_interrupt\n+// feature gate is not used.\n+\n+extern \"msp430-interrupt\" fn foo() {}\n+//~^ ERROR msp430-interrupt ABI is experimental and subject to change\n+\n+fn main() {\n+    foo();\n+}"}, {"sha": "517e37c3fa5a30fe9302134cfdb314d82e39abb9", "filename": "src/test/compile-fail/feature-gate-abi.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8e29b4d3876fc141a0c451c65045bda2c1f39534/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e29b4d3876fc141a0c451c65045bda2c1f39534/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi.rs?ref=8e29b4d3876fc141a0c451c65045bda2c1f39534", "patch": "@@ -17,18 +17,21 @@ extern \"rust-intrinsic\" fn f1() {} //~ ERROR intrinsics are subject to change\n extern \"platform-intrinsic\" fn f2() {} //~ ERROR platform intrinsics are experimental\n extern \"vectorcall\" fn f3() {} //~ ERROR vectorcall is experimental and subject to change\n extern \"rust-call\" fn f4() {} //~ ERROR rust-call ABI is subject to change\n+extern \"msp430-interrupt\" fn f5() {} //~ ERROR msp430-interrupt ABI is experimental\n \n // Methods in trait definition\n trait Tr {\n     extern \"rust-intrinsic\" fn m1(); //~ ERROR intrinsics are subject to change\n     extern \"platform-intrinsic\" fn m2(); //~ ERROR platform intrinsics are experimental\n     extern \"vectorcall\" fn m3(); //~ ERROR vectorcall is experimental and subject to change\n     extern \"rust-call\" fn m4(); //~ ERROR rust-call ABI is subject to change\n+    extern \"msp430-interrupt\" fn m5(); //~ ERROR msp430-interrupt ABI is experimental\n \n     extern \"rust-intrinsic\" fn dm1() {} //~ ERROR intrinsics are subject to change\n     extern \"platform-intrinsic\" fn dm2() {} //~ ERROR platform intrinsics are experimental\n     extern \"vectorcall\" fn dm3() {} //~ ERROR vectorcall is experimental and subject to change\n     extern \"rust-call\" fn dm4() {} //~ ERROR rust-call ABI is subject to change\n+    extern \"msp430-interrupt\" fn dm5() {} //~ ERROR msp430-interrupt ABI is experimental\n }\n \n struct S;\n@@ -39,6 +42,7 @@ impl Tr for S {\n     extern \"platform-intrinsic\" fn m2() {} //~ ERROR platform intrinsics are experimental\n     extern \"vectorcall\" fn m3() {} //~ ERROR vectorcall is experimental and subject to change\n     extern \"rust-call\" fn m4() {} //~ ERROR rust-call ABI is subject to change\n+    extern \"msp430-interrupt\" fn m5() {} //~ ERROR msp430-interrupt ABI is experimental\n }\n \n // Methods in inherent impl\n@@ -47,18 +51,21 @@ impl S {\n     extern \"platform-intrinsic\" fn im2() {} //~ ERROR platform intrinsics are experimental\n     extern \"vectorcall\" fn im3() {} //~ ERROR vectorcall is experimental and subject to change\n     extern \"rust-call\" fn im4() {} //~ ERROR rust-call ABI is subject to change\n+    extern \"msp430-interrupt\" fn im5() {} //~ ERROR msp430-interrupt ABI is experimental\n }\n \n // Function pointer types\n type A1 = extern \"rust-intrinsic\" fn(); //~ ERROR intrinsics are subject to change\n type A2 = extern \"platform-intrinsic\" fn(); //~ ERROR platform intrinsics are experimental\n type A3 = extern \"vectorcall\" fn(); //~ ERROR vectorcall is experimental and subject to change\n type A4 = extern \"rust-call\" fn(); //~ ERROR rust-call ABI is subject to change\n+type A5 = extern \"msp430-interrupt\" fn(); //~ ERROR msp430-interrupt ABI is experimental\n \n // Foreign modules\n extern \"rust-intrinsic\" {} //~ ERROR intrinsics are subject to change\n extern \"platform-intrinsic\" {} //~ ERROR platform intrinsics are experimental\n extern \"vectorcall\" {} //~ ERROR vectorcall is experimental and subject to change\n extern \"rust-call\" {} //~ ERROR rust-call ABI is subject to change\n+extern \"msp430-interrupt\" {} //~ ERROR msp430-interrupt ABI is experimental\n \n fn main() {}"}, {"sha": "423cc9230e893964764852ff20323a3ce3945e19", "filename": "src/test/ui/codemap_tests/unicode.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e29b4d3876fc141a0c451c65045bda2c1f39534/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e29b4d3876fc141a0c451c65045bda2c1f39534/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr?ref=8e29b4d3876fc141a0c451c65045bda2c1f39534", "patch": "@@ -1,4 +1,4 @@\n-error: invalid ABI: expected one of [cdecl, stdcall, fastcall, vectorcall, aapcs, win64, sysv64, ptx-kernel, Rust, C, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted], found `\u8def\u6feb\u72fc\u00e1\u0301\u0301`\n+error: invalid ABI: expected one of [cdecl, stdcall, fastcall, vectorcall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, Rust, C, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted], found `\u8def\u6feb\u72fc\u00e1\u0301\u0301`\n   --> $DIR/unicode.rs:11:8\n    |\n 11 | extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {}"}]}