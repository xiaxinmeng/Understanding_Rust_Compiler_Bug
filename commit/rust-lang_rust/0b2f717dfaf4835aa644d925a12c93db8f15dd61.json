{"sha": "0b2f717dfaf4835aa644d925a12c93db8f15dd61", "node_id": "C_kwDOAAsO6NoAKDBiMmY3MTdkZmFmNDgzNWFhNjQ0ZDkyNWExMmM5M2RiOGYxNWRkNjE", "commit": {"author": {"name": "onestacked", "email": "chrisi.schrefl@gmail.com", "date": "2022-09-23T11:42:31Z"}, "committer": {"name": "onestacked", "email": "chrisi.schrefl@gmail.com", "date": "2022-09-23T11:42:31Z"}, "message": "Added const_closure", "tree": {"sha": "90c475a538129ca582c7e6bd74526fb2fdb253ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90c475a538129ca582c7e6bd74526fb2fdb253ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b2f717dfaf4835aa644d925a12c93db8f15dd61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b2f717dfaf4835aa644d925a12c93db8f15dd61", "html_url": "https://github.com/rust-lang/rust/commit/0b2f717dfaf4835aa644d925a12c93db8f15dd61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b2f717dfaf4835aa644d925a12c93db8f15dd61/comments", "author": {"login": "chriss0612", "id": 18047460, "node_id": "MDQ6VXNlcjE4MDQ3NDYw", "avatar_url": "https://avatars.githubusercontent.com/u/18047460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chriss0612", "html_url": "https://github.com/chriss0612", "followers_url": "https://api.github.com/users/chriss0612/followers", "following_url": "https://api.github.com/users/chriss0612/following{/other_user}", "gists_url": "https://api.github.com/users/chriss0612/gists{/gist_id}", "starred_url": "https://api.github.com/users/chriss0612/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chriss0612/subscriptions", "organizations_url": "https://api.github.com/users/chriss0612/orgs", "repos_url": "https://api.github.com/users/chriss0612/repos", "events_url": "https://api.github.com/users/chriss0612/events{/privacy}", "received_events_url": "https://api.github.com/users/chriss0612/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chriss0612", "id": 18047460, "node_id": "MDQ6VXNlcjE4MDQ3NDYw", "avatar_url": "https://avatars.githubusercontent.com/u/18047460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chriss0612", "html_url": "https://github.com/chriss0612", "followers_url": "https://api.github.com/users/chriss0612/followers", "following_url": "https://api.github.com/users/chriss0612/following{/other_user}", "gists_url": "https://api.github.com/users/chriss0612/gists{/gist_id}", "starred_url": "https://api.github.com/users/chriss0612/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chriss0612/subscriptions", "organizations_url": "https://api.github.com/users/chriss0612/orgs", "repos_url": "https://api.github.com/users/chriss0612/repos", "events_url": "https://api.github.com/users/chriss0612/events{/privacy}", "received_events_url": "https://api.github.com/users/chriss0612/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc4d574ff2ffcfe76db36116cc4f193384065985", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc4d574ff2ffcfe76db36116cc4f193384065985", "html_url": "https://github.com/rust-lang/rust/commit/bc4d574ff2ffcfe76db36116cc4f193384065985"}], "stats": {"total": 180, "additions": 180, "deletions": 0}, "files": [{"sha": "bd24c10bd00532b1526c1f74a49109586a55559f", "filename": "library/core/src/const_closure.rs", "status": "added", "additions": 178, "deletions": 0, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/0b2f717dfaf4835aa644d925a12c93db8f15dd61/library%2Fcore%2Fsrc%2Fconst_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2f717dfaf4835aa644d925a12c93db8f15dd61/library%2Fcore%2Fsrc%2Fconst_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconst_closure.rs?ref=0b2f717dfaf4835aa644d925a12c93db8f15dd61", "patch": "@@ -0,0 +1,178 @@\n+use crate::marker::Destruct;\n+\n+/// Struct representing a closure with owned data.\n+///\n+/// Example:\n+/// ```rust\n+/// use const_closure::ConstFnOnceClosure;\n+/// const fn imp(state: i32, (arg,): (i32,)) -> i32 {\n+///     state + arg\n+/// }\n+/// let i = 5;\n+/// let cl = ConstFnOnceClosure::new(i, imp);\n+///\n+/// assert!(7 == cl(2));\n+/// ```\n+pub(crate) struct ConstFnOnceClosure<CapturedData, Function> {\n+    data: CapturedData,\n+    func: Function,\n+}\n+impl<CapturedData, Function> ConstFnOnceClosure<CapturedData, Function> {\n+    /// Function for creating a new closure.\n+    ///\n+    /// `data` is the owned data that is captured from the environment (this data must be `~const Destruct`).\n+    ///\n+    /// `func` is the function of the closure, it gets the data and a tuple of the arguments closure\n+    ///   and return the return value of the closure.\n+    #[allow(dead_code)]\n+    pub(crate) const fn new<ClosureArguments, ClosureReturnValue>(\n+        data: CapturedData,\n+        func: Function,\n+    ) -> Self\n+    where\n+        CapturedData: ~const Destruct,\n+        Function: ~const Fn(CapturedData, ClosureArguments) -> ClosureReturnValue + ~const Destruct,\n+    {\n+        Self { data, func }\n+    }\n+}\n+impl<CapturedData, ClosureArguments, Function> const FnOnce<ClosureArguments>\n+    for ConstFnOnceClosure<CapturedData, Function>\n+where\n+    CapturedData: ~const Destruct,\n+    Function: ~const Fn<(CapturedData, ClosureArguments)> + ~const Destruct,\n+{\n+    type Output = Function::Output;\n+\n+    extern \"rust-call\" fn call_once(self, args: ClosureArguments) -> Self::Output {\n+        (self.func)(self.data, args)\n+    }\n+}\n+/// Struct representing a closure with mutably borrowed data.\n+///\n+/// Example:\n+/// ```rust\n+/// #![feature(const_mut_refs)]\n+/// use const_closure::ConstFnMutClosure;\n+/// const fn imp(state: &mut i32, (arg,): (i32,)) -> i32 {\n+///   *state += arg;\n+///   *state\n+/// }\n+/// let mut i = 5;\n+/// let mut cl = ConstFnMutClosure::new(&mut i, imp);\n+///\n+/// assert!(7 == cl(2));\n+/// assert!(8 == cl(1));\n+/// ```\n+pub(crate) struct ConstFnMutClosure<'a, CapturedData: ?Sized, Function> {\n+    data: &'a mut CapturedData,\n+    func: Function,\n+}\n+impl<'a, CapturedData: ?Sized, Function> ConstFnMutClosure<'a, CapturedData, Function> {\n+    /// Function for creating a new closure.\n+    ///\n+    /// `data` is the a mutable borrow of data that is captured from the environment.\n+    ///\n+    /// `func` is the function of the closure, it gets the data and a tuple of the arguments closure\n+    ///   and return the return value of the closure.\n+    pub(crate) const fn new<ClosureArguments, ClosureReturnValue>(\n+        data: &'a mut CapturedData,\n+        func: Function,\n+    ) -> Self\n+    where\n+        Function: ~const Fn(&mut CapturedData, ClosureArguments) -> ClosureReturnValue,\n+    {\n+        Self { data, func }\n+    }\n+}\n+impl<'a, CapturedData: ?Sized, ClosureArguments, Function, ClosureReturnValue> const\n+    FnOnce<ClosureArguments> for ConstFnMutClosure<'a, CapturedData, Function>\n+where\n+    Function:\n+        ~const Fn(&mut CapturedData, ClosureArguments) -> ClosureReturnValue + ~const Destruct,\n+{\n+    type Output = ClosureReturnValue;\n+\n+    extern \"rust-call\" fn call_once(mut self, args: ClosureArguments) -> Self::Output {\n+        self.call_mut(args)\n+    }\n+}\n+impl<'a, CapturedData: ?Sized, ClosureArguments, Function, ClosureReturnValue> const\n+    FnMut<ClosureArguments> for ConstFnMutClosure<'a, CapturedData, Function>\n+where\n+    Function: ~const Fn(&mut CapturedData, ClosureArguments) -> ClosureReturnValue,\n+{\n+    extern \"rust-call\" fn call_mut(&mut self, args: ClosureArguments) -> Self::Output {\n+        (self.func)(self.data, args)\n+    }\n+}\n+\n+/// Struct representing a closure with borrowed data.\n+///\n+/// Example:\n+/// ```rust\n+/// use const_closure::ConstFnClosure;\n+///\n+/// const fn imp(state: &i32, (arg,): (i32,)) -> i32 {\n+///     *state + arg\n+/// }\n+/// let i = 5;\n+/// let cl = ConstFnClosure::new(&i, imp);\n+///\n+/// assert!(7 == cl(2));\n+/// assert!(6 == cl(1));\n+/// ```\n+pub(crate) struct ConstFnClosure<'a, CapturedData: ?Sized, Function> {\n+    data: &'a CapturedData,\n+    func: Function,\n+}\n+impl<'a, CapturedData: ?Sized, Function> ConstFnClosure<'a, CapturedData, Function> {\n+    /// Function for creating a new closure.\n+    ///\n+    /// `data` is the a mutable borrow of data that is captured from the environment.\n+    ///\n+    /// `func` is the function of the closure, it gets the data and a tuple of the arguments closure\n+    ///   and return the return value of the closure.\n+    #[allow(dead_code)]\n+    pub(crate) const fn new<ClosureArguments, ClosureReturnValue>(\n+        data: &'a CapturedData,\n+        func: Function,\n+    ) -> Self\n+    where\n+        Function: ~const Fn(&CapturedData, ClosureArguments) -> ClosureReturnValue,\n+    {\n+        Self { data, func }\n+    }\n+}\n+impl<'a, CapturedData: ?Sized, Function, ClosureArguments, ClosureReturnValue> const\n+    FnOnce<ClosureArguments> for ConstFnClosure<'a, CapturedData, Function>\n+where\n+    Function: ~const Fn(&CapturedData, ClosureArguments) -> ClosureReturnValue + ~const Destruct,\n+{\n+    type Output = ClosureReturnValue;\n+\n+    extern \"rust-call\" fn call_once(mut self, args: ClosureArguments) -> Self::Output {\n+        self.call_mut(args)\n+    }\n+}\n+impl<'a, CapturedData: ?Sized, Function, ClosureArguments, ClosureReturnValue> const\n+    FnMut<ClosureArguments> for ConstFnClosure<'a, CapturedData, Function>\n+where\n+    Function: ~const Fn(&CapturedData, ClosureArguments) -> ClosureReturnValue,\n+{\n+    extern \"rust-call\" fn call_mut(&mut self, args: ClosureArguments) -> Self::Output {\n+        self.call(args)\n+    }\n+}\n+impl<\n+    'a,\n+    CapturedData: ?Sized,\n+    Function: ~const Fn(&CapturedData, ClosureArguments) -> ClosureReturnValue,\n+    ClosureArguments,\n+    ClosureReturnValue,\n+> const Fn<ClosureArguments> for ConstFnClosure<'a, CapturedData, Function>\n+{\n+    extern \"rust-call\" fn call(&self, args: ClosureArguments) -> Self::Output {\n+        (self.func)(self.data, args)\n+    }\n+}"}, {"sha": "6fbe7ade7325501d19382edf185f599abc6182cc", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b2f717dfaf4835aa644d925a12c93db8f15dd61/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2f717dfaf4835aa644d925a12c93db8f15dd61/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=0b2f717dfaf4835aa644d925a12c93db8f15dd61", "patch": "@@ -356,6 +356,8 @@ mod bool;\n mod tuple;\n mod unit;\n \n+mod const_closure;\n+\n #[stable(feature = \"core_primitive\", since = \"1.43.0\")]\n pub mod primitive;\n "}]}