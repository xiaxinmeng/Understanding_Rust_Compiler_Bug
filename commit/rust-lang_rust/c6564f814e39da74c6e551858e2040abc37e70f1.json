{"sha": "c6564f814e39da74c6e551858e2040abc37e70f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NTY0ZjgxNGUzOWRhNzRjNmU1NTE4NThlMjA0MGFiYzM3ZTcwZjE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-29T13:20:37Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-29T13:21:14Z"}, "message": "Fix float min and max operations in presence of NaN\n\nCranelift's fmin and fmax instructions propagate NaN, while Rust's min\nand max don't.\n\nFixes #1049", "tree": {"sha": "b1839662ad4a488b73cb2f6b158a48fefe4b4647", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1839662ad4a488b73cb2f6b158a48fefe4b4647"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6564f814e39da74c6e551858e2040abc37e70f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6564f814e39da74c6e551858e2040abc37e70f1", "html_url": "https://github.com/rust-lang/rust/commit/c6564f814e39da74c6e551858e2040abc37e70f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6564f814e39da74c6e551858e2040abc37e70f1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0b9f3b3cc3cdf3edcf0868e6c88e652455055fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0b9f3b3cc3cdf3edcf0868e6c88e652455055fd", "html_url": "https://github.com/rust-lang/rust/commit/e0b9f3b3cc3cdf3edcf0868e6c88e652455055fd"}], "stats": {"total": 83, "additions": 23, "deletions": 60}, "files": [{"sha": "731c60fda58d675de31323addb9f71520b51683b", "filename": "patches/0001-stdsimd-Disable-unsupported-tests.patch", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c6564f814e39da74c6e551858e2040abc37e70f1/patches%2F0001-stdsimd-Disable-unsupported-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/c6564f814e39da74c6e551858e2040abc37e70f1/patches%2F0001-stdsimd-Disable-unsupported-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0001-stdsimd-Disable-unsupported-tests.patch?ref=c6564f814e39da74c6e551858e2040abc37e70f1", "patch": "@@ -124,22 +124,6 @@ index cb39e73..fc0ebe1 100644\n  \n                  fn sqrt<const LANES: usize>() {\n                      test_helpers::test_unary_elementwise(\n-@@ -491,6 +493,7 @@ macro_rules! impl_float_tests {\n-                     )\n-                 }\n- \n-+                /*\n-                 fn min<const LANES: usize>() {\n-                     // Regular conditions (both values aren't zero)\n-                     test_helpers::test_binary_elementwise(\n-@@ -536,6 +539,7 @@ macro_rules! impl_float_tests {\n-                     assert!(p_zero.max(n_zero).to_array().iter().all(|x| *x == 0.));\n-                     assert!(n_zero.max(p_zero).to_array().iter().all(|x| *x == 0.));\n-                 }\n-+                */\n- \n-                 fn clamp<const LANES: usize>() {\n-                     test_helpers::test_3(&|value: [Scalar; LANES], mut min: [Scalar; LANES], mut max: [Scalar; LANES]| {\n @@ -581,6 +585,7 @@ macro_rules! impl_float_tests {\n                      });\n                  }"}, {"sha": "50ef0bd9418c74f8a760ca8b80629edc223be08c", "filename": "patches/0023-sysroot-Ignore-failing-tests.patch", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c6564f814e39da74c6e551858e2040abc37e70f1/patches%2F0023-sysroot-Ignore-failing-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/c6564f814e39da74c6e551858e2040abc37e70f1/patches%2F0023-sysroot-Ignore-failing-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0023-sysroot-Ignore-failing-tests.patch?ref=c6564f814e39da74c6e551858e2040abc37e70f1", "patch": "@@ -46,45 +46,5 @@ index 4bc44e9..8e3c7a4 100644\n  \n  #[test]\n  fn cell_allows_array_cycle() {\n-diff --git a/library/core/tests/num/mod.rs b/library/core/tests/num/mod.rs\n-index a17c094..5bb11d2 100644\n---- a/library/core/tests/num/mod.rs\n-+++ b/library/core/tests/num/mod.rs\n-@@ -651,11 +651,12 @@ macro_rules! test_float {\n-                 assert_eq!((9.0 as $fty).min($neginf), $neginf);\n-                 assert_eq!(($neginf as $fty).min(-9.0), $neginf);\n-                 assert_eq!((-9.0 as $fty).min($neginf), $neginf);\n--                assert_eq!(($nan as $fty).min(9.0), 9.0);\n--                assert_eq!(($nan as $fty).min(-9.0), -9.0);\n--                assert_eq!((9.0 as $fty).min($nan), 9.0);\n--                assert_eq!((-9.0 as $fty).min($nan), -9.0);\n--                assert!(($nan as $fty).min($nan).is_nan());\n-+                // Cranelift fmin has NaN propagation\n-+                //assert_eq!(($nan as $fty).min(9.0), 9.0);\n-+                //assert_eq!(($nan as $fty).min(-9.0), -9.0);\n-+                //assert_eq!((9.0 as $fty).min($nan), 9.0);\n-+                //assert_eq!((-9.0 as $fty).min($nan), -9.0);\n-+                //assert!(($nan as $fty).min($nan).is_nan());\n-             }\n-             #[test]\n-             fn max() {\n-@@ -673,11 +674,12 @@ macro_rules! test_float {\n-                 assert_eq!((9.0 as $fty).max($neginf), 9.0);\n-                 assert_eq!(($neginf as $fty).max(-9.0), -9.0);\n-                 assert_eq!((-9.0 as $fty).max($neginf), -9.0);\n--                assert_eq!(($nan as $fty).max(9.0), 9.0);\n--                assert_eq!(($nan as $fty).max(-9.0), -9.0);\n--                assert_eq!((9.0 as $fty).max($nan), 9.0);\n--                assert_eq!((-9.0 as $fty).max($nan), -9.0);\n--                assert!(($nan as $fty).max($nan).is_nan());\n-+                // Cranelift fmax has NaN propagation\n-+                //assert_eq!(($nan as $fty).max(9.0), 9.0);\n-+                //assert_eq!(($nan as $fty).max(-9.0), -9.0);\n-+                //assert_eq!((9.0 as $fty).max($nan), 9.0);\n-+                //assert_eq!((-9.0 as $fty).max($nan), -9.0);\n-+                //assert!(($nan as $fty).max($nan).is_nan());\n-             }\n-             #[test]\n-             fn rem_euclid() {\n -- \n 2.21.0 (Apple Git-122)"}, {"sha": "0eef710239bdd456e90df4ce7f69a8f2d5832a6b", "filename": "scripts/tests.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6564f814e39da74c6e551858e2040abc37e70f1/scripts%2Ftests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c6564f814e39da74c6e551858e2040abc37e70f1/scripts%2Ftests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ftests.sh?ref=c6564f814e39da74c6e551858e2040abc37e70f1", "patch": "@@ -139,6 +139,7 @@ function extended_sysroot_tests() {\n \n     pushd stdsimd\n     echo \"[TEST] rust-lang/stdsimd\"\n+    ../build/cargo clean\n     ../build/cargo build --all-targets --target $TARGET_TRIPLE\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n         ../build/cargo test -q"}, {"sha": "86698460747494f7a95711fe58bfada5da0a34e0", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c6564f814e39da74c6e551858e2040abc37e70f1/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6564f814e39da74c6e551858e2040abc37e70f1/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=c6564f814e39da74c6e551858e2040abc37e70f1", "patch": "@@ -1029,23 +1029,39 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n             ret.write_cvalue(fx, old);\n         };\n \n+        // In Rust floating point min and max don't propagate NaN. In Cranelift they do however.\n+        // For this reason it is necessary to use `a.is_nan() ? b : (a >= b ? b : a)` for `minnumf*`\n+        // and `a.is_nan() ? b : (a <= b ? b : a)` for `maxnumf*`. NaN checks are done by comparing\n+        // a float against itself. Only in case of NaN is it not equal to itself.\n         minnumf32, (v a, v b) {\n-            let val = fx.bcx.ins().fmin(a, b);\n+            let a_is_nan = fx.bcx.ins().fcmp(FloatCC::NotEqual, a, a);\n+            let a_ge_b = fx.bcx.ins().fcmp(FloatCC::GreaterThanOrEqual, a, b);\n+            let temp = fx.bcx.ins().select(a_ge_b, b, a);\n+            let val = fx.bcx.ins().select(a_is_nan, b, temp);\n             let val = CValue::by_val(val, fx.layout_of(fx.tcx.types.f32));\n             ret.write_cvalue(fx, val);\n         };\n         minnumf64, (v a, v b) {\n-            let val = fx.bcx.ins().fmin(a, b);\n+            let a_is_nan = fx.bcx.ins().fcmp(FloatCC::NotEqual, a, a);\n+            let a_ge_b = fx.bcx.ins().fcmp(FloatCC::GreaterThanOrEqual, a, b);\n+            let temp = fx.bcx.ins().select(a_ge_b, b, a);\n+            let val = fx.bcx.ins().select(a_is_nan, b, temp);\n             let val = CValue::by_val(val, fx.layout_of(fx.tcx.types.f64));\n             ret.write_cvalue(fx, val);\n         };\n         maxnumf32, (v a, v b) {\n-            let val = fx.bcx.ins().fmax(a, b);\n+            let a_is_nan = fx.bcx.ins().fcmp(FloatCC::NotEqual, a, a);\n+            let a_le_b = fx.bcx.ins().fcmp(FloatCC::LessThanOrEqual, a, b);\n+            let temp = fx.bcx.ins().select(a_le_b, b, a);\n+            let val = fx.bcx.ins().select(a_is_nan, b, temp);\n             let val = CValue::by_val(val, fx.layout_of(fx.tcx.types.f32));\n             ret.write_cvalue(fx, val);\n         };\n         maxnumf64, (v a, v b) {\n-            let val = fx.bcx.ins().fmax(a, b);\n+            let a_is_nan = fx.bcx.ins().fcmp(FloatCC::NotEqual, a, a);\n+            let a_le_b = fx.bcx.ins().fcmp(FloatCC::LessThanOrEqual, a, b);\n+            let temp = fx.bcx.ins().select(a_le_b, b, a);\n+            let val = fx.bcx.ins().select(a_is_nan, b, temp);\n             let val = CValue::by_val(val, fx.layout_of(fx.tcx.types.f64));\n             ret.write_cvalue(fx, val);\n         };"}, {"sha": "43e68b4afa9eac0140264ebf9259a90b77eb9599", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6564f814e39da74c6e551858e2040abc37e70f1/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6564f814e39da74c6e551858e2040abc37e70f1/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=c6564f814e39da74c6e551858e2040abc37e70f1", "patch": "@@ -378,6 +378,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n \n         simd_reduce_min, (c v) {\n+            // FIXME support floats\n             validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n             simd_reduce(fx, v, None, ret, |fx, layout, a, b| {\n                 let lt = fx.bcx.ins().icmp(if layout.ty.is_signed() {\n@@ -390,6 +391,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n \n         simd_reduce_max, (c v) {\n+            // FIXME support floats\n             validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n             simd_reduce(fx, v, None, ret, |fx, layout, a, b| {\n                 let gt = fx.bcx.ins().icmp(if layout.ty.is_signed() {"}]}