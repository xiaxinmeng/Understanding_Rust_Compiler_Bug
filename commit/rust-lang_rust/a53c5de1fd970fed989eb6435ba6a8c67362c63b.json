{"sha": "a53c5de1fd970fed989eb6435ba6a8c67362c63b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1M2M1ZGUxZmQ5NzBmZWQ5ODllYjY0MzViYTZhOGM2NzM2MmM2M2I=", "commit": {"author": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2019-01-13T10:31:37Z"}, "committer": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2019-01-13T10:31:37Z"}, "message": "Add an explanatory message when we use the Query fallback", "tree": {"sha": "b22ad0e29e1cff00b0d5fd1ee1968b1b3d623748", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b22ad0e29e1cff00b0d5fd1ee1968b1b3d623748"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a53c5de1fd970fed989eb6435ba6a8c67362c63b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a53c5de1fd970fed989eb6435ba6a8c67362c63b", "html_url": "https://github.com/rust-lang/rust/commit/a53c5de1fd970fed989eb6435ba6a8c67362c63b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a53c5de1fd970fed989eb6435ba6a8c67362c63b/comments", "author": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2659abed8417bfb36fb5a448c52b8af1495ec51", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2659abed8417bfb36fb5a448c52b8af1495ec51", "html_url": "https://github.com/rust-lang/rust/commit/a2659abed8417bfb36fb5a448c52b8af1495ec51"}], "stats": {"total": 46, "additions": 36, "deletions": 10}, "files": [{"sha": "e2537758dd3b18da725d7fbfae295c1f3135795d", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a53c5de1fd970fed989eb6435ba6a8c67362c63b/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a53c5de1fd970fed989eb6435ba6a8c67362c63b/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=a53c5de1fd970fed989eb6435ba6a8c67362c63b", "patch": "@@ -13,8 +13,11 @@ pub(crate) fn goto_definition(\n     let file = db.source_file(position.file_id);\n     let syntax = file.syntax();\n     if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, position.offset) {\n-        let navs = reference_definition(db, position.file_id, name_ref)?;\n-        return Ok(Some(RangeInfo::new(name_ref.syntax().range(), navs)));\n+        let navs = reference_definition(db, position.file_id, name_ref)?.to_vec();\n+        return Ok(Some(RangeInfo::new(\n+            name_ref.syntax().range(),\n+            navs.to_vec(),\n+        )));\n     }\n     if let Some(name) = find_node_at_offset::<ast::Name>(syntax, position.offset) {\n         let navs = ctry!(name_definition(db, position.file_id, name)?);\n@@ -23,19 +26,35 @@ pub(crate) fn goto_definition(\n     Ok(None)\n }\n \n+pub(crate) enum ReferenceResult {\n+    Exact(NavigationTarget),\n+    Approximate(Vec<NavigationTarget>),\n+}\n+\n+impl ReferenceResult {\n+    fn to_vec(self) -> Vec<NavigationTarget> {\n+        use self::ReferenceResult::*;\n+        match self {\n+            Exact(target) => vec![target],\n+            Approximate(vec) => vec,\n+        }\n+    }\n+}\n+\n pub(crate) fn reference_definition(\n     db: &RootDatabase,\n     file_id: FileId,\n     name_ref: &ast::NameRef,\n-) -> Cancelable<Vec<NavigationTarget>> {\n+) -> Cancelable<ReferenceResult> {\n+    use self::ReferenceResult::*;\n     if let Some(fn_descr) =\n         hir::source_binder::function_from_child_node(db, file_id, name_ref.syntax())?\n     {\n         let scope = fn_descr.scopes(db)?;\n         // First try to resolve the symbol locally\n         if let Some(entry) = scope.resolve_local_name(name_ref) {\n             let nav = NavigationTarget::from_scope_entry(file_id, &entry);\n-            return Ok(vec![nav]);\n+            return Ok(Exact(nav));\n         };\n     }\n     // Then try module name resolution\n@@ -51,7 +70,7 @@ pub(crate) fn reference_definition(\n             let resolved = module.resolve_path(db, &path)?;\n             if let Some(def_id) = resolved.take_types().or(resolved.take_values()) {\n                 if let Some(target) = NavigationTarget::from_def(db, def_id.resolve(db)?)? {\n-                    return Ok(vec![target]);\n+                    return Ok(Exact(target));\n                 }\n             }\n         }\n@@ -62,7 +81,7 @@ pub(crate) fn reference_definition(\n         .into_iter()\n         .map(NavigationTarget::from_symbol)\n         .collect();\n-    Ok(navs)\n+    Ok(Approximate(navs))\n }\n \n fn name_definition("}, {"sha": "2968b807cad49b3ca9118aceccc6003dba30b191", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a53c5de1fd970fed989eb6435ba6a8c67362c63b/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a53c5de1fd970fed989eb6435ba6a8c67362c63b/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=a53c5de1fd970fed989eb6435ba6a8c67362c63b", "patch": "@@ -16,9 +16,16 @@ pub(crate) fn hover(\n \n     let mut range = None;\n     if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(file.syntax(), position.offset) {\n-        let navs = crate::goto_definition::reference_definition(db, position.file_id, name_ref)?;\n-        for nav in navs {\n-            res.extend(doc_text_for(db, nav)?)\n+        use crate::goto_definition::{ReferenceResult::*, reference_definition};\n+        let ref_result = reference_definition(db, position.file_id, name_ref)?;\n+        match ref_result {\n+            Exact(nav) => res.extend(doc_text_for(db, nav)?),\n+            Approximate(navs) => {\n+                res.push(\"Failed to exactly resolve the symbol. This is probably because rust_analyzer does not yet support glob imports or traits.  \\nThese methods were found instead:\".to_string());\n+                for nav in navs {\n+                    res.extend(doc_text_for(db, nav)?)\n+                }\n+            }\n         }\n         if !res.is_empty() {\n             range = Some(name_ref.syntax().range())\n@@ -34,7 +41,7 @@ pub(crate) fn hover(\n             file_id: position.file_id,\n             range: node.range(),\n         };\n-        res.extend(type_of(db, frange)?);\n+        res.extend(type_of(db, frange)?.map(Into::into));\n         range = Some(node.range());\n     };\n "}]}