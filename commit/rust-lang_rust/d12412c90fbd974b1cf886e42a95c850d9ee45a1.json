{"sha": "d12412c90fbd974b1cf886e42a95c850d9ee45a1", "node_id": "C_kwDOAAsO6NoAKGQxMjQxMmM5MGZiZDk3NGIxY2Y4ODZlNDJhOTVjODUwZDllZTQ1YTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-16T05:55:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-16T05:55:59Z"}, "message": "Auto merge of #106395 - compiler-errors:rework-predicates, r=eholk\n\nRework some `predicates_of`/`{Generic,Instantiated}Predicates` code\n\n1. Make `instantiate_own` return an iterator, since it's a bit more efficient and easier to work with\n2. Remove `bound_{explicit,}_predicates_of` -- these `bound_` methods in particular were a bit awkward to work with since `ty::GenericPredicates` *already* acts kinda like an `EarlyBinder` with its own `instantiate_*` methods, and had only a few call sites anyways.\n3. Implement `IntoIterator` for `InstantiatedPredicates`, since it's *very* commonly being `zip`'d together.", "tree": {"sha": "2ae804c5b1324bbd5085a23c247be985a7eff861", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ae804c5b1324bbd5085a23c247be985a7eff861"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d12412c90fbd974b1cf886e42a95c850d9ee45a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d12412c90fbd974b1cf886e42a95c850d9ee45a1", "html_url": "https://github.com/rust-lang/rust/commit/d12412c90fbd974b1cf886e42a95c850d9ee45a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d12412c90fbd974b1cf886e42a95c850d9ee45a1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41edaac716dde55b6a9d83ae4da0fba354ae5ba8", "url": "https://api.github.com/repos/rust-lang/rust/commits/41edaac716dde55b6a9d83ae4da0fba354ae5ba8", "html_url": "https://github.com/rust-lang/rust/commit/41edaac716dde55b6a9d83ae4da0fba354ae5ba8"}, {"sha": "90df86f474e9214fe3337181db8e88b9b785e6fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/90df86f474e9214fe3337181db8e88b9b785e6fe", "html_url": "https://github.com/rust-lang/rust/commit/90df86f474e9214fe3337181db8e88b9b785e6fe"}], "stats": {"total": 311, "additions": 155, "deletions": 156}, "files": [{"sha": "e512099b93b136b4478d56517246867fc94833ec", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 21, "deletions": 27, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=d12412c90fbd974b1cf886e42a95c850d9ee45a1", "patch": "@@ -673,40 +673,34 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let tcx = self.infcx.tcx;\n \n         // Find out if the predicates show that the type is a Fn or FnMut\n-        let find_fn_kind_from_did = |predicates: ty::EarlyBinder<\n-            &[(ty::Predicate<'tcx>, Span)],\n-        >,\n-                                     substs| {\n-            predicates.0.iter().find_map(|(pred, _)| {\n-                    let pred = if let Some(substs) = substs {\n-                        predicates.rebind(*pred).subst(tcx, substs).kind().skip_binder()\n-                    } else {\n-                        pred.kind().skip_binder()\n-                    };\n-                    if let ty::PredicateKind::Clause(ty::Clause::Trait(pred)) = pred && pred.self_ty() == ty {\n-                    if Some(pred.def_id()) == tcx.lang_items().fn_trait() {\n-                        return Some(hir::Mutability::Not);\n-                    } else if Some(pred.def_id()) == tcx.lang_items().fn_mut_trait() {\n-                        return Some(hir::Mutability::Mut);\n-                    }\n+        let find_fn_kind_from_did = |(pred, _): (ty::Predicate<'tcx>, _)| {\n+            if let ty::PredicateKind::Clause(ty::Clause::Trait(pred)) = pred.kind().skip_binder()\n+                && pred.self_ty() == ty\n+            {\n+                if Some(pred.def_id()) == tcx.lang_items().fn_trait() {\n+                    return Some(hir::Mutability::Not);\n+                } else if Some(pred.def_id()) == tcx.lang_items().fn_mut_trait() {\n+                    return Some(hir::Mutability::Mut);\n                 }\n-                    None\n-                })\n+            }\n+            None\n         };\n \n         // If the type is opaque/param/closure, and it is Fn or FnMut, let's suggest (mutably)\n         // borrowing the type, since `&mut F: FnMut` iff `F: FnMut` and similarly for `Fn`.\n         // These types seem reasonably opaque enough that they could be substituted with their\n         // borrowed variants in a function body when we see a move error.\n-        let borrow_level = match ty.kind() {\n-            ty::Param(_) => find_fn_kind_from_did(\n-                tcx.bound_explicit_predicates_of(self.mir_def_id().to_def_id())\n-                    .map_bound(|p| p.predicates),\n-                None,\n-            ),\n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n-                find_fn_kind_from_did(tcx.bound_explicit_item_bounds(*def_id), Some(*substs))\n-            }\n+        let borrow_level = match *ty.kind() {\n+            ty::Param(_) => tcx\n+                .explicit_predicates_of(self.mir_def_id().to_def_id())\n+                .predicates\n+                .iter()\n+                .copied()\n+                .find_map(find_fn_kind_from_did),\n+            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => tcx\n+                .bound_explicit_item_bounds(def_id)\n+                .subst_iter_copied(tcx, substs)\n+                .find_map(find_fn_kind_from_did),\n             ty::Closure(_, substs) => match substs.as_closure().kind() {\n                 ty::ClosureKind::Fn => Some(hir::Mutability::Not),\n                 ty::ClosureKind::FnMut => Some(hir::Mutability::Mut),"}, {"sha": "11729e2c83f0b9d098788e495a6db5ea5b271ce5", "filename": "compiler/rustc_borrowck/src/type_check/canonical.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs?ref=d12412c90fbd974b1cf886e42a95c850d9ee45a1", "patch": "@@ -107,11 +107,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         instantiated_predicates: ty::InstantiatedPredicates<'tcx>,\n         locations: Locations,\n     ) {\n-        for (predicate, span) in instantiated_predicates\n-            .predicates\n-            .into_iter()\n-            .zip(instantiated_predicates.spans.into_iter())\n-        {\n+        for (predicate, span) in instantiated_predicates {\n             debug!(?predicate);\n             let category = ConstraintCategory::Predicate(span);\n             let predicate = self.normalize_with_category(predicate, locations, category);"}, {"sha": "c43bfd16ab1e4496d35ffcd81162d71d6c99d9b4", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=d12412c90fbd974b1cf886e42a95c850d9ee45a1", "patch": "@@ -209,9 +209,11 @@ fn compare_method_predicate_entailment<'tcx>(\n     //\n     // We then register the obligations from the impl_m and check to see\n     // if all constraints hold.\n-    hybrid_preds\n-        .predicates\n-        .extend(trait_m_predicates.instantiate_own(tcx, trait_to_placeholder_substs).predicates);\n+    hybrid_preds.predicates.extend(\n+        trait_m_predicates\n+            .instantiate_own(tcx, trait_to_placeholder_substs)\n+            .map(|(predicate, _)| predicate),\n+    );\n \n     // Construct trait parameter environment and then shift it into the placeholder viewpoint.\n     // The key step here is to update the caller_bounds's predicates to be\n@@ -230,7 +232,7 @@ fn compare_method_predicate_entailment<'tcx>(\n     debug!(\"compare_impl_method: caller_bounds={:?}\", param_env.caller_bounds());\n \n     let impl_m_own_bounds = impl_m_predicates.instantiate_own(tcx, impl_to_placeholder_substs);\n-    for (predicate, span) in iter::zip(impl_m_own_bounds.predicates, impl_m_own_bounds.spans) {\n+    for (predicate, span) in impl_m_own_bounds {\n         let normalize_cause = traits::ObligationCause::misc(span, impl_m_hir_id);\n         let predicate = ocx.normalize(&normalize_cause, param_env, predicate);\n \n@@ -1828,8 +1830,7 @@ fn compare_type_predicate_entailment<'tcx>(\n     check_region_bounds_on_impl_item(tcx, impl_ty, trait_ty, false)?;\n \n     let impl_ty_own_bounds = impl_ty_predicates.instantiate_own(tcx, impl_substs);\n-\n-    if impl_ty_own_bounds.is_empty() {\n+    if impl_ty_own_bounds.len() == 0 {\n         // Nothing to check.\n         return Ok(());\n     }\n@@ -1844,9 +1845,11 @@ fn compare_type_predicate_entailment<'tcx>(\n     // associated type in the trait are assumed.\n     let impl_predicates = tcx.predicates_of(impl_ty_predicates.parent.unwrap());\n     let mut hybrid_preds = impl_predicates.instantiate_identity(tcx);\n-    hybrid_preds\n-        .predicates\n-        .extend(trait_ty_predicates.instantiate_own(tcx, trait_to_impl_substs).predicates);\n+    hybrid_preds.predicates.extend(\n+        trait_ty_predicates\n+            .instantiate_own(tcx, trait_to_impl_substs)\n+            .map(|(predicate, _)| predicate),\n+    );\n \n     debug!(\"compare_type_predicate_entailment: bounds={:?}\", hybrid_preds);\n \n@@ -1862,9 +1865,7 @@ fn compare_type_predicate_entailment<'tcx>(\n \n     debug!(\"compare_type_predicate_entailment: caller_bounds={:?}\", param_env.caller_bounds());\n \n-    assert_eq!(impl_ty_own_bounds.predicates.len(), impl_ty_own_bounds.spans.len());\n-    for (span, predicate) in std::iter::zip(impl_ty_own_bounds.spans, impl_ty_own_bounds.predicates)\n-    {\n+    for (predicate, span) in impl_ty_own_bounds {\n         let cause = ObligationCause::misc(span, impl_ty_hir_id);\n         let predicate = ocx.normalize(&cause, param_env, predicate);\n "}, {"sha": "49dd1eb22f7fe16ebd9d97ba5b4aef83d3da612e", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=d12412c90fbd974b1cf886e42a95c850d9ee45a1", "patch": "@@ -32,7 +32,6 @@ use rustc_trait_selection::traits::{\n };\n \n use std::cell::LazyCell;\n-use std::iter;\n use std::ops::{ControlFlow, Deref};\n \n pub(super) struct WfCheckingCtxt<'a, 'tcx> {\n@@ -1310,7 +1309,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n     let infcx = wfcx.infcx;\n     let tcx = wfcx.tcx();\n \n-    let predicates = tcx.bound_predicates_of(def_id.to_def_id());\n+    let predicates = tcx.predicates_of(def_id.to_def_id());\n     let generics = tcx.generics_of(def_id);\n \n     let is_our_default = |def: &ty::GenericParamDef| match def.kind {\n@@ -1411,7 +1410,6 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n \n     // Now we build the substituted predicates.\n     let default_obligations = predicates\n-        .0\n         .predicates\n         .iter()\n         .flat_map(|&(pred, sp)| {\n@@ -1442,13 +1440,13 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n             }\n             let mut param_count = CountParams::default();\n             let has_region = pred.visit_with(&mut param_count).is_break();\n-            let substituted_pred = predicates.rebind(pred).subst(tcx, substs);\n+            let substituted_pred = ty::EarlyBinder(pred).subst(tcx, substs);\n             // Don't check non-defaulted params, dependent defaults (including lifetimes)\n             // or preds with multiple params.\n             if substituted_pred.has_non_region_param() || param_count.params.len() > 1 || has_region\n             {\n                 None\n-            } else if predicates.0.predicates.iter().any(|&(p, _)| p == substituted_pred) {\n+            } else if predicates.predicates.iter().any(|&(p, _)| p == substituted_pred) {\n                 // Avoid duplication of predicates that contain no parameters, for example.\n                 None\n             } else {\n@@ -1474,22 +1472,21 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n             traits::Obligation::new(tcx, cause, wfcx.param_env, pred)\n         });\n \n-    let predicates = predicates.0.instantiate_identity(tcx);\n+    let predicates = predicates.instantiate_identity(tcx);\n \n     let predicates = wfcx.normalize(span, None, predicates);\n \n     debug!(?predicates.predicates);\n     assert_eq!(predicates.predicates.len(), predicates.spans.len());\n-    let wf_obligations =\n-        iter::zip(&predicates.predicates, &predicates.spans).flat_map(|(&p, &sp)| {\n-            traits::wf::predicate_obligations(\n-                infcx,\n-                wfcx.param_env.without_const(),\n-                wfcx.body_id,\n-                p,\n-                sp,\n-            )\n-        });\n+    let wf_obligations = predicates.into_iter().flat_map(|(p, sp)| {\n+        traits::wf::predicate_obligations(\n+            infcx,\n+            wfcx.param_env.without_const(),\n+            wfcx.body_id,\n+            p,\n+            sp,\n+        )\n+    });\n \n     let obligations: Vec<_> = wf_obligations.chain(default_obligations).collect();\n     wfcx.register_obligations(obligations);"}, {"sha": "b617821fbd6528bbf6feee0f9efb8ff867a34ae5", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=d12412c90fbd974b1cf886e42a95c850d9ee45a1", "patch": "@@ -375,14 +375,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if self.tcx.has_attr(def_id, sym::rustc_evaluate_where_clauses) {\n                     let predicates = self.tcx.predicates_of(def_id);\n                     let predicates = predicates.instantiate(self.tcx, subst);\n-                    for (predicate, predicate_span) in\n-                        predicates.predicates.iter().zip(&predicates.spans)\n-                    {\n+                    for (predicate, predicate_span) in predicates {\n                         let obligation = Obligation::new(\n                             self.tcx,\n                             ObligationCause::dummy_with_span(callee_expr.span),\n                             self.param_env,\n-                            *predicate,\n+                            predicate,\n                         );\n                         let result = self.evaluate_obligation(&obligation);\n                         self.tcx\n@@ -391,7 +389,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 callee_expr.span,\n                                 &format!(\"evaluate({:?}) = {:?}\", predicate, result),\n                             )\n-                            .span_label(*predicate_span, \"predicate\")\n+                            .span_label(predicate_span, \"predicate\")\n                             .emit();\n                     }\n                 }"}, {"sha": "c9609e69439812477b27d84f3d037abe82167ea0", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=d12412c90fbd974b1cf886e42a95c850d9ee45a1", "patch": "@@ -2140,8 +2140,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // FIXME(compiler-errors): This could be problematic if something has two\n                         // fn-like predicates with different args, but callable types really never\n                         // do that, so it's OK.\n-                        for (predicate, span) in\n-                            std::iter::zip(instantiated.predicates, instantiated.spans)\n+                        for (predicate, span) in instantiated\n                         {\n                             if let ty::PredicateKind::Clause(ty::Clause::Trait(pred)) = predicate.kind().skip_binder()\n                                 && pred.self_ty().peel_refs() == callee_ty"}, {"sha": "372ea30ebd08e4877df583a8672b7b94df1bf2ae", "filename": "compiler/rustc_hir_typeck/src/method/confirm.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs?ref=d12412c90fbd974b1cf886e42a95c850d9ee45a1", "patch": "@@ -19,7 +19,6 @@ use rustc_middle::ty::{InternalSubsts, UserSubsts, UserType};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_trait_selection::traits;\n \n-use std::iter;\n use std::ops::Deref;\n \n struct ConfirmContext<'a, 'tcx> {\n@@ -101,7 +100,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         let filler_substs = rcvr_substs\n             .extend_to(self.tcx, pick.item.def_id, |def, _| self.tcx.mk_param_from_def(def));\n         let illegal_sized_bound = self.predicates_require_illegal_sized_bound(\n-            &self.tcx.predicates_of(pick.item.def_id).instantiate(self.tcx, filler_substs),\n+            self.tcx.predicates_of(pick.item.def_id).instantiate(self.tcx, filler_substs),\n         );\n \n         // Unify the (adjusted) self type with what the method expects.\n@@ -565,7 +564,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n \n     fn predicates_require_illegal_sized_bound(\n         &self,\n-        predicates: &ty::InstantiatedPredicates<'tcx>,\n+        predicates: ty::InstantiatedPredicates<'tcx>,\n     ) -> Option<Span> {\n         let sized_def_id = self.tcx.lang_items().sized_trait()?;\n \n@@ -575,10 +574,11 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n                 ty::PredicateKind::Clause(ty::Clause::Trait(trait_pred))\n                     if trait_pred.def_id() == sized_def_id =>\n                 {\n-                    let span = iter::zip(&predicates.predicates, &predicates.spans)\n+                    let span = predicates\n+                        .iter()\n                         .find_map(\n                             |(p, span)| {\n-                                if *p == obligation.predicate { Some(*span) } else { None }\n+                                if p == obligation.predicate { Some(span) } else { None }\n                             },\n                         )\n                         .unwrap_or(rustc_span::DUMMY_SP);"}, {"sha": "b18cbd404d47f8c03895ef5db759d18f4f722077", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=d12412c90fbd974b1cf886e42a95c850d9ee45a1", "patch": "@@ -330,9 +330,8 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n \n         let Ok(trait_predicates) = self\n             .tcx\n-            .bound_explicit_predicates_of(trait_item_def_id)\n-            .map_bound(|p| p.predicates)\n-            .subst_iter_copied(self.tcx, trait_item_substs)\n+            .explicit_predicates_of(trait_item_def_id)\n+            .instantiate_own(self.tcx, trait_item_substs)\n             .map(|(pred, _)| {\n                 if pred.is_suggestable(self.tcx, false) {\n                     Ok(pred.to_string())"}, {"sha": "801ca6004456827daba7eaf84db464e153ac1387", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=d12412c90fbd974b1cf886e42a95c850d9ee45a1", "patch": "@@ -341,15 +341,9 @@ impl<'tcx> GenericPredicates<'tcx> {\n         &self,\n         tcx: TyCtxt<'tcx>,\n         substs: SubstsRef<'tcx>,\n-    ) -> InstantiatedPredicates<'tcx> {\n-        InstantiatedPredicates {\n-            predicates: self\n-                .predicates\n-                .iter()\n-                .map(|(p, _)| EarlyBinder(*p).subst(tcx, substs))\n-                .collect(),\n-            spans: self.predicates.iter().map(|(_, sp)| *sp).collect(),\n-        }\n+    ) -> impl Iterator<Item = (Predicate<'tcx>, Span)> + DoubleEndedIterator + ExactSizeIterator\n+    {\n+        EarlyBinder(self.predicates).subst_iter_copied(tcx, substs)\n     }\n \n     #[instrument(level = \"debug\", skip(self, tcx))]"}, {"sha": "bf8f45c50a3c951693a1ec418e25b117a85388ec", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=d12412c90fbd974b1cf886e42a95c850d9ee45a1", "patch": "@@ -1252,6 +1252,35 @@ impl<'tcx> InstantiatedPredicates<'tcx> {\n     pub fn is_empty(&self) -> bool {\n         self.predicates.is_empty()\n     }\n+\n+    pub fn iter(&self) -> <&Self as IntoIterator>::IntoIter {\n+        (&self).into_iter()\n+    }\n+}\n+\n+impl<'tcx> IntoIterator for InstantiatedPredicates<'tcx> {\n+    type Item = (Predicate<'tcx>, Span);\n+\n+    type IntoIter = std::iter::Zip<std::vec::IntoIter<Predicate<'tcx>>, std::vec::IntoIter<Span>>;\n+\n+    fn into_iter(self) -> Self::IntoIter {\n+        debug_assert_eq!(self.predicates.len(), self.spans.len());\n+        std::iter::zip(self.predicates, self.spans)\n+    }\n+}\n+\n+impl<'a, 'tcx> IntoIterator for &'a InstantiatedPredicates<'tcx> {\n+    type Item = (Predicate<'tcx>, Span);\n+\n+    type IntoIter = std::iter::Zip<\n+        std::iter::Copied<std::slice::Iter<'a, Predicate<'tcx>>>,\n+        std::iter::Copied<std::slice::Iter<'a, Span>>,\n+    >;\n+\n+    fn into_iter(self) -> Self::IntoIter {\n+        debug_assert_eq!(self.predicates.len(), self.spans.len());\n+        std::iter::zip(self.predicates.iter().copied(), self.spans.iter().copied())\n+    }\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable, Lift)]"}, {"sha": "5dc9e311bf6b1cd30a3ee1639811ed1d007e7030", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=d12412c90fbd974b1cf886e42a95c850d9ee45a1", "patch": "@@ -639,6 +639,13 @@ where\n     }\n }\n \n+impl<'tcx, I: IntoIterator> ExactSizeIterator for SubstIter<'_, 'tcx, I>\n+where\n+    I::IntoIter: ExactSizeIterator,\n+    I::Item: TypeFoldable<'tcx>,\n+{\n+}\n+\n impl<'tcx, 's, I: IntoIterator> EarlyBinder<I>\n where\n     I::Item: Deref,\n@@ -686,6 +693,14 @@ where\n     }\n }\n \n+impl<'tcx, I: IntoIterator> ExactSizeIterator for SubstIterCopied<'_, 'tcx, I>\n+where\n+    I::IntoIter: ExactSizeIterator,\n+    I::Item: Deref,\n+    <I::Item as Deref>::Target: Copy + TypeFoldable<'tcx>,\n+{\n+}\n+\n pub struct EarlyBinderIter<T> {\n     t: T,\n }"}, {"sha": "37d3e12a667637e2726e1934c10810d996349e0f", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=d12412c90fbd974b1cf886e42a95c850d9ee45a1", "patch": "@@ -666,20 +666,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         ty::EarlyBinder(self.item_bounds(def_id))\n     }\n \n-    pub fn bound_predicates_of(\n-        self,\n-        def_id: DefId,\n-    ) -> ty::EarlyBinder<ty::generics::GenericPredicates<'tcx>> {\n-        ty::EarlyBinder(self.predicates_of(def_id))\n-    }\n-\n-    pub fn bound_explicit_predicates_of(\n-        self,\n-        def_id: DefId,\n-    ) -> ty::EarlyBinder<ty::generics::GenericPredicates<'tcx>> {\n-        ty::EarlyBinder(self.explicit_predicates_of(def_id))\n-    }\n-\n     pub fn bound_impl_subject(self, def_id: DefId) -> ty::EarlyBinder<ty::ImplSubject<'tcx>> {\n         ty::EarlyBinder(self.impl_subject(def_id))\n     }"}, {"sha": "0419bb3f724f9ed86454dc73c60dc5db20502ada", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/ambiguity.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs?ref=d12412c90fbd974b1cf886e42a95c850d9ee45a1", "patch": "@@ -82,9 +82,7 @@ pub fn recompute_applicable_impls<'tcx>(\n \n     let predicates =\n         tcx.predicates_of(obligation.cause.body_id.owner.to_def_id()).instantiate_identity(tcx);\n-    for obligation in\n-        elaborate_predicates_with_span(tcx, std::iter::zip(predicates.predicates, predicates.spans))\n-    {\n+    for obligation in elaborate_predicates_with_span(tcx, predicates.into_iter()) {\n         let kind = obligation.predicate.kind();\n         if let ty::PredicateKind::Clause(ty::Clause::Trait(trait_pred)) = kind.skip_binder()\n             && param_env_candidate_may_apply(kind.rebind(trait_pred))"}, {"sha": "6e2341a823b9b82d46edbf403f773eaf003297ba", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=d12412c90fbd974b1cf886e42a95c850d9ee45a1", "patch": "@@ -2070,7 +2070,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n             // Find another predicate whose self-type is equal to the expected self type,\n             // but whose substs don't match.\n-            let other_pred = std::iter::zip(&predicates.predicates, &predicates.spans)\n+            let other_pred = predicates.into_iter()\n                 .enumerate()\n                 .find(|(other_idx, (pred, _))| match pred.kind().skip_binder() {\n                     ty::PredicateKind::Clause(ty::Clause::Trait(trait_pred))\n@@ -2095,7 +2095,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             // If we found one, then it's very likely the cause of the error.\n             if let Some((_, (_, other_pred_span))) = other_pred {\n                 err.span_note(\n-                    *other_pred_span,\n+                    other_pred_span,\n                     \"closure inferred to have a different signature due to this bound\",\n                 );\n             }"}, {"sha": "531aa23d6eac59a1fc7a41176a73631aa9c9e841", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=d12412c90fbd974b1cf886e42a95c850d9ee45a1", "patch": "@@ -115,14 +115,12 @@ pub fn predicates_for_generics<'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n     generic_bounds: ty::InstantiatedPredicates<'tcx>,\n ) -> impl Iterator<Item = PredicateObligation<'tcx>> {\n-    std::iter::zip(generic_bounds.predicates, generic_bounds.spans).enumerate().map(\n-        move |(idx, (predicate, span))| Obligation {\n-            cause: cause(idx, span),\n-            recursion_depth: 0,\n-            param_env,\n-            predicate,\n-        },\n-    )\n+    generic_bounds.into_iter().enumerate().map(move |(idx, (predicate, span))| Obligation {\n+        cause: cause(idx, span),\n+        recursion_depth: 0,\n+        param_env,\n+        predicate,\n+    })\n }\n \n /// Determines whether the type `ty` is known to meet `bound` and"}, {"sha": "9c655aff0bac462df7efaf44335cd465d224cc22", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=d12412c90fbd974b1cf886e42a95c850d9ee45a1", "patch": "@@ -2259,25 +2259,23 @@ fn confirm_impl_trait_in_trait_candidate<'tcx>(\n         tcx.predicates_of(impl_fn_def_id).instantiate(tcx, impl_fn_substs),\n         &mut obligations,\n     );\n-    obligations.extend(std::iter::zip(predicates.predicates, predicates.spans).map(\n-        |(pred, span)| {\n-            Obligation::with_depth(\n-                tcx,\n-                ObligationCause::new(\n-                    obligation.cause.span,\n-                    obligation.cause.body_id,\n-                    if span.is_dummy() {\n-                        super::ItemObligation(impl_fn_def_id)\n-                    } else {\n-                        super::BindingObligation(impl_fn_def_id, span)\n-                    },\n-                ),\n-                obligation.recursion_depth + 1,\n-                obligation.param_env,\n-                pred,\n-            )\n-        },\n-    ));\n+    obligations.extend(predicates.into_iter().map(|(pred, span)| {\n+        Obligation::with_depth(\n+            tcx,\n+            ObligationCause::new(\n+                obligation.cause.span,\n+                obligation.cause.body_id,\n+                if span.is_dummy() {\n+                    super::ItemObligation(impl_fn_def_id)\n+                } else {\n+                    super::BindingObligation(impl_fn_def_id, span)\n+                },\n+            ),\n+            obligation.recursion_depth + 1,\n+            obligation.param_env,\n+            pred,\n+        )\n+    }));\n \n     let ty = normalize_with_depth_to(\n         selcx,\n@@ -2303,10 +2301,10 @@ fn assoc_ty_own_obligations<'cx, 'tcx>(\n     nested: &mut Vec<PredicateObligation<'tcx>>,\n ) {\n     let tcx = selcx.tcx();\n-    let own = tcx\n+    let predicates = tcx\n         .predicates_of(obligation.predicate.def_id)\n         .instantiate_own(tcx, obligation.predicate.substs);\n-    for (predicate, span) in std::iter::zip(own.predicates, own.spans) {\n+    for (predicate, span) in predicates {\n         let normalized = normalize_with_depth_to(\n             selcx,\n             obligation.param_env,"}, {"sha": "d4ac461690c9034460e6a5696d1d6ef38db64b97", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=d12412c90fbd974b1cf886e42a95c850d9ee45a1", "patch": "@@ -185,9 +185,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         })?);\n \n         if let ty::Alias(ty::Projection, ..) = placeholder_self_ty.kind() {\n-            let predicates = tcx.predicates_of(def_id).instantiate_own(tcx, substs).predicates;\n-            debug!(?predicates, \"projection predicates\");\n-            for predicate in predicates {\n+            let predicates = tcx.predicates_of(def_id).instantiate_own(tcx, substs);\n+            for (predicate, _) in predicates {\n                 let normalized = normalize_with_depth_to(\n                     self,\n                     obligation.param_env,"}, {"sha": "95c269d1b78538eace45ef2bdb44d9ae699983c4", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=d12412c90fbd974b1cf886e42a95c850d9ee45a1", "patch": "@@ -2558,12 +2558,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // obligation will normalize to `<$0 as Iterator>::Item = $1` and\n         // `$1: Copy`, so we must ensure the obligations are emitted in\n         // that order.\n-        let predicates = tcx.bound_predicates_of(def_id);\n-        debug!(?predicates);\n-        assert_eq!(predicates.0.parent, None);\n-        let mut obligations = Vec::with_capacity(predicates.0.predicates.len());\n-        for (predicate, span) in predicates.0.predicates {\n-            let span = *span;\n+        let predicates = tcx.predicates_of(def_id);\n+        assert_eq!(predicates.parent, None);\n+        let predicates = predicates.instantiate_own(tcx, substs);\n+        let mut obligations = Vec::with_capacity(predicates.len());\n+        for (predicate, span) in predicates {\n             let cause = cause.clone().derived_cause(parent_trait_pred, |derived| {\n                 ImplDerivedObligation(Box::new(ImplDerivedObligationCause {\n                     derived,\n@@ -2576,7 +2575,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 param_env,\n                 cause.clone(),\n                 recursion_depth,\n-                predicates.rebind(*predicate).subst(tcx, substs),\n+                predicate,\n                 &mut obligations,\n             );\n             obligations.push(Obligation { cause, recursion_depth, param_env, predicate });"}, {"sha": "64daca714c32d1e8b20d6ed3ed8a300727a0bc69", "filename": "compiler/rustc_trait_selection/src/traits/vtable.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs?ref=d12412c90fbd974b1cf886e42a95c850d9ee45a1", "patch": "@@ -261,7 +261,10 @@ fn vtable_entries<'tcx>(\n                     // Note that this method could then never be called, so we\n                     // do not want to try and codegen it, in that case (see #23435).\n                     let predicates = tcx.predicates_of(def_id).instantiate_own(tcx, substs);\n-                    if impossible_predicates(tcx, predicates.predicates) {\n+                    if impossible_predicates(\n+                        tcx,\n+                        predicates.map(|(predicate, _)| predicate).collect(),\n+                    ) {\n                         debug!(\"vtable_entries: predicates do not hold\");\n                         return VtblEntry::Vacant;\n                     }"}, {"sha": "2cebad64c43732f58741dd5e9fe5074eed52eacc", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=d12412c90fbd974b1cf886e42a95c850d9ee45a1", "patch": "@@ -736,7 +736,7 @@ impl<'tcx> WfPredicates<'tcx> {\n         trace!(\"{:#?}\", predicates);\n         debug_assert_eq!(predicates.predicates.len(), origins.len());\n \n-        iter::zip(iter::zip(predicates.predicates, predicates.spans), origins.into_iter().rev())\n+        iter::zip(predicates, origins.into_iter().rev())\n             .map(|((mut pred, span), origin_def_id)| {\n                 let code = if span.is_dummy() {\n                     traits::ItemObligation(origin_def_id)"}, {"sha": "f146de3966ba107865068631c9328f88fe2bd885", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=d12412c90fbd974b1cf886e42a95c850d9ee45a1", "patch": "@@ -7,7 +7,7 @@\n //! `crate::chalk::lowering` (to lower rustc types into Chalk types).\n \n use rustc_middle::traits::ChalkRustInterner as RustInterner;\n-use rustc_middle::ty::{self, AssocKind, EarlyBinder, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable};\n+use rustc_middle::ty::{self, AssocKind, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable};\n use rustc_middle::ty::{InternalSubsts, SubstsRef};\n use rustc_target::abi::{Integer, IntegerType};\n \n@@ -38,13 +38,12 @@ impl<'tcx> RustIrDatabase<'tcx> {\n         def_id: DefId,\n         bound_vars: SubstsRef<'tcx>,\n     ) -> Vec<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>> {\n-        let predicates = self.interner.tcx.predicates_defined_on(def_id).predicates;\n-        predicates\n-            .iter()\n-            .map(|(wc, _)| EarlyBinder(*wc).subst(self.interner.tcx, bound_vars))\n-            .filter_map(|wc| LowerInto::<\n-                    Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>\n-                    >::lower_into(wc, self.interner)).collect()\n+        self.interner\n+            .tcx\n+            .predicates_defined_on(def_id)\n+            .instantiate_own(self.interner.tcx, bound_vars)\n+            .filter_map(|(wc, _)| LowerInto::lower_into(wc, self.interner))\n+            .collect()\n     }\n \n     fn bounds_for<T>(&self, def_id: DefId, bound_vars: SubstsRef<'tcx>) -> Vec<T>"}, {"sha": "f35c5e44882df38db20a578bc83cdfcd9c2f50ae", "filename": "compiler/rustc_traits/src/type_op.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12412c90fbd974b1cf886e42a95c850d9ee45a1/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs?ref=d12412c90fbd974b1cf886e42a95c850d9ee45a1", "patch": "@@ -17,7 +17,6 @@ use rustc_trait_selection::traits::query::type_op::subtype::Subtype;\n use rustc_trait_selection::traits::query::{Fallible, NoSolution};\n use rustc_trait_selection::traits::{Normalized, Obligation, ObligationCause, ObligationCtxt};\n use std::fmt;\n-use std::iter::zip;\n \n pub(crate) fn provide(p: &mut Providers) {\n     *p = Providers {\n@@ -108,9 +107,7 @@ fn relate_mir_and_user_substs<'tcx>(\n     let instantiated_predicates = tcx.predicates_of(def_id).instantiate(tcx, substs);\n \n     debug!(?instantiated_predicates);\n-    for (instantiated_predicate, predicate_span) in\n-        zip(instantiated_predicates.predicates, instantiated_predicates.spans)\n-    {\n+    for (instantiated_predicate, predicate_span) in instantiated_predicates {\n         let span = if span == DUMMY_SP { predicate_span } else { span };\n         let cause = ObligationCause::new(\n             span,"}]}