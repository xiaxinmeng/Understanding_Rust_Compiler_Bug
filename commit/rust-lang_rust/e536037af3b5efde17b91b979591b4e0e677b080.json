{"sha": "e536037af3b5efde17b91b979591b4e0e677b080", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MzYwMzdhZjNiNWVmZGUxN2I5MWI5Nzk1OTFiNGUwZTY3N2IwODA=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-03-21T16:03:45Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-03T16:22:19Z"}, "message": "Deduplicate code in TyKind lint", "tree": {"sha": "17bdfa5c7c630a38d3da8842c970c0e42d8b9d23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17bdfa5c7c630a38d3da8842c970c0e42d8b9d23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e536037af3b5efde17b91b979591b4e0e677b080", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAlyk3bsACgkQaTCGhp1Q\nZjd/WRAAtJaaDCT+CWtxZ1/SI488LiXiAW7RyzHL5eNnNB3L3qu8gxRot3RbQsyq\nbNS7pVZJ5ucxbOzDWLn6CXL93H7zzqp0O209nQEY1ynu6p04pKxokCVHqh3KWwCI\nUoVevDLcMzg5lKczf76LYOImCQssmAhsciklNVvG6Sz/VEbaBRGwCqRqLNd/ZXzD\nqRTbCURw9/OQG35wUqu7IbYX4oyDoV6JEvsV0QzaDZxybxXZFQx4C0QdyDdJwTQn\n4tQpYzvLiONV5ReM1OrGuOnsqQtkAKJXs49ID6yn84OaRUKo+821WNQULHnU89NL\nHfVdq+krrX0AduzETcxGhopl26xge+DxY2YZGSVPwQzYOVNRqDK9Lpp6NQex1Wl4\n9gULTFj755B1bxPQU7wH5eGuFk4KEjipKWZJhjzY2rSsjZ3ZLW2NC8fkANsH6eKz\nzV/v6a94htmUptcM7EWN1+CnPOKS7LkrwYXk65NUi4C/WQfWBQHMHL6IQWxBCoG7\nkdPcz7HP7mkZ44GWlF6LWrPjBf59d0iaaGbdyOOrAdTaLx859K4eb39/lvdFDOw8\nA7NH7qMDbnPis65pV71awmRDqqjD4F6W2QGPB9T6wInW4ldqDzkeQmCMzLLljnmY\ntfBkdjOvixABWSD0GEU1Om3ywTvi8DWeVGVGJ0WtA0Aj6jGvLd0=\n=1but\n-----END PGP SIGNATURE-----", "payload": "tree 17bdfa5c7c630a38d3da8842c970c0e42d8b9d23\nparent 5a788f0ff7c8bbc83dc1cb6db58194ff5759b881\nauthor flip1995 <hello@philkrones.com> 1553184225 +0100\ncommitter flip1995 <hello@philkrones.com> 1554308539 +0200\n\nDeduplicate code in TyKind lint\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e536037af3b5efde17b91b979591b4e0e677b080", "html_url": "https://github.com/rust-lang/rust/commit/e536037af3b5efde17b91b979591b4e0e677b080", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e536037af3b5efde17b91b979591b4e0e677b080/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a788f0ff7c8bbc83dc1cb6db58194ff5759b881", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a788f0ff7c8bbc83dc1cb6db58194ff5759b881", "html_url": "https://github.com/rust-lang/rust/commit/5a788f0ff7c8bbc83dc1cb6db58194ff5759b881"}], "stats": {"total": 78, "additions": 30, "deletions": 48}, "files": [{"sha": "d5f8876d1621f0dbc036c0b05e747c208e9f8ce9", "filename": "src/librustc/lint/internal.rs", "status": "modified", "additions": 30, "deletions": 48, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/e536037af3b5efde17b91b979591b4e0e677b080/src%2Flibrustc%2Flint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e536037af3b5efde17b91b979591b4e0e677b080/src%2Flibrustc%2Flint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Finternal.rs?ref=e536037af3b5efde17b91b979591b4e0e677b080", "patch": "@@ -1,7 +1,7 @@\n //! Some lints that are only useful in the compiler or crates that use compiler internals, such as\n //! Clippy.\n \n-use crate::hir::{def::Def, HirId, Path, QPath, Ty, TyKind};\n+use crate::hir::{HirId, Path, PathSegment, QPath, Ty, TyKind};\n use crate::lint::{\n     EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintContext, LintPass,\n };\n@@ -82,38 +82,19 @@ impl LintPass for TyKindUsage {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TyKindUsage {\n     fn check_path(&mut self, cx: &LateContext<'_, '_>, path: &'tcx Path, _: HirId) {\n-        let segments_iter = path.segments.iter().rev().skip(1).rev();\n-\n-        if let Some(last) = segments_iter.clone().last() {\n-            if last.ident.as_str() == \"TyKind\" {\n-                let path = Path {\n-                    span: path.span.with_hi(last.ident.span.hi()),\n-                    def: path.def,\n-                    segments: segments_iter.cloned().collect(),\n-                };\n-\n-                match last.def {\n-                    Some(Def::Err) => (),\n-                    Some(def)\n-                        if def\n-                            .def_id()\n-                            .match_path(cx.tcx, &[\"rustc\", \"ty\", \"sty\", \"TyKind\"]) =>\n-                    {\n-                        cx.struct_span_lint(\n-                            USAGE_OF_TY_TYKIND,\n-                            path.span,\n-                            \"usage of `ty::TyKind::<kind>`\",\n-                        )\n-                        .span_suggestion(\n-                            path.span,\n-                            \"try using ty::<kind> directly\",\n-                            \"ty\".to_string(),\n-                            Applicability::MaybeIncorrect, // ty maybe needs an import\n-                        )\n-                        .emit();\n-                    }\n-                    _ => (),\n-                }\n+        let segments = path.segments.iter().rev().skip(1).rev();\n+\n+        if let Some(last) = segments.last() {\n+            let span = path.span.with_hi(last.ident.span.hi());\n+            if lint_ty_kind_usage(cx, last) {\n+                cx.struct_span_lint(USAGE_OF_TY_TYKIND, span, \"usage of `ty::TyKind::<kind>`\")\n+                    .span_suggestion(\n+                        span,\n+                        \"try using ty::<kind> directly\",\n+                        \"ty\".to_string(),\n+                        Applicability::MaybeIncorrect, // ty maybe needs an import\n+                    )\n+                    .emit();\n             }\n         }\n     }\n@@ -122,24 +103,25 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TyKindUsage {\n         if let TyKind::Path(qpath) = &ty.node {\n             if let QPath::Resolved(_, path) = qpath {\n                 if let Some(last) = path.segments.iter().last() {\n-                    if last.ident.as_str() == \"TyKind\" {\n-                        if let Some(def) = last.def {\n-                            if def\n-                                .def_id()\n-                                .match_path(cx.tcx, &[\"rustc\", \"ty\", \"sty\", \"TyKind\"])\n-                            {\n-                                cx.struct_span_lint(\n-                                    USAGE_OF_TY_TYKIND,\n-                                    path.span,\n-                                    \"usage of `ty::TyKind`\",\n-                                )\n-                                .help(\"try using `ty::Ty` instead\")\n-                                .emit();\n-                            }\n-                        }\n+                    if lint_ty_kind_usage(cx, last) {\n+                        cx.struct_span_lint(USAGE_OF_TY_TYKIND, path.span, \"usage of `ty::TyKind`\")\n+                            .help(\"try using `ty::Ty` instead\")\n+                            .emit();\n                     }\n                 }\n             }\n         }\n     }\n }\n+\n+fn lint_ty_kind_usage(cx: &LateContext<'_, '_>, segment: &PathSegment) -> bool {\n+    if segment.ident.as_str() == \"TyKind\" {\n+        if let Some(def) = segment.def {\n+            if let Some(did) = def.opt_def_id() {\n+                return did.match_path(cx.tcx, &[\"rustc\", \"ty\", \"sty\", \"TyKind\"]);\n+            }\n+        }\n+    }\n+\n+    false\n+}"}]}