{"sha": "48934c48c624deb47a7ec9e2774ff3ac9cb142ae", "node_id": "C_kwDOAAsO6NoAKDQ4OTM0YzQ4YzYyNGRlYjQ3YTdlYzllMjc3NGZmM2FjOWNiMTQyYWU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-14T16:40:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-14T16:40:04Z"}, "message": "Rollup merge of #108909 - spastorino:new-rpitit-7, r=compiler-errors\n\nFix object safety checks for new RPITITs\n\nThis one goes on top of #108869\n\nr? `@compiler-errors`", "tree": {"sha": "291a0017c957641f123318687eaf65261f67f81f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/291a0017c957641f123318687eaf65261f67f81f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48934c48c624deb47a7ec9e2774ff3ac9cb142ae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkEKNkCRBK7hj4Ov3rIwAAw7EIAF7q1hsfLpPhvWr4ex04DlGl\nk0M9TZXy3Yh/HfRzI7g1z+DGJaxQjcqYyPrQyCm0aiJS3Olo5ih4YC27YGlvEJth\n6L0Lw/Xymcyl8q2CrVrMr+q53oU4VHFJExEdnAthfj79e0eOOrwrhfKQ4O+bVjRf\nuVJgvlN2+VGpe2JdNwYE6yzFB930CW5q/QG730ct7DLIPmX83WXBFE4k8B81og2s\nm4fk/jjxrg3dN/M9vld2OTNmpwtfg2pCZ6qfGH8NcaL3rvkvDv0wxEJwRqVT1gzv\ny3zD8pbOZybJkCVkUfCCetJShMZt8Zy6hJdMsBog6gsIu7jiOLFjxOdEJdFcRrU=\n=4Inj\n-----END PGP SIGNATURE-----\n", "payload": "tree 291a0017c957641f123318687eaf65261f67f81f\nparent 5037836daa5218a843cf692fe39bd595d3c324da\nparent 8b9344acc3cc7f63ce2294c1482d7e386e812b6e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678812004 +0100\ncommitter GitHub <noreply@github.com> 1678812004 +0100\n\nRollup merge of #108909 - spastorino:new-rpitit-7, r=compiler-errors\n\nFix object safety checks for new RPITITs\n\nThis one goes on top of #108869\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48934c48c624deb47a7ec9e2774ff3ac9cb142ae", "html_url": "https://github.com/rust-lang/rust/commit/48934c48c624deb47a7ec9e2774ff3ac9cb142ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48934c48c624deb47a7ec9e2774ff3ac9cb142ae/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5037836daa5218a843cf692fe39bd595d3c324da", "url": "https://api.github.com/repos/rust-lang/rust/commits/5037836daa5218a843cf692fe39bd595d3c324da", "html_url": "https://github.com/rust-lang/rust/commit/5037836daa5218a843cf692fe39bd595d3c324da"}, {"sha": "8b9344acc3cc7f63ce2294c1482d7e386e812b6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b9344acc3cc7f63ce2294c1482d7e386e812b6e", "html_url": "https://github.com/rust-lang/rust/commit/8b9344acc3cc7f63ce2294c1482d7e386e812b6e"}], "stats": {"total": 149, "additions": 134, "deletions": 15}, "files": [{"sha": "f830269b45daedef9a1d45c48f9cbc756a1a99f3", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48934c48c624deb47a7ec9e2774ff3ac9cb142ae/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48934c48c624deb47a7ec9e2774ff3ac9cb142ae/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=48934c48c624deb47a7ec9e2774ff3ac9cb142ae", "patch": "@@ -1440,6 +1440,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             tcx.associated_items(pred.def_id())\n                                 .in_definition_order()\n                                 .filter(|item| item.kind == ty::AssocKind::Type)\n+                                .filter(|item| tcx.opt_rpitit_info(item.def_id).is_none())\n                                 .map(|item| item.def_id),\n                         );\n                     }"}, {"sha": "a5def4151bfda5d2d73ccb75388a4f2080204a05", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48934c48c624deb47a7ec9e2774ff3ac9cb142ae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48934c48c624deb47a7ec9e2774ff3ac9cb142ae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=48934c48c624deb47a7ec9e2774ff3ac9cb142ae", "patch": "@@ -13,7 +13,6 @@ use super::{elaborate_predicates, elaborate_trait_ref};\n use crate::infer::TyCtxtInferExt;\n use crate::traits::query::evaluate_obligation::InferCtxtExt;\n use crate::traits::{self, Obligation, ObligationCause};\n-use hir::def::DefKind;\n use rustc_errors::{DelayDm, FatalError, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -157,6 +156,7 @@ fn object_safety_violations_for_trait(\n                 .in_definition_order()\n                 .filter(|item| item.kind == ty::AssocKind::Type)\n                 .filter(|item| !tcx.generics_of(item.def_id).params.is_empty())\n+                .filter(|item| tcx.opt_rpitit_info(item.def_id).is_none())\n                 .map(|item| {\n                     let ident = item.ident(tcx);\n                     ObjectSafetyViolation::GAT(ident.name, ident.span)\n@@ -854,7 +854,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<TyCtxt<'tcx>>>(\n                     }\n                 }\n                 ty::Alias(ty::Projection, ref data)\n-                    if self.tcx.def_kind(data.def_id) == DefKind::ImplTraitPlaceholder =>\n+                    if self.tcx.is_impl_trait_in_trait(data.def_id) =>\n                 {\n                     // We'll deny these later in their own pass\n                     ControlFlow::Continue(())\n@@ -921,7 +921,7 @@ pub fn contains_illegal_impl_trait_in_trait<'tcx>(\n     ty.skip_binder().walk().find_map(|arg| {\n         if let ty::GenericArgKind::Type(ty) = arg.unpack()\n             && let ty::Alias(ty::Projection, proj) = ty.kind()\n-            && tcx.def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder\n+            && tcx.is_impl_trait_in_trait(proj.def_id)\n         {\n             Some(MethodViolationCode::ReferencesImplTraitInTrait(tcx.def_span(proj.def_id)))\n         } else {"}, {"sha": "90e049a99606f69d20f6256d2d47381d2f34184a", "filename": "tests/ui/async-await/in-trait/object-safety.current.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48934c48c624deb47a7ec9e2774ff3ac9cb142ae/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48934c48c624deb47a7ec9e2774ff3ac9cb142ae/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.current.stderr?ref=48934c48c624deb47a7ec9e2774ff3ac9cb142ae", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/object-safety.rs:3:12\n+  --> $DIR/object-safety.rs:5:12\n    |\n LL | #![feature(async_fn_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^\n@@ -8,13 +8,13 @@ LL | #![feature(async_fn_in_trait)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/object-safety.rs:11:12\n+  --> $DIR/object-safety.rs:13:12\n    |\n LL |     let x: &dyn Foo = todo!();\n    |            ^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/object-safety.rs:7:14\n+  --> $DIR/object-safety.rs:9:14\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...", "previous_filename": "tests/ui/async-await/in-trait/object-safety.stderr"}, {"sha": "90e049a99606f69d20f6256d2d47381d2f34184a", "filename": "tests/ui/async-await/in-trait/object-safety.next.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/48934c48c624deb47a7ec9e2774ff3ac9cb142ae/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48934c48c624deb47a7ec9e2774ff3ac9cb142ae/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.next.stderr?ref=48934c48c624deb47a7ec9e2774ff3ac9cb142ae", "patch": "@@ -0,0 +1,27 @@\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/object-safety.rs:5:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/object-safety.rs:13:12\n+   |\n+LL |     let x: &dyn Foo = todo!();\n+   |            ^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety.rs:9:14\n+   |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n+LL |     async fn foo(&self);\n+   |              ^^^ ...because method `foo` is `async`\n+   = help: consider moving `foo` to another trait\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "f67286a20a24404be9d829f5925dfba5ae85fb2b", "filename": "tests/ui/async-await/in-trait/object-safety.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48934c48c624deb47a7ec9e2774ff3ac9cb142ae/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48934c48c624deb47a7ec9e2774ff3ac9cb142ae/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.rs?ref=48934c48c624deb47a7ec9e2774ff3ac9cb142ae", "patch": "@@ -1,4 +1,6 @@\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n //~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes"}, {"sha": "7aa7880e258839df79df9fa5047e0db92de10cc6", "filename": "tests/ui/impl-trait/in-trait/issue-102140.current.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48934c48c624deb47a7ec9e2774ff3ac9cb142ae/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48934c48c624deb47a7ec9e2774ff3ac9cb142ae/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.current.stderr?ref=48934c48c624deb47a7ec9e2774ff3ac9cb142ae", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `&dyn MyTrait: MyTrait` is not satisfied\n-  --> $DIR/issue-102140.rs:23:22\n+  --> $DIR/issue-102140.rs:26:22\n    |\n LL |         MyTrait::foo(&self)\n    |         ------------ ^^^^^ the trait `MyTrait` is not implemented for `&dyn MyTrait`\n@@ -13,15 +13,15 @@ LL +         MyTrait::foo(self)\n    |\n \n error[E0277]: the trait bound `&dyn MyTrait: MyTrait` is not satisfied\n-  --> $DIR/issue-102140.rs:23:9\n+  --> $DIR/issue-102140.rs:26:9\n    |\n LL |         MyTrait::foo(&self)\n    |         ^^^^^^^^^^^^^^^^^^^ the trait `MyTrait` is not implemented for `&dyn MyTrait`\n    |\n    = help: the trait `MyTrait` is implemented for `Outer`\n \n error[E0277]: the trait bound `&dyn MyTrait: MyTrait` is not satisfied\n-  --> $DIR/issue-102140.rs:23:9\n+  --> $DIR/issue-102140.rs:26:9\n    |\n LL |         MyTrait::foo(&self)\n    |         ^^^^^^^^^^^^ the trait `MyTrait` is not implemented for `&dyn MyTrait`", "previous_filename": "tests/ui/impl-trait/in-trait/issue-102140.stderr"}, {"sha": "7aa7880e258839df79df9fa5047e0db92de10cc6", "filename": "tests/ui/impl-trait/in-trait/issue-102140.next.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/48934c48c624deb47a7ec9e2774ff3ac9cb142ae/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48934c48c624deb47a7ec9e2774ff3ac9cb142ae/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.next.stderr?ref=48934c48c624deb47a7ec9e2774ff3ac9cb142ae", "patch": "@@ -0,0 +1,33 @@\n+error[E0277]: the trait bound `&dyn MyTrait: MyTrait` is not satisfied\n+  --> $DIR/issue-102140.rs:26:22\n+   |\n+LL |         MyTrait::foo(&self)\n+   |         ------------ ^^^^^ the trait `MyTrait` is not implemented for `&dyn MyTrait`\n+   |         |\n+   |         required by a bound introduced by this call\n+   |\n+help: consider removing the leading `&`-reference\n+   |\n+LL -         MyTrait::foo(&self)\n+LL +         MyTrait::foo(self)\n+   |\n+\n+error[E0277]: the trait bound `&dyn MyTrait: MyTrait` is not satisfied\n+  --> $DIR/issue-102140.rs:26:9\n+   |\n+LL |         MyTrait::foo(&self)\n+   |         ^^^^^^^^^^^^^^^^^^^ the trait `MyTrait` is not implemented for `&dyn MyTrait`\n+   |\n+   = help: the trait `MyTrait` is implemented for `Outer`\n+\n+error[E0277]: the trait bound `&dyn MyTrait: MyTrait` is not satisfied\n+  --> $DIR/issue-102140.rs:26:9\n+   |\n+LL |         MyTrait::foo(&self)\n+   |         ^^^^^^^^^^^^ the trait `MyTrait` is not implemented for `&dyn MyTrait`\n+   |\n+   = help: the trait `MyTrait` is implemented for `Outer`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "4dcac4f5b0eac053d885a1656dd031e17f45a9ef", "filename": "tests/ui/impl-trait/in-trait/issue-102140.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48934c48c624deb47a7ec9e2774ff3ac9cb142ae/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48934c48c624deb47a7ec9e2774ff3ac9cb142ae/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.rs?ref=48934c48c624deb47a7ec9e2774ff3ac9cb142ae", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]\n "}, {"sha": "b7f2b019a7765aaafd7883f60283e1ea0347988e", "filename": "tests/ui/impl-trait/in-trait/object-safety.current.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/48934c48c624deb47a7ec9e2774ff3ac9cb142ae/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48934c48c624deb47a7ec9e2774ff3ac9cb142ae/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.current.stderr?ref=48934c48c624deb47a7ec9e2774ff3ac9cb142ae", "patch": "@@ -1,11 +1,11 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/object-safety.rs:17:33\n+  --> $DIR/object-safety.rs:20:33\n    |\n LL |     let i = Box::new(42_u32) as Box<dyn Foo>;\n    |                                 ^^^^^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/object-safety.rs:7:22\n+  --> $DIR/object-safety.rs:10:22\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n@@ -14,13 +14,13 @@ LL |     fn baz(&self) -> impl Debug;\n    = help: consider moving `baz` to another trait\n \n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/object-safety.rs:20:13\n+  --> $DIR/object-safety.rs:23:13\n    |\n LL |     let s = i.baz();\n    |             ^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/object-safety.rs:7:22\n+  --> $DIR/object-safety.rs:10:22\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n@@ -29,13 +29,13 @@ LL |     fn baz(&self) -> impl Debug;\n    = help: consider moving `baz` to another trait\n \n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/object-safety.rs:17:13\n+  --> $DIR/object-safety.rs:20:13\n    |\n LL |     let i = Box::new(42_u32) as Box<dyn Foo>;\n    |             ^^^^^^^^^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/object-safety.rs:7:22\n+  --> $DIR/object-safety.rs:10:22\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...", "previous_filename": "tests/ui/impl-trait/in-trait/object-safety.stderr"}, {"sha": "b7f2b019a7765aaafd7883f60283e1ea0347988e", "filename": "tests/ui/impl-trait/in-trait/object-safety.next.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/48934c48c624deb47a7ec9e2774ff3ac9cb142ae/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48934c48c624deb47a7ec9e2774ff3ac9cb142ae/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.next.stderr?ref=48934c48c624deb47a7ec9e2774ff3ac9cb142ae", "patch": "@@ -0,0 +1,50 @@\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/object-safety.rs:20:33\n+   |\n+LL |     let i = Box::new(42_u32) as Box<dyn Foo>;\n+   |                                 ^^^^^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety.rs:10:22\n+   |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n+LL |     fn baz(&self) -> impl Debug;\n+   |                      ^^^^^^^^^^ ...because method `baz` references an `impl Trait` type in its return type\n+   = help: consider moving `baz` to another trait\n+\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/object-safety.rs:23:13\n+   |\n+LL |     let s = i.baz();\n+   |             ^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety.rs:10:22\n+   |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n+LL |     fn baz(&self) -> impl Debug;\n+   |                      ^^^^^^^^^^ ...because method `baz` references an `impl Trait` type in its return type\n+   = help: consider moving `baz` to another trait\n+\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/object-safety.rs:20:13\n+   |\n+LL |     let i = Box::new(42_u32) as Box<dyn Foo>;\n+   |             ^^^^^^^^^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety.rs:10:22\n+   |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n+LL |     fn baz(&self) -> impl Debug;\n+   |                      ^^^^^^^^^^ ...because method `baz` references an `impl Trait` type in its return type\n+   = help: consider moving `baz` to another trait\n+   = note: required for `Box<u32>` to implement `CoerceUnsized<Box<dyn Foo>>`\n+   = note: required by cast to type `Box<dyn Foo>`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "016a0aaae4b6e4b4cd0ec18521f613d4bec8f16a", "filename": "tests/ui/impl-trait/in-trait/object-safety.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48934c48c624deb47a7ec9e2774ff3ac9cb142ae/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48934c48c624deb47a7ec9e2774ff3ac9cb142ae/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.rs?ref=48934c48c624deb47a7ec9e2774ff3ac9cb142ae", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]\n "}]}