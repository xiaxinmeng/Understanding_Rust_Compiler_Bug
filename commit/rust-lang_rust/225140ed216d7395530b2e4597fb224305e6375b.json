{"sha": "225140ed216d7395530b2e4597fb224305e6375b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNTE0MGVkMjE2ZDczOTU1MzBiMmU0NTk3ZmIyMjQzMDVlNjM3NWI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-11-29T23:02:06Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-11-29T23:02:06Z"}, "message": "Optimize local linkchecker program\n\nI noticed on a [recent build][1] that the linkchecker stage of CI took a\nwhopping 15 minutes of CI time for something that should be near\ninstantaneous. Some local profiling showed some very hot functions and\nclones which were pretty easy to remove, and now instead of running in\nminutes locally it runs in seconds.\n\n[1]: https://ci.appveyor.com/project/rust-lang/rust/build/job/kptifw1kb1nm4xuu", "tree": {"sha": "e477f46d773f18b60179dee60e84db413f44ba57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e477f46d773f18b60179dee60e84db413f44ba57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/225140ed216d7395530b2e4597fb224305e6375b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/225140ed216d7395530b2e4597fb224305e6375b", "html_url": "https://github.com/rust-lang/rust/commit/225140ed216d7395530b2e4597fb224305e6375b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/225140ed216d7395530b2e4597fb224305e6375b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e90a12a8a95933604a8b609197fce61bb24a38c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e90a12a8a95933604a8b609197fce61bb24a38c", "html_url": "https://github.com/rust-lang/rust/commit/3e90a12a8a95933604a8b609197fce61bb24a38c"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "11c83819eaa93527b6152d0fd7c061195c5c1dfa", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/225140ed216d7395530b2e4597fb224305e6375b/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/225140ed216d7395530b2e4597fb224305e6375b/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=225140ed216d7395530b2e4597fb224305e6375b", "patch": "@@ -24,12 +24,12 @@\n //! A few whitelisted exceptions are allowed as there's known bugs in rustdoc,\n //! but this should catch the majority of \"broken link\" cases.\n \n+use std::collections::hash_map::Entry;\n+use std::collections::{HashMap, HashSet};\n use std::env;\n-use std::fs::File;\n-use std::io::prelude::*;\n+use std::fs;\n use std::path::{Path, PathBuf, Component};\n-use std::collections::{HashMap, HashSet};\n-use std::collections::hash_map::Entry;\n+use std::rc::Rc;\n \n use Redirect::*;\n \n@@ -63,7 +63,7 @@ enum Redirect {\n }\n \n struct FileEntry {\n-    source: String,\n+    source: Rc<String>,\n     ids: HashSet<String>,\n }\n \n@@ -113,7 +113,7 @@ fn walk(cache: &mut Cache, root: &Path, dir: &Path, errors: &mut bool) {\n                 let entry = cache.get_mut(&pretty_path).unwrap();\n                 // we don't need the source anymore,\n                 // so drop to reduce memory-usage\n-                entry.source = String::new();\n+                entry.source = Rc::new(String::new());\n             }\n         }\n     }\n@@ -287,24 +287,24 @@ fn load_file(cache: &mut Cache,\n              root: &Path,\n              file: &Path,\n              redirect: Redirect)\n-             -> Result<(PathBuf, String), LoadError> {\n-    let mut contents = String::new();\n+             -> Result<(PathBuf, Rc<String>), LoadError> {\n     let pretty_file = PathBuf::from(file.strip_prefix(root).unwrap_or(&file));\n \n-    let maybe_redirect = match cache.entry(pretty_file.clone()) {\n+    let (maybe_redirect, contents) = match cache.entry(pretty_file.clone()) {\n         Entry::Occupied(entry) => {\n-            contents = entry.get().source.clone();\n-            None\n+            (None, entry.get().source.clone())\n         }\n         Entry::Vacant(entry) => {\n-            let mut fp = File::open(file).map_err(|err| {\n-                if let FromRedirect(true) = redirect {\n-                    LoadError::BrokenRedirect(file.to_path_buf(), err)\n-                } else {\n-                    LoadError::IOError(err)\n+            let contents = match fs::read_to_string(file) {\n+                Ok(s) => Rc::new(s),\n+                Err(err) => {\n+                    return Err(if let FromRedirect(true) = redirect {\n+                        LoadError::BrokenRedirect(file.to_path_buf(), err)\n+                    } else {\n+                        LoadError::IOError(err)\n+                    })\n                 }\n-            })?;\n-            fp.read_to_string(&mut contents).map_err(|err| LoadError::IOError(err))?;\n+            };\n \n             let maybe = maybe_redirect(&contents);\n             if maybe.is_some() {\n@@ -317,7 +317,7 @@ fn load_file(cache: &mut Cache,\n                     ids: HashSet::new(),\n                 });\n             }\n-            maybe\n+            (maybe, contents)\n         }\n     };\n     match maybe_redirect.map(|url| file.parent().unwrap().join(url)) {"}]}