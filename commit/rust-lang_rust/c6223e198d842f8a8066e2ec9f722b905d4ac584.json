{"sha": "c6223e198d842f8a8066e2ec9f722b905d4ac584", "node_id": "C_kwDOAAsO6NoAKGM2MjIzZTE5OGQ4NDJmOGE4MDY2ZTJlYzlmNzIyYjkwNWQ0YWM1ODQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-14T05:58:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-14T05:58:39Z"}, "message": "Rollup merge of #109800 - bryangarza:safe-transmute-improved-errors, r=compiler-errors\n\nImprove safe transmute error reporting\n\nThis patch updates the error reporting when Safe Transmute is not possible between 2 types by including the reason.\n\nAlso, fix some small bugs that occur when computing the `Answer` for transmutability.", "tree": {"sha": "eebf8e3600c106c75c14c5f7695e6ea17fd4949c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eebf8e3600c106c75c14c5f7695e6ea17fd4949c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6223e198d842f8a8066e2ec9f722b905d4ac584", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkOOuPCRBK7hj4Ov3rIwAAKxsIAFQgKjN/kD3THXBvg7gEPLs5\n/M4+K+rJDRmE2l1KDpwXG2/XRNxfLHGcwTlx7A9ezmnNEBzVGpFPwhnzuQJapvnM\nTn37WvscGyqLFRwoj5FLE/gNGwlOFXdKn9S/X6VzBYOgHuab105Ue0iP/KuYqidZ\nBHCnWWIwLsuCZObC5B55qT4M9mwDRiYEysSm+IMoBWNgg0LwzvnAfT3Bo4w8jz4p\nVil5rDAVMgMNdDjyMFHQxdmgV4p2H3dzSxC+d4MLxoS+AN6fT07h6TAzwN32EjKt\nJmdSb2hIz3+eiYQ2Lp21hbLvsX0U+THQ8plED1OtfnQiHt+Eucy5Pz43y2qGB1g=\n=TKKV\n-----END PGP SIGNATURE-----\n", "payload": "tree eebf8e3600c106c75c14c5f7695e6ea17fd4949c\nparent ec08676716631fc7ccefb58141f891bd86cd175d\nparent 36febe1f4da6ea7e066983786171d5f85f7473d9\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681451919 +0200\ncommitter GitHub <noreply@github.com> 1681451919 +0200\n\nRollup merge of #109800 - bryangarza:safe-transmute-improved-errors, r=compiler-errors\n\nImprove safe transmute error reporting\n\nThis patch updates the error reporting when Safe Transmute is not possible between 2 types by including the reason.\n\nAlso, fix some small bugs that occur when computing the `Answer` for transmutability.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6223e198d842f8a8066e2ec9f722b905d4ac584", "html_url": "https://github.com/rust-lang/rust/commit/c6223e198d842f8a8066e2ec9f722b905d4ac584", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6223e198d842f8a8066e2ec9f722b905d4ac584/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec08676716631fc7ccefb58141f891bd86cd175d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec08676716631fc7ccefb58141f891bd86cd175d", "html_url": "https://github.com/rust-lang/rust/commit/ec08676716631fc7ccefb58141f891bd86cd175d"}, {"sha": "36febe1f4da6ea7e066983786171d5f85f7473d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/36febe1f4da6ea7e066983786171d5f85f7473d9", "html_url": "https://github.com/rust-lang/rust/commit/36febe1f4da6ea7e066983786171d5f85f7473d9"}], "stats": {"total": 1088, "additions": 495, "deletions": 593}, "files": [{"sha": "1b741b7302b67f1a1b98c03e039f11362722832a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 104, "deletions": 24, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -673,6 +673,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             return;\n                         }\n                         let trait_ref = trait_predicate.to_poly_trait_ref();\n+\n                         let (post_message, pre_message, type_def) = self\n                             .get_parent_trait_ref(obligation.cause.code())\n                             .map(|(t, s)| {\n@@ -712,33 +713,45 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             (message, note, append_const_msg)\n                         };\n \n-                        let mut err = struct_span_err!(\n-                            self.tcx.sess,\n-                            span,\n-                            E0277,\n-                            \"{}\",\n-                            message\n-                                .and_then(|cannot_do_this| {\n-                                    match (predicate_is_const, append_const_msg) {\n-                                        // do nothing if predicate is not const\n-                                        (false, _) => Some(cannot_do_this),\n-                                        // suggested using default post message\n-                                        (true, Some(None)) => {\n-                                            Some(format!(\"{cannot_do_this} in const contexts\"))\n-                                        }\n-                                        // overridden post message\n-                                        (true, Some(Some(post_message))) => {\n-                                            Some(format!(\"{cannot_do_this}{post_message}\"))\n-                                        }\n-                                        // fallback to generic message\n-                                        (true, None) => None,\n+                        let err_msg = message\n+                            .and_then(|cannot_do_this| {\n+                                match (predicate_is_const, append_const_msg) {\n+                                    // do nothing if predicate is not const\n+                                    (false, _) => Some(cannot_do_this),\n+                                    // suggested using default post message\n+                                    (true, Some(None)) => {\n+                                        Some(format!(\"{cannot_do_this} in const contexts\"))\n+                                    }\n+                                    // overridden post message\n+                                    (true, Some(Some(post_message))) => {\n+                                        Some(format!(\"{cannot_do_this}{post_message}\"))\n                                     }\n-                                })\n-                                .unwrap_or_else(|| format!(\n+                                    // fallback to generic message\n+                                    (true, None) => None,\n+                                }\n+                            })\n+                            .unwrap_or_else(|| {\n+                                format!(\n                                     \"the trait bound `{}` is not satisfied{}\",\n                                     trait_predicate, post_message,\n-                                ))\n-                        );\n+                                )\n+                            });\n+\n+                        let (err_msg, safe_transmute_explanation) = if Some(trait_ref.def_id())\n+                            == self.tcx.lang_items().transmute_trait()\n+                        {\n+                            // Recompute the safe transmute reason and use that for the error reporting\n+                            self.get_safe_transmute_error_and_reason(\n+                                trait_predicate,\n+                                obligation.clone(),\n+                                trait_ref,\n+                                span,\n+                            )\n+                        } else {\n+                            (err_msg, None)\n+                        };\n+\n+                        let mut err = struct_span_err!(self.tcx.sess, span, E0277, \"{}\", err_msg);\n \n                         if is_try_conversion && let Some(ret_span) = self.return_type_span(&obligation) {\n                             err.span_label(\n@@ -828,6 +841,8 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 // at the type param with a label to suggest constraining it.\n                                 err.help(&explanation);\n                             }\n+                        } else if let Some(custom_explanation) = safe_transmute_explanation {\n+                            err.span_label(span, custom_explanation);\n                         } else {\n                             err.span_label(span, explanation);\n                         }\n@@ -1611,6 +1626,14 @@ trait InferCtxtPrivExt<'tcx> {\n         obligated_types: &mut Vec<Ty<'tcx>>,\n         cause_code: &ObligationCauseCode<'tcx>,\n     ) -> bool;\n+\n+    fn get_safe_transmute_error_and_reason(\n+        &self,\n+        trait_predicate: ty::Binder<'tcx, ty::TraitPredicate<'tcx>>,\n+        obligation: Obligation<'tcx, ty::Predicate<'tcx>>,\n+        trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n+        span: Span,\n+    ) -> (String, Option<String>);\n }\n \n impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n@@ -2895,6 +2918,63 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         }\n         false\n     }\n+\n+    fn get_safe_transmute_error_and_reason(\n+        &self,\n+        trait_predicate: ty::Binder<'tcx, ty::TraitPredicate<'tcx>>,\n+        obligation: Obligation<'tcx, ty::Predicate<'tcx>>,\n+        trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n+        span: Span,\n+    ) -> (String, Option<String>) {\n+        let src_and_dst = trait_predicate.map_bound(|p| rustc_transmute::Types {\n+            dst: p.trait_ref.substs.type_at(0),\n+            src: p.trait_ref.substs.type_at(1),\n+        });\n+        let scope = trait_ref.skip_binder().substs.type_at(2);\n+        let Some(assume) =\n+            rustc_transmute::Assume::from_const(self.infcx.tcx, obligation.param_env, trait_ref.skip_binder().substs.const_at(3)) else {\n+                span_bug!(span, \"Unable to construct rustc_transmute::Assume where it was previously possible\");\n+            };\n+        match rustc_transmute::TransmuteTypeEnv::new(self.infcx).is_transmutable(\n+            obligation.cause,\n+            src_and_dst,\n+            scope,\n+            assume,\n+        ) {\n+            rustc_transmute::Answer::No(reason) => {\n+                let dst = trait_ref.skip_binder().substs.type_at(0);\n+                let src = trait_ref.skip_binder().substs.type_at(1);\n+                let custom_err_msg = format!(\"`{src}` cannot be safely transmuted into `{dst}` in the defining scope of `{scope}`\").to_string();\n+                let reason_msg = match reason {\n+                    rustc_transmute::Reason::SrcIsUnspecified => {\n+                        format!(\"`{src}` does not have a well-specified layout\").to_string()\n+                    }\n+                    rustc_transmute::Reason::DstIsUnspecified => {\n+                        format!(\"`{dst}` does not have a well-specified layout\").to_string()\n+                    }\n+                    rustc_transmute::Reason::DstIsBitIncompatible => {\n+                        format!(\"At least one value of `{src}` isn't a bit-valid value of `{dst}`\")\n+                            .to_string()\n+                    }\n+                    rustc_transmute::Reason::DstIsPrivate => format!(\n+                        \"`{dst}` is or contains a type or field that is not visible in that scope\"\n+                    )\n+                    .to_string(),\n+                    // FIXME(bryangarza): Include the number of bytes of src and dst\n+                    rustc_transmute::Reason::DstIsTooBig => {\n+                        format!(\"The size of `{src}` is smaller than the size of `{dst}`\")\n+                    }\n+                };\n+                (custom_err_msg, Some(reason_msg))\n+            }\n+            // Should never get a Yes at this point! We already ran it before, and did not get a Yes.\n+            rustc_transmute::Answer::Yes => span_bug!(\n+                span,\n+                \"Inconsistent rustc_transmute::is_transmutable(...) result, got Yes\",\n+            ),\n+            _ => span_bug!(span, \"Unsupported rustc_transmute::Reason variant\"),\n+        }\n+    }\n }\n \n /// Crude way of getting back an `Expr` from a `Span`."}, {"sha": "2a89494c80b0415ab85762a109a7927207f222d1", "filename": "compiler/rustc_transmute/src/layout/tree.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -167,31 +167,31 @@ where\n     }\n }\n \n-#[derive(Debug, Copy, Clone)]\n-pub(crate) enum Err {\n-    /// The layout of the type is unspecified.\n-    Unspecified,\n-    /// This error will be surfaced elsewhere by rustc, so don't surface it.\n-    Unknown,\n-}\n-\n #[cfg(feature = \"rustc\")]\n pub(crate) mod rustc {\n-    use super::{Err, Tree};\n+    use super::Tree;\n     use crate::layout::rustc::{Def, Ref};\n \n-    use rustc_middle::ty;\n     use rustc_middle::ty::layout::LayoutError;\n     use rustc_middle::ty::util::Discr;\n     use rustc_middle::ty::AdtDef;\n     use rustc_middle::ty::ParamEnv;\n     use rustc_middle::ty::SubstsRef;\n-    use rustc_middle::ty::Ty;\n-    use rustc_middle::ty::TyCtxt;\n     use rustc_middle::ty::VariantDef;\n+    use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitableExt};\n+    use rustc_span::ErrorGuaranteed;\n     use rustc_target::abi::Align;\n     use std::alloc;\n \n+    #[derive(Debug, Copy, Clone)]\n+    pub(crate) enum Err {\n+        /// The layout of the type is unspecified.\n+        Unspecified,\n+        /// This error will be surfaced elsewhere by rustc, so don't surface it.\n+        Unknown,\n+        TypeError(ErrorGuaranteed),\n+    }\n+\n     impl<'tcx> From<LayoutError<'tcx>> for Err {\n         fn from(err: LayoutError<'tcx>) -> Self {\n             match err {\n@@ -261,6 +261,10 @@ pub(crate) mod rustc {\n             use rustc_middle::ty::UintTy::*;\n             use rustc_target::abi::HasDataLayout;\n \n+            if let Err(e) = ty.error_reported() {\n+                return Err(Err::TypeError(e));\n+            }\n+\n             let target = tcx.data_layout();\n \n             match ty.kind() {"}, {"sha": "2e2fb90e71c1a18838a2c06e87fbc32f03d071a0", "filename": "compiler/rustc_transmute/src/maybe_transmutable/mod.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fmod.rs?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -56,7 +56,7 @@ where\n #[cfg(feature = \"rustc\")]\n mod rustc {\n     use super::*;\n-    use crate::layout::tree::Err;\n+    use crate::layout::tree::rustc::Err;\n \n     use rustc_middle::ty::Ty;\n     use rustc_middle::ty::TyCtxt;\n@@ -71,19 +71,20 @@ mod rustc {\n                 // representations. If these conversions fail, conclude that the transmutation is\n                 // unacceptable; the layouts of both the source and destination types must be\n                 // well-defined.\n-                let src = Tree::from_ty(src, context).map_err(|err| match err {\n-                    // Answer `Yes` here, because \"Unknown Type\" will already be reported by\n-                    // rustc. No need to spam the user with more errors.\n-                    Err::Unknown => Answer::Yes,\n-                    Err::Unspecified => Answer::No(Reason::SrcIsUnspecified),\n-                })?;\n+                let src = Tree::from_ty(src, context);\n+                let dst = Tree::from_ty(dst, context);\n \n-                let dst = Tree::from_ty(dst, context).map_err(|err| match err {\n-                    Err::Unknown => Answer::Yes,\n-                    Err::Unspecified => Answer::No(Reason::DstIsUnspecified),\n-                })?;\n-\n-                Ok((src, dst))\n+                match (src, dst) {\n+                    // Answer `Yes` here, because 'unknown layout' and type errors will already\n+                    // be reported by rustc. No need to spam the user with more errors.\n+                    (Err(Err::TypeError(_)), _) => Err(Answer::Yes),\n+                    (_, Err(Err::TypeError(_))) => Err(Answer::Yes),\n+                    (Err(Err::Unknown), _) => Err(Answer::Yes),\n+                    (_, Err(Err::Unknown)) => Err(Answer::Yes),\n+                    (Err(Err::Unspecified), _) => Err(Answer::No(Reason::SrcIsUnspecified)),\n+                    (_, Err(Err::Unspecified)) => Err(Answer::No(Reason::DstIsUnspecified)),\n+                    (Ok(src), Ok(dst)) => Ok((src, dst)),\n+                }\n             });\n \n             match query_or_answer {"}, {"sha": "a8675f4ae37d8a2703dbf5ccd414af24c415ff4d", "filename": "compiler/rustc_transmute/src/maybe_transmutable/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Ftests.rs?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -1,6 +1,6 @@\n use super::query_context::test::{Def, UltraMinimal};\n use crate::maybe_transmutable::MaybeTransmutableQuery;\n-use crate::{layout, Answer, Reason, Set};\n+use crate::{layout, Answer, Reason};\n use itertools::Itertools;\n \n mod bool {\n@@ -48,9 +48,9 @@ mod bool {\n \n         let into_set = |alts: Vec<_>| {\n             #[cfg(feature = \"rustc\")]\n-            let mut set = Set::default();\n+            let mut set = crate::Set::default();\n             #[cfg(not(feature = \"rustc\"))]\n-            let mut set = Set::new();\n+            let mut set = std::collections::HashSet::new();\n             set.extend(alts);\n             set\n         };"}, {"sha": "b53a330fa560b4e77f3fe32212cbb3768a87c5a6", "filename": "library/core/src/mem/transmutability.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/library%2Fcore%2Fsrc%2Fmem%2Ftransmutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/library%2Fcore%2Fsrc%2Fmem%2Ftransmutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Ftransmutability.rs?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -5,10 +5,6 @@\n /// notwithstanding whatever safety checks you have asked the compiler to [`Assume`] are satisfied.\n #[unstable(feature = \"transmutability\", issue = \"99571\")]\n #[lang = \"transmute_trait\"]\n-#[rustc_on_unimplemented(\n-    message = \"`{Src}` cannot be safely transmuted into `{Self}` in the defining scope of `{Context}`.\",\n-    label = \"`{Src}` cannot be safely transmuted into `{Self}` in the defining scope of `{Context}`.\"\n-)]\n pub unsafe trait BikeshedIntrinsicFrom<Src, Context, const ASSUME: Assume = { Assume::NOTHING }>\n where\n     Src: ?Sized,"}, {"sha": "1a0a5d3ae9462c2444ade582dbed183760a7cada", "filename": "tests/ui/transmutability/arrays/should_require_well_defined_layout.stderr", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Farrays%2Fshould_require_well_defined_layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Farrays%2Fshould_require_well_defined_layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Farrays%2Fshould_require_well_defined_layout.stderr?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `[String; 0]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+error[E0277]: `[String; 0]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:26:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ `[String; 0]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+   |                                                    ^^ `[String; 0]` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<[String; 0], assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -20,13 +19,12 @@ LL | |                 .and(Assume::VALIDITY)\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `u128` cannot be safely transmuted into `[String; 0]` in the defining scope of `assert::Context`.\n+error[E0277]: `u128` cannot be safely transmuted into `[String; 0]` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:27:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `[String; 0]` in the defining scope of `assert::Context`.\n+   |                                               ^^^^^^^^^ `[String; 0]` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `[String; 0]`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -42,13 +40,12 @@ LL | |                 .and(Assume::VALIDITY)\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `[String; 1]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+error[E0277]: `[String; 1]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:32:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ `[String; 1]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+   |                                                    ^^ `[String; 1]` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<[String; 1], assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -64,13 +61,12 @@ LL | |                 .and(Assume::VALIDITY)\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `u128` cannot be safely transmuted into `[String; 1]` in the defining scope of `assert::Context`.\n+error[E0277]: `u128` cannot be safely transmuted into `[String; 1]` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:33:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `[String; 1]` in the defining scope of `assert::Context`.\n+   |                                               ^^^^^^^^^ `[String; 1]` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `[String; 1]`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -86,13 +82,12 @@ LL | |                 .and(Assume::VALIDITY)\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `[String; 2]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+error[E0277]: `[String; 2]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:38:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ `[String; 2]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+   |                                                    ^^ `[String; 2]` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<[String; 2], assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -108,13 +103,12 @@ LL | |                 .and(Assume::VALIDITY)\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `u128` cannot be safely transmuted into `[String; 2]` in the defining scope of `assert::Context`.\n+error[E0277]: `u128` cannot be safely transmuted into `[String; 2]` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:39:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `[String; 2]` in the defining scope of `assert::Context`.\n+   |                                               ^^^^^^^^^ `[String; 2]` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `[String; 2]`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |"}, {"sha": "9877a6606a9fa5530335e753e86962b6718d4d5b", "filename": "tests/ui/transmutability/enums/repr/primitive_reprs_should_have_correct_length.stderr", "status": "modified", "additions": 40, "deletions": 60, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fprimitive_reprs_should_have_correct_length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fprimitive_reprs_should_have_correct_length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fprimitive_reprs_should_have_correct_length.stderr?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `Zst` cannot be safely transmuted into `V0i8` in the defining scope of `n8::Context`.\n+error[E0277]: `Zst` cannot be safely transmuted into `V0i8` in the defining scope of `n8::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:48:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ `Zst` cannot be safely transmuted into `V0i8` in the defining scope of `n8::Context`.\n+   |                                            ^^^^^^^ The size of `Zst` is smaller than the size of `V0i8`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Zst, n8::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0i8`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -21,13 +20,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `V0i8` cannot be safely transmuted into `u16` in the defining scope of `n8::Context`.\n+error[E0277]: `V0i8` cannot be safely transmuted into `u16` in the defining scope of `n8::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:50:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ `V0i8` cannot be safely transmuted into `u16` in the defining scope of `n8::Context`.\n+   |                                            ^^^^^^ The size of `V0i8` is smaller than the size of `u16`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0i8, n8::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -44,13 +42,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `Zst` cannot be safely transmuted into `V0u8` in the defining scope of `n8::Context`.\n+error[E0277]: `Zst` cannot be safely transmuted into `V0u8` in the defining scope of `n8::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:56:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ `Zst` cannot be safely transmuted into `V0u8` in the defining scope of `n8::Context`.\n+   |                                            ^^^^^^^ The size of `Zst` is smaller than the size of `V0u8`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Zst, n8::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0u8`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -67,13 +64,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `V0u8` cannot be safely transmuted into `u16` in the defining scope of `n8::Context`.\n+error[E0277]: `V0u8` cannot be safely transmuted into `u16` in the defining scope of `n8::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:58:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ `V0u8` cannot be safely transmuted into `u16` in the defining scope of `n8::Context`.\n+   |                                            ^^^^^^ The size of `V0u8` is smaller than the size of `u16`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0u8, n8::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -90,13 +86,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `V0i16` in the defining scope of `n16::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `V0i16` in the defining scope of `n16::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:72:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ `u8` cannot be safely transmuted into `V0i16` in the defining scope of `n16::Context`.\n+   |                                            ^^^^^^^ At least one value of `u8` isn't a bit-valid value of `V0i16`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, n16::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0i16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -113,13 +108,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `V0i16` cannot be safely transmuted into `u32` in the defining scope of `n16::Context`.\n+error[E0277]: `V0i16` cannot be safely transmuted into `u32` in the defining scope of `n16::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:74:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ `V0i16` cannot be safely transmuted into `u32` in the defining scope of `n16::Context`.\n+   |                                            ^^^^^^ The size of `V0i16` is smaller than the size of `u32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0i16, n16::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -136,13 +130,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `V0u16` in the defining scope of `n16::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `V0u16` in the defining scope of `n16::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:80:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ `u8` cannot be safely transmuted into `V0u16` in the defining scope of `n16::Context`.\n+   |                                            ^^^^^^^ At least one value of `u8` isn't a bit-valid value of `V0u16`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, n16::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0u16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -159,13 +152,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `V0u16` cannot be safely transmuted into `u32` in the defining scope of `n16::Context`.\n+error[E0277]: `V0u16` cannot be safely transmuted into `u32` in the defining scope of `n16::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:82:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ `V0u16` cannot be safely transmuted into `u32` in the defining scope of `n16::Context`.\n+   |                                            ^^^^^^ The size of `V0u16` is smaller than the size of `u32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0u16, n16::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -182,13 +174,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `V0i32` in the defining scope of `n32::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `V0i32` in the defining scope of `n32::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:96:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ `u16` cannot be safely transmuted into `V0i32` in the defining scope of `n32::Context`.\n+   |                                            ^^^^^^^ At least one value of `u16` isn't a bit-valid value of `V0i32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, n32::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0i32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -205,13 +196,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `V0i32` cannot be safely transmuted into `u64` in the defining scope of `n32::Context`.\n+error[E0277]: `V0i32` cannot be safely transmuted into `u64` in the defining scope of `n32::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:98:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ `V0i32` cannot be safely transmuted into `u64` in the defining scope of `n32::Context`.\n+   |                                            ^^^^^^ The size of `V0i32` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0i32, n32::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -228,13 +218,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `V0u32` in the defining scope of `n32::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `V0u32` in the defining scope of `n32::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:104:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ `u16` cannot be safely transmuted into `V0u32` in the defining scope of `n32::Context`.\n+   |                                            ^^^^^^^ At least one value of `u16` isn't a bit-valid value of `V0u32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, n32::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -251,13 +240,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `V0u32` cannot be safely transmuted into `u64` in the defining scope of `n32::Context`.\n+error[E0277]: `V0u32` cannot be safely transmuted into `u64` in the defining scope of `n32::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:106:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ `V0u32` cannot be safely transmuted into `u64` in the defining scope of `n32::Context`.\n+   |                                            ^^^^^^ The size of `V0u32` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0u32, n32::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -274,13 +262,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u32` cannot be safely transmuted into `V0i64` in the defining scope of `n64::Context`.\n+error[E0277]: `u32` cannot be safely transmuted into `V0i64` in the defining scope of `n64::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:120:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ `u32` cannot be safely transmuted into `V0i64` in the defining scope of `n64::Context`.\n+   |                                            ^^^^^^^ At least one value of `u32` isn't a bit-valid value of `V0i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, n64::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -297,13 +284,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `V0i64` cannot be safely transmuted into `u128` in the defining scope of `n64::Context`.\n+error[E0277]: `V0i64` cannot be safely transmuted into `u128` in the defining scope of `n64::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:122:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ `V0i64` cannot be safely transmuted into `u128` in the defining scope of `n64::Context`.\n+   |                                            ^^^^^^ The size of `V0i64` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0i64, n64::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -320,13 +306,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u32` cannot be safely transmuted into `V0u64` in the defining scope of `n64::Context`.\n+error[E0277]: `u32` cannot be safely transmuted into `V0u64` in the defining scope of `n64::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:128:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ `u32` cannot be safely transmuted into `V0u64` in the defining scope of `n64::Context`.\n+   |                                            ^^^^^^^ At least one value of `u32` isn't a bit-valid value of `V0u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, n64::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -343,13 +328,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `V0u64` cannot be safely transmuted into `u128` in the defining scope of `n64::Context`.\n+error[E0277]: `V0u64` cannot be safely transmuted into `u128` in the defining scope of `n64::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:130:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ `V0u64` cannot be safely transmuted into `u128` in the defining scope of `n64::Context`.\n+   |                                            ^^^^^^ The size of `V0u64` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0u64, n64::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -366,13 +350,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `V0isize` in the defining scope of `nsize::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `V0isize` in the defining scope of `nsize::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:144:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ `u8` cannot be safely transmuted into `V0isize` in the defining scope of `nsize::Context`.\n+   |                                            ^^^^^^^ At least one value of `u8` isn't a bit-valid value of `V0isize`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, nsize::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0isize`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -389,13 +372,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `V0isize` cannot be safely transmuted into `[usize; 2]` in the defining scope of `nsize::Context`.\n+error[E0277]: `V0isize` cannot be safely transmuted into `[usize; 2]` in the defining scope of `nsize::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:146:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ `V0isize` cannot be safely transmuted into `[usize; 2]` in the defining scope of `nsize::Context`.\n+   |                                            ^^^^^^ The size of `V0isize` is smaller than the size of `[usize; 2]`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0isize, nsize::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `[usize; 2]`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -412,13 +394,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `V0usize` in the defining scope of `nsize::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `V0usize` in the defining scope of `nsize::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:152:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ `u8` cannot be safely transmuted into `V0usize` in the defining scope of `nsize::Context`.\n+   |                                            ^^^^^^^ At least one value of `u8` isn't a bit-valid value of `V0usize`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, nsize::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0usize`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -435,13 +416,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `V0usize` cannot be safely transmuted into `[usize; 2]` in the defining scope of `nsize::Context`.\n+error[E0277]: `V0usize` cannot be safely transmuted into `[usize; 2]` in the defining scope of `nsize::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:154:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ `V0usize` cannot be safely transmuted into `[usize; 2]` in the defining scope of `nsize::Context`.\n+   |                                            ^^^^^^ The size of `V0usize` is smaller than the size of `[usize; 2]`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0usize, nsize::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `[usize; 2]`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |"}, {"sha": "1612b6b3661ef057feaa5f5ab3706621573f8ceb", "filename": "tests/ui/transmutability/enums/repr/should_require_well_defined_layout.stderr", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fshould_require_well_defined_layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fshould_require_well_defined_layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fshould_require_well_defined_layout.stderr?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `void::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+error[E0277]: `void::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:28:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ `void::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+   |                                                    ^^ `void::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<void::repr_rust, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |\n@@ -21,13 +20,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `u128` cannot be safely transmuted into `void::repr_rust` in the defining scope of `assert::Context`.\n+error[E0277]: `u128` cannot be safely transmuted into `void::repr_rust` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:29:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `void::repr_rust` in the defining scope of `assert::Context`.\n+   |                                               ^^^^^^^^^ `void::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `void::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |\n@@ -44,13 +42,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `singleton::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+error[E0277]: `singleton::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:34:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ `singleton::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+   |                                                    ^^ `singleton::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<singleton::repr_rust, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |\n@@ -67,13 +64,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `u128` cannot be safely transmuted into `singleton::repr_rust` in the defining scope of `assert::Context`.\n+error[E0277]: `u128` cannot be safely transmuted into `singleton::repr_rust` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:35:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `singleton::repr_rust` in the defining scope of `assert::Context`.\n+   |                                               ^^^^^^^^^ `singleton::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `singleton::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |\n@@ -90,13 +86,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `duplex::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+error[E0277]: `duplex::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:40:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ `duplex::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+   |                                                    ^^ `duplex::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<duplex::repr_rust, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |\n@@ -113,13 +108,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `u128` cannot be safely transmuted into `duplex::repr_rust` in the defining scope of `assert::Context`.\n+error[E0277]: `u128` cannot be safely transmuted into `duplex::repr_rust` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:41:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `duplex::repr_rust` in the defining scope of `assert::Context`.\n+   |                                               ^^^^^^^^^ `duplex::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `duplex::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |"}, {"sha": "bfbef8b25fcf486f11d85e737c93264cb796e634", "filename": "tests/ui/transmutability/enums/should_pad_variants.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fenums%2Fshould_pad_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fenums%2Fshould_pad_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fenums%2Fshould_pad_variants.stderr?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `should_pad_variants::Context`.\n+error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `should_pad_variants::Context`\n   --> $DIR/should_pad_variants.rs:44:36\n    |\n LL |     assert::is_transmutable::<Src, Dst, Context>();\n-   |                                    ^^^ `Src` cannot be safely transmuted into `Dst` in the defining scope of `should_pad_variants::Context`.\n+   |                                    ^^^ The size of `Src` is smaller than the size of `Dst`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Src, should_pad_variants::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `Dst`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_pad_variants.rs:13:14\n    |"}, {"sha": "e59301a8ce9e229eb2bca3e2f64033f4080d36e5", "filename": "tests/ui/transmutability/enums/should_respect_endianness.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.stderr?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `Src` cannot be safely transmuted into `Unexpected` in the defining scope of `assert::Context`.\n+error[E0277]: `Src` cannot be safely transmuted into `Unexpected` in the defining scope of `assert::Context`\n   --> $DIR/should_respect_endianness.rs:36:36\n    |\n LL |     assert::is_transmutable::<Src, Unexpected>();\n-   |                                    ^^^^^^^^^^ `Src` cannot be safely transmuted into `Unexpected` in the defining scope of `assert::Context`.\n+   |                                    ^^^^^^^^^^ At least one value of `Src` isn't a bit-valid value of `Unexpected`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Src, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `Unexpected`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_respect_endianness.rs:14:14\n    |"}, {"sha": "47c8438a251c2dedb2fcc0f8f6b1045549ac0f58", "filename": "tests/ui/transmutability/primitives/bool.current.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.current.stderr?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `u8` cannot be safely transmuted into `bool` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `bool` in the defining scope of `assert::Context`\n   --> $DIR/bool.rs:24:35\n    |\n LL |     assert::is_transmutable::<u8, bool>();\n-   |                                   ^^^^ `u8` cannot be safely transmuted into `bool` in the defining scope of `assert::Context`.\n+   |                                   ^^^^ At least one value of `u8` isn't a bit-valid value of `bool`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: true, validity: false }>` is not implemented for `bool`\n note: required by a bound in `is_transmutable`\n   --> $DIR/bool.rs:14:14\n    |"}, {"sha": "47c8438a251c2dedb2fcc0f8f6b1045549ac0f58", "filename": "tests/ui/transmutability/primitives/bool.next.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.next.stderr?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `u8` cannot be safely transmuted into `bool` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `bool` in the defining scope of `assert::Context`\n   --> $DIR/bool.rs:24:35\n    |\n LL |     assert::is_transmutable::<u8, bool>();\n-   |                                   ^^^^ `u8` cannot be safely transmuted into `bool` in the defining scope of `assert::Context`.\n+   |                                   ^^^^ At least one value of `u8` isn't a bit-valid value of `bool`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: true, validity: false }>` is not implemented for `bool`\n note: required by a bound in `is_transmutable`\n   --> $DIR/bool.rs:14:14\n    |"}, {"sha": "d12e172971c38f754dcbaf61f1e7cbfc1266fb86", "filename": "tests/ui/transmutability/primitives/numbers.current.stderr", "status": "modified", "additions": 114, "deletions": 171, "changes": 285, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.current.stderr?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `i8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:65:40\n    |\n LL |     assert::is_transmutable::<   i8,   i16>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `i16`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -14,13 +13,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:66:40\n    |\n LL |     assert::is_transmutable::<   i8,   u16>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `u16`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -30,13 +28,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:67:40\n    |\n LL |     assert::is_transmutable::<   i8,   i32>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `i32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -46,13 +43,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:68:40\n    |\n LL |     assert::is_transmutable::<   i8,   f32>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `f32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -62,13 +58,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:69:40\n    |\n LL |     assert::is_transmutable::<   i8,   u32>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `u32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -78,13 +73,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:70:40\n    |\n LL |     assert::is_transmutable::<   i8,   u64>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -94,13 +88,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:71:40\n    |\n LL |     assert::is_transmutable::<   i8,   i64>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -110,13 +103,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:72:40\n    |\n LL |     assert::is_transmutable::<   i8,   f64>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `f64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -126,13 +118,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:73:39\n    |\n LL |     assert::is_transmutable::<   i8,  u128>();\n-   |                                       ^^^^ `i8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i8` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -142,13 +133,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:74:39\n    |\n LL |     assert::is_transmutable::<   i8,  i128>();\n-   |                                       ^^^^ `i8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i8` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -158,13 +148,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:76:40\n    |\n LL |     assert::is_transmutable::<   u8,   i16>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `i16`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -174,13 +163,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:77:40\n    |\n LL |     assert::is_transmutable::<   u8,   u16>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `u16`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -190,13 +178,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:78:40\n    |\n LL |     assert::is_transmutable::<   u8,   i32>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `i32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -206,13 +193,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:79:40\n    |\n LL |     assert::is_transmutable::<   u8,   f32>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `f32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -222,13 +208,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:80:40\n    |\n LL |     assert::is_transmutable::<   u8,   u32>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `u32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -238,13 +223,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:81:40\n    |\n LL |     assert::is_transmutable::<   u8,   u64>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -254,13 +238,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:82:40\n    |\n LL |     assert::is_transmutable::<   u8,   i64>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -270,13 +253,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:83:40\n    |\n LL |     assert::is_transmutable::<   u8,   f64>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `f64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -286,13 +268,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:84:39\n    |\n LL |     assert::is_transmutable::<   u8,  u128>();\n-   |                                       ^^^^ `u8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u8` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -302,13 +283,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:85:39\n    |\n LL |     assert::is_transmutable::<   u8,  i128>();\n-   |                                       ^^^^ `u8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u8` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -318,13 +298,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:87:40\n    |\n LL |     assert::is_transmutable::<  i16,   i32>();\n-   |                                        ^^^ `i16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i16` is smaller than the size of `i32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -334,13 +313,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:88:40\n    |\n LL |     assert::is_transmutable::<  i16,   f32>();\n-   |                                        ^^^ `i16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i16` is smaller than the size of `f32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -350,13 +328,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:89:40\n    |\n LL |     assert::is_transmutable::<  i16,   u32>();\n-   |                                        ^^^ `i16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i16` is smaller than the size of `u32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -366,13 +343,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:90:40\n    |\n LL |     assert::is_transmutable::<  i16,   u64>();\n-   |                                        ^^^ `i16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i16` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -382,13 +358,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:91:40\n    |\n LL |     assert::is_transmutable::<  i16,   i64>();\n-   |                                        ^^^ `i16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i16` is smaller than the size of `i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -398,13 +373,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:92:40\n    |\n LL |     assert::is_transmutable::<  i16,   f64>();\n-   |                                        ^^^ `i16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i16` is smaller than the size of `f64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -414,13 +388,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:93:39\n    |\n LL |     assert::is_transmutable::<  i16,  u128>();\n-   |                                       ^^^^ `i16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i16` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -430,13 +403,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:94:39\n    |\n LL |     assert::is_transmutable::<  i16,  i128>();\n-   |                                       ^^^^ `i16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i16` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -446,13 +418,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:96:40\n    |\n LL |     assert::is_transmutable::<  u16,   i32>();\n-   |                                        ^^^ `u16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u16` is smaller than the size of `i32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -462,13 +433,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:97:40\n    |\n LL |     assert::is_transmutable::<  u16,   f32>();\n-   |                                        ^^^ `u16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u16` is smaller than the size of `f32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -478,13 +448,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:98:40\n    |\n LL |     assert::is_transmutable::<  u16,   u32>();\n-   |                                        ^^^ `u16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u16` is smaller than the size of `u32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -494,13 +463,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:99:40\n    |\n LL |     assert::is_transmutable::<  u16,   u64>();\n-   |                                        ^^^ `u16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u16` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -510,13 +478,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:100:40\n    |\n LL |     assert::is_transmutable::<  u16,   i64>();\n-   |                                        ^^^ `u16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u16` is smaller than the size of `i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -526,13 +493,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:101:40\n    |\n LL |     assert::is_transmutable::<  u16,   f64>();\n-   |                                        ^^^ `u16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u16` is smaller than the size of `f64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -542,13 +508,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:102:39\n    |\n LL |     assert::is_transmutable::<  u16,  u128>();\n-   |                                       ^^^^ `u16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u16` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -558,13 +523,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:103:39\n    |\n LL |     assert::is_transmutable::<  u16,  i128>();\n-   |                                       ^^^^ `u16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u16` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -574,13 +538,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+error[E0277]: `i32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:105:40\n    |\n LL |     assert::is_transmutable::<  i32,   u64>();\n-   |                                        ^^^ `i32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i32` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -590,13 +553,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+error[E0277]: `i32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:106:40\n    |\n LL |     assert::is_transmutable::<  i32,   i64>();\n-   |                                        ^^^ `i32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i32` is smaller than the size of `i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -606,13 +568,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+error[E0277]: `i32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:107:40\n    |\n LL |     assert::is_transmutable::<  i32,   f64>();\n-   |                                        ^^^ `i32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i32` is smaller than the size of `f64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -622,13 +583,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `i32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:108:39\n    |\n LL |     assert::is_transmutable::<  i32,  u128>();\n-   |                                       ^^^^ `i32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i32` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -638,13 +598,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `i32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:109:39\n    |\n LL |     assert::is_transmutable::<  i32,  i128>();\n-   |                                       ^^^^ `i32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i32` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -654,13 +613,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `f32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+error[E0277]: `f32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:111:40\n    |\n LL |     assert::is_transmutable::<  f32,   u64>();\n-   |                                        ^^^ `f32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `f32` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -670,13 +628,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `f32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+error[E0277]: `f32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:112:40\n    |\n LL |     assert::is_transmutable::<  f32,   i64>();\n-   |                                        ^^^ `f32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `f32` is smaller than the size of `i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -686,13 +643,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `f32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+error[E0277]: `f32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:113:40\n    |\n LL |     assert::is_transmutable::<  f32,   f64>();\n-   |                                        ^^^ `f32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `f32` is smaller than the size of `f64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -702,13 +658,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `f32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `f32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:114:39\n    |\n LL |     assert::is_transmutable::<  f32,  u128>();\n-   |                                       ^^^^ `f32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `f32` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -718,13 +673,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `f32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `f32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:115:39\n    |\n LL |     assert::is_transmutable::<  f32,  i128>();\n-   |                                       ^^^^ `f32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `f32` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -734,13 +688,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+error[E0277]: `u32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:117:40\n    |\n LL |     assert::is_transmutable::<  u32,   u64>();\n-   |                                        ^^^ `u32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u32` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -750,13 +703,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+error[E0277]: `u32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:118:40\n    |\n LL |     assert::is_transmutable::<  u32,   i64>();\n-   |                                        ^^^ `u32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u32` is smaller than the size of `i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -766,13 +718,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+error[E0277]: `u32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:119:40\n    |\n LL |     assert::is_transmutable::<  u32,   f64>();\n-   |                                        ^^^ `u32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u32` is smaller than the size of `f64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -782,13 +733,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `u32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:120:39\n    |\n LL |     assert::is_transmutable::<  u32,  u128>();\n-   |                                       ^^^^ `u32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u32` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -798,13 +748,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `u32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:121:39\n    |\n LL |     assert::is_transmutable::<  u32,  i128>();\n-   |                                       ^^^^ `u32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u32` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -814,13 +763,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `u64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:123:39\n    |\n LL |     assert::is_transmutable::<  u64,  u128>();\n-   |                                       ^^^^ `u64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u64` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -830,13 +778,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `u64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:124:39\n    |\n LL |     assert::is_transmutable::<  u64,  i128>();\n-   |                                       ^^^^ `u64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u64` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -846,13 +793,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `i64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:126:39\n    |\n LL |     assert::is_transmutable::<  i64,  u128>();\n-   |                                       ^^^^ `i64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i64` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -862,13 +808,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `i64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:127:39\n    |\n LL |     assert::is_transmutable::<  i64,  i128>();\n-   |                                       ^^^^ `i64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i64` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -878,13 +823,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `f64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `f64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:129:39\n    |\n LL |     assert::is_transmutable::<  f64,  u128>();\n-   |                                       ^^^^ `f64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `f64` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -894,13 +838,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `f64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `f64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:130:39\n    |\n LL |     assert::is_transmutable::<  f64,  i128>();\n-   |                                       ^^^^ `f64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `f64` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |"}, {"sha": "d12e172971c38f754dcbaf61f1e7cbfc1266fb86", "filename": "tests/ui/transmutability/primitives/numbers.next.stderr", "status": "modified", "additions": 114, "deletions": 171, "changes": 285, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.next.stderr?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `i8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:65:40\n    |\n LL |     assert::is_transmutable::<   i8,   i16>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `i16`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -14,13 +13,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:66:40\n    |\n LL |     assert::is_transmutable::<   i8,   u16>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `u16`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -30,13 +28,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:67:40\n    |\n LL |     assert::is_transmutable::<   i8,   i32>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `i32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -46,13 +43,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:68:40\n    |\n LL |     assert::is_transmutable::<   i8,   f32>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `f32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -62,13 +58,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:69:40\n    |\n LL |     assert::is_transmutable::<   i8,   u32>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `u32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -78,13 +73,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:70:40\n    |\n LL |     assert::is_transmutable::<   i8,   u64>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -94,13 +88,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:71:40\n    |\n LL |     assert::is_transmutable::<   i8,   i64>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -110,13 +103,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:72:40\n    |\n LL |     assert::is_transmutable::<   i8,   f64>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `f64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -126,13 +118,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:73:39\n    |\n LL |     assert::is_transmutable::<   i8,  u128>();\n-   |                                       ^^^^ `i8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i8` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -142,13 +133,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:74:39\n    |\n LL |     assert::is_transmutable::<   i8,  i128>();\n-   |                                       ^^^^ `i8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i8` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -158,13 +148,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:76:40\n    |\n LL |     assert::is_transmutable::<   u8,   i16>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `i16`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -174,13 +163,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:77:40\n    |\n LL |     assert::is_transmutable::<   u8,   u16>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `u16`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -190,13 +178,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:78:40\n    |\n LL |     assert::is_transmutable::<   u8,   i32>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `i32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -206,13 +193,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:79:40\n    |\n LL |     assert::is_transmutable::<   u8,   f32>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `f32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -222,13 +208,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:80:40\n    |\n LL |     assert::is_transmutable::<   u8,   u32>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `u32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -238,13 +223,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:81:40\n    |\n LL |     assert::is_transmutable::<   u8,   u64>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -254,13 +238,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:82:40\n    |\n LL |     assert::is_transmutable::<   u8,   i64>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -270,13 +253,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:83:40\n    |\n LL |     assert::is_transmutable::<   u8,   f64>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `f64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -286,13 +268,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:84:39\n    |\n LL |     assert::is_transmutable::<   u8,  u128>();\n-   |                                       ^^^^ `u8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u8` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -302,13 +283,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:85:39\n    |\n LL |     assert::is_transmutable::<   u8,  i128>();\n-   |                                       ^^^^ `u8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u8` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -318,13 +298,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:87:40\n    |\n LL |     assert::is_transmutable::<  i16,   i32>();\n-   |                                        ^^^ `i16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i16` is smaller than the size of `i32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -334,13 +313,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:88:40\n    |\n LL |     assert::is_transmutable::<  i16,   f32>();\n-   |                                        ^^^ `i16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i16` is smaller than the size of `f32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -350,13 +328,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:89:40\n    |\n LL |     assert::is_transmutable::<  i16,   u32>();\n-   |                                        ^^^ `i16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i16` is smaller than the size of `u32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -366,13 +343,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:90:40\n    |\n LL |     assert::is_transmutable::<  i16,   u64>();\n-   |                                        ^^^ `i16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i16` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -382,13 +358,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:91:40\n    |\n LL |     assert::is_transmutable::<  i16,   i64>();\n-   |                                        ^^^ `i16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i16` is smaller than the size of `i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -398,13 +373,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:92:40\n    |\n LL |     assert::is_transmutable::<  i16,   f64>();\n-   |                                        ^^^ `i16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i16` is smaller than the size of `f64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -414,13 +388,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:93:39\n    |\n LL |     assert::is_transmutable::<  i16,  u128>();\n-   |                                       ^^^^ `i16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i16` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -430,13 +403,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:94:39\n    |\n LL |     assert::is_transmutable::<  i16,  i128>();\n-   |                                       ^^^^ `i16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i16` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -446,13 +418,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:96:40\n    |\n LL |     assert::is_transmutable::<  u16,   i32>();\n-   |                                        ^^^ `u16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u16` is smaller than the size of `i32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -462,13 +433,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:97:40\n    |\n LL |     assert::is_transmutable::<  u16,   f32>();\n-   |                                        ^^^ `u16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u16` is smaller than the size of `f32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -478,13 +448,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:98:40\n    |\n LL |     assert::is_transmutable::<  u16,   u32>();\n-   |                                        ^^^ `u16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u16` is smaller than the size of `u32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -494,13 +463,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:99:40\n    |\n LL |     assert::is_transmutable::<  u16,   u64>();\n-   |                                        ^^^ `u16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u16` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -510,13 +478,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:100:40\n    |\n LL |     assert::is_transmutable::<  u16,   i64>();\n-   |                                        ^^^ `u16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u16` is smaller than the size of `i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -526,13 +493,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:101:40\n    |\n LL |     assert::is_transmutable::<  u16,   f64>();\n-   |                                        ^^^ `u16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u16` is smaller than the size of `f64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -542,13 +508,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:102:39\n    |\n LL |     assert::is_transmutable::<  u16,  u128>();\n-   |                                       ^^^^ `u16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u16` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -558,13 +523,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:103:39\n    |\n LL |     assert::is_transmutable::<  u16,  i128>();\n-   |                                       ^^^^ `u16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u16` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -574,13 +538,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+error[E0277]: `i32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:105:40\n    |\n LL |     assert::is_transmutable::<  i32,   u64>();\n-   |                                        ^^^ `i32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i32` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -590,13 +553,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+error[E0277]: `i32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:106:40\n    |\n LL |     assert::is_transmutable::<  i32,   i64>();\n-   |                                        ^^^ `i32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i32` is smaller than the size of `i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -606,13 +568,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+error[E0277]: `i32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:107:40\n    |\n LL |     assert::is_transmutable::<  i32,   f64>();\n-   |                                        ^^^ `i32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i32` is smaller than the size of `f64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -622,13 +583,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `i32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:108:39\n    |\n LL |     assert::is_transmutable::<  i32,  u128>();\n-   |                                       ^^^^ `i32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i32` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -638,13 +598,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `i32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:109:39\n    |\n LL |     assert::is_transmutable::<  i32,  i128>();\n-   |                                       ^^^^ `i32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i32` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -654,13 +613,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `f32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+error[E0277]: `f32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:111:40\n    |\n LL |     assert::is_transmutable::<  f32,   u64>();\n-   |                                        ^^^ `f32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `f32` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -670,13 +628,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `f32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+error[E0277]: `f32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:112:40\n    |\n LL |     assert::is_transmutable::<  f32,   i64>();\n-   |                                        ^^^ `f32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `f32` is smaller than the size of `i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -686,13 +643,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `f32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+error[E0277]: `f32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:113:40\n    |\n LL |     assert::is_transmutable::<  f32,   f64>();\n-   |                                        ^^^ `f32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `f32` is smaller than the size of `f64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -702,13 +658,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `f32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `f32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:114:39\n    |\n LL |     assert::is_transmutable::<  f32,  u128>();\n-   |                                       ^^^^ `f32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `f32` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -718,13 +673,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `f32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `f32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:115:39\n    |\n LL |     assert::is_transmutable::<  f32,  i128>();\n-   |                                       ^^^^ `f32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `f32` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -734,13 +688,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+error[E0277]: `u32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:117:40\n    |\n LL |     assert::is_transmutable::<  u32,   u64>();\n-   |                                        ^^^ `u32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u32` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -750,13 +703,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+error[E0277]: `u32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:118:40\n    |\n LL |     assert::is_transmutable::<  u32,   i64>();\n-   |                                        ^^^ `u32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u32` is smaller than the size of `i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -766,13 +718,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+error[E0277]: `u32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:119:40\n    |\n LL |     assert::is_transmutable::<  u32,   f64>();\n-   |                                        ^^^ `u32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u32` is smaller than the size of `f64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -782,13 +733,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `u32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:120:39\n    |\n LL |     assert::is_transmutable::<  u32,  u128>();\n-   |                                       ^^^^ `u32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u32` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -798,13 +748,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `u32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:121:39\n    |\n LL |     assert::is_transmutable::<  u32,  i128>();\n-   |                                       ^^^^ `u32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u32` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -814,13 +763,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `u64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:123:39\n    |\n LL |     assert::is_transmutable::<  u64,  u128>();\n-   |                                       ^^^^ `u64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u64` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -830,13 +778,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `u64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:124:39\n    |\n LL |     assert::is_transmutable::<  u64,  i128>();\n-   |                                       ^^^^ `u64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u64` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -846,13 +793,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `i64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:126:39\n    |\n LL |     assert::is_transmutable::<  i64,  u128>();\n-   |                                       ^^^^ `i64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i64` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -862,13 +808,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `i64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:127:39\n    |\n LL |     assert::is_transmutable::<  i64,  i128>();\n-   |                                       ^^^^ `i64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i64` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -878,13 +823,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `f64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `f64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:129:39\n    |\n LL |     assert::is_transmutable::<  f64,  u128>();\n-   |                                       ^^^^ `f64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `f64` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -894,13 +838,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `f64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `f64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:130:39\n    |\n LL |     assert::is_transmutable::<  f64,  i128>();\n-   |                                       ^^^^ `f64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `f64` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |"}, {"sha": "c49eb6097bd0cc4143bd407412a05c9aa5fef2cc", "filename": "tests/ui/transmutability/primitives/unit.current.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.current.stderr?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `()` cannot be safely transmuted into `u8` in the defining scope of `should_have_correct_size::Context`.\n+error[E0277]: `()` cannot be safely transmuted into `u8` in the defining scope of `should_have_correct_size::Context`\n   --> $DIR/unit.rs:31:35\n    |\n LL |     assert::is_transmutable::<(), u8, Context>();\n-   |                                   ^^ `()` cannot be safely transmuted into `u8` in the defining scope of `should_have_correct_size::Context`.\n+   |                                   ^^ The size of `()` is smaller than the size of `u8`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<(), should_have_correct_size::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u8`\n note: required by a bound in `is_transmutable`\n   --> $DIR/unit.rs:15:14\n    |"}, {"sha": "c49eb6097bd0cc4143bd407412a05c9aa5fef2cc", "filename": "tests/ui/transmutability/primitives/unit.next.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.next.stderr?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `()` cannot be safely transmuted into `u8` in the defining scope of `should_have_correct_size::Context`.\n+error[E0277]: `()` cannot be safely transmuted into `u8` in the defining scope of `should_have_correct_size::Context`\n   --> $DIR/unit.rs:31:35\n    |\n LL |     assert::is_transmutable::<(), u8, Context>();\n-   |                                   ^^ `()` cannot be safely transmuted into `u8` in the defining scope of `should_have_correct_size::Context`.\n+   |                                   ^^ The size of `()` is smaller than the size of `u8`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<(), should_have_correct_size::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u8`\n note: required by a bound in `is_transmutable`\n   --> $DIR/unit.rs:15:14\n    |"}, {"sha": "ecb095354a512b25c3fd8fd0b80e6fc147353d7d", "filename": "tests/ui/transmutability/references.current.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Freferences.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Freferences.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Freferences.current.stderr?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n+error[E0277]: `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`\n   --> $DIR/references.rs:29:52\n    |\n LL |     assert::is_maybe_transmutable::<&'static Unit, &'static Unit>();\n-   |                                                    ^^^^^^^^^^^^^ `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n+   |                                                    ^^^^^^^^^^^^^ `&'static Unit` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<&'static Unit, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `&'static Unit`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/references.rs:16:14\n    |"}, {"sha": "ecb095354a512b25c3fd8fd0b80e6fc147353d7d", "filename": "tests/ui/transmutability/references.next.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Freferences.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Freferences.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Freferences.next.stderr?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n+error[E0277]: `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`\n   --> $DIR/references.rs:29:52\n    |\n LL |     assert::is_maybe_transmutable::<&'static Unit, &'static Unit>();\n-   |                                                    ^^^^^^^^^^^^^ `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n+   |                                                    ^^^^^^^^^^^^^ `&'static Unit` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<&'static Unit, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `&'static Unit`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/references.rs:16:14\n    |"}, {"sha": "4c5062cd3b303f055e6fdafe9c64bfaad4ab1378", "filename": "tests/ui/transmutability/structs/repr/should_require_well_defined_layout.stderr", "status": "modified", "additions": 24, "deletions": 36, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_require_well_defined_layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_require_well_defined_layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_require_well_defined_layout.stderr?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `should_reject_repr_rust::unit::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+error[E0277]: `should_reject_repr_rust::unit::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:28:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ `should_reject_repr_rust::unit::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+   |                                                    ^^ `should_reject_repr_rust::unit::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<should_reject_repr_rust::unit::repr_rust, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -21,13 +20,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `u128` cannot be safely transmuted into `should_reject_repr_rust::unit::repr_rust` in the defining scope of `assert::Context`.\n+error[E0277]: `u128` cannot be safely transmuted into `should_reject_repr_rust::unit::repr_rust` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:29:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `should_reject_repr_rust::unit::repr_rust` in the defining scope of `assert::Context`.\n+   |                                               ^^^^^^^^^ `should_reject_repr_rust::unit::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `should_reject_repr_rust::unit::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -44,13 +42,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `should_reject_repr_rust::tuple::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+error[E0277]: `should_reject_repr_rust::tuple::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:34:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ `should_reject_repr_rust::tuple::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+   |                                                    ^^ `should_reject_repr_rust::tuple::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<should_reject_repr_rust::tuple::repr_rust, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -67,13 +64,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `u128` cannot be safely transmuted into `should_reject_repr_rust::tuple::repr_rust` in the defining scope of `assert::Context`.\n+error[E0277]: `u128` cannot be safely transmuted into `should_reject_repr_rust::tuple::repr_rust` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:35:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `should_reject_repr_rust::tuple::repr_rust` in the defining scope of `assert::Context`.\n+   |                                               ^^^^^^^^^ `should_reject_repr_rust::tuple::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `should_reject_repr_rust::tuple::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -90,13 +86,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `should_reject_repr_rust::braces::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+error[E0277]: `should_reject_repr_rust::braces::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:40:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ `should_reject_repr_rust::braces::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+   |                                                    ^^ `should_reject_repr_rust::braces::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<should_reject_repr_rust::braces::repr_rust, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -113,13 +108,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `u128` cannot be safely transmuted into `should_reject_repr_rust::braces::repr_rust` in the defining scope of `assert::Context`.\n+error[E0277]: `u128` cannot be safely transmuted into `should_reject_repr_rust::braces::repr_rust` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:41:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `should_reject_repr_rust::braces::repr_rust` in the defining scope of `assert::Context`.\n+   |                                               ^^^^^^^^^ `should_reject_repr_rust::braces::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `should_reject_repr_rust::braces::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -136,13 +130,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `aligned::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+error[E0277]: `aligned::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:46:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ `aligned::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+   |                                                    ^^ `aligned::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<aligned::repr_rust, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -159,13 +152,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `u128` cannot be safely transmuted into `aligned::repr_rust` in the defining scope of `assert::Context`.\n+error[E0277]: `u128` cannot be safely transmuted into `aligned::repr_rust` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:47:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `aligned::repr_rust` in the defining scope of `assert::Context`.\n+   |                                               ^^^^^^^^^ `aligned::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `aligned::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -182,13 +174,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `packed::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+error[E0277]: `packed::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:52:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ `packed::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+   |                                                    ^^ `packed::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<packed::repr_rust, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -205,13 +196,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `u128` cannot be safely transmuted into `packed::repr_rust` in the defining scope of `assert::Context`.\n+error[E0277]: `u128` cannot be safely transmuted into `packed::repr_rust` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:53:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `packed::repr_rust` in the defining scope of `assert::Context`.\n+   |                                               ^^^^^^^^^ `packed::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `packed::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -228,13 +218,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `nested::repr_c` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+error[E0277]: `nested::repr_c` cannot be safely transmuted into `()` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:59:49\n    |\n LL |         assert::is_maybe_transmutable::<repr_c, ()>();\n-   |                                                 ^^ `nested::repr_c` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+   |                                                 ^^ `nested::repr_c` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<nested::repr_c, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -251,13 +240,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `u128` cannot be safely transmuted into `nested::repr_c` in the defining scope of `assert::Context`.\n+error[E0277]: `u128` cannot be safely transmuted into `nested::repr_c` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:60:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_c>();\n-   |                                               ^^^^^^ `u128` cannot be safely transmuted into `nested::repr_c` in the defining scope of `assert::Context`.\n+   |                                               ^^^^^^ `nested::repr_c` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `nested::repr_c`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |"}, {"sha": "4293d34f47b23aa4cdfab37b8209ff53e93ae405", "filename": "tests/ui/transmutability/unions/repr/should_require_well_defined_layout.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_require_well_defined_layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_require_well_defined_layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_require_well_defined_layout.stderr?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `should_reject_repr_rust::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+error[E0277]: `should_reject_repr_rust::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:30:48\n    |\n LL |     assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                ^^ `should_reject_repr_rust::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+   |                                                ^^ `should_reject_repr_rust::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<should_reject_repr_rust::repr_rust, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -21,13 +20,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `u128` cannot be safely transmuted into `should_reject_repr_rust::repr_rust` in the defining scope of `assert::Context`.\n+error[E0277]: `u128` cannot be safely transmuted into `should_reject_repr_rust::repr_rust` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:31:43\n    |\n LL |     assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                           ^^^^^^^^^ `u128` cannot be safely transmuted into `should_reject_repr_rust::repr_rust` in the defining scope of `assert::Context`.\n+   |                                           ^^^^^^^^^ `should_reject_repr_rust::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `should_reject_repr_rust::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |"}, {"sha": "bfbef8b25fcf486f11d85e737c93264cb796e634", "filename": "tests/ui/transmutability/unions/should_pad_variants.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Funions%2Fshould_pad_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Funions%2Fshould_pad_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Funions%2Fshould_pad_variants.stderr?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `should_pad_variants::Context`.\n+error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `should_pad_variants::Context`\n   --> $DIR/should_pad_variants.rs:44:36\n    |\n LL |     assert::is_transmutable::<Src, Dst, Context>();\n-   |                                    ^^^ `Src` cannot be safely transmuted into `Dst` in the defining scope of `should_pad_variants::Context`.\n+   |                                    ^^^ The size of `Src` is smaller than the size of `Dst`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Src, should_pad_variants::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `Dst`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_pad_variants.rs:13:14\n    |"}, {"sha": "553f655a10ac0f8b063de943b5498e5136cc0d9e", "filename": "tests/ui/transmutability/unions/should_reject_contraction.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Funions%2Fshould_reject_contraction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Funions%2Fshould_reject_contraction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Funions%2Fshould_reject_contraction.stderr?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `Superset` cannot be safely transmuted into `Subset` in the defining scope of `assert::Context`.\n+error[E0277]: `Superset` cannot be safely transmuted into `Subset` in the defining scope of `assert::Context`\n   --> $DIR/should_reject_contraction.rs:35:41\n    |\n LL |     assert::is_transmutable::<Superset, Subset>();\n-   |                                         ^^^^^^ `Superset` cannot be safely transmuted into `Subset` in the defining scope of `assert::Context`.\n+   |                                         ^^^^^^ At least one value of `Superset` isn't a bit-valid value of `Subset`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Superset, assert::Context, Assume { alignment: false, lifetimes: false, safety: true, validity: false }>` is not implemented for `Subset`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_contraction.rs:13:14\n    |"}, {"sha": "178ae6f08c495801bbcdfa1eda582b412d58a9f1", "filename": "tests/ui/transmutability/unions/should_reject_disjoint.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Funions%2Fshould_reject_disjoint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Funions%2Fshould_reject_disjoint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Funions%2Fshould_reject_disjoint.stderr?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `A` cannot be safely transmuted into `B` in the defining scope of `assert::Context`.\n+error[E0277]: `A` cannot be safely transmuted into `B` in the defining scope of `assert::Context`\n   --> $DIR/should_reject_disjoint.rs:33:40\n    |\n LL |     assert::is_maybe_transmutable::<A, B>();\n-   |                                        ^ `A` cannot be safely transmuted into `B` in the defining scope of `assert::Context`.\n+   |                                        ^ At least one value of `A` isn't a bit-valid value of `B`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<A, assert::Context, Assume { alignment: false, lifetimes: false, safety: true, validity: true }>` is not implemented for `B`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_reject_disjoint.rs:13:14\n    |\n@@ -14,13 +13,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY.and(Assume::VALIDITY) }>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`.\n+error[E0277]: `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`\n   --> $DIR/should_reject_disjoint.rs:34:40\n    |\n LL |     assert::is_maybe_transmutable::<B, A>();\n-   |                                        ^ `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`.\n+   |                                        ^ At least one value of `B` isn't a bit-valid value of `A`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<B, assert::Context, Assume { alignment: false, lifetimes: false, safety: true, validity: true }>` is not implemented for `A`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_reject_disjoint.rs:13:14\n    |"}, {"sha": "73c29ab1c970d88a477da0a1c35d6820f6dbfd9b", "filename": "tests/ui/transmutability/unions/should_reject_intersecting.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Funions%2Fshould_reject_intersecting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Funions%2Fshould_reject_intersecting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Funions%2Fshould_reject_intersecting.stderr?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `A` cannot be safely transmuted into `B` in the defining scope of `assert::Context`.\n+error[E0277]: `A` cannot be safely transmuted into `B` in the defining scope of `assert::Context`\n   --> $DIR/should_reject_intersecting.rs:36:34\n    |\n LL |     assert::is_transmutable::<A, B>();\n-   |                                  ^ `A` cannot be safely transmuted into `B` in the defining scope of `assert::Context`.\n+   |                                  ^ At least one value of `A` isn't a bit-valid value of `B`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<A, assert::Context, Assume { alignment: false, lifetimes: false, safety: true, validity: false }>` is not implemented for `B`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_intersecting.rs:14:14\n    |\n@@ -14,13 +13,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY }>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`.\n+error[E0277]: `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`\n   --> $DIR/should_reject_intersecting.rs:37:34\n    |\n LL |     assert::is_transmutable::<B, A>();\n-   |                                  ^ `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`.\n+   |                                  ^ At least one value of `B` isn't a bit-valid value of `A`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<B, assert::Context, Assume { alignment: false, lifetimes: false, safety: true, validity: false }>` is not implemented for `A`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_intersecting.rs:14:14\n    |"}, {"sha": "863ada3c2c44ce7a72bcf862bbf520604424c8e8", "filename": "tests/ui/transmutability/visibility/should_reject_if_dst_has_private_field.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_field.stderr?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n+error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`\n   --> $DIR/should_reject_if_dst_has_private_field.rs:35:41\n    |\n LL |     assert::is_transmutable::<src::Src, dst::Dst, Context>();\n-   |                                         ^^^^^^^^ `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n+   |                                         ^^^^^^^^ `Dst` is or contains a type or field that is not visible in that scope\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Src, test::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `Dst`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_if_dst_has_private_field.rs:13:14\n    |"}, {"sha": "7b0f1b4d56ec6b42c66a180504a1d4007fefa444", "filename": "tests/ui/transmutability/visibility/should_reject_if_dst_has_private_variant.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_variant.stderr?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n+error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`\n   --> $DIR/should_reject_if_dst_has_private_variant.rs:36:41\n    |\n LL |     assert::is_transmutable::<src::Src, dst::Dst, Context>();\n-   |                                         ^^^^^^^^ `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n+   |                                         ^^^^^^^^ `Dst` is or contains a type or field that is not visible in that scope\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Src, test::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `Dst`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_if_dst_has_private_variant.rs:13:14\n    |"}, {"sha": "df19477ef269781e17bb1a841be4cda974250bad", "filename": "tests/ui/transmutability/visibility/should_reject_if_dst_has_unreachable_field.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_field.stderr?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n+error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`\n   --> $DIR/should_reject_if_dst_has_unreachable_field.rs:37:41\n    |\n LL |     assert::is_transmutable::<src::Src, dst::Dst, Context>();\n-   |                                         ^^^^^^^^ `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n+   |                                         ^^^^^^^^ `Dst` is or contains a type or field that is not visible in that scope\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Src, test::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `Dst`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_if_dst_has_unreachable_field.rs:15:14\n    |"}, {"sha": "ea488980cdd14105fd8819e17a6b5a454721ec0e", "filename": "tests/ui/transmutability/visibility/should_reject_if_dst_has_unreachable_ty.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_ty.stderr?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -10,13 +10,12 @@ note: the struct `Dst` is defined here\n LL |     #[repr(C)] pub(self) struct Dst {\n    |                ^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n+error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`\n   --> $DIR/should_reject_if_dst_has_unreachable_ty.rs:38:41\n    |\n LL |     assert::is_transmutable::<src::Src, dst::Dst, Context>();\n-   |                                         ^^^^^^^^ `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n+   |                                         ^^^^^^^^ `Dst` is or contains a type or field that is not visible in that scope\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Src, test::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `Dst`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_if_dst_has_unreachable_ty.rs:15:14\n    |"}, {"sha": "f5480e0b9fb8217c3ee254a6e02b9ffce042e7b8", "filename": "tests/ui/transmute/transmute-padding-ice.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmute%2Ftransmute-padding-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6223e198d842f8a8066e2ec9f722b905d4ac584/tests%2Fui%2Ftransmute%2Ftransmute-padding-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute%2Ftransmute-padding-ice.stderr?ref=c6223e198d842f8a8066e2ec9f722b905d4ac584", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`.\n+error[E0277]: `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`\n   --> $DIR/transmute-padding-ice.rs:27:40\n    |\n LL |     assert::is_maybe_transmutable::<B, A>();\n-   |                                        ^ `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`.\n+   |                                        ^ The size of `B` is smaller than the size of `A`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<B, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `A`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/transmute-padding-ice.rs:11:14\n    |"}]}