{"sha": "ef018be5c49d7a0bb8ad8e3485111e8b2ab9c5ac", "node_id": "C_kwDOAAsO6NoAKGVmMDE4YmU1YzQ5ZDdhMGJiOGFkOGUzNDg1MTExZThiMmFiOWM1YWM", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-10-16T02:37:30Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-10-16T05:18:15Z"}, "message": "Update the syn crate and adopt let_else in three more places\n\nThe syn crate has gained support for let_else syntax in version 1.0.76,\nsee https://github.com/dtolnay/syn/pull/1057 .\n\nIn the three instances that use let_else, we've sent code through an\nattr macro, which would create compile errors when there was no\nlet_else support in syn. To avoid this, we ran\n`cargo +nightly update -p syn` for updating the syn crate.", "tree": {"sha": "7d43eb40bd52d7d62ad1ccb552c8dc66b3a91f9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d43eb40bd52d7d62ad1ccb552c8dc66b3a91f9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef018be5c49d7a0bb8ad8e3485111e8b2ab9c5ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef018be5c49d7a0bb8ad8e3485111e8b2ab9c5ac", "html_url": "https://github.com/rust-lang/rust/commit/ef018be5c49d7a0bb8ad8e3485111e8b2ab9c5ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef018be5c49d7a0bb8ad8e3485111e8b2ab9c5ac/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1418df5888131578eae04b39360f30df4ffe5599", "url": "https://api.github.com/repos/rust-lang/rust/commits/1418df5888131578eae04b39360f30df4ffe5599", "html_url": "https://github.com/rust-lang/rust/commit/1418df5888131578eae04b39360f30df4ffe5599"}], "stats": {"total": 20, "additions": 7, "deletions": 13}, "files": [{"sha": "9536e6f4269bd3d2f8563d21f49b3a772c31c47c", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef018be5c49d7a0bb8ad8e3485111e8b2ab9c5ac/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ef018be5c49d7a0bb8ad8e3485111e8b2ab9c5ac/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ef018be5c49d7a0bb8ad8e3485111e8b2ab9c5ac", "patch": "@@ -2728,9 +2728,9 @@ checksum = \"bc881b2c22681370c6a780e47af9840ef841837bc98118431d4e1868bd0c1086\"\n \n [[package]]\n name = \"proc-macro2\"\n-version = \"1.0.24\"\n+version = \"1.0.30\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1e0704ee1a7e00d7bb417d0770ea303c1bccbabf0ef1667dae92b5967f5f8a71\"\n+checksum = \"edc3358ebc67bc8b7fa0c007f945b0b18226f78437d61bec735a9eb96b61ee70\"\n dependencies = [\n  \"unicode-xid\",\n ]\n@@ -5090,9 +5090,9 @@ dependencies = [\n \n [[package]]\n name = \"syn\"\n-version = \"1.0.65\"\n+version = \"1.0.80\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f3a1d708c221c5a612956ef9f75b37e454e88d1f7b899fbd3a18d4252012d663\"\n+checksum = \"d010a1623fbd906d51d650a9916aaefc05ffa0e4053ff7fe601167f3e715d194\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\","}, {"sha": "94563400a8b53580578424ca2251b4169e3c4391", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef018be5c49d7a0bb8ad8e3485111e8b2ab9c5ac/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef018be5c49d7a0bb8ad8e3485111e8b2ab9c5ac/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=ef018be5c49d7a0bb8ad8e3485111e8b2ab9c5ac", "patch": "@@ -1057,9 +1057,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     match param.kind {\n                         GenericParamKind::Lifetime { .. } => {\n                             let (name, reg) = Region::early(&self.tcx.hir(), &mut index, &param);\n-                            let def_id = if let Region::EarlyBound(_, def_id, _) = reg {\n-                                def_id\n-                            } else {\n+                            let Region::EarlyBound(_, def_id, _) = reg else {\n                                 bug!();\n                             };\n                             // We cannot predict what lifetimes are unused in opaque type."}, {"sha": "40f456de18332bf736ef0285fa1db0ee52e70695", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef018be5c49d7a0bb8ad8e3485111e8b2ab9c5ac/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef018be5c49d7a0bb8ad8e3485111e8b2ab9c5ac/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=ef018be5c49d7a0bb8ad8e3485111e8b2ab9c5ac", "patch": "@@ -521,9 +521,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n \n         let traits =\n             (self.tcx.lang_items().unsize_trait(), self.tcx.lang_items().coerce_unsized_trait());\n-        let (unsize_did, coerce_unsized_did) = if let (Some(u), Some(cu)) = traits {\n-            (u, cu)\n-        } else {\n+        let (Some(unsize_did), Some(coerce_unsized_did)) = traits else {\n             debug!(\"missing Unsize or CoerceUnsized traits\");\n             return Err(TypeError::Mismatch);\n         };"}, {"sha": "caad28ff2b21fa90e0ca728b3f401e7e0a4aafdd", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef018be5c49d7a0bb8ad8e3485111e8b2ab9c5ac/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef018be5c49d7a0bb8ad8e3485111e8b2ab9c5ac/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=ef018be5c49d7a0bb8ad8e3485111e8b2ab9c5ac", "patch": "@@ -1678,9 +1678,7 @@ impl<'a, 'tcx> InferBorrowKind<'a, 'tcx> {\n         diag_expr_id: hir::HirId,\n     ) {\n         let tcx = self.fcx.tcx;\n-        let upvar_id = if let PlaceBase::Upvar(upvar_id) = place_with_id.place.base {\n-            upvar_id\n-        } else {\n+        let PlaceBase::Upvar(upvar_id) = place_with_id.place.base else {\n             return;\n         };\n "}]}