{"sha": "0d37dca25a51fb900a402c94c8818ad1c2789e30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMzdkY2EyNWE1MWZiOTAwYTQwMmM5NGM4ODE4YWQxYzI3ODllMzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-04T08:56:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-04T08:56:05Z"}, "message": "Auto merge of #76448 - haraldh:default_alloc_error_handler_reduced, r=Amanieu\n\nImplement Make `handle_alloc_error` default to panic (for no_std + liballoc)\n\nRelated: https://github.com/rust-lang/rust/issues/66741\n\nGuarded with `#![feature(default_alloc_error_handler)]` a default\n`alloc_error_handler` is called, if a custom allocator is used and no\nother custom `#[alloc_error_handler]` is defined.", "tree": {"sha": "b23e88ed418316c916d0721ceb1911a51a807bbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b23e88ed418316c916d0721ceb1911a51a807bbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d37dca25a51fb900a402c94c8818ad1c2789e30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d37dca25a51fb900a402c94c8818ad1c2789e30", "html_url": "https://github.com/rust-lang/rust/commit/0d37dca25a51fb900a402c94c8818ad1c2789e30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d37dca25a51fb900a402c94c8818ad1c2789e30/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32cbc65e6bf793d99dc609d11f4a4c93176cdbe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/32cbc65e6bf793d99dc609d11f4a4c93176cdbe2", "html_url": "https://github.com/rust-lang/rust/commit/32cbc65e6bf793d99dc609d11f4a4c93176cdbe2"}, {"sha": "cadd12b5f020b9b2c7bb0c5e7078b81fbdcfb6d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cadd12b5f020b9b2c7bb0c5e7078b81fbdcfb6d8", "html_url": "https://github.com/rust-lang/rust/commit/cadd12b5f020b9b2c7bb0c5e7078b81fbdcfb6d8"}], "stats": {"total": 299, "additions": 292, "deletions": 7}, "files": [{"sha": "e028b2c2dc763a1d57954ee4d27fccf22f43eb36", "filename": "compiler/rustc_codegen_llvm/src/allocator.rs", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0d37dca25a51fb900a402c94c8818ad1c2789e30/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d37dca25a51fb900a402c94c8818ad1c2789e30/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs?ref=0d37dca25a51fb900a402c94c8818ad1c2789e30", "patch": "@@ -3,11 +3,17 @@ use libc::c_uint;\n use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n+use rustc_span::symbol::sym;\n \n use crate::llvm::{self, False, True};\n use crate::ModuleLlvm;\n \n-pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut ModuleLlvm, kind: AllocatorKind) {\n+pub(crate) unsafe fn codegen(\n+    tcx: TyCtxt<'_>,\n+    mods: &mut ModuleLlvm,\n+    kind: AllocatorKind,\n+    has_alloc_error_handler: bool,\n+) {\n     let llcx = &*mods.llcx;\n     let llmod = mods.llmod();\n     let usize = match &tcx.sess.target.target.target_pointer_width[..] {\n@@ -82,4 +88,41 @@ pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut ModuleLlvm, kind: Alloc\n         }\n         llvm::LLVMDisposeBuilder(llbuilder);\n     }\n+\n+    // rust alloc error handler\n+    let args = [usize, usize]; // size, align\n+\n+    let ty = llvm::LLVMFunctionType(void, args.as_ptr(), args.len() as c_uint, False);\n+    let name = format!(\"__rust_alloc_error_handler\");\n+    let llfn = llvm::LLVMRustGetOrInsertFunction(llmod, name.as_ptr().cast(), name.len(), ty);\n+    // -> ! DIFlagNoReturn\n+    llvm::Attribute::NoReturn.apply_llfn(llvm::AttributePlace::Function, llfn);\n+\n+    if tcx.sess.target.target.options.default_hidden_visibility {\n+        llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n+    }\n+    if tcx.sess.must_emit_unwind_tables() {\n+        attributes::emit_uwtable(llfn, true);\n+    }\n+\n+    let kind = if has_alloc_error_handler { AllocatorKind::Global } else { AllocatorKind::Default };\n+    let callee = kind.fn_name(sym::oom);\n+    let callee = llvm::LLVMRustGetOrInsertFunction(llmod, callee.as_ptr().cast(), callee.len(), ty);\n+    // -> ! DIFlagNoReturn\n+    llvm::Attribute::NoReturn.apply_llfn(llvm::AttributePlace::Function, callee);\n+    llvm::LLVMRustSetVisibility(callee, llvm::Visibility::Hidden);\n+\n+    let llbb = llvm::LLVMAppendBasicBlockInContext(llcx, llfn, \"entry\\0\".as_ptr().cast());\n+\n+    let llbuilder = llvm::LLVMCreateBuilderInContext(llcx);\n+    llvm::LLVMPositionBuilderAtEnd(llbuilder, llbb);\n+    let args = args\n+        .iter()\n+        .enumerate()\n+        .map(|(i, _)| llvm::LLVMGetParam(llfn, i as c_uint))\n+        .collect::<Vec<_>>();\n+    let ret = llvm::LLVMRustBuildCall(llbuilder, callee, args.as_ptr(), args.len() as c_uint, None);\n+    llvm::LLVMSetTailCall(ret, True);\n+    llvm::LLVMBuildRetVoid(llbuilder);\n+    llvm::LLVMDisposeBuilder(llbuilder);\n }"}, {"sha": "1237b39b300ff0912a7d4b4ea185ac7cff209857", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d37dca25a51fb900a402c94c8818ad1c2789e30/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d37dca25a51fb900a402c94c8818ad1c2789e30/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=0d37dca25a51fb900a402c94c8818ad1c2789e30", "patch": "@@ -95,8 +95,9 @@ impl ExtraBackendMethods for LlvmCodegenBackend {\n         tcx: TyCtxt<'tcx>,\n         mods: &mut ModuleLlvm,\n         kind: AllocatorKind,\n+        has_alloc_error_handler: bool,\n     ) {\n-        unsafe { allocator::codegen(tcx, mods, kind) }\n+        unsafe { allocator::codegen(tcx, mods, kind, has_alloc_error_handler) }\n     }\n     fn compile_codegen_unit(\n         &self,"}, {"sha": "8e6f8e193c0e23024ddc9e4caf2bd8f4514716ed", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d37dca25a51fb900a402c94c8818ad1c2789e30/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d37dca25a51fb900a402c94c8818ad1c2789e30/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=0d37dca25a51fb900a402c94c8818ad1c2789e30", "patch": "@@ -538,8 +538,9 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n         let llmod_id =\n             cgu_name_builder.build_cgu_name(LOCAL_CRATE, &[\"crate\"], Some(\"allocator\")).to_string();\n         let mut modules = backend.new_metadata(tcx, &llmod_id);\n-        tcx.sess\n-            .time(\"write_allocator_module\", || backend.codegen_allocator(tcx, &mut modules, kind));\n+        tcx.sess.time(\"write_allocator_module\", || {\n+            backend.codegen_allocator(tcx, &mut modules, kind, tcx.lang_items().oom().is_some())\n+        });\n \n         Some(ModuleCodegen { name: llmod_id, module_llvm: modules, kind: ModuleKind::Allocator })\n     } else {"}, {"sha": "48c07b0089420559557219d5928054035bad3b4c", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d37dca25a51fb900a402c94c8818ad1c2789e30/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d37dca25a51fb900a402c94c8818ad1c2789e30/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=0d37dca25a51fb900a402c94c8818ad1c2789e30", "patch": "@@ -109,6 +109,7 @@ pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Se\n         tcx: TyCtxt<'tcx>,\n         mods: &mut Self::Module,\n         kind: AllocatorKind,\n+        has_alloc_error_handler: bool,\n     );\n     /// This generates the codegen unit and returns it along with\n     /// a `u64` giving an estimate of the unit's processing cost."}, {"sha": "5cd0a56d52414fd27b5e22a561de65c186957e44", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d37dca25a51fb900a402c94c8818ad1c2789e30/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d37dca25a51fb900a402c94c8818ad1c2789e30/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=0d37dca25a51fb900a402c94c8818ad1c2789e30", "patch": "@@ -593,6 +593,9 @@ declare_features! (\n     /// Allows to use the `#[cmse_nonsecure_entry]` attribute.\n     (active, cmse_nonsecure_entry, \"1.48.0\", Some(75835), None),\n \n+    /// Allows rustc to inject a default alloc_error_handler\n+    (active, default_alloc_error_handler, \"1.48.0\", Some(66741), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "effb25b0224525fd394907a772ceff0c15298ec8", "filename": "compiler/rustc_passes/src/weak_lang_items.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d37dca25a51fb900a402c94c8818ad1c2789e30/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d37dca25a51fb900a402c94c8818ad1c2789e30/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs?ref=0d37dca25a51fb900a402c94c8818ad1c2789e30", "patch": "@@ -64,7 +64,10 @@ fn verify<'tcx>(tcx: TyCtxt<'tcx>, items: &lang_items::LanguageItems) {\n             if item == LangItem::PanicImpl {\n                 tcx.sess.err(\"`#[panic_handler]` function required, but not found\");\n             } else if item == LangItem::Oom {\n-                tcx.sess.err(\"`#[alloc_error_handler]` function required, but not found\");\n+                if !tcx.features().default_alloc_error_handler {\n+                    tcx.sess.err(\"`#[alloc_error_handler]` function required, but not found.\");\n+                    tcx.sess.note_without_error(\"Use `#![feature(default_alloc_error_handler)]` for a default error handler.\");\n+                }\n             } else {\n                 tcx.sess.err(&format!(\"language item required, but not found: `{}`\", name));\n             }"}, {"sha": "6309b00f5f514897570583e3e04752264c73cf34", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d37dca25a51fb900a402c94c8818ad1c2789e30/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d37dca25a51fb900a402c94c8818ad1c2789e30/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=0d37dca25a51fb900a402c94c8818ad1c2789e30", "patch": "@@ -415,6 +415,7 @@ symbols! {\n         decl_macro,\n         declare_lint_pass,\n         decode,\n+        default_alloc_error_handler,\n         default_lib_allocator,\n         default_type_parameter_fallback,\n         default_type_params,"}, {"sha": "ce70de6ebdd632f9bd4f03b43e32a4556d32fd89", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0d37dca25a51fb900a402c94c8818ad1c2789e30/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d37dca25a51fb900a402c94c8818ad1c2789e30/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=0d37dca25a51fb900a402c94c8818ad1c2789e30", "patch": "@@ -26,6 +26,8 @@ extern \"Rust\" {\n     fn __rust_realloc(ptr: *mut u8, old_size: usize, align: usize, new_size: usize) -> *mut u8;\n     #[rustc_allocator_nounwind]\n     fn __rust_alloc_zeroed(size: usize, align: usize) -> *mut u8;\n+    #[rustc_allocator_nounwind]\n+    fn __rust_alloc_error_handler(size: usize, align: usize) -> !;\n }\n \n /// The global memory allocator.\n@@ -334,6 +336,24 @@ pub(crate) unsafe fn box_free<T: ?Sized>(ptr: Unique<T>) {\n /// [`set_alloc_error_hook`]: ../../std/alloc/fn.set_alloc_error_hook.html\n /// [`take_alloc_error_hook`]: ../../std/alloc/fn.take_alloc_error_hook.html\n #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n+#[cfg(not(any(test, bootstrap)))]\n+#[rustc_allocator_nounwind]\n+pub fn handle_alloc_error(layout: Layout) -> ! {\n+    unsafe {\n+        __rust_alloc_error_handler(layout.size(), layout.align());\n+    }\n+}\n+\n+// For alloc test `std::alloc::handle_alloc_error` can be used directly.\n+#[cfg(test)]\n+pub use std::alloc::handle_alloc_error;\n+\n+// In stage0 (bootstrap) `__rust_alloc_error_handler`,\n+// might not be generated yet, because an old compiler is used,\n+// so use the old direct call.\n+#[cfg(all(bootstrap, not(test)))]\n+#[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n+#[doc(hidden)]\n #[rustc_allocator_nounwind]\n pub fn handle_alloc_error(layout: Layout) -> ! {\n     extern \"Rust\" {\n@@ -342,3 +362,30 @@ pub fn handle_alloc_error(layout: Layout) -> ! {\n     }\n     unsafe { oom_impl(layout) }\n }\n+\n+#[cfg(not(any(test, bootstrap)))]\n+#[doc(hidden)]\n+#[allow(unused_attributes)]\n+#[unstable(feature = \"alloc_internals\", issue = \"none\")]\n+pub mod __default_lib_allocator {\n+    use crate::alloc::Layout;\n+\n+    // called via generated `__rust_alloc_error_handler`\n+\n+    // if there is no `#[alloc_error_handler]`\n+    #[rustc_std_internal_symbol]\n+    pub unsafe extern \"C\" fn __rdl_oom(size: usize, _align: usize) -> ! {\n+        panic!(\"memory allocation of {} bytes failed\", size)\n+    }\n+\n+    // if there is a `#[alloc_error_handler]`\n+    #[rustc_std_internal_symbol]\n+    pub unsafe extern \"C\" fn __rg_oom(size: usize, align: usize) -> ! {\n+        let layout = unsafe { Layout::from_size_align_unchecked(size, align) };\n+        extern \"Rust\" {\n+            #[lang = \"oom\"]\n+            fn oom_impl(layout: Layout) -> !;\n+        }\n+        unsafe { oom_impl(layout) }\n+    }\n+}"}, {"sha": "008fb3501d90de692b8bee6b042a45668eccccc6", "filename": "src/test/ui/allocator/auxiliary/helper.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d37dca25a51fb900a402c94c8818ad1c2789e30/src%2Ftest%2Fui%2Fallocator%2Fauxiliary%2Fhelper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d37dca25a51fb900a402c94c8818ad1c2789e30/src%2Ftest%2Fui%2Fallocator%2Fauxiliary%2Fhelper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fauxiliary%2Fhelper.rs?ref=0d37dca25a51fb900a402c94c8818ad1c2789e30", "patch": "@@ -1,8 +1,10 @@\n // no-prefer-dynamic\n \n #![crate_type = \"rlib\"]\n+#![no_std]\n \n-use std::fmt;\n+extern crate alloc;\n+use alloc::fmt;\n \n pub fn work_with(p: &fmt::Debug) {\n     drop(p);"}, {"sha": "f09fafbc98a18dfb79f5ceeba044b09c0dcbbfca", "filename": "src/test/ui/allocator/no_std-alloc-error-handler-custom.rs", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/0d37dca25a51fb900a402c94c8818ad1c2789e30/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d37dca25a51fb900a402c94c8818ad1c2789e30/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs?ref=0d37dca25a51fb900a402c94c8818ad1c2789e30", "patch": "@@ -0,0 +1,97 @@\n+// run-pass\n+// ignore-android no libc\n+// ignore-cloudabi no libc\n+// ignore-emscripten no libc\n+// ignore-sgx no libc\n+// ignore-wasm32 no libc\n+// only-linux\n+// compile-flags:-C panic=abort\n+// aux-build:helper.rs\n+\n+#![feature(start, rustc_private, new_uninit, panic_info_message)]\n+#![feature(alloc_error_handler)]\n+#![no_std]\n+\n+extern crate alloc;\n+extern crate libc;\n+\n+// ARM targets need these symbols\n+#[no_mangle]\n+pub fn __aeabi_unwind_cpp_pr0() {}\n+\n+#[no_mangle]\n+pub fn __aeabi_unwind_cpp_pr1() {}\n+\n+use core::ptr::null_mut;\n+use core::alloc::{GlobalAlloc, Layout};\n+use alloc::boxed::Box;\n+\n+extern crate helper;\n+\n+struct MyAllocator;\n+\n+#[alloc_error_handler]\n+fn my_oom(layout: Layout) -> !\n+{\n+    use alloc::fmt::write;\n+    unsafe {\n+        let size = layout.size();\n+        let mut s = alloc::string::String::new();\n+        write(&mut s, format_args!(\"My OOM: failed to allocate {} bytes!\\n\", size)).unwrap();\n+        let s = s.as_str();\n+        libc::write(libc::STDERR_FILENO, s as *const _ as _, s.len());\n+        libc::exit(0)\n+    }\n+}\n+\n+unsafe impl GlobalAlloc for MyAllocator {\n+    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n+        if layout.size() < 4096 {\n+            libc::malloc(layout.size()) as _\n+        } else {\n+            null_mut()\n+        }\n+    }\n+    unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {}\n+}\n+\n+#[global_allocator]\n+static A: MyAllocator = MyAllocator;\n+\n+#[panic_handler]\n+fn panic(panic_info: &core::panic::PanicInfo) -> ! {\n+    unsafe {\n+        if let Some(s) = panic_info.payload().downcast_ref::<&str>() {\n+            const PSTR: &str = \"panic occurred: \";\n+            const CR: &str = \"\\n\";\n+            libc::write(libc::STDERR_FILENO, PSTR as *const _ as _, PSTR.len());\n+            libc::write(libc::STDERR_FILENO, s as *const _ as _, s.len());\n+            libc::write(libc::STDERR_FILENO, CR as *const _ as _, CR.len());\n+        }\n+        if let Some(args) = panic_info.message() {\n+            let mut s = alloc::string::String::new();\n+            alloc::fmt::write(&mut s, *args).unwrap();\n+            let s = s.as_str();\n+            const PSTR: &str = \"panic occurred: \";\n+            const CR: &str = \"\\n\";\n+            libc::write(libc::STDERR_FILENO, PSTR as *const _ as _, PSTR.len());\n+            libc::write(libc::STDERR_FILENO, s as *const _ as _, s.len());\n+            libc::write(libc::STDERR_FILENO, CR as *const _ as _, CR.len());\n+        } else {\n+            const PSTR: &str = \"panic occurred\\n\";\n+            libc::write(libc::STDERR_FILENO, PSTR as *const _ as _, PSTR.len());\n+        }\n+        libc::exit(1)\n+    }\n+}\n+\n+#[derive(Debug)]\n+struct Page([[u64; 32]; 16]);\n+\n+#[start]\n+pub fn main(_argc: isize, _argv: *const *const u8) -> isize {\n+    let zero = Box::<Page>::new_zeroed();\n+    let zero = unsafe { zero.assume_init() };\n+    helper::work_with(&zero);\n+    1\n+}"}, {"sha": "4d68160379d9cdc5b001e7c3f276466414feec4e", "filename": "src/test/ui/allocator/no_std-alloc-error-handler-default.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/0d37dca25a51fb900a402c94c8818ad1c2789e30/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d37dca25a51fb900a402c94c8818ad1c2789e30/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-default.rs?ref=0d37dca25a51fb900a402c94c8818ad1c2789e30", "patch": "@@ -0,0 +1,84 @@\n+// run-pass\n+// ignore-android no libc\n+// ignore-cloudabi no libc\n+// ignore-emscripten no libc\n+// ignore-sgx no libc\n+// ignore-wasm32 no libc\n+// only-linux\n+// compile-flags:-C panic=abort\n+// aux-build:helper.rs\n+// gate-test-default_alloc_error_handler\n+\n+#![feature(start, rustc_private, new_uninit, panic_info_message)]\n+#![feature(default_alloc_error_handler)]\n+#![no_std]\n+\n+extern crate alloc;\n+extern crate libc;\n+\n+// ARM targets need these symbols\n+#[no_mangle]\n+pub fn __aeabi_unwind_cpp_pr0() {}\n+\n+#[no_mangle]\n+pub fn __aeabi_unwind_cpp_pr1() {}\n+\n+use alloc::boxed::Box;\n+use core::alloc::{GlobalAlloc, Layout};\n+use core::ptr::null_mut;\n+\n+extern crate helper;\n+\n+struct MyAllocator;\n+\n+unsafe impl GlobalAlloc for MyAllocator {\n+    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n+        if layout.size() < 4096 {\n+            libc::malloc(layout.size()) as _\n+        } else {\n+            null_mut()\n+        }\n+    }\n+    unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {}\n+}\n+\n+#[global_allocator]\n+static A: MyAllocator = MyAllocator;\n+\n+#[panic_handler]\n+fn panic(panic_info: &core::panic::PanicInfo) -> ! {\n+    unsafe {\n+        if let Some(s) = panic_info.payload().downcast_ref::<&str>() {\n+            const PSTR: &str = \"panic occurred: \";\n+            const CR: &str = \"\\n\";\n+            libc::write(libc::STDERR_FILENO, PSTR as *const _ as _, PSTR.len());\n+            libc::write(libc::STDERR_FILENO, s as *const _ as _, s.len());\n+            libc::write(libc::STDERR_FILENO, CR as *const _ as _, CR.len());\n+        }\n+        if let Some(args) = panic_info.message() {\n+            let mut s = alloc::string::String::new();\n+            alloc::fmt::write(&mut s, *args).unwrap();\n+            let s = s.as_str();\n+            const PSTR: &str = \"panic occurred: \";\n+            const CR: &str = \"\\n\";\n+            libc::write(libc::STDERR_FILENO, PSTR as *const _ as _, PSTR.len());\n+            libc::write(libc::STDERR_FILENO, s as *const _ as _, s.len());\n+            libc::write(libc::STDERR_FILENO, CR as *const _ as _, CR.len());\n+        } else {\n+            const PSTR: &str = \"panic occurred\\n\";\n+            libc::write(libc::STDERR_FILENO, PSTR as *const _ as _, PSTR.len());\n+        }\n+        libc::exit(0)\n+    }\n+}\n+\n+#[derive(Debug)]\n+struct Page([[u64; 32]; 16]);\n+\n+#[start]\n+pub fn main(_argc: isize, _argv: *const *const u8) -> isize {\n+    let zero = Box::<Page>::new_zeroed();\n+    let zero = unsafe { zero.assume_init() };\n+    helper::work_with(&zero);\n+    1\n+}"}, {"sha": "511d0788b40a7fdf757264353cc88374341ad114", "filename": "src/test/ui/missing/missing-alloc_error_handler.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d37dca25a51fb900a402c94c8818ad1c2789e30/src%2Ftest%2Fui%2Fmissing%2Fmissing-alloc_error_handler.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d37dca25a51fb900a402c94c8818ad1c2789e30/src%2Ftest%2Fui%2Fmissing%2Fmissing-alloc_error_handler.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-alloc_error_handler.stderr?ref=0d37dca25a51fb900a402c94c8818ad1c2789e30", "patch": "@@ -1,4 +1,6 @@\n-error: `#[alloc_error_handler]` function required, but not found\n+error: `#[alloc_error_handler]` function required, but not found.\n+\n+note: Use `#![feature(default_alloc_error_handler)]` for a default error handler.\n \n error: aborting due to previous error\n "}]}