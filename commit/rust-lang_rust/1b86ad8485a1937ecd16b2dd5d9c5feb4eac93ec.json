{"sha": "1b86ad8485a1937ecd16b2dd5d9c5feb4eac93ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiODZhZDg0ODVhMTkzN2VjZDE2YjJkZDVkOWM1ZmViNGVhYzkzZWM=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-02-12T00:36:05Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-02-16T03:00:38Z"}, "message": "Treat read of COpy types via refs as not move in move-closure", "tree": {"sha": "3c9d6c594dd7b90339654f1bc6f823c74ab29722", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c9d6c594dd7b90339654f1bc6f823c74ab29722"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b86ad8485a1937ecd16b2dd5d9c5feb4eac93ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b86ad8485a1937ecd16b2dd5d9c5feb4eac93ec", "html_url": "https://github.com/rust-lang/rust/commit/1b86ad8485a1937ecd16b2dd5d9c5feb4eac93ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b86ad8485a1937ecd16b2dd5d9c5feb4eac93ec/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e39c3c05a472a7b4ecb2e3f93f1b7f299ea18664", "url": "https://api.github.com/repos/rust-lang/rust/commits/e39c3c05a472a7b4ecb2e3f93f1b7f299ea18664", "html_url": "https://github.com/rust-lang/rust/commit/e39c3c05a472a7b4ecb2e3f93f1b7f299ea18664"}], "stats": {"total": 291, "additions": 256, "deletions": 35}, "files": [{"sha": "fbbc1fba8771fc4181710711115257259abd4344", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1b86ad8485a1937ecd16b2dd5d9c5feb4eac93ec/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b86ad8485a1937ecd16b2dd5d9c5feb4eac93ec/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=1b86ad8485a1937ecd16b2dd5d9c5feb4eac93ec", "patch": "@@ -1116,14 +1116,21 @@ impl<'a, 'tcx> InferBorrowKind<'a, 'tcx> {\n             place_with_id, diag_expr_id, mode\n         );\n \n-        let place = truncate_capture_for_move(place_with_id.place.clone());\n         match (self.capture_clause, mode) {\n             // In non-move closures, we only care about moves\n             (hir::CaptureBy::Ref, euv::Copy) => return,\n \n+            // We want to capture Copy types that read through a ref via a reborrow\n+            (hir::CaptureBy::Value, euv::Copy)\n+                if place_with_id.place.deref_tys().any(ty::TyS::is_ref) =>\n+            {\n+                return;\n+            }\n+\n             (hir::CaptureBy::Ref, euv::Move) | (hir::CaptureBy::Value, euv::Move | euv::Copy) => {}\n         };\n \n+        let place = truncate_capture_for_move(place_with_id.place.clone());\n         let place_with_id = PlaceWithHirId { place: place.clone(), hir_id: place_with_id.hir_id };\n \n         if !self.capture_information.contains_key(&place) {"}, {"sha": "1c574da5f48bc24bc182d975425e72eaf1226466", "filename": "src/test/ui/closures/2229_closure_analysis/move_closure.rs", "status": "modified", "additions": 81, "deletions": 12, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/1b86ad8485a1937ecd16b2dd5d9c5feb4eac93ec/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b86ad8485a1937ecd16b2dd5d9c5feb4eac93ec/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.rs?ref=1b86ad8485a1937ecd16b2dd5d9c5feb4eac93ec", "patch": "@@ -6,7 +6,25 @@\n //~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n #![feature(rustc_attrs)]\n \n-// Test we truncate derefs properly\n+fn simple_move_closure() {\n+    struct S(String);\n+    struct T(S);\n+\n+    let t = T(S(\"s\".into()));\n+    let mut c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n+    move || {\n+    //~^ ERROR: First Pass analysis includes:\n+    //~| ERROR: Min Capture analysis includes:\n+        t.0.0 = \"new S\".into();\n+        //~^ NOTE: Capturing t[(0, 0),(0, 0)] -> ByValue\n+        //~| NOTE: Min Capture t[(0, 0),(0, 0)] -> ByValue\n+    };\n+    c();\n+}\n+\n+// Test move closure use reborrows when using references\n fn simple_ref() {\n     let mut s = 10;\n     let ref_s = &mut s;\n@@ -24,8 +42,8 @@ fn simple_ref() {\n     c();\n }\n \n-// Test we truncate derefs properly\n-fn struct_contains_ref_to_another_struct() {\n+// Test move closure use reborrows when using references\n+fn struct_contains_ref_to_another_struct_1() {\n     struct S(String);\n     struct T<'a>(&'a mut S);\n \n@@ -46,27 +64,78 @@ fn struct_contains_ref_to_another_struct() {\n     c();\n }\n \n-// Test that we don't reduce precision when there is nothing deref.\n-fn no_ref() {\n+// Test that we can use reborrows to read data of Copy types\n+// i.e. without truncating derefs\n+fn struct_contains_ref_to_another_struct_2() {\n+    struct S(i32);\n+    struct T<'a>(&'a S);\n+\n+    let s = S(0);\n+    let t = T(&s);\n+\n+    let mut c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n+    move || {\n+    //~^ ERROR: First Pass analysis includes:\n+    //~| ERROR: Min Capture analysis includes:\n+        let _t = t.0.0;\n+        //~^ NOTE: Capturing t[(0, 0),Deref,(0, 0)] -> ImmBorrow\n+        //~| NOTE: Min Capture t[(0, 0),Deref,(0, 0)] -> ImmBorrow\n+    };\n+\n+    c();\n+}\n+\n+// Test that we can use truncate to move out of !Copy types\n+fn struct_contains_ref_to_another_struct_3() {\n     struct S(String);\n-    struct T(S);\n+    struct T<'a>(&'a S);\n+\n+    let s = S(\"s\".into());\n+    let t = T(&s);\n \n-    let t = T(S(\"s\".into()));\n     let mut c = #[rustc_capture_analysis]\n     //~^ ERROR: attributes on expressions are experimental\n     //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n     move || {\n     //~^ ERROR: First Pass analysis includes:\n     //~| ERROR: Min Capture analysis includes:\n-        t.0.0 = \"new S\".into();\n-        //~^ NOTE: Capturing t[(0, 0),(0, 0)] -> ByValue\n-        //~| NOTE: Min Capture t[(0, 0),(0, 0)] -> ByValue\n+        let _t = t.0.0;\n+        //~^ NOTE: Capturing t[(0, 0),Deref,(0, 0)] -> ImmBorrow\n+        //~| NOTE: Capturing t[(0, 0)] -> ByValue\n+        //~| NOTE: Min Capture t[(0, 0)] -> ByValue\n+    };\n+\n+    c();\n+}\n+\n+// Test that derefs of box are truncated in move closures\n+fn truncate_box_derefs() {\n+    struct S(i32);\n+\n+    let b = Box::new(S(10));\n+\n+    let c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n+    move || {\n+    //~^ ERROR: First Pass analysis includes:\n+    //~| ERROR: Min Capture analysis includes:\n+        let _t = b.0;\n+        //~^ NOTE: Capturing b[Deref,(0, 0)] -> ByValue\n+        //~| NOTE: Capturing b[] -> ByValue\n+        //~| NOTE: Min Capture b[] -> ByValue\n     };\n+\n     c();\n }\n \n fn main() {\n+    simple_move_closure();\n     simple_ref();\n-    struct_contains_ref_to_another_struct();\n-    no_ref();\n+    struct_contains_ref_to_another_struct_1();\n+    struct_contains_ref_to_another_struct_2();\n+    struct_contains_ref_to_another_struct_3();\n+    truncate_box_derefs();\n }"}, {"sha": "b91ef4dd85c487118d3ac1509fb9c2fc0c11054d", "filename": "src/test/ui/closures/2229_closure_analysis/move_closure.stderr", "status": "modified", "additions": 167, "deletions": 22, "changes": 189, "blob_url": "https://github.com/rust-lang/rust/blob/1b86ad8485a1937ecd16b2dd5d9c5feb4eac93ec/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b86ad8485a1937ecd16b2dd5d9c5feb4eac93ec/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.stderr?ref=1b86ad8485a1937ecd16b2dd5d9c5feb4eac93ec", "patch": "@@ -8,7 +8,7 @@ LL |     let mut c = #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/move_closure.rs:35:17\n+  --> $DIR/move_closure.rs:32:17\n    |\n LL |     let mut c = #[rustc_capture_analysis]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,14 +17,41 @@ LL |     let mut c = #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/move_closure.rs:55:17\n+  --> $DIR/move_closure.rs:53:17\n    |\n LL |     let mut c = #[rustc_capture_analysis]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/move_closure.rs:76:17\n+   |\n+LL |     let mut c = #[rustc_capture_analysis]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/move_closure.rs:98:17\n+   |\n+LL |     let mut c = #[rustc_capture_analysis]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/move_closure.rs:119:13\n+   |\n+LL |     let c = #[rustc_capture_analysis]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/move_closure.rs:3:12\n    |\n@@ -40,20 +67,56 @@ error: First Pass analysis includes:\n LL | /     move || {\n LL | |\n LL | |\n+LL | |         t.0.0 = \"new S\".into();\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing t[(0, 0),(0, 0)] -> ByValue\n+  --> $DIR/move_closure.rs:20:9\n+   |\n+LL |         t.0.0 = \"new S\".into();\n+   |         ^^^^^\n+\n+error: Min Capture analysis includes:\n+  --> $DIR/move_closure.rs:17:5\n+   |\n+LL | /     move || {\n+LL | |\n+LL | |\n+LL | |         t.0.0 = \"new S\".into();\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture t[(0, 0),(0, 0)] -> ByValue\n+  --> $DIR/move_closure.rs:20:9\n+   |\n+LL |         t.0.0 = \"new S\".into();\n+   |         ^^^^^\n+\n+error: First Pass analysis includes:\n+  --> $DIR/move_closure.rs:35:5\n+   |\n+LL | /     move || {\n+LL | |\n+LL | |\n LL | |         *ref_s += 10;\n LL | |\n LL | |\n LL | |     };\n    | |_____^\n    |\n note: Capturing ref_s[Deref] -> UniqueImmBorrow\n-  --> $DIR/move_closure.rs:20:9\n+  --> $DIR/move_closure.rs:38:9\n    |\n LL |         *ref_s += 10;\n    |         ^^^^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/move_closure.rs:17:5\n+  --> $DIR/move_closure.rs:35:5\n    |\n LL | /     move || {\n LL | |\n@@ -65,13 +128,13 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture ref_s[Deref] -> UniqueImmBorrow\n-  --> $DIR/move_closure.rs:20:9\n+  --> $DIR/move_closure.rs:38:9\n    |\n LL |         *ref_s += 10;\n    |         ^^^^^^\n \n error: First Pass analysis includes:\n-  --> $DIR/move_closure.rs:38:5\n+  --> $DIR/move_closure.rs:56:5\n    |\n LL | /     move || {\n LL | |\n@@ -83,13 +146,13 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing t[(0, 0),Deref,(0, 0)] -> UniqueImmBorrow\n-  --> $DIR/move_closure.rs:41:9\n+  --> $DIR/move_closure.rs:59:9\n    |\n LL |         t.0.0 = \"new s\".into();\n    |         ^^^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/move_closure.rs:38:5\n+  --> $DIR/move_closure.rs:56:5\n    |\n LL | /     move || {\n LL | |\n@@ -101,47 +164,129 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture t[(0, 0),Deref,(0, 0)] -> UniqueImmBorrow\n-  --> $DIR/move_closure.rs:41:9\n+  --> $DIR/move_closure.rs:59:9\n    |\n LL |         t.0.0 = \"new s\".into();\n    |         ^^^^^\n \n error: First Pass analysis includes:\n-  --> $DIR/move_closure.rs:58:5\n+  --> $DIR/move_closure.rs:79:5\n    |\n LL | /     move || {\n LL | |\n LL | |\n-LL | |         t.0.0 = \"new S\".into();\n+LL | |         let _t = t.0.0;\n LL | |\n LL | |\n LL | |     };\n    | |_____^\n    |\n-note: Capturing t[(0, 0),(0, 0)] -> ByValue\n-  --> $DIR/move_closure.rs:61:9\n+note: Capturing t[(0, 0),Deref,(0, 0)] -> ImmBorrow\n+  --> $DIR/move_closure.rs:82:18\n    |\n-LL |         t.0.0 = \"new S\".into();\n-   |         ^^^^^\n+LL |         let _t = t.0.0;\n+   |                  ^^^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/move_closure.rs:58:5\n+  --> $DIR/move_closure.rs:79:5\n    |\n LL | /     move || {\n LL | |\n LL | |\n-LL | |         t.0.0 = \"new S\".into();\n+LL | |         let _t = t.0.0;\n LL | |\n LL | |\n LL | |     };\n    | |_____^\n    |\n-note: Min Capture t[(0, 0),(0, 0)] -> ByValue\n-  --> $DIR/move_closure.rs:61:9\n+note: Min Capture t[(0, 0),Deref,(0, 0)] -> ImmBorrow\n+  --> $DIR/move_closure.rs:82:18\n    |\n-LL |         t.0.0 = \"new S\".into();\n-   |         ^^^^^\n+LL |         let _t = t.0.0;\n+   |                  ^^^^^\n+\n+error: First Pass analysis includes:\n+  --> $DIR/move_closure.rs:101:5\n+   |\n+LL | /     move || {\n+LL | |\n+LL | |\n+LL | |         let _t = t.0.0;\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing t[(0, 0),Deref,(0, 0)] -> ImmBorrow\n+  --> $DIR/move_closure.rs:104:18\n+   |\n+LL |         let _t = t.0.0;\n+   |                  ^^^^^\n+note: Capturing t[(0, 0)] -> ByValue\n+  --> $DIR/move_closure.rs:104:18\n+   |\n+LL |         let _t = t.0.0;\n+   |                  ^^^^^\n+\n+error: Min Capture analysis includes:\n+  --> $DIR/move_closure.rs:101:5\n+   |\n+LL | /     move || {\n+LL | |\n+LL | |\n+LL | |         let _t = t.0.0;\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture t[(0, 0)] -> ByValue\n+  --> $DIR/move_closure.rs:104:18\n+   |\n+LL |         let _t = t.0.0;\n+   |                  ^^^^^\n+\n+error: First Pass analysis includes:\n+  --> $DIR/move_closure.rs:122:5\n+   |\n+LL | /     move || {\n+LL | |\n+LL | |\n+LL | |         let _t = b.0;\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing b[Deref,(0, 0)] -> ByValue\n+  --> $DIR/move_closure.rs:125:18\n+   |\n+LL |         let _t = b.0;\n+   |                  ^^^\n+note: Capturing b[] -> ByValue\n+  --> $DIR/move_closure.rs:125:18\n+   |\n+LL |         let _t = b.0;\n+   |                  ^^^\n+\n+error: Min Capture analysis includes:\n+  --> $DIR/move_closure.rs:122:5\n+   |\n+LL | /     move || {\n+LL | |\n+LL | |\n+LL | |         let _t = b.0;\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture b[] -> ByValue\n+  --> $DIR/move_closure.rs:125:18\n+   |\n+LL |         let _t = b.0;\n+   |                  ^^^\n \n-error: aborting due to 9 previous errors; 1 warning emitted\n+error: aborting due to 18 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0658`."}]}