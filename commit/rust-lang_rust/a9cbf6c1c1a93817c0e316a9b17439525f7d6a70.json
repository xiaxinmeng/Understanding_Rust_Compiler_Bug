{"sha": "a9cbf6c1c1a93817c0e316a9b17439525f7d6a70", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5Y2JmNmMxYzFhOTM4MTdjMGUzMTZhOWIxNzQzOTUyNWY3ZDZhNzA=", "commit": {"author": {"name": "Ricardo Martins", "email": "ricardo@scarybox.net", "date": "2015-10-31T23:07:10Z"}, "committer": {"name": "Ricardo Martins", "email": "ricardo@scarybox.net", "date": "2015-11-02T09:17:17Z"}, "message": "Accept tabs as indentation character\n\nA line may be indented with both spaces or tabs. All leading whitespace\nis trimmed, even if it is mixed.", "tree": {"sha": "773b0d0d89567ed714a7ad68d77fb96a48d20657", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/773b0d0d89567ed714a7ad68d77fb96a48d20657"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9cbf6c1c1a93817c0e316a9b17439525f7d6a70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9cbf6c1c1a93817c0e316a9b17439525f7d6a70", "html_url": "https://github.com/rust-lang/rust/commit/a9cbf6c1c1a93817c0e316a9b17439525f7d6a70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9cbf6c1c1a93817c0e316a9b17439525f7d6a70/comments", "author": {"login": "meqif", "id": 1706, "node_id": "MDQ6VXNlcjE3MDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1706?v=4", "gravatar_id": "", "url": "https://api.github.com/users/meqif", "html_url": "https://github.com/meqif", "followers_url": "https://api.github.com/users/meqif/followers", "following_url": "https://api.github.com/users/meqif/following{/other_user}", "gists_url": "https://api.github.com/users/meqif/gists{/gist_id}", "starred_url": "https://api.github.com/users/meqif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/meqif/subscriptions", "organizations_url": "https://api.github.com/users/meqif/orgs", "repos_url": "https://api.github.com/users/meqif/repos", "events_url": "https://api.github.com/users/meqif/events{/privacy}", "received_events_url": "https://api.github.com/users/meqif/received_events", "type": "User", "site_admin": false}, "committer": {"login": "meqif", "id": 1706, "node_id": "MDQ6VXNlcjE3MDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1706?v=4", "gravatar_id": "", "url": "https://api.github.com/users/meqif", "html_url": "https://github.com/meqif", "followers_url": "https://api.github.com/users/meqif/followers", "following_url": "https://api.github.com/users/meqif/following{/other_user}", "gists_url": "https://api.github.com/users/meqif/gists{/gist_id}", "starred_url": "https://api.github.com/users/meqif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/meqif/subscriptions", "organizations_url": "https://api.github.com/users/meqif/orgs", "repos_url": "https://api.github.com/users/meqif/repos", "events_url": "https://api.github.com/users/meqif/events{/privacy}", "received_events_url": "https://api.github.com/users/meqif/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a2eaffb63aefba666f55abd992c5e2900654f06", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a2eaffb63aefba666f55abd992c5e2900654f06", "html_url": "https://github.com/rust-lang/rust/commit/1a2eaffb63aefba666f55abd992c5e2900654f06"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "a09ca95dceaa4c364bc30cc1217aa7378b17d2b9", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a9cbf6c1c1a93817c0e316a9b17439525f7d6a70/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9cbf6c1c1a93817c0e316a9b17439525f7d6a70/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=a9cbf6c1c1a93817c0e316a9b17439525f7d6a70", "patch": "@@ -331,18 +331,18 @@ pub fn unindent(s: &str) -> String {\n             min_indent\n         } else {\n             saw_first_line = true;\n-            let mut spaces = 0;\n+            let mut whitespace = 0;\n             line.chars().all(|char| {\n-                // Only comparing against space because I wouldn't\n-                // know what to do with mixed whitespace chars\n-                if char == ' ' {\n-                    spaces += 1;\n+                // Compare against either space or tab, ignoring whether they\n+                // are mixed or not\n+                if char == ' ' || char == '\\t' {\n+                    whitespace += 1;\n                     true\n                 } else {\n                     false\n                 }\n             });\n-            cmp::min(min_indent, spaces)\n+            cmp::min(min_indent, whitespace)\n         }\n     });\n \n@@ -407,4 +407,22 @@ mod unindent_tests {\n         let r = unindent(&s);\n         assert_eq!(r, \"line1\\n\\n    line2\");\n     }\n+\n+    #[test]\n+    fn should_unindent_tabs() {\n+        let s = \"\\tline1\\n\\tline2\".to_string();\n+        let r = unindent(&s);\n+        assert_eq!(r, \"line1\\nline2\");\n+    }\n+\n+    #[test]\n+    fn should_trim_mixed_indentation() {\n+        let s = \"\\t    line1\\n\\t    line2\".to_string();\n+        let r = unindent(&s);\n+        assert_eq!(r, \"line1\\nline2\");\n+\n+        let s = \"    \\tline1\\n    \\tline2\".to_string();\n+        let r = unindent(&s);\n+        assert_eq!(r, \"line1\\nline2\");\n+    }\n }"}]}