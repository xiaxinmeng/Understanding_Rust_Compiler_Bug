{"sha": "5d128cdca8763fd0281989e7cc211652895eed21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMTI4Y2RjYTg3NjNmZDAyODE5ODllN2NjMjExNjUyODk1ZWVkMjE=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-02-15T09:52:26Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-03-27T23:27:59Z"}, "message": "Make Steal thread-safe", "tree": {"sha": "828a3b4131f7fb85ed29298f0f6c0efb3b76f3b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/828a3b4131f7fb85ed29298f0f6c0efb3b76f3b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d128cdca8763fd0281989e7cc211652895eed21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d128cdca8763fd0281989e7cc211652895eed21", "html_url": "https://github.com/rust-lang/rust/commit/5d128cdca8763fd0281989e7cc211652895eed21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d128cdca8763fd0281989e7cc211652895eed21/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "962a53d4741e4e2e514f49d9b13831f3cd4e7b48", "url": "https://api.github.com/repos/rust-lang/rust/commits/962a53d4741e4e2e514f49d9b13831f3cd4e7b48", "html_url": "https://github.com/rust-lang/rust/commit/962a53d4741e4e2e514f49d9b13831f3cd4e7b48"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "842c0d6573432fb962057b3432bb4707f75f3048", "filename": "src/librustc/ty/steal.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5d128cdca8763fd0281989e7cc211652895eed21/src%2Flibrustc%2Fty%2Fsteal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d128cdca8763fd0281989e7cc211652895eed21/src%2Flibrustc%2Fty%2Fsteal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsteal.rs?ref=5d128cdca8763fd0281989e7cc211652895eed21", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::cell::{Ref, RefCell};\n+use rustc_data_structures::sync::{RwLock, ReadGuard};\n use std::mem;\n \n /// The `Steal` struct is intended to used as the value for a query.\n@@ -32,25 +32,25 @@ use std::mem;\n ///\n /// FIXME(#41710) -- what is the best way to model linear queries?\n pub struct Steal<T> {\n-    value: RefCell<Option<T>>\n+    value: RwLock<Option<T>>\n }\n \n impl<T> Steal<T> {\n     pub fn new(value: T) -> Self {\n         Steal {\n-            value: RefCell::new(Some(value))\n+            value: RwLock::new(Some(value))\n         }\n     }\n \n-    pub fn borrow(&self) -> Ref<T> {\n-        Ref::map(self.value.borrow(), |opt| match *opt {\n+    pub fn borrow(&self) -> ReadGuard<T> {\n+        ReadGuard::map(self.value.borrow(), |opt| match *opt {\n             None => bug!(\"attempted to read from stolen value\"),\n             Some(ref v) => v\n         })\n     }\n \n     pub fn steal(&self) -> T {\n-        let value_ref = &mut *self.value.borrow_mut();\n+        let value_ref = &mut *self.value.try_write().expect(\"stealing value which is locked\");\n         let value = mem::replace(value_ref, None);\n         value.expect(\"attempt to read from stolen value\")\n     }"}, {"sha": "2049a146a0f02c85bad4d846edeaf3d9e581abcc", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d128cdca8763fd0281989e7cc211652895eed21/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d128cdca8763fd0281989e7cc211652895eed21/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=5d128cdca8763fd0281989e7cc211652895eed21", "patch": "@@ -128,7 +128,7 @@ fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId)\n     // Note that `mir_validated` is a \"stealable\" result; the\n     // thief, `optimized_mir()`, forces borrowck, so we know that\n     // is not yet stolen.\n-    tcx.mir_validated(owner_def_id).borrow();\n+    ty::maps::queries::mir_validated::ensure(tcx, owner_def_id);\n \n     // option dance because you can't capture an uninitialized variable\n     // by mut-ref."}]}