{"sha": "bb1b5cdde26cc5055fb6b3f1a5ff22a1e16db72b", "node_id": "C_kwDOAAsO6NoAKGJiMWI1Y2RkZTI2Y2M1MDU1ZmI2YjNmMWE1ZmYyMmExZTE2ZGI3MmI", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-30T17:23:01Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-30T17:23:01Z"}, "message": "Remove validate_atomic_type\n\nBy expanding it in place. Also extract a common\nreport_atomic_type_validation_error function to reduce code duplication.", "tree": {"sha": "87a9eb57a10678324cd5ddd393bbd3d23dbeee89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87a9eb57a10678324cd5ddd393bbd3d23dbeee89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb1b5cdde26cc5055fb6b3f1a5ff22a1e16db72b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb1b5cdde26cc5055fb6b3f1a5ff22a1e16db72b", "html_url": "https://github.com/rust-lang/rust/commit/bb1b5cdde26cc5055fb6b3f1a5ff22a1e16db72b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb1b5cdde26cc5055fb6b3f1a5ff22a1e16db72b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5efd7782b33e396a8206fb7c919bede2a3a03a75", "url": "https://api.github.com/repos/rust-lang/rust/commits/5efd7782b33e396a8206fb7c919bede2a3a03a75", "html_url": "https://github.com/rust-lang/rust/commit/5efd7782b33e396a8206fb7c919bede2a3a03a75"}], "stats": {"total": 144, "additions": 114, "deletions": 30}, "files": [{"sha": "a93887a76052d23d4f634ca145e5645990207237", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 114, "deletions": 30, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/bb1b5cdde26cc5055fb6b3f1a5ff22a1e16db72b/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb1b5cdde26cc5055fb6b3f1a5ff22a1e16db72b/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=bb1b5cdde26cc5055fb6b3f1a5ff22a1e16db72b", "patch": "@@ -62,22 +62,21 @@ macro intrinsic_match {\n     }\n }\n \n-macro validate_atomic_type($fx:ident, $intrinsic:ident, $span:ident, $ty:expr) {\n-    match $ty.kind() {\n-        ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n-        _ => {\n-            $fx.tcx.sess.span_err(\n-                $span,\n-                &format!(\n-                    \"`{}` intrinsic: expected basic integer or raw pointer type, found `{:?}`\",\n-                    $intrinsic, $ty\n-                ),\n-            );\n-            // Prevent verifier error\n-            crate::trap::trap_unreachable($fx, \"compilation should not have succeeded\");\n-            return;\n-        }\n-    }\n+fn report_atomic_type_validation_error<'tcx>(\n+    fx: &mut FunctionCx<'_, '_, 'tcx>,\n+    intrinsic: Symbol,\n+    span: Span,\n+    ty: Ty<'tcx>,\n+) {\n+    fx.tcx.sess.span_err(\n+        span,\n+        &format!(\n+            \"`{}` intrinsic: expected basic integer or raw pointer type, found `{:?}`\",\n+            intrinsic, ty\n+        ),\n+    );\n+    // Prevent verifier error\n+    crate::trap::trap_unreachable(fx, \"compilation should not have succeeded\");\n }\n \n pub(crate) fn clif_vector_type<'tcx>(tcx: TyCtxt<'tcx>, layout: TyAndLayout<'tcx>) -> Option<Type> {\n@@ -743,7 +742,13 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         };\n         _ if intrinsic.as_str().starts_with(\"atomic_load\"), (v ptr) {\n             let ty = substs.type_at(0);\n-            validate_atomic_type!(fx, intrinsic, span, ty);\n+            match ty.kind() {\n+                ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n+                _ => {\n+                    report_atomic_type_validation_error(fx, intrinsic, span, ty);\n+                    return;\n+                }\n+            }\n             let clif_ty = fx.clif_type(ty).unwrap();\n \n             let val = fx.bcx.ins().atomic_load(clif_ty, MemFlags::trusted(), ptr);\n@@ -752,15 +757,28 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             ret.write_cvalue(fx, val);\n         };\n         _ if intrinsic.as_str().starts_with(\"atomic_store\"), (v ptr, c val) {\n-            validate_atomic_type!(fx, intrinsic, span, val.layout().ty);\n+            let ty = substs.type_at(0);\n+            match ty.kind() {\n+                ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n+                _ => {\n+                    report_atomic_type_validation_error(fx, intrinsic, span, ty);\n+                    return;\n+                }\n+            }\n \n             let val = val.load_scalar(fx);\n \n             fx.bcx.ins().atomic_store(MemFlags::trusted(), val, ptr);\n         };\n         _ if intrinsic.as_str().starts_with(\"atomic_xchg\"), (v ptr, c new) {\n             let layout = new.layout();\n-            validate_atomic_type!(fx, intrinsic, span, layout.ty);\n+            match layout.ty.kind() {\n+                ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n+                _ => {\n+                    report_atomic_type_validation_error(fx, intrinsic, span, layout.ty);\n+                    return;\n+                }\n+            }\n             let ty = fx.clif_type(layout.ty).unwrap();\n \n             let new = new.load_scalar(fx);\n@@ -772,7 +790,13 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         };\n         _ if intrinsic.as_str().starts_with(\"atomic_cxchg\"), (v ptr, c test_old, c new) { // both atomic_cxchg_* and atomic_cxchgweak_*\n             let layout = new.layout();\n-            validate_atomic_type!(fx, intrinsic, span, layout.ty);\n+            match layout.ty.kind() {\n+                ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n+                _ => {\n+                    report_atomic_type_validation_error(fx, intrinsic, span, layout.ty);\n+                    return;\n+                }\n+            }\n \n             let test_old = test_old.load_scalar(fx);\n             let new = new.load_scalar(fx);\n@@ -786,7 +810,13 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n         _ if intrinsic.as_str().starts_with(\"atomic_xadd\"), (v ptr, c amount) {\n             let layout = amount.layout();\n-            validate_atomic_type!(fx, intrinsic, span, layout.ty);\n+            match layout.ty.kind() {\n+                ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n+                _ => {\n+                    report_atomic_type_validation_error(fx, intrinsic, span, layout.ty);\n+                    return;\n+                }\n+            }\n             let ty = fx.clif_type(layout.ty).unwrap();\n \n             let amount = amount.load_scalar(fx);\n@@ -798,7 +828,13 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         };\n         _ if intrinsic.as_str().starts_with(\"atomic_xsub\"), (v ptr, c amount) {\n             let layout = amount.layout();\n-            validate_atomic_type!(fx, intrinsic, span, layout.ty);\n+            match layout.ty.kind() {\n+                ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n+                _ => {\n+                    report_atomic_type_validation_error(fx, intrinsic, span, layout.ty);\n+                    return;\n+                }\n+            }\n             let ty = fx.clif_type(layout.ty).unwrap();\n \n             let amount = amount.load_scalar(fx);\n@@ -810,7 +846,13 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         };\n         _ if intrinsic.as_str().starts_with(\"atomic_and\"), (v ptr, c src) {\n             let layout = src.layout();\n-            validate_atomic_type!(fx, intrinsic, span, layout.ty);\n+            match layout.ty.kind() {\n+                ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n+                _ => {\n+                    report_atomic_type_validation_error(fx, intrinsic, span, layout.ty);\n+                    return;\n+                }\n+            }\n             let ty = fx.clif_type(layout.ty).unwrap();\n \n             let src = src.load_scalar(fx);\n@@ -822,7 +864,13 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         };\n         _ if intrinsic.as_str().starts_with(\"atomic_or\"), (v ptr, c src) {\n             let layout = src.layout();\n-            validate_atomic_type!(fx, intrinsic, span, layout.ty);\n+            match layout.ty.kind() {\n+                ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n+                _ => {\n+                    report_atomic_type_validation_error(fx, intrinsic, span, layout.ty);\n+                    return;\n+                }\n+            }\n             let ty = fx.clif_type(layout.ty).unwrap();\n \n             let src = src.load_scalar(fx);\n@@ -834,7 +882,13 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         };\n         _ if intrinsic.as_str().starts_with(\"atomic_xor\"), (v ptr, c src) {\n             let layout = src.layout();\n-            validate_atomic_type!(fx, intrinsic, span, layout.ty);\n+            match layout.ty.kind() {\n+                ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n+                _ => {\n+                    report_atomic_type_validation_error(fx, intrinsic, span, layout.ty);\n+                    return;\n+                }\n+            }\n             let ty = fx.clif_type(layout.ty).unwrap();\n \n             let src = src.load_scalar(fx);\n@@ -846,7 +900,13 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         };\n         _ if intrinsic.as_str().starts_with(\"atomic_nand\"), (v ptr, c src) {\n             let layout = src.layout();\n-            validate_atomic_type!(fx, intrinsic, span, layout.ty);\n+            match layout.ty.kind() {\n+                ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n+                _ => {\n+                    report_atomic_type_validation_error(fx, intrinsic, span, layout.ty);\n+                    return;\n+                }\n+            }\n             let ty = fx.clif_type(layout.ty).unwrap();\n \n             let src = src.load_scalar(fx);\n@@ -858,7 +918,13 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         };\n         _ if intrinsic.as_str().starts_with(\"atomic_max\"), (v ptr, c src) {\n             let layout = src.layout();\n-            validate_atomic_type!(fx, intrinsic, span, layout.ty);\n+            match layout.ty.kind() {\n+                ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n+                _ => {\n+                    report_atomic_type_validation_error(fx, intrinsic, span, layout.ty);\n+                    return;\n+                }\n+            }\n             let ty = fx.clif_type(layout.ty).unwrap();\n \n             let src = src.load_scalar(fx);\n@@ -870,7 +936,13 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         };\n         _ if intrinsic.as_str().starts_with(\"atomic_umax\"), (v ptr, c src) {\n             let layout = src.layout();\n-            validate_atomic_type!(fx, intrinsic, span, layout.ty);\n+            match layout.ty.kind() {\n+                ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n+                _ => {\n+                    report_atomic_type_validation_error(fx, intrinsic, span, layout.ty);\n+                    return;\n+                }\n+            }\n             let ty = fx.clif_type(layout.ty).unwrap();\n \n             let src = src.load_scalar(fx);\n@@ -882,7 +954,13 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         };\n         _ if intrinsic.as_str().starts_with(\"atomic_min\"), (v ptr, c src) {\n             let layout = src.layout();\n-            validate_atomic_type!(fx, intrinsic, span, layout.ty);\n+            match layout.ty.kind() {\n+                ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n+                _ => {\n+                    report_atomic_type_validation_error(fx, intrinsic, span, layout.ty);\n+                    return;\n+                }\n+            }\n             let ty = fx.clif_type(layout.ty).unwrap();\n \n             let src = src.load_scalar(fx);\n@@ -894,7 +972,13 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         };\n         _ if intrinsic.as_str().starts_with(\"atomic_umin\"), (v ptr, c src) {\n             let layout = src.layout();\n-            validate_atomic_type!(fx, intrinsic, span, layout.ty);\n+            match layout.ty.kind() {\n+                ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n+                _ => {\n+                    report_atomic_type_validation_error(fx, intrinsic, span, layout.ty);\n+                    return;\n+                }\n+            }\n             let ty = fx.clif_type(layout.ty).unwrap();\n \n             let src = src.load_scalar(fx);"}]}