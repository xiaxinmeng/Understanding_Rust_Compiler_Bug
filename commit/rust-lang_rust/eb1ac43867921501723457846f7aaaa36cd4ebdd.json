{"sha": "eb1ac43867921501723457846f7aaaa36cd4ebdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMWFjNDM4Njc5MjE1MDE3MjM0NTc4NDZmN2FhYWEzNmNkNGViZGQ=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-05T09:28:53Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-05T09:31:25Z"}, "message": "Introduce pattern_list to parse pipe separated patterns\n\npattern_list comes in two variants, one uses the default PAT_RECOVERY_SET as the\nrecovery set, while other allows the user to provide a recovery set.", "tree": {"sha": "bd835b7ceb245823d5ddd7bd725c99463e798774", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd835b7ceb245823d5ddd7bd725c99463e798774"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb1ac43867921501723457846f7aaaa36cd4ebdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb1ac43867921501723457846f7aaaa36cd4ebdd", "html_url": "https://github.com/rust-lang/rust/commit/eb1ac43867921501723457846f7aaaa36cd4ebdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb1ac43867921501723457846f7aaaa36cd4ebdd/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f4468a8dae10db4f500bde3c1708228de6137b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f4468a8dae10db4f500bde3c1708228de6137b6", "html_url": "https://github.com/rust-lang/rust/commit/1f4468a8dae10db4f500bde3c1708228de6137b6"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "9f282c74d31ab783d8544769edab94692ce625c2", "filename": "crates/ra_parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb1ac43867921501723457846f7aaaa36cd4ebdd/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb1ac43867921501723457846f7aaaa36cd4ebdd/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=eb1ac43867921501723457846f7aaaa36cd4ebdd", "patch": "@@ -290,11 +290,7 @@ fn for_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n fn cond(p: &mut Parser) {\n     let m = p.start();\n     if p.eat(LET_KW) {\n-        p.eat(PIPE);\n-        patterns::pattern(p);\n-        while p.eat(PIPE) {\n-            patterns::pattern(p);\n-        }\n+        patterns::pattern_list(p);\n         p.expect(EQ);\n     }\n     expr_no_struct(p);\n@@ -386,11 +382,7 @@ pub(crate) fn match_arm_list(p: &mut Parser) {\n // }\n fn match_arm(p: &mut Parser) -> BlockLike {\n     let m = p.start();\n-    p.eat(PIPE);\n-    patterns::pattern_r(p, TokenSet::empty());\n-    while p.eat(PIPE) {\n-        patterns::pattern(p);\n-    }\n+    patterns::pattern_list_r(p, TokenSet::empty());\n     if p.at(IF_KW) {\n         match_guard(p);\n     }"}, {"sha": "befe6687dfb395e2bb8ee0d8b12a412e7b43f5c2", "filename": "crates/ra_parser/src/grammar/patterns.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eb1ac43867921501723457846f7aaaa36cd4ebdd/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb1ac43867921501723457846f7aaaa36cd4ebdd/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=eb1ac43867921501723457846f7aaaa36cd4ebdd", "patch": "@@ -8,6 +8,22 @@ pub(super) fn pattern(p: &mut Parser) {\n     pattern_r(p, PAT_RECOVERY_SET)\n }\n \n+/// Parses a pattern list separated by pipes `|`\n+pub(super) fn pattern_list(p: &mut Parser) {\n+    pattern_list_r(p, PAT_RECOVERY_SET)\n+}\n+\n+/// Parses a pattern list separated by pipes `|`\n+/// using the given `recovery_set`\n+pub(super) fn pattern_list_r(p: &mut Parser, recovery_set: TokenSet) {\n+    p.eat(PIPE);\n+    pattern_r(p, recovery_set);\n+\n+    while p.eat(PIPE) {\n+        pattern_r(p, recovery_set);\n+    }\n+}\n+\n pub(super) fn pattern_r(p: &mut Parser, recovery_set: TokenSet) {\n     if let Some(lhs) = atom_pat(p, recovery_set) {\n         // test range_pat"}]}