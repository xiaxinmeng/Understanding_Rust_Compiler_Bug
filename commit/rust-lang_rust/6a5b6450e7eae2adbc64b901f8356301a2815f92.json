{"sha": "6a5b6450e7eae2adbc64b901f8356301a2815f92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNWI2NDUwZTdlYWUyYWRiYzY0YjkwMWY4MzU2MzAxYTI4MTVmOTI=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2021-06-21T18:28:00Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2021-06-21T18:35:49Z"}, "message": "BTree: consistently avoid unwrap_unchecked in iterators", "tree": {"sha": "bc49795e0a8b8bf83df40459f630892d1bb2558a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc49795e0a8b8bf83df40459f630892d1bb2558a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a5b6450e7eae2adbc64b901f8356301a2815f92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a5b6450e7eae2adbc64b901f8356301a2815f92", "html_url": "https://github.com/rust-lang/rust/commit/6a5b6450e7eae2adbc64b901f8356301a2815f92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a5b6450e7eae2adbc64b901f8356301a2815f92/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3824017f8e57ce9dac6d69a1ce07f41c7034f82d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3824017f8e57ce9dac6d69a1ce07f41c7034f82d", "html_url": "https://github.com/rust-lang/rust/commit/3824017f8e57ce9dac6d69a1ce07f41c7034f82d"}], "stats": {"total": 34, "additions": 10, "deletions": 24}, "files": [{"sha": "bf3542b384d78715117c3094c2feae0ce41c7083", "filename": "library/alloc/src/collections/btree/navigate.rs", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6a5b6450e7eae2adbc64b901f8356301a2815f92/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a5b6450e7eae2adbc64b901f8356301a2815f92/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs?ref=6a5b6450e7eae2adbc64b901f8356301a2815f92", "patch": "@@ -47,14 +47,12 @@ impl<'a, K, V> LeafRange<marker::Immut<'a>, K, V> {\n \n     #[inline]\n     pub unsafe fn next_unchecked(&mut self) -> (&'a K, &'a V) {\n-        debug_assert!(self.front.is_some());\n-        unsafe { self.front.as_mut().unwrap_unchecked().next_unchecked() }\n+        unsafe { self.front.as_mut().unwrap().next_unchecked() }\n     }\n \n     #[inline]\n     pub unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a V) {\n-        debug_assert!(self.back.is_some());\n-        unsafe { self.back.as_mut().unwrap_unchecked().next_back_unchecked() }\n+        unsafe { self.back.as_mut().unwrap().next_back_unchecked() }\n     }\n }\n \n@@ -71,14 +69,12 @@ impl<'a, K, V> LeafRange<marker::ValMut<'a>, K, V> {\n \n     #[inline]\n     pub unsafe fn next_unchecked(&mut self) -> (&'a K, &'a mut V) {\n-        debug_assert!(self.front.is_some());\n-        unsafe { self.front.as_mut().unwrap_unchecked().next_unchecked() }\n+        unsafe { self.front.as_mut().unwrap().next_unchecked() }\n     }\n \n     #[inline]\n     pub unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a mut V) {\n-        debug_assert!(self.back.is_some());\n-        unsafe { self.back.as_mut().unwrap_unchecked().next_back_unchecked() }\n+        unsafe { self.back.as_mut().unwrap().next_back_unchecked() }\n     }\n }\n \n@@ -400,9 +396,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Ed\n     /// There must be another KV in the direction travelled.\n     unsafe fn next_unchecked(&mut self) -> (&'a K, &'a V) {\n         super::mem::replace(self, |leaf_edge| {\n-            let kv = leaf_edge.next_kv();\n-            debug_assert!(kv.is_ok());\n-            let kv = unsafe { kv.ok().unwrap_unchecked() };\n+            let kv = leaf_edge.next_kv().ok().unwrap();\n             (kv.next_leaf_edge(), kv.into_kv())\n         })\n     }\n@@ -414,9 +408,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Ed\n     /// There must be another KV in the direction travelled.\n     unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a V) {\n         super::mem::replace(self, |leaf_edge| {\n-            let kv = leaf_edge.next_back_kv();\n-            debug_assert!(kv.is_ok());\n-            let kv = unsafe { kv.ok().unwrap_unchecked() };\n+            let kv = leaf_edge.next_back_kv().ok().unwrap();\n             (kv.next_back_leaf_edge(), kv.into_kv())\n         })\n     }\n@@ -430,9 +422,7 @@ impl<'a, K, V> Handle<NodeRef<marker::ValMut<'a>, K, V, marker::Leaf>, marker::E\n     /// There must be another KV in the direction travelled.\n     unsafe fn next_unchecked(&mut self) -> (&'a K, &'a mut V) {\n         let kv = super::mem::replace(self, |leaf_edge| {\n-            let kv = leaf_edge.next_kv();\n-            debug_assert!(kv.is_ok());\n-            let kv = unsafe { kv.ok().unwrap_unchecked() };\n+            let kv = leaf_edge.next_kv().ok().unwrap();\n             (unsafe { ptr::read(&kv) }.next_leaf_edge(), kv)\n         });\n         // Doing this last is faster, according to benchmarks.\n@@ -446,9 +436,7 @@ impl<'a, K, V> Handle<NodeRef<marker::ValMut<'a>, K, V, marker::Leaf>, marker::E\n     /// There must be another KV in the direction travelled.\n     unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a mut V) {\n         let kv = super::mem::replace(self, |leaf_edge| {\n-            let kv = leaf_edge.next_back_kv();\n-            debug_assert!(kv.is_ok());\n-            let kv = unsafe { kv.ok().unwrap_unchecked() };\n+            let kv = leaf_edge.next_back_kv().ok().unwrap();\n             (unsafe { ptr::read(&kv) }.next_back_leaf_edge(), kv)\n         });\n         // Doing this last is faster, according to benchmarks.\n@@ -472,9 +460,7 @@ impl<K, V> Handle<NodeRef<marker::Dying, K, V, marker::Leaf>, marker::Edge> {\n     pub unsafe fn deallocating_next_unchecked(\n         &mut self,\n     ) -> Handle<NodeRef<marker::Dying, K, V, marker::LeafOrInternal>, marker::KV> {\n-        super::mem::replace(self, |leaf_edge| unsafe {\n-            leaf_edge.deallocating_next().unwrap_unchecked()\n-        })\n+        super::mem::replace(self, |leaf_edge| unsafe { leaf_edge.deallocating_next().unwrap() })\n     }\n \n     /// Moves the leaf edge handle to the previous leaf edge and returns the key and value\n@@ -493,7 +479,7 @@ impl<K, V> Handle<NodeRef<marker::Dying, K, V, marker::Leaf>, marker::Edge> {\n         &mut self,\n     ) -> Handle<NodeRef<marker::Dying, K, V, marker::LeafOrInternal>, marker::KV> {\n         super::mem::replace(self, |leaf_edge| unsafe {\n-            leaf_edge.deallocating_next_back().unwrap_unchecked()\n+            leaf_edge.deallocating_next_back().unwrap()\n         })\n     }\n }"}]}