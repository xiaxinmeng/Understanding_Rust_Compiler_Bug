{"sha": "25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1YTJjMTNlOWQxOWMxOGQ1ZjNjMjY1NmUzZDJkZGEwODZjYjAyM2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-18T07:22:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-18T07:22:30Z"}, "message": "Auto merge of #82249 - JohnTitor:rollup-3jbqija, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #82055 (Add diagnostics for specific cases for const/type mismatch err)\n - #82155 (Use !Sync std::lazy::OnceCell in usefulness checking)\n - #82202 (add specs for riscv32/riscv64 musl targets)\n - #82203 (Move some tests to more reasonable directories - 4)\n - #82211 (make `suggest_setup` help messages better)\n - #82212 (Remove redundant rustc_data_structures path component)\n - #82240 (remove useless ?s (clippy::needless_question_marks))\n - #82243 (Add more intra-doc links to std::io)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a92a714e69cbe95c8238b7cabe602a30d7ba2f91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a92a714e69cbe95c8238b7cabe602a30d7ba2f91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "html_url": "https://github.com/rust-lang/rust/commit/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1462d8558cf4551608457f63d9b999185ebf3bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1462d8558cf4551608457f63d9b999185ebf3bf", "html_url": "https://github.com/rust-lang/rust/commit/d1462d8558cf4551608457f63d9b999185ebf3bf"}, {"sha": "21283dae9e239792a58ec375c80743f4f0cf3002", "url": "https://api.github.com/repos/rust-lang/rust/commits/21283dae9e239792a58ec375c80743f4f0cf3002", "html_url": "https://github.com/rust-lang/rust/commit/21283dae9e239792a58ec375c80743f4f0cf3002"}], "stats": {"total": 286, "additions": 209, "deletions": 77}, "files": [{"sha": "2ec9b9e0be4a81ef810a8231d18b5fc103380fd8", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "patch": "@@ -507,12 +507,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n \n         // Unify the original value for each variable with the value\n         // taken from `query_response` (after applying `result_subst`).\n-        Ok(self.unify_canonical_vars(\n-            cause,\n-            param_env,\n-            original_values,\n-            substituted_query_response,\n-        )?)\n+        self.unify_canonical_vars(cause, param_env, original_values, substituted_query_response)\n     }\n \n     /// Converts the region constraints resulting from a query into an"}, {"sha": "73ad87a9ef219149776dcc5fd76c6c60507f781c", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "patch": "@@ -253,7 +253,7 @@ impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for SubstsRef<'tcx> {\n     fn decode(decoder: &mut D) -> Result<Self, D::Error> {\n         let len = decoder.read_usize()?;\n         let tcx = decoder.tcx();\n-        Ok(tcx.mk_substs((0..len).map(|_| Decodable::decode(decoder)))?)\n+        tcx.mk_substs((0..len).map(|_| Decodable::decode(decoder)))\n     }\n }\n \n@@ -314,7 +314,7 @@ impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for ty::AdtDef {\n impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for ty::List<Ty<'tcx>> {\n     fn decode(decoder: &mut D) -> Result<&'tcx Self, D::Error> {\n         let len = decoder.read_usize()?;\n-        Ok(decoder.tcx().mk_type_list((0..len).map(|_| Decodable::decode(decoder)))?)\n+        decoder.tcx().mk_type_list((0..len).map(|_| Decodable::decode(decoder)))\n     }\n }\n \n@@ -323,9 +323,7 @@ impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D>\n {\n     fn decode(decoder: &mut D) -> Result<&'tcx Self, D::Error> {\n         let len = decoder.read_usize()?;\n-        Ok(decoder\n-            .tcx()\n-            .mk_poly_existential_predicates((0..len).map(|_| Decodable::decode(decoder)))?)\n+        decoder.tcx().mk_poly_existential_predicates((0..len).map(|_| Decodable::decode(decoder)))\n     }\n }\n "}, {"sha": "64604b6459f27ff9ec823f078ff8c43ed0672ef6", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "patch": "@@ -607,7 +607,7 @@ pub trait PrettyPrinter<'tcx>:\n                     return Ok(self);\n                 }\n \n-                return Ok(with_no_queries(|| {\n+                return with_no_queries(|| {\n                     let def_key = self.tcx().def_key(def_id);\n                     if let Some(name) = def_key.disambiguated_data.data.get_opt_name() {\n                         p!(write(\"{}\", name));\n@@ -649,7 +649,7 @@ pub trait PrettyPrinter<'tcx>:\n                         p!(\" Sized\");\n                     }\n                     Ok(self)\n-                })?);\n+                });\n             }\n             ty::Str => p!(\"str\"),\n             ty::Generator(did, substs, movability) => {"}, {"sha": "315e5d63d2bb3f4e77641a4c719b5af051e1295a", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "patch": "@@ -154,7 +154,7 @@ pub fn relate_substs<R: TypeRelation<'tcx>>(\n         relation.relate_with_variance(variance, a, b)\n     });\n \n-    Ok(tcx.mk_substs(params)?)\n+    tcx.mk_substs(params)\n }\n \n impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {\n@@ -647,7 +647,7 @@ impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'\n                 _ => Err(TypeError::ExistentialMismatch(expected_found(relation, a, b))),\n             }\n         });\n-        Ok(tcx.mk_poly_existential_predicates(v)?)\n+        tcx.mk_poly_existential_predicates(v)\n     }\n }\n "}, {"sha": "50603bdd45b40b873d31cb39ddd7fd2052155eeb", "filename": "compiler/rustc_mir/src/interpret/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "patch": "@@ -118,7 +118,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             .get_raw(vtable_slot.alloc_id)?\n             .read_ptr_sized(self, vtable_slot)?\n             .check_init()?;\n-        Ok(self.memory.get_fn(fn_ptr)?)\n+        self.memory.get_fn(fn_ptr)\n     }\n \n     /// Returns the drop fn instance as well as the actual dynamic type."}, {"sha": "fd41e2822663209dad7601b9e66f0ff7c1031bf7", "filename": "compiler/rustc_mir/src/util/generic_graphviz.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/compiler%2Frustc_mir%2Fsrc%2Futil%2Fgeneric_graphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/compiler%2Frustc_mir%2Fsrc%2Futil%2Fgeneric_graphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fgeneric_graphviz.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "patch": "@@ -6,8 +6,8 @@ use std::io::{self, Write};\n pub struct GraphvizWriter<\n     'a,\n     G: graph::DirectedGraph + graph::WithSuccessors + graph::WithStartNode + graph::WithNumNodes,\n-    NodeContentFn: Fn(<G as rustc_data_structures::graph::DirectedGraph>::Node) -> Vec<String>,\n-    EdgeLabelsFn: Fn(<G as rustc_data_structures::graph::DirectedGraph>::Node) -> Vec<String>,\n+    NodeContentFn: Fn(<G as graph::DirectedGraph>::Node) -> Vec<String>,\n+    EdgeLabelsFn: Fn(<G as graph::DirectedGraph>::Node) -> Vec<String>,\n > {\n     graph: &'a G,\n     is_subgraph: bool,\n@@ -20,8 +20,8 @@ pub struct GraphvizWriter<\n impl<\n     'a,\n     G: graph::DirectedGraph + graph::WithSuccessors + graph::WithStartNode + graph::WithNumNodes,\n-    NodeContentFn: Fn(<G as rustc_data_structures::graph::DirectedGraph>::Node) -> Vec<String>,\n-    EdgeLabelsFn: Fn(<G as rustc_data_structures::graph::DirectedGraph>::Node) -> Vec<String>,\n+    NodeContentFn: Fn(<G as graph::DirectedGraph>::Node) -> Vec<String>,\n+    EdgeLabelsFn: Fn(<G as graph::DirectedGraph>::Node) -> Vec<String>,\n > GraphvizWriter<'a, G, NodeContentFn, EdgeLabelsFn>\n {\n     pub fn new("}, {"sha": "38b7e50d78672699c524bbebaa9e1b81cb2020d4", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "patch": "@@ -289,7 +289,6 @@ use super::{PatternFoldable, PatternFolder};\n \n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::sync::OnceCell;\n \n use rustc_arena::TypedArena;\n use rustc_hir::def_id::DefId;\n@@ -300,6 +299,7 @@ use rustc_span::Span;\n use smallvec::{smallvec, SmallVec};\n use std::fmt;\n use std::iter::{FromIterator, IntoIterator};\n+use std::lazy::OnceCell;\n \n crate struct MatchCheckCtxt<'a, 'tcx> {\n     crate tcx: TyCtxt<'tcx>,"}, {"sha": "5b14795f5457cb63fdf478ea1754a411bfa62c99", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "patch": "@@ -783,9 +783,11 @@ supported_targets! {\n     (\"riscv32imc-unknown-none-elf\", riscv32imc_unknown_none_elf),\n     (\"riscv32imac-unknown-none-elf\", riscv32imac_unknown_none_elf),\n     (\"riscv32gc-unknown-linux-gnu\", riscv32gc_unknown_linux_gnu),\n+    (\"riscv32gc-unknown-linux-musl\", riscv32gc_unknown_linux_musl),\n     (\"riscv64imac-unknown-none-elf\", riscv64imac_unknown_none_elf),\n     (\"riscv64gc-unknown-none-elf\", riscv64gc_unknown_none_elf),\n     (\"riscv64gc-unknown-linux-gnu\", riscv64gc_unknown_linux_gnu),\n+    (\"riscv64gc-unknown-linux-musl\", riscv64gc_unknown_linux_musl),\n \n     (\"aarch64-unknown-none\", aarch64_unknown_none),\n     (\"aarch64-unknown-none-softfloat\", aarch64_unknown_none_softfloat),"}, {"sha": "e5fbd09297f6574064294fdd5d661d9895a62783", "filename": "compiler/rustc_target/src/spec/riscv32gc_unknown_linux_musl.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32gc_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32gc_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32gc_unknown_linux_musl.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "patch": "@@ -0,0 +1,19 @@\n+use crate::spec::{CodeModel, Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"riscv32-unknown-linux-musl\".to_string(),\n+        pointer_width: 32,\n+        data_layout: \"e-m:e-p:32:32-i64:64-n32-S128\".to_string(),\n+        arch: \"riscv32\".to_string(),\n+        options: TargetOptions {\n+            unsupported_abis: super::riscv_base::unsupported_abis(),\n+            code_model: Some(CodeModel::Medium),\n+            cpu: \"generic-rv32\".to_string(),\n+            features: \"+m,+a,+f,+d,+c\".to_string(),\n+            llvm_abiname: \"ilp32d\".to_string(),\n+            max_atomic_width: Some(32),\n+            ..super::linux_musl_base::opts()\n+        },\n+    }\n+}"}, {"sha": "0232b15e8c2691476b1ba83b32b3c6da2dd11323", "filename": "compiler/rustc_target/src/spec/riscv64gc_unknown_linux_musl.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_linux_musl.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "patch": "@@ -0,0 +1,19 @@\n+use crate::spec::{CodeModel, Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"riscv64-unknown-linux-musl\".to_string(),\n+        pointer_width: 64,\n+        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".to_string(),\n+        arch: \"riscv64\".to_string(),\n+        options: TargetOptions {\n+            unsupported_abis: super::riscv_base::unsupported_abis(),\n+            code_model: Some(CodeModel::Medium),\n+            cpu: \"generic-rv64\".to_string(),\n+            features: \"+m,+a,+f,+d,+c\".to_string(),\n+            llvm_abiname: \"lp64d\".to_string(),\n+            max_atomic_width: Some(64),\n+            ..super::linux_musl_base::opts()\n+        },\n+    }\n+}"}, {"sha": "68356ce73aacd2866c48a704a272e25c4566ae9e", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "patch": "@@ -43,7 +43,7 @@ where\n             info!(\"fully_perform({:?})\", self);\n         }\n \n-        scrape_region_constraints(infcx, || Ok((self.closure)(infcx)?))\n+        scrape_region_constraints(infcx, || (self.closure)(infcx))\n     }\n }\n "}, {"sha": "0ea0ccaceabd46530e2e81a39ed45c8323824462", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 50, "deletions": 15, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "patch": "@@ -6,8 +6,9 @@ use crate::astconv::{\n use crate::errors::AssocTypeBindingNotAllowed;\n use crate::structured_errors::{StructuredDiagnostic, WrongNumberOfGenericArgs};\n use rustc_ast::ast::ParamKindOrd;\n-use rustc_errors::{struct_span_err, Applicability, ErrorReported};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n+use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::GenericArg;\n use rustc_middle::ty::{\n@@ -43,23 +44,57 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n         }\n \n+        let add_braces_suggestion = |arg: &GenericArg<'_>, err: &mut DiagnosticBuilder<'_>| {\n+            let suggestions = vec![\n+                (arg.span().shrink_to_lo(), String::from(\"{ \")),\n+                (arg.span().shrink_to_hi(), String::from(\" }\")),\n+            ];\n+            err.multipart_suggestion(\n+                \"if this generic argument was intended as a const parameter, \\\n+                 surround it with braces\",\n+                suggestions,\n+                Applicability::MaybeIncorrect,\n+            );\n+        };\n+\n         // Specific suggestion set for diagnostics\n         match (arg, &param.kind) {\n             (\n-                GenericArg::Type(hir::Ty { kind: hir::TyKind::Path { .. }, .. }),\n-                GenericParamDefKind::Const { .. },\n-            ) => {\n-                let suggestions = vec![\n-                    (arg.span().shrink_to_lo(), String::from(\"{ \")),\n-                    (arg.span().shrink_to_hi(), String::from(\" }\")),\n-                ];\n-                err.multipart_suggestion(\n-                    \"if this generic argument was intended as a const parameter, \\\n-                try surrounding it with braces:\",\n-                    suggestions,\n-                    Applicability::MaybeIncorrect,\n-                );\n-            }\n+                GenericArg::Type(hir::Ty {\n+                    kind: hir::TyKind::Path(rustc_hir::QPath::Resolved(_, path)),\n+                    ..\n+                }),\n+                GenericParamDefKind::Const,\n+            ) => match path.res {\n+                Res::Err => {\n+                    add_braces_suggestion(arg, &mut err);\n+                    err.set_primary_message(\n+                        \"unresolved item provided when a constant was expected\",\n+                    )\n+                    .emit();\n+                    return;\n+                }\n+                Res::Def(DefKind::TyParam, src_def_id) => {\n+                    if let Some(param_local_id) = param.def_id.as_local() {\n+                        let param_hir_id = tcx.hir().local_def_id_to_hir_id(param_local_id);\n+                        let param_name = tcx.hir().ty_param_name(param_hir_id);\n+                        let param_type = tcx.type_of(param.def_id);\n+                        if param_type.is_suggestable() {\n+                            err.span_suggestion(\n+                                tcx.def_span(src_def_id),\n+                                \"consider changing this type paramater to a `const`-generic\",\n+                                format!(\"const {}: {}\", param_name, param_type),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        };\n+                    }\n+                }\n+                _ => add_braces_suggestion(arg, &mut err),\n+            },\n+            (\n+                GenericArg::Type(hir::Ty { kind: hir::TyKind::Path(_), .. }),\n+                GenericParamDefKind::Const,\n+            ) => add_braces_suggestion(arg, &mut err),\n             (\n                 GenericArg::Type(hir::Ty { kind: hir::TyKind::Array(_, len), .. }),\n                 GenericParamDefKind::Const { .. },"}, {"sha": "16c3dd696abeea1482ad7f5330b646f176ab2dbe", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "patch": "@@ -1141,7 +1141,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             let trait_def_ids: FxHashSet<DefId> = param\n                                 .bounds\n                                 .iter()\n-                                .filter_map(|bound| Some(bound.trait_ref()?.trait_def_id()?))\n+                                .filter_map(|bound| bound.trait_ref()?.trait_def_id())\n                                 .collect();\n                             if !candidates.iter().any(|t| trait_def_ids.contains(&t.def_id)) {\n                                 err.span_suggestions("}, {"sha": "e736bf19e8f9369792c5b59bfa68c8539ed54c1d", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "patch": "@@ -231,7 +231,7 @@ pub struct Stdin {\n     inner: &'static Mutex<BufReader<StdinRaw>>,\n }\n \n-/// A locked reference to the `Stdin` handle.\n+/// A locked reference to the [`Stdin`] handle.\n ///\n /// This handle implements both the [`Read`] and [`BufRead`] traits, and\n /// is constructed via the [`Stdin::lock`] method.\n@@ -494,7 +494,7 @@ pub struct Stdout {\n     inner: Pin<&'static ReentrantMutex<RefCell<LineWriter<StdoutRaw>>>>,\n }\n \n-/// A locked reference to the `Stdout` handle.\n+/// A locked reference to the [`Stdout`] handle.\n ///\n /// This handle implements the [`Write`] trait, and is constructed via\n /// the [`Stdout::lock`] method.\n@@ -708,9 +708,9 @@ pub struct Stderr {\n     inner: Pin<&'static ReentrantMutex<RefCell<StderrRaw>>>,\n }\n \n-/// A locked reference to the `Stderr` handle.\n+/// A locked reference to the [`Stderr`] handle.\n ///\n-/// This handle implements the `Write` trait and is constructed via\n+/// This handle implements the [`Write`] trait and is constructed via\n /// the [`Stderr::lock`] method.\n ///\n /// ### Note: Windows Portability Consideration"}, {"sha": "e730a2557e0bf38fd1f7a961b059c25c34c85a9b", "filename": "src/bootstrap/bin/main.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Fbootstrap%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Fbootstrap%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Fmain.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "patch": "@@ -22,7 +22,10 @@ fn main() {\n     let suggest_setup = !config.config.exists() && !matches!(config.cmd, Subcommand::Setup { .. });\n     if suggest_setup {\n         println!(\"warning: you have not made a `config.toml`\");\n-        println!(\"help: consider running `x.py setup` or copying `config.toml.example`\");\n+        println!(\n+            \"help: consider running `./x.py setup` or copying `config.toml.example` by running \\\n+            `cp config.toml.example config.toml`\"\n+        );\n     } else if let Some(suggestion) = &changelog_suggestion {\n         println!(\"{}\", suggestion);\n     }\n@@ -31,7 +34,10 @@ fn main() {\n \n     if suggest_setup {\n         println!(\"warning: you have not made a `config.toml`\");\n-        println!(\"help: consider running `x.py setup` or copying `config.toml.example`\");\n+        println!(\n+            \"help: consider running `./x.py setup` or copying `config.toml.example` by running \\\n+            `cp config.toml.example config.toml`\"\n+        );\n     } else if let Some(suggestion) = &changelog_suggestion {\n         println!(\"{}\", suggestion);\n     }"}, {"sha": "8198dbaa5278caa63c87b3cfef2ea70669a0682a", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "patch": "@@ -204,7 +204,9 @@ target | std | host | notes\n `powerpc64-unknown-linux-musl` | ? |  |\n `powerpc64-wrs-vxworks` | ? |  |\n `powerpc64le-unknown-linux-musl` | ? |  |\n+`riscv64gc-unknown-linux-musl` |   |   | RISC-V Linux (kernel 4.20, musl 1.2.0)\n `riscv32gc-unknown-linux-gnu` |   |   | RISC-V Linux (kernel 5.4, glibc 2.33)\n+`riscv32gc-unknown-linux-musl` |   |   | RISC-V Linux (kernel 5.4, musl + RISCV32 support patches)\n `sparc-unknown-linux-gnu` | \u2713 |  | 32-bit SPARC Linux\n `sparc64-unknown-netbsd` | \u2713 | \u2713 | NetBSD/sparc64\n `sparc64-unknown-openbsd` | ? |  |"}, {"sha": "b98cf216695879b557bd3afbadb898c9e85d7ae7", "filename": "src/test/ui/associated-types/issue-21726.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-21726.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-21726.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-21726.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/issues/issue-21726.rs"}, {"sha": "44be8817b08c7f4e85a512afbd601c16c9679802", "filename": "src/test/ui/associated-types/issue-22560.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/issues/issue-22560.rs"}, {"sha": "9dda99109fa2b875416a57ccfa4967adcd842faa", "filename": "src/test/ui/associated-types/issue-22560.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.stderr?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/issues/issue-22560.stderr"}, {"sha": "2bfee7a35faab6de9743697ae54b005d394348af", "filename": "src/test/ui/associated-types/issue-23595-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-23595-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-23595-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-23595-2.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/issues/issue-23595-2.rs"}, {"sha": "dded673f6eed6ef7dddb81bfa4e95f7ba63d5763", "filename": "src/test/ui/associated-types/issue-23595-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-23595-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-23595-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-23595-2.stderr?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/issues/issue-23595-2.stderr"}, {"sha": "5a7b3459589eb77ea6a14457c02ad46b6c3f62b4", "filename": "src/test/ui/associated-types/issue-24204.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-24204.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-24204.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-24204.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/issues/issue-24204.rs"}, {"sha": "78815d8d3fadcb7f8d34527c3067924e439afdea", "filename": "src/test/ui/associated-types/issue-43784-associated-type.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43784-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43784-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43784-associated-type.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/issues/issue-43784-associated-type.rs"}, {"sha": "d5105ae3b58157bf3731a6edb0879715198376a8", "filename": "src/test/ui/associated-types/issue-43784-associated-type.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43784-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43784-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43784-associated-type.stderr?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/issues/issue-43784-associated-type.stderr"}, {"sha": "547ff45c229684fa5cd60beda3b97595b597d341", "filename": "src/test/ui/associated-types/project-defer-unification.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fassociated-types%2Fproject-defer-unification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fassociated-types%2Fproject-defer-unification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fproject-defer-unification.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/project-defer-unification.rs"}, {"sha": "4d554a0a1d0e19ec2fa4382ddbf2f6363b0c702f", "filename": "src/test/ui/async-await/issue-77993-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fasync-await%2Fissue-77993-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fasync-await%2Fissue-77993-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-77993-2.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/issues/issue-77993-2.rs"}, {"sha": "64b378f83fc03e02b4741b5892b51518729c8305", "filename": "src/test/ui/async-await/issue-77993-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fasync-await%2Fissue-77993-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fasync-await%2Fissue-77993-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-77993-2.stderr?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/issues/issue-77993-2.stderr"}, {"sha": "ebabc3fbf10f9185a3ee9287afeaef3e7c145dbe", "filename": "src/test/ui/async-await/repeat_count_const_in_async_fn.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fasync-await%2Frepeat_count_const_in_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fasync-await%2Frepeat_count_const_in_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Frepeat_count_const_in_async_fn.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/repeat_count_const_in_async_fn.rs"}, {"sha": "17ccd2f3527b0c64b0c13dea8d5e5d54377018a5", "filename": "src/test/ui/const-generics/const-param-shadowing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-shadowing.stderr?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "patch": "@@ -4,7 +4,7 @@ error[E0747]: type provided when a constant was expected\n LL | fn test<const N: usize>() -> Foo<N> {\n    |                                  ^\n    |\n-help: if this generic argument was intended as a const parameter, try surrounding it with braces:\n+help: if this generic argument was intended as a const parameter, surround it with braces\n    |\n LL | fn test<const N: usize>() -> Foo<{ N }> {\n    |                                  ^   ^"}, {"sha": "1581af5ab27516e5e301f5cdadce5e8237d5b969", "filename": "src/test/ui/const-generics/diagnostics.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "patch": "@@ -0,0 +1,18 @@\n+#![crate_type=\"lib\"]\n+#![feature(min_const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct A<const N: u8>;\n+trait Foo {}\n+impl Foo for A<N> {}\n+//~^ ERROR cannot find type\n+//~| unresolved item provided when a constant\n+\n+struct B<const N: u8>;\n+impl<N> Foo for B<N> {}\n+//~^ ERROR type provided when a constant\n+\n+struct C<const C: u8, const N: u8>;\n+impl<const N: u8> Foo for C<N, T> {}\n+//~^ ERROR cannot find type\n+//~| unresolved item provided when a constant"}, {"sha": "7d038ff955d6c7959c43e5f48d940f6949fbd75f", "filename": "src/test/ui/const-generics/diagnostics.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.stderr?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "patch": "@@ -0,0 +1,52 @@\n+error[E0412]: cannot find type `N` in this scope\n+  --> $DIR/diagnostics.rs:7:16\n+   |\n+LL | struct A<const N: u8>;\n+   | ---------------------- similarly named struct `A` defined here\n+LL | trait Foo {}\n+LL | impl Foo for A<N> {}\n+   |                ^ help: a struct with a similar name exists: `A`\n+\n+error[E0412]: cannot find type `T` in this scope\n+  --> $DIR/diagnostics.rs:16:32\n+   |\n+LL | struct A<const N: u8>;\n+   | ---------------------- similarly named struct `A` defined here\n+...\n+LL | impl<const N: u8> Foo for C<N, T> {}\n+   |                                ^ help: a struct with a similar name exists: `A`\n+\n+error[E0747]: unresolved item provided when a constant was expected\n+  --> $DIR/diagnostics.rs:7:16\n+   |\n+LL | impl Foo for A<N> {}\n+   |                ^\n+   |\n+help: if this generic argument was intended as a const parameter, surround it with braces\n+   |\n+LL | impl Foo for A<{ N }> {}\n+   |                ^   ^\n+\n+error[E0747]: type provided when a constant was expected\n+  --> $DIR/diagnostics.rs:12:19\n+   |\n+LL | impl<N> Foo for B<N> {}\n+   |      -            ^\n+   |      |\n+   |      help: consider changing this type paramater to a `const`-generic: `const N: u8`\n+\n+error[E0747]: unresolved item provided when a constant was expected\n+  --> $DIR/diagnostics.rs:16:32\n+   |\n+LL | impl<const N: u8> Foo for C<N, T> {}\n+   |                                ^\n+   |\n+help: if this generic argument was intended as a const parameter, surround it with braces\n+   |\n+LL | impl<const N: u8> Foo for C<N, { T }> {}\n+   |                                ^   ^\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0412, E0747.\n+For more information about an error, try `rustc --explain E0412`."}, {"sha": "32939dcd2861bd1c7432c31238ab3e974f4184e2", "filename": "src/test/ui/const-generics/invalid-enum.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "patch": "@@ -3,14 +3,14 @@\n \n #[derive(PartialEq, Eq)]\n enum CompileFlag {\n-  A,\n-  B,\n+    A,\n+    B,\n }\n \n pub fn test_1<const CF: CompileFlag>() {}\n pub fn test_2<T, const CF: CompileFlag>(x: T) {}\n pub struct Example<const CF: CompileFlag, T=u32>{\n-  x: T,\n+    x: T,\n }\n \n impl<const CF: CompileFlag, T> Example<CF, T> {\n@@ -20,15 +20,15 @@ impl<const CF: CompileFlag, T> Example<CF, T> {\n pub fn main() {\n   test_1::<CompileFlag::A>();\n   //~^ ERROR: expected type, found variant\n-  //~| ERROR: type provided when a constant was expected\n+  //~| ERROR: unresolved item provided when a constant was expected\n \n   test_2::<_, CompileFlag::A>(0);\n   //~^ ERROR: expected type, found variant\n-  //~| ERROR: type provided when a constant was expected\n+  //~| ERROR: unresolved item provided when a constant was expected\n \n   let _: Example<CompileFlag::A, _> = Example { x: 0 };\n   //~^ ERROR: expected type, found variant\n-  //~| ERROR: type provided when a constant was expected\n+  //~| ERROR: unresolved item provided when a constant was expected\n \n   let _: Example<Example::ASSOC_FLAG, _> = Example { x: 0 };\n   //~^ ERROR: type provided when a constant was expected"}, {"sha": "cfbc61f02543bc6ae4c7eaa4a5b33db37658f873", "filename": "src/test/ui/const-generics/invalid-enum.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "patch": "@@ -25,13 +25,13 @@ LL |   let _: Example<CompileFlag::A, _> = Example { x: 0 };\n    |                  not a type\n    |                  help: try using the variant's enum: `CompileFlag`\n \n-error[E0747]: type provided when a constant was expected\n+error[E0747]: unresolved item provided when a constant was expected\n   --> $DIR/invalid-enum.rs:29:18\n    |\n LL |   let _: Example<CompileFlag::A, _> = Example { x: 0 };\n    |                  ^^^^^^^^^^^^^^\n    |\n-help: if this generic argument was intended as a const parameter, try surrounding it with braces:\n+help: if this generic argument was intended as a const parameter, surround it with braces\n    |\n LL |   let _: Example<{ CompileFlag::A }, _> = Example { x: 0 };\n    |                  ^                ^\n@@ -42,29 +42,29 @@ error[E0747]: type provided when a constant was expected\n LL |   let _: Example<Example::ASSOC_FLAG, _> = Example { x: 0 };\n    |                  ^^^^^^^^^^^^^^^^^^^\n    |\n-help: if this generic argument was intended as a const parameter, try surrounding it with braces:\n+help: if this generic argument was intended as a const parameter, surround it with braces\n    |\n LL |   let _: Example<{ Example::ASSOC_FLAG }, _> = Example { x: 0 };\n    |                  ^                     ^\n \n-error[E0747]: type provided when a constant was expected\n+error[E0747]: unresolved item provided when a constant was expected\n   --> $DIR/invalid-enum.rs:21:12\n    |\n LL |   test_1::<CompileFlag::A>();\n    |            ^^^^^^^^^^^^^^\n    |\n-help: if this generic argument was intended as a const parameter, try surrounding it with braces:\n+help: if this generic argument was intended as a const parameter, surround it with braces\n    |\n LL |   test_1::<{ CompileFlag::A }>();\n    |            ^                ^\n \n-error[E0747]: type provided when a constant was expected\n+error[E0747]: unresolved item provided when a constant was expected\n   --> $DIR/invalid-enum.rs:25:15\n    |\n LL |   test_2::<_, CompileFlag::A>(0);\n    |               ^^^^^^^^^^^^^^\n    |\n-help: if this generic argument was intended as a const parameter, try surrounding it with braces:\n+help: if this generic argument was intended as a const parameter, surround it with braces\n    |\n LL |   test_2::<_, { CompileFlag::A }>(0);\n    |               ^                ^"}, {"sha": "645b1c0eb8741557c32793ad7f29a98782356b1f", "filename": "src/test/ui/consts/issue-13837.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fconsts%2Fissue-13837.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fconsts%2Fissue-13837.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-13837.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/issues/issue-13837.rs"}, {"sha": "03d5f8bb3f1c9591b37b5703a468055ee2b83afb", "filename": "src/test/ui/consts/issue-17718-references.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fconsts%2Fissue-17718-references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fconsts%2Fissue-17718-references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-17718-references.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/issues/issue-17718-references.rs"}, {"sha": "e3c3b369ffb320418a9df9558aa176d1ee1ae0eb", "filename": "src/test/ui/consts/issue-17718-references.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fconsts%2Fissue-17718-references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fconsts%2Fissue-17718-references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-17718-references.stderr?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/issues/issue-17718-references.stderr"}, {"sha": "adfee7b925cc53b13fa9b08cbc3e1d7b56df2cfd", "filename": "src/test/ui/consts/issue-32829.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fconsts%2Fissue-32829.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fconsts%2Fissue-32829.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-32829.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/issues/issue-32829.rs"}, {"sha": "48e0880d5eda2750c9b26f53bdb6a78dd1df2bf5", "filename": "src/test/ui/consts/issue-32829.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fconsts%2Fissue-32829.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fconsts%2Fissue-32829.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-32829.stderr?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/issues/issue-32829.stderr"}, {"sha": "3539aa64776ab4792b387b846466345403bc8914", "filename": "src/test/ui/consts/issue-33537.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fconsts%2Fissue-33537.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fconsts%2Fissue-33537.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-33537.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/issues/issue-33537.rs"}, {"sha": "2d7e4ab39893d21da6c1809a22cd429d66af4749", "filename": "src/test/ui/consts/rvalue-static-promotion.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fconsts%2Frvalue-static-promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fconsts%2Frvalue-static-promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frvalue-static-promotion.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/rvalue-static-promotion.rs"}, {"sha": "43c63fed8cef19efd88767d2973a012fe0215107", "filename": "src/test/ui/consts/write-to-static-mut-in-static.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fconsts%2Fwrite-to-static-mut-in-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fconsts%2Fwrite-to-static-mut-in-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fwrite-to-static-mut-in-static.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/write-to-static-mut-in-static.rs"}, {"sha": "789919bd1668d2949ddf245708434ceebc20ecaa", "filename": "src/test/ui/consts/write-to-static-mut-in-static.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fconsts%2Fwrite-to-static-mut-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fconsts%2Fwrite-to-static-mut-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fwrite-to-static-mut-in-static.stderr?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/write-to-static-mut-in-static.stderr"}, {"sha": "5547631a4b0229e9b2b5310ebc16e316c9106140", "filename": "src/test/ui/emit-artifact-notifications.nll.stderr", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1462d8558cf4551608457f63d9b999185ebf3bf/src%2Ftest%2Fui%2Femit-artifact-notifications.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1462d8558cf4551608457f63d9b999185ebf3bf/src%2Ftest%2Fui%2Femit-artifact-notifications.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Femit-artifact-notifications.nll.stderr?ref=d1462d8558cf4551608457f63d9b999185ebf3bf", "patch": "@@ -1 +0,0 @@\n-{\"artifact\":\"$TEST_BUILD_DIR/emit-artifact-notifications.nll/libemit_artifact_notifications.rmeta\",\"emit\":\"metadata\"}"}, {"sha": "47b48b399c25c7cbabde881a468e9fcc5d3c2c8d", "filename": "src/test/ui/emit-artifact-notifications.polonius.stderr", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1462d8558cf4551608457f63d9b999185ebf3bf/src%2Ftest%2Fui%2Femit-artifact-notifications.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1462d8558cf4551608457f63d9b999185ebf3bf/src%2Ftest%2Fui%2Femit-artifact-notifications.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Femit-artifact-notifications.polonius.stderr?ref=d1462d8558cf4551608457f63d9b999185ebf3bf", "patch": "@@ -1 +0,0 @@\n-{\"artifact\":\"$TEST_BUILD_DIR/emit-artifact-notifications.polonius/libemit_artifact_notifications.rmeta\",\"emit\":\"metadata\"}"}, {"sha": "260d41b8f15cc090902f2a39d22af5c1525ed2c9", "filename": "src/test/ui/emit-artifact-notifications.stderr", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1462d8558cf4551608457f63d9b999185ebf3bf/src%2Ftest%2Fui%2Femit-artifact-notifications.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1462d8558cf4551608457f63d9b999185ebf3bf/src%2Ftest%2Fui%2Femit-artifact-notifications.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Femit-artifact-notifications.stderr?ref=d1462d8558cf4551608457f63d9b999185ebf3bf", "patch": "@@ -1 +0,0 @@\n-{\"artifact\":\"$TEST_BUILD_DIR/emit-artifact-notifications/libemit_artifact_notifications.rmeta\",\"emit\":\"metadata\"}"}, {"sha": "6069cd835e14c9d00980ecaba1b872b7f9c6ce65", "filename": "src/test/ui/expr/if/expr-if-panic-pass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fexpr%2Fif%2Fexpr-if-panic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fexpr%2Fif%2Fexpr-if-panic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fexpr-if-panic-pass.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/expr-if-panic.rs"}, {"sha": "1f292229fd6cd54414e1d5a68f54fa63bd77c4b2", "filename": "src/test/ui/expr/if/issue-4201.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fexpr%2Fif%2Fissue-4201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fexpr%2Fif%2Fissue-4201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fissue-4201.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/issues/issue-4201.rs"}, {"sha": "bc638ddf55be03e51cb17b13522e952adade1f98", "filename": "src/test/ui/expr/if/issue-4201.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fexpr%2Fif%2Fissue-4201.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fexpr%2Fif%2Fissue-4201.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fissue-4201.stderr?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/issues/issue-4201.stderr"}, {"sha": "6fecb4e76da3222f7a5e9e97e8b4ec052bad3056", "filename": "src/test/ui/for-loop-while/cleanup-rvalue-during-if-and-while.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Ffor-loop-while%2Fcleanup-rvalue-during-if-and-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Ffor-loop-while%2Fcleanup-rvalue-during-if-and-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Fcleanup-rvalue-during-if-and-while.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/cleanup-rvalue-during-if-and-while.rs"}, {"sha": "087b40ad6cdf72fc4a7b892af17395560410693a", "filename": "src/test/ui/hygiene/issue-40847.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fhygiene%2Fissue-40847.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fhygiene%2Fissue-40847.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fissue-40847.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/issues/issue-40847.rs"}, {"sha": "b7a44ed86239584cca3d8013e72b8024c67a07c3", "filename": "src/test/ui/issue-6157.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fissue-6157.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fissue-6157.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-6157.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/issues/issue-6157.rs"}, {"sha": "63e42b484427e51885e42a64407c6d14fe95cb89", "filename": "src/test/ui/lint/issue-31924-non-snake-ffi.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Flint%2Fissue-31924-non-snake-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Flint%2Fissue-31924-non-snake-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-31924-non-snake-ffi.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/issues/issue-31924-non-snake-ffi.rs"}, {"sha": "ae45e97c8b07070aac07e01fa68c54800ccfe289", "filename": "src/test/ui/macros/html-literals.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fmacros%2Fhtml-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fmacros%2Fhtml-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fhtml-literals.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/html-literals.rs"}, {"sha": "d842fb6e030013395e0e7a1ff1f8bce293c3006c", "filename": "src/test/ui/parser/dotdotdot-expr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fparser%2Fdotdotdot-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fparser%2Fdotdotdot-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdotdotdot-expr.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/dotdotdot-expr.rs"}, {"sha": "ec1335cfdb072325942fce6a93873800450d6edf", "filename": "src/test/ui/parser/dotdotdot-expr.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fparser%2Fdotdotdot-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fparser%2Fdotdotdot-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdotdotdot-expr.stderr?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/dotdotdot-expr.stderr"}, {"sha": "b2371051c78f94eeaa31e69e21e30532c4e88840", "filename": "src/test/ui/parser/issue-20616-3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fparser%2Fissue-20616-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fparser%2Fissue-20616-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-20616-3.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/issues/issue-20616-3.rs"}, {"sha": "b535c7a3267d3bc000290dbcb32a47444f24f8a1", "filename": "src/test/ui/parser/issue-20616-3.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fparser%2Fissue-20616-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fparser%2Fissue-20616-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-20616-3.stderr?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/issues/issue-20616-3.stderr"}, {"sha": "83bbf884a4ff8da4a617e80022ad1bc4df62af65", "filename": "src/test/ui/parser/issue-44406.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fparser%2Fissue-44406.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fparser%2Fissue-44406.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-44406.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/issues/issue-44406.rs"}, {"sha": "701c32d6236b643ec173c7f33ef8fd0b7b0f470a", "filename": "src/test/ui/parser/issue-44406.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fparser%2Fissue-44406.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fparser%2Fissue-44406.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-44406.stderr?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/issues/issue-44406.stderr"}, {"sha": "eea95b7d62653ca00813898593a85becbd994ad3", "filename": "src/test/ui/parser/old-suffixes-are-really-forbidden.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fparser%2Fold-suffixes-are-really-forbidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fparser%2Fold-suffixes-are-really-forbidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fold-suffixes-are-really-forbidden.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/old-suffixes-are-really-forbidden.rs"}, {"sha": "fb309793b34b48d7e3d3d11d744614049cac48b4", "filename": "src/test/ui/parser/old-suffixes-are-really-forbidden.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fparser%2Fold-suffixes-are-really-forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fparser%2Fold-suffixes-are-really-forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fold-suffixes-are-really-forbidden.stderr?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/old-suffixes-are-really-forbidden.stderr"}, {"sha": "4ef8effaf1f5f36ec2e33d66c5f8de371b5dd7e6", "filename": "src/test/ui/parser/struct-literal-variant-in-if.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-variant-in-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-variant-in-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-variant-in-if.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/struct-literal-variant-in-if.rs"}, {"sha": "a2252d4e4d2822943a42d3e28d5b2366f8ff1d23", "filename": "src/test/ui/parser/struct-literal-variant-in-if.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-variant-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-variant-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-variant-in-if.stderr?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/struct-literal-variant-in-if.stderr"}, {"sha": "e26e31b44a079f5531ad55a442808f17faee4f48", "filename": "src/test/ui/range_inclusive_gate.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d1462d8558cf4551608457f63d9b999185ebf3bf/src%2Ftest%2Fui%2Frange_inclusive_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1462d8558cf4551608457f63d9b999185ebf3bf/src%2Ftest%2Fui%2Frange_inclusive_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange_inclusive_gate.rs?ref=d1462d8558cf4551608457f63d9b999185ebf3bf", "patch": "@@ -1,14 +0,0 @@\n-// run-pass\n-\n-#![allow(unused_comparisons)]\n-// Test that you only need the syntax gate if you don't mention the structs.\n-// (Obsoleted since both features are stabilized)\n-\n-fn main() {\n-    let mut count = 0;\n-    for i in 0_usize..=10 {\n-        assert!(i >= 0 && i <= 10);\n-        count += i;\n-    }\n-    assert_eq!(count, 55);\n-}"}, {"sha": "d762f55f9d5f17da08155960cc059c6ed2629786", "filename": "src/test/ui/regions/regions-fn-subtyping-return-static-fail.nll.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.nll.stderr?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/regions-fn-subtyping-return-static-fail.nll.stderr"}, {"sha": "539221b5a046c20c694430ab05cb46f77305282c", "filename": "src/test/ui/regions/regions-fn-subtyping-return-static-fail.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/regions-fn-subtyping-return-static-fail.rs"}, {"sha": "c9ce936c7d43fc06e0691eb6304ae940d71fd50e", "filename": "src/test/ui/regions/regions-fn-subtyping-return-static-fail.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.stderr?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/regions-fn-subtyping-return-static-fail.stderr"}, {"sha": "ed62f300284916d02feff10cce1ec92e302dcb36", "filename": "src/test/ui/rmeta/emit-artifact-notifications.nll.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Frmeta%2Femit-artifact-notifications.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Frmeta%2Femit-artifact-notifications.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frmeta%2Femit-artifact-notifications.nll.stderr?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "patch": "@@ -0,0 +1 @@\n+{\"artifact\":\"$TEST_BUILD_DIR/rmeta/emit-artifact-notifications.nll/libemit_artifact_notifications.rmeta\",\"emit\":\"metadata\"}"}, {"sha": "255c7b370f9fd541b5e21ba550caa3bf6110cdc6", "filename": "src/test/ui/rmeta/emit-artifact-notifications.polonius.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Frmeta%2Femit-artifact-notifications.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Frmeta%2Femit-artifact-notifications.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frmeta%2Femit-artifact-notifications.polonius.stderr?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "patch": "@@ -0,0 +1 @@\n+{\"artifact\":\"$TEST_BUILD_DIR/rmeta/emit-artifact-notifications.polonius/libemit_artifact_notifications.rmeta\",\"emit\":\"metadata\"}"}, {"sha": "984a7fabb6633ee8c750b69c46993dff237da645", "filename": "src/test/ui/rmeta/emit-artifact-notifications.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Frmeta%2Femit-artifact-notifications.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Frmeta%2Femit-artifact-notifications.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frmeta%2Femit-artifact-notifications.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/emit-artifact-notifications.rs"}, {"sha": "b2f0aa7575c06a75a6f756bc858fd01cf5304512", "filename": "src/test/ui/rmeta/emit-artifact-notifications.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Frmeta%2Femit-artifact-notifications.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Frmeta%2Femit-artifact-notifications.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frmeta%2Femit-artifact-notifications.stderr?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "patch": "@@ -0,0 +1 @@\n+{\"artifact\":\"$TEST_BUILD_DIR/rmeta/emit-artifact-notifications/libemit_artifact_notifications.rmeta\",\"emit\":\"metadata\"}"}, {"sha": "334c7cc5b8101c681f9c6bd32893bf9927862f0f", "filename": "src/test/ui/rmeta/emit-metadata-obj.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Frmeta%2Femit-metadata-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Frmeta%2Femit-metadata-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frmeta%2Femit-metadata-obj.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/emit-metadata-obj.rs"}, {"sha": "73a11a5e743f6a7f85810bfbcc0d86d54cf7fd3d", "filename": "src/test/ui/structs-enums/type-sizes.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fstructs-enums%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fstructs-enums%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Ftype-sizes.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/type-sizes.rs"}, {"sha": "00fbadce1ac882af2bcbaa22a7859ca2181380b0", "filename": "src/test/ui/tuple/one-tuple.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Ftuple%2Fone-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Ftuple%2Fone-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fone-tuple.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/one-tuple.rs"}, {"sha": "355d11099419c41eae12e6a0b63463ff12ad8ec5", "filename": "src/test/ui/unboxed-closures/type-id-higher-rank.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Funboxed-closures%2Ftype-id-higher-rank.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Funboxed-closures%2Ftype-id-higher-rank.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Ftype-id-higher-rank.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "previous_filename": "src/test/ui/type-id-higher-rank.rs"}, {"sha": "659d5ae03c9d85cd85bdd53be8550c7b69d9358a", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "patch": "@@ -7,8 +7,8 @@ use std::path::Path;\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n-const ROOT_ENTRY_LIMIT: usize = 1459;\n-const ISSUES_ENTRY_LIMIT: usize = 2615;\n+const ROOT_ENTRY_LIMIT: usize = 1418;\n+const ISSUES_ENTRY_LIMIT: usize = 2582;\n \n fn check_entries(path: &Path, bad: &mut bool) {\n     let dirs = walkdir::WalkDir::new(&path.join(\"test/ui\"))"}]}