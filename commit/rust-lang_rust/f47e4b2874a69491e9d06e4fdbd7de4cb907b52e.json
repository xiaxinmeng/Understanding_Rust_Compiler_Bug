{"sha": "f47e4b2874a69491e9d06e4fdbd7de4cb907b52e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0N2U0YjI4NzRhNjk0OTFlOWQwNmU0ZmRiZDdkZTRjYjkwN2I1MmU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-07T06:33:50Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-08T07:51:38Z"}, "message": "extratest: Fix all leaked trait imports", "tree": {"sha": "0dda294059bd32fdf5606800fa0c211dce6ec150", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dda294059bd32fdf5606800fa0c211dce6ec150"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f47e4b2874a69491e9d06e4fdbd7de4cb907b52e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f47e4b2874a69491e9d06e4fdbd7de4cb907b52e", "html_url": "https://github.com/rust-lang/rust/commit/f47e4b2874a69491e9d06e4fdbd7de4cb907b52e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f47e4b2874a69491e9d06e4fdbd7de4cb907b52e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcb1c381a38f8f36a71323bbf12d55afc8627d90", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcb1c381a38f8f36a71323bbf12d55afc8627d90", "html_url": "https://github.com/rust-lang/rust/commit/bcb1c381a38f8f36a71323bbf12d55afc8627d90"}], "stats": {"total": 89, "additions": 41, "deletions": 48}, "files": [{"sha": "85def62dc3b55d2878c166c0f87c206b961b770f", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/f47e4b2874a69491e9d06e4fdbd7de4cb907b52e/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f47e4b2874a69491e9d06e4fdbd7de4cb907b52e/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=f47e4b2874a69491e9d06e4fdbd7de4cb907b52e", "patch": "@@ -625,43 +625,43 @@ impl<A: Clone> Clone for DList<A> {\n }\n \n #[cfg(test)]\n-pub fn check_links<T>(list: &DList<T>) {\n-    let mut len = 0u;\n-    let mut last_ptr: Option<&Node<T>> = None;\n-    let mut node_ptr: &Node<T>;\n-    match list.list_head {\n-        None => { assert_eq!(0u, list.length); return }\n-        Some(ref node) => node_ptr = &**node,\n-    }\n-    loop {\n-        match (last_ptr, node_ptr.prev.resolve_immut()) {\n-            (None   , None      ) => {}\n-            (None   , _         ) => fail!(\"prev link for list_head\"),\n-            (Some(p), Some(pptr)) => {\n-                assert_eq!(p as *Node<T>, pptr as *Node<T>);\n-            }\n-            _ => fail!(\"prev link is none, not good\"),\n+mod tests {\n+    use container::Deque;\n+    use extra::test;\n+    use std::rand;\n+    use super::{DList, Node, ListInsertion};\n+\n+    pub fn check_links<T>(list: &DList<T>) {\n+        let mut len = 0u;\n+        let mut last_ptr: Option<&Node<T>> = None;\n+        let mut node_ptr: &Node<T>;\n+        match list.list_head {\n+            None => { assert_eq!(0u, list.length); return }\n+            Some(ref node) => node_ptr = &**node,\n         }\n-        match node_ptr.next {\n-            Some(ref next) => {\n-                last_ptr = Some(node_ptr);\n-                node_ptr = &**next;\n-                len += 1;\n+        loop {\n+            match (last_ptr, node_ptr.prev.resolve_immut()) {\n+                (None   , None      ) => {}\n+                (None   , _         ) => fail!(\"prev link for list_head\"),\n+                (Some(p), Some(pptr)) => {\n+                    assert_eq!(p as *Node<T>, pptr as *Node<T>);\n+                }\n+                _ => fail!(\"prev link is none, not good\"),\n             }\n-            None => {\n-                len += 1;\n-                break;\n+            match node_ptr.next {\n+                Some(ref next) => {\n+                    last_ptr = Some(node_ptr);\n+                    node_ptr = &**next;\n+                    len += 1;\n+                }\n+                None => {\n+                    len += 1;\n+                    break;\n+                }\n             }\n         }\n+        assert_eq!(len, list.length);\n     }\n-    assert_eq!(len, list.length);\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::*;\n-    use std::rand;\n-    use extra::test;\n \n     #[test]\n     fn test_basic() {"}, {"sha": "748d751a2df412afeac0a4adf462752213ab2f6e", "filename": "src/libextra/json.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f47e4b2874a69491e9d06e4fdbd7de4cb907b52e/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f47e4b2874a69491e9d06e4fdbd7de4cb907b52e/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=f47e4b2874a69491e9d06e4fdbd7de4cb907b52e", "patch": "@@ -1333,11 +1333,10 @@ impl to_str::ToStr for Error {\n \n #[cfg(test)]\n mod tests {\n-\n     use super::*;\n \n     use std::io;\n-    use serialize::Decodable;\n+    use serialize::{Encodable, Decodable};\n     use treemap::TreeMap;\n \n     #[deriving(Eq, Encodable, Decodable)]"}, {"sha": "44b01caac26bcf7ae68f88d5b0259a32547d83d2", "filename": "src/libextra/lib.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f47e4b2874a69491e9d06e4fdbd7de4cb907b52e/src%2Flibextra%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f47e4b2874a69491e9d06e4fdbd7de4cb907b52e/src%2Flibextra%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Flib.rs?ref=f47e4b2874a69491e9d06e4fdbd7de4cb907b52e", "patch": "@@ -34,8 +34,6 @@ Rust extras are part of the standard Rust distribution.\n #[deny(non_camel_case_types)];\n #[deny(missing_doc)];\n \n-pub use std::os;\n-\n // Utility modules\n \n pub mod c_vec;\n@@ -106,12 +104,4 @@ pub mod serialize;\n pub mod extra {\n     pub use serialize;\n     pub use test;\n-\n-    // For bootstrapping.\n-    pub use std::clone;\n-    pub use std::condition;\n-    pub use std::cmp;\n-    pub use std::unstable;\n-    pub use std::str;\n-    pub use std::os;\n }"}, {"sha": "ed731298b52a53fd4c441c57c532ef209f1ddadc", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f47e4b2874a69491e9d06e4fdbd7de4cb907b52e/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f47e4b2874a69491e9d06e4fdbd7de4cb907b52e/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=f47e4b2874a69491e9d06e4fdbd7de4cb907b52e", "patch": "@@ -1434,6 +1434,7 @@ impl BigInt {\n #[cfg(test)]\n mod biguint_tests {\n     use super::*;\n+    use super::RandBigInt;\n \n     use std::cmp::{Less, Equal, Greater};\n     use std::i64;\n@@ -2090,6 +2091,7 @@ mod biguint_tests {\n #[cfg(test)]\n mod bigint_tests {\n     use super::*;\n+    use super::RandBigInt;\n \n     use std::cmp::{Less, Equal, Greater};\n     use std::i64;"}, {"sha": "da49f2372f46756d54bf063a7f0799540aac41c1", "filename": "src/libextra/ringbuf.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f47e4b2874a69491e9d06e4fdbd7de4cb907b52e/src%2Flibextra%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f47e4b2874a69491e9d06e4fdbd7de4cb907b52e/src%2Flibextra%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fringbuf.rs?ref=f47e4b2874a69491e9d06e4fdbd7de4cb907b52e", "patch": "@@ -404,10 +404,11 @@ impl<A> Extendable<A> for RingBuf<A> {\n \n #[cfg(test)]\n mod tests {\n-    use super::*;\n+    use container::Deque;\n+    use extra::test;\n     use std::clone::Clone;\n     use std::cmp::Eq;\n-    use extra::test;\n+    use super::RingBuf;\n \n     #[test]\n     fn test_simple() {"}, {"sha": "f95c12904ff4fe33643a5c7b89b7c27c1652b78b", "filename": "src/libextra/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f47e4b2874a69491e9d06e4fdbd7de4cb907b52e/src%2Flibextra%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f47e4b2874a69491e9d06e4fdbd7de4cb907b52e/src%2Flibextra%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstats.rs?ref=f47e4b2874a69491e9d06e4fdbd7de4cb907b52e", "patch": "@@ -432,7 +432,6 @@ pub fn freq_count<T: Iterator<U>, U: Eq+Hash>(mut iter: T) -> hashmap::HashMap<U\n \n #[cfg(test)]\n mod tests {\n-\n     use stats::Stats;\n     use stats::Summary;\n     use stats::write_5_number_summary;\n@@ -1018,6 +1017,7 @@ mod tests {\n mod bench {\n     use extra::test::BenchHarness;\n     use std::vec;\n+    use stats::Stats;\n \n     #[bench]\n     fn sum_three_items(bh: &mut BenchHarness) {"}, {"sha": "66a9d18aaec801f7315a9afbb96a1215ed651700", "filename": "src/libstd/unstable/stack.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f47e4b2874a69491e9d06e4fdbd7de4cb907b52e/src%2Flibstd%2Funstable%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f47e4b2874a69491e9d06e4fdbd7de4cb907b52e/src%2Flibstd%2Funstable%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fstack.rs?ref=f47e4b2874a69491e9d06e4fdbd7de4cb907b52e", "patch": "@@ -36,9 +36,10 @@ static RED_ZONE: uint = 20 * 1024;\n                   //   irrelevant for documentation purposes.\n #[cfg(not(test))] // in testing, use the original libstd's version\n pub extern \"C\" fn rust_stack_exhausted() {\n-    use rt::task::Task;\n     use option::None;\n     use rt::local::Local;\n+    use rt::task::Task;\n+    use str::Str;\n     use unstable::intrinsics;\n \n     unsafe {"}]}