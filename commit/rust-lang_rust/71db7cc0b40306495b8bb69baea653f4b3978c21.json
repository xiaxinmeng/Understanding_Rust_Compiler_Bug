{"sha": "71db7cc0b40306495b8bb69baea653f4b3978c21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZGI3Y2MwYjQwMzA2NDk1YjhiYjY5YmFlYTY1M2Y0YjM5NzhjMjE=", "commit": {"author": {"name": "bstrie", "email": "865233+bstrie@users.noreply.github.com", "date": "2021-05-25T17:57:02Z"}, "committer": {"name": "bstrie", "email": "865233+bstrie@users.noreply.github.com", "date": "2021-05-25T17:57:02Z"}, "message": "rustc_arena: macros 2.0", "tree": {"sha": "0b30ec4f222ba16333be4e57d428493a5bab0f4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b30ec4f222ba16333be4e57d428493a5bab0f4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71db7cc0b40306495b8bb69baea653f4b3978c21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71db7cc0b40306495b8bb69baea653f4b3978c21", "html_url": "https://github.com/rust-lang/rust/commit/71db7cc0b40306495b8bb69baea653f4b3978c21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71db7cc0b40306495b8bb69baea653f4b3978c21/comments", "author": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf24e6ba00e8a74103fc69a8de25ff955f910ba3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf24e6ba00e8a74103fc69a8de25ff955f910ba3", "html_url": "https://github.com/rust-lang/rust/commit/bf24e6ba00e8a74103fc69a8de25ff955f910ba3"}], "stats": {"total": 154, "additions": 76, "deletions": 78}, "files": [{"sha": "2e8022d9880b243c69bc9573090de6e8a80507e9", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 76, "deletions": 78, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/71db7cc0b40306495b8bb69baea653f4b3978c21/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71db7cc0b40306495b8bb69baea653f4b3978c21/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=71db7cc0b40306495b8bb69baea653f4b3978c21", "patch": "@@ -15,6 +15,8 @@\n #![feature(new_uninit)]\n #![feature(maybe_uninit_slice)]\n #![feature(min_specialization)]\n+#![feature(decl_macro)]\n+#![feature(rustc_attrs)]\n #![cfg_attr(test, feature(test))]\n \n use rustc_data_structures::sync;\n@@ -608,117 +610,113 @@ impl DropArena {\n     }\n }\n \n-#[macro_export]\n-macro_rules! arena_for_type {\n+pub macro arena_for_type {\n     ([][$ty:ty]) => {\n         $crate::TypedArena<$ty>\n-    };\n+    },\n     ([few $(, $attrs:ident)*][$ty:ty]) => {\n         ::std::marker::PhantomData<$ty>\n-    };\n+    },\n     ([$ignore:ident $(, $attrs:ident)*]$args:tt) => {\n         $crate::arena_for_type!([$($attrs),*]$args)\n-    };\n+    },\n }\n \n-#[macro_export]\n-macro_rules! which_arena_for_type {\n+pub macro which_arena_for_type {\n     ([][$arena:expr]) => {\n         ::std::option::Option::Some($arena)\n-    };\n+    },\n     ([few$(, $attrs:ident)*][$arena:expr]) => {\n         ::std::option::Option::None\n-    };\n+    },\n     ([$ignore:ident$(, $attrs:ident)*]$args:tt) => {\n         $crate::which_arena_for_type!([$($attrs),*]$args)\n-    };\n+    },\n }\n \n-#[macro_export]\n-macro_rules! declare_arena {\n-    ([], [$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) => {\n-        #[derive(Default)]\n-        pub struct Arena<$tcx> {\n-            pub dropless: $crate::DroplessArena,\n-            drop: $crate::DropArena,\n-            $($name: $crate::arena_for_type!($a[$ty]),)*\n-        }\n+#[rustc_macro_transparency = \"semitransparent\"]\n+pub macro declare_arena([], [$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) {\n+    #[derive(Default)]\n+    pub struct Arena<$tcx> {\n+        pub dropless: $crate::DroplessArena,\n+        drop: $crate::DropArena,\n+        $($name: $crate::arena_for_type!($a[$ty]),)*\n+    }\n \n-        pub trait ArenaAllocatable<'tcx, T = Self>: Sized {\n-            fn allocate_on<'a>(self, arena: &'a Arena<'tcx>) -> &'a mut Self;\n-            fn allocate_from_iter<'a>(\n-                arena: &'a Arena<'tcx>,\n-                iter: impl ::std::iter::IntoIterator<Item = Self>,\n-            ) -> &'a mut [Self];\n+    pub trait ArenaAllocatable<'tcx, T = Self>: Sized {\n+        fn allocate_on<'a>(self, arena: &'a Arena<'tcx>) -> &'a mut Self;\n+        fn allocate_from_iter<'a>(\n+            arena: &'a Arena<'tcx>,\n+            iter: impl ::std::iter::IntoIterator<Item = Self>,\n+        ) -> &'a mut [Self];\n+    }\n+\n+    impl<'tcx, T: Copy> ArenaAllocatable<'tcx, ()> for T {\n+        #[inline]\n+        fn allocate_on<'a>(self, arena: &'a Arena<'tcx>) -> &'a mut Self {\n+            arena.dropless.alloc(self)\n+        }\n+        #[inline]\n+        fn allocate_from_iter<'a>(\n+            arena: &'a Arena<'tcx>,\n+            iter: impl ::std::iter::IntoIterator<Item = Self>,\n+        ) -> &'a mut [Self] {\n+            arena.dropless.alloc_from_iter(iter)\n         }\n \n-        impl<'tcx, T: Copy> ArenaAllocatable<'tcx, ()> for T {\n+    }\n+    $(\n+        impl<$tcx> ArenaAllocatable<$tcx, $ty> for $ty {\n             #[inline]\n-            fn allocate_on<'a>(self, arena: &'a Arena<'tcx>) -> &'a mut Self {\n-                arena.dropless.alloc(self)\n+            fn allocate_on<'a>(self, arena: &'a Arena<$tcx>) -> &'a mut Self {\n+                if !::std::mem::needs_drop::<Self>() {\n+                    return arena.dropless.alloc(self);\n+                }\n+                match $crate::which_arena_for_type!($a[&arena.$name]) {\n+                    ::std::option::Option::<&$crate::TypedArena<Self>>::Some(ty_arena) => {\n+                        ty_arena.alloc(self)\n+                    }\n+                    ::std::option::Option::None => unsafe { arena.drop.alloc(self) },\n+                }\n             }\n+\n             #[inline]\n             fn allocate_from_iter<'a>(\n-                arena: &'a Arena<'tcx>,\n+                arena: &'a Arena<$tcx>,\n                 iter: impl ::std::iter::IntoIterator<Item = Self>,\n             ) -> &'a mut [Self] {\n-                arena.dropless.alloc_from_iter(iter)\n-            }\n-\n-        }\n-        $(\n-            impl<$tcx> ArenaAllocatable<$tcx, $ty> for $ty {\n-                #[inline]\n-                fn allocate_on<'a>(self, arena: &'a Arena<$tcx>) -> &'a mut Self {\n-                    if !::std::mem::needs_drop::<Self>() {\n-                        return arena.dropless.alloc(self);\n-                    }\n-                    match $crate::which_arena_for_type!($a[&arena.$name]) {\n-                        ::std::option::Option::<&$crate::TypedArena<Self>>::Some(ty_arena) => {\n-                            ty_arena.alloc(self)\n-                        }\n-                        ::std::option::Option::None => unsafe { arena.drop.alloc(self) },\n-                    }\n+                if !::std::mem::needs_drop::<Self>() {\n+                    return arena.dropless.alloc_from_iter(iter);\n                 }\n-\n-                #[inline]\n-                fn allocate_from_iter<'a>(\n-                    arena: &'a Arena<$tcx>,\n-                    iter: impl ::std::iter::IntoIterator<Item = Self>,\n-                ) -> &'a mut [Self] {\n-                    if !::std::mem::needs_drop::<Self>() {\n-                        return arena.dropless.alloc_from_iter(iter);\n-                    }\n-                    match $crate::which_arena_for_type!($a[&arena.$name]) {\n-                        ::std::option::Option::<&$crate::TypedArena<Self>>::Some(ty_arena) => {\n-                            ty_arena.alloc_from_iter(iter)\n-                        }\n-                        ::std::option::Option::None => unsafe { arena.drop.alloc_from_iter(iter) },\n+                match $crate::which_arena_for_type!($a[&arena.$name]) {\n+                    ::std::option::Option::<&$crate::TypedArena<Self>>::Some(ty_arena) => {\n+                        ty_arena.alloc_from_iter(iter)\n                     }\n+                    ::std::option::Option::None => unsafe { arena.drop.alloc_from_iter(iter) },\n                 }\n             }\n-        )*\n+        }\n+    )*\n \n-        impl<'tcx> Arena<'tcx> {\n-            #[inline]\n-            pub fn alloc<T: ArenaAllocatable<'tcx, U>, U>(&self, value: T) -> &mut T {\n-                value.allocate_on(self)\n-            }\n+    impl<'tcx> Arena<'tcx> {\n+        #[inline]\n+        pub fn alloc<T: ArenaAllocatable<'tcx, U>, U>(&self, value: T) -> &mut T {\n+            value.allocate_on(self)\n+        }\n \n-            #[inline]\n-            pub fn alloc_slice<T: ::std::marker::Copy>(&self, value: &[T]) -> &mut [T] {\n-                if value.is_empty() {\n-                    return &mut [];\n-                }\n-                self.dropless.alloc_slice(value)\n+        #[inline]\n+        pub fn alloc_slice<T: ::std::marker::Copy>(&self, value: &[T]) -> &mut [T] {\n+            if value.is_empty() {\n+                return &mut [];\n             }\n+            self.dropless.alloc_slice(value)\n+        }\n \n-            pub fn alloc_from_iter<'a, T: ArenaAllocatable<'tcx, U>, U>(\n-                &'a self,\n-                iter: impl ::std::iter::IntoIterator<Item = T>,\n-            ) -> &'a mut [T] {\n-                T::allocate_from_iter(self, iter)\n-            }\n+        pub fn alloc_from_iter<'a, T: ArenaAllocatable<'tcx, U>, U>(\n+            &'a self,\n+            iter: impl ::std::iter::IntoIterator<Item = T>,\n+        ) -> &'a mut [T] {\n+            T::allocate_from_iter(self, iter)\n         }\n     }\n }"}]}