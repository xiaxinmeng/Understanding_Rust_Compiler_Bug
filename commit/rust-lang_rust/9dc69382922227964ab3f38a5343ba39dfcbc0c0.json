{"sha": "9dc69382922227964ab3f38a5343ba39dfcbc0c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYzY5MzgyOTIyMjI3OTY0YWIzZjM4YTUzNDNiYTM5ZGZjYmMwYzA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-01T19:18:58Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-01T19:18:58Z"}, "message": "Merge remote-tracking branch 'nickdesaulniers/issue4524' into nocomm1", "tree": {"sha": "de2f58a2ab7719f3718e181fc6bb3ceb95b4ed82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de2f58a2ab7719f3718e181fc6bb3ceb95b4ed82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dc69382922227964ab3f38a5343ba39dfcbc0c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dc69382922227964ab3f38a5343ba39dfcbc0c0", "html_url": "https://github.com/rust-lang/rust/commit/9dc69382922227964ab3f38a5343ba39dfcbc0c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dc69382922227964ab3f38a5343ba39dfcbc0c0/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a05bbb2013679b4ce48a65124ad30045079f68d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a05bbb2013679b4ce48a65124ad30045079f68d3", "html_url": "https://github.com/rust-lang/rust/commit/a05bbb2013679b4ce48a65124ad30045079f68d3"}, {"sha": "7868b6bf550dcb1b74f25178bcac73d6ec767993", "url": "https://api.github.com/repos/rust-lang/rust/commits/7868b6bf550dcb1b74f25178bcac73d6ec767993", "html_url": "https://github.com/rust-lang/rust/commit/7868b6bf550dcb1b74f25178bcac73d6ec767993"}], "stats": {"total": 352, "additions": 158, "deletions": 194}, "files": [{"sha": "052669be6f5fde2a79914dd8f5d9404d89337606", "filename": "doc/lib/codemirror-rust.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/doc%2Flib%2Fcodemirror-rust.js", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/doc%2Flib%2Fcodemirror-rust.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Flib%2Fcodemirror-rust.js?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -2,7 +2,7 @@ CodeMirror.defineMode(\"rust\", function() {\n   var indentUnit = 4, altIndentUnit = 2;\n   var valKeywords = {\n     \"if\": \"if-style\", \"while\": \"if-style\", \"loop\": \"if-style\", \"else\": \"else-style\",\n-    \"do\": \"else-style\", \"return\": \"else-style\", \"fail\": \"else-style\",\n+    \"do\": \"else-style\", \"return\": \"else-style\",\n     \"break\": \"atom\", \"cont\": \"atom\", \"const\": \"let\", \"resource\": \"fn\",\n     \"let\": \"let\", \"fn\": \"fn\", \"for\": \"for\", \"match\": \"match\", \"trait\": \"trait\",\n     \"impl\": \"impl\", \"type\": \"type\", \"enum\": \"enum\", \"struct\": \"atom\", \"mod\": \"mod\","}, {"sha": "7d4ec54aff5cead7fc266c7586e28045c0148309", "filename": "doc/rust.md", "status": "modified", "additions": 12, "deletions": 25, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -216,7 +216,7 @@ break\n const copy\n do drop\n else enum extern\n-fail false fn for\n+false fn for\n if impl\n let log loop\n match mod move mut\n@@ -692,15 +692,15 @@ mod math {\n     type complex = (f64, f64);\n     fn sin(f: f64) -> f64 {\n         ...\n-# fail;\n+# die!();\n     }\n     fn cos(f: f64) -> f64 {\n         ...\n-# fail;\n+# die!();\n     }\n     fn tan(f: f64) -> f64 {\n         ...\n-# fail;\n+# die!();\n     }\n }\n ~~~~~~~~\n@@ -992,13 +992,13 @@ output slot type would normally be. For example:\n ~~~~\n fn my_err(s: &str) -> ! {\n     log(info, s);\n-    fail;\n+    die!();\n }\n ~~~~\n \n We call such functions \"diverging\" because they never return a value to the\n caller. Every control path in a diverging function must end with a\n-[`fail`](#fail-expressions) or a call to another diverging function on every\n+`fail!()` or a call to another diverging function on every\n control path. The `!` annotation does *not* denote a type. Rather, the result\n type of a diverging function is a special type called $\\bot$ (\"bottom\") that\n unifies with any type. Rust has no syntax for $\\bot$.\n@@ -1010,7 +1010,7 @@ were declared without the `!` annotation, the following code would not\n typecheck:\n \n ~~~~\n-# fn my_err(s: &str) -> ! { fail }\n+# fn my_err(s: &str) -> ! { die!() }\n \n fn f(i: int) -> int {\n    if i == 42 {\n@@ -2294,9 +2294,9 @@ enum List<X> { Nil, Cons(X, @List<X>) }\n let x: List<int> = Cons(10, @Cons(11, @Nil));\n \n match x {\n-    Cons(_, @Nil) => fail ~\"singleton list\",\n+    Cons(_, @Nil) => die!(~\"singleton list\"),\n     Cons(*)       => return,\n-    Nil           => fail ~\"empty list\"\n+    Nil           => die!(~\"empty list\")\n }\n ~~~~\n \n@@ -2333,7 +2333,7 @@ match x {\n         return;\n     }\n     _ => {\n-        fail;\n+        die!();\n     }\n }\n ~~~~\n@@ -2421,23 +2421,10 @@ guard may refer to the variables bound within the pattern they follow.\n let message = match maybe_digit {\n   Some(x) if x < 10 => process_digit(x),\n   Some(x) => process_other(x),\n-  None => fail\n+  None => die!()\n };\n ~~~~\n \n-\n-### Fail expressions\n-\n-~~~~~~~~{.ebnf .gram}\n-fail_expr : \"fail\" expr ? ;\n-~~~~~~~~\n-\n-Evaluating a `fail` expression causes a task to enter the *failing* state. In\n-the *failing* state, a task unwinds its stack, destroying all frames and\n-running all destructors until it reaches its entry frame, at which point it\n-halts execution in the *dead* state.\n-\n-\n ### Return expressions\n \n ~~~~~~~~{.ebnf .gram}\n@@ -3157,7 +3144,7 @@ unblock and transition back to *running*.\n \n A task may transition to the *failing* state at any time, due being\n killed by some external event or internally, from the evaluation of a\n-`fail` expression. Once *failing*, a task unwinds its stack and\n+`fail!()` macro. Once *failing*, a task unwinds its stack and\n transitions to the *dead* state. Unwinding the stack of a task is done by\n the task itself, on its own control stack. If a value with a destructor is\n freed during unwinding, the code for the destructor is run, also on the task's"}, {"sha": "4db584f20650d215a4d65ec553651d8e0595d64d", "filename": "doc/tutorial-macros.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/doc%2Ftutorial-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/doc%2Ftutorial-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-macros.md?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -218,7 +218,7 @@ match x {\n                 // complicated stuff goes here\n                 return result + val;\n             },\n-            _ => fail ~\"Didn't get good_2\"\n+            _ => die!(~\"Didn't get good_2\")\n         }\n     }\n     _ => return 0 // default value\n@@ -260,7 +260,7 @@ macro_rules! biased_match (\n biased_match!((x)       ~ (good_1(g1, val)) else { return 0 };\n               binds g1, val )\n biased_match!((g1.body) ~ (good_2(result) )\n-                  else { fail ~\"Didn't get good_2\" };\n+                  else { die!(~\"Didn't get good_2\") };\n               binds result )\n // complicated stuff goes here\n return result + val;\n@@ -362,7 +362,7 @@ macro_rules! biased_match (\n # fn f(x: t1) -> uint {\n biased_match!(\n     (x)       ~ (good_1(g1, val)) else { return 0 };\n-    (g1.body) ~ (good_2(result) ) else { fail ~\"Didn't get good_2\" };\n+    (g1.body) ~ (good_2(result) ) else { die!(~\"Didn't get good_2\") };\n     binds val, result )\n // complicated stuff goes here\n return result + val;"}, {"sha": "3434ef022da5e8139ec9e1c613ebaf2551461626", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -13,7 +13,7 @@ cheaper to create than traditional threads, Rust can create hundreds of\n thousands of concurrent tasks on a typical 32-bit system.\n \n Tasks provide failure isolation and recovery. When an exception occurs in Rust\n-code (as a result of an explicit call to `fail`, an assertion failure, or\n+code (as a result of an explicit call to `fail!()`, an assertion failure, or\n another invalid operation), the runtime system destroys the entire\n task. Unlike in languages such as Java and C++, there is no way to `catch` an\n exception. Instead, tasks may monitor each other for failure.\n@@ -296,9 +296,9 @@ let result = ports.foldl(0, |accum, port| *accum + port.recv() );\n \n # Handling task failure\n \n-Rust has a built-in mechanism for raising exceptions. The `fail` construct\n-(which can also be written with an error string as an argument: `fail\n-~reason`) and the `assert` construct (which effectively calls `fail` if a\n+Rust has a built-in mechanism for raising exceptions. The `fail!()` macro\n+(which can also be written with an error string as an argument: `fail!(\n+~reason)`) and the `assert` construct (which effectively calls `fail!()` if a\n boolean expression is false) are both ways to raise exceptions. When a task\n raises an exception the task unwinds its stack---running destructors and\n freeing memory along the way---and then exits. Unlike exceptions in C++,\n@@ -313,7 +313,7 @@ of all tasks are intertwined: if one fails, so do all the others.\n # fn do_some_work() { loop { task::yield() } }\n # do task::try {\n // Create a child task that fails\n-do spawn { fail }\n+do spawn { die!() }\n \n // This will also fail because the task we spawned failed\n do_some_work();\n@@ -337,7 +337,7 @@ let result: Result<int, ()> = do task::try {\n     if some_condition() {\n         calculate_result()\n     } else {\n-        fail ~\"oops!\";\n+        die!(~\"oops!\");\n     }\n };\n assert result.is_err();\n@@ -354,7 +354,7 @@ an `Error` result.\n > ***Note:*** A failed task does not currently produce a useful error\n > value (`try` always returns `Err(())`). In the\n > future, it may be possible for tasks to intercept the value passed to\n-> `fail`.\n+> `fail!()`.\n \n TODO: Need discussion of `future_result` in order to make failure\n modes useful.\n@@ -377,7 +377,7 @@ either task dies, it kills the other one.\n # do task::try {\n do task::spawn {\n     do task::spawn {\n-        fail;  // All three tasks will die.\n+        die!();  // All three tasks will die.\n     }\n     sleep_forever();  // Will get woken up by force, then fail\n }\n@@ -432,7 +432,7 @@ do task::spawn_supervised {\n     // Intermediate task immediately exits\n }\n wait_for_a_while();\n-fail;  // Will kill grandchild even if child has already exited\n+die!();  // Will kill grandchild even if child has already exited\n # };\n ~~~\n \n@@ -446,10 +446,10 @@ other at all, using `task::spawn_unlinked` for _isolated failure_.\n let (time1, time2) = (random(), random());\n do task::spawn_unlinked {\n     sleep_for(time2);  // Won't get forced awake\n-    fail;\n+    die!();\n }\n sleep_for(time1);  // Won't get forced awake\n-fail;\n+die!();\n // It will take MAX(time1,time2) for the program to finish.\n # };\n ~~~"}, {"sha": "cb455852261b95413c981a2d5fc71e2fcd5a7cee", "filename": "src/libcargo/cargo.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibcargo%2Fcargo.rc", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibcargo%2Fcargo.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcargo%2Fcargo.rc?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -460,7 +460,7 @@ pub fn parse_source(name: ~str, j: &json::Json) -> @Source {\n         json::Object(j) => {\n             let mut url = match j.find(&~\"url\") {\n                 Some(&json::String(u)) => copy u,\n-                _ => fail ~\"needed 'url' field in source\"\n+                _ => die!(~\"needed 'url' field in source\")\n             };\n             let method = match j.find(&~\"method\") {\n                 Some(&json::String(u)) => copy u,"}, {"sha": "2fd7d71a7fc5d15c77fbf1703edf27b90768c550", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -179,7 +179,7 @@ impl<A> DVec<A> {\n             let mut data = cast::reinterpret_cast(&null::<()>());\n             data <-> self.data;\n             let data_ptr: *() = cast::reinterpret_cast(&data);\n-            if data_ptr.is_null() { fail ~\"Recursive use of dvec\"; }\n+            if data_ptr.is_null() { die!(~\"Recursive use of dvec\"); }\n             self.data = move ~[move t];\n             self.data.push_all_move(move data);\n         }"}, {"sha": "adb16a9290553191a1dc2d5ff7532ff8cc7e217e", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -386,7 +386,7 @@ pub mod linear {\n         pure fn get(&self, k: &K) -> &self/V {\n             match self.find(k) {\n                 Some(v) => v,\n-                None => fail fmt!(\"No entry found for key: %?\", k),\n+                None => die!(fmt!(\"No entry found for key: %?\", k)),\n             }\n         }\n     }"}, {"sha": "254e6010b1b2e894afd0ff7fa23108624ceaf183", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -549,7 +549,7 @@ pub fn send<T,Tbuffer>(p: SendPacketBuffered<T,Tbuffer>, payload: T) -> bool {\n             //unsafe { forget(p); }\n             return true;\n         }\n-        Full => fail ~\"duplicate send\",\n+        Full => die!(~\"duplicate send\"),\n         Blocked => {\n             debug!(\"waking up task for %?\", p_);\n             let old_task = swap_task(&mut p.header.blocked_task, ptr::null());\n@@ -1020,7 +1020,7 @@ impl<T:Owned,Tbuffer:Owned> SendPacketBuffered<T,Tbuffer> {\n             //forget(packet);\n             header\n           },\n-          None => fail ~\"packet already consumed\"\n+          None => die!(~\"packet already consumed\")\n         }\n     }\n "}, {"sha": "2c27b8ab3a2ca317a89a0cb21a6943588830b5e2", "filename": "src/libcore/private/finally.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibcore%2Fprivate%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibcore%2Fprivate%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate%2Ffinally.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -71,7 +71,7 @@ fn test_fail() {\n     let mut i = 0;\n     do (|| {\n         i = 10;\n-        fail;\n+        die!();\n     }).finally {\n         assert failing();\n         assert i == 10;\n@@ -95,4 +95,4 @@ fn test_compact() {\n     fn but_always_run_this_function() { }\n     do_some_fallible_work.finally(\n         but_always_run_this_function);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "cc46c19c3d27da0b7b378bfd1af41a436fae5f94", "filename": "src/libcore/private/global.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibcore%2Fprivate%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibcore%2Fprivate%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate%2Fglobal.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -269,7 +269,7 @@ fn test_modify() {\n                         Some(~shared_mutable_state(10))\n                     }\n                 }\n-                _ => fail\n+                _ => die!()\n             }\n         }\n \n@@ -280,7 +280,7 @@ fn test_modify() {\n                     assert *v == 10;\n                     None\n                 },\n-                _ => fail\n+                _ => die!()\n             }\n         }\n \n@@ -291,7 +291,7 @@ fn test_modify() {\n                         Some(~shared_mutable_state(10))\n                     }\n                 }\n-                _ => fail\n+                _ => die!()\n             }\n         }\n     }"}, {"sha": "9d57cd5a466acc7ec0f1fe735b9be01a63fa13ea", "filename": "src/libcore/private/weak_task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibcore%2Fprivate%2Fweak_task.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibcore%2Fprivate%2Fweak_task.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate%2Fweak_task.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -112,7 +112,7 @@ fn run_weak_task_service(port: Port<ServiceMsg>) {\n                         // nobody will receive this\n                         shutdown_chan.send(());\n                     }\n-                    None => fail\n+                    None => die!()\n                 }\n             }\n             Shutdown => break\n@@ -195,7 +195,7 @@ fn test_select_stream_and_oneshot() {\n             do weaken_task |signal| {\n                 match select2i(&port, &signal) {\n                     Left(*) => (),\n-                    Right(*) => fail\n+                    Right(*) => die!()\n                 }\n             }\n         }"}, {"sha": "a5c3afcc87f5e043185344b4af19a661de5ea4d7", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -594,7 +594,7 @@ impl ReprVisitor : TyVisitor {\n     }\n \n     // Type no longer exists, vestigial function.\n-    fn visit_str(&self) -> bool { fail; }\n+    fn visit_str(&self) -> bool { die!(); }\n \n     fn visit_estr_box(&self) -> bool {\n         do self.get::<@str> |s| {\n@@ -616,7 +616,7 @@ impl ReprVisitor : TyVisitor {\n \n     // Type no longer exists, vestigial function.\n     fn visit_estr_fixed(&self, _n: uint, _sz: uint,\n-                        _align: uint) -> bool { fail; }\n+                        _align: uint) -> bool { die!(); }\n \n     fn visit_box(&self, mtbl: uint, inner: *TyDesc) -> bool {\n         self.writer.write_char('@');\n@@ -652,7 +652,7 @@ impl ReprVisitor : TyVisitor {\n     }\n \n     // Type no longer exists, vestigial function.\n-    fn visit_vec(&self, _mtbl: uint, _inner: *TyDesc) -> bool { fail; }\n+    fn visit_vec(&self, _mtbl: uint, _inner: *TyDesc) -> bool { die!(); }\n \n \n     fn visit_unboxed_vec(&self, mtbl: uint, inner: *TyDesc) -> bool {\n@@ -859,7 +859,7 @@ impl ReprVisitor : TyVisitor {\n     }\n \n     // Type no longer exists, vestigial function.\n-    fn visit_constr(&self, _inner: *TyDesc) -> bool { fail; }\n+    fn visit_constr(&self, _inner: *TyDesc) -> bool { die!(); }\n \n     fn visit_closure_ptr(&self, _ck: uint) -> bool { true }\n }"}, {"sha": "d276f0c6ea9e2250f4048d29710304e037548cf3", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -733,7 +733,7 @@ fn test_spawn_linked_sup_fail_up() { // child fails; parent fails\n         can_not_copy: None,\n         .. b0\n     };\n-    do b1.spawn { fail; }\n+    do b1.spawn { die!(); }\n     po.recv(); // We should get punted awake\n }\n #[test] #[should_fail] #[ignore(cfg(windows))]\n@@ -760,7 +760,7 @@ fn test_spawn_linked_sup_fail_down() { // parent fails; child fails\n fn test_spawn_linked_unsup_fail_up() { // child fails; parent fails\n     let (po, _ch) = stream::<()>();\n     // Default options are to spawn linked & unsupervised.\n-    do spawn { fail; }\n+    do spawn { die!(); }\n     po.recv(); // We should get punted awake\n }\n #[test] #[should_fail] #[ignore(cfg(windows))]"}, {"sha": "ce95cdd020500e9cd77dddfe4f4dabe07e54b5a6", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -646,25 +646,25 @@ pub fn spawn_raw(opts: TaskOpts, f: fn~()) {\n \n     fn new_task_in_sched(opts: SchedOpts) -> *rust_task {\n         if opts.foreign_stack_size != None {\n-            fail ~\"foreign_stack_size scheduler option unimplemented\";\n+            die!(~\"foreign_stack_size scheduler option unimplemented\");\n         }\n \n         let num_threads = match opts.mode {\n-          DefaultScheduler\n-          | CurrentScheduler\n-          | ExistingScheduler(*)\n-          | PlatformThread => 0u, /* Won't be used */\n-          SingleThreaded => 1u,\n-          ThreadPerCore => unsafe { rt::rust_num_threads() },\n-          ThreadPerTask => {\n-            fail ~\"ThreadPerTask scheduling mode unimplemented\"\n-          }\n-          ManualThreads(threads) => {\n-            if threads == 0u {\n-                fail ~\"can not create a scheduler with no threads\";\n+            DefaultScheduler\n+            | CurrentScheduler\n+            | ExistingScheduler(*)\n+            | PlatformThread => 0u, /* Won't be used */\n+            SingleThreaded => 1u,\n+            ThreadPerCore => unsafe { rt::rust_num_threads() },\n+            ThreadPerTask => {\n+                die!(~\"ThreadPerTask scheduling mode unimplemented\")\n+            }\n+            ManualThreads(threads) => {\n+                if threads == 0u {\n+                    die!(~\"can not create a scheduler with no threads\");\n+                }\n+                threads\n             }\n-            threads\n-          }\n         };\n \n         unsafe {"}, {"sha": "c8083554c8bafa3e317231f2778b12f4d04cf00f", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -84,9 +84,6 @@ pub fn common_exprs() -> ~[ast::expr] {\n \n     ~[dse(ast::expr_break(option::None)),\n      dse(ast::expr_again(option::None)),\n-     dse(ast::expr_fail(option::None)),\n-     dse(ast::expr_fail(option::Some(\n-         @dse(ast::expr_lit(@dsl(ast::lit_str(@~\"boo\"))))))),\n      dse(ast::expr_ret(option::None)),\n      dse(ast::expr_lit(@dsl(ast::lit_nil))),\n      dse(ast::expr_lit(@dsl(ast::lit_bool(false)))),\n@@ -117,11 +114,10 @@ pub pure fn safe_to_use_expr(e: ast::expr, tm: test_mode) -> bool {\n           ast::expr_binary(*) | ast::expr_assign(*) |\n           ast::expr_assign_op(*) => { false }\n \n-          ast::expr_fail(option::None) |\n           ast::expr_ret(option::None) => { false }\n \n           // https://github.com/mozilla/rust/issues/953\n-          ast::expr_fail(option::Some(_)) => { false }\n+          //ast::expr_fail(option::Some(_)) => { false }\n \n           // https://github.com/mozilla/rust/issues/928\n           //ast::expr_cast(_, _) { false }"}, {"sha": "33879237ffb492a4868fc1e2cfb33150dbacfccc", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -886,7 +886,7 @@ fn encode_info_for_items(ecx: @encode_ctxt, ebml_w: writer::Encoder,\n                         encode_info_for_item(ecx, ebml_w, i,\n                                              index, *pt);\n                     }\n-                    _ => fail ~\"bad item\"\n+                    _ => die!(~\"bad item\")\n                 }\n             }\n         },\n@@ -901,7 +901,7 @@ fn encode_info_for_items(ecx: @encode_ctxt, ebml_w: writer::Encoder,\n                                                      abi);\n                     }\n                     // case for separate item and foreign-item tables\n-                    _ => fail ~\"bad foreign item\"\n+                    _ => die!(~\"bad foreign item\")\n                 }\n             }\n         },"}, {"sha": "47fd0b526a68ce3e8af6939248f79bcdbd9b3008", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -610,7 +610,7 @@ fn visit_expr(expr: @expr, &&self: @IrMaps, vt: vt<@IrMaps>) {\n       expr_tup(*) | expr_log(*) | expr_binary(*) |\n       expr_assert(*) | expr_addr_of(*) | expr_copy(*) |\n       expr_loop_body(*) | expr_do_body(*) | expr_cast(*) |\n-      expr_unary(*) | expr_fail(*) |\n+      expr_unary(*) |\n       expr_break(_) | expr_again(_) | expr_lit(_) | expr_ret(*) |\n       expr_block(*) | expr_assign(*) |\n       expr_swap(*) | expr_assign_op(*) | expr_mac(*) | expr_struct(*) |\n@@ -1191,7 +1191,7 @@ impl Liveness {\n             self.propagate_through_expr(e, ln)\n           }\n \n-          expr_ret(o_e) | expr_fail(o_e) => {\n+          expr_ret(o_e) => {\n             // ignore succ and subst exit_ln:\n             self.propagate_through_opt_expr(o_e, self.s.exit_ln)\n           }\n@@ -1608,7 +1608,7 @@ fn check_expr(expr: @expr, &&self: @Liveness, vt: vt<@Liveness>) {\n       expr_log(*) | expr_binary(*) |\n       expr_assert(*) | expr_copy(*) |\n       expr_loop_body(*) | expr_do_body(*) |\n-      expr_cast(*) | expr_unary(*) | expr_fail(*) |\n+      expr_cast(*) | expr_unary(*) |\n       expr_ret(*) | expr_break(*) | expr_again(*) | expr_lit(_) |\n       expr_block(*) | expr_swap(*) | expr_mac(*) | expr_addr_of(*) |\n       expr_struct(*) | expr_repeat(*) | expr_paren(*) => {"}, {"sha": "85cae4a0e676517d16d1d043ba98f3b52290cf7a", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -387,7 +387,7 @@ pub impl &mem_categorization_ctxt {\n           ast::expr_assert(*) | ast::expr_ret(*) |\n           ast::expr_loop_body(*) | ast::expr_do_body(*) |\n           ast::expr_unary(*) | ast::expr_method_call(*) |\n-          ast::expr_copy(*) | ast::expr_cast(*) | ast::expr_fail(*) |\n+          ast::expr_copy(*) | ast::expr_cast(*) |\n           ast::expr_vstore(*) | ast::expr_vec(*) | ast::expr_tup(*) |\n           ast::expr_if(*) | ast::expr_log(*) |\n           ast::expr_binary(*) | ast::expr_while(*) |"}, {"sha": "30812a67a7bb0411bea008de1e054518d833c240", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -573,7 +573,6 @@ impl VisitContext {\n                 self.consume_block(blk, visitor);\n             }\n \n-            expr_fail(ref opt_expr) |\n             expr_ret(ref opt_expr) => {\n                 for opt_expr.each |expr| {\n                     self.consume_expr(*expr, visitor);\n@@ -812,4 +811,4 @@ impl VisitContext {\n             })\n         }\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "75a627a4422d8f6d911cb224415adfa713d57eb0", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -468,9 +468,6 @@ fn trans_rvalue_stmt_unadjusted(bcx: block, expr: @ast::expr) -> block {\n         ast::expr_ret(ex) => {\n             return controlflow::trans_ret(bcx, ex);\n         }\n-        ast::expr_fail(why) => {\n-            return controlflow::trans_fail_expr(bcx, Some(expr.span), why);\n-        }\n         ast::expr_log(_, lvl, a) => {\n             return controlflow::trans_log(expr, lvl, bcx, a);\n         }"}, {"sha": "5a5644fefb97a986e80808bb748d4f206a3032eb", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -265,7 +265,8 @@ pub fn trans_method_callee(bcx: block,\n                                mentry.explicit_self)\n         }\n         typeck::method_self(*) | typeck::method_super(*) => {\n-            fail ~\"method_self or method_super should have been handled above\"\n+            die!(~\"method_self or method_super should have been handled \\\n+                above\")\n         }\n     }\n }"}, {"sha": "baf84436eab62827d39f01d19ac40a656f8320cc", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -340,7 +340,7 @@ pub fn mark_for_expr(cx: ctx, e: @expr) {\n       }\n       expr_paren(e) => mark_for_expr(cx, e),\n       expr_match(*) | expr_block(_) | expr_if(*) |\n-      expr_while(*) | expr_fail(_) | expr_break(_) | expr_again(_) |\n+      expr_while(*) | expr_break(_) | expr_again(_) |\n       expr_unary(_, _) | expr_lit(_) | expr_assert(_) |\n       expr_mac(_) | expr_addr_of(_, _) |\n       expr_ret(_) | expr_loop(_, _) |"}, {"sha": "1fd082bb65c52bc10ce93fbe72b5ad74d02b933d", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -2860,7 +2860,7 @@ pub pure fn ty_vstore(ty: t) -> vstore {\n     match get(ty).sty {\n         ty_evec(_, vstore) => vstore,\n         ty_estr(vstore) => vstore,\n-        ref s => fail fmt!(\"ty_vstore() called on invalid sty: %?\", s)\n+        ref s => die!(fmt!(\"ty_vstore() called on invalid sty: %?\", s))\n     }\n }\n \n@@ -2869,7 +2869,8 @@ pub fn ty_region(ty: t) -> Region {\n       ty_rptr(r, _) => r,\n       ty_evec(_, vstore_slice(r)) => r,\n       ty_estr(vstore_slice(r)) => r,\n-      ref s => fail fmt!(\"ty_region() invoked on in appropriate ty: %?\", (*s))\n+      ref s => die!(fmt!(\"ty_region() invoked on in appropriate ty: %?\",\n+          (*s)))\n     }\n }\n \n@@ -3205,7 +3206,6 @@ pub fn expr_kind(tcx: ctxt,\n         ast::expr_again(*) |\n         ast::expr_ret(*) |\n         ast::expr_log(*) |\n-        ast::expr_fail(*) |\n         ast::expr_assert(*) |\n         ast::expr_while(*) |\n         ast::expr_loop(*) |"}, {"sha": "7f82e916d744987dd9040cb2fd604e13f4cd91a9", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -1233,7 +1233,7 @@ pub impl LookupContext {\n         let span = if did.crate == ast::local_crate {\n             match self.tcx().items.find(did.node) {\n               Some(ast_map::node_method(m, _, _)) => m.span,\n-              _ => fail fmt!(\"report_static_candidate: bad item %?\", did)\n+              _ => die!(fmt!(\"report_static_candidate: bad item %?\", did))\n             }\n         } else {\n             self.expr.span"}, {"sha": "5eb3362937074b9c8203c16292c4723d4726df60", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -2087,17 +2087,6 @@ pub fn check_expr_with_unifier(fcx: @fn_ctxt,\n         instantiate_path(fcx, pth, tpt, expr.span, expr.id, region_lb);\n       }\n       ast::expr_mac(_) => tcx.sess.bug(~\"unexpanded macro\"),\n-      ast::expr_fail(expr_opt) => {\n-        bot = true;\n-        match expr_opt {\n-          None => {/* do nothing */ }\n-          Some(e) => {\n-            check_expr_has_type(\n-                fcx, e, ty::mk_estr(tcx, ty::vstore_uniq));\n-          }\n-        }\n-        fcx.write_bot(id);\n-      }\n       ast::expr_break(_) => { fcx.write_bot(id); bot = true; }\n       ast::expr_again(_) => { fcx.write_bot(id); bot = true; }\n       ast::expr_ret(expr_opt) => {"}, {"sha": "89e156f2741a14a8ab7cb674afc46a9004118d1a", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -689,7 +689,6 @@ pub mod guarantor {\n             ast::expr_again(*) |\n             ast::expr_ret(*) |\n             ast::expr_log(*) |\n-            ast::expr_fail(*) |\n             ast::expr_assert(*) |\n             ast::expr_while(*) |\n             ast::expr_loop(*) |"}, {"sha": "d4789ace703eb1ce6bbcd6857fefd7eb28441fc2", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -119,7 +119,7 @@ fn parse_item_attrs<T:Owned>(\n         let attrs = match ctxt.ast_map.get(id) {\n           ast_map::node_item(item, _) => copy item.attrs,\n           ast_map::node_foreign_item(item, _, _) => copy item.attrs,\n-          _ => fail ~\"parse_item_attrs: not an item\"\n+          _ => die!(~\"parse_item_attrs: not an item\")\n         };\n         parse_attrs(attrs)\n     }\n@@ -183,9 +183,9 @@ fn fold_enum(\n                                 copy ast_variant.node.attrs)\n                         }\n                         _ => {\n-                            fail fmt!(\"Enum variant %s has id that's \\\n+                            die!(fmt!(\"Enum variant %s has id that's \\\n                                        not bound to an enum item\",\n-                                      variant.name)\n+                                      variant.name))\n                         }\n                     }\n                 }"}, {"sha": "ff6b745612dee6346cee26652e26580e4a729001", "filename": "src/librustdoc/demo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibrustdoc%2Fdemo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibrustdoc%2Fdemo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdemo.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -192,6 +192,6 @@ impl OmNomNomy: TheShunnedHouse {\n     }\n \n     fn construct(&self) -> bool {\n-        fail;\n+        die!();\n     }\n }"}, {"sha": "880e7ea1435b38741a4cbb22314e8814d3037296", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -113,7 +113,7 @@ fn fold_const(\n                     }, _) => {\n                         pprust::ty_to_str(ty, extract::interner())\n                     }\n-                    _ => fail ~\"fold_const: id not bound to a const item\"\n+                    _ => die!(~\"fold_const: id not bound to a const item\")\n                 }\n             }}),\n         .. doc\n@@ -150,7 +150,7 @@ fn fold_enum(\n                             pprust::variant_to_str(\n                                 ast_variant, extract::interner())\n                         }\n-                        _ => fail ~\"enum variant not bound to an enum item\"\n+                        _ => die!(~\"enum variant not bound to an enum item\")\n                     }\n                 }\n             };\n@@ -282,7 +282,7 @@ fn fold_impl(\n                      Some(pprust::ty_to_str(\n                          self_ty, extract::interner())))\n                 }\n-                _ => fail ~\"expected impl\"\n+                _ => die!(~\"expected impl\")\n             }\n         }\n     };\n@@ -345,7 +345,7 @@ fn fold_type(\n                                               extract::interner())\n                         ))\n                     }\n-                    _ => fail ~\"expected type\"\n+                    _ => die!(~\"expected type\")\n                 }\n             }\n         },\n@@ -375,7 +375,7 @@ fn fold_struct(\n                         Some(pprust::item_to_str(item,\n                                                  extract::interner()))\n                     }\n-                    _ => fail ~\"not an item\"\n+                    _ => die!(~\"not an item\")\n                 }\n             }\n         },"}, {"sha": "0104e72764f69a64997cbc55e43bee22a7e0d9f6", "filename": "src/libstd/bigint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibstd%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibstd%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbigint.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -245,7 +245,7 @@ impl BigUint : Modulo<BigUint, BigUint> {\n }\n \n impl BigUint : Neg<BigUint> {\n-    pure fn neg(&self) -> BigUint { fail }\n+    pure fn neg(&self) -> BigUint { die!() }\n }\n \n impl BigUint : IntConvertible {"}, {"sha": "b86286a198da94be5132a1e584bc37fbaccbbe76", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -940,7 +940,7 @@ impl TcpSocketBuf: io::Reader {\n               } else {\n                   debug!(\"ERROR sock_buf as io::reader.read err %? %?\",\n                          err_data.err_name, err_data.err_msg);\n-                  fail\n+                  die!()\n               }\n           }\n           else {"}, {"sha": "5a2693a42c143af6fc535be5808ec7a8df75d25a", "filename": "src/libstd/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -446,7 +446,7 @@ mod tests {\n \n     #[test]\n     pub fn do_not_run_ignored_tests() {\n-        fn f() { fail; }\n+        fn f() { die!(); }\n         let desc = TestDesc {\n             name: ~\"whatever\",\n             testfn: f,\n@@ -479,7 +479,7 @@ mod tests {\n     #[test]\n     #[ignore(cfg(windows))]\n     pub fn test_should_fail() {\n-        fn f() { fail; }\n+        fn f() { die!(); }\n         let desc = TestDesc {\n             name: ~\"whatever\",\n             testfn: f,"}, {"sha": "736954f6b222f36f868b73920aa7ebf0a1c18629", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -185,14 +185,12 @@ mod test {\n                         let start_status = ll::timer_start(timer_ptr,\n                                                            simple_timer_cb,\n                                                            1u, 0u);\n-                        if(start_status == 0i32) {\n-                        }\n-                        else {\n-                            fail ~\"failure on ll::timer_start()\";\n+                        if(start_status != 0i32) {\n+                            die!(~\"failure on ll::timer_start()\");\n                         }\n                     }\n                     else {\n-                        fail ~\"failure on ll::timer_init()\";\n+                        die!(~\"failure on ll::timer_init()\");\n                     }\n                 }\n             };"}, {"sha": "a651090cf64625e0cb7bd88564fde049603ec76d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -686,7 +686,7 @@ pub enum expr_ {\n     expr_cast(@expr, @Ty),\n     expr_if(@expr, blk, Option<@expr>),\n     expr_while(@expr, blk),\n-    /* Conditionless loop (can be exited with break, cont, ret, or fail)\n+    /* Conditionless loop (can be exited with break, cont, or ret)\n        Same semantics as while(true) { body }, but typestate knows that the\n        (implicit) condition is always true. */\n     expr_loop(blk, Option<ident>),\n@@ -712,7 +712,6 @@ pub enum expr_ {\n     expr_index(@expr, @expr),\n     expr_path(@path),\n     expr_addr_of(mutability, @expr),\n-    expr_fail(Option<@expr>),\n     expr_break(Option<ident>),\n     expr_again(Option<ident>),\n     expr_ret(Option<@expr>),"}, {"sha": "622db9400be5c7b0b4bde728bccd2cdaae345b67", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 33, "deletions": 28, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -1025,7 +1025,7 @@ fn mk_enum_deser_variant_nary(\n }\n \n fn mk_enum_deser_body(\n-    cx: ext_ctxt,\n+    ext_cx: ext_ctxt,\n     span: span,\n     name: ast::ident,\n     variants: ~[ast::variant]\n@@ -1035,11 +1035,11 @@ fn mk_enum_deser_body(\n             ast::tuple_variant_kind(args) => {\n                 if args.is_empty() {\n                     // for a nullary variant v, do \"v\"\n-                    cx.expr_path(span, ~[variant.node.name])\n+                    ext_cx.expr_path(span, ~[variant.node.name])\n                 } else {\n                     // for an n-ary variant v, do \"v(a_1, ..., a_n)\"\n                     mk_enum_deser_variant_nary(\n-                        cx,\n+                        ext_cx,\n                         span,\n                         variant.node.name,\n                         args\n@@ -1053,94 +1053,99 @@ fn mk_enum_deser_body(\n         };\n \n         let pat = @ast::pat {\n-            id: cx.next_id(),\n-            node: ast::pat_lit(cx.lit_uint(span, v_idx)),\n+            id: ext_cx.next_id(),\n+            node: ast::pat_lit(ext_cx.lit_uint(span, v_idx)),\n             span: span,\n         };\n \n         ast::arm {\n             pats: ~[pat],\n             guard: None,\n-            body: cx.expr_blk(body),\n+            body: ext_cx.expr_blk(body),\n         }\n     };\n \n+    let quoted_expr = quote_expr!(\n+      ::core::sys::begin_unwind(~\"explicit failure\", ~\"empty\", 1);\n+    ).node;\n+\n     let impossible_case = ast::arm {\n         pats: ~[@ast::pat {\n-            id: cx.next_id(),\n+            id: ext_cx.next_id(),\n             node: ast::pat_wild,\n             span: span,\n         }],\n         guard: None,\n \n         // FIXME(#3198): proper error message\n-        body: cx.expr_blk(cx.expr(span, ast::expr_fail(None))),\n+        body: ext_cx.expr_blk(ext_cx.expr(span, quoted_expr)),\n     };\n \n     arms.push(impossible_case);\n \n     // ast for `|i| { match i { $(arms) } }`\n-    let expr_lambda = cx.expr(\n+    let expr_lambda = ext_cx.expr(\n         span,\n         ast::expr_fn_block(\n             ast::fn_decl {\n                 inputs: ~[ast::arg {\n-                    mode: ast::infer(cx.next_id()),\n+                    mode: ast::infer(ext_cx.next_id()),\n                     is_mutbl: false,\n                     ty: @ast::Ty {\n-                        id: cx.next_id(),\n+                        id: ext_cx.next_id(),\n                         node: ast::ty_infer,\n                         span: span\n                     },\n                     pat: @ast::pat {\n-                        id: cx.next_id(),\n+                        id: ext_cx.next_id(),\n                         node: ast::pat_ident(\n                             ast::bind_by_copy,\n-                            ast_util::ident_to_path(span, cx.ident_of(~\"i\")),\n+                            ast_util::ident_to_path(span,\n+                                ext_cx.ident_of(~\"i\")),\n                             None),\n                         span: span,\n                     },\n-                    id: cx.next_id(),\n+                    id: ext_cx.next_id(),\n                 }],\n                 output: @ast::Ty {\n-                    id: cx.next_id(),\n+                    id: ext_cx.next_id(),\n                     node: ast::ty_infer,\n                     span: span,\n                 },\n                 cf: ast::return_val,\n             },\n-            cx.expr_blk(\n-                cx.expr(\n+            ext_cx.expr_blk(\n+                ext_cx.expr(\n                     span,\n-                    ast::expr_match(cx.expr_var(span, ~\"i\"), arms)\n+                    ast::expr_match(ext_cx.expr_var(span, ~\"i\"), arms)\n                 )\n             )\n         )\n     );\n \n     // ast for `__d.read_enum_variant($(expr_lambda))`\n-    let expr_lambda = cx.lambda_expr(\n-        cx.expr_call(\n+    let expr_lambda = ext_cx.lambda_expr(\n+        ext_cx.expr_call(\n             span,\n-            cx.expr_field(\n+            ext_cx.expr_field(\n                 span,\n-                cx.expr_var(span, ~\"__d\"),\n-                cx.ident_of(~\"read_enum_variant\")\n+                ext_cx.expr_var(span, ~\"__d\"),\n+                ext_cx.ident_of(~\"read_enum_variant\")\n             ),\n             ~[expr_lambda]\n         )\n     );\n \n     // ast for `__d.read_enum($(e_name), $(expr_lambda))`\n-    cx.expr_call(\n+    ext_cx.expr_call(\n         span,\n-        cx.expr_field(\n+        ext_cx.expr_field(\n             span,\n-            cx.expr_var(span, ~\"__d\"),\n-            cx.ident_of(~\"read_enum\")\n+            ext_cx.expr_var(span, ~\"__d\"),\n+            ext_cx.ident_of(~\"read_enum\")\n         ),\n         ~[\n-            cx.lit_str(span, @cx.str_of(name)),\n+            ext_cx.lit_str(span, @ext_cx.str_of(name)),\n             expr_lambda\n         ]\n     )"}, {"sha": "1d9c87f4e954524e0071310f08be4594349b109f", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -296,6 +296,15 @@ pub fn core_macros() -> ~str {\n         )\n     )\n \n+    macro_rules! fail(\n+        ($msg: expr) => (\n+            ::core::sys::begin_unwind($msg, file!().to_owned(), line!())\n+        );\n+        () => (\n+            die!(~\\\"explicit failure\\\")\n+        )\n+    )\n+\n     macro_rules! fail_unless(\n         ($cond:expr) => {\n             if !$cond {"}, {"sha": "cfa8a3c11532d7beeed74b52683b42243dcdafa7", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -495,7 +495,6 @@ pub fn noop_fold_expr(e: expr_, fld: ast_fold) -> expr_ {\n             expr_index(fld.fold_expr(el), fld.fold_expr(er))\n           }\n           expr_path(pth) => expr_path(fld.fold_path(pth)),\n-          expr_fail(e) => expr_fail(option::map(&e, |x| fld.fold_expr(*x))),\n           expr_break(opt_ident) =>\n             expr_break(option::map(&opt_ident, |x| fld.fold_ident(*x))),\n           expr_again(opt_ident) =>"}, {"sha": "06f86f134a6011dea7f1c1810c9eb6b66dbb546c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -20,7 +20,7 @@ use ast::{decl_local, default_blk, deref, div, enum_def, enum_variant_kind};\n use ast::{expl, expr, expr_, expr_addr_of, expr_match, expr_again};\n use ast::{expr_assert, expr_assign, expr_assign_op, expr_binary, expr_block};\n use ast::{expr_break, expr_call, expr_cast, expr_copy, expr_do_body};\n-use ast::{expr_fail, expr_field, expr_fn, expr_fn_block, expr_if, expr_index};\n+use ast::{expr_field, expr_fn, expr_fn_block, expr_if, expr_index};\n use ast::{expr_lit, expr_log, expr_loop, expr_loop_body, expr_mac};\n use ast::{expr_method_call, expr_paren, expr_path, expr_rec, expr_repeat};\n use ast::{expr_ret, expr_swap, expr_struct, expr_tup, expr_unary};\n@@ -1034,12 +1034,6 @@ pub impl Parser {\n                 }\n             }\n             hi = self.span.hi;\n-        } else if self.eat_keyword(~\"fail\") {\n-            if can_begin_expr(self.token) {\n-                let e = self.parse_expr();\n-                hi = e.span.hi;\n-                ex = expr_fail(Some(e));\n-            } else { ex = expr_fail(None); }\n         } else if self.eat_keyword(~\"log\") {\n             self.expect(token::LPAREN);\n             let lvl = self.parse_expr();"}, {"sha": "843b0edcfc9592dd1250cf1eeee290196bd0979d", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -487,7 +487,7 @@ pub fn strict_keyword_table() -> HashMap<~str, ()> {\n         ~\"const\", ~\"copy\",\n         ~\"do\", ~\"drop\",\n         ~\"else\", ~\"enum\", ~\"extern\",\n-        ~\"fail\", ~\"false\", ~\"fn\", ~\"for\",\n+        ~\"false\", ~\"fn\", ~\"for\",\n         ~\"if\", ~\"impl\",\n         ~\"let\", ~\"log\", ~\"loop\",\n         ~\"match\", ~\"mod\", ~\"move\", ~\"mut\","}, {"sha": "527b036a46c01ebcaf0019e30c2860f5c4e3f053", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -1393,13 +1393,6 @@ pub fn print_expr(s: ps, &&expr: @ast::expr) {\n         word(s.s, ~\"]\");\n       }\n       ast::expr_path(path) => print_path(s, path, true),\n-      ast::expr_fail(maybe_fail_val) => {\n-        word(s.s, ~\"fail\");\n-        match maybe_fail_val {\n-          Some(expr) => { word(s.s, ~\" \"); print_expr(s, expr); }\n-          _ => ()\n-        }\n-      }\n       ast::expr_break(opt_ident) => {\n         word(s.s, ~\"break\");\n         space(s.s);"}, {"sha": "eea1a6906e44aa15e1b68cd62e728ba2351498bd", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -485,7 +485,6 @@ pub fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n         (v.visit_expr)(b, e, v);\n       }\n       expr_path(p) => visit_path(p, e, v),\n-      expr_fail(eo) => visit_expr_opt(eo, e, v),\n       expr_break(_) => (),\n       expr_again(_) => (),\n       expr_ret(eo) => visit_expr_opt(eo, e, v),"}, {"sha": "ef74b61f93aea138470b27eb19278f2ce1dfd3f9", "filename": "src/test/auxiliary/issue_2723_a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Fauxiliary%2Fissue_2723_a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Fauxiliary%2Fissue_2723_a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2723_a.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub unsafe fn f(xs: ~[int]) {\n-    xs.map(|_x| { unsafe fn q() { fail; } });\n+    xs.map(|_x| { unsafe fn q() { die!(); } });\n }"}, {"sha": "ad248a4aa2924c7eba75e20f01405255c40aeaa8", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -63,7 +63,7 @@ fn show_digit(nn: uint) -> ~str {\n         7 => {~\"seven\"}\n         8 => {~\"eight\"}\n         9 => {~\"nine\"}\n-        _ => {fail ~\"expected digits from 0 to 9...\"}\n+        _ => {die!(~\"expected digits from 0 to 9...\")}\n     }\n }\n "}, {"sha": "06b46eab7598b0905338dbb0a6ca3d9a184de0ce", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -68,7 +68,7 @@ fn parse_opts(argv: ~[~str]) -> Config {\n       Ok(ref m) => {\n           return Config {stress: getopts::opt_present(m, ~\"stress\")}\n       }\n-      Err(_) => { fail; }\n+      Err(_) => { die!(); }\n     }\n }\n "}, {"sha": "940677002707b2eff0d1728b6d37587f8d50c5c9", "filename": "src/test/compile-fail/borrowck-vec-pattern-element-loan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -2,7 +2,7 @@ fn a() -> &[int] {\n     let vec = [1, 2, 3, 4];\n     let tail = match vec { //~ ERROR illegal borrow\n         [_a, ..tail] => tail,\n-        _ => fail ~\"foo\"\n+        _ => die!(~\"foo\")\n     };\n     move tail\n }"}, {"sha": "0a200e736ba4319eb26095479f2723894c430591", "filename": "src/test/compile-fail/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -4,7 +4,7 @@ fn a() {\n         [~ref _a] => {\n             vec[0] = ~4; //~ ERROR prohibited due to outstanding loan\n         }\n-        _ => fail ~\"foo\"\n+        _ => die!(~\"foo\")\n     }\n }\n "}, {"sha": "64bb571b2dcdc63c5e2ac746d28dc10bed7f9509", "filename": "src/test/compile-fail/borrowck-vec-pattern-tail-element-loan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -2,7 +2,7 @@ fn a() -> &int {\n     let vec = [1, 2, 3, 4];\n     let tail = match vec { //~ ERROR illegal borrow\n         [_a, ..tail] => &tail[0],\n-        _ => fail ~\"foo\"\n+        _ => die!(~\"foo\")\n     };\n     move tail\n }"}, {"sha": "ef72f7245ac4fab779a39264bf12c1242e3a9ed8", "filename": "src/test/compile-fail/issue-2151.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Fcompile-fail%2Fissue-2151.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Fcompile-fail%2Fissue-2151.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2151.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n fn main() {\n-    for vec::each(fail) |i| {\n+    for vec::each(die!()) |i| {\n         log (debug, i * 2);\n         //~^ ERROR the type of this value must be known\n    };\n-}\n\\ No newline at end of file\n+}"}, {"sha": "be842a4cdd7d8aa42160ba27bc52397c15ad5a02", "filename": "src/test/compile-fail/moves-based-on-type-exprs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -2,7 +2,7 @@\n // they occur as part of various kinds of expressions.\n \n struct Foo<A> { f: A }\n-fn guard(_s: ~str) -> bool {fail}\n+fn guard(_s: ~str) -> bool {die!()}\n fn touch<A>(_a: &A) {}\n \n fn f10() {\n@@ -92,4 +92,4 @@ fn f120() {\n     touch(&x[1]);\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "4ead0db2d42f9c59cc71ddf23ea749f238baf68c", "filename": "src/test/run-fail/fail-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Frun-fail%2Ffail-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Frun-fail%2Ffail-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-arg.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -11,4 +11,4 @@\n // error-pattern:woe\n fn f(a: int) { log(debug, a); }\n \n-fn main() { f(fail ~\"woe\"); }\n+fn main() { f(die!(~\"woe\")); }"}, {"sha": "144a36bd730c578ab63dec523e338c617f6825e0", "filename": "src/test/run-fail/fail-parens.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Frun-fail%2Ffail-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Frun-fail%2Ffail-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-parens.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Fail statements without arguments need to be disambiguated in\n+// Fail macros without arguments need to be disambiguated in\n // certain positions\n // error-pattern:oops\n \n fn bigfail() {\n-    while (fail ~\"oops\") { if (fail) {\n-        match (fail) { () => {\n+    while (die!(~\"oops\")) { if (die!()) {\n+        match (die!()) { () => {\n         }\n                      }\n     }};"}, {"sha": "bb97e5b2b6add6c722225a4e51ba0b7eadc76531", "filename": "src/test/run-fail/issue-1459.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Frun-fail%2Fissue-1459.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Frun-fail%2Fissue-1459.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-1459.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -10,5 +10,5 @@\n \n // error-pattern:roflcopter\n fn main() {\n-    log (fail ~\"roflcopter\", 2);\n+    log (die!(~\"roflcopter\"), 2);\n }"}, {"sha": "a4c329a41fc3ab5a98793e30420e0c3d3a44fab0", "filename": "src/test/run-fail/issue-2444.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Frun-fail%2Fissue-2444.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Frun-fail%2Fissue-2444.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2444.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -15,7 +15,7 @@ use std::arc;\n \n enum e<T> { e(arc::ARC<T>) }\n \n-fn foo() -> e<int> {fail;}\n+fn foo() -> e<int> {die!();}\n \n fn main() {\n    let f = foo();"}, {"sha": "ddb3eecdbf12c9b1b63ddd7df45cd69b473f2c8c", "filename": "src/test/run-fail/issue-948.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Frun-fail%2Fissue-948.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Frun-fail%2Fissue-948.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-948.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -14,5 +14,5 @@ struct Point { x: int, y: int }\n \n fn main() {\n     let origin = Point {x: 0, y: 0};\n-    let f: Point = Point {x: (fail ~\"beep boop\"),.. origin};\n+    let f: Point = Point {x: (die!(~\"beep boop\")),.. origin};\n }"}, {"sha": "0b36977d9b558447ffdbf2e6a8f6b14fee78b8d4", "filename": "src/test/run-fail/task-comm-recv-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -21,5 +21,5 @@ fn main() {\n     // We shouldn't be able to get past this recv since there's no\n     // message available\n     let i: int = po.recv();\n-    fail ~\"badfail\";\n+    die!(~\"badfail\");\n }"}, {"sha": "0cb37dfd260ad25fc0e65a95e9466aa1da50f07c", "filename": "src/test/run-fail/unique-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Frun-fail%2Funique-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Frun-fail%2Funique-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funique-fail.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n // error-pattern: fail\n-fn main() { ~fail; }\n+fn main() { ~die!(); }"}, {"sha": "133904d34e14a8c6e6f8841ddbd285c40c8870d5", "filename": "src/test/run-pass/region-dependent-addr-of.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Frun-pass%2Fregion-dependent-addr-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc69382922227964ab3f38a5343ba39dfcbc0c0/src%2Ftest%2Frun-pass%2Fregion-dependent-addr-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregion-dependent-addr-of.rs?ref=9dc69382922227964ab3f38a5343ba39dfcbc0c0", "patch": "@@ -54,21 +54,21 @@ fn get_v5(a: &v/A, i: uint) -> &v/int {\n fn get_v6_a(a: &v/A, i: uint) -> &v/int {\n     match a.value.v6 {\n         Some(ref v) => &v.f,\n-        None => fail\n+        None => die!()\n     }\n }\n \n fn get_v6_b(a: &v/A, i: uint) -> &v/int {\n     match *a {\n         A { value: B { v6: Some(ref v), _ } } => &v.f,\n-        _ => fail\n+        _ => die!()\n     }\n }\n \n fn get_v6_c(a: &v/A, i: uint) -> &v/int {\n     match a {\n         &A { value: B { v6: Some(ref v), _ } } => &v.f,\n-        _ => fail\n+        _ => die!()\n     }\n }\n "}]}