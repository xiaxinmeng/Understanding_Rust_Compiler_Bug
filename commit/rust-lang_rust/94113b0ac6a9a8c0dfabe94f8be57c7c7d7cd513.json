{"sha": "94113b0ac6a9a8c0dfabe94f8be57c7c7d7cd513", "node_id": "C_kwDOAAsO6NoAKDk0MTEzYjBhYzZhOWE4YzBkZmFiZTk0ZjhiZTU3YzdjN2Q3Y2Q1MTM", "commit": {"author": {"name": "Ole Strohm", "email": "strohm99@gmail.com", "date": "2022-03-22T10:56:20Z"}, "committer": {"name": "Ole Strohm", "email": "strohm99@gmail.com", "date": "2022-03-22T10:56:20Z"}, "message": "fix: fill_match_arms doesn't add wildcard pat for local enums", "tree": {"sha": "b12ad793236ca1241b2bea58ccc33e19e8a74f49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b12ad793236ca1241b2bea58ccc33e19e8a74f49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94113b0ac6a9a8c0dfabe94f8be57c7c7d7cd513", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94113b0ac6a9a8c0dfabe94f8be57c7c7d7cd513", "html_url": "https://github.com/rust-lang/rust/commit/94113b0ac6a9a8c0dfabe94f8be57c7c7d7cd513", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94113b0ac6a9a8c0dfabe94f8be57c7c7d7cd513/comments", "author": {"login": "OleStrohm", "id": 6892524, "node_id": "MDQ6VXNlcjY4OTI1MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6892524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OleStrohm", "html_url": "https://github.com/OleStrohm", "followers_url": "https://api.github.com/users/OleStrohm/followers", "following_url": "https://api.github.com/users/OleStrohm/following{/other_user}", "gists_url": "https://api.github.com/users/OleStrohm/gists{/gist_id}", "starred_url": "https://api.github.com/users/OleStrohm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OleStrohm/subscriptions", "organizations_url": "https://api.github.com/users/OleStrohm/orgs", "repos_url": "https://api.github.com/users/OleStrohm/repos", "events_url": "https://api.github.com/users/OleStrohm/events{/privacy}", "received_events_url": "https://api.github.com/users/OleStrohm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "OleStrohm", "id": 6892524, "node_id": "MDQ6VXNlcjY4OTI1MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6892524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OleStrohm", "html_url": "https://github.com/OleStrohm", "followers_url": "https://api.github.com/users/OleStrohm/followers", "following_url": "https://api.github.com/users/OleStrohm/following{/other_user}", "gists_url": "https://api.github.com/users/OleStrohm/gists{/gist_id}", "starred_url": "https://api.github.com/users/OleStrohm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OleStrohm/subscriptions", "organizations_url": "https://api.github.com/users/OleStrohm/orgs", "repos_url": "https://api.github.com/users/OleStrohm/repos", "events_url": "https://api.github.com/users/OleStrohm/events{/privacy}", "received_events_url": "https://api.github.com/users/OleStrohm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "754d8687f4952e0dca50eca95aded4cf58a07fdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/754d8687f4952e0dca50eca95aded4cf58a07fdf", "html_url": "https://github.com/rust-lang/rust/commit/754d8687f4952e0dca50eca95aded4cf58a07fdf"}], "stats": {"total": 37, "additions": 30, "deletions": 7}, "files": [{"sha": "a8bb606c8cacf6d16f0c0f63e1c753c7d465dd2a", "filename": "crates/ide_assists/src/handlers/add_missing_match_arms.rs", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/94113b0ac6a9a8c0dfabe94f8be57c7c7d7cd513/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94113b0ac6a9a8c0dfabe94f8be57c7c7d7cd513/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs?ref=94113b0ac6a9a8c0dfabe94f8be57c7c7d7cd513", "patch": "@@ -78,7 +78,7 @@ pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext) ->\n         Peekable<Box<dyn Iterator<Item = (ast::Pat, bool)>>>,\n         bool,\n     ) = if let Some(enum_def) = resolve_enum_def(&ctx.sema, &expr) {\n-        let is_non_exhaustive = enum_def.is_non_exhaustive(ctx.db());\n+        let is_non_exhaustive = enum_def.is_non_exhaustive(ctx.db(), module.krate());\n \n         let variants = enum_def.variants(ctx.db());\n \n@@ -104,7 +104,7 @@ pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext) ->\n         (missing_pats.peekable(), is_non_exhaustive)\n     } else if let Some(enum_defs) = resolve_tuple_of_enum_def(&ctx.sema, &expr) {\n         let is_non_exhaustive =\n-            enum_defs.iter().any(|enum_def| enum_def.is_non_exhaustive(ctx.db()));\n+            enum_defs.iter().any(|enum_def| enum_def.is_non_exhaustive(ctx.db(), module.krate()));\n \n         let mut n_arms = 1;\n         let variants_of_enums: Vec<Vec<ExtendedVariant>> = enum_defs\n@@ -301,9 +301,9 @@ fn lift_enum(e: hir::Enum) -> ExtendedEnum {\n }\n \n impl ExtendedEnum {\n-    fn is_non_exhaustive(self, db: &RootDatabase) -> bool {\n+    fn is_non_exhaustive(self, db: &RootDatabase, krate: Crate) -> bool {\n         match self {\n-            ExtendedEnum::Enum(e) => e.attrs(db).by_key(\"non_exhaustive\").exists(),\n+            ExtendedEnum::Enum(e) => e.attrs(db).by_key(\"non_exhaustive\").exists() && e.module(db).krate() != krate,\n             _ => false,\n         }\n     }\n@@ -1657,8 +1657,32 @@ fn foo(t: E) {\n     }\n \n     #[test]\n-    fn ignores_doc_hidden_for_crate_local_enums_but_not_non_exhaustive() {\n-        cov_mark::check!(added_wildcard_pattern);\n+    fn ignores_non_exhaustive_for_crate_local_enums() {\n+        check_assist(\n+            add_missing_match_arms,\n+            r#\"\n+#[non_exhaustive]\n+enum E { A, B, }\n+\n+fn foo(t: E) {\n+    match $0t {\n+    }\n+}\"#,\n+            r#\"\n+#[non_exhaustive]\n+enum E { A, B, }\n+\n+fn foo(t: E) {\n+    match t {\n+        $0E::A => todo!(),\n+        E::B => todo!(),\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn ignores_doc_hidden_and_non_exhaustive_for_crate_local_enums() {\n         check_assist(\n             add_missing_match_arms,\n             r#\"\n@@ -1677,7 +1701,6 @@ fn foo(t: E) {\n     match t {\n         $0E::A => todo!(),\n         E::B => todo!(),\n-        _ => todo!(),\n     }\n }\"#,\n         );"}]}