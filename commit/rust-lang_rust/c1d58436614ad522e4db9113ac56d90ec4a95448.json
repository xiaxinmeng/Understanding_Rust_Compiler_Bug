{"sha": "c1d58436614ad522e4db9113ac56d90ec4a95448", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZDU4NDM2NjE0YWQ1MjJlNGRiOTExM2FjNTZkOTBlYzRhOTU0NDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-19T21:57:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-19T21:57:38Z"}, "message": "Auto merge of #79473 - m-ou-se:clamp-in-core, r=m-ou-se\n\nMove {f32,f64}::clamp to core.\n\n`clamp` was recently stabilized (tracking issue: https://github.com/rust-lang/rust/issues/44095). But although `Ord::clamp` was added in `core` (because `Ord` is in `core`), the versions for the `f32` and `f64` primitives were added in `std` (together with `floor`, `sin`, etc.), not in `core` (together with `min`, `max`, `from_bits`, etc.).\n\nThis change moves them to `core`, such that `clamp` on floats is available in `no_std` programs as well.", "tree": {"sha": "a68f989c8df3bf269f2e85aa485dd80d94426d04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a68f989c8df3bf269f2e85aa485dd80d94426d04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1d58436614ad522e4db9113ac56d90ec4a95448", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1d58436614ad522e4db9113ac56d90ec4a95448", "html_url": "https://github.com/rust-lang/rust/commit/c1d58436614ad522e4db9113ac56d90ec4a95448", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1d58436614ad522e4db9113ac56d90ec4a95448/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f5bc176b0e54a8e464704adcd7e571700207fe9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5bc176b0e54a8e464704adcd7e571700207fe9", "html_url": "https://github.com/rust-lang/rust/commit/1f5bc176b0e54a8e464704adcd7e571700207fe9"}, {"sha": "0523eeb8a38dbd6e6e6fd9283b27609fbf38859c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0523eeb8a38dbd6e6e6fd9283b27609fbf38859c", "html_url": "https://github.com/rust-lang/rust/commit/0523eeb8a38dbd6e6e6fd9283b27609fbf38859c"}], "stats": {"total": 140, "additions": 70, "deletions": 70}, "files": [{"sha": "4d876fd8c33e28807706e3317ae880e2f3b0ae58", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c1d58436614ad522e4db9113ac56d90ec4a95448/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1d58436614ad522e4db9113ac56d90ec4a95448/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=c1d58436614ad522e4db9113ac56d90ec4a95448", "patch": "@@ -961,4 +961,39 @@ impl f32 {\n \n         left.cmp(&right)\n     }\n+\n+    /// Restrict a value to a certain interval unless it is NaN.\n+    ///\n+    /// Returns `max` if `self` is greater than `max`, and `min` if `self` is\n+    /// less than `min`. Otherwise this returns `self`.\n+    ///\n+    /// Note that this function returns NaN if the initial value was NaN as\n+    /// well.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `min > max`, `min` is NaN, or `max` is NaN.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert!((-3.0f32).clamp(-2.0, 1.0) == -2.0);\n+    /// assert!((0.0f32).clamp(-2.0, 1.0) == 0.0);\n+    /// assert!((2.0f32).clamp(-2.0, 1.0) == 1.0);\n+    /// assert!((f32::NAN).clamp(-2.0, 1.0).is_nan());\n+    /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n+    #[stable(feature = \"clamp\", since = \"1.50.0\")]\n+    #[inline]\n+    pub fn clamp(self, min: f32, max: f32) -> f32 {\n+        assert!(min <= max);\n+        let mut x = self;\n+        if x < min {\n+            x = min;\n+        }\n+        if x > max {\n+            x = max;\n+        }\n+        x\n+    }\n }"}, {"sha": "3323b7d6774df6bdab76a66a7241b3e1c8ba9b29", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c1d58436614ad522e4db9113ac56d90ec4a95448/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1d58436614ad522e4db9113ac56d90ec4a95448/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=c1d58436614ad522e4db9113ac56d90ec4a95448", "patch": "@@ -975,4 +975,39 @@ impl f64 {\n \n         left.cmp(&right)\n     }\n+\n+    /// Restrict a value to a certain interval unless it is NaN.\n+    ///\n+    /// Returns `max` if `self` is greater than `max`, and `min` if `self` is\n+    /// less than `min`. Otherwise this returns `self`.\n+    ///\n+    /// Note that this function returns NaN if the initial value was NaN as\n+    /// well.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `min > max`, `min` is NaN, or `max` is NaN.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert!((-3.0f64).clamp(-2.0, 1.0) == -2.0);\n+    /// assert!((0.0f64).clamp(-2.0, 1.0) == 0.0);\n+    /// assert!((2.0f64).clamp(-2.0, 1.0) == 1.0);\n+    /// assert!((f64::NAN).clamp(-2.0, 1.0).is_nan());\n+    /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n+    #[stable(feature = \"clamp\", since = \"1.50.0\")]\n+    #[inline]\n+    pub fn clamp(self, min: f64, max: f64) -> f64 {\n+        assert!(min <= max);\n+        let mut x = self;\n+        if x < min {\n+            x = min;\n+        }\n+        if x > max {\n+            x = max;\n+        }\n+        x\n+    }\n }"}, {"sha": "c30458c0545d0ff908a36c3dade70679a905fc6e", "filename": "library/std/src/f32.rs", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c1d58436614ad522e4db9113ac56d90ec4a95448/library%2Fstd%2Fsrc%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1d58436614ad522e4db9113ac56d90ec4a95448/library%2Fstd%2Fsrc%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32.rs?ref=c1d58436614ad522e4db9113ac56d90ec4a95448", "patch": "@@ -879,39 +879,4 @@ impl f32 {\n     pub fn atanh(self) -> f32 {\n         0.5 * ((2.0 * self) / (1.0 - self)).ln_1p()\n     }\n-\n-    /// Restrict a value to a certain interval unless it is NaN.\n-    ///\n-    /// Returns `max` if `self` is greater than `max`, and `min` if `self` is\n-    /// less than `min`. Otherwise this returns `self`.\n-    ///\n-    /// Note that this function returns NaN if the initial value was NaN as\n-    /// well.\n-    ///\n-    /// # Panics\n-    ///\n-    /// Panics if `min > max`, `min` is NaN, or `max` is NaN.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// assert!((-3.0f32).clamp(-2.0, 1.0) == -2.0);\n-    /// assert!((0.0f32).clamp(-2.0, 1.0) == 0.0);\n-    /// assert!((2.0f32).clamp(-2.0, 1.0) == 1.0);\n-    /// assert!((f32::NAN).clamp(-2.0, 1.0).is_nan());\n-    /// ```\n-    #[must_use = \"method returns a new number and does not mutate the original value\"]\n-    #[stable(feature = \"clamp\", since = \"1.50.0\")]\n-    #[inline]\n-    pub fn clamp(self, min: f32, max: f32) -> f32 {\n-        assert!(min <= max);\n-        let mut x = self;\n-        if x < min {\n-            x = min;\n-        }\n-        if x > max {\n-            x = max;\n-        }\n-        x\n-    }\n }"}, {"sha": "f4cc53979d1a6cb7968c2675b82b0c355a2a2867", "filename": "library/std/src/f64.rs", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c1d58436614ad522e4db9113ac56d90ec4a95448/library%2Fstd%2Fsrc%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1d58436614ad522e4db9113ac56d90ec4a95448/library%2Fstd%2Fsrc%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64.rs?ref=c1d58436614ad522e4db9113ac56d90ec4a95448", "patch": "@@ -882,41 +882,6 @@ impl f64 {\n         0.5 * ((2.0 * self) / (1.0 - self)).ln_1p()\n     }\n \n-    /// Restrict a value to a certain interval unless it is NaN.\n-    ///\n-    /// Returns `max` if `self` is greater than `max`, and `min` if `self` is\n-    /// less than `min`. Otherwise this returns `self`.\n-    ///\n-    /// Note that this function returns NaN if the initial value was NaN as\n-    /// well.\n-    ///\n-    /// # Panics\n-    ///\n-    /// Panics if `min > max`, `min` is NaN, or `max` is NaN.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// assert!((-3.0f64).clamp(-2.0, 1.0) == -2.0);\n-    /// assert!((0.0f64).clamp(-2.0, 1.0) == 0.0);\n-    /// assert!((2.0f64).clamp(-2.0, 1.0) == 1.0);\n-    /// assert!((f64::NAN).clamp(-2.0, 1.0).is_nan());\n-    /// ```\n-    #[must_use = \"method returns a new number and does not mutate the original value\"]\n-    #[stable(feature = \"clamp\", since = \"1.50.0\")]\n-    #[inline]\n-    pub fn clamp(self, min: f64, max: f64) -> f64 {\n-        assert!(min <= max);\n-        let mut x = self;\n-        if x < min {\n-            x = min;\n-        }\n-        if x > max {\n-            x = max;\n-        }\n-        x\n-    }\n-\n     // Solaris/Illumos requires a wrapper around log, log2, and log10 functions\n     // because of their non-standard behavior (e.g., log(-n) returns -Inf instead\n     // of expected NaN)."}]}