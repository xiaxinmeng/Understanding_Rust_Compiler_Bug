{"sha": "49ab0cab618d9d1cb49220d7c253556a56148283", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5YWIwY2FiNjE4ZDlkMWNiNDkyMjBkN2MyNTM1NTZhNTYxNDgyODM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-18T22:20:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-18T22:20:39Z"}, "message": "Rollup merge of #72279 - RalfJung:raw-ref-macros, r=nikomatsakis\n\nadd raw_ref macros\n\nIn https://github.com/rust-lang/rust/issues/64490, various people were in favor of exposing `&raw` as a macro first before making the actual syntax stable. So this PR (unstably) introduces those macros.\n\nI'll create the tracking issue if we're okay moving forward with this.", "tree": {"sha": "7406d6dcc67933b6a2160892b29323ca3ea49a26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7406d6dcc67933b6a2160892b29323ca3ea49a26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49ab0cab618d9d1cb49220d7c253556a56148283", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe6+i3CRBK7hj4Ov3rIwAAdHIIAB0tREO/YGqMLL83fBHUggiS\nLuBRU8aw8pv921YOhwR9t21LrEoxwINbf1e3c6lrtPuf/fqjR2NdCU0T3k/krgeO\nzCtf2BuFpn2p6r2LHOvMjhSTQJcF7VItKYRpq8SuL78qfg8NayB3SW9nNDqfEacK\n+FdAIG/1HnF9ewj3katcZ6WLCqYfeXqaImEgs2/J3pMFxlW5YhcEWX3v9QoV+iLn\n/AkgfO3xr9gcLvcEVhteif4dKVYdvpnhMqSUiC4N9Wp6sUuY0Jhfd06s2TbzGAX4\n64cmXh9Wwvk5Es6+FnYG0eSONvUQlfP7/ErRzSA2IuRlnWyW/ecPgkcVwEto6ks=\n=R14r\n-----END PGP SIGNATURE-----\n", "payload": "tree 7406d6dcc67933b6a2160892b29323ca3ea49a26\nparent 39f8784eb6056c21c120bfa93bbec73e19773727\nparent 0265e4e61bcd51b11f0b13b712245feb9c59ab50\nauthor Manish Goregaokar <manishsmail@gmail.com> 1592518839 -0700\ncommitter GitHub <noreply@github.com> 1592518839 -0700\n\nRollup merge of #72279 - RalfJung:raw-ref-macros, r=nikomatsakis\n\nadd raw_ref macros\n\nIn https://github.com/rust-lang/rust/issues/64490, various people were in favor of exposing `&raw` as a macro first before making the actual syntax stable. So this PR (unstably) introduces those macros.\n\nI'll create the tracking issue if we're okay moving forward with this.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49ab0cab618d9d1cb49220d7c253556a56148283", "html_url": "https://github.com/rust-lang/rust/commit/49ab0cab618d9d1cb49220d7c253556a56148283", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49ab0cab618d9d1cb49220d7c253556a56148283/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39f8784eb6056c21c120bfa93bbec73e19773727", "url": "https://api.github.com/repos/rust-lang/rust/commits/39f8784eb6056c21c120bfa93bbec73e19773727", "html_url": "https://github.com/rust-lang/rust/commit/39f8784eb6056c21c120bfa93bbec73e19773727"}, {"sha": "0265e4e61bcd51b11f0b13b712245feb9c59ab50", "url": "https://api.github.com/repos/rust-lang/rust/commits/0265e4e61bcd51b11f0b13b712245feb9c59ab50", "html_url": "https://github.com/rust-lang/rust/commit/0265e4e61bcd51b11f0b13b712245feb9c59ab50"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "172b23a8d5a26a778e6c150c4f9fdd54b3491ea2", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/49ab0cab618d9d1cb49220d7c253556a56148283/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ab0cab618d9d1cb49220d7c253556a56148283/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=49ab0cab618d9d1cb49220d7c253556a56148283", "patch": "@@ -1399,3 +1399,70 @@ fnptr_impls_args! { A, B, C, D, E, F, G, H, I }\n fnptr_impls_args! { A, B, C, D, E, F, G, H, I, J }\n fnptr_impls_args! { A, B, C, D, E, F, G, H, I, J, K }\n fnptr_impls_args! { A, B, C, D, E, F, G, H, I, J, K, L }\n+\n+/// Create a `const` raw pointer to a place, without creating an intermediate reference.\n+///\n+/// Creating a reference with `&`/`&mut` is only allowed if the pointer is properly aligned\n+/// and points to initialized data. For cases where those requirements do not hold,\n+/// raw pointers should be used instead. However, `&expr as *const _` creates a reference\n+/// before casting it to a raw pointer, and that reference is subject to the same rules\n+/// as all other references. This macro can create a raw pointer *without* creating\n+/// a reference first.\n+///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(raw_ref_macros)]\n+/// use std::ptr;\n+///\n+/// #[repr(packed)]\n+/// struct Packed {\n+///     f1: u8,\n+///     f2: u16,\n+/// }\n+///\n+/// let packed = Packed { f1: 1, f2: 2 };\n+/// // `&packed.f2` would create an unaligned reference, and thus be Undefined Behavior!\n+/// let raw_f2 = ptr::raw_const!(packed.f2);\n+/// assert_eq!(unsafe { raw_f2.read_unaligned() }, 2);\n+/// ```\n+#[unstable(feature = \"raw_ref_macros\", issue = \"73394\")]\n+#[rustc_macro_transparency = \"semitransparent\"]\n+#[allow_internal_unstable(raw_ref_op)]\n+pub macro raw_const($e:expr) {\n+    &raw const $e\n+}\n+\n+/// Create a `mut` raw pointer to a place, without creating an intermediate reference.\n+///\n+/// Creating a reference with `&`/`&mut` is only allowed if the pointer is properly aligned\n+/// and points to initialized data. For cases where those requirements do not hold,\n+/// raw pointers should be used instead. However, `&mut expr as *mut _` creates a reference\n+/// before casting it to a raw pointer, and that reference is subject to the same rules\n+/// as all other references. This macro can create a raw pointer *without* creating\n+/// a reference first.\n+///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(raw_ref_macros)]\n+/// use std::ptr;\n+///\n+/// #[repr(packed)]\n+/// struct Packed {\n+///     f1: u8,\n+///     f2: u16,\n+/// }\n+///\n+/// let mut packed = Packed { f1: 1, f2: 2 };\n+/// // `&mut packed.f2` would create an unaligned reference, and thus be Undefined Behavior!\n+/// let raw_f2 = ptr::raw_mut!(packed.f2);\n+/// unsafe { raw_f2.write_unaligned(42); }\n+/// assert_eq!({packed.f2}, 42); // `{...}` forces copying the field instead of creating a reference.\n+/// ```\n+#[unstable(feature = \"raw_ref_macros\", issue = \"73394\")]\n+#[rustc_macro_transparency = \"semitransparent\"]\n+#[allow_internal_unstable(raw_ref_op)]\n+pub macro raw_mut($e:expr) {\n+    &raw mut $e\n+}"}, {"sha": "ef699ede2a140bc50a85d8a0d0aac2e73c39c571", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/49ab0cab618d9d1cb49220d7c253556a56148283/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ab0cab618d9d1cb49220d7c253556a56148283/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=49ab0cab618d9d1cb49220d7c253556a56148283", "patch": "@@ -298,6 +298,7 @@\n #![feature(prelude_import)]\n #![feature(ptr_internals)]\n #![feature(raw)]\n+#![feature(raw_ref_macros)]\n #![feature(renamed_spin_loop)]\n #![feature(rustc_attrs)]\n #![feature(rustc_private)]"}]}