{"sha": "cd128880b13bc9f7a919567926e801c8a1487cdb", "node_id": "C_kwDOAAsO6NoAKGNkMTI4ODgwYjEzYmM5ZjdhOTE5NTY3OTI2ZTgwMWM4YTE0ODdjZGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-12T17:39:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-12T17:39:11Z"}, "message": "Auto merge of #104325 - GuillaumeGomez:rollup-19bzwoa, r=GuillaumeGomez\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #104110 (prevent uninitialized access in black_box for zero-sized-types)\n - #104117 (Mark `trait_upcasting` feature no longer incomplete.)\n - #104144 (Suggest removing unnecessary `.` to use a floating point literal)\n - #104250 (Migrate no result page link color to CSS variables)\n - #104261 (More accurately report error when formal and expected signature types differ)\n - #104263 (Add a reference to ilog2 in leading_zeros integer docs)\n - #104308 (Remove the old `ValidAlign` name)\n - #104319 (Fix non clickable source link)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "b9833baeaed29cbd90dc9afa19b2053adced3537", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9833baeaed29cbd90dc9afa19b2053adced3537"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd128880b13bc9f7a919567926e801c8a1487cdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd128880b13bc9f7a919567926e801c8a1487cdb", "html_url": "https://github.com/rust-lang/rust/commit/cd128880b13bc9f7a919567926e801c8a1487cdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd128880b13bc9f7a919567926e801c8a1487cdb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ef2485bd59cad3674b9c7de29316c20d7ddc6e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7", "html_url": "https://github.com/rust-lang/rust/commit/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7"}, {"sha": "d532d6782195effb702d4e402dd2d6371af1c349", "url": "https://api.github.com/repos/rust-lang/rust/commits/d532d6782195effb702d4e402dd2d6371af1c349", "html_url": "https://github.com/rust-lang/rust/commit/d532d6782195effb702d4e402dd2d6371af1c349"}], "stats": {"total": 510, "additions": 377, "deletions": 133}, "files": [{"sha": "cf590a43826e53407aab00b691ad66fe0744a3cd", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -340,17 +340,26 @@ impl<'ll, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n \n             sym::black_box => {\n                 args[0].val.store(self, result);\n-\n+                let result_val_span = [result.llval];\n                 // We need to \"use\" the argument in some way LLVM can't introspect, and on\n                 // targets that support it we can typically leverage inline assembly to do\n                 // this. LLVM's interpretation of inline assembly is that it's, well, a black\n                 // box. This isn't the greatest implementation since it probably deoptimizes\n                 // more than we want, but it's so far good enough.\n+                //\n+                // For zero-sized types, the location pointed to by the result may be\n+                // uninitialized. Do not \"use\" the result in this case; instead just clobber\n+                // the memory.\n+                let (constraint, inputs): (&str, &[_]) = if result.layout.is_zst() {\n+                    (\"~{memory}\", &[])\n+                } else {\n+                    (\"r,~{memory}\", &result_val_span)\n+                };\n                 crate::asm::inline_asm_call(\n                     self,\n                     \"\",\n-                    \"r,~{memory}\",\n-                    &[result.llval],\n+                    constraint,\n+                    inputs,\n                     self.type_void(),\n                     true,\n                     false,"}, {"sha": "a0e16b18061aad99dd4d99af7bcadd1dcad7da8c", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -512,9 +512,9 @@ declare_features! (\n     (active, thread_local, \"1.0.0\", Some(29594), None),\n     /// Allows defining `trait X = A + B;` alias items.\n     (active, trait_alias, \"1.24.0\", Some(41517), None),\n-    /// Allows upcasting trait objects via supertraits.\n-    /// Trait upcasting is casting, e.g., `dyn Foo -> dyn Bar` where `Foo: Bar`.\n-    (incomplete, trait_upcasting, \"1.56.0\", Some(65991), None),\n+    /// Allows dyn upcasting trait objects via supertraits.\n+    /// Dyn upcasting is casting, e.g., `dyn Foo -> dyn Bar` where `Foo: Bar`.\n+    (active, trait_upcasting, \"1.56.0\", Some(65991), None),\n     /// Allows #[repr(transparent)] on unions (RFC 2645).\n     (active, transparent_unions, \"1.37.0\", Some(60405), None),\n     /// Allows inconsistent bounds in where clauses."}, {"sha": "9ca7730daa68d3ee71d2b7db1b03a951841c4be1", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -30,6 +30,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected_ty_expr: Option<&'tcx hir::Expr<'tcx>>,\n         error: Option<TypeError<'tcx>>,\n     ) {\n+        if expr_ty == expected {\n+            return;\n+        }\n+\n         self.annotate_expected_due_to_let_ty(err, expr, error);\n \n         // Use `||` to give these suggestions a precedence\n@@ -43,7 +47,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             || self.suggest_block_to_brackets_peeling_refs(err, expr, expr_ty, expected)\n             || self.suggest_copied_or_cloned(err, expr, expr_ty, expected)\n             || self.suggest_into(err, expr, expr_ty, expected)\n-            || self.suggest_option_to_bool(err, expr, expr_ty, expected);\n+            || self.suggest_option_to_bool(err, expr, expr_ty, expected)\n+            || self.suggest_floating_point_literal(err, expr, expected);\n \n         self.note_type_is_not_clone(err, expected, expr_ty, expr);\n         self.note_need_for_fn_pointer(err, expected, expr_ty);"}, {"sha": "8cf70eb5431a8c4ec2d6fd1a11455ffb4d771158", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -597,6 +597,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         };\n \n+        let mk_trace = |span, (formal_ty, expected_ty), provided_ty| {\n+            let mismatched_ty = if expected_ty == provided_ty {\n+                // If expected == provided, then we must have failed to sup\n+                // the formal type. Avoid printing out \"expected Ty, found Ty\"\n+                // in that case.\n+                formal_ty\n+            } else {\n+                expected_ty\n+            };\n+            TypeTrace::types(&self.misc(span), true, mismatched_ty, provided_ty)\n+        };\n+\n         // The algorithm here is inspired by levenshtein distance and longest common subsequence.\n         // We'll try to detect 4 different types of mistakes:\n         // - An extra parameter has been provided that doesn't satisfy *any* of the other inputs\n@@ -661,10 +673,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // A tuple wrap suggestion actually occurs within,\n                         // so don't do anything special here.\n                         err = self.err_ctxt().report_and_explain_type_error(\n-                            TypeTrace::types(\n-                                &self.misc(*lo),\n-                                true,\n-                                formal_and_expected_inputs[mismatch_idx.into()].1,\n+                            mk_trace(\n+                                *lo,\n+                                formal_and_expected_inputs[mismatch_idx.into()],\n                                 provided_arg_tys[mismatch_idx.into()].0,\n                             ),\n                             terr,\n@@ -748,9 +759,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         errors.drain_filter(|error| {\n                 let Error::Invalid(provided_idx, expected_idx, Compatibility::Incompatible(Some(e))) = error else { return false };\n                 let (provided_ty, provided_span) = provided_arg_tys[*provided_idx];\n-                let (expected_ty, _) = formal_and_expected_inputs[*expected_idx];\n-                let cause = &self.misc(provided_span);\n-                let trace = TypeTrace::types(cause, true, expected_ty, provided_ty);\n+                let trace = mk_trace(provided_span, formal_and_expected_inputs[*expected_idx], provided_ty);\n                 if !matches!(trace.cause.as_failure_code(*e), FailureCode::Error0308(_)) {\n                     self.err_ctxt().report_and_explain_type_error(trace, *e).emit();\n                     return true;\n@@ -774,8 +783,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         {\n             let (formal_ty, expected_ty) = formal_and_expected_inputs[*expected_idx];\n             let (provided_ty, provided_arg_span) = provided_arg_tys[*provided_idx];\n-            let cause = &self.misc(provided_arg_span);\n-            let trace = TypeTrace::types(cause, true, expected_ty, provided_ty);\n+            let trace = mk_trace(provided_arg_span, (formal_ty, expected_ty), provided_ty);\n             let mut err = self.err_ctxt().report_and_explain_type_error(trace, *err);\n             self.emit_coerce_suggestions(\n                 &mut err,\n@@ -847,8 +855,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let (formal_ty, expected_ty) = formal_and_expected_inputs[expected_idx];\n                     let (provided_ty, provided_span) = provided_arg_tys[provided_idx];\n                     if let Compatibility::Incompatible(error) = compatibility {\n-                        let cause = &self.misc(provided_span);\n-                        let trace = TypeTrace::types(cause, true, expected_ty, provided_ty);\n+                        let trace = mk_trace(provided_span, (formal_ty, expected_ty), provided_ty);\n                         if let Some(e) = error {\n                             self.err_ctxt().note_type_err(\n                                 &mut err,"}, {"sha": "06e6e4350fcbcb9271aac6bb5b8a850692a211b6", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -374,7 +374,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 let annotation_span = ty.span;\n                                 err.span_suggestion(\n                                     annotation_span.with_hi(annotation_span.lo()),\n-                                    format!(\"alternatively, consider changing the type annotation\"),\n+                                    \"alternatively, consider changing the type annotation\",\n                                     suggest_annotation,\n                                     Applicability::MaybeIncorrect,\n                                 );\n@@ -1204,6 +1204,48 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    #[instrument(skip(self, err))]\n+    pub(crate) fn suggest_floating_point_literal(\n+        &self,\n+        err: &mut Diagnostic,\n+        expr: &hir::Expr<'_>,\n+        expected_ty: Ty<'tcx>,\n+    ) -> bool {\n+        if !expected_ty.is_floating_point() {\n+            return false;\n+        }\n+        match expr.kind {\n+            ExprKind::Struct(QPath::LangItem(LangItem::Range, ..), [start, end], _) => {\n+                err.span_suggestion_verbose(\n+                    start.span.shrink_to_hi().with_hi(end.span.lo()),\n+                    \"remove the unnecessary `.` operator for a floating point literal\",\n+                    '.',\n+                    Applicability::MaybeIncorrect,\n+                );\n+                true\n+            }\n+            ExprKind::Struct(QPath::LangItem(LangItem::RangeFrom, ..), [start], _) => {\n+                err.span_suggestion_verbose(\n+                    expr.span.with_lo(start.span.hi()),\n+                    \"remove the unnecessary `.` operator for a floating point literal\",\n+                    '.',\n+                    Applicability::MaybeIncorrect,\n+                );\n+                true\n+            }\n+            ExprKind::Struct(QPath::LangItem(LangItem::RangeTo, ..), [end], _) => {\n+                err.span_suggestion_verbose(\n+                    expr.span.until(end.span),\n+                    \"remove the unnecessary `.` operator and add an integer part for a floating point literal\",\n+                    \"0.\",\n+                    Applicability::MaybeIncorrect,\n+                );\n+                true\n+            }\n+            _ => false,\n+        }\n+    }\n+\n     fn is_loop(&self, id: hir::HirId) -> bool {\n         let node = self.tcx.hir().get(id);\n         matches!(node, Node::Expr(Expr { kind: ExprKind::Loop(..), .. }))"}, {"sha": "f50d9a8e1bdf38cc94626ac35167613c0819dfe5", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -7,8 +7,8 @@\n use crate::cmp;\n use crate::error::Error;\n use crate::fmt;\n-use crate::mem::{self, ValidAlign};\n-use crate::ptr::NonNull;\n+use crate::mem;\n+use crate::ptr::{Alignment, NonNull};\n \n // While this function is used in one place and its implementation\n // could be inlined, the previous attempts to do so made rustc\n@@ -46,7 +46,7 @@ pub struct Layout {\n     //\n     // (However, we do not analogously require `align >= sizeof(void*)`,\n     //  even though that is *also* a requirement of `posix_memalign`.)\n-    align: ValidAlign,\n+    align: Alignment,\n }\n \n impl Layout {\n@@ -71,11 +71,11 @@ impl Layout {\n         }\n \n         // SAFETY: just checked that align is a power of two.\n-        Layout::from_size_valid_align(size, unsafe { ValidAlign::new_unchecked(align) })\n+        Layout::from_size_alignment(size, unsafe { Alignment::new_unchecked(align) })\n     }\n \n     #[inline(always)]\n-    const fn max_size_for_align(align: ValidAlign) -> usize {\n+    const fn max_size_for_align(align: Alignment) -> usize {\n         // (power-of-two implies align != 0.)\n \n         // Rounded up size is:\n@@ -95,7 +95,7 @@ impl Layout {\n \n     /// Internal helper constructor to skip revalidating alignment validity.\n     #[inline]\n-    const fn from_size_valid_align(size: usize, align: ValidAlign) -> Result<Self, LayoutError> {\n+    const fn from_size_alignment(size: usize, align: Alignment) -> Result<Self, LayoutError> {\n         if size > Self::max_size_for_align(align) {\n             return Err(LayoutError);\n         }\n@@ -117,7 +117,7 @@ impl Layout {\n     #[rustc_allow_const_fn_unstable(ptr_alignment_type)]\n     pub const unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {\n         // SAFETY: the caller is required to uphold the preconditions.\n-        unsafe { Layout { size, align: ValidAlign::new_unchecked(align) } }\n+        unsafe { Layout { size, align: Alignment::new_unchecked(align) } }\n     }\n \n     /// The minimum size in bytes for a memory block of this layout.\n@@ -321,7 +321,7 @@ impl Layout {\n         let alloc_size = padded_size.checked_mul(n).ok_or(LayoutError)?;\n \n         // The safe constructor is called here to enforce the isize size limit.\n-        Layout::from_size_valid_align(alloc_size, self.align).map(|layout| (layout, padded_size))\n+        Layout::from_size_alignment(alloc_size, self.align).map(|layout| (layout, padded_size))\n     }\n \n     /// Creates a layout describing the record for `self` followed by\n@@ -379,7 +379,7 @@ impl Layout {\n         let new_size = offset.checked_add(next.size()).ok_or(LayoutError)?;\n \n         // The safe constructor is called here to enforce the isize size limit.\n-        let layout = Layout::from_size_valid_align(new_size, new_align)?;\n+        let layout = Layout::from_size_alignment(new_size, new_align)?;\n         Ok((layout, offset))\n     }\n \n@@ -400,7 +400,7 @@ impl Layout {\n     pub fn repeat_packed(&self, n: usize) -> Result<Self, LayoutError> {\n         let size = self.size().checked_mul(n).ok_or(LayoutError)?;\n         // The safe constructor is called here to enforce the isize size limit.\n-        Layout::from_size_valid_align(size, self.align)\n+        Layout::from_size_alignment(size, self.align)\n     }\n \n     /// Creates a layout describing the record for `self` followed by\n@@ -414,7 +414,7 @@ impl Layout {\n     pub fn extend_packed(&self, next: Self) -> Result<Self, LayoutError> {\n         let new_size = self.size().checked_add(next.size()).ok_or(LayoutError)?;\n         // The safe constructor is called here to enforce the isize size limit.\n-        Layout::from_size_valid_align(new_size, self.align)\n+        Layout::from_size_alignment(new_size, self.align)\n     }\n \n     /// Creates a layout describing the record for a `[T; n]`.\n@@ -425,10 +425,10 @@ impl Layout {\n     #[inline]\n     pub fn array<T>(n: usize) -> Result<Self, LayoutError> {\n         // Reduce the amount of code we need to monomorphize per `T`.\n-        return inner(mem::size_of::<T>(), ValidAlign::of::<T>(), n);\n+        return inner(mem::size_of::<T>(), Alignment::of::<T>(), n);\n \n         #[inline]\n-        fn inner(element_size: usize, align: ValidAlign, n: usize) -> Result<Layout, LayoutError> {\n+        fn inner(element_size: usize, align: Alignment, n: usize) -> Result<Layout, LayoutError> {\n             // We need to check two things about the size:\n             //  - That the total size won't overflow a `usize`, and\n             //  - That the total size still fits in an `isize`.\n@@ -443,7 +443,7 @@ impl Layout {\n \n             // SAFETY: We just checked above that the `array_size` will not\n             // exceed `isize::MAX` even when rounded up to the alignment.\n-            // And `ValidAlign` guarantees it's a power of two.\n+            // And `Alignment` guarantees it's a power of two.\n             unsafe { Ok(Layout::from_size_align_unchecked(array_size, align.as_usize())) }\n         }\n     }"}, {"sha": "956a69eda8a57af9038d125b0ded989c79adb75b", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -21,11 +21,6 @@ mod maybe_uninit;\n #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n pub use maybe_uninit::MaybeUninit;\n \n-// FIXME: This is left here for now to avoid complications around pending reverts.\n-// Once <https://github.com/rust-lang/rust/issues/101899> is fully resolved,\n-// this should be removed and the references in `alloc::Layout` updated.\n-pub(crate) use ptr::Alignment as ValidAlign;\n-\n mod transmutability;\n #[unstable(feature = \"transmutability\", issue = \"99571\")]\n pub use transmutability::{Assume, BikeshedIntrinsicFrom};"}, {"sha": "c2f6b60375e9a3283d6e5651e485f4f94b3824f0", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -107,6 +107,9 @@ macro_rules! int_impl {\n \n         /// Returns the number of leading zeros in the binary representation of `self`.\n         ///\n+        /// Depending on what you're doing with the value, you might also be interested in the\n+        /// [`ilog2`] function which returns a consistent number, even if the type widens.\n+        ///\n         /// # Examples\n         ///\n         /// Basic usage:\n@@ -116,6 +119,7 @@ macro_rules! int_impl {\n         ///\n         /// assert_eq!(n.leading_zeros(), 0);\n         /// ```\n+        #[doc = concat!(\"[`ilog2`]: \", stringify!($SelfT), \"::ilog2\")]\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\"}, {"sha": "d3ba79a2e64dda870edd5f56a1bbb522733133f0", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -109,6 +109,9 @@ macro_rules! uint_impl {\n \n         /// Returns the number of leading zeros in the binary representation of `self`.\n         ///\n+        /// Depending on what you're doing with the value, you might also be interested in the\n+        /// [`ilog2`] function which returns a consistent number, even if the type widens.\n+        ///\n         /// # Examples\n         ///\n         /// Basic usage:\n@@ -118,6 +121,7 @@ macro_rules! uint_impl {\n         ///\n         /// assert_eq!(n.leading_zeros(), 2);\n         /// ```\n+        #[doc = concat!(\"[`ilog2`]: \", stringify!($SelfT), \"::ilog2\")]\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\"}, {"sha": "2a39a371f484cb8f799c120263acaf33795cd55a", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -183,8 +183,6 @@ h4.code-header {\n \tfont-weight: 600;\n \tmargin: 0;\n \tpadding: 0;\n-\t/* position notable traits in mobile mode within the header */\n-\tposition: relative;\n }\n \n #crate-search,"}, {"sha": "c644b8413cc0fec012e31c20b2fd48c3c8ca9518", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -160,10 +160,6 @@ details.rustdoc-toggle > summary::before {\n \tcolor: #788797;\n }\n \n-.search-failed a {\n-\tcolor: #39AFD7;\n-}\n-\n .tooltip::after {\n \tbackground-color: #314559;\n \tcolor: #c5c5c5;"}, {"sha": "8141e99c52a5dff14add180a02132b27513e7f50", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -82,10 +82,6 @@ details.rustdoc-toggle > summary::before {\n \tfilter: invert(100%);\n }\n \n-.search-failed a {\n-\tcolor: #0089ff;\n-}\n-\n .tooltip::after {\n \tbackground-color: #000;\n \tcolor: #fff;"}, {"sha": "6e3d7568ffb7276cc44b8b350bf7ef65f501fd3e", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -69,17 +69,12 @@\n \t--crate-search-hover-border: #717171;\n }\n \n-\n .content .item-info::before { color: #ccc; }\n \n body.source .example-wrap pre.rust a {\n \tbackground: #eee;\n }\n \n-.search-failed a {\n-\tcolor: #3873AD;\n-}\n-\n .tooltip::after {\n \tbackground-color: #000;\n \tcolor: #fff;"}, {"sha": "b88be32c94a4bb01212a7ab1ca10915fde18a6a9", "filename": "src/test/rustdoc-gui/search-no-result.goml", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Frustdoc-gui%2Fsearch-no-result.goml", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Frustdoc-gui%2Fsearch-no-result.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-no-result.goml?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -0,0 +1,36 @@\n+// The goal of this test is to check the color of the \"no result\" links.\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/index.html?search=sdkfskjfsdks\"\n+show-text: true\n+\n+define-function: (\n+    \"check-no-result\",\n+    (theme, link, link_hover),\n+    [\n+        // Changing theme.\n+        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n+        (\"reload\"),\n+        (\"wait-for\", \"#results\"),\n+        (\"assert\", \".search-failed.active\"),\n+        (\"assert-css\", (\"#results a\", {\"color\": |link|}, ALL)),\n+        (\"move-cursor-to\", \"#results a\"),\n+        (\"assert-css\", (\"#results a:hover\", {\"color\": |link_hover|})),\n+        // Moving the cursor to some other place to not create issues with next function run.\n+        (\"move-cursor-to\", \".search-input\"),\n+    ]\n+)\n+\n+call-function: (\"check-no-result\", {\n+    \"theme\": \"ayu\",\n+    \"link\": \"rgb(57, 175, 215)\",\n+    \"link_hover\": \"rgb(57, 175, 215)\",\n+})\n+call-function: (\"check-no-result\", {\n+    \"theme\": \"dark\",\n+    \"link\": \"rgb(210, 153, 29)\",\n+    \"link_hover\": \"rgb(210, 153, 29)\",\n+})\n+call-function: (\"check-no-result\", {\n+    \"theme\": \"light\",\n+    \"link\": \"rgb(56, 115, 173)\",\n+    \"link_hover\": \"rgb(56, 115, 173)\",\n+})"}, {"sha": "9233f37444b6ed9bd2846854b4b64afcc39e32bf", "filename": "src/test/rustdoc-gui/src-font-size.goml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Frustdoc-gui%2Fsrc-font-size.goml", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Frustdoc-gui%2Fsrc-font-size.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc-font-size.goml?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -9,3 +9,8 @@ assert-css: (\".impl.has-srclink .code-header\", {\"font-size\": \"18px\", \"font-weigh\n // Check the impl items.\n assert-css: (\".impl-items .has-srclink .srclink\", {\"font-size\": \"16px\", \"font-weight\": 400}, ALL)\n assert-css: (\".impl-items .has-srclink .code-header\", {\"font-size\": \"16px\", \"font-weight\": 600}, ALL)\n+\n+// Check that we can click on source link\n+store-document-property: (url, \"URL\")\n+click: \".impl-items .has-srclink .srclink\"\n+assert-document-property-false: {\"URL\": |url|}"}, {"sha": "5e3b55ca5258bf66a563aaefaddf875700fb4b9d", "filename": "src/test/ui/argument-suggestions/formal-and-expected-differ.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Fargument-suggestions%2Fformal-and-expected-differ.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Fargument-suggestions%2Fformal-and-expected-differ.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fformal-and-expected-differ.rs?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -0,0 +1,25 @@\n+pub trait Foo {\n+    type T;\n+}\n+\n+impl Foo for i32 {\n+    type T = f32;\n+}\n+\n+pub struct U<T1, T2>(T1, S<T2>)\n+where\n+    T1: Foo<T = T2>;\n+\n+pub struct S<T>(T);\n+\n+fn main() {\n+    // The error message here isn't great -- it has to do with the fact that the\n+    // `expected_inputs_for_expected_output` deduced inputs differs from the inputs\n+    // that we infer from the constraints of the signature.\n+    //\n+    // I am not really sure what the best way of presenting this error message is,\n+    // since right now it just suggests changing `3u32` <=> `3f32` back and forth.\n+    let _: U<_, u32> = U(1, S(3u32));\n+    //~^ ERROR mismatched types\n+    //~| ERROR mismatched types\n+}"}, {"sha": "905875b52776907678176f1866e4a20f44bf85d2", "filename": "src/test/ui/argument-suggestions/formal-and-expected-differ.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Fargument-suggestions%2Fformal-and-expected-differ.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Fargument-suggestions%2Fformal-and-expected-differ.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fformal-and-expected-differ.stderr?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -0,0 +1,30 @@\n+error[E0308]: mismatched types\n+  --> $DIR/formal-and-expected-differ.rs:22:29\n+   |\n+LL |     let _: U<_, u32> = U(1, S(3u32));\n+   |                        -    ^^^^^^^ expected `f32`, found `u32`\n+   |                        |\n+   |                        arguments to this struct are incorrect\n+   |\n+   = note: expected struct `S<f32>`\n+              found struct `S<u32>`\n+note: tuple struct defined here\n+  --> $DIR/formal-and-expected-differ.rs:9:12\n+   |\n+LL | pub struct U<T1, T2>(T1, S<T2>)\n+   |            ^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/formal-and-expected-differ.rs:22:24\n+   |\n+LL |     let _: U<_, u32> = U(1, S(3u32));\n+   |            ---------   ^^^^^^^^^^^^^ expected `u32`, found `f32`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected struct `U<_, u32>`\n+              found struct `U<i32, f32>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "b223aff4e94923f151020f3ec51eeeeca3991d08", "filename": "src/test/ui/codegen/issue-99551.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Fcodegen%2Fissue-99551.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Fcodegen%2Fissue-99551.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodegen%2Fissue-99551.rs?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -1,6 +1,5 @@\n // build-pass\n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n pub trait A {}\n pub trait B {}"}, {"sha": "6d9b70ad6b1c2c45ab759ab49eec3cb4b05361c0", "filename": "src/test/ui/sanitize/memory-passing.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Fsanitize%2Fmemory-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Fsanitize%2Fmemory-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fmemory-passing.rs?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -0,0 +1,32 @@\n+// needs-sanitizer-support\n+// needs-sanitizer-memory\n+//\n+// revisions: unoptimized optimized\n+//\n+// [optimized]compile-flags: -Z sanitizer=memory -Zsanitizer-memory-track-origins -O\n+// [unoptimized]compile-flags: -Z sanitizer=memory -Zsanitizer-memory-track-origins\n+//\n+// run-pass\n+//\n+// This test case intentionally limits the usage of the std,\n+// since it will be linked with an uninstrumented version of it.\n+\n+#![feature(core_intrinsics)]\n+#![feature(start)]\n+#![allow(invalid_value)]\n+\n+use std::hint::black_box;\n+\n+fn calling_black_box_on_zst_ok() {\n+    // It's OK to call black_box on a value of a zero-sized type, even if its\n+    // underlying the memory location is uninitialized. For non-zero-sized types,\n+    // this would be an MSAN error.\n+    let zst = ();\n+    black_box(zst);\n+}\n+\n+#[start]\n+fn main(_: isize, _: *const *const u8) -> isize {\n+    calling_black_box_on_zst_ok();\n+    0\n+}"}, {"sha": "c1a944562683a802277f24947f2275d884283c27", "filename": "src/test/ui/suggestions/unnecessary_dot_for_floating_point_literal.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Fsuggestions%2Funnecessary_dot_for_floating_point_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Fsuggestions%2Funnecessary_dot_for_floating_point_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Funnecessary_dot_for_floating_point_literal.rs?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let _: f64 = 0..10; //~ ERROR mismatched types\n+    let _: f64 = 1..; //~ ERROR mismatched types\n+    let _: f64 = ..10; //~ ERROR mismatched types\n+    let _: f64 = std::ops::Range { start: 0, end: 1 }; //~ ERROR mismatched types\n+}"}, {"sha": "773f1392ae7655827c2e619bf95beefdcefb48a8", "filename": "src/test/ui/suggestions/unnecessary_dot_for_floating_point_literal.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Fsuggestions%2Funnecessary_dot_for_floating_point_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Fsuggestions%2Funnecessary_dot_for_floating_point_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Funnecessary_dot_for_floating_point_literal.stderr?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -0,0 +1,59 @@\n+error[E0308]: mismatched types\n+  --> $DIR/unnecessary_dot_for_floating_point_literal.rs:2:18\n+   |\n+LL |     let _: f64 = 0..10;\n+   |            ---   ^^^^^ expected `f64`, found struct `std::ops::Range`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected type `f64`\n+            found struct `std::ops::Range<{integer}>`\n+help: remove the unnecessary `.` operator for a floating point literal\n+   |\n+LL |     let _: f64 = 0.10;\n+   |                   ~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/unnecessary_dot_for_floating_point_literal.rs:3:18\n+   |\n+LL |     let _: f64 = 1..;\n+   |            ---   ^^^ expected `f64`, found struct `RangeFrom`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected type `f64`\n+            found struct `RangeFrom<{integer}>`\n+help: remove the unnecessary `.` operator for a floating point literal\n+   |\n+LL |     let _: f64 = 1.;\n+   |                   ~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/unnecessary_dot_for_floating_point_literal.rs:4:18\n+   |\n+LL |     let _: f64 = ..10;\n+   |            ---   ^^^^ expected `f64`, found struct `RangeTo`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected type `f64`\n+            found struct `RangeTo<{integer}>`\n+help: remove the unnecessary `.` operator and add an integer part for a floating point literal\n+   |\n+LL |     let _: f64 = 0.10;\n+   |                  ~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/unnecessary_dot_for_floating_point_literal.rs:5:18\n+   |\n+LL |     let _: f64 = std::ops::Range { start: 0, end: 1 };\n+   |            ---   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found struct `std::ops::Range`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected type `f64`\n+            found struct `std::ops::Range<{integer}>`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "570ec5160bfe9809011c113e9c06fccdf0397bc8", "filename": "src/test/ui/traits/trait-upcasting/basic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fbasic.rs?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n trait Foo: PartialEq<i32> + std::fmt::Debug + Send + Sync {\n     fn a(&self) -> i32 {"}, {"sha": "eae5cf8d58d0196c9a2445d1772b93d0bb0c4a06", "filename": "src/test/ui/traits/trait-upcasting/correct-supertrait-substitution.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fcorrect-supertrait-substitution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fcorrect-supertrait-substitution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fcorrect-supertrait-substitution.rs?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n trait Foo<T: Default + ToString>: Bar<i32> + Bar<T> {}\n trait Bar<T: Default + ToString> {"}, {"sha": "a4f81c464b40266090aeb90913eeb9adf200aaf7", "filename": "src/test/ui/traits/trait-upcasting/diamond.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fdiamond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fdiamond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fdiamond.rs?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n trait Foo: PartialEq<i32> + std::fmt::Debug + Send + Sync {\n     fn a(&self) -> i32 {"}, {"sha": "e634bbd5ac6f5d7782921f16bbd41c2a78e69390", "filename": "src/test/ui/traits/trait-upcasting/invalid-upcast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Finvalid-upcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Finvalid-upcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Finvalid-upcast.rs?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -1,5 +1,4 @@\n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n trait Foo {\n     fn a(&self) -> i32 {"}, {"sha": "3aa21ee3dddfbbdf5f8a8c8c359a2a49583024e4", "filename": "src/test/ui/traits/trait-upcasting/invalid-upcast.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Finvalid-upcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Finvalid-upcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Finvalid-upcast.stderr?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:54:35\n+  --> $DIR/invalid-upcast.rs:53:35\n    |\n LL |     let _: &dyn std::fmt::Debug = baz;\n    |            --------------------   ^^^ expected trait `Debug`, found trait `Baz`\n@@ -10,7 +10,7 @@ LL |     let _: &dyn std::fmt::Debug = baz;\n               found reference `&dyn Baz`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:56:24\n+  --> $DIR/invalid-upcast.rs:55:24\n    |\n LL |     let _: &dyn Send = baz;\n    |            ---------   ^^^ expected trait `Send`, found trait `Baz`\n@@ -21,7 +21,7 @@ LL |     let _: &dyn Send = baz;\n               found reference `&dyn Baz`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:58:24\n+  --> $DIR/invalid-upcast.rs:57:24\n    |\n LL |     let _: &dyn Sync = baz;\n    |            ---------   ^^^ expected trait `Sync`, found trait `Baz`\n@@ -32,7 +32,7 @@ LL |     let _: &dyn Sync = baz;\n               found reference `&dyn Baz`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:61:25\n+  --> $DIR/invalid-upcast.rs:60:25\n    |\n LL |     let bar: &dyn Bar = baz;\n    |              --------   ^^^ expected trait `Bar`, found trait `Baz`\n@@ -43,7 +43,7 @@ LL |     let bar: &dyn Bar = baz;\n               found reference `&dyn Baz`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:63:35\n+  --> $DIR/invalid-upcast.rs:62:35\n    |\n LL |     let _: &dyn std::fmt::Debug = bar;\n    |            --------------------   ^^^ expected trait `Debug`, found trait `Bar`\n@@ -54,7 +54,7 @@ LL |     let _: &dyn std::fmt::Debug = bar;\n               found reference `&dyn Bar`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:65:24\n+  --> $DIR/invalid-upcast.rs:64:24\n    |\n LL |     let _: &dyn Send = bar;\n    |            ---------   ^^^ expected trait `Send`, found trait `Bar`\n@@ -65,7 +65,7 @@ LL |     let _: &dyn Send = bar;\n               found reference `&dyn Bar`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:67:24\n+  --> $DIR/invalid-upcast.rs:66:24\n    |\n LL |     let _: &dyn Sync = bar;\n    |            ---------   ^^^ expected trait `Sync`, found trait `Bar`\n@@ -76,7 +76,7 @@ LL |     let _: &dyn Sync = bar;\n               found reference `&dyn Bar`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:70:25\n+  --> $DIR/invalid-upcast.rs:69:25\n    |\n LL |     let foo: &dyn Foo = baz;\n    |              --------   ^^^ expected trait `Foo`, found trait `Baz`\n@@ -87,7 +87,7 @@ LL |     let foo: &dyn Foo = baz;\n               found reference `&dyn Baz`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:72:35\n+  --> $DIR/invalid-upcast.rs:71:35\n    |\n LL |     let _: &dyn std::fmt::Debug = foo;\n    |            --------------------   ^^^ expected trait `Debug`, found trait `Foo`\n@@ -98,7 +98,7 @@ LL |     let _: &dyn std::fmt::Debug = foo;\n               found reference `&dyn Foo`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:74:24\n+  --> $DIR/invalid-upcast.rs:73:24\n    |\n LL |     let _: &dyn Send = foo;\n    |            ---------   ^^^ expected trait `Send`, found trait `Foo`\n@@ -109,7 +109,7 @@ LL |     let _: &dyn Send = foo;\n               found reference `&dyn Foo`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:76:24\n+  --> $DIR/invalid-upcast.rs:75:24\n    |\n LL |     let _: &dyn Sync = foo;\n    |            ---------   ^^^ expected trait `Sync`, found trait `Foo`\n@@ -120,7 +120,7 @@ LL |     let _: &dyn Sync = foo;\n               found reference `&dyn Foo`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:79:25\n+  --> $DIR/invalid-upcast.rs:78:25\n    |\n LL |     let foo: &dyn Foo = bar;\n    |              --------   ^^^ expected trait `Foo`, found trait `Bar`\n@@ -131,7 +131,7 @@ LL |     let foo: &dyn Foo = bar;\n               found reference `&dyn Bar`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:81:35\n+  --> $DIR/invalid-upcast.rs:80:35\n    |\n LL |     let _: &dyn std::fmt::Debug = foo;\n    |            --------------------   ^^^ expected trait `Debug`, found trait `Foo`\n@@ -142,7 +142,7 @@ LL |     let _: &dyn std::fmt::Debug = foo;\n               found reference `&dyn Foo`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:83:24\n+  --> $DIR/invalid-upcast.rs:82:24\n    |\n LL |     let _: &dyn Send = foo;\n    |            ---------   ^^^ expected trait `Send`, found trait `Foo`\n@@ -153,7 +153,7 @@ LL |     let _: &dyn Send = foo;\n               found reference `&dyn Foo`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:85:24\n+  --> $DIR/invalid-upcast.rs:84:24\n    |\n LL |     let _: &dyn Sync = foo;\n    |            ---------   ^^^ expected trait `Sync`, found trait `Foo`"}, {"sha": "b672963ae98876c5e4553a6e3b2be7bbb9771787", "filename": "src/test/ui/traits/trait-upcasting/issue-11515-upcast-fn_mut-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fissue-11515-upcast-fn_mut-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fissue-11515-upcast-fn_mut-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fissue-11515-upcast-fn_mut-fn.rs?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n struct Test {\n     func: Box<dyn FnMut() + 'static>,"}, {"sha": "9825158c2dd38a52974ad004156c44123991154c", "filename": "src/test/ui/traits/trait-upcasting/lifetime.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Flifetime.rs?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n trait Foo: PartialEq<i32> + std::fmt::Debug + Send + Sync {\n     fn a(&self) -> i32 {"}, {"sha": "2e53a00a90e9c8e955d4c7e8b1b1d449d1961f5e", "filename": "src/test/ui/traits/trait-upcasting/multiple-occurrence-ambiguousity.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple-occurrence-ambiguousity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple-occurrence-ambiguousity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple-occurrence-ambiguousity.rs?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -1,12 +1,11 @@\n // check-fail\n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n trait Bar<T> {\n     fn bar(&self, _: T) {}\n }\n \n-trait Foo : Bar<i32> + Bar<u32> {\n+trait Foo: Bar<i32> + Bar<u32> {\n     fn foo(&self, _: ()) {}\n }\n "}, {"sha": "0ad18be03cdf9d259a2da0eb0e899f163bd67a0a", "filename": "src/test/ui/traits/trait-upcasting/multiple-occurrence-ambiguousity.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple-occurrence-ambiguousity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple-occurrence-ambiguousity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple-occurrence-ambiguousity.stderr?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/multiple-occurrence-ambiguousity.rs:21:26\n+  --> $DIR/multiple-occurrence-ambiguousity.rs:20:26\n    |\n LL |     let t: &dyn Bar<_> = s;\n    |            -----------   ^ expected trait `Bar`, found trait `Foo`"}, {"sha": "9ccfc9306ac0c46e04097ebd9a0ba9ad334cba07", "filename": "src/test/ui/traits/trait-upcasting/replace-vptr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Freplace-vptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Freplace-vptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Freplace-vptr.rs?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n trait A {\n     fn foo_a(&self);"}, {"sha": "a3e41696956cb930a65ac3e7c0a2b3f03f9fe9b3", "filename": "src/test/ui/traits/trait-upcasting/struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fstruct.rs?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n use std::rc::Rc;\n use std::sync::Arc;"}, {"sha": "136d15af0e8b2de5f7fb1d99c3b1df15deb7b57a", "filename": "src/test/ui/traits/trait-upcasting/subtrait-method.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fsubtrait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fsubtrait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fsubtrait-method.rs?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -1,5 +1,4 @@\n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n trait Foo: PartialEq<i32> + std::fmt::Debug + Send + Sync {\n     fn a(&self) -> i32 {"}, {"sha": "918159e845b9e7e5e98b9145aab67aaa3a012605", "filename": "src/test/ui/traits/trait-upcasting/subtrait-method.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fsubtrait-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fsubtrait-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fsubtrait-method.stderr?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -1,64 +1,64 @@\n error[E0599]: no method named `c` found for reference `&dyn Bar` in the current scope\n-  --> $DIR/subtrait-method.rs:56:9\n+  --> $DIR/subtrait-method.rs:55:9\n    |\n LL |     bar.c();\n    |         ^ help: there is a method with a similar name: `a`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `Baz` defines an item `c`, perhaps you need to implement it\n-  --> $DIR/subtrait-method.rs:28:1\n+  --> $DIR/subtrait-method.rs:27:1\n    |\n LL | trait Baz: Bar {\n    | ^^^^^^^^^^^^^^\n \n error[E0599]: no method named `b` found for reference `&dyn Foo` in the current scope\n-  --> $DIR/subtrait-method.rs:60:9\n+  --> $DIR/subtrait-method.rs:59:9\n    |\n LL |     foo.b();\n    |         ^ help: there is a method with a similar name: `a`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `Bar` defines an item `b`, perhaps you need to implement it\n-  --> $DIR/subtrait-method.rs:18:1\n+  --> $DIR/subtrait-method.rs:17:1\n    |\n LL | trait Bar: Foo {\n    | ^^^^^^^^^^^^^^\n \n error[E0599]: no method named `c` found for reference `&dyn Foo` in the current scope\n-  --> $DIR/subtrait-method.rs:62:9\n+  --> $DIR/subtrait-method.rs:61:9\n    |\n LL |     foo.c();\n    |         ^ help: there is a method with a similar name: `a`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `Baz` defines an item `c`, perhaps you need to implement it\n-  --> $DIR/subtrait-method.rs:28:1\n+  --> $DIR/subtrait-method.rs:27:1\n    |\n LL | trait Baz: Bar {\n    | ^^^^^^^^^^^^^^\n \n error[E0599]: no method named `b` found for reference `&dyn Foo` in the current scope\n-  --> $DIR/subtrait-method.rs:66:9\n+  --> $DIR/subtrait-method.rs:65:9\n    |\n LL |     foo.b();\n    |         ^ help: there is a method with a similar name: `a`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `Bar` defines an item `b`, perhaps you need to implement it\n-  --> $DIR/subtrait-method.rs:18:1\n+  --> $DIR/subtrait-method.rs:17:1\n    |\n LL | trait Bar: Foo {\n    | ^^^^^^^^^^^^^^\n \n error[E0599]: no method named `c` found for reference `&dyn Foo` in the current scope\n-  --> $DIR/subtrait-method.rs:68:9\n+  --> $DIR/subtrait-method.rs:67:9\n    |\n LL |     foo.c();\n    |         ^ help: there is a method with a similar name: `a`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `Baz` defines an item `c`, perhaps you need to implement it\n-  --> $DIR/subtrait-method.rs:28:1\n+  --> $DIR/subtrait-method.rs:27:1\n    |\n LL | trait Baz: Bar {\n    | ^^^^^^^^^^^^^^"}, {"sha": "6bc9f4a75d3338f9aff95bd80db1fa3fa59be204", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.rs?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -1,5 +1,4 @@\n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n trait Foo: Bar<i32> + Bar<u32> {}\n trait Bar<T> {"}, {"sha": "fe269d8e99bf55ed0b6f43d7a2288a7a3c022e81", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.stderr?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -1,5 +1,5 @@\n error[E0605]: non-primitive cast: `&dyn Foo` as `&dyn Bar<_>`\n-  --> $DIR/type-checking-test-1.rs:17:13\n+  --> $DIR/type-checking-test-1.rs:16:13\n    |\n LL |     let _ = x as &dyn Bar<_>; // Ambiguous\n    |             ^^^^^^^^^^^^^^^^ invalid cast\n@@ -10,7 +10,7 @@ LL |     let _ = &x as &dyn Bar<_>; // Ambiguous\n    |             +\n \n error[E0277]: the trait bound `&dyn Foo: Bar<_>` is not satisfied\n-  --> $DIR/type-checking-test-1.rs:17:13\n+  --> $DIR/type-checking-test-1.rs:16:13\n    |\n LL |     let _ = x as &dyn Bar<_>; // Ambiguous\n    |             ^ the trait `Bar<_>` is not implemented for `&dyn Foo`"}, {"sha": "36b11dffdb158ba608caa531a3ad55aaceddf375", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.rs?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -1,5 +1,4 @@\n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n trait Foo<T>: Bar<i32> + Bar<T> {}\n trait Bar<T> {"}, {"sha": "ef007d5cb909f9ae1c47e0844d4e9e3531b7e5cc", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.stderr?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -1,5 +1,5 @@\n error[E0605]: non-primitive cast: `&dyn Foo<i32>` as `&dyn Bar<u32>`\n-  --> $DIR/type-checking-test-2.rs:20:13\n+  --> $DIR/type-checking-test-2.rs:19:13\n    |\n LL |     let _ = x as &dyn Bar<u32>; // Error\n    |             ^^^^^^^^^^^^^^^^^^ invalid cast\n@@ -10,15 +10,15 @@ LL |     let _ = &x as &dyn Bar<u32>; // Error\n    |             +\n \n error[E0277]: the trait bound `&dyn Foo<i32>: Bar<u32>` is not satisfied\n-  --> $DIR/type-checking-test-2.rs:20:13\n+  --> $DIR/type-checking-test-2.rs:19:13\n    |\n LL |     let _ = x as &dyn Bar<u32>; // Error\n    |             ^ the trait `Bar<u32>` is not implemented for `&dyn Foo<i32>`\n    |\n    = note: required for the cast from `&dyn Foo<i32>` to the object type `dyn Bar<u32>`\n \n error[E0605]: non-primitive cast: `&dyn Foo<u32>` as `&dyn Bar<_>`\n-  --> $DIR/type-checking-test-2.rs:26:13\n+  --> $DIR/type-checking-test-2.rs:25:13\n    |\n LL |     let a = x as &dyn Bar<_>; // Ambiguous\n    |             ^^^^^^^^^^^^^^^^ invalid cast\n@@ -29,7 +29,7 @@ LL |     let a = &x as &dyn Bar<_>; // Ambiguous\n    |             +\n \n error[E0277]: the trait bound `&dyn Foo<u32>: Bar<_>` is not satisfied\n-  --> $DIR/type-checking-test-2.rs:26:13\n+  --> $DIR/type-checking-test-2.rs:25:13\n    |\n LL |     let a = x as &dyn Bar<_>; // Ambiguous\n    |             ^ the trait `Bar<_>` is not implemented for `&dyn Foo<u32>`"}, {"sha": "e6cb6a753998f0ec375f47d0be3239f605ef7f98", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-3.polonius.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.polonius.stderr?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -1,22 +1,18 @@\n error: lifetime may not live long enough\n-  --> $DIR/type-checking-test-3.rs:13:13\n+  --> $DIR/type-checking-test-3.rs:11:13\n    |\n LL | fn test_wrong1<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n    |                -- lifetime `'a` defined here\n LL |     let _ = x as &dyn Bar<'a>; // Error\n    |             ^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/type-checking-test-3.rs:18:13\n+  --> $DIR/type-checking-test-3.rs:16:13\n    |\n LL | fn test_wrong2<'a>(x: &dyn Foo<'a>) {\n    |                -- lifetime `'a` defined here\n LL |     let _ = x as &dyn Bar<'static>; // Error\n    |             ^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b2db3a127974c3d57bf8da73a6fbcb0e070cca3a", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-3.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.rs?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -1,5 +1,4 @@\n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n trait Foo<'a>: Bar<'a> {}\n trait Bar<'a> {}\n@@ -10,12 +9,12 @@ fn test_correct(x: &dyn Foo<'static>) {\n \n fn test_wrong1<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n     let _ = x as &dyn Bar<'a>; // Error\n-    //~^ ERROR lifetime may not live long enough\n+                               //~^ ERROR lifetime may not live long enough\n }\n \n fn test_wrong2<'a>(x: &dyn Foo<'a>) {\n     let _ = x as &dyn Bar<'static>; // Error\n-    //~^ ERROR lifetime may not live long enough\n+                                    //~^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "e6cb6a753998f0ec375f47d0be3239f605ef7f98", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.stderr?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -1,13 +1,13 @@\n error: lifetime may not live long enough\n-  --> $DIR/type-checking-test-3.rs:12:13\n+  --> $DIR/type-checking-test-3.rs:11:13\n    |\n LL | fn test_wrong1<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n    |                -- lifetime `'a` defined here\n LL |     let _ = x as &dyn Bar<'a>; // Error\n    |             ^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/type-checking-test-3.rs:17:13\n+  --> $DIR/type-checking-test-3.rs:16:13\n    |\n LL | fn test_wrong2<'a>(x: &dyn Foo<'a>) {\n    |                -- lifetime `'a` defined here"}, {"sha": "8d506e5807ece13e6819651672937600bf97b49d", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-4.polonius.stderr", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.polonius.stderr?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -1,33 +1,52 @@\n error: lifetime may not live long enough\n-  --> $DIR/type-checking-test-4.rs:17:13\n+  --> $DIR/type-checking-test-4.rs:15:13\n    |\n LL | fn test_wrong1<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n    |                -- lifetime `'a` defined here\n LL |     let _ = x as &dyn Bar<'static, 'a>; // Error\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/type-checking-test-4.rs:22:13\n+  --> $DIR/type-checking-test-4.rs:20:13\n    |\n LL | fn test_wrong2<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n    |                -- lifetime `'a` defined here\n LL |     let _ = x as &dyn Bar<'a, 'static>; // Error\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/type-checking-test-4.rs:29:5\n+  --> $DIR/type-checking-test-4.rs:26:5\n    |\n LL | fn test_wrong3<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n    |                -- lifetime `'a` defined here\n-...\n+LL |     let y = x as &dyn Bar<'_, '_>;\n LL |     y.get_b() // ERROR\n    |     ^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/type-checking-test-4.rs:31:5\n+   |\n+LL | fn test_wrong4<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                -- lifetime `'a` defined here\n+LL |     <_ as Bar>::get_b(x) // ERROR\n+   |     ^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/type-checking-test-4.rs:36:5\n+   |\n+LL | fn test_wrong5<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                -- lifetime `'a` defined here\n+LL |     <_ as Bar<'_, '_>>::get_b(x) // ERROR\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/type-checking-test-4.rs:44:5\n    |\n-   = help: consider replacing `'a` with `'static`\n+LL | fn test_wrong6<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                -- lifetime `'a` defined here\n+...\n+LL |     z.get_b() // ERROR\n+   |     ^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "f40c48f0d125f72a9795b19174fd06651d89644c", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-4.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.rs?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -1,5 +1,4 @@\n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n trait Foo<'a>: Bar<'a, 'a> {}\n trait Bar<'a, 'b> {\n@@ -14,36 +13,36 @@ fn test_correct(x: &dyn Foo<'static>) {\n \n fn test_wrong1<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n     let _ = x as &dyn Bar<'static, 'a>; // Error\n-    //~^ ERROR lifetime may not live long enough\n+                                        //~^ ERROR lifetime may not live long enough\n }\n \n fn test_wrong2<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n     let _ = x as &dyn Bar<'a, 'static>; // Error\n-    //~^ ERROR lifetime may not live long enough\n+                                        //~^ ERROR lifetime may not live long enough\n }\n \n fn test_wrong3<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n     let y = x as &dyn Bar<'_, '_>;\n     y.get_b() // ERROR\n-    //~^ ERROR lifetime may not live long enough\n+              //~^ ERROR lifetime may not live long enough\n }\n \n fn test_wrong4<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n     <_ as Bar>::get_b(x) // ERROR\n-    //~^ ERROR lifetime may not live long enough\n+                         //~^ ERROR lifetime may not live long enough\n }\n \n fn test_wrong5<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n     <_ as Bar<'_, '_>>::get_b(x) // ERROR\n-    //~^ ERROR lifetime may not live long enough\n+                                 //~^ ERROR lifetime may not live long enough\n }\n \n fn test_wrong6<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n     let y = x as &dyn Bar<'_, '_>;\n     y.get_b(); // ERROR\n     let z = y;\n     z.get_b() // ERROR\n-    //~^ ERROR lifetime may not live long enough\n+              //~^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "8d506e5807ece13e6819651672937600bf97b49d", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-4.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd128880b13bc9f7a919567926e801c8a1487cdb/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr?ref=cd128880b13bc9f7a919567926e801c8a1487cdb", "patch": "@@ -1,21 +1,21 @@\n error: lifetime may not live long enough\n-  --> $DIR/type-checking-test-4.rs:16:13\n+  --> $DIR/type-checking-test-4.rs:15:13\n    |\n LL | fn test_wrong1<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n    |                -- lifetime `'a` defined here\n LL |     let _ = x as &dyn Bar<'static, 'a>; // Error\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/type-checking-test-4.rs:21:13\n+  --> $DIR/type-checking-test-4.rs:20:13\n    |\n LL | fn test_wrong2<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n    |                -- lifetime `'a` defined here\n LL |     let _ = x as &dyn Bar<'a, 'static>; // Error\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/type-checking-test-4.rs:27:5\n+  --> $DIR/type-checking-test-4.rs:26:5\n    |\n LL | fn test_wrong3<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n    |                -- lifetime `'a` defined here\n@@ -24,23 +24,23 @@ LL |     y.get_b() // ERROR\n    |     ^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/type-checking-test-4.rs:32:5\n+  --> $DIR/type-checking-test-4.rs:31:5\n    |\n LL | fn test_wrong4<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n    |                -- lifetime `'a` defined here\n LL |     <_ as Bar>::get_b(x) // ERROR\n    |     ^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/type-checking-test-4.rs:37:5\n+  --> $DIR/type-checking-test-4.rs:36:5\n    |\n LL | fn test_wrong5<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n    |                -- lifetime `'a` defined here\n LL |     <_ as Bar<'_, '_>>::get_b(x) // ERROR\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/type-checking-test-4.rs:45:5\n+  --> $DIR/type-checking-test-4.rs:44:5\n    |\n LL | fn test_wrong6<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n    |                -- lifetime `'a` defined here"}]}