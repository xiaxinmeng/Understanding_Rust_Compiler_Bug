{"sha": "73a366673f3cbf12df912bedba4a2a56cc00e793", "node_id": "C_kwDOAAsO6NoAKDczYTM2NjY3M2YzY2JmMTJkZjkxMmJlZGJhNGEyYTU2Y2MwMGU3OTM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-02-09T09:58:48Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-02-09T10:01:26Z"}, "message": "don't waste half the address space on AVR targets", "tree": {"sha": "f1091bcb4bbc1394acd1fdd777b1b733c785ba26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1091bcb4bbc1394acd1fdd777b1b733c785ba26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73a366673f3cbf12df912bedba4a2a56cc00e793", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73a366673f3cbf12df912bedba4a2a56cc00e793", "html_url": "https://github.com/rust-lang/rust/commit/73a366673f3cbf12df912bedba4a2a56cc00e793", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73a366673f3cbf12df912bedba4a2a56cc00e793/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f451fca0dc7f9ab9f341fb529f861fafd205b2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f451fca0dc7f9ab9f341fb529f861fafd205b2f", "html_url": "https://github.com/rust-lang/rust/commit/6f451fca0dc7f9ab9f341fb529f861fafd205b2f"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "269b441c5045c7fdb11dc0bbb90c5c2d03a9c05b", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/73a366673f3cbf12df912bedba4a2a56cc00e793/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a366673f3cbf12df912bedba4a2a56cc00e793/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=73a366673f3cbf12df912bedba4a2a56cc00e793", "patch": "@@ -477,7 +477,8 @@ pub struct MiriMachine<'mir, 'tcx> {\n \n impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n     pub(crate) fn new(config: &MiriConfig, layout_cx: LayoutCx<'tcx, TyCtxt<'tcx>>) -> Self {\n-        let local_crates = helpers::get_local_crates(layout_cx.tcx);\n+        let tcx = layout_cx.tcx;\n+        let local_crates = helpers::get_local_crates(tcx);\n         let layouts =\n             PrimitiveLayouts::new(layout_cx).expect(\"Couldn't get layouts of primitive types\");\n         let profiler = config.measureme_out.as_ref().map(|out| {\n@@ -486,10 +487,13 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n         let rng = StdRng::seed_from_u64(config.seed.unwrap_or(0));\n         let borrow_tracker = config.borrow_tracker.map(|bt| bt.instanciate_global_state(config));\n         let data_race = config.data_race_detector.then(|| data_race::GlobalState::new(config));\n+        // Determinine page size, stack address, and stack size.\n+        // These values are mostly meaningless, but the stack address is also where we start\n+        // allocating physical integer addresses for all allocations.\n         let page_size = if let Some(page_size) = config.page_size {\n             page_size\n         } else {\n-            let target = &layout_cx.tcx.sess.target;\n+            let target = &tcx.sess.target;\n             match target.arch.as_ref() {\n                 \"wasm32\" | \"wasm64\" => 64 * 1024, // https://webassembly.github.io/spec/core/exec/runtime.html#memory-instances\n                 \"aarch64\" =>\n@@ -504,10 +508,12 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n                 _ => 4 * 1024,\n             }\n         };\n-        let stack_addr = page_size * 32;\n-        let stack_size = page_size * 16;\n+        // On 16bit targets, 32 pages is more than the entire address space!\n+        let stack_addr = if tcx.pointer_size().bits() < 32 { page_size } else { page_size * 32 };\n+        let stack_size =\n+            if tcx.pointer_size().bits() < 32 { page_size * 4 } else { page_size * 16 };\n         MiriMachine {\n-            tcx: layout_cx.tcx,\n+            tcx,\n             borrow_tracker,\n             data_race,\n             intptrcast: RefCell::new(intptrcast::GlobalStateInner::new(config, stack_addr)),"}]}