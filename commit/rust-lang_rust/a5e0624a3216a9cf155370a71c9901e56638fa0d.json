{"sha": "a5e0624a3216a9cf155370a71c9901e56638fa0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZTA2MjRhMzIxNmE5Y2YxNTUzNzBhNzFjOTkwMWU1NjYzOGZhMGQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-12-15T11:37:42Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-12-15T21:34:09Z"}, "message": "libgraphviz: extend API with flags to indicate options like \"do not include labels\".", "tree": {"sha": "16a583b2903b245c9a42f8bed0a86ae3b210faaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16a583b2903b245c9a42f8bed0a86ae3b210faaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5e0624a3216a9cf155370a71c9901e56638fa0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5e0624a3216a9cf155370a71c9901e56638fa0d", "html_url": "https://github.com/rust-lang/rust/commit/a5e0624a3216a9cf155370a71c9901e56638fa0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5e0624a3216a9cf155370a71c9901e56638fa0d/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c500b63e717261bc6cb80231936eca8f1233bc82", "url": "https://api.github.com/repos/rust-lang/rust/commits/c500b63e717261bc6cb80231936eca8f1233bc82", "html_url": "https://github.com/rust-lang/rust/commit/c500b63e717261bc6cb80231936eca8f1233bc82"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "0576c46d3bd8fc3543ac47db302e8ade378e97e4", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a5e0624a3216a9cf155370a71c9901e56638fa0d/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5e0624a3216a9cf155370a71c9901e56638fa0d/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=a5e0624a3216a9cf155370a71c9901e56638fa0d", "patch": "@@ -513,11 +513,29 @@ pub trait GraphWalk<'a, N, E> {\n     fn target(&'a self, edge: &E) -> N;\n }\n \n+#[deriving(Copy, PartialEq, Eq, Show)]\n+pub enum RenderOption {\n+    NoEdgeLabels,\n+    NoNodeLabels,\n+}\n+\n+/// Returns vec holding all the default render options.\n+pub fn default_options() -> Vec<RenderOption> { vec![] }\n+\n /// Renders directed graph `g` into the writer `w` in DOT syntax.\n-/// (Main entry point for the library.)\n+/// (Simple wrapper around `render_opts` that passes a default set of options.)\n pub fn render<'a, N:Clone+'a, E:Clone+'a, G:Labeller<'a,N,E>+GraphWalk<'a,N,E>, W:Writer>(\n               g: &'a G,\n-              w: &mut W) -> io::IoResult<()>\n+              w: &mut W) -> io::IoResult<()> {\n+    render_opts(g, w, &[])\n+}\n+\n+/// Renders directed graph `g` into the writer `w` in DOT syntax.\n+/// (Main entry point for the library.)\n+pub fn render_opts<'a, N:Clone+'a, E:Clone+'a, G:Labeller<'a,N,E>+GraphWalk<'a,N,E>, W:Writer>(\n+              g: &'a G,\n+              w: &mut W,\n+              options: &[RenderOption]) -> io::IoResult<()>\n {\n     fn writeln<W:Writer>(w: &mut W, arg: &[&str]) -> io::IoResult<()> {\n         for &s in arg.iter() { try!(w.write_str(s)); }\n@@ -532,9 +550,13 @@ pub fn render<'a, N:Clone+'a, E:Clone+'a, G:Labeller<'a,N,E>+GraphWalk<'a,N,E>,\n     for n in g.nodes().iter() {\n         try!(indent(w));\n         let id = g.node_id(n);\n-        let escaped = g.node_label(n).escape();\n-        try!(writeln(w, &[id.as_slice(),\n-                          \"[label=\\\"\", escaped.as_slice(), \"\\\"];\"]));\n+        if options.contains(&RenderOption::NoNodeLabels) {\n+            try!(writeln(w, &[id.as_slice(), \";\"]));\n+        } else {\n+            let escaped = g.node_label(n).escape();\n+            try!(writeln(w, &[id.as_slice(),\n+                              \"[label=\\\"\", escaped.as_slice(), \"\\\"];\"]));\n+        }\n     }\n \n     for e in g.edges().iter() {\n@@ -544,8 +566,14 @@ pub fn render<'a, N:Clone+'a, E:Clone+'a, G:Labeller<'a,N,E>+GraphWalk<'a,N,E>,\n         let target = g.target(e);\n         let source_id = g.node_id(&source);\n         let target_id = g.node_id(&target);\n-        try!(writeln(w, &[source_id.as_slice(), \" -> \", target_id.as_slice(),\n-                          \"[label=\\\"\", escaped_label.as_slice(), \"\\\"];\"]));\n+        if options.contains(&RenderOption::NoEdgeLabels) {\n+            try!(writeln(w, &[source_id.as_slice(),\n+                              \" -> \", target_id.as_slice(), \";\"]));\n+        } else {\n+            try!(writeln(w, &[source_id.as_slice(),\n+                              \" -> \", target_id.as_slice(),\n+                              \"[label=\\\"\", escaped_label.as_slice(), \"\\\"];\"]));\n+        }\n     }\n \n     writeln(w, &[\"}\"])"}]}