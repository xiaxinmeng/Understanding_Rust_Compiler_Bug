{"sha": "15a5382ef1115ff11c1357fd21ab4aa12626efee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YTUzODJlZjExMTVmZjExYzEzNTdmZDIxYWI0YWExMjYyNmVmZWU=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-13T21:56:19Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-13T22:15:09Z"}, "message": "Rename `MaybeBorrowedLocals` constructors", "tree": {"sha": "93745406403af1cde240cc4938ab831b22e371f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93745406403af1cde240cc4938ab831b22e371f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15a5382ef1115ff11c1357fd21ab4aa12626efee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15a5382ef1115ff11c1357fd21ab4aa12626efee", "html_url": "https://github.com/rust-lang/rust/commit/15a5382ef1115ff11c1357fd21ab4aa12626efee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15a5382ef1115ff11c1357fd21ab4aa12626efee/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f167e9c5f421613ff3de37771b1352cd98dd4f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f167e9c5f421613ff3de37771b1352cd98dd4f7", "html_url": "https://github.com/rust-lang/rust/commit/6f167e9c5f421613ff3de37771b1352cd98dd4f7"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "20aab8b32a51d071c4cb2961f2ad3148d595a4d9", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/15a5382ef1115ff11c1357fd21ab4aa12626efee/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a5382ef1115ff11c1357fd21ab4aa12626efee/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=15a5382ef1115ff11c1357fd21ab4aa12626efee", "patch": "@@ -27,15 +27,18 @@ pub struct MaybeBorrowedLocals<K = AnyBorrow> {\n impl MaybeBorrowedLocals {\n     /// A dataflow analysis that records whether a pointer or reference exists that may alias the\n     /// given local.\n-    pub fn new() -> Self {\n+    pub fn all_borrows() -> Self {\n         MaybeBorrowedLocals { kind: AnyBorrow }\n     }\n }\n \n impl MaybeMutBorrowedLocals<'mir, 'tcx> {\n     /// A dataflow analysis that records whether a pointer or reference exists that may *mutably*\n     /// alias the given local.\n-    pub fn new_mut_only(\n+    ///\n+    /// This includes `&mut` and pointers derived from an `&mut`, as well as shared borrows of\n+    /// types with interior mutability.\n+    pub fn mut_borrows_only(\n         tcx: TyCtxt<'tcx>,\n         body: &'mir mir::Body<'tcx>,\n         param_env: ParamEnv<'tcx>,"}, {"sha": "d9e179ad42a68ee43183125350b900ebf3ed8d83", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15a5382ef1115ff11c1357fd21ab4aa12626efee/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a5382ef1115ff11c1357fd21ab4aa12626efee/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=15a5382ef1115ff11c1357fd21ab4aa12626efee", "patch": "@@ -141,7 +141,7 @@ impl Validator<'a, 'mir, 'tcx> {\n         let needs_drop = QualifCursor::new(NeedsDrop, item);\n         let has_mut_interior = QualifCursor::new(HasMutInterior, item);\n \n-        let indirectly_mutable = MaybeMutBorrowedLocals::new_mut_only(tcx, *body, param_env)\n+        let indirectly_mutable = MaybeMutBorrowedLocals::mut_borrows_only(tcx, *body, param_env)\n             .into_engine(tcx, *body, def_id)\n             .iterate_to_fixpoint()\n             .into_results_cursor(*body);"}, {"sha": "4b3cd2be66d1d6ce62c93b7ba3e5da1292250f22", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15a5382ef1115ff11c1357fd21ab4aa12626efee/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a5382ef1115ff11c1357fd21ab4aa12626efee/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=15a5382ef1115ff11c1357fd21ab4aa12626efee", "patch": "@@ -473,7 +473,7 @@ fn locals_live_across_suspend_points(\n     // Calculate the MIR locals which have been previously\n     // borrowed (even if they are still active).\n     let borrowed_locals_results =\n-        MaybeBorrowedLocals::new().into_engine(tcx, body_ref, def_id).iterate_to_fixpoint();\n+        MaybeBorrowedLocals::all_borrows().into_engine(tcx, body_ref, def_id).iterate_to_fixpoint();\n \n     let mut borrowed_locals_cursor = ResultsCursor::new(body_ref, &borrowed_locals_results);\n "}, {"sha": "6176cf8bc0fa6a78bab50978d57360b893724ff5", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15a5382ef1115ff11c1357fd21ab4aa12626efee/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a5382ef1115ff11c1357fd21ab4aa12626efee/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=15a5382ef1115ff11c1357fd21ab4aa12626efee", "patch": "@@ -45,7 +45,7 @@ impl<'tcx> MirPass<'tcx> for SanityCheck {\n         let flow_def_inits = DefinitelyInitializedPlaces::new(tcx, body, &mdpe)\n             .into_engine(tcx, body, def_id)\n             .iterate_to_fixpoint();\n-        let flow_mut_borrowed = MaybeMutBorrowedLocals::new_mut_only(tcx, body, param_env)\n+        let flow_mut_borrowed = MaybeMutBorrowedLocals::mut_borrows_only(tcx, body, param_env)\n             .into_engine(tcx, body, def_id)\n             .iterate_to_fixpoint();\n "}]}