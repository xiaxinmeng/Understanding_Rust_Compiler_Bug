{"sha": "523b0131618d8e4437a788eb1e3ddca743b3789f", "node_id": "C_kwDOAAsO6NoAKDUyM2IwMTMxNjE4ZDhlNDQzN2E3ODhlYjFlM2RkY2E3NDNiMzc4OWY", "commit": {"author": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-16T06:44:39Z"}, "committer": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-18T10:05:18Z"}, "message": "Implement getting an array of attributes!", "tree": {"sha": "e05363f6586bce7d6a1d7167df9d317fd012adec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e05363f6586bce7d6a1d7167df9d317fd012adec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/523b0131618d8e4437a788eb1e3ddca743b3789f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/523b0131618d8e4437a788eb1e3ddca743b3789f", "html_url": "https://github.com/rust-lang/rust/commit/523b0131618d8e4437a788eb1e3ddca743b3789f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/523b0131618d8e4437a788eb1e3ddca743b3789f/comments", "author": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ee8e7a9b846686148b8797ecc5ae724a6c5a1a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ee8e7a9b846686148b8797ecc5ae724a6c5a1a9", "html_url": "https://github.com/rust-lang/rust/commit/7ee8e7a9b846686148b8797ecc5ae724a6c5a1a9"}], "stats": {"total": 73, "additions": 46, "deletions": 27}, "files": [{"sha": "063dfb874cf1bdadbad100ac70089e8f8ef4a685", "filename": "clippy_lints/src/trailing_zero_sized_array_without_repr_c.rs", "status": "modified", "additions": 46, "deletions": 27, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/523b0131618d8e4437a788eb1e3ddca743b3789f/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523b0131618d8e4437a788eb1e3ddca743b3789f/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs?ref=523b0131618d8e4437a788eb1e3ddca743b3789f", "patch": "@@ -5,6 +5,7 @@ use rustc_errors::Applicability;\n use rustc_hir::{Item, ItemKind, TyKind, VariantData};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -43,9 +44,8 @@ declare_lint_pass!(TrailingZeroSizedArrayWithoutReprC => [TRAILING_ZERO_SIZED_AR\n \n impl<'tcx> LateLintPass<'tcx> for TrailingZeroSizedArrayWithoutReprC {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n-        if is_struct_with_trailing_zero_sized_array(cx, item)\n-        /* && !has_repr_c(cx, item) */\n-        {\n+        dbg!(item.ident);\n+        if is_struct_with_trailing_zero_sized_array(cx, item) && !has_repr_c(cx, item) {\n             // span_lint_and_sugg(\n             //     cx,\n             //     todo!(),\n@@ -61,33 +61,52 @@ impl<'tcx> LateLintPass<'tcx> for TrailingZeroSizedArrayWithoutReprC {\n }\n \n fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) -> bool {\n-    dbg!(item.ident);\n-    if_chain! {\n-        if let ItemKind::Struct(data, _generics) = &item.kind;\n-        if let VariantData::Struct(field_defs, _) = data;\n-        if let Some(last_field) = field_defs.last();\n-        if let TyKind::Array(_, aconst) = last_field.ty.kind;\n-        let aconst_def_id = cx.tcx.hir().body_owner_def_id(aconst.body).to_def_id();\n-        let ty = cx.tcx.type_of(aconst_def_id);\n-        let constant = cx\n-            .tcx\n-            .const_eval_poly(aconst_def_id) // NOTE: maybe const_eval_resolve? seems especially cursed to be using a const expr which resolves to 0 to create a zero-sized array, tho\n-            .ok()\n-            .map(|val| rustc_middle::ty::Const::from_value(cx.tcx, val, ty));\n-        if let Some(Constant::Int(val)) = constant.and_then(miri_to_const);\n-        if val == 0;\n-        then {\n-            eprintln!(\"true\");\n-            true\n-        } else {\n-            // dbg!(aconst);\n-            eprintln!(\"false\");\n-            false\n+    if let ItemKind::Struct(data, _generics) = &item.kind {\n+        if let VariantData::Struct(field_defs, _) = data {\n+            if let Some(last_field) = field_defs.last() {\n+                if let TyKind::Array(_, aconst) = last_field.ty.kind {\n+                    let aconst_def_id = cx.tcx.hir().body_owner_def_id(aconst.body).to_def_id();\n+                    let ty = cx.tcx.type_of(aconst_def_id);\n+                    let constant = cx\n+                        .tcx\n+                        // NOTE: maybe const_eval_resolve? seems especially cursed to be using a const expr which\n+                        // resolves to 0 to create a zero-sized array, tho\n+                        .const_eval_poly(aconst_def_id)\n+                        .ok()\n+                        .map(|val| rustc_middle::ty::Const::from_value(cx.tcx, val, ty));\n+                    if let Some(Constant::Int(val)) = constant.and_then(miri_to_const) {\n+                        if val == 0 {\n+                            eprintln!(\"trailing: true\");\n+                            return true;\n+                        }\n+                    }\n+                }\n+            }\n         }\n     }\n+    // dbg!(aconst);\n+    eprintln!(\"trailing: false\");\n+    false\n }\n \n fn has_repr_c(cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) -> bool {\n-    // todo!()\n-    true\n+    // let hir_id2 = if let Some(body) = cx.enclosing_body {\n+    //     body.hir_id\n+    // } else {\n+    //     todo!();\n+    // };\n+\n+    let hir_id = cx.tcx.hir().local_def_id_to_hir_id(item.def_id);\n+    let attrs = cx.tcx.hir().attrs(hir_id);\n+    // NOTE: Can there ever be more than one `repr` attribute?\n+    // other `repr` syms: repr, repr128, repr_align, repr_align_enum, repr_no_niche, repr_packed,\n+    // repr_simd, repr_transparent\n+\n+    if let Some(repr_attr) = attrs.iter().find(|attr| attr.has_name(sym::repr)) {\n+        eprintln!(\"repr: true\");\n+        true\n+    } else {\n+        eprintln!(\"repr: false\");\n+        false\n+    }\n }"}]}