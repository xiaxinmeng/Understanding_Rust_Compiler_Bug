{"sha": "d0dc9323e18f8e1884b571a3968c13d0cf1d5a1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwZGM5MzIzZTE4ZjhlMTg4NGI1NzFhMzk2OGMxM2QwY2YxZDVhMWU=", "commit": {"author": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2019-12-24T08:29:53Z"}, "committer": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2019-12-25T01:12:08Z"}, "message": "Pass new instance instead of self.instance to simd_shuffle_indices.", "tree": {"sha": "388bf7932060c8c8127a8d73603d44743ef8ea4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/388bf7932060c8c8127a8d73603d44743ef8ea4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0dc9323e18f8e1884b571a3968c13d0cf1d5a1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0dc9323e18f8e1884b571a3968c13d0cf1d5a1e", "html_url": "https://github.com/rust-lang/rust/commit/d0dc9323e18f8e1884b571a3968c13d0cf1d5a1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0dc9323e18f8e1884b571a3968c13d0cf1d5a1e/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "697a38b17a6d8370bb303c5c44b48f2b0424d96d", "url": "https://api.github.com/repos/rust-lang/rust/commits/697a38b17a6d8370bb303c5c44b48f2b0424d96d", "html_url": "https://github.com/rust-lang/rust/commit/697a38b17a6d8370bb303c5c44b48f2b0424d96d"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "690dd460d032379bcda56706a08aa8eaa5ef19c2", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0dc9323e18f8e1884b571a3968c13d0cf1d5a1e/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0dc9323e18f8e1884b571a3968c13d0cf1d5a1e/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=d0dc9323e18f8e1884b571a3968c13d0cf1d5a1e", "patch": "@@ -618,14 +618,14 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                 if let mir::PlaceRef {\n                                     base:\n                                         &PlaceBase::Static(box Static {\n-                                            kind: StaticKind::Promoted(promoted, _),\n+                                            kind: StaticKind::Promoted(promoted, substs),\n                                             ty,\n-                                            def_id: _,\n+                                            def_id,\n                                         }),\n                                     projection: &[],\n                                 } = place.as_ref()\n                                 {\n-                                    let c = bx.tcx().const_eval_promoted(self.instance, promoted);\n+                                    let c = bx.tcx().const_eval_promoted(Instance::new(def_id, self.monomorphize(&substs)), promoted);\n                                     let (llval, ty) = self.simd_shuffle_indices(\n                                         &bx,\n                                         terminator.source_info.span,"}]}