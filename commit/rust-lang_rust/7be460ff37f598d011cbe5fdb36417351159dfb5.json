{"sha": "7be460ff37f598d011cbe5fdb36417351159dfb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZTQ2MGZmMzdmNTk4ZDAxMWNiZTVmZGIzNjQxNzM1MTE1OWRmYjU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-01-29T11:51:41Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-02-16T14:29:22Z"}, "message": "rustc: use FromPrimitive for decoding astencode_tag.", "tree": {"sha": "187494617bc85e946c619622bb714b12710c63fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/187494617bc85e946c619622bb714b12710c63fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7be460ff37f598d011cbe5fdb36417351159dfb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7be460ff37f598d011cbe5fdb36417351159dfb5", "html_url": "https://github.com/rust-lang/rust/commit/7be460ff37f598d011cbe5fdb36417351159dfb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7be460ff37f598d011cbe5fdb36417351159dfb5/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5918d33feff253f1f9d90e5211766d2b319aecc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5918d33feff253f1f9d90e5211766d2b319aecc1", "html_url": "https://github.com/rust-lang/rust/commit/5918d33feff253f1f9d90e5211766d2b319aecc1"}], "stats": {"total": 19, "additions": 4, "deletions": 15}, "files": [{"sha": "1de0c018d42288553a1832be4838f61693f20b3f", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7be460ff37f598d011cbe5fdb36417351159dfb5/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be460ff37f598d011cbe5fdb36417351159dfb5/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=7be460ff37f598d011cbe5fdb36417351159dfb5", "patch": "@@ -12,7 +12,6 @@\n \n pub use self::astencode_tag::*;\n \n-use std::mem;\n use back::svh::Svh;\n \n // EBML enum definitions and utils shared by the encoder and decoder\n@@ -113,7 +112,7 @@ pub const tag_items_data_item_reexport_def_id: uint = 0x39;\n pub const tag_items_data_item_reexport_name: uint = 0x3a;\n \n // used to encode crate_ctxt side tables\n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, PartialEq, FromPrimitive)]\n #[repr(uint)]\n pub enum astencode_tag { // Reserves 0x40 -- 0x5f\n     tag_ast = 0x40,\n@@ -146,17 +145,6 @@ pub enum astencode_tag { // Reserves 0x40 -- 0x5f\n     tag_table_object_cast_map = 0x58,\n }\n \n-static first_astencode_tag: uint = tag_ast as uint;\n-static last_astencode_tag: uint = tag_table_object_cast_map as uint;\n-impl astencode_tag {\n-    pub fn from_uint(value : uint) -> Option<astencode_tag> {\n-        let is_a_tag = first_astencode_tag <= value && value <= last_astencode_tag;\n-        if !is_a_tag { None } else {\n-            Some(unsafe { mem::transmute::<uint, astencode_tag>(value) })\n-        }\n-    }\n-}\n-\n pub const tag_item_trait_item_sort: uint = 0x60;\n \n pub const tag_item_trait_parent_sort: uint = 0x61;"}, {"sha": "edb14f7ed4cc9300245a0848ad88132285628192", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7be460ff37f598d011cbe5fdb36417351159dfb5/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be460ff37f598d011cbe5fdb36417351159dfb5/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=7be460ff37f598d011cbe5fdb36417351159dfb5", "patch": "@@ -38,6 +38,7 @@ use syntax::ptr::P;\n use syntax;\n \n use std::old_io::Seek;\n+use std::num::FromPrimitive;\n use std::rc::Rc;\n \n use rbml::io::SeekableMemWriter;\n@@ -1836,8 +1837,8 @@ fn decode_side_tables(dcx: &DecodeContext,\n         debug!(\">> Side table document with tag 0x{:x} \\\n                 found for id {} (orig {})\",\n                tag, id, id0);\n-\n-        match c::astencode_tag::from_uint(tag) {\n+        let decoded_tag: Option<c::astencode_tag> = FromPrimitive::from_uint(tag);\n+        match decoded_tag {\n             None => {\n                 dcx.tcx.sess.bug(\n                     &format!(\"unknown tag found in side tables: {:x}\","}]}