{"sha": "02edd14cde7d07a303ed2e7d2b233890f02033c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyZWRkMTRjZGU3ZDA3YTMwM2VkMmU3ZDJiMjMzODkwZjAyMDMzYzE=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-18T02:22:50Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-21T00:31:02Z"}, "message": "Convert some `InternedString`s to `Symbols`.\n\nThis avoids the needs for various conversions, and makes the code\nslightly faster, because `Symbol` comparisons and hashing is faster.", "tree": {"sha": "e8c52698d0fd50c206e282b86b8fa2e6109971a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8c52698d0fd50c206e282b86b8fa2e6109971a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02edd14cde7d07a303ed2e7d2b233890f02033c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02edd14cde7d07a303ed2e7d2b233890f02033c1", "html_url": "https://github.com/rust-lang/rust/commit/02edd14cde7d07a303ed2e7d2b233890f02033c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02edd14cde7d07a303ed2e7d2b233890f02033c1/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c23a7aa778b0dfeffbf83b099bdf971242c1e1ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/c23a7aa778b0dfeffbf83b099bdf971242c1e1ac", "html_url": "https://github.com/rust-lang/rust/commit/c23a7aa778b0dfeffbf83b099bdf971242c1e1ac"}], "stats": {"total": 154, "additions": 77, "deletions": 77}, "files": [{"sha": "cd111ab9f949347675b38b37fc3d846a682ee900", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=02edd14cde7d07a303ed2e7d2b233890f02033c1", "patch": "@@ -19,7 +19,7 @@ use crate::ty::query::Providers;\n use crate::util::nodemap::{NodeMap, FxHashSet};\n \n use errors::FatalError;\n-use syntax_pos::{Span, DUMMY_SP, symbol::InternedString, MultiSpan};\n+use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n use syntax::source_map::Spanned;\n use syntax::ast::{self, CrateSugar, Ident, Name, NodeId, AsmDialect};\n use syntax::ast::{Attribute, Label, LitKind, StrStyle, FloatTy, IntTy, UintTy};\n@@ -628,9 +628,9 @@ impl Generics {\n         own_counts\n     }\n \n-    pub fn get_named(&self, name: InternedString) -> Option<&GenericParam> {\n+    pub fn get_named(&self, name: Symbol) -> Option<&GenericParam> {\n         for param in &self.params {\n-            if name == param.name.ident().as_interned_str() {\n+            if name == param.name.ident().name {\n                 return Some(param);\n             }\n         }"}, {"sha": "61e49d32fcdd9cd7c2ff1c9f0695e62dcd0710a6", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=02edd14cde7d07a303ed2e7d2b233890f02033c1", "patch": "@@ -32,7 +32,7 @@ use std::cell::{Cell, Ref, RefCell, RefMut};\n use std::collections::BTreeMap;\n use std::fmt;\n use syntax::ast;\n-use syntax_pos::symbol::InternedString;\n+use syntax_pos::symbol::Symbol;\n use syntax_pos::Span;\n \n use self::combine::CombineFields;\n@@ -392,7 +392,7 @@ pub enum RegionVariableOrigin {\n     Coercion(Span),\n \n     /// Region variables created as the values for early-bound regions\n-    EarlyBoundRegion(Span, InternedString),\n+    EarlyBoundRegion(Span, Symbol),\n \n     /// Region variables created for bound regions\n     /// in a function or method that is called"}, {"sha": "f79a30c7ae8f3cdbbf04631b209c3818cfe2ebac", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=02edd14cde7d07a303ed2e7d2b233890f02033c1", "patch": "@@ -1,4 +1,4 @@\n-use syntax::symbol::InternedString;\n+use syntax::symbol::Symbol;\n use syntax_pos::Span;\n use crate::ty::{self, Ty, TyVid};\n \n@@ -49,7 +49,7 @@ pub enum TypeVariableOriginKind {\n     MiscVariable,\n     NormalizeProjectionType,\n     TypeInference,\n-    TypeParameterDefinition(InternedString),\n+    TypeParameterDefinition(Symbol),\n \n     /// One of the upvars or closure kind parameters in a `ClosureSubsts`\n     /// (before it has been determined)."}, {"sha": "b0b6d971c6087e572ece48f73b846fb4121c80b8", "filename": "src/librustc/infer/unify_key.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Funify_key.rs?ref=02edd14cde7d07a303ed2e7d2b233890f02033c1", "patch": "@@ -3,7 +3,7 @@ use crate::mir::interpret::ConstValue;\n use rustc_data_structures::unify::{NoError, EqUnifyValue, UnifyKey, UnifyValue, UnificationTable};\n use rustc_data_structures::unify::InPlace;\n use syntax_pos::{Span, DUMMY_SP};\n-use syntax::symbol::InternedString;\n+use syntax::symbol::Symbol;\n \n use std::cmp;\n use std::marker::PhantomData;\n@@ -90,7 +90,7 @@ pub struct ConstVariableOrigin {\n pub enum ConstVariableOriginKind {\n     MiscVariable,\n     ConstInference,\n-    ConstParameterDefinition(InternedString),\n+    ConstParameterDefinition(Symbol),\n     SubstitutionPlaceholder,\n }\n "}, {"sha": "ae604b9eb13a620752c16fcb12b60acead89220b", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=02edd14cde7d07a303ed2e7d2b233890f02033c1", "patch": "@@ -406,7 +406,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 },\n                 GenericParamDefKind::Lifetime => continue,\n             };\n-            let name = param.name.as_symbol();\n+            let name = param.name;\n             flags.push((name, Some(value)));\n         }\n "}, {"sha": "e42c3a63541ccdea8ccdc4f16360329452e84d3c", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=02edd14cde7d07a303ed2e7d2b233890f02033c1", "patch": "@@ -19,7 +19,7 @@ use crate::ty::subst::{Subst, InternalSubsts};\n use std::borrow::Cow;\n use std::iter::{self};\n use syntax::ast::{self};\n-use syntax::symbol::InternedString;\n+use syntax::symbol::Symbol;\n use syntax_pos::{Span, DUMMY_SP};\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n@@ -560,7 +560,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         // are implemented\n         let unsized_self_ty: Ty<'tcx> = self.mk_ty_param(\n             ::std::u32::MAX,\n-            InternedString::intern(\"RustaceansAreAwesome\"),\n+            Symbol::intern(\"RustaceansAreAwesome\"),\n         );\n \n         // `Receiver[Self => U]`"}, {"sha": "c1c814f9b0371218a0415b78d2b8479cd394cd4e", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=02edd14cde7d07a303ed2e7d2b233890f02033c1", "patch": "@@ -250,7 +250,7 @@ impl<'tcx> OnUnimplementedFormatString {\n                     Position::ArgumentNamed(s) if s == sym::from_desugaring => (),\n                     // So is `{A}` if A is a type parameter\n                     Position::ArgumentNamed(s) => match generics.params.iter().find(|param| {\n-                        param.name.as_symbol() == s\n+                        param.name == s\n                     }) {\n                         Some(_) => (),\n                         None => {\n@@ -289,7 +289,7 @@ impl<'tcx> OnUnimplementedFormatString {\n                 },\n                 GenericParamDefKind::Lifetime => return None\n             };\n-            let name = param.name.as_symbol();\n+            let name = param.name;\n             Some((name, value))\n         }).collect::<FxHashMap<Symbol, String>>();\n         let empty_string = String::new();"}, {"sha": "2a53dcab8a9fff8a1797c8309032c586860f7276", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=02edd14cde7d07a303ed2e7d2b233890f02033c1", "patch": "@@ -4,7 +4,7 @@ use crate::traits;\n use crate::traits::project::Normalized;\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::{self, Lift, Ty, TyCtxt};\n-use syntax::symbol::InternedString;\n+use syntax::symbol::Symbol;\n \n use std::fmt;\n use std::rc::Rc;\n@@ -261,11 +261,11 @@ impl fmt::Display for traits::QuantifierKind {\n /// for debug output in tests anyway.\n struct BoundNamesCollector {\n     // Just sort by name because `BoundRegion::BrNamed` does not have a `BoundVar` index anyway.\n-    regions: BTreeSet<InternedString>,\n+    regions: BTreeSet<Symbol>,\n \n     // Sort by `BoundVar` index, so usually this should be equivalent to the order given\n     // by the list of type parameters.\n-    types: BTreeMap<u32, InternedString>,\n+    types: BTreeMap<u32, Symbol>,\n \n     binder_index: ty::DebruijnIndex,\n }\n@@ -319,7 +319,7 @@ impl<'tcx> TypeVisitor<'tcx> for BoundNamesCollector {\n                     match bound_ty.kind {\n                         ty::BoundTyKind::Param(name) => name,\n                         ty::BoundTyKind::Anon =>\n-                            InternedString::intern(&format!(\"^{}\", bound_ty.var.as_u32()),\n+                            Symbol::intern(&format!(\"^{}\", bound_ty.var.as_u32()),\n                         ),\n                     }\n                 );\n@@ -340,7 +340,7 @@ impl<'tcx> TypeVisitor<'tcx> for BoundNamesCollector {\n                     }\n \n                     ty::BoundRegion::BrAnon(var) => {\n-                        self.regions.insert(InternedString::intern(&format!(\"'^{}\", var)));\n+                        self.regions.insert(Symbol::intern(&format!(\"'^{}\", var)));\n                     }\n \n                     _ => (),"}, {"sha": "d34e8d687208505f89995c98e4f840d48166ba22", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=02edd14cde7d07a303ed2e7d2b233890f02033c1", "patch": "@@ -72,7 +72,7 @@ use syntax::ast;\n use syntax::attr;\n use syntax::source_map::MultiSpan;\n use syntax::feature_gate;\n-use syntax::symbol::{Symbol, InternedString, kw, sym};\n+use syntax::symbol::{Symbol, kw, sym};\n use syntax_pos::Span;\n \n pub struct AllArenas {\n@@ -949,7 +949,7 @@ impl<'tcx> CommonTypes<'tcx> {\n             f64: mk(Float(ast::FloatTy::F64)),\n             self_param: mk(ty::Param(ty::ParamTy {\n                 index: 0,\n-                name: kw::SelfUpper.as_interned_str(),\n+                name: kw::SelfUpper,\n             })),\n \n             trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),\n@@ -2552,15 +2552,15 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline]\n-    pub fn mk_ty_param(self, index: u32, name: InternedString) -> Ty<'tcx> {\n+    pub fn mk_ty_param(self, index: u32, name: Symbol) -> Ty<'tcx> {\n         self.mk_ty(Param(ParamTy { index, name: name }))\n     }\n \n     #[inline]\n     pub fn mk_const_param(\n         self,\n         index: u32,\n-        name: InternedString,\n+        name: Symbol,\n         ty: Ty<'tcx>\n     ) -> &'tcx Const<'tcx> {\n         self.mk_const(ty::Const {"}, {"sha": "9703ed838532585a31e5f8c48a10dfe1f50e5a58", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=02edd14cde7d07a303ed2e7d2b233890f02033c1", "patch": "@@ -849,7 +849,7 @@ impl ty::EarlyBoundRegion {\n     /// Does this early bound region have a name? Early bound regions normally\n     /// always have names except when using anonymous lifetimes (`'_`).\n     pub fn has_name(&self) -> bool {\n-        self.name != kw::UnderscoreLifetime.as_interned_str()\n+        self.name != kw::UnderscoreLifetime\n     }\n }\n \n@@ -866,7 +866,7 @@ pub enum GenericParamDefKind {\n \n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub struct GenericParamDef {\n-    pub name: InternedString,\n+    pub name: Symbol,\n     pub def_id: DefId,\n     pub index: u32,\n "}, {"sha": "f1042813e5ea13fe06630d391e2cd630f6602587", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=02edd14cde7d07a303ed2e7d2b233890f02033c1", "patch": "@@ -14,7 +14,7 @@ use rustc_apfloat::Float;\n use rustc_target::spec::abi::Abi;\n use syntax::ast;\n use syntax::attr::{SignedInt, UnsignedInt};\n-use syntax::symbol::{kw, InternedString};\n+use syntax::symbol::{kw, Symbol};\n \n use std::cell::Cell;\n use std::fmt::{self, Write as _};\n@@ -992,7 +992,7 @@ pub struct FmtPrinterData<'a, 'tcx, F> {\n     empty_path: bool,\n     in_value: bool,\n \n-    used_region_names: FxHashSet<InternedString>,\n+    used_region_names: FxHashSet<Symbol>,\n     region_index: usize,\n     binder_depth: usize,\n \n@@ -1332,16 +1332,16 @@ impl<F: fmt::Write> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx, F> {\n \n         match *region {\n             ty::ReEarlyBound(ref data) => {\n-                data.name.as_symbol() != kw::Invalid &&\n-                data.name.as_symbol() != kw::UnderscoreLifetime\n+                data.name != kw::Invalid &&\n+                data.name != kw::UnderscoreLifetime\n             }\n \n             ty::ReLateBound(_, br) |\n             ty::ReFree(ty::FreeRegion { bound_region: br, .. }) |\n             ty::RePlaceholder(ty::Placeholder { name: br, .. }) => {\n                 if let ty::BrNamed(_, name) = br {\n-                    if name.as_symbol() != kw::Invalid &&\n-                       name.as_symbol() != kw::UnderscoreLifetime {\n+                    if name != kw::Invalid &&\n+                       name != kw::UnderscoreLifetime {\n                         return true;\n                     }\n                 }\n@@ -1397,7 +1397,7 @@ impl<F: fmt::Write> FmtPrinter<'_, '_, F> {\n         // `explain_region()` or `note_and_explain_region()`.\n         match *region {\n             ty::ReEarlyBound(ref data) => {\n-                if data.name.as_symbol() != kw::Invalid {\n+                if data.name != kw::Invalid {\n                     p!(write(\"{}\", data.name));\n                     return Ok(self);\n                 }\n@@ -1406,8 +1406,8 @@ impl<F: fmt::Write> FmtPrinter<'_, '_, F> {\n             ty::ReFree(ty::FreeRegion { bound_region: br, .. }) |\n             ty::RePlaceholder(ty::Placeholder { name: br, .. }) => {\n                 if let ty::BrNamed(_, name) = br {\n-                    if name.as_symbol() != kw::Invalid &&\n-                       name.as_symbol() != kw::UnderscoreLifetime {\n+                    if name != kw::Invalid &&\n+                       name != kw::UnderscoreLifetime {\n                         p!(write(\"{}\", name));\n                         return Ok(self);\n                     }\n@@ -1474,11 +1474,11 @@ impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n     where\n         T: Print<'tcx, Self, Output = Self, Error = fmt::Error> + TypeFoldable<'tcx>,\n     {\n-        fn name_by_region_index(index: usize) -> InternedString {\n+        fn name_by_region_index(index: usize) -> Symbol {\n             match index {\n-                0 => InternedString::intern(\"'r\"),\n-                1 => InternedString::intern(\"'s\"),\n-                i => InternedString::intern(&format!(\"'t{}\", i-2)),\n+                0 => Symbol::intern(\"'r\"),\n+                1 => Symbol::intern(\"'s\"),\n+                i => Symbol::intern(&format!(\"'t{}\", i-2)),\n             }\n         }\n \n@@ -1541,7 +1541,7 @@ impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n         where T: TypeFoldable<'tcx>\n     {\n \n-        struct LateBoundRegionNameCollector<'a>(&'a mut FxHashSet<InternedString>);\n+        struct LateBoundRegionNameCollector<'a>(&'a mut FxHashSet<Symbol>);\n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for LateBoundRegionNameCollector<'_> {\n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n                 match *r {"}, {"sha": "f4de0cd7b6b16ccd319df3ea442416de9a8b4291", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=02edd14cde7d07a303ed2e7d2b233890f02033c1", "patch": "@@ -24,7 +24,7 @@ use std::marker::PhantomData;\n use std::ops::Range;\n use rustc_target::spec::abi;\n use syntax::ast::{self, Ident};\n-use syntax::symbol::{kw, InternedString};\n+use syntax::symbol::{kw, Symbol};\n \n use self::InferTy::*;\n use self::TyKind::*;\n@@ -55,7 +55,7 @@ pub enum BoundRegion {\n     ///\n     /// The `DefId` is needed to distinguish free regions in\n     /// the event of shadowing.\n-    BrNamed(DefId, InternedString),\n+    BrNamed(DefId, Symbol),\n \n     /// Anonymous region for the implicit env pointer parameter\n     /// to a closure\n@@ -1123,16 +1123,16 @@ pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<FnSig<'tcx>>>;\n          Hash, RustcEncodable, RustcDecodable, HashStable)]\n pub struct ParamTy {\n     pub index: u32,\n-    pub name: InternedString,\n+    pub name: Symbol,\n }\n \n impl<'tcx> ParamTy {\n-    pub fn new(index: u32, name: InternedString) -> ParamTy {\n+    pub fn new(index: u32, name: Symbol) -> ParamTy {\n         ParamTy { index, name: name }\n     }\n \n     pub fn for_self() -> ParamTy {\n-        ParamTy::new(0, kw::SelfUpper.as_interned_str())\n+        ParamTy::new(0, kw::SelfUpper)\n     }\n \n     pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {\n@@ -1148,11 +1148,11 @@ impl<'tcx> ParamTy {\n          Eq, PartialEq, Ord, PartialOrd, HashStable)]\n pub struct ParamConst {\n     pub index: u32,\n-    pub name: InternedString,\n+    pub name: Symbol,\n }\n \n impl<'tcx> ParamConst {\n-    pub fn new(index: u32, name: InternedString) -> ParamConst {\n+    pub fn new(index: u32, name: Symbol) -> ParamConst {\n         ParamConst { index, name }\n     }\n \n@@ -1325,7 +1325,7 @@ impl<'tcx> rustc_serialize::UseSpecializedDecodable for Region<'tcx> {}\n pub struct EarlyBoundRegion {\n     pub def_id: DefId,\n     pub index: u32,\n-    pub name: InternedString,\n+    pub name: Symbol,\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n@@ -1389,7 +1389,7 @@ pub struct BoundTy {\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub enum BoundTyKind {\n     Anon,\n-    Param(InternedString),\n+    Param(Symbol),\n }\n \n impl_stable_hash_for!(struct BoundTy { var, kind });"}, {"sha": "d0bfbe051483b63afd43b60deb9b310afd277824", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=02edd14cde7d07a303ed2e7d2b233890f02033c1", "patch": "@@ -46,7 +46,7 @@ use std::iter;\n use std::ptr;\n use std::path::{Path, PathBuf};\n use syntax::ast;\n-use syntax::symbol::{Interner, InternedString};\n+use syntax::symbol::{Interner, Symbol};\n use syntax_pos::{self, Span, FileName};\n \n impl PartialEq for llvm::Metadata {\n@@ -2127,7 +2127,7 @@ fn compute_type_parameters(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>) -> Option<&'\n \n     fn get_parameter_names(cx: &CodegenCx<'_, '_>,\n                            generics: &ty::Generics)\n-                           -> Vec<InternedString> {\n+                           -> Vec<Symbol> {\n         let mut names = generics.parent.map_or(vec![], |def_id| {\n             get_parameter_names(cx, cx.tcx.generics_of(def_id))\n         });"}, {"sha": "5b59f4c28de205248fe789f0e312daf5bd54ff74", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=02edd14cde7d07a303ed2e7d2b233890f02033c1", "patch": "@@ -36,7 +36,7 @@ use std::ffi::{CStr, CString};\n \n use syntax_pos::{self, Span, Pos};\n use syntax::ast;\n-use syntax::symbol::InternedString;\n+use syntax::symbol::Symbol;\n use rustc::ty::layout::{self, LayoutOf, HasTyCtxt};\n use rustc_codegen_ssa::traits::*;\n \n@@ -490,7 +490,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n \n         fn get_parameter_names(cx: &CodegenCx<'_, '_>,\n                                generics: &ty::Generics)\n-                               -> Vec<InternedString> {\n+                               -> Vec<Symbol> {\n             let mut names = generics.parent.map_or(vec![], |def_id| {\n                 get_parameter_names(cx, cx.tcx.generics_of(def_id))\n             });"}, {"sha": "d6e84940291a575627377d7e88106d43afcb55b3", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=02edd14cde7d07a303ed2e7d2b233890f02033c1", "patch": "@@ -18,14 +18,14 @@ use rustc::ty::print::RegionHighlightMode;\n use rustc_errors::DiagnosticBuilder;\n use syntax::symbol::kw;\n use rustc_data_structures::fx::FxHashMap;\n-use syntax_pos::{Span, symbol::InternedString};\n+use syntax_pos::{Span, symbol::Symbol};\n \n /// A name for a particular region used in emitting diagnostics. This name could be a generated\n /// name like `'1`, a name used by the user like `'a`, or a name like `'static`.\n #[derive(Debug, Clone)]\n crate struct RegionName {\n     /// The name of the region (interned).\n-    crate name: InternedString,\n+    crate name: Symbol,\n     /// Where the region comes from.\n     crate source: RegionNameSource,\n }\n@@ -109,7 +109,7 @@ impl RegionName {\n     }\n \n     #[allow(dead_code)]\n-    crate fn name(&self) -> InternedString {\n+    crate fn name(&self) -> Symbol {\n         self.name\n     }\n \n@@ -273,7 +273,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             }\n \n             ty::ReStatic => Some(RegionName {\n-                name: kw::StaticLifetime.as_interned_str(),\n+                name: kw::StaticLifetime,\n                 source: RegionNameSource::Static\n             }),\n \n@@ -360,7 +360,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         &self,\n         tcx: TyCtxt<'tcx>,\n         error_region: &RegionKind,\n-        name: InternedString,\n+        name: Symbol,\n     ) -> Span {\n         let scope = error_region.free_region_binding_scope(tcx);\n         let node = tcx.hir().as_local_hir_id(scope).unwrap_or(hir::DUMMY_HIR_ID);\n@@ -837,10 +837,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     }\n \n     /// Creates a synthetic region named `'1`, incrementing the counter.\n-    fn synthesize_region_name(&self, renctx: &mut RegionErrorNamingCtx) -> InternedString {\n+    fn synthesize_region_name(&self, renctx: &mut RegionErrorNamingCtx) -> Symbol {\n         let c = renctx.counter;\n         renctx.counter += 1;\n \n-        InternedString::intern(&format!(\"'{:?}\", c))\n+        Symbol::intern(&format!(\"'{:?}\", c))\n     }\n }"}, {"sha": "b39aa483a6a6d0d745d9385949d8caf5d3fcac94", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=02edd14cde7d07a303ed2e7d2b233890f02033c1", "patch": "@@ -790,7 +790,7 @@ fn for_each_late_bound_region_defined_on<'tcx>(\n                 owner: fn_def_id.index,\n                 local_id: *late_bound,\n             };\n-            let name = tcx.hir().name(hir_id).as_interned_str();\n+            let name = tcx.hir().name(hir_id);\n             let region_def_id = tcx.hir().local_def_id(hir_id);\n             let liberated_region = tcx.mk_region(ty::ReFree(ty::FreeRegion {\n                 scope: fn_def_id,"}, {"sha": "7bb96661bb746a9c462a8faf414b28172d320fb4", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=02edd14cde7d07a303ed2e7d2b233890f02033c1", "patch": "@@ -908,7 +908,7 @@ fn convert_path_expr<'a, 'tcx>(\n             let generics = cx.tcx.generics_of(item_def_id);\n             let local_def_id = cx.tcx.hir().local_def_id(hir_id);\n             let index = generics.param_def_id_to_index[&local_def_id];\n-            let name = cx.tcx.hir().name(hir_id).as_interned_str();\n+            let name = cx.tcx.hir().name(hir_id);\n             let val = ConstValue::Param(ty::ParamConst::new(index, name));\n             ExprKind::Literal {\n                 literal: cx.tcx.mk_const("}, {"sha": "f2502ab3648f5e08a0f16f9a5cda2d90124d1409", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=02edd14cde7d07a303ed2e7d2b233890f02033c1", "patch": "@@ -131,7 +131,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     {\n         let tcx = self.tcx();\n         let lifetime_name = |def_id| {\n-            tcx.hir().name(tcx.hir().as_local_hir_id(def_id).unwrap()).as_interned_str()\n+            tcx.hir().name(tcx.hir().as_local_hir_id(def_id).unwrap())\n         };\n \n         let r = match tcx.named_region(lifetime.hir_id) {\n@@ -2023,7 +2023,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 let item_def_id = tcx.hir().local_def_id(item_id);\n                 let generics = tcx.generics_of(item_def_id);\n                 let index = generics.param_def_id_to_index[&def_id];\n-                tcx.mk_ty_param(index, tcx.hir().name(hir_id).as_interned_str())\n+                tcx.mk_ty_param(index, tcx.hir().name(hir_id))\n             }\n             Res::SelfTy(Some(_), None) => {\n                 // `Self` in trait or type alias.\n@@ -2204,7 +2204,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             let item_def_id = tcx.hir().local_def_id(item_id);\n             let generics = tcx.generics_of(item_def_id);\n             let index = generics.param_def_id_to_index[&tcx.hir().local_def_id(hir_id)];\n-            let name = tcx.hir().name(hir_id).as_interned_str();\n+            let name = tcx.hir().name(hir_id);\n             const_.val = ConstValue::Param(ty::ParamConst::new(index, name));\n         }\n "}, {"sha": "72a0fe887b9646fc8df95be922e43fbd55bc906e", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=02edd14cde7d07a303ed2e7d2b233890f02033c1", "patch": "@@ -7,7 +7,7 @@ use rustc::ty::subst::Subst;\n use crate::require_same_types;\n \n use rustc_target::spec::abi::Abi;\n-use syntax::symbol::InternedString;\n+use syntax::symbol::Symbol;\n \n use rustc::hir;\n \n@@ -80,7 +80,7 @@ pub fn intrinsic_operation_unsafety(intrinsic: &str) -> hir::Unsafety {\n /// Remember to add all intrinsics here, in librustc_codegen_llvm/intrinsic.rs,\n /// and in libcore/intrinsics.rs\n pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n-    let param = |n| tcx.mk_ty_param(n, InternedString::intern(&format!(\"P{}\", n)));\n+    let param = |n| tcx.mk_ty_param(n, Symbol::intern(&format!(\"P{}\", n)));\n     let name = it.ident.as_str();\n \n     let mk_va_list_ty = |mutbl| {\n@@ -387,7 +387,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n /// Type-check `extern \"platform-intrinsic\" { ... }` functions.\n pub fn check_platform_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n     let param = |n| {\n-        let name = InternedString::intern(&format!(\"P{}\", n));\n+        let name = Symbol::intern(&format!(\"P{}\", n));\n         tcx.mk_ty_param(n, name)\n     };\n "}, {"sha": "d4c64512f984b901ac892252e6b2b71bc7b034ab", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=02edd14cde7d07a303ed2e7d2b233890f02033c1", "patch": "@@ -36,7 +36,7 @@ use syntax::ast;\n use syntax::ast::{Ident, MetaItemKind};\n use syntax::attr::{InlineAttr, OptimizeAttr, list_contains_name, mark_used};\n use syntax::feature_gate;\n-use syntax::symbol::{InternedString, kw, Symbol, sym};\n+use syntax::symbol::{kw, Symbol, sym};\n use syntax_pos::{Span, DUMMY_SP};\n \n use rustc::hir::def::{CtorKind, Res, DefKind};\n@@ -265,7 +265,7 @@ fn type_param_predicates(\n     let param_owner_def_id = tcx.hir().local_def_id(param_owner);\n     let generics = tcx.generics_of(param_owner_def_id);\n     let index = generics.param_def_id_to_index[&def_id];\n-    let ty = tcx.mk_ty_param(index, tcx.hir().ty_param_name(param_id).as_interned_str());\n+    let ty = tcx.mk_ty_param(index, tcx.hir().ty_param_name(param_id));\n \n     // Don't look for bounds where the type parameter isn't in scope.\n     let parent = if item_def_id == param_owner_def_id {\n@@ -961,7 +961,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n \n                     opt_self = Some(ty::GenericParamDef {\n                         index: 0,\n-                        name: kw::SelfUpper.as_interned_str(),\n+                        name: kw::SelfUpper,\n                         def_id: tcx.hir().local_def_id(param_id),\n                         pure_wrt_drop: false,\n                         kind: ty::GenericParamDefKind::Type {\n@@ -1006,7 +1006,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n         early_lifetimes\n             .enumerate()\n             .map(|(i, param)| ty::GenericParamDef {\n-                name: param.name.ident().as_interned_str(),\n+                name: param.name.ident().name,\n                 index: own_start + i as u32,\n                 def_id: tcx.hir().local_def_id(param.hir_id),\n                 pure_wrt_drop: param.pure_wrt_drop,\n@@ -1060,7 +1060,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n \n                 let param_def = ty::GenericParamDef {\n                     index: type_start + i as u32,\n-                    name: param.name.ident().as_interned_str(),\n+                    name: param.name.ident().name,\n                     def_id: tcx.hir().local_def_id(param.hir_id),\n                     pure_wrt_drop: param.pure_wrt_drop,\n                     kind,\n@@ -1090,7 +1090,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n                 .enumerate()\n                 .map(|(i, &arg)| ty::GenericParamDef {\n                     index: type_start + i as u32,\n-                    name: InternedString::intern(arg),\n+                    name: Symbol::intern(arg),\n                     def_id,\n                     pure_wrt_drop: false,\n                     kind: ty::GenericParamDefKind::Type {\n@@ -1105,7 +1105,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n             params.extend(upvars.iter().zip((dummy_args.len() as u32)..).map(|(_, i)| {\n                 ty::GenericParamDef {\n                     index: type_start + i,\n-                    name: InternedString::intern(\"<upvar>\"),\n+                    name: Symbol::intern(\"<upvar>\"),\n                     def_id,\n                     pure_wrt_drop: false,\n                     kind: ty::GenericParamDefKind::Type {\n@@ -2198,7 +2198,7 @@ fn explicit_predicates_of(\n         let region = tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n             def_id: tcx.hir().local_def_id(param.hir_id),\n             index,\n-            name: param.name.ident().as_interned_str(),\n+            name: param.name.ident().name,\n         }));\n         index += 1;\n \n@@ -2221,7 +2221,7 @@ fn explicit_predicates_of(\n     // type parameter (e.g., `<T: Foo>`).\n     for param in &ast_generics.params {\n         if let GenericParamKind::Type { .. } = param.kind {\n-            let name = param.name.ident().as_interned_str();\n+            let name = param.name.ident().name;\n             let param_ty = ty::ParamTy::new(index, name).to_ty(tcx);\n             index += 1;\n "}, {"sha": "3f8fca53cd4231700fcbedcab4b49c2a86ad61db", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02edd14cde7d07a303ed2e7d2b233890f02033c1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=02edd14cde7d07a303ed2e7d2b233890f02033c1", "patch": "@@ -1682,7 +1682,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n             .filter_map(|param| match param.kind {\n                 ty::GenericParamDefKind::Lifetime => None,\n                 ty::GenericParamDefKind::Type { synthetic, .. } => {\n-                    if param.name.as_symbol() == kw::SelfUpper {\n+                    if param.name == kw::SelfUpper {\n                         assert_eq!(param.index, 0);\n                         return None;\n                     }"}]}