{"sha": "b73f801cc11ccddfe973112a040807cd164893f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3M2Y4MDFjYzExY2NkZGZlOTczMTEyYTA0MDgwN2NkMTY0ODkzZjg=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-09-14T16:55:33Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-09-15T20:38:41Z"}, "message": "int/uint parse_buf => parse_bytes (#3444)", "tree": {"sha": "1c31060d9d5ee0fc9ecdfa3e801226d3aac52211", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c31060d9d5ee0fc9ecdfa3e801226d3aac52211"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b73f801cc11ccddfe973112a040807cd164893f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b73f801cc11ccddfe973112a040807cd164893f8", "html_url": "https://github.com/rust-lang/rust/commit/b73f801cc11ccddfe973112a040807cd164893f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b73f801cc11ccddfe973112a040807cd164893f8/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "651e63cc5c2b90204e8cd9d263da567fe2a66fbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/651e63cc5c2b90204e8cd9d263da567fe2a66fbf", "html_url": "https://github.com/rust-lang/rust/commit/651e63cc5c2b90204e8cd9d263da567fe2a66fbf"}], "stats": {"total": 92, "additions": 46, "deletions": 46}, "files": [{"sha": "664f2940ec7869185b52d82fd832a12ab393f918", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b73f801cc11ccddfe973112a040807cd164893f8/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73f801cc11ccddfe973112a040807cd164893f8/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=b73f801cc11ccddfe973112a040807cd164893f8", "patch": "@@ -16,7 +16,7 @@ export is_nonpositive, is_nonnegative;\n export range;\n export compl;\n export abs;\n-export parse_buf, from_str, to_str, to_str_bytes, str;\n+export parse_bytes, from_str, to_str, to_str_bytes, str;\n export num, ord, eq, times, timesi;\n export bits, bytes;\n \n@@ -137,7 +137,7 @@ impl T: iter::TimesIx {\n  * * buf - A byte buffer\n  * * radix - The base of the number\n  */\n-fn parse_buf(buf: &[u8], radix: uint) -> Option<T> {\n+fn parse_bytes(buf: &[u8], radix: uint) -> Option<T> {\n     if vec::len(buf) == 0u { return None; }\n     let mut i = vec::len(buf) - 1u;\n     let mut start = 0u;\n@@ -160,7 +160,7 @@ fn parse_buf(buf: &[u8], radix: uint) -> Option<T> {\n }\n \n /// Parse a string to an int\n-fn from_str(s: &str) -> Option<T> { parse_buf(str::to_bytes(s), 10u) }\n+fn from_str(s: &str) -> Option<T> { parse_bytes(str::to_bytes(s), 10u) }\n \n impl T : FromStr {\n     static fn from_str(s: &str) -> Option<T> { from_str(s) }\n@@ -209,28 +209,28 @@ fn test_from_str() {\n // FIXME: Has alignment issues on windows and 32-bit linux (#2609)\n #[test]\n #[ignore]\n-fn test_parse_buf() {\n+fn test_parse_bytes() {\n     use str::to_bytes;\n-    assert parse_buf(to_bytes(~\"123\"), 10u) == Some(123 as T);\n-    assert parse_buf(to_bytes(~\"1001\"), 2u) == Some(9 as T);\n-    assert parse_buf(to_bytes(~\"123\"), 8u) == Some(83 as T);\n-    assert parse_buf(to_bytes(~\"123\"), 16u) == Some(291 as T);\n-    assert parse_buf(to_bytes(~\"ffff\"), 16u) == Some(65535 as T);\n-    assert parse_buf(to_bytes(~\"FFFF\"), 16u) == Some(65535 as T);\n-    assert parse_buf(to_bytes(~\"z\"), 36u) == Some(35 as T);\n-    assert parse_buf(to_bytes(~\"Z\"), 36u) == Some(35 as T);\n-\n-    assert parse_buf(to_bytes(~\"-123\"), 10u) == Some(-123 as T);\n-    assert parse_buf(to_bytes(~\"-1001\"), 2u) == Some(-9 as T);\n-    assert parse_buf(to_bytes(~\"-123\"), 8u) == Some(-83 as T);\n-    assert parse_buf(to_bytes(~\"-123\"), 16u) == Some(-291 as T);\n-    assert parse_buf(to_bytes(~\"-ffff\"), 16u) == Some(-65535 as T);\n-    assert parse_buf(to_bytes(~\"-FFFF\"), 16u) == Some(-65535 as T);\n-    assert parse_buf(to_bytes(~\"-z\"), 36u) == Some(-35 as T);\n-    assert parse_buf(to_bytes(~\"-Z\"), 36u) == Some(-35 as T);\n-\n-    assert parse_buf(to_bytes(~\"Z\"), 35u).is_none();\n-    assert parse_buf(to_bytes(~\"-9\"), 2u).is_none();\n+    assert parse_bytes(to_bytes(~\"123\"), 10u) == Some(123 as T);\n+    assert parse_bytes(to_bytes(~\"1001\"), 2u) == Some(9 as T);\n+    assert parse_bytes(to_bytes(~\"123\"), 8u) == Some(83 as T);\n+    assert parse_bytes(to_bytes(~\"123\"), 16u) == Some(291 as T);\n+    assert parse_bytes(to_bytes(~\"ffff\"), 16u) == Some(65535 as T);\n+    assert parse_bytes(to_bytes(~\"FFFF\"), 16u) == Some(65535 as T);\n+    assert parse_bytes(to_bytes(~\"z\"), 36u) == Some(35 as T);\n+    assert parse_bytes(to_bytes(~\"Z\"), 36u) == Some(35 as T);\n+\n+    assert parse_bytes(to_bytes(~\"-123\"), 10u) == Some(-123 as T);\n+    assert parse_bytes(to_bytes(~\"-1001\"), 2u) == Some(-9 as T);\n+    assert parse_bytes(to_bytes(~\"-123\"), 8u) == Some(-83 as T);\n+    assert parse_bytes(to_bytes(~\"-123\"), 16u) == Some(-291 as T);\n+    assert parse_bytes(to_bytes(~\"-ffff\"), 16u) == Some(-65535 as T);\n+    assert parse_bytes(to_bytes(~\"-FFFF\"), 16u) == Some(-65535 as T);\n+    assert parse_bytes(to_bytes(~\"-z\"), 36u) == Some(-35 as T);\n+    assert parse_bytes(to_bytes(~\"-Z\"), 36u) == Some(-35 as T);\n+\n+    assert parse_bytes(to_bytes(~\"Z\"), 35u).is_none();\n+    assert parse_bytes(to_bytes(~\"-9\"), 2u).is_none();\n }\n \n #[test]"}, {"sha": "cdd8ab11658eefc17944731d64b1e98ca73a6735", "filename": "src/libcore/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b73f801cc11ccddfe973112a040807cd164893f8/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73f801cc11ccddfe973112a040807cd164893f8/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=b73f801cc11ccddfe973112a040807cd164893f8", "patch": "@@ -94,7 +94,7 @@ pure fn to_either<T: Copy, U: Copy>(res: Result<U, T>) -> Either<T, U> {\n  * Example:\n  *\n  *     let res = chain(read_file(file)) { |buf|\n- *         ok(parse_buf(buf))\n+ *         ok(parse_bytes(buf))\n  *     }\n  */\n fn chain<T, U: Copy, V: Copy>(res: Result<T, V>, op: fn(T) -> Result<U, V>)\n@@ -170,7 +170,7 @@ fn iter_err<T, E>(res: Result<T, E>, f: fn(E)) {\n  * Example:\n  *\n  *     let res = map(read_file(file)) { |buf|\n- *         parse_buf(buf)\n+ *         parse_bytes(buf)\n  *     }\n  */\n fn map<T, E: Copy, U: Copy>(res: Result<T, E>, op: fn(T) -> U)"}, {"sha": "02faf9255efaeba904b5a194448335defe2e4e20", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b73f801cc11ccddfe973112a040807cd164893f8/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73f801cc11ccddfe973112a040807cd164893f8/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=b73f801cc11ccddfe973112a040807cd164893f8", "patch": "@@ -15,7 +15,7 @@ export is_nonpositive, is_nonnegative;\n export range;\n export compl;\n export to_str, to_str_bytes;\n-export from_str, from_str_radix, str, parse_buf;\n+export from_str, from_str_radix, str, parse_bytes;\n export num, ord, eq, times, timesi;\n export bits, bytes;\n \n@@ -126,7 +126,7 @@ impl T: iter::TimesIx {\n  *\n  * `buf` must not be empty\n  */\n-fn parse_buf(buf: &[const u8], radix: uint) -> Option<T> {\n+fn parse_bytes(buf: &[const u8], radix: uint) -> Option<T> {\n     if vec::len(buf) == 0u { return None; }\n     let mut i = vec::len(buf) - 1u;\n     let mut power = 1u as T;\n@@ -143,7 +143,7 @@ fn parse_buf(buf: &[const u8], radix: uint) -> Option<T> {\n }\n \n /// Parse a string to an int\n-fn from_str(s: &str) -> Option<T> { parse_buf(str::to_bytes(s), 10u) }\n+fn from_str(s: &str) -> Option<T> { parse_bytes(str::to_bytes(s), 10u) }\n \n impl T : FromStr {\n     static fn from_str(s: &str) -> Option<T> { from_str(s) }\n@@ -275,17 +275,17 @@ fn test_from_str() {\n \n #[test]\n #[ignore]\n-fn test_parse_buf() {\n+fn test_parse_bytes() {\n     use str::to_bytes;\n-    assert parse_buf(to_bytes(~\"123\"), 10u) == Some(123u as T);\n-    assert parse_buf(to_bytes(~\"1001\"), 2u) == Some(9u as T);\n-    assert parse_buf(to_bytes(~\"123\"), 8u) == Some(83u as T);\n-    assert parse_buf(to_bytes(~\"123\"), 16u) == Some(291u as T);\n-    assert parse_buf(to_bytes(~\"ffff\"), 16u) == Some(65535u as T);\n-    assert parse_buf(to_bytes(~\"z\"), 36u) == Some(35u as T);\n-\n-    assert parse_buf(to_bytes(~\"Z\"), 10u).is_none();\n-    assert parse_buf(to_bytes(~\"_\"), 2u).is_none();\n+    assert parse_bytes(to_bytes(~\"123\"), 10u) == Some(123u as T);\n+    assert parse_bytes(to_bytes(~\"1001\"), 2u) == Some(9u as T);\n+    assert parse_bytes(to_bytes(~\"123\"), 8u) == Some(83u as T);\n+    assert parse_bytes(to_bytes(~\"123\"), 16u) == Some(291u as T);\n+    assert parse_bytes(to_bytes(~\"ffff\"), 16u) == Some(65535u as T);\n+    assert parse_bytes(to_bytes(~\"z\"), 36u) == Some(35u as T);\n+\n+    assert parse_bytes(to_bytes(~\"Z\"), 10u).is_none();\n+    assert parse_bytes(to_bytes(~\"_\"), 2u).is_none();\n }\n \n #[test]"}, {"sha": "b8f11adf2e1463a27c13fd66d8d85afc49d6973a", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b73f801cc11ccddfe973112a040807cd164893f8/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73f801cc11ccddfe973112a040807cd164893f8/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=b73f801cc11ccddfe973112a040807cd164893f8", "patch": "@@ -116,7 +116,7 @@ fn decode_inner(s: &str, full_url: bool) -> ~str {\n             match rdr.read_char() {\n               '%' => {\n                 let bytes = rdr.read_bytes(2u);\n-                let ch = uint::parse_buf(bytes, 16u).get() as char;\n+                let ch = uint::parse_bytes(bytes, 16u).get() as char;\n \n                 if full_url {\n                     // Only decode some characters:\n@@ -241,7 +241,7 @@ fn decode_form_urlencoded(s: ~[u8]) ->\n               ch => {\n                 let ch = match ch {\n                   '%' => {\n-                    uint::parse_buf(rdr.read_bytes(2u), 16u).get() as char\n+                    uint::parse_bytes(rdr.read_bytes(2u), 16u).get() as char\n                   }\n                   '+' => ' ',\n                   ch => ch"}, {"sha": "a0b6912cd6dd7cec54a4f3c49c1f142bb4a4213d", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b73f801cc11ccddfe973112a040807cd164893f8/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73f801cc11ccddfe973112a040807cd164893f8/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=b73f801cc11ccddfe973112a040807cd164893f8", "patch": "@@ -205,7 +205,7 @@ fn field_mutability(d: ebml::Doc) -> ast::class_mutability {\n \n fn variant_disr_val(d: ebml::Doc) -> Option<int> {\n     do option::chain(ebml::maybe_get_doc(d, tag_disr_val)) |val_doc| {\n-        int::parse_buf(ebml::doc_data(val_doc), 10u)\n+        int::parse_bytes(ebml::doc_data(val_doc), 10u)\n     }\n }\n "}, {"sha": "5cf24aef558e68600ce933d1b1a6769c26b61b69", "filename": "src/rustc/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b73f801cc11ccddfe973112a040807cd164893f8/src%2Frustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73f801cc11ccddfe973112a040807cd164893f8/src%2Frustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftydecode.rs?ref=b73f801cc11ccddfe973112a040807cd164893f8", "patch": "@@ -440,12 +440,12 @@ fn parse_def_id(buf: &[u8]) -> ast::def_id {\n     let crate_part = vec::view(buf, 0u, colon_idx);\n     let def_part = vec::view(buf, colon_idx + 1u, len);\n \n-    let crate_num = match uint::parse_buf(crate_part, 10u) {\n+    let crate_num = match uint::parse_bytes(crate_part, 10u) {\n        Some(cn) => cn as int,\n        None => fail (fmt!(\"internal error: parse_def_id: crate number \\\n                                expected, but found %?\", crate_part))\n     };\n-    let def_num = match uint::parse_buf(def_part, 10u) {\n+    let def_num = match uint::parse_bytes(def_part, 10u) {\n        Some(dn) => dn as int,\n        None => fail (fmt!(\"internal error: parse_def_id: id expected, but \\\n                                found %?\", def_part))"}, {"sha": "e929690ccfa9e66caef1f40e88b19b70311805a7", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b73f801cc11ccddfe973112a040807cd164893f8/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73f801cc11ccddfe973112a040807cd164893f8/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=b73f801cc11ccddfe973112a040807cd164893f8", "patch": "@@ -93,8 +93,8 @@ fn main(args: ~[~str]) {\n     if opts.stress {\n         stress(2);\n     } else {\n-        let max = option::get(uint::parse_buf(str::to_bytes(args[1]),\n-                                              10u)) as int;\n+        let max = option::get(uint::parse_bytes(str::to_bytes(args[1]),\n+                                                10u)) as int;\n \n         let num_trials = 10;\n "}]}