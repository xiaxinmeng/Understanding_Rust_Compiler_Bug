{"sha": "77ed4974569fbe71c0ba76327b5e2a34a515ed73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZWQ0OTc0NTY5ZmJlNzFjMGJhNzYzMjdiNWUyYTM0YTUxNWVkNzM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-03T00:34:13Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-06T21:49:00Z"}, "message": "Tests", "tree": {"sha": "5da0b0c3f57f683d9883d6255f44f3b2e7f6b55b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5da0b0c3f57f683d9883d6255f44f3b2e7f6b55b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77ed4974569fbe71c0ba76327b5e2a34a515ed73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77ed4974569fbe71c0ba76327b5e2a34a515ed73", "html_url": "https://github.com/rust-lang/rust/commit/77ed4974569fbe71c0ba76327b5e2a34a515ed73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77ed4974569fbe71c0ba76327b5e2a34a515ed73/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e970db37a9bba47bd46ff2755b042f830641e5f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e970db37a9bba47bd46ff2755b042f830641e5f1", "html_url": "https://github.com/rust-lang/rust/commit/e970db37a9bba47bd46ff2755b042f830641e5f1"}], "stats": {"total": 103, "additions": 52, "deletions": 51}, "files": [{"sha": "9a6152dc13c9d4429ef36f97fd12ac65b02be735", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=77ed4974569fbe71c0ba76327b5e2a34a515ed73", "patch": "@@ -130,7 +130,7 @@ impl<'a, W: Writer> RepeatFasta<'a, W> {\n         copy_memory(buf.as_mut_slice(), alu);\n         let buf_len = buf.len();\n         copy_memory(buf.slice_mut(alu_len, buf_len),\n-                    alu.index(&(0..LINE_LEN)));\n+                    &alu[0..LINE_LEN]);\n \n         let mut pos = 0;\n         let mut bytes;\n@@ -206,7 +206,7 @@ impl<'a, W: Writer> RandomFasta<'a, W> {\n         for i in range(0u, chars_left) {\n             buf[i] = self.nextc();\n         }\n-        self.out.write(buf.index(&(0..chars_left)))\n+        self.out.write(&buf[0..chars_left])\n     }\n }\n "}, {"sha": "4f71ea8cbe997d0ae8dbb1631d16660cc7fedff2", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=77ed4974569fbe71c0ba76327b5e2a34a515ed73", "patch": "@@ -247,14 +247,14 @@ fn generate_frequencies(mut input: &[u8], frame: uint) -> Table {\n     // Pull first frame.\n     for _ in range(0, frame) {\n         code = code.push_char(input[0]);\n-        input = input.index(&(1..));\n+        input = &input[1..];\n     }\n     frequencies.lookup(code, BumpCallback);\n \n     while input.len() != 0 && input[0] != ('>' as u8) {\n         code = code.rotate(input[0], frame);\n         frequencies.lookup(code, BumpCallback);\n-        input = input.index(&(1..));\n+        input = &input[1..];\n     }\n     frequencies\n }"}, {"sha": "c872d0dc4b9c4aa5e0ada23002d18b5231a506d4", "filename": "src/test/compile-fail/borrowck-array-double-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Fcompile-fail%2Fborrowck-array-double-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Fcompile-fail%2Fborrowck-array-double-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-array-double-move.rs?ref=77ed4974569fbe71c0ba76327b5e2a34a515ed73", "patch": "@@ -12,7 +12,7 @@ fn f() {\n     let mut a = [box 0i, box 1i];\n     drop(a[0]);\n     a[1] = box 2i;\n-    drop(a[0]); //~ ERROR use of moved value: `a.index(&(..))`\n+    drop(a[0]); //~ ERROR use of moved value: `a[..]`\n }\n \n fn main() {"}, {"sha": "cb8762f44fb7932ceef6283b1648635788e741cf", "filename": "src/test/compile-fail/borrowck-vec-pattern-move-tail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs?ref=77ed4974569fbe71c0ba76327b5e2a34a515ed73", "patch": "@@ -14,6 +14,6 @@ fn main() {\n         [1, 2, tail..] => tail,\n         _ => unreachable!()\n     };\n-    a[0] = 0; //~ ERROR cannot assign to `a.index(&(..))` because it is borrowed\n+    a[0] = 0; //~ ERROR cannot assign to `a[..]` because it is borrowed\n     t[0];\n }"}, {"sha": "38177d076455d5bae99415e117762b32f291e42c", "filename": "src/test/compile-fail/packed-struct-generic-transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs?ref=77ed4974569fbe71c0ba76327b5e2a34a515ed73", "patch": "@@ -34,6 +34,6 @@ fn main() {\n     let foo = Foo { bar: [1u8, 2, 3, 4, 5], baz: 10i32 };\n     unsafe {\n         let oof: Oof<[u8; 5], i32> = mem::transmute(foo);\n-        println!(\"{} {}\", oof.rab.index(&FullRange), oof.zab);\n+        println!(\"{} {}\", &oof.rab[], oof.zab);\n     }\n }"}, {"sha": "903760caf1a1eb64bf73184e490c8ed8e24e1d72", "filename": "src/test/compile-fail/slice-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Fcompile-fail%2Fslice-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Fcompile-fail%2Fslice-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fslice-1.rs?ref=77ed4974569fbe71c0ba76327b5e2a34a515ed73", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test slicing expr.index(&(..)) is an error and gives a helpful error message.\n+// Test slicing expr[..] is an error and gives a helpful error message.\n \n struct Foo;\n \n fn main() {\n     let x = Foo;\n-    x.index(&(..)); //~ ERROR incorrect slicing expression: `[..]`\n-    //~^ NOTE use `expr.index(&FullRange)` to construct a slice of the whole of expr\n+    &x[..]; //~ ERROR incorrect slicing expression: `[..]`\n+    //~^ NOTE use `&expr[]` to construct a slice of the whole of expr\n }"}, {"sha": "9ee700225456bfca4525a44fd3f88351deb84d72", "filename": "src/test/compile-fail/slice-2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Fcompile-fail%2Fslice-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Fcompile-fail%2Fslice-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fslice-2.rs?ref=77ed4974569fbe71c0ba76327b5e2a34a515ed73", "patch": "@@ -16,8 +16,8 @@ struct Foo;\n \n fn main() {\n     let x = Foo;\n-    x.index(&FullRange); //~ ERROR cannot take a slice of a value with type `Foo`\n-    x.index(&(Foo..)); //~ ERROR cannot take a slice of a value with type `Foo`\n-    x.index(&(0..Foo)); //~ ERROR cannot take a slice of a value with type `Foo`\n-    x.index(&(Foo..Foo)); //~ ERROR cannot take a slice of a value with type `Foo`\n+    &x[]; //~ ERROR cannot take a slice of a value with type `Foo`\n+    &x[Foo..]; //~ ERROR cannot take a slice of a value with type `Foo`\n+    &x[0..Foo]; //~ ERROR cannot take a slice of a value with type `Foo`\n+    &x[Foo..Foo]; //~ ERROR cannot take a slice of a value with type `Foo`\n }"}, {"sha": "aab187f97515a0c693e88b55891a5374963b366d", "filename": "src/test/compile-fail/slice-borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Fcompile-fail%2Fslice-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Fcompile-fail%2Fslice-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fslice-borrow.rs?ref=77ed4974569fbe71c0ba76327b5e2a34a515ed73", "patch": "@@ -16,6 +16,6 @@ fn main() {\n     let y;\n     {\n         let x: &[int] = &[1, 2, 3, 4, 5]; //~ ERROR borrowed value does not live long enough\n-        y = x.index(&(1..));\n+        y = &x[1..];\n     }\n }"}, {"sha": "b34c9a49268b58428fb7384ddf32b91a98266461", "filename": "src/test/compile-fail/slice-mut-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Fcompile-fail%2Fslice-mut-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Fcompile-fail%2Fslice-mut-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fslice-mut-2.rs?ref=77ed4974569fbe71c0ba76327b5e2a34a515ed73", "patch": "@@ -16,5 +16,5 @@ fn main() {\n     let x: &[int] = &[1, 2, 3, 4, 5];\n     // Can't mutably slice an immutable slice\n     let slice: &mut [int] = &mut [0, 1];\n-    x.index(&(2..4)) = slice; //~ ERROR cannot borrow\n+    &mut x[2..4] = slice; //~ ERROR cannot borrow\n }"}, {"sha": "e7353dfbcd0e4a761731999d2b179ce99ae17a70", "filename": "src/test/compile-fail/slice-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Fcompile-fail%2Fslice-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Fcompile-fail%2Fslice-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fslice-mut.rs?ref=77ed4974569fbe71c0ba76327b5e2a34a515ed73", "patch": "@@ -15,5 +15,5 @@\n fn main() {\n     let x: &[int] = &[1, 2, 3, 4, 5];\n     // Immutable slices are not mutable.\n-    let y: &mut[_] = x.index(&(2..4)); //~ ERROR cannot borrow immutable dereference of `&`-pointer as mutabl\n+    let y: &mut[_] = &x[2..4]; //~ ERROR cannot borrow immutable dereference of `&`-pointer as mutabl\n }"}, {"sha": "14f1dbb9d651cb88fbffce15e5e7b8b4f269735e", "filename": "src/test/debuginfo/vec-slices.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Fdebuginfo%2Fvec-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Fdebuginfo%2Fvec-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvec-slices.rs?ref=77ed4974569fbe71c0ba76327b5e2a34a515ed73", "patch": "@@ -93,7 +93,7 @@ fn main() {\n     let empty: &[i64] = &[];\n     let singleton: &[i64] = &[1];\n     let multiple: &[i64] = &[2, 3, 4, 5];\n-    let slice_of_slice = multiple.index(&(1..3));\n+    let slice_of_slice = &multiple[1..3];\n \n     let padded_tuple: &[(i32, i16)] = &[(6, 7), (8, 9)];\n "}, {"sha": "9b030de998373be9b62b6b9542d8de7fbb5c4a11", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=77ed4974569fbe71c0ba76327b5e2a34a515ed73", "patch": "@@ -35,7 +35,7 @@ fn test_rbml<'a, 'b, A:\n     let mut rbml_w = EBwriter::Encoder::new(&mut wr);\n     a1.encode(&mut rbml_w);\n \n-    let d: serialize::rbml::Doc<'a> = EBDoc::new(wr.index(&FullRange));\n+    let d: serialize::rbml::Doc<'a> = EBDoc::new(&wr[]);\n     let mut decoder: EBReader::Decoder<'a> = EBreader::Decoder::new(d);\n     let a2: A = Decodable::decode(&mut decoder);\n     assert!(*a1 == a2);"}, {"sha": "01814e8eab7909cd948c87b8935472f67d1fff35", "filename": "src/test/run-pass/deriving-encodable-decodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs?ref=77ed4974569fbe71c0ba76327b5e2a34a515ed73", "patch": "@@ -59,7 +59,7 @@ fn roundtrip<'a, T: Rand + Eq + Encodable<Encoder<'a>> +\n     let mut w = Vec::new();\n     let mut e = Encoder::new(&mut w);\n     obj.encode(&mut e);\n-    let doc = rbml::Doc::new(@w.index(&FullRange));\n+    let doc = rbml::Doc::new(&w[]);\n     let mut dec = Decoder::new(doc);\n     let obj2 = Decodable::decode(&mut dec);\n     assert!(obj == obj2);"}, {"sha": "5b90878aa285419570c37bfbe6f59ed80becfcf9", "filename": "src/test/run-pass/issue-8898.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Frun-pass%2Fissue-8898.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Frun-pass%2Fissue-8898.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8898.rs?ref=77ed4974569fbe71c0ba76327b5e2a34a515ed73", "patch": "@@ -20,9 +20,9 @@ pub fn main() {\n     let x  = [(), ()];\n     let slice = x.index(&(0..1));\n \n-    assert_repr_eq(abc.index(&FullRange), \"[1, 2, 3]\".to_string());\n-    assert_repr_eq(tf.index(&FullRange), \"[true, false]\".to_string());\n-    assert_repr_eq(x.index(&FullRange), \"[(), ()]\".to_string());\n+    assert_repr_eq(&abc[], \"[1, 2, 3]\".to_string());\n+    assert_repr_eq(&tf[], \"[true, false]\".to_string());\n+    assert_repr_eq(&x[], \"[(), ()]\".to_string());\n     assert_repr_eq(slice, \"[()]\".to_string());\n-    assert_repr_eq(x.index(&FullRange), \"[(), ()]\".to_string());\n+    assert_repr_eq(&x[], \"[(), ()]\".to_string());\n }"}, {"sha": "e854a7326329c8d6d0e977230224b3dc9285f578", "filename": "src/test/run-pass/repeated-vector-syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Frun-pass%2Frepeated-vector-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Frun-pass%2Frepeated-vector-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frepeated-vector-syntax.rs?ref=77ed4974569fbe71c0ba76327b5e2a34a515ed73", "patch": "@@ -16,8 +16,8 @@ pub fn main() {\n \n     print!(\"[\");\n     for xi in x.iter() {\n-        print!(\"{}, \", (*xi)[]);\n+        print!(\"{}, \", &xi[]);\n     }\n     println!(\"]\");\n-    println!(\"{}\", y.index(&FullRange));\n+    println!(\"{}\", &y[]);\n }"}, {"sha": "05f318b53c2e543404988c2c536e40751601d4ed", "filename": "src/test/run-pass/slice-2.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Frun-pass%2Fslice-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Frun-pass%2Fslice-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fslice-2.rs?ref=77ed4974569fbe71c0ba76327b5e2a34a515ed73", "patch": "@@ -15,57 +15,57 @@\n fn main() {\n     let x: &[int] = &[1, 2, 3, 4, 5];\n     let cmp: &[int] = &[1, 2, 3, 4, 5];\n-    assert!(x.index(&FullRange) == cmp);\n+    assert!(&x[] == cmp);\n     let cmp: &[int] = &[3, 4, 5];\n-    assert!(x.index(&(2..)) == cmp);\n+    assert!(&x[2..] == cmp);\n     let cmp: &[int] = &[1, 2, 3];\n-    assert!(x.index(&(0..3)) == cmp);\n+    assert!(&x[0..3] == cmp);\n     let cmp: &[int] = &[2, 3, 4];\n-    assert!(x.index(&(1..4)) == cmp);\n+    assert!(&x[1..4] == cmp);\n \n     let x: Vec<int> = vec![1, 2, 3, 4, 5];\n     let cmp: &[int] = &[1, 2, 3, 4, 5];\n-    assert!(x.index(&FullRange) == cmp);\n+    assert!(&x[] == cmp);\n     let cmp: &[int] = &[3, 4, 5];\n-    assert!(x.index(&(2..)) == cmp);\n+    assert!(&x[2..] == cmp);\n     let cmp: &[int] = &[1, 2, 3];\n-    assert!(x.index(&(0..3)) == cmp);\n+    assert!(&x[0..3] == cmp);\n     let cmp: &[int] = &[2, 3, 4];\n-    assert!(x.index(&(1..4)) == cmp);\n+    assert!(&x[1..4] == cmp);\n \n     let x: &mut [int] = &mut [1, 2, 3, 4, 5];\n     {\n         let cmp: &mut [int] = &mut [1, 2, 3, 4, 5];\n-        assert!(x[mut] == cmp);\n+        assert!(&mut x[] == cmp);\n     }\n     {\n         let cmp: &mut [int] = &mut [3, 4, 5];\n-        assert!(x[mut 2..] == cmp);\n+        assert!(&mut x[2..] == cmp);\n     }\n     {\n         let cmp: &mut [int] = &mut [1, 2, 3];\n-        assert!(x[mut ..3] == cmp);\n+        assert!(&mut x[..3] == cmp);\n     }\n     {\n         let cmp: &mut [int] = &mut [2, 3, 4];\n-        assert!(x[mut 1..4] == cmp);\n+        assert!(&mut x[1..4] == cmp);\n     }\n \n     let mut x: Vec<int> = vec![1, 2, 3, 4, 5];\n     {\n         let cmp: &mut [int] = &mut [1, 2, 3, 4, 5];\n-        assert!(x[mut] == cmp);\n+        assert!(&mut x[] == cmp);\n     }\n     {\n         let cmp: &mut [int] = &mut [3, 4, 5];\n-        assert!(x[mut 2..] == cmp);\n+        assert!(&mut x[2..] == cmp);\n     }\n     {\n         let cmp: &mut [int] = &mut [1, 2, 3];\n-        assert!(x[mut ..3] == cmp);\n+        assert!(&mut x[..3] == cmp);\n     }\n     {\n         let cmp: &mut [int] = &mut [2, 3, 4];\n-        assert!(x[mut 1..4] == cmp);\n+        assert!(&mut x[1..4] == cmp);\n     }\n }"}, {"sha": "e039886022c27d3ed94f8b92d4f505ba20be7360", "filename": "src/test/run-pass/slice.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Frun-pass%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77ed4974569fbe71c0ba76327b5e2a34a515ed73/src%2Ftest%2Frun-pass%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fslice.rs?ref=77ed4974569fbe71c0ba76327b5e2a34a515ed73", "patch": "@@ -13,7 +13,7 @@\n #![feature(slicing_syntax)]\n \n extern crate core;\n-use core::ops::{Slice,SliceMut};\n+use core::ops::{Index, Range, RangeTo, RangeFrom, FullRange};\n \n static mut COUNT: uint = 0;\n \n@@ -56,16 +56,17 @@ impl SliceMut<Foo, Foo> for Foo {\n         self\n     }\n }\n+\n fn main() {\n     let mut x = Foo;\n-    x.index(&FullRange);\n-    x.index(&(Foo..));\n-    x.index(&(0..Foo));\n-    x.index(&(Foo..Foo));\n-    x[mut];\n-    x[mut Foo..];\n-    x[mut ..Foo];\n-    x[mut Foo..Foo];\n+    &x[];\n+    &x[Foo..];\n+    &x[0..Foo];\n+    &x[Foo..Foo];\n+    &mut x[];\n+    &mut x[Foo..];\n+    &mut x[..Foo];\n+    &mut x[Foo..Foo];\n     unsafe {\n         assert!(COUNT == 8);\n     }"}]}