{"sha": "e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZjZlZDE0ZDVkZTIxOTlkMGU4YTNjMWU0MWY4MGU0Mzg4NWNiNWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-19T13:10:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-19T13:10:16Z"}, "message": "Auto merge of #74098 - GuillaumeGomez:doc-alias-checks, r=ollie27\n\nDoc alias checks: ensure only items appearing in search index can use it\n\nFollowing the discussion in #73721, I added checks to ensure that only items appearing in the search are allowed to have doc alias.\n\nr? @ollie27", "tree": {"sha": "bb13efb1f6ac76162d044d9c326df6640686eeb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb13efb1f6ac76162d044d9c326df6640686eeb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c", "html_url": "https://github.com/rust-lang/rust/commit/e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11a44adc6fadd84fc11ed986179504e883b528d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/11a44adc6fadd84fc11ed986179504e883b528d1", "html_url": "https://github.com/rust-lang/rust/commit/11a44adc6fadd84fc11ed986179504e883b528d1"}, {"sha": "fc6fb3fb8ff4589bf766e09670b1e0b005581500", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc6fb3fb8ff4589bf766e09670b1e0b005581500", "html_url": "https://github.com/rust-lang/rust/commit/fc6fb3fb8ff4589bf766e09670b1e0b005581500"}], "stats": {"total": 183, "additions": 174, "deletions": 9}, "files": [{"sha": "832cde86d0b7b1e7d0a21f475c958a810dddfccf", "filename": "src/librustc_passes/check_attr.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c/src%2Flibrustc_passes%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c/src%2Flibrustc_passes%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_attr.rs?ref=e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c", "patch": "@@ -70,7 +70,7 @@ impl CheckAttrVisitor<'tcx> {\n             } else if self.tcx.sess.check_name(attr, sym::track_caller) {\n                 self.check_track_caller(&attr.span, attrs, span, target)\n             } else if self.tcx.sess.check_name(attr, sym::doc) {\n-                self.check_doc_alias(attr)\n+                self.check_doc_alias(attr, hir_id, target)\n             } else {\n                 true\n             };\n@@ -217,7 +217,7 @@ impl CheckAttrVisitor<'tcx> {\n         }\n     }\n \n-    fn check_doc_alias(&self, attr: &Attribute) -> bool {\n+    fn check_doc_alias(&self, attr: &Attribute, hir_id: HirId, target: Target) -> bool {\n         if let Some(mi) = attr.meta() {\n             if let Some(list) = mi.meta_item_list() {\n                 for meta in list {\n@@ -238,6 +238,28 @@ impl CheckAttrVisitor<'tcx> {\n                                 .emit();\n                             return false;\n                         }\n+                        if let Some(err) = match target {\n+                            Target::Impl => Some(\"implementation block\"),\n+                            Target::ForeignMod => Some(\"extern block\"),\n+                            Target::AssocTy => {\n+                                let parent_hir_id = self.tcx.hir().get_parent_item(hir_id);\n+                                let containing_item = self.tcx.hir().expect_item(parent_hir_id);\n+                                if Target::from_item(containing_item) == Target::Impl {\n+                                    Some(\"type alias in implementation block\")\n+                                } else {\n+                                    None\n+                                }\n+                            }\n+                            _ => None,\n+                        } {\n+                            self.tcx\n+                                .sess\n+                                .struct_span_err(\n+                                    meta.span(),\n+                                    &format!(\"`#[doc(alias = \\\"...\\\")]` isn't allowed on {}\", err,),\n+                                )\n+                                .emit();\n+                        }\n                     }\n                 }\n             }"}, {"sha": "5049dbdb1ddc72d277457f72eb204ff5fe3999bb", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c", "patch": "@@ -470,6 +470,10 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                 sess.time(\"missing_docs\", || {\n                     rustc_lint::check_crate(tcx, rustc_lint::builtin::MissingDoc::new);\n                 });\n+                for &module in tcx.hir().krate().modules.keys() {\n+                    let local_def_id = tcx.hir().local_def_id(module);\n+                    tcx.ensure().check_mod_attrs(local_def_id);\n+                }\n \n                 let access_levels = tcx.privacy_access_levels(LOCAL_CRATE);\n                 // Convert from a HirId set to a DefId set since we don't always have easy access"}, {"sha": "ff188d5145801ad127793bf1094137b6cadb743f", "filename": "src/test/rustdoc-js/doc-alias.js", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c/src%2Ftest%2Frustdoc-js%2Fdoc-alias.js", "raw_url": "https://github.com/rust-lang/rust/raw/e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c/src%2Ftest%2Frustdoc-js%2Fdoc-alias.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fdoc-alias.js?ref=e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c", "patch": "@@ -5,7 +5,7 @@ const QUERY = [\n     'StructFieldItem',\n     'StructMethodItem',\n     'ImplTraitItem',\n-    'ImplAssociatedConstItem',\n+    'StructImplConstItem',\n     'ImplTraitFunction',\n     'EnumItem',\n     'VariantItem',\n@@ -64,8 +64,16 @@ const EXPECTED = [\n         'others': [],\n     },\n     {\n-        // ImplAssociatedConstItem\n-        'others': [],\n+        // StructImplConstItem\n+        'others': [\n+            {\n+                'path': 'doc_alias::Struct',\n+                'name': 'ImplConstItem',\n+                'alias': 'StructImplConstItem',\n+                'href': '../doc_alias/struct.Struct.html#associatedconstant.ImplConstItem',\n+                'is_alias': true\n+            },\n+        ],\n     },\n     {\n         'others': [\n@@ -197,6 +205,10 @@ const EXPECTED = [\n                 'href': '../doc_alias/constant.Const.html',\n                 'is_alias': true\n             },\n+            {\n+                'path': 'doc_alias::Struct',\n+                'name': 'ImplConstItem',\n+            },\n         ],\n     },\n     {"}, {"sha": "41caa98643cdd4339de1ccc0621ad3055769aed6", "filename": "src/test/rustdoc-js/doc-alias.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c/src%2Ftest%2Frustdoc-js%2Fdoc-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c/src%2Ftest%2Frustdoc-js%2Fdoc-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fdoc-alias.rs?ref=e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c", "patch": "@@ -7,16 +7,14 @@ pub struct Struct {\n }\n \n impl Struct {\n+    #[doc(alias = \"StructImplConstItem\")]\n+    pub const ImplConstItem: i32 = 0;\n     #[doc(alias = \"StructMethodItem\")]\n     pub fn method(&self) {}\n }\n \n impl Trait for Struct {\n-    // Shouldn't be listed in aliases!\n-    #[doc(alias = \"ImplTraitItem\")]\n     type Target = u32;\n-    // Shouldn't be listed in aliases!\n-    #[doc(alias = \"ImplAssociatedConstItem\")]\n     const AssociatedConst: i32 = 12;\n \n     #[doc(alias = \"ImplTraitFunction\")]"}, {"sha": "545964c7bd61b4017f0a2f9344ca399f04b14c97", "filename": "src/test/rustdoc-ui/check-doc-alias-attr-location.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr-location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr-location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr-location.rs?ref=e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c", "patch": "@@ -0,0 +1,23 @@\n+#![feature(doc_alias)]\n+\n+pub struct Bar;\n+pub trait Foo {\n+    type X;\n+    fn foo() -> Self::X;\n+}\n+\n+#[doc(alias = \"foo\")] //~ ERROR\n+extern {}\n+\n+#[doc(alias = \"bar\")] //~ ERROR\n+impl Bar {\n+    #[doc(alias = \"const\")]\n+    pub const A: u32 = 0;\n+}\n+\n+#[doc(alias = \"foobar\")] //~ ERROR\n+impl Foo for Bar {\n+    #[doc(alias = \"assoc\")] //~ ERROR\n+    type X = i32;\n+    fn foo() -> Self::X { 0 }\n+}"}, {"sha": "a66e9939eaf18060a370627c079d7869d46fce35", "filename": "src/test/rustdoc-ui/check-doc-alias-attr-location.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr-location.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr-location.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr-location.stderr?ref=e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c", "patch": "@@ -0,0 +1,26 @@\n+error: `#[doc(alias = \"...\")]` isn't allowed on extern block\n+  --> $DIR/check-doc-alias-attr-location.rs:9:7\n+   |\n+LL | #[doc(alias = \"foo\")]\n+   |       ^^^^^^^^^^^^^\n+\n+error: `#[doc(alias = \"...\")]` isn't allowed on implementation block\n+  --> $DIR/check-doc-alias-attr-location.rs:12:7\n+   |\n+LL | #[doc(alias = \"bar\")]\n+   |       ^^^^^^^^^^^^^\n+\n+error: `#[doc(alias = \"...\")]` isn't allowed on implementation block\n+  --> $DIR/check-doc-alias-attr-location.rs:18:7\n+   |\n+LL | #[doc(alias = \"foobar\")]\n+   |       ^^^^^^^^^^^^^^^^\n+\n+error: `#[doc(alias = \"...\")]` isn't allowed on type alias in implementation block\n+  --> $DIR/check-doc-alias-attr-location.rs:20:11\n+   |\n+LL |     #[doc(alias = \"assoc\")]\n+   |           ^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "b02cc1a4545b12b31e919576835afdef0062b445", "filename": "src/test/rustdoc-ui/check-doc-alias-attr.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr.rs?ref=e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c", "patch": "@@ -0,0 +1,10 @@\n+#![crate_type = \"lib\"]\n+#![feature(doc_alias)]\n+\n+#[doc(alias = \"foo\")] // ok!\n+pub struct Bar;\n+\n+#[doc(alias)] //~ ERROR\n+#[doc(alias = 0)] //~ ERROR\n+#[doc(alias(\"bar\"))] //~ ERROR\n+pub struct Foo;"}, {"sha": "268230ab44a0ac5d5efcc02c330960773f6fa5c9", "filename": "src/test/rustdoc-ui/check-doc-alias-attr.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr.stderr?ref=e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c", "patch": "@@ -0,0 +1,20 @@\n+error: doc alias attribute expects a string: #[doc(alias = \"0\")]\n+  --> $DIR/check-doc-alias-attr.rs:7:7\n+   |\n+LL | #[doc(alias)]\n+   |       ^^^^^\n+\n+error: doc alias attribute expects a string: #[doc(alias = \"0\")]\n+  --> $DIR/check-doc-alias-attr.rs:8:7\n+   |\n+LL | #[doc(alias = 0)]\n+   |       ^^^^^^^^^\n+\n+error: doc alias attribute expects a string: #[doc(alias = \"0\")]\n+  --> $DIR/check-doc-alias-attr.rs:9:7\n+   |\n+LL | #[doc(alias(\"bar\"))]\n+   |       ^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "dac9b7372e08b30dab68bf03e7c94526fc0cdc63", "filename": "src/test/ui/check-doc-alias-attr-location.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c/src%2Ftest%2Fui%2Fcheck-doc-alias-attr-location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c/src%2Ftest%2Fui%2Fcheck-doc-alias-attr-location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-doc-alias-attr-location.rs?ref=e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c", "patch": "@@ -0,0 +1,24 @@\n+#![crate_type=\"lib\"]\n+#![feature(doc_alias)]\n+\n+pub struct Bar;\n+pub trait Foo {\n+    type X;\n+    fn foo() -> Self::X;\n+}\n+\n+#[doc(alias = \"foo\")] //~ ERROR\n+extern {}\n+\n+#[doc(alias = \"bar\")] //~ ERROR\n+impl Bar {\n+    #[doc(alias = \"const\")]\n+    const A: u32 = 0;\n+}\n+\n+#[doc(alias = \"foobar\")] //~ ERROR\n+impl Foo for Bar {\n+    #[doc(alias = \"assoc\")] //~ ERROR\n+    type X = i32;\n+    fn foo() -> Self::X { 0 }\n+}"}, {"sha": "29a99e4470e5f437591bb7631bda744f95bca15e", "filename": "src/test/ui/check-doc-alias-attr-location.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c/src%2Ftest%2Fui%2Fcheck-doc-alias-attr-location.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c/src%2Ftest%2Fui%2Fcheck-doc-alias-attr-location.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-doc-alias-attr-location.stderr?ref=e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c", "patch": "@@ -0,0 +1,26 @@\n+error: `#[doc(alias = \"...\")]` isn't allowed on extern block\n+  --> $DIR/check-doc-alias-attr-location.rs:10:7\n+   |\n+LL | #[doc(alias = \"foo\")]\n+   |       ^^^^^^^^^^^^^\n+\n+error: `#[doc(alias = \"...\")]` isn't allowed on implementation block\n+  --> $DIR/check-doc-alias-attr-location.rs:13:7\n+   |\n+LL | #[doc(alias = \"bar\")]\n+   |       ^^^^^^^^^^^^^\n+\n+error: `#[doc(alias = \"...\")]` isn't allowed on implementation block\n+  --> $DIR/check-doc-alias-attr-location.rs:19:7\n+   |\n+LL | #[doc(alias = \"foobar\")]\n+   |       ^^^^^^^^^^^^^^^^\n+\n+error: `#[doc(alias = \"...\")]` isn't allowed on type alias in implementation block\n+  --> $DIR/check-doc-alias-attr-location.rs:21:11\n+   |\n+LL |     #[doc(alias = \"assoc\")]\n+   |           ^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}]}