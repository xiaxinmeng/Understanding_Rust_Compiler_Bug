{"sha": "dc7ffbeca452e870c18354d59300562bf6536dd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjN2ZmYmVjYTQ1MmU4NzBjMTgzNTRkNTkzMDA1NjJiZjY1MzZkZDM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-04-21T14:10:22Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-05-13T14:45:54Z"}, "message": "rustc_resolve: don't deny outer type parameters in embedded constants.", "tree": {"sha": "66abc8a61d0f48223013e744e9f17a4d33cc9019", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66abc8a61d0f48223013e744e9f17a4d33cc9019"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc7ffbeca452e870c18354d59300562bf6536dd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc7ffbeca452e870c18354d59300562bf6536dd3", "html_url": "https://github.com/rust-lang/rust/commit/dc7ffbeca452e870c18354d59300562bf6536dd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc7ffbeca452e870c18354d59300562bf6536dd3/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef3ec5ece5bdf8950810225a9a3bc3cd1926e3d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef3ec5ece5bdf8950810225a9a3bc3cd1926e3d5", "html_url": "https://github.com/rust-lang/rust/commit/ef3ec5ece5bdf8950810225a9a3bc3cd1926e3d5"}], "stats": {"total": 125, "additions": 74, "deletions": 51}, "files": [{"sha": "368fb7a88685b00d461a33a87ba51485920c9e81", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dc7ffbeca452e870c18354d59300562bf6536dd3/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7ffbeca452e870c18354d59300562bf6536dd3/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=dc7ffbeca452e870c18354d59300562bf6536dd3", "patch": "@@ -1222,27 +1222,26 @@ fn foo() {\n \"##,\n \n E0435: r##\"\n-A non-constant value was used to initialise a constant.\n+A non-constant value was used in a constant expression.\n \n Erroneous code example:\n \n ```compile_fail,E0435\n-let foo = 42u32;\n-const FOO : u32 = foo; // error: attempt to use a non-constant value in a\n-                       //        constant\n+let foo = 42;\n+let a: [u8; foo]; // error: attempt to use a non-constant value in a constant\n ```\n \n To fix this error, please replace the value with a constant. Example:\n \n ```\n-const FOO : u32 = 42u32; // ok!\n+let a: [u8; 42]; // ok!\n ```\n \n Or:\n \n ```\n-const OTHER_FOO : u32 = 42u32;\n-const FOO : u32 = OTHER_FOO; // ok!\n+const FOO: usize = 42;\n+let a: [u8; FOO]; // ok!\n ```\n \"##,\n \n@@ -1560,7 +1559,7 @@ register_diagnostics! {\n //  E0157, unused error code\n //  E0257,\n //  E0258,\n-    E0402, // cannot use an outer type parameter in this context\n+//  E0402, // cannot use an outer type parameter in this context\n //  E0406, merged into 420\n //  E0410, merged into 408\n //  E0413, merged into 530"}, {"sha": "774e84de36638d84ba4abd4a7773081b1360734a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 25, "deletions": 28, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/dc7ffbeca452e870c18354d59300562bf6536dd3/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7ffbeca452e870c18354d59300562bf6536dd3/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=dc7ffbeca452e870c18354d59300562bf6536dd3", "patch": "@@ -127,8 +127,6 @@ impl Ord for BindingError {\n enum ResolutionError<'a> {\n     /// error E0401: can't use type parameters from outer function\n     TypeParametersFromOuterFunction,\n-    /// error E0402: cannot use an outer type parameter in this context\n-    OuterTypeParameterContext,\n     /// error E0403: the name is already used for a type parameter in this type parameter list\n     NameAlreadyUsedInTypeParameterList(Name, &'a Span),\n     /// error E0407: method is not a member of trait\n@@ -187,12 +185,6 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n             err.span_label(span, \"use of type variable from outer function\");\n             err\n         }\n-        ResolutionError::OuterTypeParameterContext => {\n-            struct_span_err!(resolver.session,\n-                             span,\n-                             E0402,\n-                             \"cannot use an outer type parameter in this context\")\n-        }\n         ResolutionError::NameAlreadyUsedInTypeParameterList(name, first_use_span) => {\n              let mut err = struct_span_err!(resolver.session,\n                                             span,\n@@ -1671,16 +1663,16 @@ impl<'a> Resolver<'a> {\n                             this.check_proc_macro_attrs(&trait_item.attrs);\n \n                             match trait_item.node {\n-                                TraitItemKind::Const(_, ref default) => {\n+                                TraitItemKind::Const(ref ty, ref default) => {\n+                                    this.visit_ty(ty);\n+\n                                     // Only impose the restrictions of\n-                                    // ConstRibKind if there's an actual constant\n+                                    // ConstRibKind for an actual constant\n                                     // expression in a provided default.\n-                                    if default.is_some() {\n+                                    if let Some(ref expr) = *default{\n                                         this.with_constant_rib(|this| {\n-                                            visit::walk_trait_item(this, trait_item)\n+                                            this.visit_expr(expr);\n                                         });\n-                                    } else {\n-                                        visit::walk_trait_item(this, trait_item)\n                                     }\n                                 }\n                                 TraitItemKind::Method(ref sig, _) => {\n@@ -1709,9 +1701,13 @@ impl<'a> Resolver<'a> {\n                 });\n             }\n \n-            ItemKind::Const(..) | ItemKind::Static(..) => {\n-                self.with_constant_rib(|this| {\n-                    visit::walk_item(this, item);\n+            ItemKind::Static(ref ty, _, ref expr) |\n+            ItemKind::Const(ref ty, ref expr) => {\n+                self.with_item_rib(|this| {\n+                    this.visit_ty(ty);\n+                    this.with_constant_rib(|this| {\n+                        this.visit_expr(expr);\n+                    });\n                 });\n             }\n \n@@ -1782,13 +1778,21 @@ impl<'a> Resolver<'a> {\n         self.label_ribs.pop();\n     }\n \n+    fn with_item_rib<F>(&mut self, f: F)\n+        where F: FnOnce(&mut Resolver)\n+    {\n+        self.ribs[ValueNS].push(Rib::new(ItemRibKind));\n+        self.ribs[TypeNS].push(Rib::new(ItemRibKind));\n+        f(self);\n+        self.ribs[TypeNS].pop();\n+        self.ribs[ValueNS].pop();\n+    }\n+\n     fn with_constant_rib<F>(&mut self, f: F)\n         where F: FnOnce(&mut Resolver)\n     {\n         self.ribs[ValueNS].push(Rib::new(ConstantItemRibKind));\n-        self.ribs[TypeNS].push(Rib::new(ConstantItemRibKind));\n         f(self);\n-        self.ribs[TypeNS].pop();\n         self.ribs[ValueNS].pop();\n     }\n \n@@ -2755,7 +2759,8 @@ impl<'a> Resolver<'a> {\n                 for rib in ribs {\n                     match rib.kind {\n                         NormalRibKind | MethodRibKind(_) | ClosureRibKind(..) |\n-                        ModuleRibKind(..) | MacroDefinition(..) | ForwardTyParamBanRibKind => {\n+                        ModuleRibKind(..) | MacroDefinition(..) | ForwardTyParamBanRibKind |\n+                        ConstantItemRibKind => {\n                             // Nothing to do. Continue.\n                         }\n                         ItemRibKind => {\n@@ -2767,14 +2772,6 @@ impl<'a> Resolver<'a> {\n                             }\n                             return Def::Err;\n                         }\n-                        ConstantItemRibKind => {\n-                            // see #9186\n-                            if record_used {\n-                                resolve_error(self, span,\n-                                              ResolutionError::OuterTypeParameterContext);\n-                            }\n-                            return Def::Err;\n-                        }\n                     }\n                 }\n             }"}, {"sha": "b15bf44fbd063dcdbd0c5af28929d175a731cb6e", "filename": "src/test/compile-fail/E0435.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc7ffbeca452e870c18354d59300562bf6536dd3/src%2Ftest%2Fcompile-fail%2FE0435.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7ffbeca452e870c18354d59300562bf6536dd3/src%2Ftest%2Fcompile-fail%2FE0435.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0435.rs?ref=dc7ffbeca452e870c18354d59300562bf6536dd3", "patch": "@@ -10,6 +10,6 @@\n \n fn main () {\n     let foo = 42u32;\n-    const FOO : u32 = foo; //~ ERROR E0435\n+    let _: [u8; foo]; //~ ERROR E0435\n     //~| NOTE non-constant used with constant\n }"}, {"sha": "e284a61eb2daa3bf9d74c9d079629681749a4efa", "filename": "src/test/compile-fail/associated-const-type-parameter-arrays-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc7ffbeca452e870c18354d59300562bf6536dd3/src%2Ftest%2Fcompile-fail%2Fassociated-const-type-parameter-arrays-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7ffbeca452e870c18354d59300562bf6536dd3/src%2Ftest%2Fcompile-fail%2Fassociated-const-type-parameter-arrays-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-const-type-parameter-arrays-2.rs?ref=dc7ffbeca452e870c18354d59300562bf6536dd3", "patch": "@@ -26,7 +26,7 @@ impl Foo for Def {\n \n pub fn test<A: Foo, B: Foo>() {\n     let _array = [4; <A as Foo>::Y];\n-    //~^ ERROR cannot use an outer type parameter in this context [E0402]\n+    //~^ ERROR the trait bound `A: Foo` is not satisfied [E0277]\n }\n \n fn main() {"}, {"sha": "848ea65a9cfd15d9a6d1a2f8e9213ef7cac55a27", "filename": "src/test/compile-fail/associated-const-type-parameter-arrays.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc7ffbeca452e870c18354d59300562bf6536dd3/src%2Ftest%2Fcompile-fail%2Fassociated-const-type-parameter-arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7ffbeca452e870c18354d59300562bf6536dd3/src%2Ftest%2Fcompile-fail%2Fassociated-const-type-parameter-arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-const-type-parameter-arrays.rs?ref=dc7ffbeca452e870c18354d59300562bf6536dd3", "patch": "@@ -26,7 +26,7 @@ impl Foo for Def {\n \n pub fn test<A: Foo, B: Foo>() {\n     let _array: [u32; <A as Foo>::Y];\n-    //~^ ERROR cannot use an outer type parameter in this context [E0402]\n+    //~^ ERROR the trait bound `A: Foo` is not satisfied [E0277]\n }\n \n fn main() {"}, {"sha": "6fb497092d2173cc45902dd2f2c7aa83e48c1029", "filename": "src/test/compile-fail/inner-static-type-parameter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc7ffbeca452e870c18354d59300562bf6536dd3/src%2Ftest%2Fcompile-fail%2Finner-static-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7ffbeca452e870c18354d59300562bf6536dd3/src%2Ftest%2Fcompile-fail%2Finner-static-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finner-static-type-parameter.rs?ref=dc7ffbeca452e870c18354d59300562bf6536dd3", "patch": "@@ -14,7 +14,7 @@ enum Bar<T> { What } //~ ERROR parameter `T` is never used\n \n fn foo<T>() {\n     static a: Bar<T> = Bar::What;\n-    //~^ ERROR cannot use an outer type parameter in this context\n+//~^ ERROR can't use type parameters from outer function; try using a local type parameter instead\n }\n \n fn main() {"}, {"sha": "782b20574387136b062516765251a55c18b2c9dc", "filename": "src/test/compile-fail/issue-27433.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc7ffbeca452e870c18354d59300562bf6536dd3/src%2Ftest%2Fcompile-fail%2Fissue-27433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7ffbeca452e870c18354d59300562bf6536dd3/src%2Ftest%2Fcompile-fail%2Fissue-27433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27433.rs?ref=dc7ffbeca452e870c18354d59300562bf6536dd3", "patch": "@@ -11,5 +11,5 @@\n fn main() {\n     let foo = 42u32;\n     const FOO : u32 = foo;\n-                   //~^ ERROR attempt to use a non-constant value in a constant\n+                   //~^ ERROR can't capture dynamic environment\n }"}, {"sha": "1742cb4fb7214b5b243121c176d20757f419c927", "filename": "src/test/compile-fail/issue-3521-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc7ffbeca452e870c18354d59300562bf6536dd3/src%2Ftest%2Fcompile-fail%2Fissue-3521-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7ffbeca452e870c18354d59300562bf6536dd3/src%2Ftest%2Fcompile-fail%2Fissue-3521-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3521-2.rs?ref=dc7ffbeca452e870c18354d59300562bf6536dd3", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     let foo = 100;\n \n     static y: isize = foo + 1;\n-    //~^ ERROR attempt to use a non-constant value in a constant\n+    //~^ ERROR can't capture dynamic environment\n \n     println!(\"{}\", y);\n }"}, {"sha": "fe46877e8d34073f868cbdc647095245b9f6839b", "filename": "src/test/compile-fail/issue-3668-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc7ffbeca452e870c18354d59300562bf6536dd3/src%2Ftest%2Fcompile-fail%2Fissue-3668-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7ffbeca452e870c18354d59300562bf6536dd3/src%2Ftest%2Fcompile-fail%2Fissue-3668-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3668-2.rs?ref=dc7ffbeca452e870c18354d59300562bf6536dd3", "patch": "@@ -10,7 +10,7 @@\n \n fn f(x:isize) {\n     static child: isize = x + 1;\n-    //~^ ERROR attempt to use a non-constant value in a constant\n+    //~^ ERROR can't capture dynamic environment\n }\n \n fn main() {}"}, {"sha": "00f64414a9e72eaca70a8fca55f22d510e446b88", "filename": "src/test/compile-fail/issue-3668.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc7ffbeca452e870c18354d59300562bf6536dd3/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7ffbeca452e870c18354d59300562bf6536dd3/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs?ref=dc7ffbeca452e870c18354d59300562bf6536dd3", "patch": "@@ -16,7 +16,7 @@ trait PTrait {\n impl PTrait for P {\n    fn getChildOption(&self) -> Option<Box<P>> {\n        static childVal: Box<P> = self.child.get();\n-       //~^ ERROR attempt to use a non-constant value in a constant\n+       //~^ ERROR can't capture dynamic environment\n        panic!();\n    }\n }"}, {"sha": "aa0750230649da8ea1f8a2d8e9e42ba5da066787", "filename": "src/test/compile-fail/issue-39559-2.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dc7ffbeca452e870c18354d59300562bf6536dd3/src%2Ftest%2Fcompile-fail%2Fissue-39559-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7ffbeca452e870c18354d59300562bf6536dd3/src%2Ftest%2Fcompile-fail%2Fissue-39559-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-39559-2.rs?ref=dc7ffbeca452e870c18354d59300562bf6536dd3", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Dim {\n+    fn dim() -> usize;\n+}\n+\n+enum Dim3 {}\n+\n+impl Dim for Dim3 {\n+    fn dim() -> usize {\n+        3\n+    }\n+}\n+\n+fn main() {\n+    let array: [usize; Dim3::dim()]\n+    //~^ ERROR calls in constants are limited to constant functions\n+        = [0; Dim3::dim()];\n+        //~^ ERROR calls in constants are limited to constant functions\n+}"}, {"sha": "871ecf269ceec4b926448bbeb08764e460ad0ba7", "filename": "src/test/compile-fail/issue-39559.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dc7ffbeca452e870c18354d59300562bf6536dd3/src%2Ftest%2Fcompile-fail%2Fissue-39559.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7ffbeca452e870c18354d59300562bf6536dd3/src%2Ftest%2Fcompile-fail%2Fissue-39559.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-39559.rs?ref=dc7ffbeca452e870c18354d59300562bf6536dd3", "patch": "@@ -22,12 +22,7 @@ impl Dim for Dim3 {\n \n pub struct Vector<T, D: Dim> {\n     entries: [T; D::dim()]\n-    //~^ ERROR cannot use an outer type parameter in this context\n+    //~^ ERROR no associated item named `dim` found for type `D` in the current scope\n }\n \n-fn main() {\n-    let array: [usize; Dim3::dim()]\n-    //~^ ERROR calls in constants are limited to constant functions\n-        = [0; Dim3::dim()];\n-        //~^ ERROR calls in constants are limited to constant functions\n-}\n+fn main() {}"}, {"sha": "df2083530646e3404c7825a4e638adf8a4a6c9b6", "filename": "src/test/run-pass/associated-const-type-parameters.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc7ffbeca452e870c18354d59300562bf6536dd3/src%2Ftest%2Frun-pass%2Fassociated-const-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7ffbeca452e870c18354d59300562bf6536dd3/src%2Ftest%2Frun-pass%2Fassociated-const-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-type-parameters.rs?ref=dc7ffbeca452e870c18354d59300562bf6536dd3", "patch": "@@ -37,6 +37,10 @@ fn sub<A: Foo, B: Foo>() -> i32 {\n     A::X - B::X\n }\n \n+trait Bar: Foo {\n+    const Y: i32 = Self::X;\n+}\n+\n fn main() {\n     assert_eq!(11, Abc::X);\n     assert_eq!(97, Def::X);"}]}