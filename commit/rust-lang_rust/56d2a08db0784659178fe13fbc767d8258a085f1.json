{"sha": "56d2a08db0784659178fe13fbc767d8258a085f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZDJhMDhkYjA3ODQ2NTkxNzhmZTEzZmJjNzY3ZDgyNThhMDg1ZjE=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-03-18T19:55:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-18T19:55:35Z"}, "message": "Merge pull request #2541 from topecongiro/issue-2358\n\nSkip name replacement in comments and strings", "tree": {"sha": "1c28bc6def1a20dcaeb6ffe5d13c98f802e59111", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c28bc6def1a20dcaeb6ffe5d13c98f802e59111"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56d2a08db0784659178fe13fbc767d8258a085f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJarsQ3CRBK7hj4Ov3rIwAAdHIIABBqJMABCqVYljIS46GMuoyA\n29syMyi4xcitvtPyjjBbWdfRwaFMlgR/kM2d9Ec7i6guLzdcXqQ7wdvDWHA9rE4j\nosKcURw7v0QufDtbUHqM3iyNaMxT1aX4rYizXHddhX6jZ+nXbtcC/V+7j+Il0UQi\n5oBupvH8ZT4VaoLpKENqVeDErMgM4aRZHsZi6VvF3XvA9RkqqlbHS2hCUtO2i27b\nCVfzZsPgflmhgTyJmW+cvdU96JRD25AeuKexAia5CwrZVd2/P7GFJ/zziStHl6o1\nENyH1cq0gJAeep69xAe/kZArcZKSTTzKYMstcMwOGWndDnBJ4Aw1TspPQkrM6dU=\n=wtLc\n-----END PGP SIGNATURE-----\n", "payload": "tree 1c28bc6def1a20dcaeb6ffe5d13c98f802e59111\nparent b7bc720638c60950007c5fe7693ffdc522cec294\nparent 1a969cff7fe3dc5cef4f36e1786db5dc22b6ed6a\nauthor Nick Cameron <nrc@ncameron.org> 1521402935 +1300\ncommitter GitHub <noreply@github.com> 1521402935 +1300\n\nMerge pull request #2541 from topecongiro/issue-2358\n\nSkip name replacement in comments and strings "}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56d2a08db0784659178fe13fbc767d8258a085f1", "html_url": "https://github.com/rust-lang/rust/commit/56d2a08db0784659178fe13fbc767d8258a085f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56d2a08db0784659178fe13fbc767d8258a085f1/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7bc720638c60950007c5fe7693ffdc522cec294", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7bc720638c60950007c5fe7693ffdc522cec294", "html_url": "https://github.com/rust-lang/rust/commit/b7bc720638c60950007c5fe7693ffdc522cec294"}, {"sha": "1a969cff7fe3dc5cef4f36e1786db5dc22b6ed6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a969cff7fe3dc5cef4f36e1786db5dc22b6ed6a", "html_url": "https://github.com/rust-lang/rust/commit/1a969cff7fe3dc5cef4f36e1786db5dc22b6ed6a"}], "stats": {"total": 95, "additions": 63, "deletions": 32}, "files": [{"sha": "030988e5195f92c67824ec392e844e701d792c7c", "filename": "src/macros.rs", "status": "modified", "additions": 31, "deletions": 32, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/56d2a08db0784659178fe13fbc767d8258a085f1/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d2a08db0784659178fe13fbc767d8258a085f1/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=56d2a08db0784659178fe13fbc767d8258a085f1", "patch": "@@ -33,7 +33,8 @@ use syntax::tokenstream::{Cursor, ThinTokenStream, TokenStream, TokenTree};\n use syntax::util::ThinVec;\n \n use codemap::SpanUtils;\n-use comment::{contains_comment, remove_trailing_white_spaces, FindUncommented};\n+use comment::{contains_comment, remove_trailing_white_spaces, CharClasses, FindUncommented,\n+              FullCodeCharKind};\n use expr::rewrite_array;\n use lists::{itemize_list, write_list, ListFormatting};\n use overflow;\n@@ -399,6 +400,28 @@ pub fn rewrite_macro_def(\n     Some(result)\n }\n \n+fn register_metavariable(\n+    map: &mut HashMap<String, String>,\n+    result: &mut String,\n+    name: &str,\n+    dollar_count: usize,\n+) {\n+    let mut new_name = String::new();\n+    let mut old_name = String::new();\n+\n+    old_name.push('$');\n+    for _ in 0..(dollar_count - 1) {\n+        new_name.push('$');\n+        old_name.push('$');\n+    }\n+    new_name.push('z');\n+    new_name.push_str(&name);\n+    old_name.push_str(&name);\n+\n+    result.push_str(&new_name);\n+    map.insert(old_name, new_name);\n+}\n+\n // Replaces `$foo` with `zfoo`. We must check for name overlap to ensure we\n // aren't causing problems.\n // This should also work for escaped `$` variables, where we leave earlier `$`s.\n@@ -409,31 +432,20 @@ fn replace_names(input: &str) -> Option<(String, HashMap<String, String>)> {\n     let mut dollar_count = 0;\n     let mut cur_name = String::new();\n \n-    for c in input.chars() {\n-        if c == '$' {\n+    for (kind, c) in CharClasses::new(input.chars()) {\n+        if kind != FullCodeCharKind::Normal {\n+            result.push(c);\n+        } else if c == '$' {\n             dollar_count += 1;\n         } else if dollar_count == 0 {\n             result.push(c);\n         } else if !c.is_alphanumeric() && !cur_name.is_empty() {\n             // Terminates a name following one or more dollars.\n-            let mut new_name = String::new();\n-            let mut old_name = String::new();\n-            old_name.push('$');\n-            for _ in 0..(dollar_count - 1) {\n-                new_name.push('$');\n-                old_name.push('$');\n-            }\n-            new_name.push('z');\n-            new_name.push_str(&cur_name);\n-            old_name.push_str(&cur_name);\n-\n-            result.push_str(&new_name);\n-            substs.insert(old_name, new_name);\n+            register_metavariable(&mut substs, &mut result, &cur_name, dollar_count);\n \n             result.push(c);\n-\n             dollar_count = 0;\n-            cur_name = String::new();\n+            cur_name.clear();\n         } else if c == '(' && cur_name.is_empty() {\n             // FIXME: Support macro def with repeat.\n             return None;\n@@ -442,21 +454,8 @@ fn replace_names(input: &str) -> Option<(String, HashMap<String, String>)> {\n         }\n     }\n \n-    // FIXME: duplicate code\n     if !cur_name.is_empty() {\n-        let mut new_name = String::new();\n-        let mut old_name = String::new();\n-        old_name.push('$');\n-        for _ in 0..(dollar_count - 1) {\n-            new_name.push('$');\n-            old_name.push('$');\n-        }\n-        new_name.push('z');\n-        new_name.push_str(&cur_name);\n-        old_name.push_str(&cur_name);\n-\n-        result.push_str(&new_name);\n-        substs.insert(old_name, new_name);\n+        register_metavariable(&mut substs, &mut result, &cur_name, dollar_count);\n     }\n \n     debug!(\"replace_names `{}` {:?}\", result, substs);"}, {"sha": "ea3cefa873865278e235eb3a9ea7b32a4f075729", "filename": "tests/source/macro_rules.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/56d2a08db0784659178fe13fbc767d8258a085f1/tests%2Fsource%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d2a08db0784659178fe13fbc767d8258a085f1/tests%2Fsource%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacro_rules.rs?ref=56d2a08db0784659178fe13fbc767d8258a085f1", "patch": "@@ -112,3 +112,19 @@ macro foo($type_name: ident, $docs: expr) {\n     #[derive(Debug, Clone, Copy)]\n     pub struct $type_name;\n }\n+\n+// #2538\n+macro_rules! add_message_to_notes {\n+    ($msg:expr) => {{\n+        let mut lines = message.lines();\n+        notes.push_str(&format!(\"\\n{}: {}\", level, lines.next().unwrap()));\n+        for line in lines {\n+            notes.push_str(&format!(\n+                \"\\n{:indent$}{line}\",\n+                \"\",\n+                indent = level.len() + 2,\n+                line = line,\n+            ));\n+        }\n+    }}\n+}"}, {"sha": "bc9c6aa40223febd7588d6a49279acb6aa60a5e7", "filename": "tests/target/macro_rules.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/56d2a08db0784659178fe13fbc767d8258a085f1/tests%2Ftarget%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d2a08db0784659178fe13fbc767d8258a085f1/tests%2Ftarget%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacro_rules.rs?ref=56d2a08db0784659178fe13fbc767d8258a085f1", "patch": "@@ -103,3 +103,19 @@ macro foo($type_name: ident, $docs: expr) {\n     #[derive(Debug, Clone, Copy)]\n     pub struct $type_name;\n }\n+\n+// #2538\n+macro_rules! add_message_to_notes {\n+    ($msg: expr) => {{\n+        let mut lines = message.lines();\n+        notes.push_str(&format!(\"\\n{}: {}\", level, lines.next().unwrap()));\n+        for line in lines {\n+            notes.push_str(&format!(\n+                \"\\n{:indent$}{line}\",\n+                \"\",\n+                indent = level.len() + 2,\n+                line = line,\n+            ));\n+        }\n+    }};\n+}"}]}