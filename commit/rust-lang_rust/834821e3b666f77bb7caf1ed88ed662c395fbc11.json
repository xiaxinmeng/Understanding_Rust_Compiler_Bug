{"sha": "834821e3b666f77bb7caf1ed88ed662c395fbc11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNDgyMWUzYjY2NmY3N2JiN2NhZjFlZDg4ZWQ2NjJjMzk1ZmJjMTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-18T13:50:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-18T13:50:31Z"}, "message": "Auto merge of #78066 - bugadani:wat, r=jonas-schievink\n\nClean up small, surprising bits of code\n\nThis PR clean up a small number of unrelated, small things I found while browsing the code base.", "tree": {"sha": "1df75fdbbb9d74e9fb6b5b03baf8a90982d79363", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1df75fdbbb9d74e9fb6b5b03baf8a90982d79363"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/834821e3b666f77bb7caf1ed88ed662c395fbc11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/834821e3b666f77bb7caf1ed88ed662c395fbc11", "html_url": "https://github.com/rust-lang/rust/commit/834821e3b666f77bb7caf1ed88ed662c395fbc11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/834821e3b666f77bb7caf1ed88ed662c395fbc11/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98e16884b10630e6e6ef5f4a076af3409122401d", "url": "https://api.github.com/repos/rust-lang/rust/commits/98e16884b10630e6e6ef5f4a076af3409122401d", "html_url": "https://github.com/rust-lang/rust/commit/98e16884b10630e6e6ef5f4a076af3409122401d"}, {"sha": "2e9943990014013dbe2e1878d3f11f331a50c115", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e9943990014013dbe2e1878d3f11f331a50c115", "html_url": "https://github.com/rust-lang/rust/commit/2e9943990014013dbe2e1878d3f11f331a50c115"}], "stats": {"total": 101, "additions": 48, "deletions": 53}, "files": [{"sha": "21c2c925bc479de340b8081cde5cccdd477643b5", "filename": "compiler/rustc_ast/src/util/lev_distance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/834821e3b666f77bb7caf1ed88ed662c395fbc11/compiler%2Frustc_ast%2Fsrc%2Futil%2Flev_distance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/834821e3b666f77bb7caf1ed88ed662c395fbc11/compiler%2Frustc_ast%2Fsrc%2Futil%2Flev_distance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Flev_distance.rs?ref=834821e3b666f77bb7caf1ed88ed662c395fbc11", "patch": "@@ -54,7 +54,7 @@ where\n     T: Iterator<Item = &'a Symbol>,\n {\n     let lookup = &lookup.as_str();\n-    let max_dist = dist.map_or_else(|| cmp::max(lookup.len(), 3) / 3, |d| d);\n+    let max_dist = dist.unwrap_or_else(|| cmp::max(lookup.len(), 3) / 3);\n     let name_vec: Vec<&Symbol> = iter_names.collect();\n \n     let (case_insensitive_match, levenshtein_match) = name_vec"}, {"sha": "c49fd76a313d63e3ab06f1ecd83a1c7407d2d5be", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 39, "deletions": 44, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/834821e3b666f77bb7caf1ed88ed662c395fbc11/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/834821e3b666f77bb7caf1ed88ed662c395fbc11/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=834821e3b666f77bb7caf1ed88ed662c395fbc11", "patch": "@@ -1190,52 +1190,47 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                                          input| {\n                             match used_regs.entry(r) {\n                                 Entry::Occupied(o) => {\n-                                    if !skip {\n-                                        skip = true;\n-\n-                                        let idx2 = *o.get();\n-                                        let op2 = &operands[idx2];\n-                                        let op_sp2 = asm.operands[idx2].1;\n-                                        let reg2 = match op2.reg() {\n-                                            Some(asm::InlineAsmRegOrRegClass::Reg(r)) => r,\n-                                            _ => unreachable!(),\n-                                        };\n-\n-                                        let msg = format!(\n-                                            \"register `{}` conflicts with register `{}`\",\n-                                            reg.name(),\n-                                            reg2.name()\n-                                        );\n-                                        let mut err = sess.struct_span_err(op_sp, &msg);\n-                                        err.span_label(\n-                                            op_sp,\n-                                            &format!(\"register `{}`\", reg.name()),\n-                                        );\n-                                        err.span_label(\n-                                            op_sp2,\n-                                            &format!(\"register `{}`\", reg2.name()),\n-                                        );\n-\n-                                        match (op, op2) {\n-                                            (\n-                                                hir::InlineAsmOperand::In { .. },\n-                                                hir::InlineAsmOperand::Out { late, .. },\n-                                            )\n-                                            | (\n-                                                hir::InlineAsmOperand::Out { late, .. },\n-                                                hir::InlineAsmOperand::In { .. },\n-                                            ) => {\n-                                                assert!(!*late);\n-                                                let out_op_sp = if input { op_sp2 } else { op_sp };\n-                                                let msg = \"use `lateout` instead of \\\n-                                                     `out` to avoid conflict\";\n-                                                err.span_help(out_op_sp, msg);\n-                                            }\n-                                            _ => {}\n+                                    if skip {\n+                                        return;\n+                                    }\n+                                    skip = true;\n+\n+                                    let idx2 = *o.get();\n+                                    let op2 = &operands[idx2];\n+                                    let op_sp2 = asm.operands[idx2].1;\n+                                    let reg2 = match op2.reg() {\n+                                        Some(asm::InlineAsmRegOrRegClass::Reg(r)) => r,\n+                                        _ => unreachable!(),\n+                                    };\n+\n+                                    let msg = format!(\n+                                        \"register `{}` conflicts with register `{}`\",\n+                                        reg.name(),\n+                                        reg2.name()\n+                                    );\n+                                    let mut err = sess.struct_span_err(op_sp, &msg);\n+                                    err.span_label(op_sp, &format!(\"register `{}`\", reg.name()));\n+                                    err.span_label(op_sp2, &format!(\"register `{}`\", reg2.name()));\n+\n+                                    match (op, op2) {\n+                                        (\n+                                            hir::InlineAsmOperand::In { .. },\n+                                            hir::InlineAsmOperand::Out { late, .. },\n+                                        )\n+                                        | (\n+                                            hir::InlineAsmOperand::Out { late, .. },\n+                                            hir::InlineAsmOperand::In { .. },\n+                                        ) => {\n+                                            assert!(!*late);\n+                                            let out_op_sp = if input { op_sp2 } else { op_sp };\n+                                            let msg = \"use `lateout` instead of \\\n+                                                    `out` to avoid conflict\";\n+                                            err.span_help(out_op_sp, msg);\n                                         }\n-\n-                                        err.emit();\n+                                        _ => {}\n                                     }\n+\n+                                    err.emit();\n                                 }\n                                 Entry::Vacant(v) => {\n                                     v.insert(idx);"}, {"sha": "a964950f1df1bf1fc3be6954d2c83543b12da1a4", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/834821e3b666f77bb7caf1ed88ed662c395fbc11/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/834821e3b666f77bb7caf1ed88ed662c395fbc11/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=834821e3b666f77bb7caf1ed88ed662c395fbc11", "patch": "@@ -968,7 +968,7 @@ fn warn_if_doc(cx: &EarlyContext<'_>, node_span: Span, node_kind: &str, attrs: &\n     while let Some(attr) = attrs.next() {\n         if attr.is_doc_comment() {\n             sugared_span =\n-                Some(sugared_span.map_or_else(|| attr.span, |span| span.with_hi(attr.span.hi())));\n+                Some(sugared_span.map_or(attr.span, |span| span.with_hi(attr.span.hi())));\n         }\n \n         if attrs.peek().map(|next_attr| next_attr.is_doc_comment()).unwrap_or_default() {"}, {"sha": "5da4be4e98279ce7ba7598edfed25037883ba837", "filename": "compiler/rustc_middle/src/hir/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/834821e3b666f77bb7caf1ed88ed662c395fbc11/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/834821e3b666f77bb7caf1ed88ed662c395fbc11/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fplace.rs?ref=834821e3b666f77bb7caf1ed88ed662c395fbc11", "patch": "@@ -103,7 +103,7 @@ impl<'tcx> Place<'tcx> {\n \n     /// Returns the type of this `Place` after all projections have been applied.\n     pub fn ty(&self) -> Ty<'tcx> {\n-        self.projections.last().map_or_else(|| self.base_ty, |proj| proj.ty)\n+        self.projections.last().map_or(self.base_ty, |proj| proj.ty)\n     }\n \n     /// Returns the type of this `Place` immediately before `projection_index`th projection"}, {"sha": "444f9fe8d0a680ae968bd59408983e5f7cca6940", "filename": "compiler/rustc_mir/src/borrow_check/type_check/input_output.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/834821e3b666f77bb7caf1ed88ed662c395fbc11/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/834821e3b666f77bb7caf1ed88ed662c395fbc11/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Finput_output.rs?ref=834821e3b666f77bb7caf1ed88ed662c395fbc11", "patch": "@@ -73,7 +73,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         );\n \n         // Equate expected input tys with those in the MIR.\n-        for (&normalized_input_ty, argument_index) in normalized_input_tys.iter().zip(0..) {\n+        for (argument_index, &normalized_input_ty) in normalized_input_tys.iter().enumerate() {\n             // In MIR, argument N is stored in local N+1.\n             let local = Local::new(argument_index + 1);\n \n@@ -87,8 +87,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         }\n \n         if let Some(user_provided_sig) = user_provided_sig {\n-            for (&user_provided_input_ty, argument_index) in\n-                user_provided_sig.inputs().iter().zip(0..)\n+            for (argument_index, &user_provided_input_ty) in\n+                user_provided_sig.inputs().iter().enumerate()\n             {\n                 // In MIR, closures begin an implicit `self`, so\n                 // argument N is stored in local N+2."}, {"sha": "f567dd83bc13dc6b4b6ae3aee3fc1d04b3b60b4f", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/834821e3b666f77bb7caf1ed88ed662c395fbc11/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/834821e3b666f77bb7caf1ed88ed662c395fbc11/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=834821e3b666f77bb7caf1ed88ed662c395fbc11", "patch": "@@ -458,8 +458,8 @@ fn create_and_seed_worklist<'tcx>(\n         .map\n         .iter()\n         .filter_map(\n-            |(&id, level)| {\n-                if level >= &privacy::AccessLevel::Reachable { Some(id) } else { None }\n+            |(&id, &level)| {\n+                if level >= privacy::AccessLevel::Reachable { Some(id) } else { None }\n             },\n         )\n         .chain(\n@@ -547,7 +547,7 @@ impl DeadVisitor<'tcx> {\n         let def_id = self.tcx.hir().local_def_id(id);\n         let inherent_impls = self.tcx.inherent_impls(def_id);\n         for &impl_did in inherent_impls.iter() {\n-            for &item_did in &self.tcx.associated_item_def_ids(impl_did)[..] {\n+            for item_did in self.tcx.associated_item_def_ids(impl_did) {\n                 if let Some(did) = item_did.as_local() {\n                     let item_hir_id = self.tcx.hir().local_def_id_to_hir_id(did);\n                     if self.live_symbols.contains(&item_hir_id) {"}]}