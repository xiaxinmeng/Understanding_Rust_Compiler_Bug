{"sha": "ef52be031ca7a75863b937e68799de66557563ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNTJiZTAzMWNhN2E3NTg2M2I5MzdlNjg3OTlkZTY2NTU3NTYzY2U=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-16T15:17:28Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-17T14:02:57Z"}, "message": "adjust compile-fail error messages\n\nThis also passes miri-test-libstd!", "tree": {"sha": "8bcbffb75ff856ffda11b81da82cd5bbcda07d4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bcbffb75ff856ffda11b81da82cd5bbcda07d4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef52be031ca7a75863b937e68799de66557563ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef52be031ca7a75863b937e68799de66557563ce", "html_url": "https://github.com/rust-lang/rust/commit/ef52be031ca7a75863b937e68799de66557563ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef52be031ca7a75863b937e68799de66557563ce/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6d377ca0b883355b40a2aff9d29fde195dd0a20", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6d377ca0b883355b40a2aff9d29fde195dd0a20", "html_url": "https://github.com/rust-lang/rust/commit/a6d377ca0b883355b40a2aff9d29fde195dd0a20"}], "stats": {"total": 69, "additions": 33, "deletions": 36}, "files": [{"sha": "4a153d74ffb0b35a1eabd18ec0d6e03dfdcb1580", "filename": "tests/compile-fail/stacked_borrows/alias_through_mutation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Falias_through_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Falias_through_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Falias_through_mutation.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -9,5 +9,5 @@ fn main() {\n     retarget(&mut target_alias, target);\n     // now `target_alias` points to the same thing as `target`\n     *target = 13;\n-    let _val = *target_alias; //~ ERROR does not exist on the borrow stack\n+    let _val = *target_alias; //~ ERROR borrow stack\n }"}, {"sha": "3943e9576158cf9bd7e90a03848ef4e7160586a8", "filename": "tests/compile-fail/stacked_borrows/aliasing_mut3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut3.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -1,6 +1,6 @@\n use std::mem;\n \n-pub fn safe(_x: &mut i32, _y: &i32) {} //~ ERROR does not exist on the borrow stack\n+pub fn safe(_x: &mut i32, _y: &i32) {} //~ ERROR borrow stack\n \n fn main() {\n     let mut x = 0;"}, {"sha": "7d7f5e24e2b0b06bc807b3a23300755ffd493e3d", "filename": "tests/compile-fail/stacked_borrows/box_exclusive_violation1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fbox_exclusive_violation1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fbox_exclusive_violation1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fbox_exclusive_violation1.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -8,7 +8,7 @@ fn demo_mut_advanced_unique(mut our: Box<i32>) -> i32 {\n   unknown_code_2();\n \n   // We know this will return 5\n-  *our //~ ERROR does not exist on the borrow stack\n+  *our //~ ERROR borrow stack\n }\n \n // Now comes the evil context"}, {"sha": "9ff67ae354220c6e005d2f1eaf9124f92ae94d83", "filename": "tests/compile-fail/stacked_borrows/buggy_as_mut_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_as_mut_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_as_mut_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_as_mut_slice.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -13,5 +13,5 @@ fn main() {\n     let v1 = safe::as_mut_slice(&v);\n     let _v2 = safe::as_mut_slice(&v);\n     v1[1] = 5;\n-    //~^ ERROR does not exist on the borrow stack\n+    //~^ ERROR borrow stack\n }"}, {"sha": "812dd47ef1d9068fb7aa15585eaa5a4d66df7493", "filename": "tests/compile-fail/stacked_borrows/buggy_split_at_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_split_at_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_split_at_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_split_at_mut.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -9,7 +9,7 @@ mod safe {\n             assert!(mid <= len);\n \n             (from_raw_parts_mut(ptr, len - mid), // BUG: should be \"mid\" instead of \"len - mid\"\n-            //~^ ERROR does not exist on the borrow stack\n+            //~^ ERROR borrow stack\n             from_raw_parts_mut(ptr.offset(mid as isize), len - mid))\n         }\n     }"}, {"sha": "d942d2b27b999ac6b2438b74ae242156a7aa5255", "filename": "tests/compile-fail/stacked_borrows/illegal_read1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read1.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     let xref = unsafe { &mut *xraw }; // derived from raw, so using raw is still ok...\n     callee(xraw);\n     let _val = *xref; // ...but any use of raw will invalidate our ref.\n-    //~^ ERROR: does not exist on the borrow stack\n+    //~^ ERROR: borrow stack\n }\n \n fn callee(xraw: *mut i32) {"}, {"sha": "c50c88d48f8c9383c30067df4a7b0d374698908e", "filename": "tests/compile-fail/stacked_borrows/illegal_read2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read2.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     let xref = unsafe { &mut *xraw }; // derived from raw, so using raw is still ok...\n     callee(xraw);\n     let _val = *xref; // ...but any use of raw will invalidate our ref.\n-    //~^ ERROR: does not exist on the borrow stack\n+    //~^ ERROR: borrow stack\n }\n \n fn callee(xraw: *mut i32) {"}, {"sha": "09fd5d534cf7d988986ade107de12b99b2894654", "filename": "tests/compile-fail/stacked_borrows/illegal_read3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read3.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -15,7 +15,7 @@ fn main() {\n     callee(xref1_sneaky);\n     // ... though any use of it will invalidate our ref.\n     let _val = *xref2;\n-    //~^ ERROR: does not exist on the borrow stack\n+    //~^ ERROR: borrow stack\n }\n \n fn callee(xref1: usize) {"}, {"sha": "d7e281e3ffe5c7de1a9d94937d1b315964732245", "filename": "tests/compile-fail/stacked_borrows/illegal_read4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read4.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -5,5 +5,5 @@ fn main() {\n     let xraw = xref1 as *mut _;\n     let xref2 = unsafe { &mut *xraw };\n     let _val = unsafe { *xraw }; // use the raw again, this invalidates xref2 *even* with the special read except for uniq refs\n-    let _illegal = *xref2; //~ ERROR does not exist on the borrow stack\n+    let _illegal = *xref2; //~ ERROR borrow stack\n }"}, {"sha": "d6120cd64ad0075c70a4438607312f530d626231", "filename": "tests/compile-fail/stacked_borrows/illegal_read5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read5.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -12,5 +12,5 @@ fn main() {\n     let _val = *xref; // we can even still use our mutable reference\n     mem::forget(unsafe { ptr::read(xshr) }); // but after reading through the shared ref\n     let _val = *xref; // the mutable one is dead and gone\n-    //~^ ERROR does not exist on the borrow stack\n+    //~^ ERROR borrow stack\n }"}, {"sha": "dd262a341ed2df1d2101352459288f4fa3b3c9af", "filename": "tests/compile-fail/stacked_borrows/illegal_write1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write1.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -5,5 +5,5 @@ fn main() {\n         let x : *mut u32 = xref as *const _ as *mut _;\n         unsafe { *x = 42; } // invalidates shared ref, activates raw\n     }\n-    let _x = *xref; //~ ERROR is not frozen\n+    let _x = *xref; //~ ERROR borrow stack\n }"}, {"sha": "62ea05e1811e717d60c1636449e9592369c5b714", "filename": "tests/compile-fail/stacked_borrows/illegal_write2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write2.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -3,6 +3,6 @@ fn main() {\n     let target2 = target as *mut _;\n     drop(&mut *target); // reborrow\n     // Now make sure our ref is still the only one.\n-    unsafe { *target2 = 13; } //~ ERROR does not exist on the borrow stack\n+    unsafe { *target2 = 13; } //~ ERROR borrow stack\n     let _val = *target;\n }"}, {"sha": "d2d8528d9078683334fc43bc3d62a778dc00012c", "filename": "tests/compile-fail/stacked_borrows/illegal_write3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write3.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -3,6 +3,6 @@ fn main() {\n     // Make sure raw ptr with raw tag cannot mutate frozen location without breaking the shared ref.\n     let r#ref = &target; // freeze\n     let ptr = r#ref as *const _ as *mut _; // raw ptr, with raw tag\n-    unsafe { *ptr = 42; } //~ ERROR does not exist on the borrow stack\n+    unsafe { *ptr = 42; } //~ ERROR borrow stack\n     let _val = *r#ref;\n }"}, {"sha": "be4f89ba289a14542e37b2aa0122a855f90396e4", "filename": "tests/compile-fail/stacked_borrows/illegal_write4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write4.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -9,5 +9,5 @@ fn main() {\n     let ptr = reference as *const _ as *mut i32; // raw ptr, with raw tag\n     let _mut_ref: &mut i32 = unsafe { mem::transmute(ptr) }; // &mut, with raw tag\n     // Now we retag, making our ref top-of-stack -- and, in particular, unfreezing.\n-    let _val = *reference; //~ ERROR is not frozen\n+    let _val = *reference; //~ ERROR borrow stack\n }"}, {"sha": "c60fe90fe05c7e798093cbb8dc6ba8e46934c687", "filename": "tests/compile-fail/stacked_borrows/illegal_write5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write5.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -8,7 +8,7 @@ fn main() {\n     callee(xraw);\n     // ... though any use of raw value will invalidate our ref.\n     let _val = *xref;\n-    //~^ ERROR: does not exist on the borrow stack\n+    //~^ ERROR: borrow stack\n }\n \n fn callee(xraw: *mut i32) {"}, {"sha": "1704b7fe19b2ed4be5ab1bf0a0507ca7763d60ea", "filename": "tests/compile-fail/stacked_borrows/load_invalid_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_mut.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -5,5 +5,5 @@ fn main() {\n     let xref = unsafe { &mut *xraw };\n     let xref_in_mem = Box::new(xref);\n     let _val = unsafe { *xraw }; // invalidate xref\n-    let _val = *xref_in_mem; //~ ERROR does not exist on the borrow stack\n+    let _val = *xref_in_mem; //~ ERROR borrow stack\n }"}, {"sha": "4757a2c1e58942f1d93444509cbeb480cce47461", "filename": "tests/compile-fail/stacked_borrows/load_invalid_shr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_shr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_shr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_shr.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -5,5 +5,5 @@ fn main() {\n     let xref = unsafe { &*xraw };\n     let xref_in_mem = Box::new(xref);\n     unsafe { *xraw = 42 }; // unfreeze\n-    let _val = *xref_in_mem; //~ ERROR is not frozen\n+    let _val = *xref_in_mem; //~ ERROR borrow stack\n }"}, {"sha": "03343b985a0219b63402dd20340757ab2cbfa001", "filename": "tests/compile-fail/stacked_borrows/mut_exclusive_violation1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fmut_exclusive_violation1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fmut_exclusive_violation1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fmut_exclusive_violation1.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -21,7 +21,7 @@ fn unknown_code_1(x: &i32) { unsafe {\n } }\n \n fn unknown_code_2() { unsafe {\n-    *LEAK = 7; //~ ERROR barrier\n+    *LEAK = 7; //~ ERROR borrow stack\n } }\n \n fn main() {"}, {"sha": "4cb655366ef1fc220f33827293ff322f478594db", "filename": "tests/compile-fail/stacked_borrows/outdated_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Foutdated_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Foutdated_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Foutdated_local.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -3,7 +3,7 @@ fn main() {\n     let y: *const i32 = &x;\n     x = 1; // this invalidates y by reactivating the lowermost uniq borrow for this local\n \n-    assert_eq!(unsafe { *y }, 1); //~ ERROR does not exist on the borrow stack\n+    assert_eq!(unsafe { *y }, 1); //~ ERROR borrow stack\n \n     assert_eq!(x, 1);\n }"}, {"sha": "d8a53b7a96309ecc249344b4f38a096763ff586c", "filename": "tests/compile-fail/stacked_borrows/pass_invalid_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fpass_invalid_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fpass_invalid_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fpass_invalid_mut.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -6,5 +6,5 @@ fn main() {\n     let xraw = x as *mut _;\n     let xref = unsafe { &mut *xraw };\n     let _val = unsafe { *xraw }; // invalidate xref\n-    foo(xref); //~ ERROR does not exist on the borrow stack\n+    foo(xref); //~ ERROR borrow stack\n }"}, {"sha": "091604a283b9cd8ed6d64b6244d3152ce5c41b13", "filename": "tests/compile-fail/stacked_borrows/pass_invalid_shr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fpass_invalid_shr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fpass_invalid_shr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fpass_invalid_shr.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -6,5 +6,5 @@ fn main() {\n     let xraw = x as *mut _;\n     let xref = unsafe { &*xraw };\n     unsafe { *xraw = 42 }; // unfreeze\n-    foo(xref); //~ ERROR is not frozen\n+    foo(xref); //~ ERROR borrow stack\n }"}, {"sha": "f724cdd2a7694e7f2261b1c061eec1ca95e99b16", "filename": "tests/compile-fail/stacked_borrows/pointer_smuggling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fpointer_smuggling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fpointer_smuggling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fpointer_smuggling.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -8,7 +8,7 @@ fn fun1(x: &mut u8) {\n \n fn fun2() {\n     // Now we use a pointer we are not allowed to use\n-    let _x = unsafe { *PTR }; //~ ERROR does not exist on the borrow stack\n+    let _x = unsafe { *PTR }; //~ ERROR borrow stack\n }\n \n fn main() {"}, {"sha": "54004ec43882311e2e6d0ebb6c5fec655628101c", "filename": "tests/compile-fail/stacked_borrows/return_invalid_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -3,7 +3,7 @@ fn foo(x: &mut (i32, i32)) -> &mut i32 {\n     let xraw = x as *mut (i32, i32);\n     let ret = unsafe { &mut (*xraw).1 };\n     let _val = unsafe { *xraw }; // invalidate xref\n-    ret //~ ERROR does not exist on the borrow stack\n+    ret //~ ERROR borrow stack\n }\n \n fn main() {"}, {"sha": "2eb2df81f5f16dc0d2fa02b5a4aea4b2e4265abf", "filename": "tests/compile-fail/stacked_borrows/return_invalid_mut_option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut_option.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -3,7 +3,7 @@ fn foo(x: &mut (i32, i32)) -> Option<&mut i32> {\n     let xraw = x as *mut (i32, i32);\n     let ret = Some(unsafe { &mut (*xraw).1 });\n     let _val = unsafe { *xraw }; // invalidate xref\n-    ret //~ ERROR does not exist on the borrow stack\n+    ret //~ ERROR borrow stack\n }\n \n fn main() {"}, {"sha": "8b73df4bd1ac343fd7e6644bb1fea8587f344243", "filename": "tests/compile-fail/stacked_borrows/return_invalid_mut_tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut_tuple.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -3,7 +3,7 @@ fn foo(x: &mut (i32, i32)) -> (&mut i32,) {\n     let xraw = x as *mut (i32, i32);\n     let ret = (unsafe { &mut (*xraw).1 },);\n     let _val = unsafe { *xraw }; // invalidate xref\n-    ret //~ ERROR does not exist on the borrow stack\n+    ret //~ ERROR borrow stack\n }\n \n fn main() {"}, {"sha": "eab026f9a47c60a13681fda27cb4d122b456049d", "filename": "tests/compile-fail/stacked_borrows/return_invalid_shr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_shr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_shr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_shr.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -3,7 +3,7 @@ fn foo(x: &mut (i32, i32)) -> &i32 {\n     let xraw = x as *mut (i32, i32);\n     let ret = unsafe { &(*xraw).1 };\n     unsafe { *xraw = (42, 23) }; // unfreeze\n-    ret //~ ERROR is not frozen\n+    ret //~ ERROR borrow stack\n }\n \n fn main() {"}, {"sha": "f3a35ca266c6bcfc570ac863095a2565773b83b4", "filename": "tests/compile-fail/stacked_borrows/return_invalid_shr_option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_shr_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_shr_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_shr_option.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -3,7 +3,7 @@ fn foo(x: &mut (i32, i32)) -> Option<&i32> {\n     let xraw = x as *mut (i32, i32);\n     let ret = Some(unsafe { &(*xraw).1 });\n     unsafe { *xraw = (42, 23) }; // unfreeze\n-    ret //~ ERROR is not frozen\n+    ret //~ ERROR borrow stack\n }\n \n fn main() {"}, {"sha": "82723bade27d7b362489fe38f847353466398493", "filename": "tests/compile-fail/stacked_borrows/return_invalid_shr_tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_shr_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_shr_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_shr_tuple.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -3,7 +3,7 @@ fn foo(x: &mut (i32, i32)) -> (&i32,) {\n     let xraw = x as *mut (i32, i32);\n     let ret = (unsafe { &(*xraw).1 },);\n     unsafe { *xraw = (42, 23) }; // unfreeze\n-    ret //~ ERROR is not frozen\n+    ret //~ ERROR borrow stack\n }\n \n fn main() {"}, {"sha": "5031210c547b1c890174a4e73a39d0435a19bdab", "filename": "tests/compile-fail/stacked_borrows/shr_frozen_violation1.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fshr_frozen_violation1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fshr_frozen_violation1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fshr_frozen_violation1.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -8,9 +8,6 @@ fn main() {\n     println!(\"{}\", foo(&mut 0));\n }\n \n-// If we replace the `*const` by `&`, my current dev version of miri\n-// *does* find the problem, but not for a good reason: It finds it because\n-// of barriers, and we shouldn't rely on unknown code using barriers.\n-fn unknown_code(x: *const i32) {\n-    unsafe { *(x as *mut i32) = 7; } //~ ERROR barrier\n+fn unknown_code(x: &i32) {\n+    unsafe { *(x as *const i32 as *mut i32) = 7; } //~ ERROR borrow stack\n }"}, {"sha": "88ac164947660d8beeab7df3f7223a6c01ce2f94", "filename": "tests/compile-fail/stacked_borrows/static_memory_modification.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fstatic_memory_modification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Fstatic_memory_modification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fstatic_memory_modification.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -3,6 +3,6 @@ static X: usize = 5;\n #[allow(mutable_transmutes)]\n fn main() {\n     let _x = unsafe {\n-        std::mem::transmute::<&usize, &mut usize>(&X) //~ ERROR mutable reference with frozen tag\n+        std::mem::transmute::<&usize, &mut usize>(&X) //~ ERROR borrow stack\n     };\n }"}, {"sha": "e9282c5ba8f27e2ce9a2111d7fcb34bd820fb0ff", "filename": "tests/compile-fail/stacked_borrows/transmute-is-no-escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Ftransmute-is-no-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Ftransmute-is-no-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Ftransmute-is-no-escape.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -10,5 +10,5 @@ fn main() {\n     let _raw: *mut i32 = unsafe { mem::transmute(&mut x[0]) };\n     // `raw` still carries a tag, so we get another pointer to the same location that does not carry a tag\n     let raw = (&mut x[1] as *mut i32).wrapping_offset(-1);\n-    unsafe { *raw = 13; } //~ ERROR does not exist on the borrow stack\n+    unsafe { *raw = 13; } //~ ERROR borrow stack\n }"}, {"sha": "b49e6cce63bc3fc32108d0143a27e8df8361517e", "filename": "tests/compile-fail/stacked_borrows/unescaped_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Funescaped_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef52be031ca7a75863b937e68799de66557563ce/tests%2Fcompile-fail%2Fstacked_borrows%2Funescaped_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Funescaped_local.rs?ref=ef52be031ca7a75863b937e68799de66557563ce", "patch": "@@ -4,5 +4,5 @@ fn main() {\n     let mut x = 42;\n     let raw = &mut x as *mut i32 as usize as *mut i32;\n     let _ptr = &mut x;\n-    unsafe { *raw = 13; } //~ ERROR does not exist on the borrow stack\n+    unsafe { *raw = 13; } //~ ERROR borrow stack\n }"}]}