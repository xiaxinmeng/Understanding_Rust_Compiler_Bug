{"sha": "d1c977517166d751fd2debfab6bd4606c9cb74c1", "node_id": "C_kwDOAAsO6NoAKGQxYzk3NzUxNzE2NmQ3NTFmZDJkZWJmYWI2YmQ0NjA2YzljYjc0YzE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-07T15:04:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-07T15:04:40Z"}, "message": "Auto merge of #13568 - noritada:fix/len-of-byte-string-with-escaped-newlines, r=Veykril\n\nFix the length displayed for byte string literals with escaped newlines\n\nThis is a fix for the problem I reported earlier: \"the length of byte strings containing escaped newlines is displayed two bytes longer when the first escaped character is a newline\".\n\nI would appreciate it if you could review the fix.\nMany thanks.\n\nCloses #13567", "tree": {"sha": "9a79369a70aca625768f2af454866ed8b1d06478", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a79369a70aca625768f2af454866ed8b1d06478"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1c977517166d751fd2debfab6bd4606c9cb74c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1c977517166d751fd2debfab6bd4606c9cb74c1", "html_url": "https://github.com/rust-lang/rust/commit/d1c977517166d751fd2debfab6bd4606c9cb74c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1c977517166d751fd2debfab6bd4606c9cb74c1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a633fe9866d198e0cc63f648fe3525b5e83bb88", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a633fe9866d198e0cc63f648fe3525b5e83bb88", "html_url": "https://github.com/rust-lang/rust/commit/8a633fe9866d198e0cc63f648fe3525b5e83bb88"}, {"sha": "2340d7059e3b89a5233b0c91cf3c36fa94adfe6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2340d7059e3b89a5233b0c91cf3c36fa94adfe6e", "html_url": "https://github.com/rust-lang/rust/commit/2340d7059e3b89a5233b0c91cf3c36fa94adfe6e"}], "stats": {"total": 46, "additions": 40, "deletions": 6}, "files": [{"sha": "8990f7a7d4e8ec4b85d5906667216f5835e8cb80", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d1c977517166d751fd2debfab6bd4606c9cb74c1/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1c977517166d751fd2debfab6bd4606c9cb74c1/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=d1c977517166d751fd2debfab6bd4606c9cb74c1", "patch": "@@ -209,17 +209,19 @@ impl ast::String {\n         let text = &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n \n         let mut buf = String::new();\n-        let mut text_iter = text.chars();\n+        let mut prev_end = 0;\n         let mut has_error = false;\n         unescape_literal(text, Mode::Str, &mut |char_range, unescaped_char| match (\n             unescaped_char,\n             buf.capacity() == 0,\n         ) {\n             (Ok(c), false) => buf.push(c),\n-            (Ok(c), true) if char_range.len() == 1 && Some(c) == text_iter.next() => (),\n+            (Ok(_), true) if char_range.len() == 1 && char_range.start == prev_end => {\n+                prev_end = char_range.end\n+            }\n             (Ok(c), true) => {\n                 buf.reserve_exact(text.len());\n-                buf.push_str(&text[..char_range.start]);\n+                buf.push_str(&text[..prev_end]);\n                 buf.push(c);\n             }\n             (Err(_), _) => has_error = true,\n@@ -252,17 +254,19 @@ impl ast::ByteString {\n         let text = &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n \n         let mut buf: Vec<u8> = Vec::new();\n-        let mut text_iter = text.chars();\n+        let mut prev_end = 0;\n         let mut has_error = false;\n         unescape_literal(text, Mode::ByteStr, &mut |char_range, unescaped_char| match (\n             unescaped_char,\n             buf.capacity() == 0,\n         ) {\n             (Ok(c), false) => buf.push(c as u8),\n-            (Ok(c), true) if char_range.len() == 1 && Some(c) == text_iter.next() => (),\n+            (Ok(_), true) if char_range.len() == 1 && char_range.start == prev_end => {\n+                prev_end = char_range.end\n+            }\n             (Ok(c), true) => {\n                 buf.reserve_exact(text.len());\n-                buf.extend_from_slice(text[..char_range.start].as_bytes());\n+                buf.extend_from_slice(text[..prev_end].as_bytes());\n                 buf.push(c as u8);\n             }\n             (Err(_), _) => has_error = true,\n@@ -445,6 +449,36 @@ mod tests {\n         check_string_value(r\"\\foobar\", None);\n         check_string_value(r\"\\nfoobar\", \"\\nfoobar\");\n         check_string_value(r\"C:\\\\Windows\\\\System32\\\\\", \"C:\\\\Windows\\\\System32\\\\\");\n+        check_string_value(r\"\\x61bcde\", \"abcde\");\n+        check_string_value(\n+            r\"a\\\n+bcde\", \"abcde\",\n+        );\n+    }\n+\n+    fn check_byte_string_value<'a, const N: usize>(\n+        lit: &str,\n+        expected: impl Into<Option<&'a [u8; N]>>,\n+    ) {\n+        assert_eq!(\n+            ast::ByteString { syntax: make::tokens::literal(&format!(\"b\\\"{}\\\"\", lit)) }\n+                .value()\n+                .as_deref(),\n+            expected.into().map(|value| &value[..])\n+        );\n+    }\n+\n+    #[test]\n+    fn test_byte_string_escape() {\n+        check_byte_string_value(r\"foobar\", b\"foobar\");\n+        check_byte_string_value(r\"\\foobar\", None::<&[u8; 0]>);\n+        check_byte_string_value(r\"\\nfoobar\", b\"\\nfoobar\");\n+        check_byte_string_value(r\"C:\\\\Windows\\\\System32\\\\\", b\"C:\\\\Windows\\\\System32\\\\\");\n+        check_byte_string_value(r\"\\x61bcde\", b\"abcde\");\n+        check_byte_string_value(\n+            r\"a\\\n+bcde\", b\"abcde\",\n+        );\n     }\n \n     #[test]"}]}