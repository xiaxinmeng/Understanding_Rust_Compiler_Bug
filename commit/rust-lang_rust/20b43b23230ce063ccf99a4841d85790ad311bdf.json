{"sha": "20b43b23230ce063ccf99a4841d85790ad311bdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwYjQzYjIzMjMwY2UwNjNjY2Y5OWE0ODQxZDg1NzkwYWQzMTFiZGY=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-08T00:04:43Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-13T05:31:17Z"}, "message": "Rewrite the unit tests in `ext/expand.rs` as a `compile-fail` test.", "tree": {"sha": "ff1fe4191973c21927023e21560079b281249189", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff1fe4191973c21927023e21560079b281249189"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20b43b23230ce063ccf99a4841d85790ad311bdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20b43b23230ce063ccf99a4841d85790ad311bdf", "html_url": "https://github.com/rust-lang/rust/commit/20b43b23230ce063ccf99a4841d85790ad311bdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20b43b23230ce063ccf99a4841d85790ad311bdf/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9821e1658240bb2c056f260a4b6bc9789301fae", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9821e1658240bb2c056f260a4b6bc9789301fae", "html_url": "https://github.com/rust-lang/rust/commit/a9821e1658240bb2c056f260a4b6bc9789301fae"}], "stats": {"total": 153, "additions": 46, "deletions": 107}, "files": [{"sha": "d8365391153bc1422748fb7430c79084b97e4e62", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 0, "deletions": 107, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/20b43b23230ce063ccf99a4841d85790ad311bdf/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b43b23230ce063ccf99a4841d85790ad311bdf/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=20b43b23230ce063ccf99a4841d85790ad311bdf", "patch": "@@ -803,110 +803,3 @@ impl Folder for Marker {\n fn mark_tts(tts: &[TokenTree], m: Mark) -> Vec<TokenTree> {\n     noop_fold_tts(tts, &mut Marker{mark:m, expn_id: None})\n }\n-\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::{expand_crate, ExpansionConfig};\n-    use ast;\n-    use ext::base::{ExtCtxt, DummyResolver};\n-    use parse;\n-    use util::parser_testing::{string_to_parser};\n-    use visit;\n-    use visit::Visitor;\n-\n-    // a visitor that extracts the paths\n-    // from a given thingy and puts them in a mutable\n-    // array (passed in to the traversal)\n-    #[derive(Clone)]\n-    struct PathExprFinderContext {\n-        path_accumulator: Vec<ast::Path> ,\n-    }\n-\n-    impl Visitor for PathExprFinderContext {\n-        fn visit_expr(&mut self, expr: &ast::Expr) {\n-            if let ast::ExprKind::Path(None, ref p) = expr.node {\n-                self.path_accumulator.push(p.clone());\n-            }\n-            visit::walk_expr(self, expr);\n-        }\n-    }\n-\n-    // these following tests are quite fragile, in that they don't test what\n-    // *kind* of failure occurs.\n-\n-    fn test_ecfg() -> ExpansionConfig<'static> {\n-        ExpansionConfig::default(\"test\".to_string())\n-    }\n-\n-    // make sure that macros can't escape fns\n-    #[should_panic]\n-    #[test] fn macros_cant_escape_fns_test () {\n-        let src = \"fn bogus() {macro_rules! z (() => (3+4));}\\\n-                   fn inty() -> i32 { z!() }\".to_string();\n-        let sess = parse::ParseSess::new();\n-        let crate_ast = parse::parse_crate_from_source_str(\n-            \"<test>\".to_string(),\n-            src,\n-            Vec::new(), &sess).unwrap();\n-        // should fail:\n-        let mut loader = DummyResolver;\n-        let mut ecx = ExtCtxt::new(&sess, vec![], test_ecfg(), &mut loader);\n-        expand_crate(&mut ecx, vec![], crate_ast);\n-    }\n-\n-    // make sure that macros can't escape modules\n-    #[should_panic]\n-    #[test] fn macros_cant_escape_mods_test () {\n-        let src = \"mod foo {macro_rules! z (() => (3+4));}\\\n-                   fn inty() -> i32 { z!() }\".to_string();\n-        let sess = parse::ParseSess::new();\n-        let crate_ast = parse::parse_crate_from_source_str(\n-            \"<test>\".to_string(),\n-            src,\n-            Vec::new(), &sess).unwrap();\n-        let mut loader = DummyResolver;\n-        let mut ecx = ExtCtxt::new(&sess, vec![], test_ecfg(), &mut loader);\n-        expand_crate(&mut ecx, vec![], crate_ast);\n-    }\n-\n-    // macro_use modules should allow macros to escape\n-    #[test] fn macros_can_escape_flattened_mods_test () {\n-        let src = \"#[macro_use] mod foo {macro_rules! z (() => (3+4));}\\\n-                   fn inty() -> i32 { z!() }\".to_string();\n-        let sess = parse::ParseSess::new();\n-        let crate_ast = parse::parse_crate_from_source_str(\n-            \"<test>\".to_string(),\n-            src,\n-            Vec::new(), &sess).unwrap();\n-        let mut loader = DummyResolver;\n-        let mut ecx = ExtCtxt::new(&sess, vec![], test_ecfg(), &mut loader);\n-        expand_crate(&mut ecx, vec![], crate_ast);\n-    }\n-\n-    fn expand_crate_str(crate_str: String) -> ast::Crate {\n-        let ps = parse::ParseSess::new();\n-        let crate_ast = panictry!(string_to_parser(&ps, crate_str).parse_crate_mod());\n-        // the cfg argument actually does matter, here...\n-        let mut loader = DummyResolver;\n-        let mut ecx = ExtCtxt::new(&ps, vec![], test_ecfg(), &mut loader);\n-        expand_crate(&mut ecx, vec![], crate_ast)\n-    }\n-\n-    #[test] fn macro_tokens_should_match(){\n-        expand_crate_str(\n-            \"macro_rules! m((a)=>(13)) ;fn main(){m!(a);}\".to_string());\n-    }\n-\n-    // should be able to use a bound identifier as a literal in a macro definition:\n-    #[test] fn self_macro_parsing(){\n-        expand_crate_str(\n-            \"macro_rules! foo ((zz) => (287;));\n-            fn f(zz: i32) {foo!(zz);}\".to_string()\n-            );\n-    }\n-\n-    // create a really evil test case where a $x appears inside a binding of $x\n-    // but *shouldn't* bind because it was inserted by a different macro....\n-    // can't write this test case until we have macro-generating macros.\n-}"}, {"sha": "a064e69bc6d59f3f661edc468b3b7ceb91a42e8d", "filename": "src/test/compile-fail/macro-expansion-tests.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/20b43b23230ce063ccf99a4841d85790ad311bdf/src%2Ftest%2Fcompile-fail%2Fmacro-expansion-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b43b23230ce063ccf99a4841d85790ad311bdf/src%2Ftest%2Fcompile-fail%2Fmacro-expansion-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-expansion-tests.rs?ref=20b43b23230ce063ccf99a4841d85790ad311bdf", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod macros_cant_escape_fns {\n+    fn f() {\n+        macro_rules! m { () => { 3 + 4 } }\n+    }\n+    fn g() -> i32 { m!() } //~ ERROR macro undefined\n+}\n+\n+mod macros_cant_escape_mods {\n+    mod f {\n+        macro_rules! m { () => { 3 + 4 } }\n+    }\n+    fn g() -> i32 { m!() } //~ ERROR macro undefined\n+}\n+\n+mod macros_can_escape_flattened_mods_test {\n+    #[macro_use]\n+    mod f {\n+        macro_rules! m { () => { 3 + 4 } }\n+    }\n+    fn g() -> i32 { m!() }\n+}\n+\n+fn macro_tokens_should_match() {\n+    macro_rules! m { (a) => { 13 } }\n+    m!(a);\n+}\n+\n+// should be able to use a bound identifier as a literal in a macro definition:\n+fn self_macro_parsing() {\n+    macro_rules! foo { (zz) => { 287; } }\n+    fn f(zz: i32) {\n+        foo!(zz);\n+    }\n+}\n+\n+fn main() {}"}]}