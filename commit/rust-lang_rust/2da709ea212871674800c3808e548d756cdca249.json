{"sha": "2da709ea212871674800c3808e548d756cdca249", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkYTcwOWVhMjEyODcxNjc0ODAwYzM4MDhlNTQ4ZDc1NmNkY2EyNDk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-11T06:26:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-11T06:26:36Z"}, "message": "Rollup merge of #74099 - jonhoo:deque-range, r=dtolnay\n\nAdd VecDeque::range* methods\n\nThis patch adds `VecDeque::range` and `VecDeque::range_mut` to provide\niterators over a sub-range of a `VecDeque`. This behavior can be\nemulated with `skip` and `take`, but directly providing a `Range` is\nmore ergonomic. This also partially makes up for `VecDeque`'s lack of\n`SliceIndex` support.", "tree": {"sha": "ebd7d84dffbc08f5fa15c702927aa2702141d26c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebd7d84dffbc08f5fa15c702927aa2702141d26c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2da709ea212871674800c3808e548d756cdca249", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfCVucCRBK7hj4Ov3rIwAAdHIIAI9g/VdnJAPLIgSNvrSbPzgT\n+9zXPboAVK5bnrfutdA/zn9c9SI+6YmYZxml2LbIjrGyCzoWUmVCv+QjoGPUpOQj\nWCxXHDwiXEoXUyYIuWRyM7aKPbIcgifUFspCcHNUoyn/R3sUbNDWSMkV0xnMMXwF\nR0Y0aLn4ulIJ7fHeCNen8PK/kZXpTLoADesw96SCJnd2VbXeuVVj/v0ybpOatvQZ\nOnfTaorBujqs6vr8EUHetSe6HJw9WGJeIMOXq8CmWiKmJj/euIXJjJCT2hYVgp/+\n8kPje8iAP/JH+Cv85ZiPEsDNXinVah+3Qg3Yl6iHRjNKxKPqZfoOEr1VkyCj2DA=\n=4B7l\n-----END PGP SIGNATURE-----\n", "payload": "tree ebd7d84dffbc08f5fa15c702927aa2702141d26c\nparent 427ef98bc3ed87190f389bebc64cc76604c0213a\nparent a1a19cbbe1c17dc03ca689db002181c9bd95f529\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594448796 -0700\ncommitter GitHub <noreply@github.com> 1594448796 -0700\n\nRollup merge of #74099 - jonhoo:deque-range, r=dtolnay\n\nAdd VecDeque::range* methods\n\nThis patch adds `VecDeque::range` and `VecDeque::range_mut` to provide\niterators over a sub-range of a `VecDeque`. This behavior can be\nemulated with `skip` and `take`, but directly providing a `Range` is\nmore ergonomic. This also partially makes up for `VecDeque`'s lack of\n`SliceIndex` support.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2da709ea212871674800c3808e548d756cdca249", "html_url": "https://github.com/rust-lang/rust/commit/2da709ea212871674800c3808e548d756cdca249", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2da709ea212871674800c3808e548d756cdca249/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "427ef98bc3ed87190f389bebc64cc76604c0213a", "url": "https://api.github.com/repos/rust-lang/rust/commits/427ef98bc3ed87190f389bebc64cc76604c0213a", "html_url": "https://github.com/rust-lang/rust/commit/427ef98bc3ed87190f389bebc64cc76604c0213a"}, {"sha": "a1a19cbbe1c17dc03ca689db002181c9bd95f529", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1a19cbbe1c17dc03ca689db002181c9bd95f529", "html_url": "https://github.com/rust-lang/rust/commit/a1a19cbbe1c17dc03ca689db002181c9bd95f529"}], "stats": {"total": 176, "additions": 163, "deletions": 13}, "files": [{"sha": "2efb94e8afe57731485f7bca4665a93e235abf1e", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 103, "deletions": 13, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/2da709ea212871674800c3808e548d756cdca249/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da709ea212871674800c3808e548d756cdca249/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=2da709ea212871674800c3808e548d756cdca249", "patch": "@@ -1084,6 +1084,108 @@ impl<T> VecDeque<T> {\n         self.tail == self.head\n     }\n \n+    fn range_start_end<R>(&self, range: R) -> (usize, usize)\n+    where\n+        R: RangeBounds<usize>,\n+    {\n+        let len = self.len();\n+        let start = match range.start_bound() {\n+            Included(&n) => n,\n+            Excluded(&n) => n + 1,\n+            Unbounded => 0,\n+        };\n+        let end = match range.end_bound() {\n+            Included(&n) => n + 1,\n+            Excluded(&n) => n,\n+            Unbounded => len,\n+        };\n+        assert!(start <= end, \"lower bound was too large\");\n+        assert!(end <= len, \"upper bound was too large\");\n+        (start, end)\n+    }\n+\n+    /// Creates an iterator that covers the specified range in the `VecDeque`.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if the starting point is greater than the end point or if\n+    /// the end point is greater than the length of the vector.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(deque_range)]\n+    ///\n+    /// use std::collections::VecDeque;\n+    ///\n+    /// let v: VecDeque<_> = vec![1, 2, 3].into_iter().collect();\n+    /// let range = v.range(2..).copied().collect::<VecDeque<_>>();\n+    /// assert_eq!(range, [3]);\n+    ///\n+    /// // A full range covers all contents\n+    /// let all = v.range(..);\n+    /// assert_eq!(all.len(), 3);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"deque_range\", issue = \"74217\")]\n+    pub fn range<R>(&self, range: R) -> Iter<'_, T>\n+    where\n+        R: RangeBounds<usize>,\n+    {\n+        let (start, end) = self.range_start_end(range);\n+        let tail = self.wrap_add(self.tail, start);\n+        let head = self.wrap_add(self.tail, end);\n+        Iter {\n+            tail,\n+            head,\n+            // The shared reference we have in &self is maintained in the '_ of Iter.\n+            ring: unsafe { self.buffer_as_slice() },\n+        }\n+    }\n+\n+    /// Creates an iterator that covers the specified mutable range in the `VecDeque`.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if the starting point is greater than the end point or if\n+    /// the end point is greater than the length of the vector.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(deque_range)]\n+    ///\n+    /// use std::collections::VecDeque;\n+    ///\n+    /// let mut v: VecDeque<_> = vec![1, 2, 3].into_iter().collect();\n+    /// for v in v.range_mut(2..) {\n+    ///   *v *= 2;\n+    /// }\n+    /// assert_eq!(v, vec![1, 2, 6]);\n+    ///\n+    /// // A full range covers all contents\n+    /// for v in v.range_mut(..) {\n+    ///   *v *= 2;\n+    /// }\n+    /// assert_eq!(v, vec![2, 4, 12]);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"deque_range\", issue = \"74217\")]\n+    pub fn range_mut<R>(&mut self, range: R) -> IterMut<'_, T>\n+    where\n+        R: RangeBounds<usize>,\n+    {\n+        let (start, end) = self.range_start_end(range);\n+        let tail = self.wrap_add(self.tail, start);\n+        let head = self.wrap_add(self.tail, end);\n+        IterMut {\n+            tail,\n+            head,\n+            // The shared reference we have in &mut self is maintained in the '_ of IterMut.\n+            ring: unsafe { self.buffer_as_mut_slice() },\n+        }\n+    }\n+\n     /// Creates a draining iterator that removes the specified range in the\n     /// `VecDeque` and yields the removed items.\n     ///\n@@ -1129,19 +1231,7 @@ impl<T> VecDeque<T> {\n         // When finished, the remaining data will be copied back to cover the hole,\n         // and the head/tail values will be restored correctly.\n         //\n-        let len = self.len();\n-        let start = match range.start_bound() {\n-            Included(&n) => n,\n-            Excluded(&n) => n + 1,\n-            Unbounded => 0,\n-        };\n-        let end = match range.end_bound() {\n-            Included(&n) => n + 1,\n-            Excluded(&n) => n,\n-            Unbounded => len,\n-        };\n-        assert!(start <= end, \"drain lower bound was too large\");\n-        assert!(end <= len, \"drain upper bound was too large\");\n+        let (start, end) = self.range_start_end(range);\n \n         // The deque's elements are parted into three segments:\n         // * self.tail  -> drain_tail"}, {"sha": "e5edfe02a525fa4e0dce1c09cc759dc10e603f17", "filename": "src/liballoc/collections/vec_deque/tests.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/2da709ea212871674800c3808e548d756cdca249/src%2Fliballoc%2Fcollections%2Fvec_deque%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da709ea212871674800c3808e548d756cdca249/src%2Fliballoc%2Fcollections%2Fvec_deque%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque%2Ftests.rs?ref=2da709ea212871674800c3808e548d756cdca249", "patch": "@@ -246,6 +246,65 @@ fn test_remove() {\n     }\n }\n \n+#[test]\n+fn test_range() {\n+    let mut tester: VecDeque<usize> = VecDeque::with_capacity(7);\n+\n+    let cap = tester.capacity();\n+    for len in 0..=cap {\n+        for tail in 0..=cap {\n+            for start in 0..=len {\n+                for end in start..=len {\n+                    tester.tail = tail;\n+                    tester.head = tail;\n+                    for i in 0..len {\n+                        tester.push_back(i);\n+                    }\n+\n+                    // Check that we iterate over the correct values\n+                    let range: VecDeque<_> = tester.range(start..end).copied().collect();\n+                    let expected: VecDeque<_> = (start..end).collect();\n+                    assert_eq!(range, expected);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+#[test]\n+fn test_range_mut() {\n+    let mut tester: VecDeque<usize> = VecDeque::with_capacity(7);\n+\n+    let cap = tester.capacity();\n+    for len in 0..=cap {\n+        for tail in 0..=cap {\n+            for start in 0..=len {\n+                for end in start..=len {\n+                    tester.tail = tail;\n+                    tester.head = tail;\n+                    for i in 0..len {\n+                        tester.push_back(i);\n+                    }\n+\n+                    let head_was = tester.head;\n+                    let tail_was = tester.tail;\n+\n+                    // Check that we iterate over the correct values\n+                    let range: VecDeque<_> = tester.range_mut(start..end).map(|v| *v).collect();\n+                    let expected: VecDeque<_> = (start..end).collect();\n+                    assert_eq!(range, expected);\n+\n+                    // We shouldn't have changed the capacity or made the\n+                    // head or tail out of bounds\n+                    assert_eq!(tester.capacity(), cap);\n+                    assert_eq!(tester.tail, tail_was);\n+                    assert_eq!(tester.head, head_was);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n #[test]\n fn test_drain() {\n     let mut tester: VecDeque<usize> = VecDeque::with_capacity(7);"}, {"sha": "2ec777ac85c6651699620d502a525cbca46b4045", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2da709ea212871674800c3808e548d756cdca249/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da709ea212871674800c3808e548d756cdca249/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=2da709ea212871674800c3808e548d756cdca249", "patch": "@@ -89,6 +89,7 @@\n #![feature(const_in_array_repeat_expressions)]\n #![cfg_attr(bootstrap, feature(const_if_match))]\n #![feature(cow_is_borrowed)]\n+#![feature(deque_range)]\n #![feature(dispatch_from_dyn)]\n #![feature(core_intrinsics)]\n #![feature(container_error_extra)]"}]}