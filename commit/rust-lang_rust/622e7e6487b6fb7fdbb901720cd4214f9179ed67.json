{"sha": "622e7e6487b6fb7fdbb901720cd4214f9179ed67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMmU3ZTY0ODdiNmZiN2ZkYmI5MDE3MjBjZDQyMTRmOTE3OWVkNjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-21T15:26:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-21T15:26:55Z"}, "message": "Auto merge of #42802 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 4 pull requests\n\n- Successful merges: #42397, #42620, #42762, #42766\n- Failed merges:", "tree": {"sha": "051abe6de044e63838f39659bdeac430d11cf4ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/051abe6de044e63838f39659bdeac430d11cf4ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/622e7e6487b6fb7fdbb901720cd4214f9179ed67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/622e7e6487b6fb7fdbb901720cd4214f9179ed67", "html_url": "https://github.com/rust-lang/rust/commit/622e7e6487b6fb7fdbb901720cd4214f9179ed67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/622e7e6487b6fb7fdbb901720cd4214f9179ed67/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39220a9d9febbf8df995501f4271ce3d664559dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/39220a9d9febbf8df995501f4271ce3d664559dd", "html_url": "https://github.com/rust-lang/rust/commit/39220a9d9febbf8df995501f4271ce3d664559dd"}, {"sha": "80e14a0fe309e898e22fe9016a6e04dd16ba5f23", "url": "https://api.github.com/repos/rust-lang/rust/commits/80e14a0fe309e898e22fe9016a6e04dd16ba5f23", "html_url": "https://github.com/rust-lang/rust/commit/80e14a0fe309e898e22fe9016a6e04dd16ba5f23"}], "stats": {"total": 139, "additions": 124, "deletions": 15}, "files": [{"sha": "fcc30c007ea283da18d9eb6ba3dcbc13a6025af9", "filename": "src/Cargo.lock", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/622e7e6487b6fb7fdbb901720cd4214f9179ed67/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/622e7e6487b6fb7fdbb901720cd4214f9179ed67/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=622e7e6487b6fb7fdbb901720cd4214f9179ed67", "patch": "@@ -1057,7 +1057,7 @@ dependencies = [\n \n [[package]]\n name = \"rls-data\"\n-version = \"0.6.0\"\n+version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1381,7 +1381,7 @@ name = \"rustc_save_analysis\"\n version = \"0.0.0\"\n dependencies = [\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rls-data 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-data 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2101,7 +2101,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum regex-syntax 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ad890a5eef7953f55427c50575c680c42841653abd2b028b68cd223d157f62db\"\n \"checksum rls-analysis 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8d77d58e8933752142b5b92e3f8ba6d6f1630be6da5627c492268a43f79ffbda\"\n \"checksum rls-data 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"374a8fad31cc0681a7bfd8a04079dd4afd0e981d34e18a171b1a467445bdf51e\"\n-\"checksum rls-data 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9e2087477364c34faca86c2476765deb1185dbae3c598cfb1eb040f3a74d22b5\"\n+\"checksum rls-data 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e502ac679bc35e023e982506c32d0278ef89e29af1e4ad21cb70c44b525b87a9\"\n \"checksum rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d7c7046dc6a92f2ae02ed302746db4382e75131b9ce20ce967259f6b5867a6a\"\n \"checksum rls-vfs 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ace07060dd154731b39254864245cbdd33c8f5f64fe1f630a089c72e2468f854\"\n \"checksum rustc-demangle 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3058a43ada2c2d0b92b3ae38007a2d0fa5e9db971be260e0171408a4ff471c95\""}, {"sha": "1b25eeda3f662ecd900904bc11e3eb93b4db6ad5", "filename": "src/doc/unstable-book/src/language-features/compile-error.md", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/622e7e6487b6fb7fdbb901720cd4214f9179ed67/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcompile-error.md", "raw_url": "https://github.com/rust-lang/rust/raw/622e7e6487b6fb7fdbb901720cd4214f9179ed67/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcompile-error.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcompile-error.md?ref=622e7e6487b6fb7fdbb901720cd4214f9179ed67", "patch": "@@ -0,0 +1,20 @@\n+# `compile_error`\n+\n+The tracking issue for this feature is: [#40872]\n+\n+[#29599]: https://github.com/rust-lang/rust/issues/40872\n+\n+------------------------\n+\n+The `compile_error` feature adds a macro which will generate a compilation\n+error with the specified error message.\n+\n+## Examples\n+\n+```rust\n+#![feature(compile_error)]\n+\n+fn main() {\n+    compile_error!(\"The error message\"); //ERROR The error message\n+}\n+```"}, {"sha": "1da91a3b708502b405626a833f327fce0a513f41", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/622e7e6487b6fb7fdbb901720cd4214f9179ed67/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622e7e6487b6fb7fdbb901720cd4214f9179ed67/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=622e7e6487b6fb7fdbb901720cd4214f9179ed67", "patch": "@@ -562,6 +562,17 @@ macro_rules! unimplemented {\n ///\n /// For more information, see documentation for `std`'s macros.\n mod builtin {\n+\n+    /// Unconditionally causes compilation to fail with the given error message when encountered.\n+    ///\n+    /// For more information, see the [RFC].\n+    ///\n+    /// [RFC]: https://github.com/rust-lang/rfcs/blob/master/text/1695-add-error-macro.md\n+    #[unstable(feature = \"compile_error_macro\", issue = \"40872\")]\n+    #[macro_export]\n+    #[cfg(dox)]\n+    macro_rules! compile_error { ($msg:expr) => ({ /* compiler built-in */ }) }\n+\n     /// The core macro for formatted string creation & output.\n     ///\n     /// For more information, see the documentation for [`std::format_args!`]."}, {"sha": "509b396f211bba873235148b2b7c0f1881dcfb4c", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/622e7e6487b6fb7fdbb901720cd4214f9179ed67/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622e7e6487b6fb7fdbb901720cd4214f9179ed67/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=622e7e6487b6fb7fdbb901720cd4214f9179ed67", "patch": "@@ -504,8 +504,8 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n         // Haswell E processors. LLVM is more able to optimize if we give a struct a\n         // #[repr(simd)], even if we don't actually use this struct directly.\n         //\n-        // FIXME repr(simd) broken on emscripten\n-        #[cfg_attr(not(target_os = \"emscripten\"), repr(simd))]\n+        // FIXME repr(simd) broken on emscripten and redox\n+        #[cfg_attr(not(any(target_os = \"emscripten\", target_os = \"redox\")), repr(simd))]\n         struct Block(u64, u64, u64, u64);\n         struct UnalignedBlock(u64, u64, u64, u64);\n "}, {"sha": "1ae666fbc2f5784f399d77251495a1093324720f", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/622e7e6487b6fb7fdbb901720cd4214f9179ed67/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/622e7e6487b6fb7fdbb901720cd4214f9179ed67/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=622e7e6487b6fb7fdbb901720cd4214f9179ed67", "patch": "@@ -14,7 +14,7 @@ rustc = { path = \"../librustc\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-rls-data = \"0.6\"\n+rls-data = \"0.7\"\n rls-span = \"0.4\"\n # FIXME(#40527) should move rustc serialize out of tree\n rustc-serialize = \"0.3\""}, {"sha": "82c4f0830a626e351ff9bf0982488d5b7d082e40", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/622e7e6487b6fb7fdbb901720cd4214f9179ed67/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622e7e6487b6fb7fdbb901720cd4214f9179ed67/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=622e7e6487b6fb7fdbb901720cd4214f9179ed67", "patch": "@@ -238,6 +238,16 @@ macro_rules! assert_approx_eq {\n /// into libsyntax itself.\n #[cfg(dox)]\n pub mod builtin {\n+\n+    /// Unconditionally causes compilation to fail with the given error message when encountered.\n+    ///\n+    /// For more information, see the [RFC].\n+    ///\n+    /// [RFC]: https://github.com/rust-lang/rfcs/blob/master/text/1695-add-error-macro.md\n+    #[unstable(feature = \"compile_error_macro\", issue = \"40872\")]\n+    #[macro_export]\n+    macro_rules! compile_error { ($msg:expr) => ({ /* compiler built-in */ }) }\n+\n     /// The core macro for formatted string creation & output.\n     ///\n     /// This macro produces a value of type [`fmt::Arguments`]. This value can be"}, {"sha": "dcd4c8dfdf54934946788e72ef3218e41159479c", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/622e7e6487b6fb7fdbb901720cd4214f9179ed67/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622e7e6487b6fb7fdbb901720cd4214f9179ed67/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=622e7e6487b6fb7fdbb901720cd4214f9179ed67", "patch": "@@ -499,8 +499,6 @@ unsafe impl<T: Send> Send for Sender<T> { }\n impl<T> !Sync for Sender<T> { }\n \n /// The sending-half of Rust's synchronous [`sync_channel`] type.\n-/// This half can only be owned by one thread, but it can be cloned\n-/// to send to other threads.\n ///\n /// Messages can be sent through this channel with [`send`] or [`try_send`].\n ///\n@@ -555,9 +553,6 @@ pub struct SyncSender<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: Send> Send for SyncSender<T> {}\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> !Sync for SyncSender<T> {}\n-\n /// An error returned from the [`Sender::send`] or [`SyncSender::send`]\n /// function on **channel**s.\n ///"}, {"sha": "f8a26287bd47bf2051a7c716470b6f4f9feea30e", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/622e7e6487b6fb7fdbb901720cd4214f9179ed67/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622e7e6487b6fb7fdbb901720cd4214f9179ed67/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=622e7e6487b6fb7fdbb901720cd4214f9179ed67", "patch": "@@ -1065,6 +1065,7 @@ impl<'feat> ExpansionConfig<'feat> {\n         fn enable_allow_internal_unstable = allow_internal_unstable,\n         fn enable_custom_derive = custom_derive,\n         fn proc_macro_enabled = proc_macro,\n+        fn enable_compile_error = compile_error,\n     }\n }\n "}, {"sha": "d7d3a70f3c7c5d2ab5f941bd8f867e2f8f90ae4c", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/622e7e6487b6fb7fdbb901720cd4214f9179ed67/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622e7e6487b6fb7fdbb901720cd4214f9179ed67/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=622e7e6487b6fb7fdbb901720cd4214f9179ed67", "patch": "@@ -111,6 +111,7 @@ macro_rules! declare_features {\n \n declare_features! (\n     (active, asm, \"1.0.0\", Some(29722)),\n+    (active, compile_error, \"1.20.0\", Some(40872)),\n     (active, concat_idents, \"1.0.0\", Some(29599)),\n     (active, link_args, \"1.0.0\", Some(29596)),\n     (active, log_syntax, \"1.0.0\", Some(29598)),\n@@ -1008,6 +1009,9 @@ pub const EXPLAIN_LOG_SYNTAX: &'static str =\n pub const EXPLAIN_CONCAT_IDENTS: &'static str =\n     \"`concat_idents` is not stable enough for use and is subject to change\";\n \n+pub const EXPLAIN_COMPILE_ERROR: &'static str =\n+    \"`compile_error` is not stable enough for use and is subject to change\";\n+\n pub const EXPLAIN_TRACE_MACROS: &'static str =\n     \"`trace_macros` is not stable enough for use and is subject to change\";\n pub const EXPLAIN_ALLOW_INTERNAL_UNSTABLE: &'static str ="}, {"sha": "bb496716d8c4647eae12785e129d2b16494f78f9", "filename": "src/libsyntax_ext/compile_error.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/622e7e6487b6fb7fdbb901720cd4214f9179ed67/src%2Flibsyntax_ext%2Fcompile_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622e7e6487b6fb7fdbb901720cd4214f9179ed67/src%2Flibsyntax_ext%2Fcompile_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcompile_error.rs?ref=622e7e6487b6fb7fdbb901720cd4214f9179ed67", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2012-2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// The compiler code necessary to support the compile_error! extension.\n+\n+use syntax::ext::base::*;\n+use syntax::ext::base;\n+use syntax::feature_gate;\n+use syntax_pos::Span;\n+use syntax::tokenstream;\n+\n+pub fn expand_compile_error<'cx>(cx: &'cx mut ExtCtxt,\n+                              sp: Span,\n+                              tts: &[tokenstream::TokenTree])\n+                              -> Box<base::MacResult + 'cx> {\n+    if !cx.ecfg.enable_compile_error() {\n+        feature_gate::emit_feature_err(&cx.parse_sess,\n+                                       \"compile_error\",\n+                                       sp,\n+                                       feature_gate::GateIssue::Language,\n+                                       feature_gate::EXPLAIN_COMPILE_ERROR);\n+        return DummyResult::expr(sp);\n+    }\n+\n+    let var = match get_single_str_from_tts(cx, sp, tts, \"compile_error!\") {\n+        None => return DummyResult::expr(sp),\n+        Some(v) => v,\n+    };\n+\n+    cx.span_err(sp, &var);\n+\n+    DummyResult::any(sp)\n+}"}, {"sha": "8ba07c35b0543f721185b82e6399dec8f0ebfc29", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/622e7e6487b6fb7fdbb901720cd4214f9179ed67/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622e7e6487b6fb7fdbb901720cd4214f9179ed67/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=622e7e6487b6fb7fdbb901720cd4214f9179ed67", "patch": "@@ -30,6 +30,7 @@ extern crate rustc_errors as errors;\n \n mod asm;\n mod cfg;\n+mod compile_error;\n mod concat;\n mod concat_idents;\n mod env;\n@@ -105,6 +106,7 @@ pub fn register_builtins(resolver: &mut syntax::ext::base::Resolver,\n         option_env: env::expand_option_env,\n         log_syntax: log_syntax::expand_syntax_ext,\n         trace_macros: trace_macros::expand_trace_macros,\n+        compile_error: compile_error::expand_compile_error,\n     }\n \n     // format_args uses `unstable` things internally."}, {"sha": "2a2c3fd8092326a0b7b8a60e4ea90ccefedea614", "filename": "src/test/compile-fail/compile_error_macro.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/622e7e6487b6fb7fdbb901720cd4214f9179ed67/src%2Ftest%2Fcompile-fail%2Fcompile_error_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622e7e6487b6fb7fdbb901720cd4214f9179ed67/src%2Ftest%2Fcompile-fail%2Fcompile_error_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcompile_error_macro.rs?ref=622e7e6487b6fb7fdbb901720cd4214f9179ed67", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(compile_error)]\n+\n+fn main() {\n+    compile_error!(\"a very descriptive error message\"); //~ ERROR: a very descriptive error message\n+}"}, {"sha": "545c6852961c7d6e4447dc667b808ee53c0d6f57", "filename": "src/test/compile-fail/feature-gate-compile_error.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/622e7e6487b6fb7fdbb901720cd4214f9179ed67/src%2Ftest%2Fcompile-fail%2Ffeature-gate-compile_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622e7e6487b6fb7fdbb901720cd4214f9179ed67/src%2Ftest%2Fcompile-fail%2Ffeature-gate-compile_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-compile_error.rs?ref=622e7e6487b6fb7fdbb901720cd4214f9179ed67", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    compile_error!(\"test\"); //~ ERROR: `compile_error` is not stable enough\n+}"}, {"sha": "12c2927917890b4cba9fdcac6896e543a5f10926", "filename": "src/test/compile-fail/not-sync.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/622e7e6487b6fb7fdbb901720cd4214f9179ed67/src%2Ftest%2Fcompile-fail%2Fnot-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622e7e6487b6fb7fdbb901720cd4214f9179ed67/src%2Ftest%2Fcompile-fail%2Fnot-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-sync.rs?ref=622e7e6487b6fb7fdbb901720cd4214f9179ed67", "patch": "@@ -10,7 +10,7 @@\n \n use std::cell::{Cell, RefCell};\n use std::rc::{Rc, Weak};\n-use std::sync::mpsc::{Receiver, Sender, SyncSender};\n+use std::sync::mpsc::{Receiver, Sender};\n \n fn test<T: Sync>() {}\n \n@@ -29,6 +29,4 @@ fn main() {\n     //~^ ERROR `std::sync::mpsc::Receiver<i32>: std::marker::Sync` is not satisfied\n     test::<Sender<i32>>();\n     //~^ ERROR `std::sync::mpsc::Sender<i32>: std::marker::Sync` is not satisfied\n-    test::<SyncSender<i32>>();\n-    //~^ ERROR `std::sync::mpsc::SyncSender<i32>: std::marker::Sync` is not satisfied\n }"}, {"sha": "d26fd6f089a4e7f1216a03a6d604bee33b2301dc", "filename": "src/tools/rls", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frls?ref=622e7e6487b6fb7fdbb901720cd4214f9179ed67", "patch": "@@ -1 +1 @@\n-Subproject commit e53e2f8d5b7f7751dd478fff68c1dbe7247cb096\n+Subproject commit d26fd6f089a4e7f1216a03a6d604bee33b2301dc"}]}