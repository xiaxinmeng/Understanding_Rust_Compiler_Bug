{"sha": "98e97a46e2201520f54082abe462728b0a770a6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZTk3YTQ2ZTIyMDE1MjBmNTQwODJhYmU0NjI3MjhiMGE3NzBhNmI=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-06-20T12:58:15Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-06-20T12:58:15Z"}, "message": "Address review comments", "tree": {"sha": "740ef8e6f59e39c422e0415435eacddca9cd1298", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/740ef8e6f59e39c422e0415435eacddca9cd1298"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98e97a46e2201520f54082abe462728b0a770a6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98e97a46e2201520f54082abe462728b0a770a6b", "html_url": "https://github.com/rust-lang/rust/commit/98e97a46e2201520f54082abe462728b0a770a6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98e97a46e2201520f54082abe462728b0a770a6b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53686b91caac6c6782b8d2a41675f4f0941aa254", "url": "https://api.github.com/repos/rust-lang/rust/commits/53686b91caac6c6782b8d2a41675f4f0941aa254", "html_url": "https://github.com/rust-lang/rust/commit/53686b91caac6c6782b8d2a41675f4f0941aa254"}], "stats": {"total": 55, "additions": 13, "deletions": 42}, "files": [{"sha": "e5ac81d8789ecbf57df0132dda9200c696680e2e", "filename": "src/libcore/ptr/const_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98e97a46e2201520f54082abe462728b0a770a6b/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e97a46e2201520f54082abe462728b0a770a6b/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fconst_ptr.rs?ref=98e97a46e2201520f54082abe462728b0a770a6b", "patch": "@@ -295,7 +295,7 @@ impl<T: ?Sized> *const T {\n         intrinsics::ptr_offset_from(self, origin)\n     }\n \n-    /// Returns whether two pointers are guaranteed equal.\n+    /// Returns whether two pointers are guaranteed to be equal.\n     ///\n     /// At runtime this function behaves like `self == other`.\n     /// However, in some contexts (e.g., compile-time evaluation),\n@@ -328,7 +328,7 @@ impl<T: ?Sized> *const T {\n         intrinsics::ptr_guaranteed_eq(self, other)\n     }\n \n-    /// Returns whether two pointers are guaranteed not equal.\n+    /// Returns whether two pointers are guaranteed to be inequal.\n     ///\n     /// At runtime this function behaves like `self != other`.\n     /// However, in some contexts (e.g., compile-time evaluation),"}, {"sha": "b8ff5b0dc72cbc206e117eccbba893dfa3a73d3b", "filename": "src/libcore/ptr/mut_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98e97a46e2201520f54082abe462728b0a770a6b/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e97a46e2201520f54082abe462728b0a770a6b/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmut_ptr.rs?ref=98e97a46e2201520f54082abe462728b0a770a6b", "patch": "@@ -273,7 +273,7 @@ impl<T: ?Sized> *mut T {\n         if self.is_null() { None } else { Some(&mut *self) }\n     }\n \n-    /// Returns whether two pointers are guaranteed equal.\n+    /// Returns whether two pointers are guaranteed to be equal.\n     ///\n     /// At runtime this function behaves like `self == other`.\n     /// However, in some contexts (e.g., compile-time evaluation),\n@@ -306,7 +306,7 @@ impl<T: ?Sized> *mut T {\n         intrinsics::ptr_guaranteed_eq(self as *const _, other as *const _)\n     }\n \n-    /// Returns whether two pointers are guaranteed not equal.\n+    /// Returns whether two pointers are guaranteed to be inequal.\n     ///\n     /// At runtime this function behaves like `self != other`.\n     /// However, in some contexts (e.g., compile-time evaluation),"}, {"sha": "c69aafe687cf819b47736a615bee8fc6b16597f3", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 9, "deletions": 38, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/98e97a46e2201520f54082abe462728b0a770a6b/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e97a46e2201520f54082abe462728b0a770a6b/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=98e97a46e2201520f54082abe462728b0a770a6b", "patch": "@@ -5946,8 +5946,7 @@ where\n     }\n }\n \n-// Remove after boostrap bump\n-#[cfg(bootstrap)]\n+// Use an equal-pointer optimization when types are `Eq`\n impl<A> SlicePartialEq<A> for [A]\n where\n     A: PartialEq<A> + Eq,\n@@ -5957,47 +5956,14 @@ where\n             return false;\n         }\n \n+        #[cfg(bootstrap)]\n         if self.as_ptr() == other.as_ptr() {\n             return true;\n         }\n \n-        self.iter().zip(other.iter()).all(|(x, y)| x == y)\n-    }\n-}\n-\n-// Remove after boostrap bump\n-#[cfg(bootstrap)]\n-impl<A> SlicePartialEq<A> for [A]\n-where\n-    A: PartialEq<A> + BytewiseEquality,\n-{\n-    fn equal(&self, other: &[A]) -> bool {\n-        if self.len() != other.len() {\n-            return false;\n-        }\n-        if self.as_ptr() == other.as_ptr() {\n-            return true;\n-        }\n-        unsafe {\n-            let size = mem::size_of_val(self);\n-            memcmp(self.as_ptr() as *const u8, other.as_ptr() as *const u8, size) == 0\n-        }\n-    }\n-}\n-\n-// Use an equal-pointer optimization when types are `Eq`\n-#[cfg(not(bootstrap))]\n-impl<A> SlicePartialEq<A> for [A]\n-where\n-    A: PartialEq<A> + Eq,\n-{\n-    default fn equal(&self, other: &[A]) -> bool {\n-        if self.len() != other.len() {\n-            return false;\n-        }\n-\n         // While performance would suffer if `guaranteed_eq` just returned `false`\n         // for all arguments, correctness and return value of this function are not affected.\n+        #[cfg(not(bootstrap))]\n         if self.as_ptr().guaranteed_eq(other.as_ptr()) {\n             return true;\n         }\n@@ -6007,7 +5973,6 @@ where\n }\n \n // Use memcmp for bytewise equality when the types allow\n-#[cfg(not(bootstrap))]\n impl<A> SlicePartialEq<A> for [A]\n where\n     A: PartialEq<A> + BytewiseEquality,\n@@ -6017,8 +5982,14 @@ where\n             return false;\n         }\n \n+        #[cfg(bootstrap)]\n+        if self.as_ptr() == other.as_ptr() {\n+            return true;\n+        }\n+\n         // While performance would suffer if `guaranteed_eq` just returned `false`\n         // for all arguments, correctness and return value of this function are not affected.\n+        #[cfg(not(bootstrap))]\n         if self.as_ptr().guaranteed_eq(other.as_ptr()) {\n             return true;\n         }"}]}