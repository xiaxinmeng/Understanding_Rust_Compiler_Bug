{"sha": "d4344969731e55bd0acaee4ad6962a85c8e0f27a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0MzQ0OTY5NzMxZTU1YmQwYWNhZWU0YWQ2OTYyYTg1YzhlMGYyN2E=", "commit": {"author": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2019-09-21T14:09:38Z"}, "committer": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2019-09-21T14:09:38Z"}, "message": "remove feature", "tree": {"sha": "1b4a61abcac2d1c6ef53290c87b7ecdc69dbf8c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b4a61abcac2d1c6ef53290c87b7ecdc69dbf8c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4344969731e55bd0acaee4ad6962a85c8e0f27a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4344969731e55bd0acaee4ad6962a85c8e0f27a", "html_url": "https://github.com/rust-lang/rust/commit/d4344969731e55bd0acaee4ad6962a85c8e0f27a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4344969731e55bd0acaee4ad6962a85c8e0f27a/comments", "author": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cf9030e1cc4c6231419f5e9f7a5bd42eb1f55c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cf9030e1cc4c6231419f5e9f7a5bd42eb1f55c1", "html_url": "https://github.com/rust-lang/rust/commit/9cf9030e1cc4c6231419f5e9f7a5bd42eb1f55c1"}], "stats": {"total": 360, "additions": 261, "deletions": 99}, "files": [{"sha": "60b88277715bc0e9f4e2c3387310eca7fc765425", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d4344969731e55bd0acaee4ad6962a85c8e0f27a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4344969731e55bd0acaee4ad6962a85c8e0f27a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=d4344969731e55bd0acaee4ad6962a85c8e0f27a", "patch": "@@ -1413,17 +1413,12 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                         .opts\n                         .debugging_opts\n                         .unleash_the_miri_inside_of_you;\n-                    let const_fn_ptr = self.tcx.features().const_fn_ptr;\n-                    if self.mode.requires_const_checking() {\n-                        if !(unleash_miri || const_fn_ptr) {\n-                            emit_feature_err(\n-                                &self.tcx.sess.parse_sess,\n-                                sym::const_fn_ptr,\n-                                self.span,\n-                                GateIssue::Language,\n-                                \"function pointers in const fn are unstable\",\n-                            );\n-                        }\n+                    if self.mode.requires_const_checking() && !unleash_miri {\n+                        let mut err = self.tcx.sess.struct_span_err(\n+                            self.span,\n+                            \"function pointers in `const fn` are unstable\",\n+                        );\n+                        err.emit();\n                     }\n                 }\n                 _ => {"}, {"sha": "dd78777b569863682447c81383ebd7f2d41ecd51", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4344969731e55bd0acaee4ad6962a85c8e0f27a/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4344969731e55bd0acaee4ad6962a85c8e0f27a/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=d4344969731e55bd0acaee4ad6962a85c8e0f27a", "patch": "@@ -405,9 +405,6 @@ declare_features! (\n     /// Allows macro invocations in `extern {}` blocks.\n     (active, macros_in_extern, \"1.27.0\", Some(49476), None),\n \n-    /// Allows calling function pointers inside `const` functions.\n-    (active, const_fn_ptr, \"1.27.0\", Some(51909), None),\n-\n     /// Allows accessing fields of unions inside `const` functions.\n     (active, const_fn_union, \"1.27.0\", Some(51909), None),\n "}, {"sha": "597ae83572cee8d924ee35294f50b421482c13b4", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4344969731e55bd0acaee4ad6962a85c8e0f27a/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4344969731e55bd0acaee4ad6962a85c8e0f27a/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=d4344969731e55bd0acaee4ad6962a85c8e0f27a", "patch": "@@ -198,7 +198,6 @@ symbols! {\n         const_compare_raw_pointers,\n         const_constructor,\n         const_fn,\n-        const_fn_ptr,\n         const_fn_union,\n         const_generics,\n         const_indexing,"}, {"sha": "498f801db81b88ad7e65e326c3bb29ed6798adb3", "filename": "src/test/ui/consts/const-eval/const_fn_ptr.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d4344969731e55bd0acaee4ad6962a85c8e0f27a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4344969731e55bd0acaee4ad6962a85c8e0f27a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.rs?ref=d4344969731e55bd0acaee4ad6962a85c8e0f27a", "patch": "@@ -1,21 +1,37 @@\n // run-pass\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n #![feature(const_fn)]\n-#![feature(const_fn_ptr)]\n \n-const fn double(x: usize) -> usize { x * 2 }\n+fn double(x: usize) -> usize { x * 2 }\n+const fn double_const(x: usize) -> usize { x * 2 }\n+\n const X: fn(usize) -> usize = double;\n+const X_const: fn(usize) -> usize = double_const;\n \n const fn bar(x: usize) -> usize {\n     X(x)\n }\n \n+const fn bar_const(x: usize) -> usize {\n+    X_const(x)\n+}\n+\n const fn foo(x: fn(usize) -> usize, y: usize)  -> usize {\n     x(y)\n }\n \n fn main() {\n-    const Y: usize = bar(2);\n+    const Y: usize = bar_const(2);\n     assert_eq!(Y, 4);\n-    const Z: usize = foo(double, 2);\n+    let y = bar_const(2);\n+    assert_eq!(y, 4);\n+    let y = bar(2);\n+    assert_eq!(y, 4);\n+\n+    const Z: usize = foo(double_const, 2);\n     assert_eq!(Z, 4);\n+    let z = foo(double_const, 2);\n+    assert_eq!(z, 4);\n+    let z = foo(double, 2);\n+    assert_eq!(z, 4);\n }"}, {"sha": "41452ee59eb941ae700203a96e62b54f0fc2d0b4", "filename": "src/test/ui/consts/const-eval/const_fn_ptr.stderr", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/d4344969731e55bd0acaee4ad6962a85c8e0f27a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4344969731e55bd0acaee4ad6962a85c8e0f27a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr?ref=d4344969731e55bd0acaee4ad6962a85c8e0f27a", "patch": "@@ -0,0 +1,152 @@\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:25:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:25:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:25:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:27:5\n+   |\n+LL |     assert_eq!(y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:27:5\n+   |\n+LL |     assert_eq!(y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:27:5\n+   |\n+LL |     assert_eq!(y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:29:5\n+   |\n+LL |     assert_eq!(y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:29:5\n+   |\n+LL |     assert_eq!(y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:29:5\n+   |\n+LL |     assert_eq!(y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:32:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:32:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:32:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:34:5\n+   |\n+LL |     assert_eq!(z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:34:5\n+   |\n+LL |     assert_eq!(z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:34:5\n+   |\n+LL |     assert_eq!(z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:36:5\n+   |\n+LL |     assert_eq!(z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:36:5\n+   |\n+LL |     assert_eq!(z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:36:5\n+   |\n+LL |     assert_eq!(z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: constant `X_const` should have an upper case name\n+  --> $DIR/const_fn_ptr.rs:9:7\n+   |\n+LL | const X_const: fn(usize) -> usize = double_const;\n+   |       ^^^^^^^ help: convert the identifier to upper case: `X_CONST`\n+   |\n+   = note: `#[warn(non_upper_case_globals)]` on by default\n+"}, {"sha": "14bd6558e7f898fb4d575ccdc7319c3db0ee9b24", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4344969731e55bd0acaee4ad6962a85c8e0f27a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4344969731e55bd0acaee4ad6962a85c8e0f27a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.rs?ref=d4344969731e55bd0acaee4ad6962a85c8e0f27a", "patch": "@@ -1,15 +1,13 @@\n // run-pass\n-\n-// FIXME: this should not pass\n-\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n #![feature(const_fn)]\n-#![feature(const_fn_ptr)]\n+#![allow(unused)]\n \n fn double(x: usize) -> usize { x * 2 }\n const X: fn(usize) -> usize = double;\n \n const fn bar(x: usize) -> usize {\n-    X(x)\n+    X(x) // FIXME: this should error someday\n }\n \n fn main() {}"}, {"sha": "b7f3a74cc44c0144222668ab730716d25b9cb4ad", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9cf9030e1cc4c6231419f5e9f7a5bd42eb1f55c1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cf9030e1cc4c6231419f5e9f7a5bd42eb1f55c1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.stderr?ref=9cf9030e1cc4c6231419f5e9f7a5bd42eb1f55c1", "patch": "@@ -1,20 +0,0 @@\n-warning: function is never used: `double`\n-  --> $DIR/const_fn_ptr_fail.rs:8:1\n-   |\n-LL | fn double(x: usize) -> usize { x * 2 }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(dead_code)]` on by default\n-\n-warning: constant item is never used: `X`\n-  --> $DIR/const_fn_ptr_fail.rs:9:1\n-   |\n-LL | const X: fn(usize) -> usize = double;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-warning: function is never used: `bar`\n-  --> $DIR/const_fn_ptr_fail.rs:11:1\n-   |\n-LL | const fn bar(x: usize) -> usize {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-"}, {"sha": "74c60f9a2a58dd20f96899bfb12e55d6be17f917", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d4344969731e55bd0acaee4ad6962a85c8e0f27a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4344969731e55bd0acaee4ad6962a85c8e0f27a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs?ref=d4344969731e55bd0acaee4ad6962a85c8e0f27a", "patch": "@@ -1,5 +1,6 @@\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n #![feature(const_fn)]\n-#![feature(const_fn_ptr)]\n+#![allow(const_err)]\n \n fn double(x: usize) -> usize { x * 2 }\n const X: fn(usize) -> usize = double;\n@@ -8,14 +9,18 @@ const fn bar(x: fn(usize) -> usize, y: usize) -> usize {\n     x(y)\n }\n \n-const Y: usize = bar(X, 2);\n-//~^ ERROR any use of this value will cause an error\n-\n-const Z: usize = bar(double, 2);\n-//~^ ERROR any use of this value will cause an error\n-\n+const Y: usize = bar(X, 2); // FIXME: should fail to typeck someday\n+const Z: usize = bar(double, 2); // FIXME: should fail to typeck someday\n \n fn main() {\n     assert_eq!(Y, 4);\n+    //~^ ERROR evaluation of constant expression failed\n+    //~^^ WARN skipping const checks\n+    //~^^^ WARN skipping const checks\n+    //~^^^^ WARN skipping const checks\n     assert_eq!(Z, 4);\n+    //~^ ERROR evaluation of constant expression failed\n+    //~^^ WARN skipping const checks\n+    //~^^^ WARN skipping const checks\n+    //~^^^^ WARN skipping const checks\n }"}, {"sha": "611cc5313c0574bebc5098909cc88d459f6f283a", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.stderr", "status": "modified", "additions": 68, "deletions": 25, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/d4344969731e55bd0acaee4ad6962a85c8e0f27a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4344969731e55bd0acaee4ad6962a85c8e0f27a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr?ref=d4344969731e55bd0acaee4ad6962a85c8e0f27a", "patch": "@@ -1,28 +1,71 @@\n-error: any use of this value will cause an error\n-  --> $DIR/const_fn_ptr_fail2.rs:8:5\n-   |\n-LL |     x(y)\n-   |     ^^^^\n-   |     |\n-   |     calling non-const function `double`\n-   |     inside call to `bar` at $DIR/const_fn_ptr_fail2.rs:11:18\n-...\n-LL | const Y: usize = bar(X, 2);\n-   | ---------------------------\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-\n-error: any use of this value will cause an error\n-  --> $DIR/const_fn_ptr_fail2.rs:8:5\n-   |\n-LL |     x(y)\n-   |     ^^^^\n-   |     |\n-   |     calling non-const function `double`\n-   |     inside call to `bar` at $DIR/const_fn_ptr_fail2.rs:14:18\n-...\n-LL | const Z: usize = bar(double, 2);\n-   | --------------------------------\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr_fail2.rs:16:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr_fail2.rs:16:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr_fail2.rs:16:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr_fail2.rs:21:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr_fail2.rs:21:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr_fail2.rs:21:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error[E0080]: evaluation of constant expression failed\n+  --> $DIR/const_fn_ptr_fail2.rs:16:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^-^^^^^\n+   |                |\n+   |                referenced constant has errors\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error[E0080]: evaluation of constant expression failed\n+  --> $DIR/const_fn_ptr_fail2.rs:21:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^-^^^^^\n+   |                |\n+   |                referenced constant has errors\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "ea1ca05c31b8f4b10bcc64cddc1adfb963242a74", "filename": "src/test/ui/consts/const-eval/feature-gate-const_fn_ptr.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9cf9030e1cc4c6231419f5e9f7a5bd42eb1f55c1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf9030e1cc4c6231419f5e9f7a5bd42eb1f55c1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_ptr.rs?ref=9cf9030e1cc4c6231419f5e9f7a5bd42eb1f55c1", "patch": "@@ -1,11 +0,0 @@\n-#![feature(const_fn)]\n-\n-fn main() {}\n-\n-const fn foo() {}\n-const X: fn() = foo;\n-\n-const fn bar() {\n-    X()\n-    //~^ ERROR function pointers in const fn are unstable\n-}"}, {"sha": "fe5956d06f2a0b7b375a6cf2370855c47850646d", "filename": "src/test/ui/consts/const-eval/feature-gate-const_fn_ptr.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9cf9030e1cc4c6231419f5e9f7a5bd42eb1f55c1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cf9030e1cc4c6231419f5e9f7a5bd42eb1f55c1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_ptr.stderr?ref=9cf9030e1cc4c6231419f5e9f7a5bd42eb1f55c1", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: function pointers in const fn are unstable\n-  --> $DIR/feature-gate-const_fn_ptr.rs:9:5\n-   |\n-LL |     X()\n-   |     ^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51909\n-   = help: add `#![feature(const_fn_ptr)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}]}