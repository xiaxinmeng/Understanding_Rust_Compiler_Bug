{"sha": "a5d3f37c5aaaaa9bc7b327ec240adf3d421ad610", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZDNmMzdjNWFhYWFhOWJjN2IzMjdlYzI0MGFkZjNkNDIxYWQ2MTA=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-01-02T21:48:44Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-01-02T21:48:44Z"}, "message": "Use compiletest's aux-build header instead of include macro", "tree": {"sha": "c80218bfa9164dab7507ec05aa71c9297a03ea9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c80218bfa9164dab7507ec05aa71c9297a03ea9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5d3f37c5aaaaa9bc7b327ec240adf3d421ad610", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlwtMdYACgkQtvoGpuDi\nZltROxAAuSZAppYIkVXnFNC3tp0lpisFPx/wry7W6kNJgNmLHgcAQMSKNRqsIxYz\n4P9EpvNL+51eASmVq4GsfoUBdol4ICRWEPB0nBdLq6+s4m298Lkp7606QUr8TvrG\nDqNviiVRwv2E2Yh22j1CGgzl5m3fKSsxpo8OuwQw7hPPANeqIis32OqhMFB33bZK\nbLX/bp9DwElzdwBK75dpyAk+sGa84FQsdea4WJrs2FmERUJvIRqpW2/YUbiam1H1\nOjHtiY53MmlLWoJnQLJhegDJlNWzPQnMmKwlrjBkQWnrw0aSljGBXQeQ7MEiBKdw\nkDR1y5jd2moA/Vk/F7bCbLs7j5a/6foOtNwTd23p4gs+jeDRXb7zv4FhgChP+dtq\nlffgUpA+Plz4K22sTieW6Fghnc+MkJm7lWipmwmiwRVTYT7LOSquhhTeTrnP8erR\nYs8jFxCcJEBCwwF8KW5rJcI/nFcVk97rUkq4maCsDsBsSiYkxi9eqcVPTA2iYHZE\ndO7sNxzBZ5wqEBMy7L1trlvxB9x5WZED1BjgNc8+JJgVfmk0ahFg3Yp7Re1kbr5d\noxVa+fEVGScwa4pSxSvCAZEEI1m0eQRfbld0Gk21i/tAA/gugXSlQJgSRokzkoQr\nEfxuEsA1gShMPndv1zhCoXq4i18vag04CaLm1J5O3P366HGruBU=\n=7NTQ\n-----END PGP SIGNATURE-----", "payload": "tree c80218bfa9164dab7507ec05aa71c9297a03ea9a\nparent c84a894ed7fa16c13a7e9395b85990cb2dacf71a\nauthor Philipp Hansch <dev@phansch.net> 1546465724 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1546465724 +0100\n\nUse compiletest's aux-build header instead of include macro\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5d3f37c5aaaaa9bc7b327ec240adf3d421ad610", "html_url": "https://github.com/rust-lang/rust/commit/a5d3f37c5aaaaa9bc7b327ec240adf3d421ad610", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5d3f37c5aaaaa9bc7b327ec240adf3d421ad610/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c84a894ed7fa16c13a7e9395b85990cb2dacf71a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c84a894ed7fa16c13a7e9395b85990cb2dacf71a", "html_url": "https://github.com/rust-lang/rust/commit/c84a894ed7fa16c13a7e9395b85990cb2dacf71a"}], "stats": {"total": 166, "additions": 87, "deletions": 79}, "files": [{"sha": "33195211968997b0794ee583e7f8f430aafbb1c6", "filename": "tests/ui/auxiliary/option_helpers.rs", "status": "renamed", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a5d3f37c5aaaaa9bc7b327ec240adf3d421ad610/tests%2Fui%2Fauxiliary%2Foption_helpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d3f37c5aaaaa9bc7b327ec240adf3d421ad610/tests%2Fui%2Fauxiliary%2Foption_helpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Foption_helpers.rs?ref=a5d3f37c5aaaaa9bc7b327ec240adf3d421ad610", "patch": "@@ -1,6 +1,9 @@\n+#![allow(dead_code, unused_variables)]\n+\n /// Utility macro to test linting behavior in `option_methods()`\n /// The lints included in `option_methods()` should not lint if the call to map is partially\n /// within a macro\n+#[macro_export]\n macro_rules! opt_map {\n     ($opt:expr, $map:expr) => {\n         ($opt).map($map)\n@@ -9,36 +12,36 @@ macro_rules! opt_map {\n \n /// Struct to generate false positive for Iterator-based lints\n #[derive(Copy, Clone)]\n-struct IteratorFalsePositives {\n-    foo: u32,\n+pub struct IteratorFalsePositives {\n+    pub foo: u32,\n }\n \n impl IteratorFalsePositives {\n-    fn filter(self) -> IteratorFalsePositives {\n+    pub fn filter(self) -> IteratorFalsePositives {\n         self\n     }\n \n-    fn next(self) -> IteratorFalsePositives {\n+    pub fn next(self) -> IteratorFalsePositives {\n         self\n     }\n \n-    fn find(self) -> Option<u32> {\n+    pub fn find(self) -> Option<u32> {\n         Some(self.foo)\n     }\n \n-    fn position(self) -> Option<u32> {\n+    pub fn position(self) -> Option<u32> {\n         Some(self.foo)\n     }\n \n-    fn rposition(self) -> Option<u32> {\n+    pub fn rposition(self) -> Option<u32> {\n         Some(self.foo)\n     }\n \n-    fn nth(self, n: usize) -> Option<u32> {\n+    pub fn nth(self, n: usize) -> Option<u32> {\n         Some(self.foo)\n     }\n \n-    fn skip(self, _: usize) -> IteratorFalsePositives {\n+    pub fn skip(self, _: usize) -> IteratorFalsePositives {\n         self\n     }\n }", "previous_filename": "tests/auxiliary/option_helpers.rs"}, {"sha": "0b9d2c368277187c2e0a9a6d69fa30d5fed92695", "filename": "tests/ui/iter_skip_next.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a5d3f37c5aaaaa9bc7b327ec240adf3d421ad610/tests%2Fui%2Fiter_skip_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d3f37c5aaaaa9bc7b327ec240adf3d421ad610/tests%2Fui%2Fiter_skip_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_skip_next.rs?ref=a5d3f37c5aaaaa9bc7b327ec240adf3d421ad610", "patch": "@@ -7,10 +7,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// aux-build:option_helpers.rs\n+\n #![warn(clippy::iter_skip_next)]\n #![allow(clippy::blacklisted_name)]\n \n-include!(\"../auxiliary/option_helpers.rs\");\n+extern crate option_helpers;\n+\n+use option_helpers::IteratorFalsePositives;\n \n /// Checks implementation of `ITER_SKIP_NEXT` lint\n fn iter_skip_next() {"}, {"sha": "037c33fbc3df491c8f3928a65a784baabc1b5717", "filename": "tests/ui/iter_skip_next.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a5d3f37c5aaaaa9bc7b327ec240adf3d421ad610/tests%2Fui%2Fiter_skip_next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5d3f37c5aaaaa9bc7b327ec240adf3d421ad610/tests%2Fui%2Fiter_skip_next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_skip_next.stderr?ref=a5d3f37c5aaaaa9bc7b327ec240adf3d421ad610", "patch": "@@ -1,25 +1,25 @@\n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-  --> $DIR/iter_skip_next.rs:18:13\n+  --> $DIR/iter_skip_next.rs:22:13\n    |\n LL |     let _ = some_vec.iter().skip(42).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::iter-skip-next` implied by `-D warnings`\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-  --> $DIR/iter_skip_next.rs:19:13\n+  --> $DIR/iter_skip_next.rs:23:13\n    |\n LL |     let _ = some_vec.iter().cycle().skip(42).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-  --> $DIR/iter_skip_next.rs:20:13\n+  --> $DIR/iter_skip_next.rs:24:13\n    |\n LL |     let _ = (1..10).skip(10).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-  --> $DIR/iter_skip_next.rs:21:14\n+  --> $DIR/iter_skip_next.rs:25:14\n    |\n LL |     let _ = &some_vec[..].iter().skip(3).next();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "fa99205d69a6824b5439c343e1718c46e1a62d6e", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a5d3f37c5aaaaa9bc7b327ec240adf3d421ad610/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d3f37c5aaaaa9bc7b327ec240adf3d421ad610/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=a5d3f37c5aaaaa9bc7b327ec240adf3d421ad610", "patch": "@@ -7,6 +7,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// aux-build:option_helpers.rs\n+\n #![warn(clippy::all, clippy::pedantic, clippy::option_unwrap_used)]\n #![allow(\n     clippy::blacklisted_name,\n@@ -22,6 +24,9 @@\n     clippy::useless_format\n )]\n \n+#[macro_use]\n+extern crate option_helpers;\n+\n use std::collections::BTreeMap;\n use std::collections::HashMap;\n use std::collections::HashSet;\n@@ -31,7 +36,7 @@ use std::iter::FromIterator;\n use std::rc::{self, Rc};\n use std::sync::{self, Arc};\n \n-include!(\"../auxiliary/option_helpers.rs\");\n+use option_helpers::IteratorFalsePositives;\n \n pub struct T;\n "}, {"sha": "ef3a4e2a423b1253b3b129ef07fb52bdb9114844", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/a5d3f37c5aaaaa9bc7b327ec240adf3d421ad610/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5d3f37c5aaaaa9bc7b327ec240adf3d421ad610/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=a5d3f37c5aaaaa9bc7b327ec240adf3d421ad610", "patch": "@@ -1,33 +1,33 @@\n error: defining a method called `add` on this type; consider implementing the `std::ops::Add` trait or choosing a less ambiguous name\n-  --> $DIR/methods.rs:39:5\n+  --> $DIR/methods.rs:44:5\n    |\n LL |     pub fn add(self, other: T) -> T { self }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::should-implement-trait` implied by `-D warnings`\n \n error: methods called `into_*` usually take self by value; consider choosing a less ambiguous name\n-  --> $DIR/methods.rs:50:17\n+  --> $DIR/methods.rs:55:17\n    |\n LL |     fn into_u16(&self) -> u16 { 0 }\n    |                 ^^^^^\n    |\n    = note: `-D clippy::wrong-self-convention` implied by `-D warnings`\n \n error: methods called `to_*` usually take self by reference; consider choosing a less ambiguous name\n-  --> $DIR/methods.rs:52:21\n+  --> $DIR/methods.rs:57:21\n    |\n LL |     fn to_something(self) -> u32 { 0 }\n    |                     ^^^^\n \n error: methods called `new` usually take no self; consider choosing a less ambiguous name\n-  --> $DIR/methods.rs:54:12\n+  --> $DIR/methods.rs:59:12\n    |\n LL |     fn new(self) -> Self { unimplemented!(); }\n    |            ^^^^\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:115:13\n+  --> $DIR/methods.rs:120:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -39,7 +39,7 @@ LL | |                .unwrap_or(0); // should lint even though this call is on\n    = note: replace `map(|x| x + 1).unwrap_or(0)` with `map_or(0, |x| x + 1)`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:119:13\n+  --> $DIR/methods.rs:124:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -49,7 +49,7 @@ LL | |               ).unwrap_or(0);\n    | |____________________________^\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:123:13\n+  --> $DIR/methods.rs:128:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -59,15 +59,15 @@ LL | |                 });\n    | |__________________^\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:128:13\n+  --> $DIR/methods.rs:133:13\n    |\n LL |     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:130:13\n+  --> $DIR/methods.rs:135:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -77,7 +77,7 @@ LL | |     ).unwrap_or(None);\n    | |_____________________^\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:134:13\n+  --> $DIR/methods.rs:139:13\n    |\n LL |       let _ = opt\n    |  _____________^\n@@ -88,7 +88,7 @@ LL | |         .unwrap_or(None);\n    = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:142:13\n+  --> $DIR/methods.rs:147:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -100,7 +100,7 @@ LL | |                .unwrap_or_else(|| 0); // should lint even though this cal\n    = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `map_or_else(|| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:146:13\n+  --> $DIR/methods.rs:151:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -110,7 +110,7 @@ LL | |               ).unwrap_or_else(|| 0);\n    | |____________________________________^\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:150:13\n+  --> $DIR/methods.rs:155:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -120,15 +120,15 @@ LL | |                 );\n    | |_________________^\n \n error: called `map_or(None, f)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:159:13\n+  --> $DIR/methods.rs:164:13\n    |\n LL |     let _ = opt.map_or(None, |x| Some(x + 1));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using and_then instead: `opt.and_then(|x| Some(x + 1))`\n    |\n    = note: `-D clippy::option-map-or-none` implied by `-D warnings`\n \n error: called `map_or(None, f)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:161:13\n+  --> $DIR/methods.rs:166:13\n    |\n LL |       let _ = opt.map_or(None, |x| {\n    |  _____________^\n@@ -144,7 +144,7 @@ LL |                        });\n    |\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:186:13\n+  --> $DIR/methods.rs:191:13\n    |\n LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -153,7 +153,7 @@ LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:189:13\n+  --> $DIR/methods.rs:194:13\n    |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^\n@@ -163,7 +163,7 @@ LL | |                    ).next();\n    | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:204:13\n+  --> $DIR/methods.rs:209:13\n    |\n LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -172,7 +172,7 @@ LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    = note: replace `find(|&x| *x < 0).is_some()` with `any(|&x| *x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:207:13\n+  --> $DIR/methods.rs:212:13\n    |\n LL |       let _ = v.iter().find(|&x| {\n    |  _____________^\n@@ -182,15 +182,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:213:13\n+  --> $DIR/methods.rs:218:13\n    |\n LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:216:13\n+  --> $DIR/methods.rs:221:13\n    |\n LL |       let _ = v.iter().position(|&x| {\n    |  _____________^\n@@ -200,15 +200,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:222:13\n+  --> $DIR/methods.rs:227:13\n    |\n LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:225:13\n+  --> $DIR/methods.rs:230:13\n    |\n LL |       let _ = v.iter().rposition(|&x| {\n    |  _____________^\n@@ -218,125 +218,125 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:260:22\n+  --> $DIR/methods.rs:265:22\n    |\n LL |     with_constructor.unwrap_or(make());\n    |                      ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(make)`\n    |\n    = note: `-D clippy::or-fun-call` implied by `-D warnings`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/methods.rs:263:5\n+  --> $DIR/methods.rs:268:5\n    |\n LL |     with_new.unwrap_or(Vec::new());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:266:21\n+  --> $DIR/methods.rs:271:21\n    |\n LL |     with_const_args.unwrap_or(Vec::with_capacity(12));\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:269:14\n+  --> $DIR/methods.rs:274:14\n    |\n LL |     with_err.unwrap_or(make());\n    |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| make())`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:272:19\n+  --> $DIR/methods.rs:277:19\n    |\n LL |     with_err_args.unwrap_or(Vec::with_capacity(12));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/methods.rs:275:5\n+  --> $DIR/methods.rs:280:5\n    |\n LL |     with_default_trait.unwrap_or(Default::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/methods.rs:278:5\n+  --> $DIR/methods.rs:283:5\n    |\n LL |     with_default_type.unwrap_or(u64::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:281:14\n+  --> $DIR/methods.rs:286:14\n    |\n LL |     with_vec.unwrap_or(vec![]);\n    |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| vec![])`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:286:21\n+  --> $DIR/methods.rs:291:21\n    |\n LL |     without_default.unwrap_or(Foo::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/methods.rs:289:19\n+  --> $DIR/methods.rs:294:19\n    |\n LL |     map.entry(42).or_insert(String::new());\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/methods.rs:292:21\n+  --> $DIR/methods.rs:297:21\n    |\n LL |     btree.entry(42).or_insert(String::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:295:21\n+  --> $DIR/methods.rs:300:21\n    |\n LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:306:23\n+  --> $DIR/methods.rs:311:23\n    |\n LL |         let bad_vec = some_vec.iter().nth(3);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::iter-nth` implied by `-D warnings`\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:307:26\n+  --> $DIR/methods.rs:312:26\n    |\n LL |         let bad_slice = &some_vec[..].iter().nth(3);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:308:31\n+  --> $DIR/methods.rs:313:31\n    |\n LL |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:309:29\n+  --> $DIR/methods.rs:314:29\n    |\n LL |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:314:23\n+  --> $DIR/methods.rs:319:23\n    |\n LL |         let bad_vec = some_vec.iter_mut().nth(3);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:317:26\n+  --> $DIR/methods.rs:322:26\n    |\n LL |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:320:29\n+  --> $DIR/methods.rs:325:29\n    |\n LL |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-  --> $DIR/methods.rs:332:13\n+  --> $DIR/methods.rs:337:13\n    |\n LL |     let _ = opt.unwrap();\n    |             ^^^^^^^^^^^^"}, {"sha": "0481e4ec1b075bc45c62147d6a503fd86312bb20", "filename": "tests/ui/result_map_unwrap_or_else.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a5d3f37c5aaaaa9bc7b327ec240adf3d421ad610/tests%2Fui%2Fresult_map_unwrap_or_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d3f37c5aaaaa9bc7b327ec240adf3d421ad610/tests%2Fui%2Fresult_map_unwrap_or_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unwrap_or_else.rs?ref=a5d3f37c5aaaaa9bc7b327ec240adf3d421ad610", "patch": "@@ -7,11 +7,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// aux-build:option_helpers.rs\n+\n //! Checks implementation of `RESULT_MAP_UNWRAP_OR_ELSE`\n \n #![warn(clippy::result_map_unwrap_or_else)]\n \n-include!(\"../auxiliary/option_helpers.rs\");\n+#[macro_use]\n+extern crate option_helpers;\n \n fn result_methods() {\n     let res: Result<i32, ()> = Ok(1);"}, {"sha": "9f03de669e4c48003e4330664ee648b2e6d7ecdc", "filename": "tests/ui/result_map_unwrap_or_else.stderr", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a5d3f37c5aaaaa9bc7b327ec240adf3d421ad610/tests%2Fui%2Fresult_map_unwrap_or_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5d3f37c5aaaaa9bc7b327ec240adf3d421ad610/tests%2Fui%2Fresult_map_unwrap_or_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unwrap_or_else.stderr?ref=a5d3f37c5aaaaa9bc7b327ec240adf3d421ad610", "patch": "@@ -1,34 +1,27 @@\n error: called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling `ok().map_or_else(g, f)` instead\n-  --> $DIR/result_map_unwrap_or_else.rs:21:13\n+  --> $DIR/result_map_unwrap_or_else.rs:24:13\n    |\n-LL |       let _ = res.map(|x| x + 1)\n-   |  _____________^\n-LL | |\n-LL | |                .unwrap_or_else(|e| 0); // should lint even though this call is on a separate line\n-   | |_____________________________________^\n+LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0); // should lint even though this call is on a separate line\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::result-map-unwrap-or-else` implied by `-D warnings`\n    = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `ok().map_or_else(|e| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling `ok().map_or_else(g, f)` instead\n-  --> $DIR/result_map_unwrap_or_else.rs:25:13\n+  --> $DIR/result_map_unwrap_or_else.rs:26:13\n    |\n-LL |       let _ = res.map(|x| {\n-   |  _____________^\n-LL | |                         x + 1\n-LL | |                     }\n-LL | |               ).unwrap_or_else(|e| 0);\n-   | |_____________________________________^\n+LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `ok().map_or_else(|e| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling `ok().map_or_else(g, f)` instead\n-  --> $DIR/result_map_unwrap_or_else.rs:29:13\n+  --> $DIR/result_map_unwrap_or_else.rs:27:13\n    |\n-LL |       let _ = res.map(|x| x + 1)\n-   |  _____________^\n-LL | |                .unwrap_or_else(|e|\n-LL | |                     0\n-LL | |                 );\n-   | |_________________^\n+LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `ok().map_or_else(|e| 0, |x| x + 1)`\n \n error: aborting due to 3 previous errors\n "}]}