{"sha": "c2fe69b9bd410885b51d034628e0403e882689da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZmU2OWI5YmQ0MTA4ODViNTFkMDM0NjI4ZTA0MDNlODgyNjg5ZGE=", "commit": {"author": {"name": "Daniel Klauer", "email": "daniel.c.klauer@web.de", "date": "2017-09-21T22:36:10Z"}, "committer": {"name": "Daniel Klauer", "email": "daniel.c.klauer@web.de", "date": "2017-09-28T20:06:54Z"}, "message": "rustc: Fix main() entry point signature on 64bit\n\nTo match the C signature, main() should be generated with C int type\nfor the argc parameter and result, i.e. i32 instead of i64 on 64bit.\n\nThat way it no longer relies on the upper 32 bits being zero, which I'm\nnot sure is guaranteed by ABIs or startup code.", "tree": {"sha": "2b035ecae3f7f8f3e5a671abf099015cc3018f38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b035ecae3f7f8f3e5a671abf099015cc3018f38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2fe69b9bd410885b51d034628e0403e882689da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2fe69b9bd410885b51d034628e0403e882689da", "html_url": "https://github.com/rust-lang/rust/commit/c2fe69b9bd410885b51d034628e0403e882689da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2fe69b9bd410885b51d034628e0403e882689da/comments", "author": {"login": "dkl", "id": 212549, "node_id": "MDQ6VXNlcjIxMjU0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/212549?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkl", "html_url": "https://github.com/dkl", "followers_url": "https://api.github.com/users/dkl/followers", "following_url": "https://api.github.com/users/dkl/following{/other_user}", "gists_url": "https://api.github.com/users/dkl/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkl/subscriptions", "organizations_url": "https://api.github.com/users/dkl/orgs", "repos_url": "https://api.github.com/users/dkl/repos", "events_url": "https://api.github.com/users/dkl/events{/privacy}", "received_events_url": "https://api.github.com/users/dkl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkl", "id": 212549, "node_id": "MDQ6VXNlcjIxMjU0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/212549?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkl", "html_url": "https://github.com/dkl", "followers_url": "https://api.github.com/users/dkl/followers", "following_url": "https://api.github.com/users/dkl/following{/other_user}", "gists_url": "https://api.github.com/users/dkl/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkl/subscriptions", "organizations_url": "https://api.github.com/users/dkl/orgs", "repos_url": "https://api.github.com/users/dkl/repos", "events_url": "https://api.github.com/users/dkl/events{/privacy}", "received_events_url": "https://api.github.com/users/dkl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c9a4ba8eb2badef6f1ff040e61e4fe494585d79", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c9a4ba8eb2badef6f1ff040e61e4fe494585d79", "html_url": "https://github.com/rust-lang/rust/commit/6c9a4ba8eb2badef6f1ff040e61e4fe494585d79"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "306a2d44270333fca501779d36764708273cc9b2", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c2fe69b9bd410885b51d034628e0403e882689da/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fe69b9bd410885b51d034628e0403e882689da/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=c2fe69b9bd410885b51d034628e0403e882689da", "patch": "@@ -77,7 +77,6 @@ use value::Value;\n use rustc::util::nodemap::{NodeSet, FxHashMap, FxHashSet, DefIdSet};\n use CrateInfo;\n \n-use libc::c_uint;\n use std::any::Any;\n use std::cell::RefCell;\n use std::ffi::{CStr, CString};\n@@ -692,7 +691,8 @@ fn maybe_create_entry_wrapper(ccx: &CrateContext) {\n                        sp: Span,\n                        rust_main: ValueRef,\n                        use_start_lang_item: bool) {\n-        let llfty = Type::func(&[ccx.isize_ty(), Type::i8p(ccx).ptr_to()], &ccx.isize_ty());\n+        // Signature of native main(), corresponding to C's `int main(int, char **)`\n+        let llfty = Type::func(&[Type::c_int(ccx), Type::i8p(ccx).ptr_to()], &Type::c_int(ccx));\n \n         if declare::get_defined_value(ccx, \"main\").is_some() {\n             // FIXME: We should be smart and show a better diagnostic here.\n@@ -711,19 +711,27 @@ fn maybe_create_entry_wrapper(ccx: &CrateContext) {\n \n         debuginfo::gdb::insert_reference_to_gdb_debug_scripts_section_global(ccx, &bld);\n \n+        // Params from native main() used as args for rust start function\n+        let param_argc = get_param(llfn, 0);\n+        let param_argv = get_param(llfn, 1);\n+        let arg_argc = bld.intcast(param_argc, ccx.isize_ty(), true);\n+        let arg_argv = param_argv;\n+\n         let (start_fn, args) = if use_start_lang_item {\n             let start_def_id = ccx.tcx().require_lang_item(StartFnLangItem);\n             let start_instance = Instance::mono(ccx.tcx(), start_def_id);\n             let start_fn = callee::get_fn(ccx, start_instance);\n-            (start_fn, vec![bld.pointercast(rust_main, Type::i8p(ccx).ptr_to()), get_param(llfn, 0),\n-                get_param(llfn, 1)])\n+            (start_fn, vec![bld.pointercast(rust_main, Type::i8p(ccx).ptr_to()),\n+                            arg_argc, arg_argv])\n         } else {\n             debug!(\"using user-defined start fn\");\n-            (rust_main, vec![get_param(llfn, 0 as c_uint), get_param(llfn, 1 as c_uint)])\n+            (rust_main, vec![arg_argc, arg_argv])\n         };\n \n         let result = bld.call(start_fn, &args, None);\n-        bld.ret(result);\n+\n+        // Return rust start function's result from native main()\n+        bld.ret(bld.intcast(result, Type::c_int(ccx), true));\n     }\n }\n "}]}