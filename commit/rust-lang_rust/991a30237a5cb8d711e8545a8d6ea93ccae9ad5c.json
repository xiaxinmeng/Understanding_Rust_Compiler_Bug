{"sha": "991a30237a5cb8d711e8545a8d6ea93ccae9ad5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MWEzMDIzN2E1Y2I4ZDcxMWU4NTQ1YThkNmVhOTNjY2FlOWFkNWM=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-04-08T07:48:49Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-04-15T11:01:09Z"}, "message": "Make it compile again", "tree": {"sha": "11b084c5b2636e64165b0917b9d4316f479d39a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11b084c5b2636e64165b0917b9d4316f479d39a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/991a30237a5cb8d711e8545a8d6ea93ccae9ad5c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJa0zD1AAoJELb6Bqbg4mZbMDIP/jJfThJAZ9ahsjSIUMc+zAAR\ndG2PgT9ih7XJuzpqzd6vFGmsR9csUR8TBHzHwNF4fFtWRfIaBZ/aCuw5jqYT4Z47\nzjhhwma7htyBNZ4Lzgb9SJvmTc3jlyzFnS6mmoripMoiE6hekBPyrDUENuo4p+eP\n4dQzwSajOgs/a8/OrYB5ClMEfdfY1FJEuvjCycAmUObtU1tKB8oONnsngOrmzDao\nvJQT3HWE+nynYfVLc8Wek99j5UmrAF9ZJSePrdUnwFT+XE1nKuuE7yZaQCAmDfnq\nQr9/uQyeERJ57Buo1T1FdNGmCsHbMzxxBT1GRE63DfG6UZIK7dGSjOWvcJal6DQc\nPpgcYcgbMuC3vE7VG+YbEf92IGp/QpxVnQaFt9moVUwJBP2OhSiATJAiQK/ZUZU/\nq+f5BZVahI+EaBtx4rcic5MLHOT+MHSjb/ewjDpQFrXrl9zF/27AEaStv3arDNoI\nVrEtQRnXVrErUOwy5yH/gmdHjYv4cvLS9o9a4GdIkhp1FqZJ1z6CaseroxzgJlQ1\nbse+dzeeDUZ7pkFs6u4eu7gUnA5xzOh3/Hngq16HW6r/iPMwmS1RYBx5Xce0CCh5\nNM6j5fCeF1lK3B0M51sAQMM96tmmUQJVajg6enzkHH7iCz5f4D2uPvmS+f6fptEN\n9fLYDlYc8+10z+tOY5uT\n=G+qR\n-----END PGP SIGNATURE-----", "payload": "tree 11b084c5b2636e64165b0917b9d4316f479d39a8\nparent d0bdfe5ce303ded6b499e60bf4e4d4756b85939f\nauthor Philipp Hansch <dev@phansch.net> 1523173729 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1523790069 +0200\n\nMake it compile again\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/991a30237a5cb8d711e8545a8d6ea93ccae9ad5c", "html_url": "https://github.com/rust-lang/rust/commit/991a30237a5cb8d711e8545a8d6ea93ccae9ad5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/991a30237a5cb8d711e8545a8d6ea93ccae9ad5c/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0bdfe5ce303ded6b499e60bf4e4d4756b85939f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0bdfe5ce303ded6b499e60bf4e4d4756b85939f", "html_url": "https://github.com/rust-lang/rust/commit/d0bdfe5ce303ded6b499e60bf4e4d4756b85939f"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "13ac1fe2294606eb960a9f0309ebf8beffe50382", "filename": "clippy_lints/src/map_nil_fn.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/991a30237a5cb8d711e8545a8d6ea93ccae9ad5c/clippy_lints%2Fsrc%2Fmap_nil_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991a30237a5cb8d711e8545a8d6ea93ccae9ad5c/clippy_lints%2Fsrc%2Fmap_nil_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_nil_fn.rs?ref=991a30237a5cb8d711e8545a8d6ea93ccae9ad5c", "patch": "@@ -56,8 +56,8 @@ fn is_nil_type(ty: ty::Ty) -> bool {\n fn is_nil_function(cx: &LateContext, expr: &hir::Expr) -> bool {\n     let ty = cx.tables.expr_ty(expr);\n \n-    if let ty::TyFnDef(_, _, bare) = ty.sty {\n-        if let Some(fn_type) = cx.tcx.no_late_bound_regions(&bare.sig) {\n+    if let ty::TyFnDef(id, _) = ty.sty {\n+        if let Some(fn_type) = cx.tcx.fn_sig(id).no_late_bound_regions() {\n             return is_nil_type(fn_type.output());\n         }\n     }\n@@ -115,17 +115,18 @@ fn reduce_nil_expression<'a>(cx: &LateContext, expr: &'a hir::Expr) -> Option<Sp\n }\n \n fn nil_closure<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'a hir::Expr) -> Option<(&'tcx hir::Arg, &'a hir::Expr)> {\n-    if let hir::ExprClosure(_, ref decl, inner_expr_id, _) = expr.node {\n-        let body = cx.tcx.map.body(inner_expr_id);\n+    if let hir::ExprClosure(_, ref decl, inner_expr_id, _, _) = expr.node {\n+        let body = cx.tcx.hir.body(inner_expr_id);\n         let body_expr = &body.value;\n \n-        if_let_chain! {[\n-            decl.inputs.len() == 1,\n-            is_nil_expression(cx, body_expr),\n-            let Some(binding) = iter_input_pats(&decl, body).next(),\n-        ], {\n-            return Some((binding, body_expr))\n-        }}\n+        if_chain! {\n+            if decl.inputs.len() == 1;\n+            if is_nil_expression(cx, body_expr);\n+            if let Some(binding) = iter_input_pats(&decl, body).next();\n+            then {\n+                return Some((binding, body_expr));\n+            }\n+        }\n     }\n     None\n }\n@@ -172,7 +173,7 @@ fn lint_map_nil_fn(cx: &LateContext, stmt: &hir::Stmt, expr: &hir::Expr, map_arg\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_stmt(&mut self, cx: &LateContext, stmt: &hir::Stmt) {\n-        if in_macro(cx, stmt.span) {\n+        if in_macro(stmt.span) {\n             return;\n         }\n "}]}