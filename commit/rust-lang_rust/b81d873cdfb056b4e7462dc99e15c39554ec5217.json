{"sha": "b81d873cdfb056b4e7462dc99e15c39554ec5217", "node_id": "C_kwDOAAsO6NoAKGI4MWQ4NzNjZGZiMDU2YjRlNzQ2MmRjOTllMTVjMzk1NTRlYzUyMTc", "commit": {"author": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2022-04-02T15:26:39Z"}, "committer": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2022-04-02T15:26:39Z"}, "message": "Address review comments and add a test", "tree": {"sha": "7bde7cf69c212bda0f72b8ac8cf014c9e1f0dfd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bde7cf69c212bda0f72b8ac8cf014c9e1f0dfd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b81d873cdfb056b4e7462dc99e15c39554ec5217", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEg8FrwI85f934CWFa28VT5UDC9hkFAmJIay8ACgkQ28VT5UDC\n9hlhPgv+I2+TtX0Qw4Di47ASnLJsTNdY4zz8qO5J7alBKUyM1M2jBShE/PFIfMVn\nyKzKiQFjvwQIQy7GWmaADIVNNklnTOFX1dNANLTq8TqvqcZ73D1e+8rCPhKVn1fv\npXP1k+41JQcPimLkaflKQGnQy3EqOEIZGoTXgaN59KroVQ2cTEwV9y5l1L5MpcaN\nLqH3OUW/vOXlSGfrB38xYZzwxYyiclTqd56SIhYTpzf7yd143HuHd6wkspxc9iKk\nw4PIWqS4EfS4hd/UFjm2r4ztYQlq/y83qf20XLSC4ia+sNj3NxjoiM3VwkBJLZe3\nJu5uYMrqSO6INOFRT20jDAC/VuWHlTEmu85UBLkklVklCKGVKU+z0JtFTF8emFYJ\n1BS2F3LEaZNR6dx/RrwBQty1AzuwkSBTWz/ssWlLSUvu6XBJ+8dbkGf5xD7VVTKV\nf4LRN2ly+VC06N5V59ymz/yzZwLSBHrwBpTtxjg++IL8qRm9mOr3YjCpZJYy+h1N\nlMGXX90W\n=HKkV\n-----END PGP SIGNATURE-----", "payload": "tree 7bde7cf69c212bda0f72b8ac8cf014c9e1f0dfd2\nparent e0d42266770dcdb3578a2ea7e14ee91967156a2e\nauthor Jakub Ber\u00e1nek <berykubik@gmail.com> 1648913199 +0200\ncommitter Jakub Ber\u00e1nek <berykubik@gmail.com> 1648913199 +0200\n\nAddress review comments and add a test\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b81d873cdfb056b4e7462dc99e15c39554ec5217", "html_url": "https://github.com/rust-lang/rust/commit/b81d873cdfb056b4e7462dc99e15c39554ec5217", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b81d873cdfb056b4e7462dc99e15c39554ec5217/comments", "author": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0d42266770dcdb3578a2ea7e14ee91967156a2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0d42266770dcdb3578a2ea7e14ee91967156a2e", "html_url": "https://github.com/rust-lang/rust/commit/e0d42266770dcdb3578a2ea7e14ee91967156a2e"}], "stats": {"total": 45, "additions": 38, "deletions": 7}, "files": [{"sha": "a2d60472ed9ed86bba9a0ebc43ac1e8341acf3ed", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b81d873cdfb056b4e7462dc99e15c39554ec5217/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b81d873cdfb056b4e7462dc99e15c39554ec5217/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=b81d873cdfb056b4e7462dc99e15c39554ec5217", "patch": "@@ -29,12 +29,12 @@ use rustc_hir::LangItem;\n use rustc_middle::dep_graph::WorkProduct;\n use rustc_middle::middle::dependency_format::Dependencies;\n use rustc_middle::ty::query::{ExternProviders, Providers};\n+use rustc_serialize::{opaque, Decodable, Decoder, Encoder};\n use rustc_session::config::{CrateType, OutputFilenames, OutputType, RUST_CGU_EXT};\n use rustc_session::cstore::{self, CrateSource};\n use rustc_session::utils::NativeLibKind;\n use rustc_span::symbol::Symbol;\n use std::path::{Path, PathBuf};\n-use rustc_serialize::{Decodable, Decoder, Encoder, opaque};\n \n pub mod back;\n pub mod base;\n@@ -192,13 +192,18 @@ pub fn looks_like_rust_object_file(filename: &str) -> bool {\n     ext2 == Some(RUST_CGU_EXT)\n }\n \n-const RLINK_MAGIC: &'static [u8; 5] = b\"rlink\";\n+const RLINK_VERSION: u32 = 1;\n+const RLINK_MAGIC: &[u8] = b\"rustlink\";\n+\n const RUSTC_VERSION: Option<&str> = option_env!(\"CFG_VERSION\");\n \n impl CodegenResults {\n     pub fn serialize_rlink(codegen_results: &CodegenResults) -> Vec<u8> {\n         let mut encoder = opaque::Encoder::new(vec![]);\n         encoder.emit_raw_bytes(RLINK_MAGIC).unwrap();\n+        // `emit_raw_bytes` is used to make sure that the version representation does not depend on\n+        // Encoder's inner representation of `u32`.\n+        encoder.emit_raw_bytes(&RLINK_VERSION.to_be_bytes()).unwrap();\n         encoder.emit_str(RUSTC_VERSION.unwrap()).unwrap();\n \n         let mut encoder = rustc_serialize::opaque::Encoder::new(encoder.into_inner());\n@@ -207,14 +212,29 @@ impl CodegenResults {\n     }\n \n     pub fn deserialize_rlink(data: Vec<u8>) -> Result<Self, String> {\n+        // The Decodable machinery is not used here because it panics if the input data is invalid\n+        // and because its internal representation may change.\n         if !data.starts_with(RLINK_MAGIC) {\n             return Err(\"The input does not look like a .rlink file\".to_string());\n         }\n-        let mut decoder = opaque::Decoder::new(&data[RLINK_MAGIC.len()..], 0);\n+        let data = &data[RLINK_MAGIC.len()..];\n+        if data.len() < 4 {\n+            return Err(\"The input does not contain version number\".to_string());\n+        }\n+\n+        let mut version_array: [u8; 4] = Default::default();\n+        version_array.copy_from_slice(&data[..4]);\n+        if u32::from_be_bytes(version_array) != RLINK_VERSION {\n+            return Err(\".rlink file was produced with encoding version {version_array}, but the current version is {RLINK_VERSION}\".to_string());\n+        }\n+\n+        let mut decoder = opaque::Decoder::new(&data[4..], 0);\n         let rustc_version = decoder.read_str();\n         let current_version = RUSTC_VERSION.unwrap();\n         if rustc_version != current_version {\n-            return Err(format!(\".rlink file was produced by rustc version {rustc_version}, but the current version is {current_version}.\"));\n+            return Err(format!(\n+                \".rlink file was produced by rustc version {rustc_version}, but the current version is {current_version}.\"\n+            ));\n         }\n \n         let codegen_results = CodegenResults::decode(&mut decoder);"}, {"sha": "69f96d07f905dde6bb14a3c597426d2b0a255e53", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b81d873cdfb056b4e7462dc99e15c39554ec5217/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b81d873cdfb056b4e7462dc99e15c39554ec5217/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=b81d873cdfb056b4e7462dc99e15c39554ec5217", "patch": "@@ -588,8 +588,12 @@ pub fn try_process_rlink(sess: &Session, compiler: &interface::Compiler) -> Comp\n             let rlink_data = fs::read(file).unwrap_or_else(|err| {\n                 sess.fatal(&format!(\"failed to read rlink file: {}\", err));\n             });\n-            let codegen_results = CodegenResults::deserialize_rlink(rlink_data)\n-                .expect(\"Could not deserialize .rlink file\");\n+            let codegen_results = match CodegenResults::deserialize_rlink(rlink_data) {\n+                Ok(codegen) => codegen,\n+                Err(error) => {\n+                    sess.fatal(&format!(\"Could not deserialize .rlink file: {error}\"));\n+                }\n+            };\n             let result = compiler.codegen_backend().link(sess, codegen_results, &outputs);\n             abort_on_err(result, sess);\n         } else {"}, {"sha": "22ab62ac372f218b97cbcad9de86929075f645e6", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b81d873cdfb056b4e7462dc99e15c39554ec5217/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b81d873cdfb056b4e7462dc99e15c39554ec5217/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=b81d873cdfb056b4e7462dc99e15c39554ec5217", "patch": "@@ -3,6 +3,7 @@ use crate::passes::{self, BoxedResolver, QueryContext};\n \n use rustc_ast as ast;\n use rustc_codegen_ssa::traits::CodegenBackend;\n+use rustc_codegen_ssa::CodegenResults;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n use rustc_hir::def_id::LOCAL_CRATE;\n@@ -18,7 +19,6 @@ use rustc_span::symbol::sym;\n use std::any::Any;\n use std::cell::{Ref, RefCell, RefMut};\n use std::rc::Rc;\n-use rustc_codegen_ssa::CodegenResults;\n \n /// Represent the result of a query.\n ///"}, {"sha": "c759f42a2351e4e9a53d2a589ad56cee81fed244", "filename": "src/test/run-make-fulldeps/separate-link-fail/Makefile", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b81d873cdfb056b4e7462dc99e15c39554ec5217/src%2Ftest%2Frun-make-fulldeps%2Fseparate-link-fail%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b81d873cdfb056b4e7462dc99e15c39554ec5217/src%2Ftest%2Frun-make-fulldeps%2Fseparate-link-fail%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fseparate-link-fail%2FMakefile?ref=b81d873cdfb056b4e7462dc99e15c39554ec5217", "patch": "@@ -0,0 +1,7 @@\n+-include ../tools.mk\n+\n+all:\n+\techo 'fn main(){}' > $(TMPDIR)/main.rs\n+\t# Make sure that this fails\n+\t! $(RUSTC) -Z link-only $(TMPDIR)/main.rs 2> $(TMPDIR)/stderr.txt\n+\t$(CGREP) \"The input does not look like a .rlink file\" < $(TMPDIR)/stderr.txt"}]}