{"sha": "af033ea428bd469c027d771a9c9fa34485ac495c", "node_id": "C_kwDOAAsO6NoAKGFmMDMzZWE0MjhiZDQ2OWMwMjdkNzcxYTljOWZhMzQ0ODVhYzQ5NWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-18T02:03:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-18T02:03:30Z"}, "message": "Auto merge of #2492 - RalfJung:tests, r=RalfJung\n\norganize shim tests into shims folder, and various test suite tweaks", "tree": {"sha": "4c0f1fa8e6fcc84f4438d415cd42c68c915c13ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c0f1fa8e6fcc84f4438d415cd42c68c915c13ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af033ea428bd469c027d771a9c9fa34485ac495c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af033ea428bd469c027d771a9c9fa34485ac495c", "html_url": "https://github.com/rust-lang/rust/commit/af033ea428bd469c027d771a9c9fa34485ac495c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af033ea428bd469c027d771a9c9fa34485ac495c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8f617897a66953b9026c02f7a8f93a2e9611f63", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8f617897a66953b9026c02f7a8f93a2e9611f63", "html_url": "https://github.com/rust-lang/rust/commit/b8f617897a66953b9026c02f7a8f93a2e9611f63"}, {"sha": "ed41f1c96980ed26512e10e39406d8c91033a9e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed41f1c96980ed26512e10e39406d8c91033a9e7", "html_url": "https://github.com/rust-lang/rust/commit/ed41f1c96980ed26512e10e39406d8c91033a9e7"}], "stats": {"total": 346, "additions": 128, "deletions": 218}, "files": [{"sha": "065ad2d725f8f96e45fa81ecba42365c9ac7960a", "filename": "tests/fail/concurrency/libc_pthread_create_main_terminate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fconcurrency%2Flibc_pthread_create_main_terminate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fconcurrency%2Flibc_pthread_create_main_terminate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_create_main_terminate.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -3,8 +3,6 @@\n \n // Check that we terminate the program when the main thread terminates.\n \n-#![feature(rustc_private)]\n-\n use std::{mem, ptr};\n \n extern \"C\" fn thread_start(_null: *mut libc::c_void) -> *mut libc::c_void {"}, {"sha": "488b14bbcfa859d77643640e306127cd3a7111b5", "filename": "tests/fail/concurrency/libc_pthread_join_detached.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_detached.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_detached.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_detached.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -2,8 +2,6 @@\n \n // Joining a detached thread is undefined behavior.\n \n-#![feature(rustc_private)]\n-\n use std::{mem, ptr};\n \n extern \"C\" fn thread_start(_null: *mut libc::c_void) -> *mut libc::c_void {"}, {"sha": "ebd1710bbf22679d771660d490c508d951d74bcb", "filename": "tests/fail/concurrency/libc_pthread_join_joined.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_joined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_joined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_joined.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -2,8 +2,6 @@\n \n // Joining an already joined thread is undefined behavior.\n \n-#![feature(rustc_private)]\n-\n use std::{mem, ptr};\n \n extern \"C\" fn thread_start(_null: *mut libc::c_void) -> *mut libc::c_void {"}, {"sha": "df6b520431b6a759bb63e11ad7d384cdad22564e", "filename": "tests/fail/concurrency/libc_pthread_join_main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_main.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -2,8 +2,6 @@\n \n // Joining the main thread is undefined behavior.\n \n-#![feature(rustc_private)]\n-\n use std::{ptr, thread};\n \n fn main() {"}, {"sha": "e5187093befdefbfbedb6a99bd7b6b918a32bf05", "filename": "tests/fail/concurrency/libc_pthread_join_multiple.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_multiple.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -2,8 +2,6 @@\n \n // Joining the same thread from multiple threads is undefined behavior.\n \n-#![feature(rustc_private)]\n-\n use std::thread;\n use std::{mem, ptr};\n "}, {"sha": "0c25c690f3721db32266b2e91d7b1f6ee04457e8", "filename": "tests/fail/concurrency/libc_pthread_join_self.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_self.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -4,8 +4,6 @@\n \n // Joining itself is undefined behavior.\n \n-#![feature(rustc_private)]\n-\n use std::{ptr, thread};\n \n fn main() {"}, {"sha": "43c7c74d410f574b1c41474e05541e0436383a38", "filename": "tests/fail/concurrency/too_few_args.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fconcurrency%2Ftoo_few_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fconcurrency%2Ftoo_few_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Ftoo_few_args.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -2,8 +2,6 @@\n \n //! The thread function must have exactly one argument.\n \n-#![feature(rustc_private)]\n-\n use std::{mem, ptr};\n \n extern \"C\" fn thread_start() -> *mut libc::c_void {"}, {"sha": "d660037ca6695842b2974eb5d28df0797d4c0341", "filename": "tests/fail/concurrency/too_many_args.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fconcurrency%2Ftoo_many_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fconcurrency%2Ftoo_many_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Ftoo_many_args.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -2,8 +2,6 @@\n \n //! The thread function must have exactly one argument.\n \n-#![feature(rustc_private)]\n-\n use std::{mem, ptr};\n \n extern \"C\" fn thread_start(_null: *mut libc::c_void, _x: i32) -> *mut libc::c_void {"}, {"sha": "c2b9d56e19c92fd29f8ba322c265f4d03c40d68d", "filename": "tests/fail/concurrency/unwind_top_of_stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -3,7 +3,7 @@\n \n //! Unwinding past the top frame of a stack is Undefined Behavior.\n \n-#![feature(rustc_private, c_unwind)]\n+#![feature(c_unwind)]\n \n use std::{mem, ptr};\n "}, {"sha": "97a70103e646166e6dd6673401f67da490e3d496", "filename": "tests/fail/shims/backtrace/bad-backtrace-decl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-decl.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/backtrace/bad-backtrace-decl.rs"}, {"sha": "3cb4a8e8a4589ea511d0a7865c7f70f74ca9d449", "filename": "tests/fail/shims/backtrace/bad-backtrace-decl.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-decl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-decl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-decl.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/backtrace/bad-backtrace-decl.stderr"}, {"sha": "a4e186eaa98a42c992c847dc3b45842957a8db8d", "filename": "tests/fail/shims/backtrace/bad-backtrace-flags.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-flags.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/backtrace/bad-backtrace-flags.rs"}, {"sha": "f186fb1e571791c564dd45aa41a9200aa00855bb", "filename": "tests/fail/shims/backtrace/bad-backtrace-flags.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-flags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-flags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-flags.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/backtrace/bad-backtrace-flags.stderr"}, {"sha": "843d0d11873d295e9d959e9301590ef2eebc282f", "filename": "tests/fail/shims/backtrace/bad-backtrace-ptr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-ptr.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/backtrace/bad-backtrace-ptr.rs"}, {"sha": "72755afb34a7c61217f9614f5dcb621128043dd7", "filename": "tests/fail/shims/backtrace/bad-backtrace-ptr.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-ptr.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/backtrace/bad-backtrace-ptr.stderr"}, {"sha": "31e3915f3d64fa478597aa04c2459a7596ebbe9e", "filename": "tests/fail/shims/backtrace/bad-backtrace-resolve-flags.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-resolve-flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-resolve-flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-resolve-flags.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/backtrace/bad-backtrace-resolve-flags.rs"}, {"sha": "cf80488de22dd914862202a1dfb884ec63e3a45d", "filename": "tests/fail/shims/backtrace/bad-backtrace-resolve-flags.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-resolve-flags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-resolve-flags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-resolve-flags.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/backtrace/bad-backtrace-resolve-flags.stderr"}, {"sha": "44c3c025043b6c11355ec5070a05c53da3067b75", "filename": "tests/fail/shims/backtrace/bad-backtrace-resolve-names-flags.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/backtrace/bad-backtrace-resolve-names-flags.rs"}, {"sha": "c7e0d41009ad0d2f82a7c17daf8b47511c237a38", "filename": "tests/fail/shims/backtrace/bad-backtrace-resolve-names-flags.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/backtrace/bad-backtrace-resolve-names-flags.stderr"}, {"sha": "bba74c71a5e8f47addf4a053ee640661a0e68129", "filename": "tests/fail/shims/backtrace/bad-backtrace-size-flags.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-size-flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-size-flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-size-flags.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/backtrace/bad-backtrace-size-flags.rs"}, {"sha": "0cfe5d7173ce1b241ed58609e94a7672fe9a0975", "filename": "tests/fail/shims/backtrace/bad-backtrace-size-flags.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-size-flags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-size-flags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-size-flags.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/backtrace/bad-backtrace-size-flags.stderr"}, {"sha": "09da8509af41207a9bfb1a82301823e938c3a3c4", "filename": "tests/fail/shims/fs/close_stdout.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Ffs%2Fclose_stdout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Ffs%2Fclose_stdout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Ffs%2Fclose_stdout.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -3,8 +3,6 @@\n \n // FIXME: standard handles cannot be closed (https://github.com/rust-lang/rust/issues/40032)\n \n-#![feature(rustc_private)]\n-\n fn main() {\n     unsafe {\n         libc::close(1); //~ ERROR: cannot close stdout", "previous_filename": "tests/fail/fs/close_stdout.rs"}, {"sha": "eb2c54e05f1fa7ca102b489d64a7229ef89ab137", "filename": "tests/fail/shims/fs/close_stdout.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Ffs%2Fclose_stdout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Ffs%2Fclose_stdout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Ffs%2Fclose_stdout.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/fs/close_stdout.stderr"}, {"sha": "9b664ffe52acdc59eed761563cc1dbf8a2447a7b", "filename": "tests/fail/shims/fs/isolated_file.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Ffs%2Fisolated_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Ffs%2Fisolated_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Ffs%2Fisolated_file.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/fs/isolated_file.rs"}, {"sha": "e75d7b7c3d93bb2b3c004bc3493a5bb1831d9383", "filename": "tests/fail/shims/fs/isolated_file.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Ffs%2Fisolated_file.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Ffs%2Fisolated_file.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Ffs%2Fisolated_file.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/fs/isolated_file.stderr"}, {"sha": "a45f805696d4937aced28f0c36cda930c4292e0e", "filename": "tests/fail/shims/fs/isolated_stdin.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Ffs%2Fisolated_stdin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Ffs%2Fisolated_stdin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Ffs%2Fisolated_stdin.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,7 +1,5 @@\n //@ignore-target-windows: No libc on Windows\n \n-#![feature(rustc_private)]\n-\n fn main() -> std::io::Result<()> {\n     let mut bytes = [0u8; 512];\n     unsafe {", "previous_filename": "tests/fail/fs/isolated_stdin.rs"}, {"sha": "fe9700f07b3962b3c7fa3b17e57091d059057262", "filename": "tests/fail/shims/fs/isolated_stdin.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Ffs%2Fisolated_stdin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Ffs%2Fisolated_stdin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Ffs%2Fisolated_stdin.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/fs/isolated_stdin.stderr"}, {"sha": "ba9f404d7c9ac3ab55783915c806de78be5ba572", "filename": "tests/fail/shims/fs/mkstemp_immutable_arg.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Ffs%2Fmkstemp_immutable_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Ffs%2Fmkstemp_immutable_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Ffs%2Fmkstemp_immutable_arg.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,8 +1,6 @@\n //@ignore-target-windows: No libc on Windows\n //@compile-flags: -Zmiri-disable-isolation\n \n-#![feature(rustc_private)]\n-\n fn main() {\n     test_mkstemp_immutable_arg();\n }", "previous_filename": "tests/fail/fs/mkstemp_immutable_arg.rs"}, {"sha": "0bd91f90a10f3b7e2259aaf40a19833ccfb63c5c", "filename": "tests/fail/shims/fs/mkstemp_immutable_arg.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Ffs%2Fmkstemp_immutable_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Ffs%2Fmkstemp_immutable_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Ffs%2Fmkstemp_immutable_arg.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/fs/mkstemp_immutable_arg.stderr"}, {"sha": "073fca4712e9a0b1bc9b7932cc9e2a5f1d29c53c", "filename": "tests/fail/shims/fs/read_from_stdout.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Ffs%2Fread_from_stdout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Ffs%2Fread_from_stdout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Ffs%2Fread_from_stdout.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,8 +1,6 @@\n //@compile-flags: -Zmiri-disable-isolation\n //@ignore-target-windows: No libc on Windows\n \n-#![feature(rustc_private)]\n-\n fn main() -> std::io::Result<()> {\n     let mut bytes = [0u8; 512];\n     unsafe {", "previous_filename": "tests/fail/fs/read_from_stdout.rs"}, {"sha": "5c16999cbf79a072b51f2854a740ebfef11c37ac", "filename": "tests/fail/shims/fs/read_from_stdout.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Ffs%2Fread_from_stdout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Ffs%2Fread_from_stdout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Ffs%2Fread_from_stdout.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/fs/read_from_stdout.stderr"}, {"sha": "ae231d4be667e370048f315d0dda4d605bbce98f", "filename": "tests/fail/shims/fs/unix_open_missing_required_mode.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Ffs%2Funix_open_missing_required_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Ffs%2Funix_open_missing_required_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Ffs%2Funix_open_missing_required_mode.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,8 +1,6 @@\n //@ignore-target-windows: No libc on Windows\n //@compile-flags: -Zmiri-disable-isolation\n \n-#![feature(rustc_private)]\n-\n fn main() {\n     test_file_open_missing_needed_mode();\n }", "previous_filename": "tests/fail/fs/unix_open_missing_required_mode.rs"}, {"sha": "a7297efaff960f5b1eff8976a3be7e673eeb8dfc", "filename": "tests/fail/shims/fs/unix_open_missing_required_mode.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Ffs%2Funix_open_missing_required_mode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Ffs%2Funix_open_missing_required_mode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Ffs%2Funix_open_missing_required_mode.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/fs/unix_open_missing_required_mode.stderr"}, {"sha": "d039ad718d33971bcedf454d49af51b6477fdcd5", "filename": "tests/fail/shims/fs/write_to_stdin.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Ffs%2Fwrite_to_stdin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Ffs%2Fwrite_to_stdin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Ffs%2Fwrite_to_stdin.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,7 +1,5 @@\n //@ignore-target-windows: No libc on Windows\n \n-#![feature(rustc_private)]\n-\n fn main() -> std::io::Result<()> {\n     let bytes = b\"hello\";\n     unsafe {", "previous_filename": "tests/fail/fs/write_to_stdin.rs"}, {"sha": "518d36b5551bf99d7514b0e1487c096101782dcc", "filename": "tests/fail/shims/fs/write_to_stdin.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Ffs%2Fwrite_to_stdin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Ffs%2Fwrite_to_stdin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Ffs%2Fwrite_to_stdin.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/fs/write_to_stdin.stderr"}, {"sha": "84b09acbac3dcee9e579d3906186d235723c95ab", "filename": "tests/fail/shims/shim_arg_size.32bit.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fshim_arg_size.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fshim_arg_size.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fshim_arg_size.32bit.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/shim_arg_size.32bit.stderr"}, {"sha": "98ed99d6d729e068d9537d4567b3285b1c3a207f", "filename": "tests/fail/shims/shim_arg_size.64bit.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fshim_arg_size.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fshim_arg_size.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fshim_arg_size.64bit.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/shim_arg_size.64bit.stderr"}, {"sha": "383df286d4c851e9be6236caeba4e7c1c2f3264c", "filename": "tests/fail/shims/shim_arg_size.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fshim_arg_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fshim_arg_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fshim_arg_size.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/shim_arg_size.rs"}, {"sha": "94ca3496ed948d6b2a6f1a383291ff939b62e61a", "filename": "tests/fail/shims/sync/libc_pthread_cond_double_destroy.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_cond_double_destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_cond_double_destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_cond_double_destroy.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,5 +1,4 @@\n //@ignore-target-windows: No libc on Windows\n-#![feature(rustc_private)]\n \n /// Test that destroying a pthread_cond twice fails, even without a check for number validity\n ", "previous_filename": "tests/fail/sync/libc_pthread_cond_double_destroy.rs"}, {"sha": "0e1c776f596583115b266d69bc8e5544caef9c3b", "filename": "tests/fail/shims/sync/libc_pthread_cond_double_destroy.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_cond_double_destroy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_cond_double_destroy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_cond_double_destroy.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/sync/libc_pthread_cond_double_destroy.stderr"}, {"sha": "13e639a867dcc4101483354cf670b66fe94b454a", "filename": "tests/fail/shims/sync/libc_pthread_condattr_double_destroy.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_condattr_double_destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_condattr_double_destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_condattr_double_destroy.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,5 +1,4 @@\n //@ignore-target-windows: No libc on Windows\n-#![feature(rustc_private)]\n \n /// Test that destroying a pthread_condattr twice fails, even without a check for number validity\n ", "previous_filename": "tests/fail/sync/libc_pthread_condattr_double_destroy.rs"}, {"sha": "dee50249b6b631cd01f1bdf6297fece0e7a9f805", "filename": "tests/fail/shims/sync/libc_pthread_condattr_double_destroy.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_condattr_double_destroy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_condattr_double_destroy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_condattr_double_destroy.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/sync/libc_pthread_condattr_double_destroy.stderr"}, {"sha": "8b2510733831f66eeec69f0e155ee220e9dd5d6c", "filename": "tests/fail/shims/sync/libc_pthread_mutex_NULL_deadlock.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_NULL_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_NULL_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_NULL_deadlock.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -2,8 +2,6 @@\n //\n // Check that if we pass NULL attribute, then we get the default mutex type.\n \n-#![feature(rustc_private)]\n-\n fn main() {\n     unsafe {\n         let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();", "previous_filename": "tests/fail/sync/libc_pthread_mutex_NULL_deadlock.rs"}, {"sha": "1b40f39d04bc28775d35200f3d118e38863ee37a", "filename": "tests/fail/shims/sync/libc_pthread_mutex_NULL_deadlock.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_NULL_deadlock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_NULL_deadlock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_NULL_deadlock.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/sync/libc_pthread_mutex_NULL_deadlock.stderr"}, {"sha": "6c3cb738e29972a916a97ae768410a998d1021ca", "filename": "tests/fail/shims/sync/libc_pthread_mutex_deadlock.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_deadlock.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,7 +1,5 @@\n //@ignore-target-windows: No libc on Windows\n \n-#![feature(rustc_private)]\n-\n use std::cell::UnsafeCell;\n use std::sync::Arc;\n use std::thread;", "previous_filename": "tests/fail/sync/libc_pthread_mutex_deadlock.rs"}, {"sha": "599655a8692b1b334fa92b1fca60eb257ecba496", "filename": "tests/fail/shims/sync/libc_pthread_mutex_deadlock.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_deadlock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_deadlock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_deadlock.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/sync/libc_pthread_mutex_deadlock.stderr"}, {"sha": "f443768819f96ea31c8576ad5fc1d82692c1fb9f", "filename": "tests/fail/shims/sync/libc_pthread_mutex_default_deadlock.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_default_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_default_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_default_deadlock.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -2,8 +2,6 @@\n //\n // Check that if we do not set the mutex type, it is the default.\n \n-#![feature(rustc_private)]\n-\n fn main() {\n     unsafe {\n         let mutexattr: libc::pthread_mutexattr_t = std::mem::zeroed();", "previous_filename": "tests/fail/sync/libc_pthread_mutex_default_deadlock.rs"}, {"sha": "7606472beb97968694291ddfc12cad49123f197a", "filename": "tests/fail/shims/sync/libc_pthread_mutex_default_deadlock.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_default_deadlock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_default_deadlock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_default_deadlock.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/sync/libc_pthread_mutex_default_deadlock.stderr"}, {"sha": "ec3965c7574eb9ddebf61761fbd1f82fdb718ac7", "filename": "tests/fail/shims/sync/libc_pthread_mutex_destroy_locked.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_destroy_locked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_destroy_locked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_destroy_locked.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,7 +1,5 @@\n //@ignore-target-windows: No libc on Windows\n \n-#![feature(rustc_private)]\n-\n fn main() {\n     unsafe {\n         let mut mutexattr: libc::pthread_mutexattr_t = std::mem::zeroed();", "previous_filename": "tests/fail/sync/libc_pthread_mutex_destroy_locked.rs"}, {"sha": "40a7b3de09d58e6e656bf9f8c41151a031bec18b", "filename": "tests/fail/shims/sync/libc_pthread_mutex_destroy_locked.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_destroy_locked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_destroy_locked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_destroy_locked.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/sync/libc_pthread_mutex_destroy_locked.stderr"}, {"sha": "622c3eaeae30d404a1361025a9af681abab7b626", "filename": "tests/fail/shims/sync/libc_pthread_mutex_double_destroy.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_double_destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_double_destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_double_destroy.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,5 +1,4 @@\n //@ignore-target-windows: No libc on Windows\n-#![feature(rustc_private)]\n \n /// Test that destroying a pthread_mutex twice fails, even without a check for number validity\n ", "previous_filename": "tests/fail/sync/libc_pthread_mutex_double_destroy.rs"}, {"sha": "274d4496266b0728faac28b5ea266601a2df3b96", "filename": "tests/fail/shims/sync/libc_pthread_mutex_double_destroy.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_double_destroy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_double_destroy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_double_destroy.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/sync/libc_pthread_mutex_double_destroy.stderr"}, {"sha": "5ea09fa5aac3d36df9f631c32a543e27361cbde8", "filename": "tests/fail/shims/sync/libc_pthread_mutex_normal_deadlock.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_normal_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_normal_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_normal_deadlock.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,7 +1,5 @@\n //@ignore-target-windows: No libc on Windows\n \n-#![feature(rustc_private)]\n-\n fn main() {\n     unsafe {\n         let mut mutexattr: libc::pthread_mutexattr_t = std::mem::zeroed();", "previous_filename": "tests/fail/sync/libc_pthread_mutex_normal_deadlock.rs"}, {"sha": "b7877d3aa397d71c8051e317cf9c33adcb10f5b0", "filename": "tests/fail/shims/sync/libc_pthread_mutex_normal_deadlock.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_normal_deadlock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_normal_deadlock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_normal_deadlock.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/sync/libc_pthread_mutex_normal_deadlock.stderr"}, {"sha": "8ce7542edb87f03e6156636a8ef8d159f784ceaf", "filename": "tests/fail/shims/sync/libc_pthread_mutex_normal_unlock_unlocked.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,7 +1,5 @@\n //@ignore-target-windows: No libc on Windows\n \n-#![feature(rustc_private)]\n-\n fn main() {\n     unsafe {\n         let mut mutexattr: libc::pthread_mutexattr_t = std::mem::zeroed();", "previous_filename": "tests/fail/sync/libc_pthread_mutex_normal_unlock_unlocked.rs"}, {"sha": "daa9a7c5144833ce46b50e385833a521e6b4abe5", "filename": "tests/fail/shims/sync/libc_pthread_mutex_normal_unlock_unlocked.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/sync/libc_pthread_mutex_normal_unlock_unlocked.stderr"}, {"sha": "b56775252e4b4e66df8f210841bfb2322a73fc95", "filename": "tests/fail/shims/sync/libc_pthread_mutex_wrong_owner.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_wrong_owner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_wrong_owner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_wrong_owner.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,7 +1,5 @@\n //@ignore-target-windows: No libc on Windows\n \n-#![feature(rustc_private)]\n-\n use std::cell::UnsafeCell;\n use std::sync::Arc;\n use std::thread;", "previous_filename": "tests/fail/sync/libc_pthread_mutex_wrong_owner.rs"}, {"sha": "83c22b2673d628f37700ea0f57559f69bd65a5a2", "filename": "tests/fail/shims/sync/libc_pthread_mutex_wrong_owner.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_wrong_owner.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_wrong_owner.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_wrong_owner.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/sync/libc_pthread_mutex_wrong_owner.stderr"}, {"sha": "474a277516d9488af35529ae62f418f3d4eff090", "filename": "tests/fail/shims/sync/libc_pthread_mutexattr_double_destroy.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutexattr_double_destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutexattr_double_destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutexattr_double_destroy.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,5 +1,4 @@\n //@ignore-target-windows: No libc on Windows\n-#![feature(rustc_private)]\n \n /// Test that destroying a pthread_mutexattr twice fails, even without a check for number validity\n ", "previous_filename": "tests/fail/sync/libc_pthread_mutexattr_double_destroy.rs"}, {"sha": "44a201fe05836b578f75fbc4428eb9dfc63fba14", "filename": "tests/fail/shims/sync/libc_pthread_mutexattr_double_destroy.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutexattr_double_destroy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutexattr_double_destroy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutexattr_double_destroy.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/sync/libc_pthread_mutexattr_double_destroy.stderr"}, {"sha": "603580ff58abdb8cb9a3ebbd5983c6ddf395d984", "filename": "tests/fail/shims/sync/libc_pthread_rwlock_destroy_read_locked.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_destroy_read_locked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_destroy_read_locked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_destroy_read_locked.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,7 +1,5 @@\n //@ignore-target-windows: No libc on Windows\n \n-#![feature(rustc_private)]\n-\n fn main() {\n     let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n     unsafe {", "previous_filename": "tests/fail/sync/libc_pthread_rwlock_destroy_read_locked.rs"}, {"sha": "43f8b2dcca6f9771847ed75a7954ec75368fc8bd", "filename": "tests/fail/shims/sync/libc_pthread_rwlock_destroy_read_locked.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_destroy_read_locked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_destroy_read_locked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_destroy_read_locked.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/sync/libc_pthread_rwlock_destroy_read_locked.stderr"}, {"sha": "ae44f22d146ca3049c4684afaf5bd0751937f193", "filename": "tests/fail/shims/sync/libc_pthread_rwlock_destroy_write_locked.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_destroy_write_locked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_destroy_write_locked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_destroy_write_locked.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,7 +1,5 @@\n //@ignore-target-windows: No libc on Windows\n \n-#![feature(rustc_private)]\n-\n fn main() {\n     let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n     unsafe {", "previous_filename": "tests/fail/sync/libc_pthread_rwlock_destroy_write_locked.rs"}, {"sha": "cbaa2b3fcce9fef19bedec3ebfd826126376c988", "filename": "tests/fail/shims/sync/libc_pthread_rwlock_destroy_write_locked.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_destroy_write_locked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_destroy_write_locked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_destroy_write_locked.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/sync/libc_pthread_rwlock_destroy_write_locked.stderr"}, {"sha": "800986f7506c007a450a8a507feb65f4724348e1", "filename": "tests/fail/shims/sync/libc_pthread_rwlock_double_destroy.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_double_destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_double_destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_double_destroy.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,5 +1,4 @@\n //@ignore-target-windows: No libc on Windows\n-#![feature(rustc_private)]\n \n /// Test that destroying a pthread_rwlock twice fails, even without a check for number validity\n ", "previous_filename": "tests/fail/sync/libc_pthread_rwlock_double_destroy.rs"}, {"sha": "159e1b9881a90c0d1382d57d1d4611a6887610b8", "filename": "tests/fail/shims/sync/libc_pthread_rwlock_double_destroy.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_double_destroy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_double_destroy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_double_destroy.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/sync/libc_pthread_rwlock_double_destroy.stderr"}, {"sha": "782c95b6d2e3ca1256af2e170cf76ea558a1b4a4", "filename": "tests/fail/shims/sync/libc_pthread_rwlock_read_write_deadlock_single_thread.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_read_write_deadlock_single_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_read_write_deadlock_single_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_read_write_deadlock_single_thread.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,7 +1,5 @@\n //@ignore-target-windows: No libc on Windows\n \n-#![feature(rustc_private)]\n-\n fn main() {\n     let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n     unsafe {", "previous_filename": "tests/fail/sync/libc_pthread_rwlock_read_write_deadlock_single_thread.rs"}, {"sha": "075c8f0ef529cbbe6caced928c2834b212040e34", "filename": "tests/fail/shims/sync/libc_pthread_rwlock_read_write_deadlock_single_thread.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_read_write_deadlock_single_thread.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_read_write_deadlock_single_thread.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_read_write_deadlock_single_thread.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/sync/libc_pthread_rwlock_read_write_deadlock_single_thread.stderr"}, {"sha": "1b498ad8fcdb474f7fe7a98d57c99dc61388b225", "filename": "tests/fail/shims/sync/libc_pthread_rwlock_read_wrong_owner.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_read_wrong_owner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_read_wrong_owner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_read_wrong_owner.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,7 +1,5 @@\n //@ignore-target-windows: No libc on Windows\n \n-#![feature(rustc_private)]\n-\n use std::cell::UnsafeCell;\n use std::sync::Arc;\n use std::thread;", "previous_filename": "tests/fail/sync/libc_pthread_rwlock_read_wrong_owner.rs"}, {"sha": "0921f3d4b506c3cb20bbfb7c15f6ce032e678252", "filename": "tests/fail/shims/sync/libc_pthread_rwlock_read_wrong_owner.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_read_wrong_owner.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_read_wrong_owner.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_read_wrong_owner.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/sync/libc_pthread_rwlock_read_wrong_owner.stderr"}, {"sha": "05f7e7a06c57f4c01ce60a31e3c6ca40e4f3ff91", "filename": "tests/fail/shims/sync/libc_pthread_rwlock_unlock_unlocked.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_unlock_unlocked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_unlock_unlocked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_unlock_unlocked.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,7 +1,5 @@\n //@ignore-target-windows: No libc on Windows\n \n-#![feature(rustc_private)]\n-\n fn main() {\n     let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n     unsafe {", "previous_filename": "tests/fail/sync/libc_pthread_rwlock_unlock_unlocked.rs"}, {"sha": "67bfde22edcfe5b25af2dbd1deaf152cf8edc974", "filename": "tests/fail/shims/sync/libc_pthread_rwlock_unlock_unlocked.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_unlock_unlocked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_unlock_unlocked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_unlock_unlocked.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/sync/libc_pthread_rwlock_unlock_unlocked.stderr"}, {"sha": "201844615e1825d2f52f08ff0e620d027a9ca5e3", "filename": "tests/fail/shims/sync/libc_pthread_rwlock_write_read_deadlock.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,7 +1,5 @@\n //@ignore-target-windows: No libc on Windows\n \n-#![feature(rustc_private)]\n-\n use std::cell::UnsafeCell;\n use std::sync::Arc;\n use std::thread;", "previous_filename": "tests/fail/sync/libc_pthread_rwlock_write_read_deadlock.rs"}, {"sha": "333fb1afb91b7a6bf7ae5e32ab7c90193ef82b24", "filename": "tests/fail/shims/sync/libc_pthread_rwlock_write_read_deadlock.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/sync/libc_pthread_rwlock_write_read_deadlock.stderr"}, {"sha": "538f14ef89f20dbbb892be9cca67caf80a461832", "filename": "tests/fail/shims/sync/libc_pthread_rwlock_write_read_deadlock_single_thread.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock_single_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock_single_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock_single_thread.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,7 +1,5 @@\n //@ignore-target-windows: No libc on Windows\n \n-#![feature(rustc_private)]\n-\n fn main() {\n     let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n     unsafe {", "previous_filename": "tests/fail/sync/libc_pthread_rwlock_write_read_deadlock_single_thread.rs"}, {"sha": "caab19a782f97fbdbc04b97e2ebd15dd0873c463", "filename": "tests/fail/shims/sync/libc_pthread_rwlock_write_read_deadlock_single_thread.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock_single_thread.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock_single_thread.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock_single_thread.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/sync/libc_pthread_rwlock_write_read_deadlock_single_thread.stderr"}, {"sha": "b1d7e0492e5a26f2cf686b8477bd989a049f638f", "filename": "tests/fail/shims/sync/libc_pthread_rwlock_write_write_deadlock.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,7 +1,5 @@\n //@ignore-target-windows: No libc on Windows\n \n-#![feature(rustc_private)]\n-\n use std::cell::UnsafeCell;\n use std::sync::Arc;\n use std::thread;", "previous_filename": "tests/fail/sync/libc_pthread_rwlock_write_write_deadlock.rs"}, {"sha": "93bede54fcf1838df52a48f154bdeccba268e2b7", "filename": "tests/fail/shims/sync/libc_pthread_rwlock_write_write_deadlock.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/sync/libc_pthread_rwlock_write_write_deadlock.stderr"}, {"sha": "2c963d36510e6dfb5a9773bc6cfa21ae2fab5651", "filename": "tests/fail/shims/sync/libc_pthread_rwlock_write_write_deadlock_single_thread.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock_single_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock_single_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock_single_thread.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,7 +1,5 @@\n //@ignore-target-windows: No libc on Windows\n \n-#![feature(rustc_private)]\n-\n fn main() {\n     let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n     unsafe {", "previous_filename": "tests/fail/sync/libc_pthread_rwlock_write_write_deadlock_single_thread.rs"}, {"sha": "30f5f447c717c9d4fc70ac4d9ea1f938781aa84f", "filename": "tests/fail/shims/sync/libc_pthread_rwlock_write_write_deadlock_single_thread.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock_single_thread.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock_single_thread.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock_single_thread.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/sync/libc_pthread_rwlock_write_write_deadlock_single_thread.stderr"}, {"sha": "dd099474d8fed4649a1c39632844d0e4f758f654", "filename": "tests/fail/shims/sync/libc_pthread_rwlock_write_wrong_owner.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_wrong_owner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_wrong_owner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_wrong_owner.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,7 +1,5 @@\n //@ignore-target-windows: No libc on Windows\n \n-#![feature(rustc_private)]\n-\n use std::cell::UnsafeCell;\n use std::sync::Arc;\n use std::thread;", "previous_filename": "tests/fail/sync/libc_pthread_rwlock_write_wrong_owner.rs"}, {"sha": "d066cb687a1a7496b6c50c02b5869285bde3856a", "filename": "tests/fail/shims/sync/libc_pthread_rwlock_write_wrong_owner.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_wrong_owner.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_wrong_owner.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_wrong_owner.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/fail/sync/libc_pthread_rwlock_write_wrong_owner.stderr"}, {"sha": "d50041ffbd9ded76c2d47fdb5c7962e814b6b351", "filename": "tests/fail/unsupported_signal.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Funsupported_signal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Ffail%2Funsupported_signal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funsupported_signal.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,7 +1,6 @@\n //! `signal()` is special on Linux and macOS that it's only supported within libstd.\n //! The implementation is not complete enough to permit user code to call it.\n //@ignore-target-windows: No libc on Windows\n-#![feature(rustc_private)]\n \n fn main() {\n     unsafe {"}, {"sha": "31d666e1d9d80f6f3a151631dd852c356f784524", "filename": "tests/panic/unsupported_syscall.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpanic%2Funsupported_syscall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpanic%2Funsupported_syscall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpanic%2Funsupported_syscall.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,7 +1,6 @@\n //@ignore-target-windows: No libc on Windows\n //@ignore-target-apple: `syscall` is not supported on macOS\n //@compile-flags: -Zmiri-panic-on-unsupported\n-#![feature(rustc_private)]\n \n fn main() {\n     unsafe {"}, {"sha": "62ab63c5fc788ec3527df7418d4e07c106cc1eca", "filename": "tests/pass/calloc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fcalloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fcalloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fcalloc.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,7 +1,5 @@\n //@ignore-target-windows: No libc on Windows\n \n-#![feature(rustc_private)]\n-\n use core::slice;\n \n fn main() {"}, {"sha": "b0325f7d78e508077fbb08755910a14b87a032fc", "filename": "tests/pass/concurrency/libc_pthread_cond.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fconcurrency%2Flibc_pthread_cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fconcurrency%2Flibc_pthread_cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Flibc_pthread_cond.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -2,8 +2,6 @@\n //@ignore-target-apple: pthread_condattr_setclock is not supported on MacOS.\n //@compile-flags: -Zmiri-disable-isolation\n \n-#![feature(rustc_private)]\n-\n /// Test that conditional variable timeouts are working properly with both\n /// monotonic and system clocks.\n use std::mem::MaybeUninit;"}, {"sha": "a456528ec2074bfeccc4b68791e014fd6d14013d", "filename": "tests/pass/concurrency/linux-futex.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fconcurrency%2Flinux-futex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fconcurrency%2Flinux-futex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Flinux-futex.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,8 +1,6 @@\n //@only-target-linux\n //@compile-flags: -Zmiri-disable-isolation\n \n-#![feature(rustc_private)]\n-\n use std::mem::MaybeUninit;\n use std::ptr;\n use std::sync::atomic::AtomicI32;"}, {"sha": "6200233c81193af56365c3d553155aef685cff9a", "filename": "tests/pass/concurrency/tls_pthread_drop_order.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fconcurrency%2Ftls_pthread_drop_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fconcurrency%2Ftls_pthread_drop_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Ftls_pthread_drop_order.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,7 +1,5 @@\n //@ignore-target-windows: No libc on Windows\n \n-#![feature(rustc_private)]\n-\n use std::mem;\n use std::ptr;\n "}, {"sha": "9f090a4eff5d8a6c4b181de458f79446340977e4", "filename": "tests/pass/foreign-fn-linkname.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fforeign-fn-linkname.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,6 +1,3 @@\n-//ignore-windows: Uses POSIX APIs\n-#![feature(rustc_private)]\n-\n use std::ffi::CString;\n \n mod mlibc {"}, {"sha": "f5e014c000d1553e1ff860d22b66a8a2b4c8ead5", "filename": "tests/pass/malloc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fmalloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fmalloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fmalloc.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,7 +1,5 @@\n //@ignore-target-windows: No libc on Windows\n \n-#![feature(rustc_private)]\n-\n use core::{ptr, slice};\n \n fn main() {"}, {"sha": "57f1b75f4d52bdd31bf2d6be2f58f037d9306bb8", "filename": "tests/pass/regions-mock-trans.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fregions-mock-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fregions-mock-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fregions-mock-trans.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,7 +1,3 @@\n-//ignore-windows: Uses POSIX APIs\n-\n-#![feature(rustc_private)]\n-\n use std::mem;\n \n struct Arena(());"}, {"sha": "0116dce4992dcab2c92df739ed408773f601ee99", "filename": "tests/pass/shims/env/args.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fenv%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fenv%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fshims%2Fenv%2Fargs.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/pass/env/args.rs"}, {"sha": "9564f5a1aa056804e6b7f35d533c3a06afd76af9", "filename": "tests/pass/shims/env/args.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fenv%2Fargs.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fenv%2Fargs.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fshims%2Fenv%2Fargs.stdout?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/pass/env/args.stdout"}, {"sha": "069b462ab371aa148ef3fe76aaa129bc6d2df69f", "filename": "tests/pass/shims/env/current_dir.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fenv%2Fcurrent_dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fenv%2Fcurrent_dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fshims%2Fenv%2Fcurrent_dir.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/pass/env/current_dir.rs"}, {"sha": "9dbcfeae2d644d2642e819cc8b4071da6eff9165", "filename": "tests/pass/shims/env/current_dir_with_isolation.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fenv%2Fcurrent_dir_with_isolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fenv%2Fcurrent_dir_with_isolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fshims%2Fenv%2Fcurrent_dir_with_isolation.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/pass/env/current_dir_with_isolation.rs"}, {"sha": "589ca65a1e47e410396d8f353e3909de7283b690", "filename": "tests/pass/shims/env/current_dir_with_isolation.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fenv%2Fcurrent_dir_with_isolation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fenv%2Fcurrent_dir_with_isolation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fshims%2Fenv%2Fcurrent_dir_with_isolation.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/pass/env/current_dir_with_isolation.stderr"}, {"sha": "15ea6a52b7b6b6d12147e0625079e47e070824fe", "filename": "tests/pass/shims/env/current_exe.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fenv%2Fcurrent_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fenv%2Fcurrent_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fshims%2Fenv%2Fcurrent_exe.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/pass/env/current_exe.rs"}, {"sha": "9eb9c3af569dd88e0b16ba61c99bda8faae63de9", "filename": "tests/pass/shims/env/home.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fenv%2Fhome.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fenv%2Fhome.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fshims%2Fenv%2Fhome.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/pass/env/home.rs"}, {"sha": "14ad827463a4ea3ddddd0fd7c3e0e458d8a8b4b2", "filename": "tests/pass/shims/env/var-exclude.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fenv%2Fvar-exclude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fenv%2Fvar-exclude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fshims%2Fenv%2Fvar-exclude.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/pass/env/var-exclude.rs"}, {"sha": "da7730b00f089bacabda0c2977ac58fe0c541c60", "filename": "tests/pass/shims/env/var-forward.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fenv%2Fvar-forward.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fenv%2Fvar-forward.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fshims%2Fenv%2Fvar-forward.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/pass/env/var-forward.rs"}, {"sha": "3d7461eecfe88b3e4e3ab779ed66e961d1243a1d", "filename": "tests/pass/shims/env/var-without-isolation.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fenv%2Fvar-without-isolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fenv%2Fvar-without-isolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fshims%2Fenv%2Fvar-without-isolation.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/pass/env/var-without-isolation.rs"}, {"sha": "23a3724ff7fd3117c7a9865b2dfaab52f828e978", "filename": "tests/pass/shims/env/var.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fenv%2Fvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fenv%2Fvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fshims%2Fenv%2Fvar.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/pass/env/var.rs"}, {"sha": "9a8f979598ebc0f3a3bee7fcb097b02a72acdcf9", "filename": "tests/pass/shims/env/var.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fenv%2Fvar.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fenv%2Fvar.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fshims%2Fenv%2Fvar.stdout?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/pass/env/var.stdout"}, {"sha": "d93f0045377efcd20f258f84c39d62320f3be1c7", "filename": "tests/pass/shims/exit.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fexit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fexit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fshims%2Fexit.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/pass/exit.rs"}, {"sha": "9faced02916120d343a629f8d8fa248c349cdad6", "filename": "tests/pass/shims/fs.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fshims%2Ffs.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,7 +1,6 @@\n //@ignore-target-windows: File handling is not implemented yet\n //@compile-flags: -Zmiri-disable-isolation\n \n-#![feature(rustc_private)]\n #![feature(io_error_more)]\n #![feature(io_error_uncategorized)]\n ", "previous_filename": "tests/pass/fs.rs"}, {"sha": "b6fa69e3d5d2e8c4626550dcb2c413f91dfcd156", "filename": "tests/pass/shims/fs.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Ffs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Ffs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fshims%2Ffs.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/pass/fs.stderr"}, {"sha": "b6fa69e3d5d2e8c4626550dcb2c413f91dfcd156", "filename": "tests/pass/shims/fs.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Ffs.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Ffs.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fshims%2Ffs.stdout?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/pass/fs.stdout"}, {"sha": "f5420dbc5538e54bc080046e550c1308dd4ecb63", "filename": "tests/pass/shims/fs_with_isolation.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Ffs_with_isolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Ffs_with_isolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fshims%2Ffs_with_isolation.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -2,8 +2,6 @@\n //@compile-flags: -Zmiri-isolation-error=warn-nobacktrace\n //@normalize-stderr-test: \"(stat(x)?)\" -> \"$$STAT\"\n \n-#![feature(rustc_private)]\n-\n use std::ffi::CString;\n use std::fs::{self, File};\n use std::io::{Error, ErrorKind};", "previous_filename": "tests/pass/fs_with_isolation.rs"}, {"sha": "ad75e42831b0ac7b71caaeb9e53d1f8769f276be", "filename": "tests/pass/shims/fs_with_isolation.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Ffs_with_isolation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Ffs_with_isolation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fshims%2Ffs_with_isolation.stderr?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/pass/fs_with_isolation.stderr"}, {"sha": "a883a3d967a3c792136fee763e4070b7808415da", "filename": "tests/pass/shims/libc-misc.rs", "status": "renamed", "additions": 0, "deletions": 125, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Flibc-misc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Flibc-misc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fshims%2Flibc-misc.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,7 +1,6 @@\n //@ignore-target-windows: No libc on Windows\n //@compile-flags: -Zmiri-disable-isolation\n #![feature(io_error_more)]\n-#![feature(rustc_private)]\n \n use std::fs::{remove_file, File};\n use std::os::unix::io::AsRawFd;\n@@ -161,122 +160,6 @@ fn test_sync_file_range() {\n     assert_eq!(result_2, 0);\n }\n \n-fn test_mutex_libc_init_recursive() {\n-    unsafe {\n-        let mut attr: libc::pthread_mutexattr_t = std::mem::zeroed();\n-        assert_eq!(libc::pthread_mutexattr_init(&mut attr as *mut _), 0);\n-        assert_eq!(\n-            libc::pthread_mutexattr_settype(&mut attr as *mut _, libc::PTHREAD_MUTEX_RECURSIVE),\n-            0,\n-        );\n-        let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();\n-        assert_eq!(libc::pthread_mutex_init(&mut mutex as *mut _, &mut attr as *mut _), 0);\n-        assert_eq!(libc::pthread_mutex_lock(&mut mutex as *mut _), 0);\n-        assert_eq!(libc::pthread_mutex_trylock(&mut mutex as *mut _), 0);\n-        assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), 0);\n-        assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), 0);\n-        assert_eq!(libc::pthread_mutex_trylock(&mut mutex as *mut _), 0);\n-        assert_eq!(libc::pthread_mutex_lock(&mut mutex as *mut _), 0);\n-        assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), 0);\n-        assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), 0);\n-        assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), libc::EPERM);\n-        assert_eq!(libc::pthread_mutex_destroy(&mut mutex as *mut _), 0);\n-        assert_eq!(libc::pthread_mutexattr_destroy(&mut attr as *mut _), 0);\n-    }\n-}\n-\n-fn test_mutex_libc_init_normal() {\n-    unsafe {\n-        let mut mutexattr: libc::pthread_mutexattr_t = std::mem::zeroed();\n-        assert_eq!(\n-            libc::pthread_mutexattr_settype(&mut mutexattr as *mut _, 0x12345678),\n-            libc::EINVAL,\n-        );\n-        assert_eq!(\n-            libc::pthread_mutexattr_settype(&mut mutexattr as *mut _, libc::PTHREAD_MUTEX_NORMAL),\n-            0,\n-        );\n-        let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();\n-        assert_eq!(libc::pthread_mutex_init(&mut mutex as *mut _, &mutexattr as *const _), 0);\n-        assert_eq!(libc::pthread_mutex_lock(&mut mutex as *mut _), 0);\n-        assert_eq!(libc::pthread_mutex_trylock(&mut mutex as *mut _), libc::EBUSY);\n-        assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), 0);\n-        assert_eq!(libc::pthread_mutex_trylock(&mut mutex as *mut _), 0);\n-        assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), 0);\n-        assert_eq!(libc::pthread_mutex_destroy(&mut mutex as *mut _), 0);\n-    }\n-}\n-\n-fn test_mutex_libc_init_errorcheck() {\n-    unsafe {\n-        let mut mutexattr: libc::pthread_mutexattr_t = std::mem::zeroed();\n-        assert_eq!(\n-            libc::pthread_mutexattr_settype(\n-                &mut mutexattr as *mut _,\n-                libc::PTHREAD_MUTEX_ERRORCHECK,\n-            ),\n-            0,\n-        );\n-        let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();\n-        assert_eq!(libc::pthread_mutex_init(&mut mutex as *mut _, &mutexattr as *const _), 0);\n-        assert_eq!(libc::pthread_mutex_lock(&mut mutex as *mut _), 0);\n-        assert_eq!(libc::pthread_mutex_trylock(&mut mutex as *mut _), libc::EBUSY);\n-        assert_eq!(libc::pthread_mutex_lock(&mut mutex as *mut _), libc::EDEADLK);\n-        assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), 0);\n-        assert_eq!(libc::pthread_mutex_trylock(&mut mutex as *mut _), 0);\n-        assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), 0);\n-        assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), libc::EPERM);\n-        assert_eq!(libc::pthread_mutex_destroy(&mut mutex as *mut _), 0);\n-    }\n-}\n-\n-// Only linux provides PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP,\n-// libc for macOS just has the default PTHREAD_MUTEX_INITIALIZER.\n-#[cfg(target_os = \"linux\")]\n-fn test_mutex_libc_static_initializer_recursive() {\n-    let mutex = std::cell::UnsafeCell::new(libc::PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP);\n-    unsafe {\n-        assert_eq!(libc::pthread_mutex_lock(mutex.get()), 0);\n-        assert_eq!(libc::pthread_mutex_trylock(mutex.get()), 0);\n-        assert_eq!(libc::pthread_mutex_unlock(mutex.get()), 0);\n-        assert_eq!(libc::pthread_mutex_unlock(mutex.get()), 0);\n-        assert_eq!(libc::pthread_mutex_trylock(mutex.get()), 0);\n-        assert_eq!(libc::pthread_mutex_lock(mutex.get()), 0);\n-        assert_eq!(libc::pthread_mutex_unlock(mutex.get()), 0);\n-        assert_eq!(libc::pthread_mutex_unlock(mutex.get()), 0);\n-        assert_eq!(libc::pthread_mutex_unlock(mutex.get()), libc::EPERM);\n-        assert_eq!(libc::pthread_mutex_destroy(mutex.get()), 0);\n-    }\n-}\n-\n-// Testing the behavior of std::sync::RwLock does not fully exercise the pthread rwlock shims, we\n-// need to go a layer deeper and test the behavior of the libc functions, because\n-// std::sys::unix::rwlock::RWLock itself keeps track of write_locked and num_readers.\n-fn test_rwlock_libc_static_initializer() {\n-    let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n-    unsafe {\n-        assert_eq!(libc::pthread_rwlock_rdlock(rw.get()), 0);\n-        assert_eq!(libc::pthread_rwlock_rdlock(rw.get()), 0);\n-        assert_eq!(libc::pthread_rwlock_unlock(rw.get()), 0);\n-        assert_eq!(libc::pthread_rwlock_tryrdlock(rw.get()), 0);\n-        assert_eq!(libc::pthread_rwlock_unlock(rw.get()), 0);\n-        assert_eq!(libc::pthread_rwlock_trywrlock(rw.get()), libc::EBUSY);\n-        assert_eq!(libc::pthread_rwlock_unlock(rw.get()), 0);\n-\n-        assert_eq!(libc::pthread_rwlock_wrlock(rw.get()), 0);\n-        assert_eq!(libc::pthread_rwlock_tryrdlock(rw.get()), libc::EBUSY);\n-        assert_eq!(libc::pthread_rwlock_trywrlock(rw.get()), libc::EBUSY);\n-        assert_eq!(libc::pthread_rwlock_unlock(rw.get()), 0);\n-\n-        assert_eq!(libc::pthread_rwlock_trywrlock(rw.get()), 0);\n-        assert_eq!(libc::pthread_rwlock_tryrdlock(rw.get()), libc::EBUSY);\n-        assert_eq!(libc::pthread_rwlock_trywrlock(rw.get()), libc::EBUSY);\n-        assert_eq!(libc::pthread_rwlock_unlock(rw.get()), 0);\n-\n-        assert_eq!(libc::pthread_rwlock_destroy(rw.get()), 0);\n-    }\n-}\n-\n /// Tests whether each thread has its own `__errno_location`.\n fn test_thread_local_errno() {\n     #[cfg(target_os = \"linux\")]\n@@ -413,14 +296,6 @@ fn main() {\n     #[cfg(any(target_os = \"linux\"))]\n     test_sync_file_range();\n \n-    test_mutex_libc_init_recursive();\n-    test_mutex_libc_init_normal();\n-    test_mutex_libc_init_errorcheck();\n-    test_rwlock_libc_static_initializer();\n-\n-    #[cfg(any(target_os = \"linux\"))]\n-    test_mutex_libc_static_initializer_recursive();\n-\n     test_thread_local_errno();\n \n     #[cfg(any(target_os = \"linux\"))]", "previous_filename": "tests/pass/libc.rs"}, {"sha": "349b447569a4b8a8dab625b80c1a0e648cc933bf", "filename": "tests/pass/shims/linux-getrandom-without-isolation.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Flinux-getrandom-without-isolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Flinux-getrandom-without-isolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fshims%2Flinux-getrandom-without-isolation.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,6 +1,5 @@\n //@only-target-linux\n //@compile-flags: -Zmiri-disable-isolation\n-#![feature(rustc_private)]\n \n use std::ptr;\n ", "previous_filename": "tests/pass/linux-getrandom-without-isolation.rs"}, {"sha": "a1436c7319d3395f0a8419d2bbc34298e5156d12", "filename": "tests/pass/shims/linux-getrandom.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Flinux-getrandom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Flinux-getrandom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fshims%2Flinux-getrandom.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,5 +1,4 @@\n //@only-target-linux\n-#![feature(rustc_private)]\n \n use std::ptr;\n ", "previous_filename": "tests/pass/linux-getrandom.rs"}, {"sha": "9bd8a00d68dcd86a97ad82cb784b409204398250", "filename": "tests/pass/shims/posix_memalign.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fposix_memalign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fposix_memalign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fshims%2Fposix_memalign.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -1,6 +1,5 @@\n //@ignore-target-windows: No libc on Windows\n \n-#![feature(rustc_private)]\n #![feature(pointer_is_aligned)]\n #![feature(strict_provenance)]\n ", "previous_filename": "tests/pass/posix_memalign.rs"}, {"sha": "d062eda7e90c8429264450904209f0601b2fbf30", "filename": "tests/pass/shims/pthreads.rs", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fpthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fpthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fshims%2Fpthreads.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "patch": "@@ -0,0 +1,127 @@\n+//@ignore-target-windows: No libc on Windows\n+\n+fn main() {\n+    test_mutex_libc_init_recursive();\n+    test_mutex_libc_init_normal();\n+    test_mutex_libc_init_errorcheck();\n+    test_rwlock_libc_static_initializer();\n+\n+    #[cfg(any(target_os = \"linux\"))]\n+    test_mutex_libc_static_initializer_recursive();\n+}\n+\n+fn test_mutex_libc_init_recursive() {\n+    unsafe {\n+        let mut attr: libc::pthread_mutexattr_t = std::mem::zeroed();\n+        assert_eq!(libc::pthread_mutexattr_init(&mut attr as *mut _), 0);\n+        assert_eq!(\n+            libc::pthread_mutexattr_settype(&mut attr as *mut _, libc::PTHREAD_MUTEX_RECURSIVE),\n+            0,\n+        );\n+        let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();\n+        assert_eq!(libc::pthread_mutex_init(&mut mutex as *mut _, &mut attr as *mut _), 0);\n+        assert_eq!(libc::pthread_mutex_lock(&mut mutex as *mut _), 0);\n+        assert_eq!(libc::pthread_mutex_trylock(&mut mutex as *mut _), 0);\n+        assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), 0);\n+        assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), 0);\n+        assert_eq!(libc::pthread_mutex_trylock(&mut mutex as *mut _), 0);\n+        assert_eq!(libc::pthread_mutex_lock(&mut mutex as *mut _), 0);\n+        assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), 0);\n+        assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), 0);\n+        assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), libc::EPERM);\n+        assert_eq!(libc::pthread_mutex_destroy(&mut mutex as *mut _), 0);\n+        assert_eq!(libc::pthread_mutexattr_destroy(&mut attr as *mut _), 0);\n+    }\n+}\n+\n+fn test_mutex_libc_init_normal() {\n+    unsafe {\n+        let mut mutexattr: libc::pthread_mutexattr_t = std::mem::zeroed();\n+        assert_eq!(\n+            libc::pthread_mutexattr_settype(&mut mutexattr as *mut _, 0x12345678),\n+            libc::EINVAL,\n+        );\n+        assert_eq!(\n+            libc::pthread_mutexattr_settype(&mut mutexattr as *mut _, libc::PTHREAD_MUTEX_NORMAL),\n+            0,\n+        );\n+        let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();\n+        assert_eq!(libc::pthread_mutex_init(&mut mutex as *mut _, &mutexattr as *const _), 0);\n+        assert_eq!(libc::pthread_mutex_lock(&mut mutex as *mut _), 0);\n+        assert_eq!(libc::pthread_mutex_trylock(&mut mutex as *mut _), libc::EBUSY);\n+        assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), 0);\n+        assert_eq!(libc::pthread_mutex_trylock(&mut mutex as *mut _), 0);\n+        assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), 0);\n+        assert_eq!(libc::pthread_mutex_destroy(&mut mutex as *mut _), 0);\n+    }\n+}\n+\n+fn test_mutex_libc_init_errorcheck() {\n+    unsafe {\n+        let mut mutexattr: libc::pthread_mutexattr_t = std::mem::zeroed();\n+        assert_eq!(\n+            libc::pthread_mutexattr_settype(\n+                &mut mutexattr as *mut _,\n+                libc::PTHREAD_MUTEX_ERRORCHECK,\n+            ),\n+            0,\n+        );\n+        let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();\n+        assert_eq!(libc::pthread_mutex_init(&mut mutex as *mut _, &mutexattr as *const _), 0);\n+        assert_eq!(libc::pthread_mutex_lock(&mut mutex as *mut _), 0);\n+        assert_eq!(libc::pthread_mutex_trylock(&mut mutex as *mut _), libc::EBUSY);\n+        assert_eq!(libc::pthread_mutex_lock(&mut mutex as *mut _), libc::EDEADLK);\n+        assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), 0);\n+        assert_eq!(libc::pthread_mutex_trylock(&mut mutex as *mut _), 0);\n+        assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), 0);\n+        assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), libc::EPERM);\n+        assert_eq!(libc::pthread_mutex_destroy(&mut mutex as *mut _), 0);\n+    }\n+}\n+\n+// Only linux provides PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP,\n+// libc for macOS just has the default PTHREAD_MUTEX_INITIALIZER.\n+#[cfg(target_os = \"linux\")]\n+fn test_mutex_libc_static_initializer_recursive() {\n+    let mutex = std::cell::UnsafeCell::new(libc::PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP);\n+    unsafe {\n+        assert_eq!(libc::pthread_mutex_lock(mutex.get()), 0);\n+        assert_eq!(libc::pthread_mutex_trylock(mutex.get()), 0);\n+        assert_eq!(libc::pthread_mutex_unlock(mutex.get()), 0);\n+        assert_eq!(libc::pthread_mutex_unlock(mutex.get()), 0);\n+        assert_eq!(libc::pthread_mutex_trylock(mutex.get()), 0);\n+        assert_eq!(libc::pthread_mutex_lock(mutex.get()), 0);\n+        assert_eq!(libc::pthread_mutex_unlock(mutex.get()), 0);\n+        assert_eq!(libc::pthread_mutex_unlock(mutex.get()), 0);\n+        assert_eq!(libc::pthread_mutex_unlock(mutex.get()), libc::EPERM);\n+        assert_eq!(libc::pthread_mutex_destroy(mutex.get()), 0);\n+    }\n+}\n+\n+// Testing the behavior of std::sync::RwLock does not fully exercise the pthread rwlock shims, we\n+// need to go a layer deeper and test the behavior of the libc functions, because\n+// std::sys::unix::rwlock::RWLock itself keeps track of write_locked and num_readers.\n+fn test_rwlock_libc_static_initializer() {\n+    let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n+    unsafe {\n+        assert_eq!(libc::pthread_rwlock_rdlock(rw.get()), 0);\n+        assert_eq!(libc::pthread_rwlock_rdlock(rw.get()), 0);\n+        assert_eq!(libc::pthread_rwlock_unlock(rw.get()), 0);\n+        assert_eq!(libc::pthread_rwlock_tryrdlock(rw.get()), 0);\n+        assert_eq!(libc::pthread_rwlock_unlock(rw.get()), 0);\n+        assert_eq!(libc::pthread_rwlock_trywrlock(rw.get()), libc::EBUSY);\n+        assert_eq!(libc::pthread_rwlock_unlock(rw.get()), 0);\n+\n+        assert_eq!(libc::pthread_rwlock_wrlock(rw.get()), 0);\n+        assert_eq!(libc::pthread_rwlock_tryrdlock(rw.get()), libc::EBUSY);\n+        assert_eq!(libc::pthread_rwlock_trywrlock(rw.get()), libc::EBUSY);\n+        assert_eq!(libc::pthread_rwlock_unlock(rw.get()), 0);\n+\n+        assert_eq!(libc::pthread_rwlock_trywrlock(rw.get()), 0);\n+        assert_eq!(libc::pthread_rwlock_tryrdlock(rw.get()), libc::EBUSY);\n+        assert_eq!(libc::pthread_rwlock_trywrlock(rw.get()), libc::EBUSY);\n+        assert_eq!(libc::pthread_rwlock_unlock(rw.get()), 0);\n+\n+        assert_eq!(libc::pthread_rwlock_destroy(rw.get()), 0);\n+    }\n+}"}, {"sha": "dd4a1843942c44dc3cd369a4b0b01164d0a4f678", "filename": "tests/pass/shims/sleep_long.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fsleep_long.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Fsleep_long.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fshims%2Fsleep_long.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/pass/sleep_long.rs"}, {"sha": "e1094006fb1fab02c62d4774a1a9ae54c24a0030", "filename": "tests/pass/shims/time.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af033ea428bd469c027d771a9c9fa34485ac495c/tests%2Fpass%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fshims%2Ftime.rs?ref=af033ea428bd469c027d771a9c9fa34485ac495c", "previous_filename": "tests/pass/time.rs"}]}