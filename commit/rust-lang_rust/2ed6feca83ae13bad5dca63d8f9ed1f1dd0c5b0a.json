{"sha": "2ed6feca83ae13bad5dca63d8f9ed1f1dd0c5b0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlZDZmZWNhODNhZTEzYmFkNWRjYTYzZDhmOWVkMWYxZGQwYzViMGE=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-03T09:55:11Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-03T09:55:11Z"}, "message": "Update tests\n\nNow structs.rs has no overflowing max_width :)", "tree": {"sha": "9cf52184bb619a32f00d5783e3b28c013e049522", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cf52184bb619a32f00d5783e3b28c013e049522"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ed6feca83ae13bad5dca63d8f9ed1f1dd0c5b0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ed6feca83ae13bad5dca63d8f9ed1f1dd0c5b0a", "html_url": "https://github.com/rust-lang/rust/commit/2ed6feca83ae13bad5dca63d8f9ed1f1dd0c5b0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ed6feca83ae13bad5dca63d8f9ed1f1dd0c5b0a/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34b4a9d3c4ccd47a6dbc676dd0825693a85b9b01", "url": "https://api.github.com/repos/rust-lang/rust/commits/34b4a9d3c4ccd47a6dbc676dd0825693a85b9b01", "html_url": "https://github.com/rust-lang/rust/commit/34b4a9d3c4ccd47a6dbc676dd0825693a85b9b01"}], "stats": {"total": 844, "additions": 838, "deletions": 6}, "files": [{"sha": "3f37d72f3c6049b1d6eea1d5593e9ffbb7137497", "filename": "tests/source/configs-struct_field_align_threshold-20.rs", "status": "added", "additions": 383, "deletions": 0, "changes": 383, "blob_url": "https://github.com/rust-lang/rust/blob/2ed6feca83ae13bad5dca63d8f9ed1f1dd0c5b0a/tests%2Fsource%2Fconfigs-struct_field_align_threshold-20.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed6feca83ae13bad5dca63d8f9ed1f1dd0c5b0a/tests%2Fsource%2Fconfigs-struct_field_align_threshold-20.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-struct_field_align_threshold-20.rs?ref=2ed6feca83ae13bad5dca63d8f9ed1f1dd0c5b0a", "patch": "@@ -0,0 +1,383 @@\n+// rustfmt-struct_field_align_threshold: 20\n+// rustfmt-normalize_comments: true\n+// rustfmt-wrap_comments: true\n+// rustfmt-error_on_line_overflow: false\n+\n+struct Foo {\n+    x: u32,\n+    yy: u32, // comment\n+    zzz: u32,\n+}\n+\n+pub struct Bar {\n+    x: u32,\n+    yy: u32,\n+    zzz: u32,\n+\n+    xxxxxxx: u32,\n+}\n+\n+fn main() {\n+    let foo = Foo {\n+        x: 0,\n+        yy: 1,\n+        zzz: 2,\n+    };\n+\n+    let bar = Bar {\n+        x: 0,\n+        yy: 1,\n+        zzz: 2,\n+\n+        xxxxxxx: 3,\n+    };\n+}\n+\n+                                                                       /// A Doc comment\n+#[AnAttribute]\n+pub struct Foo {\n+    #[rustfmt_skip]\n+    f :   SomeType, // Comment beside a field\n+    f: SomeType, // Comment beside a field\n+    // Comment on a field\n+    #[AnAttribute]\n+    g: SomeOtherType,\n+      /// A doc comment on a field\n+    h: AThirdType,\n+    pub i: TypeForPublicField\n+}\n+\n+// #1029\n+pub struct Foo {\n+    #[doc(hidden)]\n+    // This will NOT get deleted!\n+    bar: String, // hi\n+}\n+\n+// #1029\n+struct X {\n+    // `x` is an important number.\n+    #[allow(unused)] // TODO: use\n+    x: u32,\n+}\n+\n+// #410\n+#[allow(missing_docs)]\n+pub struct Writebatch<K: Key> {\n+    #[allow(dead_code)] //only used for holding the internal pointer\n+    writebatch: RawWritebatch,\n+    marker: PhantomData<K>,\n+}\n+\n+struct Bar;\n+\n+struct NewType(Type,       OtherType);\n+\n+struct\n+NewInt     <T: Copy>(pub i32, SomeType /* inline comment */, T /* sup */\n+\n+\n+    );\n+\n+struct Qux<'a,\n+           N: Clone + 'a,\n+           E: Clone + 'a,\n+           G: Labeller<'a, N, E> + GraphWalk<'a, N, E>,\n+           W: Write + Copy>\n+(\n+    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, // Comment\n+    BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB,\n+    #[AnAttr]\n+    // Comment\n+    /// Testdoc\n+    G,\n+    pub W,\n+);\n+\n+struct Tuple(/*Comment 1*/ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n+             /* Comment 2   */ BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB,);\n+\n+// With a where clause and generics.\n+pub struct Foo<'a, Y: Baz>\n+    where X: Whatever\n+{\n+    f: SomeType, // Comment beside a field\n+}\n+\n+struct Baz {\n+\n+    a: A,  // Comment A\n+    b: B, // Comment B\n+    c: C,   // Comment C\n+\n+}\n+\n+struct Baz {\n+    a: A,  // Comment A\n+\n+    b: B, // Comment B\n+\n+\n+\n+\n+    c: C,   // Comment C\n+}\n+\n+struct Baz {\n+\n+    a: A,\n+\n+    b: B,\n+    c: C,\n+\n+\n+\n+    \n+    d: D\n+\n+}\n+\n+struct Baz\n+{\n+    // Comment A\n+    a: A,\n+    \n+    // Comment B\n+b: B,\n+    // Comment C\n+      c: C,}\n+\n+// Will this be a one-liner?\n+struct Tuple(\n+    A, //Comment\n+    B\n+);\n+\n+pub struct State<F: FnMut() -> time::Timespec> { now: F }\n+\n+pub struct State<F: FnMut() -> ()> { now: F }\n+\n+pub struct State<F: FnMut()> { now: F }\n+\n+struct Palette { /// A map of indizes in the palette to a count of pixels in approximately that color\n+                    foo: i32}\n+\n+// Splitting a single line comment into a block previously had a misalignment\n+// when the field had attributes\n+struct FieldsWithAttributes {\n+    // Pre Comment\n+    #[rustfmt_skip] pub host:String, // Post comment BBBBBBBBBBBBBB BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBBB BBBBBBBBBBB\n+    //Another pre comment\n+    #[attr1]\n+    #[attr2] pub id: usize // CCCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCC CCCCCCCCCCCC\n+}\n+\n+struct Deep {\n+    deeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeep: node::Handle<IdRef<'id, Node<K, V>>,\n+                                                     Type,\n+                                                     NodeType>,\n+}\n+\n+struct Foo<T>(T);\n+struct Foo<T>(T) where T: Copy, T: Eq;\n+struct Foo<T>(TTTTTTTTTTTTTTTTT, UUUUUUUUUUUUUUUUUUUUUUUU, TTTTTTTTTTTTTTTTTTT, UUUUUUUUUUUUUUUUUUU);\n+struct Foo<T>(TTTTTTTTTTTTTTTTTT, UUUUUUUUUUUUUUUUUUUUUUUU, TTTTTTTTTTTTTTTTTTT) where T: PartialEq;\n+struct Foo<T>(TTTTTTTTTTTTTTTTT, UUUUUUUUUUUUUUUUUUUUUUUU, TTTTTTTTTTTTTTTTTTTTT) where T: PartialEq;\n+struct Foo<T>(TTTTTTTTTTTTTTTTT, UUUUUUUUUUUUUUUUUUUUUUUU, TTTTTTTTTTTTTTTTTTT, UUUUUUUUUUUUUUUUUUU) where T: PartialEq;\n+struct Foo<T>(TTTTTTTTTTTTTTTTT, // Foo\n+              UUUUUUUUUUUUUUUUUUUUUUUU /* Bar */,\n+              // Baz\n+              TTTTTTTTTTTTTTTTTTT,\n+              // Qux (FIXME #572 - doc comment)\n+              UUUUUUUUUUUUUUUUUUU);\n+\n+mod m {\n+    struct X<T> where T: Sized {\n+        a: T,\n+    }\n+}\n+\n+struct Foo<T>(TTTTTTTTTTTTTTTTTTT,\n+              /// Qux\n+    UUUUUUUUUUUUUUUUUUU);\n+\n+struct Issue677 {\n+    pub ptr: *const libc::c_void,\n+    pub trace: fn(  obj: \n+          *const libc::c_void, tracer   : *mut   JSTracer   ),\n+}\n+\n+struct Foo {}\n+struct Foo {\n+    }\n+struct Foo {\n+    // comment\n+    }\n+struct Foo {\n+    // trailing space ->    \n+\n+\n+    }\n+struct Foo { /* comment */ }\n+struct Foo( /* comment */ );\n+\n+struct LongStruct {\n+    a: A,\n+    the_quick_brown_fox_jumps_over_the_lazy_dog:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n+}\n+\n+struct Deep {\n+    deeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeep: node::Handle<IdRef<'id, Node<Key, Value>>,\n+                                                                         Type,\n+                                                                         NodeType>,\n+}\n+\n+struct Foo<C=()>(String);\n+\n+// #1364\n+fn foo() {\n+    convex_shape.set_point(0, &Vector2f { x: 400.0, y: 100.0 });\n+    convex_shape.set_point(1, &Vector2f { x: 500.0, y: 70.0 });\n+    convex_shape.set_point(2, &Vector2f { x: 450.0, y: 100.0 });\n+    convex_shape.set_point(3, &Vector2f { x: 580.0, y: 150.0 });\n+}\n+\n+fn main() {\n+    let x = Bar;\n+\n+    // Comment\n+    let y = Foo {a: x };\n+\n+    Foo { a: foo() /* comment*/, /* comment*/ b: bar(), ..something };\n+\n+    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: f(), b: b(), };\n+\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: f(), b: b(), };\n+\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo {\n+        // Comment\n+        a: foo(), // Comment\n+        // Comment\n+        b: bar(), // Comment\n+    };\n+\n+    Foo { a:Bar,\n+          b:f() };\n+\n+    Quux { x: if cond { bar(); }, y: baz() };\n+\n+    A { \n+    // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. Donec et mollis dolor.\n+    first: item(),\n+        // Praesent et diam eget libero egestas mattis sit amet vitae augue.\n+        // Nam tincidunt congue enim, ut porta lorem lacinia consectetur.\n+        second: Item\n+    };\n+\n+    Some(Data::MethodCallData(MethodCallData {\n+        span: sub_span.unwrap(),\n+        scope: self.enclosing_scope(id),\n+        ref_id: def_id,\n+        decl_id: Some(decl_id),\n+    }));\n+\n+    Diagram { /*                 o        This graph demonstrates how                  \n+               *                / \\       significant whitespace is           \n+               *               o   o      preserved.  \n+               *              /|\\   \\\n+               *             o o o   o */\n+              graph: G, }\n+}\n+\n+fn matcher() {\n+    TagTerminatedByteMatcher {\n+        matcher: ByteMatcher {\n+        pattern: b\"<HTML\",\n+        mask: b\"\\xFF\\xDF\\xDF\\xDF\\xDF\\xFF\",\n+    },\n+    };\n+}\n+\n+fn issue177() {\n+    struct Foo<T> { memb: T }\n+    let foo = Foo::<i64> { memb: 10 };\n+}\n+\n+fn issue201() {\n+    let s = S{a:0, ..  b};\n+}\n+\n+fn issue201_2() {\n+    let s = S{a: S2{    .. c}, ..  b};\n+}\n+\n+fn issue278() {\n+    let s = S {\n+        a: 0,\n+        //       \n+        b: 0,\n+    };\n+    let s1 = S {\n+        a: 0,\n+        // foo\n+        //      \n+        // bar\n+        b: 0,\n+    };\n+}\n+\n+fn struct_exprs() {\n+    Foo\n+    { a :  1, b:f( 2)};\n+    Foo{a:1,b:f(2),..g(3)};\n+    LoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongStruct { ..base };\n+    IntrinsicISizesContribution { content_intrinsic_sizes: IntrinsicISizes { minimum_inline_size: 0, }, };\n+}\n+\n+fn issue123() {\n+    Foo { a: b, c: d, e: f };\n+\n+    Foo { a: bb, c: dd, e: ff };\n+\n+    Foo { a: ddddddddddddddddddddd, b: cccccccccccccccccccccccccccccccccccccc };\n+}\n+\n+fn issue491() {\n+    Foo {\n+        guard: None,\n+        arm: 0, // Comment\n+    };\n+\n+    Foo {\n+        arm: 0, // Comment\n+    };\n+\n+    Foo { a: aaaaaaaaaa, b: bbbbbbbb, c: cccccccccc, d: dddddddddd, /* a comment */\n+      e: eeeeeeeee };\n+}\n+\n+fn issue698() {\n+    Record {\n+        ffffffffffffffffffffffffffields: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+    };\n+    Record {\n+        ffffffffffffffffffffffffffields: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+    }\n+}\n+\n+fn issue835() {\n+    MyStruct {};\n+    MyStruct { /* a comment */ };\n+    MyStruct {\n+        // Another comment\n+    };\n+    MyStruct {}\n+}\n+\n+fn field_init_shorthand() {\n+    MyStruct { x, y, z };\n+    MyStruct { x, y, z, .. base };\n+    Foo { aaaaaaaaaa, bbbbbbbb, cccccccccc, dddddddddd, /* a comment */\n+        eeeeeeeee };\n+    Record { ffffffffffffffffffffffffffieldsaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa };\n+}"}, {"sha": "bd507667f25116a3f91e933c7f386d9266e09442", "filename": "tests/source/structs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ed6feca83ae13bad5dca63d8f9ed1f1dd0c5b0a/tests%2Fsource%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed6feca83ae13bad5dca63d8f9ed1f1dd0c5b0a/tests%2Fsource%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstructs.rs?ref=2ed6feca83ae13bad5dca63d8f9ed1f1dd0c5b0a", "patch": "@@ -1,6 +1,5 @@\n // rustfmt-normalize_comments: true\n // rustfmt-wrap_comments: true\n-// rustfmt-error_on_line_overflow: false\n \n                                                                        /// A Doc comment\n #[AnAttribute]"}, {"sha": "db3458bda153d2c5c1c0773875ec49f23d9575e6", "filename": "tests/target/configs-struct_field_align_threshold-20.rs", "status": "added", "additions": 451, "deletions": 0, "changes": 451, "blob_url": "https://github.com/rust-lang/rust/blob/2ed6feca83ae13bad5dca63d8f9ed1f1dd0c5b0a/tests%2Ftarget%2Fconfigs-struct_field_align_threshold-20.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed6feca83ae13bad5dca63d8f9ed1f1dd0c5b0a/tests%2Ftarget%2Fconfigs-struct_field_align_threshold-20.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-struct_field_align_threshold-20.rs?ref=2ed6feca83ae13bad5dca63d8f9ed1f1dd0c5b0a", "patch": "@@ -0,0 +1,451 @@\n+// rustfmt-struct_field_align_threshold: 20\n+// rustfmt-normalize_comments: true\n+// rustfmt-wrap_comments: true\n+// rustfmt-error_on_line_overflow: false\n+\n+struct Foo {\n+    x:   u32,\n+    yy:  u32, // comment\n+    zzz: u32,\n+}\n+\n+pub struct Bar {\n+    x:   u32,\n+    yy:  u32,\n+    zzz: u32,\n+\n+    xxxxxxx: u32,\n+}\n+\n+fn main() {\n+    let foo = Foo {\n+        x:   0,\n+        yy:  1,\n+        zzz: 2,\n+    };\n+\n+    let bar = Bar {\n+        x:   0,\n+        yy:  1,\n+        zzz: 2,\n+\n+        xxxxxxx: 3,\n+    };\n+}\n+\n+/// A Doc comment\n+#[AnAttribute]\n+pub struct Foo {\n+    #[rustfmt_skip]\n+    f :   SomeType, // Comment beside a field\n+    f: SomeType, // Comment beside a field\n+    // Comment on a field\n+    #[AnAttribute]\n+    g: SomeOtherType,\n+    /// A doc comment on a field\n+    h: AThirdType,\n+    pub i: TypeForPublicField,\n+}\n+\n+// #1029\n+pub struct Foo {\n+    #[doc(hidden)]\n+    // This will NOT get deleted!\n+    bar: String, // hi\n+}\n+\n+// #1029\n+struct X {\n+    // `x` is an important number.\n+    #[allow(unused)] // TODO: use\n+    x: u32,\n+}\n+\n+// #410\n+#[allow(missing_docs)]\n+pub struct Writebatch<K: Key> {\n+    #[allow(dead_code)] // only used for holding the internal pointer\n+    writebatch: RawWritebatch,\n+    marker: PhantomData<K>,\n+}\n+\n+struct Bar;\n+\n+struct NewType(Type, OtherType);\n+\n+struct NewInt<T: Copy>(pub i32, SomeType /* inline comment */, T /* sup */);\n+\n+struct Qux<'a,\n+           N: Clone + 'a,\n+           E: Clone + 'a,\n+           G: Labeller<'a, N, E> + GraphWalk<'a, N, E>,\n+           W: Write + Copy>\n+(\n+    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, // Comment\n+    BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB,\n+    #[AnAttr]\n+    // Comment\n+    /// Testdoc\n+    G,\n+    pub W,\n+);\n+\n+struct Tuple(\n+    // Comment 1\n+    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n+    // Comment 2\n+    BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\n+);\n+\n+// With a where clause and generics.\n+pub struct Foo<'a, Y: Baz>\n+where\n+    X: Whatever,\n+{\n+    f: SomeType, // Comment beside a field\n+}\n+\n+struct Baz {\n+    a: A, // Comment A\n+    b: B, // Comment B\n+    c: C, // Comment C\n+}\n+\n+struct Baz {\n+    a: A, // Comment A\n+\n+    b: B, // Comment B\n+\n+    c: C, // Comment C\n+}\n+\n+struct Baz {\n+    a: A,\n+\n+    b: B,\n+    c: C,\n+\n+    d: D,\n+}\n+\n+struct Baz {\n+    // Comment A\n+    a: A,\n+\n+    // Comment B\n+    b: B,\n+    // Comment C\n+    c: C,\n+}\n+\n+// Will this be a one-liner?\n+struct Tuple(A /* Comment */, B);\n+\n+pub struct State<F: FnMut() -> time::Timespec> {\n+    now: F,\n+}\n+\n+pub struct State<F: FnMut() -> ()> {\n+    now: F,\n+}\n+\n+pub struct State<F: FnMut()> {\n+    now: F,\n+}\n+\n+struct Palette {\n+    /// A map of indizes in the palette to a count of pixels in approximately\n+    /// that color\n+    foo: i32,\n+}\n+\n+// Splitting a single line comment into a block previously had a misalignment\n+// when the field had attributes\n+struct FieldsWithAttributes {\n+    // Pre Comment\n+    #[rustfmt_skip] pub host:String, /* Post comment BBBBBBBBBBBBBB BBBBBBBBBBBBBBBB\n+                                      * BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBBB BBBBBBBBBBB */\n+    // Another pre comment\n+    #[attr1]\n+    #[attr2]\n+    pub id: usize, /* CCCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCC\n+                    * CCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCC CCCCCCCCCCCC */\n+}\n+\n+struct Deep {\n+    deeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeep:\n+        node::Handle<IdRef<'id, Node<K, V>>, Type, NodeType>,\n+}\n+\n+struct Foo<T>(T);\n+struct Foo<T>(T)\n+where\n+    T: Copy,\n+    T: Eq;\n+struct Foo<T>(\n+    TTTTTTTTTTTTTTTTT,\n+    UUUUUUUUUUUUUUUUUUUUUUUU,\n+    TTTTTTTTTTTTTTTTTTT,\n+    UUUUUUUUUUUUUUUUUUU\n+);\n+struct Foo<T>(TTTTTTTTTTTTTTTTTT, UUUUUUUUUUUUUUUUUUUUUUUU, TTTTTTTTTTTTTTTTTTT)\n+where\n+    T: PartialEq;\n+struct Foo<T>(TTTTTTTTTTTTTTTTT, UUUUUUUUUUUUUUUUUUUUUUUU, TTTTTTTTTTTTTTTTTTTTT)\n+where\n+    T: PartialEq;\n+struct Foo<T>(\n+    TTTTTTTTTTTTTTTTT,\n+    UUUUUUUUUUUUUUUUUUUUUUUU,\n+    TTTTTTTTTTTTTTTTTTT,\n+    UUUUUUUUUUUUUUUUUUU\n+)\n+where\n+    T: PartialEq;\n+struct Foo<T>(\n+    TTTTTTTTTTTTTTTTT, // Foo\n+    UUUUUUUUUUUUUUUUUUUUUUUU, // Bar\n+    // Baz\n+    TTTTTTTTTTTTTTTTTTT,\n+    // Qux (FIXME #572 - doc comment)\n+    UUUUUUUUUUUUUUUUUUU\n+);\n+\n+mod m {\n+    struct X<T>\n+    where\n+        T: Sized,\n+    {\n+        a: T,\n+    }\n+}\n+\n+struct Foo<T>(\n+    TTTTTTTTTTTTTTTTTTT,\n+    /// Qux\n+    UUUUUUUUUUUUUUUUUUU\n+);\n+\n+struct Issue677 {\n+    pub ptr:   *const libc::c_void,\n+    pub trace: fn(obj: *const libc::c_void, tracer: *mut JSTracer),\n+}\n+\n+struct Foo {}\n+struct Foo {}\n+struct Foo {\n+    // comment\n+}\n+struct Foo {\n+    // trailing space ->\n+}\n+struct Foo { /* comment */ }\n+struct Foo( /* comment */ );\n+\n+struct LongStruct {\n+    a: A,\n+    the_quick_brown_fox_jumps_over_the_lazy_dog:\n+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n+}\n+\n+struct Deep {\n+    deeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeep:\n+        node::Handle<IdRef<'id, Node<Key, Value>>, Type, NodeType>,\n+}\n+\n+struct Foo<C = ()>(String);\n+\n+// #1364\n+fn foo() {\n+    convex_shape.set_point(0, &Vector2f { x: 400.0, y: 100.0 });\n+    convex_shape.set_point(1, &Vector2f { x: 500.0, y: 70.0 });\n+    convex_shape.set_point(2, &Vector2f { x: 450.0, y: 100.0 });\n+    convex_shape.set_point(3, &Vector2f { x: 580.0, y: 150.0 });\n+}\n+\n+fn main() {\n+    let x = Bar;\n+\n+    // Comment\n+    let y = Foo { a: x };\n+\n+    Foo {\n+        a: foo(), // comment\n+        // comment\n+        b: bar(),\n+        ..something\n+    };\n+\n+    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: f(), b: b() };\n+\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo {\n+        a: f(),\n+        b: b(),\n+    };\n+\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo {\n+        // Comment\n+        a: foo(), // Comment\n+        // Comment\n+        b: bar(), // Comment\n+    };\n+\n+    Foo { a: Bar, b: f() };\n+\n+    Quux {\n+        x: if cond {\n+            bar();\n+        },\n+        y: baz(),\n+    };\n+\n+    A {\n+        // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit\n+        // amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante\n+        // hendrerit. Donec et mollis dolor.\n+        first: item(),\n+        // Praesent et diam eget libero egestas mattis sit amet vitae augue.\n+        // Nam tincidunt congue enim, ut porta lorem lacinia consectetur.\n+        second: Item,\n+    };\n+\n+    Some(Data::MethodCallData(MethodCallData {\n+        span:    sub_span.unwrap(),\n+        scope:   self.enclosing_scope(id),\n+        ref_id:  def_id,\n+        decl_id: Some(decl_id),\n+    }));\n+\n+    Diagram {\n+        //                 o        This graph demonstrates how\n+        //                / \\       significant whitespace is\n+        //               o   o      preserved.\n+        //              /|\\   \\\n+        //             o o o   o\n+        graph: G,\n+    }\n+}\n+\n+fn matcher() {\n+    TagTerminatedByteMatcher {\n+        matcher: ByteMatcher {\n+            pattern: b\"<HTML\",\n+            mask:    b\"\\xFF\\xDF\\xDF\\xDF\\xDF\\xFF\",\n+        },\n+    };\n+}\n+\n+fn issue177() {\n+    struct Foo<T> {\n+        memb: T,\n+    }\n+    let foo = Foo::<i64> { memb: 10 };\n+}\n+\n+fn issue201() {\n+    let s = S { a: 0, ..b };\n+}\n+\n+fn issue201_2() {\n+    let s = S { a: S2 { ..c }, ..b };\n+}\n+\n+fn issue278() {\n+    let s = S {\n+        a: 0,\n+        //\n+        b: 0,\n+    };\n+    let s1 = S {\n+        a: 0,\n+        // foo\n+        //\n+        // bar\n+        b: 0,\n+    };\n+}\n+\n+fn struct_exprs() {\n+    Foo { a: 1, b: f(2) };\n+    Foo {\n+        a: 1,\n+        b: f(2),\n+        ..g(3)\n+    };\n+    LoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongStruct {\n+        ..base\n+    };\n+    IntrinsicISizesContribution {\n+        content_intrinsic_sizes: IntrinsicISizes {\n+            minimum_inline_size: 0,\n+        },\n+    };\n+}\n+\n+fn issue123() {\n+    Foo { a: b, c: d, e: f };\n+\n+    Foo {\n+        a: bb,\n+        c: dd,\n+        e: ff,\n+    };\n+\n+    Foo {\n+        a: ddddddddddddddddddddd,\n+        b: cccccccccccccccccccccccccccccccccccccc,\n+    };\n+}\n+\n+fn issue491() {\n+    Foo {\n+        guard: None,\n+        arm:   0, // Comment\n+    };\n+\n+    Foo {\n+        arm: 0, // Comment\n+    };\n+\n+    Foo {\n+        a: aaaaaaaaaa,\n+        b: bbbbbbbb,\n+        c: cccccccccc,\n+        d: dddddddddd, // a comment\n+        e: eeeeeeeee,\n+    };\n+}\n+\n+fn issue698() {\n+    Record {\n+        ffffffffffffffffffffffffffields: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+    };\n+    Record {\n+        ffffffffffffffffffffffffffields:\n+            aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+    }\n+}\n+\n+fn issue835() {\n+    MyStruct {};\n+    MyStruct { /* a comment */ };\n+    MyStruct {\n+        // Another comment\n+    };\n+    MyStruct {}\n+}\n+\n+fn field_init_shorthand() {\n+    MyStruct { x, y, z };\n+    MyStruct { x, y, z, ..base };\n+    Foo {\n+        aaaaaaaaaa,\n+        bbbbbbbb,\n+        cccccccccc,\n+        dddddddddd, // a comment\n+        eeeeeeeee,\n+    };\n+    Record {\n+        ffffffffffffffffffffffffffieldsaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+    };\n+}"}, {"sha": "541abd36c7c2c77797259ff1b21caabf3bb4c8a0", "filename": "tests/target/structs.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2ed6feca83ae13bad5dca63d8f9ed1f1dd0c5b0a/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed6feca83ae13bad5dca63d8f9ed1f1dd0c5b0a/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=2ed6feca83ae13bad5dca63d8f9ed1f1dd0c5b0a", "patch": "@@ -1,6 +1,5 @@\n // rustfmt-normalize_comments: true\n // rustfmt-wrap_comments: true\n-// rustfmt-error_on_line_overflow: false\n \n /// A Doc comment\n #[AnAttribute]\n@@ -132,13 +131,13 @@ struct Palette {\n // when the field had attributes\n struct FieldsWithAttributes {\n     // Pre Comment\n-    #[rustfmt_skip] pub host:String, /* Post comment BBBBBBBBBBBBBB BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBB\n-                                      * BBBBBBBBBBBBBBBBB BBBBBBBBBBB */\n+    #[rustfmt_skip] pub host:String, /* Post comment BBBBBBBBBBBBBB BBBBBBBBBBBBBBBB\n+                                      * BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBBB BBBBBBBBBBB */\n     // Another pre comment\n     #[attr1]\n     #[attr2]\n-    pub id: usize, /* CCCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCCCC\n-                    * CCCCCCCCCCCCCC CCCCCCCCCCCC */\n+    pub id: usize, /* CCCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCC\n+                    * CCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCC CCCCCCCCCCCC */\n }\n \n struct Deep {"}]}