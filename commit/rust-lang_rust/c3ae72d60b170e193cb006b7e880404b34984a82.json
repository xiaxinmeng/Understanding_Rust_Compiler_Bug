{"sha": "c3ae72d60b170e193cb006b7e880404b34984a82", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYWU3MmQ2MGIxNzBlMTkzY2IwMDZiN2U4ODA0MDRiMzQ5ODRhODI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-29T17:53:30Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-29T17:53:30Z"}, "message": "Actually use last_use info on closed over var in kind.rs\n\nIssue ##1894", "tree": {"sha": "f5b8be9bb0fb19bf83b5d50310cbe89bf69dd1a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5b8be9bb0fb19bf83b5d50310cbe89bf69dd1a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3ae72d60b170e193cb006b7e880404b34984a82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3ae72d60b170e193cb006b7e880404b34984a82", "html_url": "https://github.com/rust-lang/rust/commit/c3ae72d60b170e193cb006b7e880404b34984a82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3ae72d60b170e193cb006b7e880404b34984a82/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0da1aca498114a1caa608592dd63bebee615755e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0da1aca498114a1caa608592dd63bebee615755e", "html_url": "https://github.com/rust-lang/rust/commit/0da1aca498114a1caa608592dd63bebee615755e"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "3c56f1c7c6650d283a38fe8195a62e7b3916a916", "filename": "src/comp/middle/kind.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c3ae72d60b170e193cb006b7e880404b34984a82/src%2Fcomp%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ae72d60b170e193cb006b7e880404b34984a82/src%2Fcomp%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fkind.rs?ref=c3ae72d60b170e193cb006b7e880404b34984a82", "patch": "@@ -70,7 +70,7 @@ fn with_appropriate_checker(cx: ctx, id: node_id,\n // Check that the free variables used in a shared/sendable closure conform\n // to the copy/move kind bounds. Then recursively check the function body.\n fn check_fn(fk: visit::fn_kind, decl: fn_decl, body: blk, sp: span,\n-            id: node_id, cx: ctx, v: visit::vt<ctx>) {\n+            fn_id: node_id, cx: ctx, v: visit::vt<ctx>) {\n \n     // n.b.: This could be the body of either a fn decl or a fn expr.  In the\n     // former case, the prototype will be proto_bare and no check occurs.  In\n@@ -82,15 +82,22 @@ fn check_fn(fk: visit::fn_kind, decl: fn_decl, body: blk, sp: span,\n     // \"future-proof\" to do it this way, as check_fn_body() is supposed to be\n     // the common flow point for all functions that appear in the AST.\n \n-    with_appropriate_checker(cx, id) { |checker|\n-        for @{def, span} in *freevars::get_freevars(cx.tcx, id) {\n+    with_appropriate_checker(cx, fn_id) { |checker|\n+        for @{def, span} in *freevars::get_freevars(cx.tcx, fn_id) {\n             let id = ast_util::def_id_of_def(def).node;\n+            if checker == check_copy {\n+                let last_uses = alt check cx.last_uses.find(fn_id) {\n+                  some(last_use::closes_over(vars)) { vars }\n+                  none { [] }\n+                };\n+                if option::is_some(vec::position_elt(last_uses, id)) { cont; }\n+            }                    \n             let ty = ty::node_id_to_type(cx.tcx, id);\n             checker(cx, ty, span);\n         }\n     }\n \n-    visit::visit_fn(fk, decl, body, sp, id, cx, v);\n+    visit::visit_fn(fk, decl, body, sp, fn_id, cx, v);\n }\n \n fn check_fn_cap_clause(cx: ctx,"}]}