{"sha": "e0715380dc27c06c168696a89dd2596debfa1919", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNzE1MzgwZGMyN2MwNmMxNjg2OTZhODlkZDI1OTZkZWJmYTE5MTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-27T21:54:18Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-27T21:54:18Z"}, "message": "Add more std docs", "tree": {"sha": "27490bef8e7aa8c8b5fe3b1dcbc03628d6ae0b2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27490bef8e7aa8c8b5fe3b1dcbc03628d6ae0b2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0715380dc27c06c168696a89dd2596debfa1919", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0715380dc27c06c168696a89dd2596debfa1919", "html_url": "https://github.com/rust-lang/rust/commit/e0715380dc27c06c168696a89dd2596debfa1919", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0715380dc27c06c168696a89dd2596debfa1919/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8222fa4e278cc15f5bf1044c6b1960a4291dce31", "url": "https://api.github.com/repos/rust-lang/rust/commits/8222fa4e278cc15f5bf1044c6b1960a4291dce31", "html_url": "https://github.com/rust-lang/rust/commit/8222fa4e278cc15f5bf1044c6b1960a4291dce31"}], "stats": {"total": 172, "additions": 145, "deletions": 27}, "files": [{"sha": "c0dc9ee588dffde30bc7135fae3eddb75109d28c", "filename": "src/lib/term.rs", "status": "modified", "additions": 43, "deletions": 22, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/e0715380dc27c06c168696a89dd2596debfa1919/src%2Flib%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0715380dc27c06c168696a89dd2596debfa1919/src%2Flib%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fterm.rs?ref=e0715380dc27c06c168696a89dd2596debfa1919", "patch": "@@ -1,52 +1,65 @@\n+/*\n+Module: term\n \n+Simple ANSI color library\n+*/\n \n-\n-// Simple ANSI color library.\n-//\n // TODO: Windows support.\n-const color_black: u8 = 0u8;\n \n+/* Const: color_black */\n+const color_black: u8 = 0u8;\n+/* Const: color_red */\n const color_red: u8 = 1u8;\n-\n+/* Const: color_green */\n const color_green: u8 = 2u8;\n-\n+/* Const: color_yellow */\n const color_yellow: u8 = 3u8;\n-\n+/* Const: color_blue */\n const color_blue: u8 = 4u8;\n-\n+/* Const: color_magenta */\n const color_magenta: u8 = 5u8;\n-\n+/* Const: color_cyan */\n const color_cyan: u8 = 6u8;\n-\n+/* Const: color_light_gray */\n const color_light_gray: u8 = 7u8;\n-\n+/* Const: color_light_grey */\n const color_light_grey: u8 = 7u8;\n-\n+/* Const: color_dark_gray */\n const color_dark_gray: u8 = 8u8;\n-\n+/* Const: color_dark_grey */\n const color_dark_grey: u8 = 8u8;\n-\n+/* Const: color_bright_red */\n const color_bright_red: u8 = 9u8;\n-\n+/* Const: color_bright_green */\n const color_bright_green: u8 = 10u8;\n-\n+/* Const: color_bright_yellow */\n const color_bright_yellow: u8 = 11u8;\n-\n+/* Const: color_bright_blue */\n const color_bright_blue: u8 = 12u8;\n-\n+/* Const: color_bright_magenta */\n const color_bright_magenta: u8 = 13u8;\n-\n+/* Const: color_bright_cyan */\n const color_bright_cyan: u8 = 14u8;\n-\n+/* Const: color_bright_white */\n const color_bright_white: u8 = 15u8;\n \n fn esc(writer: io::buf_writer) { writer.write([0x1bu8, '[' as u8]); }\n \n+/*\n+Function: reset\n+\n+Reset the foreground and background colors to default\n+*/\n fn reset(writer: io::buf_writer) {\n     esc(writer);\n     writer.write(['0' as u8, 'm' as u8]);\n }\n \n+/*\n+Function: color_supported\n+\n+Returns true if the terminal supports color\n+*/\n fn color_supported() -> bool {\n     let supported_terms = [\"xterm-color\", \"xterm\", \"screen-bce\"];\n     ret alt generic_os::getenv(\"TERM\") {\n@@ -67,15 +80,23 @@ fn set_color(writer: io::buf_writer, first_char: u8, color: u8) {\n     writer.write([first_char, ('0' as u8) + color, 'm' as u8]);\n }\n \n+/*\n+Function: fg\n+\n+Set the foreground color\n+*/\n fn fg(writer: io::buf_writer, color: u8) {\n     ret set_color(writer, '3' as u8, color);\n }\n \n+/*\n+Function: fg\n+\n+Set the background color\n+*/\n fn bg(writer: io::buf_writer, color: u8) {\n     ret set_color(writer, '4' as u8, color);\n }\n-// export fg;\n-// export bg;\n \n // Local Variables:\n // fill-column: 78;"}, {"sha": "9460c96154d32d1bbd6c1611e398cd0092754b3b", "filename": "src/lib/time.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0715380dc27c06c168696a89dd2596debfa1919/src%2Flib%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0715380dc27c06c168696a89dd2596debfa1919/src%2Flib%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftime.rs?ref=e0715380dc27c06c168696a89dd2596debfa1919", "patch": "@@ -1,21 +1,29 @@\n+/*\n+Module: time\n+*/\n \n+// FIXME: Document what these functions do\n \n native \"c-stack-cdecl\" mod rustrt {\n     fn get_time(&sec: u32, &usec: u32);\n     fn nano_time(&ns: u64);\n }\n \n+/* Type: timeval */\n type timeval = {sec: u32, usec: u32};\n \n+/* Function: get_time */\n fn get_time() -> timeval {\n     let sec = 0u32;\n     let usec = 0u32;\n     rustrt::get_time(sec, usec);\n     ret {sec: sec, usec: usec};\n }\n \n+/* Function: precise_time_ns */\n fn precise_time_ns() -> u64 { let ns = 0u64; rustrt::nano_time(ns); ret ns; }\n \n+/* Function: precise_time_s */\n fn precise_time_s() -> float {\n     ret (precise_time_ns() as float) / 1000000000.;\n }"}, {"sha": "626ca8b6fbdc0398c3bce7d2f91d13b146f9538a", "filename": "src/lib/u32.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e0715380dc27c06c168696a89dd2596debfa1919/src%2Flib%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0715380dc27c06c168696a89dd2596debfa1919/src%2Flib%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fu32.rs?ref=e0715380dc27c06c168696a89dd2596debfa1919", "patch": "@@ -1,6 +1,21 @@\n-pure fn max_value() -> u32 { ret 4294967296u32; }\n+/*\n+Module: u32\n+*/\n+\n+/*\n+Function: min_value\n+\n+Return the minimal value for a u32\n+*/\n pure fn min_value() -> u32 { ret 0u32; }\n \n+/*\n+Function: max_value\n+\n+Return the maximal value for a u32\n+*/\n+pure fn max_value() -> u32 { ret 4294967296u32; }\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "b0b78af3995df45acac563b91dc04ef073dca133", "filename": "src/lib/u64.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e0715380dc27c06c168696a89dd2596debfa1919/src%2Flib%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0715380dc27c06c168696a89dd2596debfa1919/src%2Flib%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fu64.rs?ref=e0715380dc27c06c168696a89dd2596debfa1919", "patch": "@@ -1,6 +1,26 @@\n-pure fn max_value() -> u64 { ret 18446744073709551615u64; }\n+/*\n+Module: u64\n+*/\n+\n+/*\n+Function: min_value\n+\n+Return the minimal value for a u64\n+*/\n pure fn min_value() -> u64 { ret 0u64; }\n \n+/*\n+Function: max_value\n+\n+Return the maximal value for a u64\n+*/\n+pure fn max_value() -> u64 { ret 18446744073709551615u64; }\n+\n+/*\n+Function: to_str\n+\n+Convert to a string in a given base\n+*/\n fn to_str(n: u64, radix: uint) -> str {\n     assert (0u < radix && radix <= 16u);\n \n@@ -36,4 +56,9 @@ fn to_str(n: u64, radix: uint) -> str {\n     ret s;\n }\n \n+/*\n+Function: str\n+\n+Convert to a string\n+*/\n fn str(n: u64) -> str { ret to_str(n, 10u); }"}, {"sha": "6faab75873ca692e913ede4211f9e79fc31166f1", "filename": "src/lib/u8.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e0715380dc27c06c168696a89dd2596debfa1919/src%2Flib%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0715380dc27c06c168696a89dd2596debfa1919/src%2Flib%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fu8.rs?ref=e0715380dc27c06c168696a89dd2596debfa1919", "patch": "@@ -49,6 +49,11 @@ pure fn ge(x: u8, y: u8) -> bool { ret x >= y; }\n /* Predicate: gt */\n pure fn gt(x: u8, y: u8) -> bool { ret x > y; }\n \n+/*\n+Function: range\n+\n+Iterate over the range [`lo`..`hi`)\n+*/\n fn range(lo: u8, hi: u8, it: block(u8)) {\n     while lo < hi { it(lo); lo += 1u8; }\n }"}, {"sha": "0259555adc4a9996120e9a4bd8d4872958c7f73a", "filename": "src/lib/unsafe.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e0715380dc27c06c168696a89dd2596debfa1919/src%2Flib%2Funsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0715380dc27c06c168696a89dd2596debfa1919/src%2Flib%2Funsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Funsafe.rs?ref=e0715380dc27c06c168696a89dd2596debfa1919", "patch": "@@ -1,4 +1,8 @@\n-// Unsafe operations.\n+/*\n+Module: unsafe\n+\n+Unsafe operations\n+*/\n \n native \"rust-intrinsic\" mod rusti {\n     fn cast<T, U>(src: T) -> U;\n@@ -8,7 +12,21 @@ native \"c-stack-cdecl\" mod rustrt {\n     fn leak<T>(-thing: T);\n }\n \n-// Casts the value at `src` to U. The two types must have the same length.\n+/*\n+Function: reinterpret_cast\n+\n+Casts the value at `src` to U. The two types must have the same length.\n+*/\n fn reinterpret_cast<T, U>(src: T) -> U { ret rusti::cast(src); }\n \n+/*\n+Function: leak\n+\n+Move `thing` into the void.\n+\n+The leak function will take ownership of the provided value but neglect\n+to run any required cleanup or memory-management operations on it. This\n+can be used for various acts of magick, particularly when using\n+reinterpret_cast on managed pointer types.\n+*/\n fn leak<T>(-thing: T) { rustrt::leak(thing); }"}, {"sha": "466dfdcc97f219fb94a220527c1020ce2ba0b6bd", "filename": "src/lib/util.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e0715380dc27c06c168696a89dd2596debfa1919/src%2Flib%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0715380dc27c06c168696a89dd2596debfa1919/src%2Flib%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Futil.rs?ref=e0715380dc27c06c168696a89dd2596debfa1919", "patch": "@@ -1,23 +1,49 @@\n+/*\n+Module: util\n+*/\n \n+/*\n+Function: id\n+\n+The identity function\n+*/\n pure fn id<T>(x: T) -> T { x }\n \n+/*\n+Function: unreachable\n+\n+A standard function to use to indicate unreachable code. Because the\n+function is guaranteed to fail typestate will correctly identify\n+any code paths following the appearance of this function as unreachable.\n+*/\n fn unreachable() -> ! {\n     fail \"Internal error: entered unreachable code\";\n }\n \n /* FIXME (issue #141):  See test/run-pass/constrained-type.rs.  Uncomment\n  * the constraint once fixed. */\n+/*\n+Function: rational\n+\n+A rational number\n+*/\n type rational = {num: int, den: int}; // : int::positive(*.den);\n \n-// : int::positive(*.den);\n+/*\n+Function: rational_leq\n+*/\n pure fn rational_leq(x: rational, y: rational) -> bool {\n     // NB: Uses the fact that rationals have positive denominators WLOG:\n \n     x.num * y.den <= y.num * x.den\n }\n \n+/*\n+Function: orb\n+*/\n pure fn orb(a: bool, b: bool) -> bool { a || b }\n \n+// FIXME: Document what this is for or delete it\n tag void {\n     void(@void);\n }"}]}