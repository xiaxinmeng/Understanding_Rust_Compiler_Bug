{"sha": "43e04fb5522642b6b5230592934e9ee100f2fd56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZTA0ZmI1NTIyNjQyYjZiNTIzMDU5MjkzNGU5ZWUxMDBmMmZkNTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-08T05:50:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-08T05:50:16Z"}, "message": "Auto merge of #58191 - varkor:const-generics-ast, r=petrochenkov\n\nAdd const generics to the AST\n\nThis is mostly split out from https://github.com/rust-lang/rust/pull/53645 in an effort to make progress merging const generics piecewise instead of in one go.\n\ncc @yodaldevoid, @petrochenkov\n\nr? @eddyb", "tree": {"sha": "2c850f35dba2f93a76e2c624bd0a99fd6e2f4e25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c850f35dba2f93a76e2c624bd0a99fd6e2f4e25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43e04fb5522642b6b5230592934e9ee100f2fd56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43e04fb5522642b6b5230592934e9ee100f2fd56", "html_url": "https://github.com/rust-lang/rust/commit/43e04fb5522642b6b5230592934e9ee100f2fd56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43e04fb5522642b6b5230592934e9ee100f2fd56/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1731801163df1d3a8d4ddfa68adac2ec833ef7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1731801163df1d3a8d4ddfa68adac2ec833ef7f", "html_url": "https://github.com/rust-lang/rust/commit/d1731801163df1d3a8d4ddfa68adac2ec833ef7f"}, {"sha": "f2fe71c02ac7ecb29106b1a826d657ff5705ad6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2fe71c02ac7ecb29106b1a826d657ff5705ad6c", "html_url": "https://github.com/rust-lang/rust/commit/f2fe71c02ac7ecb29106b1a826d657ff5705ad6c"}], "stats": {"total": 1794, "additions": 1085, "deletions": 709}, "files": [{"sha": "15efa7650293c52b2f09cd94b56c93fdc42a261e", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -52,6 +52,7 @@ pub enum Def {\n     AssociatedExistential(DefId),\n     PrimTy(hir::PrimTy),\n     TyParam(DefId),\n+    ConstParam(DefId),\n     SelfTy(Option<DefId> /* trait */, Option<DefId> /* impl */),\n     ToolMod, // e.g., `rustfmt` in `#[rustfmt::skip]`\n \n@@ -265,7 +266,8 @@ impl Def {\n             Def::Fn(id) | Def::Mod(id) | Def::Static(id, _) |\n             Def::Variant(id) | Def::VariantCtor(id, ..) | Def::Enum(id) |\n             Def::TyAlias(id) | Def::TraitAlias(id) |\n-            Def::AssociatedTy(id) | Def::TyParam(id) | Def::Struct(id) | Def::StructCtor(id, ..) |\n+            Def::AssociatedTy(id) | Def::TyParam(id) | Def::ConstParam(id) | Def::Struct(id) |\n+            Def::StructCtor(id, ..) |\n             Def::Union(id) | Def::Trait(id) | Def::Method(id) | Def::Const(id) |\n             Def::AssociatedConst(id) | Def::Macro(id, ..) |\n             Def::Existential(id) | Def::AssociatedExistential(id) | Def::ForeignTy(id) => {\n@@ -322,6 +324,7 @@ impl Def {\n             Def::Const(..) => \"constant\",\n             Def::AssociatedConst(..) => \"associated constant\",\n             Def::TyParam(..) => \"type parameter\",\n+            Def::ConstParam(..) => \"const parameter\",\n             Def::PrimTy(..) => \"builtin type\",\n             Def::Local(..) => \"local variable\",\n             Def::Upvar(..) => \"closure capture\","}, {"sha": "3de41b1665d6dd08299725a2e04f51498cbefddf", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 47, "deletions": 32, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1157,6 +1157,15 @@ impl<'a> LoweringContext<'a> {\n         match arg {\n             ast::GenericArg::Lifetime(lt) => GenericArg::Lifetime(self.lower_lifetime(&lt)),\n             ast::GenericArg::Type(ty) => GenericArg::Type(self.lower_ty_direct(&ty, itctx)),\n+            ast::GenericArg::Const(ct) => {\n+                // FIXME(const_generics): const generics are not yet defined in the HIR.\n+                self.sess.struct_span_err(\n+                    ct.value.span,\n+                    \"const generics in any position are currently unsupported\",\n+                ).emit();\n+                self.sess.abort_if_errors();\n+                bug!();\n+            }\n         }\n     }\n \n@@ -2441,7 +2450,7 @@ impl<'a> LoweringContext<'a> {\n             |this| this.lower_param_bounds(&param.bounds, itctx.reborrow()),\n         );\n \n-        match param.kind {\n+        let (name, kind) = match param.kind {\n             GenericParamKind::Lifetime => {\n                 let was_collecting_in_band = self.is_collecting_in_band_lifetimes;\n                 self.is_collecting_in_band_lifetimes = false;\n@@ -2457,22 +2466,14 @@ impl<'a> LoweringContext<'a> {\n                         | hir::LifetimeName::Static => hir::ParamName::Plain(lt.name.ident()),\n                     hir::LifetimeName::Error => ParamName::Error,\n                 };\n-                let param = hir::GenericParam {\n-                    id: lt.id,\n-                    hir_id: lt.hir_id,\n-                    name: param_name,\n-                    span: lt.span,\n-                    pure_wrt_drop: attr::contains_name(&param.attrs, \"may_dangle\"),\n-                    attrs: self.lower_attrs(&param.attrs),\n-                    bounds,\n-                    kind: hir::GenericParamKind::Lifetime {\n-                        kind: hir::LifetimeParamKind::Explicit,\n-                    }\n+\n+                let kind = hir::GenericParamKind::Lifetime {\n+                    kind: hir::LifetimeParamKind::Explicit\n                 };\n \n                 self.is_collecting_in_band_lifetimes = was_collecting_in_band;\n \n-                param\n+                (param_name, kind)\n             }\n             GenericParamKind::Type { ref default, .. } => {\n                 // Don't expose `Self` (recovered \"keyword used as ident\" parse error).\n@@ -2491,27 +2492,41 @@ impl<'a> LoweringContext<'a> {\n                                    .chain(params)\n                                    .collect();\n                 }\n-                let LoweredNodeId { node_id, hir_id } = self.lower_node_id(param.id);\n \n-                hir::GenericParam {\n-                    id: node_id,\n-                    hir_id,\n-                    name: hir::ParamName::Plain(ident),\n-                    pure_wrt_drop: attr::contains_name(&param.attrs, \"may_dangle\"),\n-                    attrs: self.lower_attrs(&param.attrs),\n-                    bounds,\n-                    span: ident.span,\n-                    kind: hir::GenericParamKind::Type {\n-                        default: default.as_ref().map(|x| {\n-                            self.lower_ty(x, ImplTraitContext::disallowed())\n-                        }),\n-                        synthetic: param.attrs.iter()\n-                                              .filter(|attr| attr.check_name(\"rustc_synthetic\"))\n-                                              .map(|_| hir::SyntheticTyParamKind::ImplTrait)\n-                                              .next(),\n-                    }\n-                }\n+                let kind = hir::GenericParamKind::Type {\n+                    default: default.as_ref().map(|x| {\n+                        self.lower_ty(x, ImplTraitContext::disallowed())\n+                    }),\n+                    synthetic: param.attrs.iter()\n+                                          .filter(|attr| attr.check_name(\"rustc_synthetic\"))\n+                                          .map(|_| hir::SyntheticTyParamKind::ImplTrait)\n+                                          .next(),\n+                };\n+\n+                (hir::ParamName::Plain(ident), kind)\n             }\n+            GenericParamKind::Const { .. } => {\n+                // FIXME(const_generics): const generics are not yet defined in the HIR.\n+                self.sess.struct_span_err(\n+                    param.ident.span,\n+                    \"const generics in any position are currently unsupported\",\n+                ).emit();\n+                self.sess.abort_if_errors();\n+                bug!();\n+            }\n+        };\n+\n+        let LoweredNodeId { node_id, hir_id } = self.lower_node_id(param.id);\n+\n+        hir::GenericParam {\n+            id: node_id,\n+            hir_id,\n+            name,\n+            span: param.ident.span,\n+            pure_wrt_drop: attr::contains_name(&param.attrs, \"may_dangle\"),\n+            attrs: self.lower_attrs(&param.attrs),\n+            bounds,\n+            kind,\n         }\n     }\n "}, {"sha": "02fb503e752b582ab3ef6d4f6c8df24b46999bec", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -218,6 +218,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         let def_path_data = match param.kind {\n             GenericParamKind::Lifetime { .. } => DefPathData::LifetimeParam(name),\n             GenericParamKind::Type { .. } => DefPathData::TypeParam(name),\n+            GenericParamKind::Const { .. } => DefPathData::ConstParam(name),\n         };\n         self.create_def(param.id, def_path_data, REGULAR_SPACE, param.ident.span);\n "}, {"sha": "84e9cde6df16012a3867cc9bb1f7bc3dd14d1d1d", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -356,10 +356,12 @@ pub enum DefPathData {\n     /// A closure expression\n     ClosureExpr,\n     // Subportions of items\n-    /// A type parameter (generic parameter)\n+    /// A type (generic) parameter\n     TypeParam(InternedString),\n-    /// A lifetime definition\n+    /// A lifetime (generic) parameter\n     LifetimeParam(InternedString),\n+    /// A const (generic) parameter\n+    ConstParam(InternedString),\n     /// A variant of a enum\n     EnumVariant(InternedString),\n     /// A struct field\n@@ -641,6 +643,7 @@ impl DefPathData {\n             MacroDef(name) |\n             TypeParam(name) |\n             LifetimeParam(name) |\n+            ConstParam(name) |\n             EnumVariant(name) |\n             Field(name) |\n             GlobalMetaData(name) => Some(name),\n@@ -669,6 +672,7 @@ impl DefPathData {\n             MacroDef(name) |\n             TypeParam(name) |\n             LifetimeParam(name) |\n+            ConstParam(name) |\n             EnumVariant(name) |\n             Field(name) |\n             GlobalMetaData(name) => {"}, {"sha": "712fd360fbb6fffd31e423b2ad96f18387a6de9a", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1046,6 +1046,7 @@ impl_stable_hash_for!(enum hir::def::Def {\n     AssociatedExistential(def_id),\n     PrimTy(prim_ty),\n     TyParam(def_id),\n+    ConstParam(def_id),\n     SelfTy(trait_def_id, impl_def_id),\n     ForeignTy(def_id),\n     Fn(def_id),"}, {"sha": "8214c8bacc70408aae36a6df6023fcd7321d1658", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -325,6 +325,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             data @ DefPathData::Module(..) |\n             data @ DefPathData::TypeParam(..) |\n             data @ DefPathData::LifetimeParam(..) |\n+            data @ DefPathData::ConstParam(..) |\n             data @ DefPathData::EnumVariant(..) |\n             data @ DefPathData::Field(..) |\n             data @ DefPathData::AnonConst |"}, {"sha": "a12ec3471a91c7b84f48e1bcf515d39dfc535bc5", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -426,6 +426,7 @@ impl PrintContext {\n                     DefPathData::ClosureExpr |\n                     DefPathData::TypeParam(_) |\n                     DefPathData::LifetimeParam(_) |\n+                    DefPathData::ConstParam(_) |\n                     DefPathData::Field(_) |\n                     DefPathData::StructCtor |\n                     DefPathData::AnonConst |"}, {"sha": "a1c9d3ece2c0dee9844279b75a41438d84893843", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 118, "deletions": 16, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -7,8 +7,10 @@\n // or type checking or some other kind of complex analysis.\n \n use std::mem;\n+use syntax::print::pprust;\n use rustc::lint;\n use rustc::session::Session;\n+use rustc_data_structures::fx::FxHashMap;\n use syntax::ast::*;\n use syntax::attr;\n use syntax::source_map::Spanned;\n@@ -271,7 +273,74 @@ impl<'a> AstValidator<'a> {\n             _ => None,\n         }\n     }\n+}\n \n+enum GenericPosition {\n+    Param,\n+    Arg,\n+}\n+\n+fn validate_generics_order<'a>(\n+    handler: &errors::Handler,\n+    generics: impl Iterator<Item = (ParamKindOrd, Span, Option<String>)>,\n+    pos: GenericPosition,\n+    span: Span,\n+) {\n+    let mut max_param: Option<ParamKindOrd> = None;\n+    let mut out_of_order = FxHashMap::default();\n+    let mut param_idents = vec![];\n+\n+    for (kind, span, ident) in generics {\n+        if let Some(ident) = ident {\n+            param_idents.push((kind, param_idents.len(), ident));\n+        }\n+        let max_param = &mut max_param;\n+        match max_param {\n+            Some(max_param) if *max_param > kind => {\n+                let entry = out_of_order.entry(kind).or_insert((*max_param, vec![]));\n+                entry.1.push(span);\n+            }\n+            Some(_) | None => *max_param = Some(kind),\n+        };\n+    }\n+\n+    let mut ordered_params = \"<\".to_string();\n+    if !out_of_order.is_empty() {\n+        param_idents.sort_by_key(|&(po, i, _)| (po, i));\n+        let mut first = true;\n+        for (_, _, ident) in param_idents {\n+            if !first {\n+                ordered_params += \", \";\n+            }\n+            ordered_params += &ident;\n+            first = false;\n+        }\n+    }\n+    ordered_params += \">\";\n+\n+    let pos_str = match pos {\n+        GenericPosition::Param => \"parameter\",\n+        GenericPosition::Arg => \"argument\",\n+    };\n+\n+    for (param_ord, (max_param, spans)) in out_of_order {\n+        let mut err = handler.struct_span_err(spans,\n+            &format!(\n+                \"{} {pos}s must be declared prior to {} {pos}s\",\n+                param_ord,\n+                max_param,\n+                pos = pos_str,\n+            ));\n+        if let GenericPosition::Param = pos {\n+            err.span_suggestion(\n+                span,\n+                &format!(\"reorder the {}s: lifetimes, then types, then consts\", pos_str),\n+                ordered_params.clone(),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+        err.emit();\n+    }\n }\n \n impl<'a> Visitor<'a> for AstValidator<'a> {\n@@ -412,6 +481,26 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         .note(\"only trait implementations may be annotated with default\").emit();\n                 }\n             }\n+            ItemKind::Fn(_, header, ref generics, _) => {\n+                // We currently do not permit const generics in `const fn`, as\n+                // this is tantamount to allowing compile-time dependent typing.\n+                if header.constness.node == Constness::Const {\n+                    // Look for const generics and error if we find any.\n+                    for param in &generics.params {\n+                        match param.kind {\n+                            GenericParamKind::Const { .. } => {\n+                                self.err_handler()\n+                                    .struct_span_err(\n+                                        item.span,\n+                                        \"const parameters are not permitted in `const fn`\",\n+                                    )\n+                                    .emit();\n+                            }\n+                            _ => {}\n+                        }\n+                    }\n+                }\n+            }\n             ItemKind::ForeignMod(..) => {\n                 self.invalid_visibility(\n                     &item.vis,\n@@ -508,6 +597,13 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         match *generic_args {\n             GenericArgs::AngleBracketed(ref data) => {\n                 walk_list!(self, visit_generic_arg, &data.args);\n+                validate_generics_order(self.err_handler(), data.args.iter().map(|arg| {\n+                    (match arg {\n+                        GenericArg::Lifetime(..) => ParamKindOrd::Lifetime,\n+                        GenericArg::Type(..) => ParamKindOrd::Type,\n+                        GenericArg::Const(..) => ParamKindOrd::Const,\n+                    }, arg.span(), None)\n+                }), GenericPosition::Arg, generic_args.span());\n                 // Type bindings such as `Item=impl Debug` in `Iterator<Item=Debug>`\n                 // are allowed to contain nested `impl Trait`.\n                 self.with_impl_trait(None, |this| {\n@@ -526,34 +622,40 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n \n     fn visit_generics(&mut self, generics: &'a Generics) {\n-        let mut seen_non_lifetime_param = false;\n-        let mut seen_default = None;\n+        let mut prev_ty_default = None;\n         for param in &generics.params {\n-            match (&param.kind, seen_non_lifetime_param) {\n-                (GenericParamKind::Lifetime { .. }, true) => {\n+            if let GenericParamKind::Type { ref default, .. } = param.kind {\n+                if default.is_some() {\n+                    prev_ty_default = Some(param.ident.span);\n+                } else if let Some(span) = prev_ty_default {\n                     self.err_handler()\n-                        .span_err(param.ident.span, \"lifetime parameters must be leading\");\n-                },\n-                (GenericParamKind::Lifetime { .. }, false) => {}\n-                (GenericParamKind::Type { ref default, .. }, _) => {\n-                    seen_non_lifetime_param = true;\n-                    if default.is_some() {\n-                        seen_default = Some(param.ident.span);\n-                    } else if let Some(span) = seen_default {\n-                        self.err_handler()\n-                            .span_err(span, \"type parameters with a default must be trailing\");\n-                        break;\n-                    }\n+                        .span_err(span, \"type parameters with a default must be trailing\");\n+                    break;\n                 }\n             }\n         }\n+\n+        validate_generics_order(self.err_handler(), generics.params.iter().map(|param| {\n+            let span = param.ident.span;\n+            let ident = Some(param.ident.to_string());\n+            match &param.kind {\n+                GenericParamKind::Lifetime { .. } => (ParamKindOrd::Lifetime, span, ident),\n+                GenericParamKind::Type { .. } => (ParamKindOrd::Type, span, ident),\n+                GenericParamKind::Const { ref ty } => {\n+                    let ty = pprust::ty_to_string(ty);\n+                    (ParamKindOrd::Const, span, Some(format!(\"const {}: {}\", param.ident, ty)))\n+                }\n+            }\n+        }), GenericPosition::Param, generics.span);\n+\n         for predicate in &generics.where_clause.predicates {\n             if let WherePredicate::EqPredicate(ref predicate) = *predicate {\n                 self.err_handler()\n                     .span_err(predicate.span, \"equality constraints are not yet \\\n                                                supported in where clauses (see #20041)\");\n             }\n         }\n+\n         visit::walk_generics(self, generics)\n     }\n "}, {"sha": "5c095994a1bbd422f3a55d4b883b7de11db6ec37", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -414,8 +414,8 @@ https://doc.rust-lang.org/reference.html#use-declarations\n \"##,\n \n E0401: r##\"\n-Inner items do not inherit type parameters from the functions they are embedded\n-in.\n+Inner items do not inherit type or const parameters from the functions\n+they are embedded in.\n \n Erroneous code example:\n "}, {"sha": "8d345e6d8fe1d04795f53169440e5fb17e213936", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 152, "deletions": 70, "changes": 222, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -13,7 +13,7 @@ use rustc_errors as errors;\n \n pub use rustc::hir::def::{Namespace, PerNS};\n \n-use TypeParameters::*;\n+use GenericParameters::*;\n use RibKind::*;\n \n use rustc::hir::map::{Definitions, DefCollector};\n@@ -140,10 +140,11 @@ impl Ord for BindingError {\n }\n \n enum ResolutionError<'a> {\n-    /// error E0401: can't use type parameters from outer function\n-    TypeParametersFromOuterFunction(Def),\n-    /// error E0403: the name is already used for a type parameter in this type parameter list\n-    NameAlreadyUsedInTypeParameterList(Name, &'a Span),\n+    /// error E0401: can't use type or const parameters from outer function\n+    GenericParamsFromOuterFunction(Def),\n+    /// error E0403: the name is already used for a type/const parameter in this list of\n+    /// generic parameters\n+    NameAlreadyUsedInParameterList(Name, &'a Span),\n     /// error E0407: method is not a member of trait\n     MethodNotMemberOfTrait(Name, &'a str),\n     /// error E0437: type is not a member of trait\n@@ -175,7 +176,7 @@ enum ResolutionError<'a> {\n     /// error E0530: X bindings cannot shadow Ys\n     BindingShadowsSomethingUnacceptable(&'a str, Name, &'a NameBinding<'a>),\n     /// error E0128: type parameters with a default cannot use forward declared identifiers\n-    ForwardDeclaredTyParam,\n+    ForwardDeclaredTyParam, // FIXME(const_generics:defaults)\n }\n \n /// Combines an error with provided span and emits it\n@@ -193,12 +194,13 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver<'_>,\n                                    resolution_error: ResolutionError<'a>)\n                                    -> DiagnosticBuilder<'sess> {\n     match resolution_error {\n-        ResolutionError::TypeParametersFromOuterFunction(outer_def) => {\n+        ResolutionError::GenericParamsFromOuterFunction(outer_def) => {\n             let mut err = struct_span_err!(resolver.session,\n-                                           span,\n-                                           E0401,\n-                                           \"can't use type parameters from outer function\");\n-            err.span_label(span, \"use of type variable from outer function\");\n+                span,\n+                E0401,\n+                \"can't use generic parameters from outer function\",\n+            );\n+            err.span_label(span, format!(\"use of generic parameter from outer function\"));\n \n             let cm = resolver.session.source_map();\n             match outer_def {\n@@ -222,20 +224,25 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver<'_>,\n                     }\n                     return err;\n                 },\n-                Def::TyParam(typaram_defid) => {\n-                    if let Some(typaram_span) = resolver.definitions.opt_span(typaram_defid) {\n-                        err.span_label(typaram_span, \"type variable from outer function\");\n+                Def::TyParam(def_id) => {\n+                    if let Some(span) = resolver.definitions.opt_span(def_id) {\n+                        err.span_label(span, \"type variable from outer function\");\n                     }\n-                },\n+                }\n+                Def::ConstParam(def_id) => {\n+                    if let Some(span) = resolver.definitions.opt_span(def_id) {\n+                        err.span_label(span, \"const variable from outer function\");\n+                    }\n+                }\n                 _ => {\n-                    bug!(\"TypeParametersFromOuterFunction should only be used with Def::SelfTy or \\\n-                         Def::TyParam\")\n+                    bug!(\"GenericParamsFromOuterFunction should only be used with Def::SelfTy, \\\n+                         Def::TyParam\");\n                 }\n             }\n \n             // Try to retrieve the span of the function signature and generate a new message with\n-            // a local type parameter\n-            let sugg_msg = \"try using a local type parameter instead\";\n+            // a local type or const parameter.\n+            let sugg_msg = &format!(\"try using a local generic parameter instead\");\n             if let Some((sugg_span, new_snippet)) = cm.generate_local_type_param_snippet(span) {\n                 // Suggest the modification to the user\n                 err.span_suggestion(\n@@ -245,19 +252,20 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver<'_>,\n                     Applicability::MachineApplicable,\n                 );\n             } else if let Some(sp) = cm.generate_fn_name_span(span) {\n-                err.span_label(sp, \"try adding a local type parameter in this method instead\");\n+                err.span_label(sp,\n+                    format!(\"try adding a local generic parameter in this method instead\"));\n             } else {\n-                err.help(\"try using a local type parameter instead\");\n+                err.help(&format!(\"try using a local generic parameter instead\"));\n             }\n \n             err\n         }\n-        ResolutionError::NameAlreadyUsedInTypeParameterList(name, first_use_span) => {\n+        ResolutionError::NameAlreadyUsedInParameterList(name, first_use_span) => {\n              let mut err = struct_span_err!(resolver.session,\n                                             span,\n                                             E0403,\n-                                            \"the name `{}` is already used for a type parameter \\\n-                                            in this type parameter list\",\n+                                            \"the name `{}` is already used for a generic \\\n+                                            parameter in this list of generic parameters\",\n                                             name);\n              err.span_label(span, \"already used\");\n              err.span_label(first_use_span.clone(), format!(\"first use of `{}`\", name));\n@@ -544,8 +552,7 @@ impl<'a> PathSource<'a> {\n                 Def::Struct(..) | Def::Union(..) | Def::Enum(..) |\n                 Def::Trait(..) | Def::TraitAlias(..) | Def::TyAlias(..) |\n                 Def::AssociatedTy(..) | Def::PrimTy(..) | Def::TyParam(..) |\n-                Def::SelfTy(..) | Def::Existential(..) |\n-                Def::ForeignTy(..) => true,\n+                Def::SelfTy(..) | Def::Existential(..) | Def::ForeignTy(..) => true,\n                 _ => false,\n             },\n             PathSource::Trait(AliasPossibility::No) => match def {\n@@ -562,7 +569,7 @@ impl<'a> PathSource<'a> {\n                 Def::VariantCtor(_, CtorKind::Const) | Def::VariantCtor(_, CtorKind::Fn) |\n                 Def::Const(..) | Def::Static(..) | Def::Local(..) | Def::Upvar(..) |\n                 Def::Fn(..) | Def::Method(..) | Def::AssociatedConst(..) |\n-                Def::SelfCtor(..) => true,\n+                Def::SelfCtor(..) | Def::ConstParam(..) => true,\n                 _ => false,\n             },\n             PathSource::Pat => match def {\n@@ -746,6 +753,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n         self.resolve_block(block);\n     }\n     fn visit_anon_const(&mut self, constant: &'tcx ast::AnonConst) {\n+        debug!(\"visit_anon_const {:?}\", constant);\n         self.with_constant_rib(|this| {\n             visit::walk_anon_const(this, constant);\n         });\n@@ -779,15 +787,15 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n         visit::walk_poly_trait_ref(self, tref, m);\n     }\n     fn visit_foreign_item(&mut self, foreign_item: &'tcx ForeignItem) {\n-        let type_parameters = match foreign_item.node {\n+        let generic_params = match foreign_item.node {\n             ForeignItemKind::Fn(_, ref generics) => {\n-                HasTypeParameters(generics, ItemRibKind)\n+                HasGenericParams(generics, ItemRibKind)\n             }\n-            ForeignItemKind::Static(..) => NoTypeParameters,\n-            ForeignItemKind::Ty => NoTypeParameters,\n-            ForeignItemKind::Macro(..) => NoTypeParameters,\n+            ForeignItemKind::Static(..) => NoGenericParams,\n+            ForeignItemKind::Ty => NoGenericParams,\n+            ForeignItemKind::Macro(..) => NoGenericParams,\n         };\n-        self.with_type_parameter_rib(type_parameters, |this| {\n+        self.with_generic_param_rib(generic_params, |this| {\n             visit::walk_foreign_item(this, foreign_item);\n         });\n     }\n@@ -797,6 +805,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n                 _: Span,\n                 node_id: NodeId)\n     {\n+        debug!(\"(resolving function) entering function\");\n         let (rib_kind, asyncness) = match function_kind {\n             FnKind::ItemFn(_, ref header, ..) =>\n                 (ItemRibKind, header.asyncness),\n@@ -853,6 +862,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n         self.label_ribs.pop();\n         self.ribs[ValueNS].pop();\n     }\n+\n     fn visit_generics(&mut self, generics: &'tcx Generics) {\n         // For type parameter defaults, we have to ban access\n         // to following type parameters, as the Substs can only\n@@ -863,6 +873,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n         let mut found_default = false;\n         default_ban_rib.bindings.extend(generics.params.iter()\n             .filter_map(|param| match param.kind {\n+                GenericParamKind::Const { .. } |\n                 GenericParamKind::Lifetime { .. } => None,\n                 GenericParamKind::Type { ref default, .. } => {\n                     found_default |= default.is_some();\n@@ -891,6 +902,13 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n                     // Allow all following defaults to refer to this type parameter.\n                     default_ban_rib.bindings.remove(&Ident::with_empty_ctxt(param.ident.name));\n                 }\n+                GenericParamKind::Const { ref ty } => {\n+                    for bound in &param.bounds {\n+                        self.visit_param_bound(bound);\n+                    }\n+\n+                    self.visit_ty(ty);\n+                }\n             }\n         }\n         for p in &generics.where_clause.predicates {\n@@ -900,9 +918,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n }\n \n #[derive(Copy, Clone)]\n-enum TypeParameters<'a, 'b> {\n-    NoTypeParameters,\n-    HasTypeParameters(// Type parameters.\n+enum GenericParameters<'a, 'b> {\n+    NoGenericParams,\n+    HasGenericParams(// Type parameters.\n                       &'b Generics,\n \n                       // The kind of the rib used for type parameters.\n@@ -2038,6 +2056,7 @@ impl<'a> Resolver<'a> {\n         let record_used = record_used_id.is_some();\n         let mut module = self.graph_root;\n         for i in (0 .. self.ribs[ns].len()).rev() {\n+            debug!(\"walk rib\\n{:?}\", self.ribs[ns][i].bindings);\n             if let Some(def) = self.ribs[ns][i].bindings.get(&ident).cloned() {\n                 // The ident resolves to a type parameter or local variable.\n                 return Some(LexicalScopeBinding::Def(\n@@ -2359,8 +2378,9 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn resolve_adt(&mut self, item: &Item, generics: &Generics) {\n+        debug!(\"resolve_adt\");\n         self.with_current_self_item(item, |this| {\n-            this.with_type_parameter_rib(HasTypeParameters(generics, ItemRibKind), |this| {\n+            this.with_generic_param_rib(HasGenericParams(generics, ItemRibKind), |this| {\n                 let item_def_id = this.definitions.local_def_id(item.id);\n                 this.with_self_rib(Def::SelfTy(None, Some(item_def_id)), |this| {\n                     visit::walk_item(this, item);\n@@ -2413,13 +2433,13 @@ impl<'a> Resolver<'a> {\n \n     fn resolve_item(&mut self, item: &Item) {\n         let name = item.ident.name;\n-        debug!(\"(resolving item) resolving {}\", name);\n+        debug!(\"(resolving item) resolving {} ({:?})\", name, item.node);\n \n         match item.node {\n             ItemKind::Ty(_, ref generics) |\n             ItemKind::Fn(_, _, ref generics, _) |\n             ItemKind::Existential(_, ref generics) => {\n-                self.with_type_parameter_rib(HasTypeParameters(generics, ItemRibKind),\n+                self.with_generic_param_rib(HasGenericParams(generics, ItemRibKind),\n                                              |this| visit::walk_item(this, item));\n             }\n \n@@ -2438,16 +2458,16 @@ impl<'a> Resolver<'a> {\n \n             ItemKind::Trait(.., ref generics, ref bounds, ref trait_items) => {\n                 // Create a new rib for the trait-wide type parameters.\n-                self.with_type_parameter_rib(HasTypeParameters(generics, ItemRibKind), |this| {\n+                self.with_generic_param_rib(HasGenericParams(generics, ItemRibKind), |this| {\n                     let local_def_id = this.definitions.local_def_id(item.id);\n                     this.with_self_rib(Def::SelfTy(Some(local_def_id), None), |this| {\n                         this.visit_generics(generics);\n                         walk_list!(this, visit_param_bound, bounds);\n \n                         for trait_item in trait_items {\n-                            let type_parameters = HasTypeParameters(&trait_item.generics,\n+                            let generic_params = HasGenericParams(&trait_item.generics,\n                                                                     TraitOrImplItemRibKind);\n-                            this.with_type_parameter_rib(type_parameters, |this| {\n+                            this.with_generic_param_rib(generic_params, |this| {\n                                 match trait_item.node {\n                                     TraitItemKind::Const(ref ty, ref default) => {\n                                         this.visit_ty(ty);\n@@ -2479,7 +2499,7 @@ impl<'a> Resolver<'a> {\n \n             ItemKind::TraitAlias(ref generics, ref bounds) => {\n                 // Create a new rib for the trait-wide type parameters.\n-                self.with_type_parameter_rib(HasTypeParameters(generics, ItemRibKind), |this| {\n+                self.with_generic_param_rib(HasGenericParams(generics, ItemRibKind), |this| {\n                     let local_def_id = this.definitions.local_def_id(item.id);\n                     this.with_self_rib(Def::SelfTy(Some(local_def_id), None), |this| {\n                         this.visit_generics(generics);\n@@ -2496,6 +2516,7 @@ impl<'a> Resolver<'a> {\n \n             ItemKind::Static(ref ty, _, ref expr) |\n             ItemKind::Const(ref ty, ref expr) => {\n+                debug!(\"resolve_item ItemKind::Const\");\n                 self.with_item_rib(|this| {\n                     this.visit_ty(ty);\n                     this.with_constant_rib(|this| {\n@@ -2517,23 +2538,25 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    fn with_type_parameter_rib<'b, F>(&'b mut self, type_parameters: TypeParameters<'a, 'b>, f: F)\n+    fn with_generic_param_rib<'b, F>(&'b mut self, generic_params: GenericParameters<'a, 'b>, f: F)\n         where F: FnOnce(&mut Resolver<'_>)\n     {\n-        match type_parameters {\n-            HasTypeParameters(generics, rib_kind) => {\n+        debug!(\"with_generic_param_rib\");\n+        match generic_params {\n+            HasGenericParams(generics, rib_kind) => {\n                 let mut function_type_rib = Rib::new(rib_kind);\n+                let mut function_value_rib = Rib::new(rib_kind);\n                 let mut seen_bindings = FxHashMap::default();\n                 for param in &generics.params {\n                     match param.kind {\n                         GenericParamKind::Lifetime { .. } => {}\n                         GenericParamKind::Type { .. } => {\n                             let ident = param.ident.modern();\n-                            debug!(\"with_type_parameter_rib: {}\", param.id);\n+                            debug!(\"with_generic_param_rib: {}\", param.id);\n \n                             if seen_bindings.contains_key(&ident) {\n                                 let span = seen_bindings.get(&ident).unwrap();\n-                                let err = ResolutionError::NameAlreadyUsedInTypeParameterList(\n+                                let err = ResolutionError::NameAlreadyUsedInParameterList(\n                                     ident.name,\n                                     span,\n                                 );\n@@ -2546,20 +2569,40 @@ impl<'a> Resolver<'a> {\n                             function_type_rib.bindings.insert(ident, def);\n                             self.record_def(param.id, PathResolution::new(def));\n                         }\n+                        GenericParamKind::Const { .. } => {\n+                            let ident = param.ident.modern();\n+                            debug!(\"with_generic_param_rib: {}\", param.id);\n+\n+                            if seen_bindings.contains_key(&ident) {\n+                                let span = seen_bindings.get(&ident).unwrap();\n+                                let err = ResolutionError::NameAlreadyUsedInParameterList(\n+                                    ident.name,\n+                                    span,\n+                                );\n+                                resolve_error(self, param.ident.span, err);\n+                            }\n+                            seen_bindings.entry(ident).or_insert(param.ident.span);\n+\n+                            let def = Def::ConstParam(self.definitions.local_def_id(param.id));\n+                            function_value_rib.bindings.insert(ident, def);\n+                            self.record_def(param.id, PathResolution::new(def));\n+                        }\n                     }\n                 }\n+                self.ribs[ValueNS].push(function_value_rib);\n                 self.ribs[TypeNS].push(function_type_rib);\n             }\n \n-            NoTypeParameters => {\n+            NoGenericParams => {\n                 // Nothing to do.\n             }\n         }\n \n         f(self);\n \n-        if let HasTypeParameters(..) = type_parameters {\n+        if let HasGenericParams(..) = generic_params {\n             self.ribs[TypeNS].pop();\n+            self.ribs[ValueNS].pop();\n         }\n     }\n \n@@ -2584,6 +2627,7 @@ impl<'a> Resolver<'a> {\n     fn with_constant_rib<F>(&mut self, f: F)\n         where F: FnOnce(&mut Resolver<'_>)\n     {\n+        debug!(\"with_constant_rib\");\n         self.ribs[ValueNS].push(Rib::new(ConstantItemRibKind));\n         self.label_ribs.push(Rib::new(ConstantItemRibKind));\n         f(self);\n@@ -2677,8 +2721,9 @@ impl<'a> Resolver<'a> {\n                               self_type: &Ty,\n                               item_id: NodeId,\n                               impl_items: &[ImplItem]) {\n+        debug!(\"resolve_implementation\");\n         // If applicable, create a rib for the type parameters.\n-        self.with_type_parameter_rib(HasTypeParameters(generics, ItemRibKind), |this| {\n+        self.with_generic_param_rib(HasGenericParams(generics, ItemRibKind), |this| {\n             // Dummy self type for better errors if `Self` is used in the trait path.\n             this.with_self_rib(Def::SelfTy(None, None), |this| {\n                 // Resolve the trait reference, if necessary.\n@@ -2691,30 +2736,37 @@ impl<'a> Resolver<'a> {\n                         }\n                         // Resolve the self type.\n                         this.visit_ty(self_type);\n-                        // Resolve the type parameters.\n+                        // Resolve the generic parameters.\n                         this.visit_generics(generics);\n                         // Resolve the items within the impl.\n                         this.with_current_self_type(self_type, |this| {\n                             this.with_self_struct_ctor_rib(item_def_id, |this| {\n+                                debug!(\"resolve_implementation with_self_struct_ctor_rib\");\n                                 for impl_item in impl_items {\n                                     this.resolve_visibility(&impl_item.vis);\n \n                                     // We also need a new scope for the impl item type parameters.\n-                                    let type_parameters = HasTypeParameters(&impl_item.generics,\n-                                                                            TraitOrImplItemRibKind);\n-                                    this.with_type_parameter_rib(type_parameters, |this| {\n+                                    let generic_params = HasGenericParams(&impl_item.generics,\n+                                                                          TraitOrImplItemRibKind);\n+                                    this.with_generic_param_rib(generic_params, |this| {\n                                         use self::ResolutionError::*;\n                                         match impl_item.node {\n                                             ImplItemKind::Const(..) => {\n+                                                debug!(\n+                                                    \"resolve_implementation ImplItemKind::Const\",\n+                                                );\n                                                 // If this is a trait impl, ensure the const\n                                                 // exists in trait\n-                                                this.check_trait_item(impl_item.ident,\n-                                                                      ValueNS,\n-                                                                      impl_item.span,\n-                                                    |n, s| ConstNotMemberOfTrait(n, s));\n-                                                this.with_constant_rib(|this|\n-                                                    visit::walk_impl_item(this, impl_item)\n+                                                this.check_trait_item(\n+                                                    impl_item.ident,\n+                                                    ValueNS,\n+                                                    impl_item.span,\n+                                                    |n, s| ConstNotMemberOfTrait(n, s),\n                                                 );\n+\n+                                                this.with_constant_rib(|this| {\n+                                                    visit::walk_impl_item(this, impl_item)\n+                                                });\n                                             }\n                                             ImplItemKind::Method(..) => {\n                                                 // If this is a trait impl, ensure the method\n@@ -4093,6 +4145,7 @@ impl<'a> Resolver<'a> {\n                         mut def: Def,\n                         record_used: bool,\n                         span: Span) -> Def {\n+        debug!(\"adjust_local_def\");\n         let ribs = &self.ribs[ns][rib_index + 1..];\n \n         // An invalid forward use of a type parameter from a previous default.\n@@ -4109,6 +4162,9 @@ impl<'a> Resolver<'a> {\n                 span_bug!(span, \"unexpected {:?} in bindings\", def)\n             }\n             Def::Local(node_id) => {\n+                use ResolutionError::*;\n+                let mut res_err = None;\n+\n                 for rib in ribs {\n                     match rib.kind {\n                         NormalRibKind | ModuleRibKind(..) | MacroDefinition(..) |\n@@ -4144,21 +4200,26 @@ impl<'a> Resolver<'a> {\n                             // named function item. This is not allowed, so we\n                             // report an error.\n                             if record_used {\n-                                resolve_error(self, span,\n-                                    ResolutionError::CannotCaptureDynamicEnvironmentInFnItem);\n+                                // We don't immediately trigger a resolve error, because\n+                                // we want certain other resolution errors (namely those\n+                                // emitted for `ConstantItemRibKind` below) to take\n+                                // precedence.\n+                                res_err = Some(CannotCaptureDynamicEnvironmentInFnItem);\n                             }\n-                            return Def::Err;\n                         }\n                         ConstantItemRibKind => {\n                             // Still doesn't deal with upvars\n                             if record_used {\n-                                resolve_error(self, span,\n-                                    ResolutionError::AttemptToUseNonConstantValueInConstant);\n+                                resolve_error(self, span, AttemptToUseNonConstantValueInConstant);\n                             }\n                             return Def::Err;\n                         }\n                     }\n                 }\n+                if let Some(res_err) = res_err {\n+                     resolve_error(self, span, res_err);\n+                     return Def::Err;\n+                }\n             }\n             Def::TyParam(..) | Def::SelfTy(..) => {\n                 for rib in ribs {\n@@ -4169,17 +4230,38 @@ impl<'a> Resolver<'a> {\n                             // Nothing to do. Continue.\n                         }\n                         ItemRibKind => {\n-                            // This was an attempt to use a type parameter outside\n-                            // its scope.\n+                            // This was an attempt to use a type parameter outside its scope.\n                             if record_used {\n-                                resolve_error(self, span,\n-                                    ResolutionError::TypeParametersFromOuterFunction(def));\n+                                resolve_error(\n+                                    self,\n+                                    span,\n+                                    ResolutionError::GenericParamsFromOuterFunction(def),\n+                                );\n                             }\n                             return Def::Err;\n                         }\n                     }\n                 }\n             }\n+            Def::ConstParam(..) => {\n+                // A const param is always declared in a signature, which is always followed by\n+                // some kind of function rib kind (specifically, ItemRibKind in the case of a\n+                // normal function), so we can skip the first rib as it will be guaranteed to\n+                // (spuriously) conflict with the const param.\n+                for rib in &ribs[1..] {\n+                    if let ItemRibKind = rib.kind {\n+                        // This was an attempt to use a const parameter outside its scope.\n+                        if record_used {\n+                            resolve_error(\n+                                self,\n+                                span,\n+                                ResolutionError::GenericParamsFromOuterFunction(def),\n+                            );\n+                        }\n+                        return Def::Err;\n+                    }\n+                }\n+            }\n             _ => {}\n         }\n         def"}, {"sha": "91e9c7745d2805ce89106df96b08787dc8851cbe", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -364,6 +364,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                         );\n                     }\n                 }\n+                ast::GenericParamKind::Const { .. } => {}\n             }\n         }\n         self.visit_generics(generics);\n@@ -1447,9 +1448,16 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n \n     fn visit_generics(&mut self, generics: &'l ast::Generics) {\n         for param in &generics.params {\n-            if let ast::GenericParamKind::Type { ref default, .. } = param.kind {\n-                self.process_bounds(&param.bounds);\n-                if let Some(ref ty) = default {\n+            match param.kind {\n+                ast::GenericParamKind::Lifetime { .. } => {}\n+                ast::GenericParamKind::Type { ref default, .. } => {\n+                    self.process_bounds(&param.bounds);\n+                    if let Some(ref ty) = default {\n+                        self.visit_ty(&ty);\n+                    }\n+                }\n+                ast::GenericParamKind::Const { ref ty } => {\n+                    self.process_bounds(&param.bounds);\n                     self.visit_ty(&ty);\n                 }\n             }"}, {"sha": "3a6e28b4850bf921b3abcdace8591cdd06c14ca3", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -760,6 +760,13 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     ref_id: id_from_def_id(def_id),\n                 })\n             }\n+            HirDef::ConstParam(def_id) => {\n+                Some(Ref {\n+                    kind: RefKind::Variable,\n+                    span,\n+                    ref_id: id_from_def_id(def_id),\n+                })\n+            }\n             HirDef::StructCtor(def_id, _) => {\n                 // This is a reference to a tuple struct where the def_id points\n                 // to an invisible constructor function. That is not a very useful"}, {"sha": "72615fc8a65ac727e13e3e531aa7c0a5e117fa60", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -622,12 +622,20 @@ impl Sig for ast::Generics {\n \n         let mut defs = Vec::with_capacity(self.params.len());\n         for param in &self.params {\n-            let mut param_text = param.ident.to_string();\n+            let mut param_text = String::new();\n+            if let ast::GenericParamKind::Const { .. } = param.kind {\n+                param_text.push_str(\"const \");\n+            }\n+            param_text.push_str(&param.ident.as_str());\n             defs.push(SigElement {\n                 id: id_from_node_id(param.id, scx),\n                 start: offset + text.len(),\n-                end: offset + text.len() + param_text.len(),\n+                end: offset + text.len() + param_text.as_str().len(),\n             });\n+            if let ast::GenericParamKind::Const { ref ty } = param.kind {\n+                param_text.push_str(\": \");\n+                param_text.push_str(&pprust::ty_to_string(&ty));\n+            }\n             if !param.bounds.is_empty() {\n                 param_text.push_str(\": \");\n                 match param.kind {\n@@ -646,6 +654,9 @@ impl Sig for ast::Generics {\n                         param_text.push_str(&pprust::bounds_to_string(&param.bounds));\n                         // FIXME descend properly into bounds.\n                     }\n+                    ast::GenericParamKind::Const { .. } => {\n+                        // Const generics cannot contain bounds.\n+                    }\n                 }\n             }\n             text.push_str(&param_text);"}, {"sha": "e6533ac4b75598586fd0bce26524750390fc5136", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -348,13 +348,14 @@ fn main() {\n \"##,\n \n E0044: r##\"\n-You can't use type parameters on foreign items. Example of erroneous code:\n+You can't use type or const parameters on foreign items.\n+Example of erroneous code:\n \n ```compile_fail,E0044\n extern { fn some_func<T>(x: T); }\n ```\n \n-To fix this, replace the type parameter with the specializations that you\n+To fix this, replace the generic parameter with the specializations that you\n need:\n \n ```"}, {"sha": "681d8eeaa0d733ff2332da3e873a3cbe8c3667f4", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -167,6 +167,17 @@ impl GenericArgs {\n pub enum GenericArg {\n     Lifetime(Lifetime),\n     Type(P<Ty>),\n+    Const(AnonConst),\n+}\n+\n+impl GenericArg {\n+    pub fn span(&self) -> Span {\n+        match self {\n+            GenericArg::Lifetime(lt) => lt.ident.span,\n+            GenericArg::Type(ty) => ty.span,\n+            GenericArg::Const(ct) => ct.value.span,\n+        }\n+    }\n }\n \n /// A path like `Foo<'a, T>`\n@@ -296,13 +307,32 @@ impl GenericBound {\n \n pub type GenericBounds = Vec<GenericBound>;\n \n+/// Specifies the enforced ordering for generic parameters. In the future,\n+/// if we wanted to relax this order, we could override `PartialEq` and\n+/// `PartialOrd`, to allow the kinds to be unordered.\n+#[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Clone, Copy)]\n+pub enum ParamKindOrd {\n+    Lifetime,\n+    Type,\n+    Const,\n+}\n+\n+impl fmt::Display for ParamKindOrd {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            ParamKindOrd::Lifetime => \"lifetime\".fmt(f),\n+            ParamKindOrd::Type => \"type\".fmt(f),\n+            ParamKindOrd::Const => \"const\".fmt(f),\n+        }\n+    }\n+}\n+\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum GenericParamKind {\n     /// A lifetime definition (e.g., `'a: 'b + 'c + 'd`).\n     Lifetime,\n-    Type {\n-        default: Option<P<Ty>>,\n-    },\n+    Type { default: Option<P<Ty>> },\n+    Const { ty: P<Ty> },\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]"}, {"sha": "6708e3c12a0057e4b52bd087749a629acac414a7", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -38,12 +38,14 @@ pub trait AstBuilder {\n                 bindings: Vec<ast::TypeBinding>)\n                 -> (ast::QSelf, ast::Path);\n \n-    // types\n+    // types and consts\n     fn ty_mt(&self, ty: P<ast::Ty>, mutbl: ast::Mutability) -> ast::MutTy;\n \n     fn ty(&self, span: Span, ty: ast::TyKind) -> P<ast::Ty>;\n     fn ty_path(&self, path: ast::Path) -> P<ast::Ty>;\n     fn ty_ident(&self, span: Span, idents: ast::Ident) -> P<ast::Ty>;\n+    fn anon_const(&self, span: Span, expr: ast::ExprKind) -> ast::AnonConst;\n+    fn const_ident(&self, span: Span, idents: ast::Ident) -> ast::AnonConst;\n \n     fn ty_rptr(&self, span: Span,\n                ty: P<ast::Ty>,\n@@ -394,6 +396,22 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.ty_path(self.path_ident(span, ident))\n     }\n \n+    fn anon_const(&self, span: Span, expr: ast::ExprKind) -> ast::AnonConst {\n+        ast::AnonConst {\n+            id: ast::DUMMY_NODE_ID,\n+            value: P(ast::Expr {\n+                id: ast::DUMMY_NODE_ID,\n+                node: expr,\n+                span,\n+                attrs: ThinVec::new(),\n+            })\n+        }\n+    }\n+\n+    fn const_ident(&self, span: Span, ident: ast::Ident) -> ast::AnonConst {\n+        self.anon_const(span, ast::ExprKind::Path(None, self.path_ident(span, ident)))\n+    }\n+\n     fn ty_rptr(&self,\n                span: Span,\n                ty: P<ast::Ty>,"}, {"sha": "0853b4399d2c17e8c1b7325fe0fe917198e9c3c8", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -15,7 +15,7 @@\n use AttributeType::*;\n use AttributeGate::*;\n \n-use crate::ast::{self, NodeId, PatKind, RangeEnd};\n+use crate::ast::{self, NodeId, GenericParam, GenericParamKind, PatKind, RangeEnd};\n use crate::attr;\n use crate::early_buffered_lints::BufferedEarlyLintId;\n use crate::source_map::Spanned;\n@@ -462,6 +462,9 @@ declare_features! (\n     // Re-Rebalance coherence\n     (active, re_rebalance_coherence, \"1.32.0\", Some(55437), None),\n \n+    // Const generic types.\n+    (active, const_generics, \"1.34.0\", Some(44580), None),\n+\n     // #[optimize(X)]\n     (active, optimize_attribute, \"1.34.0\", Some(54882), None),\n \n@@ -1899,6 +1902,14 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         visit::walk_fn(self, fn_kind, fn_decl, span);\n     }\n \n+    fn visit_generic_param(&mut self, param: &'a GenericParam) {\n+        if let GenericParamKind::Const { .. } = param.kind {\n+            gate_feature_post!(&self, const_generics, param.ident.span,\n+                \"const generics are unstable\");\n+        }\n+        visit::walk_generic_param(self, param);\n+    }\n+\n     fn visit_trait_item(&mut self, ti: &'a ast::TraitItem) {\n         match ti.node {\n             ast::TraitItemKind::Method(ref sig, ref block) => {\n@@ -1984,7 +1995,7 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n     // Some features are known to be incomplete and using them is likely to have\n     // unanticipated results, such as compiler crashes. We warn the user about these\n     // to alert them.\n-    let incomplete_features = [\"generic_associated_types\"];\n+    let incomplete_features = [\"generic_associated_types\", \"const_generics\"];\n \n     let mut features = Features::new();\n     let mut edition_enabled_features = FxHashMap::default();"}, {"sha": "1e5eb0992bd1bbbe4377faed0b97629a08c3711a", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -480,6 +480,7 @@ pub fn noop_visit_generic_arg<T: MutVisitor>(arg: &mut GenericArg, vis: &mut T)\n     match arg {\n         GenericArg::Lifetime(lt) => vis.visit_lifetime(lt),\n         GenericArg::Type(ty) => vis.visit_ty(ty),\n+        GenericArg::Const(ct) => vis.visit_anon_const(ct),\n     }\n }\n \n@@ -698,6 +699,9 @@ pub fn noop_visit_generic_param<T: MutVisitor>(param: &mut GenericParam, vis: &m\n         GenericParamKind::Type { default } => {\n             visit_opt(default, |default| vis.visit_ty(default));\n         }\n+        GenericParamKind::Const { ty } => {\n+            vis.visit_ty(ty);\n+        }\n     }\n }\n "}, {"sha": "d71145893c34acf63ebbc54e3ff8addf6155a6f6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 109, "deletions": 179, "changes": 288, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -397,6 +397,7 @@ crate enum TokenType {\n     Ident,\n     Path,\n     Type,\n+    Const,\n }\n \n impl TokenType {\n@@ -409,6 +410,7 @@ impl TokenType {\n             TokenType::Ident => \"identifier\".to_string(),\n             TokenType::Path => \"path\".to_string(),\n             TokenType::Type => \"type\".to_string(),\n+            TokenType::Const => \"const\".to_string(),\n         }\n     }\n }\n@@ -946,6 +948,15 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    fn check_const_arg(&mut self) -> bool {\n+        if self.token.can_begin_const_arg() {\n+            true\n+        } else {\n+            self.expected_tokens.push(TokenType::Const);\n+            false\n+        }\n+    }\n+\n     /// Expect and consume a `+`. if `+=` is seen, replace it with a `=`\n     /// and continue. If a `+` is not seen, return false.\n     ///\n@@ -1031,7 +1042,8 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Attempt to consume a `<`. If `<<` is seen, replace it with a single\n-    /// `<` and continue. If a `<` is not seen, return false.\n+    /// `<` and continue. If `<-` is seen, replace it with a single `<`\n+    /// and continue. If a `<` is not seen, return false.\n     ///\n     /// This is meant to be used when parsing generics on a path to get the\n     /// starting token.\n@@ -1047,6 +1059,11 @@ impl<'a> Parser<'a> {\n                 self.bump_with(token::Lt, span);\n                 true\n             }\n+            token::LArrow => {\n+                let span = self.span.with_lo(self.span.lo() + BytePos(1));\n+                self.bump_with(token::BinOp(token::Minus), span);\n+                true\n+            }\n             _ => false,\n         };\n \n@@ -5482,15 +5499,27 @@ impl<'a> Parser<'a> {\n         Ok((ident, TraitItemKind::Type(bounds, default), generics))\n     }\n \n+    fn parse_const_param(&mut self, preceding_attrs: Vec<Attribute>) -> PResult<'a, GenericParam> {\n+        self.expect_keyword(keywords::Const)?;\n+        let ident = self.parse_ident()?;\n+        self.expect(&token::Colon)?;\n+        let ty = self.parse_ty()?;\n+\n+        Ok(GenericParam {\n+            ident,\n+            id: ast::DUMMY_NODE_ID,\n+            attrs: preceding_attrs.into(),\n+            bounds: Vec::new(),\n+            kind: GenericParamKind::Const {\n+                ty,\n+            }\n+        })\n+    }\n+\n     /// Parses (possibly empty) list of lifetime and type parameters, possibly including\n     /// trailing comma and erroneous trailing attributes.\n     crate fn parse_generic_params(&mut self) -> PResult<'a, Vec<ast::GenericParam>> {\n-        let mut lifetimes = Vec::new();\n         let mut params = Vec::new();\n-        let mut seen_ty_param: Option<Span> = None;\n-        let mut last_comma_span = None;\n-        let mut bad_lifetime_pos = vec![];\n-        let mut suggestions = vec![];\n         loop {\n             let attrs = self.parse_outer_attributes()?;\n             if self.check_lifetime() {\n@@ -5501,64 +5530,49 @@ impl<'a> Parser<'a> {\n                 } else {\n                     Vec::new()\n                 };\n-                lifetimes.push(ast::GenericParam {\n+                params.push(ast::GenericParam {\n                     ident: lifetime.ident,\n                     id: lifetime.id,\n                     attrs: attrs.into(),\n                     bounds,\n                     kind: ast::GenericParamKind::Lifetime,\n                 });\n-                if let Some(sp) = seen_ty_param {\n-                    let remove_sp = last_comma_span.unwrap_or(self.prev_span).to(self.prev_span);\n-                    bad_lifetime_pos.push(self.prev_span);\n-                    if let Ok(snippet) = self.sess.source_map().span_to_snippet(self.prev_span) {\n-                        suggestions.push((remove_sp, String::new()));\n-                        suggestions.push((\n-                            sp.shrink_to_lo(),\n-                            format!(\"{}, \", snippet)));\n-                    }\n-                }\n+            } else if self.check_keyword(keywords::Const) {\n+                // Parse const parameter.\n+                params.push(self.parse_const_param(attrs)?);\n             } else if self.check_ident() {\n                 // Parse type parameter.\n                 params.push(self.parse_ty_param(attrs)?);\n-                if seen_ty_param.is_none() {\n-                    seen_ty_param = Some(self.prev_span);\n-                }\n             } else {\n                 // Check for trailing attributes and stop parsing.\n                 if !attrs.is_empty() {\n-                    let param_kind = if seen_ty_param.is_some() { \"type\" } else { \"lifetime\" };\n-                    self.struct_span_err(\n-                        attrs[0].span,\n-                        &format!(\"trailing attribute after {} parameters\", param_kind),\n-                    )\n-                    .span_label(attrs[0].span, \"attributes must go before parameters\")\n-                    .emit();\n+                    if !params.is_empty() {\n+                        self.struct_span_err(\n+                            attrs[0].span,\n+                            &format!(\"trailing attribute after generic parameter\"),\n+                        )\n+                        .span_label(attrs[0].span, \"attributes must go before parameters\")\n+                        .emit();\n+                    } else {\n+                        self.struct_span_err(\n+                            attrs[0].span,\n+                            &format!(\"attribute without generic parameters\"),\n+                        )\n+                        .span_label(\n+                            attrs[0].span,\n+                            \"attributes are only permitted when preceding parameters\",\n+                        )\n+                        .emit();\n+                    }\n                 }\n                 break\n             }\n \n             if !self.eat(&token::Comma) {\n                 break\n             }\n-            last_comma_span = Some(self.prev_span);\n         }\n-        if !bad_lifetime_pos.is_empty() {\n-            let mut err = self.struct_span_err(\n-                bad_lifetime_pos,\n-                \"lifetime parameters must be declared prior to type parameters\",\n-            );\n-            if !suggestions.is_empty() {\n-                err.multipart_suggestion(\n-                    \"move the lifetime parameter prior to the first type parameter\",\n-                    suggestions,\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n-            err.emit();\n-        }\n-        lifetimes.extend(params);  // ensure the correct order of lifetimes and type params\n-        Ok(lifetimes)\n+        Ok(params)\n     }\n \n     /// Parse a set of optional generic type parameter declarations. Where\n@@ -5740,35 +5754,16 @@ impl<'a> Parser<'a> {\n     fn parse_generic_args(&mut self) -> PResult<'a, (Vec<GenericArg>, Vec<TypeBinding>)> {\n         let mut args = Vec::new();\n         let mut bindings = Vec::new();\n+        let mut misplaced_assoc_ty_bindings: Vec<Span> = Vec::new();\n+        let mut assoc_ty_bindings: Vec<Span> = Vec::new();\n \n-        let mut seen_type = false;\n-        let mut seen_binding = false;\n-\n-        let mut last_comma_span = None;\n-        let mut first_type_or_binding_span: Option<Span> = None;\n-        let mut first_binding_span: Option<Span> = None;\n+        let args_lo = self.span;\n \n-        let mut bad_lifetime_pos = vec![];\n-        let mut bad_type_pos = vec![];\n-\n-        let mut lifetime_suggestions = vec![];\n-        let mut type_suggestions = vec![];\n         loop {\n             if self.check_lifetime() && self.look_ahead(1, |t| !t.is_like_plus()) {\n                 // Parse lifetime argument.\n                 args.push(GenericArg::Lifetime(self.expect_lifetime()));\n-\n-                if seen_type || seen_binding {\n-                    let remove_sp = last_comma_span.unwrap_or(self.prev_span).to(self.prev_span);\n-                    bad_lifetime_pos.push(self.prev_span);\n-\n-                    if let Ok(snippet) = self.sess.source_map().span_to_snippet(self.prev_span) {\n-                        lifetime_suggestions.push((remove_sp, String::new()));\n-                        lifetime_suggestions.push((\n-                            first_type_or_binding_span.unwrap().shrink_to_lo(),\n-                            format!(\"{}, \", snippet)));\n-                    }\n-                }\n+                misplaced_assoc_ty_bindings.append(&mut assoc_ty_bindings);\n             } else if self.check_ident() && self.look_ahead(1, |t| t == &token::Eq) {\n                 // Parse associated type binding.\n                 let lo = self.span;\n@@ -5782,131 +5777,64 @@ impl<'a> Parser<'a> {\n                     ty,\n                     span,\n                 });\n-\n-                seen_binding = true;\n-                if first_type_or_binding_span.is_none() {\n-                    first_type_or_binding_span = Some(span);\n-                }\n-                if first_binding_span.is_none() {\n-                    first_binding_span = Some(span);\n-                }\n+                assoc_ty_bindings.push(span);\n+            } else if self.check_const_arg() {\n+                // FIXME(const_generics): to distinguish between idents for types and consts,\n+                // we should introduce a GenericArg::Ident in the AST and distinguish when\n+                // lowering to the HIR. For now, idents for const args are not permitted.\n+\n+                // Parse const argument.\n+                let expr = if let token::OpenDelim(token::Brace) = self.token {\n+                    self.parse_block_expr(None, self.span, BlockCheckMode::Default, ThinVec::new())?\n+                } else if self.token.is_ident() {\n+                    // FIXME(const_generics): to distinguish between idents for types and consts,\n+                    // we should introduce a GenericArg::Ident in the AST and distinguish when\n+                    // lowering to the HIR. For now, idents for const args are not permitted.\n+                    return Err(\n+                        self.fatal(\"identifiers may currently not be used for const generics\")\n+                    );\n+                } else {\n+                    // FIXME(const_generics): this currently conflicts with emplacement syntax\n+                    // with negative integer literals.\n+                    self.parse_literal_maybe_minus()?\n+                };\n+                let value = AnonConst {\n+                    id: ast::DUMMY_NODE_ID,\n+                    value: expr,\n+                };\n+                args.push(GenericArg::Const(value));\n+                misplaced_assoc_ty_bindings.append(&mut assoc_ty_bindings);\n             } else if self.check_type() {\n                 // Parse type argument.\n-                let ty_param = self.parse_ty()?;\n-                if seen_binding {\n-                    let remove_sp = last_comma_span.unwrap_or(self.prev_span).to(self.prev_span);\n-                    bad_type_pos.push(self.prev_span);\n-\n-                    if let Ok(snippet) = self.sess.source_map().span_to_snippet(self.prev_span) {\n-                        type_suggestions.push((remove_sp, String::new()));\n-                        type_suggestions.push((\n-                            first_binding_span.unwrap().shrink_to_lo(),\n-                            format!(\"{}, \", snippet)));\n-                    }\n-                }\n-\n-                if first_type_or_binding_span.is_none() {\n-                    first_type_or_binding_span = Some(ty_param.span);\n-                }\n-                args.push(GenericArg::Type(ty_param));\n-                seen_type = true;\n+                args.push(GenericArg::Type(self.parse_ty()?));\n+                misplaced_assoc_ty_bindings.append(&mut assoc_ty_bindings);\n             } else {\n                 break\n             }\n \n             if !self.eat(&token::Comma) {\n                 break\n-            } else {\n-                last_comma_span = Some(self.prev_span);\n-            }\n-        }\n-\n-        self.maybe_report_incorrect_generic_argument_order(\n-            bad_lifetime_pos, bad_type_pos, lifetime_suggestions, type_suggestions\n-        );\n-\n-        Ok((args, bindings))\n-    }\n-\n-    /// Maybe report an error about incorrect generic argument order - \"lifetime parameters\n-    /// must be declared before type parameters\", \"type parameters must be declared before\n-    /// associated type bindings\" or both.\n-    fn maybe_report_incorrect_generic_argument_order(\n-        &self,\n-        bad_lifetime_pos: Vec<Span>,\n-        bad_type_pos: Vec<Span>,\n-        lifetime_suggestions: Vec<(Span, String)>,\n-        type_suggestions: Vec<(Span, String)>,\n-    ) {\n-        let mut err = if !bad_lifetime_pos.is_empty() && !bad_type_pos.is_empty() {\n-            let mut positions = bad_lifetime_pos.clone();\n-            positions.extend_from_slice(&bad_type_pos);\n-\n-            self.struct_span_err(\n-                positions,\n-                \"generic arguments must declare lifetimes, types and associated type bindings in \\\n-                 that order\",\n-            )\n-        } else if !bad_lifetime_pos.is_empty() {\n-            self.struct_span_err(\n-                bad_lifetime_pos.clone(),\n-                \"lifetime parameters must be declared prior to type parameters\"\n-            )\n-        } else if !bad_type_pos.is_empty() {\n-            self.struct_span_err(\n-                bad_type_pos.clone(),\n-                \"type parameters must be declared prior to associated type bindings\"\n-            )\n-        } else {\n-            return;\n-        };\n-\n-        if !bad_lifetime_pos.is_empty() {\n-            for sp in &bad_lifetime_pos {\n-                err.span_label(*sp, \"must be declared prior to type parameters\");\n             }\n         }\n \n-        if !bad_type_pos.is_empty() {\n-            for sp in &bad_type_pos {\n-                err.span_label(*sp, \"must be declared prior to associated type bindings\");\n-            }\n-        }\n-\n-        if !lifetime_suggestions.is_empty() && !type_suggestions.is_empty() {\n-            let mut suggestions = lifetime_suggestions;\n-            suggestions.extend_from_slice(&type_suggestions);\n-\n-            let plural = bad_lifetime_pos.len() + bad_type_pos.len() > 1;\n-            err.multipart_suggestion(\n-                &format!(\n-                    \"move the parameter{}\",\n-                    if plural { \"s\" } else { \"\" },\n-                ),\n-                suggestions,\n-                Applicability::MachineApplicable,\n-            );\n-        } else if !lifetime_suggestions.is_empty() {\n-            err.multipart_suggestion(\n-                &format!(\n-                    \"move the lifetime parameter{} prior to the first type parameter\",\n-                    if bad_lifetime_pos.len() > 1 { \"s\" } else { \"\" },\n-                ),\n-                lifetime_suggestions,\n-                Applicability::MachineApplicable,\n-            );\n-        } else if !type_suggestions.is_empty() {\n-            err.multipart_suggestion(\n-                &format!(\n-                    \"move the type parameter{} prior to the first associated type binding\",\n-                    if bad_type_pos.len() > 1 { \"s\" } else { \"\" },\n-                ),\n-                type_suggestions,\n-                Applicability::MachineApplicable,\n+        // FIXME: we would like to report this in ast_validation instead, but we currently do not\n+        // preserve ordering of generic parameters with respect to associated type binding, so we\n+        // lose that information after parsing.\n+        if misplaced_assoc_ty_bindings.len() > 0 {\n+            let mut err = self.struct_span_err(\n+                args_lo.to(self.prev_span),\n+                \"associated type bindings must be declared after generic parameters\",\n             );\n+            for span in misplaced_assoc_ty_bindings {\n+                err.span_label(\n+                    span,\n+                    \"this associated type binding should be moved after the generic parameters\",\n+                );\n+            }\n+            err.emit();\n         }\n \n-        err.emit();\n+        Ok((args, bindings))\n     }\n \n     /// Parses an optional `where` clause and places it in `generics`.\n@@ -6526,6 +6454,7 @@ impl<'a> Parser<'a> {\n         //     `<` (LIFETIME|IDENT) `,` - first generic parameter in a list\n         //     `<` (LIFETIME|IDENT) `:` - generic parameter with bounds\n         //     `<` (LIFETIME|IDENT) `=` - generic parameter with a default\n+        //     `<` const                - generic const parameter\n         // The only truly ambiguous case is\n         //     `<` IDENT `>` `::` IDENT ...\n         // we disambiguate it in favor of generics (`impl<T> ::absolute::Path<T> { ... }`)\n@@ -6535,7 +6464,8 @@ impl<'a> Parser<'a> {\n             (self.look_ahead(1, |t| t == &token::Pound || t == &token::Gt) ||\n              self.look_ahead(1, |t| t.is_lifetime() || t.is_ident()) &&\n                 self.look_ahead(2, |t| t == &token::Gt || t == &token::Comma ||\n-                                       t == &token::Colon || t == &token::Eq))\n+                                       t == &token::Colon || t == &token::Eq) ||\n+             self.look_ahead(1, |t| t.is_keyword(keywords::Const)))\n     }\n \n     fn parse_impl_body(&mut self) -> PResult<'a, (Vec<ImplItem>, Vec<Attribute>)> {"}, {"sha": "d5856c67156c06635901d518c5431af836169b38", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -279,6 +279,20 @@ impl Token {\n         }\n     }\n \n+    /// Returns `true` if the token can appear at the start of a const param.\n+    pub fn can_begin_const_arg(&self) -> bool {\n+        match self {\n+            OpenDelim(Brace) => true,\n+            Interpolated(ref nt) => match nt.0 {\n+                NtExpr(..) => true,\n+                NtBlock(..) => true,\n+                NtLiteral(..) => true,\n+                _ => false,\n+            }\n+            _ => self.can_begin_literal_or_bool(),\n+        }\n+    }\n+\n     /// Returns `true` if the token can appear at the start of a generic bound.\n     crate fn can_begin_bound(&self) -> bool {\n         self.is_path_start() || self.is_lifetime() || self.is_keyword(keywords::For) ||\n@@ -293,7 +307,7 @@ impl Token {\n         }\n     }\n \n-    /// Returns `true` if the token is any literal, a minus (which can follow a literal,\n+    /// Returns `true` if the token is any literal, a minus (which can prefix a literal,\n     /// for example a '-42', or one of the boolean idents).\n     crate fn can_begin_literal_or_bool(&self) -> bool {\n         match *self {"}, {"sha": "c670f47b597da97d098b79ab946d53dbfcb9b128", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1025,6 +1025,7 @@ impl<'a> State<'a> {\n         match generic_arg {\n             GenericArg::Lifetime(lt) => self.print_lifetime(*lt),\n             GenericArg::Type(ty) => self.print_type(ty),\n+            GenericArg::Const(ct) => self.print_expr(&ct.value),\n         }\n     }\n \n@@ -2929,7 +2930,7 @@ impl<'a> State<'a> {\n                     s.print_outer_attributes_inline(&param.attrs)?;\n                     let lt = ast::Lifetime { id: param.id, ident: param.ident };\n                     s.print_lifetime_bounds(lt, &param.bounds)\n-                },\n+                }\n                 ast::GenericParamKind::Type { ref default } => {\n                     s.print_outer_attributes_inline(&param.attrs)?;\n                     s.print_ident(param.ident)?;\n@@ -2943,6 +2944,15 @@ impl<'a> State<'a> {\n                         _ => Ok(())\n                     }\n                 }\n+                ast::GenericParamKind::Const { ref ty } => {\n+                    s.print_outer_attributes_inline(&param.attrs)?;\n+                    s.word_space(\"const\")?;\n+                    s.print_ident(param.ident)?;\n+                    s.s.space()?;\n+                    s.word_space(\":\")?;\n+                    s.print_type(ty)?;\n+                    s.print_type_bounds(\":\", &param.bounds)\n+                }\n             }\n         })?;\n "}, {"sha": "bb3b0ea7359a8e09f4b7f31310639ffb1270db6b", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -126,6 +126,7 @@ pub trait Visitor<'ast>: Sized {\n         match generic_arg {\n             GenericArg::Lifetime(lt) => self.visit_lifetime(lt),\n             GenericArg::Type(ty) => self.visit_ty(ty),\n+            GenericArg::Const(ct) => self.visit_anon_const(ct),\n         }\n     }\n     fn visit_assoc_type_binding(&mut self, type_binding: &'ast TypeBinding) {\n@@ -486,6 +487,7 @@ pub fn walk_generic_param<'a, V: Visitor<'a>>(visitor: &mut V, param: &'a Generi\n     match param.kind {\n         GenericParamKind::Lifetime => {}\n         GenericParamKind::Type { ref default } => walk_list!(visitor, visit_ty, default),\n+        GenericParamKind::Const { ref ty, .. } => visitor.visit_ty(ty),\n     }\n }\n "}, {"sha": "4678c7520455a10dace790e00f8343e30b04441d", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -560,6 +560,7 @@ impl<'a> TraitDef<'a> {\n \n                 cx.typaram(self.span, param.ident, vec![], bounds, None)\n             }\n+            GenericParamKind::Const { .. } => param.clone(),\n         }));\n \n         // and similarly for where clauses\n@@ -657,6 +658,9 @@ impl<'a> TraitDef<'a> {\n             GenericParamKind::Type { .. } => {\n                 GenericArg::Type(cx.ty_ident(self.span, param.ident))\n             }\n+            GenericParamKind::Const { .. } => {\n+                GenericArg::Const(cx.const_ident(self.span, param.ident))\n+            }\n         }).collect();\n \n         // Create the type of `self`."}, {"sha": "100ec0057ee028ddf62a74110e551ce85b58ec05", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -94,7 +94,7 @@ impl<'a> Path<'a> {\n     }\n }\n \n-/// A type. Supports pointers, Self, and literals\n+/// A type. Supports pointers, Self, and literals.\n #[derive(Clone)]\n pub enum Ty<'a> {\n     Self_,\n@@ -107,6 +107,13 @@ pub enum Ty<'a> {\n     Tuple(Vec<Ty<'a>>),\n }\n \n+/// A const expression. Supports literals and blocks.\n+#[derive(Clone, Eq, PartialEq)]\n+pub enum Const {\n+    Literal,\n+    Block,\n+}\n+\n pub fn borrowed_ptrty<'r>() -> PtrTy<'r> {\n     Borrowed(None, ast::Mutability::Immutable)\n }\n@@ -180,6 +187,9 @@ impl<'a> Ty<'a> {\n                     GenericParamKind::Type { .. } => {\n                         GenericArg::Type(cx.ty_ident(span, param.ident))\n                     }\n+                    GenericParamKind::Const { .. } => {\n+                        GenericArg::Const(cx.const_ident(span, param.ident))\n+                    }\n                 }).collect();\n \n                 cx.path_all(span, false, vec![self_ty], params, vec![])"}, {"sha": "c2cc91d8f7703768c45c9ca21ad50bc235e38888", "filename": "src/test/ui/attribute-with-no-generics-in-parameter-list.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fattribute-with-no-generics-in-parameter-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fattribute-with-no-generics-in-parameter-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattribute-with-no-generics-in-parameter-list.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -0,0 +1,3 @@\n+fn foo<#[attr]>() {} //~ ERROR attribute without generic parameters\n+\n+fn main() {}"}, {"sha": "f08f107a62ffee8483f2087e5c646ea0e02a28aa", "filename": "src/test/ui/attribute-with-no-generics-in-parameter-list.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fattribute-with-no-generics-in-parameter-list.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fattribute-with-no-generics-in-parameter-list.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattribute-with-no-generics-in-parameter-list.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -0,0 +1,8 @@\n+error: attribute without generic parameters\n+  --> $DIR/attribute-with-no-generics-in-parameter-list.rs:1:8\n+   |\n+LL | fn foo<#[attr]>() {} //~ ERROR attribute without generic parameters\n+   |        ^^^^^^^ attributes are only permitted when preceding parameters\n+\n+error: aborting due to previous error\n+"}, {"sha": "ca5fdd9da859bae78bde7f472c409a9b310ec95e", "filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-1.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -7,7 +7,7 @@\n struct RefIntPair<'a, 'b>(&'a u32, &'b u32);\n \n impl<#[rustc_1] 'a, 'b, #[oops]> RefIntPair<'a, 'b> {\n-    //~^ ERROR trailing attribute after lifetime parameters\n+    //~^ ERROR trailing attribute after generic parameter\n }\n \n fn main() {"}, {"sha": "55e7a9877846f271a79ac78561a15a13a9823d9c", "filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-1.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,4 +1,4 @@\n-error: trailing attribute after lifetime parameters\n+error: trailing attribute after generic parameter\n   --> $DIR/attrs-with-no-formal-in-generics-1.rs:9:25\n    |\n LL | impl<#[rustc_1] 'a, 'b, #[oops]> RefIntPair<'a, 'b> {"}, {"sha": "c795612acf08c13a59b92d967a4d332905182ec9", "filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-2.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -7,6 +7,6 @@\n struct RefAny<'a, T>(&'a T);\n \n impl<#[rustc_1] 'a, #[rustc_2] T, #[oops]> RefAny<'a, T> {}\n-//~^ ERROR trailing attribute after type parameters\n+//~^ ERROR trailing attribute after generic parameter\n \n fn main() {}"}, {"sha": "acd0ae3678a7c275d10f09d059b3cc1b30eeb670", "filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-2.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,4 +1,4 @@\n-error: trailing attribute after type parameters\n+error: trailing attribute after generic parameter\n   --> $DIR/attrs-with-no-formal-in-generics-2.rs:9:35\n    |\n LL | impl<#[rustc_1] 'a, #[rustc_2] T, #[oops]> RefAny<'a, T> {}"}, {"sha": "3cfc70b41850a07ed2836bb10bdfa04b5f51fe6c", "filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -6,7 +6,7 @@ struct RefIntPair<'a, 'b>(&'a u32, &'b u32);\n \n fn hof_lt<Q>(_: Q)\n     where Q: for <#[allow(unused)] 'a, 'b, #[oops]> Fn(RefIntPair<'a,'b>) -> &'b u32\n-    //~^ ERROR trailing attribute after lifetime parameters\n+    //~^ ERROR trailing attribute after generic parameter\n {}\n \n fn main() {}"}, {"sha": "b9ca00974677b4a835f0654e8e381a639db79c0e", "filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,4 +1,4 @@\n-error: trailing attribute after lifetime parameters\n+error: trailing attribute after generic parameter\n   --> $DIR/attrs-with-no-formal-in-generics-3.rs:8:44\n    |\n LL |     where Q: for <#[allow(unused)] 'a, 'b, #[oops]> Fn(RefIntPair<'a,'b>) -> &'b u32"}, {"sha": "53dfb13139a54c1093c13be8720f849ce5102314", "filename": "src/test/ui/bad/bad-type-env-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fbad%2Fbad-type-env-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fbad%2Fbad-type-env-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-type-env-capture.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,4 +1,4 @@\n fn foo<T>() {\n-    fn bar(b: T) { } //~ ERROR can't use type parameters from outer\n+    fn bar(b: T) { } //~ ERROR can't use generic parameters from outer\n }\n fn main() { }"}, {"sha": "ce803e96801f9f5c538203c071c3fd60f9e8023c", "filename": "src/test/ui/bad/bad-type-env-capture.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fbad%2Fbad-type-env-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fbad%2Fbad-type-env-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-type-env-capture.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,12 +1,12 @@\n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/bad-type-env-capture.rs:2:15\n    |\n LL | fn foo<T>() {\n    |        - type variable from outer function\n-LL |     fn bar(b: T) { } //~ ERROR can't use type parameters from outer\n-   |        ---    ^ use of type variable from outer function\n+LL |     fn bar(b: T) { } //~ ERROR can't use generic parameters from outer\n+   |        ---    ^ use of generic parameter from outer function\n    |        |\n-   |        help: try using a local type parameter instead: `bar<T>`\n+   |        help: try using a local generic parameter instead: `bar<T>`\n \n error: aborting due to previous error\n "}, {"sha": "f4e9008dbd0f1563f7d8e4c211fd317d5624d112", "filename": "src/test/ui/const-generics/const-expression-parameter.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -0,0 +1,23 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+fn u32_identity<const X: u32>() -> u32 {\n+    //~^ ERROR const generics in any position are currently unsupported\n+    5\n+}\n+\n+fn foo_a() {\n+    u32_identity::<-1>(); //~ ERROR expected identifier, found `<-`\n+}\n+\n+fn foo_b() {\n+    u32_identity::<1 + 2>(); //~ ERROR expected one of `,` or `>`, found `+`\n+}\n+\n+fn foo_c() {\n+    u32_identity::< -1 >(); // ok\n+}\n+\n+fn main() {\n+    u32_identity::<5>(); // ok\n+}"}, {"sha": "1dd3a960316d99eea2e3b75ff826e263eab85faa", "filename": "src/test/ui/const-generics/const-expression-parameter.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -0,0 +1,26 @@\n+error: expected identifier, found `<-`\n+  --> $DIR/const-expression-parameter.rs:10:19\n+   |\n+LL |     u32_identity::<-1>(); //~ ERROR expected identifier, found `<-`\n+   |                   ^^ expected identifier\n+\n+error: expected one of `,` or `>`, found `+`\n+  --> $DIR/const-expression-parameter.rs:14:22\n+   |\n+LL |     u32_identity::<1 + 2>(); //~ ERROR expected one of `,` or `>`, found `+`\n+   |                      ^ expected one of `,` or `>` here\n+\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/const-expression-parameter.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+\n+error: const generics in any position are currently unsupported\n+  --> $DIR/const-expression-parameter.rs:4:23\n+   |\n+LL | fn u32_identity<const X: u32>() -> u32 {\n+   |                       ^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "052d723d96edb21ac59cb053f5df4451095c9701", "filename": "src/test/ui/const-generics/const-fn-with-const-param.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -0,0 +1,12 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+const fn const_u32_identity<const X: u32>() -> u32 {\n+    //~^ ERROR const parameters are not permitted in `const fn`\n+    //~^^ ERROR const generics in any position are currently unsupported\n+    X\n+}\n+\n+fn main() {\n+    println!(\"{:?}\", const_u32_identity::<18>());\n+}"}, {"sha": "a08ebfb0d9766565029bba2a93332d92fa3e7455", "filename": "src/test/ui/const-generics/const-fn-with-const-param.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -0,0 +1,24 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/const-fn-with-const-param.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+\n+error: const parameters are not permitted in `const fn`\n+  --> $DIR/const-fn-with-const-param.rs:4:1\n+   |\n+LL | / const fn const_u32_identity<const X: u32>() -> u32 {\n+LL | |     //~^ ERROR const parameters are not permitted in `const fn`\n+LL | |     //~^^ ERROR const generics in any position are currently unsupported\n+LL | |     X\n+LL | | }\n+   | |_^\n+\n+error: const generics in any position are currently unsupported\n+  --> $DIR/const-fn-with-const-param.rs:4:35\n+   |\n+LL | const fn const_u32_identity<const X: u32>() -> u32 {\n+   |                                   ^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "3f120cbc4d337e32abedb1554320fc28ccadf09c", "filename": "src/test/ui/const-generics/const-param-before-other-params.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -0,0 +1,13 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+fn foo<const X: (), T>(_: T) {\n+    //~^ ERROR type parameters must be declared prior to const parameters\n+    //~^^ ERROR const generics in any position are currently unsupported\n+}\n+\n+fn bar<const X: (), 'a>(_: &'a ()) {\n+    //~^ ERROR lifetime parameters must be declared prior to const parameters\n+}\n+\n+fn main() {}"}, {"sha": "aedcaf52e2688a34deb25296b008a8f6fefc801a", "filename": "src/test/ui/const-generics/const-param-before-other-params.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -0,0 +1,26 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/const-param-before-other-params.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+\n+error: type parameters must be declared prior to const parameters\n+  --> $DIR/const-param-before-other-params.rs:4:21\n+   |\n+LL | fn foo<const X: (), T>(_: T) {\n+   |       --------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const X: ()>`\n+\n+error: lifetime parameters must be declared prior to const parameters\n+  --> $DIR/const-param-before-other-params.rs:9:21\n+   |\n+LL | fn bar<const X: (), 'a>(_: &'a ()) {\n+   |       --------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, const X: ()>`\n+\n+error: const generics in any position are currently unsupported\n+  --> $DIR/const-param-before-other-params.rs:4:14\n+   |\n+LL | fn foo<const X: (), T>(_: T) {\n+   |              ^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "5a8dd92086f8597c42561cd983ae984c423ddedc", "filename": "src/test/ui/const-generics/const-param-from-outer-fn.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -0,0 +1,11 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+fn foo<const X: u32>() {\n+    //~^ ERROR const generics in any position are currently unsupported\n+    fn bar() -> u32 {\n+        X //~ ERROR can't use generic parameters from outer function\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "b238b3a2aa453b692b93b10446fe23c2911f6df5", "filename": "src/test/ui/const-generics/const-param-from-outer-fn.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -0,0 +1,26 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/const-param-from-outer-fn.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+\n+error[E0401]: can't use generic parameters from outer function\n+  --> $DIR/const-param-from-outer-fn.rs:7:9\n+   |\n+LL | fn foo<const X: u32>() {\n+   |              - const variable from outer function\n+LL |     //~^ ERROR const generics in any position are currently unsupported\n+LL |     fn bar() -> u32 {\n+   |        --- try adding a local generic parameter in this method instead\n+LL |         X //~ ERROR can't use generic parameters from outer function\n+   |         ^ use of generic parameter from outer function\n+\n+error: const generics in any position are currently unsupported\n+  --> $DIR/const-param-from-outer-fn.rs:4:14\n+   |\n+LL | fn foo<const X: u32>() {\n+   |              ^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0401`."}, {"sha": "17d48edc35c91bc3feb6f91dad09fc41678cb7aa", "filename": "src/test/ui/duplicate/duplicate-type-parameter.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fduplicate%2Fduplicate-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fduplicate%2Fduplicate-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fduplicate-type-parameter.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,52 +1,52 @@\n-error[E0403]: the name `T` is already used for a type parameter in this type parameter list\n+error[E0403]: the name `T` is already used for a generic parameter in this list of generic parameters\n   --> $DIR/duplicate-type-parameter.rs:1:12\n    |\n LL | type Foo<T,T> = Option<T>;\n    |          - ^ already used\n    |          |\n    |          first use of `T`\n \n-error[E0403]: the name `T` is already used for a type parameter in this type parameter list\n+error[E0403]: the name `T` is already used for a generic parameter in this list of generic parameters\n   --> $DIR/duplicate-type-parameter.rs:4:14\n    |\n LL | struct Bar<T,T>(T);\n    |            - ^ already used\n    |            |\n    |            first use of `T`\n \n-error[E0403]: the name `T` is already used for a type parameter in this type parameter list\n+error[E0403]: the name `T` is already used for a generic parameter in this list of generic parameters\n   --> $DIR/duplicate-type-parameter.rs:7:14\n    |\n LL | struct Baz<T,T> {\n    |            - ^ already used\n    |            |\n    |            first use of `T`\n \n-error[E0403]: the name `T` is already used for a type parameter in this type parameter list\n+error[E0403]: the name `T` is already used for a generic parameter in this list of generic parameters\n   --> $DIR/duplicate-type-parameter.rs:12:12\n    |\n LL | enum Boo<T,T> {\n    |          - ^ already used\n    |          |\n    |          first use of `T`\n \n-error[E0403]: the name `T` is already used for a type parameter in this type parameter list\n+error[E0403]: the name `T` is already used for a generic parameter in this list of generic parameters\n   --> $DIR/duplicate-type-parameter.rs:18:11\n    |\n LL | fn quux<T,T>(x: T) {}\n    |         - ^ already used\n    |         |\n    |         first use of `T`\n \n-error[E0403]: the name `T` is already used for a type parameter in this type parameter list\n+error[E0403]: the name `T` is already used for a generic parameter in this list of generic parameters\n   --> $DIR/duplicate-type-parameter.rs:21:13\n    |\n LL | trait Qux<T,T> {}\n    |           - ^ already used\n    |           |\n    |           first use of `T`\n \n-error[E0403]: the name `T` is already used for a type parameter in this type parameter list\n+error[E0403]: the name `T` is already used for a generic parameter in this list of generic parameters\n   --> $DIR/duplicate-type-parameter.rs:24:8\n    |\n LL | impl<T,T> Qux<T,T> for Option<T> {}"}, {"sha": "27f281ee437867ebbe0fa50b77161bd0bea41a6f", "filename": "src/test/ui/error-codes/E0401.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,26 +1,26 @@\n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/E0401.rs:4:39\n    |\n LL | fn foo<T>(x: T) {\n    |        - type variable from outer function\n LL |     fn bfnr<U, V: Baz<U>, W: Fn()>(y: T) { //~ ERROR E0401\n-   |        ---------------------------    ^ use of type variable from outer function\n+   |        ---------------------------    ^ use of generic parameter from outer function\n    |        |\n-   |        help: try using a local type parameter instead: `bfnr<U, V: Baz<U>, W: Fn(), T>`\n+   |        help: try using a local generic parameter instead: `bfnr<U, V: Baz<U>, W: Fn(), T>`\n \n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/E0401.rs:9:16\n    |\n LL | fn foo<T>(x: T) {\n    |        - type variable from outer function\n ...\n LL |     fn baz<U,\n-   |        --- try adding a local type parameter in this method instead\n+   |        --- try adding a local generic parameter in this method instead\n ...\n LL |            (y: T) { //~ ERROR E0401\n-   |                ^ use of type variable from outer function\n+   |                ^ use of generic parameter from outer function\n \n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/E0401.rs:22:25\n    |\n LL | impl<T> Iterator for A<T> {\n@@ -29,7 +29,7 @@ LL | impl<T> Iterator for A<T> {\n LL |         fn helper(sel: &Self) -> u8 { //~ ERROR E0401\n    |                         ^^^^\n    |                         |\n-   |                         use of type variable from outer function\n+   |                         use of generic parameter from outer function\n    |                         use a type here instead\n \n error: aborting due to 3 previous errors"}, {"sha": "b924647502965e6ac03a1bd767918640a8e14f4c", "filename": "src/test/ui/error-codes/E0403.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Ferror-codes%2FE0403.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Ferror-codes%2FE0403.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0403.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,4 +1,4 @@\n-error[E0403]: the name `T` is already used for a type parameter in this type parameter list\n+error[E0403]: the name `T` is already used for a generic parameter in this list of generic parameters\n   --> $DIR/E0403.rs:1:11\n    |\n LL | fn foo<T, T>(s: T, u: T) {} //~ ERROR E0403"}, {"sha": "a8a4ed5772299a152a1443c96fc97d2d407e3571", "filename": "src/test/ui/feature-gates/feature-gate-const_generics.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -0,0 +1,6 @@\n+fn foo<const X: ()>() {} //~ ERROR const generics are unstable\n+//~^ const generics in any position are currently unsupported\n+\n+struct Foo<const X: usize>([(); X]); //~ ERROR const generics are unstable\n+\n+fn main() {}"}, {"sha": "905cc07b6a17550a24e529af57a44d9d036d378b", "filename": "src/test/ui/feature-gates/feature-gate-const_generics.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -0,0 +1,25 @@\n+error[E0658]: const generics are unstable (see issue #44580)\n+  --> $DIR/feature-gate-const_generics.rs:1:14\n+   |\n+LL | fn foo<const X: ()>() {} //~ ERROR const generics are unstable\n+   |              ^\n+   |\n+   = help: add #![feature(const_generics)] to the crate attributes to enable\n+\n+error[E0658]: const generics are unstable (see issue #44580)\n+  --> $DIR/feature-gate-const_generics.rs:4:18\n+   |\n+LL | struct Foo<const X: usize>([(); X]); //~ ERROR const generics are unstable\n+   |                  ^\n+   |\n+   = help: add #![feature(const_generics)] to the crate attributes to enable\n+\n+error: const generics in any position are currently unsupported\n+  --> $DIR/feature-gate-const_generics.rs:1:14\n+   |\n+LL | fn foo<const X: ()>() {} //~ ERROR const generics are unstable\n+   |              ^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "91d092634a90100ca3b2bf1cead2bab73634e751", "filename": "src/test/ui/impl-trait/bindings.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -2,27 +2,27 @@\n \n fn a<T: Clone>(x: T) {\n     const foo: impl Clone = x;\n-//~^ ERROR can't capture dynamic environment in a fn item\n+    //~^ ERROR attempt to use a non-constant value in a constant\n }\n \n fn b<T: Clone>(x: T) {\n     let _ = move || {\n         const foo: impl Clone = x;\n-//~^ ERROR can't capture dynamic environment in a fn item\n+        //~^ ERROR attempt to use a non-constant value in a constant\n     };\n }\n \n trait Foo<T: Clone> {\n     fn a(x: T) {\n         const foo: impl Clone = x;\n-//~^ ERROR can't capture dynamic environment in a fn item\n+        //~^ ERROR attempt to use a non-constant value in a constant\n     }\n }\n \n impl<T: Clone> Foo<T> for i32 {\n     fn a(x: T) {\n         const foo: impl Clone = x;\n-//~^ ERROR can't capture dynamic environment in a fn item\n+        //~^ ERROR attempt to use a non-constant value in a constant\n     }\n }\n "}, {"sha": "a5bf583afeaf6a75e09a894cb9d999dc65b6185b", "filename": "src/test/ui/impl-trait/bindings.stderr", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,35 +1,27 @@\n-error[E0434]: can't capture dynamic environment in a fn item\n+error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/bindings.rs:4:29\n    |\n LL |     const foo: impl Clone = x;\n-   |                             ^\n-   |\n-   = help: use the `|| { ... }` closure form instead\n+   |                             ^ non-constant value\n \n-error[E0434]: can't capture dynamic environment in a fn item\n+error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/bindings.rs:10:33\n    |\n LL |         const foo: impl Clone = x;\n-   |                                 ^\n-   |\n-   = help: use the `|| { ... }` closure form instead\n+   |                                 ^ non-constant value\n \n-error[E0434]: can't capture dynamic environment in a fn item\n+error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/bindings.rs:17:33\n    |\n LL |         const foo: impl Clone = x;\n-   |                                 ^\n-   |\n-   = help: use the `|| { ... }` closure form instead\n+   |                                 ^ non-constant value\n \n-error[E0434]: can't capture dynamic environment in a fn item\n+error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/bindings.rs:24:33\n    |\n LL |         const foo: impl Clone = x;\n-   |                                 ^\n-   |\n-   = help: use the `|| { ... }` closure form instead\n+   |                                 ^ non-constant value\n \n error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0434`.\n+For more information about this error, try `rustc --explain E0435`."}, {"sha": "c08ccd29d8011bdc8bf08b0e6232732cad439cdf", "filename": "src/test/ui/inner-static-type-parameter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Finner-static-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Finner-static-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finner-static-type-parameter.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -4,7 +4,7 @@ enum Bar<T> { What } //~ ERROR parameter `T` is never used\n \n fn foo<T>() {\n     static a: Bar<T> = Bar::What;\n-//~^ ERROR can't use type parameters from outer function\n+//~^ ERROR can't use generic parameters from outer function\n }\n \n fn main() {"}, {"sha": "87fb364954d96b688e004420bebd4e13f929e322", "filename": "src/test/ui/inner-static-type-parameter.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Finner-static-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Finner-static-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finner-static-type-parameter.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,12 +1,12 @@\n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/inner-static-type-parameter.rs:6:19\n    |\n LL | fn foo<T>() {\n    |    --- - type variable from outer function\n    |    |\n-   |    try adding a local type parameter in this method instead\n+   |    try adding a local generic parameter in this method instead\n LL |     static a: Bar<T> = Bar::What;\n-   |                   ^ use of type variable from outer function\n+   |                   ^ use of generic parameter from outer function\n \n error[E0392]: parameter `T` is never used\n   --> $DIR/inner-static-type-parameter.rs:3:10"}, {"sha": "942d6b9a5686e6805951d24144bdeb85f102708d", "filename": "src/test/ui/issues/issue-12796.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-12796.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-12796.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12796.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,7 +1,7 @@\n trait Trait {\n     fn outer(&self) {\n         fn inner(_: &Self) {\n-            //~^ ERROR can't use type parameters from outer function\n+            //~^ ERROR can't use generic parameters from outer function\n         }\n     }\n }"}, {"sha": "a01fd2d65420b277d9bc5490710b4a4c0564c643", "filename": "src/test/ui/issues/issue-12796.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-12796.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-12796.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12796.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,10 +1,10 @@\n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/issue-12796.rs:3:22\n    |\n LL |         fn inner(_: &Self) {\n    |                      ^^^^\n    |                      |\n-   |                      use of type variable from outer function\n+   |                      use of generic parameter from outer function\n    |                      can't use `Self` here\n \n error: aborting due to previous error"}, {"sha": "9bfd5bf23130210476c6e46ba4a9f0bdfba67a28", "filename": "src/test/ui/issues/issue-20616-3.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-20616-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-20616-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-3.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,8 +1,6 @@\n // We need all these 9 issue-20616-N.rs files\n // because we can only catch one parsing error at a time\n \n-\n-\n type Type_1_<'a, T> = &'a T;\n \n \n@@ -12,7 +10,8 @@ type Type_1_<'a, T> = &'a T;\n //type Type_2 = Type_1_<'static ()>; // error: expected `,` or `>` after lifetime name, found `(`\n \n \n-type Type_3<T> = Box<T,,>; //~ error: expected one of `>`, identifier, lifetime, or type, found `,`\n+type Type_3<T> = Box<T,,>;\n+//~^ error: expected one of `>`, const, identifier, lifetime, or type, found `,`\n \n \n //type Type_4<T> = Type_1_<'static,, T>; // error: expected type, found `,`"}, {"sha": "f51fb949c740cc9de50d960c04029d3668b1dced", "filename": "src/test/ui/issues/issue-20616-3.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-20616-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-20616-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-3.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `>`, identifier, lifetime, or type, found `,`\n-  --> $DIR/issue-20616-3.rs:15:24\n+error: expected one of `>`, const, identifier, lifetime, or type, found `,`\n+  --> $DIR/issue-20616-3.rs:13:24\n    |\n-LL | type Type_3<T> = Box<T,,>; //~ error: expected one of `>`, identifier, lifetime, or type, found `,`\n-   |                        ^ expected one of `>`, identifier, lifetime, or type here\n+LL | type Type_3<T> = Box<T,,>;\n+   |                        ^ expected one of `>`, const, identifier, lifetime, or type here\n \n error: aborting due to previous error\n "}, {"sha": "e9a34a04667b0937a950fba0e37bfbadeb17373b", "filename": "src/test/ui/issues/issue-20616-4.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-20616-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-20616-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-4.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,8 +1,6 @@\n // We need all these 9 issue-20616-N.rs files\n // because we can only catch one parsing error at a time\n \n-\n-\n type Type_1_<'a, T> = &'a T;\n \n \n@@ -16,7 +14,7 @@ type Type_1_<'a, T> = &'a T;\n \n \n type Type_4<T> = Type_1_<'static,, T>;\n-//~^ error: expected one of `>`, identifier, lifetime, or type, found `,`\n+//~^ error: expected one of `>`, const, identifier, lifetime, or type, found `,`\n \n \n type Type_5_<'a> = Type_1_<'a, ()>;"}, {"sha": "22a655465e83cacfe9c1c7294afdec5056963d9b", "filename": "src/test/ui/issues/issue-20616-4.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-20616-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-20616-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-4.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `>`, identifier, lifetime, or type, found `,`\n-  --> $DIR/issue-20616-4.rs:18:34\n+error: expected one of `>`, const, identifier, lifetime, or type, found `,`\n+  --> $DIR/issue-20616-4.rs:16:34\n    |\n LL | type Type_4<T> = Type_1_<'static,, T>;\n-   |                                  ^ expected one of `>`, identifier, lifetime, or type here\n+   |                                  ^ expected one of `>`, const, identifier, lifetime, or type here\n \n error: aborting due to previous error\n "}, {"sha": "23862516d2cbfb35d97edbbc8bb0c7c14cc13124", "filename": "src/test/ui/issues/issue-20616-5.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-20616-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-20616-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-5.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,8 +1,6 @@\n // We need all these 9 issue-20616-N.rs files\n // because we can only catch one parsing error at a time\n \n-\n-\n type Type_1_<'a, T> = &'a T;\n \n \n@@ -22,7 +20,7 @@ type Type_5_<'a> = Type_1_<'a, ()>;\n \n \n type Type_5<'a> = Type_1_<'a, (),,>;\n-//~^ error: expected one of `>`, identifier, lifetime, or type, found `,`\n+//~^ error: expected one of `>`, const, identifier, lifetime, or type, found `,`\n \n \n //type Type_6 = Type_5_<'a,,>; // error: expected type, found `,`"}, {"sha": "d83fc41f43ec0874979db22b615505cce6e40633", "filename": "src/test/ui/issues/issue-20616-5.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-20616-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-20616-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-5.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `>`, identifier, lifetime, or type, found `,`\n-  --> $DIR/issue-20616-5.rs:24:34\n+error: expected one of `>`, const, identifier, lifetime, or type, found `,`\n+  --> $DIR/issue-20616-5.rs:22:34\n    |\n LL | type Type_5<'a> = Type_1_<'a, (),,>;\n-   |                                  ^ expected one of `>`, identifier, lifetime, or type here\n+   |                                  ^ expected one of `>`, const, identifier, lifetime, or type here\n \n error: aborting due to previous error\n "}, {"sha": "dc327f3f788247631e872e62916b7b4adf79384c", "filename": "src/test/ui/issues/issue-20616-6.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-20616-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-20616-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-6.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,8 +1,6 @@\n // We need all these 9 issue-20616-N.rs files\n // because we can only catch one parsing error at a time\n \n-\n-\n type Type_1_<'a, T> = &'a T;\n \n \n@@ -25,7 +23,7 @@ type Type_5_<'a> = Type_1_<'a, ()>;\n \n \n type Type_6 = Type_5_<'a,,>;\n-//~^ error: expected one of `>`, identifier, lifetime, or type, found `,`\n+//~^ error: expected one of `>`, const, identifier, lifetime, or type, found `,`\n \n \n //type Type_7 = Box<(),,>; // error: expected type, found `,`"}, {"sha": "0740df595234a013ef4d206a96fc6acccc33a26c", "filename": "src/test/ui/issues/issue-20616-6.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-20616-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-20616-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-6.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `>`, identifier, lifetime, or type, found `,`\n-  --> $DIR/issue-20616-6.rs:27:26\n+error: expected one of `>`, const, identifier, lifetime, or type, found `,`\n+  --> $DIR/issue-20616-6.rs:25:26\n    |\n LL | type Type_6 = Type_5_<'a,,>;\n-   |                          ^ expected one of `>`, identifier, lifetime, or type here\n+   |                          ^ expected one of `>`, const, identifier, lifetime, or type here\n \n error: aborting due to previous error\n "}, {"sha": "ffd1620c1d306fca9e86aeeb44f002341ec9555e", "filename": "src/test/ui/issues/issue-20616-7.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-20616-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-20616-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-7.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,8 +1,6 @@\n // We need all these 9 issue-20616-N.rs files\n // because we can only catch one parsing error at a time\n \n-\n-\n type Type_1_<'a, T> = &'a T;\n \n \n@@ -27,7 +25,8 @@ type Type_5_<'a> = Type_1_<'a, ()>;\n //type Type_6 = Type_5_<'a,,>; // error: expected type, found `,`\n \n \n-type Type_7 = Box<(),,>; //~ error: expected one of `>`, identifier, lifetime, or type, found `,`\n+type Type_7 = Box<(),,>;\n+//~^ error: expected one of `>`, const, identifier, lifetime, or type, found `,`\n \n \n //type Type_8<'a,,> = &'a (); // error: expected ident, found `,`"}, {"sha": "c0e108375be29ddd51e0bab52ced252c5ec42a0a", "filename": "src/test/ui/issues/issue-20616-7.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-20616-7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-20616-7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-7.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `>`, identifier, lifetime, or type, found `,`\n-  --> $DIR/issue-20616-7.rs:30:22\n+error: expected one of `>`, const, identifier, lifetime, or type, found `,`\n+  --> $DIR/issue-20616-7.rs:28:22\n    |\n-LL | type Type_7 = Box<(),,>; //~ error: expected one of `>`, identifier, lifetime, or type, found `,`\n-   |                      ^ expected one of `>`, identifier, lifetime, or type here\n+LL | type Type_7 = Box<(),,>;\n+   |                      ^ expected one of `>`, const, identifier, lifetime, or type here\n \n error: aborting due to previous error\n "}, {"sha": "c9e8b61e50b5280269bd5c23fb9c9cac91ab5b54", "filename": "src/test/ui/issues/issue-20616-8.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-20616-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-20616-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-8.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,8 +1,6 @@\n // We need all these 9 issue-20616-N.rs files\n // because we can only catch one parsing error at a time\n \n-\n-\n type Type_1_<'a, T> = &'a T;\n \n \n@@ -30,7 +28,8 @@ type Type_5_<'a> = Type_1_<'a, ()>;\n //type Type_7 = Box<(),,>; // error: expected type, found `,`\n \n \n-type Type_8<'a,,> = &'a (); //~ error: expected one of `>`, identifier, or lifetime, found `,`\n+type Type_8<'a,,> = &'a ();\n+//~^ error: expected one of `>`, `const`, identifier, or lifetime, found `,`\n \n \n //type Type_9<T,,> = Box<T>; // error: expected identifier, found `,`"}, {"sha": "0ef9192f1e73a392bbad3df6bcf7559974c047bd", "filename": "src/test/ui/issues/issue-20616-8.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-20616-8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-20616-8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-8.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `>`, identifier, or lifetime, found `,`\n-  --> $DIR/issue-20616-8.rs:33:16\n+error: expected one of `>`, `const`, identifier, or lifetime, found `,`\n+  --> $DIR/issue-20616-8.rs:31:16\n    |\n-LL | type Type_8<'a,,> = &'a (); //~ error: expected one of `>`, identifier, or lifetime, found `,`\n-   |                ^ expected one of `>`, identifier, or lifetime here\n+LL | type Type_8<'a,,> = &'a ();\n+   |                ^ expected one of `>`, `const`, identifier, or lifetime here\n \n error: aborting due to previous error\n "}, {"sha": "1c509f26fd63aa8c90b1c02b2e996c8c007678ba", "filename": "src/test/ui/issues/issue-20616-9.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-20616-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-20616-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-9.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,8 +1,6 @@\n // We need all these 9 issue-20616-N.rs files\n // because we can only catch one parsing error at a time\n \n-\n-\n type Type_1_<'a, T> = &'a T;\n \n \n@@ -33,4 +31,5 @@ type Type_5_<'a> = Type_1_<'a, ()>;\n //type Type_8<'a,,> = &'a (); // error: expected identifier, found `,`\n \n \n-type Type_9<T,,> = Box<T>; //~ error: expected one of `>`, identifier, or lifetime, found `,`\n+type Type_9<T,,> = Box<T>;\n+//~^ error: expected one of `>`, `const`, identifier, or lifetime, found `,`"}, {"sha": "5fd1400a2e8cad777735994c09f2b921c180588a", "filename": "src/test/ui/issues/issue-20616-9.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-20616-9.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-20616-9.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-9.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `>`, identifier, or lifetime, found `,`\n-  --> $DIR/issue-20616-9.rs:36:15\n+error: expected one of `>`, `const`, identifier, or lifetime, found `,`\n+  --> $DIR/issue-20616-9.rs:34:15\n    |\n-LL | type Type_9<T,,> = Box<T>; //~ error: expected one of `>`, identifier, or lifetime, found `,`\n-   |               ^ expected one of `>`, identifier, or lifetime here\n+LL | type Type_9<T,,> = Box<T>;\n+   |               ^ expected one of `>`, `const`, identifier, or lifetime here\n \n error: aborting due to previous error\n "}, {"sha": "156ae68efe2c50235036c981b89870ca431a95a4", "filename": "src/test/ui/issues/issue-27433.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-27433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-27433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27433.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let foo = 42u32;\n     const FOO : u32 = foo;\n-                   //~^ ERROR can't capture dynamic environment\n+                   //~^ ERROR attempt to use a non-constant value in a constant\n }"}, {"sha": "e232d17e6d7a696b0137367bbdd652db5e532e0a", "filename": "src/test/ui/issues/issue-27433.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-27433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-27433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27433.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,11 +1,9 @@\n-error[E0434]: can't capture dynamic environment in a fn item\n+error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/issue-27433.rs:3:23\n    |\n LL |     const FOO : u32 = foo;\n-   |                       ^^^\n-   |\n-   = help: use the `|| { ... }` closure form instead\n+   |                       ^^^ non-constant value\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0434`.\n+For more information about this error, try `rustc --explain E0435`."}, {"sha": "94ed1fdf7819140caa8bbf13210f642390d83838", "filename": "src/test/ui/issues/issue-3021-c.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-3021-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-3021-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3021-c.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,8 +1,8 @@\n fn siphash<T>() {\n \n     trait U {\n-        fn g(&self, x: T) -> T;  //~ ERROR can't use type parameters from outer function\n-        //~^ ERROR can't use type parameters from outer function\n+        fn g(&self, x: T) -> T;  //~ ERROR can't use generic parameters from outer function\n+        //~^ ERROR can't use generic parameters from outer function\n     }\n }\n "}, {"sha": "5eadf7837c7d0533a5773a215117529b3319d131", "filename": "src/test/ui/issues/issue-3021-c.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-3021-c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-3021-c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3021-c.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,24 +1,24 @@\n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/issue-3021-c.rs:4:24\n    |\n LL | fn siphash<T>() {\n    |            - type variable from outer function\n ...\n-LL |         fn g(&self, x: T) -> T;  //~ ERROR can't use type parameters from outer function\n-   |            -           ^ use of type variable from outer function\n+LL |         fn g(&self, x: T) -> T;  //~ ERROR can't use generic parameters from outer function\n+   |            -           ^ use of generic parameter from outer function\n    |            |\n-   |            help: try using a local type parameter instead: `g<T>`\n+   |            help: try using a local generic parameter instead: `g<T>`\n \n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/issue-3021-c.rs:4:30\n    |\n LL | fn siphash<T>() {\n    |            - type variable from outer function\n ...\n-LL |         fn g(&self, x: T) -> T;  //~ ERROR can't use type parameters from outer function\n-   |            -                 ^ use of type variable from outer function\n+LL |         fn g(&self, x: T) -> T;  //~ ERROR can't use generic parameters from outer function\n+   |            -                 ^ use of generic parameter from outer function\n    |            |\n-   |            help: try using a local type parameter instead: `g<T>`\n+   |            help: try using a local generic parameter instead: `g<T>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9a727aa3057977605d7521c8138e09464f65d2f2", "filename": "src/test/ui/issues/issue-3214.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-3214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-3214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3214.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,6 +1,6 @@\n fn foo<T>() {\n     struct Foo {\n-        x: T, //~ ERROR can't use type parameters from outer function\n+        x: T, //~ ERROR can't use generic parameters from outer function\n     }\n \n     impl<T> Drop for Foo<T> {"}, {"sha": "e6526bad3e0d3ac8bb44f3a0d836fa31fefa8e63", "filename": "src/test/ui/issues/issue-3214.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,13 +1,13 @@\n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/issue-3214.rs:3:12\n    |\n LL | fn foo<T>() {\n    |    --- - type variable from outer function\n    |    |\n-   |    try adding a local type parameter in this method instead\n+   |    try adding a local generic parameter in this method instead\n LL |     struct Foo {\n-LL |         x: T, //~ ERROR can't use type parameters from outer function\n-   |            ^ use of type variable from outer function\n+LL |         x: T, //~ ERROR can't use generic parameters from outer function\n+   |            ^ use of generic parameter from outer function\n \n error[E0107]: wrong number of type arguments: expected 0, found 1\n   --> $DIR/issue-3214.rs:6:26"}, {"sha": "871394f9eaeb96147d2b1144a3cad6988c91d9da", "filename": "src/test/ui/issues/issue-3521-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -2,7 +2,7 @@ fn main() {\n     let foo = 100;\n \n     static y: isize = foo + 1;\n-    //~^ ERROR can't capture dynamic environment\n+    //~^ ERROR attempt to use a non-constant value in a constant\n \n     println!(\"{}\", y);\n }"}, {"sha": "d54bbbcdc3325609a5217c94cd144e1afd53e706", "filename": "src/test/ui/issues/issue-3521-2.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,11 +1,9 @@\n-error[E0434]: can't capture dynamic environment in a fn item\n+error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/issue-3521-2.rs:4:23\n    |\n LL |     static y: isize = foo + 1;\n-   |                       ^^^\n-   |\n-   = help: use the `|| { ... }` closure form instead\n+   |                       ^^^ non-constant value\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0434`.\n+For more information about this error, try `rustc --explain E0435`."}, {"sha": "525f6f5684e70f52a31dde057384e7f67d1bb700", "filename": "src/test/ui/issues/issue-3668-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,6 +1,6 @@\n fn f(x:isize) {\n     static child: isize = x + 1;\n-    //~^ ERROR can't capture dynamic environment\n+    //~^ ERROR attempt to use a non-constant value in a constant\n }\n \n fn main() {}"}, {"sha": "d6a6e8379602d27b90f900f78ff8963118cb99e3", "filename": "src/test/ui/issues/issue-3668-2.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,11 +1,9 @@\n-error[E0434]: can't capture dynamic environment in a fn item\n+error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/issue-3668-2.rs:2:27\n    |\n LL |     static child: isize = x + 1;\n-   |                           ^\n-   |\n-   = help: use the `|| { ... }` closure form instead\n+   |                           ^ non-constant value\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0434`.\n+For more information about this error, try `rustc --explain E0435`."}, {"sha": "0e1f19a75baeb1d7507f9a4cd349272b98aa666c", "filename": "src/test/ui/issues/issue-3668.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-3668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-3668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3668.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -6,7 +6,7 @@ trait PTrait {\n impl PTrait for P {\n    fn getChildOption(&self) -> Option<Box<P>> {\n        static childVal: Box<P> = self.child.get();\n-       //~^ ERROR can't capture dynamic environment\n+       //~^ ERROR attempt to use a non-constant value in a constant\n        panic!();\n    }\n }"}, {"sha": "98cd3631a5365e2a875cda5e1084593aab715837", "filename": "src/test/ui/issues/issue-3668.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-3668.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-3668.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3668.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,11 +1,9 @@\n-error[E0434]: can't capture dynamic environment in a fn item\n+error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/issue-3668.rs:8:34\n    |\n LL |        static childVal: Box<P> = self.child.get();\n-   |                                  ^^^^\n-   |\n-   = help: use the `|| { ... }` closure form instead\n+   |                                  ^^^^ non-constant value\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0434`.\n+For more information about this error, try `rustc --explain E0435`."}, {"sha": "3ff4e036c60bec7d1d8f4d0001ef7e53b422da00", "filename": "src/test/ui/issues/issue-5997-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-5997-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-5997-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5997-enum.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,6 +1,6 @@\n fn f<Z>() -> bool {\n     enum E { V(Z) }\n-    //~^ ERROR can't use type parameters from outer function\n+    //~^ ERROR can't use generic parameters from outer function\n     true\n }\n "}, {"sha": "5c778143e13dd705d32e267c82acead08bdd5470", "filename": "src/test/ui/issues/issue-5997-enum.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-5997-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-5997-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5997-enum.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,12 +1,12 @@\n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/issue-5997-enum.rs:2:16\n    |\n LL | fn f<Z>() -> bool {\n    |    - - type variable from outer function\n    |    |\n-   |    try adding a local type parameter in this method instead\n+   |    try adding a local generic parameter in this method instead\n LL |     enum E { V(Z) }\n-   |                ^ use of type variable from outer function\n+   |                ^ use of generic parameter from outer function\n \n error: aborting due to previous error\n "}, {"sha": "6cf510b0a9d756641a6a8ee3d47ecb7f89dbc4f7", "filename": "src/test/ui/issues/issue-5997-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-5997-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-5997-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5997-struct.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,5 +1,5 @@\n fn f<T>() -> bool {\n-    struct S(T); //~ ERROR can't use type parameters from outer function\n+    struct S(T); //~ ERROR can't use generic parameters from outer function\n \n     true\n }"}, {"sha": "a60987b3f98ba9279ca9175ad417d4a794fee5c0", "filename": "src/test/ui/issues/issue-5997-struct.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-5997-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fissues%2Fissue-5997-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5997-struct.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,12 +1,12 @@\n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/issue-5997-struct.rs:2:14\n    |\n LL | fn f<T>() -> bool {\n    |    - - type variable from outer function\n    |    |\n-   |    try adding a local type parameter in this method instead\n-LL |     struct S(T); //~ ERROR can't use type parameters from outer function\n-   |              ^ use of type variable from outer function\n+   |    try adding a local generic parameter in this method instead\n+LL |     struct S(T); //~ ERROR can't use generic parameters from outer function\n+   |              ^ use of generic parameter from outer function\n \n error: aborting due to previous error\n "}, {"sha": "3cef5db66c66fbe6adb7f247bdd9e12c24ded8b3", "filename": "src/test/ui/lifetime-before-type-params.stderr", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Flifetime-before-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Flifetime-before-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-before-type-params.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -2,41 +2,25 @@ error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/lifetime-before-type-params.rs:2:13\n    |\n LL | fn first<T, 'a, 'b>() {}\n-   |             ^^  ^^\n-help: move the lifetime parameter prior to the first type parameter\n-   |\n-LL | fn first<'a, 'b, T>() {}\n-   |          ^^^ ^^^ --\n+   |         ----^^--^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T>`\n \n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/lifetime-before-type-params.rs:4:18\n    |\n LL | fn second<'a, T, 'b>() {}\n-   |                  ^^\n-help: move the lifetime parameter prior to the first type parameter\n-   |\n-LL | fn second<'a, 'b, T>() {}\n-   |               ^^^ --\n+   |          --------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T>`\n \n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/lifetime-before-type-params.rs:6:16\n    |\n LL | fn third<T, U, 'a>() {}\n-   |                ^^\n-help: move the lifetime parameter prior to the first type parameter\n-   |\n-LL | fn third<'a, T, U>() {}\n-   |          ^^^    --\n+   |         -------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, U>`\n \n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/lifetime-before-type-params.rs:8:18\n    |\n LL | fn fourth<'a, T, 'b, U, 'c, V>() {}\n-   |                  ^^     ^^\n-help: move the lifetime parameter prior to the first type parameter\n-   |\n-LL | fn fourth<'a, 'b, 'c, T, U, V>() {}\n-   |               ^^^ ^^^ -- --\n+   |          --------^^-----^^---- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, 'c, T, U, V>`\n \n error[E0601]: `main` function not found in crate `lifetime_before_type_params`\n    |"}, {"sha": "85413acdb149166ef51ca696fe39332fe54d70ae", "filename": "src/test/ui/nested-ty-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fnested-ty-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fnested-ty-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnested-ty-params.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:can't use type parameters from outer function\n+// error-pattern:can't use generic parameters from outer function\n fn hd<U>(v: Vec<U> ) -> U {\n     fn hd1(w: [U]) -> U { return w[0]; }\n "}, {"sha": "37adeffb9b07afb46b8affa88c8ce97aaf7e7714", "filename": "src/test/ui/nested-ty-params.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fnested-ty-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fnested-ty-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnested-ty-params.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,22 +1,22 @@\n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/nested-ty-params.rs:3:16\n    |\n LL | fn hd<U>(v: Vec<U> ) -> U {\n    |       - type variable from outer function\n LL |     fn hd1(w: [U]) -> U { return w[0]; }\n-   |        ---     ^ use of type variable from outer function\n+   |        ---     ^ use of generic parameter from outer function\n    |        |\n-   |        help: try using a local type parameter instead: `hd1<U>`\n+   |        help: try using a local generic parameter instead: `hd1<U>`\n \n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/nested-ty-params.rs:3:23\n    |\n LL | fn hd<U>(v: Vec<U> ) -> U {\n    |       - type variable from outer function\n LL |     fn hd1(w: [U]) -> U { return w[0]; }\n-   |        ---            ^ use of type variable from outer function\n+   |        ---            ^ use of generic parameter from outer function\n    |        |\n-   |        help: try using a local type parameter instead: `hd1<U>`\n+   |        help: try using a local generic parameter instead: `hd1<U>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9225cfce94eb8e832735a63eb6983894b39a4290", "filename": "src/test/ui/parser/bounds-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -6,6 +6,6 @@ type A = for<'a: 'b + 'c> fn(); // OK (rejected later by ast_validation)\n type A = for<'a: 'b,> fn(); // OK(rejected later by ast_validation)\n type A = for<'a: 'b +> fn(); // OK (rejected later by ast_validation)\n type A = for<'a, T> fn(); // OK (rejected later by ast_validation)\n-type A = for<,> fn(); //~ ERROR expected one of `>`, identifier, or lifetime, found `,`\n+type A = for<,> fn(); //~ ERROR expected one of `>`, `const`, identifier, or lifetime, found `,`\n \n fn main() {}"}, {"sha": "191ea3ebd070acfd0243e104cd61b215b7eda3b2", "filename": "src/test/ui/parser/bounds-lifetime.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `>`, identifier, or lifetime, found `,`\n+error: expected one of `>`, `const`, identifier, or lifetime, found `,`\n   --> $DIR/bounds-lifetime.rs:9:14\n    |\n-LL | type A = for<,> fn(); //~ ERROR expected one of `>`, identifier, or lifetime, found `,`\n-   |              ^ expected one of `>`, identifier, or lifetime here\n+LL | type A = for<,> fn(); //~ ERROR expected one of `>`, `const`, identifier, or lifetime, found `,`\n+   |              ^ expected one of `>`, `const`, identifier, or lifetime here\n \n error: aborting due to previous error\n "}, {"sha": "bcecd75b1abbad33e772bf4e1042befd4dfba493", "filename": "src/test/ui/parser/issue-14303-enum.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fissue-14303-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fissue-14303-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-enum.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -2,11 +2,7 @@ error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/issue-14303-enum.rs:1:15\n    |\n LL | enum X<'a, T, 'b> {\n-   |               ^^\n-help: move the lifetime parameter prior to the first type parameter\n-   |\n-LL | enum X<'a, 'b, T> {\n-   |            ^^^ --\n+   |       --------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T>`\n \n error: aborting due to previous error\n "}, {"sha": "082c37e0be7956e8789126a54c1dcaf7d4452add", "filename": "src/test/ui/parser/issue-14303-fn-def.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fn-def.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fn-def.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fn-def.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -2,11 +2,7 @@ error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/issue-14303-fn-def.rs:1:15\n    |\n LL | fn foo<'a, T, 'b>(x: &'a T) {}\n-   |               ^^\n-help: move the lifetime parameter prior to the first type parameter\n-   |\n-LL | fn foo<'a, 'b, T>(x: &'a T) {}\n-   |            ^^^ --\n+   |       --------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T>`\n \n error: aborting due to previous error\n "}, {"sha": "39694198cdb4d1807fac4bbb2438c4664dc681f0", "filename": "src/test/ui/parser/issue-14303-fncall.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -11,7 +11,7 @@ fn foo<'a, 'b>(start: &'a usize, end: &'a usize) {\n     let _x = (*start..*end)\n         .map(|x| S { a: start, b: end })\n         .collect::<Vec<S<_, 'a>>>();\n-        //~^ ERROR lifetime parameters must be declared prior to type parameters\n+        //~^ ERROR lifetime arguments must be declared prior to type arguments\n }\n \n fn main() {}"}, {"sha": "8ef9f1a1a6c79edcb1533627a2aafb7cbdc08628", "filename": "src/test/ui/parser/issue-14303-fncall.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,12 +1,8 @@\n-error: lifetime parameters must be declared prior to type parameters\n+error: lifetime arguments must be declared prior to type arguments\n   --> $DIR/issue-14303-fncall.rs:13:29\n    |\n LL |         .collect::<Vec<S<_, 'a>>>();\n-   |                             ^^ must be declared prior to type parameters\n-help: move the lifetime parameter prior to the first type parameter\n-   |\n-LL |         .collect::<Vec<S<'a, _>>>();\n-   |                          ^^^ --\n+   |                             ^^\n \n error: aborting due to previous error\n "}, {"sha": "3b5615d2a9ecab7e55415c4924b1ce5c9c88ea71", "filename": "src/test/ui/parser/issue-14303-impl.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fissue-14303-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fissue-14303-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-impl.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -2,11 +2,7 @@ error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/issue-14303-impl.rs:3:13\n    |\n LL | impl<'a, T, 'b> X<T> {}\n-   |             ^^\n-help: move the lifetime parameter prior to the first type parameter\n-   |\n-LL | impl<'a, 'b, T> X<T> {}\n-   |          ^^^ --\n+   |     --------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T>`\n \n error: aborting due to previous error\n "}, {"sha": "386d19859e4a83d6a6055ee2e295f4d6023df6cc", "filename": "src/test/ui/parser/issue-14303-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -8,6 +8,6 @@ mod foo {\n }\n \n fn bar<'a, 'b, 'c, T>(x: foo::X<'a, T, 'b, 'c>) {}\n-//~^ ERROR lifetime parameters must be declared prior to type parameters\n+//~^ ERROR lifetime arguments must be declared prior to type arguments\n \n fn main() {}"}, {"sha": "19f2995ebee536e652d98662d357b6bca4ea263c", "filename": "src/test/ui/parser/issue-14303-path.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,14 +1,8 @@\n-error: lifetime parameters must be declared prior to type parameters\n+error: lifetime arguments must be declared prior to type arguments\n   --> $DIR/issue-14303-path.rs:10:40\n    |\n LL | fn bar<'a, 'b, 'c, T>(x: foo::X<'a, T, 'b, 'c>) {}\n-   |                                        ^^  ^^ must be declared prior to type parameters\n-   |                                        |\n-   |                                        must be declared prior to type parameters\n-help: move the lifetime parameters prior to the first type parameter\n-   |\n-LL | fn bar<'a, 'b, 'c, T>(x: foo::X<'a, 'b, 'c, T>) {}\n-   |                                     ^^^ ^^^ --\n+   |                                        ^^  ^^\n \n error: aborting due to previous error\n "}, {"sha": "dbd0b987dd1901bfaba0b6e650949fc4c9799408", "filename": "src/test/ui/parser/issue-14303-struct.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fissue-14303-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fissue-14303-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-struct.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -2,11 +2,7 @@ error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/issue-14303-struct.rs:1:17\n    |\n LL | struct X<'a, T, 'b> {\n-   |                 ^^\n-help: move the lifetime parameter prior to the first type parameter\n-   |\n-LL | struct X<'a, 'b, T> {\n-   |              ^^^ --\n+   |         --------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T>`\n \n error: aborting due to previous error\n "}, {"sha": "7dfa62d823fd8754c7f3873797b2a401b73ac7c3", "filename": "src/test/ui/parser/issue-14303-trait.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fissue-14303-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fissue-14303-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-trait.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -2,11 +2,7 @@ error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/issue-14303-trait.rs:1:18\n    |\n LL | trait Foo<'a, T, 'b> {}\n-   |                  ^^\n-help: move the lifetime parameter prior to the first type parameter\n-   |\n-LL | trait Foo<'a, 'b, T> {}\n-   |               ^^^ --\n+   |          --------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T>`\n \n error: aborting due to previous error\n "}, {"sha": "7191a3234c0837828a3f8b1ab5149c0baa97c6b4", "filename": "src/test/ui/parser/issue-32214.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fissue-32214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fissue-32214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-32214.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -3,6 +3,6 @@\n trait Trait<T> { type Item; }\n \n pub fn test<W, I: Trait<Item=(), W> >() {}\n-//~^ ERROR type parameters must be declared prior to associated type bindings\n+//~^ ERROR associated type bindings must be declared after generic parameters\n \n fn main() { }"}, {"sha": "7022019a22f26c4aed51ba70aa39693ad023da81", "filename": "src/test/ui/parser/issue-32214.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,12 +1,10 @@\n-error: type parameters must be declared prior to associated type bindings\n-  --> $DIR/issue-32214.rs:5:34\n+error: associated type bindings must be declared after generic parameters\n+  --> $DIR/issue-32214.rs:5:25\n    |\n LL | pub fn test<W, I: Trait<Item=(), W> >() {}\n-   |                                  ^ must be declared prior to associated type bindings\n-help: move the type parameter prior to the first associated type binding\n-   |\n-LL | pub fn test<W, I: Trait<W, Item=()> >() {}\n-   |                         ^^       --\n+   |                         -------^^^\n+   |                         |\n+   |                         this associated type binding should be moved after the generic parameters\n \n error: aborting due to previous error\n "}, {"sha": "79d51f5595d2635283c36d94989c42bb8afc8ce5", "filename": "src/test/ui/parser/removed-syntax-uniq-mut-ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-uniq-mut-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-uniq-mut-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-uniq-mut-ty.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1 +1 @@\n-type mut_box = Box<mut isize>; //~ ERROR expected one of `>`, lifetime, or type, found `mut`\n+type mut_box = Box<mut isize>; //~ ERROR expected one of `>`, const, lifetime, or type, found `mut`"}, {"sha": "b2759778d0313a75997fa09d2ce3623d86c55dfe", "filename": "src/test/ui/parser/removed-syntax-uniq-mut-ty.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-uniq-mut-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-uniq-mut-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-uniq-mut-ty.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `>`, lifetime, or type, found `mut`\n+error: expected one of `>`, const, lifetime, or type, found `mut`\n   --> $DIR/removed-syntax-uniq-mut-ty.rs:1:20\n    |\n-LL | type mut_box = Box<mut isize>; //~ ERROR expected one of `>`, lifetime, or type, found `mut`\n-   |                    ^^^ expected one of `>`, lifetime, or type here\n+LL | type mut_box = Box<mut isize>; //~ ERROR expected one of `>`, const, lifetime, or type, found `mut`\n+   |                    ^^^ expected one of `>`, const, lifetime, or type here\n \n error: aborting due to previous error\n "}, {"sha": "c77a66524f73f530b9ac3560ee4d7e0d3b86c28a", "filename": "src/test/ui/resolve/resolve-type-param-in-item-in-trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fresolve%2Fresolve-type-param-in-item-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fresolve%2Fresolve-type-param-in-item-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-type-param-in-item-in-trait.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -6,29 +6,29 @@ trait TraitA<A> {\n     fn outer(&self) {\n         enum Foo<B> {\n             Variance(A)\n-                //~^ ERROR can't use type parameters from outer function\n+                //~^ ERROR can't use generic parameters from outer function\n         }\n     }\n }\n \n trait TraitB<A> {\n     fn outer(&self) {\n         struct Foo<B>(A);\n-                //~^ ERROR can't use type parameters from outer function\n+                //~^ ERROR can't use generic parameters from outer function\n     }\n }\n \n trait TraitC<A> {\n     fn outer(&self) {\n         struct Foo<B> { a: A }\n-                //~^ ERROR can't use type parameters from outer function\n+                //~^ ERROR can't use generic parameters from outer function\n     }\n }\n \n trait TraitD<A> {\n     fn outer(&self) {\n         fn foo<B>(a: A) { }\n-                //~^ ERROR can't use type parameters from outer function\n+                //~^ ERROR can't use generic parameters from outer function\n     }\n }\n "}, {"sha": "f6b8abf4057e500f2889c1973ee33c8607a07daa", "filename": "src/test/ui/resolve/resolve-type-param-in-item-in-trait.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fresolve%2Fresolve-type-param-in-item-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fresolve%2Fresolve-type-param-in-item-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-type-param-in-item-in-trait.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,44 +1,44 @@\n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/resolve-type-param-in-item-in-trait.rs:8:22\n    |\n LL | trait TraitA<A> {\n    |              - type variable from outer function\n LL |     fn outer(&self) {\n-   |        ----- try adding a local type parameter in this method instead\n+   |        ----- try adding a local generic parameter in this method instead\n LL |         enum Foo<B> {\n LL |             Variance(A)\n-   |                      ^ use of type variable from outer function\n+   |                      ^ use of generic parameter from outer function\n \n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/resolve-type-param-in-item-in-trait.rs:16:23\n    |\n LL | trait TraitB<A> {\n    |              - type variable from outer function\n LL |     fn outer(&self) {\n-   |        ----- try adding a local type parameter in this method instead\n+   |        ----- try adding a local generic parameter in this method instead\n LL |         struct Foo<B>(A);\n-   |                       ^ use of type variable from outer function\n+   |                       ^ use of generic parameter from outer function\n \n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/resolve-type-param-in-item-in-trait.rs:23:28\n    |\n LL | trait TraitC<A> {\n    |              - type variable from outer function\n LL |     fn outer(&self) {\n-   |        ----- try adding a local type parameter in this method instead\n+   |        ----- try adding a local generic parameter in this method instead\n LL |         struct Foo<B> { a: A }\n-   |                            ^ use of type variable from outer function\n+   |                            ^ use of generic parameter from outer function\n \n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/resolve-type-param-in-item-in-trait.rs:30:22\n    |\n LL | trait TraitD<A> {\n    |              - type variable from outer function\n LL |     fn outer(&self) {\n LL |         fn foo<B>(a: A) { }\n-   |            ------    ^ use of type variable from outer function\n+   |            ------    ^ use of generic parameter from outer function\n    |            |\n-   |            help: try using a local type parameter instead: `foo<B, A>`\n+   |            help: try using a local generic parameter instead: `foo<B, A>`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "afc27701920dceba2981fc863605d72a445b1c71", "filename": "src/test/ui/rfc1598-generic-associated-types/empty_generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -3,7 +3,7 @@\n \n trait Foo {\n     type Bar<,>;\n-    //~^ ERROR expected one of `>`, identifier, or lifetime, found `,`\n+    //~^ ERROR expected one of `>`, `const`, identifier, or lifetime, found `,`\n }\n \n fn main() {}"}, {"sha": "5b98302924e3ce986bf3fb01412858b00302c834", "filename": "src/test/ui/rfc1598-generic-associated-types/empty_generics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `>`, identifier, or lifetime, found `,`\n+error: expected one of `>`, `const`, identifier, or lifetime, found `,`\n   --> $DIR/empty_generics.rs:5:14\n    |\n LL |     type Bar<,>;\n-   |              ^ expected one of `>`, identifier, or lifetime here\n+   |              ^ expected one of `>`, `const`, identifier, or lifetime here\n \n warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n   --> $DIR/empty_generics.rs:1:12"}, {"sha": "2d6dee0621662c5839ea606891d28fb2ade84aa4", "filename": "src/test/ui/suggestions/suggest-move-lifetimes.stderr", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -2,41 +2,25 @@ error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/suggest-move-lifetimes.rs:1:13\n    |\n LL | struct A<T, 'a> { //~ ERROR lifetime parameters must be declared\n-   |             ^^\n-help: move the lifetime parameter prior to the first type parameter\n-   |\n-LL | struct A<'a, T> { //~ ERROR lifetime parameters must be declared\n-   |          ^^^ --\n+   |         ----^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T>`\n \n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/suggest-move-lifetimes.rs:5:13\n    |\n LL | struct B<T, 'a, U> { //~ ERROR lifetime parameters must be declared\n-   |             ^^\n-help: move the lifetime parameter prior to the first type parameter\n-   |\n-LL | struct B<'a, T, U> { //~ ERROR lifetime parameters must be declared\n-   |          ^^^ --\n+   |         ----^^---- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, U>`\n \n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/suggest-move-lifetimes.rs:10:16\n    |\n LL | struct C<T, U, 'a> { //~ ERROR lifetime parameters must be declared\n-   |                ^^\n-help: move the lifetime parameter prior to the first type parameter\n-   |\n-LL | struct C<'a, T, U> { //~ ERROR lifetime parameters must be declared\n-   |          ^^^    --\n+   |         -------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, U>`\n \n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/suggest-move-lifetimes.rs:15:16\n    |\n LL | struct D<T, U, 'a, 'b, V, 'c> { //~ ERROR lifetime parameters must be declared\n-   |                ^^  ^^     ^^\n-help: move the lifetime parameter prior to the first type parameter\n-   |\n-LL | struct D<'a, 'b, 'c, T, U, V> { //~ ERROR lifetime parameters must be declared\n-   |          ^^^ ^^^ ^^^    -- --\n+   |         -------^^--^^-----^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, 'c, T, U, V>`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "890950ea08c5d4a316475b95181f3a28832975ef", "filename": "src/test/ui/suggestions/suggest-move-types.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -25,57 +25,61 @@ trait ThreeWithLifetime<'a, 'b, 'c, T, U, V> {\n   type C;\n }\n \n-struct A<T, M: One<A=(), T>> { //~ ERROR type parameters must be declared\n+struct A<T, M: One<A=(), T>> { //~ ERROR associated type bindings must be declared after generic parameters\n     m: M,\n     t: T,\n }\n \n \n struct Al<'a, T, M: OneWithLifetime<A=(), T, 'a>> {\n-//~^ ERROR generic arguments must declare lifetimes, types and associated type bindings in that order\n+//~^ ERROR associated type bindings must be declared after generic parameters\n+//~^^ ERROR lifetime arguments must be declared prior to type arguments\n     m: M,\n     t: &'a T,\n }\n \n-struct B<T, U, V, M: Three<A=(), B=(), C=(), T, U, V>> { //~ ERROR type parameters must be declared\n+struct B<T, U, V, M: Three<A=(), B=(), C=(), T, U, V>> { //~ ERROR associated type bindings must be declared after generic parameters\n     m: M,\n     t: T,\n     u: U,\n     v: V,\n }\n \n struct Bl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<A=(), B=(), C=(), T, U, V, 'a, 'b, 'c>> {\n-//~^ ERROR generic arguments must declare lifetimes, types and associated type bindings in that order\n+//~^ ERROR associated type bindings must be declared after generic parameters\n+//~^^ ERROR lifetime arguments must be declared prior to type arguments\n     m: M,\n     t: &'a T,\n     u: &'b U,\n     v: &'c V,\n }\n \n-struct C<T, U, V, M: Three<T, A=(), B=(), C=(), U, V>> { //~ ERROR type parameters must be declared\n+struct C<T, U, V, M: Three<T, A=(), B=(), C=(), U, V>> { //~ ERROR associated type bindings must be declared after generic parameters\n     m: M,\n     t: T,\n     u: U,\n     v: V,\n }\n \n struct Cl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), C=(), U, 'b, V, 'c>> {\n-//~^ ERROR generic arguments must declare lifetimes, types and associated type bindings in that order\n+//~^ ERROR associated type bindings must be declared after generic parameters\n+//~^^ ERROR lifetime arguments must be declared prior to type arguments\n     m: M,\n     t: &'a T,\n     u: &'b U,\n     v: &'c V,\n }\n \n-struct D<T, U, V, M: Three<T, A=(), B=(), U, C=(), V>> { //~ ERROR type parameters must be declared\n+struct D<T, U, V, M: Three<T, A=(), B=(), U, C=(), V>> { //~ ERROR associated type bindings must be declared after generic parameters\n     m: M,\n     t: T,\n     u: U,\n     v: V,\n }\n \n struct Dl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), U, 'b, C=(), V, 'c>> {\n-//~^ ERROR generic arguments must declare lifetimes, types and associated type bindings in that order\n+//~^ ERROR associated type bindings must be declared after generic parameters\n+//~^^ ERROR lifetime arguments must be declared prior to type arguments\n     m: M,\n     t: &'a T,\n     u: &'b U,"}, {"sha": "0901b71911d432023f6579a26bad2cde2e2fa18b", "filename": "src/test/ui/suggestions/suggest-move-types.stderr", "status": "modified", "additions": 81, "deletions": 86, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,107 +1,102 @@\n-error: type parameters must be declared prior to associated type bindings\n-  --> $DIR/suggest-move-types.rs:28:26\n+error: associated type bindings must be declared after generic parameters\n+  --> $DIR/suggest-move-types.rs:28:20\n    |\n-LL | struct A<T, M: One<A=(), T>> { //~ ERROR type parameters must be declared\n-   |                          ^ must be declared prior to associated type bindings\n-help: move the type parameter prior to the first associated type binding\n-   |\n-LL | struct A<T, M: One<T, A=()>> { //~ ERROR type parameters must be declared\n-   |                    ^^    --\n+LL | struct A<T, M: One<A=(), T>> { //~ ERROR associated type bindings must be declared after generic parameters\n+   |                    ----^^^\n+   |                    |\n+   |                    this associated type binding should be moved after the generic parameters\n \n-error: generic arguments must declare lifetimes, types and associated type bindings in that order\n-  --> $DIR/suggest-move-types.rs:34:46\n+error: associated type bindings must be declared after generic parameters\n+  --> $DIR/suggest-move-types.rs:34:37\n    |\n LL | struct Al<'a, T, M: OneWithLifetime<A=(), T, 'a>> {\n-   |                                           ^  ^^ must be declared prior to type parameters\n-   |                                           |\n-   |                                           must be declared prior to associated type bindings\n-help: move the parameters\n-   |\n-LL | struct Al<'a, T, M: OneWithLifetime<'a, T, A=()>> {\n-   |                                     ^^^ ^^    --\n+   |                                     ----^^^^^^^\n+   |                                     |\n+   |                                     this associated type binding should be moved after the generic parameters\n \n-error: type parameters must be declared prior to associated type bindings\n-  --> $DIR/suggest-move-types.rs:40:46\n-   |\n-LL | struct B<T, U, V, M: Three<A=(), B=(), C=(), T, U, V>> { //~ ERROR type parameters must be declared\n-   |                                              ^  ^  ^ must be declared prior to associated type bindings\n-   |                                              |  |\n-   |                                              |  must be declared prior to associated type bindings\n-   |                                              must be declared prior to associated type bindings\n-help: move the type parameters prior to the first associated type binding\n-   |\n-LL | struct B<T, U, V, M: Three<T, U, V, A=(), B=(), C=()>> { //~ ERROR type parameters must be declared\n-   |                            ^^ ^^ ^^                --\n+error: associated type bindings must be declared after generic parameters\n+  --> $DIR/suggest-move-types.rs:41:28\n+   |\n+LL | struct B<T, U, V, M: Three<A=(), B=(), C=(), T, U, V>> { //~ ERROR associated type bindings must be declared after generic parameters\n+   |                            ----^^----^^----^^^^^^^^^\n+   |                            |     |     |\n+   |                            |     |     this associated type binding should be moved after the generic parameters\n+   |                            |     this associated type binding should be moved after the generic parameters\n+   |                            this associated type binding should be moved after the generic parameters\n \n-error: generic arguments must declare lifetimes, types and associated type bindings in that order\n-  --> $DIR/suggest-move-types.rs:47:80\n+error: associated type bindings must be declared after generic parameters\n+  --> $DIR/suggest-move-types.rs:48:53\n    |\n LL | struct Bl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<A=(), B=(), C=(), T, U, V, 'a, 'b, 'c>> {\n-   |                                                                       ^  ^  ^  ^^  ^^  ^^ must be declared prior to type parameters\n-   |                                                                       |  |  |  |   |\n-   |                                                                       |  |  |  |   must be declared prior to type parameters\n-   |                                                                       |  |  |  must be declared prior to type parameters\n-   |                                                                       |  |  must be declared prior to associated type bindings\n-   |                                                                       |  must be declared prior to associated type bindings\n-   |                                                                       must be declared prior to associated type bindings\n-help: move the parameters\n-   |\n-LL | struct Bl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<'a, 'b, 'c, T, U, V, A=(), B=(), C=()>> {\n-   |                                                     ^^^ ^^^ ^^^ ^^ ^^ ^^                --\n+   |                                                     ----^^----^^----^^^^^^^^^^^^^^^^^^^^^\n+   |                                                     |     |     |\n+   |                                                     |     |     this associated type binding should be moved after the generic parameters\n+   |                                                     |     this associated type binding should be moved after the generic parameters\n+   |                                                     this associated type binding should be moved after the generic parameters\n \n-error: type parameters must be declared prior to associated type bindings\n-  --> $DIR/suggest-move-types.rs:55:49\n-   |\n-LL | struct C<T, U, V, M: Three<T, A=(), B=(), C=(), U, V>> { //~ ERROR type parameters must be declared\n-   |                                                 ^  ^ must be declared prior to associated type bindings\n-   |                                                 |\n-   |                                                 must be declared prior to associated type bindings\n-help: move the type parameters prior to the first associated type binding\n-   |\n-LL | struct C<T, U, V, M: Three<T, U, V, A=(), B=(), C=()>> { //~ ERROR type parameters must be declared\n-   |                               ^^ ^^                --\n+error: associated type bindings must be declared after generic parameters\n+  --> $DIR/suggest-move-types.rs:57:28\n+   |\n+LL | struct C<T, U, V, M: Three<T, A=(), B=(), C=(), U, V>> { //~ ERROR associated type bindings must be declared after generic parameters\n+   |                            ^^^----^^----^^----^^^^^^\n+   |                               |     |     |\n+   |                               |     |     this associated type binding should be moved after the generic parameters\n+   |                               |     this associated type binding should be moved after the generic parameters\n+   |                               this associated type binding should be moved after the generic parameters\n \n-error: generic arguments must declare lifetimes, types and associated type bindings in that order\n-  --> $DIR/suggest-move-types.rs:62:56\n+error: associated type bindings must be declared after generic parameters\n+  --> $DIR/suggest-move-types.rs:64:53\n    |\n LL | struct Cl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), C=(), U, 'b, V, 'c>> {\n-   |                                                        ^^                    ^  ^^  ^  ^^ must be declared prior to type parameters\n-   |                                                        |                     |  |   |\n-   |                                                        |                     |  |   must be declared prior to associated type bindings\n-   |                                                        |                     |  must be declared prior to type parameters\n-   |                                                        |                     must be declared prior to associated type bindings\n-   |                                                        must be declared prior to type parameters\n-help: move the parameters\n+   |                                                     ^^^^^^^----^^----^^----^^^^^^^^^^^^^^\n+   |                                                            |     |     |\n+   |                                                            |     |     this associated type binding should be moved after the generic parameters\n+   |                                                            |     this associated type binding should be moved after the generic parameters\n+   |                                                            this associated type binding should be moved after the generic parameters\n+\n+error: associated type bindings must be declared after generic parameters\n+  --> $DIR/suggest-move-types.rs:73:28\n+   |\n+LL | struct D<T, U, V, M: Three<T, A=(), B=(), U, C=(), V>> { //~ ERROR associated type bindings must be declared after generic parameters\n+   |                            ^^^----^^----^^^^^----^^^\n+   |                               |     |        |\n+   |                               |     |        this associated type binding should be moved after the generic parameters\n+   |                               |     this associated type binding should be moved after the generic parameters\n+   |                               this associated type binding should be moved after the generic parameters\n+\n+error: associated type bindings must be declared after generic parameters\n+  --> $DIR/suggest-move-types.rs:80:53\n    |\n-LL | struct Cl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<'a, 'b, 'c, T, U, V, A=(), B=(), C=()>> {\n-   |                                                     ^^^ ^^^ ^^^ -- ^^ ^^                --\n+LL | struct Dl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), U, 'b, C=(), V, 'c>> {\n+   |                                                     ^^^^^^^----^^----^^^^^^^^^----^^^^^^^\n+   |                                                            |     |            |\n+   |                                                            |     |            this associated type binding should be moved after the generic parameters\n+   |                                                            |     this associated type binding should be moved after the generic parameters\n+   |                                                            this associated type binding should be moved after the generic parameters\n \n-error: type parameters must be declared prior to associated type bindings\n-  --> $DIR/suggest-move-types.rs:70:43\n+error: lifetime arguments must be declared prior to type arguments\n+  --> $DIR/suggest-move-types.rs:34:46\n    |\n-LL | struct D<T, U, V, M: Three<T, A=(), B=(), U, C=(), V>> { //~ ERROR type parameters must be declared\n-   |                                           ^        ^ must be declared prior to associated type bindings\n-   |                                           |\n-   |                                           must be declared prior to associated type bindings\n-help: move the type parameters prior to the first associated type binding\n+LL | struct Al<'a, T, M: OneWithLifetime<A=(), T, 'a>> {\n+   |                                              ^^\n+\n+error: lifetime arguments must be declared prior to type arguments\n+  --> $DIR/suggest-move-types.rs:48:80\n    |\n-LL | struct D<T, U, V, M: Three<T, U, V, A=(), B=(), C=()>> { //~ ERROR type parameters must be declared\n-   |                               ^^ ^^          --    --\n+LL | struct Bl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<A=(), B=(), C=(), T, U, V, 'a, 'b, 'c>> {\n+   |                                                                                ^^  ^^  ^^\n \n-error: generic arguments must declare lifetimes, types and associated type bindings in that order\n-  --> $DIR/suggest-move-types.rs:77:56\n+error: lifetime arguments must be declared prior to type arguments\n+  --> $DIR/suggest-move-types.rs:64:56\n    |\n-LL | struct Dl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), U, 'b, C=(), V, 'c>> {\n-   |                                                        ^^              ^  ^^        ^  ^^ must be declared prior to type parameters\n-   |                                                        |               |  |         |\n-   |                                                        |               |  |         must be declared prior to associated type bindings\n-   |                                                        |               |  must be declared prior to type parameters\n-   |                                                        |               must be declared prior to associated type bindings\n-   |                                                        must be declared prior to type parameters\n-help: move the parameters\n+LL | struct Cl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), C=(), U, 'b, V, 'c>> {\n+   |                                                        ^^                       ^^     ^^\n+\n+error: lifetime arguments must be declared prior to type arguments\n+  --> $DIR/suggest-move-types.rs:80:56\n    |\n-LL | struct Dl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<'a, 'b, 'c, T, U, V, A=(), B=(), C=()>> {\n-   |                                                     ^^^ ^^^ ^^^ -- ^^ ^^          --    --\n+LL | struct Dl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), U, 'b, C=(), V, 'c>> {\n+   |                                                        ^^                 ^^           ^^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 12 previous errors\n "}, {"sha": "36dec21be0520987d390d1ba59bc0db4982a07a3", "filename": "src/test/ui/traits/trait-object-vs-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -12,6 +12,6 @@ fn main() {\n     //~^ ERROR wrong number of lifetime arguments: expected 1, found 2\n     //~| ERROR wrong number of type arguments: expected 1, found 0\n     let _: S<'static +, 'static>;\n-    //~^ ERROR lifetime parameters must be declared prior to type parameters\n+    //~^ ERROR lifetime arguments must be declared prior to type arguments\n     //~| ERROR at least one non-builtin trait is required for an object type\n }"}, {"sha": "e0c52a72a0931b0941800200b23c8f77befc979c", "filename": "src/test/ui/traits/trait-object-vs-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,12 +1,8 @@\n-error: lifetime parameters must be declared prior to type parameters\n+error: lifetime arguments must be declared prior to type arguments\n   --> $DIR/trait-object-vs-lifetime.rs:14:25\n    |\n LL |     let _: S<'static +, 'static>;\n-   |                         ^^^^^^^ must be declared prior to type parameters\n-help: move the lifetime parameter prior to the first type parameter\n-   |\n-LL |     let _: S<'static, 'static +>;\n-   |              ^^^^^^^^         --\n+   |                         ^^^^^^^\n \n error[E0224]: at least one non-builtin trait is required for an object type\n   --> $DIR/trait-object-vs-lifetime.rs:9:23"}, {"sha": "d5b815f6a95e9ab99aef0c315eb654430fb357c9", "filename": "src/test/ui/type/type-arg-out-of-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Ftype%2Ftype-arg-out-of-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Ftype%2Ftype-arg-out-of-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-arg-out-of-scope.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:can't use type parameters from outer function\n+// error-pattern:can't use generic parameters from outer function\n fn foo<T>(x: T) {\n     fn bar(f: Box<FnMut(T) -> T>) { }\n }"}, {"sha": "645cbb33abec14a5da176c425bf2bbe24b094a5b", "filename": "src/test/ui/type/type-arg-out-of-scope.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Ftype%2Ftype-arg-out-of-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Ftype%2Ftype-arg-out-of-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-arg-out-of-scope.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,22 +1,22 @@\n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/type-arg-out-of-scope.rs:3:25\n    |\n LL | fn foo<T>(x: T) {\n    |        - type variable from outer function\n LL |     fn bar(f: Box<FnMut(T) -> T>) { }\n-   |        ---              ^ use of type variable from outer function\n+   |        ---              ^ use of generic parameter from outer function\n    |        |\n-   |        help: try using a local type parameter instead: `bar<T>`\n+   |        help: try using a local generic parameter instead: `bar<T>`\n \n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/type-arg-out-of-scope.rs:3:31\n    |\n LL | fn foo<T>(x: T) {\n    |        - type variable from outer function\n LL |     fn bar(f: Box<FnMut(T) -> T>) { }\n-   |        ---                    ^ use of type variable from outer function\n+   |        ---                    ^ use of generic parameter from outer function\n    |        |\n-   |        help: try using a local type parameter instead: `bar<T>`\n+   |        help: try using a local generic parameter instead: `bar<T>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "51bd116fbd61c071caed3376d2ffbe5f8aa668fa", "filename": "src/test/ui/type/type-dependent-def-issue-49241.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let v = vec![0];\n-    const l: usize = v.count(); //~ ERROR can't capture dynamic environment in a fn item\n+    const l: usize = v.count(); //~ ERROR attempt to use a non-constant value in a constant\n     let s: [u32; l] = v.into_iter().collect();\n     //~^ ERROR evaluation of constant value failed\n }"}, {"sha": "0af777fdcf90721e9a69d601ae067f8397d540e8", "filename": "src/test/ui/type/type-dependent-def-issue-49241.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,10 +1,8 @@\n-error[E0434]: can't capture dynamic environment in a fn item\n+error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/type-dependent-def-issue-49241.rs:3:22\n    |\n-LL |     const l: usize = v.count(); //~ ERROR can't capture dynamic environment in a fn item\n-   |                      ^\n-   |\n-   = help: use the `|| { ... }` closure form instead\n+LL |     const l: usize = v.count(); //~ ERROR attempt to use a non-constant value in a constant\n+   |                      ^ non-constant value\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/type-dependent-def-issue-49241.rs:4:18\n@@ -14,5 +12,5 @@ LL |     let s: [u32; l] = v.into_iter().collect();\n \n error: aborting due to 2 previous errors\n \n-Some errors occurred: E0080, E0434.\n+Some errors occurred: E0080, E0435.\n For more information about an error, try `rustc --explain E0080`."}, {"sha": "eccb315feb1e2e126701dc1ef48344a60e6f6fc5", "filename": "src/test/ui/use-self-in-inner-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fuse-self-in-inner-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fuse-self-in-inner-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse-self-in-inner-fn.rs?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -4,8 +4,8 @@ impl A {\n //~^ NOTE `Self` type implicitly declared here, by this `impl`\n     fn banana(&mut self) {\n         fn peach(this: &Self) {\n-        //~^ ERROR can't use type parameters from outer function\n-        //~| NOTE use of type variable from outer function\n+        //~^ ERROR can't use generic parameters from outer function\n+        //~| NOTE use of generic parameter from outer function\n         //~| NOTE use a type here instead\n         }\n     }"}, {"sha": "966093499241dfacbcb0664f2cb695bee48f9942", "filename": "src/test/ui/use-self-in-inner-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fuse-self-in-inner-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43e04fb5522642b6b5230592934e9ee100f2fd56/src%2Ftest%2Fui%2Fuse-self-in-inner-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse-self-in-inner-fn.stderr?ref=43e04fb5522642b6b5230592934e9ee100f2fd56", "patch": "@@ -1,4 +1,4 @@\n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/use-self-in-inner-fn.rs:6:25\n    |\n LL | impl A {\n@@ -7,7 +7,7 @@ LL | impl A {\n LL |         fn peach(this: &Self) {\n    |                         ^^^^\n    |                         |\n-   |                         use of type variable from outer function\n+   |                         use of generic parameter from outer function\n    |                         use a type here instead\n \n error: aborting due to previous error"}]}