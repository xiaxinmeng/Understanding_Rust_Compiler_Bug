{"sha": "d64aea65ad3b994ed0e1503f836d82a9896ab468", "node_id": "C_kwDOAAsO6NoAKGQ2NGFlYTY1YWQzYjk5NGVkMGUxNTAzZjgzNmQ4MmE5ODk2YWI0Njg", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2021-11-15T19:40:29Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2021-11-15T19:40:29Z"}, "message": "Fix `non-constant value` ICE (#90878)\n\nThis also fixes the same suggestion, which was kind of broken, because it just searched for the last occurence of `const` to replace with a `let`. This works great in some cases, but when there is no const and a leading space to the file, it doesn't work and panic with overflow because it thought that it had found a const.\n\nI also changed the suggestion to only trigger if the `const` and the non-constant value are on the same line, because if they aren't, the suggestion is very likely to be wrong.\n\nAlso don't trigger the suggestion if the found `const` is on line 0, because that triggers the ICE.", "tree": {"sha": "3199ceb46387dfbcbd8f8c73bc686dc9f6d9d6b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3199ceb46387dfbcbd8f8c73bc686dc9f6d9d6b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d64aea65ad3b994ed0e1503f836d82a9896ab468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d64aea65ad3b994ed0e1503f836d82a9896ab468", "html_url": "https://github.com/rust-lang/rust/commit/d64aea65ad3b994ed0e1503f836d82a9896ab468", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d64aea65ad3b994ed0e1503f836d82a9896ab468/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eab2d7519a3f1c11ddaff3d19f8b7727354c6362", "url": "https://api.github.com/repos/rust-lang/rust/commits/eab2d7519a3f1c11ddaff3d19f8b7727354c6362", "html_url": "https://github.com/rust-lang/rust/commit/eab2d7519a3f1c11ddaff3d19f8b7727354c6362"}], "stats": {"total": 101, "additions": 100, "deletions": 1}, "files": [{"sha": "e9680aae3f89d331331e40a5d486577d986b629f", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d64aea65ad3b994ed0e1503f836d82a9896ab468/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64aea65ad3b994ed0e1503f836d82a9896ab468/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=d64aea65ad3b994ed0e1503f836d82a9896ab468", "patch": "@@ -450,9 +450,23 @@ impl<'a> Resolver<'a> {\n                 // let foo =...\n                 //     ^^^ given this Span\n                 // ------- get this Span to have an applicable suggestion\n+\n+                // edit:\n+                // only do this if the const and usage of the non-constant value are on the same line\n+                // the further the two are apart, the higher the chance of the suggestion being wrong\n+                // also make sure that this line isn't the first one (ICE #90878)\n+\n                 let sp =\n                     self.session.source_map().span_extend_to_prev_str(ident.span, current, true);\n-                if sp.lo().0 == 0 {\n+\n+                let is_first_line = self\n+                    .session\n+                    .source_map()\n+                    .lookup_line(sp.lo())\n+                    .map(|file_and_line| file_and_line.line == 0)\n+                    .unwrap_or(true);\n+\n+                if sp.lo().0 == 0 || self.session.source_map().is_multiline(sp) || is_first_line {\n                     err.span_label(ident.span, &format!(\"this would need to be a `{}`\", sugg));\n                 } else {\n                     let sp = sp.with_lo(BytePos(sp.lo().0 - current.len() as u32));"}, {"sha": "1445c59710cc34bc3290470c92ed3fad1a462cb5", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d64aea65ad3b994ed0e1503f836d82a9896ab468/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64aea65ad3b994ed0e1503f836d82a9896ab468/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=d64aea65ad3b994ed0e1503f836d82a9896ab468", "patch": "@@ -1935,6 +1935,7 @@ pub struct Loc {\n #[derive(Debug)]\n pub struct SourceFileAndLine {\n     pub sf: Lrc<SourceFile>,\n+    /// Index of line, starting from 0.\n     pub line: usize,\n }\n #[derive(Debug)]"}, {"sha": "7e3f18cc9d5931a20534204415421179323537e2", "filename": "src/test/ui/consts/issue-90878-2.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d64aea65ad3b994ed0e1503f836d82a9896ab468/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64aea65ad3b994ed0e1503f836d82a9896ab468/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-2.rs?ref=d64aea65ad3b994ed0e1503f836d82a9896ab468", "patch": "@@ -0,0 +1,12 @@\n+ #![l=|x|[b;x ]] //~ ERROR unexpected token: `|x| [b; x]`\n+//~^ ERROR cannot find attribute `l` in this scope\n+//~^^ ERROR attempt to use a non-constant value in a constant [E0435]\n+//~^^^ ERROR cannot find value `b` in this scope [E0425]\n+\n+// notice the space at the start,\n+// we can't attach any attributes to this file because it needs to be at the start\n+\n+// this example has been slightly modified (adding ]] at the end), so that it actually works here\n+// it still produces the same issue though\n+\n+fn main() {}"}, {"sha": "9e167424995a7dc5fde235d5be51bc277fc5369e", "filename": "src/test/ui/consts/issue-90878-2.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d64aea65ad3b994ed0e1503f836d82a9896ab468/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d64aea65ad3b994ed0e1503f836d82a9896ab468/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-2.stderr?ref=d64aea65ad3b994ed0e1503f836d82a9896ab468", "patch": "@@ -0,0 +1,30 @@\n+error: unexpected token: `|x| [b; x]`\n+  --> $DIR/issue-90878-2.rs:1:7\n+   |\n+LL |  #![l=|x|[b;x ]]\n+   |       ^^^^^^^^^\n+\n+error: cannot find attribute `l` in this scope\n+  --> $DIR/issue-90878-2.rs:1:5\n+   |\n+LL |  #![l=|x|[b;x ]]\n+   |     ^\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/issue-90878-2.rs:1:13\n+   |\n+LL |  #![l=|x|[b;x ]]\n+   |        -    ^\n+   |        |\n+   |        this would need to be a `const`\n+\n+error[E0425]: cannot find value `b` in this scope\n+  --> $DIR/issue-90878-2.rs:1:11\n+   |\n+LL |  #![l=|x|[b;x ]]\n+   |           ^ help: a local variable with a similar name exists: `x`\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0425, E0435.\n+For more information about an error, try `rustc --explain E0425`."}, {"sha": "43f6fe5f3800d8b0a1a5c347a749f0cb47be0441", "filename": "src/test/ui/consts/issue-90878.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d64aea65ad3b994ed0e1503f836d82a9896ab468/src%2Ftest%2Fui%2Fconsts%2Fissue-90878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64aea65ad3b994ed0e1503f836d82a9896ab468/src%2Ftest%2Fui%2Fconsts%2Fissue-90878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-90878.rs?ref=d64aea65ad3b994ed0e1503f836d82a9896ab468", "patch": "@@ -0,0 +1,4 @@\n+ fn main() {\n+    |x: usize| [0; x];  //~ ERROR attempt to use a non-constant value in a constant [E0435]\n+    // (note the space before \"fn\")\n+}"}, {"sha": "c038fc622d46865230e73f1a3d8001b72b1bdfa0", "filename": "src/test/ui/consts/issue-90878.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d64aea65ad3b994ed0e1503f836d82a9896ab468/src%2Ftest%2Fui%2Fconsts%2Fissue-90878.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d64aea65ad3b994ed0e1503f836d82a9896ab468/src%2Ftest%2Fui%2Fconsts%2Fissue-90878.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-90878.stderr?ref=d64aea65ad3b994ed0e1503f836d82a9896ab468", "patch": "@@ -0,0 +1,11 @@\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/issue-90878.rs:2:20\n+   |\n+LL |     |x: usize| [0; x];\n+   |      -             ^\n+   |      |\n+   |      this would need to be a `const`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0435`."}, {"sha": "1a20b1e09d7be67f80b56b9b3156bce3e197db74", "filename": "src/test/ui/consts/non-const-value-in-const.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d64aea65ad3b994ed0e1503f836d82a9896ab468/src%2Ftest%2Fui%2Fconsts%2Fnon-const-value-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64aea65ad3b994ed0e1503f836d82a9896ab468/src%2Ftest%2Fui%2Fconsts%2Fnon-const-value-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fnon-const-value-in-const.rs?ref=d64aea65ad3b994ed0e1503f836d82a9896ab468", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let x = 5;\n+    const Y: i32 = x; //~ ERROR attempt to use a non-constant value in a constant [E0435]\n+\n+    let x = 5;\n+    let _ = [0; x]; //~ ERROR attempt to use a non-constant value in a constant [E0435]\n+}"}, {"sha": "0ce4b4b7053344e07ec8c923975a2e7fca67a1e4", "filename": "src/test/ui/consts/non-const-value-in-const.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d64aea65ad3b994ed0e1503f836d82a9896ab468/src%2Ftest%2Fui%2Fconsts%2Fnon-const-value-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d64aea65ad3b994ed0e1503f836d82a9896ab468/src%2Ftest%2Fui%2Fconsts%2Fnon-const-value-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fnon-const-value-in-const.stderr?ref=d64aea65ad3b994ed0e1503f836d82a9896ab468", "patch": "@@ -0,0 +1,20 @@\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/non-const-value-in-const.rs:3:20\n+   |\n+LL |     const Y: i32 = x;\n+   |     -------        ^ non-constant value\n+   |     |\n+   |     help: consider using `let` instead of `const`: `let Y`\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/non-const-value-in-const.rs:6:17\n+   |\n+LL |     let x = 5;\n+   |     ----- help: consider using `const` instead of `let`: `const x`\n+...\n+LL |     let _ = [0; x];\n+   |                 ^ non-constant value\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0435`."}]}