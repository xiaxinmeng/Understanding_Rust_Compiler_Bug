{"sha": "d4532903b05b06e25511ec929823909a157cdf2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NTMyOTAzYjA1YjA2ZTI1NTExZWM5Mjk4MjM5MDlhMTU3Y2RmMmM=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-23T19:30:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-23T19:30:56Z"}, "message": "Rollup merge of #86410 - spastorino:get_value_matching, r=oli-obk\n\nVecMap::get_value_matching should return just one element\n\nr? `@nikomatsakis`\n\nRelated to #86465 and #87287", "tree": {"sha": "51ffec3ff631eb98b4221222ec3e41580fe95ac8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51ffec3ff631eb98b4221222ec3e41580fe95ac8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4532903b05b06e25511ec929823909a157cdf2c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg+xjwCRBK7hj4Ov3rIwAABzoIAA/U31uZLeKfP09O2dN70B6B\nPMLNFsciCt65G1H2SBMwQ2CPodvfEDzMVRC1XCpVCHnQbz+2CHpCt67DtDRLodYB\nkdl79VS7jd7BXMmwrpmN92i/+wWGSfwj0Nbc351VDx0BOmn38EnVBh4UHwiFZdKP\nJSj7ol+Je0dJJthFjlyXS+OyHDtU+pexCFNJLHQNFqjqinhg2x/nKj6TLtl3i6hZ\n+khXXHl3Q/4wBE6X2h7AbN/MW7rkZ8b8IsSXaFbb2BoWZPUwGV7i8u0FwD1gH6SP\nrbYwLYShKADN1xKII3RccNmN5I9v2RlrtgAIqQMgy3/qRFZANLVah/5dlAwVtyo=\n=Fo5N\n-----END PGP SIGNATURE-----\n", "payload": "tree 51ffec3ff631eb98b4221222ec3e41580fe95ac8\nparent 0443424954f32d94f847322e85c77df50d44f80f\nparent c79df8563b805732d6d04767a7d57384f57fcb0e\nauthor Yuki Okushi <jtitor@2k36.org> 1627068656 +0900\ncommitter GitHub <noreply@github.com> 1627068656 +0900\n\nRollup merge of #86410 - spastorino:get_value_matching, r=oli-obk\n\nVecMap::get_value_matching should return just one element\n\nr? `@nikomatsakis`\n\nRelated to #86465 and #87287\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4532903b05b06e25511ec929823909a157cdf2c", "html_url": "https://github.com/rust-lang/rust/commit/d4532903b05b06e25511ec929823909a157cdf2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4532903b05b06e25511ec929823909a157cdf2c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0443424954f32d94f847322e85c77df50d44f80f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0443424954f32d94f847322e85c77df50d44f80f", "html_url": "https://github.com/rust-lang/rust/commit/0443424954f32d94f847322e85c77df50d44f80f"}, {"sha": "c79df8563b805732d6d04767a7d57384f57fcb0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c79df8563b805732d6d04767a7d57384f57fcb0e", "html_url": "https://github.com/rust-lang/rust/commit/c79df8563b805732d6d04767a7d57384f57fcb0e"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "cc7ec9432faed31803376bbc5113cebd642229ca", "filename": "compiler/rustc_data_structures/src/vec_map.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d4532903b05b06e25511ec929823909a157cdf2c/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4532903b05b06e25511ec929823909a157cdf2c/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs?ref=d4532903b05b06e25511ec929823909a157cdf2c", "patch": "@@ -1,4 +1,5 @@\n use std::borrow::Borrow;\n+use std::fmt::Debug;\n use std::iter::FromIterator;\n use std::slice::Iter;\n use std::vec::IntoIter;\n@@ -12,7 +13,8 @@ pub struct VecMap<K, V>(Vec<(K, V)>);\n \n impl<K, V> VecMap<K, V>\n where\n-    K: PartialEq,\n+    K: Debug + PartialEq,\n+    V: Debug,\n {\n     pub fn new() -> Self {\n         VecMap(Default::default())\n@@ -37,14 +39,31 @@ where\n         self.0.iter().find(|(key, _)| k == key.borrow()).map(|elem| &elem.1)\n     }\n \n-    /// Returns the value corresponding to the supplied predicate filter.\n+    /// Returns the any value corresponding to the supplied predicate filter.\n     ///\n     /// The supplied predicate will be applied to each (key, value) pair and it will return a\n     /// reference to the values where the predicate returns `true`.\n-    pub fn get_by(&self, mut predicate: impl FnMut(&(K, V)) -> bool) -> Option<&V> {\n+    pub fn any_value_matching(&self, mut predicate: impl FnMut(&(K, V)) -> bool) -> Option<&V> {\n         self.0.iter().find(|kv| predicate(kv)).map(|elem| &elem.1)\n     }\n \n+    /// Returns the value corresponding to the supplied predicate filter. It crashes if there's\n+    /// more than one matching element.\n+    ///\n+    /// The supplied predicate will be applied to each (key, value) pair and it will return a\n+    /// reference to the value where the predicate returns `true`.\n+    pub fn get_value_matching(&self, mut predicate: impl FnMut(&(K, V)) -> bool) -> Option<&V> {\n+        let mut filter = self.0.iter().filter(|kv| predicate(kv));\n+        let (_, value) = filter.next()?;\n+        // This should return just one element, otherwise it's a bug\n+        assert!(\n+            filter.next().is_none(),\n+            \"Collection {:?} should have just one matching element\",\n+            self\n+        );\n+        Some(value)\n+    }\n+\n     /// Returns `true` if the map contains a value for the specified key.\n     ///\n     /// The key may be any borrowed form of the map's key type,\n@@ -131,7 +150,7 @@ impl<K, V> IntoIterator for VecMap<K, V> {\n     }\n }\n \n-impl<K: PartialEq, V> Extend<(K, V)> for VecMap<K, V> {\n+impl<K: PartialEq + Debug, V: Debug> Extend<(K, V)> for VecMap<K, V> {\n     fn extend<I: IntoIterator<Item = (K, V)>>(&mut self, iter: I) {\n         for (k, v) in iter {\n             self.insert(k, v);"}, {"sha": "50e4ba4fe6c3e23cd22c40c364bb2f661905a552", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d4532903b05b06e25511ec929823909a157cdf2c/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4532903b05b06e25511ec929823909a157cdf2c/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=d4532903b05b06e25511ec929823909a157cdf2c", "patch": "@@ -364,7 +364,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     let concrete_ty = tcx\n                         .mir_borrowck(owner.expect_local())\n                         .concrete_opaque_types\n-                        .get_by(|(key, _)| key.def_id == def_id.to_def_id())\n+                        .get_value_matching(|(key, _)| key.def_id == def_id.to_def_id())\n                         .map(|concrete_ty| *concrete_ty)\n                         .unwrap_or_else(|| {\n                             tcx.sess.delay_span_bug(\n@@ -512,8 +512,15 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n \n     struct ConstraintLocator<'tcx> {\n         tcx: TyCtxt<'tcx>,\n+\n+        /// def_id of the opaque type whose defining uses are being checked\n         def_id: DefId,\n-        // (first found type span, actual type)\n+\n+        /// as we walk the defining uses, we are checking that all of them\n+        /// define the same hidden type. This variable is set to `Some`\n+        /// with the first type that we find, and then later types are\n+        /// checked against it (we also carry the span of that first\n+        /// type).\n         found: Option<(Span, Ty<'tcx>)>,\n     }\n \n@@ -531,7 +538,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n                 .tcx\n                 .typeck(def_id)\n                 .concrete_opaque_types\n-                .get_by(|(key, _)| key.def_id == self.def_id)\n+                .any_value_matching(|(key, _)| key.def_id == self.def_id)\n                 .is_none()\n             {\n                 debug!(\"no constraints in typeck results\");"}]}