{"sha": "0b2db1e6163cb9860a9ec83254d30eac1c9b90e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiMmRiMWU2MTYzY2I5ODYwYTllYzgzMjU0ZDMwZWFjMWM5YjkwZTc=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2017-12-19T18:10:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-20T19:38:12Z"}, "message": "Add nll feature and make nll imply nll_dump_cause", "tree": {"sha": "e8fe7c32c2785a429485d9e3cbc4d7848266a394", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8fe7c32c2785a429485d9e3cbc4d7848266a394"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b2db1e6163cb9860a9ec83254d30eac1c9b90e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b2db1e6163cb9860a9ec83254d30eac1c9b90e7", "html_url": "https://github.com/rust-lang/rust/commit/0b2db1e6163cb9860a9ec83254d30eac1c9b90e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b2db1e6163cb9860a9ec83254d30eac1c9b90e7/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95b6148e31ff6482491dc955b09a5645780f0ea7", "url": "https://api.github.com/repos/rust-lang/rust/commits/95b6148e31ff6482491dc955b09a5645780f0ea7", "html_url": "https://github.com/rust-lang/rust/commit/95b6148e31ff6482491dc955b09a5645780f0ea7"}], "stats": {"total": 61, "additions": 51, "deletions": 10}, "files": [{"sha": "38bbddfd825a00b0107702340993369261f5cbf0", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b2db1e6163cb9860a9ec83254d30eac1c9b90e7/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2db1e6163cb9860a9ec83254d30eac1c9b90e7/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=0b2db1e6163cb9860a9ec83254d30eac1c9b90e7", "patch": "@@ -261,7 +261,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                 errors: &Vec<RegionResolutionError<'tcx>>) {\n         debug!(\"report_region_errors(): {} errors to start\", errors.len());\n \n-        if self.tcx.sess.opts.debugging_opts.nll {\n+        if self.tcx.sess.nll() {\n             for error in errors {\n                 match *error {\n                     RegionResolutionError::ConcreteFailure(ref origin, ..) |"}, {"sha": "43ed9f02157341332f130602422b21e53a4d7aa4", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b2db1e6163cb9860a9ec83254d30eac1c9b90e7/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2db1e6163cb9860a9ec83254d30eac1c9b90e7/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=0b2db1e6163cb9860a9ec83254d30eac1c9b90e7", "patch": "@@ -437,6 +437,9 @@ impl Session {\n     pub fn print_llvm_passes(&self) -> bool {\n         self.opts.debugging_opts.print_llvm_passes\n     }\n+    pub fn nll(&self) -> bool {\n+        self.features.borrow().nll || self.opts.debugging_opts.nll\n+    }\n     pub fn nll_dump_cause(&self) -> bool {\n         self.opts.debugging_opts.nll_dump_cause\n     }"}, {"sha": "34c91b84f28004e9784149acad79a8c4208361de", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b2db1e6163cb9860a9ec83254d30eac1c9b90e7/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2db1e6163cb9860a9ec83254d30eac1c9b90e7/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=0b2db1e6163cb9860a9ec83254d30eac1c9b90e7", "patch": "@@ -74,7 +74,7 @@ fn mir_borrowck<'a, 'tcx>(\n \n     if {\n         !tcx.has_attr(def_id, \"rustc_mir_borrowck\") && !tcx.sess.opts.borrowck_mode.use_mir()\n-            && !tcx.sess.opts.debugging_opts.nll\n+            && !tcx.sess.nll()\n     } {\n         return None;\n     }\n@@ -104,7 +104,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     // contain non-lexical lifetimes. It will have a lifetime tied\n     // to the inference context.\n     let mut mir: Mir<'tcx> = input_mir.clone();\n-    let free_regions = if !tcx.sess.opts.debugging_opts.nll {\n+    let free_regions = if !tcx.sess.nll() {\n         None\n     } else {\n         let mir = &mut mir;\n@@ -207,7 +207,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         );\n         (Some(Rc::new(regioncx)), opt_closure_req)\n     } else {\n-        assert!(!tcx.sess.opts.debugging_opts.nll);\n+        assert!(!tcx.sess.nll());\n         (None, None)\n     };\n     let flow_inits = flow_inits; // remove mut"}, {"sha": "379881302eef70918b4b964faf8c430858c38957", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0b2db1e6163cb9860a9ec83254d30eac1c9b90e7/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2db1e6163cb9860a9ec83254d30eac1c9b90e7/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=0b2db1e6163cb9860a9ec83254d30eac1c9b90e7", "patch": "@@ -186,6 +186,9 @@ declare_features! (\n     // Allows the use of rustc_* attributes; RFC 572\n     (active, rustc_attrs, \"1.0.0\", Some(29642)),\n \n+    // Allows the use of non lexical lifetimes; RFC 2094\n+    (active, nll, \"1.0.0\", Some(44928)),\n+\n     // Allows the use of #[allow_internal_unstable]. This is an\n     // attribute on macro_rules! and can't use the attribute handling\n     // below (it has to be checked before expansion possibly makes\n@@ -798,6 +801,12 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                                           libcore functions that are inlined \\\n                                                           across crates and will never be stable\",\n                                                           cfg_fn!(rustc_attrs))),\n+\n+    // RFC #2094\n+    (\"nll\", Whitelisted, Gated(Stability::Unstable,\n+                               \"nll\",\n+                               \"Non lexical lifetimes\",\n+                               cfg_fn!(nll))),\n     (\"compiler_builtins\", Whitelisted, Gated(Stability::Unstable,\n                                              \"compiler_builtins\",\n                                              \"the `#[compiler_builtins]` attribute is used to \\"}, {"sha": "f34a9cddf98e4b70c111e54fadadcc6ba6439085", "filename": "src/test/ui/feature-gate-nll.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0b2db1e6163cb9860a9ec83254d30eac1c9b90e7/src%2Ftest%2Fui%2Ffeature-gate-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2db1e6163cb9860a9ec83254d30eac1c9b90e7/src%2Ftest%2Fui%2Ffeature-gate-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-nll.rs?ref=0b2db1e6163cb9860a9ec83254d30eac1c9b90e7", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(dead_code)]\n+\n+fn main() {\n+    let mut x = 33;\n+\n+    let p = &x;\n+    x = 22; //~ ERROR cannot assign to `x` because it is borrowed [E0506]\n+}"}, {"sha": "4135462305a893930dfecd903e0d911c7b38b3ee", "filename": "src/test/ui/feature-gate-nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b2db1e6163cb9860a9ec83254d30eac1c9b90e7/src%2Ftest%2Fui%2Ffeature-gate-nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2db1e6163cb9860a9ec83254d30eac1c9b90e7/src%2Ftest%2Fui%2Ffeature-gate-nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-nll.stderr?ref=0b2db1e6163cb9860a9ec83254d30eac1c9b90e7", "patch": "@@ -0,0 +1,10 @@\n+error[E0506]: cannot assign to `x` because it is borrowed\n+  --> $DIR/feature-gate-nll.rs:17:5\n+   |\n+16 |     let p = &x;\n+   |              - borrow of `x` occurs here\n+17 |     x = 22; //~ ERROR cannot assign to `x` because it is borrowed [E0506]\n+   |     ^^^^^^ assignment to borrowed `x` occurs here\n+\n+error: aborting due to previous error\n+"}, {"sha": "2d208c8855273307e89bbca6f816feb9d37f069a", "filename": "src/test/ui/nll/capture-ref-in-struct.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b2db1e6163cb9860a9ec83254d30eac1c9b90e7/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2db1e6163cb9860a9ec83254d30eac1c9b90e7/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.rs?ref=0b2db1e6163cb9860a9ec83254d30eac1c9b90e7", "patch": "@@ -8,12 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags:-Znll -Zborrowck=mir -Znll-dump-cause\n+// compile-flags:-Zborrowck=mir -Znll-dump-cause\n \n // Test that a structure which tries to store a pointer to `y` into\n // `p` (indirectly) fails to compile.\n \n #![feature(rustc_attrs)]\n+#![feature(nll)]\n \n struct SomeStruct<'a, 'b: 'a> {\n     p: &'a mut &'b i32,"}, {"sha": "7e7487daa67a377d3647c22b32aab4d50f378e2b", "filename": "src/test/ui/nll/capture-ref-in-struct.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b2db1e6163cb9860a9ec83254d30eac1c9b90e7/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2db1e6163cb9860a9ec83254d30eac1c9b90e7/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr?ref=0b2db1e6163cb9860a9ec83254d30eac1c9b90e7", "patch": "@@ -1,13 +1,13 @@\n error[E0597]: `y` does not live long enough\n-  --> $DIR/capture-ref-in-struct.rs:32:16\n+  --> $DIR/capture-ref-in-struct.rs:33:16\n    |\n-32 |             y: &y,\n+33 |             y: &y,\n    |                ^^ borrowed value does not live long enough\n ...\n-37 |     }\n+38 |     }\n    |      - borrowed value only lives until here\n-38 | \n-39 |     deref(p);\n+39 | \n+40 |     deref(p);\n    |           - borrow later used here\n    |\n    = note: borrowed value must be valid for lifetime '_#5r..."}]}