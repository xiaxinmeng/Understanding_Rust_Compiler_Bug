{"sha": "93701569573b367aaeaf659af154f5ae0d49af2b", "node_id": "C_kwDOAAsO6NoAKDkzNzAxNTY5NTczYjM2N2FhZWFmNjU5YWYxNTRmNWFlMGQ0OWFmMmI", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-09-11T02:44:02Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-10-19T14:02:21Z"}, "message": "Deduplicate panic_fmt\n\nstd's begin_panic_fmt and core's panic_fmt are duplicates.\nMerge them to declutter code and remove a lang item.", "tree": {"sha": "6cf9bc8ba68559e4fb43739911ce9136b9a50cbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cf9bc8ba68559e4fb43739911ce9136b9a50cbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93701569573b367aaeaf659af154f5ae0d49af2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93701569573b367aaeaf659af154f5ae0d49af2b", "html_url": "https://github.com/rust-lang/rust/commit/93701569573b367aaeaf659af154f5ae0d49af2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93701569573b367aaeaf659af154f5ae0d49af2b/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "148f456cc6fd12a19f45a75b1fd758605c657d0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/148f456cc6fd12a19f45a75b1fd758605c657d0d", "html_url": "https://github.com/rust-lang/rust/commit/148f456cc6fd12a19f45a75b1fd758605c657d0d"}], "stats": {"total": 50, "additions": 15, "deletions": 35}, "files": [{"sha": "adc574ce9c9df8d6440137c1ee5a36efcd940174", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93701569573b367aaeaf659af154f5ae0d49af2b/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93701569573b367aaeaf659af154f5ae0d49af2b/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=93701569573b367aaeaf659af154f5ae0d49af2b", "patch": "@@ -51,9 +51,7 @@ impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>> {\n             let span = self.find_closest_untracked_caller_location();\n             let (file, line, col) = self.location_triple_for_span(span);\n             return Err(ConstEvalErrKind::Panic { msg, file, line, col }.into());\n-        } else if Some(def_id) == self.tcx.lang_items().panic_fmt()\n-            || Some(def_id) == self.tcx.lang_items().begin_panic_fmt()\n-        {\n+        } else if Some(def_id) == self.tcx.lang_items().panic_fmt() {\n             // For panic_fmt, call const_panic_fmt instead.\n             if let Some(const_panic_fmt) = self.tcx.lang_items().const_panic_fmt() {\n                 return Ok(Some("}, {"sha": "8fb0d995ec6c2647478b51c61f4f65f7486982a2", "filename": "compiler/rustc_const_eval/src/transform/check_consts/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93701569573b367aaeaf659af154f5ae0d49af2b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93701569573b367aaeaf659af154f5ae0d49af2b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=93701569573b367aaeaf659af154f5ae0d49af2b", "patch": "@@ -82,7 +82,6 @@ pub fn is_lang_panic_fn(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n         || Some(def_id) == tcx.lang_items().panic_display()\n         || Some(def_id) == tcx.lang_items().begin_panic_fn()\n         || Some(def_id) == tcx.lang_items().panic_fmt()\n-        || Some(def_id) == tcx.lang_items().begin_panic_fmt()\n }\n \n pub fn rustc_allow_const_fn_unstable("}, {"sha": "790509b691d38a19a6ebaa0aad2603bdbd6ea8ac", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93701569573b367aaeaf659af154f5ae0d49af2b/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93701569573b367aaeaf659af154f5ae0d49af2b/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=93701569573b367aaeaf659af154f5ae0d49af2b", "patch": "@@ -292,7 +292,6 @@ language_item_table! {\n     PanicImpl,               sym::panic_impl,          panic_impl,                 Target::Fn,             GenericRequirement::None;\n     /// libstd panic entry point. Necessary for const eval to be able to catch it\n     BeginPanic,              sym::begin_panic,         begin_panic_fn,             Target::Fn,             GenericRequirement::None;\n-    BeginPanicFmt,           sym::begin_panic_fmt,     begin_panic_fmt,            Target::Fn,             GenericRequirement::None;\n \n     ExchangeMalloc,          sym::exchange_malloc,     exchange_malloc_fn,         Target::Fn,             GenericRequirement::None;\n     BoxFree,                 sym::box_free,            box_free_fn,                Target::Fn,             GenericRequirement::Minimum(1);"}, {"sha": "21e6cdb47e1950845eb1f05ee2f2532465041021", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93701569573b367aaeaf659af154f5ae0d49af2b/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93701569573b367aaeaf659af154f5ae0d49af2b/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=93701569573b367aaeaf659af154f5ae0d49af2b", "patch": "@@ -355,7 +355,6 @@ symbols! {\n         await_macro,\n         bang,\n         begin_panic,\n-        begin_panic_fmt,\n         bench,\n         bin,\n         bind_by_move_pattern_guards,"}, {"sha": "649bc3e44ad21e9462079b2d54324d7ce93c9cde", "filename": "library/core/src/panic/panic_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93701569573b367aaeaf659af154f5ae0d49af2b/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93701569573b367aaeaf659af154f5ae0d49af2b/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs?ref=93701569573b367aaeaf659af154f5ae0d49af2b", "patch": "@@ -121,7 +121,7 @@ impl<'a> PanicInfo<'a> {\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n     pub fn location(&self) -> Option<&Location<'_>> {\n         // NOTE: If this is changed to sometimes return None,\n-        // deal with that case in std::panicking::default_hook and std::panicking::begin_panic_fmt.\n+        // deal with that case in std::panicking::default_hook and core::panicking::panic_fmt.\n         Some(&self.location)\n     }\n }"}, {"sha": "a12447acf7ec3c3221b92f563369ed033d71d71b", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/93701569573b367aaeaf659af154f5ae0d49af2b/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93701569573b367aaeaf659af154f5ae0d49af2b/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=93701569573b367aaeaf659af154f5ae0d49af2b", "patch": "@@ -76,8 +76,15 @@ fn panic_bounds_check(index: usize, len: usize) -> ! {\n     panic!(\"index out of bounds: the len is {} but the index is {}\", len, index)\n }\n \n-/// The underlying implementation of libcore's `panic!` macro when formatting is used.\n+/// The entry point for panicking with a formatted message.\n+///\n+/// This is designed to reduce the amount of code required at the call\n+/// site as much as possible (so that `panic!()` has as low an impact\n+/// on (e.g.) the inlining of other functions as possible), by moving\n+/// the actual formatting into this shared place.\n #[cold]\n+// If panic_immediate_abort, inline the abort call,\n+// otherwise avoid inlining because of it is cold path.\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[track_caller]"}, {"sha": "c0605b2f4121c098244f40dfd1cb1282d9c17b20", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93701569573b367aaeaf659af154f5ae0d49af2b/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93701569573b367aaeaf659af154f5ae0d49af2b/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=93701569573b367aaeaf659af154f5ae0d49af2b", "patch": "@@ -25,7 +25,7 @@ pub macro panic_2015 {\n         $crate::rt::panic_display(&$arg)\n     }),\n     ($fmt:expr, $($arg:tt)+) => ({\n-        $crate::rt::begin_panic_fmt(&$crate::const_format_args!($fmt, $($arg)+))\n+        $crate::rt::panic_fmt($crate::const_format_args!($fmt, $($arg)+))\n     }),\n }\n "}, {"sha": "56646b72dd54f089cdc13e379a3fcb4e846a331f", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/93701569573b367aaeaf659af154f5ae0d49af2b/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93701569573b367aaeaf659af154f5ae0d49af2b/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=93701569573b367aaeaf659af154f5ae0d49af2b", "patch": "@@ -437,31 +437,9 @@ pub fn panicking() -> bool {\n     !panic_count::count_is_zero()\n }\n \n-/// The entry point for panicking with a formatted message.\n-///\n-/// This is designed to reduce the amount of code required at the call\n-/// site as much as possible (so that `panic!()` has as low an impact\n-/// on (e.g.) the inlining of other functions as possible), by moving\n-/// the actual formatting into this shared place.\n-#[unstable(feature = \"libstd_sys_internals\", reason = \"used by the panic! macro\", issue = \"none\")]\n-#[cold]\n-// If panic_immediate_abort, inline the abort call,\n-// otherwise avoid inlining because of it is cold path.\n-#[cfg_attr(not(feature = \"panic_immediate_abort\"), track_caller)]\n-#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n-#[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n-#[cfg_attr(not(test), lang = \"begin_panic_fmt\")]\n-pub fn begin_panic_fmt(msg: &fmt::Arguments<'_>) -> ! {\n-    if cfg!(feature = \"panic_immediate_abort\") {\n-        intrinsics::abort()\n-    }\n-\n-    let info = PanicInfo::internal_constructor(Some(msg), Location::caller());\n-    begin_panic_handler(&info)\n-}\n-\n /// Entry point of panics from the libcore crate (`panic_impl` lang item).\n-#[cfg_attr(not(test), panic_handler)]\n+#[cfg(not(test))]\n+#[panic_handler]\n pub fn begin_panic_handler(info: &PanicInfo<'_>) -> ! {\n     struct PanicPayload<'a> {\n         inner: &'a fmt::Arguments<'a>,"}, {"sha": "121c214780d2d5e5ba371de3cd49c167ef4fbf6b", "filename": "library/std/src/rt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93701569573b367aaeaf659af154f5ae0d49af2b/library%2Fstd%2Fsrc%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93701569573b367aaeaf659af154f5ae0d49af2b/library%2Fstd%2Fsrc%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Frt.rs?ref=93701569573b367aaeaf659af154f5ae0d49af2b", "patch": "@@ -19,8 +19,8 @@\n use crate::ffi::CString;\n \n // Re-export some of our utilities which are expected by other crates.\n-pub use crate::panicking::{begin_panic, begin_panic_fmt, panic_count};\n-pub use core::panicking::panic_display;\n+pub use crate::panicking::{begin_panic, panic_count};\n+pub use core::panicking::{panic_display, panic_fmt};\n \n use crate::sync::Once;\n use crate::sys;"}]}