{"sha": "ab107788547c285aaaa7dced6091663a6e0eea82", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMTA3Nzg4NTQ3YzI4NWFhYWE3ZGNlZDYwOTE2NjNhNmUwZWVhODI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-25T11:16:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-25T11:16:53Z"}, "message": "Auto merge of #80226 - ThePuzzlemaker:issue-80004-fix, r=jyn514,petrochenkov\n\nHighlight edition-specific keywords correctly in code blocks, accounting for code block edition modifiers\n\nPreviously, edition-specific keywords (such as `async` and `await`) were not highlighted in code blocks, regardless of what edition was set. With this PR, this issue is fixed.\n\nNow, the following behavior happens:\n- When a code block is explicitly set to edition X, keywords from edition X are highlighted\n- When a code block is explicitly set to a version that does not contain those keywords from edition X (e.g. edition Y), keywords from edition X are **not** highlighted\n- When a code block has no explicit edition, keywords from the edition passed via `--edition` to rustdoc are highlighted\n\nFor example, a project set with `edition = \"2015\"` in its `Cargo.toml` would not highlight `async`/`await` unless the code block was set to `edition2018`. Additionally, a project set with `edition = \"2018\"` in its `Cargo.toml` *would* highlight `async`/`await` unless the code block was set to a version that did not contain those keywords (e.g. `edition2015`).\n\nThis PR fixes #80004.\n\nr? `@jyn514`", "tree": {"sha": "357b6f3d1184fd648d2cdafabca2e7dea9efa022", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/357b6f3d1184fd648d2cdafabca2e7dea9efa022"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab107788547c285aaaa7dced6091663a6e0eea82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab107788547c285aaaa7dced6091663a6e0eea82", "html_url": "https://github.com/rust-lang/rust/commit/ab107788547c285aaaa7dced6091663a6e0eea82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab107788547c285aaaa7dced6091663a6e0eea82/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "198ec340f6637a4a8cd3c0401f0dfc9d734838cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/198ec340f6637a4a8cd3c0401f0dfc9d734838cc", "html_url": "https://github.com/rust-lang/rust/commit/198ec340f6637a4a8cd3c0401f0dfc9d734838cc"}, {"sha": "db1451c7ad08e77a17c59f6755f234ea507ead92", "url": "https://api.github.com/repos/rust-lang/rust/commits/db1451c7ad08e77a17c59f6755f234ea507ead92", "html_url": "https://github.com/rust-lang/rust/commit/db1451c7ad08e77a17c59f6755f234ea507ead92"}], "stats": {"total": 36, "additions": 24, "deletions": 12}, "files": [{"sha": "d21998bb8cfe5d358016a7b6e930ee0ed6a60aaf", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ab107788547c285aaaa7dced6091663a6e0eea82/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab107788547c285aaaa7dced6091663a6e0eea82/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=ab107788547c285aaaa7dced6091663a6e0eea82", "patch": "@@ -12,7 +12,7 @@ use std::iter::Peekable;\n \n use rustc_lexer::{LiteralKind, TokenKind};\n use rustc_span::edition::Edition;\n-use rustc_span::symbol::Ident;\n+use rustc_span::symbol::Symbol;\n use rustc_span::with_default_session_globals;\n \n /// Highlights `src`, returning the HTML output.\n@@ -21,6 +21,7 @@ crate fn render_with_highlighting(\n     class: Option<&str>,\n     playground_button: Option<&str>,\n     tooltip: Option<(Option<Edition>, &str)>,\n+    edition: Edition,\n ) -> String {\n     debug!(\"highlighting: ================\\n{}\\n==============\", src);\n     let mut out = String::with_capacity(src.len());\n@@ -39,7 +40,7 @@ crate fn render_with_highlighting(\n     }\n \n     write_header(&mut out, class);\n-    write_code(&mut out, &src);\n+    write_code(&mut out, &src, edition);\n     write_footer(&mut out, playground_button);\n \n     out\n@@ -50,10 +51,10 @@ fn write_header(out: &mut String, class: Option<&str>) {\n         .unwrap()\n }\n \n-fn write_code(out: &mut String, src: &str) {\n+fn write_code(out: &mut String, src: &str, edition: Edition) {\n     // This replace allows to fix how the code source with DOS backline characters is displayed.\n     let src = src.replace(\"\\r\\n\", \"\\n\");\n-    Classifier::new(&src).highlight(&mut |highlight| {\n+    Classifier::new(&src, edition).highlight(&mut |highlight| {\n         match highlight {\n             Highlight::Token { text, class } => string(out, Escape(text), class),\n             Highlight::EnterSpan { class } => enter_span(out, class),\n@@ -144,12 +145,19 @@ struct Classifier<'a> {\n     in_attribute: bool,\n     in_macro: bool,\n     in_macro_nonterminal: bool,\n+    edition: Edition,\n }\n \n impl<'a> Classifier<'a> {\n-    fn new(src: &str) -> Classifier<'_> {\n+    fn new(src: &str, edition: Edition) -> Classifier<'_> {\n         let tokens = TokenIter { src }.peekable();\n-        Classifier { tokens, in_attribute: false, in_macro: false, in_macro_nonterminal: false }\n+        Classifier {\n+            tokens,\n+            in_attribute: false,\n+            in_macro: false,\n+            in_macro_nonterminal: false,\n+            edition,\n+        }\n     }\n \n     /// Exhausts the `Classifier` writing the output into `sink`.\n@@ -301,7 +309,7 @@ impl<'a> Classifier<'a> {\n                 \"Option\" | \"Result\" => Class::PreludeTy,\n                 \"Some\" | \"None\" | \"Ok\" | \"Err\" => Class::PreludeVal,\n                 // Keywords are also included in the identifier set.\n-                _ if Ident::from_str(text).is_reserved() => Class::KeyWord,\n+                _ if Symbol::intern(text).is_reserved(|| self.edition) => Class::KeyWord,\n                 _ if self.in_macro_nonterminal => {\n                     self.in_macro_nonterminal = false;\n                     Class::MacroNonTerminal"}, {"sha": "f97c8a7ab71484cf62235cc92b64aa2f514adb92", "filename": "src/librustdoc/html/highlight/tests.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab107788547c285aaaa7dced6091663a6e0eea82/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab107788547c285aaaa7dced6091663a6e0eea82/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs?ref=ab107788547c285aaaa7dced6091663a6e0eea82", "patch": "@@ -1,5 +1,6 @@\n use super::write_code;\n use expect_test::expect_file;\n+use rustc_span::edition::Edition;\n \n const STYLE: &str = r#\"\n <style>\n@@ -18,7 +19,7 @@ fn test_html_highlighting() {\n     let src = include_str!(\"fixtures/sample.rs\");\n     let html = {\n         let mut out = String::new();\n-        write_code(&mut out, src);\n+        write_code(&mut out, src, Edition::Edition2018);\n         format!(\"{}<pre><code>{}</code></pre>\\n\", STYLE, out)\n     };\n     expect_file![\"fixtures/sample.html\"].assert_eq(&html);\n@@ -30,6 +31,6 @@ fn test_dos_backline() {\n     println!(\\\"foo\\\");\\r\\n\\\n }\\r\\n\";\n     let mut html = String::new();\n-    write_code(&mut html, src);\n+    write_code(&mut html, src, Edition::Edition2018);\n     expect_file![\"fixtures/dos_line.html\"].assert_eq(&html);\n }"}, {"sha": "2ae28dcd0c4787e1899828e7e3b65b302960d23d", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab107788547c285aaaa7dced6091663a6e0eea82/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab107788547c285aaaa7dced6091663a6e0eea82/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=ab107788547c285aaaa7dced6091663a6e0eea82", "patch": "@@ -303,6 +303,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n             )),\n             playground_button.as_deref(),\n             tooltip,\n+            edition,\n         ));\n         Some(Event::Html(s.into()))\n     }"}, {"sha": "185df60735fd4c33fa41964a083c46128c0006f7", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab107788547c285aaaa7dced6091663a6e0eea82/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab107788547c285aaaa7dced6091663a6e0eea82/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=ab107788547c285aaaa7dced6091663a6e0eea82", "patch": "@@ -4747,6 +4747,7 @@ fn item_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Mac\n             Some(\"macro\"),\n             None,\n             None,\n+            it.source.span().edition(),\n         ))\n     });\n     document(w, cx, it, None)"}, {"sha": "ac07aeb8bc8b71d5b9c0b0a12b90d9cc40669854", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ab107788547c285aaaa7dced6091663a6e0eea82/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab107788547c285aaaa7dced6091663a6e0eea82/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=ab107788547c285aaaa7dced6091663a6e0eea82", "patch": "@@ -8,6 +8,7 @@ use crate::html::layout;\n use crate::html::render::{SharedContext, BASIC_KEYWORDS};\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_session::Session;\n+use rustc_span::edition::Edition;\n use rustc_span::source_map::FileName;\n use std::ffi::OsStr;\n use std::fs;\n@@ -132,7 +133,7 @@ impl SourceCollector<'_, '_> {\n             &self.scx.layout,\n             &page,\n             \"\",\n-            |buf: &mut _| print_src(buf, contents),\n+            |buf: &mut _| print_src(buf, contents, self.scx.edition),\n             &self.scx.style_files,\n         );\n         self.scx.fs.write(&cur, v.as_bytes())?;\n@@ -170,7 +171,7 @@ where\n \n /// Wrapper struct to render the source code of a file. This will do things like\n /// adding line numbers to the left-hand side.\n-fn print_src(buf: &mut Buffer, s: String) {\n+fn print_src(buf: &mut Buffer, s: String, edition: Edition) {\n     let lines = s.lines().count();\n     let mut cols = 0;\n     let mut tmp = lines;\n@@ -183,5 +184,5 @@ fn print_src(buf: &mut Buffer, s: String) {\n         write!(buf, \"<span id=\\\"{0}\\\">{0:1$}</span>\\n\", i, cols);\n     }\n     write!(buf, \"</pre>\");\n-    write!(buf, \"{}\", highlight::render_with_highlighting(s, None, None, None));\n+    write!(buf, \"{}\", highlight::render_with_highlighting(s, None, None, None, edition));\n }"}]}