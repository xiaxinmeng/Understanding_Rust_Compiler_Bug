{"sha": "ac6996345de2cc482cb164335336b9af1b03a320", "node_id": "C_kwDOAAsO6NoAKGFjNjk5NjM0NWRlMmNjNDgyY2IxNjQzMzUzMzZiOWFmMWIwM2EzMjA", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-03-17T11:28:31Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-03-21T14:51:25Z"}, "message": "Move pthread locks to own module.", "tree": {"sha": "ebabd5ad5f058d265343ad4f153091d8347e9590", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebabd5ad5f058d265343ad4f153091d8347e9590"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac6996345de2cc482cb164335336b9af1b03a320", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac6996345de2cc482cb164335336b9af1b03a320", "html_url": "https://github.com/rust-lang/rust/commit/ac6996345de2cc482cb164335336b9af1b03a320", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac6996345de2cc482cb164335336b9af1b03a320/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "461e8078010433ff7de2db2aaae8a3cfb0847215", "url": "https://api.github.com/repos/rust-lang/rust/commits/461e8078010433ff7de2db2aaae8a3cfb0847215", "html_url": "https://github.com/rust-lang/rust/commit/461e8078010433ff7de2db2aaae8a3cfb0847215"}], "stats": {"total": 129, "additions": 69, "deletions": 60}, "files": [{"sha": "f07a9f93b79a54a66c36768938e5f445acc4072f", "filename": "library/std/src/sys/unix/locks/mod.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac6996345de2cc482cb164335336b9af1b03a320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac6996345de2cc482cb164335336b9af1b03a320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs?ref=ac6996345de2cc482cb164335336b9af1b03a320", "patch": "@@ -0,0 +1,8 @@\n+mod pthread_condvar;\n+mod pthread_mutex;\n+mod pthread_remutex;\n+mod pthread_rwlock;\n+pub use pthread_condvar::{Condvar, MovableCondvar};\n+pub use pthread_mutex::{MovableMutex, Mutex};\n+pub use pthread_remutex::ReentrantMutex;\n+pub use pthread_rwlock::{MovableRWLock, RWLock};"}, {"sha": "099aa68706fa394f18855e8701b528ecf9478d01", "filename": "library/std/src/sys/unix/locks/pthread_condvar.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac6996345de2cc482cb164335336b9af1b03a320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac6996345de2cc482cb164335336b9af1b03a320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs?ref=ac6996345de2cc482cb164335336b9af1b03a320", "patch": "@@ -1,5 +1,5 @@\n use crate::cell::UnsafeCell;\n-use crate::sys::mutex::{self, Mutex};\n+use crate::sys::locks::{pthread_mutex, Mutex};\n use crate::time::Duration;\n \n pub struct Condvar {\n@@ -79,7 +79,7 @@ impl Condvar {\n \n     #[inline]\n     pub unsafe fn wait(&self, mutex: &Mutex) {\n-        let r = libc::pthread_cond_wait(self.inner.get(), mutex::raw(mutex));\n+        let r = libc::pthread_cond_wait(self.inner.get(), pthread_mutex::raw(mutex));\n         debug_assert_eq!(r, 0);\n     }\n \n@@ -111,7 +111,7 @@ impl Condvar {\n         let timeout =\n             sec.map(|s| libc::timespec { tv_sec: s, tv_nsec: nsec as _ }).unwrap_or(TIMESPEC_MAX);\n \n-        let r = libc::pthread_cond_timedwait(self.inner.get(), mutex::raw(mutex), &timeout);\n+        let r = libc::pthread_cond_timedwait(self.inner.get(), pthread_mutex::raw(mutex), &timeout);\n         assert!(r == libc::ETIMEDOUT || r == 0);\n         r == 0\n     }\n@@ -169,7 +169,7 @@ impl Condvar {\n             .unwrap_or(TIMESPEC_MAX);\n \n         // And wait!\n-        let r = libc::pthread_cond_timedwait(self.inner.get(), mutex::raw(mutex), &timeout);\n+        let r = libc::pthread_cond_timedwait(self.inner.get(), pthread_mutex::raw(mutex), &timeout);\n         debug_assert!(r == libc::ETIMEDOUT || r == 0);\n \n         // ETIMEDOUT is not a totally reliable method of determining timeout due", "previous_filename": "library/std/src/sys/unix/condvar.rs"}, {"sha": "09cfa2f50eced10036319ac25ae8f122c99562ce", "filename": "library/std/src/sys/unix/locks/pthread_mutex.rs", "status": "renamed", "additions": 1, "deletions": 43, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ac6996345de2cc482cb164335336b9af1b03a320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac6996345de2cc482cb164335336b9af1b03a320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_mutex.rs?ref=ac6996345de2cc482cb164335336b9af1b03a320", "patch": "@@ -90,49 +90,7 @@ impl Mutex {\n     }\n }\n \n-pub struct ReentrantMutex {\n-    inner: UnsafeCell<libc::pthread_mutex_t>,\n-}\n-\n-unsafe impl Send for ReentrantMutex {}\n-unsafe impl Sync for ReentrantMutex {}\n-\n-impl ReentrantMutex {\n-    pub const unsafe fn uninitialized() -> ReentrantMutex {\n-        ReentrantMutex { inner: UnsafeCell::new(libc::PTHREAD_MUTEX_INITIALIZER) }\n-    }\n-\n-    pub unsafe fn init(&self) {\n-        let mut attr = MaybeUninit::<libc::pthread_mutexattr_t>::uninit();\n-        cvt_nz(libc::pthread_mutexattr_init(attr.as_mut_ptr())).unwrap();\n-        let attr = PthreadMutexAttr(&mut attr);\n-        cvt_nz(libc::pthread_mutexattr_settype(attr.0.as_mut_ptr(), libc::PTHREAD_MUTEX_RECURSIVE))\n-            .unwrap();\n-        cvt_nz(libc::pthread_mutex_init(self.inner.get(), attr.0.as_ptr())).unwrap();\n-    }\n-\n-    pub unsafe fn lock(&self) {\n-        let result = libc::pthread_mutex_lock(self.inner.get());\n-        debug_assert_eq!(result, 0);\n-    }\n-\n-    #[inline]\n-    pub unsafe fn try_lock(&self) -> bool {\n-        libc::pthread_mutex_trylock(self.inner.get()) == 0\n-    }\n-\n-    pub unsafe fn unlock(&self) {\n-        let result = libc::pthread_mutex_unlock(self.inner.get());\n-        debug_assert_eq!(result, 0);\n-    }\n-\n-    pub unsafe fn destroy(&self) {\n-        let result = libc::pthread_mutex_destroy(self.inner.get());\n-        debug_assert_eq!(result, 0);\n-    }\n-}\n-\n-struct PthreadMutexAttr<'a>(&'a mut MaybeUninit<libc::pthread_mutexattr_t>);\n+pub(super) struct PthreadMutexAttr<'a>(pub &'a mut MaybeUninit<libc::pthread_mutexattr_t>);\n \n impl Drop for PthreadMutexAttr<'_> {\n     fn drop(&mut self) {", "previous_filename": "library/std/src/sys/unix/mutex.rs"}, {"sha": "b006181ee3a0d4b483d1e82af794662eb7b09dee", "filename": "library/std/src/sys/unix/locks/pthread_remutex.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ac6996345de2cc482cb164335336b9af1b03a320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_remutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac6996345de2cc482cb164335336b9af1b03a320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_remutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_remutex.rs?ref=ac6996345de2cc482cb164335336b9af1b03a320", "patch": "@@ -0,0 +1,46 @@\n+use super::pthread_mutex::PthreadMutexAttr;\n+use crate::cell::UnsafeCell;\n+use crate::mem::MaybeUninit;\n+use crate::sys::cvt_nz;\n+\n+pub struct ReentrantMutex {\n+    inner: UnsafeCell<libc::pthread_mutex_t>,\n+}\n+\n+unsafe impl Send for ReentrantMutex {}\n+unsafe impl Sync for ReentrantMutex {}\n+\n+impl ReentrantMutex {\n+    pub const unsafe fn uninitialized() -> ReentrantMutex {\n+        ReentrantMutex { inner: UnsafeCell::new(libc::PTHREAD_MUTEX_INITIALIZER) }\n+    }\n+\n+    pub unsafe fn init(&self) {\n+        let mut attr = MaybeUninit::<libc::pthread_mutexattr_t>::uninit();\n+        cvt_nz(libc::pthread_mutexattr_init(attr.as_mut_ptr())).unwrap();\n+        let attr = PthreadMutexAttr(&mut attr);\n+        cvt_nz(libc::pthread_mutexattr_settype(attr.0.as_mut_ptr(), libc::PTHREAD_MUTEX_RECURSIVE))\n+            .unwrap();\n+        cvt_nz(libc::pthread_mutex_init(self.inner.get(), attr.0.as_ptr())).unwrap();\n+    }\n+\n+    pub unsafe fn lock(&self) {\n+        let result = libc::pthread_mutex_lock(self.inner.get());\n+        debug_assert_eq!(result, 0);\n+    }\n+\n+    #[inline]\n+    pub unsafe fn try_lock(&self) -> bool {\n+        libc::pthread_mutex_trylock(self.inner.get()) == 0\n+    }\n+\n+    pub unsafe fn unlock(&self) {\n+        let result = libc::pthread_mutex_unlock(self.inner.get());\n+        debug_assert_eq!(result, 0);\n+    }\n+\n+    pub unsafe fn destroy(&self) {\n+        let result = libc::pthread_mutex_destroy(self.inner.get());\n+        debug_assert_eq!(result, 0);\n+    }\n+}"}, {"sha": "1318c5b8e3a6104d98607672b91339d62e223924", "filename": "library/std/src/sys/unix/locks/pthread_rwlock.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac6996345de2cc482cb164335336b9af1b03a320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac6996345de2cc482cb164335336b9af1b03a320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs?ref=ac6996345de2cc482cb164335336b9af1b03a320", "previous_filename": "library/std/src/sys/unix/rwlock.rs"}, {"sha": "d5250bde75e3b071f89730f4fc7d520e985a2a8e", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac6996345de2cc482cb164335336b9af1b03a320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac6996345de2cc482cb164335336b9af1b03a320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=ac6996345de2cc482cb164335336b9af1b03a320", "patch": "@@ -14,7 +14,6 @@ pub mod android;\n pub mod args;\n #[path = \"../unix/cmath.rs\"]\n pub mod cmath;\n-pub mod condvar;\n pub mod env;\n pub mod fd;\n pub mod fs;\n@@ -24,8 +23,8 @@ pub mod io;\n pub mod kernel_copy;\n #[cfg(target_os = \"l4re\")]\n mod l4re;\n+pub mod locks;\n pub mod memchr;\n-pub mod mutex;\n #[cfg(not(target_os = \"l4re\"))]\n pub mod net;\n #[cfg(target_os = \"l4re\")]\n@@ -36,7 +35,6 @@ pub mod path;\n pub mod pipe;\n pub mod process;\n pub mod rand;\n-pub mod rwlock;\n pub mod stack_overflow;\n pub mod stdio;\n pub mod thread;"}, {"sha": "67d4b1262091acba0d6cc169eea77a12c0ac2e4c", "filename": "library/std/src/sys_common/condvar.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac6996345de2cc482cb164335336b9af1b03a320/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac6996345de2cc482cb164335336b9af1b03a320/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs?ref=ac6996345de2cc482cb164335336b9af1b03a320", "patch": "@@ -1,11 +1,10 @@\n-use crate::sys::condvar as imp;\n-use crate::sys::mutex as mutex_imp;\n+use crate::sys::locks as imp;\n use crate::sys_common::mutex::MovableMutex;\n use crate::time::Duration;\n \n mod check;\n \n-type CondvarCheck = <mutex_imp::MovableMutex as check::CondvarCheck>::Check;\n+type CondvarCheck = <imp::MovableMutex as check::CondvarCheck>::Check;\n \n /// An OS-based condition variable.\n pub struct Condvar {"}, {"sha": "47aff060d6f798cf3ec70c3784ba9da62277fb77", "filename": "library/std/src/sys_common/condvar/check.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac6996345de2cc482cb164335336b9af1b03a320/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac6996345de2cc482cb164335336b9af1b03a320/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs?ref=ac6996345de2cc482cb164335336b9af1b03a320", "patch": "@@ -1,5 +1,5 @@\n use crate::sync::atomic::{AtomicUsize, Ordering};\n-use crate::sys::mutex as mutex_imp;\n+use crate::sys::locks as imp;\n use crate::sys_common::mutex::MovableMutex;\n \n pub trait CondvarCheck {\n@@ -8,7 +8,7 @@ pub trait CondvarCheck {\n \n /// For boxed mutexes, a `Condvar` will check it's only ever used with the same\n /// mutex, based on its (stable) address.\n-impl CondvarCheck for Box<mutex_imp::Mutex> {\n+impl CondvarCheck for Box<imp::Mutex> {\n     type Check = SameMutexCheck;\n }\n \n@@ -22,7 +22,7 @@ impl SameMutexCheck {\n         Self { addr: AtomicUsize::new(0) }\n     }\n     pub fn verify(&self, mutex: &MovableMutex) {\n-        let addr = mutex.raw() as *const mutex_imp::Mutex as usize;\n+        let addr = mutex.raw() as *const imp::Mutex as usize;\n         match self.addr.compare_exchange(0, addr, Ordering::SeqCst, Ordering::SeqCst) {\n             Ok(_) => {}               // Stored the address\n             Err(n) if n == addr => {} // Lost a race to store the same address\n@@ -33,7 +33,7 @@ impl SameMutexCheck {\n \n /// Unboxed mutexes may move, so `Condvar` can not require its address to stay\n /// constant.\n-impl CondvarCheck for mutex_imp::Mutex {\n+impl CondvarCheck for imp::Mutex {\n     type Check = NoCheck;\n }\n "}, {"sha": "12a09c9860501c32cc1d7fa1baf943915d31fa9f", "filename": "library/std/src/sys_common/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac6996345de2cc482cb164335336b9af1b03a320/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac6996345de2cc482cb164335336b9af1b03a320/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs?ref=ac6996345de2cc482cb164335336b9af1b03a320", "patch": "@@ -1,4 +1,4 @@\n-use crate::sys::mutex as imp;\n+use crate::sys::locks as imp;\n \n /// An OS-based mutual exclusion lock, meant for use in static variables.\n ///"}, {"sha": "801c9c28dd388a871fada0b020427bfdde9fd1bd", "filename": "library/std/src/sys_common/remutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac6996345de2cc482cb164335336b9af1b03a320/library%2Fstd%2Fsrc%2Fsys_common%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac6996345de2cc482cb164335336b9af1b03a320/library%2Fstd%2Fsrc%2Fsys_common%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fremutex.rs?ref=ac6996345de2cc482cb164335336b9af1b03a320", "patch": "@@ -5,7 +5,7 @@ use crate::marker::PhantomPinned;\n use crate::ops::Deref;\n use crate::panic::{RefUnwindSafe, UnwindSafe};\n use crate::pin::Pin;\n-use crate::sys::mutex as sys;\n+use crate::sys::locks as sys;\n \n /// A re-entrant mutual exclusion\n ///"}, {"sha": "eaee631270157c5a0d6a37b7eef961b6e98c8a23", "filename": "library/std/src/sys_common/rwlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac6996345de2cc482cb164335336b9af1b03a320/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac6996345de2cc482cb164335336b9af1b03a320/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs?ref=ac6996345de2cc482cb164335336b9af1b03a320", "patch": "@@ -1,4 +1,4 @@\n-use crate::sys::rwlock as imp;\n+use crate::sys::locks as imp;\n \n /// An OS-based reader-writer lock, meant for use in static variables.\n ///"}]}