{"sha": "9f9e9f7e52e46a029f4713b466a78268ff12c11f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmOWU5ZjdlNTJlNDZhMDI5ZjQ3MTNiNDY2YTc4MjY4ZmYxMmMxMWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-19T21:39:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-19T21:39:19Z"}, "message": "Auto merge of #6316 - ThibsG:WrongSelfConventionTraitDef, r=ebroto\n\nLint also in trait def for `wrong_self_convention`\n\nExtends `wrong_self_convention` to lint also in trait definition.\n\nBy the way, I think the `wrong_pub_self_convention` [example](https://github.com/rust-lang/rust-clippy/blob/dd826b4626c00da53f76f00f02f03556803e9cdb/clippy_lints/src/methods/mod.rs#L197) is misleading.\nOn [playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=32615ab3f6009e7e42cc3754be0ca17f), it fires `wrong_self_convention`, so the example (or the lint maybe?) needs to be reworked.\nThe difference with `wrong_self_convention` [example](https://github.com/rust-lang/rust-clippy/blob/dd826b4626c00da53f76f00f02f03556803e9cdb/clippy_lints/src/methods/mod.rs#L172) is mainly the `pub` keyword on the method `as_str`, but the lint doesn't use the function visibility as condition to choose which lint to fire (in fact it uses the visibility of the impl item).\n\nfixes: #6307\n\nchangelog: Lint `wrong_self_convention` lint in trait def also", "tree": {"sha": "008692046b037c524d67ac6cf80749b4f7236b14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/008692046b037c524d67ac6cf80749b4f7236b14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f9e9f7e52e46a029f4713b466a78268ff12c11f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f9e9f7e52e46a029f4713b466a78268ff12c11f", "html_url": "https://github.com/rust-lang/rust/commit/9f9e9f7e52e46a029f4713b466a78268ff12c11f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f9e9f7e52e46a029f4713b466a78268ff12c11f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0904f5475ada2cdf2a4c8a79f2411b82b1b8e2f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0904f5475ada2cdf2a4c8a79f2411b82b1b8e2f0", "html_url": "https://github.com/rust-lang/rust/commit/0904f5475ada2cdf2a4c8a79f2411b82b1b8e2f0"}, {"sha": "90a16e43972f8039e1f045752f04b4011a38b92f", "url": "https://api.github.com/repos/rust-lang/rust/commits/90a16e43972f8039e1f045752f04b4011a38b92f", "html_url": "https://github.com/rust-lang/rust/commit/90a16e43972f8039e1f045752f04b4011a38b92f"}], "stats": {"total": 248, "additions": 195, "deletions": 53}, "files": [{"sha": "e99fe1b97ff6498a7884a02a4507786e0cbbde87", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 64, "deletions": 33, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/9f9e9f7e52e46a029f4713b466a78268ff12c11f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f9e9f7e52e46a029f4713b466a78268ff12c11f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=9f9e9f7e52e46a029f4713b466a78268ff12c11f", "patch": "@@ -22,6 +22,7 @@ use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{sym, SymbolStr};\n+use rustc_typeck::hir_ty_to_ty;\n \n use crate::consts::{constant, Constant};\n use crate::utils::eager_or_lazy::is_lazyness_candidate;\n@@ -1623,10 +1624,15 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n         let item = cx.tcx.hir().expect_item(parent);\n         let def_id = cx.tcx.hir().local_def_id(item.hir_id);\n         let self_ty = cx.tcx.type_of(def_id);\n+\n+        // if this impl block implements a trait, lint in trait definition instead\n+        if let hir::ItemKind::Impl { of_trait: Some(_), .. } = item.kind {\n+            return;\n+        }\n+\n         if_chain! {\n             if let hir::ImplItemKind::Fn(ref sig, id) = impl_item.kind;\n             if let Some(first_arg) = iter_input_pats(&sig.decl, cx.tcx.hir().body(id)).next();\n-            if let hir::ItemKind::Impl{ of_trait: None, .. } = item.kind;\n \n             let method_def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n             let method_sig = cx.tcx.fn_sig(method_def_id);\n@@ -1668,40 +1674,17 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                     }\n                 }\n \n-                if let Some((ref conv, self_kinds)) = &CONVENTIONS\n-                    .iter()\n-                    .find(|(ref conv, _)| conv.check(&name))\n-                {\n-                    if !self_kinds.iter().any(|k| k.matches(cx, self_ty, first_arg_ty)) {\n-                        let lint = if item.vis.node.is_pub() {\n-                            WRONG_PUB_SELF_CONVENTION\n-                        } else {\n-                            WRONG_SELF_CONVENTION\n-                        };\n-\n-                        span_lint(\n-                            cx,\n-                            lint,\n-                            first_arg.pat.span,\n-                            &format!(\"methods called `{}` usually take {}; consider choosing a less ambiguous name\",\n-                                conv,\n-                                &self_kinds\n-                                    .iter()\n-                                    .map(|k| k.description())\n-                                    .collect::<Vec<_>>()\n-                                    .join(\" or \")\n-                            ),\n-                        );\n-                    }\n-                }\n+                lint_wrong_self_convention(\n+                    cx,\n+                    &name,\n+                    item.vis.node.is_pub(),\n+                    self_ty,\n+                    first_arg_ty,\n+                    first_arg.pat.span\n+                );\n             }\n         }\n \n-        // if this impl block implements a trait, lint in trait definition instead\n-        if let hir::ItemKind::Impl { of_trait: Some(_), .. } = item.kind {\n-            return;\n-        }\n-\n         if let hir::ImplItemKind::Fn(_, _) = impl_item.kind {\n             let ret_ty = return_ty(cx, impl_item.hir_id);\n \n@@ -1735,8 +1718,23 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'_>) {\n+        if in_external_macro(cx.tcx.sess, item.span) {\n+            return;\n+        }\n+\n+        if_chain! {\n+            if let TraitItemKind::Fn(ref sig, _) = item.kind;\n+            if let Some(first_arg_ty) = sig.decl.inputs.iter().next();\n+            let first_arg_span = first_arg_ty.span;\n+            let first_arg_ty = hir_ty_to_ty(cx.tcx, first_arg_ty);\n+            let self_ty = TraitRef::identity(cx.tcx, item.hir_id.owner.to_def_id()).self_ty();\n+\n+            then {\n+                lint_wrong_self_convention(cx, &item.ident.name.as_str(), false, self_ty, first_arg_ty, first_arg_span);\n+            }\n+        }\n+\n         if_chain! {\n-            if !in_external_macro(cx.tcx.sess, item.span);\n             if item.ident.name == sym::new;\n             if let TraitItemKind::Fn(_, _) = item.kind;\n             let ret_ty = return_ty(cx, item.hir_id);\n@@ -1757,6 +1755,39 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n     extract_msrv_attr!(LateContext);\n }\n \n+fn lint_wrong_self_convention<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    item_name: &str,\n+    is_pub: bool,\n+    self_ty: &'tcx TyS<'tcx>,\n+    first_arg_ty: &'tcx TyS<'tcx>,\n+    first_arg_span: Span,\n+) {\n+    let lint = if is_pub {\n+        WRONG_PUB_SELF_CONVENTION\n+    } else {\n+        WRONG_SELF_CONVENTION\n+    };\n+    if let Some((ref conv, self_kinds)) = &CONVENTIONS.iter().find(|(ref conv, _)| conv.check(item_name)) {\n+        if !self_kinds.iter().any(|k| k.matches(cx, self_ty, first_arg_ty)) {\n+            span_lint(\n+                cx,\n+                lint,\n+                first_arg_span,\n+                &format!(\n+                    \"methods called `{}` usually take {}; consider choosing a less ambiguous name\",\n+                    conv,\n+                    &self_kinds\n+                        .iter()\n+                        .map(|k| k.description())\n+                        .collect::<Vec<_>>()\n+                        .join(\" or \")\n+                ),\n+            );\n+        }\n+    }\n+}\n+\n /// Checks for the `OR_FUN_CALL` lint.\n #[allow(clippy::too_many_lines)]\n fn lint_or_fun_call<'tcx>("}, {"sha": "d6a890014e681f228a59f46550980af25be8e3c1", "filename": "tests/ui/use_self.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f9e9f7e52e46a029f4713b466a78268ff12c11f/tests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9f9e9f7e52e46a029f4713b466a78268ff12c11f/tests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.fixed?ref=9f9e9f7e52e46a029f4713b466a78268ff12c11f", "patch": "@@ -71,6 +71,7 @@ mod lifetimes {\n \n mod issue2894 {\n     trait IntoBytes {\n+        #[allow(clippy::wrong_self_convention)]\n         fn into_bytes(&self) -> Vec<u8>;\n     }\n "}, {"sha": "b04d9ce75b2a57aab483aa427f699d3efe54aa33", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f9e9f7e52e46a029f4713b466a78268ff12c11f/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f9e9f7e52e46a029f4713b466a78268ff12c11f/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=9f9e9f7e52e46a029f4713b466a78268ff12c11f", "patch": "@@ -71,6 +71,7 @@ mod lifetimes {\n \n mod issue2894 {\n     trait IntoBytes {\n+        #[allow(clippy::wrong_self_convention)]\n         fn into_bytes(&self) -> Vec<u8>;\n     }\n "}, {"sha": "80e1bfc75e80a379dac65b82a5b304d802eeefa2", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9f9e9f7e52e46a029f4713b466a78268ff12c11f/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9e9f7e52e46a029f4713b466a78268ff12c11f/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=9f9e9f7e52e46a029f4713b466a78268ff12c11f", "patch": "@@ -37,19 +37,19 @@ LL |             Foo::new()\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:89:56\n+  --> $DIR/use_self.rs:90:56\n    |\n LL |         fn bad(foos: &[Self]) -> impl Iterator<Item = &Foo> {\n    |                                                        ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:104:13\n+  --> $DIR/use_self.rs:105:13\n    |\n LL |             TS(0)\n    |             ^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:112:25\n+  --> $DIR/use_self.rs:113:25\n    |\n LL |             fn new() -> Foo {\n    |                         ^^^ help: use the applicable keyword: `Self`\n@@ -60,7 +60,7 @@ LL |         use_self_expand!(); // Should lint in local macros\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:113:17\n+  --> $DIR/use_self.rs:114:17\n    |\n LL |                 Foo {}\n    |                 ^^^ help: use the applicable keyword: `Self`\n@@ -71,91 +71,91 @@ LL |         use_self_expand!(); // Should lint in local macros\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:148:21\n+  --> $DIR/use_self.rs:149:21\n    |\n LL |         fn baz() -> Foo {\n    |                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:149:13\n+  --> $DIR/use_self.rs:150:13\n    |\n LL |             Foo {}\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:136:29\n+  --> $DIR/use_self.rs:137:29\n    |\n LL |                 fn bar() -> Bar {\n    |                             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:137:21\n+  --> $DIR/use_self.rs:138:21\n    |\n LL |                     Bar { foo: Foo {} }\n    |                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:166:21\n+  --> $DIR/use_self.rs:167:21\n    |\n LL |             let _ = Enum::B(42);\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:167:21\n+  --> $DIR/use_self.rs:168:21\n    |\n LL |             let _ = Enum::C { field: true };\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:168:21\n+  --> $DIR/use_self.rs:169:21\n    |\n LL |             let _ = Enum::A;\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:199:13\n+  --> $DIR/use_self.rs:200:13\n    |\n LL |             nested::A::fun_1();\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:200:13\n+  --> $DIR/use_self.rs:201:13\n    |\n LL |             nested::A::A;\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:202:13\n+  --> $DIR/use_self.rs:203:13\n    |\n LL |             nested::A {};\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:221:13\n+  --> $DIR/use_self.rs:222:13\n    |\n LL |             TestStruct::from_something()\n    |             ^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:235:25\n+  --> $DIR/use_self.rs:236:25\n    |\n LL |         async fn g() -> S {\n    |                         ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:236:13\n+  --> $DIR/use_self.rs:237:13\n    |\n LL |             S {}\n    |             ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:240:16\n+  --> $DIR/use_self.rs:241:16\n    |\n LL |             &p[S::A..S::B]\n    |                ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:240:22\n+  --> $DIR/use_self.rs:241:22\n    |\n LL |             &p[S::A..S::B]\n    |                      ^ help: use the applicable keyword: `Self`"}, {"sha": "5282eba74fd1872adc52f3a59086492826a80411", "filename": "tests/ui/wrong_self_convention.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/9f9e9f7e52e46a029f4713b466a78268ff12c11f/tests%2Fui%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f9e9f7e52e46a029f4713b466a78268ff12c11f/tests%2Fui%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.rs?ref=9f9e9f7e52e46a029f4713b466a78268ff12c11f", "patch": "@@ -88,3 +88,52 @@ mod issue4037 {\n         }\n     }\n }\n+\n+// Lint also in trait definition (see #6307)\n+mod issue6307 {\n+    trait T: Sized {\n+        fn as_i32(self) {}\n+        fn as_u32(&self) {}\n+        fn into_i32(&self) {}\n+        fn into_u32(self) {}\n+        fn is_i32(self) {}\n+        fn is_u32(&self) {}\n+        fn to_i32(self) {}\n+        fn to_u32(&self) {}\n+        fn from_i32(self) {}\n+        // check whether the lint can be allowed at the function level\n+        #[allow(clippy::wrong_self_convention)]\n+        fn from_cake(self) {}\n+\n+        // test for false positives\n+        fn as_(self) {}\n+        fn into_(&self) {}\n+        fn is_(self) {}\n+        fn to_(self) {}\n+        fn from_(self) {}\n+        fn to_mut(&mut self) {}\n+    }\n+\n+    trait U {\n+        fn as_i32(self);\n+        fn as_u32(&self);\n+        fn into_i32(&self);\n+        fn into_u32(self);\n+        fn is_i32(self);\n+        fn is_u32(&self);\n+        fn to_i32(self);\n+        fn to_u32(&self);\n+        fn from_i32(self);\n+        // check whether the lint can be allowed at the function level\n+        #[allow(clippy::wrong_self_convention)]\n+        fn from_cake(self);\n+\n+        // test for false positives\n+        fn as_(self);\n+        fn into_(&self);\n+        fn is_(self);\n+        fn to_(self);\n+        fn from_(self);\n+        fn to_mut(&mut self);\n+    }\n+}"}, {"sha": "86467eb0fc7371c96564b42dbaf70af108297833", "filename": "tests/ui/wrong_self_convention.stderr", "status": "modified", "additions": 61, "deletions": 1, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/9f9e9f7e52e46a029f4713b466a78268ff12c11f/tests%2Fui%2Fwrong_self_convention.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9e9f7e52e46a029f4713b466a78268ff12c11f/tests%2Fui%2Fwrong_self_convention.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.stderr?ref=9f9e9f7e52e46a029f4713b466a78268ff12c11f", "patch": "@@ -72,5 +72,65 @@ error: methods called `from_*` usually take no self; consider choosing a less am\n LL |     pub fn from_i64(self) {}\n    |                     ^^^^\n \n-error: aborting due to 12 previous errors\n+error: methods called `as_*` usually take self by reference or self by mutable reference; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:95:19\n+   |\n+LL |         fn as_i32(self) {}\n+   |                   ^^^^\n+\n+error: methods called `into_*` usually take self by value; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:97:21\n+   |\n+LL |         fn into_i32(&self) {}\n+   |                     ^^^^^\n+\n+error: methods called `is_*` usually take self by reference or no self; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:99:19\n+   |\n+LL |         fn is_i32(self) {}\n+   |                   ^^^^\n+\n+error: methods called `to_*` usually take self by reference; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:101:19\n+   |\n+LL |         fn to_i32(self) {}\n+   |                   ^^^^\n+\n+error: methods called `from_*` usually take no self; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:103:21\n+   |\n+LL |         fn from_i32(self) {}\n+   |                     ^^^^\n+\n+error: methods called `as_*` usually take self by reference or self by mutable reference; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:118:19\n+   |\n+LL |         fn as_i32(self);\n+   |                   ^^^^\n+\n+error: methods called `into_*` usually take self by value; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:120:21\n+   |\n+LL |         fn into_i32(&self);\n+   |                     ^^^^^\n+\n+error: methods called `is_*` usually take self by reference or no self; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:122:19\n+   |\n+LL |         fn is_i32(self);\n+   |                   ^^^^\n+\n+error: methods called `to_*` usually take self by reference; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:124:19\n+   |\n+LL |         fn to_i32(self);\n+   |                   ^^^^\n+\n+error: methods called `from_*` usually take no self; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:126:21\n+   |\n+LL |         fn from_i32(self);\n+   |                     ^^^^\n+\n+error: aborting due to 22 previous errors\n "}]}