{"sha": "0077d128d33543290140763ce7d84d05eb57c40a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwNzdkMTI4ZDMzNTQzMjkwMTQwNzYzY2U3ZDg0ZDA1ZWI1N2M0MGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-14T20:57:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-14T20:57:09Z"}, "message": "Auto merge of #45047 - durka:trait-alias, r=petrochenkov\n\ntrait alias infrastructure\n\nThis will be an implementation of trait aliases (RFC 1733, #41517).\n\nProgress so far:\n\n- [x] Feature gate\n- [x] Add to parser\n  - [x] `where` clauses\n    - [x] prohibit LHS type parameter bounds via AST validation https://github.com/rust-lang/rust/pull/45047#discussion_r143575575\n- [x] Add to AST and HIR\n  - [x] make a separate PathSource for trait alias contexts https://github.com/rust-lang/rust/pull/45047#discussion_r143353932\n- [x] Stub out enough of typeck and resolve to just barely not ICE\n\nPostponed:\n\n- [ ] Actually implement the alias part\n- [ ] #21903\n- [ ] #24010\n\nI need some pointers on where to start with that last one. The test currently does this:\n\n```\nerror[E0283]: type annotations required: cannot resolve `_: CD`\n  --> src/test/run-pass/trait-alias.rs:34:16\n   |\n34 |     let both = foo();\n   |                ^^^\n   |\n   = note: required by `foo`\n```", "tree": {"sha": "1d7cc06236dd24ffa7590d9c131c43dabb7b9f57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d7cc06236dd24ffa7590d9c131c43dabb7b9f57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0077d128d33543290140763ce7d84d05eb57c40a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0077d128d33543290140763ce7d84d05eb57c40a", "html_url": "https://github.com/rust-lang/rust/commit/0077d128d33543290140763ce7d84d05eb57c40a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0077d128d33543290140763ce7d84d05eb57c40a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fc7f8522bbe59189b6423295a65f337b9735a88", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fc7f8522bbe59189b6423295a65f337b9735a88", "html_url": "https://github.com/rust-lang/rust/commit/3fc7f8522bbe59189b6423295a65f337b9735a88"}, {"sha": "834674fa1d97f0e83baf99e1da5e24b82d41f63c", "url": "https://api.github.com/repos/rust-lang/rust/commits/834674fa1d97f0e83baf99e1da5e24b82d41f63c", "html_url": "https://github.com/rust-lang/rust/commit/834674fa1d97f0e83baf99e1da5e24b82d41f63c"}], "stats": {"total": 358, "additions": 323, "deletions": 35}, "files": [{"sha": "19a37b693db6f3d23264aa2473f52f97c1469d6b", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -37,6 +37,7 @@ pub enum Def {\n     Trait(DefId),\n     TyAlias(DefId),\n     TyForeign(DefId),\n+    TraitAlias(DefId),\n     AssociatedTy(DefId),\n     PrimTy(hir::PrimTy),\n     TyParam(DefId),\n@@ -155,7 +156,8 @@ impl Def {\n     pub fn def_id(&self) -> DefId {\n         match *self {\n             Def::Fn(id) | Def::Mod(id) | Def::Static(id, _) |\n-            Def::Variant(id) | Def::VariantCtor(id, ..) | Def::Enum(id) | Def::TyAlias(id) |\n+            Def::Variant(id) | Def::VariantCtor(id, ..) | Def::Enum(id) |\n+            Def::TyAlias(id) | Def::TraitAlias(id) |\n             Def::AssociatedTy(id) | Def::TyParam(id) | Def::Struct(id) | Def::StructCtor(id, ..) |\n             Def::Union(id) | Def::Trait(id) | Def::Method(id) | Def::Const(id) |\n             Def::AssociatedConst(id) | Def::Macro(id, ..) |\n@@ -186,6 +188,7 @@ impl Def {\n             Def::VariantCtor(.., CtorKind::Fictive) => \"struct variant\",\n             Def::Enum(..) => \"enum\",\n             Def::TyAlias(..) => \"type alias\",\n+            Def::TraitAlias(..) => \"trait alias\",\n             Def::AssociatedTy(..) => \"associated type\",\n             Def::Struct(..) => \"struct\",\n             Def::StructCtor(.., CtorKind::Fn) => \"tuple struct\","}, {"sha": "eacad100f10be53f3e858a9952bbc401dae95cc6", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -526,6 +526,11 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             walk_list!(visitor, visit_ty_param_bound, bounds);\n             walk_list!(visitor, visit_trait_item_ref, trait_item_refs);\n         }\n+        ItemTraitAlias(ref generics, ref bounds) => {\n+            visitor.visit_id(item.id);\n+            visitor.visit_generics(generics);\n+            walk_list!(visitor, visit_ty_param_bound, bounds);\n+        }\n     }\n     walk_list!(visitor, visit_attribute, &item.attrs);\n }"}, {"sha": "b544ea820c0f7c547e4106a4ca802a81beb1dfe0", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -1924,9 +1924,11 @@ impl<'a> LoweringContext<'a> {\n                                bounds,\n                                items)\n             }\n-            ItemKind::MacroDef(..) | ItemKind::Mac(..) => {\n-                panic!(\"Shouldn't still be around\")\n+            ItemKind::TraitAlias(ref generics, ref bounds) => {\n+                hir::ItemTraitAlias(self.lower_generics(generics),\n+                                    self.lower_bounds(bounds, ImplTraitContext::Disallowed))\n             }\n+            ItemKind::MacroDef(..) | ItemKind::Mac(..) => panic!(\"Shouldn't still be around\"),\n         }\n \n         // [1] `defaultness.has_value()` is never called for an `impl`, always `true` in order to"}, {"sha": "2978f1eb409d840e58b8edddadf3dec8588366ba", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -106,7 +106,8 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         let def_data = match i.node {\n             ItemKind::AutoImpl(..) | ItemKind::Impl(..) =>\n                 DefPathData::Impl,\n-            ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) | ItemKind::Trait(..) |\n+            ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) |\n+            ItemKind::Trait(..) | ItemKind::TraitAlias(..) |\n             ItemKind::ExternCrate(..) | ItemKind::ForeignMod(..) | ItemKind::Ty(..) =>\n                 DefPathData::TypeNs(i.ident.name.as_str()),\n             ItemKind::Mod(..) if i.ident == keywords::Invalid.ident() => {"}, {"sha": "014e57716562c8bc8fcdcd63aabcca9e421444be", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -1185,6 +1185,7 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n                 ItemStruct(..) => \"struct\",\n                 ItemUnion(..) => \"union\",\n                 ItemTrait(..) => \"trait\",\n+                ItemTraitAlias(..) => \"trait alias\",\n                 ItemImpl(..) => \"impl\",\n                 ItemAutoImpl(..) => \"default impl\",\n             };"}, {"sha": "dc44a943e4cf80ed78746e1074a62812b3984cf2", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -1888,6 +1888,8 @@ pub enum Item_ {\n     ItemUnion(VariantData, Generics),\n     /// Represents a Trait Declaration\n     ItemTrait(IsAuto, Unsafety, Generics, TyParamBounds, HirVec<TraitItemRef>),\n+    /// Represents a Trait Alias Declaration\n+    ItemTraitAlias(Generics, TyParamBounds),\n \n     /// Auto trait implementations\n     ///\n@@ -1919,6 +1921,7 @@ impl Item_ {\n             ItemStruct(..) => \"struct\",\n             ItemUnion(..) => \"union\",\n             ItemTrait(..) => \"trait\",\n+            ItemTraitAlias(..) => \"trait alias\",\n             ItemImpl(..) |\n             ItemAutoImpl(..) => \"item\",\n         }"}, {"sha": "c7bb121e901050dd1ddf8860afbbaf314c35ad09", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -747,6 +747,27 @@ impl<'a> State<'a> {\n                 }\n                 self.bclose(item.span)?;\n             }\n+            hir::ItemTraitAlias(ref generics, ref bounds) => {\n+                self.head(\"\")?;\n+                self.print_visibility(&item.vis)?;\n+                self.word_nbsp(\"trait\")?;\n+                self.print_name(item.name)?;\n+                self.print_generics(generics)?;\n+                let mut real_bounds = Vec::with_capacity(bounds.len());\n+                // FIXME(durka) this seems to be some quite outdated syntax\n+                for b in bounds.iter() {\n+                    if let TraitTyParamBound(ref ptr, hir::TraitBoundModifier::Maybe) = *b {\n+                        self.s.space()?;\n+                        self.word_space(\"for ?\")?;\n+                        self.print_trait_ref(&ptr.trait_ref)?;\n+                    } else {\n+                        real_bounds.push(b.clone());\n+                    }\n+                }\n+                self.print_bounds(\" = \", &real_bounds[..])?;\n+                self.print_where_clause(&generics.where_clause)?;\n+                self.s.word(\";\")?;\n+            }\n         }\n         self.ann.post(self, NodeItem(item))\n     }"}, {"sha": "ff5327ced8b79963d4ba2bd51d13ebed94240aa0", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -848,6 +848,7 @@ impl_stable_hash_for!(enum hir::Item_ {\n     ItemStruct(variant_data, generics),\n     ItemUnion(variant_data, generics),\n     ItemTrait(is_auto, unsafety, generics, bounds, item_refs),\n+    ItemTraitAlias(generics, bounds),\n     ItemAutoImpl(unsafety, trait_ref),\n     ItemImpl(unsafety, impl_polarity, impl_defaultness, generics, trait_ref, ty, impl_item_refs)\n });\n@@ -1004,6 +1005,7 @@ impl_stable_hash_for!(enum hir::def::Def {\n     Variant(def_id),\n     Trait(def_id),\n     TyAlias(def_id),\n+    TraitAlias(def_id),\n     AssociatedTy(def_id),\n     PrimTy(prim_ty),\n     TyParam(def_id),"}, {"sha": "27f12c2c1587efea1d60617d9019aa8c233ecdd7", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -268,7 +268,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                     hir::ItemExternCrate(_) | hir::ItemUse(..) |\n                     hir::ItemTy(..) | hir::ItemStatic(..) |\n                     hir::ItemMod(..) | hir::ItemForeignMod(..) |\n-                    hir::ItemImpl(..) | hir::ItemTrait(..) |\n+                    hir::ItemImpl(..) | hir::ItemTrait(..) | hir::ItemTraitAlias(..) |\n                     hir::ItemStruct(..) | hir::ItemEnum(..) |\n                     hir::ItemUnion(..) | hir::ItemAutoImpl(..) |\n                     hir::ItemGlobalAsm(..) => {}"}, {"sha": "e75762cbacb42641c17b4316db5be3aaa22224e5", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -469,6 +469,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             | hir::ItemStruct(_, ref generics)\n             | hir::ItemUnion(_, ref generics)\n             | hir::ItemTrait(_, _, ref generics, ..)\n+            | hir::ItemTraitAlias(ref generics, ..)\n             | hir::ItemImpl(_, _, _, ref generics, ..) => {\n                 // These kinds of items have only early bound lifetime parameters.\n                 let mut index = if let hir::ItemTrait(..) = item.node {"}, {"sha": "4e1a79d4613e739361dffc48135bcd94809df875", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -2577,6 +2577,7 @@ fn associated_item_def_ids<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           .map(|id| tcx.hir.local_def_id(id.node_id))\n                           .collect()\n         }\n+        hir::ItemTraitAlias(..) => vec![],\n         _ => span_bug!(item.span, \"associated_item_def_ids: not impl or trait\")\n     };\n     Rc::new(vec)"}, {"sha": "ded2fa01e5977b324f5a0325ee78827a21baa780", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -248,6 +248,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n                 hir::ItemStruct(..) |\n                 hir::ItemUnion(..) |\n                 hir::ItemTrait(..) |\n+                hir::ItemTraitAlias(..) |\n                 hir::ItemImpl(..) |\n                 hir::ItemAutoImpl(..) => None,\n "}, {"sha": "5e8bbabee4a9a334814817c2d77bd3cf69daaaba", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -979,6 +979,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                 EntryKind::Trait(self.lazy(&data))\n             }\n             hir::ItemExternCrate(_) |\n+            hir::ItemTraitAlias(..) |\n             hir::ItemUse(..) => bug!(\"cannot encode info for item {:?}\", item),\n         };\n \n@@ -1526,7 +1527,8 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n             hir::ItemExternCrate(..) |\n             hir::ItemUse(..) |\n             hir::ItemAutoImpl(..) |\n-            hir::ItemTy(..) => {\n+            hir::ItemTy(..) |\n+            hir::ItemTraitAlias(..) => {\n                 // no sub-item recording needed in these cases\n             }\n             hir::ItemEnum(..) => {"}, {"sha": "96c9323e7dc733a60127f190a95489b7d4a35518", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -283,6 +283,20 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     }\n                 }\n             }\n+            ItemKind::TraitAlias(Generics { ref ty_params, .. }, ..) => {\n+                for &TyParam { ref bounds, ref default, span, .. } in ty_params {\n+                    if !bounds.is_empty() {\n+                        self.err_handler().span_err(span,\n+                                                    \"type parameters on the left side of a \\\n+                                                     trait alias cannot be bounded\");\n+                    }\n+                    if !default.is_none() {\n+                        self.err_handler().span_err(span,\n+                                                    \"type parameters on the left side of a \\\n+                                                     trait alias cannot have defaults\");\n+                    }\n+                }\n+            }\n             ItemKind::Mod(_) => {\n                 // Ensure that `path` attributes on modules are recorded as used (c.f. #35584).\n                 attr::first_attr_value_str_by_name(&item.attrs, \"path\");"}, {"sha": "d41881218129f77270fffaa5f05760e2056af59c", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -158,7 +158,8 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             // Other `pub` items inherit levels from parents\n             hir::ItemConst(..) | hir::ItemEnum(..) | hir::ItemExternCrate(..) |\n             hir::ItemGlobalAsm(..) | hir::ItemFn(..) | hir::ItemMod(..) |\n-            hir::ItemStatic(..) | hir::ItemStruct(..) | hir::ItemTrait(..) |\n+            hir::ItemStatic(..) | hir::ItemStruct(..) |\n+            hir::ItemTrait(..) | hir::ItemTraitAlias(..) |\n             hir::ItemTy(..) | hir::ItemUnion(..) | hir::ItemUse(..) => {\n                 if item.vis == hir::Public { self.prev_level } else { None }\n             }\n@@ -212,7 +213,7 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n                 }\n             }\n             hir::ItemUse(..) | hir::ItemStatic(..) | hir::ItemConst(..) |\n-            hir::ItemGlobalAsm(..) | hir::ItemTy(..) | hir::ItemMod(..) |\n+            hir::ItemGlobalAsm(..) | hir::ItemTy(..) | hir::ItemMod(..) | hir::ItemTraitAlias(..) |\n             hir::ItemFn(..) | hir::ItemExternCrate(..) | hir::ItemAutoImpl(..) => {}\n         }\n \n@@ -252,6 +253,11 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n                     }\n                 }\n             }\n+            hir::ItemTraitAlias(..) => {\n+                if item_level.is_some() {\n+                    self.reach(item.id).generics().predicates();\n+                }\n+            }\n             // Visit everything except for private impl items\n             hir::ItemImpl(.., ref trait_ref, _, ref impl_item_refs) => {\n                 if item_level.is_some() {\n@@ -1498,6 +1504,9 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n                     }\n                 }\n             }\n+            hir::ItemTraitAlias(..) => {\n+                self.check(item.id, item_visibility).generics().predicates();\n+            }\n             hir::ItemEnum(ref def, _) => {\n                 self.check(item.id, item_visibility).generics().predicates();\n "}, {"sha": "3b20c1e74cd39216753de979076e42ac475cdfa0", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -344,6 +344,11 @@ impl<'a> Resolver<'a> {\n                 }\n             }\n \n+            ItemKind::TraitAlias(..) => {\n+                let def = Def::TraitAlias(self.definitions.local_def_id(item.id));\n+                self.define(parent, ident, TypeNS, (def, vis, sp, expansion));\n+            }\n+\n             // These items live in both the type and value namespaces.\n             ItemKind::Struct(ref struct_def, _) => {\n                 // Define a name in the type namespace.\n@@ -411,6 +416,7 @@ impl<'a> Resolver<'a> {\n                 self.define(parent, ident, TypeNS, (module, vis, sp, expansion));\n                 self.current_module = module;\n             }\n+\n             ItemKind::MacroDef(..) | ItemKind::Mac(_) => unreachable!(),\n         }\n     }"}, {"sha": "c42ac7aaa937ccb9cada59021906d262adbe67f1", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -390,12 +390,18 @@ impl PatternSource {\n     }\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+enum AliasPossibility {\n+    No,\n+    Maybe,\n+}\n+\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n enum PathSource<'a> {\n     // Type paths `Path`.\n     Type,\n     // Trait paths in bounds or impls.\n-    Trait,\n+    Trait(AliasPossibility),\n     // Expression paths `path`, with optional parent context.\n     Expr(Option<&'a Expr>),\n     // Paths in path patterns `Path`.\n@@ -415,7 +421,7 @@ enum PathSource<'a> {\n impl<'a> PathSource<'a> {\n     fn namespace(self) -> Namespace {\n         match self {\n-            PathSource::Type | PathSource::Trait | PathSource::Struct |\n+            PathSource::Type | PathSource::Trait(_) | PathSource::Struct |\n             PathSource::Visibility | PathSource::ImportPrefix => TypeNS,\n             PathSource::Expr(..) | PathSource::Pat | PathSource::TupleStruct => ValueNS,\n             PathSource::TraitItem(ns) => ns,\n@@ -427,23 +433,23 @@ impl<'a> PathSource<'a> {\n             PathSource::Visibility | PathSource::ImportPrefix => true,\n             PathSource::Type | PathSource::Expr(..) | PathSource::Pat |\n             PathSource::Struct | PathSource::TupleStruct |\n-            PathSource::Trait | PathSource::TraitItem(..) => false,\n+            PathSource::Trait(_) | PathSource::TraitItem(..) => false,\n         }\n     }\n \n     fn defer_to_typeck(self) -> bool {\n         match self {\n             PathSource::Type | PathSource::Expr(..) | PathSource::Pat |\n             PathSource::Struct | PathSource::TupleStruct => true,\n-            PathSource::Trait | PathSource::TraitItem(..) |\n+            PathSource::Trait(_) | PathSource::TraitItem(..) |\n             PathSource::Visibility | PathSource::ImportPrefix => false,\n         }\n     }\n \n     fn descr_expected(self) -> &'static str {\n         match self {\n             PathSource::Type => \"type\",\n-            PathSource::Trait => \"trait\",\n+            PathSource::Trait(_) => \"trait\",\n             PathSource::Pat => \"unit struct/variant or constant\",\n             PathSource::Struct => \"struct, variant or union type\",\n             PathSource::TupleStruct => \"tuple struct/variant\",\n@@ -472,10 +478,15 @@ impl<'a> PathSource<'a> {\n                 Def::TyForeign(..) => true,\n                 _ => false,\n             },\n-            PathSource::Trait => match def {\n+            PathSource::Trait(AliasPossibility::No) => match def {\n                 Def::Trait(..) => true,\n                 _ => false,\n             },\n+            PathSource::Trait(AliasPossibility::Maybe) => match def {\n+                Def::Trait(..) => true,\n+                Def::TraitAlias(..) => true,\n+                _ => false,\n+            },\n             PathSource::Expr(..) => match def {\n                 Def::StructCtor(_, CtorKind::Const) | Def::StructCtor(_, CtorKind::Fn) |\n                 Def::VariantCtor(_, CtorKind::Const) | Def::VariantCtor(_, CtorKind::Fn) |\n@@ -530,8 +541,8 @@ impl<'a> PathSource<'a> {\n         __diagnostic_used!(E0577);\n         __diagnostic_used!(E0578);\n         match (self, has_unexpected_resolution) {\n-            (PathSource::Trait, true) => \"E0404\",\n-            (PathSource::Trait, false) => \"E0405\",\n+            (PathSource::Trait(_), true) => \"E0404\",\n+            (PathSource::Trait(_), false) => \"E0405\",\n             (PathSource::Type, true) => \"E0573\",\n             (PathSource::Type, false) => \"E0412\",\n             (PathSource::Struct, true) => \"E0574\",\n@@ -693,7 +704,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n                             tref: &'tcx ast::PolyTraitRef,\n                             m: &'tcx ast::TraitBoundModifier) {\n         self.smart_resolve_path(tref.trait_ref.ref_id, None,\n-                                &tref.trait_ref.path, PathSource::Trait);\n+                                &tref.trait_ref.path, PathSource::Trait(AliasPossibility::Maybe));\n         visit::walk_poly_trait_ref(self, tref, m);\n     }\n     fn visit_variant(&mut self,\n@@ -1935,6 +1946,17 @@ impl<'a> Resolver<'a> {\n                 });\n             }\n \n+            ItemKind::TraitAlias(ref generics, ref bounds) => {\n+                // Create a new rib for the trait-wide type parameters.\n+                self.with_type_parameter_rib(HasTypeParameters(generics, ItemRibKind), |this| {\n+                    let local_def_id = this.definitions.local_def_id(item.id);\n+                    this.with_self_rib(Def::SelfTy(Some(local_def_id), None), |this| {\n+                        this.visit_generics(generics);\n+                        walk_list!(this, visit_ty_param_bound, bounds);\n+                    });\n+                });\n+            }\n+\n             ItemKind::Mod(_) | ItemKind::ForeignMod(_) => {\n                 self.with_scope(item.id, |this| {\n                     visit::walk_item(this, item);\n@@ -2083,7 +2105,7 @@ impl<'a> Resolver<'a> {\n                                                        &path,\n                                                        trait_ref.path.span,\n                                                        trait_ref.path.segments.last().unwrap().span,\n-                                                       PathSource::Trait)\n+                                                       PathSource::Trait(AliasPossibility::No))\n                 .base_def();\n             if def != Def::Err {\n                 new_id = Some(def.def_id());\n@@ -2635,7 +2657,7 @@ impl<'a> Resolver<'a> {\n                         err.span_label(span, format!(\"did you mean `{}!(...)`?\", path_str));\n                         return (err, candidates);\n                     }\n-                    (Def::TyAlias(..), PathSource::Trait) => {\n+                    (Def::TyAlias(..), PathSource::Trait(_)) => {\n                         err.span_label(span, \"type aliases cannot be used for traits\");\n                         return (err, candidates);\n                     }"}, {"sha": "fe6ad92ad00b2fc00072ad3e888ab3e29c07d5b9", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -285,6 +285,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n             HirDef::Enum(..) |\n             HirDef::TyAlias(..) |\n             HirDef::TyForeign(..) |\n+            HirDef::TraitAlias(..) |\n             HirDef::Trait(_) => {\n                 let span = self.span_from_span(sub_span.expect(\"No span found for type ref\"));\n                 self.dumper.dump_ref(Ref {"}, {"sha": "97f77b20f8114b90be10040c51d59866bda1b57b", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -721,6 +721,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             HirDef::Enum(def_id) |\n             HirDef::TyAlias(def_id) |\n             HirDef::TyForeign(def_id) |\n+            HirDef::TraitAlias(def_id) |\n             HirDef::AssociatedTy(def_id) |\n             HirDef::Trait(def_id) |\n             HirDef::TyParam(def_id) => {"}, {"sha": "11d17e0227fdf867a366364f82316e788f31e955", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -487,6 +487,25 @@ impl Sig for ast::Item {\n \n                 Ok(sig)\n             }\n+            ast::ItemKind::TraitAlias(ref generics, ref bounds) => {\n+                let mut text = String::new();\n+                text.push_str(\"trait \");\n+                let mut sig = name_and_generics(text,\n+                                                offset,\n+                                                generics,\n+                                                self.id,\n+                                                self.ident,\n+                                                scx)?;\n+\n+                if !bounds.is_empty() {\n+                    sig.text.push_str(\" = \");\n+                    sig.text.push_str(&pprust::bounds_to_string(bounds));\n+                }\n+                // FIXME where clause\n+                sig.text.push_str(\";\");\n+\n+                Ok(sig)\n+            }\n             ast::ItemKind::AutoImpl(unsafety, ref trait_ref) => {\n                 let mut text = String::new();\n                 if unsafety == ast::Unsafety::Unsafe {"}, {"sha": "56b1a0238a1a673b4168aa0511bb292359809ca2", "filename": "src/librustc_trans_utils/collector.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc_trans_utils%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc_trans_utils%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Fcollector.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -894,6 +894,7 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n             hir::ItemTy(..)          |\n             hir::ItemAutoImpl(..) |\n             hir::ItemTrait(..)       |\n+            hir::ItemTraitAlias(..)  |\n             hir::ItemMod(..)         => {\n                 // Nothing to do, just keep recursing...\n             }"}, {"sha": "6b37a30cb82d84e9058c40e1021cb0a50ecba892", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -336,6 +336,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         let path = &trait_ref.path;\n         match path.def {\n             Def::Trait(trait_def_id) => trait_def_id,\n+            Def::TraitAlias(alias_def_id) => alias_def_id,\n             Def::Err => {\n                 self.tcx().sess.fatal(\"cannot continue compilation due to previous error\");\n             }"}, {"sha": "3d4d8e65f699d62401c5d19ec903d45dd091cee8", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -441,6 +441,10 @@ fn convert_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_id: ast::NodeId) {\n             tcx.at(it.span).super_predicates_of(def_id);\n             tcx.predicates_of(def_id);\n         },\n+        hir::ItemTraitAlias(..) => {\n+            span_err!(tcx.sess, it.span, E0645,\n+                      \"trait aliases are not yet implemented (see issue #41517)\");\n+        },\n         hir::ItemStruct(ref struct_def, _) |\n         hir::ItemUnion(ref struct_def, _) => {\n             tcx.generics_of(def_id);\n@@ -672,6 +676,7 @@ fn super_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let (generics, bounds) = match item.node {\n         hir::ItemTrait(.., ref generics, ref supertraits, _) => (generics, supertraits),\n+        hir::ItemTraitAlias(ref generics, ref supertraits) => (generics, supertraits),\n         _ => span_bug!(item.span,\n                        \"super_predicates invoked on non-trait\"),\n     };\n@@ -715,6 +720,7 @@ fn trait_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let unsafety = match item.node {\n         hir::ItemTrait(_, unsafety, ..) => unsafety,\n+        hir::ItemTraitAlias(..) => hir::Unsafety::Normal,\n         _ => span_bug!(item.span, \"trait_def_of_item invoked on non-trait\"),\n     };\n \n@@ -902,7 +908,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     (generics, None)\n                 }\n \n-                ItemTrait(_, _, ref generics, ..) => {\n+                ItemTrait(_, _, ref generics, ..) | ItemTraitAlias(ref generics, ..) => {\n                     // Add in the self type parameter.\n                     //\n                     // Something of a hack: use the node id for the trait, also as\n@@ -1132,7 +1138,7 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     tcx.mk_adt(def, substs)\n                 }\n                 ItemAutoImpl(..) |\n-                ItemTrait(..) |\n+                ItemTrait(..) | ItemTraitAlias(..) |\n                 ItemMod(..) |\n                 ItemForeignMod(..) |\n                 ItemGlobalAsm(..) |"}, {"sha": "770d0cd4f1fc4997daa6f01ccc64906f85c7323a", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -4721,4 +4721,5 @@ register_diagnostics! {\n     E0632, // cannot provide explicit type parameters when `impl Trait` is used in\n            // argument position.\n     E0641, // cannot cast to/from a pointer with an unknown kind\n+    E0645, // trait aliases not finished\n }"}, {"sha": "be78935cadfbb1897c12a3f4a54cbe5db364ca7a", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -512,6 +512,9 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 };\n                 om.traits.push(t);\n             },\n+            hir::ItemTraitAlias(..) => {\n+                unimplemented!(\"trait objects are not yet implemented\")\n+            },\n \n             hir::ItemImpl(unsafety,\n                           polarity,"}, {"sha": "0d289dbd46b5b596efffd533c0562cfce228a796", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -1929,6 +1929,10 @@ pub enum ItemKind {\n     ///\n     /// E.g. `trait Foo { .. }`, `trait Foo<T> { .. }` or `auto trait Foo {}`\n     Trait(IsAuto, Unsafety, Generics, TyParamBounds, Vec<TraitItem>),\n+    /// Trait alias\n+    ///\n+    /// E.g. `trait Foo = Bar + Quux;`\n+    TraitAlias(Generics, TyParamBounds),\n     /// Auto trait implementation.\n     ///\n     /// E.g. `impl Trait for .. {}` or `impl<T> Trait<T> for .. {}`\n@@ -1968,6 +1972,7 @@ impl ItemKind {\n             ItemKind::Struct(..) => \"struct\",\n             ItemKind::Union(..) => \"union\",\n             ItemKind::Trait(..) => \"trait\",\n+            ItemKind::TraitAlias(..) => \"trait alias\",\n             ItemKind::Mac(..) |\n             ItemKind::MacroDef(..) |\n             ItemKind::Impl(..) |"}, {"sha": "ba534676324a97fa2ba8e9b47e26379a8203dbb1", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -368,6 +368,8 @@ declare_features! (\n     // Generators\n     (active, generators, \"1.21.0\", None),\n \n+    // Trait aliases\n+    (active, trait_alias, \"1.24.0\", Some(41517)),\n \n     // global allocators and their internals\n     (active, global_allocator, \"1.20.0\", None),\n@@ -1406,6 +1408,12 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 }\n             }\n \n+            ast::ItemKind::TraitAlias(..) => {\n+                gate_feature_post!(&self, trait_alias,\n+                                   i.span,\n+                                   \"trait aliases are not yet fully implemented\");\n+            }\n+\n             ast::ItemKind::AutoImpl(..) => {\n                 gate_feature_post!(&self, optin_builtin_traits,\n                                    i.span,"}, {"sha": "6f973e2bcfaef918da6388e0f6bfc592887e57b3", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -921,6 +921,9 @@ pub fn noop_fold_item_kind<T: Folder>(i: ItemKind, folder: &mut T) -> ItemKind {\n             folder.fold_bounds(bounds),\n             items.move_flat_map(|item| folder.fold_trait_item(item)),\n         ),\n+        ItemKind::TraitAlias(generics, bounds) => ItemKind::TraitAlias(\n+            folder.fold_generics(generics),\n+            folder.fold_bounds(bounds)),\n         ItemKind::Mac(m) => ItemKind::Mac(folder.fold_mac(m)),\n         ItemKind::MacroDef(def) => ItemKind::MacroDef(folder.fold_macro_def(def)),\n     }"}, {"sha": "ec77d85f030eb9c02177e823c3335762b3ef6b2e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -5182,7 +5182,7 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    /// Parse trait Foo { ... }\n+    /// Parse `trait Foo { ... }` or `trait Foo = Bar;`\n     fn parse_item_trait(&mut self, is_auto: IsAuto, unsafety: Unsafety) -> PResult<'a, ItemInfo> {\n         let ident = self.parse_ident()?;\n         let mut tps = self.parse_generics()?;\n@@ -5194,23 +5194,34 @@ impl<'a> Parser<'a> {\n             Vec::new()\n         };\n \n-        tps.where_clause = self.parse_where_clause()?;\n-\n-        self.expect(&token::OpenDelim(token::Brace))?;\n-        let mut trait_items = vec![];\n-        while !self.eat(&token::CloseDelim(token::Brace)) {\n-            let mut at_end = false;\n-            match self.parse_trait_item(&mut at_end) {\n-                Ok(item) => trait_items.push(item),\n-                Err(mut e) => {\n-                    e.emit();\n-                    if !at_end {\n-                        self.recover_stmt_(SemiColonMode::Break, BlockMode::Break);\n+        if self.eat(&token::Eq) {\n+            // it's a trait alias\n+            let bounds = self.parse_ty_param_bounds()?;\n+            tps.where_clause = self.parse_where_clause()?;\n+            self.expect(&token::Semi)?;\n+            if unsafety != Unsafety::Normal {\n+                self.span_err(self.prev_span, \"trait aliases cannot be unsafe\");\n+            }\n+            Ok((ident, ItemKind::TraitAlias(tps, bounds), None))\n+        } else {\n+            // it's a normal trait\n+            tps.where_clause = self.parse_where_clause()?;\n+            self.expect(&token::OpenDelim(token::Brace))?;\n+            let mut trait_items = vec![];\n+            while !self.eat(&token::CloseDelim(token::Brace)) {\n+                let mut at_end = false;\n+                match self.parse_trait_item(&mut at_end) {\n+                    Ok(item) => trait_items.push(item),\n+                    Err(mut e) => {\n+                        e.emit();\n+                        if !at_end {\n+                            self.recover_stmt_(SemiColonMode::Break, BlockMode::Break);\n+                        }\n                     }\n                 }\n             }\n+            Ok((ident, ItemKind::Trait(is_auto, unsafety, tps, bounds, trait_items), None))\n         }\n-        Ok((ident, ItemKind::Trait(is_auto, unsafety, tps, bounds, trait_items), None))\n     }\n \n     /// Parses items implementations variants"}, {"sha": "e9386e5187ff0a20c942a35306dc5cf4991601fb", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -1381,6 +1381,27 @@ impl<'a> State<'a> {\n                 }\n                 self.bclose(item.span)?;\n             }\n+            ast::ItemKind::TraitAlias(ref generics, ref bounds) => {\n+                self.head(\"\")?;\n+                self.print_visibility(&item.vis)?;\n+                self.word_nbsp(\"trait\")?;\n+                self.print_ident(item.ident)?;\n+                self.print_generics(generics)?;\n+                let mut real_bounds = Vec::with_capacity(bounds.len());\n+                // FIXME(durka) this seems to be some quite outdated syntax\n+                for b in bounds.iter() {\n+                    if let TraitTyParamBound(ref ptr, ast::TraitBoundModifier::Maybe) = *b {\n+                        self.s.space()?;\n+                        self.word_space(\"for ?\")?;\n+                        self.print_trait_ref(&ptr.trait_ref)?;\n+                    } else {\n+                        real_bounds.push(b.clone());\n+                    }\n+                }\n+                self.print_bounds(\" = \", &real_bounds[..])?;\n+                self.print_where_clause(&generics.where_clause)?;\n+                self.s.word(\";\")?;\n+            }\n             ast::ItemKind::Mac(codemap::Spanned { ref node, .. }) => {\n                 self.print_path(&node.path, false, 0, false)?;\n                 self.s.word(\"! \")?;"}, {"sha": "9266cc280974df503c0353d1730e6cd65a124ca4", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -291,6 +291,10 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             walk_list!(visitor, visit_ty_param_bound, bounds);\n             walk_list!(visitor, visit_trait_item, methods);\n         }\n+        ItemKind::TraitAlias(ref generics, ref bounds) => {\n+            visitor.visit_generics(generics);\n+            walk_list!(visitor, visit_ty_param_bound, bounds);\n+        }\n         ItemKind::Mac(ref mac) => visitor.visit_mac(mac),\n         ItemKind::MacroDef(ref ts) => visitor.visit_mac_def(ts, item.id),\n     }"}, {"sha": "7aca227a76c484b3af95ef7659614b23b4576d84", "filename": "src/test/compile-fail/trait-alias.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Ftest%2Fcompile-fail%2Ftrait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Ftest%2Fcompile-fail%2Ftrait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-alias.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// gate-test-trait_alias\n+\n+trait Alias1<T> = Default where T: Clone; // ok\n+    //~^ERROR trait aliases are not yet fully implemented\n+trait Alias2<T: Clone = ()> = Default;\n+    //~^ERROR type parameters on the left side of a trait alias cannot be bounded\n+    //~^^ERROR type parameters on the left side of a trait alias cannot have defaults\n+    //~^^^ERROR trait aliases are not yet fully implemented\n+\n+impl Alias1 { //~ERROR expected type, found trait alias\n+}\n+\n+impl Alias1 for () { //~ERROR expected trait, found trait alias\n+}\n+\n+fn main() {}\n+"}, {"sha": "9ea211b4d7d69a7f7c1cae1d8c71dc1c4e7d77c7", "filename": "src/test/ui/trait-alias.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Ftest%2Fui%2Ftrait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Ftest%2Fui%2Ftrait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-alias.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(trait_alias)]\n+\n+trait SimpleAlias = Default; //~ERROR E0645\n+trait GenericAlias<T> = Iterator<Item=T>; //~ERROR E0645\n+trait Partial<T> = IntoIterator<Item=T>; //~ERROR E0645\n+\n+trait Things<T> {}\n+trait Romeo {}\n+struct The<T>(T);\n+struct Fore<T>(T);\n+impl<T, U> Things<T> for The<U> {}\n+impl<T> Romeo for Fore<T> {}\n+\n+trait WithWhere<Art, Thou> = Romeo + Romeo where Fore<(Art, Thou)>: Romeo; //~ERROR E0645\n+trait BareWhere<Wild, Are> = where The<Wild>: Things<Are>; //~ERROR E0645\n+\n+trait CD = Clone + Default; //~ERROR E0645\n+\n+fn foo<T: CD>() -> (T, T) {\n+    let one = T::default();\n+    let two = one.clone();\n+    (one, two)\n+}\n+\n+fn main() {\n+    let both = foo();\n+    assert_eq!(both.0, 0);\n+    assert_eq!(both.1, 0);\n+    let both: (i32, i32) = foo();\n+    assert_eq!(both.0, 0);\n+    assert_eq!(both.1, 0);\n+}\n+"}, {"sha": "ad299dc84145c68174feeba470e971d388f99cf8", "filename": "src/test/ui/trait-alias.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Ftest%2Fui%2Ftrait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Ftest%2Fui%2Ftrait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-alias.stderr?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -0,0 +1,38 @@\n+error[E0645]: trait aliases are not yet implemented (see issue #41517)\n+  --> $DIR/trait-alias.rs:13:1\n+   |\n+13 | trait SimpleAlias = Default; //~ERROR E0645\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0645]: trait aliases are not yet implemented (see issue #41517)\n+  --> $DIR/trait-alias.rs:14:1\n+   |\n+14 | trait GenericAlias<T> = Iterator<Item=T>; //~ERROR E0645\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0645]: trait aliases are not yet implemented (see issue #41517)\n+  --> $DIR/trait-alias.rs:15:1\n+   |\n+15 | trait Partial<T> = IntoIterator<Item=T>; //~ERROR E0645\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0645]: trait aliases are not yet implemented (see issue #41517)\n+  --> $DIR/trait-alias.rs:24:1\n+   |\n+24 | trait WithWhere<Art, Thou> = Romeo + Romeo where Fore<(Art, Thou)>: Romeo; //~ERROR E0645\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0645]: trait aliases are not yet implemented (see issue #41517)\n+  --> $DIR/trait-alias.rs:25:1\n+   |\n+25 | trait BareWhere<Wild, Are> = where The<Wild>: Things<Are>; //~ERROR E0645\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0645]: trait aliases are not yet implemented (see issue #41517)\n+  --> $DIR/trait-alias.rs:27:1\n+   |\n+27 | trait CD = Clone + Default; //~ERROR E0645\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "c7a279e947734c6352e610eb6621c1bd4da18df2", "filename": "src/tools/toolstate.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Ftools%2Ftoolstate.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Ftools%2Ftoolstate.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftoolstate.toml?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -32,4 +32,5 @@ clippy = \"Testing\"\n rls = \"Broken\"\n \n # ping @nrc\n+# when breaking rustfmt, always break rls as well\n rustfmt = \"Broken\""}]}