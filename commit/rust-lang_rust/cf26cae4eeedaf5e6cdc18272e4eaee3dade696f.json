{"sha": "cf26cae4eeedaf5e6cdc18272e4eaee3dade696f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMjZjYWU0ZWVlZGFmNWU2Y2RjMTgyNzJlNGVhZWUzZGFkZTY5NmY=", "commit": {"author": {"name": "Andrea Pretto", "email": "eulerdisk@gmail.com", "date": "2016-10-03T20:59:16Z"}, "committer": {"name": "Andrea Pretto", "email": "eulerdisk@gmail.com", "date": "2016-10-03T20:59:16Z"}, "message": "Test Case for Incr. Comp. Hash for traits #36681.", "tree": {"sha": "5c54a871665a4c79e23dae43ca2cc13143b6f192", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c54a871665a4c79e23dae43ca2cc13143b6f192"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf26cae4eeedaf5e6cdc18272e4eaee3dade696f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf26cae4eeedaf5e6cdc18272e4eaee3dade696f", "html_url": "https://github.com/rust-lang/rust/commit/cf26cae4eeedaf5e6cdc18272e4eaee3dade696f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf26cae4eeedaf5e6cdc18272e4eaee3dade696f/comments", "author": {"login": "eulerdisk", "id": 10089822, "node_id": "MDQ6VXNlcjEwMDg5ODIy", "avatar_url": "https://avatars.githubusercontent.com/u/10089822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eulerdisk", "html_url": "https://github.com/eulerdisk", "followers_url": "https://api.github.com/users/eulerdisk/followers", "following_url": "https://api.github.com/users/eulerdisk/following{/other_user}", "gists_url": "https://api.github.com/users/eulerdisk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eulerdisk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eulerdisk/subscriptions", "organizations_url": "https://api.github.com/users/eulerdisk/orgs", "repos_url": "https://api.github.com/users/eulerdisk/repos", "events_url": "https://api.github.com/users/eulerdisk/events{/privacy}", "received_events_url": "https://api.github.com/users/eulerdisk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eulerdisk", "id": 10089822, "node_id": "MDQ6VXNlcjEwMDg5ODIy", "avatar_url": "https://avatars.githubusercontent.com/u/10089822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eulerdisk", "html_url": "https://github.com/eulerdisk", "followers_url": "https://api.github.com/users/eulerdisk/followers", "following_url": "https://api.github.com/users/eulerdisk/following{/other_user}", "gists_url": "https://api.github.com/users/eulerdisk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eulerdisk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eulerdisk/subscriptions", "organizations_url": "https://api.github.com/users/eulerdisk/orgs", "repos_url": "https://api.github.com/users/eulerdisk/repos", "events_url": "https://api.github.com/users/eulerdisk/events{/privacy}", "received_events_url": "https://api.github.com/users/eulerdisk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff713464e6530fab2e13d0965929d8189c59ae56", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff713464e6530fab2e13d0965929d8189c59ae56", "html_url": "https://github.com/rust-lang/rust/commit/ff713464e6530fab2e13d0965929d8189c59ae56"}], "stats": {"total": 1117, "additions": 1117, "deletions": 0}, "files": [{"sha": "a92e6a126924881a26a00ac728937c3a5a58c555", "filename": "src/test/incremental/hashes/trait_defs.rs", "status": "added", "additions": 1117, "deletions": 0, "changes": 1117, "blob_url": "https://github.com/rust-lang/rust/blob/cf26cae4eeedaf5e6cdc18272e4eaee3dade696f/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf26cae4eeedaf5e6cdc18272e4eaee3dade696f/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs?ref=cf26cae4eeedaf5e6cdc18272e4eaee3dade696f", "patch": "@@ -0,0 +1,1117 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for trait definitions.\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// We also test the ICH for trait definitions exported in metadata. Same as\n+// above, we want to make sure that the change between rev1 and rev2 also\n+// results in a change of the ICH for the trait's metadata, and that it stays\n+// the same between rev2 and rev3.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+#![crate_type=\"rlib\"]\n+#![feature(associated_type_defaults)]\n+#![feature(intrinsics)]\n+#![feature(associated_consts)]\n+\n+\n+// Change trait visibility --------------------------------------------------------\n+#[cfg(cfail1)]\n+trait TraitVisibility { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub trait TraitVisibility { }\n+\n+\n+\n+// Change trait unsafety ----------------------------------------------------------\n+// FIXME: this should work but doesn't yet.\n+// #[cfg(cfail1)]\n+// trait TraitUnsafety { }\n+\n+// #[cfg(not(cfail1))]\n+// #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+// #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+// #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+// #[rustc_metadata_clean(cfg=\"cfail3\")]\n+// unsafe trait TraitUnsafety { }\n+\n+\n+\n+// Add method ---------------------------------------------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddMethod {\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub trait TraitAddMethod {\n+    fn method();\n+}\n+\n+\n+\n+// Change name of method ----------------------------------------------------------\n+#[cfg(cfail1)]\n+trait TraitChangeMethodName {\n+    fn method();\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitChangeMethodName {\n+    fn methodChanged();\n+}\n+\n+\n+\n+// Add return type to method ------------------------------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddReturnType {\n+    fn method();\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddReturnType {\n+    fn method() -> u32;\n+}\n+\n+\n+\n+// Change return type of method ---------------------------------------------------\n+#[cfg(cfail1)]\n+trait TraitChangeReturnType {\n+    fn method() -> u32;\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitChangeReturnType {\n+    fn method() -> u64;\n+}\n+\n+\n+\n+// Add parameter to method --------------------------------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddParameterToMethod {\n+    fn method();\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddParameterToMethod {\n+    fn method(a: u32);\n+}\n+\n+\n+\n+// Change name of method parameter ------------------------------------------------\n+#[cfg(cfail1)]\n+trait TraitChangeMethodParameterName {\n+    fn method(a: u32);\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitChangeMethodParameterName {\n+    fn method(b: u32);\n+}\n+\n+\n+\n+// Change type of method parameter (i32 => i64) -----------------------------------\n+#[cfg(cfail1)]\n+trait TraitChangeMethodParameterType {\n+    fn method(a: i32);\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitChangeMethodParameterType {\n+    fn method(a: i64);\n+}\n+\n+\n+\n+// Change type of method parameter (&i32 => &mut i32) -----------------------------\n+// FIXME: this should work but doesn't yet.\n+// #[cfg(cfail1)]\n+// trait TraitChangeMethodParameterTypeRef {\n+//     fn method(a: &i32);\n+// }\n+\n+// #[cfg(not(cfail1))]\n+// #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+// #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+// #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+// #[rustc_metadata_clean(cfg=\"cfail3\")]\n+// trait TraitChangeMethodParameterTypeRef {\n+//     fn method(a: &mut i32);\n+// }\n+\n+\n+\n+// Change order of method parameters ----------------------------------------------\n+#[cfg(cfail1)]\n+trait TraitChangeMethodParametersOrder {\n+    fn method(a: i32, b: i32);\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitChangeMethodParametersOrder {\n+    fn method(b: i32, a: i32);\n+}\n+\n+\n+\n+// Add default implementation to method -------------------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddMethodDefaultImplementation {\n+    fn method();\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddMethodDefaultImplementation {\n+    fn method() { }\n+}\n+\n+\n+\n+// Change order of methods --------------------------------------------------------\n+#[cfg(cfail1)]\n+trait TraitChangeOrderOfMethods {\n+    fn method0();\n+    fn method1();\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitChangeOrderOfMethods {\n+    fn method1();\n+    fn method0();\n+}\n+\n+\n+\n+// Change mode of self parameter --------------------------------------------------\n+// FIXME: this should work but doesn't yet.\n+// #[cfg(cfail1)]\n+// trait TraitChangeModeSelfRefToMut {\n+//     fn method(&self);\n+// }\n+\n+// #[cfg(not(cfail1))]\n+// #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+// #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+// #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+// #[rustc_metadata_clean(cfg=\"cfail3\")]\n+// trait TraitChangeModeSelfRefToMut {\n+//     fn method(&mut self);\n+// }\n+\n+// FIXME: this should work but doesn't yet.\n+// #[cfg(cfail1)]\n+// trait TraitChangeModeSelfOwnToMut {\n+//     fn method(self);\n+// }\n+\n+// #[cfg(not(cfail1))]\n+// #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+// #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+// #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+// #[rustc_metadata_clean(cfg=\"cfail3\")]\n+// trait TraitChangeModeSelfOwnToMut {\n+//     fn method(mut self);\n+// }\n+\n+\n+\n+#[cfg(cfail1)]\n+trait TraitChangeModeSelfOwnToRef {\n+    fn method(self);\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitChangeModeSelfOwnToRef {\n+    fn method(&self);\n+}\n+\n+\n+\n+// Add unsafe modifier to method --------------------------------------------------\n+// FIXME: this should work but doesn't yet.\n+// #[cfg(cfail1)]\n+// trait TraitAddUnsafeModifier {\n+//     fn method();\n+// }\n+\n+// #[cfg(not(cfail1))]\n+// #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+// #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+// #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+// #[rustc_metadata_clean(cfg=\"cfail3\")]\n+// trait TraitAddUnsafeModifier {\n+//     unsafe fn method();\n+// }\n+\n+\n+\n+// Add extern modifier to method --------------------------------------------------\n+// FIXME: this should work but doesn't yet.\n+// #[cfg(cfail1)]\n+// trait TraitAddExternModifier {\n+//     fn method();\n+// }\n+\n+// #[cfg(not(cfail1))]\n+// #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+// #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+// #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+// #[rustc_metadata_clean(cfg=\"cfail3\")]\n+// trait TraitAddExternModifier {\n+//     extern fn method();\n+// }\n+\n+\n+\n+// Change extern \"C\" to extern \"rust-intrinsic\" -----------------------------------\n+// FIXME: this should work but doesn't yet.\n+// #[cfg(cfail1)]\n+// trait TraitChangeExternCToRustIntrinsic {\n+//     extern \"C\" fn method();\n+// }\n+\n+// #[cfg(not(cfail1))]\n+// #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+// #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+// #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+// #[rustc_metadata_clean(cfg=\"cfail3\")]\n+// trait TraitChangeExternCToRustIntrinsic {\n+//     extern \"rust-intrinsic\" fn method();\n+// }\n+\n+\n+\n+// Add type parameter to method ---------------------------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddTypeParameterToMethod {\n+    fn method();\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddTypeParameterToMethod {\n+    fn method<T>();\n+}\n+\n+\n+\n+// Add lifetime parameter to method -----------------------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddLifetimeParameterToMethod {\n+    fn method();\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddLifetimeParameterToMethod {\n+    fn method<'a>();\n+}\n+\n+\n+\n+// dummy trait for bound\n+trait ReferenceTrait0 { }\n+trait ReferenceTrait1 { }\n+\n+// Add trait bound to method type parameter ---------------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddTraitBoundToMethodTypeParameter {\n+    fn method<T>();\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddTraitBoundToMethodTypeParameter {\n+    fn method<T: ReferenceTrait0>();\n+}\n+\n+\n+\n+// Add builtin bound to method type parameter -------------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddBuiltinBoundToMethodTypeParameter {\n+    fn method<T>();\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddBuiltinBoundToMethodTypeParameter {\n+    fn method<T: Sized>();\n+}\n+\n+\n+\n+// Add lifetime bound to method type parameter ------------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddLifetimeBoundToMethodTypeParameter {\n+    fn method<'a, 'b>(a: &'a u32, b: &'b u32);\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddLifetimeBoundToMethodTypeParameter {\n+    fn method<'a, 'b: 'a>(a: &'a u32, b: &'b u32);\n+}\n+\n+\n+\n+// Add second trait bound to method type parameter --------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddSecondTraitBoundToMethodTypeParameter {\n+    fn method<T: ReferenceTrait0>();\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddSecondTraitBoundToMethodTypeParameter {\n+    fn method<T: ReferenceTrait0 + ReferenceTrait1>();\n+}\n+\n+\n+\n+// Add second builtin bound to method type parameter ------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddSecondBuiltinBoundToMethodTypeParameter {\n+    fn method<T: Sized>();\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddSecondBuiltinBoundToMethodTypeParameter {\n+    fn method<T: Sized + Sync>();\n+}\n+\n+\n+\n+// Add second lifetime bound to method type parameter -----------------------------\n+#[cfg(cfail1)]\n+trait TraitAddSecondLifetimeBoundToMethodTypeParameter {\n+    fn method<'a, 'b, 'c>(a: &'a u32, b: &'b u32);\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddSecondLifetimeBoundToMethodTypeParameter {\n+    fn method<'a, 'b, 'c: 'a + 'b>(a: &'a u32, b: &'b u32, c: &'c u32);\n+}\n+\n+\n+\n+// Add associated type ------------------------------------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddAssociatedType {\n+    fn mathod();\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddAssociatedType {\n+    type Associated;\n+\n+    fn mathod();\n+}\n+\n+\n+\n+// Add trait bound to associated type ---------------------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddTraitBoundToAssociatedType {\n+    type Associated;\n+\n+    fn mathod();\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddTraitBoundToAssociatedType {\n+    type Associated: ReferenceTrait0;\n+\n+    fn mathod();\n+}\n+\n+\n+\n+// Add lifetime bound to associated type ------------------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddLifetimeBoundToAssociatedType<'a> {\n+    type Associated;\n+\n+    fn mathod();\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddLifetimeBoundToAssociatedType<'a> {\n+    type Associated: 'a;\n+\n+    fn mathod();\n+}\n+\n+\n+\n+// Add default to associated type -------------------------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddDefaultToAssociatedType {\n+    type Associated;\n+\n+    fn mathod();\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddDefaultToAssociatedType {\n+    type Associated = ReferenceType0;\n+\n+    fn mathod();\n+}\n+\n+\n+\n+// Add associated constant --------------------------------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddAssociatedConstant {\n+    fn mathod();\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddAssociatedConstant {\n+    const Value: u32;\n+\n+    fn mathod();\n+}\n+\n+\n+\n+// Add initializer to associated constant -----------------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddInitializerToAssociatedConstant {\n+    const Value: u32;\n+\n+    fn mathod();\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddInitializerToAssociatedConstant {\n+    const Value: u32 = 1;\n+\n+    fn mathod();\n+}\n+\n+\n+\n+// Change type of associated constant ---------------------------------------------\n+#[cfg(cfail1)]\n+trait TraitChangeTypeOfAssociatedConstant {\n+    const Value: u32;\n+\n+    fn mathod();\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitChangeTypeOfAssociatedConstant {\n+    const Value: f64;\n+\n+    fn mathod();\n+}\n+\n+\n+\n+// Add super trait ----------------------------------------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddSuperTrait { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddSuperTrait : ReferenceTrait0 { }\n+\n+\n+\n+// Add builtin bound (Send or Copy) -----------------------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddBuiltiBound { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddBuiltiBound : Send { }\n+\n+\n+\n+// Add 'static lifetime bound to trait --------------------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddStaticLifetimeBound { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddStaticLifetimeBound : 'static { }\n+\n+\n+\n+// Add super trait as second bound ------------------------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddTraitAsSecondBound : ReferenceTrait0 { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddTraitAsSecondBound : ReferenceTrait0 + ReferenceTrait1 { }\n+\n+#[cfg(cfail1)]\n+trait TraitAddTraitAsSecondBoundFromBuiltin : Send { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddTraitAsSecondBoundFromBuiltin : Send + ReferenceTrait0 { }\n+\n+\n+\n+// Add builtin bound as second bound ----------------------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddBuiltinBoundAsSecondBound : ReferenceTrait0 { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddBuiltinBoundAsSecondBound : ReferenceTrait0 + Send { }\n+\n+#[cfg(cfail1)]\n+trait TraitAddBuiltinBoundAsSecondBoundFromBuiltin : Send { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddBuiltinBoundAsSecondBoundFromBuiltin: Send + Copy { }\n+\n+\n+\n+// Add 'static bounds as second bound ---------------------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddStaticBoundAsSecondBound : ReferenceTrait0 { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddStaticBoundAsSecondBound : ReferenceTrait0 + 'static { }\n+\n+#[cfg(cfail1)]\n+trait TraitAddStaticBoundAsSecondBoundFromBuiltin : Send { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddStaticBoundAsSecondBoundFromBuiltin : Send + 'static { }\n+\n+\n+\n+// Add type parameter to trait ----------------------------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddTypeParameterToTrait { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddTypeParameterToTrait<T> { }\n+\n+\n+\n+// Add lifetime parameter to trait ------------------------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddLifetimeParameterToTrait { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddLifetimeParameterToTrait<'a> { }\n+\n+\n+\n+// Add trait bound to type parameter of trait -------------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddTraitBoundToTypeParameterOfTrait<T> { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddTraitBoundToTypeParameterOfTrait<T: ReferenceTrait0> { }\n+\n+\n+\n+// Add lifetime bound to type parameter of trait ----------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddLifetimeBoundToTypeParameterOfTrait<'a, T> { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddLifetimeBoundToTypeParameterOfTrait<'a, T: 'a> { }\n+\n+\n+\n+// Add lifetime bound to lifetime parameter of trait ------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddLifetimeBoundToLifetimeParameterOfTrait<'a, 'b> { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddLifetimeBoundToLifetimeParameterOfTrait<'a: 'b, 'b> { }\n+\n+\n+\n+// Add builtin bound to type parameter of trait -----------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddBuiltinBoundToTypeParameterOfTrait<T> { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddBuiltinBoundToTypeParameterOfTrait<T: Send> { }\n+\n+\n+\n+// Add second type parameter to trait ---------------------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddSecondTypeParameterToTrait<T> { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddSecondTypeParameterToTrait<T, S> { }\n+\n+\n+\n+// Add second lifetime parameter to trait -----------------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddSecondLifetimeParameterToTrait<'a> { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddSecondLifetimeParameterToTrait<'a, 'b> { }\n+\n+\n+\n+// Add second trait bound to type parameter of trait ------------------------------\n+#[cfg(cfail1)]\n+trait TraitAddSecondTraitBoundToTypeParameterOfTrait<T: ReferenceTrait0> { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddSecondTraitBoundToTypeParameterOfTrait<T: ReferenceTrait0 + ReferenceTrait1> { }\n+\n+\n+\n+// Add second lifetime bound to type parameter of trait ---------------------------\n+#[cfg(cfail1)]\n+trait TraitAddSecondLifetimeBoundToTypeParameterOfTrait<'a, 'b, T: 'a> { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddSecondLifetimeBoundToTypeParameterOfTrait<'a, 'b, T: 'a + 'b> { }\n+\n+\n+\n+// Add second lifetime bound to lifetime parameter of trait------------------------\n+#[cfg(cfail1)]\n+trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTrait<'a: 'b, 'b, 'c> { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTrait<'a: 'b + 'c, 'b, 'c> { }\n+\n+\n+\n+// Add second builtin bound to type parameter of trait ----------------------------\n+#[cfg(cfail1)]\n+trait TraitAddSecondBuiltinBoundToTypeParameterOfTrait<T: Send> { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddSecondBuiltinBoundToTypeParameterOfTrait<T: Send + Sync> { }\n+\n+\n+\n+// --------------------------------------------------------------------------------\n+struct ReferenceType0 {}\n+struct ReferenceType1 {}\n+\n+\n+\n+// Add trait bound to type parameter of trait in where clause----------------------\n+#[cfg(cfail1)]\n+trait TraitAddTraitBoundToTypeParameterOfTraitWhere<T> { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddTraitBoundToTypeParameterOfTraitWhere<T> where T: ReferenceTrait0 { }\n+\n+\n+\n+// Add lifetime bound to type parameter of trait in where clause-------------------\n+#[cfg(cfail1)]\n+trait TraitAddLifetimeBoundToTypeParameterOfTraitWhere<'a, T> { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddLifetimeBoundToTypeParameterOfTraitWhere<'a, T> where T: 'a { }\n+\n+\n+\n+// Add lifetime bound to lifetime parameter of trait in where clause---------------\n+#[cfg(cfail1)]\n+trait TraitAddLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b> { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b> where 'a: 'b { }\n+\n+\n+\n+// Add builtin bound to type parameter of trait in where clause--------------------\n+#[cfg(cfail1)]\n+trait TraitAddBuiltinBoundToTypeParameterOfTraitWhere<T> { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddBuiltinBoundToTypeParameterOfTraitWhere<T> where T: Send { }\n+\n+\n+\n+// Add second trait bound to type parameter of trait in where clause---------------\n+#[cfg(cfail1)]\n+trait TraitAddSecondTraitBoundToTypeParameterOfTraitWhere<T> where T: ReferenceTrait0 { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddSecondTraitBoundToTypeParameterOfTraitWhere<T> where T: ReferenceTrait0 + ReferenceTrait1 { }\n+\n+\n+\n+// Add second lifetime bound to type parameter of trait in where clause------------\n+#[cfg(cfail1)]\n+trait TraitAddSecondLifetimeBoundToTypeParameterOfTraitWhere<'a, 'b, T> where T: 'a { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddSecondLifetimeBoundToTypeParameterOfTraitWhere<'a, 'b, T> where T: 'a + 'b { }\n+\n+\n+\n+// Add second lifetime bound to lifetime parameter of trait in where clause--------\n+#[cfg(cfail1)]\n+trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b, 'c> where 'a: 'b { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b, 'c> where 'a: 'b + 'c { }\n+\n+\n+\n+// Add second builtin bound to type parameter of trait in where clause-------------\n+#[cfg(cfail1)]\n+trait TraitAddSecondBuiltinBoundToTypeParameterOfTraitWhere<T> where T: Send { }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+trait TraitAddSecondBuiltinBoundToTypeParameterOfTraitWhere<T> where T: Send + Sync { }\n+\n+\n+\n+// EDIT: Some more cases ----------------------------------------------------------\n+\n+// Change return type of method indirectly by modifying a use statement------------\n+mod change_return_type_of_method_indirectly_use {\n+    #[cfg(cfail1)]\n+    use super::ReferenceType0 as ReturnType;\n+    #[cfg(not(cfail1))]\n+    use super::ReferenceType1 as ReturnType;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    trait TraitChangeReturnType {\n+        fn method() -> ReturnType;\n+    }\n+}\n+\n+\n+\n+// Change type of method parameter indirectly by modifying a use statement---------\n+mod change_method_parameter_type_indirectly_by_use {\n+    #[cfg(cfail1)]\n+    use super::ReferenceType0 as ArgType;\n+    #[cfg(not(cfail1))]\n+    use super::ReferenceType1 as ArgType;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    trait TraitChangeArgType {\n+        fn method(a: ArgType);\n+    }\n+}\n+\n+\n+\n+// Change trait bound of method type parameter indirectly by modifying a use statement\n+mod change_method_parameter_type_bound_indirectly_by_use {\n+    #[cfg(cfail1)]\n+    use super::ReferenceTrait0 as Bound;\n+    #[cfg(not(cfail1))]\n+    use super::ReferenceTrait1 as Bound;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    trait TraitChangeBoundOfMethodTypeParameter {\n+        fn method<T: Bound>(a: T);\n+    }\n+}\n+\n+\n+\n+// Change trait bound of method type parameter in where clause indirectly by modifying a use statement\n+mod change_method_parameter_type_bound_indirectly_by_use_where {\n+    #[cfg(cfail1)]\n+    use super::ReferenceTrait0 as Bound;\n+    #[cfg(not(cfail1))]\n+    use super::ReferenceTrait1 as Bound;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    trait TraitChangeBoundOfMethodTypeParameterWhere {\n+        fn method<T>(a: T) where T: Bound;\n+    }\n+}\n+\n+\n+\n+// Change trait bound of trait type parameter indirectly by modifying a use statement\n+mod change_method_type_parameter_bound_indirectly {\n+    #[cfg(cfail1)]\n+    use super::ReferenceTrait0 as Bound;\n+    #[cfg(not(cfail1))]\n+    use super::ReferenceTrait1 as Bound;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    trait TraitChangeTraitBound<T: Bound> {\n+        fn method(a: T);\n+    }\n+}\n+\n+\n+\n+// Change trait bound of trait type parameter in where clause indirectly by modifying a use statement\n+mod change_method_type_parameter_bound_indirectly_where {\n+    #[cfg(cfail1)]\n+    use super::ReferenceTrait0 as Bound;\n+    #[cfg(not(cfail1))]\n+    use super::ReferenceTrait1 as Bound;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    trait TraitChangeTraitBoundWhere<T> where T: Bound {\n+        fn method(a: T);\n+    }\n+}\n+"}]}