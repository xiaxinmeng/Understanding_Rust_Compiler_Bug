{"sha": "b07634f212d7725040358815f08b575d930b4490", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNzYzNGYyMTJkNzcyNTA0MDM1ODgxNWYwOGI1NzVkOTMwYjQ0OTA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-15T19:27:15Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-15T19:27:48Z"}, "message": "rustc: Add Rust bindings to the LLVM object file library", "tree": {"sha": "fda0315924745e8bbd4140063d56625183498714", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fda0315924745e8bbd4140063d56625183498714"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b07634f212d7725040358815f08b575d930b4490", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b07634f212d7725040358815f08b575d930b4490", "html_url": "https://github.com/rust-lang/rust/commit/b07634f212d7725040358815f08b575d930b4490", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b07634f212d7725040358815f08b575d930b4490/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "400df70643820012edfdf4811c05a4ce72b82bfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/400df70643820012edfdf4811c05a4ce72b82bfe", "html_url": "https://github.com/rust-lang/rust/commit/400df70643820012edfdf4811c05a4ce72b82bfe"}], "stats": {"total": 84, "additions": 81, "deletions": 3}, "files": [{"sha": "8884b7237816b494d75e03a00d903b90939bb477", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/b07634f212d7725040358815f08b575d930b4490/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07634f212d7725040358815f08b575d930b4490/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=b07634f212d7725040358815f08b575d930b4490", "patch": "@@ -22,6 +22,8 @@ import llvm.CallConv;\n import llvm.IntPredicate;\n import llvm.RealPredicate;\n import llvm.Opcode;\n+import llvmext.ObjectFileRef;\n+import llvmext.SectionIteratorRef;\n \n type ULongLong = u64;\n type LongLong = i64;\n@@ -735,6 +737,39 @@ native mod llvm = llvm_lib {\n \n     /** Adds a verification pass. */\n     fn LLVMAddVerifierPass(PassManagerRef PM);\n+\n+    // TODO: LLVMCreateMemoryBufferWithContentsOfFile is unrepresentable. Make\n+    // a shim.\n+    /** Destroys the memory buffer. */\n+    fn LLVMDisposeMemoryBuffer(MemoryBufferRef MemBuf);\n+}\n+\n+native mod llvmext = llvmext_lib {\n+    type ObjectFileRef;\n+    type SectionIteratorRef;\n+\n+    /** Opens an object file. */\n+    fn LLVMCreateObjectFile(MemoryBufferRef MemBuf) -> ObjectFileRef;\n+    /** Closes an object file. */\n+    fn LLVMDisposeObjectFile(ObjectFileRef ObjectFile);\n+\n+    /** Enumerates the sections in an object file. */\n+    fn LLVMGetSections(ObjectFileRef ObjectFile) -> SectionIteratorRef;\n+    /** Destroys a section iterator. */\n+    fn LLVMDisposeSectionIterator(SectionIteratorRef SI);\n+    /** Returns true if the section iterator is at the end of the section\n+        list. */\n+    fn LLVMIsSectionIteratorAtEnd(ObjectFileRef ObjectFile,\n+                                  SectionIteratorRef SI) -> Bool;\n+    /** Moves the section iterator to point to the next section. */\n+    fn LLVMMoveToNextSection(SectionIteratorRef SI);\n+    /** Returns the current section name. */\n+    fn LLVMGetSectionName(SectionIteratorRef SI) -> sbuf;\n+    /** Returns the current section size.\n+        FIXME: The return value is actually a uint64_t! */\n+    fn LLVMGetSectionSize(SectionIteratorRef SI) -> uint;\n+    /** Returns the current section contents as a string buffer. */\n+    fn LLVMGetSectionContents(SectionIteratorRef SI) -> sbuf;\n }\n \n /* Slightly more terse object-interface to LLVM's 'builder' functions. */\n@@ -1339,6 +1374,43 @@ fn mk_pass_manager() -> pass_manager {\n     ret rec(llpm=llpm, dtor=pass_manager_dtor(llpm));\n }\n \n+/* Memory-managed interface to memory buffers. */\n+\n+obj memory_buffer_dtor(MemoryBufferRef MemBuf) {\n+    drop { llvm.LLVMDisposeMemoryBuffer(MemBuf); }\n+}\n+\n+type memory_buffer = rec(MemoryBufferRef llmb, memory_buffer_dtor dtor);\n+\n+fn mk_memory_buffer() -> memory_buffer {\n+    fail;   // TODO\n+}\n+\n+/* Memory-managed interface to object files. */\n+\n+obj object_file_dtor(ObjectFileRef ObjectFile) {\n+    drop { llvmext.LLVMDisposeObjectFile(ObjectFile); }\n+}\n+\n+type object_file = rec(ObjectFileRef llof, object_file_dtor dtor);\n+\n+fn mk_object_file(MemoryBufferRef llmb) -> object_file {\n+    auto llof = llvmext.LLVMCreateObjectFile(llmb);\n+    ret rec(llof=llof, dtor=object_file_dtor(llof));\n+}\n+\n+/* Memory-managed interface to section iterators. */\n+\n+obj section_iter_dtor(SectionIteratorRef SI) {\n+    drop { llvmext.LLVMDisposeSectionIterator(SI); }\n+}\n+\n+type section_iter = rec(SectionIteratorRef llsi, section_iter_dtor dtor);\n+\n+fn mk_section_iter(ObjectFileRef llof) -> section_iter {\n+    auto llsi = llvmext.LLVMGetSections(llof);\n+    ret rec(llsi=llsi, dtor=section_iter_dtor(llsi));\n+}\n \n //\n // Local Variables:"}, {"sha": "e00f033bcdfa65a9f12211ab9b65a8de93a8fbb1", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b07634f212d7725040358815f08b575d930b4490/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/b07634f212d7725040358815f08b575d930b4490/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=b07634f212d7725040358815f08b575d930b4490", "patch": "@@ -52,17 +52,23 @@ mod lib {\n     alt (target_os) {\n         case (\"win32\") {\n             let (llvm_lib = \"LLVM-3.0.dll\") {\n-                mod llvm;\n+                let (llvmext_lib = \"rustllvm.dll\") {\n+                    mod llvm;\n+                }\n             }\n         }\n         case (\"macos\") {\n             let (llvm_lib = \"libLLVM-3.0svn.dylib\") {\n-                mod llvm;\n+                let (llvmext_lib = \"librustllvm.dylib\") {\n+                    mod llvm;\n+                }\n             }\n         }\n         else {\n             let (llvm_lib = \"libLLVM-3.0svn.so\") {\n-                mod llvm;\n+                let (llvmext_lib = \"librustllvm.so\") {\n+                    mod llvm;\n+                }\n             }\n         }\n     }"}]}