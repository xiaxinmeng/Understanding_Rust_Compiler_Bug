{"sha": "310ada06f2d632340845ccd4d7e68a1b54d2f28a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMGFkYTA2ZjJkNjMyMzQwODQ1Y2NkNGQ3ZTY4YTFiNTRkMmYyOGE=", "commit": {"author": {"name": "Junseok Lee", "email": "lee.junseok@berkeley.edu", "date": "2015-02-06T07:46:30Z"}, "committer": {"name": "Junseok Lee", "email": "lee.junseok@berkeley.edu", "date": "2015-02-06T07:50:51Z"}, "message": "added example back in, with a modified, (hopefully) improved description", "tree": {"sha": "16f37d00d24b160666662a3efb40ffe9694dd697", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16f37d00d24b160666662a3efb40ffe9694dd697"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/310ada06f2d632340845ccd4d7e68a1b54d2f28a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/310ada06f2d632340845ccd4d7e68a1b54d2f28a", "html_url": "https://github.com/rust-lang/rust/commit/310ada06f2d632340845ccd4d7e68a1b54d2f28a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/310ada06f2d632340845ccd4d7e68a1b54d2f28a/comments", "author": null, "committer": null, "parents": [{"sha": "b6544fd3520d5eed05aafeb6b78737e32bf2c435", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6544fd3520d5eed05aafeb6b78737e32bf2c435", "html_url": "https://github.com/rust-lang/rust/commit/b6544fd3520d5eed05aafeb6b78737e32bf2c435"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "b8fef6a619d461aea0c886eaeaeaea95fccb4623", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/310ada06f2d632340845ccd4d7e68a1b54d2f28a/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/310ada06f2d632340845ccd4d7e68a1b54d2f28a/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=310ada06f2d632340845ccd4d7e68a1b54d2f28a", "patch": "@@ -308,6 +308,20 @@ impl<T: ?Sized> Clone for ContravariantType<T> {\n ///\n /// For more information about variance, refer to this Wikipedia\n /// article <http://en.wikipedia.org/wiki/Variance_%28computer_science%29>.\n+///\n+/// # Example\n+///\n+/// The Cell type is an example of an `InvariantType` which uses unsafe\n+/// code to achieve \"interior\" mutability:\n+///\n+/// ```\n+/// struct Cell<T> { value: T }\n+/// ```\n+///\n+/// The type system would infer that `value` is only read here\n+/// and never written, but in fact `Cell` uses unsafe code to achieve\n+/// interior mutability. In order to get correct behavior, the\n+/// `InvariantType` marker must be applied.\n #[unstable(feature = \"core\",\n            reason = \"likely to change with new variance strategy\")]\n #[lang=\"invariant_type\"]"}]}