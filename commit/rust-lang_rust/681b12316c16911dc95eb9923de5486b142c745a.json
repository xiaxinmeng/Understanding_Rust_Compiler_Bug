{"sha": "681b12316c16911dc95eb9923de5486b142c745a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MWIxMjMxNmMxNjkxMWRjOTVlYjk5MjNkZTU0ODZiMTQyYzc0NWE=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-14T12:30:16Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-20T17:24:36Z"}, "message": "Require should_run to be implemented.", "tree": {"sha": "2b37f1f225d0216895ebc549b57fdf6402f34103", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b37f1f225d0216895ebc549b57fdf6402f34103"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/681b12316c16911dc95eb9923de5486b142c745a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/681b12316c16911dc95eb9923de5486b142c745a", "html_url": "https://github.com/rust-lang/rust/commit/681b12316c16911dc95eb9923de5486b142c745a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/681b12316c16911dc95eb9923de5486b142c745a/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "270d1d69ede6a67f607ab5dba56d0cc39a8cfe95", "url": "https://api.github.com/repos/rust-lang/rust/commits/270d1d69ede6a67f607ab5dba56d0cc39a8cfe95", "html_url": "https://github.com/rust-lang/rust/commit/270d1d69ede6a67f607ab5dba56d0cc39a8cfe95"}], "stats": {"total": 66, "additions": 64, "deletions": 2}, "files": [{"sha": "8740d7a1eb302da7722c5260863767b3e31c42dc", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/681b12316c16911dc95eb9923de5486b142c745a/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681b12316c16911dc95eb9923de5486b142c745a/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=681b12316c16911dc95eb9923de5486b142c745a", "patch": "@@ -70,7 +70,7 @@ pub trait Step: 'static + Clone + Debug + PartialEq + Eq + Hash {\n     /// will execute. However, it does not get called in a \"default\" context\n     /// when we are not passed any paths; in that case, make_run is called\n     /// directly.\n-    fn should_run(_builder: &Builder, _path: &Path) -> bool { false }\n+    fn should_run(builder: &Builder, path: &Path) -> bool;\n \n     /// Build up a \"root\" rule, either as a default rule or from a path passed\n     /// to us.\n@@ -83,7 +83,13 @@ pub trait Step: 'static + Clone + Debug + PartialEq + Eq + Hash {\n         _path: Option<&Path>,\n         _host: Interned<String>,\n         _target: Interned<String>,\n-    ) { unimplemented!() }\n+    ) {\n+        // It is reasonable to not have an implementation of make_run for rules\n+        // who do not want to get called from the root context. This means that\n+        // they are likely dependencies (e.g., sysroot creation) or similar, and\n+        // as such calling them from ./x.py isn't logical.\n+        unimplemented!()\n+    }\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n@@ -188,6 +194,11 @@ impl<'a> Builder<'a> {\n         }\n         impl Step for Libdir {\n             type Output = Interned<PathBuf>;\n+\n+            fn should_run(_builder: &Builder, _path: &Path) -> bool {\n+                false\n+            }\n+\n             fn run(self, builder: &Builder) -> Interned<PathBuf> {\n                 let compiler = self.compiler;\n                 let lib = if compiler.stage >= 2 && builder.build.config.libdir_relative.is_some() {"}, {"sha": "b5d5d6de0843efcf0ac9cb184423bfa2fd417639", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/681b12316c16911dc95eb9923de5486b142c745a/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681b12316c16911dc95eb9923de5486b142c745a/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=681b12316c16911dc95eb9923de5486b142c745a", "patch": "@@ -1360,6 +1360,10 @@ pub struct RemoteCopyLibs {\n impl Step for RemoteCopyLibs {\n     type Output = ();\n \n+    fn should_run(_builder: &Builder, _path: &Path) -> bool {\n+        false\n+    }\n+\n     fn run(self, builder: &Builder) {\n         let build = builder.build;\n         let compiler = self.compiler;\n@@ -1411,6 +1415,10 @@ pub struct Distcheck;\n impl Step for Distcheck {\n     type Output = ();\n \n+    fn should_run(_builder: &Builder, path: &Path) -> bool {\n+        path.ends_with(\"distcheck\")\n+    }\n+\n     /// Run \"distcheck\", a 'make check' from a tarball\n     fn run(self, builder: &Builder) {\n         let build = builder.build;"}, {"sha": "86879454f0890cd86a64f828e683aceb2a5cba14", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/681b12316c16911dc95eb9923de5486b142c745a/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681b12316c16911dc95eb9923de5486b142c745a/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=681b12316c16911dc95eb9923de5486b142c745a", "patch": "@@ -276,6 +276,10 @@ struct StdLink {\n impl Step for StdLink {\n     type Output = ();\n \n+    fn should_run(_builder: &Builder, _path: &Path) -> bool {\n+        false\n+    }\n+\n     /// Link all libstd rlibs/dylibs into the sysroot location.\n     ///\n     /// Links those artifacts generated by `compiler` to a the `stage` compiler's\n@@ -503,6 +507,10 @@ pub struct TestLink {\n impl Step for TestLink {\n     type Output = ();\n \n+    fn should_run(_builder: &Builder, _path: &Path) -> bool {\n+        false\n+    }\n+\n     /// Same as `std_link`, only for libtest\n     fn run(self, builder: &Builder) {\n         let build = builder.build;\n@@ -691,6 +699,10 @@ struct RustcLink {\n impl Step for RustcLink {\n     type Output = ();\n \n+    fn should_run(_builder: &Builder, _path: &Path) -> bool {\n+        false\n+    }\n+\n     /// Same as `std_link`, only for librustc\n     fn run(self, builder: &Builder) {\n         let build = builder.build;\n@@ -743,6 +755,10 @@ pub struct Sysroot {\n impl Step for Sysroot {\n     type Output = Interned<PathBuf>;\n \n+    fn should_run(_builder: &Builder, _path: &Path) -> bool {\n+        false\n+    }\n+\n     /// Returns the sysroot for the `compiler` specified that *this build system\n     /// generates*.\n     ///\n@@ -789,6 +805,10 @@ pub struct Assemble {\n impl Step for Assemble {\n     type Output = Compiler;\n \n+    fn should_run(_builder: &Builder, path: &Path) -> bool {\n+        path.ends_with(\"src/rustc\")\n+    }\n+\n     /// Prepare a new compiler from the artifacts in `stage`\n     ///\n     /// This will assemble a compiler in `build/$host/stage$stage`. The compiler"}, {"sha": "65110dbaae95b77b61e050db618afcb3886e4d5f", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/681b12316c16911dc95eb9923de5486b142c745a/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681b12316c16911dc95eb9923de5486b142c745a/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=681b12316c16911dc95eb9923de5486b142c745a", "patch": "@@ -107,6 +107,12 @@ pub struct Rustbook {\n impl Step for Rustbook {\n     type Output = ();\n \n+    // rustbook is never directly called, and only serves as a shim for the nomicon and the\n+    // reference.\n+    fn should_run(_builder: &Builder, _path: &Path) -> bool {\n+        false\n+    }\n+\n     /// Invoke `rustbook` for `target` for the doc book `name`.\n     ///\n     /// This will not actually generate any documentation if the documentation has\n@@ -182,6 +188,11 @@ pub struct RustbookSrc {\n impl Step for RustbookSrc {\n     type Output = ();\n \n+    fn should_run(_builder: &Builder, _path: &Path) -> bool {\n+        // RustbookSrc is also never run directly, only as a helper to other rules\n+        false\n+    }\n+\n     /// Invoke `rustbook` for `target` for the doc book `name` from the `src` path.\n     ///\n     /// This will not actually generate any documentation if the documentation has"}, {"sha": "b60a3760eb288746112b495a0492b8eb0da4ceb3", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/681b12316c16911dc95eb9923de5486b142c745a/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681b12316c16911dc95eb9923de5486b142c745a/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=681b12316c16911dc95eb9923de5486b142c745a", "patch": "@@ -55,6 +55,10 @@ impl Step for Llvm {\n     type Output = ();\n     const ONLY_HOSTS: bool = true;\n \n+    fn should_run(_builder: &Builder, path: &Path) -> bool {\n+        path.ends_with(\"src/llvm\")\n+    }\n+\n     /// Compile LLVM for `target`.\n     fn run(self, builder: &Builder) {\n         let build = builder.build;"}, {"sha": "9c5592cd61bfa2b5f7c9a7998b5c978b81219a87", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/681b12316c16911dc95eb9923de5486b142c745a/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681b12316c16911dc95eb9923de5486b142c745a/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=681b12316c16911dc95eb9923de5486b142c745a", "patch": "@@ -55,6 +55,10 @@ pub struct CleanTools {\n impl Step for CleanTools {\n     type Output = ();\n \n+    fn should_run(_builder: &Builder, _path: &Path) -> bool {\n+        false\n+    }\n+\n     /// Build a tool in `src/tools`\n     ///\n     /// This will build the specified tool with the specified `host` compiler in\n@@ -89,6 +93,10 @@ pub struct ToolBuild {\n impl Step for ToolBuild {\n     type Output = PathBuf;\n \n+    fn should_run(_builder: &Builder, _path: &Path) -> bool {\n+        false\n+    }\n+\n     /// Build a tool in `src/tools`\n     ///\n     /// This will build the specified tool with the specified `host` compiler in"}]}