{"sha": "0b9db5716f31d1df62214edd63ba26c368f9c6bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiOWRiNTcxNmYzMWQxZGY2MjIxNGVkZDYzYmEyNmMzNjhmOWM2YmY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-01-16T08:26:37Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:08:14Z"}, "message": "Resolve variant field access", "tree": {"sha": "580fc61825df099575ed2a6a1f9e4220ff992c67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/580fc61825df099575ed2a6a1f9e4220ff992c67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b9db5716f31d1df62214edd63ba26c368f9c6bf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg4V4ACgkQpp+NIls6\n19nzeQ/7B2g0YBvOVJ2MW8lxidyTj1Nembj4pWrV/WRIubsMkVXgo/ehJoWG5kGv\nGQdmDXvGzS7VvCGbPA+9FwWPl/9HVgzl+acs5yThpC0JvKXaeAbRLmqXV2Lf5G1V\nqt4cWIxoqYCslTD+1LV0WsFztCFRcy2ufcvXWaC7OqO/26gJH2U1Ud12qBzufCbI\nYK0+cvWkRQez2tY90cqSSiJum+mpzhZ6M/6CUk9o7P92JMxeiSDOvQrSwGV4trul\nOAa44lQilA968ah0dD3NHdpf/tgmf1XBxmFUlQ+o2hI7Jq3laLHODrFYe/OO8QAL\nh0+JHZmRYS/g4WjXuQ+3Ix8U0jMPejX/nO5l/3vl5r4rkM8E44AgCQEq9pRFLXIb\nAyk5y8vbSi+Zc04WpSHwHSD/YWs4Lk761kK6XBXKeVmQXStjWfpb299e0BFgS7/y\nRUe6xIiAarYRebeo5HVawDFlOS1jN8qGO8VZBt2FmrI2P6JWh9eRmGzdTm7D/eXw\n7xsJSbo2TmOkVXjoF6NCLEkbQN/0z+6ARD3afxT10bX9Fq+cwoNIUVjLfAmkJwE1\nU689mft8iYXeMnZ9DVkT3L+YARl4Gl4Rfpa7rZN6aF1cqzrpX8E8o65RLPqU0va+\n7FujORmr7iJuAO3a5b9BEhNN7K1Cg7eVX6gkcvYHo4dnDdRqd3M=\n=G1Ud\n-----END PGP SIGNATURE-----", "payload": "tree 580fc61825df099575ed2a6a1f9e4220ff992c67\nparent e97089dae33d5b228bb1b50ae12e96b13ab499b3\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1516091197 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520492894 +0100\n\nResolve variant field access\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b9db5716f31d1df62214edd63ba26c368f9c6bf", "html_url": "https://github.com/rust-lang/rust/commit/0b9db5716f31d1df62214edd63ba26c368f9c6bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b9db5716f31d1df62214edd63ba26c368f9c6bf/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e97089dae33d5b228bb1b50ae12e96b13ab499b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e97089dae33d5b228bb1b50ae12e96b13ab499b3", "html_url": "https://github.com/rust-lang/rust/commit/e97089dae33d5b228bb1b50ae12e96b13ab499b3"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "48822c506aef27e1a405194b534c3d786b44fb9c", "filename": "src/librustc_mir/const_eval/pattern.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b9db5716f31d1df62214edd63ba26c368f9c6bf/src%2Flibrustc_mir%2Fconst_eval%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9db5716f31d1df62214edd63ba26c368f9c6bf/src%2Flibrustc_mir%2Fconst_eval%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fpattern.rs?ref=0b9db5716f31d1df62214edd63ba26c368f9c6bf", "patch": "@@ -803,7 +803,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                                 let field = Field::new(i);\n                                 let val = match cv.val {\n                                     ConstVal::Value(miri) => const_val_field(\n-                                        self.tcx, self.param_env, instance, field, miri, cv.ty,\n+                                        self.tcx, self.param_env, instance, Some(variant_index), field, miri, cv.ty,\n                                     ).unwrap(),\n                                     _ => bug!(\"{:#?} is not a valid tuple\", cv),\n                                 };\n@@ -846,7 +846,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                                 consts.iter().find(|&&(name, _)| name == f.name).unwrap().1\n                             },\n                             ConstVal::Value(miri) => const_val_field(\n-                                self.tcx, self.param_env, instance, field, miri, cv.ty,\n+                                self.tcx, self.param_env, instance, None, field, miri, cv.ty,\n                             ).unwrap(),\n                             _ => bug!(\"{:#?} is not a valid tuple\", cv),\n                         };\n@@ -864,7 +864,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                         let val = match cv.val {\n                             ConstVal::Aggregate(ConstAggregate::Tuple(consts)) => consts[i],\n                             ConstVal::Value(miri) => const_val_field(\n-                                self.tcx, self.param_env, instance, field, miri, cv.ty,\n+                                self.tcx, self.param_env, instance, None, field, miri, cv.ty,\n                             ).unwrap(),\n                             _ => bug!(\"{:#?} is not a valid tuple\", cv),\n                         };\n@@ -884,7 +884,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                             ConstVal::Aggregate(ConstAggregate::Array(consts)) => consts[i],\n                             ConstVal::Aggregate(ConstAggregate::Repeat(cv, _)) => cv,\n                             ConstVal::Value(miri) => const_val_field(\n-                                self.tcx, self.param_env, instance, field, miri, cv.ty,\n+                                self.tcx, self.param_env, instance, None, field, miri, cv.ty,\n                             ).unwrap(),\n                             _ => bug!(\"{:#?} is not a valid tuple\", cv),\n                         };"}, {"sha": "3a9149b44bba7146632439e055c2cc467c13ec9f", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0b9db5716f31d1df62214edd63ba26c368f9c6bf/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9db5716f31d1df62214edd63ba26c368f9c6bf/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=0b9db5716f31d1df62214edd63ba26c368f9c6bf", "patch": "@@ -13,7 +13,7 @@ use syntax::ast::Mutability;\n use syntax::codemap::Span;\n \n use rustc::mir::interpret::{EvalResult, EvalError, EvalErrorKind, GlobalId, Value, MemoryPointer, Pointer, PrimVal};\n-use super::{Place, EvalContext, StackPopCleanup, ValTy, HasMemory};\n+use super::{Place, EvalContext, StackPopCleanup, ValTy, HasMemory, PlaceExtra};\n \n use rustc_const_math::ConstInt;\n \n@@ -308,11 +308,12 @@ pub fn const_val_field<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     instance: ty::Instance<'tcx>,\n+    variant: Option<usize>,\n     field: mir::Field,\n     val: Value,\n     ty: Ty<'tcx>,\n ) -> ::rustc::middle::const_val::EvalResult<'tcx> {\n-    match const_val_field_inner(tcx, param_env, instance, field, val, ty) {\n+    match const_val_field_inner(tcx, param_env, instance, variant, field, val, ty) {\n         Ok((field, ty)) => Ok(tcx.mk_const(ty::Const {\n             val: ConstVal::Value(field),\n             ty,\n@@ -328,6 +329,7 @@ fn const_val_field_inner<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     instance: ty::Instance<'tcx>,\n+    variant: Option<usize>,\n     field: mir::Field,\n     value: Value,\n     ty: Ty<'tcx>,\n@@ -337,7 +339,11 @@ fn const_val_field_inner<'a, 'tcx>(\n     let (mut field, ty) = match value {\n         Value::ByValPair(..) | Value::ByVal(_) => ecx.read_field(value, field, ty)?.expect(\"const_val_field on non-field\"),\n         Value::ByRef(ptr, align) => {\n-            let place = Place::from_primval_ptr(ptr, align);\n+            let place = Place::Ptr {\n+                ptr,\n+                align,\n+                extra: variant.map_or(PlaceExtra::None, PlaceExtra::DowncastVariant),\n+            };\n             let layout = ecx.layout_of(ty)?;\n             let (place, layout) = ecx.place_field(place, field, layout)?;\n             let (ptr, align) = place.to_ptr_align();"}]}