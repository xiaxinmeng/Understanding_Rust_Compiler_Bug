{"sha": "7ff11d7be8f5523674996bb7941e01b1991fd039", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmZjExZDdiZThmNTUyMzY3NDk5NmJiNzk0MWUwMWIxOTkxZmQwMzk=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-02-22T15:31:03Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-02-22T15:31:19Z"}, "message": "Unify lifetime/type arguments error messages for (non-)builtin bounds", "tree": {"sha": "ea78fbda5dc9aaaa628f5e3aeed66a71908744e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea78fbda5dc9aaaa628f5e3aeed66a71908744e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ff11d7be8f5523674996bb7941e01b1991fd039", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ff11d7be8f5523674996bb7941e01b1991fd039", "html_url": "https://github.com/rust-lang/rust/commit/7ff11d7be8f5523674996bb7941e01b1991fd039", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ff11d7be8f5523674996bb7941e01b1991fd039/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1945197c32d4e81b9fa30e61f3544a484b5491a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1945197c32d4e81b9fa30e61f3544a484b5491a", "html_url": "https://github.com/rust-lang/rust/commit/a1945197c32d4e81b9fa30e61f3544a484b5491a"}], "stats": {"total": 83, "additions": 50, "deletions": 33}, "files": [{"sha": "46a7041fff67249bc0d44b067e91235b243ca483", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 44, "deletions": 27, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/7ff11d7be8f5523674996bb7941e01b1991fd039/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff11d7be8f5523674996bb7941e01b1991fd039/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=7ff11d7be8f5523674996bb7941e01b1991fd039", "patch": "@@ -305,9 +305,9 @@ fn create_region_substs<'tcx>(\n             rscope.anon_regions(span, expected_num_region_params);\n \n         if supplied_num_region_params != 0 || anon_regions.is_err() {\n-            span_err!(tcx.sess, span, E0107,\n-                      \"wrong number of lifetime parameters: expected {}, found {}\",\n-                      expected_num_region_params, supplied_num_region_params);\n+            report_lifetime_number_error(tcx, span,\n+                                         supplied_num_region_params,\n+                                         expected_num_region_params);\n         }\n \n         match anon_regions {\n@@ -355,31 +355,14 @@ fn create_substs_for_ast_path<'tcx>(\n                                                .count();\n \n     let mut type_substs = types_provided;\n+    check_type_argument_count(this.tcx(), span, supplied_ty_param_count,\n+                              required_ty_param_count, formal_ty_param_count);\n+\n     if supplied_ty_param_count < required_ty_param_count {\n-        let expected = if required_ty_param_count < formal_ty_param_count {\n-            \"expected at least\"\n-        } else {\n-            \"expected\"\n-        };\n-        span_err!(this.tcx().sess, span, E0243,\n-                  \"wrong number of type arguments: {} {}, found {}\",\n-                  expected,\n-                  required_ty_param_count,\n-                  supplied_ty_param_count);\n         while type_substs.len() < required_ty_param_count {\n             type_substs.push(tcx.types.err);\n         }\n     } else if supplied_ty_param_count > formal_ty_param_count {\n-        let expected = if required_ty_param_count < formal_ty_param_count {\n-            \"expected at most\"\n-        } else {\n-            \"expected\"\n-        };\n-        span_err!(this.tcx().sess, span, E0244,\n-                  \"wrong number of type arguments: {} {}, found {}\",\n-                  expected,\n-                  formal_ty_param_count,\n-                  supplied_ty_param_count);\n         type_substs.truncate(formal_ty_param_count);\n     }\n     assert!(type_substs.len() >= required_ty_param_count &&\n@@ -1849,10 +1832,13 @@ pub fn partition_bounds<'a>(tcx: &ty::ctxt,\n                                                      &mut builtin_bounds) {\n                             let segments = &b.trait_ref.path.segments;\n                             let parameters = &segments[segments.len() - 1].parameters;\n-                            if !parameters.is_empty() {\n-                                span_err!(tcx.sess, b.trait_ref.path.span, E0316,\n-                                          \"builtin bounds do not require arguments, {} given\",\n-                                          parameters.lifetimes().len() + parameters.types().len());\n+                            if parameters.types().len() > 0 {\n+                                check_type_argument_count(tcx, b.trait_ref.path.span,\n+                                                          parameters.types().len(), 0, 0);\n+                            }\n+                            if parameters.lifetimes().len() > 0{\n+                                report_lifetime_number_error(tcx, b.trait_ref.path.span,\n+                                                             parameters.lifetimes().len(), 0);\n                             }\n                             continue; // success\n                         }\n@@ -1886,3 +1872,34 @@ fn prohibit_projections<'tcx>(tcx: &ty::ctxt<'tcx>,\n             \"associated type bindings are not allowed here\");\n     }\n }\n+\n+fn check_type_argument_count(tcx: &ty::ctxt, span: Span, supplied: usize,\n+                             required: usize, accepted: usize) {\n+    if supplied < required {\n+        let expected = if required < accepted {\n+            \"expected at least\"\n+        } else {\n+            \"expected\"\n+        };\n+        span_err!(tcx.sess, span, E0243,\n+                  \"wrong number of type arguments: {} {}, found {}\",\n+                  expected, required, supplied);\n+    } else if supplied > accepted {\n+        let expected = if required < accepted {\n+            \"expected at most\"\n+        } else {\n+            \"expected\"\n+        };\n+        span_err!(tcx.sess, span, E0244,\n+                  \"wrong number of type arguments: {} {}, found {}\",\n+                  expected,\n+                  accepted,\n+                  supplied);\n+    }\n+}\n+\n+fn report_lifetime_number_error(tcx: &ty::ctxt, span: Span, number: usize, expected: usize) {\n+    span_err!(tcx.sess, span, E0107,\n+              \"wrong number of lifetime parameters: expected {}, found {}\",\n+              expected, number);\n+}"}, {"sha": "0b8ebcf3fe930e0e8fb4952cae6a0f8a04df3c89", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ff11d7be8f5523674996bb7941e01b1991fd039/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff11d7be8f5523674996bb7941e01b1991fd039/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=7ff11d7be8f5523674996bb7941e01b1991fd039", "patch": "@@ -172,7 +172,6 @@ register_diagnostics! {\n     E0248, // found value name used as a type\n     E0249, // expected constant expr for array length\n     E0250, // expected constant expr for array length\n-    E0316  // wrong number of type arguments to a built-in trait\n }\n \n __build_diagnostic_array! { DIAGNOSTICS }"}, {"sha": "fb6c43a19059a42885a94ada94ab2f894e54dd1a", "filename": "src/test/compile-fail/typeck-builtin-bound-type-parameters.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ff11d7be8f5523674996bb7941e01b1991fd039/src%2Ftest%2Fcompile-fail%2Ftypeck-builtin-bound-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff11d7be8f5523674996bb7941e01b1991fd039/src%2Ftest%2Fcompile-fail%2Ftypeck-builtin-bound-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-builtin-bound-type-parameters.rs?ref=7ff11d7be8f5523674996bb7941e01b1991fd039", "patch": "@@ -9,19 +9,20 @@\n // except according to those terms.\n \n fn foo1<T:Copy<U>, U>(x: T) {}\n-//~^ ERROR: builtin bounds do not require arguments, 1 given\n+//~^ ERROR: wrong number of type arguments: expected 0, found 1\n \n trait Trait: Copy<Send> {}\n-//~^ ERROR: builtin bounds do not require arguments, 1 given\n+//~^ ERROR: wrong number of type arguments: expected 0, found 1\n \n struct MyStruct1<T: Copy<T>>;\n-//~^ ERROR builtin bounds do not require arguments, 1 given\n+//~^ ERROR wrong number of type arguments: expected 0, found 1\n \n struct MyStruct2<'a, T: Copy<'a>>;\n-//~^ ERROR: builtin bounds do not require arguments, 1 given\n+//~^ ERROR: wrong number of lifetime parameters: expected 0, found 1\n \n fn foo2<'a, T:Copy<'a, U>, U>(x: T) {}\n-//~^ ERROR builtin bounds do not require arguments, 2 given\n+//~^ ERROR: wrong number of type arguments: expected 0, found 1\n+//~^^ ERROR: wrong number of lifetime parameters: expected 0, found 1\n \n fn main() {\n }"}]}