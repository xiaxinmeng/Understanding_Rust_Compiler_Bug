{"sha": "239213a3db61530c073d366b50c31b3a86aad879", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzOTIxM2EzZGI2MTUzMGMwNzNkMzY2YjUwYzMxYjNhODZhYWQ4Nzk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-09T09:55:23Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-09T09:55:23Z"}, "message": "Prepare gen_lsp_server for publishing", "tree": {"sha": "b1ab200c78d11c8d205056514a173fbf5cecf48b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1ab200c78d11c8d205056514a173fbf5cecf48b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/239213a3db61530c073d366b50c31b3a86aad879", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/239213a3db61530c073d366b50c31b3a86aad879", "html_url": "https://github.com/rust-lang/rust/commit/239213a3db61530c073d366b50c31b3a86aad879", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/239213a3db61530c073d366b50c31b3a86aad879/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9798c0e6da53c132021f03ac7a50ccd8714b371", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9798c0e6da53c132021f03ac7a50ccd8714b371", "html_url": "https://github.com/rust-lang/rust/commit/c9798c0e6da53c132021f03ac7a50ccd8714b371"}], "stats": {"total": 105, "additions": 88, "deletions": 17}, "files": [{"sha": "cf5c34a8872836e58fb126aead53bd3d72608f34", "filename": "crates/gen_lsp_server/Cargo.toml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/239213a3db61530c073d366b50c31b3a86aad879/crates%2Fgen_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/239213a3db61530c073d366b50c31b3a86aad879/crates%2Fgen_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2FCargo.toml?ref=239213a3db61530c073d366b50c31b3a86aad879", "patch": "@@ -2,11 +2,13 @@\n name = \"gen_lsp_server\"\n version = \"0.1.0\"\n authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n+repository = \"https://github.com/rust-analyzer/rust-analyzer\"\n+license = \"MIT OR Apache-2.0\"\n+description = \"Generic LSP server scaffold.\"\n \n [dependencies]\n languageserver-types = \"0.51.0\"\n log = \"0.4.3\"\n-\n failure = \"0.1.2\"\n serde_json = \"1.0.24\"\n serde = \"1.0.71\""}, {"sha": "645728a573f6edee92f62b98eeda6271c6ba853e", "filename": "crates/gen_lsp_server/src/lib.rs", "status": "modified", "additions": 77, "deletions": 8, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/239213a3db61530c073d366b50c31b3a86aad879/crates%2Fgen_lsp_server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239213a3db61530c073d366b50c31b3a86aad879/crates%2Fgen_lsp_server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fsrc%2Flib.rs?ref=239213a3db61530c073d366b50c31b3a86aad879", "patch": "@@ -1,3 +1,65 @@\n+//! A language server scaffold, exposing synchroneous crossbeam-channel based API.\n+//! This crate handles protocol handshaking and parsing messages, while you\n+//! control the message dispatch loop yourself.\n+//!\n+//! Run with `RUST_LOG=sync_lsp_server=debug` to see all the messages.\n+//!\n+//! ```no_run\n+//! extern crate gen_lsp_server;\n+//! extern crate languageserver_types;\n+//! extern crate failure;\n+//! extern crate crossbeam_channel;\n+//!\n+//! use crossbeam_channel::{Sender, Receiver};\n+//! use languageserver_types::{ServerCapabilities, InitializeParams, request::{GotoDefinition, GotoDefinitionResponse}};\n+//! use gen_lsp_server::{run_server, stdio_transport, handle_shutdown, RawMessage, RawResponse};\n+//!\n+//! fn main() -> Result<(), failure::Error> {\n+//!     let (receiver, sender, io_threads) = stdio_transport();\n+//!     gen_lsp_server::run_server(\n+//!         ServerCapabilities::default(),\n+//!         receiver,\n+//!         sender,\n+//!         main_loop,\n+//!     )?;\n+//!     io_threads.join()?;\n+//!     Ok(())\n+//! }\n+//!\n+//! fn main_loop(\n+//!     _params: InitializeParams,\n+//!     receiver: &Receiver<RawMessage>,\n+//!     sender: &Sender<RawMessage>,\n+//! ) -> Result<(), failure::Error> {\n+//!     for msg in receiver {\n+//!         match msg {\n+//!             RawMessage::Request(req) => {\n+//!                 let req = match handle_shutdown(req, sender) {\n+//!                     None => return Ok(()),\n+//!                     Some(req) => req,\n+//!                 };\n+//!                 let req = match req.cast::<GotoDefinition>() {\n+//!                     Ok((id, _params)) => {\n+//!                         let resp = RawResponse::ok::<GotoDefinition>(\n+//!                             id,\n+//!                             &Some(GotoDefinitionResponse::Array(Vec::new())),\n+//!                         );\n+//!                         sender.send(RawMessage::Response(resp));\n+//!                         continue;\n+//!                     },\n+//!                     Err(req) => req,\n+//!                 };\n+//!                 // ...\n+//!             }\n+//!             RawMessage::Response(_resp) => (),\n+//!             RawMessage::Notification(_not) => (),\n+//!         }\n+//!     }\n+//!     Ok(())\n+//! }\n+//! ```\n+\n+\n #[macro_use]\n extern crate failure;\n #[macro_use]\n@@ -25,20 +87,26 @@ pub use {\n     stdio::{stdio_transport, Threads},\n };\n \n+/// Main entry point: runs the server from initialization to shutdown.\n+/// To attach server to standard input/output streams, use `stdio_transport`\n+/// function to create corresponding `sender` and `receiver` pair.\n+///\n+///`server` should use `handle_shutdown` function to handle the `Shutdown`\n+/// request.\n pub fn run_server(\n     caps: ServerCapabilities,\n+    receiver: Receiver<RawMessage>,\n+    sender: Sender<RawMessage>,\n     server: impl FnOnce(\n         InitializeParams,\n-        &mut Receiver<RawMessage>,\n-        &mut Sender<RawMessage>,\n+        &Receiver<RawMessage>,\n+        &Sender<RawMessage>,\n     ) -> Result<()>,\n-    mut receiver: Receiver<RawMessage>,\n-    mut sender: Sender<RawMessage>,\n ) -> Result<()> {\n     info!(\"lsp server initializes\");\n-    let params = initialize(&mut receiver, &mut sender, caps)?;\n+    let params = initialize(&receiver, &sender, caps)?;\n     info!(\"lsp server initialized, serving requests\");\n-    server(params, &mut receiver, &mut sender)?;\n+    server(params, &receiver, &sender)?;\n     info!(\"lsp server waiting for exit notification\");\n     match receiver.recv() {\n         Some(RawMessage::Notification(n)) => {\n@@ -52,6 +120,7 @@ pub fn run_server(\n     Ok(())\n }\n \n+/// if `req` is `Shutdown`, respond to it and return `None`, otherwise return `Some(req)`\n pub fn handle_shutdown(req: RawRequest, sender: &Sender<RawMessage>) -> Option<RawRequest> {\n     match req.cast::<Shutdown>() {\n         Ok((id, ())) => {\n@@ -64,8 +133,8 @@ pub fn handle_shutdown(req: RawRequest, sender: &Sender<RawMessage>) -> Option<R\n }\n \n fn initialize(\n-    receiver: &mut Receiver<RawMessage>,\n-    sender: &mut Sender<RawMessage>,\n+    receiver: &Receiver<RawMessage>,\n+    sender: &Sender<RawMessage>,\n     caps: ServerCapabilities,\n ) -> Result<InitializeParams> {\n     let (id, params) = match receiver.recv() {"}, {"sha": "e5d1792b7e31d40da5870e5b24a3427d754832dc", "filename": "crates/ra_lsp_server/src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/239213a3db61530c073d366b50c31b3a86aad879/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239213a3db61530c073d366b50c31b3a86aad879/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs?ref=239213a3db61530c073d366b50c31b3a86aad879", "patch": "@@ -35,14 +35,14 @@ fn main_inner() -> Result<()> {\n     let cwd = ::std::env::current_dir()?;\n     run_server(\n         ra_lsp_server::server_capabilities(),\n+        receiver,\n+        sender,\n         |params, r, s| {\n             let root = params.root_uri\n                 .and_then(|it| it.to_file_path().ok())\n                 .unwrap_or(cwd);\n             ra_lsp_server::main_loop(false, root, r, s)\n         },\n-        receiver,\n-        sender,\n     )?;\n     info!(\"shutting down IO...\");\n     threads.join()?;"}, {"sha": "47a9b202ef33e8c879b2af1c5f5031fa8f4dcb8f", "filename": "crates/ra_lsp_server/src/main_loop/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/239213a3db61530c073d366b50c31b3a86aad879/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239213a3db61530c073d366b50c31b3a86aad879/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs?ref=239213a3db61530c073d366b50c31b3a86aad879", "patch": "@@ -35,8 +35,8 @@ enum Task {\n pub fn main_loop(\n     internal_mode: bool,\n     root: PathBuf,\n-    msg_receriver: &mut Receiver<RawMessage>,\n-    msg_sender: &mut Sender<RawMessage>,\n+    msg_receriver: &Receiver<RawMessage>,\n+    msg_sender: &Sender<RawMessage>,\n ) -> Result<()> {\n     let pool = rayon::ThreadPoolBuilder::new()\n         .num_threads(4)\n@@ -88,8 +88,8 @@ fn main_loop_inner(\n     internal_mode: bool,\n     ws_root: PathBuf,\n     pool: &ThreadPool,\n-    msg_sender: &mut Sender<RawMessage>,\n-    msg_receiver: &mut Receiver<RawMessage>,\n+    msg_sender: &Sender<RawMessage>,\n+    msg_receiver: &Receiver<RawMessage>,\n     task_sender: Sender<Task>,\n     task_receiver: Receiver<Task>,\n     fs_worker: Worker<PathBuf, (PathBuf, Vec<FileEvent>)>,\n@@ -212,7 +212,7 @@ fn main_loop_inner(\n \n fn on_task(\n     task: Task,\n-    msg_sender: &mut Sender<RawMessage>,\n+    msg_sender: &Sender<RawMessage>,\n     pending_requests: &mut HashMap<u64, JobHandle>,\n ) {\n     match task {\n@@ -266,7 +266,7 @@ fn on_request(\n }\n \n fn on_notification(\n-    msg_sender: &mut Sender<RawMessage>,\n+    msg_sender: &Sender<RawMessage>,\n     state: &mut ServerWorldState,\n     pending_requests: &mut HashMap<u64, JobHandle>,\n     subs: &mut Subscriptions,"}]}