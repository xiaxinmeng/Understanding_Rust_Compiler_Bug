{"sha": "35298349c3efd75cd8050f9f23e4bf1409d96118", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1Mjk4MzQ5YzNlZmQ3NWNkODA1MGY5ZjIzZTRiZjE0MDlkOTYxMTg=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-02-04T17:08:17Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-02-12T19:20:55Z"}, "message": "Add \"soft deprecation\" notice to old min/max_value() docs", "tree": {"sha": "f167efa25067a29e9bbf98d3cb28cfa5bc97e213", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f167efa25067a29e9bbf98d3cb28cfa5bc97e213"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35298349c3efd75cd8050f9f23e4bf1409d96118", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35298349c3efd75cd8050f9f23e4bf1409d96118", "html_url": "https://github.com/rust-lang/rust/commit/35298349c3efd75cd8050f9f23e4bf1409d96118", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35298349c3efd75cd8050f9f23e4bf1409d96118/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "271ba5a3ea59f25ebc7ba3b9a2e620a833e50b33", "url": "https://api.github.com/repos/rust-lang/rust/commits/271ba5a3ea59f25ebc7ba3b9a2e620a833e50b33", "html_url": "https://github.com/rust-lang/rust/commit/271ba5a3ea59f25ebc7ba3b9a2e620a833e50b33"}], "stats": {"total": 100, "additions": 60, "deletions": 40}, "files": [{"sha": "09e4cfa87a7b33e4378070a59207822c1649a0a2", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 60, "deletions": 40, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/35298349c3efd75cd8050f9f23e4bf1409d96118/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35298349c3efd75cd8050f9f23e4bf1409d96118/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=35298349c3efd75cd8050f9f23e4bf1409d96118", "patch": "@@ -279,28 +279,6 @@ $EndFeature, \"\n             pub const MAX: Self = !Self::MIN;\n         }\n \n-        doc_comment! {\n-            \"Returns the smallest value that can be represented by this integer type.\",\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[inline(always)]\n-            #[rustc_promotable]\n-            #[rustc_const_stable(feature = \"const_min_value\", since = \"1.32.0\")]\n-            pub const fn min_value() -> Self {\n-                Self::MIN\n-            }\n-        }\n-\n-        doc_comment! {\n-            \"Returns the largest value that can be represented by this integer type.\",\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[inline(always)]\n-            #[rustc_promotable]\n-            #[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]\n-            pub const fn max_value() -> Self {\n-                Self::MAX\n-            }\n-        }\n-\n         doc_comment! {\n             concat!(\"Converts a string slice in a given base to an integer.\n \n@@ -2351,6 +2329,38 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n                 unsafe { mem::transmute(bytes) }\n             }\n         }\n+\n+        doc_comment! {\n+            concat!(\"**This method is soft-deprecated.**\n+\n+Although using it won\u2019t cause compilation warning,\n+new code should use [`\", stringify!($SelfT), \"::MIN\", \"`](#associatedconstant.MIN) instead.\n+\n+Returns the smallest value that can be represented by this integer type.\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[inline(always)]\n+            #[rustc_promotable]\n+            #[rustc_const_stable(feature = \"const_min_value\", since = \"1.32.0\")]\n+            pub const fn min_value() -> Self {\n+                Self::MIN\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"**This method is soft-deprecated.**\n+\n+Although using it won\u2019t cause compilation warning,\n+new code should use [`\", stringify!($SelfT), \"::MAX\", \"`](#associatedconstant.MAX) instead.\n+\n+Returns the largest value that can be represented by this integer type.\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[inline(always)]\n+            #[rustc_promotable]\n+            #[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]\n+            pub const fn max_value() -> Self {\n+                Self::MAX\n+            }\n+        }\n     }\n }\n \n@@ -2454,24 +2464,6 @@ $EndFeature, \"\n             pub const MAX: Self = !0;\n         }\n \n-        doc_comment! {\n-            \"Returns the smallest value that can be represented by this integer type.\",\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_promotable]\n-            #[inline(always)]\n-            #[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]\n-            pub const fn min_value() -> Self { Self::MIN }\n-        }\n-\n-        doc_comment! {\n-            \"Returns the largest value that can be represented by this integer type.\",\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_promotable]\n-            #[inline(always)]\n-            #[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]\n-            pub const fn max_value() -> Self { Self::MAX }\n-        }\n-\n         doc_comment! {\n             concat!(\"Converts a string slice in a given base to an integer.\n \n@@ -4277,6 +4269,34 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n                 unsafe { mem::transmute(bytes) }\n             }\n         }\n+\n+        doc_comment! {\n+            concat!(\"**This method is soft-deprecated.**\n+\n+Although using it won\u2019t cause compilation warning,\n+new code should use [`\", stringify!($SelfT), \"::MIN\", \"`](#associatedconstant.MIN) instead.\n+\n+Returns the smallest value that can be represented by this integer type.\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_promotable]\n+            #[inline(always)]\n+            #[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]\n+            pub const fn min_value() -> Self { Self::MIN }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"**This method is soft-deprecated.**\n+\n+Although using it won\u2019t cause compilation warning,\n+new code should use [`\", stringify!($SelfT), \"::MAX\", \"`](#associatedconstant.MAX) instead.\n+\n+Returns the largest value that can be represented by this integer type.\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_promotable]\n+            #[inline(always)]\n+            #[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]\n+            pub const fn max_value() -> Self { Self::MAX }\n+        }\n     }\n }\n "}]}