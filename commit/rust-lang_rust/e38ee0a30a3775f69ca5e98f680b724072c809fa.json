{"sha": "e38ee0a30a3775f69ca5e98f680b724072c809fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzOGVlMGEzMGEzNzc1ZjY5Y2E1ZTk4ZjY4MGI3MjQwNzJjODA5ZmE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-19T19:52:20Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-19T19:52:20Z"}, "message": "split up the test suite", "tree": {"sha": "150518860b284c36a135a99adcae8ff1a4fb96ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/150518860b284c36a135a99adcae8ff1a4fb96ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e38ee0a30a3775f69ca5e98f680b724072c809fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e38ee0a30a3775f69ca5e98f680b724072c809fa", "html_url": "https://github.com/rust-lang/rust/commit/e38ee0a30a3775f69ca5e98f680b724072c809fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e38ee0a30a3775f69ca5e98f680b724072c809fa/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4ffab1754cad30891ac0ff0db45396ba0e80d95", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4ffab1754cad30891ac0ff0db45396ba0e80d95", "html_url": "https://github.com/rust-lang/rust/commit/e4ffab1754cad30891ac0ff0db45396ba0e80d95"}], "stats": {"total": 64, "additions": 52, "deletions": 12}, "files": [{"sha": "c42fdb0eb2dee6274f629036a09a803823b2c947", "filename": "tests/compiletest.rs", "status": "modified", "additions": 52, "deletions": 12, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/e38ee0a30a3775f69ca5e98f680b724072c809fa/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38ee0a30a3775f69ca5e98f680b724072c809fa/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=e38ee0a30a3775f69ca5e98f680b724072c809fa", "patch": "@@ -83,8 +83,7 @@ fn for_all_targets<F: FnMut(String)>(sysroot: &Path, mut f: F) {\n     }\n }\n \n-#[test]\n-fn compile_test() {\n+fn get_sysroot() -> PathBuf {\n     let sysroot = std::env::var(\"MIRI_SYSROOT\").unwrap_or_else(|_| {\n         let sysroot = std::process::Command::new(\"rustc\")\n             .arg(\"--print\")\n@@ -94,7 +93,10 @@ fn compile_test() {\n             .stdout;\n         String::from_utf8(sysroot).expect(\"sysroot is not utf8\")\n     });\n-    let sysroot = &Path::new(sysroot.trim());\n+    PathBuf::from(sysroot.trim())\n+}\n+\n+fn get_host() -> String {\n     let host = std::process::Command::new(\"rustc\")\n         .arg(\"-vV\")\n         .output()\n@@ -103,8 +105,15 @@ fn compile_test() {\n     let host = std::str::from_utf8(&host).expect(\"sysroot is not utf8\");\n     let host = host.split(\"\\nhost: \").nth(1).expect(\"no host: part in rustc -vV\");\n     let host = host.split('\\n').next().expect(\"no \\n after host\");\n+    String::from(host)\n+}\n \n+#[test]\n+fn rustc_test() {\n     if let Ok(path) = std::env::var(\"MIRI_RUSTC_TEST\") {\n+        let sysroot = get_sysroot();\n+        let host = get_host();\n+\n         let mut mir_not_found = Vec::new();\n         let mut crate_not_found = Vec::new();\n         let mut success = 0;\n@@ -215,18 +224,49 @@ fn compile_test() {\n         print_vec(&mut stderr, crate_not_found);\n \n         panic!(\"ran miri on rustc test suite. Test failing for convenience\");\n-    } else {\n-        run_pass(\"tests/run-pass\");\n-        run_pass(\"tests/run-pass-fullmir\");\n-        for_all_targets(sysroot, |target| {\n-            miri_pass(\"tests/run-pass\", &target, host, false);\n-            compile_fail(sysroot, \"tests/compile-fail\", &target, host, false);\n-        });\n-        miri_pass(\"tests/run-pass-fullmir\", host, host, true);\n-        compile_fail(sysroot, \"tests/compile-fail-fullmir\", host, host, true);\n     }\n }\n \n+#[test]\n+fn run_pass_miri() {\n+    if let Ok(_) = std::env::var(\"MIRI_RUSTC_TEST\") {\n+        return;\n+    }\n+\n+    let sysroot = get_sysroot();\n+    let host = get_host();\n+\n+    for_all_targets(&sysroot, |target| {\n+        miri_pass(\"tests/run-pass\", &target, &host, false);\n+    });\n+    miri_pass(\"tests/run-pass-fullmir\", &host, &host, true);\n+}\n+\n+#[test]\n+fn run_pass_rustc() {\n+    if let Ok(_) = std::env::var(\"MIRI_RUSTC_TEST\") {\n+        return;\n+    }\n+\n+    run_pass(\"tests/run-pass\");\n+    run_pass(\"tests/run-pass-fullmir\");\n+}\n+\n+#[test]\n+fn compile_fail_miri() {\n+    if let Ok(_) = std::env::var(\"MIRI_RUSTC_TEST\") {\n+        return;\n+    }\n+\n+    let sysroot = get_sysroot();\n+    let host = get_host();\n+\n+    for_all_targets(&sysroot, |target| {\n+        compile_fail(&sysroot, \"tests/compile-fail\", &target, &host, false);\n+    });\n+    compile_fail(&sysroot, \"tests/compile-fail-fullmir\", &host, &host, true);\n+}\n+\n fn print_vec<W: std::io::Write>(stderr: &mut W, v: Vec<String>) {\n     writeln!(stderr, \"```\").unwrap();\n     for (n, s) in vec_to_hist(v).into_iter().rev() {"}]}