{"sha": "dbfe12daed1ede9d2ccb6bf749143368bc5eade4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZmUxMmRhZWQxZWRlOWQyY2NiNmJmNzQ5MTQzMzY4YmM1ZWFkZTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-02T10:14:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-02T10:14:18Z"}, "message": "Rollup merge of #63189 - waywardmonkeys:doc-improvements, r=Centril\n\nDoc improvements\n\nMiscellaneous documentation fixes.", "tree": {"sha": "e7ee1d0a58556039d057087b74bfc8ef2d1f61a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7ee1d0a58556039d057087b74bfc8ef2d1f61a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbfe12daed1ede9d2ccb6bf749143368bc5eade4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdRAz6CRBK7hj4Ov3rIwAAdHIIAAUc1FM94dc2PUXYOego9FhZ\nISjqzV1NlHAauXR5qWhhYGfVqdmOpI6941I3ktgsa+FWlxx1agLCKDKq0GwtlZyz\naMSzRq/1bxSsoYPz/lTxOJPo/y+X/IDnPhXJNkGdrfRsfqn25ju15Uf0np6fo5+H\nwstO1AtbQNQRgTOxGF72spmT773TJAPkb8n7mwB8HbhHfxoY00oKsC4MN0bYbLSn\nDElSVhirtOdJ9vQpXE2Wmhx7mQTH5C9e9a/3JJGrSSo4s4Js8wAqAnMOHlh/wAVp\nZPYsuibob7szAzuO6HzkMMCRLk3j0NVpY+hwqZNaON213ww280H1HjYwm79OXlk=\n=K3ES\n-----END PGP SIGNATURE-----\n", "payload": "tree e7ee1d0a58556039d057087b74bfc8ef2d1f61a1\nparent 5155c7ea688b4025f4d25233e0f8353f51107269\nparent 325c6a56c274678f294bfa25ee43e1eef48f46a2\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564740858 +0200\ncommitter GitHub <noreply@github.com> 1564740858 +0200\n\nRollup merge of #63189 - waywardmonkeys:doc-improvements, r=Centril\n\nDoc improvements\n\nMiscellaneous documentation fixes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbfe12daed1ede9d2ccb6bf749143368bc5eade4", "html_url": "https://github.com/rust-lang/rust/commit/dbfe12daed1ede9d2ccb6bf749143368bc5eade4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbfe12daed1ede9d2ccb6bf749143368bc5eade4/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5155c7ea688b4025f4d25233e0f8353f51107269", "url": "https://api.github.com/repos/rust-lang/rust/commits/5155c7ea688b4025f4d25233e0f8353f51107269", "html_url": "https://github.com/rust-lang/rust/commit/5155c7ea688b4025f4d25233e0f8353f51107269"}, {"sha": "325c6a56c274678f294bfa25ee43e1eef48f46a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/325c6a56c274678f294bfa25ee43e1eef48f46a2", "html_url": "https://github.com/rust-lang/rust/commit/325c6a56c274678f294bfa25ee43e1eef48f46a2"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "b5614010e5c2f2b1730d93092b1fd6c38b7105ab", "filename": "src/libcore/array.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbfe12daed1ede9d2ccb6bf749143368bc5eade4/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfe12daed1ede9d2ccb6bf749143368bc5eade4/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=dbfe12daed1ede9d2ccb6bf749143368bc5eade4", "patch": "@@ -24,9 +24,12 @@ use crate::slice::{Iter, IterMut};\n /// layout in memory of a fixed size array (for example, for unsafe\n /// initialization).\n ///\n-/// Note that the traits AsRef and AsMut provide similar methods for types that\n+/// Note that the traits [`AsRef`] and [`AsMut`] provide similar methods for types that\n /// may not be fixed-size arrays. Implementors should prefer those traits\n /// instead.\n+///\n+/// [`AsRef`]: ../convert/trait.AsRef.html\n+/// [`AsMut`]: ../convert/trait.AsMut.html\n #[unstable(feature = \"fixed_size_array\", issue = \"27778\")]\n pub unsafe trait FixedSizeArray<T> {\n     /// Converts the array to immutable slice"}, {"sha": "624b13d96472cfe1dad9ded9f9a134576666fba6", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbfe12daed1ede9d2ccb6bf749143368bc5eade4/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfe12daed1ede9d2ccb6bf749143368bc5eade4/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=dbfe12daed1ede9d2ccb6bf749143368bc5eade4", "patch": "@@ -427,7 +427,7 @@ pub trait TryInto<T>: Sized {\n /// - [`try_from`] is reflexive, which means that `TryFrom<T> for T`\n /// is implemented and cannot fail -- the associated `Error` type for\n /// calling `T::try_from()` on a value of type `T` is [`Infallible`].\n-/// When the [`!`] type is stablized [`Infallible`] and [`!`] will be\n+/// When the [`!`] type is stabilized [`Infallible`] and [`!`] will be\n /// equivalent.\n ///\n /// `TryFrom<T>` can be implemented as follows:"}, {"sha": "593c01060ca49ae981ce21ceab6423055e85cf30", "filename": "src/libcore/future/future.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbfe12daed1ede9d2ccb6bf749143368bc5eade4/src%2Flibcore%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfe12daed1ede9d2ccb6bf749143368bc5eade4/src%2Flibcore%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture.rs?ref=dbfe12daed1ede9d2ccb6bf749143368bc5eade4", "patch": "@@ -17,11 +17,13 @@ use crate::task::{Context, Poll};\n /// final value. This method does not block if the value is not ready. Instead,\n /// the current task is scheduled to be woken up when it's possible to make\n /// further progress by `poll`ing again. The `context` passed to the `poll`\n-/// method can provide a `Waker`, which is a handle for waking up the current\n+/// method can provide a [`Waker`], which is a handle for waking up the current\n /// task.\n ///\n /// When using a future, you generally won't call `poll` directly, but instead\n /// `.await` the value.\n+///\n+/// [`Waker`]: ../task/struct.Waker.html\n #[doc(spotlight)]\n #[must_use = \"futures do nothing unless you `.await` or poll them\"]\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]"}, {"sha": "64fdf504369f2a555335c87a837377e253b2e1ac", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbfe12daed1ede9d2ccb6bf749143368bc5eade4/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfe12daed1ede9d2ccb6bf749143368bc5eade4/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=dbfe12daed1ede9d2ccb6bf749143368bc5eade4", "patch": "@@ -434,7 +434,7 @@ impl<T> MaybeUninit<T> {\n     /// Reads the value from the `MaybeUninit<T>` container. The resulting `T` is subject\n     /// to the usual drop handling.\n     ///\n-    /// Whenever possible, it is preferrable to use [`assume_init`] instead, which\n+    /// Whenever possible, it is preferable to use [`assume_init`] instead, which\n     /// prevents duplicating the content of the `MaybeUninit<T>`.\n     ///\n     /// # Safety"}, {"sha": "0ec4dd47b1ff017f8b0aaba6640caa9aceb2c95b", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbfe12daed1ede9d2ccb6bf749143368bc5eade4/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfe12daed1ede9d2ccb6bf749143368bc5eade4/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=dbfe12daed1ede9d2ccb6bf749143368bc5eade4", "patch": "@@ -1611,7 +1611,7 @@ impl<T: ?Sized> *const T {\n     /// The offset is expressed in number of `T` elements, and not bytes. The value returned can be\n     /// used with the `add` method.\n     ///\n-    /// There are no guarantees whatsover that offsetting the pointer will not overflow or go\n+    /// There are no guarantees whatsoever that offsetting the pointer will not overflow or go\n     /// beyond the allocation that the pointer points into. It is up to the caller to ensure that\n     /// the returned offset is correct in all terms other than alignment.\n     ///\n@@ -2412,7 +2412,7 @@ impl<T: ?Sized> *mut T {\n     /// The offset is expressed in number of `T` elements, and not bytes. The value returned can be\n     /// used with the `add` method.\n     ///\n-    /// There are no guarantees whatsover that offsetting the pointer will not overflow or go\n+    /// There are no guarantees whatsoever that offsetting the pointer will not overflow or go\n     /// beyond the allocation that the pointer points into. It is up to the caller to ensure that\n     /// the returned offset is correct in all terms other than alignment.\n     ///"}, {"sha": "2486f29ab0f222606d5814d299ecff8df1468a48", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbfe12daed1ede9d2ccb6bf749143368bc5eade4/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfe12daed1ede9d2ccb6bf749143368bc5eade4/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=dbfe12daed1ede9d2ccb6bf749143368bc5eade4", "patch": "@@ -167,7 +167,7 @@ struct TraitObligationStack<'prev, 'tcx> {\n     /// ok on the premise that if `A: AutoTrait` held, but we indeed\n     /// encountered a problem (later on) with `A: AutoTrait. So we\n     /// currently set a flag on the stack node for `B: AutoTrait` (as\n-    /// well as the second instance of `A: AutoTrait`) to supress\n+    /// well as the second instance of `A: AutoTrait`) to suppress\n     /// caching.\n     ///\n     /// This is a simple, targeted fix. A more-performant fix requires\n@@ -1105,7 +1105,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ///\n     /// - is a defaulted trait,\n     /// - it also appears in the backtrace at some position `X`,\n-    /// - all the predicates at positions `X..` between `X` an the top are\n+    /// - all the predicates at positions `X..` between `X` and the top are\n     ///   also defaulted traits.\n     pub fn coinductive_match<I>(&mut self, cycle: I) -> bool\n     where"}, {"sha": "6e111f2423659ccbbcc359cb3da7869ad3f44b3c", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbfe12daed1ede9d2ccb6bf749143368bc5eade4/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfe12daed1ede9d2ccb6bf749143368bc5eade4/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=dbfe12daed1ede9d2ccb6bf749143368bc5eade4", "patch": "@@ -1055,7 +1055,7 @@ impl CStr {\n     ///\n     /// ```no_run\n     /// # #![allow(unused_must_use)]\n-    /// use std::ffi::{CString};\n+    /// use std::ffi::CString;\n     ///\n     /// let ptr = CString::new(\"Hello\").expect(\"CString::new failed\").as_ptr();\n     /// unsafe {\n@@ -1071,7 +1071,7 @@ impl CStr {\n     ///\n     /// ```no_run\n     /// # #![allow(unused_must_use)]\n-    /// use std::ffi::{CString};\n+    /// use std::ffi::CString;\n     ///\n     /// let hello = CString::new(\"Hello\").expect(\"CString::new failed\");\n     /// let ptr = hello.as_ptr();"}, {"sha": "002aa2f891e4b599d6e23a76ac28c888e5e61a14", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbfe12daed1ede9d2ccb6bf749143368bc5eade4/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfe12daed1ede9d2ccb6bf749143368bc5eade4/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=dbfe12daed1ede9d2ccb6bf749143368bc5eade4", "patch": "@@ -368,7 +368,7 @@ pub fn stream_to_parser_with_base_dir<'a>(\n \n /// A sequence separator.\n pub struct SeqSep {\n-    /// The seperator token.\n+    /// The separator token.\n     pub sep: Option<TokenKind>,\n     /// `true` if a trailing separator is allowed.\n     pub trailing_sep_allowed: bool,"}]}