{"sha": "fbdf926e7010f8bdd9e773831ecf5dbda058bd21", "node_id": "C_kwDOAAsO6NoAKGZiZGY5MjZlNzAxMGY4YmRkOWU3NzM4MzFlY2Y1ZGJkYTA1OGJkMjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-28T09:51:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-28T09:51:40Z"}, "message": "Auto merge of #2742 - RalfJung:targets, r=RalfJung\n\nhandle unknown targets more gracefully\n\nIn particular don't require a list of all OSes in the TLS machinery. Instead just fall back to doing nothing.", "tree": {"sha": "e9fa0f7152842878f4f632e3d6271fc490ab688e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9fa0f7152842878f4f632e3d6271fc490ab688e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbdf926e7010f8bdd9e773831ecf5dbda058bd21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbdf926e7010f8bdd9e773831ecf5dbda058bd21", "html_url": "https://github.com/rust-lang/rust/commit/fbdf926e7010f8bdd9e773831ecf5dbda058bd21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbdf926e7010f8bdd9e773831ecf5dbda058bd21/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca1e861ee9596c6fea3f5d7f00c49efd1bd7c1aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca1e861ee9596c6fea3f5d7f00c49efd1bd7c1aa", "html_url": "https://github.com/rust-lang/rust/commit/ca1e861ee9596c6fea3f5d7f00c49efd1bd7c1aa"}, {"sha": "7bdb5da91624e027ce38bdabe50d65d5e86bacd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bdb5da91624e027ce38bdabe50d65d5e86bacd0", "html_url": "https://github.com/rust-lang/rust/commit/7bdb5da91624e027ce38bdabe50d65d5e86bacd0"}], "stats": {"total": 152, "additions": 92, "deletions": 60}, "files": [{"sha": "c792a27ab4ca29b93f5a0d0ce9961a3589d696be", "filename": "src/tools/miri/src/shims/foreign_items.rs", "status": "modified", "additions": 62, "deletions": 31, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/fbdf926e7010f8bdd9e773831ecf5dbda058bd21/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbdf926e7010f8bdd9e773831ecf5dbda058bd21/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs?ref=fbdf926e7010f8bdd9e773831ecf5dbda058bd21", "patch": "@@ -47,7 +47,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         let min_align = match this.tcx.sess.target.arch.as_ref() {\n             \"x86\" | \"arm\" | \"mips\" | \"powerpc\" | \"powerpc64\" | \"asmjs\" | \"wasm32\" => 8,\n             \"x86_64\" | \"aarch64\" | \"mips64\" | \"s390x\" | \"sparc64\" => 16,\n-            arch => bug!(\"Unsupported target architecture: {}\", arch),\n+            arch => bug!(\"unsupported target architecture for malloc: `{}`\", arch),\n         };\n         // Windows always aligns, even small allocations.\n         // Source: <https://support.microsoft.com/en-us/help/286470/how-to-use-pageheap-exe-in-windows-xp-windows-2000-and-windows-server>\n@@ -320,7 +320,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                     return Ok(Some(body));\n                 }\n \n-                this.handle_unsupported(format!(\"can't call foreign function: {link_name}\"))?;\n+                this.handle_unsupported(format!(\n+                    \"can't call foreign function `{link_name}` on OS `{os}`\",\n+                    os = this.tcx.sess.target.os,\n+                ))?;\n                 return Ok(None);\n             }\n         }\n@@ -336,9 +339,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     ) -> InterpResult<'tcx, EmulateByNameResult<'mir, 'tcx>> {\n         let this = self.eval_context_mut();\n \n-        let allocator_kind = if let Some(allocator_kind) = this.tcx.allocator_kind(()) {\n-            allocator_kind\n-        } else {\n+        let Some(allocator_kind) = this.tcx.allocator_kind(()) else {\n             // in real code, this symbol does not exist without an allocator\n             return Ok(EmulateByNameResult::NotSupported);\n         };\n@@ -420,9 +421,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let [ptr] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;\n                 let (alloc_id, _, _) = this.ptr_get_alloc_id(ptr).map_err(|_e| {\n-                    err_machine_stop!(TerminationInfo::Abort(\n-                        format!(\"pointer passed to miri_get_alloc_id must not be dangling, got {ptr:?}\")\n-                    ))\n+                    err_machine_stop!(TerminationInfo::Abort(format!(\n+                        \"pointer passed to miri_get_alloc_id must not be dangling, got {ptr:?}\"\n+                    )))\n                 })?;\n                 this.write_scalar(Scalar::from_u64(alloc_id.0.get()), dest)?;\n             }\n@@ -438,7 +439,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let ptr = this.read_pointer(ptr)?;\n                 let (alloc_id, offset, _) = this.ptr_get_alloc_id(ptr)?;\n                 if offset != Size::ZERO {\n-                    throw_unsup_format!(\"pointer passed to miri_static_root must point to beginning of an allocated block\");\n+                    throw_unsup_format!(\n+                        \"pointer passed to miri_static_root must point to beginning of an allocated block\"\n+                    );\n                 }\n                 this.machine.static_roots.push(alloc_id);\n             }\n@@ -453,7 +456,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n                 // We read this as a plain OsStr and write it as a path, which will convert it to the target.\n                 let path = this.read_os_str_from_c_str(ptr)?.to_owned();\n-                let (success, needed_size) = this.write_path_to_c_str(Path::new(&path), out, out_size)?;\n+                let (success, needed_size) =\n+                    this.write_path_to_c_str(Path::new(&path), out, out_size)?;\n                 // Return value: 0 on success, otherwise the size it would have needed.\n                 this.write_int(if success { 0 } else { needed_size }, dest)?;\n             }\n@@ -505,11 +509,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 this.write_pointer(res, dest)?;\n             }\n             \"calloc\" => {\n-                let [items, len] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                let [items, len] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let items = this.read_machine_usize(items)?;\n                 let len = this.read_machine_usize(len)?;\n-                let size =\n-                    items.checked_mul(len).ok_or_else(|| err_ub_format!(\"overflow during calloc size computation\"))?;\n+                let size = items\n+                    .checked_mul(len)\n+                    .ok_or_else(|| err_ub_format!(\"overflow during calloc size computation\"))?;\n                 let res = this.malloc(size, /*zero_init:*/ true, MiriMemoryKind::C)?;\n                 this.write_pointer(res, dest)?;\n             }\n@@ -519,7 +525,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 this.free(ptr, MiriMemoryKind::C)?;\n             }\n             \"realloc\" => {\n-                let [old_ptr, new_size] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                let [old_ptr, new_size] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let old_ptr = this.read_pointer(old_ptr)?;\n                 let new_size = this.read_machine_usize(new_size)?;\n                 let res = this.realloc(old_ptr, new_size, MiriMemoryKind::C)?;\n@@ -551,11 +558,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 };\n \n                 match link_name.as_str() {\n-                    \"__rust_alloc\" => return this.emulate_allocator(Symbol::intern(\"__rg_alloc\"), default),\n+                    \"__rust_alloc\" =>\n+                        return this.emulate_allocator(Symbol::intern(\"__rg_alloc\"), default),\n                     \"miri_alloc\" => {\n                         default(this)?;\n                         return Ok(EmulateByNameResult::NeedsJumping);\n-                    },\n+                    }\n                     _ => unreachable!(),\n                 }\n             }\n@@ -574,7 +582,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                     )?;\n \n                     // We just allocated this, the access is definitely in-bounds.\n-                    this.write_bytes_ptr(ptr.into(), iter::repeat(0u8).take(usize::try_from(size).unwrap())).unwrap();\n+                    this.write_bytes_ptr(\n+                        ptr.into(),\n+                        iter::repeat(0u8).take(usize::try_from(size).unwrap()),\n+                    )\n+                    .unwrap();\n                     this.write_pointer(ptr, dest)\n                 });\n             }\n@@ -600,7 +612,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 };\n \n                 match link_name.as_str() {\n-                    \"__rust_dealloc\" => return this.emulate_allocator(Symbol::intern(\"__rg_dealloc\"), default),\n+                    \"__rust_dealloc\" =>\n+                        return this.emulate_allocator(Symbol::intern(\"__rg_dealloc\"), default),\n                     \"miri_dealloc\" => {\n                         default(this)?;\n                         return Ok(EmulateByNameResult::NeedsJumping);\n@@ -609,7 +622,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 }\n             }\n             \"__rust_realloc\" => {\n-                let [ptr, old_size, align, new_size] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n+                let [ptr, old_size, align, new_size] =\n+                    this.check_shim(abi, Abi::Rust, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;\n                 let old_size = this.read_machine_usize(old_size)?;\n                 let align = this.read_machine_usize(align)?;\n@@ -633,7 +647,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n             // C memory handling functions\n             \"memcmp\" => {\n-                let [left, right, n] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                let [left, right, n] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let left = this.read_pointer(left)?;\n                 let right = this.read_pointer(right)?;\n                 let n = Size::from_bytes(this.read_machine_usize(n)?);\n@@ -653,7 +668,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"memrchr\" => {\n-                let [ptr, val, num] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                let [ptr, val, num] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;\n                 let val = this.read_scalar(val)?.to_i32()?;\n                 let num = this.read_machine_usize(num)?;\n@@ -676,7 +692,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 }\n             }\n             \"memchr\" => {\n-                let [ptr, val, num] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                let [ptr, val, num] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;\n                 let val = this.read_scalar(val)?.to_i32()?;\n                 let num = this.read_machine_usize(num)?;\n@@ -699,7 +716,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let [ptr] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;\n                 let n = this.read_c_str(ptr)?.len();\n-                this.write_scalar(Scalar::from_machine_usize(u64::try_from(n).unwrap(), this), dest)?;\n+                this.write_scalar(\n+                    Scalar::from_machine_usize(u64::try_from(n).unwrap(), this),\n+                    dest,\n+                )?;\n             }\n \n             // math functions (note that there are also intrinsics for some other functions)\n@@ -835,7 +855,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let a = this.read_scalar(a)?.to_u64()?;\n                 let b = this.read_scalar(b)?.to_u64()?;\n \n-                #[allow(clippy::integer_arithmetic)] // adding two u64 and a u8 cannot wrap in a u128\n+                #[allow(clippy::integer_arithmetic)]\n+                // adding two u64 and a u8 cannot wrap in a u128\n                 let wide_sum = u128::from(c_in) + u128::from(a) + u128::from(b);\n                 #[allow(clippy::integer_arithmetic)] // it's a u128, we can shift by 64\n                 let (c_out, sum) = ((wide_sum >> 64).truncate::<u8>(), wide_sum.truncate::<u64>());\n@@ -845,15 +866,18 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let sum_field = this.place_field(dest, 1)?;\n                 this.write_scalar(Scalar::from_u64(sum), &sum_field)?;\n             }\n-            \"llvm.x86.sse2.pause\" if this.tcx.sess.target.arch == \"x86\" || this.tcx.sess.target.arch == \"x86_64\" => {\n+            \"llvm.x86.sse2.pause\"\n+                if this.tcx.sess.target.arch == \"x86\" || this.tcx.sess.target.arch == \"x86_64\" =>\n+            {\n                 let [] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.yield_active_thread();\n             }\n             \"llvm.aarch64.isb\" if this.tcx.sess.target.arch == \"aarch64\" => {\n                 let [arg] = this.check_shim(abi, Abi::Unadjusted, link_name, args)?;\n                 let arg = this.read_scalar(arg)?.to_i32()?;\n                 match arg {\n-                    15 => { // SY (\"full system scope\")\n+                    // SY (\"full system scope\")\n+                    15 => {\n                         this.yield_active_thread();\n                     }\n                     _ => {\n@@ -863,11 +887,18 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             }\n \n             // Platform-specific shims\n-            _ => match this.tcx.sess.target.os.as_ref() {\n-                target if target_os_is_unix(target) => return shims::unix::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n-                \"windows\" => return shims::windows::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n-                target => throw_unsup_format!(\"the target `{}` is not supported\", target),\n-            }\n+            _ =>\n+                return match this.tcx.sess.target.os.as_ref() {\n+                    target_os if target_os_is_unix(target_os) =>\n+                        shims::unix::foreign_items::EvalContextExt::emulate_foreign_item_by_name(\n+                            this, link_name, abi, args, dest,\n+                        ),\n+                    \"windows\" =>\n+                        shims::windows::foreign_items::EvalContextExt::emulate_foreign_item_by_name(\n+                            this, link_name, abi, args, dest,\n+                        ),\n+                    _ => Ok(EmulateByNameResult::NotSupported),\n+                },\n         };\n         // We only fall through to here if we did *not* hit the `_` arm above,\n         // i.e., if we actually emulated the function with one of the shims."}, {"sha": "ca31efa486c2717d03795f227ae6530988b7bfc1", "filename": "src/tools/miri/src/shims/tls.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fbdf926e7010f8bdd9e773831ecf5dbda058bd21/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbdf926e7010f8bdd9e773831ecf5dbda058bd21/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftls.rs?ref=fbdf926e7010f8bdd9e773831ecf5dbda058bd21", "patch": "@@ -257,16 +257,11 @@ impl TlsDtorsState {\n                         // And move to the final state.\n                         self.0 = Done;\n                     }\n-                    \"wasi\" | \"none\" => {\n-                        // No OS, no TLS dtors.\n+                    _ => {\n+                        // No TLS dtor support.\n                         // FIXME: should we do something on wasi?\n                         self.0 = Done;\n                     }\n-                    os => {\n-                        throw_unsup_format!(\n-                            \"the TLS machinery does not know how to handle OS `{os}`\"\n-                        );\n-                    }\n                 }\n             }\n             PthreadDtors(state) => {"}, {"sha": "d018a7ea252b7ec10e539b4ca4338213a26eab63", "filename": "src/tools/miri/src/shims/unix/foreign_items.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fbdf926e7010f8bdd9e773831ecf5dbda058bd21/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbdf926e7010f8bdd9e773831ecf5dbda058bd21/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs?ref=fbdf926e7010f8bdd9e773831ecf5dbda058bd21", "patch": "@@ -596,13 +596,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             // Platform-specific shims\n             _ => {\n                 let target_os = &*this.tcx.sess.target.os;\n-                match target_os {\n-                    \"android\" => return shims::unix::android::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n-                    \"freebsd\" => return shims::unix::freebsd::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n-                    \"linux\" => return shims::unix::linux::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n-                    \"macos\" => return shims::unix::macos::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n-                    _ => panic!(\"unsupported Unix OS {target_os}\"),\n-                }\n+                return match target_os {\n+                    \"android\" => shims::unix::android::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n+                    \"freebsd\" => shims::unix::freebsd::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n+                    \"linux\" => shims::unix::linux::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n+                    \"macos\" => shims::unix::macos::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n+                    _ => Ok(EmulateByNameResult::NotSupported),\n+                };\n             }\n         };\n "}, {"sha": "3540c75b73a12ceacef1485eeb3d4b4d2818bf5d", "filename": "src/tools/miri/tests/extern-so/fail/function_not_in_so.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fbdf926e7010f8bdd9e773831ecf5dbda058bd21/src%2Ftools%2Fmiri%2Ftests%2Fextern-so%2Ffail%2Ffunction_not_in_so.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbdf926e7010f8bdd9e773831ecf5dbda058bd21/src%2Ftools%2Fmiri%2Ftests%2Fextern-so%2Ffail%2Ffunction_not_in_so.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fextern-so%2Ffail%2Ffunction_not_in_so.rs?ref=fbdf926e7010f8bdd9e773831ecf5dbda058bd21", "patch": "@@ -1,12 +1,13 @@\n //@only-target-linux\n //@only-on-host\n+//@normalize-stderr-test: \"OS `.*`\" -> \"$$OS\"\n \n extern \"C\" {\n     fn foo();\n }\n \n fn main() {\n     unsafe {\n-        foo(); //~ ERROR: unsupported operation: can't call foreign function: foo\n+        foo(); //~ ERROR: unsupported operation: can't call foreign function `foo`\n     }\n }"}, {"sha": "e9bc322047195ff89879969e76ba05a95b7a91de", "filename": "src/tools/miri/tests/extern-so/fail/function_not_in_so.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fbdf926e7010f8bdd9e773831ecf5dbda058bd21/src%2Ftools%2Fmiri%2Ftests%2Fextern-so%2Ffail%2Ffunction_not_in_so.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fbdf926e7010f8bdd9e773831ecf5dbda058bd21/src%2Ftools%2Fmiri%2Ftests%2Fextern-so%2Ffail%2Ffunction_not_in_so.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fextern-so%2Ffail%2Ffunction_not_in_so.stderr?ref=fbdf926e7010f8bdd9e773831ecf5dbda058bd21", "patch": "@@ -1,8 +1,8 @@\n-error: unsupported operation: can't call foreign function: foo\n+error: unsupported operation: can't call foreign function `foo` on $OS\n   --> $DIR/function_not_in_so.rs:LL:CC\n    |\n LL |         foo();\n-   |         ^^^^^ can't call foreign function: foo\n+   |         ^^^^^ can't call foreign function `foo` on $OS\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n    = note: BACKTRACE:"}, {"sha": "624ad1bda582f21f00e0330287eb744ece22711f", "filename": "src/tools/miri/tests/fail/alloc/no_global_allocator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fbdf926e7010f8bdd9e773831ecf5dbda058bd21/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fno_global_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbdf926e7010f8bdd9e773831ecf5dbda058bd21/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fno_global_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fno_global_allocator.rs?ref=fbdf926e7010f8bdd9e773831ecf5dbda058bd21", "patch": "@@ -1,3 +1,4 @@\n+//@normalize-stderr-test: \"OS `.*`\" -> \"$$OS\"\n // Make sure we pretend the allocation symbols don't exist when there is no allocator\n \n #![feature(lang_items, start)]\n@@ -10,7 +11,7 @@ extern \"Rust\" {\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n     unsafe {\n-        __rust_alloc(1, 1); //~ERROR: unsupported operation: can't call foreign function: __rust_alloc\n+        __rust_alloc(1, 1); //~ERROR: unsupported operation: can't call foreign function `__rust_alloc`\n     }\n \n     0"}, {"sha": "fe6a22fadc9e2ea85f1f3ce058ae340fb90bee3d", "filename": "src/tools/miri/tests/fail/alloc/no_global_allocator.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fbdf926e7010f8bdd9e773831ecf5dbda058bd21/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fno_global_allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fbdf926e7010f8bdd9e773831ecf5dbda058bd21/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fno_global_allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fno_global_allocator.stderr?ref=fbdf926e7010f8bdd9e773831ecf5dbda058bd21", "patch": "@@ -1,8 +1,8 @@\n-error: unsupported operation: can't call foreign function: __rust_alloc\n+error: unsupported operation: can't call foreign function `__rust_alloc` on $OS\n   --> $DIR/no_global_allocator.rs:LL:CC\n    |\n LL |         __rust_alloc(1, 1);\n-   |         ^^^^^^^^^^^^^^^^^^ can't call foreign function: __rust_alloc\n+   |         ^^^^^^^^^^^^^^^^^^ can't call foreign function `__rust_alloc` on $OS\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n    = note: BACKTRACE:"}, {"sha": "44f032fbabe0f57f548727b9c503ef9c95cfa912", "filename": "src/tools/miri/tests/fail/unsupported_foreign_function.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fbdf926e7010f8bdd9e773831ecf5dbda058bd21/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funsupported_foreign_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbdf926e7010f8bdd9e773831ecf5dbda058bd21/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funsupported_foreign_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funsupported_foreign_function.rs?ref=fbdf926e7010f8bdd9e773831ecf5dbda058bd21", "patch": "@@ -1,9 +1,11 @@\n+//@normalize-stderr-test: \"OS `.*`\" -> \"$$OS\"\n+\n fn main() {\n     extern \"Rust\" {\n         fn foo();\n     }\n \n     unsafe {\n-        foo(); //~ ERROR: unsupported operation: can't call foreign function: foo\n+        foo(); //~ ERROR: unsupported operation: can't call foreign function `foo`\n     }\n }"}, {"sha": "519f6d182d7d8b3d63fe2748b6a24fbc31287a2d", "filename": "src/tools/miri/tests/fail/unsupported_foreign_function.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fbdf926e7010f8bdd9e773831ecf5dbda058bd21/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funsupported_foreign_function.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fbdf926e7010f8bdd9e773831ecf5dbda058bd21/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funsupported_foreign_function.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funsupported_foreign_function.stderr?ref=fbdf926e7010f8bdd9e773831ecf5dbda058bd21", "patch": "@@ -1,8 +1,8 @@\n-error: unsupported operation: can't call foreign function: foo\n+error: unsupported operation: can't call foreign function `foo` on $OS\n   --> $DIR/unsupported_foreign_function.rs:LL:CC\n    |\n LL |         foo();\n-   |         ^^^^^ can't call foreign function: foo\n+   |         ^^^^^ can't call foreign function `foo` on $OS\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n    = note: BACKTRACE:"}, {"sha": "6ef842c9ccb649222c65535ac228725b937c3d01", "filename": "src/tools/miri/tests/fail/unsupported_incomplete_function.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fbdf926e7010f8bdd9e773831ecf5dbda058bd21/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funsupported_incomplete_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbdf926e7010f8bdd9e773831ecf5dbda058bd21/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funsupported_incomplete_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funsupported_incomplete_function.rs?ref=fbdf926e7010f8bdd9e773831ecf5dbda058bd21", "patch": "@@ -1,10 +1,11 @@\n //! `signal()` is special on Linux and macOS that it's only supported within libstd.\n //! The implementation is not complete enough to permit user code to call it.\n //@ignore-target-windows: No libc on Windows\n+//@normalize-stderr-test: \"OS `.*`\" -> \"$$OS\"\n \n fn main() {\n     unsafe {\n         libc::signal(libc::SIGPIPE, libc::SIG_IGN);\n-        //~^ ERROR: unsupported operation: can't call foreign function: signal\n+        //~^ ERROR: unsupported operation: can't call foreign function `signal`\n     }\n }", "previous_filename": "src/tools/miri/tests/fail/unsupported_signal.rs"}, {"sha": "ec2bba61172895c0a5277c4cd475051b67b1e95d", "filename": "src/tools/miri/tests/fail/unsupported_incomplete_function.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fbdf926e7010f8bdd9e773831ecf5dbda058bd21/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funsupported_incomplete_function.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fbdf926e7010f8bdd9e773831ecf5dbda058bd21/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funsupported_incomplete_function.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funsupported_incomplete_function.stderr?ref=fbdf926e7010f8bdd9e773831ecf5dbda058bd21", "patch": "@@ -1,12 +1,12 @@\n-error: unsupported operation: can't call foreign function: signal\n-  --> $DIR/unsupported_signal.rs:LL:CC\n+error: unsupported operation: can't call foreign function `signal` on $OS\n+  --> $DIR/unsupported_incomplete_function.rs:LL:CC\n    |\n LL |         libc::signal(libc::SIGPIPE, libc::SIG_IGN);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't call foreign function: signal\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't call foreign function `signal` on $OS\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/unsupported_signal.rs:LL:CC\n+   = note: inside `main` at $DIR/unsupported_incomplete_function.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n ", "previous_filename": "src/tools/miri/tests/fail/unsupported_signal.stderr"}, {"sha": "b8301c507724cb7909f089f0529a114ce6e65c04", "filename": "src/tools/miri/tests/panic/unsupported_foreign_function.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fbdf926e7010f8bdd9e773831ecf5dbda058bd21/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Funsupported_foreign_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbdf926e7010f8bdd9e773831ecf5dbda058bd21/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Funsupported_foreign_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Funsupported_foreign_function.rs?ref=fbdf926e7010f8bdd9e773831ecf5dbda058bd21", "patch": "@@ -1,4 +1,5 @@\n //@compile-flags: -Zmiri-panic-on-unsupported\n+//@normalize-stderr-test: \"OS `.*`\" -> \"$$OS\"\n \n fn main() {\n     extern \"Rust\" {"}, {"sha": "a49dbdae58a6fd873c45218d447f428a23a9b08d", "filename": "src/tools/miri/tests/panic/unsupported_foreign_function.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbdf926e7010f8bdd9e773831ecf5dbda058bd21/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Funsupported_foreign_function.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fbdf926e7010f8bdd9e773831ecf5dbda058bd21/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Funsupported_foreign_function.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Funsupported_foreign_function.stderr?ref=fbdf926e7010f8bdd9e773831ecf5dbda058bd21", "patch": "@@ -1,2 +1,2 @@\n-thread 'main' panicked at 'unsupported Miri functionality: can't call foreign function: foo', $DIR/unsupported_foreign_function.rs:LL:CC\n+thread 'main' panicked at 'unsupported Miri functionality: can't call foreign function `foo` on $OS', $DIR/unsupported_foreign_function.rs:LL:CC\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"}]}