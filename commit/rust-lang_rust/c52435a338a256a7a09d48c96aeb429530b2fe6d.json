{"sha": "c52435a338a256a7a09d48c96aeb429530b2fe6d", "node_id": "C_kwDOAAsO6NoAKGM1MjQzNWEzMzhhMjU2YTdhMDlkNDhjOTZhZWI0Mjk1MzBiMmZlNmQ", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-02-10T16:49:28Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-02-10T17:23:09Z"}, "message": "cleanup and fix naming", "tree": {"sha": "394a4a76705999cf5d14bd03f2af63302b8f576b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/394a4a76705999cf5d14bd03f2af63302b8f576b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c52435a338a256a7a09d48c96aeb429530b2fe6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c52435a338a256a7a09d48c96aeb429530b2fe6d", "html_url": "https://github.com/rust-lang/rust/commit/c52435a338a256a7a09d48c96aeb429530b2fe6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c52435a338a256a7a09d48c96aeb429530b2fe6d/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "414eb48b66ff694126bb12cf4ab8aed06ca4965e", "url": "https://api.github.com/repos/rust-lang/rust/commits/414eb48b66ff694126bb12cf4ab8aed06ca4965e", "html_url": "https://github.com/rust-lang/rust/commit/414eb48b66ff694126bb12cf4ab8aed06ca4965e"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "6c9c26faef6aa7a4153f444035fd96f1a1299493", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c52435a338a256a7a09d48c96aeb429530b2fe6d/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c52435a338a256a7a09d48c96aeb429530b2fe6d/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=c52435a338a256a7a09d48c96aeb429530b2fe6d", "patch": "@@ -157,7 +157,7 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n                 ignore_fmt.add(&format!(\"!/{}\", untracked_path)).expect(&untracked_path);\n             }\n             if !check && paths.is_empty() {\n-                match get_modified_rs_files(&build) {\n+                match get_modified_rs_files(build) {\n                     Ok(Some(files)) => {\n                         for file in files {\n                             println!(\"formatting modified file {file}\");"}, {"sha": "c648b2f12f1012a89dfe5e5d0b931c0d773517ab", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c52435a338a256a7a09d48c96aeb429530b2fe6d/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c52435a338a256a7a09d48c96aeb429530b2fe6d/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=c52435a338a256a7a09d48c96aeb429530b2fe6d", "patch": "@@ -525,7 +525,9 @@ pub fn test_opts(config: &Config) -> test::TestOpts {\n pub fn make_tests(config: &Config, tests: &mut Vec<test::TestDescAndFn>) {\n     debug!(\"making tests from {:?}\", config.src_base.display());\n     let inputs = common_inputs_stamp(config);\n-    let modified_tests = modified_tests(config, &config.src_base);\n+    let modified_tests = modified_tests(config, &config.src_base).unwrap_or_else(|err| {\n+        panic!(\"modified_tests got error from dir: {}, error: {}\", config.src_base.display(), err)\n+    });\n     collect_tests_from_dir(\n         config,\n         &config.src_base,\n@@ -573,13 +575,14 @@ fn common_inputs_stamp(config: &Config) -> Stamp {\n     stamp\n }\n \n-fn modified_tests(config: &Config, dir: &Path) -> Vec<PathBuf> {\n+fn modified_tests(config: &Config, dir: &Path) -> Result<Vec<PathBuf>, String> {\n     if !config.only_modified {\n-        return vec![];\n+        return Ok(vec![]);\n     }\n-    let Ok(Some(files)) = get_git_modified_files(Some(dir), &vec![\"rs\", \"stderr\", \"fixed\"]) else { return vec![]; };\n+    let files =\n+        get_git_modified_files(Some(dir), &vec![\"rs\", \"stderr\", \"fixed\"])?.unwrap_or(vec![]);\n     // Add new test cases to the list, it will be convenient in daily development.\n-    let Ok(Some(untracked_files)) = get_git_untracked_files(None) else { return vec![]; };\n+    let untracked_files = get_git_untracked_files(None)?.unwrap_or(vec![]);\n \n     let all_paths = [&files[..], &untracked_files[..]].concat();\n     let full_paths = {\n@@ -591,7 +594,7 @@ fn modified_tests(config: &Config, dir: &Path) -> Vec<PathBuf> {\n         full_paths.sort_unstable();\n         full_paths\n     };\n-    full_paths\n+    Ok(full_paths)\n }\n \n fn collect_tests_from_dir(\n@@ -600,7 +603,7 @@ fn collect_tests_from_dir(\n     relative_dir_path: &Path,\n     inputs: &Stamp,\n     tests: &mut Vec<test::TestDescAndFn>,\n-    only_modified: &Vec<PathBuf>,\n+    modified_tests: &Vec<PathBuf>,\n ) -> io::Result<()> {\n     // Ignore directories that contain a file named `compiletest-ignore-dir`.\n     if dir.join(\"compiletest-ignore-dir\").exists() {\n@@ -631,7 +634,7 @@ fn collect_tests_from_dir(\n         let file = file?;\n         let file_path = file.path();\n         let file_name = file.file_name();\n-        if is_test(&file_name) && (!config.only_modified || only_modified.contains(&file_path)) {\n+        if is_test(&file_name) && (!config.only_modified || modified_tests.contains(&file_path)) {\n             debug!(\"found test file: {:?}\", file_path.display());\n             let paths =\n                 TestPaths { file: file_path, relative_dir: relative_dir_path.to_path_buf() };\n@@ -647,7 +650,7 @@ fn collect_tests_from_dir(\n                     &relative_file_path,\n                     inputs,\n                     tests,\n-                    only_modified,\n+                    modified_tests,\n                 )?;\n             }\n         } else {"}]}