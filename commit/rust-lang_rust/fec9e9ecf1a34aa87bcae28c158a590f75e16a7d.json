{"sha": "fec9e9ecf1a34aa87bcae28c158a590f75e16a7d", "node_id": "C_kwDOAAsO6NoAKGZlYzllOWVjZjFhMzRhYTg3YmNhZTI4YzE1OGE1OTBmNzVlMTZhN2Q", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-18T13:25:55Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-18T13:25:55Z"}, "message": "don't clone Copy types", "tree": {"sha": "c17c5bf75a035be95b9fa2166308dd39a6d76a3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c17c5bf75a035be95b9fa2166308dd39a6d76a3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fec9e9ecf1a34aa87bcae28c158a590f75e16a7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fec9e9ecf1a34aa87bcae28c158a590f75e16a7d", "html_url": "https://github.com/rust-lang/rust/commit/fec9e9ecf1a34aa87bcae28c158a590f75e16a7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fec9e9ecf1a34aa87bcae28c158a590f75e16a7d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35a99eef32a2b7b9d8e77dde539f869e522d181f", "url": "https://api.github.com/repos/rust-lang/rust/commits/35a99eef32a2b7b9d8e77dde539f869e522d181f", "html_url": "https://github.com/rust-lang/rust/commit/35a99eef32a2b7b9d8e77dde539f869e522d181f"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "c780d047992cdb994c709277bbe81443bc3b45e9", "filename": "compiler/rustc_borrowck/src/constraints/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fec9e9ecf1a34aa87bcae28c158a590f75e16a7d/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec9e9ecf1a34aa87bcae28c158a590f75e16a7d/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fgraph.rs?ref=fec9e9ecf1a34aa87bcae28c158a590f75e16a7d", "patch": "@@ -148,7 +148,7 @@ impl<'s, 'tcx, D: ConstraintGraphDirecton> Iterator for Edges<'s, 'tcx, D> {\n         if let Some(p) = self.pointer {\n             self.pointer = self.graph.next_constraints[p];\n \n-            Some(self.constraints[p].clone())\n+            Some(self.constraints[p])\n         } else if let Some(next_static_idx) = self.next_static_idx {\n             self.next_static_idx = if next_static_idx == (self.graph.first_constraints.len() - 1) {\n                 None"}, {"sha": "8d4a720f8ce9ba8e3b5fa2d10528ae392d4ae1cd", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fec9e9ecf1a34aa87bcae28c158a590f75e16a7d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec9e9ecf1a34aa87bcae28c158a590f75e16a7d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=fec9e9ecf1a34aa87bcae28c158a590f75e16a7d", "patch": "@@ -612,7 +612,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n \n         let locations = location.to_locations();\n         for constraint in constraints.outlives().iter() {\n-            let mut constraint = constraint.clone();\n+            let mut constraint = *constraint;\n             constraint.locations = locations;\n             if let ConstraintCategory::Return(_)\n             | ConstraintCategory::UseAsConst"}, {"sha": "8cdd12e4e347abfae0b9b5fb6347d98459187d28", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fec9e9ecf1a34aa87bcae28c158a590f75e16a7d/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec9e9ecf1a34aa87bcae28c158a590f75e16a7d/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=fec9e9ecf1a34aa87bcae28c158a590f75e16a7d", "patch": "@@ -1548,7 +1548,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                             cause,\n                             expected,\n                             found,\n-                            coercion_error.clone(),\n+                            coercion_error,\n                             fcx,\n                             parent_id,\n                             expression,\n@@ -1567,7 +1567,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                             cause,\n                             expected,\n                             found,\n-                            coercion_error.clone(),\n+                            coercion_error,\n                             fcx,\n                             id,\n                             expression,\n@@ -1583,7 +1583,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                             cause,\n                             expected,\n                             found,\n-                            coercion_error.clone(),\n+                            coercion_error,\n                         );\n                     }\n                 }"}, {"sha": "4ac24aca25a5738b0f3768788af695e34424150f", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fec9e9ecf1a34aa87bcae28c158a590f75e16a7d/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec9e9ecf1a34aa87bcae28c158a590f75e16a7d/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=fec9e9ecf1a34aa87bcae28c158a590f75e16a7d", "patch": "@@ -163,7 +163,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let expr = expr.peel_drop_temps();\n         let cause = self.misc(expr.span);\n         let expr_ty = self.resolve_vars_with_obligations(checked_ty);\n-        let mut err = self.err_ctxt().report_mismatched_types(&cause, expected, expr_ty, e.clone());\n+        let mut err = self.err_ctxt().report_mismatched_types(&cause, expected, expr_ty, e);\n \n         let is_insufficiently_polymorphic =\n             matches!(e, TypeError::RegionsInsufficientlyPolymorphic(..));"}, {"sha": "1d0c7f5b7a388fab828bc2cfddffcb74da82bda9", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fec9e9ecf1a34aa87bcae28c158a590f75e16a7d/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec9e9ecf1a34aa87bcae28c158a590f75e16a7d/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=fec9e9ecf1a34aa87bcae28c158a590f75e16a7d", "patch": "@@ -127,7 +127,7 @@ impl<'tcx> Queries<'tcx> {\n \n     pub fn register_plugins(&self) -> Result<&Query<(ast::Crate, Lrc<LintStore>)>> {\n         self.register_plugins.compute(|| {\n-            let crate_name = self.crate_name()?.peek().clone();\n+            let crate_name = *self.crate_name()?.peek();\n             let krate = self.parse()?.take();\n \n             let empty: &(dyn Fn(&Session, &mut LintStore) + Sync + Send) = &|_, _| {};"}, {"sha": "cd19e65b6fc3275d5b608569ec9e08136c579c36", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fec9e9ecf1a34aa87bcae28c158a590f75e16a7d/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec9e9ecf1a34aa87bcae28c158a590f75e16a7d/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=fec9e9ecf1a34aa87bcae28c158a590f75e16a7d", "patch": "@@ -270,7 +270,7 @@ impl<'tcx> LateLintPass<'tcx> for NonShorthandFieldPatterns {\n                             |lint| {\n                                 let suggested_ident =\n                                     format!(\"{}{}\", binding_annot.prefix_str(), ident);\n-                                lint.set_arg(\"ident\", ident.clone()).span_suggestion(\n+                                lint.set_arg(\"ident\", ident).span_suggestion(\n                                     fieldpat.span,\n                                     fluent::suggestion,\n                                     suggested_ident,\n@@ -2052,7 +2052,7 @@ impl KeywordIdents {\n             ident.span,\n             fluent::lint_builtin_keyword_idents,\n             |lint| {\n-                lint.set_arg(\"kw\", ident.clone()).set_arg(\"next\", next_edition).span_suggestion(\n+                lint.set_arg(\"kw\", ident).set_arg(\"next\", next_edition).span_suggestion(\n                     ident.span,\n                     fluent::suggestion,\n                     format!(\"r#{}\", ident),"}, {"sha": "219753dbd16bf041d30d75e8504fc0294d31d246", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fec9e9ecf1a34aa87bcae28c158a590f75e16a7d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec9e9ecf1a34aa87bcae28c158a590f75e16a7d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=fec9e9ecf1a34aa87bcae28c158a590f75e16a7d", "patch": "@@ -332,7 +332,7 @@ impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for Symbol {\n                     s.emit_str(self.as_str());\n                 }\n                 Entry::Occupied(o) => {\n-                    let x = o.get().clone();\n+                    let x = *o.get();\n                     s.emit_u8(SYMBOL_OFFSET);\n                     s.emit_usize(x);\n                 }"}, {"sha": "c4e605c18521746f38c1633396243095c69a5f71", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fec9e9ecf1a34aa87bcae28c158a590f75e16a7d/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec9e9ecf1a34aa87bcae28c158a590f75e16a7d/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=fec9e9ecf1a34aa87bcae28c158a590f75e16a7d", "patch": "@@ -965,7 +965,7 @@ impl<'a, 'tcx> Encodable<CacheEncoder<'a, 'tcx>> for Symbol {\n                     s.emit_str(self.as_str());\n                 }\n                 Entry::Occupied(o) => {\n-                    let x = o.get().clone();\n+                    let x = *o.get();\n                     s.emit_u8(SYMBOL_OFFSET);\n                     s.emit_usize(x);\n                 }"}, {"sha": "4861ee746aae3158de435a078c5d83a2143d454a", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fec9e9ecf1a34aa87bcae28c158a590f75e16a7d/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec9e9ecf1a34aa87bcae28c158a590f75e16a7d/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=fec9e9ecf1a34aa87bcae28c158a590f75e16a7d", "patch": "@@ -1491,7 +1491,7 @@ impl<'a> Resolver<'a> {\n             label_res_map: self.label_res_map.clone(),\n             lifetimes_res_map: self.lifetimes_res_map.clone(),\n             extra_lifetime_params_map: self.extra_lifetime_params_map.clone(),\n-            next_node_id: self.next_node_id.clone(),\n+            next_node_id: self.next_node_id,\n             node_id_to_def_id: self.node_id_to_def_id.clone(),\n             def_id_to_node_id: self.def_id_to_node_id.clone(),\n             trait_map: self.trait_map.clone(),"}, {"sha": "929d813bfc35da05c5adf627781b4530ab2ab71c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fec9e9ecf1a34aa87bcae28c158a590f75e16a7d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec9e9ecf1a34aa87bcae28c158a590f75e16a7d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=fec9e9ecf1a34aa87bcae28c158a590f75e16a7d", "patch": "@@ -1574,7 +1574,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     &error.obligation.cause,\n                     expected_found.expected,\n                     expected_found.found,\n-                    err.clone(),\n+                    *err,\n                 )\n                 .emit();\n             }\n@@ -1583,7 +1583,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     &error.obligation.cause,\n                     expected_found.expected,\n                     expected_found.found,\n-                    err.clone(),\n+                    *err,\n                 );\n                 let code = error.obligation.cause.code().peel_derives().peel_match_impls();\n                 if let ObligationCauseCode::BindingObligation(..)"}, {"sha": "78fcceb5f2cb512a3d7ec17e201577a988ab0e9f", "filename": "compiler/rustc_transmute/src/layout/nfa.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fec9e9ecf1a34aa87bcae28c158a590f75e16a7d/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fnfa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec9e9ecf1a34aa87bcae28c158a590f75e16a7d/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fnfa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fnfa.rs?ref=fec9e9ecf1a34aa87bcae28c158a590f75e16a7d", "patch": "@@ -123,7 +123,7 @@ where\n             let fix_state = |state| if state == other.start { self.accepting } else { state };\n             let entry = transitions.entry(fix_state(source)).or_default();\n             for (edge, destinations) in transition {\n-                let entry = entry.entry(edge.clone()).or_default();\n+                let entry = entry.entry(edge).or_default();\n                 for destination in destinations {\n                     entry.insert(fix_state(destination));\n                 }\n@@ -147,7 +147,7 @@ where\n             }\n             let entry = transitions.entry(source).or_default();\n             for (edge, destinations) in transition {\n-                let entry = entry.entry(edge.clone()).or_default();\n+                let entry = entry.entry(*edge).or_default();\n                 for &(mut destination) in destinations {\n                     // if dest is accepting state of `other`, replace with accepting state of `self`\n                     if destination == other.accepting {"}]}