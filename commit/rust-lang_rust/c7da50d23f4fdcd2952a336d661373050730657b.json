{"sha": "c7da50d23f4fdcd2952a336d661373050730657b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZGE1MGQyM2Y0ZmRjZDI5NTJhMzM2ZDY2MTM3MzA1MDczMDY1N2I=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-06-15T19:07:46Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-06-20T18:12:43Z"}, "message": "Get option name from symbol instead of snippet", "tree": {"sha": "271fdf95ac4c3d375ed2fb53d86110732c5929fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/271fdf95ac4c3d375ed2fb53d86110732c5929fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7da50d23f4fdcd2952a336d661373050730657b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7da50d23f4fdcd2952a336d661373050730657b", "html_url": "https://github.com/rust-lang/rust/commit/c7da50d23f4fdcd2952a336d661373050730657b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7da50d23f4fdcd2952a336d661373050730657b/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c5b66f3287c95df7e1aaca1d2a0576eed69f7dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c5b66f3287c95df7e1aaca1d2a0576eed69f7dd", "html_url": "https://github.com/rust-lang/rust/commit/7c5b66f3287c95df7e1aaca1d2a0576eed69f7dd"}], "stats": {"total": 36, "additions": 19, "deletions": 17}, "files": [{"sha": "5bb240858029086ef7d20b317c0182de707c38d7", "filename": "src/librustc_builtin_macros/asm.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c7da50d23f4fdcd2952a336d661373050730657b/src%2Flibrustc_builtin_macros%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7da50d23f4fdcd2952a336d661373050730657b/src%2Flibrustc_builtin_macros%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fasm.rs?ref=c7da50d23f4fdcd2952a336d661373050730657b", "patch": "@@ -289,23 +289,25 @@ fn parse_args<'a>(\n     Ok(args)\n }\n \n-fn err_duplicate_option<'a>(p: &mut Parser<'a>, span: Span) {\n-    let mut err = if let Ok(snippet) = p.sess.source_map().span_to_snippet(span) {\n-        p.sess\n-            .span_diagnostic\n-            .struct_span_err(span, &format!(\"the `{}` option was already provided\", snippet))\n-    } else {\n-        p.sess.span_diagnostic.struct_span_err(span, \"this option was already provided\")\n-    };\n+fn err_duplicate_option<'a>(p: &mut Parser<'a>, symbol: Symbol, span: Span) {\n+    let mut err = p\n+        .sess\n+        .span_diagnostic\n+        .struct_span_err(span, &format!(\"the `{}` option was already provided\", symbol));\n     err.span_label(span, \"remove this option\");\n     err.emit();\n }\n \n-fn try_set_option<'a>(p: &mut Parser<'a>, args: &mut AsmArgs, option: ast::InlineAsmOptions) {\n+fn try_set_option<'a>(\n+    p: &mut Parser<'a>,\n+    args: &mut AsmArgs,\n+    symbol: Symbol,\n+    option: ast::InlineAsmOptions,\n+) {\n     if !args.option_is_set(option) {\n         args.options |= option;\n     } else {\n-        err_duplicate_option(p, p.prev_token.span);\n+        err_duplicate_option(p, symbol, p.prev_token.span);\n     }\n }\n \n@@ -316,20 +318,20 @@ fn parse_options<'a>(p: &mut Parser<'a>, args: &mut AsmArgs) -> Result<(), Diagn\n \n     while !p.eat(&token::CloseDelim(token::DelimToken::Paren)) {\n         if p.eat(&token::Ident(sym::pure, false)) {\n-            try_set_option(p, args, ast::InlineAsmOptions::PURE);\n+            try_set_option(p, args, sym::pure, ast::InlineAsmOptions::PURE);\n         } else if p.eat(&token::Ident(sym::nomem, false)) {\n-            try_set_option(p, args, ast::InlineAsmOptions::NOMEM);\n+            try_set_option(p, args, sym::nomem, ast::InlineAsmOptions::NOMEM);\n         } else if p.eat(&token::Ident(sym::readonly, false)) {\n-            try_set_option(p, args, ast::InlineAsmOptions::READONLY);\n+            try_set_option(p, args, sym::readonly, ast::InlineAsmOptions::READONLY);\n         } else if p.eat(&token::Ident(sym::preserves_flags, false)) {\n-            try_set_option(p, args, ast::InlineAsmOptions::PRESERVES_FLAGS);\n+            try_set_option(p, args, sym::preserves_flags, ast::InlineAsmOptions::PRESERVES_FLAGS);\n         } else if p.eat(&token::Ident(sym::noreturn, false)) {\n-            try_set_option(p, args, ast::InlineAsmOptions::NORETURN);\n+            try_set_option(p, args, sym::noreturn, ast::InlineAsmOptions::NORETURN);\n         } else if p.eat(&token::Ident(sym::nostack, false)) {\n-            try_set_option(p, args, ast::InlineAsmOptions::NOSTACK);\n+            try_set_option(p, args, sym::nostack, ast::InlineAsmOptions::NOSTACK);\n         } else {\n             p.expect(&token::Ident(sym::att_syntax, false))?;\n-            try_set_option(p, args, ast::InlineAsmOptions::ATT_SYNTAX);\n+            try_set_option(p, args, sym::att_syntax, ast::InlineAsmOptions::ATT_SYNTAX);\n         }\n \n         // Allow trailing commas"}]}