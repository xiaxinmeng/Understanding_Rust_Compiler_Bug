{"sha": "33cf8fafd878330bf65f4512e66c03ff88a93659", "node_id": "C_kwDOAAsO6NoAKDMzY2Y4ZmFmZDg3ODMzMGJmNjVmNDUxMmU2NmMwM2ZmODhhOTM2NTk", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-02-22T18:55:24Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-02-22T18:55:24Z"}, "message": "Sync from rust 03a8cc7df1d65554a4d40825b0490c93ac0f0236", "tree": {"sha": "4954070efe7a49409836fd0f759d5960f59d26ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4954070efe7a49409836fd0f759d5960f59d26ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33cf8fafd878330bf65f4512e66c03ff88a93659", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33cf8fafd878330bf65f4512e66c03ff88a93659", "html_url": "https://github.com/rust-lang/rust/commit/33cf8fafd878330bf65f4512e66c03ff88a93659", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33cf8fafd878330bf65f4512e66c03ff88a93659/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2aad0066ba529ddd195b4f5ab0579879c8e9522f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2aad0066ba529ddd195b4f5ab0579879c8e9522f", "html_url": "https://github.com/rust-lang/rust/commit/2aad0066ba529ddd195b4f5ab0579879c8e9522f"}, {"sha": "d34bcdd49c1d584487bc69e9b44e8b3fd957f4a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d34bcdd49c1d584487bc69e9b44e8b3fd957f4a7", "html_url": "https://github.com/rust-lang/rust/commit/d34bcdd49c1d584487bc69e9b44e8b3fd957f4a7"}], "stats": {"total": 47, "additions": 26, "deletions": 21}, "files": [{"sha": "a249e5fa8ac9c78b9f996f25d976e7585381afca", "filename": "src/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33cf8fafd878330bf65f4512e66c03ff88a93659/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33cf8fafd878330bf65f4512e66c03ff88a93659/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=33cf8fafd878330bf65f4512e66c03ff88a93659", "patch": "@@ -117,7 +117,7 @@ impl<'tcx> FunctionCx<'_, '_, 'tcx> {\n             .unzip();\n         let return_layout = self.layout_of(return_ty);\n         let return_tys = if let ty::Tuple(tup) = return_ty.kind() {\n-            tup.types().map(|ty| AbiParam::new(self.clif_type(ty).unwrap())).collect()\n+            tup.iter().map(|ty| AbiParam::new(self.clif_type(ty).unwrap())).collect()\n         } else {\n             vec![AbiParam::new(self.clif_type(return_ty).unwrap())]\n         };\n@@ -199,7 +199,7 @@ pub(crate) fn codegen_fn_prelude<'tcx>(fx: &mut FunctionCx<'_, '_, 'tcx>, start_\n                 };\n \n                 let mut params = Vec::new();\n-                for (i, _arg_ty) in tupled_arg_tys.types().enumerate() {\n+                for (i, _arg_ty) in tupled_arg_tys.iter().enumerate() {\n                     let arg_abi = arg_abis_iter.next().unwrap();\n                     let param =\n                         cvalue_for_param(fx, Some(local), Some(i), arg_abi, &mut block_params_iter);"}, {"sha": "d3e36be3244f1da891df8b93f97b1d6113c50b76", "filename": "src/common.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/33cf8fafd878330bf65f4512e66c03ff88a93659/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33cf8fafd878330bf65f4512e66c03ff88a93659/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=33cf8fafd878330bf65f4512e66c03ff88a93659", "patch": "@@ -90,10 +90,9 @@ fn clif_pair_type_from_ty<'tcx>(\n     ty: Ty<'tcx>,\n ) -> Option<(types::Type, types::Type)> {\n     Some(match ty.kind() {\n-        ty::Tuple(substs) if substs.len() == 2 => {\n-            let mut types = substs.types();\n-            let a = clif_type_from_ty(tcx, types.next().unwrap())?;\n-            let b = clif_type_from_ty(tcx, types.next().unwrap())?;\n+        ty::Tuple(types) if types.len() == 2 => {\n+            let a = clif_type_from_ty(tcx, types[0])?;\n+            let b = clif_type_from_ty(tcx, types[1])?;\n             if a.is_vector() || b.is_vector() {\n                 return None;\n             }"}, {"sha": "4dfb13476c287f7bbe06692b3025f9547097db60", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/33cf8fafd878330bf65f4512e66c03ff88a93659/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33cf8fafd878330bf65f4512e66c03ff88a93659/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=33cf8fafd878330bf65f4512e66c03ff88a93659", "patch": "@@ -654,29 +654,35 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         assert_inhabited | assert_zero_valid | assert_uninit_valid, () {\n             let layout = fx.layout_of(substs.type_at(0));\n             if layout.abi.is_uninhabited() {\n-                with_no_trimmed_paths(|| crate::base::codegen_panic(\n-                    fx,\n-                    &format!(\"attempted to instantiate uninhabited type `{}`\", layout.ty),\n-                    span,\n-                ));\n+                with_no_trimmed_paths!({\n+                    crate::base::codegen_panic(\n+                        fx,\n+                        &format!(\"attempted to instantiate uninhabited type `{}`\", layout.ty),\n+                        span,\n+                    )\n+                });\n                 return;\n             }\n \n             if intrinsic == sym::assert_zero_valid && !layout.might_permit_raw_init(fx, /*zero:*/ true) {\n-                with_no_trimmed_paths(|| crate::base::codegen_panic(\n-                    fx,\n-                    &format!(\"attempted to zero-initialize type `{}`, which is invalid\", layout.ty),\n-                    span,\n-                ));\n+                with_no_trimmed_paths!({\n+                    crate::base::codegen_panic(\n+                        fx,\n+                        &format!(\"attempted to zero-initialize type `{}`, which is invalid\", layout.ty),\n+                        span,\n+                    );\n+                });\n                 return;\n             }\n \n             if intrinsic == sym::assert_uninit_valid && !layout.might_permit_raw_init(fx, /*zero:*/ false) {\n-                with_no_trimmed_paths(|| crate::base::codegen_panic(\n-                    fx,\n-                    &format!(\"attempted to leave type `{}` uninitialized, which is invalid\", layout.ty),\n-                    span,\n-                ));\n+                with_no_trimmed_paths!({\n+                    crate::base::codegen_panic(\n+                        fx,\n+                        &format!(\"attempted to leave type `{}` uninitialized, which is invalid\", layout.ty),\n+                        span,\n+                    )\n+                });\n                 return;\n             }\n         };"}]}