{"sha": "ac1a1d32f60c9bff72bf77d5d94ad8ce36106e00", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMWExZDMyZjYwYzliZmY3MmJmNzdkNWQ5NGFkOGNlMzYxMDZlMDA=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-12T16:05:19Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-16T03:55:55Z"}, "message": "Allow `MultiItemModifier`s to expand into zero or many items", "tree": {"sha": "f12dd16dcbaa1f449bbf14268866fbf3a2630b7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f12dd16dcbaa1f449bbf14268866fbf3a2630b7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac1a1d32f60c9bff72bf77d5d94ad8ce36106e00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac1a1d32f60c9bff72bf77d5d94ad8ce36106e00", "html_url": "https://github.com/rust-lang/rust/commit/ac1a1d32f60c9bff72bf77d5d94ad8ce36106e00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac1a1d32f60c9bff72bf77d5d94ad8ce36106e00/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34191ed1c8484bb2feb14369fd638c2671854c70", "url": "https://api.github.com/repos/rust-lang/rust/commits/34191ed1c8484bb2feb14369fd638c2671854c70", "html_url": "https://github.com/rust-lang/rust/commit/34191ed1c8484bb2feb14369fd638c2671854c70"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "d2185df52e0f4745b3dc269492bda0acc712882d", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ac1a1d32f60c9bff72bf77d5d94ad8ce36106e00/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac1a1d32f60c9bff72bf77d5d94ad8ce36106e00/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=ac1a1d32f60c9bff72bf77d5d94ad8ce36106e00", "patch": "@@ -123,32 +123,34 @@ impl<F> MultiItemDecorator for F\n     }\n }\n \n-// A more flexible ItemKind::Modifier (ItemKind::Modifier should go away, eventually, FIXME).\n-// meta_item is the annotation, item is the item being modified, parent_item\n-// is the impl or trait item is declared in if item is part of such a thing.\n+// `meta_item` is the annotation, and `item` is the item being modified.\n // FIXME Decorators should follow the same pattern too.\n pub trait MultiItemModifier {\n     fn expand(&self,\n               ecx: &mut ExtCtxt,\n               span: Span,\n               meta_item: &ast::MetaItem,\n               item: Annotatable)\n-              -> Annotatable;\n+              -> Vec<Annotatable>;\n }\n \n-impl<F> MultiItemModifier for F\n-    where F: Fn(&mut ExtCtxt,\n-                Span,\n-                &ast::MetaItem,\n-                Annotatable) -> Annotatable\n+impl<F, T> MultiItemModifier for F\n+    where F: Fn(&mut ExtCtxt, Span, &ast::MetaItem, Annotatable) -> T,\n+          T: Into<Vec<Annotatable>>,\n {\n     fn expand(&self,\n               ecx: &mut ExtCtxt,\n               span: Span,\n               meta_item: &ast::MetaItem,\n               item: Annotatable)\n-              -> Annotatable {\n-        (*self)(ecx, span, meta_item, item)\n+              -> Vec<Annotatable> {\n+        (*self)(ecx, span, meta_item, item).into()\n+    }\n+}\n+\n+impl Into<Vec<Annotatable>> for Annotatable {\n+    fn into(self) -> Vec<Annotatable> {\n+        vec![self]\n     }\n }\n "}, {"sha": "69e8bfdcea3c891a2c38e327ee12dbbbb7023079", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac1a1d32f60c9bff72bf77d5d94ad8ce36106e00/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac1a1d32f60c9bff72bf77d5d94ad8ce36106e00/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=ac1a1d32f60c9bff72bf77d5d94ad8ce36106e00", "patch": "@@ -865,7 +865,7 @@ fn expand_annotatable(mut item: Annotatable, fld: &mut MacroExpander) -> SmallVe\n                 });\n                 let modified = mac.expand(fld.cx, attr.span, &attr.node.value, item);\n                 fld.cx.bt_pop();\n-                expand_annotatable(modified, fld)\n+                modified.into_iter().flat_map(|it| expand_annotatable(it, fld)).collect()\n             }\n             _ => unreachable!(),\n         }"}]}