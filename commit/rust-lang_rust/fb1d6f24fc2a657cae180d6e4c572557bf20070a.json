{"sha": "fb1d6f24fc2a657cae180d6e4c572557bf20070a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMWQ2ZjI0ZmMyYTY1N2NhZTE4MGQ2ZTRjNTcyNTU3YmYyMDA3MGE=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-12-18T18:27:17Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-12-20T05:11:03Z"}, "message": "middle: resolve: fix inconsistencies around ExportMap and remove the 2 suffix.", "tree": {"sha": "20c3d048a6a75342031ead8807d0a26f8a1e08a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20c3d048a6a75342031ead8807d0a26f8a1e08a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb1d6f24fc2a657cae180d6e4c572557bf20070a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb1d6f24fc2a657cae180d6e4c572557bf20070a", "html_url": "https://github.com/rust-lang/rust/commit/fb1d6f24fc2a657cae180d6e4c572557bf20070a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb1d6f24fc2a657cae180d6e4c572557bf20070a/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "533822207fd3f34a3d45d99a0eece0112880a845", "url": "https://api.github.com/repos/rust-lang/rust/commits/533822207fd3f34a3d45d99a0eece0112880a845", "html_url": "https://github.com/rust-lang/rust/commit/533822207fd3f34a3d45d99a0eece0112880a845"}], "stats": {"total": 86, "additions": 43, "deletions": 43}, "files": [{"sha": "e3657cf935a4419acd5e943c1f14cdbba04050ff", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fb1d6f24fc2a657cae180d6e4c572557bf20070a/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb1d6f24fc2a657cae180d6e4c572557bf20070a/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=fb1d6f24fc2a657cae180d6e4c572557bf20070a", "patch": "@@ -66,7 +66,7 @@ pub type EncodeInlinedItem<'a> = |ecx: &EncodeContext,\n pub struct EncodeParams<'a, 'tcx: 'a> {\n     pub diag: &'a SpanHandler,\n     pub tcx: &'a ty::ctxt<'tcx>,\n-    pub reexports2: &'a middle::resolve::ExportMap2,\n+    pub reexports: &'a middle::resolve::ExportMap,\n     pub item_symbols: &'a RefCell<NodeMap<String>>,\n     pub link_meta: &'a LinkMeta,\n     pub cstore: &'a cstore::CStore,\n@@ -77,7 +77,7 @@ pub struct EncodeParams<'a, 'tcx: 'a> {\n pub struct EncodeContext<'a, 'tcx: 'a> {\n     pub diag: &'a SpanHandler,\n     pub tcx: &'a ty::ctxt<'tcx>,\n-    pub reexports2: &'a middle::resolve::ExportMap2,\n+    pub reexports: &'a middle::resolve::ExportMap,\n     pub item_symbols: &'a RefCell<NodeMap<String>>,\n     pub link_meta: &'a LinkMeta,\n     pub cstore: &'a cstore::CStore,\n@@ -379,7 +379,7 @@ fn encode_path<PI: Iterator<PathElem>>(rbml_w: &mut Encoder, path: PI) {\n }\n \n fn encode_reexported_static_method(rbml_w: &mut Encoder,\n-                                   exp: &middle::resolve::Export2,\n+                                   exp: &middle::resolve::Export,\n                                    method_def_id: DefId,\n                                    method_name: ast::Name) {\n     debug!(\"(encode reexported static method) {}::{}\",\n@@ -398,7 +398,7 @@ fn encode_reexported_static_method(rbml_w: &mut Encoder,\n \n fn encode_reexported_static_base_methods(ecx: &EncodeContext,\n                                          rbml_w: &mut Encoder,\n-                                         exp: &middle::resolve::Export2)\n+                                         exp: &middle::resolve::Export)\n                                          -> bool {\n     let impl_items = ecx.tcx.impl_items.borrow();\n     match ecx.tcx.inherent_impls.borrow().get(&exp.def_id) {\n@@ -428,7 +428,7 @@ fn encode_reexported_static_base_methods(ecx: &EncodeContext,\n \n fn encode_reexported_static_trait_methods(ecx: &EncodeContext,\n                                           rbml_w: &mut Encoder,\n-                                          exp: &middle::resolve::Export2)\n+                                          exp: &middle::resolve::Export)\n                                           -> bool {\n     match ecx.tcx.trait_items_cache.borrow().get(&exp.def_id) {\n         Some(trait_items) => {\n@@ -449,7 +449,7 @@ fn encode_reexported_static_trait_methods(ecx: &EncodeContext,\n fn encode_reexported_static_methods(ecx: &EncodeContext,\n                                     rbml_w: &mut Encoder,\n                                     mod_path: PathElems,\n-                                    exp: &middle::resolve::Export2) {\n+                                    exp: &middle::resolve::Export) {\n     if let Some(ast_map::NodeItem(item)) = ecx.tcx.map.find(exp.def_id.node) {\n         let original_name = token::get_ident(item.ident);\n \n@@ -519,7 +519,7 @@ fn encode_reexports(ecx: &EncodeContext,\n                     id: NodeId,\n                     path: PathElems) {\n     debug!(\"(encoding info for module) encoding reexports for {}\", id);\n-    match ecx.reexports2.get(&id) {\n+    match ecx.reexports.get(&id) {\n         Some(ref exports) => {\n             debug!(\"(encoding info for module) found reexports for {}\", id);\n             for exp in exports.iter() {\n@@ -2071,7 +2071,7 @@ fn encode_metadata_inner(wr: &mut SeekableMemWriter,\n         item_symbols,\n         diag,\n         tcx,\n-        reexports2,\n+        reexports,\n         cstore,\n         encode_inlined_item,\n         link_meta,\n@@ -2081,7 +2081,7 @@ fn encode_metadata_inner(wr: &mut SeekableMemWriter,\n     let ecx = EncodeContext {\n         diag: diag,\n         tcx: tcx,\n-        reexports2: reexports2,\n+        reexports: reexports,\n         item_symbols: item_symbols,\n         link_meta: link_meta,\n         cstore: cstore,"}, {"sha": "fd5248392a0959e22e45f274f985b790016cf0aa", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fb1d6f24fc2a657cae180d6e4c572557bf20070a/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb1d6f24fc2a657cae180d6e4c572557bf20070a/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=fb1d6f24fc2a657cae180d6e4c572557bf20070a", "patch": "@@ -29,7 +29,7 @@ use syntax::codemap::Span;\n use syntax::parse::token;\n use syntax::visit::{mod, Visitor};\n \n-type Context<'a, 'tcx> = (&'a MethodMap<'tcx>, &'a resolve::ExportMap2);\n+type Context<'a, 'tcx> = (&'a MethodMap<'tcx>, &'a resolve::ExportMap);\n \n /// A set of AST nodes exported by the crate.\n pub type ExportedItems = NodeSet;\n@@ -136,7 +136,7 @@ impl<'v> Visitor<'v> for ParentVisitor {\n \n struct EmbargoVisitor<'a, 'tcx: 'a> {\n     tcx: &'a ty::ctxt<'tcx>,\n-    exp_map2: &'a resolve::ExportMap2,\n+    export_map: &'a resolve::ExportMap,\n \n     // This flag is an indicator of whether the previous item in the\n     // hierarchical chain was exported or not. This is the indicator of whether\n@@ -342,8 +342,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n         // This code is here instead of in visit_item so that the\n         // crate module gets processed as well.\n         if self.prev_exported {\n-            assert!(self.exp_map2.contains_key(&id), \"wut {}\", id);\n-            for export in self.exp_map2[id].iter() {\n+            assert!(self.export_map.contains_key(&id), \"wut {}\", id);\n+            for export in self.export_map[id].iter() {\n                 if is_local(export.def_id) {\n                     self.reexports.insert(export.def_id.node);\n                 }\n@@ -1520,7 +1520,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n }\n \n pub fn check_crate(tcx: &ty::ctxt,\n-                   exp_map2: &resolve::ExportMap2,\n+                   export_map: &resolve::ExportMap,\n                    external_exports: resolve::ExternalExports,\n                    last_private_map: resolve::LastPrivateMap)\n                    -> (ExportedItems, PublicItems) {\n@@ -1561,7 +1561,7 @@ pub fn check_crate(tcx: &ty::ctxt,\n         exported_items: NodeSet::new(),\n         public_items: NodeSet::new(),\n         reexports: NodeSet::new(),\n-        exp_map2: exp_map2,\n+        export_map: export_map,\n         prev_exported: true,\n         prev_public: true,\n     };"}, {"sha": "d72ecb7cd8d96e2f9cdbd120b6072e036549ecdf", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fb1d6f24fc2a657cae180d6e4c572557bf20070a/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb1d6f24fc2a657cae180d6e4c572557bf20070a/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=fb1d6f24fc2a657cae180d6e4c572557bf20070a", "patch": "@@ -97,13 +97,13 @@ struct BindingInfo {\n type BindingMap = HashMap<Name, BindingInfo>;\n \n // Trait method resolution\n-pub type TraitMap = NodeMap<Vec<DefId> >;\n+pub type TraitMap = NodeMap<Vec<DefId>>;\n \n // This is the replacement export map. It maps a module to all of the exports\n // within.\n-pub type ExportMap2 = NodeMap<Vec<Export2>>;\n+pub type ExportMap = NodeMap<Vec<Export>>;\n \n-pub struct Export2 {\n+pub struct Export {\n     pub name: String,        // The name of the target.\n     pub def_id: DefId,       // The definition of the target.\n }\n@@ -946,7 +946,7 @@ struct Resolver<'a> {\n     freevars: RefCell<FreevarMap>,\n     freevars_seen: RefCell<NodeMap<NodeSet>>,\n     capture_mode_map: CaptureModeMap,\n-    export_map2: ExportMap2,\n+    export_map: ExportMap,\n     trait_map: TraitMap,\n     external_exports: ExternalExports,\n     last_private: LastPrivateMap,\n@@ -1061,7 +1061,7 @@ impl<'a> Resolver<'a> {\n             freevars: RefCell::new(NodeMap::new()),\n             freevars_seen: RefCell::new(NodeMap::new()),\n             capture_mode_map: NodeMap::new(),\n-            export_map2: NodeMap::new(),\n+            export_map: NodeMap::new(),\n             trait_map: NodeMap::new(),\n             used_imports: HashSet::new(),\n             used_crates: HashSet::new(),\n@@ -3859,12 +3859,12 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn record_exports_for_module(&mut self, module_: &Module) {\n-        let mut exports2 = Vec::new();\n+        let mut exports = Vec::new();\n \n-        self.add_exports_for_module(&mut exports2, module_);\n+        self.add_exports_for_module(&mut exports, module_);\n         match module_.def_id.get() {\n             Some(def_id) => {\n-                self.export_map2.insert(def_id.node, exports2);\n+                self.export_map.insert(def_id.node, exports);\n                 debug!(\"(computing exports) writing exports for {} (some)\",\n                        def_id.node);\n             }\n@@ -3873,7 +3873,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn add_exports_of_namebindings(&mut self,\n-                                   exports2: &mut Vec<Export2> ,\n+                                   exports: &mut Vec<Export>,\n                                    name: Name,\n                                    namebindings: &NameBindings,\n                                    ns: Namespace) {\n@@ -3882,7 +3882,7 @@ impl<'a> Resolver<'a> {\n                 let name = token::get_name(name);\n                 debug!(\"(computing exports) YES: export '{}' => {}\",\n                        name, d.def_id());\n-                exports2.push(Export2 {\n+                exports.push(Export {\n                     name: name.get().to_string(),\n                     def_id: d.def_id()\n                 });\n@@ -3894,7 +3894,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn add_exports_for_module(&mut self,\n-                              exports2: &mut Vec<Export2> ,\n+                              exports: &mut Vec<Export>,\n                               module_: &Module) {\n         for (name, importresolution) in module_.import_resolutions.borrow().iter() {\n             if !importresolution.is_public {\n@@ -3906,7 +3906,7 @@ impl<'a> Resolver<'a> {\n                     Some(target) => {\n                         debug!(\"(computing exports) maybe export '{}'\",\n                                token::get_name(*name));\n-                        self.add_exports_of_namebindings(exports2,\n+                        self.add_exports_of_namebindings(exports,\n                                                          *name,\n                                                          &*target.bindings,\n                                                          ns)\n@@ -6322,7 +6322,7 @@ pub struct CrateMap {\n     pub def_map: DefMap,\n     pub freevars: RefCell<FreevarMap>,\n     pub capture_mode_map: RefCell<CaptureModeMap>,\n-    pub exp_map2: ExportMap2,\n+    pub export_map: ExportMap,\n     pub trait_map: TraitMap,\n     pub external_exports: ExternalExports,\n     pub last_private_map: LastPrivateMap,\n@@ -6339,7 +6339,7 @@ pub fn resolve_crate(session: &Session,\n         def_map: resolver.def_map,\n         freevars: resolver.freevars,\n         capture_mode_map: RefCell::new(resolver.capture_mode_map),\n-        exp_map2: resolver.export_map2,\n+        export_map: resolver.export_map,\n         trait_map: resolver.trait_map,\n         external_exports: resolver.external_exports,\n         last_private_map: resolver.last_private,"}, {"sha": "0efe4a1a569ecfeb9b85bde91c8287f8b20ffeeb", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb1d6f24fc2a657cae180d6e4c572557bf20070a/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb1d6f24fc2a657cae180d6e4c572557bf20070a/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=fb1d6f24fc2a657cae180d6e4c572557bf20070a", "patch": "@@ -99,7 +99,7 @@ pub const INITIAL_DISCRIMINANT_VALUE: Disr = 0;\n /// The complete set of all analyses described in this module. This is\n /// produced by the driver and fed to trans and later passes.\n pub struct CrateAnalysis<'tcx> {\n-    pub exp_map2: middle::resolve::ExportMap2,\n+    pub export_map: middle::resolve::ExportMap,\n     pub exported_items: middle::privacy::ExportedItems,\n     pub public_items: middle::privacy::PublicItems,\n     pub ty_cx: ty::ctxt<'tcx>,"}, {"sha": "787b869a18f210640fc1effc847b49dbd7388e44", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fb1d6f24fc2a657cae180d6e4c572557bf20070a/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb1d6f24fc2a657cae180d6e4c572557bf20070a/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=fb1d6f24fc2a657cae180d6e4c572557bf20070a", "patch": "@@ -345,7 +345,7 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n         def_map,\n         freevars,\n         capture_mode_map,\n-        exp_map2,\n+        export_map,\n         trait_map,\n         external_exports,\n         last_private_map\n@@ -406,7 +406,7 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n     let maps = (external_exports, last_private_map);\n     let (exported_items, public_items) =\n             time(time_passes, \"privacy checking\", maps, |(a, b)|\n-                 middle::privacy::check_crate(&ty_cx, &exp_map2, a, b));\n+                 middle::privacy::check_crate(&ty_cx, &export_map, a, b));\n \n     time(time_passes, \"intrinsic checking\", (), |_|\n          middle::intrinsicck::check_crate(&ty_cx));\n@@ -447,7 +447,7 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n          lint::check_crate(&ty_cx, &exported_items));\n \n     ty::CrateAnalysis {\n-        exp_map2: exp_map2,\n+        export_map: export_map,\n         ty_cx: ty_cx,\n         exported_items: exported_items,\n         public_items: public_items,"}, {"sha": "b0ef2257a0a15739f3e88820d923230bb69d1867", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fb1d6f24fc2a657cae180d6e4c572557bf20070a/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb1d6f24fc2a657cae180d6e4c572557bf20070a/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=fb1d6f24fc2a657cae180d6e4c572557bf20070a", "patch": "@@ -2938,7 +2938,7 @@ pub fn crate_ctxt_to_encode_parms<'a, 'tcx>(cx: &'a SharedCrateContext<'tcx>,\n     encoder::EncodeParams {\n         diag: cx.sess().diagnostic(),\n         tcx: cx.tcx(),\n-        reexports2: cx.exp_map2(),\n+        reexports: cx.export_map(),\n         item_symbols: cx.item_symbols(),\n         link_meta: cx.link_meta(),\n         cstore: &cx.sess().cstore,\n@@ -3071,7 +3071,7 @@ fn internalize_symbols(cx: &SharedCrateContext, reachable: &HashSet<String>) {\n \n pub fn trans_crate<'tcx>(analysis: ty::CrateAnalysis<'tcx>)\n                          -> (ty::ctxt<'tcx>, CrateTranslation) {\n-    let ty::CrateAnalysis { ty_cx: tcx, exp_map2, reachable, name, .. } = analysis;\n+    let ty::CrateAnalysis { ty_cx: tcx, export_map, reachable, name, .. } = analysis;\n     let krate = tcx.map.krate();\n \n     // Before we touch LLVM, make sure that multithreading is enabled.\n@@ -3098,7 +3098,7 @@ pub fn trans_crate<'tcx>(analysis: ty::CrateAnalysis<'tcx>)\n     let shared_ccx = SharedCrateContext::new(link_meta.crate_name.as_slice(),\n                                              codegen_units,\n                                              tcx,\n-                                             exp_map2,\n+                                             export_map,\n                                              Sha256::new(),\n                                              link_meta.clone(),\n                                              reachable);"}, {"sha": "74f906edee5a535a13fd56a9902aabeaca96a479", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fb1d6f24fc2a657cae180d6e4c572557bf20070a/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb1d6f24fc2a657cae180d6e4c572557bf20070a/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=fb1d6f24fc2a657cae180d6e4c572557bf20070a", "patch": "@@ -61,7 +61,7 @@ pub struct SharedCrateContext<'tcx> {\n     metadata_llmod: ModuleRef,\n     metadata_llcx: ContextRef,\n \n-    exp_map2: resolve::ExportMap2,\n+    export_map: resolve::ExportMap,\n     reachable: NodeSet,\n     item_symbols: RefCell<NodeMap<String>>,\n     link_meta: LinkMeta,\n@@ -238,7 +238,7 @@ impl<'tcx> SharedCrateContext<'tcx> {\n     pub fn new(crate_name: &str,\n                local_count: uint,\n                tcx: ty::ctxt<'tcx>,\n-               emap2: resolve::ExportMap2,\n+               export_map: resolve::ExportMap,\n                symbol_hasher: Sha256,\n                link_meta: LinkMeta,\n                reachable: NodeSet)\n@@ -251,7 +251,7 @@ impl<'tcx> SharedCrateContext<'tcx> {\n             local_ccxs: Vec::with_capacity(local_count),\n             metadata_llmod: metadata_llmod,\n             metadata_llcx: metadata_llcx,\n-            exp_map2: emap2,\n+            export_map: export_map,\n             reachable: reachable,\n             item_symbols: RefCell::new(NodeMap::new()),\n             link_meta: link_meta,\n@@ -329,8 +329,8 @@ impl<'tcx> SharedCrateContext<'tcx> {\n         self.metadata_llcx\n     }\n \n-    pub fn exp_map2<'a>(&'a self) -> &'a resolve::ExportMap2 {\n-        &self.exp_map2\n+    pub fn export_map<'a>(&'a self) -> &'a resolve::ExportMap {\n+        &self.export_map\n     }\n \n     pub fn reachable<'a>(&'a self) -> &'a NodeSet {\n@@ -553,8 +553,8 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         &self.local.item_vals\n     }\n \n-    pub fn exp_map2<'a>(&'a self) -> &'a resolve::ExportMap2 {\n-        &self.shared.exp_map2\n+    pub fn export_map<'a>(&'a self) -> &'a resolve::ExportMap {\n+        &self.shared.export_map\n     }\n \n     pub fn reachable<'a>(&'a self) -> &'a NodeSet {"}]}