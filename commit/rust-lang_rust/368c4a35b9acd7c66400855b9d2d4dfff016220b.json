{"sha": "368c4a35b9acd7c66400855b9d2d4dfff016220b", "node_id": "C_kwDOAAsO6NoAKDM2OGM0YTM1YjlhY2Q3YzY2NDAwODU1YjlkMmQ0ZGZmZjAxNjIyMGI", "commit": {"author": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-10-20T18:28:24Z"}, "committer": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-10-26T13:04:09Z"}, "message": "Add style= parameter to suggestion attributes", "tree": {"sha": "73d32cca74e6f04b806bcafad5a00787d0570fc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73d32cca74e6f04b806bcafad5a00787d0570fc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/368c4a35b9acd7c66400855b9d2d4dfff016220b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/368c4a35b9acd7c66400855b9d2d4dfff016220b", "html_url": "https://github.com/rust-lang/rust/commit/368c4a35b9acd7c66400855b9d2d4dfff016220b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/368c4a35b9acd7c66400855b9d2d4dfff016220b/comments", "author": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "629a414d7ba4caa3ca28b0a46c478e2ecb4c0059", "url": "https://api.github.com/repos/rust-lang/rust/commits/629a414d7ba4caa3ca28b0a46c478e2ecb4c0059", "html_url": "https://github.com/rust-lang/rust/commit/629a414d7ba4caa3ca28b0a46c478e2ecb4c0059"}], "stats": {"total": 232, "additions": 214, "deletions": 18}, "files": [{"sha": "aaeb0e1aba988a1acd2124d657968b4e0c07c08e", "filename": "compiler/rustc_macros/src/diagnostics/utils.rs", "status": "modified", "additions": 73, "deletions": 14, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/368c4a35b9acd7c66400855b9d2d4dfff016220b/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/368c4a35b9acd7c66400855b9d2d4dfff016220b/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs?ref=368c4a35b9acd7c66400855b9d2d4dfff016220b", "patch": "@@ -472,7 +472,7 @@ pub(super) fn build_suggestion_code(\n }\n \n /// Possible styles for suggestion subdiagnostics.\n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, PartialEq)]\n pub(super) enum SuggestionKind {\n     /// `#[suggestion]`\n     Normal,\n@@ -489,10 +489,10 @@ impl FromStr for SuggestionKind {\n \n     fn from_str(s: &str) -> Result<Self, Self::Err> {\n         match s {\n-            \"\" => Ok(SuggestionKind::Normal),\n-            \"_short\" => Ok(SuggestionKind::Short),\n-            \"_hidden\" => Ok(SuggestionKind::Hidden),\n-            \"_verbose\" => Ok(SuggestionKind::Verbose),\n+            \"normal\" => Ok(SuggestionKind::Normal),\n+            \"short\" => Ok(SuggestionKind::Short),\n+            \"hidden\" => Ok(SuggestionKind::Hidden),\n+            \"verbose\" => Ok(SuggestionKind::Verbose),\n             _ => Err(()),\n         }\n     }\n@@ -515,6 +515,16 @@ impl SuggestionKind {\n             }\n         }\n     }\n+\n+    fn from_suffix(s: &str) -> Option<Self> {\n+        match s {\n+            \"\" => Some(SuggestionKind::Normal),\n+            \"_short\" => Some(SuggestionKind::Short),\n+            \"_hidden\" => Some(SuggestionKind::Hidden),\n+            \"_verbose\" => Some(SuggestionKind::Verbose),\n+            _ => None,\n+        }\n+    }\n }\n \n /// Types of subdiagnostics that can be created using attributes\n@@ -565,25 +575,40 @@ impl SubdiagnosticKind {\n         let name = name.as_str();\n \n         let meta = attr.parse_meta()?;\n+\n+        let mut opt_suggestion_kind = None;\n         let mut kind = match name {\n             \"label\" => SubdiagnosticKind::Label,\n             \"note\" => SubdiagnosticKind::Note,\n             \"help\" => SubdiagnosticKind::Help,\n             \"warning\" => SubdiagnosticKind::Warn,\n             _ => {\n                 if let Some(suggestion_kind) =\n-                    name.strip_prefix(\"suggestion\").and_then(|s| s.parse().ok())\n+                    name.strip_prefix(\"suggestion\").and_then(SuggestionKind::from_suffix)\n                 {\n+                    if suggestion_kind != SuggestionKind::Normal {\n+                        // Plain `#[suggestion]` can have a `style = \"...\"` attribute later, so don't set it here\n+                        opt_suggestion_kind.set_once(suggestion_kind, attr.path.span().unwrap());\n+                    }\n+\n                     SubdiagnosticKind::Suggestion {\n-                        suggestion_kind,\n+                        suggestion_kind: SuggestionKind::Normal,\n                         applicability: None,\n                         code_field: new_code_ident(),\n                         code_init: TokenStream::new(),\n                     }\n                 } else if let Some(suggestion_kind) =\n-                    name.strip_prefix(\"multipart_suggestion\").and_then(|s| s.parse().ok())\n+                    name.strip_prefix(\"multipart_suggestion\").and_then(SuggestionKind::from_suffix)\n                 {\n-                    SubdiagnosticKind::MultipartSuggestion { suggestion_kind, applicability: None }\n+                    if suggestion_kind != SuggestionKind::Normal {\n+                        // Plain `#[multipart_suggestion]` can have a `style = \"...\"` attribute later, so don't set it here\n+                        opt_suggestion_kind.set_once(suggestion_kind, attr.path.span().unwrap());\n+                    }\n+\n+                    SubdiagnosticKind::MultipartSuggestion {\n+                        suggestion_kind: SuggestionKind::Normal,\n+                        applicability: None,\n+                    }\n                 } else {\n                     throw_invalid_attr!(attr, &meta);\n                 }\n@@ -682,16 +707,37 @@ impl SubdiagnosticKind {\n                     });\n                     applicability.set_once(value, span);\n                 }\n+                (\n+                    \"style\",\n+                    SubdiagnosticKind::Suggestion { .. }\n+                    | SubdiagnosticKind::MultipartSuggestion { .. },\n+                ) => {\n+                    let Some(value) = string_value else {\n+                        invalid_nested_attr(attr, &nested_attr).emit();\n+                        continue;\n+                    };\n+\n+                    let value = value.value().parse().unwrap_or_else(|()| {\n+                        span_err(value.span().unwrap(), \"invalid suggestion style\")\n+                            .help(\"valid styles are `normal`, `short`, `hidden` and `verbose`\")\n+                            .emit();\n+                        SuggestionKind::Normal\n+                    });\n+\n+                    opt_suggestion_kind.set_once(value, span);\n+                }\n \n                 // Invalid nested attribute\n                 (_, SubdiagnosticKind::Suggestion { .. }) => {\n                     invalid_nested_attr(attr, &nested_attr)\n-                        .help(\"only `code` and `applicability` are valid nested attributes\")\n+                        .help(\n+                            \"only `style`, `code` and `applicability` are valid nested attributes\",\n+                        )\n                         .emit();\n                 }\n                 (_, SubdiagnosticKind::MultipartSuggestion { .. }) => {\n                     invalid_nested_attr(attr, &nested_attr)\n-                        .help(\"only `applicability` is a valid nested attributes\")\n+                        .help(\"only `style` and `applicability` are valid nested attributes\")\n                         .emit()\n                 }\n                 _ => {\n@@ -701,19 +747,32 @@ impl SubdiagnosticKind {\n         }\n \n         match kind {\n-            SubdiagnosticKind::Suggestion { ref code_field, ref mut code_init, .. } => {\n+            SubdiagnosticKind::Suggestion {\n+                ref code_field,\n+                ref mut code_init,\n+                ref mut suggestion_kind,\n+                ..\n+            } => {\n+                if let Some(kind) = opt_suggestion_kind.value() {\n+                    *suggestion_kind = kind;\n+                }\n+\n                 *code_init = if let Some(init) = code.value() {\n                     init\n                 } else {\n                     span_err(span, \"suggestion without `code = \\\"...\\\"`\").emit();\n                     quote! { let #code_field = std::iter::empty(); }\n                 };\n             }\n+            SubdiagnosticKind::MultipartSuggestion { ref mut suggestion_kind, .. } => {\n+                if let Some(kind) = opt_suggestion_kind.value() {\n+                    *suggestion_kind = kind;\n+                }\n+            }\n             SubdiagnosticKind::Label\n             | SubdiagnosticKind::Note\n             | SubdiagnosticKind::Help\n-            | SubdiagnosticKind::Warn\n-            | SubdiagnosticKind::MultipartSuggestion { .. } => {}\n+            | SubdiagnosticKind::Warn => {}\n         }\n \n         Ok(Some((kind, slug)))"}, {"sha": "6cd765827953d5f82e30d0049676c4f1a53b50f7", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/368c4a35b9acd7c66400855b9d2d4dfff016220b/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/368c4a35b9acd7c66400855b9d2d4dfff016220b/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=368c4a35b9acd7c66400855b9d2d4dfff016220b", "patch": "@@ -796,3 +796,10 @@ struct SuggestionsInvalidLiteral {\n     //~^ ERROR `code = \"...\"`/`code(...)` must contain only string literals\n     sub: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(compiletest_example)]\n+struct SuggestionStyleGood {\n+    #[suggestion(code = \"\", style = \"hidden\")]\n+    sub: Span,\n+}"}, {"sha": "5a0948e4dcb7614e13f9012fd49c92993a1ac3d8", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/368c4a35b9acd7c66400855b9d2d4dfff016220b/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/368c4a35b9acd7c66400855b9d2d4dfff016220b/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=368c4a35b9acd7c66400855b9d2d4dfff016220b", "patch": "@@ -272,7 +272,7 @@ error: `#[suggestion(nonsense = ...)]` is not a valid attribute\n LL |     #[suggestion(nonsense = \"bar\")]\n    |                  ^^^^^^^^^^^^^^^^\n    |\n-   = help: only `code` and `applicability` are valid nested attributes\n+   = help: only `style`, `code` and `applicability` are valid nested attributes\n \n error: suggestion without `code = \"...\"`\n   --> $DIR/diagnostic-derive.rs:231:5\n@@ -286,7 +286,7 @@ error: `#[suggestion(msg = ...)]` is not a valid attribute\n LL |     #[suggestion(msg = \"bar\")]\n    |                  ^^^^^^^^^^^\n    |\n-   = help: only `code` and `applicability` are valid nested attributes\n+   = help: only `style`, `code` and `applicability` are valid nested attributes\n \n error: suggestion without `code = \"...\"`\n   --> $DIR/diagnostic-derive.rs:240:5"}, {"sha": "9a1a57e2eaf99fc39887b48f7956cba2c95b26a8", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.rs", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/368c4a35b9acd7c66400855b9d2d4dfff016220b/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/368c4a35b9acd7c66400855b9d2d4dfff016220b/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs?ref=368c4a35b9acd7c66400855b9d2d4dfff016220b", "patch": "@@ -706,3 +706,81 @@ struct BQ {\n     span: Span,\n     r#type: String,\n }\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\")]\n+struct SuggestionStyleDefault {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\", style = \"short\")]\n+struct SuggestionStyleShort {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\", style = \"hidden\")]\n+struct SuggestionStyleHidden {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\", style = \"verbose\")]\n+struct SuggestionStyleVerbose {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\", style = \"hidden\", style = \"normal\")]\n+//~^ ERROR specified multiple times\n+//~| NOTE previously specified here\n+struct SuggestionStyleTwice {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion_hidden(parser_add_paren, code = \"\", style = \"normal\")]\n+//~^ ERROR specified multiple times\n+//~| NOTE previously specified here\n+struct SuggestionStyleTwiceExplicit {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\", style = \"foo\")]\n+//~^ ERROR invalid suggestion style\n+struct SuggestionStyleInvalid1 {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\", style = 42)]\n+//~^ ERROR `#[suggestion(style = ...)]` is not a valid attribute\n+struct SuggestionStyleInvalid2 {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\", style)]\n+//~^ ERROR `#[suggestion(style)]` is not a valid attribute\n+struct SuggestionStyleInvalid3 {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\", style(\"foo\"))]\n+//~^ ERROR `#[suggestion(style(...))]` is not a valid attribute\n+struct SuggestionStyleInvalid4 {\n+    #[primary_span]\n+    sub: Span,\n+}"}, {"sha": "d5e136fa40ccf8d5a441c93884daa9f6d9a1e178", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.stderr", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/368c4a35b9acd7c66400855b9d2d4dfff016220b/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/368c4a35b9acd7c66400855b9d2d4dfff016220b/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr?ref=368c4a35b9acd7c66400855b9d2d4dfff016220b", "patch": "@@ -320,7 +320,7 @@ error: `#[multipart_suggestion(code = ...)]` is not a valid attribute\n LL | #[multipart_suggestion(parser_add_paren, code = \"...\", applicability = \"machine-applicable\")]\n    |                                          ^^^^^^^^^^^^\n    |\n-   = help: only `applicability` is a valid nested attributes\n+   = help: only `style` and `applicability` are valid nested attributes\n \n error: multipart suggestion without any `#[suggestion_part(...)]` fields\n   --> $DIR/subdiagnostic-derive.rs:536:1\n@@ -445,6 +445,58 @@ error: `code = \"...\"`/`code(...)` must contain only string literals\n LL |     #[suggestion_part(code = 3)]\n    |                       ^^^^^^^^\n \n+error: specified multiple times\n+  --> $DIR/subdiagnostic-derive.rs:739:61\n+   |\n+LL | #[suggestion(parser_add_paren, code = \"\", style = \"hidden\", style = \"normal\")]\n+   |                                                             ^^^^^^^^^^^^^^^^\n+   |\n+note: previously specified here\n+  --> $DIR/subdiagnostic-derive.rs:739:43\n+   |\n+LL | #[suggestion(parser_add_paren, code = \"\", style = \"hidden\", style = \"normal\")]\n+   |                                           ^^^^^^^^^^^^^^^^\n+\n+error: specified multiple times\n+  --> $DIR/subdiagnostic-derive.rs:748:50\n+   |\n+LL | #[suggestion_hidden(parser_add_paren, code = \"\", style = \"normal\")]\n+   |                                                  ^^^^^^^^^^^^^^^^\n+   |\n+note: previously specified here\n+  --> $DIR/subdiagnostic-derive.rs:748:3\n+   |\n+LL | #[suggestion_hidden(parser_add_paren, code = \"\", style = \"normal\")]\n+   |   ^^^^^^^^^^^^^^^^^\n+\n+error: invalid suggestion style\n+  --> $DIR/subdiagnostic-derive.rs:757:51\n+   |\n+LL | #[suggestion(parser_add_paren, code = \"\", style = \"foo\")]\n+   |                                                   ^^^^^\n+   |\n+   = help: valid styles are `normal`, `short`, `hidden` and `verbose`\n+\n+error: `#[suggestion(style = ...)]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:765:43\n+   |\n+LL | #[suggestion(parser_add_paren, code = \"\", style = 42)]\n+   |                                           ^^^^^^^^^^\n+\n+error: `#[suggestion(style)]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:773:43\n+   |\n+LL | #[suggestion(parser_add_paren, code = \"\", style)]\n+   |                                           ^^^^^\n+   |\n+   = help: a diagnostic slug must be the first argument to the attribute\n+\n+error: `#[suggestion(style(...))]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:781:43\n+   |\n+LL | #[suggestion(parser_add_paren, code = \"\", style(\"foo\"))]\n+   |                                           ^^^^^^^^^^^^\n+\n error: cannot find attribute `foo` in this scope\n   --> $DIR/subdiagnostic-derive.rs:63:3\n    |\n@@ -505,6 +557,6 @@ error[E0425]: cannot find value `slug` in module `rustc_errors::fluent`\n LL | #[label(slug)]\n    |         ^^^^ not found in `rustc_errors::fluent`\n \n-error: aborting due to 72 previous errors\n+error: aborting due to 78 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}]}