{"sha": "0000c7753ead95d71cb95ccc4929d4845f218ab2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMDBjNzc1M2VhZDk1ZDcxY2I5NWNjYzQ5MjlkNDg0NWYyMThhYjI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-19T17:22:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-19T17:22:40Z"}, "message": "Merge #2600\n\n2600: Plumbing for local items support r=matklad a=matklad\n\nbors r+\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "b25ab818073492ff8c80176043b68ffe7a40ab3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b25ab818073492ff8c80176043b68ffe7a40ab3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0000c7753ead95d71cb95ccc4929d4845f218ab2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd+7HgCRBK7hj4Ov3rIwAAdHIIAJc5WY5eBaQqFzJqn6wK9eN4\nA7MXVq6GsyP6HVgwqF72Vubw/+OsRsfjnyXGL+mbiKpBWytLLHOu4Ht2vNZrqa3F\nKvp0ATZGKUu9F+B3hhDmDMsDOBBVnM0g+mpCdduKCtxOJUxTYXSjRVFkcCBBvZtS\njyghpr90T/9KIPbqhKcPQhZidXnF0EmqeGIWxb8f0zbqLWFq7mKbrf1Grdo5PGpn\n652wLs/ZceFiNa/HVpzuiqpryl/ZWuVe/hy8g5n8Ev7HIy7HJqJdpgIGSxpLVQE/\nyZVKgnTZOpPy0385rSuM8bDDDDx1hPKC5ypczsWKErFEzK7SmJufuBwXYt/ebLI=\n=mry/\n-----END PGP SIGNATURE-----\n", "payload": "tree b25ab818073492ff8c80176043b68ffe7a40ab3c\nparent 90f3b31efc1afe5de671fd6076fef3240f4151ab\nparent 9ccad60acca0d359f1fd9046c99952d0c1adc763\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1576776160 +0000\ncommitter GitHub <noreply@github.com> 1576776160 +0000\n\nMerge #2600\n\n2600: Plumbing for local items support r=matklad a=matklad\n\nbors r+\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0000c7753ead95d71cb95ccc4929d4845f218ab2", "html_url": "https://github.com/rust-lang/rust/commit/0000c7753ead95d71cb95ccc4929d4845f218ab2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0000c7753ead95d71cb95ccc4929d4845f218ab2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90f3b31efc1afe5de671fd6076fef3240f4151ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/90f3b31efc1afe5de671fd6076fef3240f4151ab", "html_url": "https://github.com/rust-lang/rust/commit/90f3b31efc1afe5de671fd6076fef3240f4151ab"}, {"sha": "9ccad60acca0d359f1fd9046c99952d0c1adc763", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ccad60acca0d359f1fd9046c99952d0c1adc763", "html_url": "https://github.com/rust-lang/rust/commit/9ccad60acca0d359f1fd9046c99952d0c1adc763"}], "stats": {"total": 140, "additions": 78, "deletions": 62}, "files": [{"sha": "332c509e17063d3b520ad91d2c0bf944b477f54a", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0000c7753ead95d71cb95ccc4929d4845f218ab2/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0000c7753ead95d71cb95ccc4929d4845f218ab2/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=0000c7753ead95d71cb95ccc4929d4845f218ab2", "patch": "@@ -17,7 +17,7 @@ use crate::{\n     nameres::{BuiltinShadowMode, CrateDefMap},\n     path::{ModPath, Path},\n     src::HasSource,\n-    DefWithBodyId, HasModule, Lookup, ModuleId,\n+    DefWithBodyId, HasModule, Lookup, ModuleDefId, ModuleId,\n };\n \n struct Expander {\n@@ -119,6 +119,7 @@ pub struct Body {\n     pub params: Vec<PatId>,\n     /// The `ExprId` of the actual body expression.\n     pub body_expr: ExprId,\n+    pub defs: Vec<ModuleDefId>,\n }\n \n pub type ExprPtr = Either<AstPtr<ast::Expr>, AstPtr<ast::RecordField>>;"}, {"sha": "86960186f198407c3ad6588222bfd877ae8ed81e", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0000c7753ead95d71cb95ccc4929d4845f218ab2/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0000c7753ead95d71cb95ccc4929d4845f218ab2/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=0000c7753ead95d71cb95ccc4929d4845f218ab2", "patch": "@@ -41,6 +41,7 @@ pub(super) fn lower(\n             pats: Arena::default(),\n             params: Vec::new(),\n             body_expr: ExprId::dummy(),\n+            defs: Vec::new(),\n         },\n     }\n     .collect(params, body)"}, {"sha": "f5a65ad40970fb8cb279377eee7da71d5f6362cf", "filename": "crates/ra_hir_def/src/child_by_source.rs", "status": "modified", "additions": 55, "deletions": 42, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/0000c7753ead95d71cb95ccc4929d4845f218ab2/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0000c7753ead95d71cb95ccc4929d4845f218ab2/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs?ref=0000c7753ead95d71cb95ccc4929d4845f218ab2", "patch": "@@ -11,8 +11,8 @@ use crate::{\n     dyn_map::DynMap,\n     keys,\n     src::{HasChildSource, HasSource},\n-    AdtId, AssocItemId, EnumId, EnumVariantId, ImplId, Lookup, ModuleDefId, ModuleId,\n-    StructFieldId, TraitId, VariantId,\n+    AdtId, AssocItemId, DefWithBodyId, EnumId, EnumVariantId, ImplId, Lookup, ModuleDefId,\n+    ModuleId, StructFieldId, TraitId, VariantId,\n };\n \n pub trait ChildBySource {\n@@ -76,47 +76,11 @@ impl ChildBySource for ModuleId {\n         let mut res = DynMap::default();\n \n         let crate_def_map = db.crate_def_map(self.krate);\n-        for item in crate_def_map[self.local_id].scope.declarations() {\n-            match item {\n-                ModuleDefId::FunctionId(func) => {\n-                    let src = func.lookup(db).source(db);\n-                    res[keys::FUNCTION].insert(src, func)\n-                }\n-                ModuleDefId::ConstId(konst) => {\n-                    let src = konst.lookup(db).source(db);\n-                    res[keys::CONST].insert(src, konst)\n-                }\n-                ModuleDefId::StaticId(statik) => {\n-                    let src = statik.lookup(db).source(db);\n-                    res[keys::STATIC].insert(src, statik)\n-                }\n-                ModuleDefId::TypeAliasId(ty) => {\n-                    let src = ty.lookup(db).source(db);\n-                    res[keys::TYPE_ALIAS].insert(src, ty)\n-                }\n-                ModuleDefId::TraitId(trait_) => {\n-                    let src = trait_.lookup(db).source(db);\n-                    res[keys::TRAIT].insert(src, trait_)\n-                }\n-                ModuleDefId::AdtId(adt) => match adt {\n-                    AdtId::StructId(strukt) => {\n-                        let src = strukt.lookup(db).source(db);\n-                        res[keys::STRUCT].insert(src, strukt)\n-                    }\n-                    AdtId::UnionId(union_) => {\n-                        let src = union_.lookup(db).source(db);\n-                        res[keys::UNION].insert(src, union_)\n-                    }\n-                    AdtId::EnumId(enum_) => {\n-                        let src = enum_.lookup(db).source(db);\n-                        res[keys::ENUM].insert(src, enum_)\n-                    }\n-                },\n-                _ => (),\n-            }\n-        }\n+        let module_data = &crate_def_map[self.local_id];\n \n-        for &impl_ in crate_def_map[self.local_id].impls.iter() {\n+        module_data.scope.declarations().for_each(|item| add_module_def(db, &mut res, item));\n+\n+        for &impl_ in module_data.impls.iter() {\n             let src = impl_.lookup(db).source(db);\n             res[keys::IMPL].insert(src, impl_)\n         }\n@@ -125,6 +89,46 @@ impl ChildBySource for ModuleId {\n     }\n }\n \n+fn add_module_def(db: &impl DefDatabase, map: &mut DynMap, item: ModuleDefId) {\n+    match item {\n+        ModuleDefId::FunctionId(func) => {\n+            let src = func.lookup(db).source(db);\n+            map[keys::FUNCTION].insert(src, func)\n+        }\n+        ModuleDefId::ConstId(konst) => {\n+            let src = konst.lookup(db).source(db);\n+            map[keys::CONST].insert(src, konst)\n+        }\n+        ModuleDefId::StaticId(statik) => {\n+            let src = statik.lookup(db).source(db);\n+            map[keys::STATIC].insert(src, statik)\n+        }\n+        ModuleDefId::TypeAliasId(ty) => {\n+            let src = ty.lookup(db).source(db);\n+            map[keys::TYPE_ALIAS].insert(src, ty)\n+        }\n+        ModuleDefId::TraitId(trait_) => {\n+            let src = trait_.lookup(db).source(db);\n+            map[keys::TRAIT].insert(src, trait_)\n+        }\n+        ModuleDefId::AdtId(adt) => match adt {\n+            AdtId::StructId(strukt) => {\n+                let src = strukt.lookup(db).source(db);\n+                map[keys::STRUCT].insert(src, strukt)\n+            }\n+            AdtId::UnionId(union_) => {\n+                let src = union_.lookup(db).source(db);\n+                map[keys::UNION].insert(src, union_)\n+            }\n+            AdtId::EnumId(enum_) => {\n+                let src = enum_.lookup(db).source(db);\n+                map[keys::ENUM].insert(src, enum_)\n+            }\n+        },\n+        _ => (),\n+    }\n+}\n+\n impl ChildBySource for VariantId {\n     fn child_by_source(&self, db: &impl DefDatabase) -> DynMap {\n         let mut res = DynMap::default();\n@@ -160,3 +164,12 @@ impl ChildBySource for EnumId {\n         res\n     }\n }\n+\n+impl ChildBySource for DefWithBodyId {\n+    fn child_by_source(&self, db: &impl DefDatabase) -> DynMap {\n+        let mut res = DynMap::default();\n+        let body = db.body(*self);\n+        body.defs.iter().copied().for_each(|item| add_module_def(db, &mut res, item));\n+        res\n+    }\n+}"}, {"sha": "4fc3127c414de5c0ed5d2e32f2a1395e658c2890", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0000c7753ead95d71cb95ccc4929d4845f218ab2/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0000c7753ead95d71cb95ccc4929d4845f218ab2/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=0000c7753ead95d71cb95ccc4929d4845f218ab2", "patch": "@@ -335,6 +335,7 @@ pub enum ContainerId {\n     ModuleId(ModuleId),\n     ImplId(ImplId),\n     TraitId(TraitId),\n+    DefWithBodyId(DefWithBodyId),\n }\n \n /// A Data Type\n@@ -478,33 +479,32 @@ pub trait HasModule {\n     fn module(&self, db: &impl db::DefDatabase) -> ModuleId;\n }\n \n-impl HasModule for FunctionLoc {\n+impl HasModule for ContainerId {\n     fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n-        match self.container {\n+        match *self {\n             ContainerId::ModuleId(it) => it,\n             ContainerId::ImplId(it) => it.lookup(db).container,\n             ContainerId::TraitId(it) => it.lookup(db).container,\n+            ContainerId::DefWithBodyId(it) => it.module(db),\n         }\n     }\n }\n \n+impl HasModule for FunctionLoc {\n+    fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n+        self.container.module(db)\n+    }\n+}\n+\n impl HasModule for TypeAliasLoc {\n     fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n-        match self.container {\n-            ContainerId::ModuleId(it) => it,\n-            ContainerId::ImplId(it) => it.lookup(db).container,\n-            ContainerId::TraitId(it) => it.lookup(db).container,\n-        }\n+        self.container.module(db)\n     }\n }\n \n impl HasModule for ConstLoc {\n     fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n-        match self.container {\n-            ContainerId::ModuleId(it) => it,\n-            ContainerId::ImplId(it) => it.lookup(db).container,\n-            ContainerId::TraitId(it) => it.lookup(db).container,\n-        }\n+        self.container.module(db)\n     }\n }\n "}, {"sha": "25032927151140438fa209503beff4445b9ecb26", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0000c7753ead95d71cb95ccc4929d4845f218ab2/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0000c7753ead95d71cb95ccc4929d4845f218ab2/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=0000c7753ead95d71cb95ccc4929d4845f218ab2", "patch": "@@ -586,6 +586,7 @@ impl HasResolver for ContainerId {\n             ContainerId::TraitId(it) => it.resolver(db),\n             ContainerId::ImplId(it) => it.resolver(db),\n             ContainerId::ModuleId(it) => it.resolver(db),\n+            ContainerId::DefWithBodyId(it) => it.resolver(db),\n         }\n     }\n }"}, {"sha": "31c90ea1ef07ae8e150fd55b45db05264f96efde", "filename": "crates/ra_hir_ty/src/infer/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0000c7753ead95d71cb95ccc4929d4845f218ab2/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0000c7753ead95d71cb95ccc4929d4845f218ab2/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=0000c7753ead95d71cb95ccc4929d4845f218ab2", "patch": "@@ -237,7 +237,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                         }));\n                         Some(substs)\n                     }\n-                    ContainerId::ModuleId(_) => None,\n+                    ContainerId::ModuleId(_) | ContainerId::DefWithBodyId(_) => None,\n                 };\n \n                 self.write_assoc_resolution(id, item.into());"}, {"sha": "d0b2b016d5f14de783814960930ccf6cdb5ce867", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0000c7753ead95d71cb95ccc4929d4845f218ab2/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0000c7753ead95d71cb95ccc4929d4845f218ab2/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=0000c7753ead95d71cb95ccc4929d4845f218ab2", "patch": "@@ -6,8 +6,8 @@ use std::sync::Arc;\n \n use arrayvec::ArrayVec;\n use hir_def::{\n-    lang_item::LangItemTarget, resolver::Resolver, type_ref::Mutability, AssocItemId, FunctionId,\n-    HasModule, ImplId, Lookup, TraitId,\n+    lang_item::LangItemTarget, resolver::Resolver, type_ref::Mutability, AssocItemId, ContainerId,\n+    FunctionId, HasModule, ImplId, Lookup, TraitId,\n };\n use hir_expand::name::Name;\n use ra_db::CrateId;\n@@ -451,12 +451,12 @@ fn transform_receiver_ty(\n     self_ty: &Canonical<Ty>,\n ) -> Option<Ty> {\n     let substs = match function_id.lookup(db).container {\n-        hir_def::ContainerId::TraitId(_) => Substs::build_for_def(db, function_id)\n+        ContainerId::TraitId(_) => Substs::build_for_def(db, function_id)\n             .push(self_ty.value.clone())\n             .fill_with_unknown()\n             .build(),\n-        hir_def::ContainerId::ImplId(impl_id) => inherent_impl_substs(db, impl_id, &self_ty)?,\n-        hir_def::ContainerId::ModuleId(_) => unreachable!(),\n+        ContainerId::ImplId(impl_id) => inherent_impl_substs(db, impl_id, &self_ty)?,\n+        ContainerId::ModuleId(_) | ContainerId::DefWithBodyId(_) => unreachable!(),\n     };\n     let sig = db.callable_item_signature(function_id.into());\n     Some(sig.params()[0].clone().subst(&substs))"}, {"sha": "34defc1a201dd4bbeea82ab93b8c94e36d81258d", "filename": "crates/ra_hir_ty/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0000c7753ead95d71cb95ccc4929d4845f218ab2/crates%2Fra_hir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0000c7753ead95d71cb95ccc4929d4845f218ab2/crates%2Fra_hir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Futils.rs?ref=0000c7753ead95d71cb95ccc4929d4845f218ab2", "patch": "@@ -157,6 +157,6 @@ fn parent_generic_def(db: &impl DefDatabase, def: GenericDefId) -> Option<Generi\n     match container {\n         ContainerId::ImplId(it) => Some(it.into()),\n         ContainerId::TraitId(it) => Some(it.into()),\n-        ContainerId::ModuleId(_) => None,\n+        ContainerId::ModuleId(_) | ContainerId::DefWithBodyId(_) => None,\n     }\n }"}]}