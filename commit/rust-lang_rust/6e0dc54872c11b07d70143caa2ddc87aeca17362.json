{"sha": "6e0dc54872c11b07d70143caa2ddc87aeca17362", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMGRjNTQ4NzJjMTFiMDdkNzAxNDNjYWEyZGRjODdhZWNhMTczNjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-24T00:24:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-24T00:24:16Z"}, "message": "Auto merge of #43413 - mandeep:ops-generics, r=alexcrichton\n\nAdd generic example of std::ops::Sub in doc comments\n\nThis PR adds an example of using generics with std::ops::Sub and is a follow up of PR #41612 and is related to issue #29365. I also wanted to add examples to Mul and Div, but I think these two traits are already loaded with examples.", "tree": {"sha": "d1a3511f29966c58c6a8bb9d83cd0a8e6ee31159", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1a3511f29966c58c6a8bb9d83cd0a8e6ee31159"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e0dc54872c11b07d70143caa2ddc87aeca17362", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e0dc54872c11b07d70143caa2ddc87aeca17362", "html_url": "https://github.com/rust-lang/rust/commit/6e0dc54872c11b07d70143caa2ddc87aeca17362", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e0dc54872c11b07d70143caa2ddc87aeca17362/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afe145d227c5739ec5305f6b5352230a58ebb029", "url": "https://api.github.com/repos/rust-lang/rust/commits/afe145d227c5739ec5305f6b5352230a58ebb029", "html_url": "https://github.com/rust-lang/rust/commit/afe145d227c5739ec5305f6b5352230a58ebb029"}, {"sha": "ae7b1f9f2ce333d6762cb47501b575758c3cc6de", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae7b1f9f2ce333d6762cb47501b575758c3cc6de", "html_url": "https://github.com/rust-lang/rust/commit/ae7b1f9f2ce333d6762cb47501b575758c3cc6de"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "d898f9146cd1ad88860adca0f76c2db6f1797e13", "filename": "src/libcore/ops/arith.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6e0dc54872c11b07d70143caa2ddc87aeca17362/src%2Flibcore%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0dc54872c11b07d70143caa2ddc87aeca17362/src%2Flibcore%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Farith.rs?ref=6e0dc54872c11b07d70143caa2ddc87aeca17362", "patch": "@@ -157,6 +157,42 @@ add_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// }\n /// ```\n ///\n+/// Here is an example of the same `Point` struct implementing the `Sub` trait\n+/// using generics.\n+///\n+/// ```\n+/// use std::ops::Sub;\n+///\n+/// #[derive(Debug)]\n+/// struct Point<T> {\n+///     x: T,\n+///     y: T,\n+/// }\n+///\n+/// // Notice that the implementation uses the `Output` associated type\n+/// impl<T: Sub<Output=T>> Sub for Point<T> {\n+///     type Output = Point<T>;\n+///\n+///     fn sub(self, other: Point<T>) -> Point<T> {\n+///         Point {\n+///             x: self.x - other.x,\n+///             y: self.y - other.y,\n+///         }\n+///     }\n+/// }\n+///\n+/// impl<T: PartialEq> PartialEq for Point<T> {\n+///     fn eq(&self, other: &Self) -> bool {\n+///         self.x == other.x && self.y == other.y\n+///     }\n+/// }\n+///\n+/// fn main() {\n+///     assert_eq!(Point { x: 2, y: 3 } - Point { x: 1, y: 0 },\n+///                Point { x: 1, y: 3 });\n+/// }\n+/// ```\n+///\n /// Note that `RHS = Self` by default, but this is not mandatory. For example,\n /// [std::time::SystemTime] implements `Sub<Duration>`, which permits\n /// operations of the form `SystemTime = SystemTime - Duration`."}]}