{"sha": "e0caf26586caf8df3b683f4fe6ee4979a3c9e8dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwY2FmMjY1ODZjYWY4ZGYzYjY4M2Y0ZmU2ZWU0OTc5YTNjOWU4ZGM=", "commit": {"author": {"name": "Zaki Manian", "email": "zaki@manian.org", "date": "2017-09-03T18:19:59Z"}, "committer": {"name": "Zaki Manian", "email": "zaki@manian.org", "date": "2017-09-03T18:19:59Z"}, "message": "RustFmt file and tests", "tree": {"sha": "1e01a0aff2f86da3b44e40d8c3ac5cf3697635d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e01a0aff2f86da3b44e40d8c3ac5cf3697635d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0caf26586caf8df3b683f4fe6ee4979a3c9e8dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0caf26586caf8df3b683f4fe6ee4979a3c9e8dc", "html_url": "https://github.com/rust-lang/rust/commit/e0caf26586caf8df3b683f4fe6ee4979a3c9e8dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0caf26586caf8df3b683f4fe6ee4979a3c9e8dc/comments", "author": {"login": "zmanian", "id": 93434, "node_id": "MDQ6VXNlcjkzNDM0", "avatar_url": "https://avatars.githubusercontent.com/u/93434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zmanian", "html_url": "https://github.com/zmanian", "followers_url": "https://api.github.com/users/zmanian/followers", "following_url": "https://api.github.com/users/zmanian/following{/other_user}", "gists_url": "https://api.github.com/users/zmanian/gists{/gist_id}", "starred_url": "https://api.github.com/users/zmanian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zmanian/subscriptions", "organizations_url": "https://api.github.com/users/zmanian/orgs", "repos_url": "https://api.github.com/users/zmanian/repos", "events_url": "https://api.github.com/users/zmanian/events{/privacy}", "received_events_url": "https://api.github.com/users/zmanian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zmanian", "id": 93434, "node_id": "MDQ6VXNlcjkzNDM0", "avatar_url": "https://avatars.githubusercontent.com/u/93434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zmanian", "html_url": "https://github.com/zmanian", "followers_url": "https://api.github.com/users/zmanian/followers", "following_url": "https://api.github.com/users/zmanian/following{/other_user}", "gists_url": "https://api.github.com/users/zmanian/gists{/gist_id}", "starred_url": "https://api.github.com/users/zmanian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zmanian/subscriptions", "organizations_url": "https://api.github.com/users/zmanian/orgs", "repos_url": "https://api.github.com/users/zmanian/repos", "events_url": "https://api.github.com/users/zmanian/events{/privacy}", "received_events_url": "https://api.github.com/users/zmanian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c7583776b8d87bf5c73bfe9298f463c278615e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c7583776b8d87bf5c73bfe9298f463c278615e8", "html_url": "https://github.com/rust-lang/rust/commit/1c7583776b8d87bf5c73bfe9298f463c278615e8"}], "stats": {"total": 55, "additions": 39, "deletions": 16}, "files": [{"sha": "c3860d2b92ab13809fd9bc148dd03ab4d09c484e", "filename": "clippy_lints/src/is_unit_expr.rs", "status": "modified", "additions": 39, "deletions": 14, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e0caf26586caf8df3b683f4fe6ee4979a3c9e8dc/clippy_lints%2Fsrc%2Fis_unit_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0caf26586caf8df3b683f4fe6ee4979a3c9e8dc/clippy_lints%2Fsrc%2Fis_unit_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fis_unit_expr.rs?ref=e0caf26586caf8df3b683f4fe6ee4979a3c9e8dc", "patch": "@@ -39,20 +39,41 @@ impl EarlyLintPass for UnitExpr {\n     fn check_expr(&mut self, cx: &EarlyContext, expr: &Expr) {\n         if let ExprKind::Assign(ref _left, ref right) = expr.node {\n             if let Some(span) = is_unit_expr(right) {\n-                span_note_and_lint(cx, UNIT_EXPR, expr.span,\"This expression assigns the Unit type ()\",span,\"Consider removing the trailing semicolon\");\n+                span_note_and_lint(\n+                    cx,\n+                    UNIT_EXPR,\n+                    expr.span,\n+                    \"This expression assigns the Unit type ()\",\n+                    span,\n+                    \"Consider removing the trailing semicolon\",\n+                );\n             }\n         }\n         if let ExprKind::MethodCall(ref _left, ref args) = expr.node {\n             for ref arg in args {\n                 if let Some(span) = is_unit_expr(arg) {\n-                span_note_and_lint(cx, UNIT_EXPR, expr.span,\"This expression assigns the Unit type ()\",span,\"Consider removing the trailing semicolon\");\n+                    span_note_and_lint(\n+                        cx,\n+                        UNIT_EXPR,\n+                        expr.span,\n+                        \"This expression assigns the Unit type ()\",\n+                        span,\n+                        \"Consider removing the trailing semicolon\",\n+                    );\n                 }\n             }\n         }\n         if let ExprKind::Call(_, ref args) = expr.node {\n             for ref arg in args {\n                 if let Some(span) = is_unit_expr(arg) {\n-                span_note_and_lint(cx, UNIT_EXPR, expr.span,\"This expression assigns the Unit type ()\",span,\"Consider removing the trailing semicolon\");\n+                    span_note_and_lint(\n+                        cx,\n+                        UNIT_EXPR,\n+                        expr.span,\n+                        \"This expression assigns the Unit type ()\",\n+                        span,\n+                        \"Consider removing the trailing semicolon\",\n+                    );\n                 }\n             }\n         }\n@@ -65,7 +86,14 @@ impl EarlyLintPass for UnitExpr {\n             }\n             if let Some(ref expr) = local.init {\n                 if let Some(span) = is_unit_expr(expr) {\n-                span_note_and_lint(cx, UNIT_EXPR, expr.span,\"This expression assigns the Unit type ()\",span,\"Consider removing the trailing semicolon\");\n+                    span_note_and_lint(\n+                        cx,\n+                        UNIT_EXPR,\n+                        expr.span,\n+                        \"This expression assigns the Unit type ()\",\n+                        span,\n+                        \"Consider removing the trailing semicolon\",\n+                    );\n                 }\n             }\n         }\n@@ -84,7 +112,7 @@ fn is_unit_expr(expr: &Expr) -> Option<Span> {\n                 let check_else = is_unit_expr(else_.deref());\n                 if let Some(ref expr_else) = check_else {\n                     return Some(expr_else.clone());\n-                } \n+                }\n             }\n             if check_then {\n                 return Some(expr.span.clone());\n@@ -106,17 +134,14 @@ fn is_unit_expr(expr: &Expr) -> Option<Span> {\n \n fn check_last_stmt_in_block(block: &Block) -> bool {\n     let ref final_stmt = &block.stmts[block.stmts.len() - 1];\n-    \n-    match final_stmt.node{\n+\n+    match final_stmt.node {\n         StmtKind::Expr(_) => return false,\n-        StmtKind::Semi(ref expr)=>{\n-               match expr.node{\n-                ExprKind::Break(_,_) => return false,\n-                ExprKind::Ret(_) => return false,\n-                _ => return true,\n-            }         \n+        StmtKind::Semi(ref expr) => match expr.node {\n+            ExprKind::Break(_, _) => return false,\n+            ExprKind::Ret(_) => return false,\n+            _ => return true,\n         },\n         _ => return true,\n     }\n-\n }"}, {"sha": "63f3fcfa28c37c0c580180a4abdbb40697f2fa0e", "filename": "tests/ui/is_unit_expr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0caf26586caf8df3b683f4fe6ee4979a3c9e8dc/tests%2Fui%2Fis_unit_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0caf26586caf8df3b683f4fe6ee4979a3c9e8dc/tests%2Fui%2Fis_unit_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fis_unit_expr.rs?ref=e0caf26586caf8df3b683f4fe6ee4979a3c9e8dc", "patch": "@@ -1,6 +1,5 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n-\n #![warn(unit_expr)]\n #[allow(unused_variables)]\n \n@@ -9,5 +8,4 @@ fn main() {\n         \"foo\";\n         \"baz\";\n     };\n-\n }"}]}