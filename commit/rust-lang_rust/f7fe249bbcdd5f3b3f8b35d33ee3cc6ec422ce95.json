{"sha": "f7fe249bbcdd5f3b3f8b35d33ee3cc6ec422ce95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZmUyNDliYmNkZDVmM2IzZjhiMzVkMzNlZTNjYzZlYzQyMmNlOTU=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-01-18T16:28:17Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-01-18T16:28:17Z"}, "message": "Remove associated_types gate from std::ops docs", "tree": {"sha": "9a04932d6c485713910047399bc57a5addea8dbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a04932d6c485713910047399bc57a5addea8dbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7fe249bbcdd5f3b3f8b35d33ee3cc6ec422ce95", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7fe249bbcdd5f3b3f8b35d33ee3cc6ec422ce95", "html_url": "https://github.com/rust-lang/rust/commit/f7fe249bbcdd5f3b3f8b35d33ee3cc6ec422ce95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7fe249bbcdd5f3b3f8b35d33ee3cc6ec422ce95/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcaeb6aa23ecba2dc2af870668a9239136d20fa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcaeb6aa23ecba2dc2af870668a9239136d20fa3", "html_url": "https://github.com/rust-lang/rust/commit/dcaeb6aa23ecba2dc2af870668a9239136d20fa3"}], "stats": {"total": 30, "additions": 0, "deletions": 30}, "files": [{"sha": "431447b3b4abe4b8acfe4129be0425715f74451a", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f7fe249bbcdd5f3b3f8b35d33ee3cc6ec422ce95/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fe249bbcdd5f3b3f8b35d33ee3cc6ec422ce95/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=f7fe249bbcdd5f3b3f8b35d33ee3cc6ec422ce95", "patch": "@@ -25,8 +25,6 @@\n //! demonstrates adding and subtracting two `Point`s.\n //!\n //! ```rust\n-//! #![feature(associated_types)]\n-//!\n //! use std::ops::{Add, Sub};\n //!\n //! #[derive(Show)]\n@@ -104,8 +102,6 @@ pub trait Drop {\n /// calling `add`, and therefore, `main` prints `Adding!`.\n ///\n /// ```rust\n-/// #![feature(associated_types)]\n-///\n /// use std::ops::Add;\n ///\n /// #[derive(Copy)]\n@@ -157,8 +153,6 @@ add_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64 }\n /// calling `sub`, and therefore, `main` prints `Subtracting!`.\n ///\n /// ```rust\n-/// #![feature(associated_types)]\n-///\n /// use std::ops::Sub;\n ///\n /// #[derive(Copy)]\n@@ -210,8 +204,6 @@ sub_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64 }\n /// calling `mul`, and therefore, `main` prints `Multiplying!`.\n ///\n /// ```rust\n-/// #![feature(associated_types)]\n-///\n /// use std::ops::Mul;\n ///\n /// #[derive(Copy)]\n@@ -263,8 +255,6 @@ mul_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64 }\n /// calling `div`, and therefore, `main` prints `Dividing!`.\n ///\n /// ```\n-/// #![feature(associated_types)]\n-///\n /// use std::ops::Div;\n ///\n /// #[derive(Copy)]\n@@ -316,8 +306,6 @@ div_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64 }\n /// calling `rem`, and therefore, `main` prints `Remainder-ing!`.\n ///\n /// ```\n-/// #![feature(associated_types)]\n-///\n /// use std::ops::Rem;\n ///\n /// #[derive(Copy)]\n@@ -386,8 +374,6 @@ rem_float_impl! { f64, fmod }\n /// `neg`, and therefore, `main` prints `Negating!`.\n ///\n /// ```\n-/// #![feature(associated_types)]\n-///\n /// use std::ops::Neg;\n ///\n /// struct Foo;\n@@ -461,8 +447,6 @@ neg_uint_impl! { u64, i64 }\n /// `not`, and therefore, `main` prints `Not-ing!`.\n ///\n /// ```\n-/// #![feature(associated_types)]\n-///\n /// use std::ops::Not;\n ///\n /// struct Foo;\n@@ -515,8 +499,6 @@ not_impl! { bool uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n /// calling `bitand`, and therefore, `main` prints `Bitwise And-ing!`.\n ///\n /// ```\n-/// #![feature(associated_types)]\n-///\n /// use std::ops::BitAnd;\n ///\n /// #[derive(Copy)]\n@@ -568,8 +550,6 @@ bitand_impl! { bool uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n /// calling `bitor`, and therefore, `main` prints `Bitwise Or-ing!`.\n ///\n /// ```\n-/// #![feature(associated_types)]\n-///\n /// use std::ops::BitOr;\n ///\n /// #[derive(Copy)]\n@@ -621,8 +601,6 @@ bitor_impl! { bool uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n /// calling `bitxor`, and therefore, `main` prints `Bitwise Xor-ing!`.\n ///\n /// ```\n-/// #![feature(associated_types)]\n-///\n /// use std::ops::BitXor;\n ///\n /// #[derive(Copy)]\n@@ -674,8 +652,6 @@ bitxor_impl! { bool uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n /// calling `shl`, and therefore, `main` prints `Shifting left!`.\n ///\n /// ```\n-/// #![feature(associated_types)]\n-///\n /// use std::ops::Shl;\n ///\n /// #[derive(Copy)]\n@@ -745,8 +721,6 @@ shl_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n /// calling `shr`, and therefore, `main` prints `Shifting right!`.\n ///\n /// ```\n-/// #![feature(associated_types)]\n-///\n /// use std::ops::Shr;\n ///\n /// #[derive(Copy)]\n@@ -1006,8 +980,6 @@ impl<Idx: fmt::Show> fmt::Show for RangeTo<Idx> {\n /// struct.\n ///\n /// ```\n-/// #![feature(associated_types)]\n-///\n /// use std::ops::Deref;\n ///\n /// struct DerefExample<T> {\n@@ -1061,8 +1033,6 @@ impl<'a, T: ?Sized> Deref for &'a mut T {\n /// struct.\n ///\n /// ```\n-/// #![feature(associated_types)]\n-///\n /// use std::ops::{Deref, DerefMut};\n ///\n /// struct DerefMutExample<T> {"}]}