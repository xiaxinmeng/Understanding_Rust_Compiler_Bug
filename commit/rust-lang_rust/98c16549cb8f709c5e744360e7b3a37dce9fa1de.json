{"sha": "98c16549cb8f709c5e744360e7b3a37dce9fa1de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YzE2NTQ5Y2I4ZjcwOWM1ZTc0NDM2MGU3YjNhMzdkY2U5ZmExZGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-16T00:04:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-16T00:04:20Z"}, "message": "auto merge of #7808 : blake2-ppc/rust/ringbuf, r=thestinger", "tree": {"sha": "ffb4617eb2fe89b8c2ccd9ece4fc7d4660755b18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffb4617eb2fe89b8c2ccd9ece4fc7d4660755b18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98c16549cb8f709c5e744360e7b3a37dce9fa1de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98c16549cb8f709c5e744360e7b3a37dce9fa1de", "html_url": "https://github.com/rust-lang/rust/commit/98c16549cb8f709c5e744360e7b3a37dce9fa1de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98c16549cb8f709c5e744360e7b3a37dce9fa1de/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e844b524ed1c099a6c19b7754fafcf67b99455df", "url": "https://api.github.com/repos/rust-lang/rust/commits/e844b524ed1c099a6c19b7754fafcf67b99455df", "html_url": "https://github.com/rust-lang/rust/commit/e844b524ed1c099a6c19b7754fafcf67b99455df"}, {"sha": "3385e795c54678dd4a95bde5f7c8058f54f05444", "url": "https://api.github.com/repos/rust-lang/rust/commits/3385e795c54678dd4a95bde5f7c8058f54f05444", "html_url": "https://github.com/rust-lang/rust/commit/3385e795c54678dd4a95bde5f7c8058f54f05444"}], "stats": {"total": 71, "additions": 37, "deletions": 34}, "files": [{"sha": "feec954bc0297e8c4b54f415c7e30d91c4939aa8", "filename": "src/libextra/ringbuf.rs", "status": "modified", "additions": 37, "deletions": 34, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/98c16549cb8f709c5e744360e7b3a37dce9fa1de/src%2Flibextra%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c16549cb8f709c5e744360e7b3a37dce9fa1de/src%2Flibextra%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fringbuf.rs?ref=98c16549cb8f709c5e744360e7b3a37dce9fa1de", "patch": "@@ -17,7 +17,7 @@ use std::num;\n use std::util;\n use std::uint;\n use std::vec;\n-use std::iterator::FromIterator;\n+use std::iterator::{FromIterator, InvertIterator};\n \n use container::Deque;\n \n@@ -180,37 +180,37 @@ impl<T> RingBuf<T> {\n \n     /// Front-to-back iterator.\n     pub fn iter<'a>(&'a self) -> RingBufIterator<'a, T> {\n-        RingBufIterator{index: 0, nelts: self.nelts, elts: self.elts, lo: self.lo}\n+        RingBufIterator{index: 0, rindex: self.nelts - 1,\n+                        nelts: self.nelts, elts: self.elts, lo: self.lo}\n     }\n \n-    /// Front-to-back iterator which returns mutable values.\n-    pub fn mut_iter<'a>(&'a mut self) -> RingBufMutIterator<'a, T> {\n-        RingBufMutIterator{index: 0, nelts: self.nelts, elts: self.elts, lo: self.lo}\n+    /// Back-to-front iterator.\n+    pub fn rev_iter<'a>(&'a self) -> InvertIterator<&'a T, RingBufIterator<'a, T>> {\n+        self.iter().invert()\n     }\n \n-    /// Back-to-front iterator.\n-    pub fn rev_iter<'a>(&'a self) -> RingBufRevIterator<'a, T> {\n-        RingBufRevIterator{index: self.nelts-1, nelts: self.nelts, elts: self.elts,\n-                         lo: self.lo}\n+    /// Front-to-back iterator which returns mutable values.\n+    pub fn mut_iter<'a>(&'a mut self) -> RingBufMutIterator<'a, T> {\n+        RingBufMutIterator{index: 0, rindex: self.nelts - 1,\n+                           nelts: self.nelts, elts: self.elts, lo: self.lo}\n     }\n \n     /// Back-to-front iterator which returns mutable values.\n-    pub fn mut_rev_iter<'a>(&'a mut self) -> RingBufMutRevIterator<'a, T> {\n-        RingBufMutRevIterator{index: self.nelts-1, nelts: self.nelts, elts: self.elts,\n-                            lo: self.lo}\n+    pub fn mut_rev_iter<'a>(&'a mut self) -> InvertIterator<&'a mut T, RingBufMutIterator<'a, T>> {\n+        self.mut_iter().invert()\n     }\n }\n \n macro_rules! iterator {\n-    (impl $name:ident -> $elem:ty, $getter:ident, $step:expr) => {\n+    (impl $name:ident -> $elem:ty, $getter:ident) => {\n         impl<'self, T> Iterator<$elem> for $name<'self, T> {\n             #[inline]\n             fn next(&mut self) -> Option<$elem> {\n                 if self.nelts == 0 {\n                     return None;\n                 }\n                 let raw_index = raw_index(self.lo, self.elts.len(), self.index);\n-                self.index += $step;\n+                self.index += 1;\n                 self.nelts -= 1;\n                 Some(self.elts[raw_index]. $getter ())\n             }\n@@ -223,41 +223,44 @@ macro_rules! iterator {\n     }\n }\n \n-/// RingBuf iterator\n-pub struct RingBufIterator<'self, T> {\n-    priv lo: uint,\n-    priv nelts: uint,\n-    priv index: uint,\n-    priv elts: &'self [Option<T>],\n+macro_rules! iterator_rev {\n+    (impl $name:ident -> $elem:ty, $getter:ident) => {\n+        impl<'self, T> DoubleEndedIterator<$elem> for $name<'self, T> {\n+            #[inline]\n+            fn next_back(&mut self) -> Option<$elem> {\n+                if self.nelts == 0 {\n+                    return None;\n+                }\n+                let raw_index = raw_index(self.lo, self.elts.len(), self.rindex);\n+                self.rindex -= 1;\n+                self.nelts -= 1;\n+                Some(self.elts[raw_index]. $getter ())\n+            }\n+        }\n+    }\n }\n-iterator!{impl RingBufIterator -> &'self T, get_ref, 1}\n \n-/// RingBuf reverse iterator\n-pub struct RingBufRevIterator<'self, T> {\n+/// RingBuf iterator\n+pub struct RingBufIterator<'self, T> {\n     priv lo: uint,\n     priv nelts: uint,\n     priv index: uint,\n+    priv rindex: uint,\n     priv elts: &'self [Option<T>],\n }\n-iterator!{impl RingBufRevIterator -> &'self T, get_ref, -1}\n+iterator!{impl RingBufIterator -> &'self T, get_ref}\n+iterator_rev!{impl RingBufIterator -> &'self T, get_ref}\n \n /// RingBuf mutable iterator\n pub struct RingBufMutIterator<'self, T> {\n     priv lo: uint,\n     priv nelts: uint,\n     priv index: uint,\n+    priv rindex: uint,\n     priv elts: &'self mut [Option<T>],\n }\n-iterator!{impl RingBufMutIterator -> &'self mut T, get_mut_ref, 1}\n-\n-/// RingBuf mutable reverse iterator\n-pub struct RingBufMutRevIterator<'self, T> {\n-    priv lo: uint,\n-    priv nelts: uint,\n-    priv index: uint,\n-    priv elts: &'self mut [Option<T>],\n-}\n-iterator!{impl RingBufMutRevIterator -> &'self mut T, get_mut_ref, -1}\n+iterator!{impl RingBufMutIterator -> &'self mut T, get_mut_ref}\n+iterator_rev!{impl RingBufMutIterator -> &'self mut T, get_mut_ref}\n \n /// Grow is only called on full elts, so nelts is also len(elts), unlike\n /// elsewhere."}]}