{"sha": "6d6038a1944394fc5e64048aea6fdbad4f59ee15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNjAzOGExOTQ0Mzk0ZmM1ZTY0MDQ4YWVhNmZkYmFkNGY1OWVlMTU=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-02-19T11:32:27Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-03-03T11:10:19Z"}, "message": "Added `OverflowingOps` trait to core::num::wrapping.\n\nThese return the result of the operation *plus* an overflow/underflow bit.\n\nThis can make it easier to write operations where you want to chain\nsome arithmetic together, but also want to return a flag signalling if\noverflow every occurred.", "tree": {"sha": "4c5146bd5e517dcdb86d2a4939734a3c7b3eda72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c5146bd5e517dcdb86d2a4939734a3c7b3eda72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d6038a1944394fc5e64048aea6fdbad4f59ee15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d6038a1944394fc5e64048aea6fdbad4f59ee15", "html_url": "https://github.com/rust-lang/rust/commit/6d6038a1944394fc5e64048aea6fdbad4f59ee15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d6038a1944394fc5e64048aea6fdbad4f59ee15/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "280dea743b5227d0d162217cbb89db881242c94e", "url": "https://api.github.com/repos/rust-lang/rust/commits/280dea743b5227d0d162217cbb89db881242c94e", "html_url": "https://github.com/rust-lang/rust/commit/280dea743b5227d0d162217cbb89db881242c94e"}], "stats": {"total": 148, "additions": 148, "deletions": 0}, "files": [{"sha": "94d37cee5b37da7523948750b99ab819fcb20fb6", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d6038a1944394fc5e64048aea6fdbad4f59ee15/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6038a1944394fc5e64048aea6fdbad4f59ee15/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=6d6038a1944394fc5e64048aea6fdbad4f59ee15", "patch": "@@ -69,6 +69,7 @@\n #![feature(unboxed_closures)]\n #![feature(rustc_attrs)]\n #![feature(optin_builtin_traits)]\n+#![feature(concat_idents)]\n \n #[macro_use]\n mod macros;"}, {"sha": "707e41a948be0d14537cf2f8b567063e81f0ed88", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/6d6038a1944394fc5e64048aea6fdbad4f59ee15/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6038a1944394fc5e64048aea6fdbad4f59ee15/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=6d6038a1944394fc5e64048aea6fdbad4f59ee15", "patch": "@@ -14,12 +14,32 @@ use ops::*;\n #[cfg(not(stage0))]\n use intrinsics::{overflowing_add, overflowing_sub, overflowing_mul};\n \n+use intrinsics::{i8_add_with_overflow, u8_add_with_overflow};\n+use intrinsics::{i16_add_with_overflow, u16_add_with_overflow};\n+use intrinsics::{i32_add_with_overflow, u32_add_with_overflow};\n+use intrinsics::{i64_add_with_overflow, u64_add_with_overflow};\n+use intrinsics::{i8_sub_with_overflow, u8_sub_with_overflow};\n+use intrinsics::{i16_sub_with_overflow, u16_sub_with_overflow};\n+use intrinsics::{i32_sub_with_overflow, u32_sub_with_overflow};\n+use intrinsics::{i64_sub_with_overflow, u64_sub_with_overflow};\n+use intrinsics::{i8_mul_with_overflow, u8_mul_with_overflow};\n+use intrinsics::{i16_mul_with_overflow, u16_mul_with_overflow};\n+use intrinsics::{i32_mul_with_overflow, u32_mul_with_overflow};\n+use intrinsics::{i64_mul_with_overflow, u64_mul_with_overflow};\n+\n pub trait WrappingOps {\n     fn wrapping_add(self, rhs: Self) -> Self;\n     fn wrapping_sub(self, rhs: Self) -> Self;\n     fn wrapping_mul(self, rhs: Self) -> Self;\n }\n \n+#[unstable(feature = \"core\", reason = \"may be removed, renamed, or relocated\")]\n+pub trait OverflowingOps {\n+    fn overflowing_add(self, rhs: Self) -> (Self, bool);\n+    fn overflowing_sub(self, rhs: Self) -> (Self, bool);\n+    fn overflowing_mul(self, rhs: Self) -> (Self, bool);\n+}\n+\n #[cfg(not(stage0))]\n macro_rules! wrapping_impl {\n     ($($t:ty)*) => ($(\n@@ -151,3 +171,130 @@ impl<T:WrappingOps+Shr<uint,Output=T>> Shr<uint> for Wrapping<T> {\n         Wrapping(self.0 >> other)\n     }\n }\n+\n+macro_rules! overflowing_impl {\n+    ($($t:ident)*) => ($(\n+        impl OverflowingOps for $t {\n+            #[inline(always)]\n+            fn overflowing_add(self, rhs: $t) -> ($t, bool) {\n+                unsafe {\n+                    concat_idents!($t, _add_with_overflow)(self, rhs)\n+                }\n+            }\n+            #[inline(always)]\n+            fn overflowing_sub(self, rhs: $t) -> ($t, bool) {\n+                unsafe {\n+                    concat_idents!($t, _sub_with_overflow)(self, rhs)\n+                }\n+            }\n+            #[inline(always)]\n+            fn overflowing_mul(self, rhs: $t) -> ($t, bool) {\n+                unsafe {\n+                    concat_idents!($t, _mul_with_overflow)(self, rhs)\n+                }\n+            }\n+        }\n+    )*)\n+}\n+\n+overflowing_impl! { u8 u16 u32 u64 i8 i16 i32 i64 }\n+\n+#[cfg(target_pointer_width = \"64\")]\n+impl OverflowingOps for usize {\n+    #[inline(always)]\n+    fn overflowing_add(self, rhs: usize) -> (usize, bool) {\n+        unsafe {\n+            let res = u64_add_with_overflow(self as u64, rhs as u64);\n+            (res.0 as usize, res.1)\n+        }\n+    }\n+    #[inline(always)]\n+    fn overflowing_sub(self, rhs: usize) -> (usize, bool) {\n+        unsafe {\n+            let res = u64_sub_with_overflow(self as u64, rhs as u64);\n+            (res.0 as usize, res.1)\n+        }\n+    }\n+    #[inline(always)]\n+    fn overflowing_mul(self, rhs: usize) -> (usize, bool) {\n+        unsafe {\n+            let res = u64_mul_with_overflow(self as u64, rhs as u64);\n+            (res.0 as usize, res.1)\n+        }\n+    }\n+}\n+\n+#[cfg(target_pointer_width = \"32\")]\n+impl OverflowingOps for usize {\n+    #[inline(always)]\n+    fn overflowing_add(self, rhs: usize) -> (usize, bool) {\n+        unsafe {\n+            let res = u32_add_with_overflow(self as u32, rhs as u32);\n+            (res.0 as usize, res.1)\n+        }\n+    }\n+    #[inline(always)]\n+    fn overflowing_sub(self, rhs: usize) -> (usize, bool) {\n+        unsafe {\n+            let res = u32_sub_with_overflow(self as u32, rhs as u32);\n+            (res.0 as usize, res.1)\n+        }\n+    }\n+    #[inline(always)]\n+    fn overflowing_mul(self, rhs: usize) -> (usize, bool) {\n+        unsafe {\n+            let res = u32_mul_with_overflow(self as u32, rhs as u32);\n+            (res.0 as usize, res.1)\n+        }\n+    }\n+}\n+\n+#[cfg(target_pointer_width = \"64\")]\n+impl OverflowingOps for isize {\n+    #[inline(always)]\n+    fn overflowing_add(self, rhs: isize) -> (isize, bool) {\n+        unsafe {\n+            let res = i64_add_with_overflow(self as i64, rhs as i64);\n+            (res.0 as isize, res.1)\n+        }\n+    }\n+    #[inline(always)]\n+    fn overflowing_sub(self, rhs: isize) -> (isize, bool) {\n+        unsafe {\n+            let res = i64_sub_with_overflow(self as i64, rhs as i64);\n+            (res.0 as isize, res.1)\n+        }\n+    }\n+    #[inline(always)]\n+    fn overflowing_mul(self, rhs: isize) -> (isize, bool) {\n+        unsafe {\n+            let res = i64_mul_with_overflow(self as i64, rhs as i64);\n+            (res.0 as isize, res.1)\n+        }\n+    }\n+}\n+\n+#[cfg(target_pointer_width = \"32\")]\n+impl OverflowingOps for isize {\n+    #[inline(always)]\n+    fn overflowing_add(self, rhs: isize) -> (isize, bool) {\n+        unsafe {\n+            let res = i32_add_with_overflow(self as i32, rhs as i32);\n+            (res.0 as isize, res.1)\n+        }\n+    }\n+    #[inline(always)]\n+    fn overflowing_sub(self, rhs: isize) -> (isize, bool) {\n+        unsafe {\n+            let res = i32_sub_with_overflow(self as i32, rhs as i32);\n+            (res.0 as isize, res.1)\n+        }\n+    }\n+    #[inline(always)]\n+    fn overflowing_mul(self, rhs: isize) -> (isize, bool) {\n+        unsafe {\n+            let res = i32_mul_with_overflow(self as i32, rhs as i32);\n+            (res.0 as isize, res.1)\n+        }\n+    }\n+}"}]}