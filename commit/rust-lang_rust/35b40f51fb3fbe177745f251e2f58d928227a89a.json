{"sha": "35b40f51fb3fbe177745f251e2f58d928227a89a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YjQwZjUxZmIzZmJlMTc3NzQ1ZjI1MWUyZjU4ZDkyODIyN2E4OWE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-13T10:51:42Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T12:40:12Z"}, "message": "[eddyb/rebase cleanup] abstracted Funclet", "tree": {"sha": "6c8c792ca6c87aed0220536549a1c7ab3a68f45e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c8c792ca6c87aed0220536549a1c7ab3a68f45e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35b40f51fb3fbe177745f251e2f58d928227a89a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35b40f51fb3fbe177745f251e2f58d928227a89a", "html_url": "https://github.com/rust-lang/rust/commit/35b40f51fb3fbe177745f251e2f58d928227a89a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35b40f51fb3fbe177745f251e2f58d928227a89a/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "566fa4d003dd27c63a708a9e5e4e5c673a276f8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/566fa4d003dd27c63a708a9e5e4e5c673a276f8d", "html_url": "https://github.com/rust-lang/rust/commit/566fa4d003dd27c63a708a9e5e4e5c673a276f8d"}], "stats": {"total": 145, "additions": 59, "deletions": 86}, "files": [{"sha": "ae0d89a56098a6d29ee346cec2144a807950cda6", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/35b40f51fb3fbe177745f251e2f58d928227a89a/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b40f51fb3fbe177745f251e2f58d928227a89a/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=35b40f51fb3fbe177745f251e2f58d928227a89a", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n use llvm::{AtomicRmwBinOp, AtomicOrdering, SynchronizationScope, AsmDialect};\n-use llvm::{self, False, OperandBundleDef, BasicBlock};\n-use common;\n+use llvm::{self, False, BasicBlock};\n use rustc_codegen_utils::common::{IntPredicate, TypeKind, RealPredicate};\n use rustc_codegen_utils;\n+use common::Funclet;\n use context::CodegenCx;\n use type_::Type;\n use type_of::LayoutLlvmExt;\n@@ -66,6 +66,7 @@ impl BackendTypes for Builder<'_, 'll, 'tcx> {\n     type BasicBlock = <CodegenCx<'ll, 'tcx> as BackendTypes>::BasicBlock;\n     type Type = <CodegenCx<'ll, 'tcx> as BackendTypes>::Type;\n     type Context = <CodegenCx<'ll, 'tcx> as BackendTypes>::Context;\n+    type Funclet = <CodegenCx<'ll, 'tcx> as BackendTypes>::Funclet;\n \n     type DIScope = <CodegenCx<'ll, 'tcx> as BackendTypes>::DIScope;\n }\n@@ -218,12 +219,14 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    fn invoke(&self,\n-                  llfn: &'ll Value,\n-                  args: &[&'ll Value],\n-                  then: &'ll BasicBlock,\n-                  catch: &'ll BasicBlock,\n-                  funclet: Option<&common::Funclet<&'ll Value>>) -> &'ll Value {\n+    fn invoke(\n+        &self,\n+        llfn: &'ll Value,\n+        args: &[&'ll Value],\n+        then: &'ll BasicBlock,\n+        catch: &'ll BasicBlock,\n+        funclet: Option<&Funclet<'ll>>,\n+    ) -> &'ll Value {\n         self.count_insn(\"invoke\");\n \n         debug!(\"Invoke {:?} with args ({:?})\",\n@@ -232,7 +235,6 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n \n         let args = self.check_call(\"invoke\", llfn, args);\n         let bundle = funclet.map(|funclet| funclet.bundle());\n-        let bundle = bundle.map(OperandBundleDef::from_generic);\n         let bundle = bundle.as_ref().map(|b| &*b.raw);\n \n         unsafe {\n@@ -1123,7 +1125,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n \n     fn cleanup_pad(&self,\n                        parent: Option<&'ll Value>,\n-                       args: &[&'ll Value]) -> &'ll Value {\n+                       args: &[&'ll Value]) -> Funclet<'ll> {\n         self.count_insn(\"cleanuppad\");\n         let name = const_cstr!(\"cleanuppad\");\n         let ret = unsafe {\n@@ -1133,37 +1135,37 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n                                           args.as_ptr(),\n                                           name.as_ptr())\n         };\n-        ret.expect(\"LLVM does not have support for cleanuppad\")\n+        Funclet::new(ret.expect(\"LLVM does not have support for cleanuppad\"))\n     }\n \n     fn cleanup_ret(\n-        &self, cleanup: &'ll Value,\n+        &self, funclet: &Funclet<'ll>,\n         unwind: Option<&'ll BasicBlock>,\n     ) -> &'ll Value {\n         self.count_insn(\"cleanupret\");\n         let ret = unsafe {\n-            llvm::LLVMRustBuildCleanupRet(self.llbuilder, cleanup, unwind)\n+            llvm::LLVMRustBuildCleanupRet(self.llbuilder, funclet.cleanuppad(), unwind)\n         };\n         ret.expect(\"LLVM does not have support for cleanupret\")\n     }\n \n     fn catch_pad(&self,\n                      parent: &'ll Value,\n-                     args: &[&'ll Value]) -> &'ll Value {\n+                     args: &[&'ll Value]) -> Funclet<'ll> {\n         self.count_insn(\"catchpad\");\n         let name = const_cstr!(\"catchpad\");\n         let ret = unsafe {\n             llvm::LLVMRustBuildCatchPad(self.llbuilder, parent,\n                                         args.len() as c_uint, args.as_ptr(),\n                                         name.as_ptr())\n         };\n-        ret.expect(\"LLVM does not have support for catchpad\")\n+        Funclet::new(ret.expect(\"LLVM does not have support for catchpad\"))\n     }\n \n-    fn catch_ret(&self, pad: &'ll Value, unwind: &'ll BasicBlock) -> &'ll Value {\n+    fn catch_ret(&self, funclet: &Funclet<'ll>, unwind: &'ll BasicBlock) -> &'ll Value {\n         self.count_insn(\"catchret\");\n         let ret = unsafe {\n-            llvm::LLVMRustBuildCatchRet(self.llbuilder, pad, unwind)\n+            llvm::LLVMRustBuildCatchRet(self.llbuilder, funclet.cleanuppad(), unwind)\n         };\n         ret.expect(\"LLVM does not have support for catchret\")\n     }\n@@ -1356,8 +1358,12 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         self.call(lifetime_intrinsic, &[self.cx.const_u64(size), ptr], None);\n     }\n \n-    fn call(&self, llfn: &'ll Value, args: &[&'ll Value],\n-                funclet: Option<&common::Funclet<&'ll Value>>) -> &'ll Value {\n+    fn call(\n+        &self,\n+        llfn: &'ll Value,\n+        args: &[&'ll Value],\n+        funclet: Option<&Funclet<'ll>>,\n+    ) -> &'ll Value {\n         self.count_insn(\"call\");\n \n         debug!(\"Call {:?} with args ({:?})\",\n@@ -1366,7 +1372,6 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n \n         let args = self.check_call(\"call\", llfn, args);\n         let bundle = funclet.map(|funclet| funclet.bundle());\n-        let bundle = bundle.map(OperandBundleDef::from_generic);\n         let bundle = bundle.as_ref().map(|b| &*b.raw);\n \n         unsafe {"}, {"sha": "13e71b8ab04aad770b845d1e2e811f16d9688ace", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 12, "deletions": 37, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/35b40f51fb3fbe177745f251e2f58d928227a89a/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b40f51fb3fbe177745f251e2f58d928227a89a/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=35b40f51fb3fbe177745f251e2f58d928227a89a", "patch": "@@ -12,7 +12,7 @@\n \n //! Code that is useful in various codegen modules.\n \n-use llvm::{self, True, False, Bool, BasicBlock};\n+use llvm::{self, True, False, Bool, BasicBlock, OperandBundleDef};\n use rustc::hir::def_id::DefId;\n use rustc::middle::lang_items::LangItem;\n use abi;\n@@ -23,7 +23,7 @@ use type_of::LayoutLlvmExt;\n use value::Value;\n use interfaces::*;\n \n-use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::{Ty, TyCtxt};\n use rustc::ty::layout::{HasDataLayout, LayoutOf, self, TyLayout, Size};\n use rustc::mir::interpret::{Scalar, AllocType, Allocation};\n use rustc::hir;\n@@ -35,36 +35,10 @@ use libc::{c_uint, c_char};\n \n use syntax::symbol::LocalInternedString;\n use syntax::ast::Mutability;\n-use syntax_pos::{Span, DUMMY_SP};\n+use syntax_pos::Span;\n \n pub use context::CodegenCx;\n \n-pub fn type_needs_drop<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bool {\n-    ty.needs_drop(tcx, ty::ParamEnv::reveal_all())\n-}\n-\n-pub fn type_is_sized<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bool {\n-    ty.is_sized(tcx.at(DUMMY_SP), ty::ParamEnv::reveal_all())\n-}\n-\n-pub fn type_is_freeze<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bool {\n-    ty.is_freeze(tcx, ty::ParamEnv::reveal_all(), DUMMY_SP)\n-}\n-\n-pub struct OperandBundleDef<'a, V> {\n-    pub name: &'a str,\n-    pub val: V\n-}\n-\n-impl<'a, V> OperandBundleDef<'a, V> {\n-    pub fn new(name: &'a str, val: V) -> Self {\n-        OperandBundleDef {\n-            name,\n-            val\n-        }\n-    }\n-}\n-\n /*\n * A note on nomenclature of linking: \"extern\", \"foreign\", and \"upcall\".\n *\n@@ -105,24 +79,24 @@ impl<'a, V> OperandBundleDef<'a, V> {\n /// When inside of a landing pad, each function call in LLVM IR needs to be\n /// annotated with which landing pad it's a part of. This is accomplished via\n /// the `OperandBundleDef` value created for MSVC landing pads.\n-pub struct Funclet<'a, V> {\n-    cleanuppad: V,\n-    operand: OperandBundleDef<'a, V>,\n+pub struct Funclet<'ll> {\n+    cleanuppad: &'ll Value,\n+    operand: OperandBundleDef<'ll>,\n }\n \n-impl<'a, V: CodegenObject> Funclet<'a, V> {\n-    pub fn new(cleanuppad: V) -> Self {\n+impl Funclet<'ll> {\n+    pub fn new(cleanuppad: &'ll Value) -> Self {\n         Funclet {\n             cleanuppad,\n-            operand: OperandBundleDef::new(\"funclet\", cleanuppad),\n+            operand: OperandBundleDef::new(\"funclet\", &[cleanuppad]),\n         }\n     }\n \n-    pub fn cleanuppad(&self) -> V {\n+    pub fn cleanuppad(&self) -> &'ll Value {\n         self.cleanuppad\n     }\n \n-    pub fn bundle(&self) -> &OperandBundleDef<'a, V> {\n+    pub fn bundle(&self) -> &OperandBundleDef<'ll> {\n         &self.operand\n     }\n }\n@@ -132,6 +106,7 @@ impl BackendTypes for CodegenCx<'ll, 'tcx> {\n     type BasicBlock = &'ll BasicBlock;\n     type Type = &'ll Type;\n     type Context = &'ll llvm::Context;\n+    type Funclet = Funclet<'ll>;\n \n     type DIScope = &'ll llvm::debuginfo::DIScope;\n }"}, {"sha": "d21e39769af520f352074a691a76f45ef83cb26b", "filename": "src/librustc_codegen_llvm/interfaces/backend.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35b40f51fb3fbe177745f251e2f58d928227a89a/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b40f51fb3fbe177745f251e2f58d928227a89a/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbackend.rs?ref=35b40f51fb3fbe177745f251e2f58d928227a89a", "patch": "@@ -28,6 +28,7 @@ pub trait BackendTypes {\n     type BasicBlock: Copy;\n     type Type: CodegenObject;\n     type Context;\n+    type Funclet;\n \n     type DIScope: Copy;\n }"}, {"sha": "61e60d55e09814d338c07e229bb4779fb41c44d6", "filename": "src/librustc_codegen_llvm/interfaces/builder.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/35b40f51fb3fbe177745f251e2f58d928227a89a/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b40f51fb3fbe177745f251e2f58d928227a89a/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbuilder.rs?ref=35b40f51fb3fbe177745f251e2f58d928227a89a", "patch": "@@ -15,7 +15,6 @@ use super::intrinsic::IntrinsicCallMethods;\n use super::type_::ArgTypeMethods;\n use super::HasCodegen;\n use builder::MemFlags;\n-use common::*;\n use libc::c_char;\n use mir::operand::OperandRef;\n use mir::place::PlaceRef;\n@@ -58,7 +57,7 @@ pub trait BuilderMethods<'a, 'tcx: 'a>:\n         args: &[Self::Value],\n         then: Self::BasicBlock,\n         catch: Self::BasicBlock,\n-        funclet: Option<&Funclet<Self::Value>>,\n+        funclet: Option<&Self::Funclet>,\n     ) -> Self::Value;\n     fn unreachable(&self);\n     fn add(&self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n@@ -213,10 +212,10 @@ pub trait BuilderMethods<'a, 'tcx: 'a>:\n     fn add_clause(&self, landing_pad: Self::Value, clause: Self::Value);\n     fn set_cleanup(&self, landing_pad: Self::Value);\n     fn resume(&self, exn: Self::Value) -> Self::Value;\n-    fn cleanup_pad(&self, parent: Option<Self::Value>, args: &[Self::Value]) -> Self::Value;\n-    fn cleanup_ret(&self, cleanup: Self::Value, unwind: Option<Self::BasicBlock>) -> Self::Value;\n-    fn catch_pad(&self, parent: Self::Value, args: &[Self::Value]) -> Self::Value;\n-    fn catch_ret(&self, pad: Self::Value, unwind: Self::BasicBlock) -> Self::Value;\n+    fn cleanup_pad(&self, parent: Option<Self::Value>, args: &[Self::Value]) -> Self::Funclet;\n+    fn cleanup_ret(&self, funclet: &Self::Funclet, unwind: Option<Self::BasicBlock>) -> Self::Value;\n+    fn catch_pad(&self, parent: Self::Value, args: &[Self::Value]) -> Self::Funclet;\n+    fn catch_ret(&self, funclet: &Self::Funclet, unwind: Self::BasicBlock) -> Self::Value;\n     fn catch_switch(\n         &self,\n         parent: Option<Self::Value>,\n@@ -276,7 +275,7 @@ pub trait BuilderMethods<'a, 'tcx: 'a>:\n         &self,\n         llfn: Self::Value,\n         args: &[Self::Value],\n-        funclet: Option<&Funclet<Self::Value>>,\n+        funclet: Option<&Self::Funclet>,\n     ) -> Self::Value;\n     fn zext(&self, val: Self::Value, dest_ty: Self::Type) -> Self::Value;\n "}, {"sha": "f1040020aff23ba369cc77b0b5182eee9c08740f", "filename": "src/librustc_codegen_llvm/interfaces/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35b40f51fb3fbe177745f251e2f58d928227a89a/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b40f51fb3fbe177745f251e2f58d928227a89a/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs?ref=35b40f51fb3fbe177745f251e2f58d928227a89a", "patch": "@@ -72,6 +72,7 @@ pub trait HasCodegen<'tcx>: Backend<'tcx> {\n             BasicBlock = Self::BasicBlock,\n             Type = Self::Type,\n             Context = Self::Context,\n+            Funclet = Self::Funclet,\n             DIScope = Self::DIScope,\n         >;\n }"}, {"sha": "07b5017e4c847335137c34079c88f6579a0fee88", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35b40f51fb3fbe177745f251e2f58d928227a89a/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b40f51fb3fbe177745f251e2f58d928227a89a/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=35b40f51fb3fbe177745f251e2f58d928227a89a", "patch": "@@ -894,7 +894,7 @@ fn codegen_msvc_try(\n             Some(did) => cx.get_static(did),\n             None => bug!(\"msvc_try_filter not defined\"),\n         };\n-        let tok = catchpad.catch_pad(cs, &[tydesc, cx.const_i32(0), slot]);\n+        let funclet = catchpad.catch_pad(cs, &[tydesc, cx.const_i32(0), slot]);\n         let addr = catchpad.load(slot, ptr_align);\n \n         let i64_align = bx.tcx().data_layout.i64_align;\n@@ -904,7 +904,7 @@ fn codegen_msvc_try(\n         let local_ptr = catchpad.bitcast(local_ptr, i64p);\n         catchpad.store(arg1, local_ptr, i64_align);\n         catchpad.store(arg2, catchpad.inbounds_gep(local_ptr, &[val1]), i64_align);\n-        catchpad.catch_ret(tok, caught.llbb());\n+        catchpad.catch_ret(&funclet, caught.llbb());\n \n         caught.ret(cx.const_i32(1));\n     });"}, {"sha": "fbd5192a63f8e42c1ccc93eec222af882e97c96b", "filename": "src/librustc_codegen_llvm/llvm/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/35b40f51fb3fbe177745f251e2f58d928227a89a/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b40f51fb3fbe177745f251e2f58d928227a89a/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs?ref=35b40f51fb3fbe177745f251e2f58d928227a89a", "patch": "@@ -28,7 +28,6 @@ use std::ffi::CStr;\n use std::cell::RefCell;\n use libc::{self, c_uint, c_char, size_t};\n use rustc_data_structures::small_c_str::SmallCStr;\n-use common;\n \n pub mod archive_ro;\n pub mod diagnostic;\n@@ -272,10 +271,6 @@ impl OperandBundleDef<'a> {\n         };\n         OperandBundleDef { raw: def }\n     }\n-\n-    pub fn from_generic(bundle: &common::OperandBundleDef<'a, &'a Value>) -> Self {\n-        Self::new(bundle.name, &[bundle.val])\n-    }\n }\n \n impl Drop for OperandBundleDef<'a> {"}, {"sha": "02d532f8c0d965e6ec5a6bf72a52e53713d53a3c", "filename": "src/librustc_codegen_llvm/mir/block.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/35b40f51fb3fbe177745f251e2f58d928227a89a/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b40f51fb3fbe177745f251e2f58d928227a89a/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs?ref=35b40f51fb3fbe177745f251e2f58d928227a89a", "patch": "@@ -17,7 +17,7 @@ use abi::{Abi, FnType, PassMode};\n use rustc_target::abi::call::ArgType;\n use base;\n use builder::MemFlags;\n-use common::{self, Funclet};\n+use common;\n use rustc_codegen_utils::common::IntPredicate;\n use meth;\n use monomorphize;\n@@ -67,7 +67,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             funclet_bb: Option<mir::BasicBlock>\n         ) -> impl for<'b> Fn(\n             &'b FunctionCx<'a, 'tcx, Bx>,\n-        ) -> Option<&'b Funclet<'static, Bx::Value>> {\n+        ) -> Option<&'b Bx::Funclet> {\n             move |this| {\n                 match funclet_bb {\n                     Some(funclet_bb) => this.funclets[funclet_bb].as_ref(),\n@@ -77,8 +77,6 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         }\n         let funclet = funclet_closure_factory(funclet_bb);\n \n-        let cleanup_pad = |this: &Self| funclet(this).map(|lp| lp.cleanuppad());\n-\n         let lltarget = |this: &mut Self, target: mir::BasicBlock| {\n             let lltarget = this.blocks[target];\n             let target_funclet = this.cleanup_kinds[target].funclet_bb(target);\n@@ -106,7 +104,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 debug!(\"llblock: creating cleanup trampoline for {:?}\", target);\n                 let name = &format!(\"{:?}_cleanup_trampoline_{:?}\", bb, target);\n                 let trampoline = this.new_block(name);\n-                trampoline.cleanup_ret(cleanup_pad(this).unwrap(), Some(lltarget));\n+                trampoline.cleanup_ret(funclet(this).unwrap(), Some(lltarget));\n                 trampoline.llbb()\n             } else {\n                 lltarget\n@@ -119,7 +117,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 if is_cleanupret {\n                     // micro-optimization: generate a `ret` rather than a jump\n                     // to a trampoline.\n-                    bx.cleanup_ret(cleanup_pad(this).unwrap(), Some(lltarget));\n+                    bx.cleanup_ret(funclet(this).unwrap(), Some(lltarget));\n                 } else {\n                     bx.br(lltarget);\n                 }\n@@ -175,8 +173,8 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         self.set_debug_loc(&bx, terminator.source_info);\n         match terminator.kind {\n             mir::TerminatorKind::Resume => {\n-                if let Some(cleanup_pad) = cleanup_pad(self) {\n-                    bx.cleanup_ret(cleanup_pad, None);\n+                if let Some(funclet) = funclet(self) {\n+                    bx.cleanup_ret(funclet, None);\n                 } else {\n                     let slot = self.get_personality_slot(&bx);\n                     let lp0 = bx.load_operand(slot.project_field(&bx, 0)).immediate();"}, {"sha": "c7e2a5d2af32f12e28d95232fe7051c1a2ca0cf8", "filename": "src/librustc_codegen_llvm/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/35b40f51fb3fbe177745f251e2f58d928227a89a/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b40f51fb3fbe177745f251e2f58d928227a89a/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs?ref=35b40f51fb3fbe177745f251e2f58d928227a89a", "patch": "@@ -18,7 +18,6 @@ use rustc::ty::subst::Substs;\n use rustc::session::config::DebugInfo;\n use base;\n use debuginfo::{self, VariableAccess, VariableKind, FunctionDebugContext};\n-use common::Funclet;\n use monomorphize::Instance;\n use abi::{FnType, PassMode};\n use interfaces::*;\n@@ -70,7 +69,7 @@ pub struct FunctionCx<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> {\n \n     /// When targeting MSVC, this stores the cleanup info for each funclet\n     /// BB. This is initialized as we compute the funclets' head block in RPO.\n-    funclets: IndexVec<mir::BasicBlock, Option<Funclet<'static, Bx::Value>>>,\n+    funclets: IndexVec<mir::BasicBlock, Option<Bx::Funclet>>,\n \n     /// This stores the landing-pad block for a given BB, computed lazily on GNU\n     /// and eagerly on MSVC.\n@@ -372,15 +371,15 @@ fn create_funclets<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n     cleanup_kinds: &IndexVec<mir::BasicBlock, CleanupKind>,\n     block_bxs: &IndexVec<mir::BasicBlock, Bx::BasicBlock>)\n     -> (IndexVec<mir::BasicBlock, Option<Bx::BasicBlock>>,\n-        IndexVec<mir::BasicBlock, Option<Funclet<'static, Bx::Value>>>)\n+        IndexVec<mir::BasicBlock, Option<Bx::Funclet>>)\n {\n     block_bxs.iter_enumerated().zip(cleanup_kinds).map(|((bb, &llbb), cleanup_kind)| {\n         match *cleanup_kind {\n             CleanupKind::Funclet if base::wants_msvc_seh(bx.cx().sess()) => {}\n             _ => return (None, None)\n         }\n \n-        let cleanup;\n+        let funclet;\n         let ret_llbb;\n         match mir[bb].terminator.as_ref().map(|t| &t.kind) {\n             // This is a basic block that we're aborting the program for,\n@@ -417,18 +416,18 @@ fn create_funclets<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n                 // represents that this is a catch-all block.\n                 let null = bx.cx().const_null(bx.cx().type_i8p());\n                 let sixty_four = bx.cx().const_i32(64);\n-                cleanup = cp_bx.catch_pad(cs, &[null, sixty_four, null]);\n+                funclet = cp_bx.catch_pad(cs, &[null, sixty_four, null]);\n                 cp_bx.br(llbb);\n             }\n             _ => {\n                 let cleanup_bx = bx.build_sibling_block(&format!(\"funclet_{:?}\", bb));\n                 ret_llbb = cleanup_bx.llbb();\n-                cleanup = cleanup_bx.cleanup_pad(None, &[]);\n+                funclet = cleanup_bx.cleanup_pad(None, &[]);\n                 cleanup_bx.br(llbb);\n             }\n         };\n \n-        (Some(ret_llbb), Some(Funclet::new(cleanup)))\n+        (Some(ret_llbb), Some(funclet))\n     }).unzip()\n }\n "}]}