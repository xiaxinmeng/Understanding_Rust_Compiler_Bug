{"sha": "29403eeef0b175b4a65cc3c7865708ee15d8a7e8", "node_id": "C_kwDOAAsO6NoAKDI5NDAzZWVlZjBiMTc1YjRhNjVjYzNjNzg2NTcwOGVlMTVkOGE3ZTg", "commit": {"author": {"name": "Ibraheem Ahmed", "email": "ibrah1440@gmail.com", "date": "2021-11-13T03:53:26Z"}, "committer": {"name": "Ibraheem Ahmed", "email": "ibrah1440@gmail.com", "date": "2021-11-13T03:53:26Z"}, "message": "add unchecked downcast methods", "tree": {"sha": "4598446e39380ef73fd490c466bef09ee2b16afd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4598446e39380ef73fd490c466bef09ee2b16afd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29403eeef0b175b4a65cc3c7865708ee15d8a7e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29403eeef0b175b4a65cc3c7865708ee15d8a7e8", "html_url": "https://github.com/rust-lang/rust/commit/29403eeef0b175b4a65cc3c7865708ee15d8a7e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29403eeef0b175b4a65cc3c7865708ee15d8a7e8/comments", "author": {"login": "ibraheemdev", "id": 34988408, "node_id": "MDQ6VXNlcjM0OTg4NDA4", "avatar_url": "https://avatars.githubusercontent.com/u/34988408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibraheemdev", "html_url": "https://github.com/ibraheemdev", "followers_url": "https://api.github.com/users/ibraheemdev/followers", "following_url": "https://api.github.com/users/ibraheemdev/following{/other_user}", "gists_url": "https://api.github.com/users/ibraheemdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibraheemdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibraheemdev/subscriptions", "organizations_url": "https://api.github.com/users/ibraheemdev/orgs", "repos_url": "https://api.github.com/users/ibraheemdev/repos", "events_url": "https://api.github.com/users/ibraheemdev/events{/privacy}", "received_events_url": "https://api.github.com/users/ibraheemdev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibraheemdev", "id": 34988408, "node_id": "MDQ6VXNlcjM0OTg4NDA4", "avatar_url": "https://avatars.githubusercontent.com/u/34988408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibraheemdev", "html_url": "https://github.com/ibraheemdev", "followers_url": "https://api.github.com/users/ibraheemdev/followers", "following_url": "https://api.github.com/users/ibraheemdev/following{/other_user}", "gists_url": "https://api.github.com/users/ibraheemdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibraheemdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibraheemdev/subscriptions", "organizations_url": "https://api.github.com/users/ibraheemdev/orgs", "repos_url": "https://api.github.com/users/ibraheemdev/repos", "events_url": "https://api.github.com/users/ibraheemdev/events{/privacy}", "received_events_url": "https://api.github.com/users/ibraheemdev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "html_url": "https://github.com/rust-lang/rust/commit/e90c5fbbc5df5c81267747daeb937d4e955ce6ad"}], "stats": {"total": 309, "additions": 273, "deletions": 36}, "files": [{"sha": "81ac37a306b447187a57c217c64aa65ec22d12a3", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 103, "deletions": 28, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/29403eeef0b175b4a65cc3c7865708ee15d8a7e8/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29403eeef0b175b4a65cc3c7865708ee15d8a7e8/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=29403eeef0b175b4a65cc3c7865708ee15d8a7e8", "patch": "@@ -1482,8 +1482,6 @@ impl<T, const N: usize> TryFrom<Box<[T]>> for Box<[T; N]> {\n }\n \n impl<A: Allocator> Box<dyn Any, A> {\n-    #[inline]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     /// Attempt to downcast the box to a concrete type.\n     ///\n     /// # Examples\n@@ -1501,21 +1499,46 @@ impl<A: Allocator> Box<dyn Any, A> {\n     /// print_if_string(Box::new(my_string));\n     /// print_if_string(Box::new(0i8));\n     /// ```\n+    #[inline]\n+    #[stable(feature = \"box_send_sync_any_downcast\", since = \"1.51.0\")]\n     pub fn downcast<T: Any>(self) -> Result<Box<T, A>, Self> {\n-        if self.is::<T>() {\n-            unsafe {\n-                let (raw, alloc): (*mut dyn Any, _) = Box::into_raw_with_allocator(self);\n-                Ok(Box::from_raw_in(raw as *mut T, alloc))\n-            }\n-        } else {\n-            Err(self)\n+        if self.is::<T>() { unsafe { Ok(self.downcast_unchecked::<T>()) } } else { Err(self) }\n+    }\n+\n+    /// Downcasts the box to a concrete type.\n+    ///\n+    /// For a safe alternative see [`downcast`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(downcast_unchecked)]\n+    ///\n+    /// use std::any::Any;\n+    ///\n+    /// let x: Box<dyn Any> = Box::new(1_usize);\n+    ///\n+    /// unsafe {\n+    ///     assert_eq!(*x.downcast_unchecked::<usize>(), 1);\n+    /// }\n+    /// ```\n+    ///\n+    /// # Safety\n+    ///\n+    /// The contained value must be of type `T`. Calling this method\n+    /// with the incorrect type is *undefined behavior*.\n+    #[inline]\n+    #[unstable(feature = \"downcast_unchecked\", issue = \"none\")]\n+    pub unsafe fn downcast_unchecked<T: Any>(self) -> Box<T, A> {\n+        debug_assert!(self.is::<T>());\n+        unsafe {\n+            let (raw, alloc): (*mut dyn Any, _) = Box::into_raw_with_allocator(self);\n+            Box::from_raw_in(raw as *mut T, alloc)\n         }\n     }\n }\n \n impl<A: Allocator> Box<dyn Any + Send, A> {\n-    #[inline]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     /// Attempt to downcast the box to a concrete type.\n     ///\n     /// # Examples\n@@ -1533,21 +1556,46 @@ impl<A: Allocator> Box<dyn Any + Send, A> {\n     /// print_if_string(Box::new(my_string));\n     /// print_if_string(Box::new(0i8));\n     /// ```\n+    #[inline]\n+    #[stable(feature = \"box_send_sync_any_downcast\", since = \"1.51.0\")]\n     pub fn downcast<T: Any>(self) -> Result<Box<T, A>, Self> {\n-        if self.is::<T>() {\n-            unsafe {\n-                let (raw, alloc): (*mut (dyn Any + Send), _) = Box::into_raw_with_allocator(self);\n-                Ok(Box::from_raw_in(raw as *mut T, alloc))\n-            }\n-        } else {\n-            Err(self)\n+        if self.is::<T>() { unsafe { Ok(self.downcast_unchecked::<T>()) } } else { Err(self) }\n+    }\n+\n+    /// Downcasts the box to a concrete type.\n+    ///\n+    /// For a safe alternative see [`downcast`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(downcast_unchecked)]\n+    ///\n+    /// use std::any::Any;\n+    ///\n+    /// let x: Box<dyn Any + Send> = Box::new(1_usize);\n+    ///\n+    /// unsafe {\n+    ///     assert_eq!(*x.downcast_unchecked::<usize>(), 1);\n+    /// }\n+    /// ```\n+    ///\n+    /// # Safety\n+    ///\n+    /// The contained value must be of type `T`. Calling this method\n+    /// with the incorrect type is *undefined behavior*.\n+    #[inline]\n+    #[unstable(feature = \"downcast_unchecked\", issue = \"none\")]\n+    pub unsafe fn downcast_unchecked<T: Any>(self) -> Box<T, A> {\n+        debug_assert!(self.is::<T>());\n+        unsafe {\n+            let (raw, alloc): (*mut (dyn Any + Send), _) = Box::into_raw_with_allocator(self);\n+            Box::from_raw_in(raw as *mut T, alloc)\n         }\n     }\n }\n \n impl<A: Allocator> Box<dyn Any + Send + Sync, A> {\n-    #[inline]\n-    #[stable(feature = \"box_send_sync_any_downcast\", since = \"1.51.0\")]\n     /// Attempt to downcast the box to a concrete type.\n     ///\n     /// # Examples\n@@ -1565,15 +1613,42 @@ impl<A: Allocator> Box<dyn Any + Send + Sync, A> {\n     /// print_if_string(Box::new(my_string));\n     /// print_if_string(Box::new(0i8));\n     /// ```\n+    #[inline]\n+    #[stable(feature = \"box_send_sync_any_downcast\", since = \"1.51.0\")]\n     pub fn downcast<T: Any>(self) -> Result<Box<T, A>, Self> {\n-        if self.is::<T>() {\n-            unsafe {\n-                let (raw, alloc): (*mut (dyn Any + Send + Sync), _) =\n-                    Box::into_raw_with_allocator(self);\n-                Ok(Box::from_raw_in(raw as *mut T, alloc))\n-            }\n-        } else {\n-            Err(self)\n+        if self.is::<T>() { unsafe { Ok(self.downcast_unchecked::<T>()) } } else { Err(self) }\n+    }\n+\n+    /// Downcasts the box to a concrete type.\n+    ///\n+    /// For a safe alternative see [`downcast`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(downcast_unchecked)]\n+    ///\n+    /// use std::any::Any;\n+    ///\n+    /// let x: Box<dyn Any + Send + Sync> = Box::new(1_usize);\n+    ///\n+    /// unsafe {\n+    ///     assert_eq!(*x.downcast_unchecked::<usize>(), 1);\n+    /// }\n+    /// ```\n+    ///\n+    /// # Safety\n+    ///\n+    /// The contained value must be of type `T`. Calling this method\n+    /// with the incorrect type is *undefined behavior*.\n+    #[inline]\n+    #[unstable(feature = \"downcast_unchecked\", issue = \"none\")]\n+    pub unsafe fn downcast_unchecked<T: Any>(self) -> Box<T, A> {\n+        debug_assert!(self.is::<T>());\n+        unsafe {\n+            let (raw, alloc): (*mut (dyn Any + Send + Sync), _) =\n+                Box::into_raw_with_allocator(self);\n+            Box::from_raw_in(raw as *mut T, alloc)\n         }\n     }\n }"}, {"sha": "8ff38e52a6f8e5171961743299b34ed1cfc6c6d8", "filename": "library/core/src/any.rs", "status": "modified", "additions": 170, "deletions": 8, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/29403eeef0b175b4a65cc3c7865708ee15d8a7e8/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29403eeef0b175b4a65cc3c7865708ee15d8a7e8/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=29403eeef0b175b4a65cc3c7865708ee15d8a7e8", "patch": "@@ -164,7 +164,7 @@ impl fmt::Debug for dyn Any + Send + Sync {\n }\n \n impl dyn Any {\n-    /// Returns `true` if the boxed type is the same as `T`.\n+    /// Returns `true` if the inner type is the same as `T`.\n     ///\n     /// # Examples\n     ///\n@@ -195,7 +195,7 @@ impl dyn Any {\n         t == concrete\n     }\n \n-    /// Returns some reference to the boxed value if it is of type `T`, or\n+    /// Returns some reference to the inner value if it is of type `T`, or\n     /// `None` if it isn't.\n     ///\n     /// # Examples\n@@ -221,13 +221,13 @@ impl dyn Any {\n             // SAFETY: just checked whether we are pointing to the correct type, and we can rely on\n             // that check for memory safety because we have implemented Any for all types; no other\n             // impls can exist as they would conflict with our impl.\n-            unsafe { Some(&*(self as *const dyn Any as *const T)) }\n+            unsafe { Some(self.downcast_ref_unchecked()) }\n         } else {\n             None\n         }\n     }\n \n-    /// Returns some mutable reference to the boxed value if it is of type `T`, or\n+    /// Returns some mutable reference to the inner value if it is of type `T`, or\n     /// `None` if it isn't.\n     ///\n     /// # Examples\n@@ -257,15 +257,77 @@ impl dyn Any {\n             // SAFETY: just checked whether we are pointing to the correct type, and we can rely on\n             // that check for memory safety because we have implemented Any for all types; no other\n             // impls can exist as they would conflict with our impl.\n-            unsafe { Some(&mut *(self as *mut dyn Any as *mut T)) }\n+            unsafe { Some(self.downcast_mut_unchecked()) }\n         } else {\n             None\n         }\n     }\n+\n+    /// Returns a reference to the inner value as type `dyn T`.\n+    ///\n+    /// For a safe alternative see [`downcast_ref`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(downcast_unchecked)]\n+    ///\n+    /// use std::any::Any;\n+    ///\n+    /// let x: Box<dyn Any> = Box::new(1_usize);\n+    ///\n+    /// unsafe {\n+    ///     assert_eq!(*x.downcast_ref_unchecked::<usize>(), 1);\n+    /// }\n+    /// ```\n+    ///\n+    /// # Safety\n+    ///\n+    /// The contained value must be of type `T`. Calling this method\n+    /// with the incorrect type is *undefined behavior*.\n+    #[unstable(feature = \"downcast_unchecked\", issue = \"none\")]\n+    #[inline]\n+    pub unsafe fn downcast_ref_unchecked<T: Any>(&self) -> &T {\n+        debug_assert!(self.is::<T>());\n+        // SAFETY: caller guarantees that T is the correct type\n+        unsafe { &*(self as *const dyn Any as *const T) }\n+    }\n+\n+    /// Returns a mutable reference to the inner value as type `dyn T`.\n+    ///\n+    /// For a safe alternative see [`downcast_mut`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(downcast_unchecked)]\n+    ///\n+    /// use std::any::Any;\n+    ///\n+    /// let mut x: Box<dyn Any> = Box::new(1_usize);\n+    ///\n+    /// unsafe {\n+    ///     *x.downcast_mut_unchecked::<usize>() += 1;\n+    /// }\n+    ///\n+    /// assert_eq!(*x.downcast_ref::<usize>().unwrap(), 2);\n+    /// ```\n+    ///\n+    /// # Safety\n+    ///\n+    /// The contained value must be of type `T`. Calling this method\n+    /// with the incorrect type is *undefined behavior*.\n+    #[unstable(feature = \"downcast_unchecked\", issue = \"none\")]\n+    #[inline]\n+    pub unsafe fn downcast_mut_unchecked<T: Any>(&mut self) -> &mut T {\n+        debug_assert!(self.is::<T>());\n+        // SAFETY: caller guarantees that T is the correct type\n+        unsafe { &mut *(self as *mut dyn Any as *mut T) }\n+    }\n }\n \n impl dyn Any + Send {\n-    /// Forwards to the method defined on the type `Any`.\n+    /// Forwards to the method defined on the type `dyn Any`.\n     ///\n     /// # Examples\n     ///\n@@ -289,7 +351,7 @@ impl dyn Any + Send {\n         <dyn Any>::is::<T>(self)\n     }\n \n-    /// Forwards to the method defined on the type `Any`.\n+    /// Forwards to the method defined on the type `dyn Any`.\n     ///\n     /// # Examples\n     ///\n@@ -313,7 +375,7 @@ impl dyn Any + Send {\n         <dyn Any>::downcast_ref::<T>(self)\n     }\n \n-    /// Forwards to the method defined on the type `Any`.\n+    /// Forwards to the method defined on the type `dyn Any`.\n     ///\n     /// # Examples\n     ///\n@@ -340,6 +402,60 @@ impl dyn Any + Send {\n     pub fn downcast_mut<T: Any>(&mut self) -> Option<&mut T> {\n         <dyn Any>::downcast_mut::<T>(self)\n     }\n+\n+    /// Forwards to the method defined on the type `dyn Any`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(downcast_unchecked)]\n+    ///\n+    /// use std::any::Any;\n+    ///\n+    /// let x: Box<dyn Any> = Box::new(1_usize);\n+    ///\n+    /// unsafe {\n+    ///     assert_eq!(*x.downcast_ref_unchecked::<usize>(), 1);\n+    /// }\n+    /// ```\n+    ///\n+    /// # Safety\n+    ///\n+    /// Same as the method on the type `dyn Any`.\n+    #[unstable(feature = \"downcast_unchecked\", issue = \"none\")]\n+    #[inline]\n+    pub unsafe fn downcast_ref_unchecked<T: Any>(&self) -> &T {\n+        // SAFETY: guaranteed by caller\n+        unsafe { <dyn Any>::downcast_ref_unchecked::<T>(self) }\n+    }\n+\n+    /// Forwards to the method defined on the type `dyn Any`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(downcast_unchecked)]\n+    ///\n+    /// use std::any::Any;\n+    ///\n+    /// let mut x: Box<dyn Any> = Box::new(1_usize);\n+    ///\n+    /// unsafe {\n+    ///     *x.downcast_mut_unchecked::<usize>() += 1;\n+    /// }\n+    ///\n+    /// assert_eq!(*x.downcast_ref::<usize>().unwrap(), 2);\n+    /// ```\n+    ///\n+    /// # Safety\n+    ///\n+    /// Same as the method on the type `dyn Any`.\n+    #[unstable(feature = \"downcast_unchecked\", issue = \"none\")]\n+    #[inline]\n+    pub unsafe fn downcast_mut_unchecked<T: Any>(&mut self) -> &mut T {\n+        // SAFETY: guaranteed by caller\n+        unsafe { <dyn Any>::downcast_mut_unchecked::<T>(self) }\n+    }\n }\n \n impl dyn Any + Send + Sync {\n@@ -418,6 +534,52 @@ impl dyn Any + Send + Sync {\n     pub fn downcast_mut<T: Any>(&mut self) -> Option<&mut T> {\n         <dyn Any>::downcast_mut::<T>(self)\n     }\n+\n+    /// Forwards to the method defined on the type `Any`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(downcast_unchecked)]\n+    ///\n+    /// use std::any::Any;\n+    ///\n+    /// let x: Box<dyn Any> = Box::new(1_usize);\n+    ///\n+    /// unsafe {\n+    ///     assert_eq!(*x.downcast_ref_unchecked::<usize>(), 1);\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"downcast_unchecked\", issue = \"none\")]\n+    #[inline]\n+    pub unsafe fn downcast_ref_unchecked<T: Any>(&self) -> &T {\n+        // SAFETY: guaranteed by caller\n+        unsafe { <dyn Any>::downcast_ref_unchecked::<T>(self) }\n+    }\n+\n+    /// Forwards to the method defined on the type `Any`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(downcast_unchecked)]\n+    ///\n+    /// use std::any::Any;\n+    ///\n+    /// let mut x: Box<dyn Any> = Box::new(1_usize);\n+    ///\n+    /// unsafe {\n+    ///     *x.downcast_mut_unchecked::<usize>() += 1;\n+    /// }\n+    ///\n+    /// assert_eq!(*x.downcast_ref::<usize>().unwrap(), 2);\n+    /// ```\n+    #[unstable(feature = \"downcast_unchecked\", issue = \"none\")]\n+    #[inline]\n+    pub unsafe fn downcast_mut_unchecked<T: Any>(&mut self) -> &mut T {\n+        // SAFETY: guaranteed by caller\n+        unsafe { <dyn Any>::downcast_mut_unchecked::<T>(self) }\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////////"}]}