{"sha": "3ea3136e84659773fea9e6f89cb7ddf76cee2324", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlYTMxMzZlODQ2NTk3NzNmZWE5ZTZmODljYjdkZGY3NmNlZTIzMjQ=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-15T03:35:08Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-15T03:35:08Z"}, "message": "convert ast::blk_ into a struct", "tree": {"sha": "a16533a725cf1e1bb269e602a2c58c507df25dac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a16533a725cf1e1bb269e602a2c58c507df25dac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ea3136e84659773fea9e6f89cb7ddf76cee2324", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ea3136e84659773fea9e6f89cb7ddf76cee2324", "html_url": "https://github.com/rust-lang/rust/commit/3ea3136e84659773fea9e6f89cb7ddf76cee2324", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ea3136e84659773fea9e6f89cb7ddf76cee2324/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b9e23146b75c02dd9059dc754070884595f3104", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b9e23146b75c02dd9059dc754070884595f3104", "html_url": "https://github.com/rust-lang/rust/commit/0b9e23146b75c02dd9059dc754070884595f3104"}], "stats": {"total": 175, "additions": 109, "deletions": 66}, "files": [{"sha": "6aa976691e8f6627f85a23f0977792abdfb8a814", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3ea3136e84659773fea9e6f89cb7ddf76cee2324/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ea3136e84659773fea9e6f89cb7ddf76cee2324/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=3ea3136e84659773fea9e6f89cb7ddf76cee2324", "patch": "@@ -313,11 +313,13 @@ type blk = spanned<blk_>;\n \n #[auto_encode]\n #[auto_decode]\n-type blk_ = {view_items: ~[@view_item],\n-             stmts: ~[@stmt],\n-             expr: Option<@expr>,\n-             id: node_id,\n-             rules: blk_check_mode};\n+struct blk_ {\n+    view_items: ~[@view_item],\n+    stmts: ~[@stmt],\n+    expr: Option<@expr>,\n+    id: node_id,\n+    rules: blk_check_mode,\n+}\n \n #[auto_encode]\n #[auto_decode]"}, {"sha": "235820fdd1c2d2219471ad0f50093a1eca7bc4c0", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3ea3136e84659773fea9e6f89cb7ddf76cee2324/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ea3136e84659773fea9e6f89cb7ddf76cee2324/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=3ea3136e84659773fea9e6f89cb7ddf76cee2324", "patch": "@@ -289,10 +289,18 @@ fn block_from_expr(e: @expr) -> blk {\n     return spanned {node: blk_, span: e.span};\n }\n \n-fn default_block(+stmts1: ~[@stmt], expr1: Option<@expr>, id1: node_id) ->\n-   blk_ {\n-    {view_items: ~[], stmts: stmts1,\n-     expr: expr1, id: id1, rules: default_blk}\n+fn default_block(\n+    +stmts1: ~[@stmt],\n+    expr1: Option<@expr>,\n+    id1: node_id\n+) -> blk_ {\n+    ast::blk_ {\n+        view_items: ~[],\n+        stmts: stmts1,\n+        expr: expr1,\n+        id: id1,\n+        rules: default_blk,\n+    }\n }\n \n fn ident_to_path(s: span, +i: ident) -> @path {"}, {"sha": "cd2cafb3699699f02ed39488b7a0df3799455dcf", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3ea3136e84659773fea9e6f89cb7ddf76cee2324/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ea3136e84659773fea9e6f89cb7ddf76cee2324/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=3ea3136e84659773fea9e6f89cb7ddf76cee2324", "patch": "@@ -356,21 +356,29 @@ priv impl ext_ctxt {\n     }\n \n     fn blk(span: span, stmts: ~[@ast::stmt]) -> ast::blk {\n-        ast::spanned { node: { view_items: ~[],\n-                               stmts: stmts,\n-                               expr: None,\n-                               id: self.next_id(),\n-                               rules: ast::default_blk},\n-                       span: span }\n+        ast::spanned {\n+            node: ast::blk_ {\n+                view_items: ~[],\n+                stmts: stmts,\n+                expr: None,\n+                id: self.next_id(),\n+                rules: ast::default_blk,\n+            },\n+            span: span,\n+        }\n     }\n \n     fn expr_blk(expr: @ast::expr) -> ast::blk {\n-        ast::spanned { node: { view_items: ~[],\n-                               stmts: ~[],\n-                               expr: Some(expr),\n-                               id: self.next_id(),\n-                               rules: ast::default_blk},\n-                       span: expr.span }\n+        ast::spanned {\n+            node: ast::blk_ {\n+                view_items: ~[],\n+                stmts: ~[],\n+                expr: Some(expr),\n+                id: self.next_id(),\n+                rules: ast::default_blk,\n+            },\n+            span: expr.span,\n+        }\n     }\n \n     fn expr_path(span: span, strs: ~[ast::ident]) -> @ast::expr {"}, {"sha": "df40dc1ed29bf33c8d8e35f5234c020d1669421c", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3ea3136e84659773fea9e6f89cb7ddf76cee2324/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ea3136e84659773fea9e6f89cb7ddf76cee2324/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=3ea3136e84659773fea9e6f89cb7ddf76cee2324", "patch": "@@ -196,39 +196,45 @@ fn mk_local(cx: ext_ctxt, sp: span, mutbl: bool,\n     let decl = ast::spanned {node: ast::decl_local(~[local]), span: sp};\n     @ast::spanned { node: ast::stmt_decl(@decl, cx.next_id()), span: sp }\n }\n-fn mk_block(cx: ext_ctxt, sp: span,\n+fn mk_block(cx: ext_ctxt, span: span,\n             view_items: ~[@ast::view_item],\n             stmts: ~[@ast::stmt],\n             expr: Option<@ast::expr>) -> @ast::expr {\n-    let blk = ast::spanned { node: { view_items: view_items,\n-                                     stmts: stmts,\n-                                     expr: expr,\n-                                     id: cx.next_id(),\n-                                     rules: ast::default_blk },\n-                             span: sp };\n-    mk_expr(cx, sp, ast::expr_block(blk))\n-}\n-fn mk_block_(cx: ext_ctxt, sp: span, +stmts: ~[@ast::stmt]) -> ast::blk {\n+    let blk = ast::spanned {\n+        node: ast::blk_ {\n+             view_items: view_items,\n+             stmts: stmts,\n+             expr: expr,\n+             id: cx.next_id(),\n+             rules: ast::default_blk,\n+        },\n+        span: span,\n+    };\n+    mk_expr(cx, span, ast::expr_block(blk))\n+}\n+fn mk_block_(cx: ext_ctxt, span: span, +stmts: ~[@ast::stmt]) -> ast::blk {\n     ast::spanned {\n-        node: {\n+        node: ast::blk_ {\n             view_items: ~[],\n-            stmts: move stmts,\n+            stmts: stmts,\n             expr: None,\n             id: cx.next_id(),\n-            rules: ast::default_blk\n+            rules: ast::default_blk,\n         },\n-        span: sp\n+        span: span,\n     }\n }\n fn mk_simple_block(cx: ext_ctxt, span: span, expr: @ast::expr) -> ast::blk {\n-    let block = {\n-        view_items: ~[],\n-        stmts: ~[],\n-        expr: Some(expr),\n-        id: cx.next_id(),\n-        rules: ast::default_blk\n-    };\n-    ast::spanned { node: block, span: span }\n+    ast::spanned {\n+        node: ast::blk_ {\n+            view_items: ~[],\n+            stmts: ~[],\n+            expr: Some(expr),\n+            id: cx.next_id(),\n+            rules: ast::default_blk,\n+        },\n+        span: span,\n+    }\n }\n fn mk_copy(cx: ext_ctxt, sp: span, e: @ast::expr) -> @ast::expr {\n     mk_expr(cx, sp, ast::expr_copy(e))"}, {"sha": "f5b6ca953b394aef10331ddc895ad0f686f54f18", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3ea3136e84659773fea9e6f89cb7ddf76cee2324/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ea3136e84659773fea9e6f89cb7ddf76cee2324/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=3ea3136e84659773fea9e6f89cb7ddf76cee2324", "patch": "@@ -193,11 +193,13 @@ impl ext_ctxt: ext_ctxt_ast_builder {\n     }\n \n     fn block(+stmts: ~[@ast::stmt], e: @ast::expr) -> ast::blk {\n-        let blk = {view_items: ~[],\n-                   stmts: stmts,\n-                   expr: Some(e),\n-                   id: self.next_id(),\n-                   rules: ast::default_blk};\n+        let blk = ast::blk_ {\n+            view_items: ~[],\n+            stmts: stmts,\n+            expr: Some(e),\n+            id: self.next_id(),\n+            rules: ast::default_blk,\n+        };\n \n         spanned { node: blk, span: dummy_sp() }\n     }"}, {"sha": "ecb53072f7eab8261bfef719bb79bcbe99fc2adc", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3ea3136e84659773fea9e6f89cb7ddf76cee2324/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ea3136e84659773fea9e6f89cb7ddf76cee2324/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=3ea3136e84659773fea9e6f89cb7ddf76cee2324", "patch": "@@ -319,11 +319,13 @@ fn noop_fold_method(&&m: @method, fld: ast_fold) -> @method {\n \n \n fn noop_fold_block(b: blk_, fld: ast_fold) -> blk_ {\n-    return {view_items: vec::map(b.view_items, |x| fld.fold_view_item(*x)),\n-         stmts: vec::map(b.stmts, |x| fld.fold_stmt(*x)),\n-         expr: option::map(&b.expr, |x| fld.fold_expr(*x)),\n-         id: fld.new_id(b.id),\n-         rules: b.rules};\n+    ast::blk_ {\n+        view_items: b.view_items.map(|x| fld.fold_view_item(*x)),\n+        stmts: b.stmts.map(|x| fld.fold_stmt(*x)),\n+        expr: b.expr.map(|x| fld.fold_expr(*x)),\n+        id: fld.new_id(b.id),\n+        rules: b.rules,\n+    }\n }\n \n fn noop_fold_stmt(s: stmt_, fld: ast_fold) -> stmt_ {"}, {"sha": "f0cff630b1129682be1e7675f8b493456951f030", "filename": "src/libsyntax/parse/classify.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3ea3136e84659773fea9e6f89cb7ddf76cee2324/src%2Flibsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ea3136e84659773fea9e6f89cb7ddf76cee2324/src%2Flibsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fclassify.rs?ref=3ea3136e84659773fea9e6f89cb7ddf76cee2324", "patch": "@@ -30,8 +30,9 @@ fn expr_requires_semi_to_be_stmt(e: @ast::expr) -> bool {\n \n fn expr_is_simple_block(e: @ast::expr) -> bool {\n     match e.node {\n-      ast::expr_block(ast::spanned {node: {rules: ast::default_blk, _}, _}) =>\n-        true,\n+        ast::expr_block(\n+            ast::spanned { node: ast::blk_ { rules: ast::default_blk, _ }, _ }\n+        ) => true,\n       _ => false\n     }\n }"}, {"sha": "b7ecbbcaa1915c9ad5668f0570d1910480639106", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3ea3136e84659773fea9e6f89cb7ddf76cee2324/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ea3136e84659773fea9e6f89cb7ddf76cee2324/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3ea3136e84659773fea9e6f89cb7ddf76cee2324", "patch": "@@ -1574,8 +1574,13 @@ impl Parser {\n         let lo = self.last_span.lo;\n         let (decl, captures) = parse_decl();\n         let body = parse_body();\n-        let fakeblock = {view_items: ~[], stmts: ~[], expr: Some(body),\n-                         id: self.get_id(), rules: default_blk};\n+        let fakeblock = ast::blk_ {\n+            view_items: ~[],\n+            stmts: ~[],\n+            expr: Some(body),\n+            id: self.get_id(),\n+            rules: default_blk,\n+        };\n         let fakeblock = spanned(body.span.lo, body.span.hi,\n                                 fakeblock);\n         return self.mk_expr(lo, body.span.hi,\n@@ -1753,12 +1758,16 @@ impl Parser {\n                 self.eat(token::COMMA);\n             }\n \n-            let blk = spanned { node: { view_items: ~[],\n-                                        stmts: ~[],\n-                                        expr: Some(expr),\n-                                        id: self.get_id(),\n-                                        rules: default_blk},\n-                                span: expr.span };\n+            let blk = spanned {\n+                node: ast::blk_ {\n+                    view_items: ~[],\n+                    stmts: ~[],\n+                    expr: Some(expr),\n+                    id: self.get_id(),\n+                    rules: default_blk,\n+                },\n+                span: expr.span,\n+            };\n \n             arms.push({pats: pats, guard: guard, body: blk});\n         }\n@@ -2378,9 +2387,14 @@ impl Parser {\n         }\n         let mut hi = self.span.hi;\n         self.bump();\n-        let bloc = {view_items: view_items, stmts: stmts, expr: expr,\n-                    id: self.get_id(), rules: s};\n-        return spanned(lo, hi, bloc);\n+        let bloc = ast::blk_ {\n+            view_items: view_items,\n+            stmts: stmts,\n+            expr: expr,\n+            id: self.get_id(),\n+            rules: s,\n+        };\n+        spanned(lo, hi, bloc)\n     }\n \n     fn mk_ty_path(i: ident) -> @Ty {"}]}