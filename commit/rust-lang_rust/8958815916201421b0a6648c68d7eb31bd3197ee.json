{"sha": "8958815916201421b0a6648c68d7eb31bd3197ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5NTg4MTU5MTYyMDE0MjFiMGE2NjQ4YzY4ZDdlYjMxYmQzMTk3ZWU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-04-04T14:16:25Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-04-05T14:13:45Z"}, "message": "Bump the bootstrap compiler to 1.26.0 beta\n\nHoly cow that's a lot of `cfg(stage0)` removed and a lot of new stable language\nfeatures!", "tree": {"sha": "f9363ac15783a2e4817cb9979c57162b559c5bda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9363ac15783a2e4817cb9979c57162b559c5bda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8958815916201421b0a6648c68d7eb31bd3197ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8958815916201421b0a6648c68d7eb31bd3197ee", "html_url": "https://github.com/rust-lang/rust/commit/8958815916201421b0a6648c68d7eb31bd3197ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8958815916201421b0a6648c68d7eb31bd3197ee/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01d0be99257f5942ddc1168db1a7b5a472cf2c31", "url": "https://api.github.com/repos/rust-lang/rust/commits/01d0be99257f5942ddc1168db1a7b5a472cf2c31", "html_url": "https://github.com/rust-lang/rust/commit/01d0be99257f5942ddc1168db1a7b5a472cf2c31"}], "stats": {"total": 193, "additions": 18, "deletions": 175}, "files": [{"sha": "6c46f3e58cffbb956e2acdc2fd95be2f9319573b", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -114,8 +114,7 @@\n //! also check out the `src/bootstrap/README.md` file for more information.\n \n #![deny(warnings)]\n-#![feature(conservative_impl_trait, fs_read_write, core_intrinsics)]\n-#![feature(slice_concat_ext)]\n+#![feature(core_intrinsics)]\n \n #[macro_use]\n extern crate build_helper;\n@@ -1149,7 +1148,7 @@ impl Build {\n \n     fn read(&self, path: &Path) -> String {\n         if self.config.dry_run { return String::new(); }\n-        t!(fs::read_string(path))\n+        t!(fs::read_to_string(path))\n     }\n \n     fn create_dir(&self, dir: &Path) {"}, {"sha": "5fc92611e6529066e3828694740919a4cc9e1c62", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -12,7 +12,6 @@ use std::fs;\n use std::env;\n use std::path::PathBuf;\n use std::process::{Command, exit};\n-use std::slice::SliceConcatExt;\n \n use Mode;\n use Compiler;"}, {"sha": "4d92fc67b2a503cee318477fdaa1503c5c5cb881", "filename": "src/liballoc/benches/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Fliballoc%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Fliballoc%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbenches%2Flib.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -10,7 +10,6 @@\n \n #![deny(warnings)]\n \n-#![cfg_attr(stage0, feature(i128_type))]\n #![feature(rand)]\n #![feature(repr_simd)]\n #![feature(slice_sort_by_cached_key)]"}, {"sha": "da26e7c852c463caa5312f5d4b1946480f8a330f", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -97,8 +97,6 @@\n #![feature(fmt_internals)]\n #![feature(from_ref)]\n #![feature(fundamental)]\n-#![cfg_attr(stage0, feature(generic_param_attrs))]\n-#![cfg_attr(stage0, feature(i128_type))]\n #![feature(lang_items)]\n #![feature(needs_allocator)]\n #![feature(nonzero)]\n@@ -123,6 +121,7 @@\n #![feature(exact_chunks)]\n #![feature(pointer_methods)]\n #![feature(inclusive_range_fields)]\n+#![cfg_attr(stage0, feature(generic_param_attrs))]\n \n #![cfg_attr(not(test), feature(fn_traits, swap_with_slice, i128))]\n #![cfg_attr(test, feature(test))]"}, {"sha": "a173ef10a818ead9882a2285ad8cd9f93bd84ea1", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -14,7 +14,6 @@\n #![feature(alloc_system)]\n #![feature(attr_literals)]\n #![feature(box_syntax)]\n-#![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![feature(const_fn)]\n #![feature(drain_filter)]\n #![feature(exact_size_is_empty)]"}, {"sha": "3ae9b05b865386563ee9e78764e5a7a18fb61ba7", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -427,7 +427,7 @@ impl<T: Ord> Ord for Reverse<T> {\n ///     }\n /// }\n /// ```\n-#[cfg_attr(not(stage0), lang = \"ord\")]\n+#[lang = \"ord\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Ord: Eq + PartialOrd<Self> {\n     /// This method returns an `Ordering` between `self` and `other`.\n@@ -597,8 +597,7 @@ impl PartialOrd for Ordering {\n /// assert_eq!(x < y, true);\n /// assert_eq!(x.lt(&y), true);\n /// ```\n-#[cfg_attr(stage0, lang = \"ord\")]\n-#[cfg_attr(not(stage0), lang = \"partial_ord\")]\n+#[lang = \"partial_ord\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented = \"can't compare `{Self}` with `{Rhs}`\"]\n pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {"}, {"sha": "83274682250b0911f2e41b61c43894dbe4bed4fd", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -1293,7 +1293,6 @@ extern \"rust-intrinsic\" {\n     pub fn bswap<T>(x: T) -> T;\n \n     /// Reverses the bits in an integer type `T`.\n-    #[cfg(not(stage0))]\n     pub fn bitreverse<T>(x: T) -> T;\n \n     /// Performs checked integer addition.\n@@ -1316,7 +1315,6 @@ extern \"rust-intrinsic\" {\n \n     /// Performs an exact division, resulting in undefined behavior where\n     /// `x % y != 0` or `y == 0` or `x == T::min_value() && y == -1`\n-    #[cfg(not(stage0))]\n     pub fn exact_div<T>(x: T, y: T) -> T;\n \n     /// Performs an unchecked division, resulting in undefined behavior\n@@ -1401,8 +1399,3 @@ extern \"rust-intrinsic\" {\n     /// Probably will never become stable.\n     pub fn nontemporal_store<T>(ptr: *mut T, val: T);\n }\n-\n-#[cfg(stage0)]\n-pub unsafe fn exact_div<T>(a: T, b: T) -> T {\n-    unchecked_div(a, b)\n-}"}, {"sha": "cf9abb26d3e1abe353a5eb9fe8b6359ab5001e03", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -78,8 +78,6 @@\n #![feature(doc_spotlight)]\n #![feature(fn_must_use)]\n #![feature(fundamental)]\n-#![cfg_attr(stage0, feature(i128_type))]\n-#![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![feature(intrinsics)]\n #![feature(iterator_flatten)]\n #![feature(iterator_repeat_with)]\n@@ -103,9 +101,6 @@\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n \n-#![cfg_attr(stage0, allow(unused_attributes))]\n-#![cfg_attr(stage0, feature(never_type))]\n-\n #[prelude_import]\n #[allow(unused)]\n use prelude::v1::*;"}, {"sha": "90a9cb3379b82ed8d8b4da3811df406cf540feef", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -28,71 +28,6 @@ macro_rules! panic {\n     });\n }\n \n-/// Ensure that a boolean expression is `true` at runtime.\n-///\n-/// This will invoke the [`panic!`] macro if the provided expression cannot be\n-/// evaluated to `true` at runtime.\n-///\n-/// # Uses\n-///\n-/// Assertions are always checked in both debug and release builds, and cannot\n-/// be disabled. See [`debug_assert!`] for assertions that are not enabled in\n-/// release builds by default.\n-///\n-/// Unsafe code relies on `assert!` to enforce run-time invariants that, if\n-/// violated could lead to unsafety.\n-///\n-/// Other use-cases of `assert!` include [testing] and enforcing run-time\n-/// invariants in safe code (whose violation cannot result in unsafety).\n-///\n-/// # Custom Messages\n-///\n-/// This macro has a second form, where a custom panic message can\n-/// be provided with or without arguments for formatting.  See [`std::fmt`]\n-/// for syntax for this form.\n-///\n-/// [`panic!`]: macro.panic.html\n-/// [`debug_assert!`]: macro.debug_assert.html\n-/// [testing]: ../book/second-edition/ch11-01-writing-tests.html#checking-results-with-the-assert-macro\n-/// [`std::fmt`]: ../std/fmt/index.html\n-///\n-/// # Examples\n-///\n-/// ```\n-/// // the panic message for these assertions is the stringified value of the\n-/// // expression given.\n-/// assert!(true);\n-///\n-/// fn some_computation() -> bool { true } // a very simple function\n-///\n-/// assert!(some_computation());\n-///\n-/// // assert with a custom message\n-/// let x = true;\n-/// assert!(x, \"x wasn't true!\");\n-///\n-/// let a = 3; let b = 27;\n-/// assert!(a + b == 30, \"a = {}, b = {}\", a, b);\n-/// ```\n-#[macro_export]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg(stage0)]\n-macro_rules! assert {\n-    ($cond:expr) => (\n-        if !$cond {\n-            panic!(concat!(\"assertion failed: \", stringify!($cond)))\n-        }\n-    );\n-    ($cond:expr,) => (\n-        assert!($cond)\n-    );\n-    ($cond:expr, $($arg:tt)+) => (\n-        if !$cond {\n-            panic!($($arg)+)\n-        }\n-    );\n-}\n-\n /// Asserts that two expressions are equal to each other (using [`PartialEq`]).\n ///\n /// On panic, this macro will print the values of the expressions with their"}, {"sha": "6b3dc75af46332c29c8da67421cf4fc72c837192", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -64,8 +64,7 @@ pub fn panic_fmt(fmt: fmt::Arguments, file_line_col: &(&'static str, u32, u32))\n     #[allow(improper_ctypes)]\n     extern {\n         #[lang = \"panic_fmt\"]\n-        #[cfg_attr(stage0, unwind)]\n-        #[cfg_attr(not(stage0), unwind(allowed))]\n+        #[unwind(allowed)]\n         fn panic_impl(fmt: fmt::Arguments, file: &'static str, line: u32, col: u32) -> !;\n     }\n     let (file, line, col) = *file_line_col;"}, {"sha": "971759dcdd08dba1bcedbf12119e1ab2b3839ca5", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -23,10 +23,7 @@\n #![feature(fmt_internals)]\n #![feature(hashmap_internals)]\n #![feature(iterator_step_by)]\n-#![cfg_attr(stage0, feature(i128_type))]\n-#![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![feature(iterator_flatten)]\n-#![cfg_attr(stage0, feature(conservative_impl_trait))]\n #![feature(iterator_repeat_with)]\n #![feature(nonzero)]\n #![feature(pattern)]"}, {"sha": "eb6dc5b5488694ee05a74e7378e32388674e4131", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -286,8 +286,7 @@ unsafe fn find_eh_action(context: *mut uw::_Unwind_Context)\n // See docs in the `unwind` module.\n #[cfg(all(target_os=\"windows\", target_arch = \"x86\", target_env=\"gnu\"))]\n #[lang = \"eh_unwind_resume\"]\n-#[cfg_attr(stage0, unwind)]\n-#[cfg_attr(not(stage0), unwind(allowed))]\n+#[unwind(allowed)]\n unsafe extern \"C\" fn rust_eh_unwind_resume(panic_ctx: *mut u8) -> ! {\n     uw::_Unwind_Resume(panic_ctx as *mut uw::_Unwind_Exception);\n }"}, {"sha": "a5c227cb4015ca82b6e7abdebb31ac5d22031ab8", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -112,8 +112,7 @@ pub unsafe extern \"C\" fn __rust_maybe_catch_panic(f: fn(*mut u8),\n // Entry point for raising an exception, just delegates to the platform-specific\n // implementation.\n #[no_mangle]\n-#[cfg_attr(stage0, unwind)]\n-#[cfg_attr(not(stage0), unwind(allowed))]\n+#[unwind(allowed)]\n pub unsafe extern \"C\" fn __rust_start_panic(data: usize, vtable: usize) -> u32 {\n     imp::panic(mem::transmute(raw::TraitObject {\n         data: data as *mut (),"}, {"sha": "c3715f96c6482eb7f234a04db1db26eac44d5eeb", "filename": "src/libpanic_unwind/seh64_gnu.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibpanic_unwind%2Fseh64_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibpanic_unwind%2Fseh64_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh64_gnu.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -108,8 +108,7 @@ unsafe extern \"C\" fn rust_eh_personality(exceptionRecord: *mut c::EXCEPTION_RECO\n }\n \n #[lang = \"eh_unwind_resume\"]\n-#[cfg_attr(stage0, unwind)]\n-#[cfg_attr(not(stage0), unwind(allowed))]\n+#[unwind(allowed)]\n unsafe extern \"C\" fn rust_eh_unwind_resume(panic_ctx: c::LPVOID) -> ! {\n     let params = [panic_ctx as c::ULONG_PTR];\n     c::RaiseException(RUST_PANIC,"}, {"sha": "5f1dda36a889ea0aff118b969d5da63d37f9d3ef", "filename": "src/libpanic_unwind/windows.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibpanic_unwind%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibpanic_unwind%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fwindows.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -79,21 +79,18 @@ pub enum EXCEPTION_DISPOSITION {\n pub use self::EXCEPTION_DISPOSITION::*;\n \n extern \"system\" {\n-    #[cfg_attr(stage0, unwind)]\n-    #[cfg_attr(not(stage0), unwind(allowed))]\n+    #[unwind(allowed)]\n     pub fn RaiseException(dwExceptionCode: DWORD,\n                           dwExceptionFlags: DWORD,\n                           nNumberOfArguments: DWORD,\n                           lpArguments: *const ULONG_PTR);\n-    #[cfg_attr(stage0, unwind)]\n-    #[cfg_attr(not(stage0), unwind(allowed))]\n+    #[unwind(allowed)]\n     pub fn RtlUnwindEx(TargetFrame: LPVOID,\n                        TargetIp: LPVOID,\n                        ExceptionRecord: *const EXCEPTION_RECORD,\n                        ReturnValue: LPVOID,\n                        OriginalContext: *const CONTEXT,\n                        HistoryTable: *const UNWIND_HISTORY_TABLE);\n-    #[cfg_attr(stage0, unwind)]\n-    #[cfg_attr(not(stage0), unwind(allowed))]\n+    #[unwind(allowed)]\n     pub fn _CxxThrowException(pExceptionObject: *mut c_void, pThrowInfo: *mut u8);\n }"}, {"sha": "6b2b68b1faacc0662871aafbb8a0a2c7a6309df2", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -34,7 +34,6 @@\n        test(no_crate_inject, attr(deny(warnings))),\n        test(attr(allow(dead_code, deprecated, unused_variables, unused_mut))))]\n \n-#![cfg_attr(stage0, feature(i128_type))]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n #![feature(lang_items)]"}, {"sha": "7da664e6d0255ae825f67f23c3f53933ce2cb04c", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -43,19 +43,14 @@\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![cfg_attr(stage0, feature(conservative_impl_trait))]\n #![feature(const_fn)]\n-#![cfg_attr(stage0, feature(copy_closures, clone_closures))]\n #![feature(core_intrinsics)]\n #![feature(drain_filter)]\n #![feature(dyn_trait)]\n #![feature(entry_or_default)]\n #![feature(from_ref)]\n #![feature(fs_read_write)]\n-#![cfg_attr(stage0, feature(i128_type, i128))]\n-#![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![cfg_attr(windows, feature(libc))]\n-#![cfg_attr(stage0, feature(match_default_bindings))]\n #![feature(macro_lifetime_matcher)]\n #![feature(macro_vis_matcher)]\n #![feature(exhaustive_patterns)]\n@@ -68,8 +63,6 @@\n #![feature(slice_patterns)]\n #![feature(specialization)]\n #![feature(unboxed_closures)]\n-#![cfg_attr(stage0, feature(underscore_lifetimes))]\n-#![cfg_attr(stage0, feature(universal_impl_trait))]\n #![feature(trace_macros)]\n #![feature(trusted_len)]\n #![feature(catch_expr)]"}, {"sha": "276f6cd09bf7accfce96b3051206735f437e7ee6", "filename": "src/librustc_apfloat/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc_apfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc_apfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Flib.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -46,10 +46,6 @@\n #![deny(warnings)]\n #![forbid(unsafe_code)]\n \n-#![cfg_attr(stage0, feature(slice_patterns))]\n-#![cfg_attr(stage0, feature(i128_type))]\n-#![cfg_attr(stage0, feature(try_from))]\n-\n // See librustc_cratesio_shim/Cargo.toml for a comment explaining this.\n #[allow(unused_extern_crates)]\n extern crate rustc_cratesio_shim;"}, {"sha": "6e06ea858efad12413fef5d59b75361c56e0344e", "filename": "src/librustc_apfloat/tests/ieee.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc_apfloat%2Ftests%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc_apfloat%2Ftests%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Ftests%2Fieee.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![cfg_attr(stage0, feature(i128_type))]\n-\n #[macro_use]\n extern crate rustc_apfloat;\n "}, {"sha": "6fe2ac2b0ca25a6c90104419394101097d5b652b", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -16,7 +16,6 @@\n #![allow(non_camel_case_types)]\n \n #![feature(from_ref)]\n-#![cfg_attr(stage0, feature(match_default_bindings))]\n #![feature(quote)]\n \n #[macro_use] extern crate log;"}, {"sha": "c4c5886d465d8ad02f8beb1ff47240aa08d7d5a6", "filename": "src/librustc_const_math/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc_const_math%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc_const_math%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Flib.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -19,8 +19,6 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![deny(warnings)]\n \n-#![cfg_attr(stage0, feature(i128_type, i128))]\n-\n extern crate rustc_apfloat;\n \n extern crate syntax;"}, {"sha": "1e1628936d5cac9b495b46ad730db41ff3da749a", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -26,14 +26,10 @@\n #![feature(unboxed_closures)]\n #![feature(fn_traits)]\n #![feature(unsize)]\n-#![cfg_attr(stage0, feature(conservative_impl_trait))]\n-#![cfg_attr(stage0, feature(i128_type, i128))]\n #![feature(specialization)]\n #![feature(optin_builtin_traits)]\n-#![cfg_attr(stage0, feature(underscore_lifetimes))]\n #![feature(macro_vis_matcher)]\n #![feature(allow_internal_unstable)]\n-#![cfg_attr(stage0, feature(universal_impl_trait))]\n \n #![cfg_attr(unix, feature(libc))]\n #![cfg_attr(test, feature(test))]"}, {"sha": "c283df6ec0fb1cb169bf2cc3325f3aa1de7454a8", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -17,8 +17,6 @@\n #![allow(unused_attributes)]\n #![feature(range_contains)]\n #![cfg_attr(unix, feature(libc))]\n-#![cfg_attr(stage0, feature(conservative_impl_trait))]\n-#![cfg_attr(stage0, feature(i128_type))]\n #![feature(optin_builtin_traits)]\n \n extern crate atty;"}, {"sha": "9e72ede309d44cf9d1846ae815c799ed19119580", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -15,10 +15,7 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![deny(warnings)]\n \n-#![cfg_attr(stage0, feature(conservative_impl_trait))]\n #![feature(fs_read_write)]\n-#![cfg_attr(stage0, feature(i128_type))]\n-#![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![feature(specialization)]\n \n extern crate graphviz;"}, {"sha": "c915181213d3859d9480495efa97072f58983954", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -27,11 +27,9 @@\n #![cfg_attr(test, feature(test))]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![cfg_attr(stage0, feature(i128_type))]\n #![feature(macro_vis_matcher)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n-#![cfg_attr(stage0, feature(never_type))]\n \n #[macro_use]\n extern crate syntax;"}, {"sha": "e89b5a7fc1b4e1dcedf550da7ad719d5d34c13be", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -14,9 +14,7 @@\n #![deny(warnings)]\n \n #![feature(box_patterns)]\n-#![cfg_attr(stage0, feature(conservative_impl_trait))]\n #![feature(fs_read_write)]\n-#![cfg_attr(stage0, feature(i128_type))]\n #![feature(libc)]\n #![feature(macro_lifetime_matcher)]\n #![feature(proc_macro_internals)]"}, {"sha": "8762e7550cdedffb11c6af54187e2c4a68ef6e48", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -21,22 +21,16 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(catch_expr)]\n-#![cfg_attr(stage0, feature(conservative_impl_trait))]\n #![feature(const_fn)]\n #![feature(core_intrinsics)]\n #![feature(decl_macro)]\n #![feature(dyn_trait)]\n #![feature(fs_read_write)]\n-#![cfg_attr(stage0, feature(i128_type))]\n-#![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![feature(macro_vis_matcher)]\n-#![cfg_attr(stage0, feature(match_default_bindings))]\n #![feature(exhaustive_patterns)]\n #![feature(range_contains)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(nonzero)]\n-#![cfg_attr(stage0, feature(underscore_lifetimes))]\n-#![cfg_attr(stage0, feature(never_type))]\n #![feature(inclusive_range_fields)]\n \n extern crate arena;"}, {"sha": "cfa3b6912f2e47cdd803a41477cdc368f4593a70", "filename": "src/librustc_traits/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flib.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -14,8 +14,6 @@\n #![deny(warnings)]\n \n #![feature(crate_visibility_modifier)]\n-#![cfg_attr(stage0, feature(match_default_bindings))]\n-#![cfg_attr(stage0, feature(underscore_lifetimes))]\n \n #[macro_use]\n extern crate log;"}, {"sha": "2ce13a2627ff469d4a5416a22ea7bbf273b02ba1", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -24,13 +24,9 @@\n #![feature(custom_attribute)]\n #![feature(fs_read_write)]\n #![allow(unused_attributes)]\n-#![cfg_attr(stage0, feature(i128_type, i128))]\n-#![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![feature(libc)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n-#![cfg_attr(stage0, feature(slice_patterns))]\n-#![cfg_attr(stage0, feature(conservative_impl_trait))]\n #![feature(optin_builtin_traits)]\n #![feature(inclusive_range_fields)]\n "}, {"sha": "cf47d9b62a94e3578942ee06a50584f1da6f88b6", "filename": "src/librustc_trans_utils/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc_trans_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc_trans_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flib.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -21,10 +21,8 @@\n #![feature(box_syntax)]\n #![feature(custom_attribute)]\n #![allow(unused_attributes)]\n-#![cfg_attr(stage0, feature(i128_type))]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n-#![cfg_attr(stage0, feature(conservative_impl_trait))]\n \n extern crate ar;\n extern crate flate2;"}, {"sha": "6f71db998bd419e4b8513a59acec722543eb547c", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -72,22 +72,16 @@ This API is completely unstable and subject to change.\n \n #![allow(non_camel_case_types)]\n \n-#![cfg_attr(stage0, feature(advanced_slice_patterns))]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![cfg_attr(stage0, feature(conservative_impl_trait))]\n-#![cfg_attr(stage0, feature(copy_closures, clone_closures))]\n #![feature(crate_visibility_modifier)]\n #![feature(from_ref)]\n-#![cfg_attr(stage0, feature(match_default_bindings))]\n #![feature(exhaustive_patterns)]\n #![feature(option_filter)]\n #![feature(quote)]\n #![feature(refcell_replace_swap)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_patterns)]\n-#![cfg_attr(stage0, feature(i128_type))]\n-#![cfg_attr(stage0, feature(never_type))]\n #![feature(dyn_trait)]\n \n #[macro_use] extern crate log;"}, {"sha": "42e87f88fd40d475b5b7143511ff3a6c47817f4e", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -20,7 +20,6 @@\n #![feature(box_syntax)]\n #![feature(fs_read_write)]\n #![feature(set_stdio)]\n-#![cfg_attr(stage0, feature(slice_patterns))]\n #![feature(test)]\n #![feature(unicode)]\n #![feature(vec_remove_item)]"}, {"sha": "f78eed30694786cf17d59a1291bba7fff4d3691b", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -23,7 +23,6 @@ Core encoding and decoding interfaces.\n \n #![feature(box_syntax)]\n #![feature(core_intrinsics)]\n-#![cfg_attr(stage0, feature(i128_type))]\n #![feature(specialization)]\n #![cfg_attr(test, feature(test))]\n "}, {"sha": "7da2eeefaaa4e9d5f5ae761024ae49f6ab55d304", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -269,7 +269,6 @@\n #![cfg_attr(stage0, feature(generic_param_attrs))]\n #![feature(hashmap_internals)]\n #![feature(heap_api)]\n-#![cfg_attr(stage0, feature(i128_type, i128))]\n #![feature(int_error_internals)]\n #![feature(integer_atomics)]\n #![feature(into_cow)]\n@@ -321,8 +320,6 @@\n #![feature(doc_spotlight)]\n #![cfg_attr(test, feature(update_panic_count))]\n #![cfg_attr(windows, feature(used))]\n-#![cfg_attr(stage0, feature(never_type))]\n-#![cfg_attr(stage0, feature(termination_trait))]\n \n #![default_lib_allocator]\n \n@@ -355,7 +352,6 @@ use prelude::v1::*;\n // add a new crate name so we can attach the re-exports to it.\n #[macro_reexport(assert_eq, assert_ne, debug_assert, debug_assert_eq,\n                  debug_assert_ne, unreachable, unimplemented, write, writeln, try)]\n-#[cfg_attr(stage0, macro_reexport(assert))]\n extern crate core as __core;\n \n #[macro_use]"}, {"sha": "fba3269204e90e10dbe32bab39be95c5db9d47e2", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -55,8 +55,7 @@ extern {\n                                 data: *mut u8,\n                                 data_ptr: *mut usize,\n                                 vtable_ptr: *mut usize) -> u32;\n-    #[cfg_attr(stage0, unwind)]\n-    #[cfg_attr(not(stage0), unwind(allowed))]\n+    #[unwind(allowed)]\n     fn __rust_start_panic(data: usize, vtable: usize) -> u32;\n }\n \n@@ -316,8 +315,7 @@ pub fn panicking() -> bool {\n /// Entry point of panic from the libcore crate.\n #[cfg(not(test))]\n #[lang = \"panic_fmt\"]\n-#[cfg_attr(stage0, unwind)]\n-#[cfg_attr(not(stage0), unwind(allowed))]\n+#[unwind(allowed)]\n pub extern fn rust_begin_panic(msg: fmt::Arguments,\n                                file: &'static str,\n                                line: u32,"}, {"sha": "c456dc45d2182dd43cce74b7b29b30bd203f4f83", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -22,9 +22,7 @@\n \n #![feature(unicode)]\n #![feature(rustc_diagnostic_macros)]\n-#![cfg_attr(stage0, feature(match_default_bindings))]\n #![feature(non_exhaustive)]\n-#![cfg_attr(stage0, feature(i128_type))]\n #![feature(const_atomic_usize_new)]\n #![feature(rustc_attrs)]\n "}, {"sha": "b63159004854afb3b90b5866b204dbcbaaf4c8d0", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -21,7 +21,6 @@\n \n #![feature(const_fn)]\n #![feature(custom_attribute)]\n-#![cfg_attr(stage0, feature(i128_type))]\n #![feature(optin_builtin_traits)]\n #![allow(unused_attributes)]\n #![feature(specialization)]"}, {"sha": "a640a2b777537decc21d176cfe144a934501ef59", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -83,8 +83,7 @@ pub enum _Unwind_Context {}\n pub type _Unwind_Exception_Cleanup_Fn = extern \"C\" fn(unwind_code: _Unwind_Reason_Code,\n                                                       exception: *mut _Unwind_Exception);\n extern \"C\" {\n-    #[cfg_attr(stage0, unwind)]\n-    #[cfg_attr(not(stage0), unwind(allowed))]\n+    #[unwind(allowed)]\n     pub fn _Unwind_Resume(exception: *mut _Unwind_Exception) -> !;\n     pub fn _Unwind_DeleteException(exception: *mut _Unwind_Exception);\n     pub fn _Unwind_GetLanguageSpecificData(ctx: *mut _Unwind_Context) -> *mut c_void;\n@@ -221,8 +220,7 @@ if #[cfg(all(any(target_os = \"ios\", not(target_arch = \"arm\"))))] {\n if #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))] {\n     // Not 32-bit iOS\n     extern \"C\" {\n-        #[cfg_attr(stage0, unwind)]\n-        #[cfg_attr(not(stage0), unwind(allowed))]\n+        #[unwind(allowed)]\n         pub fn _Unwind_RaiseException(exception: *mut _Unwind_Exception) -> _Unwind_Reason_Code;\n         pub fn _Unwind_Backtrace(trace: _Unwind_Trace_Fn,\n                                  trace_argument: *mut c_void)\n@@ -231,8 +229,7 @@ if #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))] {\n } else {\n     // 32-bit iOS uses SjLj and does not provide _Unwind_Backtrace()\n     extern \"C\" {\n-        #[cfg_attr(stage0, unwind)]\n-        #[cfg_attr(not(stage0), unwind(allowed))]\n+        #[unwind(allowed)]\n         pub fn _Unwind_SjLj_RaiseException(e: *mut _Unwind_Exception) -> _Unwind_Reason_Code;\n     }\n "}, {"sha": "e8db3358cf076b49d5c7054a073fa372db534bde", "filename": "src/stage0.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8958815916201421b0a6648c68d7eb31bd3197ee/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=8958815916201421b0a6648c68d7eb31bd3197ee", "patch": "@@ -12,7 +12,7 @@\n # source tarball for a stable release you'll likely see `1.x.0` for rustc and\n # `0.x.0` for Cargo where they were released on `date`.\n \n-date: 2018-03-18\n+date: 2018-04-04\n rustc: beta\n cargo: beta\n "}]}