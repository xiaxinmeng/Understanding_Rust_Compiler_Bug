{"sha": "b0b1f4da60ae452d8155d84015696bb89232da73", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwYjFmNGRhNjBhZTQ1MmQ4MTU1ZDg0MDE1Njk2YmI4OTIzMmRhNzM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-05-17T06:37:36Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-05-17T06:41:41Z"}, "message": "Fix comments in `mir::dataflow::sanity_check`.", "tree": {"sha": "239685f7815092e4e05fbf343ff920b91c8ce023", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/239685f7815092e4e05fbf343ff920b91c8ce023"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0b1f4da60ae452d8155d84015696bb89232da73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0b1f4da60ae452d8155d84015696bb89232da73", "html_url": "https://github.com/rust-lang/rust/commit/b0b1f4da60ae452d8155d84015696bb89232da73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0b1f4da60ae452d8155d84015696bb89232da73/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd71b0dd54d7852d6f57c42ea5251a2e600b134f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd71b0dd54d7852d6f57c42ea5251a2e600b134f", "html_url": "https://github.com/rust-lang/rust/commit/cd71b0dd54d7852d6f57c42ea5251a2e600b134f"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "39eb0c33dfbc7dedd05fabfdeb81799bcf1f0584", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/sanity_check.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b0b1f4da60ae452d8155d84015696bb89232da73/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0b1f4da60ae452d8155d84015696bb89232da73/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs?ref=b0b1f4da60ae452d8155d84015696bb89232da73", "patch": "@@ -22,6 +22,22 @@ use super::BitDenotation;\n use super::DataflowResults;\n use super::HasMoveData;\n \n+/// This function scans `mir` for all calls to the intrinsic\n+/// `rustc_peek` that have the expression form `rustc_peek(&expr)`.\n+///\n+/// For each such call, determines what the dataflow bit-state is for\n+/// the L-value corresponding to `expr`; if the bit-state is a 1, then\n+/// that call to `rustc_peek` is ignored by the sanity check. If the\n+/// bit-state is a 0, then this pass emits a error message saying\n+/// \"rustc_peek: bit not set\".\n+///\n+/// The intention is that one can write unit tests for dataflow by\n+/// putting code into a compile-fail test and using `rustc_peek` to\n+/// make observations about the results of dataflow static analyses.\n+///\n+/// (If there are any calls to `rustc_peek` that do not match the\n+/// expression form above, then that emits an error as well, but those\n+/// errors are not intended to be used for unit tests.)\n pub fn sanity_check_via_rustc_peek<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                 mir: &Mir<'tcx>,\n                                                 id: ast::NodeId,\n@@ -32,9 +48,8 @@ pub fn sanity_check_via_rustc_peek<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n {\n     debug!(\"sanity_check_via_rustc_peek id: {:?}\", id);\n     // FIXME: this is not DRY. Figure out way to abstract this and\n-    // `dataflow::build_sets`. (But see note below about how the\n-    // behavior of this traversal is a bit different than that\n-    // performed by `build_sets`.)\n+    // `dataflow::build_sets`. (But note it is doing non-standard\n+    // stuff, so such generalization may not be realistic.)\n \n     let blocks = mir.all_basic_blocks();\n     'next_block: for bb in blocks {\n@@ -99,22 +114,6 @@ pub fn sanity_check_via_rustc_peek<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let mut sets = super::BlockSets { on_entry: &mut entry[..],\n                                           gen_set: &mut gen[..],\n                                           kill_set: &mut kill[..] };\n-        // Unfortunately if we just re-do the same thing that dataflow does, then\n-        // it will always appear like Lvalues are initialized; e.g. in\n-        // a case like:\n-        //\n-        // <bitset maps var1 to 0>\n-        // tmp13 = var1;\n-        // tmp14 = &tmp13;\n-        // rustc_peek(tmp14)\n-        //\n-        // The gen_set for normal dataflow would treat tmp13 as\n-        // initialized, even though it's source expression is\n-        // uninitialized.\n-        //\n-        // Work around this for rustc_peek by explicitly propagating\n-        // the relevant bitvector state when computing the effect of a\n-        // statement.\n \n         for (j, stmt) in statements.iter().enumerate() {\n             debug!(\"rustc_peek: ({:?},{}) {:?}\", bb, j, stmt);"}]}