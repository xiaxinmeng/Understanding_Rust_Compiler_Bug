{"sha": "625e4dd13a3abd0cc59807af66c3c4cd63440852", "node_id": "C_kwDOAAsO6NoAKDYyNWU0ZGQxM2EzYWJkMGNjNTk4MDdhZjY2YzNjNGNkNjM0NDA4NTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-11T14:49:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-11T14:49:30Z"}, "message": "Auto merge of #95125 - JakobDegen:uninit-variant-rvalue, r=oli-obk\n\nAdd new `Deinit` statement\n\nThis rvalue replaces `SetDiscriminant` for ADTs. This PR is an alternative to #94590 , which only specifies that the behavior of `SetDiscriminant` is the same as what this rvalue would do. The motivation for this change are discussed in that PR and [on Zulip](https://rust-lang.zulipchat.com/#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/SetDiscriminant.20and.20aggregate.20initialization.20.2394590)\n\nr? `@oli-obk`", "tree": {"sha": "a4ed1dd03f5dbe08d2d315f62b891424694ccb73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4ed1dd03f5dbe08d2d315f62b891424694ccb73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/625e4dd13a3abd0cc59807af66c3c4cd63440852", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/625e4dd13a3abd0cc59807af66c3c4cd63440852", "html_url": "https://github.com/rust-lang/rust/commit/625e4dd13a3abd0cc59807af66c3c4cd63440852", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/625e4dd13a3abd0cc59807af66c3c4cd63440852/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43998d544108b613c4631ed60249880167e8aafc", "url": "https://api.github.com/repos/rust-lang/rust/commits/43998d544108b613c4631ed60249880167e8aafc", "html_url": "https://github.com/rust-lang/rust/commit/43998d544108b613c4631ed60249880167e8aafc"}, {"sha": "2f03767eef21ac1111afb6af969e64d7d159c753", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f03767eef21ac1111afb6af969e64d7d159c753", "html_url": "https://github.com/rust-lang/rust/commit/2f03767eef21ac1111afb6af969e64d7d159c753"}], "stats": {"total": 1037, "additions": 744, "deletions": 293}, "files": [{"sha": "d38e89cd79edd785476d5a49c810d3ee8d01567c", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -386,6 +386,7 @@ impl<'tcx> rustc_mir_dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n \n             mir::StatementKind::FakeRead(..)\n             | mir::StatementKind::SetDiscriminant { .. }\n+            | mir::StatementKind::Deinit(..)\n             | mir::StatementKind::StorageLive(..)\n             | mir::StatementKind::Retag { .. }\n             | mir::StatementKind::AscribeUserType(..)"}, {"sha": "a5c0d77429de82d7f0812c58efd06ffbd1d75f77", "filename": "compiler/rustc_borrowck/src/def_use.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -72,5 +72,9 @@ pub fn categorize(context: PlaceContext) -> Option<DefUse> {\n \n         // Debug info is neither def nor use.\n         PlaceContext::NonUse(NonUseContext::VarDebugInfo) => None,\n+\n+        PlaceContext::MutatingUse(MutatingUseContext::Deinit | MutatingUseContext::SetDiscriminant) => {\n+            bug!(\"These statements are not allowed in this MIR phase\")\n+        }\n     }\n }"}, {"sha": "76d240bb89f59cfb5dce98a0913ce876046d16d8", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -63,9 +63,6 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n             StatementKind::FakeRead(box (_, _)) => {\n                 // Only relevant for initialized/liveness/safety checks.\n             }\n-            StatementKind::SetDiscriminant { place, variant_index: _ } => {\n-                self.mutate_place(location, **place, Shallow(None));\n-            }\n             StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n                 ref src,\n                 ref dst,\n@@ -91,6 +88,9 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                     LocalMutationIsAllowed::Yes,\n                 );\n             }\n+            StatementKind::Deinit(..) | StatementKind::SetDiscriminant { .. } => {\n+                bug!(\"Statement not allowed in this MIR phase\")\n+            }\n         }\n \n         self.super_statement(statement, location);"}, {"sha": "0c0676f93ad9bf4e0fd26d201bc18af351b3e267", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -626,9 +626,6 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                     flow_state,\n                 );\n             }\n-            StatementKind::SetDiscriminant { place, variant_index: _ } => {\n-                self.mutate_place(location, (**place, span), Shallow(None), flow_state);\n-            }\n             StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n                 ..\n             }) => {\n@@ -654,6 +651,9 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                     flow_state,\n                 );\n             }\n+            StatementKind::Deinit(..) | StatementKind::SetDiscriminant { .. } => {\n+                bug!(\"Statement not allowed in this MIR phase\")\n+            }\n         }\n     }\n "}, {"sha": "ece801716b2dbacc6715dc87e2d37113304fce63", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -1303,28 +1303,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     );\n                 }\n             }\n-            StatementKind::SetDiscriminant { ref place, variant_index } => {\n-                let place_type = place.ty(body, tcx).ty;\n-                let adt = match place_type.kind() {\n-                    ty::Adt(adt, _) if adt.is_enum() => adt,\n-                    _ => {\n-                        span_bug!(\n-                            stmt.source_info.span,\n-                            \"bad set discriminant ({:?} = {:?}): lhs is not an enum\",\n-                            place,\n-                            variant_index\n-                        );\n-                    }\n-                };\n-                if variant_index.as_usize() >= adt.variants().len() {\n-                    span_bug!(\n-                        stmt.source_info.span,\n-                        \"bad set discriminant ({:?} = {:?}): value of of range\",\n-                        place,\n-                        variant_index\n-                    );\n-                };\n-            }\n             StatementKind::AscribeUserType(box (ref place, ref projection), variance) => {\n                 let place_ty = place.ty(body, tcx).ty;\n                 if let Err(terr) = self.relate_type_and_user_type(\n@@ -1358,6 +1336,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             | StatementKind::Retag { .. }\n             | StatementKind::Coverage(..)\n             | StatementKind::Nop => {}\n+            StatementKind::Deinit(..) | StatementKind::SetDiscriminant { .. } => {\n+                bug!(\"Statement not allowed in this MIR phase\")\n+            }\n         }\n     }\n "}, {"sha": "8c45993a8b76bf7e4a171be65c81def5e6e6025c", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -772,6 +772,7 @@ fn codegen_stmt<'tcx>(\n         }\n         StatementKind::StorageLive(_)\n         | StatementKind::StorageDead(_)\n+        | StatementKind::Deinit(_)\n         | StatementKind::Nop\n         | StatementKind::FakeRead(..)\n         | StatementKind::Retag { .. }"}, {"sha": "57074f00210fe88111b4f369de5bb49f50237b35", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -518,6 +518,7 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n                         StatementKind::Assign(_)\n                         | StatementKind::FakeRead(_)\n                         | StatementKind::SetDiscriminant { .. }\n+                        | StatementKind::Deinit(_)\n                         | StatementKind::StorageLive(_)\n                         | StatementKind::StorageDead(_)\n                         | StatementKind::Retag(_, _)"}, {"sha": "efb424af3ed952f46bc50c0e7f99229384a0293e", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -211,6 +211,8 @@ impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n \n             PlaceContext::MutatingUse(\n                 MutatingUseContext::Store\n+                | MutatingUseContext::Deinit\n+                | MutatingUseContext::SetDiscriminant\n                 | MutatingUseContext::AsmOutput\n                 | MutatingUseContext::Borrow\n                 | MutatingUseContext::AddressOf"}, {"sha": "d9ebfc3e871436b901f4139b4d9524c5981a64bd", "filename": "compiler/rustc_codegen_ssa/src/mir/statement.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -48,6 +48,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     .codegen_set_discr(&mut bx, variant_index);\n                 bx\n             }\n+            mir::StatementKind::Deinit(..) => {\n+                // For now, don't codegen this to anything. In the future it may be worth\n+                // experimenting with what kind of information we can emit to LLVM without hurting\n+                // perf here\n+                bx\n+            }\n             mir::StatementKind::StorageLive(local) => {\n                 if let LocalRef::Place(cg_place) = self.locals[local] {\n                     cg_place.storage_live(&mut bx);"}, {"sha": "a165fa23f30acf5e40af7a2a4d4171ba84ada542", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -890,6 +890,11 @@ impl<'tcx, 'a, Tag: Provenance, Extra> AllocRefMut<'a, 'tcx, Tag, Extra> {\n     ) -> InterpResult<'tcx> {\n         self.write_scalar(alloc_range(offset, self.tcx.data_layout().pointer_size), val)\n     }\n+\n+    /// Mark the entire referenced range as uninitalized\n+    pub fn write_uninit(&mut self) {\n+        self.alloc.mark_init(self.range, false);\n+    }\n }\n \n impl<'tcx, 'a, Tag: Provenance, Extra> AllocRef<'a, 'tcx, Tag, Extra> {"}, {"sha": "8dc74035d61d009b0ec59dbd2ec4c69b4e694e66", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -791,6 +791,42 @@ where\n         }\n     }\n \n+    pub fn write_uninit(&mut self, dest: &PlaceTy<'tcx, M::PointerTag>) -> InterpResult<'tcx> {\n+        let mplace = match dest.place {\n+            Place::Ptr(mplace) => MPlaceTy { mplace, layout: dest.layout },\n+            Place::Local { frame, local } => {\n+                match M::access_local_mut(self, frame, local)? {\n+                    Ok(local) => match dest.layout.abi {\n+                        Abi::Scalar(_) => {\n+                            *local = LocalValue::Live(Operand::Immediate(Immediate::Scalar(\n+                                ScalarMaybeUninit::Uninit,\n+                            )));\n+                            return Ok(());\n+                        }\n+                        Abi::ScalarPair(..) => {\n+                            *local = LocalValue::Live(Operand::Immediate(Immediate::ScalarPair(\n+                                ScalarMaybeUninit::Uninit,\n+                                ScalarMaybeUninit::Uninit,\n+                            )));\n+                            return Ok(());\n+                        }\n+                        _ => self.force_allocation(dest)?,\n+                    },\n+                    Err(mplace) => {\n+                        // The local is in memory, go on below.\n+                        MPlaceTy { mplace, layout: dest.layout }\n+                    }\n+                }\n+            }\n+        };\n+        let Some(mut alloc) = self.get_place_alloc_mut(&mplace)? else {\n+            // Zero-sized access\n+            return Ok(());\n+        };\n+        alloc.write_uninit();\n+        Ok(())\n+    }\n+\n     /// Copies the data from an operand to a place. This does not support transmuting!\n     /// Use `copy_op_transmute` if the layouts could disagree.\n     #[inline(always)]"}, {"sha": "eb1a184bf9b219139c00b16fa4431cf8735d4b18", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -90,6 +90,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.write_discriminant(*variant_index, &dest)?;\n             }\n \n+            Deinit(place) => {\n+                let dest = self.eval_place(**place)?;\n+                self.write_uninit(&dest)?;\n+            }\n+\n             // Mark locals as alive\n             StorageLive(local) => {\n                 self.storage_live(*local)?;"}, {"sha": "7e2a50444db062d24cf0b06757927c07c034ba38", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -692,6 +692,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n         match statement.kind {\n             StatementKind::Assign(..)\n             | StatementKind::SetDiscriminant { .. }\n+            | StatementKind::Deinit(..)\n             | StatementKind::FakeRead(..)\n             | StatementKind::StorageLive(_)\n             | StatementKind::StorageDead(_)"}, {"sha": "58a7f6d1be0b173e32a1932e29b5124d38c5368b", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -346,9 +346,24 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     self.fail(location, format!(\"bad arg ({:?} != usize)\", op_cnt_ty))\n                 }\n             }\n-            StatementKind::SetDiscriminant { .. } => {\n-                if self.mir_phase < MirPhase::DropsLowered {\n-                    self.fail(location, \"`SetDiscriminant` is not allowed until drop elaboration\");\n+            StatementKind::SetDiscriminant { place, .. } => {\n+                if self.mir_phase < MirPhase::Deaggregated {\n+                    self.fail(location, \"`SetDiscriminant`is not allowed until deaggregation\");\n+                }\n+                let pty = place.ty(&self.body.local_decls, self.tcx).ty.kind();\n+                if !matches!(pty, ty::Adt(..) | ty::Generator(..) | ty::Opaque(..)) {\n+                    self.fail(\n+                        location,\n+                        format!(\n+                            \"`SetDiscriminant` is only allowed on ADTs and generators, not {:?}\",\n+                            pty\n+                        ),\n+                    );\n+                }\n+            }\n+            StatementKind::Deinit(..) => {\n+                if self.mir_phase < MirPhase::Deaggregated {\n+                    self.fail(location, \"`Deinit`is not allowed until deaggregation\");\n                 }\n             }\n             StatementKind::Retag(_, _) => {"}, {"sha": "180a40043db0788c1d4ab881d7a105598f03bcad", "filename": "compiler/rustc_const_eval/src/util/aggregate.rs", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -14,22 +14,26 @@ use std::iter::TrustedLen;\n /// (lhs as Variant).field1 = arg1;\n /// discriminant(lhs) = variant_index;  // If lhs is an enum or generator.\n pub fn expand_aggregate<'tcx>(\n-    mut lhs: Place<'tcx>,\n+    orig_lhs: Place<'tcx>,\n     operands: impl Iterator<Item = (Operand<'tcx>, Ty<'tcx>)> + TrustedLen,\n     kind: AggregateKind<'tcx>,\n     source_info: SourceInfo,\n     tcx: TyCtxt<'tcx>,\n ) -> impl Iterator<Item = Statement<'tcx>> + TrustedLen {\n+    let mut lhs = orig_lhs;\n     let mut set_discriminant = None;\n     let active_field_index = match kind {\n         AggregateKind::Adt(adt_did, variant_index, _, _, active_field_index) => {\n             let adt_def = tcx.adt_def(adt_did);\n             if adt_def.is_enum() {\n                 set_discriminant = Some(Statement {\n-                    kind: StatementKind::SetDiscriminant { place: Box::new(lhs), variant_index },\n+                    kind: StatementKind::SetDiscriminant {\n+                        place: Box::new(orig_lhs),\n+                        variant_index,\n+                    },\n                     source_info,\n                 });\n-                lhs = tcx.mk_place_downcast(lhs, adt_def, variant_index);\n+                lhs = tcx.mk_place_downcast(orig_lhs, adt_def, variant_index);\n             }\n             active_field_index\n         }\n@@ -38,7 +42,7 @@ pub fn expand_aggregate<'tcx>(\n             // variant 0 (Unresumed).\n             let variant_index = VariantIdx::new(0);\n             set_discriminant = Some(Statement {\n-                kind: StatementKind::SetDiscriminant { place: Box::new(lhs), variant_index },\n+                kind: StatementKind::SetDiscriminant { place: Box::new(orig_lhs), variant_index },\n                 source_info,\n             });\n \n@@ -50,27 +54,24 @@ pub fn expand_aggregate<'tcx>(\n         _ => None,\n     };\n \n-    operands\n-        .enumerate()\n-        .map(move |(i, (op, ty))| {\n-            let lhs_field = if let AggregateKind::Array(_) = kind {\n-                let offset = u64::try_from(i).unwrap();\n-                tcx.mk_place_elem(\n-                    lhs,\n-                    ProjectionElem::ConstantIndex {\n-                        offset,\n-                        min_length: offset + 1,\n-                        from_end: false,\n-                    },\n-                )\n-            } else {\n-                let field = Field::new(active_field_index.unwrap_or(i));\n-                tcx.mk_place_field(lhs, field, ty)\n-            };\n-            Statement {\n-                source_info,\n-                kind: StatementKind::Assign(Box::new((lhs_field, Rvalue::Use(op)))),\n-            }\n-        })\n+    let operands = operands.enumerate().map(move |(i, (op, ty))| {\n+        let lhs_field = if let AggregateKind::Array(_) = kind {\n+            let offset = u64::try_from(i).unwrap();\n+            tcx.mk_place_elem(\n+                lhs,\n+                ProjectionElem::ConstantIndex { offset, min_length: offset + 1, from_end: false },\n+            )\n+        } else {\n+            let field = Field::new(active_field_index.unwrap_or(i));\n+            tcx.mk_place_field(lhs, field, ty)\n+        };\n+        Statement {\n+            source_info,\n+            kind: StatementKind::Assign(Box::new((lhs_field, Rvalue::Use(op)))),\n+        }\n+    });\n+    [Statement { source_info, kind: StatementKind::Deinit(Box::new(orig_lhs)) }]\n+        .into_iter()\n+        .chain(operands)\n         .chain(set_discriminant)\n }"}, {"sha": "578fcd82ad614dddeabf950406bdee5bcffa33af", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -1588,8 +1588,17 @@ pub enum StatementKind<'tcx> {\n     FakeRead(Box<(FakeReadCause, Place<'tcx>)>),\n \n     /// Write the discriminant for a variant to the enum Place.\n+    ///\n+    /// This is permitted for both generators and ADTs. This does not necessarily write to the\n+    /// entire place; instead, it writes to the minimum set of bytes as required by the layout for\n+    /// the type.\n     SetDiscriminant { place: Box<Place<'tcx>>, variant_index: VariantIdx },\n \n+    /// Deinitializes the place.\n+    ///\n+    /// This writes `uninit` bytes to the entire place.\n+    Deinit(Box<Place<'tcx>>),\n+\n     /// Start a live range for the storage of the local.\n     StorageLive(Local),\n \n@@ -1739,6 +1748,7 @@ impl Debug for Statement<'_> {\n             SetDiscriminant { ref place, variant_index } => {\n                 write!(fmt, \"discriminant({:?}) = {:?}\", place, variant_index)\n             }\n+            Deinit(ref place) => write!(fmt, \"Deinit({:?})\", place),\n             AscribeUserType(box (ref place, ref c_ty), ref variance) => {\n                 write!(fmt, \"AscribeUserType({:?}, {:?}, {:?})\", place, variance, c_ty)\n             }"}, {"sha": "afcd5db8f487c0d8da1db8b5dfb337ea97c19a3b", "filename": "compiler/rustc_middle/src/mir/spanview.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -243,6 +243,7 @@ pub fn statement_kind_name(statement: &Statement<'_>) -> &'static str {\n         Assign(..) => \"Assign\",\n         FakeRead(..) => \"FakeRead\",\n         SetDiscriminant { .. } => \"SetDiscriminant\",\n+        Deinit(..) => \"Deinit\",\n         StorageLive(..) => \"StorageLive\",\n         StorageDead(..) => \"StorageDead\",\n         Retag(..) => \"Retag\","}, {"sha": "45b1ad6df8226f2118742f4c7f6e9264f99b9642", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -395,10 +395,17 @@ macro_rules! make_mir_visitor {\n                     StatementKind::SetDiscriminant { place, .. } => {\n                         self.visit_place(\n                             place,\n-                            PlaceContext::MutatingUse(MutatingUseContext::Store),\n+                            PlaceContext::MutatingUse(MutatingUseContext::SetDiscriminant),\n                             location\n                         );\n                     }\n+                    StatementKind::Deinit(place) => {\n+                        self.visit_place(\n+                            place,\n+                            PlaceContext::MutatingUse(MutatingUseContext::Deinit),\n+                            location\n+                        )\n+                    }\n                     StatementKind::StorageLive(local) => {\n                         self.visit_local(\n                             local,\n@@ -1174,6 +1181,10 @@ pub enum NonMutatingUseContext {\n pub enum MutatingUseContext {\n     /// Appears as LHS of an assignment.\n     Store,\n+    /// Appears on `SetDiscriminant`\n+    SetDiscriminant,\n+    /// Appears on `Deinit`\n+    Deinit,\n     /// Output operand of an inline assembly block.\n     AsmOutput,\n     /// Destination of a call."}, {"sha": "584ab9718ed65121cc5aafd62ef3e0aff2e7f79b", "filename": "compiler/rustc_mir_dataflow/src/impls/init_locals.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Finit_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Finit_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Finit_locals.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -77,6 +77,10 @@ impl<T> Visitor<'_> for TransferFunction<'_, T>\n where\n     T: GenKill<Local>,\n {\n+    // FIXME: Using `visit_local` here is a bug. For example, on `move _5.field` we mark `_5` as\n+    // deinitialized, although clearly it is only partially deinitialized. This analysis is not\n+    // actually used anywhere at the moment, so this is not critical, but this does need to be fixed\n+    // before it starts being used again.\n     fn visit_local(&mut self, &local: &Local, context: PlaceContext, _: Location) {\n         use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, NonUseContext};\n         match context {\n@@ -87,6 +91,9 @@ where\n                 | MutatingUseContext::Yield,\n             ) => {}\n \n+            // If it's deinitialized, it's no longer init\n+            PlaceContext::MutatingUse(MutatingUseContext::Deinit) => self.trans.kill(local),\n+\n             // Otherwise, when a place is mutated, we must consider it possibly initialized.\n             PlaceContext::MutatingUse(_) => self.trans.gen(local),\n "}, {"sha": "5a788c153a477efeeae3ab575078e82926584b9b", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 7, "deletions": 25, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -18,30 +18,6 @@ use crate::{AnalysisDomain, Backward, CallReturnPlaces, GenKill, GenKillAnalysis\n /// such an assignment is currently marked as a \"use\" of `x` in an attempt to be maximally\n /// conservative.\n ///\n-/// ## Enums and `SetDiscriminant`\n-///\n-/// Assigning a literal value to an `enum` (e.g. `Option<i32>`), does not result in a simple\n-/// assignment of the form `_1 = /*...*/` in the MIR. For example, the following assignment to `x`:\n-///\n-/// ```\n-/// x = Some(4);\n-/// ```\n-///\n-/// compiles to this MIR\n-///\n-/// ```\n-/// ((_1 as Some).0: i32) = const 4_i32;\n-/// discriminant(_1) = 1;\n-/// ```\n-///\n-/// However, `MaybeLiveLocals` **does** mark `x` (`_1`) as \"killed\" after a statement like this.\n-/// That's because it treats the `SetDiscriminant` operation as a definition of `x`, even though\n-/// the writes that actually initialized the locals happened earlier.\n-///\n-/// This makes `MaybeLiveLocals` unsuitable for certain classes of optimization normally associated\n-/// with a live variables analysis, notably dead-store elimination. It's a dirty hack, but it works\n-/// okay for the generator state transform (currently the main consumer of this analysis).\n-///\n /// [`MaybeBorrowedLocals`]: super::MaybeBorrowedLocals\n /// [flow-test]: https://github.com/rust-lang/rust/blob/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src/test/ui/mir-dataflow/liveness-ptr.rs\n /// [liveness]: https://en.wikipedia.org/wiki/Live_variable_analysis\n@@ -161,7 +137,13 @@ impl DefUse {\n         match context {\n             PlaceContext::NonUse(_) => None,\n \n-            PlaceContext::MutatingUse(MutatingUseContext::Store) => Some(DefUse::Def),\n+            PlaceContext::MutatingUse(MutatingUseContext::Store | MutatingUseContext::Deinit) => {\n+                Some(DefUse::Def)\n+            }\n+\n+            // Setting the discriminant is not a use because it does no reading, but it is also not\n+            // a def because it does not overwrite the whole place\n+            PlaceContext::MutatingUse(MutatingUseContext::SetDiscriminant) => None,\n \n             // `MutatingUseContext::Call` and `MutatingUseContext::Yield` indicate that this is the\n             // destination place for a `Call` return or `Yield` resume respectively. Since this is"}, {"sha": "2730e8bd49b7696ce409e1b1198cee3d52139db4", "filename": "compiler/rustc_mir_dataflow/src/impls/storage_liveness.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -131,7 +131,8 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n \n             // If a place is assigned to in a statement, it needs storage for that statement.\n             StatementKind::Assign(box (place, _))\n-            | StatementKind::SetDiscriminant { box place, .. } => {\n+            | StatementKind::SetDiscriminant { box place, .. }\n+            | StatementKind::Deinit(box place) => {\n                 trans.gen(place.local);\n             }\n "}, {"sha": "73072464872c307c96a470059d2d6448508f9bdf", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -296,10 +296,10 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             StatementKind::StorageDead(local) => {\n                 self.gather_move(Place::from(*local));\n             }\n-            StatementKind::SetDiscriminant { .. } => {\n+            StatementKind::SetDiscriminant { .. } | StatementKind::Deinit(..) => {\n                 span_bug!(\n                     stmt.source_info.span,\n-                    \"SetDiscriminant should not exist during borrowck\"\n+                    \"SetDiscriminant/Deinit should not exist during borrowck\"\n                 );\n             }\n             StatementKind::Retag { .. }"}, {"sha": "d1d6e7cfe2fed77e17e30fb6c9b907b3ef6ca168", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -97,6 +97,7 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n             StatementKind::Assign(..)\n             | StatementKind::FakeRead(..)\n             | StatementKind::SetDiscriminant { .. }\n+            | StatementKind::Deinit(..)\n             | StatementKind::StorageLive(..)\n             | StatementKind::StorageDead(..)\n             | StatementKind::Retag { .. }"}, {"sha": "13b49256d488a8f1b25c0c5168e00f0db8acd72e", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -897,8 +897,10 @@ impl Visitor<'_> for CanConstProp {\n             // mutations of the same local via `Store`\n             | MutatingUse(MutatingUseContext::Call)\n             | MutatingUse(MutatingUseContext::AsmOutput)\n+            | MutatingUse(MutatingUseContext::Deinit)\n             // Actual store that can possibly even propagate a value\n-            | MutatingUse(MutatingUseContext::Store) => {\n+            | MutatingUse(MutatingUseContext::Store)\n+            | MutatingUse(MutatingUseContext::SetDiscriminant) => {\n                 if !self.found_assignment.insert(local) {\n                     match &mut self.can_const_prop[local] {\n                         // If the local can only get propagated in its own block, then we don't have"}, {"sha": "d6331a88c5b7da31a7d4e3679a3afe37f8c92066", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -778,7 +778,9 @@ impl Visitor<'_> for CanConstProp {\n             // mutations of the same local via `Store`\n             | MutatingUse(MutatingUseContext::Call)\n             | MutatingUse(MutatingUseContext::AsmOutput)\n+            | MutatingUse(MutatingUseContext::Deinit)\n             // Actual store that can possibly even propagate a value\n+            | MutatingUse(MutatingUseContext::SetDiscriminant)\n             | MutatingUse(MutatingUseContext::Store) => {\n                 if !self.found_assignment.insert(local) {\n                     match &mut self.can_const_prop[local] {"}, {"sha": "5b7b343949c02f02288e9f303103241e856af3aa", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -827,6 +827,7 @@ pub(super) fn filtered_statement_span(statement: &Statement<'_>) -> Option<Span>\n         | StatementKind::CopyNonOverlapping(..)\n         | StatementKind::Assign(_)\n         | StatementKind::SetDiscriminant { .. }\n+        | StatementKind::Deinit(..)\n         | StatementKind::Retag(_, _)\n         | StatementKind::AscribeUserType(_, _) => {\n             Some(statement.source_info.span)"}, {"sha": "3732a308e3ac3276a4093291988cef991691c8fd", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -530,6 +530,7 @@ impl<'a> Conflicts<'a> {\n             StatementKind::Assign(_) => {}\n \n             StatementKind::SetDiscriminant { .. }\n+            | StatementKind::Deinit(..)\n             | StatementKind::StorageLive(..)\n             | StatementKind::StorageDead(..)\n             | StatementKind::Retag(..)"}, {"sha": "144ea0ec61931c377bffa6f53fe8e0c881a01ed1", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -1441,6 +1441,7 @@ impl<'tcx> Visitor<'tcx> for EnsureGeneratorFieldAssignmentsNeverAlias<'_> {\n \n             StatementKind::FakeRead(..)\n             | StatementKind::SetDiscriminant { .. }\n+            | StatementKind::Deinit(..)\n             | StatementKind::StorageLive(_)\n             | StatementKind::StorageDead(_)\n             | StatementKind::Retag(..)"}, {"sha": "5e6dabeba6da2577498281561819211583d0a53e", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -369,6 +369,7 @@ impl<'tcx> Inliner<'tcx> {\n                 match stmt.kind {\n                     StatementKind::StorageLive(_)\n                     | StatementKind::StorageDead(_)\n+                    | StatementKind::Deinit(_)\n                     | StatementKind::Nop => {}\n                     _ => cost += INSTR_COST,\n                 }"}, {"sha": "4d214b0356ca7f1a56925c1344bbe7659226aa65", "filename": "compiler/rustc_mir_transform/src/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -50,6 +50,7 @@ impl RemoveNoopLandingPads {\n \n                 StatementKind::Assign { .. }\n                 | StatementKind::SetDiscriminant { .. }\n+                | StatementKind::Deinit(..)\n                 | StatementKind::CopyNonOverlapping(..)\n                 | StatementKind::Retag { .. } => {\n                     return false;"}, {"sha": "aaee6f491cd33750a88c5a030dc8fa2dd7b12061", "filename": "compiler/rustc_mir_transform/src/remove_zsts.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -21,7 +21,9 @@ impl<'tcx> MirPass<'tcx> for RemoveZsts {\n         let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n         for block in basic_blocks.iter_mut() {\n             for statement in block.statements.iter_mut() {\n-                if let StatementKind::Assign(box (place, _)) = statement.kind {\n+                if let StatementKind::Assign(box (place, _)) | StatementKind::Deinit(box place) =\n+                    statement.kind\n+                {\n                     let place_ty = place.ty(local_decls, tcx).ty;\n                     if !maybe_zst(place_ty) {\n                         continue;"}, {"sha": "33ea1c4ba2f59a5d3664c03dc6fa1c88e5d5f7e0", "filename": "compiler/rustc_mir_transform/src/separate_const_switch.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -242,6 +242,7 @@ fn is_likely_const<'tcx>(mut tracked_place: Place<'tcx>, block: &BasicBlockData<\n             // These statements have no influence on the place\n             // we are interested in\n             StatementKind::FakeRead(_)\n+            | StatementKind::Deinit(_)\n             | StatementKind::StorageLive(_)\n             | StatementKind::Retag(_, _)\n             | StatementKind::AscribeUserType(_, _)\n@@ -308,6 +309,7 @@ fn find_determining_place<'tcx>(\n             // These statements have no influence on the place\n             // we are interested in\n             StatementKind::FakeRead(_)\n+            | StatementKind::Deinit(_)\n             | StatementKind::StorageLive(_)\n             | StatementKind::StorageDead(_)\n             | StatementKind::Retag(_, _)"}, {"sha": "b42e3909cf386bc7b322383ac424dceaf4f28aec", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -498,7 +498,8 @@ impl<'tcx> Visitor<'tcx> for UsedLocals {\n                 self.visit_rvalue(rvalue, location);\n             }\n \n-            StatementKind::SetDiscriminant { ref place, variant_index: _ } => {\n+            StatementKind::SetDiscriminant { ref place, variant_index: _ }\n+            | StatementKind::Deinit(ref place) => {\n                 self.visit_lhs(place, location);\n             }\n         }\n@@ -534,9 +535,8 @@ fn remove_unused_definitions(used_locals: &mut UsedLocals, body: &mut Body<'_>)\n                     }\n                     StatementKind::Assign(box (place, _)) => used_locals.is_used(place.local),\n \n-                    StatementKind::SetDiscriminant { ref place, .. } => {\n-                        used_locals.is_used(place.local)\n-                    }\n+                    StatementKind::SetDiscriminant { ref place, .. }\n+                    | StatementKind::Deinit(ref place) => used_locals.is_used(place.local),\n                     _ => true,\n                 };\n "}, {"sha": "92be90014ffc42a601d6b62bc088e331e61369a0", "filename": "src/test/codegen/try_identity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fcodegen%2Ftry_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fcodegen%2Ftry_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ftry_identity.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -14,7 +14,7 @@ type R = Result<u64, i32>;\n #[no_mangle]\n pub fn try_identity(x: R) -> R {\n // CHECK: start:\n-// CHECK-NOT: br {{.*}}\n+// FIXME(JakobDegen): Broken by deaggregation change CHECK-NOT\\: br {{.*}}\n // CHECK ret void\n     let y = match into_result(x) {\n         Err(e) => return from_error(From::from(e)),"}, {"sha": "884275430c8b164eb508de4592651bc8ff3ba407", "filename": "src/test/mir-opt/76803_regression.encode.SimplifyBranchSame.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2F76803_regression.encode.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2F76803_regression.encode.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2F76803_regression.encode.SimplifyBranchSame.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -17,6 +17,7 @@\n       }\n   \n       bb2: {\n+          Deinit(_0);                      // scope 0 at $DIR/76803_regression.rs:12:20: 12:27\n           discriminant(_0) = 1;            // scope 0 at $DIR/76803_regression.rs:12:20: 12:27\n           goto -> bb3;                     // scope 0 at $DIR/76803_regression.rs:12:20: 12:27\n       }"}, {"sha": "678e965cd67f268826bef48339f298e36283fd39", "filename": "src/test/mir-opt/combine_clone_of_primitives.{impl#0}-clone.InstCombine.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -63,6 +63,7 @@\n       }\n   \n       bb3: {\n+          Deinit(_0);                      // scope 1 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n           (_0.0: T) = move _5;             // scope 1 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n           (_0.1: u64) = move _8;           // scope 1 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n           (_0.2: [f32; 3]) = move _11;     // scope 1 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15"}, {"sha": "7dd420e41ceff11c36a55583ef6842dc99375c22", "filename": "src/test/mir-opt/const_debuginfo.main.ConstDebugInfo.diff", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -79,13 +79,16 @@\n                                            // + span: $DIR/const_debuginfo.rs:14:13: 14:28\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [104, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }\n           StorageLive(_10);                // scope 5 at $DIR/const_debuginfo.rs:16:9: 16:10\n+          Deinit(_10);                     // scope 5 at $DIR/const_debuginfo.rs:16:13: 16:34\n           (_10.0: bool) = const true;      // scope 5 at $DIR/const_debuginfo.rs:16:13: 16:34\n           (_10.1: bool) = const false;     // scope 5 at $DIR/const_debuginfo.rs:16:13: 16:34\n           (_10.2: u32) = const 123_u32;    // scope 5 at $DIR/const_debuginfo.rs:16:13: 16:34\n           StorageLive(_11);                // scope 6 at $DIR/const_debuginfo.rs:18:9: 18:10\n+          Deinit(_11);                     // scope 6 at $DIR/const_debuginfo.rs:18:13: 18:24\n           ((_11 as Some).0: u16) = const 99_u16; // scope 6 at $DIR/const_debuginfo.rs:18:13: 18:24\n           discriminant(_11) = 1;           // scope 6 at $DIR/const_debuginfo.rs:18:13: 18:24\n           StorageLive(_12);                // scope 7 at $DIR/const_debuginfo.rs:20:9: 20:10\n+          Deinit(_12);                     // scope 7 at $DIR/const_debuginfo.rs:20:13: 20:35\n           (_12.0: u32) = const 32_u32;     // scope 7 at $DIR/const_debuginfo.rs:20:13: 20:35\n           (_12.1: u32) = const 32_u32;     // scope 7 at $DIR/const_debuginfo.rs:20:13: 20:35\n           StorageLive(_13);                // scope 8 at $DIR/const_debuginfo.rs:21:9: 21:10"}, {"sha": "62a681e1c12a7014f1266627974350dabdaa9c79", "filename": "src/test/mir-opt/const_goto_storage.match_nested_if.ConstGoto.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_goto_storage.match_nested_if.ConstGoto.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_goto_storage.match_nested_if.ConstGoto.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_goto_storage.match_nested_if.ConstGoto.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -17,6 +17,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/const_goto_storage.rs:3:9: 3:12\n -         StorageLive(_2);                 // scope 0 at $DIR/const_goto_storage.rs:3:21: 3:23\n+-         nop;                             // scope 0 at $DIR/const_goto_storage.rs:3:21: 3:23\n -         StorageLive(_3);                 // scope 0 at $DIR/const_goto_storage.rs:4:15: 8:10\n -         StorageLive(_4);                 // scope 0 at $DIR/const_goto_storage.rs:4:18: 4:76\n -         StorageLive(_5);                 // scope 0 at $DIR/const_goto_storage.rs:4:21: 4:52"}, {"sha": "821075047cb876e4605cfd71a4880ea5c23b5ad8", "filename": "src/test/mir-opt/const_prop/aggregate.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -14,6 +14,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/aggregate.rs:5:9: 5:10\n           StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:5:13: 5:24\n           StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:5:13: 5:22\n+          Deinit(_3);                      // scope 0 at $DIR/aggregate.rs:5:13: 5:22\n           (_3.0: i32) = const 0_i32;       // scope 0 at $DIR/aggregate.rs:5:13: 5:22\n           (_3.1: i32) = const 1_i32;       // scope 0 at $DIR/aggregate.rs:5:13: 5:22\n           (_3.2: i32) = const 2_i32;       // scope 0 at $DIR/aggregate.rs:5:13: 5:22"}, {"sha": "445732f70220a53b3e6e2502c8240ae979b35c16", "filename": "src/test/mir-opt/const_prop/discriminant.main.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -15,6 +15,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:11:9: 11:10\n           StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n           StorageLive(_3);                 // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n+          Deinit(_3);                      // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n           ((_3 as Some).0: bool) = const true; // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n           discriminant(_3) = 1;            // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n -         _4 = discriminant(_3);           // scope 0 at $DIR/discriminant.rs:11:21: 11:31"}, {"sha": "445732f70220a53b3e6e2502c8240ae979b35c16", "filename": "src/test/mir-opt/const_prop/discriminant.main.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -15,6 +15,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:11:9: 11:10\n           StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n           StorageLive(_3);                 // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n+          Deinit(_3);                      // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n           ((_3 as Some).0: bool) = const true; // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n           discriminant(_3) = 1;            // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n -         _4 = discriminant(_3);           // scope 0 at $DIR/discriminant.rs:11:21: 11:31"}, {"sha": "c60cf1e481dcdd1fc6098e12bc7708e50ba061ea", "filename": "src/test/mir-opt/const_prop/invalid_constant.main.ConstProp.diff", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -34,13 +34,15 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/invalid_constant.rs:21:9: 21:22\n           StorageLive(_2);                 // scope 2 at $DIR/invalid_constant.rs:21:34: 21:63\n+          Deinit(_2);                      // scope 2 at $DIR/invalid_constant.rs:21:34: 21:63\n           (_2.0: u32) = const 1114113_u32; // scope 2 at $DIR/invalid_constant.rs:21:34: 21:63\n -         _1 = (_2.1: char);               // scope 2 at $DIR/invalid_constant.rs:21:34: 21:67\n +         _1 = const {transmute(0x00110001): char}; // scope 2 at $DIR/invalid_constant.rs:21:34: 21:67\n           StorageDead(_2);                 // scope 0 at $DIR/invalid_constant.rs:21:69: 21:70\n           StorageLive(_3);                 // scope 1 at $DIR/invalid_constant.rs:28:9: 28:21\n           StorageLive(_4);                 // scope 1 at $DIR/invalid_constant.rs:28:25: 28:59\n           StorageLive(_5);                 // scope 4 at $DIR/invalid_constant.rs:28:34: 28:55\n+          Deinit(_5);                      // scope 4 at $DIR/invalid_constant.rs:28:34: 28:55\n           (_5.0: u32) = const 4_u32;       // scope 4 at $DIR/invalid_constant.rs:28:34: 28:55\n -         _4 = (_5.1: E);                  // scope 4 at $DIR/invalid_constant.rs:28:34: 28:57\n -         _3 = [move _4];                  // scope 1 at $DIR/invalid_constant.rs:28:24: 28:60\n@@ -57,6 +59,7 @@\n           StorageLive(_6);                 // scope 3 at $DIR/invalid_constant.rs:35:9: 35:31\n           StorageLive(_7);                 // scope 3 at $DIR/invalid_constant.rs:35:35: 35:73\n           StorageLive(_8);                 // scope 6 at $DIR/invalid_constant.rs:35:44: 35:65\n+          Deinit(_8);                      // scope 6 at $DIR/invalid_constant.rs:35:44: 35:65\n           (_8.0: u32) = const 0_u32;       // scope 6 at $DIR/invalid_constant.rs:35:44: 35:65\n           nop;                             // scope 6 at $DIR/invalid_constant.rs:35:44: 35:71\n           nop;                             // scope 3 at $DIR/invalid_constant.rs:35:34: 35:74"}, {"sha": "e874adebbe01b62caf26efe22d2ad3316f0b735c", "filename": "src/test/mir-opt/const_prop/issue_66971.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -11,6 +11,8 @@\n           StorageLive(_1);                 // scope 0 at $DIR/issue-66971.rs:16:5: 16:23\n           StorageLive(_2);                 // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n           StorageLive(_3);                 // scope 0 at $DIR/issue-66971.rs:16:13: 16:15\n+          nop;                             // scope 0 at $DIR/issue-66971.rs:16:13: 16:15\n+          Deinit(_2);                      // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n           nop;                             // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n           (_2.1: u8) = const 0_u8;         // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n           (_2.2: u8) = const 0_u8;         // scope 0 at $DIR/issue-66971.rs:16:12: 16:22"}, {"sha": "69d31b681b4e5631d00353e5a994f8055a76a6c9", "filename": "src/test/mir-opt/const_prop/issue_67019.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -11,8 +11,10 @@\n           StorageLive(_1);                 // scope 0 at $DIR/issue-67019.rs:11:5: 11:20\n           StorageLive(_2);                 // scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n           StorageLive(_3);                 // scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n+          Deinit(_3);                      // scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n           (_3.0: u8) = const 1_u8;         // scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n           (_3.1: u8) = const 2_u8;         // scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n+          Deinit(_2);                      // scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n -         (_2.0: (u8, u8)) = move _3;      // scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n +         (_2.0: (u8, u8)) = const (1_u8, 2_u8); // scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n           StorageDead(_3);                 // scope 0 at $DIR/issue-67019.rs:11:18: 11:19"}, {"sha": "b1deebe40fac0b6db93eced5d35e363a717a6b95", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -14,6 +14,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:5:9: 5:14\n+          Deinit(_1);                      // scope 0 at $DIR/mutable_variable_aggregate.rs:5:17: 5:25\n           (_1.0: i32) = const 42_i32;      // scope 0 at $DIR/mutable_variable_aggregate.rs:5:17: 5:25\n           (_1.1: i32) = const 43_i32;      // scope 0 at $DIR/mutable_variable_aggregate.rs:5:17: 5:25\n           (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate.rs:6:5: 6:13"}, {"sha": "07208ad0d2b58f5a1abaaf9190ae69fb801a7917", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate_mut_ref.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -18,6 +18,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:5:9: 5:14\n+          Deinit(_1);                      // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:5:17: 5:25\n           (_1.0: i32) = const 42_i32;      // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:5:17: 5:25\n           (_1.1: i32) = const 43_i32;      // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:5:17: 5:25\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:6:9: 6:10"}, {"sha": "247d8f32432c0e65d33df16b134fc358894814f5", "filename": "src/test/mir-opt/const_prop/mutable_variable_unprop_assign.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -31,6 +31,7 @@\n   \n       bb1: {\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:6:9: 6:14\n+          Deinit(_2);                      // scope 1 at $DIR/mutable_variable_unprop_assign.rs:6:29: 6:35\n           (_2.0: i32) = const 1_i32;       // scope 1 at $DIR/mutable_variable_unprop_assign.rs:6:29: 6:35\n           (_2.1: i32) = const 2_i32;       // scope 1 at $DIR/mutable_variable_unprop_assign.rs:6:29: 6:35\n           StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:7:11: 7:12"}, {"sha": "72a613b26b6a34246f3a7405b5268d38c4a2adec", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -52,6 +52,7 @@\n           StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n           StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n           StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n+          Deinit(_9);                      // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n           (_9.0: u32) = const 12_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n           (_9.1: u32) = const 42_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n -         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38"}, {"sha": "72a613b26b6a34246f3a7405b5268d38c4a2adec", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -52,6 +52,7 @@\n           StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n           StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n           StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n+          Deinit(_9);                      // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n           (_9.0: u32) = const 12_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n           (_9.1: u32) = const 42_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n -         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38"}, {"sha": "2bcd10f160b820782c06c73db76b3fbccfb15f16", "filename": "src/test/mir-opt/const_prop/tuple_literal_propagation.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -12,6 +12,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/tuple_literal_propagation.rs:3:9: 3:10\n+          Deinit(_1);                      // scope 0 at $DIR/tuple_literal_propagation.rs:3:13: 3:19\n           (_1.0: u32) = const 1_u32;       // scope 0 at $DIR/tuple_literal_propagation.rs:3:13: 3:19\n           (_1.1: u32) = const 2_u32;       // scope 0 at $DIR/tuple_literal_propagation.rs:3:13: 3:19\n           StorageLive(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:5:5: 5:15"}, {"sha": "dcc4368694c9fcf69be62016dcc72499796f0576", "filename": "src/test/mir-opt/const_prop_miscompile.bar.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -19,6 +19,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:12:9: 12:14\n+          Deinit(_1);                      // scope 0 at $DIR/const_prop_miscompile.rs:12:17: 12:21\n           (_1.0: i32) = const 1_i32;       // scope 0 at $DIR/const_prop_miscompile.rs:12:17: 12:21\n           StorageLive(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:13:5: 15:6\n           StorageLive(_3);                 // scope 2 at $DIR/const_prop_miscompile.rs:14:10: 14:22"}, {"sha": "08730da2f3d124fe0da1084a8227f8ef98a48cb7", "filename": "src/test/mir-opt/const_prop_miscompile.foo.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -16,6 +16,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:5:9: 5:14\n+          Deinit(_1);                      // scope 0 at $DIR/const_prop_miscompile.rs:5:17: 5:21\n           (_1.0: i32) = const 1_i32;       // scope 0 at $DIR/const_prop_miscompile.rs:5:17: 5:21\n           StorageLive(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:6:6: 6:14\n           _2 = &mut (_1.0: i32);           // scope 1 at $DIR/const_prop_miscompile.rs:6:6: 6:14"}, {"sha": "69de05b309f84b713ce5b9ffded2a83e05ecc549", "filename": "src/test/mir-opt/deaggregator_test.bar.Deaggregator.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.bar.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.bar.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.bar.Deaggregator.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -10,6 +10,7 @@\n           StorageLive(_2);                 // scope 0 at $DIR/deaggregator_test.rs:9:14: 9:15\n           _2 = _1;                         // scope 0 at $DIR/deaggregator_test.rs:9:14: 9:15\n -         _0 = Baz { x: move _2, y: const 0f32, z: const false }; // scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n++         Deinit(_0);                      // scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n +         (_0.0: usize) = move _2;         // scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n +         (_0.1: f32) = const 0f32;        // scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n +         (_0.2: bool) = const false;      // scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35"}, {"sha": "b28f506a694c9653dbe8d6f7808055451aaff054", "filename": "src/test/mir-opt/deaggregator_test_enum.bar.Deaggregator.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum.bar.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum.bar.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum.bar.Deaggregator.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -10,6 +10,7 @@\n           StorageLive(_2);                 // scope 0 at $DIR/deaggregator_test_enum.rs:8:19: 8:20\n           _2 = _1;                         // scope 0 at $DIR/deaggregator_test_enum.rs:8:19: 8:20\n -         _0 = Baz::Foo { x: move _2 };    // scope 0 at $DIR/deaggregator_test_enum.rs:8:5: 8:22\n++         Deinit(_0);                      // scope 0 at $DIR/deaggregator_test_enum.rs:8:5: 8:22\n +         ((_0 as Foo).0: usize) = move _2; // scope 0 at $DIR/deaggregator_test_enum.rs:8:5: 8:22\n +         discriminant(_0) = 1;            // scope 0 at $DIR/deaggregator_test_enum.rs:8:5: 8:22\n           StorageDead(_2);                 // scope 0 at $DIR/deaggregator_test_enum.rs:8:21: 8:22"}, {"sha": "5cfcef849e9db84508f515ff2c565ca5b515235f", "filename": "src/test/mir-opt/deaggregator_test_enum_2.test1.Deaggregator.diff", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.test1.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.test1.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.test1.Deaggregator.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -19,6 +19,7 @@\n           StorageLive(_4);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:16: 11:17\n           _4 = _2;                         // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:16: 11:17\n -         _0 = Foo::A(move _4);            // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n++         Deinit(_0);                      // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n +         ((_0 as A).0: i32) = move _4;    // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n +         discriminant(_0) = 0;            // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n           StorageDead(_4);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:17: 11:18\n@@ -29,6 +30,7 @@\n           StorageLive(_5);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:16: 13:17\n           _5 = _2;                         // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:16: 13:17\n -         _0 = Foo::B(move _5);            // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n++         Deinit(_0);                      // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n +         ((_0 as B).0: i32) = move _5;    // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n +         discriminant(_0) = 1;            // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n           StorageDead(_5);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:17: 13:18"}, {"sha": "c346f551a1ab8878f2381e5b574078692f1572bc", "filename": "src/test/mir-opt/deaggregator_test_multiple.test.Deaggregator.diff", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.test.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.test.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.test.Deaggregator.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -14,13 +14,15 @@\n           StorageLive(_3);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:10:13: 10:14\n           _3 = _1;                         // scope 0 at $DIR/deaggregator_test_multiple.rs:10:13: 10:14\n -         _2 = Foo::A(move _3);            // scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n++         Deinit(_2);                      // scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n +         ((_2 as A).0: i32) = move _3;    // scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n +         discriminant(_2) = 0;            // scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n           StorageDead(_3);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:10:14: 10:15\n           StorageLive(_4);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n           StorageLive(_5);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:10:24: 10:25\n           _5 = _1;                         // scope 0 at $DIR/deaggregator_test_multiple.rs:10:24: 10:25\n -         _4 = Foo::A(move _5);            // scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n++         Deinit(_4);                      // scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n +         ((_4 as A).0: i32) = move _5;    // scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n +         discriminant(_4) = 0;            // scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n           StorageDead(_5);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:10:25: 10:26"}, {"sha": "d58e4eb838d1b34ac2edea296a2ea1cc6ebf9b22", "filename": "src/test/mir-opt/derefer_test.main.Derefer.diff", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fderefer_test.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fderefer_test.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_test.main.Derefer.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -25,11 +25,13 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/derefer_test.rs:3:9: 3:14\n+          Deinit(_1);                      // scope 0 at $DIR/derefer_test.rs:3:17: 3:24\n           (_1.0: i32) = const 42_i32;      // scope 0 at $DIR/derefer_test.rs:3:17: 3:24\n           (_1.1: i32) = const 43_i32;      // scope 0 at $DIR/derefer_test.rs:3:17: 3:24\n           StorageLive(_2);                 // scope 1 at $DIR/derefer_test.rs:4:9: 4:14\n           StorageLive(_3);                 // scope 1 at $DIR/derefer_test.rs:4:22: 4:28\n           _3 = &mut _1;                    // scope 1 at $DIR/derefer_test.rs:4:22: 4:28\n+          Deinit(_2);                      // scope 1 at $DIR/derefer_test.rs:4:17: 4:29\n           (_2.0: i32) = const 99_i32;      // scope 1 at $DIR/derefer_test.rs:4:17: 4:29\n           (_2.1: &mut (i32, i32)) = move _3; // scope 1 at $DIR/derefer_test.rs:4:17: 4:29\n           StorageDead(_3);                 // scope 1 at $DIR/derefer_test.rs:4:28: 4:29"}, {"sha": "db24f71c75045fc7995c354a11bb1770f5e08e35", "filename": "src/test/mir-opt/derefer_test_multiple.main.Derefer.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fderefer_test_multiple.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fderefer_test_multiple.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_test_multiple.main.Derefer.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -39,23 +39,27 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/derefer_test_multiple.rs:3:9: 3:14\n+          Deinit(_1);                      // scope 0 at $DIR/derefer_test_multiple.rs:3:17: 3:25\n           (_1.0: i32) = const 42_i32;      // scope 0 at $DIR/derefer_test_multiple.rs:3:17: 3:25\n           (_1.1: i32) = const 43_i32;      // scope 0 at $DIR/derefer_test_multiple.rs:3:17: 3:25\n           StorageLive(_2);                 // scope 1 at $DIR/derefer_test_multiple.rs:4:9: 4:14\n           StorageLive(_3);                 // scope 1 at $DIR/derefer_test_multiple.rs:4:22: 4:28\n           _3 = &mut _1;                    // scope 1 at $DIR/derefer_test_multiple.rs:4:22: 4:28\n+          Deinit(_2);                      // scope 1 at $DIR/derefer_test_multiple.rs:4:17: 4:29\n           (_2.0: i32) = const 99_i32;      // scope 1 at $DIR/derefer_test_multiple.rs:4:17: 4:29\n           (_2.1: &mut (i32, i32)) = move _3; // scope 1 at $DIR/derefer_test_multiple.rs:4:17: 4:29\n           StorageDead(_3);                 // scope 1 at $DIR/derefer_test_multiple.rs:4:28: 4:29\n           StorageLive(_4);                 // scope 2 at $DIR/derefer_test_multiple.rs:5:9: 5:14\n           StorageLive(_5);                 // scope 2 at $DIR/derefer_test_multiple.rs:5:22: 5:28\n           _5 = &mut _2;                    // scope 2 at $DIR/derefer_test_multiple.rs:5:22: 5:28\n+          Deinit(_4);                      // scope 2 at $DIR/derefer_test_multiple.rs:5:17: 5:29\n           (_4.0: i32) = const 11_i32;      // scope 2 at $DIR/derefer_test_multiple.rs:5:17: 5:29\n           (_4.1: &mut (i32, &mut (i32, i32))) = move _5; // scope 2 at $DIR/derefer_test_multiple.rs:5:17: 5:29\n           StorageDead(_5);                 // scope 2 at $DIR/derefer_test_multiple.rs:5:28: 5:29\n           StorageLive(_6);                 // scope 3 at $DIR/derefer_test_multiple.rs:6:9: 6:14\n           StorageLive(_7);                 // scope 3 at $DIR/derefer_test_multiple.rs:6:22: 6:28\n           _7 = &mut _4;                    // scope 3 at $DIR/derefer_test_multiple.rs:6:22: 6:28\n+          Deinit(_6);                      // scope 3 at $DIR/derefer_test_multiple.rs:6:17: 6:29\n           (_6.0: i32) = const 13_i32;      // scope 3 at $DIR/derefer_test_multiple.rs:6:17: 6:29\n           (_6.1: &mut (i32, &mut (i32, &mut (i32, i32)))) = move _7; // scope 3 at $DIR/derefer_test_multiple.rs:6:17: 6:29\n           StorageDead(_7);                 // scope 3 at $DIR/derefer_test_multiple.rs:6:28: 6:29"}, {"sha": "9330e68b1aa8912eda06287591ea024c2476c12e", "filename": "src/test/mir-opt/dest-prop/union.main.DestinationPropagation.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -29,6 +29,7 @@\n       }\n   \n       bb1: {\n+          Deinit(_1);                      // scope 0 at $DIR/union.rs:13:14: 13:30\n -         (_1.0: u32) = move _2;           // scope 0 at $DIR/union.rs:13:14: 13:30\n -         StorageDead(_2);                 // scope 0 at $DIR/union.rs:13:29: 13:30\n +         nop;                             // scope 0 at $DIR/union.rs:13:14: 13:30"}, {"sha": "e40274dc393401734ba33a5a1a4b2e30c1f142b1", "filename": "src/test/mir-opt/early_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -25,6 +25,7 @@\n           _4 = _1;                         // scope 0 at $DIR/early_otherwise_branch.rs:4:12: 4:13\n           StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:4:15: 4:16\n           _5 = _2;                         // scope 0 at $DIR/early_otherwise_branch.rs:4:15: 4:16\n+          Deinit(_3);                      // scope 0 at $DIR/early_otherwise_branch.rs:4:11: 4:17\n           (_3.0: std::option::Option<u32>) = move _4; // scope 0 at $DIR/early_otherwise_branch.rs:4:11: 4:17\n           (_3.1: std::option::Option<u32>) = move _5; // scope 0 at $DIR/early_otherwise_branch.rs:4:11: 4:17\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:4:16: 4:17"}, {"sha": "4f2b9696f8c821ccab2bfe4a5ff7deced7841d8f", "filename": "src/test/mir-opt/early_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -26,6 +26,7 @@\n           _4 = _1;                         // scope 0 at $DIR/early_otherwise_branch.rs:12:12: 12:13\n           StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:12:15: 12:16\n           _5 = _2;                         // scope 0 at $DIR/early_otherwise_branch.rs:12:15: 12:16\n+          Deinit(_3);                      // scope 0 at $DIR/early_otherwise_branch.rs:12:11: 12:17\n           (_3.0: std::option::Option<u32>) = move _4; // scope 0 at $DIR/early_otherwise_branch.rs:12:11: 12:17\n           (_3.1: std::option::Option<u32>) = move _5; // scope 0 at $DIR/early_otherwise_branch.rs:12:11: 12:17\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:12:16: 12:17"}, {"sha": "96c7e46853f145d994797691c16b078868156316", "filename": "src/test/mir-opt/early_otherwise_branch.opt3.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt3.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt3.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt3.EarlyOtherwiseBranch.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -25,6 +25,7 @@\n           _4 = _1;                         // scope 0 at $DIR/early_otherwise_branch.rs:22:12: 22:13\n           StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:22:15: 22:16\n           _5 = _2;                         // scope 0 at $DIR/early_otherwise_branch.rs:22:15: 22:16\n+          Deinit(_3);                      // scope 0 at $DIR/early_otherwise_branch.rs:22:11: 22:17\n           (_3.0: std::option::Option<u32>) = move _4; // scope 0 at $DIR/early_otherwise_branch.rs:22:11: 22:17\n           (_3.1: std::option::Option<bool>) = move _5; // scope 0 at $DIR/early_otherwise_branch.rs:22:11: 22:17\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:22:16: 22:17"}, {"sha": "379d0e9ea48b38ff83254fe909f836fa8a0c1e46", "filename": "src/test/mir-opt/early_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -34,6 +34,7 @@\n           _6 = _2;                         // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:15: 5:16\n           StorageLive(_7);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:18: 5:19\n           _7 = _3;                         // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:18: 5:19\n+          Deinit(_4);                      // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:11: 5:20\n           (_4.0: std::option::Option<u32>) = move _5; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:11: 5:20\n           (_4.1: std::option::Option<u32>) = move _6; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:11: 5:20\n           (_4.2: std::option::Option<u32>) = move _7; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:11: 5:20"}, {"sha": "592388e69a913c98cfbe984afccd57085d99522e", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -74,6 +74,7 @@\n +         (_4.0: &ViewportPercentageLength) = _1; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n           StorageLive(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:18: 21:23\n           _6 = _2;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:18: 21:23\n+          Deinit(_4);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n -         (_4.0: &ViewportPercentageLength) = move _5; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           (_4.1: &ViewportPercentageLength) = move _6; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n@@ -98,6 +99,8 @@\n -     bb2: {\n +         StorageDead(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:25: 26:27\n           StorageLive(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:25: 26:27\n+-         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:25: 26:27\n+          Deinit(_0);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:21: 26:28\n -         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:21: 26:28\n           discriminant(_0) = 1;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:21: 26:28\n           StorageDead(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:27: 26:28\n@@ -121,6 +124,7 @@\n +         ((((_0 as Ok).0: ViewportPercentageLength) as Vw).0: f32) = Add(move _15, move _16); // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:49\n +         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:48: 22:49\n +         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:48: 22:49\n++         Deinit(((_0 as Ok).0: ViewportPercentageLength)); // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n +         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n +         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 0; // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n +         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n@@ -144,6 +148,7 @@\n +         ((((_0 as Ok).0: ViewportPercentageLength) as Vh).0: f32) = Add(move _20, move _21); // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n +         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n +         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n++         Deinit(((_0 as Ok).0: ViewportPercentageLength)); // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n +         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n +         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 1; // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n +         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n@@ -167,6 +172,7 @@\n +         ((((_0 as Ok).0: ViewportPercentageLength) as Vmin).0: f32) = Add(move _25, move _26); // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:55\n +         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:54: 24:55\n +         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:54: 24:55\n++         Deinit(((_0 as Ok).0: ViewportPercentageLength)); // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n +         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n +         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 2; // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n +         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n@@ -190,6 +196,7 @@\n +         ((((_0 as Ok).0: ViewportPercentageLength) as Vmax).0: f32) = Add(move _30, move _31); // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n +         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n +         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n++         Deinit(((_0 as Ok).0: ViewportPercentageLength)); // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n +         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n +         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 3; // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n +         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n@@ -211,6 +218,7 @@\n -         _14 = Add(move _15, move _16);   // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:49\n -         StorageDead(_16);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:48: 22:49\n -         StorageDead(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:48: 22:49\n+-         Deinit(_3);                      // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n -         ((_3 as Vw).0: f32) = move _14;  // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n -         discriminant(_3) = 0;            // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n -         StorageDead(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n@@ -232,6 +240,7 @@\n -         _19 = Add(move _20, move _21);   // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n -         StorageDead(_21);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n -         StorageDead(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n+-         Deinit(_3);                      // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n -         ((_3 as Vh).0: f32) = move _19;  // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n -         discriminant(_3) = 1;            // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n -         StorageDead(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n@@ -253,6 +262,7 @@\n -         _24 = Add(move _25, move _26);   // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:55\n -         StorageDead(_26);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:54: 24:55\n -         StorageDead(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:54: 24:55\n+-         Deinit(_3);                      // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n -         ((_3 as Vmin).0: f32) = move _24; // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n -         discriminant(_3) = 2;            // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n -         StorageDead(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n@@ -274,6 +284,7 @@\n -         _29 = Add(move _30, move _31);   // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n -         StorageDead(_31);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n -         StorageDead(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n+-         Deinit(_3);                      // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n -         ((_3 as Vmax).0: f32) = move _29; // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n -         discriminant(_3) = 3;            // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n -         StorageDead(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n@@ -283,6 +294,7 @@\n -     }\n - \n -     bb10: {\n+          Deinit(_0);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n -         ((_0 as Ok).0: ViewportPercentageLength) = move _3; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n           discriminant(_0) = 0;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7"}, {"sha": "4cd34ba38ba96cc3661faa308f57932ce325165f", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -62,6 +62,7 @@\n           _5 = _1;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n           StorageLive(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:18: 21:23\n           _6 = _2;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:18: 21:23\n+          Deinit(_4);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           (_4.0: &ViewportPercentageLength) = move _5; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           (_4.1: &ViewportPercentageLength) = move _6; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n@@ -84,6 +85,8 @@\n -     bb2: {\n +         StorageDead(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:25: 26:27\n           StorageLive(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:25: 26:27\n+-         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:25: 26:27\n+          Deinit(_0);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:21: 26:28\n -         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:21: 26:28\n           discriminant(_0) = 1;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:21: 26:28\n           StorageDead(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:27: 26:28\n@@ -121,6 +124,7 @@\n           _14 = Add(move _15, move _16);   // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:49\n           StorageDead(_16);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:48: 22:49\n           StorageDead(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:48: 22:49\n+          Deinit(_3);                      // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n           ((_3 as Vw).0: f32) = move _14;  // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n           discriminant(_3) = 0;            // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n           StorageDead(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n@@ -144,6 +148,7 @@\n           _19 = Add(move _20, move _21);   // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n           StorageDead(_21);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n           StorageDead(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n+          Deinit(_3);                      // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n           ((_3 as Vh).0: f32) = move _19;  // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n           discriminant(_3) = 1;            // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n           StorageDead(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n@@ -167,6 +172,7 @@\n           _24 = Add(move _25, move _26);   // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:55\n           StorageDead(_26);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:54: 24:55\n           StorageDead(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:54: 24:55\n+          Deinit(_3);                      // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n           ((_3 as Vmin).0: f32) = move _24; // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n           discriminant(_3) = 2;            // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n           StorageDead(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n@@ -190,6 +196,7 @@\n           _29 = Add(move _30, move _31);   // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n           StorageDead(_31);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n           StorageDead(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n+          Deinit(_3);                      // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n           ((_3 as Vmax).0: f32) = move _29; // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n           discriminant(_3) = 3;            // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n           StorageDead(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n@@ -201,6 +208,7 @@\n   \n -     bb10: {\n +     bb6: {\n+          Deinit(_0);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n           ((_0 as Ok).0: ViewportPercentageLength) = move _3; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n           discriminant(_0) = 0;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n           StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:6: 27:7"}, {"sha": "6adc5194aec75963419fd915aab8a3e133f4f454", "filename": "src/test/mir-opt/early_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -32,6 +32,7 @@\n           _4 = _1;                         // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:12: 8:13\n           StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:15: 8:16\n           _5 = _2;                         // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:15: 8:16\n+          Deinit(_3);                      // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n           (_3.0: std::option::Option<u32>) = move _4; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n           (_3.1: std::option::Option<u32>) = move _5; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:16: 8:17"}, {"sha": "f22fbec03d000ffc5283840d1137b5f2000b73ac", "filename": "src/test/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -51,11 +51,13 @@\n       }\n   \n       bb2: {\n+          Deinit(_6);                      // scope 1 at $DIR/funky_arms.rs:21:17: 21:41\n           discriminant(_6) = 1;            // scope 1 at $DIR/funky_arms.rs:21:17: 21:41\n           goto -> bb4;                     // scope 1 at $DIR/funky_arms.rs:21:17: 21:41\n       }\n   \n       bb3: {\n+          Deinit(_6);                      // scope 1 at $DIR/funky_arms.rs:20:18: 20:38\n           discriminant(_6) = 0;            // scope 1 at $DIR/funky_arms.rs:20:18: 20:38\n           goto -> bb4;                     // scope 1 at $DIR/funky_arms.rs:20:18: 20:38\n       }"}, {"sha": "739492d7d249f0ee48be466807c70d2608945203", "filename": "src/test/mir-opt/generator_storage_dead_unwind.main-{closure#0}.StateTransform.before.mir", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -21,11 +21,14 @@ yields ()\n \n     bb0: {\n         StorageLive(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:23:13: 23:14\n+        Deinit(_3);                      // scope 0 at $DIR/generator-storage-dead-unwind.rs:23:17: 23:23\n         (_3.0: i32) = const 5_i32;       // scope 0 at $DIR/generator-storage-dead-unwind.rs:23:17: 23:23\n         StorageLive(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:24:13: 24:14\n+        Deinit(_4);                      // scope 1 at $DIR/generator-storage-dead-unwind.rs:24:17: 24:23\n         (_4.0: i32) = const 6_i32;       // scope 1 at $DIR/generator-storage-dead-unwind.rs:24:17: 24:23\n         StorageLive(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n         StorageLive(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n+        Deinit(_6);                      // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n         _5 = yield(move _6) -> [resume: bb1, drop: bb5]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n     }\n "}, {"sha": "7f5ebe2a59b55a24151860fdcc3d43dec709d014", "filename": "src/test/mir-opt/generator_tiny.main-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -1,13 +1,17 @@\n // MIR for `main::{closure#0}` 0 generator_resume\n /* generator_layout = GeneratorLayout {\n-    field_tys: {},\n+    field_tys: {\n+        _0: HasDrop,\n+    },\n     variant_fields: {\n         Unresumed(0): [],\n         Returned (1): [],\n         Panicked (2): [],\n-        Suspend0 (3): [],\n+        Suspend0 (3): [_0],\n+    },\n+    storage_conflicts: BitMatrix(1x1) {\n+        (_0, _0),\n     },\n-    storage_conflicts: BitMatrix(0x0) {},\n } */\n \n fn main::{closure#0}(_1: Pin<&mut [generator@$DIR/generator-tiny.rs:19:16: 25:6]>, _2: u8) -> GeneratorState<(), ()> {\n@@ -23,7 +27,7 @@ fn main::{closure#0}(_1: Pin<&mut [generator@$DIR/generator-tiny.rs:19:16: 25:6]\n     let _10: u8;                         // in scope 0 at $DIR/generator-tiny.rs:19:17: 19:19\n     let mut _11: u32;                    // in scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n     scope 1 {\n-        debug _d => _3;                  // in scope 1 at $DIR/generator-tiny.rs:20:13: 20:15\n+        debug _d => (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 25:6])) as variant#3).0: HasDrop); // in scope 1 at $DIR/generator-tiny.rs:20:13: 20:15\n     }\n \n     bb0: {\n@@ -33,14 +37,17 @@ fn main::{closure#0}(_1: Pin<&mut [generator@$DIR/generator-tiny.rs:19:16: 25:6]\n \n     bb1: {\n         _10 = move _2;                   // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n-        StorageLive(_3);                 // scope 0 at $DIR/generator-tiny.rs:20:13: 20:15\n+        nop;                             // scope 0 at $DIR/generator-tiny.rs:20:13: 20:15\n+        Deinit((((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 25:6])) as variant#3).0: HasDrop)); // scope 0 at $DIR/generator-tiny.rs:20:18: 20:25\n         StorageLive(_4);                 // scope 1 at $DIR/generator-tiny.rs:21:9: 24:10\n         goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:21:9: 24:10\n     }\n \n     bb2: {\n         StorageLive(_6);                 // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n         StorageLive(_7);                 // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n+        Deinit(_7);                      // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n+        Deinit(_0);                      // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n         ((_0 as Yielded).0: ()) = move _7; // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n         discriminant(_0) = 0;            // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n         discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 25:6]))) = 3; // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n@@ -64,7 +71,6 @@ fn main::{closure#0}(_1: Pin<&mut [generator@$DIR/generator-tiny.rs:19:16: 25:6]\n     }\n \n     bb5: {\n-        StorageLive(_3);                 // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n         StorageLive(_4);                 // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n         StorageLive(_6);                 // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n         StorageLive(_7);                 // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6"}, {"sha": "d42b8397c505e6ec6669d7849e27ce8cb2a40366", "filename": "src/test/mir-opt/inline/cycle.f.Inline.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.f.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.f.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.f.Inline.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -13,6 +13,7 @@\n           StorageLive(_3);                 // scope 0 at $DIR/cycle.rs:6:5: 6:6\n           _3 = &_1;                        // scope 0 at $DIR/cycle.rs:6:5: 6:6\n           StorageLive(_4);                 // scope 0 at $DIR/cycle.rs:6:5: 6:8\n+          Deinit(_4);                      // scope 0 at $DIR/cycle.rs:6:5: 6:8\n           _2 = <impl Fn() as Fn<()>>::call(move _3, move _4) -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/cycle.rs:6:5: 6:8\n                                            // mir::Constant\n                                            // + span: $DIR/cycle.rs:6:5: 6:6"}, {"sha": "4d6cdafd12deab4a5f9f0247f0a48fadfbada1d5", "filename": "src/test/mir-opt/inline/inline_closure.foo.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -21,13 +21,15 @@ fn foo(_1: T, _2: i32) -> i32 {\n \n     bb0: {\n         StorageLive(_3);                 // scope 0 at $DIR/inline-closure.rs:11:9: 11:10\n+        Deinit(_3);                      // scope 0 at $DIR/inline-closure.rs:11:13: 11:24\n         StorageLive(_4);                 // scope 1 at $DIR/inline-closure.rs:12:5: 12:6\n         _4 = &_3;                        // scope 1 at $DIR/inline-closure.rs:12:5: 12:6\n         StorageLive(_5);                 // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n         StorageLive(_6);                 // scope 1 at $DIR/inline-closure.rs:12:7: 12:8\n         _6 = _2;                         // scope 1 at $DIR/inline-closure.rs:12:7: 12:8\n         StorageLive(_7);                 // scope 1 at $DIR/inline-closure.rs:12:10: 12:11\n         _7 = _2;                         // scope 1 at $DIR/inline-closure.rs:12:10: 12:11\n+        Deinit(_5);                      // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n         (_5.0: i32) = move _6;           // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n         (_5.1: i32) = move _7;           // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n         StorageLive(_8);                 // scope 1 at $DIR/inline-closure.rs:12:5: 12:12"}, {"sha": "45281302f9291483d3a4015cb25a56e5fdf3f6a9", "filename": "src/test/mir-opt/inline/inline_closure_borrows_arg.foo.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -25,13 +25,15 @@ fn foo(_1: T, _2: &i32) -> i32 {\n \n     bb0: {\n         StorageLive(_3);                 // scope 0 at $DIR/inline-closure-borrows-arg.rs:12:9: 12:10\n+        Deinit(_3);                      // scope 0 at $DIR/inline-closure-borrows-arg.rs:12:13: 15:6\n         StorageLive(_4);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:6\n         _4 = &_3;                        // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:6\n         StorageLive(_5);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         StorageLive(_6);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:7: 16:8\n         _6 = &(*_2);                     // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:7: 16:8\n         StorageLive(_7);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:10: 16:11\n         _7 = &(*_2);                     // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:10: 16:11\n+        Deinit(_5);                      // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         (_5.0: &i32) = move _6;          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         (_5.1: &i32) = move _7;          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         StorageLive(_8);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12"}, {"sha": "337f0871843ea150ae37496421ab5824f8fe6152", "filename": "src/test/mir-opt/inline/inline_closure_captures.foo.Inline.after.mir", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -28,6 +28,7 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n         _4 = &_2;                        // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n         StorageLive(_5);                 // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n         _5 = &_1;                        // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n+        Deinit(_3);                      // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n         (_3.0: &i32) = move _4;          // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n         (_3.1: &T) = move _5;            // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n         StorageDead(_5);                 // scope 0 at $DIR/inline-closure-captures.rs:11:23: 11:24\n@@ -37,13 +38,15 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n         StorageLive(_7);                 // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         StorageLive(_8);                 // scope 1 at $DIR/inline-closure-captures.rs:12:7: 12:8\n         _8 = _2;                         // scope 1 at $DIR/inline-closure-captures.rs:12:7: 12:8\n+        Deinit(_7);                      // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         (_7.0: i32) = move _8;           // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         StorageLive(_9);                 // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         _9 = move (_7.0: i32);           // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         StorageLive(_10);                // scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n         _10 = (*((*_6).0: &i32));        // scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n         StorageLive(_11);                // scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n         _11 = (*((*_6).1: &T));          // scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n+        Deinit(_0);                      // scope 2 at $DIR/inline-closure-captures.rs:11:18: 11:24\n         (_0.0: i32) = move _10;          // scope 2 at $DIR/inline-closure-captures.rs:11:18: 11:24\n         (_0.1: T) = move _11;            // scope 2 at $DIR/inline-closure-captures.rs:11:18: 11:24\n         StorageDead(_11);                // scope 2 at $DIR/inline-closure-captures.rs:11:23: 11:24"}, {"sha": "48432c1ddd8a398707985bab78966820dabc9216", "filename": "src/test/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -44,6 +44,7 @@\n -     }\n - \n -     bb1: {\n++         Deinit(_4);                      // scope 2 at $DIR/inline-generator.rs:15:5: 15:41\n +         discriminant(_4) = 0;            // scope 2 at $DIR/inline-generator.rs:15:5: 15:41\n           _3 = &mut _4;                    // scope 0 at $DIR/inline-generator.rs:9:23: 9:31\n -         _2 = Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:41]>::new(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:9:14: 9:32\n@@ -58,6 +59,7 @@\n +         _5 = move _3;                    // scope 4 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         StorageLive(_6);                 // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         _6 = move _5;                    // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n++         Deinit(_2);                      // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]) = move _6; // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         StorageDead(_6);                 // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         StorageDead(_5);                 // scope 4 at $SRC_DIR/core/src/pin.rs:LL:COL\n@@ -113,6 +115,7 @@\n + \n +     bb6: {\n +         StorageDead(_9);                 // scope 6 at $DIR/inline-generator.rs:15:38: 15:39\n++         Deinit(_1);                      // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n +         ((_1 as Yielded).0: i32) = move _8; // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n +         discriminant(_1) = 0;            // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n +         discriminant((*(_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]))) = 3; // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n@@ -123,6 +126,7 @@\n +         StorageLive(_8);                 // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n +         _10 = move _7;                   // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n +         StorageDead(_8);                 // scope 6 at $DIR/inline-generator.rs:15:38: 15:39\n++         Deinit(_1);                      // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n +         ((_1 as Complete).0: bool) = move _10; // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n +         discriminant(_1) = 1;            // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n +         discriminant((*(_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]))) = 1; // scope 6 at $DIR/inline-generator.rs:15:41: 15:41"}, {"sha": "072ab5e8df4f7cbe63794cc8369e9087c20aca02", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.32bit.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -34,6 +34,7 @@\n -         (*_5) = Vec::<u32>::new() -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         StorageLive(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _7 = &mut (*_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         Deinit((*_7));                   // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         ((*_7).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41"}, {"sha": "8b8a741ec12da6a51a3a676b08b3efcf2a027565", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.64bit.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -34,6 +34,7 @@\n -         (*_5) = Vec::<u32>::new() -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         StorageLive(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _7 = &mut (*_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         Deinit((*_7));                   // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         ((*_7).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41"}, {"sha": "b9ddbacc0e75be7f4f5fe345766b3c812593e3b2", "filename": "src/test/mir-opt/inline/issue_76997_inline_scopes_parenting.main.Inline.after.mir", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -20,10 +20,13 @@ fn main() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/issue-76997-inline-scopes-parenting.rs:5:9: 5:10\n+        Deinit(_1);                      // scope 0 at $DIR/issue-76997-inline-scopes-parenting.rs:5:13: 5:33\n         StorageLive(_2);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:6\n         _2 = &_1;                        // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:6\n         StorageLive(_3);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n         StorageLive(_4);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:7: 6:9\n+        Deinit(_4);                      // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:7: 6:9\n+        Deinit(_3);                      // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n         (_3.0: ()) = move _4;            // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n         StorageLive(_5);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n         _5 = move (_3.0: ());            // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10"}, {"sha": "b44f9900d6c6a04f6453e631f09fe7bb507bfb82", "filename": "src/test/mir-opt/inline/issue_78442.bar.Inline.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -25,6 +25,7 @@\n       bb1: {\n           _3 = &_4;                        // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n           StorageLive(_5);                 // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n+          Deinit(_5);                      // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n -         _2 = <fn() {foo} as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n -                                          // mir::Constant\n -                                          // + span: $DIR/issue-78442.rs:11:5: 11:15"}, {"sha": "8a998fb50006c0243933102dd4810a7f0653965c", "filename": "src/test/mir-opt/inline/issue_78442.bar.RevealAll.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -24,7 +24,7 @@\n       bb1: {\n           _3 = &_4;                        // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n           StorageLive(_5);                 // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n-          nop;                             // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n+          Deinit(_5);                      // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n -         _2 = <impl Fn() as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n +         _2 = <fn() {foo} as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n                                            // mir::Constant"}, {"sha": "288250e8afd2bcb5df01e9639e1ae3430d6d9d69", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.32bit.diff", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -43,6 +43,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n           StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          Deinit(_2);                      // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           StorageLive(_3);                 // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n@@ -53,6 +54,7 @@\n           StorageLive(_4);                 // scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n           StorageLive(_5);                 // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n           _5 = _1;                         // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          Deinit(_4);                      // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n           ((_4 as Some).0: i32) = move _5; // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n           discriminant(_4) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n           StorageDead(_5);                 // scope 1 at $DIR/issue-73223.rs:7:27: 7:28\n@@ -65,6 +67,7 @@\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n           _8 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_6);                      // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.0: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.1: &i32) = move _8;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -86,6 +89,7 @@\n   \n       bb1: {\n           StorageLive(_14);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_14);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           discriminant(_14) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_15);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_16);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -96,6 +100,7 @@\n           _18 = _10;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _17 = _18;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_19);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_19);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           discriminant(_19) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _15, move _17, move _19); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant"}, {"sha": "288250e8afd2bcb5df01e9639e1ae3430d6d9d69", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -43,6 +43,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n           StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          Deinit(_2);                      // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           StorageLive(_3);                 // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n@@ -53,6 +54,7 @@\n           StorageLive(_4);                 // scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n           StorageLive(_5);                 // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n           _5 = _1;                         // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          Deinit(_4);                      // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n           ((_4 as Some).0: i32) = move _5; // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n           discriminant(_4) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n           StorageDead(_5);                 // scope 1 at $DIR/issue-73223.rs:7:27: 7:28\n@@ -65,6 +67,7 @@\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n           _8 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_6);                      // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.0: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.1: &i32) = move _8;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -86,6 +89,7 @@\n   \n       bb1: {\n           StorageLive(_14);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_14);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           discriminant(_14) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_15);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_16);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -96,6 +100,7 @@\n           _18 = _10;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _17 = _18;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_19);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_19);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           discriminant(_19) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _15, move _17, move _19); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant"}, {"sha": "89c7154ae00279c5af426cfe0e97417de11af953", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -51,6 +51,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n           StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          Deinit(_2);                      // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           _3 = const 1_isize;              // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n@@ -73,6 +74,7 @@\n           StorageLive(_6);                 // scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n           StorageLive(_7);                 // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n           _7 = _1;                         // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          Deinit(_6);                      // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n           ((_6 as Some).0: i32) = move _7; // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n           discriminant(_6) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n           StorageDead(_7);                 // scope 1 at $DIR/issue-73223.rs:7:27: 7:28\n@@ -86,6 +88,7 @@\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n           _11 = _28;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_9);                      // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_11);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -110,6 +113,7 @@\n   \n       bb3: {\n           StorageLive(_20);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_20);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           discriminant(_20) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_21);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_22);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -126,6 +130,7 @@\n           _26 = _14;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _25 = _26;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_27);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_27);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           discriminant(_27) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _23, move _25, move _27); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant"}, {"sha": "89c7154ae00279c5af426cfe0e97417de11af953", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -51,6 +51,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n           StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          Deinit(_2);                      // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           _3 = const 1_isize;              // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n@@ -73,6 +74,7 @@\n           StorageLive(_6);                 // scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n           StorageLive(_7);                 // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n           _7 = _1;                         // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          Deinit(_6);                      // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n           ((_6 as Some).0: i32) = move _7; // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n           discriminant(_6) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n           StorageDead(_7);                 // scope 1 at $DIR/issue-73223.rs:7:27: 7:28\n@@ -86,6 +88,7 @@\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n           _11 = _28;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_9);                      // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_11);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -110,6 +113,7 @@\n   \n       bb3: {\n           StorageLive(_20);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_20);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           discriminant(_20) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_21);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_22);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -126,6 +130,7 @@\n           _26 = _14;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _25 = _26;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_27);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_27);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           discriminant(_27) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _23, move _25, move _27); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant"}, {"sha": "299529ec649d8ad35bd49edff7fe0febc2e07e11", "filename": "src/test/mir-opt/issues/issue_75439.foo.MatchBranchSimplification.diff", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -67,6 +67,7 @@\n   \n       bb7: {\n           StorageDead(_6);                 // scope 4 at $DIR/issue-75439.rs:10:35: 10:36\n+          Deinit(_0);                      // scope 1 at $DIR/issue-75439.rs:10:9: 10:39\n           ((_0 as Some).0: [u8; 4]) = move _5; // scope 1 at $DIR/issue-75439.rs:10:9: 10:39\n           discriminant(_0) = 1;            // scope 1 at $DIR/issue-75439.rs:10:9: 10:39\n           StorageDead(_5);                 // scope 1 at $DIR/issue-75439.rs:10:38: 10:39\n@@ -75,6 +76,7 @@\n       }\n   \n       bb8: {\n+          Deinit(_0);                      // scope 1 at $DIR/issue-75439.rs:12:9: 12:13\n           discriminant(_0) = 0;            // scope 1 at $DIR/issue-75439.rs:12:9: 12:13\n           goto -> bb9;                     // scope 1 at $DIR/issue-75439.rs:9:5: 13:6\n       }"}, {"sha": "e63148a8312daa4c1629aff285cd1ec739ffd4e2", "filename": "src/test/mir-opt/matches_reduce_branches.bar.MatchBranchSimplification.32bit.diff", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.32bit.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -41,6 +41,7 @@\n -         _3 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:29:13: 29:22\n -         _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:30:13: 30:22\n -         _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:31:13: 31:21\n+-         nop;                             // scope 4 at $DIR/matches_reduce_branches.rs:32:13: 32:15\n -         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:32:13: 32:15\n -     }\n - \n@@ -53,6 +54,7 @@\n +         _3 = Eq(_11, const 7_i32);       // scope 4 at $DIR/matches_reduce_branches.rs:22:13: 22:21\n           _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:23:13: 23:22\n           _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:24:13: 24:21\n+-         nop;                             // scope 4 at $DIR/matches_reduce_branches.rs:25:13: 25:15\n -         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:25:13: 25:15\n -     }\n - \n@@ -67,6 +69,7 @@\n           _9 = _4;                         // scope 4 at $DIR/matches_reduce_branches.rs:36:12: 36:13\n           StorageLive(_10);                // scope 4 at $DIR/matches_reduce_branches.rs:36:15: 36:16\n           _10 = _5;                        // scope 4 at $DIR/matches_reduce_branches.rs:36:15: 36:16\n+          Deinit(_0);                      // scope 4 at $DIR/matches_reduce_branches.rs:36:5: 36:17\n           (_0.0: bool) = move _7;          // scope 4 at $DIR/matches_reduce_branches.rs:36:5: 36:17\n           (_0.1: bool) = move _8;          // scope 4 at $DIR/matches_reduce_branches.rs:36:5: 36:17\n           (_0.2: bool) = move _9;          // scope 4 at $DIR/matches_reduce_branches.rs:36:5: 36:17"}, {"sha": "e63148a8312daa4c1629aff285cd1ec739ffd4e2", "filename": "src/test/mir-opt/matches_reduce_branches.bar.MatchBranchSimplification.64bit.diff", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.64bit.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -41,6 +41,7 @@\n -         _3 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:29:13: 29:22\n -         _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:30:13: 30:22\n -         _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:31:13: 31:21\n+-         nop;                             // scope 4 at $DIR/matches_reduce_branches.rs:32:13: 32:15\n -         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:32:13: 32:15\n -     }\n - \n@@ -53,6 +54,7 @@\n +         _3 = Eq(_11, const 7_i32);       // scope 4 at $DIR/matches_reduce_branches.rs:22:13: 22:21\n           _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:23:13: 23:22\n           _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:24:13: 24:21\n+-         nop;                             // scope 4 at $DIR/matches_reduce_branches.rs:25:13: 25:15\n -         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:25:13: 25:15\n -     }\n - \n@@ -67,6 +69,7 @@\n           _9 = _4;                         // scope 4 at $DIR/matches_reduce_branches.rs:36:12: 36:13\n           StorageLive(_10);                // scope 4 at $DIR/matches_reduce_branches.rs:36:15: 36:16\n           _10 = _5;                        // scope 4 at $DIR/matches_reduce_branches.rs:36:15: 36:16\n+          Deinit(_0);                      // scope 4 at $DIR/matches_reduce_branches.rs:36:5: 36:17\n           (_0.0: bool) = move _7;          // scope 4 at $DIR/matches_reduce_branches.rs:36:5: 36:17\n           (_0.1: bool) = move _8;          // scope 4 at $DIR/matches_reduce_branches.rs:36:5: 36:17\n           (_0.2: bool) = move _9;          // scope 4 at $DIR/matches_reduce_branches.rs:36:5: 36:17"}, {"sha": "5131e2f088d3d191755f51a233fe706b577821d2", "filename": "src/test/mir-opt/remove_storage_markers.main.RemoveStorageMarkers.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -38,6 +38,7 @@\n           _1 = const 0_i32;                // scope 0 at $DIR/remove_storage_markers.rs:7:19: 7:20\n -         StorageLive(_2);                 // scope 1 at $DIR/remove_storage_markers.rs:8:14: 8:19\n -         StorageLive(_3);                 // scope 1 at $DIR/remove_storage_markers.rs:8:14: 8:19\n+          Deinit(_3);                      // scope 1 at $DIR/remove_storage_markers.rs:8:14: 8:19\n           (_3.0: i32) = const 0_i32;       // scope 1 at $DIR/remove_storage_markers.rs:8:14: 8:19\n           (_3.1: i32) = const 10_i32;      // scope 1 at $DIR/remove_storage_markers.rs:8:14: 8:19\n           _2 = move _3;                    // scope 4 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL"}, {"sha": "ad8f0acc763a65a1536b2e308f711557d631c61f", "filename": "src/test/mir-opt/remove_zsts_dont_touch_unions.get_union.RemoveZsts.after.mir", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fremove_zsts_dont_touch_unions.get_union.RemoveZsts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fremove_zsts_dont_touch_unions.get_union.RemoveZsts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_zsts_dont_touch_unions.get_union.RemoveZsts.after.mir?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -6,6 +6,8 @@ fn get_union() -> Foo {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/remove_zsts_dont_touch_unions.rs:13:14: 13:16\n+        nop;                             // scope 0 at $DIR/remove_zsts_dont_touch_unions.rs:13:14: 13:16\n+        Deinit(_0);                      // scope 0 at $DIR/remove_zsts_dont_touch_unions.rs:13:5: 13:18\n         (_0.0: ()) = move _1;            // scope 0 at $DIR/remove_zsts_dont_touch_unions.rs:13:5: 13:18\n         StorageDead(_1);                 // scope 0 at $DIR/remove_zsts_dont_touch_unions.rs:13:17: 13:18\n         return;                          // scope 0 at $DIR/remove_zsts_dont_touch_unions.rs:14:2: 14:2"}, {"sha": "4cdbaec7d2a2a0f2c219c24d1e51d493cac836fe", "filename": "src/test/mir-opt/separate_const_switch.identity.ConstProp.diff", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -65,6 +65,7 @@\n           _9 = ((_3 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n           _2 = _9;                         // scope 4 at $DIR/separate_const_switch.rs:29:8: 29:10\n           StorageDead(_9);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n+          Deinit(_0);                      // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11\n           ((_0 as Ok).0: i32) = move _2;   // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11\n           discriminant(_0) = 0;            // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11\n           StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:29:10: 29:11\n@@ -84,6 +85,7 @@\n           _18 = move _16;                  // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n           _17 = move _18;                  // scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n           StorageDead(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          Deinit(_0);                      // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n           ((_0 as Err).0: i32) = move _17; // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n           discriminant(_0) = 1;            // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n@@ -101,9 +103,11 @@\n           StorageLive(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageLive(_15);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           _15 = move _13;                  // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          Deinit(_14);                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           ((_14 as Err).0: i32) = move _15; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           discriminant(_14) = 1;           // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_15);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          Deinit(_3);                      // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>) = move _14; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           discriminant(_3) = 1;            // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n@@ -125,6 +129,7 @@\n           _11 = move ((_4 as Ok).0: i32);  // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n           _12 = move _11;                  // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          Deinit(_3);                      // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n           ((_3 as Continue).0: i32) = move _12; // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n           discriminant(_3) = 0;            // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL"}, {"sha": "f4c526c6b1979265b907b2d21d892734603e1711", "filename": "src/test/mir-opt/separate_const_switch.identity.PreCodegen.after.mir", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.PreCodegen.after.mir?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -63,9 +63,11 @@ fn identity(_1: Result<i32, i32>) -> Result<i32, i32> {\n         StorageLive(_12);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n         StorageLive(_13);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n         _13 = move _11;                  // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        Deinit(_12);                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n         ((_12 as Err).0: i32) = move _13; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n         discriminant(_12) = 1;           // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n         StorageDead(_13);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        Deinit(_3);                      // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n         ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>) = move _12; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n         discriminant(_3) = 1;            // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n         StorageDead(_12);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n@@ -83,6 +85,7 @@ fn identity(_1: Result<i32, i32>) -> Result<i32, i32> {\n         _16 = move _14;                  // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n         _15 = move _16;                  // scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n         StorageDead(_16);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+        Deinit(_0);                      // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n         ((_0 as Err).0: i32) = move _15; // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n         discriminant(_0) = 1;            // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n         StorageDead(_15);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n@@ -103,6 +106,7 @@ fn identity(_1: Result<i32, i32>) -> Result<i32, i32> {\n         _9 = move ((_4 as Ok).0: i32);   // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n         StorageLive(_10);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n         _10 = move _9;                   // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+        Deinit(_3);                      // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n         ((_3 as Continue).0: i32) = move _10; // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n         discriminant(_3) = 0;            // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n         StorageDead(_10);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n@@ -113,6 +117,7 @@ fn identity(_1: Result<i32, i32>) -> Result<i32, i32> {\n         _7 = ((_3 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n         _2 = _7;                         // scope 4 at $DIR/separate_const_switch.rs:29:8: 29:10\n         StorageDead(_7);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n+        Deinit(_0);                      // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11\n         ((_0 as Ok).0: i32) = move _2;   // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11\n         discriminant(_0) = 0;            // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11\n         StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:29:10: 29:11"}, {"sha": "d94967072ba75c1ce4a21e7877c0cf78c88d8986", "filename": "src/test/mir-opt/separate_const_switch.identity.SeparateConstSwitch.diff", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -73,6 +73,7 @@\n           _9 = ((_3 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n           _2 = _9;                         // scope 4 at $DIR/separate_const_switch.rs:29:8: 29:10\n           StorageDead(_9);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n+          Deinit(_0);                      // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11\n           ((_0 as Ok).0: i32) = move _2;   // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11\n           discriminant(_0) = 0;            // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11\n           StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:29:10: 29:11\n@@ -93,6 +94,7 @@\n           _18 = move _16;                  // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n           _17 = move _18;                  // scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n           StorageDead(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          Deinit(_0);                      // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n           ((_0 as Err).0: i32) = move _17; // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n           discriminant(_0) = 1;            // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n@@ -111,9 +113,11 @@\n           StorageLive(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageLive(_15);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           _15 = move _13;                  // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          Deinit(_14);                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           ((_14 as Err).0: i32) = move _15; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           discriminant(_14) = 1;           // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_15);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          Deinit(_3);                      // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>) = move _14; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           discriminant(_3) = 1;            // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n@@ -136,6 +140,7 @@\n           _11 = move ((_4 as Ok).0: i32);  // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n           _12 = move _11;                  // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          Deinit(_3);                      // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n           ((_3 as Continue).0: i32) = move _12; // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n           discriminant(_3) = 0;            // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL"}, {"sha": "ea549a76f5810509a3d5fc8136210d626e54c175", "filename": "src/test/mir-opt/separate_const_switch.too_complex.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.ConstProp.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -38,6 +38,7 @@\n           _6 = ((_1 as Err).0: usize);     // scope 0 at $DIR/separate_const_switch.rs:17:17: 17:18\n           StorageLive(_7);                 // scope 2 at $DIR/separate_const_switch.rs:17:42: 17:43\n           _7 = _6;                         // scope 2 at $DIR/separate_const_switch.rs:17:42: 17:43\n+          Deinit(_2);                      // scope 2 at $DIR/separate_const_switch.rs:17:23: 17:44\n           ((_2 as Break).0: usize) = move _7; // scope 2 at $DIR/separate_const_switch.rs:17:23: 17:44\n           discriminant(_2) = 1;            // scope 2 at $DIR/separate_const_switch.rs:17:23: 17:44\n           StorageDead(_7);                 // scope 2 at $DIR/separate_const_switch.rs:17:43: 17:44\n@@ -53,6 +54,7 @@\n           _4 = ((_1 as Ok).0: i32);        // scope 0 at $DIR/separate_const_switch.rs:16:16: 16:17\n           StorageLive(_5);                 // scope 1 at $DIR/separate_const_switch.rs:16:44: 16:45\n           _5 = _4;                         // scope 1 at $DIR/separate_const_switch.rs:16:44: 16:45\n+          Deinit(_2);                      // scope 1 at $DIR/separate_const_switch.rs:16:22: 16:46\n           ((_2 as Continue).0: i32) = move _5; // scope 1 at $DIR/separate_const_switch.rs:16:22: 16:46\n           discriminant(_2) = 0;            // scope 1 at $DIR/separate_const_switch.rs:16:22: 16:46\n           StorageDead(_5);                 // scope 1 at $DIR/separate_const_switch.rs:16:45: 16:46\n@@ -66,6 +68,7 @@\n       bb3: {\n           StorageLive(_11);                // scope 0 at $DIR/separate_const_switch.rs:21:28: 21:29\n           _11 = ((_2 as Break).0: usize);  // scope 0 at $DIR/separate_const_switch.rs:21:28: 21:29\n+          Deinit(_0);                      // scope 4 at $DIR/separate_const_switch.rs:21:34: 21:38\n           discriminant(_0) = 0;            // scope 4 at $DIR/separate_const_switch.rs:21:34: 21:38\n           StorageDead(_11);                // scope 0 at $DIR/separate_const_switch.rs:21:37: 21:38\n           goto -> bb5;                     // scope 0 at $DIR/separate_const_switch.rs:21:37: 21:38\n@@ -76,6 +79,7 @@\n           _9 = ((_2 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:20:31: 20:32\n           StorageLive(_10);                // scope 3 at $DIR/separate_const_switch.rs:20:42: 20:43\n           _10 = _9;                        // scope 3 at $DIR/separate_const_switch.rs:20:42: 20:43\n+          Deinit(_0);                      // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n           ((_0 as Some).0: i32) = move _10; // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n           discriminant(_0) = 1;            // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n           StorageDead(_10);                // scope 3 at $DIR/separate_const_switch.rs:20:43: 20:44"}, {"sha": "d388376ca483ab90c1d15c924ff05f3bd399fad2", "filename": "src/test/mir-opt/separate_const_switch.too_complex.PreCodegen.after.mir", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.PreCodegen.after.mir?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -36,12 +36,14 @@ fn too_complex(_1: Result<i32, usize>) -> Option<i32> {\n         _6 = ((_1 as Err).0: usize);     // scope 0 at $DIR/separate_const_switch.rs:17:17: 17:18\n         StorageLive(_7);                 // scope 2 at $DIR/separate_const_switch.rs:17:42: 17:43\n         _7 = _6;                         // scope 2 at $DIR/separate_const_switch.rs:17:42: 17:43\n+        Deinit(_2);                      // scope 2 at $DIR/separate_const_switch.rs:17:23: 17:44\n         ((_2 as Break).0: usize) = move _7; // scope 2 at $DIR/separate_const_switch.rs:17:23: 17:44\n         discriminant(_2) = 1;            // scope 2 at $DIR/separate_const_switch.rs:17:23: 17:44\n         StorageDead(_7);                 // scope 2 at $DIR/separate_const_switch.rs:17:43: 17:44\n         StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:17:43: 17:44\n         StorageLive(_10);                // scope 0 at $DIR/separate_const_switch.rs:21:28: 21:29\n         _10 = ((_2 as Break).0: usize);  // scope 0 at $DIR/separate_const_switch.rs:21:28: 21:29\n+        Deinit(_0);                      // scope 4 at $DIR/separate_const_switch.rs:21:34: 21:38\n         discriminant(_0) = 0;            // scope 4 at $DIR/separate_const_switch.rs:21:34: 21:38\n         StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:21:37: 21:38\n         goto -> bb3;                     // scope 0 at $DIR/separate_const_switch.rs:21:37: 21:38\n@@ -52,6 +54,7 @@ fn too_complex(_1: Result<i32, usize>) -> Option<i32> {\n         _4 = ((_1 as Ok).0: i32);        // scope 0 at $DIR/separate_const_switch.rs:16:16: 16:17\n         StorageLive(_5);                 // scope 1 at $DIR/separate_const_switch.rs:16:44: 16:45\n         _5 = _4;                         // scope 1 at $DIR/separate_const_switch.rs:16:44: 16:45\n+        Deinit(_2);                      // scope 1 at $DIR/separate_const_switch.rs:16:22: 16:46\n         ((_2 as Continue).0: i32) = move _5; // scope 1 at $DIR/separate_const_switch.rs:16:22: 16:46\n         discriminant(_2) = 0;            // scope 1 at $DIR/separate_const_switch.rs:16:22: 16:46\n         StorageDead(_5);                 // scope 1 at $DIR/separate_const_switch.rs:16:45: 16:46\n@@ -60,6 +63,7 @@ fn too_complex(_1: Result<i32, usize>) -> Option<i32> {\n         _8 = ((_2 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:20:31: 20:32\n         StorageLive(_9);                 // scope 3 at $DIR/separate_const_switch.rs:20:42: 20:43\n         _9 = _8;                         // scope 3 at $DIR/separate_const_switch.rs:20:42: 20:43\n+        Deinit(_0);                      // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n         ((_0 as Some).0: i32) = move _9; // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n         discriminant(_0) = 1;            // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n         StorageDead(_9);                 // scope 3 at $DIR/separate_const_switch.rs:20:43: 20:44"}, {"sha": "11f8d509281ea71921edcd13b6175bee991a9850", "filename": "src/test/mir-opt/separate_const_switch.too_complex.SeparateConstSwitch.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -38,6 +38,7 @@\n           _6 = ((_1 as Err).0: usize);     // scope 0 at $DIR/separate_const_switch.rs:17:17: 17:18\n           StorageLive(_7);                 // scope 2 at $DIR/separate_const_switch.rs:17:42: 17:43\n           _7 = _6;                         // scope 2 at $DIR/separate_const_switch.rs:17:42: 17:43\n+          Deinit(_2);                      // scope 2 at $DIR/separate_const_switch.rs:17:23: 17:44\n           ((_2 as Break).0: usize) = move _7; // scope 2 at $DIR/separate_const_switch.rs:17:23: 17:44\n           discriminant(_2) = 1;            // scope 2 at $DIR/separate_const_switch.rs:17:23: 17:44\n           StorageDead(_7);                 // scope 2 at $DIR/separate_const_switch.rs:17:43: 17:44\n@@ -52,6 +53,7 @@\n           _4 = ((_1 as Ok).0: i32);        // scope 0 at $DIR/separate_const_switch.rs:16:16: 16:17\n           StorageLive(_5);                 // scope 1 at $DIR/separate_const_switch.rs:16:44: 16:45\n           _5 = _4;                         // scope 1 at $DIR/separate_const_switch.rs:16:44: 16:45\n+          Deinit(_2);                      // scope 1 at $DIR/separate_const_switch.rs:16:22: 16:46\n           ((_2 as Continue).0: i32) = move _5; // scope 1 at $DIR/separate_const_switch.rs:16:22: 16:46\n           discriminant(_2) = 0;            // scope 1 at $DIR/separate_const_switch.rs:16:22: 16:46\n           StorageDead(_5);                 // scope 1 at $DIR/separate_const_switch.rs:16:45: 16:46\n@@ -69,6 +71,7 @@\n +     bb3: {\n           StorageLive(_11);                // scope 0 at $DIR/separate_const_switch.rs:21:28: 21:29\n           _11 = ((_2 as Break).0: usize);  // scope 0 at $DIR/separate_const_switch.rs:21:28: 21:29\n+          Deinit(_0);                      // scope 4 at $DIR/separate_const_switch.rs:21:34: 21:38\n           discriminant(_0) = 0;            // scope 4 at $DIR/separate_const_switch.rs:21:34: 21:38\n           StorageDead(_11);                // scope 0 at $DIR/separate_const_switch.rs:21:37: 21:38\n -         goto -> bb6;                     // scope 0 at $DIR/separate_const_switch.rs:21:37: 21:38\n@@ -81,6 +84,7 @@\n           _9 = ((_2 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:20:31: 20:32\n           StorageLive(_10);                // scope 3 at $DIR/separate_const_switch.rs:20:42: 20:43\n           _10 = _9;                        // scope 3 at $DIR/separate_const_switch.rs:20:42: 20:43\n+          Deinit(_0);                      // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n           ((_0 as Some).0: i32) = move _10; // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n           discriminant(_0) = 1;            // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n           StorageDead(_10);                // scope 3 at $DIR/separate_const_switch.rs:20:43: 20:44"}, {"sha": "389dbd27b5d1b1e8fc01ed7049b4272f6ae58b81", "filename": "src/test/mir-opt/simplify_arm.id.SimplifyArmIdentity.diff", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyArmIdentity.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -8,8 +8,7 @@\n       let _3: u8;                          // in scope 0 at $DIR/simplify-arm.rs:11:14: 11:15\n       let mut _4: u8;                      // in scope 0 at $DIR/simplify-arm.rs:11:25: 11:26\n       scope 1 {\n--         debug v => _3;                   // in scope 1 at $DIR/simplify-arm.rs:11:14: 11:15\n-+         debug v => ((_0 as Some).0: u8); // in scope 1 at $DIR/simplify-arm.rs:11:14: 11:15\n+          debug v => _3;                   // in scope 1 at $DIR/simplify-arm.rs:11:14: 11:15\n       }\n   \n       bb0: {\n@@ -18,6 +17,7 @@\n       }\n   \n       bb1: {\n+          Deinit(_0);                      // scope 0 at $DIR/simplify-arm.rs:12:17: 12:21\n           discriminant(_0) = 0;            // scope 0 at $DIR/simplify-arm.rs:12:17: 12:21\n           goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:12:17: 12:21\n       }\n@@ -27,15 +27,15 @@\n       }\n   \n       bb3: {\n--         StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:11:14: 11:15\n--         _3 = ((_1 as Some).0: u8);       // scope 0 at $DIR/simplify-arm.rs:11:14: 11:15\n--         StorageLive(_4);                 // scope 1 at $DIR/simplify-arm.rs:11:25: 11:26\n--         _4 = _3;                         // scope 1 at $DIR/simplify-arm.rs:11:25: 11:26\n--         ((_0 as Some).0: u8) = move _4;  // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n--         discriminant(_0) = 1;            // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n--         StorageDead(_4);                 // scope 1 at $DIR/simplify-arm.rs:11:26: 11:27\n--         StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:11:26: 11:27\n-+         _0 = move _1;                    // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n+          StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:11:14: 11:15\n+          _3 = ((_1 as Some).0: u8);       // scope 0 at $DIR/simplify-arm.rs:11:14: 11:15\n+          StorageLive(_4);                 // scope 1 at $DIR/simplify-arm.rs:11:25: 11:26\n+          _4 = _3;                         // scope 1 at $DIR/simplify-arm.rs:11:25: 11:26\n+          Deinit(_0);                      // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n+          ((_0 as Some).0: u8) = move _4;  // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n+          discriminant(_0) = 1;            // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n+          StorageDead(_4);                 // scope 1 at $DIR/simplify-arm.rs:11:26: 11:27\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:11:26: 11:27\n           goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:11:26: 11:27\n       }\n   "}, {"sha": "32b7b9aa555535b29777a1ff1a9a9bb969fbe521", "filename": "src/test/mir-opt/simplify_arm.id.SimplifyBranchSame.diff", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyBranchSame.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -8,32 +8,38 @@\n       let _3: u8;                          // in scope 0 at $DIR/simplify-arm.rs:11:14: 11:15\n       let mut _4: u8;                      // in scope 0 at $DIR/simplify-arm.rs:11:25: 11:26\n       scope 1 {\n-          debug v => ((_0 as Some).0: u8); // in scope 1 at $DIR/simplify-arm.rs:11:14: 11:15\n+          debug v => _3;                   // in scope 1 at $DIR/simplify-arm.rs:11:14: 11:15\n       }\n   \n       bb0: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/simplify-arm.rs:10:11: 10:12\n--         switchInt(move _2) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:10:5: 10:12\n-+         goto -> bb1;                     // scope 0 at $DIR/simplify-arm.rs:10:5: 10:12\n+          switchInt(move _2) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:10:5: 10:12\n       }\n   \n       bb1: {\n--         discriminant(_0) = 0;            // scope 0 at $DIR/simplify-arm.rs:12:17: 12:21\n--         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:12:17: 12:21\n--     }\n-- \n--     bb2: {\n--         unreachable;                     // scope 0 at $DIR/simplify-arm.rs:10:11: 10:12\n--     }\n-- \n--     bb3: {\n-          _0 = move _1;                    // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n--         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:11:26: 11:27\n-+         goto -> bb2;                     // scope 0 at $DIR/simplify-arm.rs:11:26: 11:27\n+          Deinit(_0);                      // scope 0 at $DIR/simplify-arm.rs:12:17: 12:21\n+          discriminant(_0) = 0;            // scope 0 at $DIR/simplify-arm.rs:12:17: 12:21\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:12:17: 12:21\n       }\n   \n--     bb4: {\n-+     bb2: {\n+      bb2: {\n+          unreachable;                     // scope 0 at $DIR/simplify-arm.rs:10:11: 10:12\n+      }\n+  \n+      bb3: {\n+          StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:11:14: 11:15\n+          _3 = ((_1 as Some).0: u8);       // scope 0 at $DIR/simplify-arm.rs:11:14: 11:15\n+          StorageLive(_4);                 // scope 1 at $DIR/simplify-arm.rs:11:25: 11:26\n+          _4 = _3;                         // scope 1 at $DIR/simplify-arm.rs:11:25: 11:26\n+          Deinit(_0);                      // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n+          ((_0 as Some).0: u8) = move _4;  // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n+          discriminant(_0) = 1;            // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n+          StorageDead(_4);                 // scope 1 at $DIR/simplify-arm.rs:11:26: 11:27\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:11:26: 11:27\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:11:26: 11:27\n+      }\n+  \n+      bb4: {\n           return;                          // scope 0 at $DIR/simplify-arm.rs:14:2: 14:2\n       }\n   }"}, {"sha": "60d421a2e1ab3f8fa1b36a25a96176d8cd583897", "filename": "src/test/mir-opt/simplify_arm.id_result.SimplifyArmIdentity.diff", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyArmIdentity.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -10,12 +10,10 @@\n       let _5: i32;                         // in scope 0 at $DIR/simplify-arm.rs:19:13: 19:14\n       let mut _6: i32;                     // in scope 0 at $DIR/simplify-arm.rs:19:23: 19:24\n       scope 1 {\n--         debug x => _3;                   // in scope 1 at $DIR/simplify-arm.rs:18:12: 18:13\n-+         debug x => ((_0 as Ok).0: u8);   // in scope 1 at $DIR/simplify-arm.rs:18:12: 18:13\n+          debug x => _3;                   // in scope 1 at $DIR/simplify-arm.rs:18:12: 18:13\n       }\n       scope 2 {\n--         debug y => _5;                   // in scope 2 at $DIR/simplify-arm.rs:19:13: 19:14\n-+         debug y => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify-arm.rs:19:13: 19:14\n+          debug y => _5;                   // in scope 2 at $DIR/simplify-arm.rs:19:13: 19:14\n       }\n   \n       bb0: {\n@@ -24,15 +22,15 @@\n       }\n   \n       bb1: {\n--         StorageLive(_5);                 // scope 0 at $DIR/simplify-arm.rs:19:13: 19:14\n--         _5 = ((_1 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:19:13: 19:14\n--         StorageLive(_6);                 // scope 2 at $DIR/simplify-arm.rs:19:23: 19:24\n--         _6 = _5;                         // scope 2 at $DIR/simplify-arm.rs:19:23: 19:24\n--         ((_0 as Err).0: i32) = move _6;  // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n--         discriminant(_0) = 1;            // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n--         StorageDead(_6);                 // scope 2 at $DIR/simplify-arm.rs:19:24: 19:25\n--         StorageDead(_5);                 // scope 0 at $DIR/simplify-arm.rs:19:24: 19:25\n-+         _0 = move _1;                    // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n+          StorageLive(_5);                 // scope 0 at $DIR/simplify-arm.rs:19:13: 19:14\n+          _5 = ((_1 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:19:13: 19:14\n+          StorageLive(_6);                 // scope 2 at $DIR/simplify-arm.rs:19:23: 19:24\n+          _6 = _5;                         // scope 2 at $DIR/simplify-arm.rs:19:23: 19:24\n+          Deinit(_0);                      // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n+          ((_0 as Err).0: i32) = move _6;  // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n+          discriminant(_0) = 1;            // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n+          StorageDead(_6);                 // scope 2 at $DIR/simplify-arm.rs:19:24: 19:25\n+          StorageDead(_5);                 // scope 0 at $DIR/simplify-arm.rs:19:24: 19:25\n           goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:19:24: 19:25\n       }\n   \n@@ -41,15 +39,15 @@\n       }\n   \n       bb3: {\n--         StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:18:12: 18:13\n--         _3 = ((_1 as Ok).0: u8);         // scope 0 at $DIR/simplify-arm.rs:18:12: 18:13\n--         StorageLive(_4);                 // scope 1 at $DIR/simplify-arm.rs:18:21: 18:22\n--         _4 = _3;                         // scope 1 at $DIR/simplify-arm.rs:18:21: 18:22\n--         ((_0 as Ok).0: u8) = move _4;    // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n--         discriminant(_0) = 0;            // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n--         StorageDead(_4);                 // scope 1 at $DIR/simplify-arm.rs:18:22: 18:23\n--         StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:18:22: 18:23\n-+         _0 = move _1;                    // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n+          StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:18:12: 18:13\n+          _3 = ((_1 as Ok).0: u8);         // scope 0 at $DIR/simplify-arm.rs:18:12: 18:13\n+          StorageLive(_4);                 // scope 1 at $DIR/simplify-arm.rs:18:21: 18:22\n+          _4 = _3;                         // scope 1 at $DIR/simplify-arm.rs:18:21: 18:22\n+          Deinit(_0);                      // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n+          ((_0 as Ok).0: u8) = move _4;    // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n+          discriminant(_0) = 0;            // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n+          StorageDead(_4);                 // scope 1 at $DIR/simplify-arm.rs:18:22: 18:23\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:18:22: 18:23\n           goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:18:22: 18:23\n       }\n   "}, {"sha": "52adf11d0f528042955814612d6471d644cdde4e", "filename": "src/test/mir-opt/simplify_arm.id_result.SimplifyBranchSame.diff", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyBranchSame.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -10,35 +10,48 @@\n       let _5: i32;                         // in scope 0 at $DIR/simplify-arm.rs:19:13: 19:14\n       let mut _6: i32;                     // in scope 0 at $DIR/simplify-arm.rs:19:23: 19:24\n       scope 1 {\n-          debug x => ((_0 as Ok).0: u8);   // in scope 1 at $DIR/simplify-arm.rs:18:12: 18:13\n+          debug x => _3;                   // in scope 1 at $DIR/simplify-arm.rs:18:12: 18:13\n       }\n       scope 2 {\n-          debug y => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify-arm.rs:19:13: 19:14\n+          debug y => _5;                   // in scope 2 at $DIR/simplify-arm.rs:19:13: 19:14\n       }\n   \n       bb0: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/simplify-arm.rs:17:11: 17:12\n--         switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:17:5: 17:12\n-+         goto -> bb1;                     // scope 0 at $DIR/simplify-arm.rs:17:5: 17:12\n+          switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:17:5: 17:12\n       }\n   \n       bb1: {\n--         _0 = move _1;                    // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n--         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:19:24: 19:25\n--     }\n-- \n--     bb2: {\n--         unreachable;                     // scope 0 at $DIR/simplify-arm.rs:17:11: 17:12\n--     }\n-- \n--     bb3: {\n-          _0 = move _1;                    // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n--         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:18:22: 18:23\n-+         goto -> bb2;                     // scope 0 at $DIR/simplify-arm.rs:18:22: 18:23\n+          StorageLive(_5);                 // scope 0 at $DIR/simplify-arm.rs:19:13: 19:14\n+          _5 = ((_1 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:19:13: 19:14\n+          StorageLive(_6);                 // scope 2 at $DIR/simplify-arm.rs:19:23: 19:24\n+          _6 = _5;                         // scope 2 at $DIR/simplify-arm.rs:19:23: 19:24\n+          Deinit(_0);                      // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n+          ((_0 as Err).0: i32) = move _6;  // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n+          discriminant(_0) = 1;            // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n+          StorageDead(_6);                 // scope 2 at $DIR/simplify-arm.rs:19:24: 19:25\n+          StorageDead(_5);                 // scope 0 at $DIR/simplify-arm.rs:19:24: 19:25\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:19:24: 19:25\n       }\n   \n--     bb4: {\n-+     bb2: {\n+      bb2: {\n+          unreachable;                     // scope 0 at $DIR/simplify-arm.rs:17:11: 17:12\n+      }\n+  \n+      bb3: {\n+          StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:18:12: 18:13\n+          _3 = ((_1 as Ok).0: u8);         // scope 0 at $DIR/simplify-arm.rs:18:12: 18:13\n+          StorageLive(_4);                 // scope 1 at $DIR/simplify-arm.rs:18:21: 18:22\n+          _4 = _3;                         // scope 1 at $DIR/simplify-arm.rs:18:21: 18:22\n+          Deinit(_0);                      // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n+          ((_0 as Ok).0: u8) = move _4;    // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n+          discriminant(_0) = 0;            // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n+          StorageDead(_4);                 // scope 1 at $DIR/simplify-arm.rs:18:22: 18:23\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:18:22: 18:23\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:18:22: 18:23\n+      }\n+  \n+      bb4: {\n           return;                          // scope 0 at $DIR/simplify-arm.rs:21:2: 21:2\n       }\n   }"}, {"sha": "5da2ad1a27dc9bc0216f224b9c128375a772671b", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyArmIdentity.diff", "status": "modified", "additions": 27, "deletions": 32, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -15,24 +15,19 @@\n       let _10: u8;                         // in scope 0 at $DIR/simplify-arm.rs:38:12: 38:13\n       let mut _11: u8;                     // in scope 0 at $DIR/simplify-arm.rs:40:8: 40:9\n       scope 1 {\n--         debug x => _2;                   // in scope 1 at $DIR/simplify-arm.rs:36:9: 36:10\n-+         debug x => ((_0 as Ok).0: u8);   // in scope 1 at $DIR/simplify-arm.rs:36:9: 36:10\n+          debug x => _2;                   // in scope 1 at $DIR/simplify-arm.rs:36:9: 36:10\n       }\n       scope 2 {\n--         debug e => _6;                   // in scope 2 at $DIR/simplify-arm.rs:37:13: 37:14\n-+         debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify-arm.rs:37:13: 37:14\n+          debug e => _6;                   // in scope 2 at $DIR/simplify-arm.rs:37:13: 37:14\n           scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify-arm.rs:37:37: 37:50\n--             debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-+             debug t => ((_0 as Err).0: i32); // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+              debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n           }\n           scope 6 (inlined from_error::<u8, i32>) { // at $DIR/simplify-arm.rs:37:26: 37:51\n--             debug e => _8;               // in scope 6 at $DIR/simplify-arm.rs:27:21: 27:22\n-+             debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify-arm.rs:27:21: 27:22\n+              debug e => _8;               // in scope 6 at $DIR/simplify-arm.rs:27:21: 27:22\n           }\n       }\n       scope 3 {\n--         debug v => _10;                  // in scope 3 at $DIR/simplify-arm.rs:38:12: 38:13\n-+         debug v => ((_0 as Ok).0: u8);   // in scope 3 at $DIR/simplify-arm.rs:38:12: 38:13\n+          debug v => _10;                  // in scope 3 at $DIR/simplify-arm.rs:38:12: 38:13\n       }\n       scope 4 (inlined into_result::<u8, i32>) { // at $DIR/simplify-arm.rs:36:19: 36:33\n           debug r => _4;                   // in scope 4 at $DIR/simplify-arm.rs:23:22: 23:23\n@@ -50,17 +45,17 @@\n       }\n   \n       bb1: {\n--         StorageLive(_10);                // scope 0 at $DIR/simplify-arm.rs:38:12: 38:13\n--         _10 = ((_3 as Ok).0: u8);        // scope 0 at $DIR/simplify-arm.rs:38:12: 38:13\n--         _2 = _10;                        // scope 3 at $DIR/simplify-arm.rs:38:18: 38:19\n--         StorageDead(_10);                // scope 0 at $DIR/simplify-arm.rs:38:18: 38:19\n-+         _0 = move _3;                    // scope 1 at $DIR/simplify-arm.rs:40:5: 40:10\n+          StorageLive(_10);                // scope 0 at $DIR/simplify-arm.rs:38:12: 38:13\n+          _10 = ((_3 as Ok).0: u8);        // scope 0 at $DIR/simplify-arm.rs:38:12: 38:13\n+          _2 = _10;                        // scope 3 at $DIR/simplify-arm.rs:38:18: 38:19\n+          StorageDead(_10);                // scope 0 at $DIR/simplify-arm.rs:38:18: 38:19\n           StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:39:6: 39:7\n--         StorageLive(_11);                // scope 1 at $DIR/simplify-arm.rs:40:8: 40:9\n--         _11 = _2;                        // scope 1 at $DIR/simplify-arm.rs:40:8: 40:9\n--         ((_0 as Ok).0: u8) = move _11;   // scope 1 at $DIR/simplify-arm.rs:40:5: 40:10\n--         discriminant(_0) = 0;            // scope 1 at $DIR/simplify-arm.rs:40:5: 40:10\n--         StorageDead(_11);                // scope 1 at $DIR/simplify-arm.rs:40:9: 40:10\n+          StorageLive(_11);                // scope 1 at $DIR/simplify-arm.rs:40:8: 40:9\n+          _11 = _2;                        // scope 1 at $DIR/simplify-arm.rs:40:8: 40:9\n+          Deinit(_0);                      // scope 1 at $DIR/simplify-arm.rs:40:5: 40:10\n+          ((_0 as Ok).0: u8) = move _11;   // scope 1 at $DIR/simplify-arm.rs:40:5: 40:10\n+          discriminant(_0) = 0;            // scope 1 at $DIR/simplify-arm.rs:40:5: 40:10\n+          StorageDead(_11);                // scope 1 at $DIR/simplify-arm.rs:40:9: 40:10\n           StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:41:1: 41:2\n           goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2\n       }\n@@ -70,18 +65,18 @@\n       }\n   \n       bb3: {\n--         StorageLive(_6);                 // scope 0 at $DIR/simplify-arm.rs:37:13: 37:14\n--         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:37:13: 37:14\n--         StorageLive(_8);                 // scope 2 at $DIR/simplify-arm.rs:37:37: 37:50\n--         StorageLive(_9);                 // scope 2 at $DIR/simplify-arm.rs:37:48: 37:49\n--         _9 = _6;                         // scope 2 at $DIR/simplify-arm.rs:37:48: 37:49\n--         _8 = move _9;                    // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n--         StorageDead(_9);                 // scope 2 at $DIR/simplify-arm.rs:37:49: 37:50\n--         ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify-arm.rs:28:9: 28:10\n--         discriminant(_0) = 1;            // scope 6 at $DIR/simplify-arm.rs:28:5: 28:11\n--         StorageDead(_8);                 // scope 2 at $DIR/simplify-arm.rs:37:50: 37:51\n--         StorageDead(_6);                 // scope 0 at $DIR/simplify-arm.rs:37:50: 37:51\n-+         _0 = move _3;                    // scope 6 at $DIR/simplify-arm.rs:28:5: 28:11\n+          StorageLive(_6);                 // scope 0 at $DIR/simplify-arm.rs:37:13: 37:14\n+          _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:37:13: 37:14\n+          StorageLive(_8);                 // scope 2 at $DIR/simplify-arm.rs:37:37: 37:50\n+          StorageLive(_9);                 // scope 2 at $DIR/simplify-arm.rs:37:48: 37:49\n+          _9 = _6;                         // scope 2 at $DIR/simplify-arm.rs:37:48: 37:49\n+          _8 = move _9;                    // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+          StorageDead(_9);                 // scope 2 at $DIR/simplify-arm.rs:37:49: 37:50\n+          ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify-arm.rs:28:9: 28:10\n+          Deinit(_0);                      // scope 6 at $DIR/simplify-arm.rs:28:5: 28:11\n+          discriminant(_0) = 1;            // scope 6 at $DIR/simplify-arm.rs:28:5: 28:11\n+          StorageDead(_8);                 // scope 2 at $DIR/simplify-arm.rs:37:50: 37:51\n+          StorageDead(_6);                 // scope 0 at $DIR/simplify-arm.rs:37:50: 37:51\n           StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:39:6: 39:7\n           StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:41:1: 41:2\n           goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2"}, {"sha": "528828ad075adb046682e811bb4afa12a4cbaf75", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyBranchSame.diff", "status": "modified", "additions": 39, "deletions": 21, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -15,19 +15,19 @@\n       let _10: u8;                         // in scope 0 at $DIR/simplify-arm.rs:38:12: 38:13\n       let mut _11: u8;                     // in scope 0 at $DIR/simplify-arm.rs:40:8: 40:9\n       scope 1 {\n-          debug x => ((_0 as Ok).0: u8);   // in scope 1 at $DIR/simplify-arm.rs:36:9: 36:10\n+          debug x => _2;                   // in scope 1 at $DIR/simplify-arm.rs:36:9: 36:10\n       }\n       scope 2 {\n-          debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify-arm.rs:37:13: 37:14\n+          debug e => _6;                   // in scope 2 at $DIR/simplify-arm.rs:37:13: 37:14\n           scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify-arm.rs:37:37: 37:50\n-              debug t => ((_0 as Err).0: i32); // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+              debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n           }\n           scope 6 (inlined from_error::<u8, i32>) { // at $DIR/simplify-arm.rs:37:26: 37:51\n-              debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify-arm.rs:27:21: 27:22\n+              debug e => _8;               // in scope 6 at $DIR/simplify-arm.rs:27:21: 27:22\n           }\n       }\n       scope 3 {\n-          debug v => ((_0 as Ok).0: u8);   // in scope 3 at $DIR/simplify-arm.rs:38:12: 38:13\n+          debug v => _10;                  // in scope 3 at $DIR/simplify-arm.rs:38:12: 38:13\n       }\n       scope 4 (inlined into_result::<u8, i32>) { // at $DIR/simplify-arm.rs:36:19: 36:33\n           debug r => _4;                   // in scope 4 at $DIR/simplify-arm.rs:23:22: 23:23\n@@ -41,30 +41,48 @@\n           _3 = move _4;                    // scope 4 at $DIR/simplify-arm.rs:24:5: 24:6\n           StorageDead(_4);                 // scope 0 at $DIR/simplify-arm.rs:36:32: 36:33\n           _5 = discriminant(_3);           // scope 0 at $DIR/simplify-arm.rs:36:19: 36:33\n--         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:36:13: 36:33\n-+         goto -> bb1;                     // scope 0 at $DIR/simplify-arm.rs:36:13: 36:33\n+          switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:36:13: 36:33\n       }\n   \n       bb1: {\n-          _0 = move _3;                    // scope 1 at $DIR/simplify-arm.rs:40:5: 40:10\n+          StorageLive(_10);                // scope 0 at $DIR/simplify-arm.rs:38:12: 38:13\n+          _10 = ((_3 as Ok).0: u8);        // scope 0 at $DIR/simplify-arm.rs:38:12: 38:13\n+          _2 = _10;                        // scope 3 at $DIR/simplify-arm.rs:38:18: 38:19\n+          StorageDead(_10);                // scope 0 at $DIR/simplify-arm.rs:38:18: 38:19\n           StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:39:6: 39:7\n+          StorageLive(_11);                // scope 1 at $DIR/simplify-arm.rs:40:8: 40:9\n+          _11 = _2;                        // scope 1 at $DIR/simplify-arm.rs:40:8: 40:9\n+          Deinit(_0);                      // scope 1 at $DIR/simplify-arm.rs:40:5: 40:10\n+          ((_0 as Ok).0: u8) = move _11;   // scope 1 at $DIR/simplify-arm.rs:40:5: 40:10\n+          discriminant(_0) = 0;            // scope 1 at $DIR/simplify-arm.rs:40:5: 40:10\n+          StorageDead(_11);                // scope 1 at $DIR/simplify-arm.rs:40:9: 40:10\n           StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:41:1: 41:2\n--         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2\n-+         goto -> bb2;                     // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2\n       }\n   \n       bb2: {\n--         unreachable;                     // scope 0 at $DIR/simplify-arm.rs:36:19: 36:33\n--     }\n-- \n--     bb3: {\n--         _0 = move _3;                    // scope 6 at $DIR/simplify-arm.rs:28:5: 28:11\n--         StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:39:6: 39:7\n--         StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:41:1: 41:2\n--         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2\n--     }\n-- \n--     bb4: {\n+          unreachable;                     // scope 0 at $DIR/simplify-arm.rs:36:19: 36:33\n+      }\n+  \n+      bb3: {\n+          StorageLive(_6);                 // scope 0 at $DIR/simplify-arm.rs:37:13: 37:14\n+          _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:37:13: 37:14\n+          StorageLive(_8);                 // scope 2 at $DIR/simplify-arm.rs:37:37: 37:50\n+          StorageLive(_9);                 // scope 2 at $DIR/simplify-arm.rs:37:48: 37:49\n+          _9 = _6;                         // scope 2 at $DIR/simplify-arm.rs:37:48: 37:49\n+          _8 = move _9;                    // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+          StorageDead(_9);                 // scope 2 at $DIR/simplify-arm.rs:37:49: 37:50\n+          ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify-arm.rs:28:9: 28:10\n+          Deinit(_0);                      // scope 6 at $DIR/simplify-arm.rs:28:5: 28:11\n+          discriminant(_0) = 1;            // scope 6 at $DIR/simplify-arm.rs:28:5: 28:11\n+          StorageDead(_8);                 // scope 2 at $DIR/simplify-arm.rs:37:50: 37:51\n+          StorageDead(_6);                 // scope 0 at $DIR/simplify-arm.rs:37:50: 37:51\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:39:6: 39:7\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:41:1: 41:2\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2\n+      }\n+  \n+      bb4: {\n           return;                          // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2\n       }\n   }"}, {"sha": "474d2df7aadb8fa0e1c293ab009ca63140c0eb02", "filename": "src/test/mir-opt/simplify_arm_identity.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.32bit.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -19,6 +19,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/simplify-arm-identity.rs:18:9: 18:10\n+          Deinit(_1);                      // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n           ((_1 as Foo).0: u8) = const 0_u8; // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n           discriminant(_1) = 0;            // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n           StorageLive(_2);                 // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n@@ -27,6 +28,7 @@\n       }\n   \n       bb1: {\n+          Deinit(_2);                      // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n           ((_2 as Foo).0: u8) = const 0_u8; // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n           discriminant(_2) = 0;            // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n           goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n@@ -41,6 +43,7 @@\n           _4 = ((_1 as Foo).0: u8);        // scope 1 at $DIR/simplify-arm-identity.rs:20:18: 20:19\n           StorageLive(_5);                 // scope 3 at $DIR/simplify-arm-identity.rs:20:33: 20:34\n           _5 = _4;                         // scope 3 at $DIR/simplify-arm-identity.rs:20:33: 20:34\n+          Deinit(_2);                      // scope 3 at $DIR/simplify-arm-identity.rs:20:24: 20:35\n           ((_2 as Foo).0: u8) = move _5;   // scope 3 at $DIR/simplify-arm-identity.rs:20:24: 20:35\n           discriminant(_2) = 0;            // scope 3 at $DIR/simplify-arm-identity.rs:20:24: 20:35\n           StorageDead(_5);                 // scope 3 at $DIR/simplify-arm-identity.rs:20:34: 20:35"}, {"sha": "474d2df7aadb8fa0e1c293ab009ca63140c0eb02", "filename": "src/test/mir-opt/simplify_arm_identity.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.64bit.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -19,6 +19,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/simplify-arm-identity.rs:18:9: 18:10\n+          Deinit(_1);                      // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n           ((_1 as Foo).0: u8) = const 0_u8; // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n           discriminant(_1) = 0;            // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n           StorageLive(_2);                 // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n@@ -27,6 +28,7 @@\n       }\n   \n       bb1: {\n+          Deinit(_2);                      // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n           ((_2 as Foo).0: u8) = const 0_u8; // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n           discriminant(_2) = 0;            // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n           goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n@@ -41,6 +43,7 @@\n           _4 = ((_1 as Foo).0: u8);        // scope 1 at $DIR/simplify-arm-identity.rs:20:18: 20:19\n           StorageLive(_5);                 // scope 3 at $DIR/simplify-arm-identity.rs:20:33: 20:34\n           _5 = _4;                         // scope 3 at $DIR/simplify-arm-identity.rs:20:33: 20:34\n+          Deinit(_2);                      // scope 3 at $DIR/simplify-arm-identity.rs:20:24: 20:35\n           ((_2 as Foo).0: u8) = move _5;   // scope 3 at $DIR/simplify-arm-identity.rs:20:24: 20:35\n           discriminant(_2) = 0;            // scope 3 at $DIR/simplify-arm-identity.rs:20:24: 20:35\n           StorageDead(_5);                 // scope 3 at $DIR/simplify-arm-identity.rs:20:34: 20:35"}, {"sha": "6d76b51cb193c51029c1e8c3972e550f3eb96a91", "filename": "src/test/mir-opt/simplify_locals.d1.SimplifyLocals.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -9,6 +9,7 @@\n   \n       bb0: {\n -         StorageLive(_1);                 // scope 0 at $DIR/simplify-locals.rs:22:13: 22:17\n+-         Deinit(_1);                      // scope 0 at $DIR/simplify-locals.rs:22:13: 22:17\n -         discriminant(_1) = 0;            // scope 0 at $DIR/simplify-locals.rs:22:13: 22:17\n -         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:22:17: 22:18\n           return;                          // scope 0 at $DIR/simplify-locals.rs:23:2: 23:2"}, {"sha": "4a386d46468c9bf94fd8b8634d75ec61543f4db0", "filename": "src/test/mir-opt/simplify_locals.d2.SimplifyLocals.diff", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -9,10 +9,13 @@\n   \n       bb0: {\n -         StorageLive(_1);                 // scope 0 at $DIR/simplify-locals.rs:28:22: 28:26\n+-         Deinit(_1);                      // scope 0 at $DIR/simplify-locals.rs:28:22: 28:26\n -         discriminant(_1) = 1;            // scope 0 at $DIR/simplify-locals.rs:28:22: 28:26\n -         StorageLive(_2);                 // scope 0 at $DIR/simplify-locals.rs:28:5: 28:17\n -         StorageLive(_3);                 // scope 0 at $DIR/simplify-locals.rs:28:11: 28:15\n+-         Deinit(_3);                      // scope 0 at $DIR/simplify-locals.rs:28:11: 28:15\n -         discriminant(_3) = 0;            // scope 0 at $DIR/simplify-locals.rs:28:11: 28:15\n+-         Deinit(_2);                      // scope 0 at $DIR/simplify-locals.rs:28:6: 28:16\n -         (_2.0: i32) = const 10_i32;      // scope 0 at $DIR/simplify-locals.rs:28:6: 28:16\n -         (_2.1: E) = const E::A;          // scope 0 at $DIR/simplify-locals.rs:28:6: 28:16\n -                                          // mir::Constant"}, {"sha": "a8cc61f052656bb7de4a3ebd209e2dc8992a9aa4", "filename": "src/test/mir-opt/simplify_locals_fixedpoint.foo.SimplifyLocals.diff", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -18,9 +18,12 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n           StorageLive(_2);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:31: 4:49\n+          Deinit(_2);                      // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:31: 4:49\n           discriminant(_2) = 0;            // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:31: 4:49\n           StorageLive(_3);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:51: 4:68\n+          Deinit(_3);                      // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:51: 4:68\n           discriminant(_3) = 0;            // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:51: 4:68\n+          Deinit(_1);                      // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n           (_1.0: std::option::Option<u8>) = move _2; // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n           (_1.1: std::option::Option<T>) = move _3; // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n           StorageDead(_3);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:68: 4:69"}, {"sha": "55b9838031cb3de30c946c0d38dc04e2816df4cc", "filename": "src/test/mir-opt/simplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -47,6 +47,7 @@\n -         StorageLive(_9);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:34\n -         StorageLive(_10);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n -         StorageLive(_11);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n+-         Deinit(_11);                     // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n -         (_11.0: u8) = const 40_u8;       // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n -         _10 = const 40_u8;               // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n -         _9 = const 42_u8;                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:34"}, {"sha": "aa9f0c18d09ac77d44590482d9743b5f60657502", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -4,7 +4,7 @@\n   fn map(_1: Option<Box<()>>) -> Option<Box<()>> {\n       debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:8: 3:9\n       let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:31: 3:46\n--     let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n+      let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n -     let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:14: 6:15\n -     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:25: 6:26\n -     let mut _5: bool;                    // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n@@ -17,8 +17,24 @@\n       bb0: {\n -         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n -         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n--         _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n-          _0 = move _1;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:20: 6:27\n+          _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n+          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:5: 4:12\n+      }\n+  \n+      bb1: {\n+          ((_0 as Some).0: std::boxed::Box<()>) = move ((_1 as Some).0: std::boxed::Box<()>); // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:14: 6:15\n+          Deinit(_0);                      // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:20: 6:27\n+          discriminant(_0) = 1;            // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:20: 6:27\n+          goto -> bb3;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:26: 6:27\n+      }\n+  \n+      bb2: {\n+          Deinit(_0);                      // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:17: 5:21\n+          discriminant(_0) = 0;            // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:17: 5:21\n+          goto -> bb3;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:17: 5:21\n+      }\n+  \n+      bb3: {\n -         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n           return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:2: 8:2\n       }"}, {"sha": "aa9f0c18d09ac77d44590482d9743b5f60657502", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -4,7 +4,7 @@\n   fn map(_1: Option<Box<()>>) -> Option<Box<()>> {\n       debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:8: 3:9\n       let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:31: 3:46\n--     let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n+      let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n -     let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:14: 6:15\n -     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:25: 6:26\n -     let mut _5: bool;                    // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n@@ -17,8 +17,24 @@\n       bb0: {\n -         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n -         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n--         _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n-          _0 = move _1;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:20: 6:27\n+          _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n+          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:5: 4:12\n+      }\n+  \n+      bb1: {\n+          ((_0 as Some).0: std::boxed::Box<()>) = move ((_1 as Some).0: std::boxed::Box<()>); // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:14: 6:15\n+          Deinit(_0);                      // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:20: 6:27\n+          discriminant(_0) = 1;            // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:20: 6:27\n+          goto -> bb3;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:26: 6:27\n+      }\n+  \n+      bb2: {\n+          Deinit(_0);                      // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:17: 5:21\n+          discriminant(_0) = 0;            // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:17: 5:21\n+          goto -> bb3;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:17: 5:21\n+      }\n+  \n+      bb3: {\n -         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n           return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:2: 8:2\n       }"}, {"sha": "1e0071353f9272e190bdee45e0bafd04a9e21000", "filename": "src/test/mir-opt/simplify_try.try_identity.DestinationPropagation.diff", "status": "modified", "additions": 65, "deletions": 13, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -15,48 +15,100 @@\n       let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n       let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:25:8: 25:9\n       scope 1 {\n-          debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n+-         debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n++         debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n       }\n       scope 2 {\n-          debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n+-         debug e => _6;                   // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n++         debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n           scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n-              debug t => ((_0 as Err).0: i32); // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+-             debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n++             debug t => ((_0 as Err).0: i32); // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n           }\n           scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n-              debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n+-             debug e => _8;               // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n++             debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n           }\n       }\n       scope 3 {\n-          debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n+-         debug v => _10;                  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n++         debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n       }\n       scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n -         debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n-+         debug r => _0;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n++         debug r => _3;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:21:9: 21:10\n+-         StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:21:9: 21:10\n -         StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n -         StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n -         _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n -         _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:9:5: 9:6\n -         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:21:32: 21:33\n--         _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:21:9: 21:10\n +         nop;                             // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n +         nop;                             // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n-+         _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n++         _3 = _1;                         // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n +         nop;                             // scope 4 at $DIR/simplify_try.rs:9:5: 9:6\n +         nop;                             // scope 0 at $DIR/simplify_try.rs:21:32: 21:33\n-+         _5 = discriminant(_0);           // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n-          goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:21:13: 21:33\n+          _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n+          switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:21:13: 21:33\n       }\n   \n       bb1: {\n--         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+-         StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n+-         _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n+-         _2 = _10;                        // scope 3 at $DIR/simplify_try.rs:23:18: 23:19\n+-         StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:23:18: 23:19\n -         StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n+-         StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:25:8: 25:9\n+-         _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:25:8: 25:9\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n++         ((_0 as Ok).0: u32) = ((_3 as Ok).0: u32); // scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n++         nop;                             // scope 3 at $DIR/simplify_try.rs:23:18: 23:19\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:23:18: 23:19\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n++         nop;                             // scope 1 at $DIR/simplify_try.rs:25:8: 25:9\n++         nop;                             // scope 1 at $DIR/simplify_try.rs:25:8: 25:9\n+          Deinit(_0);                      // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+-         ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n +         nop;                             // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+          discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+-         StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:25:9: 25:10\n+-         StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n++         nop;                             // scope 1 at $DIR/simplify_try.rs:25:9: 25:10\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n+          return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2\n+      }\n+  \n+      bb2: {\n+-         StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+-         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+-         StorageLive(_8);                 // scope 2 at $DIR/simplify_try.rs:22:37: 22:50\n+-         StorageLive(_9);                 // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n+-         _9 = _6;                         // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n+-         _8 = move _9;                    // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+-         StorageDead(_9);                 // scope 2 at $DIR/simplify_try.rs:22:49: 22:50\n+-         ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify_try.rs:13:9: 13:10\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n++         ((_0 as Err).0: i32) = ((_3 as Err).0: i32); // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n++         nop;                             // scope 2 at $DIR/simplify_try.rs:22:37: 22:50\n++         nop;                             // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n++         nop;                             // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n++         nop;                             // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n++         nop;                             // scope 2 at $DIR/simplify_try.rs:22:49: 22:50\n++         nop;                             // scope 6 at $DIR/simplify_try.rs:13:9: 13:10\n+          Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n+          discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n+-         StorageDead(_8);                 // scope 2 at $DIR/simplify_try.rs:22:50: 22:51\n+-         StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:22:50: 22:51\n+-         StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n+-         StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n++         nop;                             // scope 2 at $DIR/simplify_try.rs:22:50: 22:51\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:22:50: 22:51\n +         nop;                             // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n           return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2\n       }\n   }"}, {"sha": "01e76109ada5953863d0ecc8a907c756963be109", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyArmIdentity.diff", "status": "modified", "additions": 27, "deletions": 32, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -15,24 +15,19 @@\n       let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n       let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:25:8: 25:9\n       scope 1 {\n--         debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n-+         debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n+          debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n       }\n       scope 2 {\n--         debug e => _6;                   // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n-+         debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n+          debug e => _6;                   // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n           scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n--             debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-+             debug t => ((_0 as Err).0: i32); // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+              debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n           }\n           scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n--             debug e => _8;               // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n-+             debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n+              debug e => _8;               // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n           }\n       }\n       scope 3 {\n--         debug v => _10;                  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n-+         debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n+          debug v => _10;                  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n       }\n       scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n           debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n@@ -50,34 +45,34 @@\n       }\n   \n       bb1: {\n--         StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n--         _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n--         _2 = _10;                        // scope 3 at $DIR/simplify_try.rs:23:18: 23:19\n--         StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:23:18: 23:19\n-+         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+          StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n+          _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n+          _2 = _10;                        // scope 3 at $DIR/simplify_try.rs:23:18: 23:19\n+          StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:23:18: 23:19\n           StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n--         StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:25:8: 25:9\n--         _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:25:8: 25:9\n--         ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n--         discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n--         StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:25:9: 25:10\n+          StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:25:8: 25:9\n+          _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:25:8: 25:9\n+          Deinit(_0);                      // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+          ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+          discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+          StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:25:9: 25:10\n           StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n           return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2\n       }\n   \n       bb2: {\n--         StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n--         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n--         StorageLive(_8);                 // scope 2 at $DIR/simplify_try.rs:22:37: 22:50\n--         StorageLive(_9);                 // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n--         _9 = _6;                         // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n--         _8 = move _9;                    // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n--         StorageDead(_9);                 // scope 2 at $DIR/simplify_try.rs:22:49: 22:50\n--         ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify_try.rs:13:9: 13:10\n--         discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n--         StorageDead(_8);                 // scope 2 at $DIR/simplify_try.rs:22:50: 22:51\n--         StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:22:50: 22:51\n-+         _0 = move _3;                    // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n+          StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+          _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+          StorageLive(_8);                 // scope 2 at $DIR/simplify_try.rs:22:37: 22:50\n+          StorageLive(_9);                 // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n+          _9 = _6;                         // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n+          _8 = move _9;                    // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+          StorageDead(_9);                 // scope 2 at $DIR/simplify_try.rs:22:49: 22:50\n+          ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify_try.rs:13:9: 13:10\n+          Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n+          discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n+          StorageDead(_8);                 // scope 2 at $DIR/simplify_try.rs:22:50: 22:51\n+          StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:22:50: 22:51\n           StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n           StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n           return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2"}, {"sha": "56af6730966f7e638354b5f34df01fe0ced4422c", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyBranchSame.after.mir", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -14,19 +14,19 @@ fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n     let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n     let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:25:8: 25:9\n     scope 1 {\n-        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n+        debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n     }\n     scope 2 {\n-        debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n+        debug e => _6;                   // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n         scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n-            debug t => ((_0 as Err).0: i32); // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+            debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n         }\n         scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n-            debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n+            debug e => _8;               // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n         }\n     }\n     scope 3 {\n-        debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n+        debug v => _10;                  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n     }\n     scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n         debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n@@ -40,11 +40,38 @@ fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n         _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:9:5: 9:6\n         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:21:32: 21:33\n         _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n-        goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:21:13: 21:33\n+        switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:21:13: 21:33\n     }\n \n     bb1: {\n-        _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+        StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n+        _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n+        _2 = _10;                        // scope 3 at $DIR/simplify_try.rs:23:18: 23:19\n+        StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:23:18: 23:19\n+        StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n+        StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:25:8: 25:9\n+        _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:25:8: 25:9\n+        Deinit(_0);                      // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+        ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+        discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+        StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:25:9: 25:10\n+        StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n+        return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2\n+    }\n+\n+    bb2: {\n+        StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+        _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+        StorageLive(_8);                 // scope 2 at $DIR/simplify_try.rs:22:37: 22:50\n+        StorageLive(_9);                 // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n+        _9 = _6;                         // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n+        _8 = move _9;                    // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+        StorageDead(_9);                 // scope 2 at $DIR/simplify_try.rs:22:49: 22:50\n+        ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify_try.rs:13:9: 13:10\n+        Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n+        discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n+        StorageDead(_8);                 // scope 2 at $DIR/simplify_try.rs:22:50: 22:51\n+        StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:22:50: 22:51\n         StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n         StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n         return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2"}, {"sha": "4407e8e36fdd07d0cad0a4e780c9235426b553c0", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyLocals.after.mir", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -3,6 +3,8 @@\n fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n     debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:20:17: 20:18\n     let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:20:41: 20:57\n+    let mut _2: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n+    let mut _3: isize;                   // in scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n     scope 1 {\n         debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n     }\n@@ -19,11 +21,26 @@ fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n         debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n     }\n     scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n-        debug r => _0;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n+        debug r => _2;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n     }\n \n     bb0: {\n-        _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n+        _2 = _1;                         // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n+        _3 = discriminant(_2);           // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n+        switchInt(move _3) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:21:13: 21:33\n+    }\n+\n+    bb1: {\n+        ((_0 as Ok).0: u32) = ((_2 as Ok).0: u32); // scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n+        Deinit(_0);                      // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+        discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+        return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2\n+    }\n+\n+    bb2: {\n+        ((_0 as Err).0: i32) = ((_2 as Err).0: i32); // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+        Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n+        discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n         return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2\n     }\n }"}, {"sha": "2b79a69b93b3e653224ee60c455da3d80105e609", "filename": "src/test/mir-opt/uninhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -15,6 +15,7 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n         StorageLive(_2);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n+        Deinit(_2);                      // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n         discriminant(_2) = 2;            // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n         _3 = discriminant(_2);           // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n         StorageLive(_5);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n@@ -28,6 +29,7 @@ fn main() -> () {\n         StorageDead(_1);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:24:6: 24:7\n         StorageLive(_6);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n         StorageLive(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n+        Deinit(_7);                      // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n         discriminant(_7) = 0;            // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n         _8 = discriminant(_7);           // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n         switchInt(move _8) -> [4_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 26:19"}, {"sha": "fe87bbd8c0b8788478e229064a7a0ce06f2d5383", "filename": "src/test/mir-opt/uninhabited_enum_branching.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -16,6 +16,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n           StorageLive(_2);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n+          Deinit(_2);                      // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n           discriminant(_2) = 2;            // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n           _3 = discriminant(_2);           // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n -         switchInt(move _3) -> [0_isize: bb2, 1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 20:19\n@@ -57,6 +58,7 @@\n           StorageDead(_1);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:24:6: 24:7\n           StorageLive(_6);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n           StorageLive(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n+          Deinit(_7);                      // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n           discriminant(_7) = 0;            // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n           _8 = discriminant(_7);           // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n           switchInt(move _8) -> [4_isize: bb6, otherwise: bb5]; // scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 26:19"}, {"sha": "27f9c8b7f8feac3e693afd9087be983ed56baef4", "filename": "src/test/mir-opt/uninhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -22,7 +22,9 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:9: 19:13\n         StorageLive(_2);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:38: 19:46\n+        Deinit(_2);                      // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:38: 19:46\n         discriminant(_2) = 2;            // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:38: 19:46\n+        Deinit(_1);                      // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:16: 19:48\n         (_1.0: u32) = const 51_u32;      // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:16: 19:48\n         (_1.1: Test1) = move _2;         // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:16: 19:48\n         StorageDead(_2);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:47: 19:48"}, {"sha": "8622fccec888a7d4f24424e3bdc6ad95f1f52e7b", "filename": "src/test/mir-opt/uninhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -23,7 +23,9 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:9: 19:13\n           StorageLive(_2);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:38: 19:46\n+          Deinit(_2);                      // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:38: 19:46\n           discriminant(_2) = 2;            // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:38: 19:46\n+          Deinit(_1);                      // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:16: 19:48\n           (_1.0: u32) = const 51_u32;      // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:16: 19:48\n           (_1.1: Test1) = move _2;         // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:16: 19:48\n           StorageDead(_2);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:47: 19:48"}, {"sha": "d106da84fc77811635736bbf77ae2d8229c8add8", "filename": "src/test/mir-opt/unusual_item_types.Test-X-{constructor#0}.mir_map.0.32bit.mir", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.32bit.mir?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -4,6 +4,7 @@ fn Test::X(_1: usize) -> Test {\n     let mut _0: Test;                    // return place in scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n \n     bb0: {\n+        Deinit(_0);                      // scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n         ((_0 as X).0: usize) = move _1;  // scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n         discriminant(_0) = 0;            // scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n         return;                          // scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13"}, {"sha": "d106da84fc77811635736bbf77ae2d8229c8add8", "filename": "src/test/mir-opt/unusual_item_types.Test-X-{constructor#0}.mir_map.0.64bit.mir", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.64bit.mir?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -4,6 +4,7 @@ fn Test::X(_1: usize) -> Test {\n     let mut _0: Test;                    // return place in scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n \n     bb0: {\n+        Deinit(_0);                      // scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n         ((_0 as X).0: usize) = move _1;  // scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n         discriminant(_0) = 0;            // scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n         return;                          // scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13"}, {"sha": "0529b15522ea6a4ac43970cd9d630824a7aada5f", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.32bit.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -19,6 +19,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n           _1 = const 0_i32;                // scope 0 at $DIR/while_let_loops.rs:6:18: 6:19\n           StorageLive(_3);                 // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n+          Deinit(_3);                      // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n           discriminant(_3) = 0;            // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n -         _4 = discriminant(_3);           // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n -         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25"}, {"sha": "0529b15522ea6a4ac43970cd9d630824a7aada5f", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.64bit.diff?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -19,6 +19,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n           _1 = const 0_i32;                // scope 0 at $DIR/while_let_loops.rs:6:18: 6:19\n           StorageLive(_3);                 // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n+          Deinit(_3);                      // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n           discriminant(_3) = 0;            // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n -         _4 = discriminant(_3);           // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n -         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25"}, {"sha": "c5677849229c226b26bb8d3d82c31d26df6f57f5", "filename": "src/test/ui/consts/const-eval/ub-enum-overwrite.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum-overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum-overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum-overwrite.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -0,0 +1,17 @@\n+#![feature(const_mut_refs)]\n+\n+enum E {\n+    A(u8),\n+    B,\n+}\n+\n+const _: u8 = {\n+    //~^ ERROR is undefined behavior\n+    let mut e = E::A(1);\n+    let p = if let E::A(x) = &mut e { x as *mut u8 } else { unreachable!() };\n+    // Make sure overwriting `e` uninitializes other bytes\n+    e = E::B;\n+    unsafe { *p }\n+};\n+\n+fn main() {}"}, {"sha": "88de7acb496a9ae649ef22c563718b52011693a5", "filename": "src/test/ui/consts/const-eval/ub-enum-overwrite.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum-overwrite.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum-overwrite.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum-overwrite.stderr?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -0,0 +1,20 @@\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-enum-overwrite.rs:8:1\n+   |\n+LL | / const _: u8 = {\n+LL | |\n+LL | |     let mut e = E::A(1);\n+LL | |     let p = if let E::A(x) = &mut e { x as *mut u8 } else { unreachable!() };\n+...  |\n+LL | |     unsafe { *p }\n+LL | | };\n+   | |__^ type validation failed: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 1, align: 1) {\n+               __                                              \u2502 \u2591\n+           }\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "111d243959a13257b9f9049be77ba4ad96f82ef2", "filename": "src/test/ui/consts/const-eval/ub-enum.32bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.32bit.stderr?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -79,11 +79,11 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:60:1\n    |\n LL | const BAD_ENUM2_OPTION_PTR: Option<Enum2> = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .<enum-tag>: encountered pointer to alloc29, but expected initialized plain (non-pointer) bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .<enum-tag>: encountered pointer to alloc30, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n-               \u257e\u2500alloc29\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n+               \u257e\u2500alloc30\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n            }\n \n error[E0080]: it is undefined behavior to use this value"}, {"sha": "eee132bae00bc4ab032b3b66ac497cc598c97ac8", "filename": "src/test/ui/consts/const-eval/ub-enum.64bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -79,11 +79,11 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:60:1\n    |\n LL | const BAD_ENUM2_OPTION_PTR: Option<Enum2> = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .<enum-tag>: encountered pointer to alloc29, but expected initialized plain (non-pointer) bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .<enum-tag>: encountered pointer to alloc30, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n-               \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc29\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+               \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc30\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n            }\n \n error[E0080]: it is undefined behavior to use this value"}, {"sha": "6f80da9cda9237ae042b5393f712255b9df0f82f", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.32bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -145,11 +145,11 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref-ptr.rs:55:1\n    |\n LL | const DATA_FN_PTR: fn() = unsafe { mem::transmute(&13) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc41, but expected a function pointer\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc43, but expected a function pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n-               \u257e\u2500alloc41\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n+               \u257e\u2500alloc43\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n            }\n \n error: aborting due to 14 previous errors"}, {"sha": "9b636761557fc0c6c119c549b60f3b0cb1fbf29f", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.64bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -145,11 +145,11 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref-ptr.rs:55:1\n    |\n LL | const DATA_FN_PTR: fn() = unsafe { mem::transmute(&13) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc41, but expected a function pointer\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc43, but expected a function pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n-               \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc41\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+               \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc43\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n            }\n \n error: aborting due to 14 previous errors"}, {"sha": "293a2b47d30a5c26e152d89a5359080a556016ad", "filename": "src/test/ui/consts/offset_from_ub.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -40,19 +40,19 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/offset_from_ub.rs:52:14\n    |\n LL |     unsafe { ptr_offset_from(end_ptr, start_ptr) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: alloc18 has size 4, so pointer at offset 10 is out-of-bounds\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: alloc20 has size 4, so pointer at offset 10 is out-of-bounds\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/offset_from_ub.rs:61:14\n    |\n LL |     unsafe { ptr_offset_from(start_ptr, end_ptr) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: alloc21 has size 4, so pointer at offset 10 is out-of-bounds\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: alloc23 has size 4, so pointer at offset 10 is out-of-bounds\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/offset_from_ub.rs:69:14\n    |\n LL |     unsafe { ptr_offset_from(end_ptr, end_ptr) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: alloc24 has size 4, so pointer at offset 10 is out-of-bounds\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: alloc26 has size 4, so pointer at offset 10 is out-of-bounds\n \n error: aborting due to 8 previous errors\n "}, {"sha": "fe411220484890f33e6abaa68d2a53477eea7f17", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e4dd13a3abd0cc59807af66c3c4cd63440852/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=625e4dd13a3abd0cc59807af66c3c4cd63440852", "patch": "@@ -211,7 +211,8 @@ fn check_statement<'tcx>(\n \n         StatementKind::FakeRead(box (_, place)) => check_place(tcx, *place, span, body),\n         // just an assignment\n-        StatementKind::SetDiscriminant { place, .. } => check_place(tcx, **place, span, body),\n+        StatementKind::SetDiscriminant { place, .. } | StatementKind::Deinit(place) => \n+            check_place(tcx, **place, span, body),\n \n         StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping { dst, src, count }) => {\n             check_operand(tcx, dst, span, body)?;"}]}