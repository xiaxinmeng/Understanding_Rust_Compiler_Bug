{"sha": "2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMmE2ZGQyZmJlYjRkYTE2ZTYwMmZhMTkwMmFiNmJiZDg1MGI0NDI=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-27T12:18:55Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-27T12:18:55Z"}, "message": "Merge #900\n\n900: Add new trait ast::TypeAscriptionOwner r=vipentti a=vipentti\n\nThis trait should be implemented for nodes which have an ascribed type,\r\ne.g. thing : Type. Such as let, const, static, param, named struct fields.\r\n\r\nIn addition, we update some places where previously we used node + node.type_ref() with `TypeAscriptionOwner` in the trait bounds.\n\nCo-authored-by: Ville Penttinen <villem.penttinen@gmail.com>", "tree": {"sha": "b42e6faf8618c3625e41d5a2011b4ffd145f22de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b42e6faf8618c3625e41d5a2011b4ffd145f22de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442", "html_url": "https://github.com/rust-lang/rust/commit/2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "1927eb088ac9aa3851f77bb929296873ccb4faed", "url": "https://api.github.com/repos/rust-lang/rust/commits/1927eb088ac9aa3851f77bb929296873ccb4faed", "html_url": "https://github.com/rust-lang/rust/commit/1927eb088ac9aa3851f77bb929296873ccb4faed"}, {"sha": "d3ce69aee3297e683691ec0123f5a2584a8075a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3ce69aee3297e683691ec0123f5a2584a8075a0", "html_url": "https://github.com/rust-lang/rust/commit/d3ce69aee3297e683691ec0123f5a2584a8075a0"}], "stats": {"total": 133, "additions": 72, "deletions": 61}, "files": [{"sha": "325f1d7b62f30071c4f049415c164702149b166e", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442", "patch": "@@ -6,7 +6,7 @@ use std::sync::Arc;\n use ra_arena::{RawId, Arena, impl_arena_id};\n use ra_syntax::{\n     TreeArc,\n-    ast::{self, NameOwner, StructFlavor}\n+    ast::{self, NameOwner, StructFlavor, TypeAscriptionOwner}\n };\n \n use crate::{\n@@ -164,7 +164,7 @@ impl VariantData {\n                     .fields()\n                     .map(|fd| StructFieldData {\n                         name: fd.name().map(|n| n.as_name()).unwrap_or_else(Name::missing),\n-                        type_ref: TypeRef::from_ast_opt(fd.type_ref()),\n+                        type_ref: TypeRef::from_ast_opt(fd.ascribed_type()),\n                     })\n                     .collect();\n                 VariantDataInner::Struct(fields)"}, {"sha": "c1654b069b91735696f5ed6e87267096e2f3ae1b", "filename": "crates/ra_hir/src/code_model_impl/function.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs?ref=2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442", "patch": "@@ -1,6 +1,6 @@\n use std::sync::Arc;\n \n-use ra_syntax::ast::{self, NameOwner};\n+use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n \n use crate::{\n     Name, AsName, Function, FnSignature,\n@@ -19,7 +19,7 @@ impl FnSignature {\n         let mut has_self_param = false;\n         if let Some(param_list) = node.param_list() {\n             if let Some(self_param) = param_list.self_param() {\n-                let self_type = if let Some(type_ref) = self_param.type_ref() {\n+                let self_type = if let Some(type_ref) = self_param.ascribed_type() {\n                     TypeRef::from_ast(type_ref)\n                 } else {\n                     let self_type = TypeRef::Path(Name::self_type().into());\n@@ -37,7 +37,7 @@ impl FnSignature {\n                 has_self_param = true;\n             }\n             for param in param_list.params() {\n-                let type_ref = TypeRef::from_ast_opt(param.type_ref());\n+                let type_ref = TypeRef::from_ast_opt(param.ascribed_type());\n                 params.push(type_ref);\n             }\n         }"}, {"sha": "8b861a81f7be103ef381a7b4eb40b205596cc461", "filename": "crates/ra_hir/src/code_model_impl/konst.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkonst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkonst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkonst.rs?ref=2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442", "patch": "@@ -1,19 +1,16 @@\n use std::sync::Arc;\r\n \r\n-use ra_syntax::ast::{self, NameOwner};\r\n+use ra_syntax::ast::{NameOwner, TypeAscriptionOwner};\r\n \r\n use crate::{\r\n     Name, AsName, Const, ConstSignature, Static,\r\n     type_ref::{TypeRef},\r\n     PersistentHirDatabase,\r\n };\r\n \r\n-fn const_signature_for<N: NameOwner>(\r\n-    node: &N,\r\n-    type_ref: Option<&ast::TypeRef>,\r\n-) -> Arc<ConstSignature> {\r\n+fn const_signature_for<N: NameOwner + TypeAscriptionOwner>(node: &N) -> Arc<ConstSignature> {\r\n     let name = node.name().map(|n| n.as_name()).unwrap_or_else(Name::missing);\r\n-    let type_ref = TypeRef::from_ast_opt(type_ref);\r\n+    let type_ref = TypeRef::from_ast_opt(node.ascribed_type());\r\n     let sig = ConstSignature { name, type_ref };\r\n     Arc::new(sig)\r\n }\r\n@@ -24,14 +21,14 @@ impl ConstSignature {\n         konst: Const,\r\n     ) -> Arc<ConstSignature> {\r\n         let (_, node) = konst.source(db);\r\n-        const_signature_for(&*node, node.type_ref())\r\n+        const_signature_for(&*node)\r\n     }\r\n \r\n     pub(crate) fn static_signature_query(\r\n         db: &impl PersistentHirDatabase,\r\n         konst: Static,\r\n     ) -> Arc<ConstSignature> {\r\n         let (_, node) = konst.source(db);\r\n-        const_signature_for(&*node, node.type_ref())\r\n+        const_signature_for(&*node)\r\n     }\r\n }\r"}, {"sha": "aa39d28ed986b2d17eb13a2fbd82e8df90a1a53c", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442", "patch": "@@ -6,7 +6,7 @@ use rustc_hash::FxHashMap;\n use ra_arena::{Arena, RawId, impl_arena_id, map::ArenaMap};\n use ra_syntax::{\n     SyntaxNodePtr, AstNode,\n-    ast::{self, LoopBodyOwner, ArgListOwner, NameOwner, LiteralFlavor}\n+    ast::{self, LoopBodyOwner, ArgListOwner, NameOwner, LiteralFlavor, TypeAscriptionOwner}\n };\n \n use crate::{\n@@ -709,7 +709,7 @@ impl ExprCollector {\n                 if let Some(pl) = e.param_list() {\n                     for param in pl.params() {\n                         let pat = self.collect_pat_opt(param.pat());\n-                        let type_ref = param.type_ref().map(TypeRef::from_ast);\n+                        let type_ref = param.ascribed_type().map(TypeRef::from_ast);\n                         args.push(pat);\n                         arg_types.push(type_ref);\n                     }\n@@ -790,7 +790,7 @@ impl ExprCollector {\n             .map(|s| match s.kind() {\n                 ast::StmtKind::LetStmt(stmt) => {\n                     let pat = self.collect_pat_opt(stmt.pat());\n-                    let type_ref = stmt.type_ref().map(TypeRef::from_ast);\n+                    let type_ref = stmt.ascribed_type().map(TypeRef::from_ast);\n                     let initializer = stmt.initializer().map(|e| self.collect_expr(e));\n                     Statement::Let { pat, type_ref, initializer }\n                 }"}, {"sha": "8aa8076482119de839a4b1471600553e8d253c73", "filename": "crates/ra_hir/src/type_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442/crates%2Fra_hir%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442/crates%2Fra_hir%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftype_ref.rs?ref=2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442", "patch": "@@ -1,7 +1,7 @@\n //! HIR for references to types. Paths in these are not yet resolved. They can\n //! be directly created from an ast::TypeRef, without further queries.\n \n-use ra_syntax::ast;\n+use ra_syntax::ast::{self, TypeAscriptionOwner};\n \n use crate::Path;\n \n@@ -81,7 +81,7 @@ impl TypeRef {\n             FnPointerType(inner) => {\n                 let ret_ty = TypeRef::from_ast_opt(inner.ret_type().and_then(|rt| rt.type_ref()));\n                 let mut params = if let Some(pl) = inner.param_list() {\n-                    pl.params().map(|p| p.type_ref()).map(TypeRef::from_ast_opt).collect()\n+                    pl.params().map(|p| p.ascribed_type()).map(TypeRef::from_ast_opt).collect()\n                 } else {\n                     Vec::new()\n                 };"}, {"sha": "ec2c9bbc6557b36a2b0d5e1f04ea6e28e8e1ad86", "filename": "crates/ra_ide_api_light/src/structure.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442/crates%2Fra_ide_api_light%2Fsrc%2Fstructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442/crates%2Fra_ide_api_light%2Fsrc%2Fstructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api_light%2Fsrc%2Fstructure.rs?ref=2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442", "patch": "@@ -2,7 +2,7 @@ use crate::TextRange;\n \n use ra_syntax::{\n     algo::visit::{visitor, Visitor},\n-    ast::{self, AttrsOwner, NameOwner, TypeParamsOwner},\n+    ast::{self, AttrsOwner, NameOwner, TypeParamsOwner, TypeAscriptionOwner},\n     AstNode, SourceFile, SyntaxKind, SyntaxNode, WalkEvent,\n };\n \n@@ -45,6 +45,12 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n         decl_with_detail(node, None)\n     }\n \n+    fn decl_with_ascription<N: NameOwner + AttrsOwner + TypeAscriptionOwner>(\n+        node: &N,\n+    ) -> Option<StructureNode> {\n+        decl_with_type_ref(node, node.ascribed_type())\n+    }\n+\n     fn decl_with_type_ref<N: NameOwner + AttrsOwner>(\n         node: &N,\n         type_ref: Option<&ast::TypeRef>,\n@@ -107,14 +113,14 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n             decl_with_detail(fn_def, Some(detail))\n         })\n         .visit(decl::<ast::StructDef>)\n-        .visit(|nfd: &ast::NamedFieldDef| decl_with_type_ref(nfd, nfd.type_ref()))\n         .visit(decl::<ast::EnumDef>)\n         .visit(decl::<ast::EnumVariant>)\n         .visit(decl::<ast::TraitDef>)\n         .visit(decl::<ast::Module>)\n         .visit(|td: &ast::TypeAliasDef| decl_with_type_ref(td, td.type_ref()))\n-        .visit(|cd: &ast::ConstDef| decl_with_type_ref(cd, cd.type_ref()))\n-        .visit(|sd: &ast::StaticDef| decl_with_type_ref(sd, sd.type_ref()))\n+        .visit(decl_with_ascription::<ast::NamedFieldDef>)\n+        .visit(decl_with_ascription::<ast::ConstDef>)\n+        .visit(decl_with_ascription::<ast::StaticDef>)\n         .visit(|im: &ast::ImplBlock| {\n             let target_type = im.target_type()?;\n             let target_trait = im.target_trait();"}, {"sha": "81c709bfb33ead8c4b70c4284758c5af95ad80c3", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442", "patch": "@@ -31,6 +31,12 @@ pub trait AstToken: AstNode {\n     }\n }\n \n+pub trait TypeAscriptionOwner: AstNode {\n+    fn ascribed_type(&self) -> Option<&TypeRef> {\n+        child_opt(self)\n+    }\n+}\n+\n pub trait NameOwner: AstNode {\n     fn name(&self) -> Option<&Name> {\n         child_opt(self)"}, {"sha": "7572225b86c7d388134157c031e9c9cddb26f423", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 9, "deletions": 27, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442", "patch": "@@ -628,11 +628,8 @@ impl ast::NameOwner for ConstDef {}\n impl ast::TypeParamsOwner for ConstDef {}\n impl ast::AttrsOwner for ConstDef {}\n impl ast::DocCommentsOwner for ConstDef {}\n-impl ConstDef {\n-    pub fn type_ref(&self) -> Option<&TypeRef> {\n-        super::child_opt(self)\n-    }\n-}\n+impl ast::TypeAscriptionOwner for ConstDef {}\n+impl ConstDef {}\n \n // ContinueExpr\n #[derive(Debug, PartialEq, Eq, Hash)]\n@@ -1767,15 +1764,12 @@ impl ToOwned for LetStmt {\n }\n \n \n+impl ast::TypeAscriptionOwner for LetStmt {}\n impl LetStmt {\n     pub fn pat(&self) -> Option<&Pat> {\n         super::child_opt(self)\n     }\n \n-    pub fn type_ref(&self) -> Option<&TypeRef> {\n-        super::child_opt(self)\n-    }\n-\n     pub fn initializer(&self) -> Option<&Expr> {\n         super::child_opt(self)\n     }\n@@ -2592,11 +2586,8 @@ impl ast::VisibilityOwner for NamedFieldDef {}\n impl ast::NameOwner for NamedFieldDef {}\n impl ast::AttrsOwner for NamedFieldDef {}\n impl ast::DocCommentsOwner for NamedFieldDef {}\n-impl NamedFieldDef {\n-    pub fn type_ref(&self) -> Option<&TypeRef> {\n-        super::child_opt(self)\n-    }\n-}\n+impl ast::TypeAscriptionOwner for NamedFieldDef {}\n+impl NamedFieldDef {}\n \n // NamedFieldDefList\n #[derive(Debug, PartialEq, Eq, Hash)]\n@@ -2774,14 +2765,11 @@ impl ToOwned for Param {\n }\n \n \n+impl ast::TypeAscriptionOwner for Param {}\n impl Param {\n     pub fn pat(&self) -> Option<&Pat> {\n         super::child_opt(self)\n     }\n-\n-    pub fn type_ref(&self) -> Option<&TypeRef> {\n-        super::child_opt(self)\n-    }\n }\n \n // ParamList\n@@ -3685,11 +3673,8 @@ impl ToOwned for SelfParam {\n }\n \n \n+impl ast::TypeAscriptionOwner for SelfParam {}\n impl SelfParam {\n-    pub fn type_ref(&self) -> Option<&TypeRef> {\n-        super::child_opt(self)\n-    }\n-\n     pub fn self_kw(&self) -> Option<&SelfKw> {\n         super::child_opt(self)\n     }\n@@ -3820,11 +3805,8 @@ impl ast::NameOwner for StaticDef {}\n impl ast::TypeParamsOwner for StaticDef {}\n impl ast::AttrsOwner for StaticDef {}\n impl ast::DocCommentsOwner for StaticDef {}\n-impl StaticDef {\n-    pub fn type_ref(&self) -> Option<&TypeRef> {\n-        super::child_opt(self)\n-    }\n-}\n+impl ast::TypeAscriptionOwner for StaticDef {}\n+impl StaticDef {}\n \n // Stmt\n #[derive(Debug, PartialEq, Eq, Hash)]"}, {"sha": "b7a2d1c01b32496af49db9ed3f2e721a1c7c47ec", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=2e2a6dd2fbeb4da16e602fa1902ab6bbd850b442", "patch": "@@ -271,7 +271,15 @@ Grammar(\n             ]\n         ),\n         \"NamedFieldDefList\": (collections: [[\"fields\", \"NamedFieldDef\"]]),\n-        \"NamedFieldDef\": ( traits: [\"VisibilityOwner\", \"NameOwner\", \"AttrsOwner\", \"DocCommentsOwner\"], options: [\"TypeRef\"] ),\n+        \"NamedFieldDef\": (\n+            traits: [\n+                \"VisibilityOwner\",\n+                \"NameOwner\",\n+                \"AttrsOwner\",\n+                \"DocCommentsOwner\",\n+                \"TypeAscriptionOwner\"\n+            ]\n+        ),\n         \"PosFieldDefList\": (collections: [[\"fields\", \"PosFieldDef\"]]),\n         \"PosFieldDef\": ( traits: [\"VisibilityOwner\", \"AttrsOwner\"], options: [\"TypeRef\"]),\n         \"EnumDef\": ( traits: [\n@@ -298,19 +306,19 @@ Grammar(\n                 \"NameOwner\",\n                 \"TypeParamsOwner\",\n                 \"AttrsOwner\",\n-                \"DocCommentsOwner\"\n+                \"DocCommentsOwner\",\n+                \"TypeAscriptionOwner\",\n             ],\n-            options: [\"TypeRef\"]\n         ),\n         \"StaticDef\": (\n             traits: [\n                 \"VisibilityOwner\",\n                 \"NameOwner\",\n                 \"TypeParamsOwner\",\n                 \"AttrsOwner\",\n-                \"DocCommentsOwner\"\n+                \"DocCommentsOwner\",\n+                \"TypeAscriptionOwner\",\n             ],\n-            options: [\"TypeRef\"]\n         ),\n         \"TypeAliasDef\": (\n             traits: [\n@@ -569,11 +577,15 @@ Grammar(\n         \"ExprStmt\": (\n             options: [ [\"expr\", \"Expr\"] ]\n         ),\n-        \"LetStmt\": ( options: [\n-            [\"pat\", \"Pat\"],\n-            [\"type_ref\", \"TypeRef\"],\n-            [\"initializer\", \"Expr\"],\n-        ]),\n+        \"LetStmt\": (\n+            options: [\n+                [\"pat\", \"Pat\"],\n+                [\"initializer\", \"Expr\"],\n+            ],\n+            traits: [\n+                \"TypeAscriptionOwner\",\n+            ]\n+        ),\n         \"Condition\": (\n             options: [ \"Pat\", \"Expr\" ]\n         ),\n@@ -595,10 +607,18 @@ Grammar(\n                 [\"params\", \"Param\"]\n             ]\n         ),\n-        \"SelfParam\": (options: [\"TypeRef\", \"SelfKw\"]),\n+        \"SelfParam\": (\n+            options: [\"SelfKw\"],\n+            traits: [\n+                \"TypeAscriptionOwner\",\n+            ]\n+        ),\n         \"SelfKw\": (),\n         \"Param\": (\n-            options: [ \"Pat\", \"TypeRef\" ],\n+            options: [ \"Pat\" ],\n+            traits: [\n+                \"TypeAscriptionOwner\",\n+            ]\n         ),\n         \"UseItem\": (\n             traits: [\"AttrsOwner\"],"}]}