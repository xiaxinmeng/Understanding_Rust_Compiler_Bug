{"sha": "63a865296141fb883352f30c603d46299d49e7c1", "node_id": "C_kwDOAAsO6NoAKDYzYTg2NTI5NjE0MWZiODgzMzUyZjMwYzYwM2Q0NjI5OWQ0OWU3YzE", "commit": {"author": {"name": "ltdk", "email": "usr@ltdk.xyz", "date": "2022-04-16T00:53:50Z"}, "committer": {"name": "ltdk", "email": "usr@ltdk.xyz", "date": "2022-04-16T00:53:50Z"}, "message": "MaybeUninit array cleanup\n\n* Links MaybeUninit::uninit_array to meta-tracking issue\n* Links MaybeUninit::array_assume_init to meta-tracking issue\n* Unstably constifies MaybeUninit::array_assume_init", "tree": {"sha": "22a1292a46355a92caab0324712e144245dac680", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22a1292a46355a92caab0324712e144245dac680"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63a865296141fb883352f30c603d46299d49e7c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63a865296141fb883352f30c603d46299d49e7c1", "html_url": "https://github.com/rust-lang/rust/commit/63a865296141fb883352f30c603d46299d49e7c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63a865296141fb883352f30c603d46299d49e7c1/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f391b84552f210adec7893b50c5da74f9362ae4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f391b84552f210adec7893b50c5da74f9362ae4", "html_url": "https://github.com/rust-lang/rust/commit/3f391b84552f210adec7893b50c5da74f9362ae4"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "dafd07b161785f87c2fff70e2b9aa6c258b8e8ba", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63a865296141fb883352f30c603d46299d49e7c1/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63a865296141fb883352f30c603d46299d49e7c1/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=63a865296141fb883352f30c603d46299d49e7c1", "patch": "@@ -117,6 +117,7 @@\n #![feature(const_intrinsic_copy)]\n #![feature(const_intrinsic_forget)]\n #![feature(const_likely)]\n+#![feature(const_maybe_uninit_uninit_array)]\n #![feature(const_maybe_uninit_as_mut_ptr)]\n #![feature(const_maybe_uninit_assume_init)]\n #![feature(const_num_from_num)]"}, {"sha": "cac7f435573a52500efb05f678a6fceda527ff5b", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/63a865296141fb883352f30c603d46299d49e7c1/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63a865296141fb883352f30c603d46299d49e7c1/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=63a865296141fb883352f30c603d46299d49e7c1", "patch": "@@ -350,13 +350,13 @@ impl<T> MaybeUninit<T> {\n     /// let mut buf: [MaybeUninit<u8>; 32] = MaybeUninit::uninit_array();\n     /// let data = read(&mut buf);\n     /// ```\n-    #[unstable(feature = \"maybe_uninit_uninit_array\", issue = \"none\")]\n-    #[rustc_const_unstable(feature = \"maybe_uninit_uninit_array\", issue = \"none\")]\n+    #[unstable(feature = \"maybe_uninit_uninit_array\", issue = \"96097\")]\n+    #[rustc_const_unstable(feature = \"const_maybe_uninit_uninit_array\", issue = \"96097\")]\n     #[must_use]\n     #[inline(always)]\n-    pub const fn uninit_array<const LEN: usize>() -> [Self; LEN] {\n+    pub const fn uninit_array<const N: usize>() -> [Self; N] {\n         // SAFETY: An uninitialized `[MaybeUninit<_>; LEN]` is valid.\n-        unsafe { MaybeUninit::<[MaybeUninit<T>; LEN]>::uninit().assume_init() }\n+        unsafe { MaybeUninit::<[MaybeUninit<T>; N]>::uninit().assume_init() }\n     }\n \n     /// Creates a new `MaybeUninit<T>` in an uninitialized state, with the memory being\n@@ -942,19 +942,24 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// assert_eq!(array, [0, 1, 2]);\n     /// ```\n-    #[unstable(feature = \"maybe_uninit_array_assume_init\", issue = \"80908\")]\n+    #[unstable(feature = \"maybe_uninit_array_assume_init\", issue = \"96097\")]\n+    #[rustc_const_unstable(feature = \"const_maybe_uninit_array_assume_init\", issue = \"96097\")]\n     #[inline(always)]\n     #[track_caller]\n-    pub unsafe fn array_assume_init<const N: usize>(array: [Self; N]) -> [T; N] {\n+    pub const unsafe fn array_assume_init<const N: usize>(array: [Self; N]) -> [T; N] {\n         // SAFETY:\n         // * The caller guarantees that all elements of the array are initialized\n         // * `MaybeUninit<T>` and T are guaranteed to have the same layout\n         // * `MaybeUninit` does not drop, so there are no double-frees\n         // And thus the conversion is safe\n-        unsafe {\n+        let ret = unsafe {\n             intrinsics::assert_inhabited::<[T; N]>();\n             (&array as *const _ as *const [T; N]).read()\n-        }\n+        };\n+\n+        // FIXME: required to avoid `~const Destruct` bound\n+        super::forget(array);\n+        ret\n     }\n \n     /// Assuming all the elements are initialized, get a slice to them."}]}