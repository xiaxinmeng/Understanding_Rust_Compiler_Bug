{"sha": "64f202bdd7f74b081e08f2b5faee4bd91c9b44a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZjIwMmJkZDdmNzRiMDgxZTA4ZjJiNWZhZWU0YmQ5MWM5YjQ0YTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T12:32:27Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T12:32:27Z"}, "message": "move variant public api to api", "tree": {"sha": "33a664d30f32657fdc652fc32efb4665f25c90da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33a664d30f32657fdc652fc32efb4665f25c90da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64f202bdd7f74b081e08f2b5faee4bd91c9b44a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64f202bdd7f74b081e08f2b5faee4bd91c9b44a8", "html_url": "https://github.com/rust-lang/rust/commit/64f202bdd7f74b081e08f2b5faee4bd91c9b44a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64f202bdd7f74b081e08f2b5faee4bd91c9b44a8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d0ab52212f62345ba9f9d5040c553e59460b349", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d0ab52212f62345ba9f9d5040c553e59460b349", "html_url": "https://github.com/rust-lang/rust/commit/2d0ab52212f62345ba9f9d5040c553e59460b349"}], "stats": {"total": 62, "additions": 28, "deletions": 34}, "files": [{"sha": "d56570754830bba592d9adabcb5dbcbec274eaf5", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/64f202bdd7f74b081e08f2b5faee4bd91c9b44a8/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f202bdd7f74b081e08f2b5faee4bd91c9b44a8/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=64f202bdd7f74b081e08f2b5faee4bd91c9b44a8", "patch": "@@ -26,14 +26,6 @@ impl StructData {\n         let variant_data = Arc::new(variant_data);\n         StructData { name, variant_data }\n     }\n-\n-    pub fn name(&self) -> Option<&Name> {\n-        self.name.as_ref()\n-    }\n-\n-    pub fn variant_data(&self) -> &Arc<VariantData> {\n-        &self.variant_data\n-    }\n }\n \n impl Enum {\n@@ -68,7 +60,7 @@ impl EnumData {\n }\n \n impl VariantData {\n-    pub fn new(flavor: StructFlavor) -> Self {\n+    pub(crate) fn new(flavor: StructFlavor) -> Self {\n         match flavor {\n             StructFlavor::Tuple(fl) => {\n                 let fields = fl\n@@ -101,29 +93,4 @@ impl VariantData {\n             .find(|f| f.name() == field_name)\n             .map(|f| f.type_ref())\n     }\n-\n-    pub fn fields(&self) -> &[StructField] {\n-        match *self {\n-            VariantData::Struct(ref fields) | VariantData::Tuple(ref fields) => fields,\n-            _ => &[],\n-        }\n-    }\n-    pub fn is_struct(&self) -> bool {\n-        match self {\n-            VariantData::Struct(..) => true,\n-            _ => false,\n-        }\n-    }\n-    pub fn is_tuple(&self) -> bool {\n-        match self {\n-            VariantData::Tuple(..) => true,\n-            _ => false,\n-        }\n-    }\n-    pub fn is_unit(&self) -> bool {\n-        match self {\n-            VariantData::Unit => true,\n-            _ => false,\n-        }\n-    }\n }"}, {"sha": "f06f1ae663471ac4f1177d7193426538aff68c10", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/64f202bdd7f74b081e08f2b5faee4bd91c9b44a8/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f202bdd7f74b081e08f2b5faee4bd91c9b44a8/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=64f202bdd7f74b081e08f2b5faee4bd91c9b44a8", "patch": "@@ -143,6 +143,33 @@ pub enum VariantData {\n     Unit,\n }\n \n+impl VariantData {\n+    pub fn fields(&self) -> &[StructField] {\n+        match self {\n+            VariantData::Struct(fields) | VariantData::Tuple(fields) => fields,\n+            _ => &[],\n+        }\n+    }\n+    pub fn is_struct(&self) -> bool {\n+        match self {\n+            VariantData::Struct(..) => true,\n+            _ => false,\n+        }\n+    }\n+    pub fn is_tuple(&self) -> bool {\n+        match self {\n+            VariantData::Tuple(..) => true,\n+            _ => false,\n+        }\n+    }\n+    pub fn is_unit(&self) -> bool {\n+        match self {\n+            VariantData::Unit => true,\n+            _ => false,\n+        }\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Struct {\n     pub(crate) def_id: DefId,"}]}