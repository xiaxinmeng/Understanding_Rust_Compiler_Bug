{"sha": "c22e9014035c161309e1e13455eb9cdc80c3ee1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMmU5MDE0MDM1YzE2MTMwOWUxZTEzNDU1ZWI5Y2RjODBjM2VlMWI=", "commit": {"author": {"name": "Bernardo", "email": "berublan@gmail.com", "date": "2018-12-08T17:26:19Z"}, "committer": {"name": "Bernardo", "email": "berublan@gmail.com", "date": "2018-12-08T17:26:19Z"}, "message": "check for empty range when extending in comment", "tree": {"sha": "df80d28cdeaeab8b867b12422cbe0e2941df11ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df80d28cdeaeab8b867b12422cbe0e2941df11ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c22e9014035c161309e1e13455eb9cdc80c3ee1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c22e9014035c161309e1e13455eb9cdc80c3ee1b", "html_url": "https://github.com/rust-lang/rust/commit/c22e9014035c161309e1e13455eb9cdc80c3ee1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c22e9014035c161309e1e13455eb9cdc80c3ee1b/comments", "author": {"login": "vemoo", "id": 4866051, "node_id": "MDQ6VXNlcjQ4NjYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4866051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemoo", "html_url": "https://github.com/vemoo", "followers_url": "https://api.github.com/users/vemoo/followers", "following_url": "https://api.github.com/users/vemoo/following{/other_user}", "gists_url": "https://api.github.com/users/vemoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemoo/subscriptions", "organizations_url": "https://api.github.com/users/vemoo/orgs", "repos_url": "https://api.github.com/users/vemoo/repos", "events_url": "https://api.github.com/users/vemoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vemoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vemoo", "id": 4866051, "node_id": "MDQ6VXNlcjQ4NjYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4866051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemoo", "html_url": "https://github.com/vemoo", "followers_url": "https://api.github.com/users/vemoo/followers", "following_url": "https://api.github.com/users/vemoo/following{/other_user}", "gists_url": "https://api.github.com/users/vemoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemoo/subscriptions", "organizations_url": "https://api.github.com/users/vemoo/orgs", "repos_url": "https://api.github.com/users/vemoo/repos", "events_url": "https://api.github.com/users/vemoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vemoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66f656134f349f943905cfe44f5005263dc635f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/66f656134f349f943905cfe44f5005263dc635f9", "html_url": "https://github.com/rust-lang/rust/commit/66f656134f349f943905cfe44f5005263dc635f9"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "b4227716d5e635e8d9a617dd565a2337824ab34d", "filename": "crates/ra_editor/src/extend_selection.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c22e9014035c161309e1e13455eb9cdc80c3ee1b/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c22e9014035c161309e1e13455eb9cdc80c3ee1b/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs?ref=c22e9014035c161309e1e13455eb9cdc80c3ee1b", "patch": "@@ -54,7 +54,12 @@ fn extend_single_word_in_comment(leaf: SyntaxNodeRef, offset: TextUnit) -> Optio\n     let from: TextUnit = (start_idx + 1).into();\n     let to: TextUnit = (cursor_position + end_idx).into();\n \n-    Some(TextRange::from_to(from, to) + leaf.range().start())\n+    let range = TextRange::from_to(from, to);\n+    if range.is_empty() {\n+        None\n+    } else {\n+        Some(range + leaf.range().start())\n+    }\n }\n \n fn extend_ws(root: SyntaxNodeRef, ws: SyntaxNodeRef, offset: TextUnit) -> TextRange {\n@@ -181,6 +186,20 @@ fn bar(){}\n     \"#,\n             &[\"// 1 + 1\", \"// fn foo() {\\n// 1 + 1\\n// }\"],\n         );\n+\n+        do_check(\n+            r#\"\n+// #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n+// pub enum Direction {\n+//  <|>   Next,\n+//     Prev\n+// }\n+\"#,\n+            &[\n+                \"//     Next,\",\n+                \"// #[derive(Debug, Clone, Copy, PartialEq, Eq)]\\n// pub enum Direction {\\n//     Next,\\n//     Prev\\n// }\",\n+            ],\n+        );\n     }\n \n     #[test]"}]}