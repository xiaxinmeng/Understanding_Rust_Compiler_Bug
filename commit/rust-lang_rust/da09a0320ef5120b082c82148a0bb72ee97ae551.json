{"sha": "da09a0320ef5120b082c82148a0bb72ee97ae551", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMDlhMDMyMGVmNTEyMGIwODJjODIxNDhhMGJiNzJlZTk3YWU1NTE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-11T23:18:02Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-11T23:18:02Z"}, "message": "rustc: Remove a few kludges intended to work around rustboot's lack of structural comparison from equal_type_structures()", "tree": {"sha": "1f1bfdc00bc7e1deae8fce22cd44f88d25067065", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f1bfdc00bc7e1deae8fce22cd44f88d25067065"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da09a0320ef5120b082c82148a0bb72ee97ae551", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da09a0320ef5120b082c82148a0bb72ee97ae551", "html_url": "https://github.com/rust-lang/rust/commit/da09a0320ef5120b082c82148a0bb72ee97ae551", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da09a0320ef5120b082c82148a0bb72ee97ae551/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6953841e25ab7f52b77fc6a37d01cb071ace21b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6953841e25ab7f52b77fc6a37d01cb071ace21b0", "html_url": "https://github.com/rust-lang/rust/commit/6953841e25ab7f52b77fc6a37d01cb071ace21b0"}], "stats": {"total": 78, "additions": 4, "deletions": 74}, "files": [{"sha": "3cd081f638baf4bbed4fa2767f48495f6f593b16", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 74, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/da09a0320ef5120b082c82148a0bb72ee97ae551/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da09a0320ef5120b082c82148a0bb72ee97ae551/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=da09a0320ef5120b082c82148a0bb72ee97ae551", "patch": "@@ -1160,78 +1160,8 @@ fn hash_ty(&t typ) -> uint { ret typ.hash; }\n // Type equality. This function is private to this module (and slow); external\n // users should use `eq_ty()` instead.\n fn equal_type_structures(&sty a, &sty b) -> bool {\n-\n-    fn equal_proto(ast.proto a, ast.proto b) -> bool {\n-        alt (a) {\n-            case (ast.proto_iter) {\n-                alt (b) {\n-                    case (ast.proto_iter) { ret true; }\n-                    case (_) { ret false; }\n-                }\n-            }\n-            case (ast.proto_fn) {\n-                alt (b) {\n-                    case (ast.proto_fn) { ret true; }\n-                    case (_) { ret false; }\n-                }\n-            }\n-        }\n-    }\n-\n-    fn equal_abi(ast.native_abi a, ast.native_abi b) -> bool {\n-        alt (a) {\n-            case (ast.native_abi_rust) {\n-                alt (b) {\n-                    case (ast.native_abi_rust) { ret true; }\n-                    case (_) { ret false; }\n-                }\n-            }\n-            case (ast.native_abi_rust_intrinsic) {\n-                alt (b) {\n-                    case (ast.native_abi_rust_intrinsic) { ret true; }\n-                    case (_) { ret false; }\n-                }\n-            }\n-            case (ast.native_abi_cdecl) {\n-                alt (b) {\n-                    case (ast.native_abi_cdecl) { ret true; }\n-                    case (_) { ret false; }\n-                }\n-            }\n-            case (ast.native_abi_llvm) {\n-                alt (b) {\n-                    case (ast.native_abi_llvm) { ret true; }\n-                    case (_) { ret false; }\n-                }\n-            }\n-        }\n-    }\n-\n-    fn equal_mut(ast.mutability a, ast.mutability b) -> bool {\n-        alt (a) {\n-            case (ast.mut) {\n-                alt (b) {\n-                    case (ast.mut) { ret true; }\n-                    case (_) { ret false; }\n-                }\n-            }\n-            case (ast.imm) {\n-                alt (b) {\n-                    case (ast.imm) { ret true; }\n-                    case (_) { ret false; }\n-                }\n-            }\n-            case (ast.maybe_mut) {\n-                alt (b) {\n-                    case (ast.maybe_mut) { ret true; }\n-                    case (_) { ret false; }\n-                }\n-            }\n-        }\n-    }\n-\n     fn equal_mt(&mt a, &mt b) -> bool {\n-        ret equal_mut(a.mut, b.mut) && eq_ty(a.ty, b.ty);\n+        ret a.mut == b.mut && eq_ty(a.ty, b.ty);\n     }\n \n     fn equal_fn(&vec[arg] args_a, &t rty_a,\n@@ -1390,7 +1320,7 @@ fn equal_type_structures(&sty a, &sty b) -> bool {\n         case (ty_fn(?p_a, ?args_a, ?rty_a)) {\n             alt (b) {\n                 case (ty_fn(?p_b, ?args_b, ?rty_b)) {\n-                    ret equal_proto(p_a, p_b) &&\n+                    ret p_a == p_b &&\n                         equal_fn(args_a, rty_a, args_b, rty_b);\n                 }\n                 case (_) { ret false; }\n@@ -1399,7 +1329,7 @@ fn equal_type_structures(&sty a, &sty b) -> bool {\n         case (ty_native_fn(?abi_a, ?args_a, ?rty_a)) {\n             alt (b) {\n                 case (ty_native_fn(?abi_b, ?args_b, ?rty_b)) {\n-                    ret equal_abi(abi_a, abi_b) &&\n+                    ret abi_a == abi_b &&\n                         equal_fn(args_a, rty_a, args_b, rty_b);\n                 }\n                 case (_) { ret false; }\n@@ -1413,7 +1343,7 @@ fn equal_type_structures(&sty a, &sty b) -> bool {\n                     auto i = 0u;\n                     while (i < len) {\n                         auto m_a = methods_a.(i); auto m_b = methods_b.(i);\n-                        if (!equal_proto(m_a.proto, m_b.proto) ||\n+                        if (m_a.proto != m_b.proto ||\n                                 !Str.eq(m_a.ident, m_b.ident) ||\n                                 !equal_fn(m_a.inputs, m_a.output,\n                                           m_b.inputs, m_b.output)) {"}]}