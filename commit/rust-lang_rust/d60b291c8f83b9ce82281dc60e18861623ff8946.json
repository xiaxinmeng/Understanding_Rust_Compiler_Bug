{"sha": "d60b291c8f83b9ce82281dc60e18861623ff8946", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MGIyOTFjOGY4M2I5Y2U4MjI4MWRjNjBlMTg4NjE2MjNmZjg5NDY=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-06-13T21:15:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-13T21:15:03Z"}, "message": "Rollup merge of #42636 - GuillaumeGomez:new-error-codes-next2, r=eddyb\n\nAdd E0617\n\nPart of #42229.\n\ncc @Susurrus @frewsxcv @QuietMisdreavus", "tree": {"sha": "58f53c8bf266cbf43add06aa69b95493e9a4687c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58f53c8bf266cbf43add06aa69b95493e9a4687c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d60b291c8f83b9ce82281dc60e18861623ff8946", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d60b291c8f83b9ce82281dc60e18861623ff8946", "html_url": "https://github.com/rust-lang/rust/commit/d60b291c8f83b9ce82281dc60e18861623ff8946", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d60b291c8f83b9ce82281dc60e18861623ff8946/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "664ab45796bfd23cb04bcf49eb8ec2b9babc7f39", "url": "https://api.github.com/repos/rust-lang/rust/commits/664ab45796bfd23cb04bcf49eb8ec2b9babc7f39", "html_url": "https://github.com/rust-lang/rust/commit/664ab45796bfd23cb04bcf49eb8ec2b9babc7f39"}, {"sha": "a5dc96397498cf2c0a05407320ff33d939b652e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5dc96397498cf2c0a05407320ff33d939b652e3", "html_url": "https://github.com/rust-lang/rust/commit/a5dc96397498cf2c0a05407320ff33d939b652e3"}], "stats": {"total": 97, "additions": 70, "deletions": 27}, "files": [{"sha": "c12df083c30e6875da3d06f8cf9b777b8a0df607", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d60b291c8f83b9ce82281dc60e18861623ff8946/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d60b291c8f83b9ce82281dc60e18861623ff8946/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d60b291c8f83b9ce82281dc60e18861623ff8946", "patch": "@@ -2553,42 +2553,32 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // We also need to make sure we at least write the ty of the other\n         // arguments which we skipped above.\n         if variadic {\n+            fn variadic_error<'tcx>(s: &Session, span: Span, t: Ty<'tcx>, cast_ty: &str) {\n+                type_error_struct!(s, span, t, E0617,\n+                                   \"can't pass `{}` to variadic function, cast to `{}`\",\n+                                   t, cast_ty).emit();\n+            }\n+\n             for arg in args.iter().skip(expected_arg_count) {\n                 let arg_ty = self.check_expr(&arg);\n \n                 // There are a few types which get autopromoted when passed via varargs\n                 // in C but we just error out instead and require explicit casts.\n-                let arg_ty = self.structurally_resolved_type(arg.span,\n-                                                             arg_ty);\n+                let arg_ty = self.structurally_resolved_type(arg.span, arg_ty);\n                 match arg_ty.sty {\n                     ty::TyFloat(ast::FloatTy::F32) => {\n-                        self.type_error_message(arg.span, |t| {\n-                            format!(\"can't pass an `{}` to variadic \\\n-                                     function, cast to `c_double`\", t)\n-                        }, arg_ty);\n+                        variadic_error(tcx.sess, arg.span, arg_ty, \"c_double\");\n                     }\n                     ty::TyInt(ast::IntTy::I8) | ty::TyInt(ast::IntTy::I16) | ty::TyBool => {\n-                        self.type_error_message(arg.span, |t| {\n-                            format!(\"can't pass `{}` to variadic \\\n-                                     function, cast to `c_int`\",\n-                                           t)\n-                        }, arg_ty);\n+                        variadic_error(tcx.sess, arg.span, arg_ty, \"c_int\");\n                     }\n                     ty::TyUint(ast::UintTy::U8) | ty::TyUint(ast::UintTy::U16) => {\n-                        self.type_error_message(arg.span, |t| {\n-                            format!(\"can't pass `{}` to variadic \\\n-                                     function, cast to `c_uint`\",\n-                                           t)\n-                        }, arg_ty);\n+                        variadic_error(tcx.sess, arg.span, arg_ty, \"c_uint\");\n                     }\n                     ty::TyFnDef(.., f) => {\n                         let ptr_ty = self.tcx.mk_fn_ptr(f);\n                         let ptr_ty = self.resolve_type_vars_if_possible(&ptr_ty);\n-                        self.type_error_message(arg.span,\n-                                                |t| {\n-                            format!(\"can't pass `{}` to variadic \\\n-                                     function, cast to `{}`\", t, ptr_ty)\n-                        }, arg_ty);\n+                        variadic_error(tcx.sess, arg.span, arg_ty, &format!(\"{}\", ptr_ty));\n                     }\n                     _ => {}\n                 }"}, {"sha": "76c664d7997a4fe69652ccf9d07798998f6351b7", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d60b291c8f83b9ce82281dc60e18861623ff8946/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d60b291c8f83b9ce82281dc60e18861623ff8946/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=d60b291c8f83b9ce82281dc60e18861623ff8946", "patch": "@@ -4152,6 +4152,27 @@ println!(\"x: {}, y: {}\", variable.x, variable.y);\n For more information see The Rust Book: https://doc.rust-lang.org/book/\n \"##,\n \n+E0617: r##\"\n+Attempted to pass an invalid type of variable into a variadic function.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0617\n+extern {\n+    fn printf(c: *const i8, ...);\n+}\n+\n+unsafe {\n+    printf(::std::ptr::null(), 0f32);\n+    // error: can't pass an `f32` to variadic function, cast to `c_double`\n+}\n+```\n+\n+To fix this error, you need to pass variables corresponding to C types as much\n+as possible. For better explanations, see The Rust Book:\n+https://doc.rust-lang.org/book/\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "7b769ff4ae2e09f8d956f87ebe73939e03bdb6dc", "filename": "src/test/compile-fail/E0617.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d60b291c8f83b9ce82281dc60e18861623ff8946/src%2Ftest%2Fcompile-fail%2FE0617.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d60b291c8f83b9ce82281dc60e18861623ff8946/src%2Ftest%2Fcompile-fail%2FE0617.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0617.rs?ref=d60b291c8f83b9ce82281dc60e18861623ff8946", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+extern {\n+    fn printf(c: *const i8, ...);\n+}\n+\n+fn main() {\n+    unsafe {\n+        printf(::std::ptr::null(), 0f32);\n+        //~^ ERROR can't pass `f32` to variadic function, cast to `c_double` [E0617]\n+        printf(::std::ptr::null(), 0i8);\n+        //~^ ERROR can't pass `i8` to variadic function, cast to `c_int` [E0617]\n+        printf(::std::ptr::null(), 0i16);\n+        //~^ ERROR can't pass `i16` to variadic function, cast to `c_int` [E0617]\n+        printf(::std::ptr::null(), 0u8);\n+        //~^ ERROR can't pass `u8` to variadic function, cast to `c_uint` [E0617]\n+        printf(::std::ptr::null(), 0u16);\n+        //~^ ERROR can't pass `u16` to variadic function, cast to `c_uint` [E0617]\n+        printf(::std::ptr::null(), printf);\n+        //~^ ERROR can't pass `unsafe extern \"C\" fn(*const i8, ...) {printf}` to variadic function, cast to `unsafe extern \"C\" fn(*const i8, ...)` [E0617]\n+    }\n+}"}, {"sha": "fb102027180f0d997cc6189421dfa0675c4e8ced", "filename": "src/test/compile-fail/variadic-ffi-3.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d60b291c8f83b9ce82281dc60e18861623ff8946/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d60b291c8f83b9ce82281dc60e18861623ff8946/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi-3.rs?ref=d60b291c8f83b9ce82281dc60e18861623ff8946", "patch": "@@ -35,11 +35,11 @@ fn main() {\n         //~| found type `extern \"C\" fn(isize, u8) {bar}`\n         //~| NOTE: expected variadic fn, found non-variadic function\n \n-        foo(1, 2, 3f32); //~ ERROR: can't pass an `f32` to variadic function, cast to `c_double`\n-        foo(1, 2, true); //~ ERROR: can't pass `bool` to variadic function, cast to `c_int`\n-        foo(1, 2, 1i8); //~ ERROR: can't pass `i8` to variadic function, cast to `c_int`\n-        foo(1, 2, 1u8); //~ ERROR: can't pass `u8` to variadic function, cast to `c_uint`\n-        foo(1, 2, 1i16); //~ ERROR: can't pass `i16` to variadic function, cast to `c_int`\n-        foo(1, 2, 1u16); //~ ERROR: can't pass `u16` to variadic function, cast to `c_uint`\n+        foo(1, 2, 3f32); //~ ERROR can't pass `f32` to variadic function, cast to `c_double`\n+        foo(1, 2, true); //~ ERROR can't pass `bool` to variadic function, cast to `c_int`\n+        foo(1, 2, 1i8); //~ ERROR can't pass `i8` to variadic function, cast to `c_int`\n+        foo(1, 2, 1u8); //~ ERROR can't pass `u8` to variadic function, cast to `c_uint`\n+        foo(1, 2, 1i16); //~ ERROR can't pass `i16` to variadic function, cast to `c_int`\n+        foo(1, 2, 1u16); //~ ERROR can't pass `u16` to variadic function, cast to `c_uint`\n     }\n }"}]}