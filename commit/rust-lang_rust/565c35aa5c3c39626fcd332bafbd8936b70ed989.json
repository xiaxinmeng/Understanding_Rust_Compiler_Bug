{"sha": "565c35aa5c3c39626fcd332bafbd8936b70ed989", "node_id": "C_kwDOAAsO6NoAKDU2NWMzNWFhNWMzYzM5NjI2ZmNkMzMyYmFmYmQ4OTM2YjcwZWQ5ODk", "commit": {"author": {"name": "Ding Xiang Fei", "email": "dingxiangfei2009@protonmail.ch", "date": "2022-10-05T14:24:12Z"}, "committer": {"name": "Ding Xiang Fei", "email": "dingxiangfei2009@protonmail.ch", "date": "2022-10-05T14:24:12Z"}, "message": "fix doc and dedup diverge_cleanup", "tree": {"sha": "bc5a9c4b3fc0009be39d2b63d3cb8b081f9e3587", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc5a9c4b3fc0009be39d2b63d3cb8b081f9e3587"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/565c35aa5c3c39626fcd332bafbd8936b70ed989", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE0u8S3YU336XkLsQOPNdIZH7vY1kFAmM9k4wACgkQPNdIZH7v\nY1l3eRAAlFXNuMXK+u1FeUb87w1V2wvYDzR71Zu+2UIi5r0+eaCDX1NlS99Xq7Mp\nVqmt7cKA48uxDlnpV0/fvS4CF4GobyM3hWs0zqvqwBEkr8zWj5K9diPAqrJwSYNj\nMDvkO9rADSlJJ4LrtnyvAXcShEE5falbdV5TQgNsJA/SSC48WHdgxsKzr70FHQxr\n1WY3mJGNVwUcJELO5xv9S0sY18h3Y0mIKnxf4pl0HE3JbQuPu54MsiSwGb6IJYth\ntGORrwKCqfAxj2FwNPIQf6KBVPWTAWFz3cVTk7DJRl1krzIjFn6o++xNilpWz4a6\nvhZ8A0tMzsHEICA1zuqEldk8PI13y2hXYedfVFL+mDTb8m2fYtAy7yjmwk/AvcSQ\nEcE7RDoATIx7/0KK8Fc+wHiAN7/XC0u2UkaYW1iwRi2UyNf+lHVi8dc/VfrXiz+X\njQSsmnR+ipGEzK4MWLduuVOn+uiWqjUPFGtydxu0ZBbCwKEg4PC9mK2bIdRViOcB\njpLjftdLBz3KVqPpRYHrNeCuXlEZfP+J/fzvOWXJ/YAWUh/Za+B/Dr/NiZ+3tLHS\nCHylYhQbn4ZWhM0kN7xqVlCc+ixPZFmgk5OpG2f4onecZ7Xx5qy683wlnBVxpLNY\n01Gr6ReX98FRx3mPD066h12qgbP3D8/LuSx1dA2noDlkjDSixT8=\n=aZBq\n-----END PGP SIGNATURE-----", "payload": "tree bc5a9c4b3fc0009be39d2b63d3cb8b081f9e3587\nparent 5131e9db07fb6cd158cf5bf2aa9fefbad3af1d2b\nauthor Ding Xiang Fei <dingxiangfei2009@protonmail.ch> 1664979852 +0800\ncommitter Ding Xiang Fei <dingxiangfei2009@protonmail.ch> 1664979852 +0800\n\nfix doc and dedup diverge_cleanup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/565c35aa5c3c39626fcd332bafbd8936b70ed989", "html_url": "https://github.com/rust-lang/rust/commit/565c35aa5c3c39626fcd332bafbd8936b70ed989", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/565c35aa5c3c39626fcd332bafbd8936b70ed989/comments", "author": {"login": "dingxiangfei2009", "id": 6884440, "node_id": "MDQ6VXNlcjY4ODQ0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6884440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dingxiangfei2009", "html_url": "https://github.com/dingxiangfei2009", "followers_url": "https://api.github.com/users/dingxiangfei2009/followers", "following_url": "https://api.github.com/users/dingxiangfei2009/following{/other_user}", "gists_url": "https://api.github.com/users/dingxiangfei2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/dingxiangfei2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dingxiangfei2009/subscriptions", "organizations_url": "https://api.github.com/users/dingxiangfei2009/orgs", "repos_url": "https://api.github.com/users/dingxiangfei2009/repos", "events_url": "https://api.github.com/users/dingxiangfei2009/events{/privacy}", "received_events_url": "https://api.github.com/users/dingxiangfei2009/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dingxiangfei2009", "id": 6884440, "node_id": "MDQ6VXNlcjY4ODQ0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6884440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dingxiangfei2009", "html_url": "https://github.com/dingxiangfei2009", "followers_url": "https://api.github.com/users/dingxiangfei2009/followers", "following_url": "https://api.github.com/users/dingxiangfei2009/following{/other_user}", "gists_url": "https://api.github.com/users/dingxiangfei2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/dingxiangfei2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dingxiangfei2009/subscriptions", "organizations_url": "https://api.github.com/users/dingxiangfei2009/orgs", "repos_url": "https://api.github.com/users/dingxiangfei2009/repos", "events_url": "https://api.github.com/users/dingxiangfei2009/events{/privacy}", "received_events_url": "https://api.github.com/users/dingxiangfei2009/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5131e9db07fb6cd158cf5bf2aa9fefbad3af1d2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5131e9db07fb6cd158cf5bf2aa9fefbad3af1d2b", "html_url": "https://github.com/rust-lang/rust/commit/5131e9db07fb6cd158cf5bf2aa9fefbad3af1d2b"}], "stats": {"total": 27, "additions": 4, "deletions": 23}, "files": [{"sha": "3cebd5ebed660dac13d99c560af352e708170ddb", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/565c35aa5c3c39626fcd332bafbd8936b70ed989/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565c35aa5c3c39626fcd332bafbd8936b70ed989/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=565c35aa5c3c39626fcd332bafbd8936b70ed989", "patch": "@@ -999,31 +999,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Returns the [DropIdx] for the innermost drop if the function unwound at\n     /// this point. The `DropIdx` will be created if it doesn't already exist.\n     fn diverge_cleanup(&mut self) -> DropIdx {\n-        let is_generator = self.generator_kind.is_some();\n-        let (uncached_scope, mut cached_drop) = self\n-            .scopes\n-            .scopes\n-            .iter()\n-            .enumerate()\n-            .rev()\n-            .find_map(|(scope_idx, scope)| {\n-                scope.cached_unwind_block.map(|cached_block| (scope_idx + 1, cached_block))\n-            })\n-            .unwrap_or((0, ROOT_NODE));\n-\n-        for scope in &mut self.scopes.scopes[uncached_scope..] {\n-            for drop in &scope.drops {\n-                if is_generator || drop.kind == DropKind::Value {\n-                    cached_drop = self.scopes.unwind_drops.add_drop(*drop, cached_drop);\n-                }\n-            }\n-            scope.cached_unwind_block = Some(cached_drop);\n-        }\n-\n-        cached_drop\n+        // It is okay to use dummy span because the getting scope index on the topmost scope\n+        // must always succeed.\n+        self.diverge_cleanup_target(self.scopes.topmost(), DUMMY_SP)\n     }\n \n-    /// This is similar to [diverge_cleanup] except its target is set to\n+    /// This is similar to [diverge_cleanup](Self::diverge_cleanup) except its target is set to\n     /// some ancestor scope instead of the current scope.\n     /// It is possible to unwind to some ancestor scope if some drop panics as\n     /// the program breaks out of a if-then scope."}]}