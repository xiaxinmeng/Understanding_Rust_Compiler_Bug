{"sha": "b210aea1d446dcc9d05d0072c439575f9649d9f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMTBhZWExZDQ0NmRjYzlkMDVkMDA3MmM0Mzk1NzVmOTY0OWQ5Zjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-08T20:39:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-08T20:39:08Z"}, "message": "Auto merge of #25218 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #24864, #25140, #25179, #25181, #25190, #25194, #25195, #25198, #25203, #25210, #25211, #25215\n- Failed merges: #25200", "tree": {"sha": "9e6135ba3a36f262aee4228236efa724130de1f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e6135ba3a36f262aee4228236efa724130de1f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b210aea1d446dcc9d05d0072c439575f9649d9f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b210aea1d446dcc9d05d0072c439575f9649d9f9", "html_url": "https://github.com/rust-lang/rust/commit/b210aea1d446dcc9d05d0072c439575f9649d9f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b210aea1d446dcc9d05d0072c439575f9649d9f9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7132092ce6e954eb58d490fa886d0865c5cfba38", "url": "https://api.github.com/repos/rust-lang/rust/commits/7132092ce6e954eb58d490fa886d0865c5cfba38", "html_url": "https://github.com/rust-lang/rust/commit/7132092ce6e954eb58d490fa886d0865c5cfba38"}, {"sha": "55437b4a57d69e8411abb795ab02738e585932cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/55437b4a57d69e8411abb795ab02738e585932cd", "html_url": "https://github.com/rust-lang/rust/commit/55437b4a57d69e8411abb795ab02738e585932cd"}], "stats": {"total": 120, "additions": 83, "deletions": 37}, "files": [{"sha": "0f20e510adcd8e238da930846db8cb4cbdfaefd0", "filename": "AUTHORS.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b210aea1d446dcc9d05d0072c439575f9649d9f9/AUTHORS.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b210aea1d446dcc9d05d0072c439575f9649d9f9/AUTHORS.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/AUTHORS.txt?ref=b210aea1d446dcc9d05d0072c439575f9649d9f9", "patch": "@@ -518,6 +518,7 @@ Luke Francl <look@recursion.org>\n Luke Metz <luke.metz@students.olin.edu>\n Luke Steensen <luke.steensen@gmail.com>\n Luqman Aden <me@luqman.ca>\n+\u0141ukasz Niemier <lukasz@niemier.pl>\n Magnus Auvinen <magnus.auvinen@gmail.com>\n Mahmut Bulut <mahmutbulut0@gmail.com>\n Makoto Nakashima <makoto.nksm+github@gmail.com>\n@@ -997,5 +998,4 @@ xales <xales@naveria.com>\n zofrex <zofrex@gmail.com>\n zslayton <zack.slayton@gmail.com>\n zzmp <zmp@umich.edu>\n-\u0141ukasz Niemier <lukasz@niemier.pl>\n \u514b\u96f7 <geekcraik@users.noreply.github.com>"}, {"sha": "f0cba4b0c6a6dd78da8df4c01152f72515077fda", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b210aea1d446dcc9d05d0072c439575f9649d9f9/configure", "raw_url": "https://github.com/rust-lang/rust/raw/b210aea1d446dcc9d05d0072c439575f9649d9f9/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=b210aea1d446dcc9d05d0072c439575f9649d9f9", "patch": "@@ -844,7 +844,7 @@ then\n     CFG_OSX_GCC_VERSION=$(\"$CFG_GCC\" --version 2>&1 | grep \"Apple LLVM version\")\n     if [ $? -eq 0 ]\n     then\n-        step_msg \"on OS X 10.9, forcing use of clang\"\n+        step_msg \"on OS X >=10.9, forcing use of clang\"\n         CFG_ENABLE_CLANG=1\n     else\n         if [ $(\"$CFG_GCC\" --version 2>&1 | grep -c ' 4\\.[0-6]') -ne 0 ]; then"}, {"sha": "57479a21e47a859e3a5b11cbfc847aced4977160", "filename": "src/doc/trpl/guessing-game.md", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b210aea1d446dcc9d05d0072c439575f9649d9f9/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/b210aea1d446dcc9d05d0072c439575f9649d9f9/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fguessing-game.md?ref=b210aea1d446dcc9d05d0072c439575f9649d9f9", "patch": "@@ -358,11 +358,10 @@ rand=\"0.3.0\"\n The `[dependencies]` section of `Cargo.toml` is like the `[package]` section:\n everything that follows it is part of it, until the next section starts.\n Cargo uses the dependencies section to know what dependencies on external\n-crates you have, and what versions you require. In this case, we\u2019ve used `*`,\n-which means that we\u2019ll use the latest version of `rand`. Cargo understands\n-[Semantic Versioning][semver], which is a standard for writing version\n-numbers. If we wanted a specific version or range of versions, we could be\n-more specific here. [Cargo\u2019s documentation][cargodoc] contains more details.\n+crates you have, and what versions you require. In this case, we\u2019ve used version `0.3.0`.\n+Cargo understands [Semantic Versioning][semver], which is a standard for writing version\n+numbers. If we wanted to use the latest version we could use `*` or we could use a range \n+of versions. [Cargo\u2019s documentation][cargodoc] contains more details.\n \n [semver]: http://semver.org\n [cargodoc]: http://doc.crates.io/crates-io.html\n@@ -410,7 +409,7 @@ $ cargo build\n    Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n ```\n \n-So, we told Cargo we wanted any version of `rand`, and so it fetched the latest\n+So, we told Cargo we wanted any `0.3.x` version of `rand`, and so it fetched the latest\n version at the time this was written, `v0.3.8`. But what happens when next\n week, version `v0.3.9` comes out, with an important bugfix? While getting\n bugfixes is important, what if `0.3.9` contains a regression that breaks our"}, {"sha": "86164a08a430f87d8245cc5603f8e5d9674d28c9", "filename": "src/doc/trpl/lifetimes.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b210aea1d446dcc9d05d0072c439575f9649d9f9/src%2Fdoc%2Ftrpl%2Flifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/b210aea1d446dcc9d05d0072c439575f9649d9f9/src%2Fdoc%2Ftrpl%2Flifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Flifetimes.md?ref=b210aea1d446dcc9d05d0072c439575f9649d9f9", "patch": "@@ -116,7 +116,7 @@ fn main() {\n }\n ```\n \n-[struct]: structs.html\n+[structs]: structs.html\n \n As you can see, `struct`s can also have lifetimes. In a similar way to functions,\n "}, {"sha": "861357ebbdcd1ce526f8f5ef906a691c5feb7dda", "filename": "src/doc/trpl/method-syntax.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b210aea1d446dcc9d05d0072c439575f9649d9f9/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/b210aea1d446dcc9d05d0072c439575f9649d9f9/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md?ref=b210aea1d446dcc9d05d0072c439575f9649d9f9", "patch": "@@ -188,7 +188,7 @@ struct CircleBuilder {\n \n impl CircleBuilder {\n     fn new() -> CircleBuilder {\n-        CircleBuilder { x: 0.0, y: 0.0, radius: 0.0, }\n+        CircleBuilder { x: 0.0, y: 0.0, radius: 1.0, }\n     }\n \n     fn x(&mut self, coordinate: f64) -> &mut CircleBuilder {"}, {"sha": "435407a8a967d36d6dc2b7389ad43ecfca64f50b", "filename": "src/doc/trpl/mutability.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b210aea1d446dcc9d05d0072c439575f9649d9f9/src%2Fdoc%2Ftrpl%2Fmutability.md", "raw_url": "https://github.com/rust-lang/rust/raw/b210aea1d446dcc9d05d0072c439575f9649d9f9/src%2Fdoc%2Ftrpl%2Fmutability.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmutability.md?ref=b210aea1d446dcc9d05d0072c439575f9649d9f9", "patch": "@@ -85,7 +85,7 @@ safety, and the mechanism by which Rust guarantees it, the\n > You may have one or the other of these two kinds of borrows, but not both at\n > the same time:\n > \n-> * 0 to N references (`&T`) to a resource.\n+> * one or more references (`&T`) to a resource.\n > * exactly one mutable reference (`&mut T`)\n \n [ownership]: ownership.html"}, {"sha": "fba5226ca2ed9a45590b6e817da5fc51b0f70933", "filename": "src/doc/trpl/ownership.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b210aea1d446dcc9d05d0072c439575f9649d9f9/src%2Fdoc%2Ftrpl%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/b210aea1d446dcc9d05d0072c439575f9649d9f9/src%2Fdoc%2Ftrpl%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fownership.md?ref=b210aea1d446dcc9d05d0072c439575f9649d9f9", "patch": "@@ -3,7 +3,7 @@\n This guide is one of three presenting Rust\u2019s ownership system. This is one of\n Rust\u2019s most unique and compelling features, with which Rust developers should\n become quite acquainted. Ownership is how Rust achieves its largest goal,\n-memory safety. The there are a few distinct concepts, each with its own\n+memory safety. There are a few distinct concepts, each with its own\n chapter:\n \n * ownership, which you\u2019re reading now.\n@@ -59,6 +59,7 @@ deterministically, at the end of the scope.\n \n [vect]: ../std/vec/struct.Vec.html\n [heap]: the-stack-and-the-heap.html\n+[bindings]: variable-bindings.html\n \n # Move semantics\n \n@@ -122,7 +123,7 @@ let v2 = v;\n \n The first line creates some data for the vector on the [stack][sh], `v`. The\n vector\u2019s data, however, is stored on the [heap][sh], and so it contains a\n-pointer to that data. When we move `v` to `v2`, it creates a copy of that data,\n+pointer to that data. When we move `v` to `v2`, it creates a copy of that pointer,\n for `v2`. Which would mean two pointers to the contents of the vector on the\n heap. That would be a problem: it would violate Rust\u2019s safety guarantees by\n introducing a data race. Therefore, Rust forbids using `v` after we\u2019ve done the"}, {"sha": "8bb3f94760bc9049b64b99edb406347cfa296d59", "filename": "src/doc/trpl/references-and-borrowing.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b210aea1d446dcc9d05d0072c439575f9649d9f9/src%2Fdoc%2Ftrpl%2Freferences-and-borrowing.md", "raw_url": "https://github.com/rust-lang/rust/raw/b210aea1d446dcc9d05d0072c439575f9649d9f9/src%2Fdoc%2Ftrpl%2Freferences-and-borrowing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Freferences-and-borrowing.md?ref=b210aea1d446dcc9d05d0072c439575f9649d9f9", "patch": "@@ -3,7 +3,7 @@\n This guide is one of three presenting Rust\u2019s ownership system. This is one of\n Rust\u2019s most unique and compelling features, with which Rust developers should\n become quite acquainted. Ownership is how Rust achieves its largest goal,\n-memory safety. The there are a few distinct concepts, each with its own\n+memory safety. There are a few distinct concepts, each with its own\n chapter:\n \n * [ownership][ownership], ownership, the key concept"}, {"sha": "51ee4bf0cdc2833f1285d89bb4f118f3d7c0b751", "filename": "src/doc/trpl/traits.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b210aea1d446dcc9d05d0072c439575f9649d9f9/src%2Fdoc%2Ftrpl%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/b210aea1d446dcc9d05d0072c439575f9649d9f9/src%2Fdoc%2Ftrpl%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftraits.md?ref=b210aea1d446dcc9d05d0072c439575f9649d9f9", "patch": "@@ -192,7 +192,7 @@ Here\u2019s the error:\n ```text\n error: type `std::fs::File` does not implement any method in scope named `write`\n \n-let result = f.write(b\u201dwhatever\u201d);\n+let result = f.write(b\"whatever\");\n                ^~~~~~~~~~~~~~~~~~\n ```\n "}, {"sha": "de962b51e059080b678f83b83ce71228ee372538", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b210aea1d446dcc9d05d0072c439575f9649d9f9/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b210aea1d446dcc9d05d0072c439575f9649d9f9/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=b210aea1d446dcc9d05d0072c439575f9649d9f9", "patch": "@@ -137,7 +137,7 @@ pub trait Iterator {\n     ///\n     /// ```\n     /// let a = [1, 2, 3, 4, 5];\n-    /// assert!(a.iter().last().unwrap() == &5);\n+    /// assert_eq!(a.iter().last().unwrap(), &5);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -155,8 +155,8 @@ pub trait Iterator {\n     /// ```\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter();\n-    /// assert!(it.nth(2).unwrap() == &3);\n-    /// assert!(it.nth(2) == None);\n+    /// assert_eq!(it.nth(2).unwrap(), &3);\n+    /// assert_eq!(it.nth(2), None);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -545,8 +545,8 @@ pub trait Iterator {\n     /// let mut it = 0..10;\n     /// // sum the first five values\n     /// let partial_sum = it.by_ref().take(5).fold(0, |a, b| a + b);\n-    /// assert!(partial_sum == 10);\n-    /// assert!(it.next() == Some(5));\n+    /// assert_eq!(partial_sum, 10);\n+    /// assert_eq!(it.next(), Some(5));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn by_ref(&mut self) -> &mut Self where Self: Sized { self }\n@@ -608,7 +608,7 @@ pub trait Iterator {\n     ///\n     /// ```\n     /// let a = [1, 2, 3, 4, 5];\n-    /// assert!(a.iter().fold(0, |acc, &item| acc + item) == 15);\n+    /// assert_eq!(a.iter().fold(0, |acc, &item| acc + item), 15);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -773,7 +773,7 @@ pub trait Iterator {\n     ///\n     /// ```\n     /// let a = [1, 2, 3, 4, 5];\n-    /// assert!(a.iter().max().unwrap() == &5);\n+    /// assert_eq!(a.iter().max().unwrap(), &5);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -796,7 +796,7 @@ pub trait Iterator {\n     ///\n     /// ```\n     /// let a = [1, 2, 3, 4, 5];\n-    /// assert!(a.iter().min().unwrap() == &1);\n+    /// assert_eq!(a.iter().min().unwrap(), &1);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -834,13 +834,13 @@ pub trait Iterator {\n     /// assert_eq!(a.iter().min_max(), NoElements);\n     ///\n     /// let a = [1];\n-    /// assert!(a.iter().min_max() == OneElement(&1));\n+    /// assert_eq!(a.iter().min_max(), OneElement(&1));\n     ///\n     /// let a = [1, 2, 3, 4, 5];\n-    /// assert!(a.iter().min_max() == MinMax(&1, &5));\n+    /// assert_eq!(a.iter().min_max(), MinMax(&1, &5));\n     ///\n     /// let a = [1, 1, 1, 1];\n-    /// assert!(a.iter().min_max() == MinMax(&1, &1));\n+    /// assert_eq!(a.iter().min_max(), MinMax(&1, &1));\n     /// ```\n     #[unstable(feature = \"core\", reason = \"return type may change\")]\n     fn min_max(mut self) -> MinMaxResult<Self::Item> where Self: Sized, Self::Item: Ord\n@@ -1058,7 +1058,7 @@ pub trait Iterator {\n     ///\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter().cloned();\n-    /// assert!(it.sum::<i32>() == 15);\n+    /// assert_eq!(it.sum::<i32>(), 15);\n     /// ```\n     #[unstable(feature=\"core\")]\n     fn sum<S=<Self as Iterator>::Item>(self) -> S where\n@@ -1078,9 +1078,9 @@ pub trait Iterator {\n     /// fn factorial(n: u32) -> u32 {\n     ///     (1..).take_while(|&i| i <= n).product()\n     /// }\n-    /// assert!(factorial(0) == 1);\n-    /// assert!(factorial(1) == 1);\n-    /// assert!(factorial(5) == 120);\n+    /// assert_eq!(factorial(0), 1);\n+    /// assert_eq!(factorial(1), 1);\n+    /// assert_eq!(factorial(5), 120);\n     /// ```\n     #[unstable(feature=\"core\")]\n     fn product<P=<Self as Iterator>::Item>(self) -> P where"}, {"sha": "1bd0b3638c6832f7f41869325a5eaabbdea1a112", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b210aea1d446dcc9d05d0072c439575f9649d9f9/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b210aea1d446dcc9d05d0072c439575f9649d9f9/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=b210aea1d446dcc9d05d0072c439575f9649d9f9", "patch": "@@ -313,7 +313,7 @@ macro_rules! impls{\n /// mismatches by enforcing types in the method implementations:\n ///\n /// ```\n-/// # trait ResType { fn foo(&self); };\n+/// # trait ResType { fn foo(&self); }\n /// # struct ParamType;\n /// # mod foreign_lib {\n /// # pub fn new(_: usize) -> *mut () { 42 as *mut () }"}, {"sha": "55934da00a37cde66ef6327a241b688ac9a6017d", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b210aea1d446dcc9d05d0072c439575f9649d9f9/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b210aea1d446dcc9d05d0072c439575f9649d9f9/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=b210aea1d446dcc9d05d0072c439575f9649d9f9", "patch": "@@ -12,7 +12,8 @@\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"libc\"]\n #![crate_type = \"rlib\"]\n-#![cfg_attr(not(feature = \"cargo-build\"), unstable(feature = \"libc\"))]\n+#![cfg_attr(not(feature = \"cargo-build\"), unstable(feature = \"libc\",\n+                                                   reason = \"use `libc` from crates.io\"))]\n #![cfg_attr(not(feature = \"cargo-build\"), feature(staged_api, core, no_std))]\n #![cfg_attr(not(feature = \"cargo-build\"), staged_api)]\n #![cfg_attr(not(feature = \"cargo-build\"), no_std)]\n@@ -3624,6 +3625,30 @@ pub mod consts {\n             pub const IPV6_DROP_MEMBERSHIP: c_int = 21;\n \n             pub const TCP_NODELAY: c_int = 1;\n+            pub const TCP_MAXSEG: c_int = 2;\n+            pub const TCP_CORK: c_int = 3;\n+            pub const TCP_KEEPIDLE: c_int = 4;\n+            pub const TCP_KEEPINTVL: c_int = 5;\n+            pub const TCP_KEEPCNT: c_int = 6;\n+            pub const TCP_SYNCNT: c_int = 7;\n+            pub const TCP_LINGER2: c_int = 8;\n+            pub const TCP_DEFER_ACCEPT: c_int = 9;\n+            pub const TCP_WINDOW_CLAMP: c_int = 10;\n+            pub const TCP_INFO: c_int = 11;\n+            pub const TCP_QUICKACK: c_int = 12;\n+            pub const TCP_CONGESTION: c_int = 13;\n+            pub const TCP_MD5SIG: c_int = 14;\n+            pub const TCP_COOKIE_TRANSACTIONS: c_int = 15;\n+            pub const TCP_THIN_LINEAR_TIMEOUTS: c_int = 16;\n+            pub const TCP_THIN_DUPACK: c_int = 17;\n+            pub const TCP_USER_TIMEOUT: c_int = 18;\n+            pub const TCP_REPAIR: c_int = 19;\n+            pub const TCP_REPAIR_QUEUE: c_int = 20;\n+            pub const TCP_QUEUE_SEQ: c_int = 21;\n+            pub const TCP_REPAIR_OPTIONS: c_int = 22;\n+            pub const TCP_FASTOPEN: c_int = 23;\n+            pub const TCP_TIMESTAMP: c_int = 24;\n+\n             pub const SOL_SOCKET: c_int = 65535;\n \n             pub const SO_DEBUG: c_int = 0x0001;"}, {"sha": "1359894b4dd72fd6410190b86e4aad67abd0a7f8", "filename": "src/librand/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b210aea1d446dcc9d05d0072c439575f9649d9f9/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b210aea1d446dcc9d05d0072c439575f9649d9f9/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=b210aea1d446dcc9d05d0072c439575f9649d9f9", "patch": "@@ -26,7 +26,8 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![no_std]\n #![staged_api]\n-#![unstable(feature = \"rand\")]\n+#![unstable(feature = \"rand\",\n+            reason = \"use `rand` from crates.io\")]\n #![feature(core)]\n #![feature(no_std)]\n #![feature(staged_api)]"}, {"sha": "f00f0eea1f48dbb73d10f062f37dddcd15059558", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b210aea1d446dcc9d05d0072c439575f9649d9f9/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b210aea1d446dcc9d05d0072c439575f9649d9f9/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=b210aea1d446dcc9d05d0072c439575f9649d9f9", "patch": "@@ -12,6 +12,28 @@\n \n register_long_diagnostics! {\n \n+E0046: r##\"\n+When trying to make some type implement a trait `Foo`, you must, at minimum,\n+provide implementations for all of `Foo`'s required methods (meaning the\n+methods that do not have default implementations), as well as any required\n+trait items like associated types or constants.\n+\"##,\n+\n+E0054: r##\"\n+It is not allowed to cast to a bool. If you are trying to cast a numeric type\n+to a bool, you can compare it with zero instead:\n+\n+```\n+let x = 5;\n+\n+// Ok\n+let x_is_nonzero = x != 0;\n+\n+// Not allowed, won't compile\n+let x_is_nonzero = x as bool;\n+```\n+\"##,\n+\n E0081: r##\"\n Enum discriminants are used to differentiate enum variants stored in memory.\n This error indicates that the same value was used for two or more variants,\n@@ -106,11 +128,9 @@ register_diagnostics! {\n     E0040, // explicit use of destructor method\n     E0044,\n     E0045,\n-    E0046,\n     E0049,\n     E0050,\n     E0053,\n-    E0054,\n     E0055,\n     E0057,\n     E0059,"}, {"sha": "9589f4cf099b2a9ebe647522343a7517c54dd538", "filename": "src/libstd/os/linux/raw.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b210aea1d446dcc9d05d0072c439575f9649d9f9/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b210aea1d446dcc9d05d0072c439575f9649d9f9/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Fraw.rs?ref=b210aea1d446dcc9d05d0072c439575f9649d9f9", "patch": "@@ -60,8 +60,8 @@ mod arch {\n #[cfg(any(target_arch = \"mips\",\n           target_arch = \"mipsel\"))]\n mod arch {\n-    use super::{dev_t, mode_t};\n-    use os::raw::c_long;\n+    use super::mode_t;\n+    use os::raw::{c_long, c_ulong};\n     use os::unix::raw::{gid_t, uid_t};\n \n     pub type blkcnt_t = i32;"}]}