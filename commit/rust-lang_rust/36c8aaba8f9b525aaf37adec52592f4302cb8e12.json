{"sha": "36c8aaba8f9b525aaf37adec52592f4302cb8e12", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YzhhYWJhOGY5YjUyNWFhZjM3YWRlYzUyNTkyZjQzMDJjYjhlMTI=", "commit": {"author": {"name": "BO41", "email": "botbob@disroot.org", "date": "2019-05-20T14:02:50Z"}, "committer": {"name": "BO41", "email": "botbob@disroot.org", "date": "2019-05-20T14:02:50Z"}, "message": "Fix tests and make other ascii lints auto-fixable", "tree": {"sha": "8cc12966a9b5b07c1566b1de17d263dcf35e9270", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cc12966a9b5b07c1566b1de17d263dcf35e9270"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36c8aaba8f9b525aaf37adec52592f4302cb8e12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36c8aaba8f9b525aaf37adec52592f4302cb8e12", "html_url": "https://github.com/rust-lang/rust/commit/36c8aaba8f9b525aaf37adec52592f4302cb8e12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36c8aaba8f9b525aaf37adec52592f4302cb8e12/comments", "author": null, "committer": null, "parents": [{"sha": "859b3296038d1f226a54a85f7464fe4baeb4bf72", "url": "https://api.github.com/repos/rust-lang/rust/commits/859b3296038d1f226a54a85f7464fe4baeb4bf72", "html_url": "https://github.com/rust-lang/rust/commit/859b3296038d1f226a54a85f7464fe4baeb4bf72"}], "stats": {"total": 48, "additions": 15, "deletions": 33}, "files": [{"sha": "15c74eff73b16aa3dcadd22f792d314636b16c85", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 15, "deletions": 27, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/36c8aaba8f9b525aaf37adec52592f4302cb8e12/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36c8aaba8f9b525aaf37adec52592f4302cb8e12/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=36c8aaba8f9b525aaf37adec52592f4302cb8e12", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{is_allowed, snippet, span_help_and_lint, span_lint_and_sugg};\n+use crate::utils::{is_allowed, snippet, span_lint_and_sugg};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n@@ -92,15 +92,14 @@ fn escape<T: Iterator<Item = char>>(s: T) -> String {\n fn check_str(cx: &LateContext<'_, '_>, span: Span, id: HirId) {\n     let string = snippet(cx, span, \"\");\n     if string.contains('\\u{200B}') {\n-        span_help_and_lint(\n+        span_lint_and_sugg(\n             cx,\n             ZERO_WIDTH_SPACE,\n             span,\n             \"zero-width space detected\",\n-            &format!(\n-                \"Consider replacing the string with:\\n\\\"{}\\\"\",\n-                string.replace(\"\\u{200B}\", \"\\\\u{200B}\")\n-            ),\n+            \"consider replacing the string with\",\n+            string.replace(\"\\u{200B}\", \"\\\\u{200B}\"),\n+            Applicability::MachineApplicable,\n         );\n     }\n     if string.chars().any(|c| c as u32 > 0x7F) {\n@@ -109,35 +108,24 @@ fn check_str(cx: &LateContext<'_, '_>, span: Span, id: HirId) {\n             NON_ASCII_LITERAL,\n             span,\n             \"literal non-ASCII character detected\",\n-            &format!(\n-                \"Consider replacing the string with:\\n\\\"{}\\\"\",\n-                if is_allowed(cx, UNICODE_NOT_NFC, id) {\n-                    escape(string.chars())\n-                } else {\n-                    escape(string.nfc())\n-                }\n-            ),\n-            format!(\n-                \"{}\",\n-                if is_allowed(cx, UNICODE_NOT_NFC, id) {\n-                    escape(string.chars())\n-                } else {\n-                    escape(string.nfc())\n-                }\n-            ),\n+            \"consider replacing the string with\",\n+            if is_allowed(cx, UNICODE_NOT_NFC, id) {\n+                escape(string.chars())\n+            } else {\n+                escape(string.nfc())\n+            },\n             Applicability::MachineApplicable,\n         );\n     }\n     if is_allowed(cx, NON_ASCII_LITERAL, id) && string.chars().zip(string.nfc()).any(|(a, b)| a != b) {\n-        span_help_and_lint(\n+        span_lint_and_sugg(\n             cx,\n             UNICODE_NOT_NFC,\n             span,\n             \"non-nfc unicode sequence detected\",\n-            &format!(\n-                \"Consider replacing the string with:\\n\\\"{}\\\"\",\n-                string.nfc().collect::<String>()\n-            ),\n+            \"consider replacing the string with\",\n+            string.nfc().collect::<String>(),\n+            Applicability::MachineApplicable,\n         );\n     }\n }"}, {"sha": "641680431a2cb2ccc6a6441688559f6e6d63fb32", "filename": "tests/ui/unicode.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36c8aaba8f9b525aaf37adec52592f4302cb8e12/tests%2Fui%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36c8aaba8f9b525aaf37adec52592f4302cb8e12/tests%2Fui%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funicode.stderr?ref=36c8aaba8f9b525aaf37adec52592f4302cb8e12", "patch": "@@ -5,8 +5,6 @@ LL |     print!(\"Here >\u200b< is a ZWS, and \u200banother\");\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::zero-width-space` implied by `-D warnings`\n-   = help: Consider replacing the string with:\n-           \"\"Here >/u{200B}< is a ZWS, and /u{200B}another\"\"\n \n error: non-nfc unicode sequence detected\n   --> $DIR/unicode.rs:9:12\n@@ -15,8 +13,6 @@ LL |     print!(\"\u0300a\u0300h?\");\n    |            ^^^^^\n    |\n    = note: `-D clippy::unicode-not-nfc` implied by `-D warnings`\n-   = help: Consider replacing the string with:\n-           \"\"\u0300\u00e0h?\"\"\n \n error: literal non-ASCII character detected\n   --> $DIR/unicode.rs:15:12\n@@ -25,8 +21,6 @@ LL |     print!(\"\u00dcben!\");\n    |            ^^^^^^^\n    |\n    = note: `-D clippy::non-ascii-literal` implied by `-D warnings`\n-   = help: Consider replacing the string with:\n-           \"\"/u{dc}ben!\"\"\n \n error: aborting due to 3 previous errors\n "}]}