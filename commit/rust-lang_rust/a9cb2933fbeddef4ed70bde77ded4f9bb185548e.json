{"sha": "a9cb2933fbeddef4ed70bde77ded4f9bb185548e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5Y2IyOTMzZmJlZGRlZjRlZDcwYmRlNzdkZWQ0ZjliYjE4NTU0OGU=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-06-02T22:49:09Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-06-02T22:54:00Z"}, "message": "Add highlight support for unsafe fn calls and raw ptr deref", "tree": {"sha": "9c501036768cc44dd687fd555d5df1e257f6b62c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c501036768cc44dd687fd555d5df1e257f6b62c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9cb2933fbeddef4ed70bde77ded4f9bb185548e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9cb2933fbeddef4ed70bde77ded4f9bb185548e", "html_url": "https://github.com/rust-lang/rust/commit/a9cb2933fbeddef4ed70bde77ded4f9bb185548e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9cb2933fbeddef4ed70bde77ded4f9bb185548e/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f6ab77708ae104c854712285af19516287b6906", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f6ab77708ae104c854712285af19516287b6906", "html_url": "https://github.com/rust-lang/rust/commit/2f6ab77708ae104c854712285af19516287b6906"}], "stats": {"total": 131, "additions": 125, "deletions": 6}, "files": [{"sha": "4a06f3bcddb69fa092ab1557443e837984436c0c", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9cb2933fbeddef4ed70bde77ded4f9bb185548e/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9cb2933fbeddef4ed70bde77ded4f9bb185548e/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=a9cb2933fbeddef4ed70bde77ded4f9bb185548e", "patch": "@@ -637,6 +637,10 @@ impl Function {\n         db.function_data(self.id).params.clone()\n     }\n \n+    pub fn is_unsafe(self, db: &dyn HirDatabase) -> bool {\n+        db.function_data(self.id).is_unsafe\n+    }\n+\n     pub fn diagnostics(self, db: &dyn HirDatabase, sink: &mut DiagnosticSink) {\n         let _p = profile(\"Function::diagnostics\");\n         let infer = db.infer(self.id.into());\n@@ -1190,6 +1194,10 @@ impl Type {\n         )\n     }\n \n+    pub fn is_raw_ptr(&self) -> bool {\n+        matches!(&self.ty.value, Ty::Apply(ApplicationTy { ctor: TypeCtor::RawPtr(..), .. }))\n+    }\n+\n     pub fn contains_unknown(&self) -> bool {\n         return go(&self.ty.value);\n "}, {"sha": "807195d25ad98068bd607455d0c2543fd5973dc2", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9cb2933fbeddef4ed70bde77ded4f9bb185548e/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9cb2933fbeddef4ed70bde77ded4f9bb185548e/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=a9cb2933fbeddef4ed70bde77ded4f9bb185548e", "patch": "@@ -34,6 +34,7 @@ pub struct FunctionData {\n     /// True if the first param is `self`. This is relevant to decide whether this\n     /// can be called as a method.\n     pub has_self_param: bool,\n+    pub is_unsafe: bool,\n     pub visibility: RawVisibility,\n }\n \n@@ -85,11 +86,14 @@ impl FunctionData {\n             ret_type\n         };\n \n+        let is_unsafe = src.value.unsafe_token().is_some();\n+\n         let vis_default = RawVisibility::default_for_container(loc.container);\n         let visibility =\n             RawVisibility::from_ast_with_default(db, vis_default, src.map(|s| s.visibility()));\n \n-        let sig = FunctionData { name, params, ret_type, has_self_param, visibility, attrs };\n+        let sig =\n+            FunctionData { name, params, ret_type, has_self_param, is_unsafe, visibility, attrs };\n         Arc::new(sig)\n     }\n }"}, {"sha": "fcdc98201f2e465d78224d75e879a00185ac3d4b", "filename": "crates/ra_ide/src/snapshots/highlight_injection.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9cb2933fbeddef4ed70bde77ded4f9bb185548e/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_injection.html", "raw_url": "https://github.com/rust-lang/rust/raw/a9cb2933fbeddef4ed70bde77ded4f9bb185548e/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_injection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_injection.html?ref=a9cb2933fbeddef4ed70bde77ded4f9bb185548e", "patch": "@@ -10,6 +10,7 @@\n .string_literal     { color: #CC9393; }\n .field              { color: #94BFF3; }\n .function           { color: #93E0E3; }\n+.operator.unsafe    { color: #E28C14; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }"}, {"sha": "e97192b614a01e59724ce6e85162f0801b797059", "filename": "crates/ra_ide/src/snapshots/highlight_strings.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9cb2933fbeddef4ed70bde77ded4f9bb185548e/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/a9cb2933fbeddef4ed70bde77ded4f9bb185548e/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_strings.html?ref=a9cb2933fbeddef4ed70bde77ded4f9bb185548e", "patch": "@@ -10,6 +10,7 @@\n .string_literal     { color: #CC9393; }\n .field              { color: #94BFF3; }\n .function           { color: #93E0E3; }\n+.operator.unsafe    { color: #E28C14; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }"}, {"sha": "17ffc727cd064db0435e0083be8e56c4aeb89a46", "filename": "crates/ra_ide/src/snapshots/highlight_unsafe.html", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a9cb2933fbeddef4ed70bde77ded4f9bb185548e/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/a9cb2933fbeddef4ed70bde77ded4f9bb185548e/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_unsafe.html?ref=a9cb2933fbeddef4ed70bde77ded4f9bb185548e", "patch": "@@ -0,0 +1,48 @@\n+\n+<style>\n+body                { margin: 0; }\n+pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n+\n+.lifetime           { color: #DFAF8F; font-style: italic; }\n+.comment            { color: #7F9F7F; }\n+.struct, .enum      { color: #7CB8BB; }\n+.enum_variant       { color: #BDE0F3; }\n+.string_literal     { color: #CC9393; }\n+.field              { color: #94BFF3; }\n+.function           { color: #93E0E3; }\n+.operator.unsafe    { color: #E28C14; }\n+.parameter          { color: #94BFF3; }\n+.text               { color: #DCDCCC; }\n+.type               { color: #7CB8BB; }\n+.builtin_type       { color: #8CD0D3; }\n+.type_param         { color: #DFAF8F; }\n+.attribute          { color: #94BFF3; }\n+.numeric_literal    { color: #BFEBBF; }\n+.bool_literal       { color: #BFE6EB; }\n+.macro              { color: #94BFF3; }\n+.module             { color: #AFD8AF; }\n+.variable           { color: #DCDCCC; }\n+.format_specifier   { color: #CC696B; }\n+.mutable            { text-decoration: underline; }\n+\n+.keyword            { color: #F0DFAF; font-weight: bold; }\n+.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.control            { font-style: italic; }\n+</style>\n+<pre><code><span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function declaration unsafe\">unsafe_fn</span>() {}\n+\n+<span class=\"keyword\">struct</span> <span class=\"struct declaration\">HasUnsafeFn</span>;\n+\n+<span class=\"keyword\">impl</span> <span class=\"struct\">HasUnsafeFn</span> {\n+    <span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function declaration unsafe\">unsafe_method</span>(&<span class=\"self_keyword\">self</span>) {}\n+}\n+\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span>() {\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> = &<span class=\"numeric_literal\">5</span> <span class=\"keyword\">as</span> *<span class=\"keyword\">const</span> <span class=\"builtin_type\">usize</span>;\n+    <span class=\"keyword unsafe\">unsafe</span> {\n+        <span class=\"function unsafe\">unsafe_fn</span>();\n+        <span class=\"struct\">HasUnsafeFn</span>.<span class=\"function unsafe\">unsafe_method</span>();\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">y</span> = <span class=\"operator unsafe\">*</span><span class=\"variable\">x</span>;\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">z</span> = -<span class=\"variable\">x</span>;\n+    }\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "42c5f3e5515e7e24fd739fe70cd0550067d9c983", "filename": "crates/ra_ide/src/snapshots/highlighting.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9cb2933fbeddef4ed70bde77ded4f9bb185548e/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/a9cb2933fbeddef4ed70bde77ded4f9bb185548e/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html?ref=a9cb2933fbeddef4ed70bde77ded4f9bb185548e", "patch": "@@ -10,6 +10,7 @@\n .string_literal     { color: #CC9393; }\n .field              { color: #94BFF3; }\n .function           { color: #93E0E3; }\n+.operator.unsafe    { color: #E28C14; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }"}, {"sha": "2dd61d20d6912cce61c2f14e9ddca9fc5b5f1bb2", "filename": "crates/ra_ide/src/snapshots/rainbow_highlighting.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9cb2933fbeddef4ed70bde77ded4f9bb185548e/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/a9cb2933fbeddef4ed70bde77ded4f9bb185548e/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html?ref=a9cb2933fbeddef4ed70bde77ded4f9bb185548e", "patch": "@@ -10,6 +10,7 @@\n .string_literal     { color: #CC9393; }\n .field              { color: #94BFF3; }\n .function           { color: #93E0E3; }\n+.operator.unsafe    { color: #E28C14; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }"}, {"sha": "19ecd54d6cf2cdaee5fd20c0e3743fed96e3821e", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a9cb2933fbeddef4ed70bde77ded4f9bb185548e/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9cb2933fbeddef4ed70bde77ded4f9bb185548e/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=a9cb2933fbeddef4ed70bde77ded4f9bb185548e", "patch": "@@ -406,6 +406,23 @@ fn highlight_element(\n                 _ => h,\n             }\n         }\n+        PREFIX_EXPR => {\n+            let prefix_expr = element.into_node().and_then(ast::PrefixExpr::cast)?;\n+            match prefix_expr.op_kind() {\n+                Some(ast::PrefixOp::Deref) => {}\n+                _ => return None,\n+            }\n+\n+            let expr = prefix_expr.expr()?;\n+            let ty = sema.type_of_expr(&expr)?;\n+            if !ty.is_raw_ptr() {\n+                return None;\n+            }\n+\n+            let mut h = Highlight::new(HighlightTag::Operator);\n+            h |= HighlightModifier::Unsafe;\n+            h\n+        }\n \n         k if k.is_keyword() => {\n             let h = Highlight::new(HighlightTag::Keyword);\n@@ -458,7 +475,13 @@ fn highlight_name(db: &RootDatabase, def: Definition) -> Highlight {\n         Definition::Field(_) => HighlightTag::Field,\n         Definition::ModuleDef(def) => match def {\n             hir::ModuleDef::Module(_) => HighlightTag::Module,\n-            hir::ModuleDef::Function(_) => HighlightTag::Function,\n+            hir::ModuleDef::Function(func) => {\n+                let mut h = HighlightTag::Function.into();\n+                if func.is_unsafe(db) {\n+                    h |= HighlightModifier::Unsafe;\n+                }\n+                return h;\n+            }\n             hir::ModuleDef::Adt(hir::Adt::Struct(_)) => HighlightTag::Struct,\n             hir::ModuleDef::Adt(hir::Adt::Enum(_)) => HighlightTag::Enum,\n             hir::ModuleDef::Adt(hir::Adt::Union(_)) => HighlightTag::Union,"}, {"sha": "7d946c98dae771ca20d4baf3f8734a2d24de46bf", "filename": "crates/ra_ide/src/syntax_highlighting/html.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9cb2933fbeddef4ed70bde77ded4f9bb185548e/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9cb2933fbeddef4ed70bde77ded4f9bb185548e/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs?ref=a9cb2933fbeddef4ed70bde77ded4f9bb185548e", "patch": "@@ -69,6 +69,7 @@ pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padd\n .string_literal     { color: #CC9393; }\n .field              { color: #94BFF3; }\n .function           { color: #93E0E3; }\n+.operator.unsafe    { color: #E28C14; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }"}, {"sha": "94f466966a3a642899fbac6109125482dc6ff76c", "filename": "crates/ra_ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9cb2933fbeddef4ed70bde77ded4f9bb185548e/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9cb2933fbeddef4ed70bde77ded4f9bb185548e/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=a9cb2933fbeddef4ed70bde77ded4f9bb185548e", "patch": "@@ -24,12 +24,14 @@ pub enum HighlightTag {\n     Enum,\n     EnumVariant,\n     Field,\n+    FormatSpecifier,\n     Function,\n     Keyword,\n     Lifetime,\n     Macro,\n     Module,\n     NumericLiteral,\n+    Operator,\n     SelfKeyword,\n     SelfType,\n     Static,\n@@ -41,8 +43,6 @@ pub enum HighlightTag {\n     Union,\n     Local,\n     UnresolvedReference,\n-    FormatSpecifier,\n-    Operator,\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n@@ -72,12 +72,14 @@ impl HighlightTag {\n             HighlightTag::Enum => \"enum\",\n             HighlightTag::EnumVariant => \"enum_variant\",\n             HighlightTag::Field => \"field\",\n+            HighlightTag::FormatSpecifier => \"format_specifier\",\n             HighlightTag::Function => \"function\",\n             HighlightTag::Keyword => \"keyword\",\n             HighlightTag::Lifetime => \"lifetime\",\n             HighlightTag::Macro => \"macro\",\n             HighlightTag::Module => \"module\",\n             HighlightTag::NumericLiteral => \"numeric_literal\",\n+            HighlightTag::Operator => \"operator\",\n             HighlightTag::SelfKeyword => \"self_keyword\",\n             HighlightTag::SelfType => \"self_type\",\n             HighlightTag::Static => \"static\",\n@@ -89,8 +91,6 @@ impl HighlightTag {\n             HighlightTag::Union => \"union\",\n             HighlightTag::Local => \"variable\",\n             HighlightTag::UnresolvedReference => \"unresolved_reference\",\n-            HighlightTag::FormatSpecifier => \"format_specifier\",\n-            HighlightTag::Operator => \"operator\",\n         }\n     }\n }"}, {"sha": "36a1aa419bc3e1d6ed12896478b5e496beee9d5e", "filename": "crates/ra_ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a9cb2933fbeddef4ed70bde77ded4f9bb185548e/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9cb2933fbeddef4ed70bde77ded4f9bb185548e/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=a9cb2933fbeddef4ed70bde77ded4f9bb185548e", "patch": "@@ -258,3 +258,34 @@ fn main() {\n     fs::write(dst_file, &actual_html).unwrap();\n     assert_eq_text!(expected_html, actual_html);\n }\n+\n+#[test]\n+fn test_unsafe_highlighting() {\n+    let (analysis, file_id) = single_file(\n+        r#\"\n+unsafe fn unsafe_fn() {}\n+\n+struct HasUnsafeFn;\n+\n+impl HasUnsafeFn {\n+    unsafe fn unsafe_method(&self) {}\n+}\n+\n+fn main() {\n+    let x = &5 as *const usize;\n+    unsafe {\n+        unsafe_fn();\n+        HasUnsafeFn.unsafe_method();\n+        let y = *x;\n+        let z = -x;\n+    }\n+}\n+\"#\n+        .trim(),\n+    );\n+    let dst_file = project_dir().join(\"crates/ra_ide/src/snapshots/highlight_unsafe.html\");\n+    let actual_html = &analysis.highlight_as_html(file_id, false).unwrap();\n+    let expected_html = &read_text(&dst_file);\n+    fs::write(dst_file, &actual_html).unwrap();\n+    assert_eq_text!(expected_html, actual_html);\n+}"}]}