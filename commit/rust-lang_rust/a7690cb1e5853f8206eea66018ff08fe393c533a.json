{"sha": "a7690cb1e5853f8206eea66018ff08fe393c533a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NjkwY2IxZTU4NTNmODIwNmVlYTY2MDE4ZmYwOGZlMzkzYzUzM2E=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-09-25T10:53:25Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-09-25T11:01:20Z"}, "message": "Make rewrite_string return `Option<String>`", "tree": {"sha": "d055bb3a9204f9ccb9593cea0bbdb3f63527e0da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d055bb3a9204f9ccb9593cea0bbdb3f63527e0da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7690cb1e5853f8206eea66018ff08fe393c533a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7690cb1e5853f8206eea66018ff08fe393c533a", "html_url": "https://github.com/rust-lang/rust/commit/a7690cb1e5853f8206eea66018ff08fe393c533a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7690cb1e5853f8206eea66018ff08fe393c533a/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e80080deb60e78e7a57be4d693ca8e96cb14a1b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e80080deb60e78e7a57be4d693ca8e96cb14a1b2", "html_url": "https://github.com/rust-lang/rust/commit/e80080deb60e78e7a57be4d693ca8e96cb14a1b2"}], "stats": {"total": 227, "additions": 134, "deletions": 93}, "files": [{"sha": "1e22a578eb12baee217fffbda21c4a60cf8dd888", "filename": "src/comment.rs", "status": "modified", "additions": 54, "deletions": 50, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/a7690cb1e5853f8206eea66018ff08fe393c533a/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7690cb1e5853f8206eea66018ff08fe393c533a/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=a7690cb1e5853f8206eea66018ff08fe393c533a", "patch": "@@ -21,7 +21,7 @@ pub fn rewrite_comment(orig: &str,\n                        width: usize,\n                        offset: Indent,\n                        config: &Config)\n-                       -> String {\n+                       -> Option<String> {\n     let s = orig.trim();\n \n     // Edge case: block comments. Let's not trim their lines (for now).\n@@ -47,49 +47,53 @@ pub fn rewrite_comment(orig: &str,\n     let indent_str = offset.to_string(config);\n     let line_breaks = s.chars().filter(|&c| c == '\\n').count();\n \n-    let (_, mut s) = s.lines()\n-                      .enumerate()\n-                      .map(|(i, mut line)| {\n-                          line = line.trim();\n-                          // Drop old closer.\n-                          if i == line_breaks && line.ends_with(\"*/\") && !line.starts_with(\"//\") {\n-                              line = &line[..(line.len() - 2)];\n-                          }\n-\n-                          line.trim_right()\n-                      })\n-                      .map(left_trim_comment_line)\n-                      .map(|line| {\n-                          if line_breaks == 0 {\n-                              line.trim_left()\n-                          } else {\n-                              line\n-                          }\n-                      })\n-                      .fold((true, opener.to_owned()),\n-                            |(first, mut acc), line| {\n-                                if !first {\n-                                    acc.push('\\n');\n-                                    acc.push_str(&indent_str);\n-                                    acc.push_str(line_start);\n-                                }\n-\n-                                if line.len() > max_chars {\n-                                    acc.push_str(&rewrite_string(line, &fmt));\n-                                } else {\n-                                    if line.len() == 0 {\n-                                        acc.pop(); // Remove space if this is an empty comment.\n-                                    } else {\n-                                        acc.push_str(line);\n-                                    }\n-                                }\n-\n-                                (false, acc)\n-                            });\n-\n-    s.push_str(closer);\n-\n-    s\n+    let lines = s.lines()\n+                 .enumerate()\n+                 .map(|(i, mut line)| {\n+                     line = line.trim();\n+                     // Drop old closer.\n+                     if i == line_breaks && line.ends_with(\"*/\") && !line.starts_with(\"//\") {\n+                         line = &line[..(line.len() - 2)];\n+                     }\n+\n+                     line.trim_right()\n+                 })\n+                 .map(left_trim_comment_line)\n+                 .map(|line| {\n+                     if line_breaks == 0 {\n+                         line.trim_left()\n+                     } else {\n+                         line\n+                     }\n+                 });\n+\n+    let mut result = opener.to_owned();\n+    let mut first = true;\n+\n+    for line in lines {\n+        if !first {\n+            result.push('\\n');\n+            result.push_str(&indent_str);\n+            result.push_str(line_start);\n+        }\n+\n+        if line.len() > max_chars {\n+            let rewrite = try_opt!(rewrite_string(line, &fmt));\n+            result.push_str(&rewrite);\n+        } else {\n+            if line.len() == 0 {\n+                result.pop(); // Remove space if this is an empty comment.\n+            } else {\n+                result.push_str(line);\n+            }\n+        }\n+\n+        first = false;\n+    }\n+\n+    result.push_str(closer);\n+\n+    Some(result)\n }\n \n fn left_trim_comment_line(line: &str) -> &str {\n@@ -294,33 +298,33 @@ impl<T> Iterator for CharClasses<T> where T: Iterator, T::Item: RichChar {\n #[cfg(test)]\n mod test {\n     use super::{CharClasses, CodeCharKind, contains_comment, rewrite_comment, FindUncommented};\n-\n     use Indent;\n+\n     #[test]\n     #[rustfmt_skip]\n     fn format_comments() {\n         let config = Default::default();\n         assert_eq!(\"/* test */\", rewrite_comment(\" //test\", true, 100, Indent::new(0, 100),\n-                                                 &config));\n+                                                 &config).unwrap());\n         assert_eq!(\"// comment\\n// on a\", rewrite_comment(\"// comment on a\", false, 10,\n-                                                          Indent::empty(), &config));\n+                                                          Indent::empty(), &config).unwrap());\n \n         assert_eq!(\"//  A multi line comment\\n            // between args.\",\n                    rewrite_comment(\"//  A multi line comment\\n             // between args.\",\n                                    false,\n                                    60,\n                                    Indent::new(0, 12),\n-                                   &config));\n+                                   &config).unwrap());\n \n         let input = \"// comment\";\n         let expected =\n             \"/* com\\n                                                                      \\\n              * men\\n                                                                      \\\n              * t */\";\n-        assert_eq!(expected, rewrite_comment(input, true, 9, Indent::new(0, 69), &config));\n+        assert_eq!(expected, rewrite_comment(input, true, 9, Indent::new(0, 69), &config).unwrap());\n \n         assert_eq!(\"/* trimmed */\", rewrite_comment(\"/*   trimmed    */\", true, 100,\n-                                                    Indent::new(0, 100), &config));\n+                                                    Indent::new(0, 100), &config).unwrap());\n     }\n \n     // This is probably intended to be a non-test fn, but it is not used. I'm"}, {"sha": "2e87bfbc19a3d0656ff19a1fe7659ed631ec3d4b", "filename": "src/expr.rs", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a7690cb1e5853f8206eea66018ff08fe393c533a/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7690cb1e5853f8206eea66018ff08fe393c533a/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=a7690cb1e5853f8206eea66018ff08fe393c533a", "patch": "@@ -374,7 +374,11 @@ impl Rewrite for ast::Block {\n                     // 9 = \"unsafe  {\".len(), 7 = \"unsafe \".len()\n                     let budget = try_opt!(width.checked_sub(9));\n                     format!(\"unsafe {} \",\n-                            rewrite_comment(trimmed, true, budget, offset + 7, context.config))\n+                            try_opt!(rewrite_comment(trimmed,\n+                                                     true,\n+                                                     budget,\n+                                                     offset + 7,\n+                                                     context.config)))\n                 } else {\n                     \"unsafe \".to_owned()\n                 };\n@@ -658,7 +662,7 @@ fn rewrite_match_arm_comment(context: &RewriteContext,\n                              width: usize,\n                              arm_indent: Indent,\n                              arm_indent_str: &str)\n-                             -> String {\n+                             -> Option<String> {\n     // The leading \",\" is not part of the arm-comment\n     let missed_str = match missed_str.find_uncommented(\",\") {\n         Some(n) => &missed_str[n+1..],\n@@ -684,11 +688,17 @@ fn rewrite_match_arm_comment(context: &RewriteContext,\n     }\n     let missed_str = missed_str[first..].trim();\n     if !missed_str.is_empty() {\n+        let comment = try_opt!(rewrite_comment(&missed_str,\n+                                               false,\n+                                               width,\n+                                               arm_indent,\n+                                               context.config));\n         result.push('\\n');\n         result.push_str(arm_indent_str);\n-        result.push_str(&rewrite_comment(&missed_str, false, width, arm_indent, context.config));\n+        result.push_str(&comment);\n     }\n-    return result;\n+\n+    Some(result)\n }\n \n fn rewrite_match(context: &RewriteContext,\n@@ -722,11 +732,12 @@ fn rewrite_match(context: &RewriteContext,\n         } else {\n             context.snippet(mk_sp(arm_end_pos(&arms[i-1]), arm_start_pos(arm)))\n         };\n-        result.push_str(&rewrite_match_arm_comment(context,\n-                                                   &missed_str,\n-                                                   width,\n-                                                   arm_indent,\n-                                                   &arm_indent_str));\n+        let comment = try_opt!(rewrite_match_arm_comment(context,\n+                                                         &missed_str,\n+                                                         width,\n+                                                         arm_indent,\n+                                                         &arm_indent_str));\n+        result.push_str(&comment);\n         result.push('\\n');\n         result.push_str(&arm_indent_str);\n \n@@ -742,11 +753,12 @@ fn rewrite_match(context: &RewriteContext,\n         }\n     }\n     let last_comment = context.snippet(mk_sp(arm_end_pos(&arms[arms.len() - 1]), span.hi));\n-    result.push_str(&rewrite_match_arm_comment(context,\n-                                               &last_comment,\n-                                               width,\n-                                               arm_indent,\n-                                               &arm_indent_str));\n+    let comment = try_opt!(rewrite_match_arm_comment(context,\n+                                                     &last_comment,\n+                                                     width,\n+                                                     arm_indent,\n+                                                     &arm_indent_str));\n+    result.push_str(&comment);\n     result.push('\\n');\n     result.push_str(&(context.block_indent + context.overflow_indent).to_string(context.config));\n     result.push('}');\n@@ -1004,7 +1016,7 @@ fn rewrite_string_lit(context: &RewriteContext,\n     let string_lit = context.snippet(span);\n     let str_lit = &string_lit[1..string_lit.len() - 1]; // Remove the quote characters.\n \n-    Some(rewrite_string(str_lit, &fmt))\n+    rewrite_string(str_lit, &fmt)\n }\n \n pub fn rewrite_call<R>(context: &RewriteContext,"}, {"sha": "aa82ec479649b912cd5056641da8fdc487ad2c1a", "filename": "src/lists.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a7690cb1e5853f8206eea66018ff08fe393c533a/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7690cb1e5853f8206eea66018ff08fe393c533a/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=a7690cb1e5853f8206eea66018ff08fe393c533a", "patch": "@@ -200,11 +200,12 @@ pub fn write_list<'b>(items: &[ListItem], formatting: &ListFormatting<'b>) -> Op\n             let block_mode = tactic != ListTactic::Vertical;\n             // Width restriction is only relevant in vertical mode.\n             let max_width = formatting.v_width;\n-            result.push_str(&rewrite_comment(comment,\n-                                             block_mode,\n-                                             max_width,\n-                                             formatting.indent,\n-                                             formatting.config));\n+            let comment = try_opt!(rewrite_comment(comment,\n+                                                   block_mode,\n+                                                   max_width,\n+                                                   formatting.indent,\n+                                                   formatting.config));\n+            result.push_str(&comment);\n \n             if tactic == ListTactic::Vertical {\n                 result.push('\\n');\n@@ -221,11 +222,11 @@ pub fn write_list<'b>(items: &[ListItem], formatting: &ListFormatting<'b>) -> Op\n         // Post-comments\n         if tactic != ListTactic::Vertical && item.post_comment.is_some() {\n             let comment = item.post_comment.as_ref().unwrap();\n-            let formatted_comment = rewrite_comment(comment,\n-                                                    true,\n-                                                    formatting.v_width,\n-                                                    Indent::empty(),\n-                                                    formatting.config);\n+            let formatted_comment = try_opt!(rewrite_comment(comment,\n+                                                             true,\n+                                                             formatting.v_width,\n+                                                             Indent::empty(),\n+                                                             formatting.config));\n \n             result.push(' ');\n             result.push_str(&formatted_comment);\n@@ -246,11 +247,11 @@ pub fn write_list<'b>(items: &[ListItem], formatting: &ListFormatting<'b>) -> Op\n                               comment.trim().contains('\\n') ||\n                               comment.trim().len() > width;\n \n-            let formatted_comment = rewrite_comment(comment,\n-                                                    block_style,\n-                                                    width,\n-                                                    offset,\n-                                                    formatting.config);\n+            let formatted_comment = try_opt!(rewrite_comment(comment,\n+                                                             block_style,\n+                                                             width,\n+                                                             offset,\n+                                                             formatting.config));\n \n             result.push(' ');\n             result.push_str(&formatted_comment);"}, {"sha": "ffaf52d338098d559d30e19979fec9b6b97e0226", "filename": "src/string.rs", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a7690cb1e5853f8206eea66018ff08fe393c533a/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7690cb1e5853f8206eea66018ff08fe393c533a/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=a7690cb1e5853f8206eea66018ff08fe393c533a", "patch": "@@ -31,23 +31,23 @@ pub struct StringFormat<'a> {\n }\n \n // TODO: simplify this!\n-pub fn rewrite_string<'a>(s: &str, fmt: &StringFormat<'a>) -> String {\n+pub fn rewrite_string<'a>(s: &str, fmt: &StringFormat<'a>) -> Option<String> {\n     // TODO if lo.col > IDEAL - 10, start a new line (need cur indent for that)\n     // Strip line breaks.\n     let re = Regex::new(r\"(\\\\[:space:]+)\").unwrap();\n     let stripped_str = re.replace_all(s, \"\");\n \n     let graphemes = UnicodeSegmentation::graphemes(&*stripped_str, false).collect::<Vec<&str>>();\n-\n     let indent = fmt.offset.to_string(fmt.config);\n-    let indent = &indent;\n \n     let mut cur_start = 0;\n     let mut result = String::with_capacity(round_up_to_power_of_two(s.len()));\n     result.push_str(fmt.opener);\n \n     let ender_length = fmt.line_end.len();\n-    let max_chars = fmt.width.checked_sub(fmt.opener.len() + ender_length).unwrap_or(1);\n+    // If we cannot put at least a single character per line, the rewrite won't\n+    // succeed.\n+    let max_chars = try_opt!(fmt.width.checked_sub(fmt.opener.len() + ender_length + 1)) + 1;\n \n     loop {\n         let mut cur_end = cur_start + max_chars;\n@@ -57,8 +57,9 @@ pub fn rewrite_string<'a>(s: &str, fmt: &StringFormat<'a>) -> String {\n             result.push_str(line);\n             break;\n         }\n+\n         // Push cur_end left until we reach whitespace.\n-        while !(graphemes[cur_end - 1].trim().len() == 0) {\n+        while !graphemes[cur_end - 1].trim().is_empty() {\n             cur_end -= 1;\n             if cur_end - cur_start < MIN_STRING {\n                 // We can't break at whitespace, fall back to splitting\n@@ -71,7 +72,7 @@ pub fn rewrite_string<'a>(s: &str, fmt: &StringFormat<'a>) -> String {\n             }\n         }\n         // Make sure there is no whitespace to the right of the break.\n-        while cur_end < s.len() && graphemes[cur_end].trim().len() == 0 {\n+        while cur_end < s.len() && graphemes[cur_end].trim().is_empty() {\n             cur_end += 1;\n         }\n         let raw_line = graphemes[cur_start..cur_end].join(\"\");\n@@ -85,12 +86,34 @@ pub fn rewrite_string<'a>(s: &str, fmt: &StringFormat<'a>) -> String {\n         result.push_str(line);\n         result.push_str(fmt.line_end);\n         result.push('\\n');\n-        result.push_str(indent);\n+        result.push_str(&indent);\n         result.push_str(fmt.line_start);\n \n         cur_start = cur_end;\n     }\n     result.push_str(fmt.closer);\n \n-    result\n+    Some(result)\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use super::{StringFormat, rewrite_string};\n+\n+    #[test]\n+    fn issue343() {\n+        let config = Default::default();\n+        let fmt = StringFormat {\n+            opener: \"\\\"\",\n+            closer: \"\\\"\",\n+            line_start: \" \",\n+            line_end: \"\\\\\",\n+            width: 2,\n+            offset: ::Indent::empty(),\n+            trim_end: false,\n+            config: &config,\n+        };\n+\n+        rewrite_string(\"eq_\", &fmt);\n+    }\n }"}, {"sha": "1a070a839f5ad81dd2bb6e4bb5a8589b7b0d2fb6", "filename": "src/visitor.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a7690cb1e5853f8206eea66018ff08fe393c533a/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7690cb1e5853f8206eea66018ff08fe393c533a/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=a7690cb1e5853f8206eea66018ff08fe393c533a", "patch": "@@ -407,11 +407,12 @@ impl<'a> Rewrite for [ast::Attribute] {\n                 let multi_line = a_str.starts_with(\"//\") && comment.matches('\\n').count() > 1;\n                 let comment = comment.trim();\n                 if !comment.is_empty() {\n-                    let comment = rewrite_comment(comment,\n-                                                  false,\n-                                                  context.config.max_width - offset.width(),\n-                                                  offset,\n-                                                  context.config);\n+                    let comment = try_opt!(rewrite_comment(comment,\n+                                                           false,\n+                                                           context.config.max_width -\n+                                                           offset.width(),\n+                                                           offset,\n+                                                           context.config));\n                     result.push_str(&indent);\n                     result.push_str(&comment);\n                     result.push('\\n');"}]}