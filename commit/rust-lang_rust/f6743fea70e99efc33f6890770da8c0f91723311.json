{"sha": "f6743fea70e99efc33f6890770da8c0f91723311", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NzQzZmVhNzBlOTllZmMzM2Y2ODkwNzcwZGE4YzBmOTE3MjMzMTE=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-05-10T06:12:19Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-05-10T08:34:19Z"}, "message": "librustc: allow destructuring of structs with destructors if the pattern has no moves.\n\nThis check only works for `match`s, the checks (incorrectly) do not run for patterns in\n`let`s.", "tree": {"sha": "bea6b5eedf23690d16021815c4c1d9d61a665393", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bea6b5eedf23690d16021815c4c1d9d61a665393"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6743fea70e99efc33f6890770da8c0f91723311", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6743fea70e99efc33f6890770da8c0f91723311", "html_url": "https://github.com/rust-lang/rust/commit/f6743fea70e99efc33f6890770da8c0f91723311", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6743fea70e99efc33f6890770da8c0f91723311/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad8e236f32fccf6ec99025e2ba77f79b4c98d399", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad8e236f32fccf6ec99025e2ba77f79b4c98d399", "html_url": "https://github.com/rust-lang/rust/commit/ad8e236f32fccf6ec99025e2ba77f79b4c98d399"}], "stats": {"total": 109, "additions": 86, "deletions": 23}, "files": [{"sha": "893940d8ac60d10765c89f10371ce3f98c336756", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 38, "deletions": 16, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f6743fea70e99efc33f6890770da8c0f91723311/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6743fea70e99efc33f6890770da8c0f91723311/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=f6743fea70e99efc33f6890770da8c0f91723311", "patch": "@@ -822,43 +822,65 @@ pub fn check_legality_of_move_bindings(cx: @MatchCheckCtxt,\n             }\n         }\n \n-        // Now check to ensure that any move binding is not behind an @ or &.\n-        // This is always illegal.\n+        // Now check to ensure that any move binding is not behind an\n+        // @ or &, or within a struct with a destructor.  This is\n+        // always illegal.\n         let vt = visit::mk_vt(@visit::Visitor {\n-            visit_pat: |pat, behind_bad_pointer: bool, v| {\n+            visit_pat: |pat, (behind_bad_pointer, behind_dtor_struct): (bool, bool), v| {\n                 match pat.node {\n                     pat_ident(_, _, sub) => {\n                         debug!(\"(check legality of move) checking pat \\\n-                                ident with behind_bad_pointer %?\",\n-                                behind_bad_pointer);\n+                                ident with behind_bad_pointer %? and behind_dtor_struct %?\",\n+                               behind_bad_pointer, behind_dtor_struct);\n \n-                        if behind_bad_pointer &&\n+                        if behind_bad_pointer || behind_dtor_struct &&\n                             cx.moves_map.contains(&pat.id)\n                         {\n-                            cx.tcx.sess.span_err(\n-                                pat.span,\n-                                \"by-move pattern \\\n-                                 bindings may not occur \\\n-                                 behind @ or & bindings\");\n+                            let msg = if behind_bad_pointer {\n+                                \"by-move pattern bindings may not occur behind @ or & bindings\"\n+                            } else {\n+                                \"cannot bind by-move within struct (it has a destructor)\"\n+                            };\n+                            cx.tcx.sess.span_err(pat.span, msg);\n                         }\n \n                         match sub {\n                             None => {}\n                             Some(subpat) => {\n-                                (v.visit_pat)(subpat, behind_bad_pointer, v);\n+                                (v.visit_pat)(subpat,\n+                                              (behind_bad_pointer, behind_dtor_struct),\n+                                              v);\n                             }\n                         }\n                     }\n \n                     pat_box(subpat) | pat_region(subpat) => {\n-                        (v.visit_pat)(subpat, true, v);\n+                        (v.visit_pat)(subpat, (true, behind_dtor_struct), v);\n                     }\n \n-                    _ => visit::visit_pat(pat, behind_bad_pointer, v)\n+                    pat_struct(_, ref fields, _) => {\n+                        let behind_dtor_struct = behind_dtor_struct ||\n+                            (match cx.tcx.def_map.find(&pat.id) {\n+                                Some(&def_struct(id)) => {\n+                                    ty::has_dtor(cx.tcx, id)\n+                                }\n+                                _ => false\n+                            });\n+                        debug!(\"(check legality of move) checking pat \\\n+                                struct with behind_bad_pointer %? and behind_dtor_struct %?\",\n+                               behind_bad_pointer, behind_dtor_struct);\n+\n+                        for fields.each |fld| {\n+                            (v.visit_pat)(fld.pat, (behind_bad_pointer,\n+                                                    behind_dtor_struct), v)\n+                        }\n+                    }\n+\n+                    _ => visit::visit_pat(pat, (behind_bad_pointer, behind_dtor_struct), v)\n                 }\n             },\n-            .. *visit::default_visitor::<bool>()\n+            .. *visit::default_visitor::<(bool, bool)>()\n         });\n-        (vt.visit_pat)(*pat, false, vt);\n+        (vt.visit_pat)(*pat, (false, false), vt);\n     }\n }"}, {"sha": "a1a098bc5760e8fe676b69ebd3e53e502d631684", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6743fea70e99efc33f6890770da8c0f91723311/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6743fea70e99efc33f6890770da8c0f91723311/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=f6743fea70e99efc33f6890770da8c0f91723311", "patch": "@@ -340,12 +340,6 @@ pub fn check_struct_pat(pcx: &pat_ctxt, pat_id: ast::node_id, span: span,\n         }\n     }\n \n-    // Forbid pattern-matching structs with destructors.\n-    if ty::has_dtor(tcx, class_id) {\n-        tcx.sess.span_err(span, \"deconstructing struct not allowed in pattern \\\n-                                 (it has a destructor)\");\n-    }\n-\n     check_struct_pat_fields(pcx, span, path, fields, class_fields, class_id,\n                             substitutions, etc);\n }"}, {"sha": "ed68defdc2626dd825d6ea055a2b5788c2b0fbb9", "filename": "src/test/compile-fail/disallowed-deconstructing-destructing-struct-let.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f6743fea70e99efc33f6890770da8c0f91723311/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6743fea70e99efc33f6890770da8c0f91723311/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-let.rs?ref=f6743fea70e99efc33f6890770da8c0f91723311", "patch": "@@ -1,3 +1,4 @@\n+// xfail-test\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -19,7 +20,7 @@ impl Drop for X {\n }\n \n fn unwrap(x: X) -> ~str {\n-    let X { x: y } = x; //~ ERROR deconstructing struct not allowed in pattern\n+    let X { x: y } = x; //~ ERROR cannot bind by-move within struct\n     y\n }\n ", "previous_filename": "src/test/compile-fail/disallowed-deconstructing-destructing-struct.rs"}, {"sha": "40305ba8b95c92f5344394f52ed60efe6cc04391", "filename": "src/test/compile-fail/disallowed-deconstructing-destructing-struct-match.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f6743fea70e99efc33f6890770da8c0f91723311/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6743fea70e99efc33f6890770da8c0f91723311/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-match.rs?ref=f6743fea70e99efc33f6890770da8c0f91723311", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct X {\n+    x: ~str,\n+}\n+\n+impl Drop for X {\n+    fn finalize(&self) {\n+        error!(\"value: %s\", self.x);\n+    }\n+}\n+\n+fn main() {\n+    let x = X { x: ~\"hello\" };\n+\n+    match x {\n+        X { x: y } => error!(\"contents: %s\", y)\n+        //~^ ERROR cannot bind by-move within struct\n+    }\n+}"}, {"sha": "394345556fcf31eb72db1c6118ead6e5626dc117", "filename": "src/test/run-pass/issue-6341.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f6743fea70e99efc33f6890770da8c0f91723311/src%2Ftest%2Frun-pass%2Fissue-6341.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6743fea70e99efc33f6890770da8c0f91723311/src%2Ftest%2Frun-pass%2Fissue-6341.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6341.rs?ref=f6743fea70e99efc33f6890770da8c0f91723311", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[deriving(Eq)]\n+struct A { x: uint }\n+\n+impl Drop for A {\n+    fn finalize(&self) {}\n+}\n+\n+fn main() {}\n\\ No newline at end of file"}]}