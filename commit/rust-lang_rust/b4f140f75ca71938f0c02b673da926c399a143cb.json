{"sha": "b4f140f75ca71938f0c02b673da926c399a143cb", "node_id": "C_kwDOAAsO6NoAKGI0ZjE0MGY3NWNhNzE5MzhmMGMwMmI2NzNkYTkyNmMzOTlhMTQzY2I", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-31T15:29:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-31T15:29:55Z"}, "message": "Rollup merge of #95520 - rust-lang:ptrtypo, r=lcnr\n\nFix typos in core::ptr docs", "tree": {"sha": "225d9c40c3a1d29de5cf97801a15f65deab3b507", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/225d9c40c3a1d29de5cf97801a15f65deab3b507"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4f140f75ca71938f0c02b673da926c399a143cb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiRcjzCRBK7hj4Ov3rIwAAdGMIAEHjdZO4iKmrOOAWMkqli9Oy\nVrBXwUJ2iBl13Rcj8aZh6d9EK/2RflYFLqRlnIpmU8Zuv5BYXcD2IN63hRy2WKuH\nP46Xx4ud25/lzShmqIWfA/TlQ5wo6puZ1sI1aPPweoX7YbmTzm3lbP1wQ4iscadI\nPQO8ymhN4CaUEH2cvN6kFT8NUwNcCzPpm5aBQIZEBk+H6tZFWExNhvEzzFAKbGpX\ns0w5GOGbS4Z810/aFNV8Xq/IxElv51HJx2uPQeRh4FMqNzDNFy1Lb6usL5LEqK7y\nUDJeX/mJqLklbjzag4/KFljvgdOHDaRCc75nNfk6EwpC6Q/s3iZ0/2VEsYrae9I=\n=IQG6\n-----END PGP SIGNATURE-----\n", "payload": "tree 225d9c40c3a1d29de5cf97801a15f65deab3b507\nparent 1f86789bb3a67c21b88c0f4050d4794de2a128ba\nparent bd49581dcf7dc5ed85dcd1e721daf1e0c90f0545\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648740595 +0200\ncommitter GitHub <noreply@github.com> 1648740595 +0200\n\nRollup merge of #95520 - rust-lang:ptrtypo, r=lcnr\n\nFix typos in core::ptr docs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4f140f75ca71938f0c02b673da926c399a143cb", "html_url": "https://github.com/rust-lang/rust/commit/b4f140f75ca71938f0c02b673da926c399a143cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4f140f75ca71938f0c02b673da926c399a143cb/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f86789bb3a67c21b88c0f4050d4794de2a128ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f86789bb3a67c21b88c0f4050d4794de2a128ba", "html_url": "https://github.com/rust-lang/rust/commit/1f86789bb3a67c21b88c0f4050d4794de2a128ba"}, {"sha": "bd49581dcf7dc5ed85dcd1e721daf1e0c90f0545", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd49581dcf7dc5ed85dcd1e721daf1e0c90f0545", "html_url": "https://github.com/rust-lang/rust/commit/bd49581dcf7dc5ed85dcd1e721daf1e0c90f0545"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "68d80022b4c80d9992110b8911a794cdd7f88c5f", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4f140f75ca71938f0c02b673da926c399a143cb/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f140f75ca71938f0c02b673da926c399a143cb/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=b4f140f75ca71938f0c02b673da926c399a143cb", "patch": "@@ -84,7 +84,7 @@\n //! have to change, and is it worse or better now? Would any patterns become truly inexpressible?\n //! Could we carve out special exceptions for those patterns? Should we?\n //!\n-//! A secondary goal of this project is to see if we can disamiguate the many functions of\n+//! A secondary goal of this project is to see if we can disambiguate the many functions of\n //! pointer<->integer casts enough for the definition of `usize` to be loosened so that it\n //! isn't *pointer*-sized but address-space/offset/allocation-sized (we'll probably continue\n //! to conflate these notions). This would potentially make it possible to more efficiently\n@@ -163,7 +163,7 @@\n //! of pointers and `usize` (and `isize`), and defining a pointer to semantically contain the\n //! following information:\n //!\n-//! * The **address-space** it is part of (i.e. \"data\" vs \"code\" in WASM).\n+//! * The **address-space** it is part of (e.g. \"data\" vs \"code\" in WASM).\n //! * The **address** it points to, which can be represented by a `usize`.\n //! * The **provenance** it has, defining the memory it has permission to access.\n //!\n@@ -246,7 +246,7 @@\n //! be using AtomicPtr instead. If that messes up the way you atomically manipulate pointers,\n //! we would like to know why, and what needs to be done to fix it.)\n //!\n-//! Something more complicated and just generally *evil* like a XOR-List requires more significant\n+//! Something more complicated and just generally *evil* like an XOR-List requires more significant\n //! changes like allocating all nodes in a pre-allocated Vec or Arena and using a pointer\n //! to the whole allocation to reconstitute the XORed addresses.\n //!\n@@ -257,7 +257,7 @@\n //! special attention at all, because they're generally accessing memory outside the scope of\n //! \"the abstract machine\", or already using \"I know what I'm doing\" annotations like \"volatile\".\n //!\n-//! Under [Strict Provenance] is is Undefined Behaviour to:\n+//! Under [Strict Provenance] it is Undefined Behaviour to:\n //!\n //! * Access memory through a pointer that does not have provenance over that memory.\n //!"}]}