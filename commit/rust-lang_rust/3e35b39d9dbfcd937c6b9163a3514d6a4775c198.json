{"sha": "3e35b39d9dbfcd937c6b9163a3514d6a4775c198", "node_id": "C_kwDOAAsO6NoAKDNlMzViMzlkOWRiZmNkOTM3YzZiOTE2M2EzNTE0ZDZhNDc3NWMxOTg", "commit": {"author": {"name": "mochaaP", "email": "git@mochaa.ws", "date": "2022-12-22T07:51:52Z"}, "committer": {"name": "mochaaP", "email": "git@mochaa.ws", "date": "2022-12-22T08:01:27Z"}, "message": "std: only use LFS function on glibc\n\nsee #94173 and commit 27011b4185f5341e579d2a02cabd3dc7d7aa7149.", "tree": {"sha": "86f7e6b717e143582e45f548b1cc7ce1d7b7cddf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86f7e6b717e143582e45f548b1cc7ce1d7b7cddf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e35b39d9dbfcd937c6b9163a3514d6a4775c198", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABMIAB0WIQS5LjeDjYcFhhuq901pfKcdZmnc8QUCY6QO2QAKCRBpfKcdZmnc\n8TOqAQCZzBzhuekN0cFmVyEJRyU2sYTbs6LHoTa//O50QyNsCwEAnD9UirwVRs94\nKw65t/S+HX5vnNRglGU8TVzfnA5lTO8=\n=lwkc\n-----END PGP SIGNATURE-----", "payload": "tree 86f7e6b717e143582e45f548b1cc7ce1d7b7cddf\nparent 857488010837d296a4f3c0c5aadb3c0fa8494ff3\nauthor mochaaP <git@mochaa.ws> 1671695512 +0800\ncommitter mochaaP <git@mochaa.ws> 1671696087 +0800\n\nstd: only use LFS function on glibc\n\nsee #94173 and commit 27011b4185f5341e579d2a02cabd3dc7d7aa7149.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e35b39d9dbfcd937c6b9163a3514d6a4775c198", "html_url": "https://github.com/rust-lang/rust/commit/3e35b39d9dbfcd937c6b9163a3514d6a4775c198", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e35b39d9dbfcd937c6b9163a3514d6a4775c198/comments", "author": {"login": "mochaaP", "id": 21154023, "node_id": "MDQ6VXNlcjIxMTU0MDIz", "avatar_url": "https://avatars.githubusercontent.com/u/21154023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mochaaP", "html_url": "https://github.com/mochaaP", "followers_url": "https://api.github.com/users/mochaaP/followers", "following_url": "https://api.github.com/users/mochaaP/following{/other_user}", "gists_url": "https://api.github.com/users/mochaaP/gists{/gist_id}", "starred_url": "https://api.github.com/users/mochaaP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mochaaP/subscriptions", "organizations_url": "https://api.github.com/users/mochaaP/orgs", "repos_url": "https://api.github.com/users/mochaaP/repos", "events_url": "https://api.github.com/users/mochaaP/events{/privacy}", "received_events_url": "https://api.github.com/users/mochaaP/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mochaaP", "id": 21154023, "node_id": "MDQ6VXNlcjIxMTU0MDIz", "avatar_url": "https://avatars.githubusercontent.com/u/21154023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mochaaP", "html_url": "https://github.com/mochaaP", "followers_url": "https://api.github.com/users/mochaaP/followers", "following_url": "https://api.github.com/users/mochaaP/following{/other_user}", "gists_url": "https://api.github.com/users/mochaaP/gists{/gist_id}", "starred_url": "https://api.github.com/users/mochaaP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mochaaP/subscriptions", "organizations_url": "https://api.github.com/users/mochaaP/orgs", "repos_url": "https://api.github.com/users/mochaaP/repos", "events_url": "https://api.github.com/users/mochaaP/events{/privacy}", "received_events_url": "https://api.github.com/users/mochaaP/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "857488010837d296a4f3c0c5aadb3c0fa8494ff3", "url": "https://api.github.com/repos/rust-lang/rust/commits/857488010837d296a4f3c0c5aadb3c0fa8494ff3", "html_url": "https://github.com/rust-lang/rust/commit/857488010837d296a4f3c0c5aadb3c0fa8494ff3"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "aea0c26ee8b60e8a2045208b6228a0dc5812d7b5", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e35b39d9dbfcd937c6b9163a3514d6a4775c198/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e35b39d9dbfcd937c6b9163a3514d6a4775c198/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=3e35b39d9dbfcd937c6b9163a3514d6a4775c198", "patch": "@@ -1754,11 +1754,11 @@ mod remove_dir_impl {\n     use crate::sys::{cvt, cvt_r};\n \n     #[cfg(not(any(\n-        target_os = \"linux\",\n+        all(target_os = \"linux\", target_env = \"gnu\"),\n         all(target_os = \"macos\", not(target_arch = \"aarch64\"))\n     )))]\n     use libc::{fdopendir, openat, unlinkat};\n-    #[cfg(target_os = \"linux\")]\n+    #[cfg(all(target_os = \"linux\", target_env = \"gnu\"))]\n     use libc::{fdopendir, openat64 as openat, unlinkat};\n     #[cfg(all(target_os = \"macos\", not(target_arch = \"aarch64\")))]\n     use macos_weak::{fdopendir, openat, unlinkat};"}, {"sha": "0f7107122b7e86ecbba33e56b46efcd52ef2fcbc", "filename": "library/std/src/sys/unix/kernel_copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e35b39d9dbfcd937c6b9163a3514d6a4775c198/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e35b39d9dbfcd937c6b9163a3514d6a4775c198/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs?ref=3e35b39d9dbfcd937c6b9163a3514d6a4775c198", "patch": "@@ -61,9 +61,9 @@ use crate::ptr;\n use crate::sync::atomic::{AtomicBool, AtomicU8, Ordering};\n use crate::sys::cvt;\n use crate::sys::weak::syscall;\n-#[cfg(not(target_os = \"linux\"))]\n+#[cfg(not(all(target_os = \"linux\", target_env = \"gnu\")))]\n use libc::sendfile as sendfile64;\n-#[cfg(target_os = \"linux\")]\n+#[cfg(all(target_os = \"linux\", target_env = \"gnu\"))]\n use libc::sendfile64;\n use libc::{EBADF, EINVAL, ENOSYS, EOPNOTSUPP, EOVERFLOW, EPERM, EXDEV};\n "}, {"sha": "83a43b6ee2697ca14c6e8e75c8d3b4788c32cd59", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e35b39d9dbfcd937c6b9163a3514d6a4775c198/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e35b39d9dbfcd937c6b9163a3514d6a4775c198/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=3e35b39d9dbfcd937c6b9163a3514d6a4775c198", "patch": "@@ -95,9 +95,9 @@ pub unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {\n         )))]\n         'poll: {\n             use crate::sys::os::errno;\n-            #[cfg(not(target_os = \"linux\"))]\n+            #[cfg(not(all(target_os = \"linux\", target_env = \"gnu\")))]\n             use libc::open as open64;\n-            #[cfg(target_os = \"linux\")]\n+            #[cfg(all(target_os = \"linux\", target_env = \"gnu\"))]\n             use libc::open64;\n             let pfds: &mut [_] = &mut [\n                 libc::pollfd { fd: 0, events: 0, revents: 0 },\n@@ -143,9 +143,9 @@ pub unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {\n         )))]\n         {\n             use crate::sys::os::errno;\n-            #[cfg(not(target_os = \"linux\"))]\n+            #[cfg(not(all(target_os = \"linux\", target_env = \"gnu\")))]\n             use libc::open as open64;\n-            #[cfg(target_os = \"linux\")]\n+            #[cfg(all(target_os = \"linux\", target_env = \"gnu\"))]\n             use libc::open64;\n             for fd in 0..3 {\n                 if libc::fcntl(fd, libc::F_GETFD) == -1 && errno() == libc::EBADF {"}, {"sha": "b59d4ba26afb9b3d4d7259bc85a87f6955564741", "filename": "library/std/src/sys/unix/stack_overflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e35b39d9dbfcd937c6b9163a3514d6a4775c198/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e35b39d9dbfcd937c6b9163a3514d6a4775c198/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs?ref=3e35b39d9dbfcd937c6b9163a3514d6a4775c198", "patch": "@@ -45,9 +45,9 @@ mod imp {\n     use crate::thread;\n \n     use libc::MAP_FAILED;\n-    #[cfg(not(target_os = \"linux\"))]\n+    #[cfg(not(all(target_os = \"linux\", target_env = \"gnu\")))]\n     use libc::{mmap as mmap64, munmap};\n-    #[cfg(target_os = \"linux\")]\n+    #[cfg(all(target_os = \"linux\", target_env = \"gnu\"))]\n     use libc::{mmap64, munmap};\n     use libc::{sigaction, sighandler_t, SA_ONSTACK, SA_SIGINFO, SIGBUS, SIG_DFL};\n     use libc::{sigaltstack, SIGSTKSZ, SS_DISABLE};"}, {"sha": "d847f2775ab7611bfcc249c32763179683f0cb04", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e35b39d9dbfcd937c6b9163a3514d6a4775c198/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e35b39d9dbfcd937c6b9163a3514d6a4775c198/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=3e35b39d9dbfcd937c6b9163a3514d6a4775c198", "patch": "@@ -653,9 +653,9 @@ pub mod guard {\n ))]\n #[cfg_attr(test, allow(dead_code))]\n pub mod guard {\n-    #[cfg(not(target_os = \"linux\"))]\n+    #[cfg(not(all(target_os = \"linux\", target_env = \"gnu\")))]\n     use libc::{mmap as mmap64, mprotect};\n-    #[cfg(target_os = \"linux\")]\n+    #[cfg(all(target_os = \"linux\", target_env = \"gnu\"))]\n     use libc::{mmap64, mprotect};\n     use libc::{MAP_ANON, MAP_FAILED, MAP_FIXED, MAP_PRIVATE, PROT_NONE, PROT_READ, PROT_WRITE};\n "}]}