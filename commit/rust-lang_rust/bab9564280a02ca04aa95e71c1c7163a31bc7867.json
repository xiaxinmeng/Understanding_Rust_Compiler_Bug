{"sha": "bab9564280a02ca04aa95e71c1c7163a31bc7867", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhYjk1NjQyODBhMDJjYTA0YWE5NWU3MWMxYzcxNjNhMzFiYzc4Njc=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-20T16:43:37Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-20T20:00:07Z"}, "message": "libs: make Cow usable, improve documentation\n\nThis commit makes `Cow` more usable by allowing it to be applied to\nunsized types (as was intended) and providing some basic `ToOwned`\nimplementations on slice types. It also corrects the documentation for\n`Cow` to no longer mention `DerefMut`, and adds an example.", "tree": {"sha": "0bf643ea7b13c22a7c397ea8cd7c17d8c8035b5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bf643ea7b13c22a7c397ea8cd7c17d8c8035b5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bab9564280a02ca04aa95e71c1c7163a31bc7867", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bab9564280a02ca04aa95e71c1c7163a31bc7867", "html_url": "https://github.com/rust-lang/rust/commit/bab9564280a02ca04aa95e71c1c7163a31bc7867", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bab9564280a02ca04aa95e71c1c7163a31bc7867/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "793624261a221aa4592381fa8067e1f597b90c22", "url": "https://api.github.com/repos/rust-lang/rust/commits/793624261a221aa4592381fa8067e1f597b90c22", "html_url": "https://github.com/rust-lang/rust/commit/793624261a221aa4592381fa8067e1f597b90c22"}], "stats": {"total": 46, "additions": 36, "deletions": 10}, "files": [{"sha": "345d8955eecaeb7f5010a3bf873e1b4c011c3bd3", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bab9564280a02ca04aa95e71c1c7163a31bc7867/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bab9564280a02ca04aa95e71c1c7163a31bc7867/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=bab9564280a02ca04aa95e71c1c7163a31bc7867", "patch": "@@ -89,7 +89,7 @@\n \n use self::Direction::*;\n use alloc::boxed::Box;\n-use core::borrow::{BorrowFrom, BorrowFromMut};\n+use core::borrow::{BorrowFrom, BorrowFromMut, ToOwned};\n use core::cmp;\n use core::kinds::Sized;\n use core::mem::size_of;\n@@ -658,6 +658,11 @@ impl<T> BorrowFromMut<Vec<T>> for [T] {\n     fn borrow_from_mut(owned: &mut Vec<T>) -> &mut [T] { owned[mut] }\n }\n \n+#[unstable = \"trait is unstable\"]\n+impl<T: Clone> ToOwned<Vec<T>> for [T] {\n+    fn to_owned(&self) -> Vec<T> { self.to_vec() }\n+}\n+\n /// Unsafe operations\n pub mod raw {\n     pub use core::slice::raw::{buf_as_slice, mut_buf_as_slice};"}, {"sha": "a4c3c43ddb995134897ee46897f713d649d862cf", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bab9564280a02ca04aa95e71c1c7163a31bc7867/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bab9564280a02ca04aa95e71c1c7163a31bc7867/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=bab9564280a02ca04aa95e71c1c7163a31bc7867", "patch": "@@ -54,7 +54,7 @@\n pub use self::MaybeOwned::*;\n use self::RecompositionState::*;\n use self::DecompositionType::*;\n-use core::borrow::BorrowFrom;\n+use core::borrow::{BorrowFrom, ToOwned};\n use core::default::Default;\n use core::fmt;\n use core::cmp;\n@@ -67,7 +67,7 @@ use core::prelude::{range};\n \n use hash;\n use ring_buf::RingBuf;\n-use string::String;\n+use string::{String, ToString};\n use unicode;\n use vec::Vec;\n \n@@ -609,6 +609,11 @@ impl BorrowFrom<String> for str {\n     fn borrow_from(owned: &String) -> &str { owned[] }\n }\n \n+#[unstable = \"trait is unstable\"]\n+impl ToOwned<String> for str {\n+    fn to_owned(&self) -> String { self.to_string() }\n+}\n+\n /// Unsafe string operations.\n pub mod raw {\n     pub use core::str::raw::{from_utf8, c_str_to_static_slice, slice_bytes};"}, {"sha": "f381d70a91b0fde3761e5a33d20b9bf54c6adc2a", "filename": "src/libcore/borrow.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bab9564280a02ca04aa95e71c1c7163a31bc7867/src%2Flibcore%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bab9564280a02ca04aa95e71c1c7163a31bc7867/src%2Flibcore%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fborrow.rs?ref=bab9564280a02ca04aa95e71c1c7163a31bc7867", "patch": "@@ -37,10 +37,10 @@\n //! data lazily when mutation or ownership is required. The type is designed to\n //! work with general borrowed data via the `BorrowFrom` trait.\n //!\n-//! `Cow` implements both `Deref` and `DerefMut`, which means that you can call\n-//! methods directly on the data it encloses. The first time a mutable reference\n-//! is required, the data will be cloned (via `to_owned`) if it is not\n-//! already owned.\n+//! `Cow` implements both `Deref`, which means that you can call\n+//! non-mutating methods directly on the data it encloses. If mutation\n+//! is desired, `to_mut` will obtain a mutable references to an owned\n+//! value, cloning if necessary.\n \n #![unstable = \"recently added as part of collections reform\"]\n \n@@ -84,15 +84,31 @@ impl<T> ToOwned<T> for T where T: Clone {\n }\n \n /// A clone-on-write smart pointer.\n-pub enum Cow<'a, T, B: 'a> where B: ToOwned<T> {\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// use std::borrow::Cow;\n+///\n+/// fn abs_all(input: &mut Cow<Vec<int>, [int]>) {\n+///     for i in range(0, input.len()) {\n+///         let v = input[i];\n+///         if v < 0 {\n+///             // clones into a vector the first time (if not already owned)\n+///             input.to_mut()[i] = -v;\n+///         }\n+///     }\n+/// }\n+/// ```\n+pub enum Cow<'a, T, Sized? B: 'a> where B: ToOwned<T> {\n     /// Borrowed data.\n     Borrowed(&'a B),\n \n     /// Owned data.\n     Owned(T)\n }\n \n-impl<'a, T, B> Cow<'a, T, B> where B: ToOwned<T> {\n+impl<'a, T, Sized? B> Cow<'a, T, B> where B: ToOwned<T> {\n     /// Acquire a mutable reference to the owned form of the data.\n     ///\n     /// Copies the data if it is not already owned.\n@@ -117,7 +133,7 @@ impl<'a, T, B> Cow<'a, T, B> where B: ToOwned<T> {\n     }\n }\n \n-impl<'a, T, B> Deref<B> for Cow<'a, T, B> where B: ToOwned<T>  {\n+impl<'a, T, Sized? B> Deref<B> for Cow<'a, T, B> where B: ToOwned<T>  {\n     fn deref(&self) -> &B {\n         match *self {\n             Borrowed(borrowed) => borrowed,"}]}