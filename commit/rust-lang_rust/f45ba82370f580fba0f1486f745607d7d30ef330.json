{"sha": "f45ba82370f580fba0f1486f745607d7d30ef330", "node_id": "C_kwDOAAsO6NoAKGY0NWJhODIzNzBmNTgwZmJhMGYxNDg2Zjc0NTYwN2Q3ZDMwZWYzMzA", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-14T18:34:01Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-02-12T10:50:02Z"}, "message": "Remove SPAN_DEBUG global\n\nThe only difference between the default and rustc_interface set version\nis that the default accesses the source map from SESSION_GLOBALS while\nthe rustc_interface version accesses the source map from the global\nTyCtxt. SESSION_GLOBALS is always set while running the compiler while\nthe global TyCtxt is not always set. If the global TyCtxt is set, it's\nsource map is identical to the one in SESSION_GLOBALS", "tree": {"sha": "c763e198e9f04b48ff6f118e9f50a4252e3fc420", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c763e198e9f04b48ff6f118e9f50a4252e3fc420"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f45ba82370f580fba0f1486f745607d7d30ef330", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f45ba82370f580fba0f1486f745607d7d30ef330", "html_url": "https://github.com/rust-lang/rust/commit/f45ba82370f580fba0f1486f745607d7d30ef330", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f45ba82370f580fba0f1486f745607d7d30ef330/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5730173763b32ada60d7653ca987562ba0dc66f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5730173763b32ada60d7653ca987562ba0dc66f6", "html_url": "https://github.com/rust-lang/rust/commit/5730173763b32ada60d7653ca987562ba0dc66f6"}], "stats": {"total": 53, "additions": 13, "deletions": 40}, "files": [{"sha": "a18e2d1d638879fd264bb87775703e8d390546e7", "filename": "compiler/rustc_interface/src/callbacks.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f45ba82370f580fba0f1486f745607d7d30ef330/compiler%2Frustc_interface%2Fsrc%2Fcallbacks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45ba82370f580fba0f1486f745607d7d30ef330/compiler%2Frustc_interface%2Fsrc%2Fcallbacks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fcallbacks.rs?ref=f45ba82370f580fba0f1486f745607d7d30ef330", "patch": "@@ -4,7 +4,7 @@\n //! `rustc_data_structures::AtomicRef` type, which allows us to setup a global\n //! static which can then be set in this file at program startup.\n //!\n-//! See `SPAN_DEBUG` for an example of how to set things up.\n+//! See `SPAN_TRACK` for an example of how to set things up.\n //!\n //! The functions in this file should fall back to the default set in their\n //! origin crate when the `TyCtxt` is not present in TLS.\n@@ -13,18 +13,6 @@ use rustc_errors::{Diagnostic, TRACK_DIAGNOSTICS};\n use rustc_middle::ty::tls;\n use std::fmt;\n \n-/// This is a callback from `rustc_ast` as it cannot access the implicit state\n-/// in `rustc_middle` otherwise.\n-fn span_debug(span: rustc_span::Span, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    tls::with_opt(|tcx| {\n-        if let Some(tcx) = tcx {\n-            rustc_span::debug_with_source_map(span, f, tcx.sess.source_map())\n-        } else {\n-            rustc_span::default_span_debug(span, f)\n-        }\n-    })\n-}\n-\n fn track_span_parent(def_id: rustc_span::def_id::LocalDefId) {\n     tls::with_opt(|tcx| {\n         if let Some(tcx) = tcx {\n@@ -65,7 +53,6 @@ fn def_id_debug(def_id: rustc_hir::def_id::DefId, f: &mut fmt::Formatter<'_>) ->\n /// Sets up the callbacks in prior crates which we want to refer to the\n /// TyCtxt in.\n pub fn setup_callbacks() {\n-    rustc_span::SPAN_DEBUG.swap(&(span_debug as fn(_, &mut fmt::Formatter<'_>) -> _));\n     rustc_span::SPAN_TRACK.swap(&(track_span_parent as fn(_)));\n     rustc_hir::def_id::DEF_ID_DEBUG.swap(&(def_id_debug as fn(_, &mut fmt::Formatter<'_>) -> _));\n     TRACK_DIAGNOSTICS.swap(&(track_diagnostic as fn(&_)));"}, {"sha": "3ce9f852c3d0fd9b68ddfb46e9c1ebeabdb387cc", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 12, "deletions": 26, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f45ba82370f580fba0f1486f745607d7d30ef330/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45ba82370f580fba0f1486f745607d7d30ef330/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=f45ba82370f580fba0f1486f745607d7d30ef330", "patch": "@@ -1013,37 +1013,25 @@ pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) ->\n     f()\n }\n \n-pub fn debug_with_source_map(\n-    span: Span,\n-    f: &mut fmt::Formatter<'_>,\n-    source_map: &SourceMap,\n-) -> fmt::Result {\n-    write!(f, \"{} ({:?})\", source_map.span_to_diagnostic_string(span), span.ctxt())\n-}\n-\n-pub fn default_span_debug(span: Span, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    with_session_globals(|session_globals| {\n-        if let Some(source_map) = &*session_globals.source_map.borrow() {\n-            debug_with_source_map(span, f, source_map)\n-        } else {\n-            f.debug_struct(\"Span\")\n-                .field(\"lo\", &span.lo())\n-                .field(\"hi\", &span.hi())\n-                .field(\"ctxt\", &span.ctxt())\n-                .finish()\n-        }\n-    })\n-}\n-\n impl fmt::Debug for Span {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        (*SPAN_DEBUG)(*self, f)\n+        with_session_globals(|session_globals| {\n+            if let Some(source_map) = &*session_globals.source_map.borrow() {\n+                write!(f, \"{} ({:?})\", source_map.span_to_diagnostic_string(*self), self.ctxt())\n+            } else {\n+                f.debug_struct(\"Span\")\n+                    .field(\"lo\", &self.lo())\n+                    .field(\"hi\", &self.hi())\n+                    .field(\"ctxt\", &self.ctxt())\n+                    .finish()\n+            }\n+        })\n     }\n }\n \n impl fmt::Debug for SpanData {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        (*SPAN_DEBUG)(Span::new(self.lo, self.hi, self.ctxt, self.parent), f)\n+        fmt::Debug::fmt(&Span::new(self.lo, self.hi, self.ctxt, self.parent), f)\n     }\n }\n \n@@ -2003,8 +1991,6 @@ pub struct FileLines {\n     pub lines: Vec<LineInfo>,\n }\n \n-pub static SPAN_DEBUG: AtomicRef<fn(Span, &mut fmt::Formatter<'_>) -> fmt::Result> =\n-    AtomicRef::new(&(default_span_debug as fn(_, &mut fmt::Formatter<'_>) -> _));\n pub static SPAN_TRACK: AtomicRef<fn(LocalDefId)> = AtomicRef::new(&((|_| {}) as fn(_)));\n \n // _____________________________________________________________________________"}]}