{"sha": "b3594f0d1d8190387d37b0f5b30b9688f857b1dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNTk0ZjBkMWQ4MTkwMzg3ZDM3YjBmNWIzMGI5Njg4Zjg1N2IxZGQ=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-07-20T11:36:31Z"}, "committer": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-07-20T15:05:51Z"}, "message": "Get back the more precise suggestion spans of old regionck", "tree": {"sha": "09700cd73a0cc4b30fde7c81b00db6043163d572", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09700cd73a0cc4b30fde7c81b00db6043163d572"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3594f0d1d8190387d37b0f5b30b9688f857b1dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3594f0d1d8190387d37b0f5b30b9688f857b1dd", "html_url": "https://github.com/rust-lang/rust/commit/b3594f0d1d8190387d37b0f5b30b9688f857b1dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3594f0d1d8190387d37b0f5b30b9688f857b1dd/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "html_url": "https://github.com/rust-lang/rust/commit/a72c360a30f9a8160e4f40340cecc9b1ce979cd7"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "1460c2378d1c9bfd6b874edcfce93d92f12e2457", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b3594f0d1d8190387d37b0f5b30b9688f857b1dd/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3594f0d1d8190387d37b0f5b30b9688f857b1dd/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=b3594f0d1d8190387d37b0f5b30b9688f857b1dd", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::mir::{ConstraintCategory, ReturnConstraint};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, RegionVid, Ty};\n use rustc_span::symbol::{kw, sym};\n-use rustc_span::Span;\n+use rustc_span::{BytePos, Span};\n \n use crate::util::borrowck_errors;\n \n@@ -641,12 +641,14 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         } else {\n                             \"'_\".to_string()\n                         };\n-                        let suggestion = if snippet.ends_with(';') {\n+                        let span = if snippet.ends_with(';') {\n                             // `type X = impl Trait;`\n-                            format!(\"{} + {};\", &snippet[..snippet.len() - 1], suggestable_fr_name)\n+                            span.with_hi(span.hi() - BytePos(1))\n                         } else {\n-                            format!(\"{} + {}\", snippet, suggestable_fr_name)\n+                            span\n                         };\n+                        let suggestion = format!(\" + {}\", suggestable_fr_name);\n+                        let span = span.shrink_to_hi();\n                         diag.span_suggestion(\n                             span,\n                             &format!("}, {"sha": "e9d620877345423f65e0683bad69c34df47ab0ce", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3594f0d1d8190387d37b0f5b30b9688f857b1dd/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3594f0d1d8190387d37b0f5b30b9688f857b1dd/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=b3594f0d1d8190387d37b0f5b30b9688f857b1dd", "patch": "@@ -9,7 +9,7 @@ LL | fn elided(x: &i32) -> impl Copy { x }\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n-   |                       ^^^^^^^^^^^^^^\n+   |                                 ^^^^\n \n error: lifetime may not live long enough\n   --> $DIR/must_outlive_least_region_or_bound.rs:5:32\n@@ -23,7 +23,7 @@ LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a bound\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n-   |                                ^^^^^^^^^^^^^^\n+   |                                          ^^^^\n \n error: lifetime may not live long enough\n   --> $DIR/must_outlive_least_region_or_bound.rs:7:46"}, {"sha": "6c5264671a9120c3f397bc612d465736f98a4d24", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3594f0d1d8190387d37b0f5b30b9688f857b1dd/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3594f0d1d8190387d37b0f5b30b9688f857b1dd/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr?ref=b3594f0d1d8190387d37b0f5b30b9688f857b1dd", "patch": "@@ -9,7 +9,7 @@ LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                                           ^^^^\n \n error: lifetime may not live long enough\n   --> $DIR/static-return-lifetime-infered.rs:9:37\n@@ -23,7 +23,7 @@ LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a bound\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n-   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                                             ^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a678731934f6e0e75a75cb6fc6bd453a54dadc3a", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3594f0d1d8190387d37b0f5b30b9688f857b1dd/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3594f0d1d8190387d37b0f5b30b9688f857b1dd/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr?ref=b3594f0d1d8190387d37b0f5b30b9688f857b1dd", "patch": "@@ -9,7 +9,7 @@ LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n-   |                                     ^^^^^^^^^^^^^^^\n+   |                                                ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "962593e411e92a16aac8f7d1a3f35edaf77268ae", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3594f0d1d8190387d37b0f5b30b9688f857b1dd/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3594f0d1d8190387d37b0f5b30b9688f857b1dd/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr?ref=b3594f0d1d8190387d37b0f5b30b9688f857b1dd", "patch": "@@ -9,7 +9,7 @@ LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n-   |                               ^^^^^^^^^^^^^^^\n+   |                                          ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "05ba7808600b01131933898a9206009e9f8c3542", "filename": "src/test/ui/suggestions/lifetimes/trait-object-nested-in-impl-trait.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3594f0d1d8190387d37b0f5b30b9688f857b1dd/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3594f0d1d8190387d37b0f5b30b9688f857b1dd/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.nll.stderr?ref=b3594f0d1d8190387d37b0f5b30b9688f857b1dd", "patch": "@@ -9,7 +9,7 @@ LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> {\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> + '_ {\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                                          ^^^^\n \n error: lifetime may not live long enough\n   --> $DIR/trait-object-nested-in-impl-trait.rs:39:9\n@@ -47,7 +47,7 @@ LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> {\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a bound\n    |\n LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> + 'a {\n-   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                                                 ^^^^\n \n error: aborting due to 4 previous errors\n "}]}