{"sha": "802b6db0041115d261f3d0ea1855f35658141c0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMmI2ZGIwMDQxMTE1ZDI2MWYzZDBlYTE4NTVmMzU2NTgxNDFjMGI=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-06-27T15:05:47Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-04T13:31:55Z"}, "message": "Cleanup dist", "tree": {"sha": "90b1e77a64f96c6ba4aff5310b16a497640a3353", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90b1e77a64f96c6ba4aff5310b16a497640a3353"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/802b6db0041115d261f3d0ea1855f35658141c0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/802b6db0041115d261f3d0ea1855f35658141c0b", "html_url": "https://github.com/rust-lang/rust/commit/802b6db0041115d261f3d0ea1855f35658141c0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/802b6db0041115d261f3d0ea1855f35658141c0b/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6ece966ac6745f71f21f98454193e41ad85fe42", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6ece966ac6745f71f21f98454193e41ad85fe42", "html_url": "https://github.com/rust-lang/rust/commit/c6ece966ac6745f71f21f98454193e41ad85fe42"}], "stats": {"total": 32, "additions": 11, "deletions": 21}, "files": [{"sha": "cfcba07228b1eee47910dad5a3ab5834af33fcb4", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/802b6db0041115d261f3d0ea1855f35658141c0b/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802b6db0041115d261f3d0ea1855f35658141c0b/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=802b6db0041115d261f3d0ea1855f35658141c0b", "patch": "@@ -97,7 +97,7 @@ pub fn docs(build: &Build, stage: u32, host: &str) {\n }\n \n fn find_files(files: &[&str], path: &[PathBuf]) -> Vec<PathBuf> {\n-    let mut found = Vec::new();\n+    let mut found = Vec::with_capacity(files.len());\n \n     for file in files {\n         let file_path =\n@@ -119,17 +119,9 @@ fn make_win_dist(rust_root: &Path, plat_root: &Path, target_triple: &str, build:\n     //Ask gcc where it keeps its stuff\n     let mut cmd = Command::new(build.cc(target_triple));\n     cmd.arg(\"-print-search-dirs\");\n-    build.run_quiet(&mut cmd);\n-    let gcc_out =\n-        String::from_utf8(\n-                cmd\n-                .output()\n-                .expect(\"failed to execute gcc\")\n-                .stdout).expect(\"gcc.exe output was not utf8\");\n-\n-    let mut bin_path: Vec<_> =\n-        env::split_paths(&env::var_os(\"PATH\").unwrap_or_default())\n-        .collect();\n+    let gcc_out = output(&mut cmd);\n+\n+    let mut bin_path: Vec<_> = env::split_paths(&env::var_os(\"PATH\").unwrap_or_default()).collect();\n     let mut lib_path = Vec::new();\n \n     for line in gcc_out.lines() {\n@@ -140,7 +132,7 @@ fn make_win_dist(rust_root: &Path, plat_root: &Path, target_triple: &str, build:\n             line[(idx + 1)..]\n                 .trim_left_matches(trim_chars)\n                 .split(';')\n-                .map(|s| PathBuf::from(s));\n+                .map(PathBuf::from);\n \n         if key == \"programs\" {\n             bin_path.extend(value);\n@@ -149,15 +141,15 @@ fn make_win_dist(rust_root: &Path, plat_root: &Path, target_triple: &str, build:\n         }\n     }\n \n-    let target_tools = vec![\"gcc.exe\", \"ld.exe\", \"ar.exe\", \"dlltool.exe\", \"libwinpthread-1.dll\"];\n+    let target_tools = [\"gcc.exe\", \"ld.exe\", \"ar.exe\", \"dlltool.exe\", \"libwinpthread-1.dll\"];\n     let mut rustc_dlls = vec![\"libstdc++-6.dll\", \"libwinpthread-1.dll\"];\n     if target_triple.starts_with(\"i686-\") {\n         rustc_dlls.push(\"libgcc_s_dw2-1.dll\");\n     } else {\n         rustc_dlls.push(\"libgcc_s_seh-1.dll\");\n     }\n \n-    let target_libs = vec![ //MinGW libs\n+    let target_libs = [ //MinGW libs\n         \"libgcc.a\",\n         \"libgcc_eh.a\",\n         \"libgcc_s.a\",\n@@ -203,7 +195,7 @@ fn make_win_dist(rust_root: &Path, plat_root: &Path, target_triple: &str, build:\n     let target_libs = find_files(&target_libs, &lib_path);\n \n     fn copy_to_folder(src: &Path, dest_folder: &Path) {\n-        let file_name = src.file_name().unwrap().to_os_string();\n+        let file_name = src.file_name().unwrap();\n         let dest = dest_folder.join(file_name);\n         copy(src, &dest);\n     }\n@@ -234,8 +226,6 @@ fn make_win_dist(rust_root: &Path, plat_root: &Path, target_triple: &str, build:\n ///\n /// This contains all the bits and pieces to run the MinGW Windows targets\n /// without any extra installed software (e.g. we bundle gcc, libraries, etc).\n-/// Currently just shells out to a python script, but that should be rewritten\n-/// in Rust.\n pub fn mingw(build: &Build, host: &str) {\n     println!(\"Dist mingw ({})\", host);\n     let name = pkgname(build, \"rust-mingw\");\n@@ -366,9 +356,9 @@ pub fn rustc(build: &Build, stage: u32, host: &str) {\n pub fn debugger_scripts(build: &Build,\n                         sysroot: &Path,\n                         host: &str) {\n+    let dst = sysroot.join(\"lib/rustlib/etc\");\n+    t!(fs::create_dir_all(&dst));\n     let cp_debugger_script = |file: &str| {\n-        let dst = sysroot.join(\"lib/rustlib/etc\");\n-        t!(fs::create_dir_all(&dst));\n         install(&build.src.join(\"src/etc/\").join(file), &dst, 0o644);\n     };\n     if host.contains(\"windows-msvc\") {\n@@ -595,7 +585,7 @@ pub fn rust_src(build: &Build) {\n     t!(fs::remove_dir_all(&image));\n }\n \n-const CARGO_VENDOR_VERSION: &'static str = \"0.1.4\";\n+const CARGO_VENDOR_VERSION: &str = \"0.1.4\";\n \n /// Creates the plain source tarball\n pub fn plain_source_tarball(build: &Build) {"}]}