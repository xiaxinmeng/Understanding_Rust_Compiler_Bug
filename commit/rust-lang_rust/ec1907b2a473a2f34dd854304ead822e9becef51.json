{"sha": "ec1907b2a473a2f34dd854304ead822e9becef51", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMTkwN2IyYTQ3M2EyZjM0ZGQ4NTQzMDRlYWQ4MjJlOWJlY2VmNTE=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-04-02T14:10:37Z"}, "committer": {"name": "Seiichi Uchida", "email": "seiichi.uchida@dena.com", "date": "2018-04-05T03:52:43Z"}, "message": "Do not indent or unindent inside string literal\n\nCloses #2588.", "tree": {"sha": "140b7cb93b2345f23ab2349ab035f48f3b40f028", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/140b7cb93b2345f23ab2349ab035f48f3b40f028"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec1907b2a473a2f34dd854304ead822e9becef51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec1907b2a473a2f34dd854304ead822e9becef51", "html_url": "https://github.com/rust-lang/rust/commit/ec1907b2a473a2f34dd854304ead822e9becef51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec1907b2a473a2f34dd854304ead822e9becef51/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89070a2244c9e9f93ef3b7e2e8e36cf0bf336133", "url": "https://api.github.com/repos/rust-lang/rust/commits/89070a2244c9e9f93ef3b7e2e8e36cf0bf336133", "html_url": "https://github.com/rust-lang/rust/commit/89070a2244c9e9f93ef3b7e2e8e36cf0bf336133"}], "stats": {"total": 95, "additions": 61, "deletions": 34}, "files": [{"sha": "6aa9f7f31075e8f512c8380b293342132419ba71", "filename": "src/lib.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ec1907b2a473a2f34dd854304ead822e9becef51/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1907b2a473a2f34dd854304ead822e9becef51/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=ec1907b2a473a2f34dd854304ead822e9becef51", "patch": "@@ -47,7 +47,7 @@ use syntax::errors::{DiagnosticBuilder, Handler};\n use syntax::parse::{self, ParseSess};\n \n use checkstyle::{output_footer, output_header};\n-use comment::{CharClasses, FullCodeCharKind};\n+use comment::{CharClasses, FullCodeCharKind, LineClasses};\n use issues::{BadIssueSeeker, Issue};\n use shape::Indent;\n use utils::use_colored_tty;\n@@ -605,10 +605,19 @@ const FN_MAIN_PREFIX: &str = \"fn main() {\\n\";\n \n fn enclose_in_main_block(s: &str, config: &Config) -> String {\n     let indent = Indent::from_width(config, config.tab_spaces());\n-    FN_MAIN_PREFIX.to_owned() + &indent.to_string(config)\n-        + &s.lines()\n-            .collect::<Vec<_>>()\n-            .join(&indent.to_string_with_newline(config)) + \"\\n}\"\n+    let mut result = String::with_capacity(s.len() * 2);\n+    result.push_str(FN_MAIN_PREFIX);\n+    let mut need_indent = true;\n+    for (kind, line) in LineClasses::new(s) {\n+        if need_indent {\n+            result.push_str(&indent.to_string(config));\n+        }\n+        result.push_str(&line);\n+        result.push('\\n');\n+        need_indent = !(kind.is_string() && !line.ends_with('\\\\'));\n+    }\n+    result.push('}');\n+    result\n }\n \n /// Format the given code block. Mainly targeted for code block in comment.\n@@ -626,13 +635,16 @@ pub fn format_code_block(code_snippet: &str, config: &Config) -> Option<String>\n     let formatted = format_snippet(&snippet, config)?;\n     // 2 = \"}\\n\"\n     let block_len = formatted.len().checked_sub(2).unwrap_or(0);\n-    for line in formatted[FN_MAIN_PREFIX.len()..block_len].lines() {\n+    let mut is_indented = true;\n+    for (kind, ref line) in LineClasses::new(&formatted[FN_MAIN_PREFIX.len()..block_len]) {\n         if !is_first {\n             result.push('\\n');\n         } else {\n             is_first = false;\n         }\n-        let trimmed_line = if line.len() > config.max_width() {\n+        let trimmed_line = if !is_indented {\n+            line\n+        } else if line.len() > config.max_width() {\n             // If there are lines that are larger than max width, we cannot tell\n             // whether we have succeeded but have some comments or strings that\n             // are too long, or we have failed to format code block. We will be\n@@ -655,6 +667,7 @@ pub fn format_code_block(code_snippet: &str, config: &Config) -> Option<String>\n             line\n         };\n         result.push_str(trimmed_line);\n+        is_indented = !(kind.is_string() && !line.ends_with('\\\\'));\n     }\n     Some(result)\n }"}, {"sha": "3769c97845b9aa4c974057db9ab4b925ab43bcd8", "filename": "src/macros.rs", "status": "modified", "additions": 41, "deletions": 27, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/ec1907b2a473a2f34dd854304ead822e9becef51/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1907b2a473a2f34dd854304ead822e9becef51/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=ec1907b2a473a2f34dd854304ead822e9becef51", "patch": "@@ -34,7 +34,7 @@ use syntax::{ast, ptr};\n \n use codemap::SpanUtils;\n use comment::{contains_comment, remove_trailing_white_spaces, CharClasses, FindUncommented,\n-              FullCodeCharKind};\n+              FullCodeCharKind, LineClasses};\n use expr::rewrite_array;\n use lists::{itemize_list, write_list, ListFormatting};\n use overflow;\n@@ -1054,18 +1054,27 @@ fn indent_macro_snippet(\n     macro_str: &str,\n     indent: Indent,\n ) -> Option<String> {\n-    let mut lines = macro_str.lines();\n-    let first_line = lines.next().map(|s| s.trim_right())?;\n+    let mut lines = LineClasses::new(macro_str);\n+    let first_line = lines.next().map(|(_, s)| s.trim_right().to_owned())?;\n     let mut trimmed_lines = Vec::with_capacity(16);\n \n+    let mut veto_trim = false;\n     let min_prefix_space_width = lines\n-        .filter_map(|line| {\n-            let prefix_space_width = if is_empty_line(line) {\n+        .filter_map(|(kind, line)| {\n+            let mut trimmed = true;\n+            let prefix_space_width = if is_empty_line(&line) {\n                 None\n             } else {\n-                Some(get_prefix_space_width(context, line))\n+                Some(get_prefix_space_width(context, &line))\n             };\n-            trimmed_lines.push((line.trim(), prefix_space_width));\n+            let line = if veto_trim || (kind.is_string() && !line.ends_with('\\\\')) {\n+                veto_trim = kind.is_string() && !line.ends_with('\\\\');\n+                trimmed = false;\n+                line\n+            } else {\n+                line.trim().to_owned()\n+            };\n+            trimmed_lines.push((trimmed, line, prefix_space_width));\n             prefix_space_width\n         })\n         .min()?;\n@@ -1074,17 +1083,20 @@ fn indent_macro_snippet(\n         String::from(first_line) + \"\\n\"\n             + &trimmed_lines\n                 .iter()\n-                .map(|&(line, prefix_space_width)| match prefix_space_width {\n-                    Some(original_indent_width) => {\n-                        let new_indent_width = indent.width()\n-                            + original_indent_width\n-                                .checked_sub(min_prefix_space_width)\n-                                .unwrap_or(0);\n-                        let new_indent = Indent::from_width(context.config, new_indent_width);\n-                        format!(\"{}{}\", new_indent.to_string(context.config), line.trim())\n-                    }\n-                    None => String::new(),\n-                })\n+                .map(\n+                    |&(trimmed, ref line, prefix_space_width)| match prefix_space_width {\n+                        _ if !trimmed => line.to_owned(),\n+                        Some(original_indent_width) => {\n+                            let new_indent_width = indent.width()\n+                                + original_indent_width\n+                                    .checked_sub(min_prefix_space_width)\n+                                    .unwrap_or(0);\n+                            let new_indent = Indent::from_width(context.config, new_indent_width);\n+                            format!(\"{}{}\", new_indent.to_string(context.config), line.trim())\n+                        }\n+                        None => String::new(),\n+                    },\n+                )\n                 .collect::<Vec<_>>()\n                 .join(\"\\n\"),\n     )\n@@ -1231,15 +1243,17 @@ impl MacroBranch {\n \n         // Indent the body since it is in a block.\n         let indent_str = body_indent.to_string(&config);\n-        let mut new_body = new_body\n-            .trim_right()\n-            .lines()\n-            .fold(String::new(), |mut s, l| {\n-                if !l.is_empty() {\n-                    s += &indent_str;\n-                }\n-                s + l + \"\\n\"\n-            });\n+        let mut new_body = LineClasses::new(new_body.trim_right())\n+            .fold(\n+                (String::new(), true),\n+                |(mut s, need_indent), (kind, ref l)| {\n+                    if !l.is_empty() && need_indent {\n+                        s += &indent_str;\n+                    }\n+                    (s + l + \"\\n\", !(kind.is_string() && !l.ends_with('\\\\')))\n+                },\n+            )\n+            .0;\n \n         // Undo our replacement of macro variables.\n         // FIXME: this could be *much* more efficient."}]}