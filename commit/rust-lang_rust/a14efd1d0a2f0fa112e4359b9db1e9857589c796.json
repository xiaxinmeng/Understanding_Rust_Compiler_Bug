{"sha": "a14efd1d0a2f0fa112e4359b9db1e9857589c796", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNGVmZDFkMGEyZjBmYTExMmU0MzU5YjlkYjFlOTg1NzU4OWM3OTY=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-09T09:27:42Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-09T09:27:42Z"}, "message": "Rename MaybeUninit::read to assume_init_read.", "tree": {"sha": "b67f3f00d75c41c67813ad492b06eeec3c5def20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b67f3f00d75c41c67813ad492b06eeec3c5def20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a14efd1d0a2f0fa112e4359b9db1e9857589c796", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a14efd1d0a2f0fa112e4359b9db1e9857589c796", "html_url": "https://github.com/rust-lang/rust/commit/a14efd1d0a2f0fa112e4359b9db1e9857589c796", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a14efd1d0a2f0fa112e4359b9db1e9857589c796/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "656a17b44d2e7ee8096f479ed8a04baab2200cae", "url": "https://api.github.com/repos/rust-lang/rust/commits/656a17b44d2e7ee8096f479ed8a04baab2200cae", "html_url": "https://github.com/rust-lang/rust/commit/656a17b44d2e7ee8096f479ed8a04baab2200cae"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "cafb002c01a1106433f5e5647adafb3936f524fd", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a14efd1d0a2f0fa112e4359b9db1e9857589c796/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14efd1d0a2f0fa112e4359b9db1e9857589c796/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=a14efd1d0a2f0fa112e4359b9db1e9857589c796", "patch": "@@ -103,7 +103,7 @@ impl<T, const N: usize> Iterator for IntoIter<T, N> {\n             // dead now (i.e. do not touch). As `idx` was the start of the\n             // alive-zone, the alive zone is now `data[alive]` again, restoring\n             // all invariants.\n-            unsafe { self.data.get_unchecked(idx).read() }\n+            unsafe { self.data.get_unchecked(idx).assume_init_read() }\n         })\n     }\n \n@@ -136,7 +136,7 @@ impl<T, const N: usize> DoubleEndedIterator for IntoIter<T, N> {\n             // dead now (i.e. do not touch). As `idx` was the end of the\n             // alive-zone, the alive zone is now `data[alive]` again, restoring\n             // all invariants.\n-            unsafe { self.data.get_unchecked(idx).read() }\n+            unsafe { self.data.get_unchecked(idx).assume_init_read() }\n         })\n     }\n }"}, {"sha": "38a006ce74ce0a470461d04a2202a2c569469400", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a14efd1d0a2f0fa112e4359b9db1e9857589c796/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14efd1d0a2f0fa112e4359b9db1e9857589c796/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=a14efd1d0a2f0fa112e4359b9db1e9857589c796", "patch": "@@ -520,8 +520,8 @@ impl<T> MaybeUninit<T> {\n     /// this initialization invariant.\n     ///\n     /// Moreover, this leaves a copy of the same data behind in the `MaybeUninit<T>`. When using\n-    /// multiple copies of the data (by calling `read` multiple times, or first\n-    /// calling `read` and then [`assume_init`]), it is your responsibility\n+    /// multiple copies of the data (by calling `assume_init_read` multiple times, or first\n+    /// calling `assume_init_read` and then [`assume_init`]), it is your responsibility\n     /// to ensure that that data may indeed be duplicated.\n     ///\n     /// [inv]: #initialization-invariant\n@@ -537,16 +537,16 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// let mut x = MaybeUninit::<u32>::uninit();\n     /// x.write(13);\n-    /// let x1 = unsafe { x.read() };\n+    /// let x1 = unsafe { x.assume_init_read() };\n     /// // `u32` is `Copy`, so we may read multiple times.\n-    /// let x2 = unsafe { x.read() };\n+    /// let x2 = unsafe { x.assume_init_read() };\n     /// assert_eq!(x1, x2);\n     ///\n     /// let mut x = MaybeUninit::<Option<Vec<u32>>>::uninit();\n     /// x.write(None);\n-    /// let x1 = unsafe { x.read() };\n+    /// let x1 = unsafe { x.assume_init_read() };\n     /// // Duplicating a `None` value is okay, so we may read multiple times.\n-    /// let x2 = unsafe { x.read() };\n+    /// let x2 = unsafe { x.assume_init_read() };\n     /// assert_eq!(x1, x2);\n     /// ```\n     ///\n@@ -558,14 +558,14 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// let mut x = MaybeUninit::<Option<Vec<u32>>>::uninit();\n     /// x.write(Some(vec![0,1,2]));\n-    /// let x1 = unsafe { x.read() };\n-    /// let x2 = unsafe { x.read() };\n+    /// let x1 = unsafe { x.assume_init_read() };\n+    /// let x2 = unsafe { x.assume_init_read() };\n     /// // We now created two copies of the same vector, leading to a double-free \u26a0\ufe0f when\n     /// // they both get dropped!\n     /// ```\n     #[unstable(feature = \"maybe_uninit_extra\", issue = \"63567\")]\n     #[inline(always)]\n-    pub unsafe fn read(&self) -> T {\n+    pub unsafe fn assume_init_read(&self) -> T {\n         // SAFETY: the caller must guarantee that `self` is initialized.\n         // Reading from `self.as_ptr()` is safe since `self` should be initialized.\n         unsafe {"}]}