{"sha": "df7e496f855331acd0cb9c6133a77197cd6118cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmN2U0OTZmODU1MzMxYWNkMGNiOWM2MTMzYTc3MTk3Y2Q2MTE4Y2Y=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-10T17:16:35Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-10T17:16:35Z"}, "message": "Forbid opaque types in extern blocks", "tree": {"sha": "82b6cc93c156895bf01fee74df35d3fa05693c2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82b6cc93c156895bf01fee74df35d3fa05693c2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df7e496f855331acd0cb9c6133a77197cd6118cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df7e496f855331acd0cb9c6133a77197cd6118cf", "html_url": "https://github.com/rust-lang/rust/commit/df7e496f855331acd0cb9c6133a77197cd6118cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df7e496f855331acd0cb9c6133a77197cd6118cf/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "740dd4bf056b18e198af5ae242b2eb49b94861d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/740dd4bf056b18e198af5ae242b2eb49b94861d7", "html_url": "https://github.com/rust-lang/rust/commit/740dd4bf056b18e198af5ae242b2eb49b94861d7"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "63fe11f3443e68c4cdbcd5cf14ce1d4d0cd6eff1", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/df7e496f855331acd0cb9c6133a77197cd6118cf/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7e496f855331acd0cb9c6133a77197cd6118cf/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=df7e496f855331acd0cb9c6133a77197cd6118cf", "patch": "@@ -859,7 +859,40 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         }\n     }\n \n+    fn check_for_opaque_ty(&mut self, sp: Span, ty: Ty<'tcx>) -> bool {\n+        use crate::rustc::ty::TypeFoldable;\n+\n+        struct ProhibitOpaqueTypes<'a, 'tcx> {\n+            cx: &'a LateContext<'a, 'tcx>,\n+            sp: Span,\n+        };\n+\n+        impl<'a, 'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueTypes<'a, 'tcx> {\n+            fn visit_ty(&mut self, ty: Ty<'tcx>) -> bool {\n+                if let ty::Opaque(..) = ty.sty {\n+                    self.cx.span_lint(IMPROPER_CTYPES,\n+                        self.sp,\n+                        &format!(\"`extern` block uses type `{}` which is not FFI-safe: \\\n+                                  opaque types have no C equivalent\", ty));\n+                    true\n+                } else {\n+                    ty.super_visit_with(self)\n+                }\n+            }\n+        }\n+\n+        let mut visitor = ProhibitOpaqueTypes { cx: self.cx, sp };\n+        ty.visit_with(&mut visitor)\n+    }\n+\n     fn check_type_for_ffi_and_report_errors(&mut self, sp: Span, ty: Ty<'tcx>) {\n+        // We have to check for opaque types before `normalize_erasing_regions`,\n+        // which will replace opaque types with their underlying concrete type.\n+        if self.check_for_opaque_ty(sp, ty) {\n+            // We've already emitted an error due to an opaque type.\n+            return;\n+        }\n+\n         // it is only OK to use this function because extern fns cannot have\n         // any generic types right now:\n         let ty = self.cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), ty);"}, {"sha": "907ad068035bc446b380040cae606da9c1695226", "filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/df7e496f855331acd0cb9c6133a77197cd6118cf/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7e496f855331acd0cb9c6133a77197cd6118cf/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs?ref=df7e496f855331acd0cb9c6133a77197cd6118cf", "patch": "@@ -0,0 +1,16 @@\n+#![feature(type_alias_impl_trait)]\n+\n+#![deny(improper_ctypes)]\n+\n+type A = impl Fn();\n+\n+pub fn ret_closure() -> A {\n+    || {}\n+}\n+\n+extern \"C\" {\n+    pub fn a(_: A);\n+    //~^ ERROR `extern` block uses type `A` which is not FFI-safe: opaque types have no C equivalent\n+}\n+\n+fn main() {}"}, {"sha": "6e234aa300b76e98111517ca57883c672957ed5a", "filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df7e496f855331acd0cb9c6133a77197cd6118cf/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df7e496f855331acd0cb9c6133a77197cd6118cf/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr?ref=df7e496f855331acd0cb9c6133a77197cd6118cf", "patch": "@@ -0,0 +1,14 @@\n+error: `extern` block uses type `A` which is not FFI-safe: opaque types have no C equivalent\n+  --> $DIR/opaque-ty-ffi-unsafe.rs:12:17\n+   |\n+LL |     pub fn a(_: A);\n+   |                 ^\n+   |\n+note: lint level defined here\n+  --> $DIR/opaque-ty-ffi-unsafe.rs:3:9\n+   |\n+LL | #![deny(improper_ctypes)]\n+   |         ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}