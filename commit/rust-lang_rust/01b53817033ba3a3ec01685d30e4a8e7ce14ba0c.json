{"sha": "01b53817033ba3a3ec01685d30e4a8e7ce14ba0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYjUzODE3MDMzYmEzYTNlYzAxNjg1ZDMwZTRhOGU3Y2UxNGJhMGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-24T16:42:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-24T16:42:35Z"}, "message": "auto merge of #10634 : LeoTestard/rust/rc-eq, r=cmr", "tree": {"sha": "3c8cec9365f78cc8ff34db824845784cc5dde4e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c8cec9365f78cc8ff34db824845784cc5dde4e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01b53817033ba3a3ec01685d30e4a8e7ce14ba0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01b53817033ba3a3ec01685d30e4a8e7ce14ba0c", "html_url": "https://github.com/rust-lang/rust/commit/01b53817033ba3a3ec01685d30e4a8e7ce14ba0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01b53817033ba3a3ec01685d30e4a8e7ce14ba0c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae91b81a6f7cba76d94ce00ef8155b9550344929", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae91b81a6f7cba76d94ce00ef8155b9550344929", "html_url": "https://github.com/rust-lang/rust/commit/ae91b81a6f7cba76d94ce00ef8155b9550344929"}, {"sha": "fdac9e470cd87429b6aefc6e02772163a8d41fc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdac9e470cd87429b6aefc6e02772163a8d41fc8", "html_url": "https://github.com/rust-lang/rust/commit/fdac9e470cd87429b6aefc6e02772163a8d41fc8"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "1b1546e57a32a58bbbb5a5a4d9c2dfded0f6dc31", "filename": "src/libstd/rc.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/01b53817033ba3a3ec01685d30e4a8e7ce14ba0c/src%2Flibstd%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b53817033ba3a3ec01685d30e4a8e7ce14ba0c/src%2Flibstd%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frc.rs?ref=01b53817033ba3a3ec01685d30e4a8e7ce14ba0c", "patch": "@@ -22,6 +22,7 @@ use ops::Drop;\n use kinds::{Freeze, Send};\n use clone::{Clone, DeepClone};\n use cell::RefCell;\n+use cmp::{Eq, TotalEq, Ord, TotalOrd, Ordering};\n \n struct RcBox<T> {\n     value: T,\n@@ -80,6 +81,60 @@ impl<T> Rc<T> {\n     pub fn borrow<'r>(&'r self) -> &'r T {\n         unsafe { &(*self.ptr).value }\n     }\n+\n+    /// Determine if two reference-counted pointers point to the same object\n+    #[inline]\n+    pub fn ptr_eq(&self, other: &Rc<T>) -> bool {\n+        self.ptr == other.ptr\n+    }\n+}\n+\n+impl<T: Eq> Eq for Rc<T> {\n+    #[inline]\n+    fn eq(&self, other: &Rc<T>) -> bool {\n+        unsafe { (*self.ptr).value == (*other.ptr).value }\n+    }\n+\n+    #[inline]\n+    fn ne(&self, other: &Rc<T>) -> bool {\n+        unsafe { (*self.ptr).value != (*other.ptr).value }\n+    }\n+}\n+\n+impl<T: TotalEq> TotalEq for Rc<T> {\n+    #[inline]\n+    fn equals(&self, other: &Rc<T>) -> bool {\n+        unsafe { (*self.ptr).value.equals(&(*other.ptr).value) }\n+    }\n+}\n+\n+impl<T: Ord> Ord for Rc<T> {\n+    #[inline]\n+    fn lt(&self, other: &Rc<T>) -> bool {\n+        unsafe { (*self.ptr).value < (*other.ptr).value }\n+    }\n+\n+    #[inline]\n+    fn le(&self, other: &Rc<T>) -> bool {\n+        unsafe { (*self.ptr).value <= (*other.ptr).value }\n+    }\n+\n+    #[inline]\n+    fn ge(&self, other: &Rc<T>) -> bool {\n+        unsafe { (*self.ptr).value >= (*other.ptr).value }\n+    }\n+\n+    #[inline]\n+    fn gt(&self, other: &Rc<T>) -> bool {\n+        unsafe { (*self.ptr).value > (*other.ptr).value }\n+    }\n+}\n+\n+impl<T: TotalOrd> TotalOrd for Rc<T> {\n+    #[inline]\n+    fn cmp(&self, other: &Rc<T>) -> Ordering {\n+        unsafe { (*self.ptr).value.cmp(&(*other.ptr).value) }\n+    }\n }\n \n impl<T> Clone for Rc<T> {"}]}