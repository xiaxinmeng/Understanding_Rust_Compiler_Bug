{"sha": "8ca3dc063e51a985425adfa61571f26002b4a4d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjYTNkYzA2M2U1MWE5ODU0MjVhZGZhNjE1NzFmMjYwMDJiNGE0ZDI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-04-21T08:40:36Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-04-21T08:40:36Z"}, "message": "Refactor missing spans and fix bug with trailing whitespace", "tree": {"sha": "80ac1998662ed1cfd3ef8011884eb51f31a5b061", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80ac1998662ed1cfd3ef8011884eb51f31a5b061"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ca3dc063e51a985425adfa61571f26002b4a4d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ca3dc063e51a985425adfa61571f26002b4a4d2", "html_url": "https://github.com/rust-lang/rust/commit/8ca3dc063e51a985425adfa61571f26002b4a4d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ca3dc063e51a985425adfa61571f26002b4a4d2/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e082f7aad35afa89563180d1cdecab3afdf573f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e082f7aad35afa89563180d1cdecab3afdf573f", "html_url": "https://github.com/rust-lang/rust/commit/6e082f7aad35afa89563180d1cdecab3afdf573f"}], "stats": {"total": 94, "additions": 51, "deletions": 43}, "files": [{"sha": "d4f5be8108f7b6522d4bc0c0cff80e4923197392", "filename": "src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ca3dc063e51a985425adfa61571f26002b4a4d2/src%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ca3dc063e51a985425adfa61571f26002b4a4d2/src%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffunctions.rs?ref=8ca3dc063e51a985425adfa61571f26002b4a4d2", "patch": "@@ -224,7 +224,7 @@ impl<'a> FmtVisitor<'a> {\n         let fmt = ListFormatting {\n             tactic: ListTactic::Vertical,\n             separator: \",\",\n-            trailing_separator: SeparatorTactic::Always,\n+            trailing_separator: SeparatorTactic::Never,\n             indent: indent + 10,\n             h_width: budget,\n             v_width: budget,"}, {"sha": "eb12f8ec1e1c87ffbee2b4b745d5e4be74c012aa", "filename": "src/missed_spans.rs", "status": "modified", "additions": 47, "deletions": 38, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/8ca3dc063e51a985425adfa61571f26002b4a4d2/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ca3dc063e51a985425adfa61571f26002b4a4d2/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=8ca3dc063e51a985425adfa61571f26002b4a4d2", "patch": "@@ -9,32 +9,30 @@\n // except according to those terms.\n \n use {FmtVisitor, make_indent};\n-use syntax::codemap::{self, Span, BytePos};\n+use syntax::codemap::{self, BytePos};\n \n impl<'a> FmtVisitor<'a> {\n     // TODO these format_missing methods are ugly. Refactor and add unit tests\n     // for the central whitespace stripping loop.\n     pub fn format_missing(&mut self, end: BytePos) {\n-        self.format_missing_inner(end, |this, last_snippet, span, _| {\n-            this.changes.push_str_span(span, last_snippet)\n+        self.format_missing_inner(end, |this, last_snippet, file_name, _| {\n+            this.changes.push_str(file_name, last_snippet)\n         })\n     }\n \n     pub fn format_missing_with_indent(&mut self, end: BytePos) {\n-        self.format_missing_inner(end, |this, last_snippet, span, snippet| {\n+        self.format_missing_inner(end, |this, last_snippet, file_name, snippet| {\n+            this.changes.push_str(file_name, last_snippet.trim_right());\n             if last_snippet == snippet {\n-                // No new lines\n-                this.changes.push_str_span(span, last_snippet);\n-                this.changes.push_str_span(span, \"\\n\");\n-            } else {\n-                this.changes.push_str_span(span, last_snippet.trim_right());\n+                // No new lines in the snippet.\n+                this.changes.push_str(file_name, \"\\n\");\n             }\n             let indent = make_indent(this.block_indent);\n-            this.changes.push_str_span(span, &indent);\n+            this.changes.push_str(file_name, &indent);\n         })\n     }\n \n-    fn format_missing_inner<F: Fn(&mut FmtVisitor, &str, Span, &str)>(&mut self,\n+    fn format_missing_inner<F: Fn(&mut FmtVisitor, &str, &str, &str)>(&mut self,\n                                                                       end: BytePos,\n                                                                       process_last_snippet: F)\n     {\n@@ -52,44 +50,55 @@ impl<'a> FmtVisitor<'a> {\n                 self.codemap.lookup_char_pos(start),\n                 self.codemap.lookup_char_pos(end));\n \n-\n         self.last_pos = end;\n         let spans = self.changes.filespans_for_span(start, end);\n         for (i, &(start, end)) in spans.iter().enumerate() {\n             let span = codemap::mk_sp(BytePos(start), BytePos(end));\n+            let file_name = &self.codemap.span_to_filename(span);\n             let snippet = self.snippet(span);\n \n-            // Trim whitespace from the right hand side of each line.\n-            // Annoyingly, the library functions for splitting by lines etc. are not\n-            // quite right, so we must do it ourselves.\n-            let mut line_start = 0;\n-            let mut last_wspace = None;\n-            for (i, c) in snippet.char_indices() {\n-                if c == '\\n' {\n-                    if let Some(lw) = last_wspace {\n-                        self.changes.push_str_span(span, &snippet[line_start..lw]);\n-                        self.changes.push_str_span(span, \"\\n\");\n-                    } else {\n-                        self.changes.push_str_span(span, &snippet[line_start..i+1]);\n-                    }\n+            self.write_snippet(&snippet,\n+                               file_name,\n+                               i == spans.len() - 1,\n+                               &process_last_snippet);\n+        }\n+    }\n \n-                    line_start = i + 1;\n-                    last_wspace = None;\n+    fn write_snippet<F: Fn(&mut FmtVisitor, &str, &str, &str)>(&mut self,\n+                                                               snippet: &str,\n+                                                               file_name: &str,\n+                                                               last_snippet: bool,\n+                                                               process_last_snippet: F) {\n+        // Trim whitespace from the right hand side of each line.\n+        // Annoyingly, the library functions for splitting by lines etc. are not\n+        // quite right, so we must do it ourselves.\n+        let mut line_start = 0;\n+        let mut last_wspace = None;\n+        for (i, c) in snippet.char_indices() {\n+            if c == '\\n' {\n+                if let Some(lw) = last_wspace {\n+                    self.changes.push_str(file_name, &snippet[line_start..lw]);\n+                    self.changes.push_str(file_name, \"\\n\");\n                 } else {\n-                    if c.is_whitespace() {\n-                        if last_wspace.is_none() {\n-                            last_wspace = Some(i);\n-                        }\n-                    } else {\n-                        last_wspace = None;\n-                    }\n+                    self.changes.push_str(file_name, &snippet[line_start..i+1]);\n                 }\n-            }\n-            if i == spans.len() - 1 {\n-                process_last_snippet(self, &snippet[line_start..], span, &snippet);\n+\n+                line_start = i + 1;\n+                last_wspace = None;\n             } else {\n-                self.changes.push_str_span(span, &snippet[line_start..]);\n+                if c.is_whitespace() {\n+                    if last_wspace.is_none() {\n+                        last_wspace = Some(i);\n+                    }\n+                } else {\n+                    last_wspace = None;\n+                }\n             }\n         }\n+        if last_snippet {\n+            process_last_snippet(self, &snippet[line_start..], file_name, snippet);\n+        } else {\n+            self.changes.push_str(file_name, &snippet[line_start..]);\n+        }\n     }\n }"}, {"sha": "6a312ca665399ea96a4c053064af5f902eb200cc", "filename": "src/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ca3dc063e51a985425adfa61571f26002b4a4d2/src%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ca3dc063e51a985425adfa61571f26002b4a4d2/src%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmod.rs?ref=8ca3dc063e51a985425adfa61571f26002b4a4d2", "patch": "@@ -24,7 +24,6 @@\n //   dead spans\n //\n // Smoke testing till we can use it\n-//   end of multi-line string has wspace\n //   no newline at the end of doc.rs\n \n #[macro_use]\n@@ -192,7 +191,6 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n \n         self.block_indent -= TAB_SPACES;\n         // TODO we should compress any newlines here to just one\n-        // TODO somewhere here we are preserving bogus whitespace\n         self.format_missing_with_indent(b.span.hi - BytePos(1));\n         self.changes.push_str_span(b.span, \"}\");\n         self.last_pos = b.span.hi;\n@@ -557,7 +555,9 @@ impl<'a> FmtVisitor<'a> {\n             ast::Expr_::ExprLit(ref l) => {\n                 match l.node {\n                     ast::Lit_::LitStr(ref is, _) => {\n-                        return self.rewrite_string_lit(&is, l.span, width, offset);\n+                        let result = self.rewrite_string_lit(&is, l.span, width, offset);\n+                        debug!(\"string lit: `{}`\", result);\n+                        return result;\n                     }\n                     _ => {}\n                 }\n@@ -569,7 +569,6 @@ impl<'a> FmtVisitor<'a> {\n         }\n \n         let result = self.snippet(expr.span);\n-        debug!(\"snippet: {}\", result);\n         result\n     }\n }"}]}