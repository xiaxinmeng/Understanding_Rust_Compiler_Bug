{"sha": "f8f7800b182252ecd1ba37fe9dc9f71f562108ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4Zjc4MDBiMTgyMjUyZWNkMWJhMzdmZTlkYzlmNzFmNTYyMTA4YmE=", "commit": {"author": {"name": "Florian Rohm", "email": "florian.rohm@tngtech.com", "date": "2019-11-15T15:18:08Z"}, "committer": {"name": "Florian Rohm", "email": "florian.rohm@tngtech.com", "date": "2019-11-15T15:25:47Z"}, "message": "add new lint  tabs in doc comments", "tree": {"sha": "9308b751b48b2e209af5e4d222b47a67a5d437ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9308b751b48b2e209af5e4d222b47a67a5d437ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8f7800b182252ecd1ba37fe9dc9f71f562108ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8f7800b182252ecd1ba37fe9dc9f71f562108ba", "html_url": "https://github.com/rust-lang/rust/commit/f8f7800b182252ecd1ba37fe9dc9f71f562108ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8f7800b182252ecd1ba37fe9dc9f71f562108ba/comments", "author": null, "committer": null, "parents": [{"sha": "b4f1769734b6204fc6bece8556b7b80a7683271e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4f1769734b6204fc6bece8556b7b80a7683271e", "html_url": "https://github.com/rust-lang/rust/commit/b4f1769734b6204fc6bece8556b7b80a7683271e"}], "stats": {"total": 315, "additions": 315, "deletions": 0}, "files": [{"sha": "ccea700f3538d0d381e03b9d49a85b0865b6ba0e", "filename": "clippy_lints/src/tabs_in_doc_comments.rs", "status": "added", "additions": 219, "deletions": 0, "changes": 219, "blob_url": "https://github.com/rust-lang/rust/blob/f8f7800b182252ecd1ba37fe9dc9f71f562108ba/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f7800b182252ecd1ba37fe9dc9f71f562108ba/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs?ref=f8f7800b182252ecd1ba37fe9dc9f71f562108ba", "patch": "@@ -0,0 +1,219 @@\n+use crate::utils::span_lint_and_sugg;\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n+use rustc_errors::Applicability;\n+use std::convert::TryFrom;\n+use syntax::ast;\n+use syntax::source_map::{BytePos, Span};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks doc comments for usage of tab characters.\n+    ///\n+    /// **Why is this bad?** The rust style-guide promotes spaces instead of tabs for indentation.\n+    /// To keep a consistent view on the source, also doc comments should not have tabs.\n+    /// Also, explaining ascii-diagrams containing tabs can get displayed incorrectly when the\n+    /// display settings of the author and reader differ.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// ///\n+    /// /// Struct to hold two strings:\n+    /// /// \t- first\t\tone\n+    /// /// \t- second\tone\n+    /// pub struct DoubleString {\n+    ///    ///\n+    ///    /// \t- First String:\n+    ///    /// \t\t- needs to be inside here\n+    ///    first_string: String,\n+    ///    ///\n+    ///    /// \t- Second String:\n+    ///    /// \t\t- needs to be inside here\n+    ///    second_string: String,\n+    ///}\n+    /// ```\n+    ///\n+    /// Will be converted to:\n+     /// ```rust\n+    /// ///\n+    /// /// Struct to hold two strings:\n+    /// ///     - first        one\n+    /// ///     - second    one\n+    /// pub struct DoubleString {\n+    ///    ///\n+    ///    ///     - First String:\n+    ///    ///         - needs to be inside here\n+    ///    first_string: String,\n+    ///    ///\n+    ///    ///     - Second String:\n+    ///    ///         - needs to be inside here\n+    ///    second_string: String,\n+    ///}\n+    /// ```\n+    pub TABS_IN_DOC_COMMENTS,\n+    style,\n+    \"using tabs in doc comments is not recommended\"\n+}\n+\n+declare_lint_pass!(TabsInDocComments => [TABS_IN_DOC_COMMENTS]);\n+\n+impl TabsInDocComments {\n+    fn warn_if_tabs_in_doc(cx: &EarlyContext<'_>, attr: &ast::Attribute) {\n+        if let ast::AttrKind::DocComment(comment) = attr.kind {\n+            let comment = comment.as_str();\n+\n+            for (lo, hi) in get_chunks_of_tabs(&comment) {\n+                let new_span = Span::new(\n+                    attr.span.lo() + BytePos(lo),\n+                    attr.span.lo() + BytePos(hi),\n+                    attr.span.ctxt(),\n+                );\n+                span_lint_and_sugg(\n+                    cx,\n+                    TABS_IN_DOC_COMMENTS,\n+                    new_span,\n+                    \"using tabs in doc comments is not recommended\",\n+                    \"consider using four spaces per tab\",\n+                    \"    \".repeat((hi - lo) as usize),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+impl EarlyLintPass for TabsInDocComments {\n+    fn check_attribute(&mut self, cx: &EarlyContext<'_>, attribute: &ast::Attribute) {\n+        Self::warn_if_tabs_in_doc(cx, &attribute);\n+    }\n+}\n+\n+///\n+/// scans the string for groups of tabs and returns the start(inclusive) and end positions\n+/// (exclusive) of all groups\n+/// e.g. \"sd\\tasd\\t\\taa\" will be converted to [(2, 3), (6, 8)] as\n+///       012 3456 7 89\n+///         ^-^  ^---^\n+fn get_chunks_of_tabs(the_str: &str) -> Vec<(u32, u32)> {\n+    let line_length_way_to_long = \"doc comment longer than 2^32 chars\";\n+    let mut spans: Vec<(u32, u32)> = vec![];\n+    let mut current_start: u32 = 0;\n+\n+    // tracker to decide if the last group of tabs is not closed by a non-tab character\n+    let mut is_active = false;\n+\n+    let chars_array: Vec<_> = the_str.chars().collect();\n+\n+    if chars_array == vec!['\\t'] {\n+        return vec![(0, 1)];\n+    }\n+\n+    for (index, arr) in chars_array.windows(2).enumerate() {\n+        let index = u32::try_from(index).expect(line_length_way_to_long);\n+        match arr {\n+            ['\\t', '\\t'] => {\n+                // either string starts with double tab, then we have to set it active,\n+                // otherwise is_active is true anyway\n+                is_active = true;\n+            },\n+            [_, '\\t'] => {\n+                // as ['\\t', '\\t'] is excluded, this has to be a start of a tab group,\n+                // set indices accordingly\n+                is_active = true;\n+                current_start = index + 1;\n+            },\n+            ['\\t', _] => {\n+                // this now has to be an end of the group, hence we have to push a new tuple\n+                is_active = false;\n+                spans.push((current_start, index + 1));\n+            },\n+            _ => {},\n+        }\n+    }\n+\n+    // only possible when tabs are at the end, insert last group\n+    if is_active {\n+        spans.push((\n+            current_start,\n+            u32::try_from(the_str.chars().count()).expect(line_length_way_to_long),\n+        ));\n+    }\n+\n+    spans\n+}\n+\n+#[cfg(test)]\n+mod tests_for_get_chunks_of_tabs {\n+    use super::get_chunks_of_tabs;\n+\n+    #[test]\n+    fn test_empty_string() {\n+        let res = get_chunks_of_tabs(\"\");\n+\n+        assert_eq!(res, vec![]);\n+    }\n+\n+    #[test]\n+    fn test_simple() {\n+        let res = get_chunks_of_tabs(\"sd\\t\\t\\taa\");\n+\n+        assert_eq!(res, vec![(2, 5)]);\n+    }\n+\n+    #[test]\n+    fn test_only_t() {\n+        let res = get_chunks_of_tabs(\"\\t\\t\");\n+\n+        assert_eq!(res, vec![(0, 2)]);\n+    }\n+\n+    #[test]\n+    fn test_only_one_t() {\n+        let res = get_chunks_of_tabs(\"\\t\");\n+\n+        assert_eq!(res, vec![(0, 1)]);\n+    }\n+\n+    #[test]\n+    fn test_double() {\n+        let res = get_chunks_of_tabs(\"sd\\tasd\\t\\taa\");\n+\n+        assert_eq!(res, vec![(2, 3), (6, 8)]);\n+    }\n+\n+    #[test]\n+    fn test_start() {\n+        let res = get_chunks_of_tabs(\"\\t\\taa\");\n+\n+        assert_eq!(res, vec![(0, 2)]);\n+    }\n+\n+    #[test]\n+    fn test_end() {\n+        let res = get_chunks_of_tabs(\"aa\\t\\t\");\n+\n+        assert_eq!(res, vec![(2, 4)]);\n+    }\n+\n+    #[test]\n+    fn test_start_single() {\n+        let res = get_chunks_of_tabs(\"\\taa\");\n+\n+        assert_eq!(res, vec![(0, 1)]);\n+    }\n+\n+    #[test]\n+    fn test_end_single() {\n+        let res = get_chunks_of_tabs(\"aa\\t\");\n+\n+        assert_eq!(res, vec![(2, 3)]);\n+    }\n+\n+    #[test]\n+    fn test_no_tabs() {\n+        let res = get_chunks_of_tabs(\"dsfs\");\n+\n+        assert_eq!(res, vec![]);\n+    }\n+}"}, {"sha": "4bc4bc86c76c291dd2fd9417c00fc7ec16a0e195", "filename": "tests/ui/tabs_in_doc_comments.fixed", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f8f7800b182252ecd1ba37fe9dc9f71f562108ba/tests%2Fui%2Ftabs_in_doc_comments.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f8f7800b182252ecd1ba37fe9dc9f71f562108ba/tests%2Fui%2Ftabs_in_doc_comments.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftabs_in_doc_comments.fixed?ref=f8f7800b182252ecd1ba37fe9dc9f71f562108ba", "patch": "@@ -0,0 +1,22 @@\n+// run-rustfix\n+\n+#![warn(clippy::tabs_in_doc_comments)]\n+#[allow(dead_code)]\n+\n+///\n+/// Struct to hold two strings:\n+///     - first        one\n+///     - second    one\n+pub struct DoubleString {\n+    ///\n+    ///     - First String:\n+    ///         - needs to be inside here\n+    first_string: String,\n+    ///\n+    ///     - Second String:\n+    ///         - needs to be inside here\n+    second_string: String,\n+}\n+\n+/// This is main\n+fn main() {}"}, {"sha": "9db3416e6596409c385bf20c1a40e746a24b1b01", "filename": "tests/ui/tabs_in_doc_comments.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f8f7800b182252ecd1ba37fe9dc9f71f562108ba/tests%2Fui%2Ftabs_in_doc_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f7800b182252ecd1ba37fe9dc9f71f562108ba/tests%2Fui%2Ftabs_in_doc_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftabs_in_doc_comments.rs?ref=f8f7800b182252ecd1ba37fe9dc9f71f562108ba", "patch": "@@ -0,0 +1,22 @@\n+// run-rustfix\n+\n+#![warn(clippy::tabs_in_doc_comments)]\n+#[allow(dead_code)]\n+\n+///\n+/// Struct to hold two strings:\n+/// \t- first\t\tone\n+/// \t- second\tone\n+pub struct DoubleString {\n+    ///\n+    /// \t- First String:\n+    /// \t\t- needs to be inside here\n+    first_string: String,\n+    ///\n+    /// \t- Second String:\n+    /// \t\t- needs to be inside here\n+    second_string: String,\n+}\n+\n+/// This is main\n+fn main() {}"}, {"sha": "355f2e805796436a09d4900cb596ed3848926bc7", "filename": "tests/ui/tabs_in_doc_comments.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f8f7800b182252ecd1ba37fe9dc9f71f562108ba/tests%2Fui%2Ftabs_in_doc_comments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f7800b182252ecd1ba37fe9dc9f71f562108ba/tests%2Fui%2Ftabs_in_doc_comments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftabs_in_doc_comments.stderr?ref=f8f7800b182252ecd1ba37fe9dc9f71f562108ba", "patch": "@@ -0,0 +1,52 @@\n+error: using tabs in doc comments is not recommended\n+  --> $DIR/tabs_in_doc_comments.rs:12:9\n+   |\n+LL |     ///     - First String:\n+   |         ^^^^ help: consider using four spaces per tab\n+   |\n+   = note: `-D clippy::tabs-in-doc-comments` implied by `-D warnings`\n+\n+error: using tabs in doc comments is not recommended\n+  --> $DIR/tabs_in_doc_comments.rs:13:9\n+   |\n+LL |     ///         - needs to be inside here\n+   |         ^^^^^^^^ help: consider using four spaces per tab\n+\n+error: using tabs in doc comments is not recommended\n+  --> $DIR/tabs_in_doc_comments.rs:16:9\n+   |\n+LL |     ///     - Second String:\n+   |         ^^^^ help: consider using four spaces per tab\n+\n+error: using tabs in doc comments is not recommended\n+  --> $DIR/tabs_in_doc_comments.rs:17:9\n+   |\n+LL |     ///         - needs to be inside here\n+   |         ^^^^^^^^ help: consider using four spaces per tab\n+\n+error: using tabs in doc comments is not recommended\n+  --> $DIR/tabs_in_doc_comments.rs:8:5\n+   |\n+LL | ///     - first        one\n+   |     ^^^^ help: consider using four spaces per tab\n+\n+error: using tabs in doc comments is not recommended\n+  --> $DIR/tabs_in_doc_comments.rs:8:13\n+   |\n+LL | ///     - first        one\n+   |                ^^^^^^^^ help: consider using four spaces per tab\n+\n+error: using tabs in doc comments is not recommended\n+  --> $DIR/tabs_in_doc_comments.rs:9:5\n+   |\n+LL | ///     - second    one\n+   |     ^^^^ help: consider using four spaces per tab\n+\n+error: using tabs in doc comments is not recommended\n+  --> $DIR/tabs_in_doc_comments.rs:9:14\n+   |\n+LL | ///     - second    one\n+   |                 ^^^^ help: consider using four spaces per tab\n+\n+error: aborting due to 8 previous errors\n+"}]}