{"sha": "c7bea760917dcbff5025ac7b5dc62f54308c5530", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3YmVhNzYwOTE3ZGNiZmY1MDI1YWM3YjVkYzYyZjU0MzA4YzU1MzA=", "commit": {"author": {"name": "Dylan McKay", "email": "dylanmckay34@gmail.com", "date": "2017-02-05T07:19:27Z"}, "committer": {"name": "Dylan McKay", "email": "dylanmckay34@gmail.com", "date": "2017-02-05T07:19:27Z"}, "message": "Use u32 for alignments instead of u64", "tree": {"sha": "f32b659d3dbf33bc6c498dc414955ed98eb56d5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f32b659d3dbf33bc6c498dc414955ed98eb56d5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7bea760917dcbff5025ac7b5dc62f54308c5530", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7bea760917dcbff5025ac7b5dc62f54308c5530", "html_url": "https://github.com/rust-lang/rust/commit/c7bea760917dcbff5025ac7b5dc62f54308c5530", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7bea760917dcbff5025ac7b5dc62f54308c5530/comments", "author": null, "committer": null, "parents": [{"sha": "b4e6f70edac44c87eb71903d96d47d7fe48c37d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4e6f70edac44c87eb71903d96d47d7fe48c37d8", "html_url": "https://github.com/rust-lang/rust/commit/b4e6f70edac44c87eb71903d96d47d7fe48c37d8"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "29d04785d6fe106d4bf03a948147c6264ba3647f", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c7bea760917dcbff5025ac7b5dc62f54308c5530/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7bea760917dcbff5025ac7b5dc62f54308c5530/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=c7bea760917dcbff5025ac7b5dc62f54308c5530", "patch": "@@ -299,7 +299,7 @@ fn fixed_vec_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         llvm::LLVMRustDIBuilderCreateArrayType(\n             DIB(cx),\n             bytes_to_bits(array_size_in_bytes),\n-            bytes_to_bits(element_type_align) as u32,\n+            bytes_to_bits(element_type_align),\n             element_type_metadata,\n             subscripts)\n     };\n@@ -730,7 +730,7 @@ fn basic_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             DIB(cx),\n             name.as_ptr(),\n             bytes_to_bits(size),\n-            bytes_to_bits(align) as u32,\n+            bytes_to_bits(align),\n             encoding)\n     };\n \n@@ -750,7 +750,7 @@ fn pointer_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             DIB(cx),\n             pointee_type_metadata,\n             bytes_to_bits(pointer_size),\n-            bytes_to_bits(pointer_align) as u32,\n+            bytes_to_bits(pointer_align),\n             name.as_ptr())\n     };\n     return ptr_metadata;\n@@ -1504,7 +1504,7 @@ fn prepare_enum_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                         file_metadata,\n                         UNKNOWN_LINE_NUMBER,\n                         bytes_to_bits(discriminant_size),\n-                        bytes_to_bits(discriminant_align) as u32,\n+                        bytes_to_bits(discriminant_align),\n                         create_DIArray(DIB(cx), &enumerators_metadata),\n                         discriminant_base_type_metadata)\n                 };\n@@ -1546,7 +1546,7 @@ fn prepare_enum_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         file_metadata,\n         UNKNOWN_LINE_NUMBER,\n         bytes_to_bits(enum_type_size),\n-        bytes_to_bits(enum_type_align) as u32,\n+        bytes_to_bits(enum_type_align),\n         DIFlags::FlagZero,\n         ptr::null_mut(),\n         0, // RuntimeLang\n@@ -1648,7 +1648,7 @@ fn set_members_of_composite_type(cx: &CrateContext,\n                     unknown_file_metadata(cx),\n                     UNKNOWN_LINE_NUMBER,\n                     bytes_to_bits(member_size),\n-                    bytes_to_bits(member_align) as u32,\n+                    bytes_to_bits(member_align),\n                     bytes_to_bits(member_offset),\n                     member_description.flags,\n                     member_description.type_metadata)\n@@ -1691,7 +1691,7 @@ fn create_struct_stub(cx: &CrateContext,\n             unknown_file_metadata(cx),\n             UNKNOWN_LINE_NUMBER,\n             bytes_to_bits(struct_size),\n-            bytes_to_bits(struct_align) as u32,\n+            bytes_to_bits(struct_align),\n             DIFlags::FlagZero,\n             ptr::null_mut(),\n             empty_array,\n@@ -1728,7 +1728,7 @@ fn create_union_stub(cx: &CrateContext,\n             unknown_file_metadata(cx),\n             UNKNOWN_LINE_NUMBER,\n             bytes_to_bits(union_size),\n-            bytes_to_bits(union_align) as u32,\n+            bytes_to_bits(union_align),\n             DIFlags::FlagZero,\n             empty_array,\n             0, // RuntimeLang\n@@ -1783,7 +1783,7 @@ pub fn create_global_var_metadata(cx: &CrateContext,\n                                                     is_local_to_unit,\n                                                     global,\n                                                     ptr::null_mut(),\n-                                                    global_align as u32,\n+                                                    global_align,\n         );\n     }\n }"}, {"sha": "6a8fc904366dc1826f743f7606fc2d49a81e613c", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7bea760917dcbff5025ac7b5dc62f54308c5530/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7bea760917dcbff5025ac7b5dc62f54308c5530/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=c7bea760917dcbff5025ac7b5dc62f54308c5530", "patch": "@@ -464,7 +464,7 @@ pub fn declare_local<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n                     cx.sess().opts.optimize != config::OptLevel::No,\n                     DIFlags::FlagZero,\n                     argument_index,\n-                    align as u32,\n+                    align,\n                 )\n             };\n             source_loc::set_debug_location(bcx,"}, {"sha": "15a1c990aadc6aa674f83abde74b3cd8da235673", "filename": "src/librustc_trans/debuginfo/utils.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c7bea760917dcbff5025ac7b5dc62f54308c5530/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7bea760917dcbff5025ac7b5dc62f54308c5530/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs?ref=c7bea760917dcbff5025ac7b5dc62f54308c5530", "patch": "@@ -24,6 +24,8 @@ use type_::Type;\n use syntax_pos::{self, Span};\n use syntax::ast;\n \n+use std::ops;\n+\n pub fn is_node_local_to_unit(cx: &CrateContext, node_id: ast::NodeId) -> bool\n {\n     // The is_local_to_unit flag indicates whether a function is local to the\n@@ -49,12 +51,13 @@ pub fn span_start(cx: &CrateContext, span: Span) -> syntax_pos::Loc {\n     cx.sess().codemap().lookup_char_pos(span.lo)\n }\n \n-pub fn size_and_align_of(cx: &CrateContext, llvm_type: Type) -> (u64, u64) {\n-    (machine::llsize_of_alloc(cx, llvm_type), machine::llalign_of_min(cx, llvm_type) as u64)\n+pub fn size_and_align_of(cx: &CrateContext, llvm_type: Type) -> (u64, u32) {\n+    (machine::llsize_of_alloc(cx, llvm_type), machine::llalign_of_min(cx, llvm_type))\n }\n \n-pub fn bytes_to_bits(bytes: u64) -> u64 {\n-    bytes * 8\n+pub fn bytes_to_bits<T>(bytes: T) -> T\n+    where T: ops::Mul<Output=T> + From<u8> {\n+    bytes * 8u8.into()\n }\n \n #[inline]"}]}