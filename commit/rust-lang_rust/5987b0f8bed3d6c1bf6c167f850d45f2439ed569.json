{"sha": "5987b0f8bed3d6c1bf6c167f850d45f2439ed569", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ODdiMGY4YmVkM2Q2YzFiZjZjMTY3Zjg1MGQ0NWYyNDM5ZWQ1Njk=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-03-31T17:16:54Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-03-31T20:37:48Z"}, "message": "Use Place directly in place_as_reborrow, it's Copy", "tree": {"sha": "179d5d555fedbc1a5d13cfc54cc958c5b84c92a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/179d5d555fedbc1a5d13cfc54cc958c5b84c92a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5987b0f8bed3d6c1bf6c167f850d45f2439ed569", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl6DqhwACgkQgTGiTgx5\n769XPRAAkUf5svTMRifAHLonsPttW5+Y1x8geCNrpJFMNwJqIUPl115rLT2UMuwc\nfTN2ENhZ25InutcnYcNeADAdR7I3yEQIcddud7+m8aJx4fijfDQPK8Z1DheXuQXn\nrXQQSJQs3osBcegYA4r+bIEX39plSMYAqCaFyHaJj00njFeJkz9ybuirb9zVp7lq\n/PcvRfsJnaHv8JDyZGeleUH4x2wJl4373FsuaTif0DiRO9LqlWhKkwDb0yKPYVAM\nDl6znJLc0Xe/WxIE+k7xMfDvO8VXwHNXzFBds2x+EXpnL4q5r/C5Ib3iPKxWhfn0\nl3BAUmIjhWiVHs+3nO+dlujlopJ2ym10J6FjjoxOslww3aLalCFhfMet6BPGnbt6\neCe+tGMmTFHoGTVqqMmGyJ/wTYkcYFbhTbQHQrCpVS07DaW1aCIu2hy11F6nkvPk\nB4b9r4scmdA/AP2w+x9iwkHlyFNbsLzWppVYggVTb/N6mbbUBNiqaSO7FnefRg6f\nT+VqmvBlzks9xqmerboUJApb0xkgQUvRKw9JCAvODs9qT5E62yPM3ML+i57mpVge\n+6f16i0PeTwlfh5SahrgG6UXtUfN0rB1jYY28APKiZTsmEg6YjCwneR+AWmVQdUr\n++Ok+PZQO335Tueg7wV9mfi7n4tJUutc2On4ml1K869TXdDQL2A=\n=XJ+F\n-----END PGP SIGNATURE-----", "payload": "tree 179d5d555fedbc1a5d13cfc54cc958c5b84c92a5\nparent f37d2b8a633016a5269bf14b12f61fa8ab85d1da\nauthor Santiago Pastorino <spastorino@gmail.com> 1585675014 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1585687068 -0300\n\nUse Place directly in place_as_reborrow, it's Copy\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5987b0f8bed3d6c1bf6c167f850d45f2439ed569", "html_url": "https://github.com/rust-lang/rust/commit/5987b0f8bed3d6c1bf6c167f850d45f2439ed569", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5987b0f8bed3d6c1bf6c167f850d45f2439ed569/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f37d2b8a633016a5269bf14b12f61fa8ab85d1da", "url": "https://api.github.com/repos/rust-lang/rust/commits/f37d2b8a633016a5269bf14b12f61fa8ab85d1da", "html_url": "https://github.com/rust-lang/rust/commit/f37d2b8a633016a5269bf14b12f61fa8ab85d1da"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "649cc0a79d636554af570edfbf975fe237a8e07b", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5987b0f8bed3d6c1bf6c167f850d45f2439ed569/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5987b0f8bed3d6c1bf6c167f850d45f2439ed569/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=5987b0f8bed3d6c1bf6c167f850d45f2439ed569", "patch": "@@ -260,7 +260,7 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n \n         // Special-case reborrows to be more like a copy of a reference.\n         match *rvalue {\n-            Rvalue::Ref(_, kind, ref place) => {\n+            Rvalue::Ref(_, kind, place) => {\n                 if let Some(reborrowed_proj) = place_as_reborrow(self.tcx, *self.body, place) {\n                     let ctx = match kind {\n                         BorrowKind::Shared => {\n@@ -281,7 +281,7 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n                     return;\n                 }\n             }\n-            Rvalue::AddressOf(mutbl, ref place) => {\n+            Rvalue::AddressOf(mutbl, place) => {\n                 if let Some(reborrowed_proj) = place_as_reborrow(self.tcx, *self.body, place) {\n                     let ctx = match mutbl {\n                         Mutability::Not => {\n@@ -645,7 +645,7 @@ fn check_return_ty_is_sync(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, hir_id: HirId)\n fn place_as_reborrow(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n-    place: &'a Place<'tcx>,\n+    place: Place<'tcx>,\n ) -> Option<&'a [PlaceElem<'tcx>]> {\n     place.projection.split_last().and_then(|(outermost, inner)| {\n         if outermost != &ProjectionElem::Deref {"}]}