{"sha": "8e911cbd6565517530a6034aad7b7e49ef50e6a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlOTExY2JkNjU2NTUxNzUzMGE2MDM0YWFkN2I3ZTQ5ZWY1MGU2YTM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-03-20T21:21:02Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-03-20T22:16:12Z"}, "message": "Work on fixing name mangling.", "tree": {"sha": "6c0dc499ae72bb2990c8195a242f0ab6c6e467f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c0dc499ae72bb2990c8195a242f0ab6c6e467f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e911cbd6565517530a6034aad7b7e49ef50e6a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e911cbd6565517530a6034aad7b7e49ef50e6a3", "html_url": "https://github.com/rust-lang/rust/commit/8e911cbd6565517530a6034aad7b7e49ef50e6a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e911cbd6565517530a6034aad7b7e49ef50e6a3/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1695148b5de9e801c4fbbbadce2f576e511c1cc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1695148b5de9e801c4fbbbadce2f576e511c1cc2", "html_url": "https://github.com/rust-lang/rust/commit/1695148b5de9e801c4fbbbadce2f576e511c1cc2"}], "stats": {"total": 80, "additions": 47, "deletions": 33}, "files": [{"sha": "57a03a5c64c2b6683d2286b4eb6e7fb62fc87380", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8e911cbd6565517530a6034aad7b7e49ef50e6a3/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e911cbd6565517530a6034aad7b7e49ef50e6a3/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=8e911cbd6565517530a6034aad7b7e49ef50e6a3", "patch": "@@ -505,14 +505,43 @@ fn get_symbol_hash(ccx: @crate_ctxt, t: ty::t) -> str {\n     ret hash;\n }\n \n+\n+// Name sanitation. LLVM will happily accept identifiers with weird names, but\n+// gas doesn't!\n+fn sanitize(s: str) -> str {\n+    let result = \"\";\n+    str::chars_iter(s) {|c|\n+        alt c {\n+          '@' { result += \"_sbox_\"; }\n+          '~' { result += \"_ubox_\"; }\n+          '*' { result += \"_ptr_\"; }\n+          '&' { result += \"_ref_\"; }\n+          ',' { result += \"_\"; }\n+\n+          '{' | '(' { result += \"_of_\"; }\n+          'a' to 'z'\n+          | 'A' to 'Z'\n+          | '0' to '9'\n+          | '_' { str::push_char(result,c); }\n+          _ {\n+            if c > 'z' && char::is_XID_continue(c) {\n+                str::push_char(result,c);\n+            }\n+          }\n+        }\n+    }\n+    ret result;\n+}\n+\n fn mangle(ss: path) -> str {\n     // Follow C++ namespace-mangling style\n \n     let n = \"_ZN\"; // Begin name-sequence.\n \n     for s in ss {\n         alt s { path_name(s) | path_mod(s) {\n-          n += #fmt[\"%u%s\", str::len(s), s];\n+          let sani = sanitize(s);\n+          n += #fmt[\"%u%s\", str::len(sani), sani];\n         } }\n     }\n     n += \"E\"; // End name-sequence."}, {"sha": "0863d93acfcfe4da2fcc52e0d7e27443e0d71ecd", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 15, "deletions": 31, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8e911cbd6565517530a6034aad7b7e49ef50e6a3/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e911cbd6565517530a6034aad7b7e49ef50e6a3/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=8e911cbd6565517530a6034aad7b7e49ef50e6a3", "patch": "@@ -128,34 +128,6 @@ fn get_dest_addr(dest: dest) -> ValueRef {\n     }\n }\n \n-// Name sanitation. LLVM will happily accept identifiers with weird names, but\n-// gas doesn't!\n-fn sanitize(s: str) -> str {\n-    let result = \"\";\n-    for c: u8 in s {\n-        if c == '@' as u8 {\n-            result += \"boxed_\";\n-        } else {\n-            if c == ',' as u8 {\n-                result += \"_\";\n-            } else {\n-                if c == '{' as u8 || c == '(' as u8 {\n-                    result += \"_of_\";\n-                } else {\n-                    if c != 10u8 && c != '}' as u8 && c != ')' as u8 &&\n-                           c != ' ' as u8 && c != '\\t' as u8 && c != ';' as u8\n-                       {\n-                        let v = [c];\n-                        result += str::from_bytes(v);\n-                    }\n-                }\n-            }\n-        }\n-    }\n-    ret result;\n-}\n-\n-\n fn log_fn_time(ccx: @crate_ctxt, name: str, start: time::timeval,\n                end: time::timeval) {\n     let elapsed = 1000 * ((end.sec - start.sec) as int) +\n@@ -412,6 +384,14 @@ fn set_glue_inlining(f: ValueRef, t: ty::t) {\n     } else { set_always_inline(f); }\n }\n \n+// Double-check that we never ask LLVM to declare the same symbol twice. It\n+// silently mangles such symbols, breaking our linkage model.\n+fn note_unique_llvm_symbol(ccx: @crate_ctxt, sym: str) {\n+    if ccx.all_llvm_symbols.contains_key(sym) {\n+        ccx.sess.bug(\"duplicate LLVM symbol: \" + sym);\n+    }\n+    ccx.all_llvm_symbols.insert(sym, ());\n+}\n \n // Generates the declaration for (but doesn't emit) a type descriptor.\n fn declare_tydesc(ccx: @crate_ctxt, t: ty::t) -> @tydesc_info {\n@@ -424,8 +404,8 @@ fn declare_tydesc(ccx: @crate_ctxt, t: ty::t) -> @tydesc_info {\n     let name;\n     if ccx.sess.opts.debuginfo {\n         name = mangle_internal_name_by_type_only(ccx, t, \"tydesc\");\n-        name = sanitize(name);\n     } else { name = mangle_internal_name_by_seq(ccx, \"tydesc\"); }\n+    note_unique_llvm_symbol(ccx, name);\n     let gvar = str::as_c_str(name, {|buf|\n         llvm::LLVMAddGlobal(ccx.llmod, ccx.tydesc_type, buf)\n     });\n@@ -449,8 +429,10 @@ fn declare_generic_glue(ccx: @crate_ctxt, t: ty::t, llfnty: TypeRef,\n     let fn_nm;\n     if ccx.sess.opts.debuginfo {\n         fn_nm = mangle_internal_name_by_type_only(ccx, t, \"glue_\" + name);\n-        fn_nm = sanitize(fn_nm);\n-    } else { fn_nm = mangle_internal_name_by_seq(ccx, \"glue_\" + name); }\n+    } else {\n+        fn_nm = mangle_internal_name_by_seq(ccx, \"glue_\" + name);\n+    }\n+    note_unique_llvm_symbol(ccx, fn_nm);\n     let llfn = decl_cdecl_fn(ccx.llmod, fn_nm, llfnty);\n     set_glue_inlining(llfn, t);\n     ret llfn;\n@@ -4414,6 +4396,7 @@ fn trans_constant(ccx: @crate_ctxt, it: @ast::item) {\n                             path_name(\"discrim\")];\n             let s = mangle_exported_name(ccx, p, ty::mk_int(ccx.tcx));\n             let disr_val = vi[i].disr_val;\n+            note_unique_llvm_symbol(ccx, s);\n             let discrim_gvar = str::as_c_str(s, {|buf|\n                 llvm::LLVMAddGlobal(ccx.llmod, ccx.int_type, buf)\n             });\n@@ -4669,6 +4652,7 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n           sha: sha,\n           type_sha1s: ty::new_ty_hash(),\n           type_short_names: ty::new_ty_hash(),\n+          all_llvm_symbols: str_hash::<()>(),\n           tcx: tcx,\n           maps: maps,\n           stats:"}, {"sha": "df5f03e9922ea76e35b58b662b89e94d3c485387", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8e911cbd6565517530a6034aad7b7e49ef50e6a3/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e911cbd6565517530a6034aad7b7e49ef50e6a3/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=8e911cbd6565517530a6034aad7b7e49ef50e6a3", "patch": "@@ -5,7 +5,7 @@\n \n import libc::c_uint;\n import vec::unsafe::to_ptr;\n-import std::map::hashmap;\n+import std::map::{hashmap,set};\n import syntax::ast;\n import driver::session;\n import session::session;\n@@ -101,6 +101,7 @@ type crate_ctxt = {\n      sha: std::sha1::sha1,\n      type_sha1s: hashmap<ty::t, str>,\n      type_short_names: hashmap<ty::t, str>,\n+     all_llvm_symbols: set<str>,\n      tcx: ty::ctxt,\n      maps: maps,\n      stats: stats,"}]}