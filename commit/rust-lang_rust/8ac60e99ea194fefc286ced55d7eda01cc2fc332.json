{"sha": "8ac60e99ea194fefc286ced55d7eda01cc2fc332", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYzYwZTk5ZWExOTRmZWZjMjg2Y2VkNTVkN2VkYTAxY2MyZmMzMzI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-28T22:46:09Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-28T22:46:09Z"}, "message": "Extract meta_item sorting from back::link to middle::attr", "tree": {"sha": "fa482d5f20ab1b146d131d3964ee4ce44976c4a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa482d5f20ab1b146d131d3964ee4ce44976c4a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ac60e99ea194fefc286ced55d7eda01cc2fc332", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ac60e99ea194fefc286ced55d7eda01cc2fc332", "html_url": "https://github.com/rust-lang/rust/commit/8ac60e99ea194fefc286ced55d7eda01cc2fc332", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ac60e99ea194fefc286ced55d7eda01cc2fc332/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aecc5e6e0f1a2927210f68973b2a3c6353c39f01", "url": "https://api.github.com/repos/rust-lang/rust/commits/aecc5e6e0f1a2927210f68973b2a3c6353c39f01", "html_url": "https://github.com/rust-lang/rust/commit/aecc5e6e0f1a2927210f68973b2a3c6353c39f01"}], "stats": {"total": 63, "additions": 40, "deletions": 23}, "files": [{"sha": "7876b1cfc59809500f1b7e3e64dafcfb9a8a361e", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8ac60e99ea194fefc286ced55d7eda01cc2fc332/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac60e99ea194fefc286ced55d7eda01cc2fc332/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=8ac60e99ea194fefc286ced55d7eda01cc2fc332", "patch": "@@ -306,32 +306,15 @@ fn crate_link_metas(&ast::crate c) -> link_metas {\n \n // This calculates CMH as defined above\n fn crate_meta_extras_hash(sha1 sha, &ast::crate crate) -> str {\n-    // FIXME (#487) Move this sorting stuff into middle::attr\n-    fn lteq(&@ast::meta_item ma, &@ast::meta_item mb) -> bool {\n-        fn key(&@ast::meta_item m) -> ast::ident {\n-            alt (m.node) {\n-                case (ast::meta_word(?name)) {\n-                    name\n-                }\n-                case (ast::meta_name_value(?name, _)) {\n-                    name\n-                }\n-                case (ast::meta_list(?name, _)) {\n-                    name\n-                }\n-            }\n-        }\n-        ret key(ma) <= key(mb);\n-    }\n     fn len_and_str(&str s) -> str { ret #fmt(\"%u_%s\", str::byte_len(s), s); }\n+    \n+    auto cmh_items = {\n+        auto cmh_items = crate_link_metas(crate).cmh_items;\n+        attr::sort_meta_items(cmh_items)\n+    };\n \n-    let vec[mutable @ast::meta_item] v = [mutable ];\n-    for (@ast::meta_item mi in crate_link_metas(crate).cmh_items) {\n-        v += [mutable mi];\n-    }\n-    sort::quick_sort(lteq, v);\n     sha.reset();\n-    for (@ast::meta_item m_ in v) {\n+    for (@ast::meta_item m_ in cmh_items) {\n         auto m = m_;\n         alt (m.node) {\n             case (ast::meta_name_value(?key, ?value)) {"}, {"sha": "33914cb9b8662efff71dca829e456088a1520e2a", "filename": "src/comp/middle/attr.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8ac60e99ea194fefc286ced55d7eda01cc2fc332/src%2Fcomp%2Fmiddle%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac60e99ea194fefc286ced55d7eda01cc2fc332/src%2Fcomp%2Fmiddle%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fattr.rs?ref=8ac60e99ea194fefc286ced55d7eda01cc2fc332", "patch": "@@ -8,6 +8,7 @@ export attr_metas;\n export find_linkage_metas;\n export find_attrs_by_name;\n export contains;\n+export sort_meta_items;\n \n // From a list of crate attributes get only the meta_items that impact crate\n // linkage\n@@ -103,6 +104,39 @@ fn contains(&vec[@ast::meta_item] haystack, @ast::meta_item needle) -> bool {\n     ret false;\n }\n \n+fn sort_meta_items(&vec[@ast::meta_item] items) -> vec[@ast::meta_item] {\n+    fn lteq(&@ast::meta_item ma, &@ast::meta_item mb) -> bool {\n+        fn key(&@ast::meta_item m) -> ast::ident {\n+            alt (m.node) {\n+                case (ast::meta_word(?name)) {\n+                    name\n+                }\n+                case (ast::meta_name_value(?name, _)) {\n+                    name\n+                }\n+                case (ast::meta_list(?name, _)) {\n+                    name\n+                }\n+            }\n+        }\n+        ret key(ma) <= key(mb);\n+    }\n+\n+    // This is sort of stupid here, converting to a vec of mutables and back\n+    let vec[mutable @ast::meta_item] v = [mutable ];\n+    for (@ast::meta_item mi in items) {\n+        v += [mutable mi];\n+    }\n+\n+    std::sort::quick_sort(lteq, v);\n+\n+    let vec[@ast::meta_item] v2 = [];\n+    for (@ast::meta_item mi in v) {\n+        v2 += [mi]\n+    }\n+    ret v2;\n+}\n+\n //\n // Local Variables:\n // mode: rust"}]}