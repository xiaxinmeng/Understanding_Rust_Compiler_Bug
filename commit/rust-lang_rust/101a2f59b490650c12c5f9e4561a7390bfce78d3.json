{"sha": "101a2f59b490650c12c5f9e4561a7390bfce78d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMWEyZjU5YjQ5MDY1MGMxMmM1ZjllNDU2MWE3MzkwYmZjZTc4ZDM=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-06-15T09:08:41Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-06-25T21:41:22Z"}, "message": "Use `as_temp` to evaluate statement expressions", "tree": {"sha": "29313043f54f150812ac4ed59d4bbbd7eb69cbaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29313043f54f150812ac4ed59d4bbbd7eb69cbaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/101a2f59b490650c12c5f9e4561a7390bfce78d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/101a2f59b490650c12c5f9e4561a7390bfce78d3", "html_url": "https://github.com/rust-lang/rust/commit/101a2f59b490650c12c5f9e4561a7390bfce78d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/101a2f59b490650c12c5f9e4561a7390bfce78d3/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62bec714462129adcc622575d69db558b3750a6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/62bec714462129adcc622575d69db558b3750a6e", "html_url": "https://github.com/rust-lang/rust/commit/62bec714462129adcc622575d69db558b3750a6e"}], "stats": {"total": 177, "additions": 96, "deletions": 81}, "files": [{"sha": "7ea08b15b443d71e3027052bc5429a988d8dcf18", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=101a2f59b490650c12c5f9e4561a7390bfce78d3", "patch": "@@ -78,7 +78,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n         let source_info = this.source_info(span);\n         for stmt in stmts {\n-            let Stmt { kind, opt_destruction_scope, span: stmt_span } = this.hir.mirror(stmt);\n+            let Stmt { kind, opt_destruction_scope } = this.hir.mirror(stmt);\n             match kind {\n                 StmtKind::Expr { scope, expr } => {\n                     this.block_context.push(BlockFrame::Statement { ignores_expr_result: true });\n@@ -87,7 +87,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             let si = (scope, source_info);\n                             this.in_scope(si, LintLevel::Inherited, |this| {\n                                 let expr = this.hir.mirror(expr);\n-                                this.stmt_expr(block, expr, Some(stmt_span))\n+                                this.stmt_expr(block, expr, Some(scope))\n                             })\n                         }));\n                 }"}, {"sha": "3c5eafb41a2335dbc8d74adf93b74971aca0021c", "filename": "src/librustc_mir/build/expr/stmt.rs", "status": "modified", "additions": 35, "deletions": 45, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs?ref=101a2f59b490650c12c5f9e4561a7390bfce78d3", "patch": "@@ -1,21 +1,21 @@\n use crate::build::scope::BreakableScope;\n use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n use crate::hair::*;\n+use rustc::middle::region;\n use rustc::mir::*;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Builds a block of MIR statements to evaluate the HAIR `expr`.\n     /// If the original expression was an AST statement,\n     /// (e.g., `some().code(&here());`) then `opt_stmt_span` is the\n     /// span of that statement (including its semicolon, if any).\n-    /// Diagnostics use this span (which may be larger than that of\n-    /// `expr`) to identify when statement temporaries are dropped.\n-    pub fn stmt_expr(&mut self,\n-                     mut block: BasicBlock,\n-                     expr: Expr<'tcx>,\n-                     opt_stmt_span: Option<StatementSpan>)\n-                     -> BlockAnd<()>\n-    {\n+    /// The scope is used if a statement temporary must be dropped.\n+    pub fn stmt_expr(\n+        &mut self,\n+        mut block: BasicBlock,\n+        expr: Expr<'tcx>,\n+        statement_scope: Option<region::Scope>,\n+    ) -> BlockAnd<()> {\n         let this = self;\n         let expr_span = expr.span;\n         let source_info = this.source_info(expr.span);\n@@ -30,7 +30,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             } => {\n                 let value = this.hir.mirror(value);\n                 this.in_scope((region_scope, source_info), lint_level, |this| {\n-                    this.stmt_expr(block, value, opt_stmt_span)\n+                    this.stmt_expr(block, value, statement_scope)\n                 })\n             }\n             ExprKind::Assign { lhs, rhs } => {\n@@ -199,7 +199,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 block.unit()\n             }\n             _ => {\n-                let expr_ty = expr.ty;\n+                assert!(\n+                    statement_scope.is_some(),\n+                    \"Should not be calling `stmt_expr` on a general expression \\\n+                     without a statement scope\",\n+                );\n \n                 // Issue #54382: When creating temp for the value of\n                 // expression like:\n@@ -208,48 +212,34 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 //\n                 // it is usually better to focus on `the_value` rather\n                 // than the entirety of block(s) surrounding it.\n-                let mut temp_span = expr_span;\n-                let mut temp_in_tail_of_block = false;\n-                if let ExprKind::Block { body } = expr.kind {\n-                    if let Some(tail_expr) = &body.expr {\n-                        let mut expr = tail_expr;\n-                        while let rustc::hir::ExprKind::Block(subblock, _label) = &expr.node {\n-                            if let Some(subtail_expr) = &subblock.expr {\n-                                expr = subtail_expr\n-                            } else {\n-                                break;\n+                let adjusted_span = (|| {\n+                    if let ExprKind::Block { body } = expr.kind {\n+                        if let Some(tail_expr) = &body.expr {\n+                            let mut expr = tail_expr;\n+                            while let rustc::hir::ExprKind::Block(subblock, _label) = &expr.node {\n+                                if let Some(subtail_expr) = &subblock.expr {\n+                                    expr = subtail_expr\n+                                } else {\n+                                    break;\n+                                }\n                             }\n-                        }\n-                        temp_span = expr.span;\n-                        temp_in_tail_of_block = true;\n-                    }\n-                }\n-\n-                let temp = {\n-                    let mut local_decl = LocalDecl::new_temp(expr.ty.clone(), temp_span);\n-                    if temp_in_tail_of_block {\n-                        if this.block_context.currently_ignores_tail_results() {\n-                            local_decl = local_decl.block_tail(BlockTailInfo {\n+                            this.block_context.push(BlockFrame::TailExpr {\n                                 tail_result_is_ignored: true\n                             });\n+                            return Some(expr.span);\n                         }\n                     }\n-                    let temp = this.local_decls.push(local_decl);\n-                    let place = Place::from(temp);\n-                    debug!(\"created temp {:?} for expr {:?} in block_context: {:?}\",\n-                           temp, expr, this.block_context);\n-                    place\n-                };\n-                unpack!(block = this.into(&temp, block, expr));\n+                    None\n+                })();\n+\n+                let temp = unpack!(block =\n+                    this.as_temp(block, statement_scope, expr, Mutability::Not));\n \n-                // Attribute drops of the statement's temps to the\n-                // semicolon at the statement's end.\n-                let drop_point = this.hir.tcx().sess.source_map().end_point(match opt_stmt_span {\n-                    None => expr_span,\n-                    Some(StatementSpan(span)) => span,\n-                });\n+                if let Some(span) = adjusted_span {\n+                    this.local_decls[temp].source_info.span = span;\n+                    this.block_context.pop();\n+                }\n \n-                unpack!(block = this.build_drop(block, drop_point, temp, expr_ty));\n                 block.unit()\n             }\n         }"}, {"sha": "c5b5f2512436f0d1ac8738df5f82e58d41883ef1", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=101a2f59b490650c12c5f9e4561a7390bfce78d3", "patch": "@@ -805,27 +805,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         target\n     }\n \n-    /// Utility function for *non*-scope code to build their own drops\n-    pub fn build_drop(&mut self,\n-                      block: BasicBlock,\n-                      span: Span,\n-                      location: Place<'tcx>,\n-                      ty: Ty<'tcx>) -> BlockAnd<()> {\n-        if !self.hir.needs_drop(ty) {\n-            return block.unit();\n-        }\n-        let source_info = self.source_info(span);\n-        let next_target = self.cfg.start_new_block();\n-        let diverge_target = self.diverge_cleanup();\n-        self.cfg.terminate(block, source_info,\n-                           TerminatorKind::Drop {\n-                               location,\n-                               target: next_target,\n-                               unwind: Some(diverge_target),\n-                           });\n-        next_target.unit()\n-    }\n-\n     /// Utility function for *non*-scope code to build their own drops\n     pub fn build_drop_and_replace(&mut self,\n                                   block: BasicBlock,"}, {"sha": "9a73842d2f02ad66a994448c4085732a6158b4b5", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=101a2f59b490650c12c5f9e4561a7390bfce78d3", "patch": "@@ -49,7 +49,6 @@ fn mirror_stmts<'a, 'tcx>(\n     for (index, stmt) in stmts.iter().enumerate() {\n         let hir_id = stmt.hir_id;\n         let opt_dxn_ext = cx.region_scope_tree.opt_destruction_scope(hir_id.local_id);\n-        let stmt_span = StatementSpan(cx.tcx.hir().span(hir_id));\n         match stmt.node {\n             hir::StmtKind::Expr(ref expr) |\n             hir::StmtKind::Semi(ref expr) => {\n@@ -62,7 +61,6 @@ fn mirror_stmts<'a, 'tcx>(\n                         expr: expr.to_ref(),\n                     },\n                     opt_destruction_scope: opt_dxn_ext,\n-                    span: stmt_span,\n                 })))\n             }\n             hir::StmtKind::Item(..) => {\n@@ -107,7 +105,6 @@ fn mirror_stmts<'a, 'tcx>(\n                         lint_level: LintLevel::Explicit(local.hir_id),\n                     },\n                     opt_destruction_scope: opt_dxn_ext,\n-                    span: stmt_span,\n                 })));\n             }\n         }"}, {"sha": "5431a31c4bb2a95968baf59f13732ae782aa6293", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=101a2f59b490650c12c5f9e4561a7390bfce78d3", "patch": "@@ -55,14 +55,10 @@ pub enum StmtRef<'tcx> {\n     Mirror(Box<Stmt<'tcx>>),\n }\n \n-#[derive(Clone, Debug)]\n-pub struct StatementSpan(pub Span);\n-\n #[derive(Clone, Debug)]\n pub struct Stmt<'tcx> {\n     pub kind: StmtKind<'tcx>,\n     pub opt_destruction_scope: Option<region::Scope>,\n-    pub span: StatementSpan,\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "d9fa3d3d4736d3d2702ef0ee2c956df4a7836e1b", "filename": "src/test/mir-opt/box_expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.rs?ref=101a2f59b490650c12c5f9e4561a7390bfce78d3", "patch": "@@ -24,7 +24,7 @@ impl Drop for S {\n //     let mut _0: ();\n //     let _1: std::boxed::Box<S>;\n //     let mut _2: std::boxed::Box<S>;\n-//     let mut _3: ();\n+//     let _3: ();\n //     let mut _4: std::boxed::Box<S>;\n //     scope 1 {\n //     }\n@@ -50,6 +50,7 @@ impl Drop for S {\n //\n //     bb4: {\n //         StorageDead(_2);\n+//         StorageLive(_3);\n //         StorageLive(_4);\n //         _4 = move _1;\n //         _3 = const std::mem::drop::<std::boxed::Box<S>>(move _4) -> [return: bb5, unwind: bb7];\n@@ -69,6 +70,7 @@ impl Drop for S {\n //\n //     bb8: {\n //         StorageDead(_4);\n+//         StorageDead(_3);\n //         _0 = ();\n //         drop(_1) -> bb9;\n //     }"}, {"sha": "5e5fed12fb5f3d67e8b778378f64b81b133e3ad7", "filename": "src/test/mir-opt/copy_propagation_arg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.rs?ref=101a2f59b490650c12c5f9e4561a7390bfce78d3", "patch": "@@ -61,12 +61,14 @@ fn main() {\n // END rustc.foo.CopyPropagation.after.mir\n // START rustc.bar.CopyPropagation.before.mir\n // bb0: {\n+//     StorageLive(_2);\n //     StorageLive(_3);\n //     _3 = _1;\n //     _2 = const dummy(move _3) -> bb1;\n // }\n // bb1: {\n //     StorageDead(_3);\n+//     StorageDead(_2);\n //     _1 = const 5u8;\n //     ...\n //     return;"}, {"sha": "f97e1ba6c89d4ab029998d122113747ebfde3204", "filename": "src/test/mir-opt/generator-drop-cleanup.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup.rs?ref=101a2f59b490650c12c5f9e4561a7390bfce78d3", "patch": "@@ -18,6 +18,7 @@ fn main() {\n // }\n // bb1: {\n //     StorageDead(_3);\n+//     StorageDead(_2);\n //     goto -> bb5;\n // }\n // bb2: {\n@@ -36,6 +37,7 @@ fn main() {\n //     goto -> bb3;\n // }\n // bb7: {\n+//     StorageLive(_2);\n //     StorageLive(_3);\n //     goto -> bb1;\n // }"}, {"sha": "bcdb93754271681ee504804e9de1fe66c55402ef", "filename": "src/test/mir-opt/generator-storage-dead-unwind.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs?ref=101a2f59b490650c12c5f9e4561a7390bfce78d3", "patch": "@@ -54,6 +54,7 @@ fn main() {\n // }\n // bb2: {\n //     ...\n+//     StorageLive(_6);\n //     StorageLive(_7);\n //     _7 = move _2;\n //     _6 = const take::<Foo>(move _7) -> [return: bb9, unwind: bb8];\n@@ -81,23 +82,28 @@ fn main() {\n // }\n // bb8 (cleanup): {\n //     StorageDead(_7);\n+//     StorageDead(_6);\n //     goto -> bb7;\n // }\n // bb9: {\n //     StorageDead(_7);\n+//     StorageDead(_6);\n+//     StorageLive(_8);\n //     StorageLive(_9);\n //     _9 = move _3;\n //     _8 = const take::<Bar>(move _9) -> [return: bb10, unwind: bb11];\n // }\n // bb10: {\n //     StorageDead(_9);\n+//     StorageDead(_8);\n //     ...\n //     StorageDead(_3);\n //     StorageDead(_2);\n //     drop(_1) -> [return: bb12, unwind: bb1];\n // }\n // bb11 (cleanup): {\n //     StorageDead(_9);\n+//     StorageDead(_8);\n //     goto -> bb7;\n // }\n // bb12: {"}, {"sha": "d980cc891dc40c740d9aa1e6b241aa9183767194", "filename": "src/test/mir-opt/issue-38669.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Ftest%2Fmir-opt%2Fissue-38669.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Ftest%2Fmir-opt%2Fissue-38669.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-38669.rs?ref=101a2f59b490650c12c5f9e4561a7390bfce78d3", "patch": "@@ -25,6 +25,7 @@ fn main() {\n //         falseUnwind -> [real: bb3, cleanup: bb1];\n //     }\n //     bb3: {\n+//         StorageLive(_3);\n //         StorageLive(_4);\n //         _4 = _1;\n //         FakeRead(ForMatchedPlace, _4);\n@@ -34,13 +35,15 @@ fn main() {\n //     bb5: {\n //         _3 = ();\n //         StorageDead(_4);\n+//         StorageDead(_3);\n //         _1 = const true;\n //         _2 = ();\n //         goto -> bb2;\n //     }\n //     bb6: {\n //         _0 = ();\n //         StorageDead(_4);\n+//         StorageDead(_3);\n //         StorageDead(_1);\n //         return;\n //     }"}, {"sha": "e73390f52b5d552fc3287e923a0f52ac9a117c52", "filename": "src/test/mir-opt/issue-41110.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41110.rs?ref=101a2f59b490650c12c5f9e4561a7390bfce78d3", "patch": "@@ -42,7 +42,7 @@ impl S {\n // START rustc.test.ElaborateDrops.after.mir\n //    let mut _0: ();\n //    let _1: S;\n-//    let mut _3: ();\n+//    let _3: ();\n //    let mut _4: S;\n //    let mut _5: S;\n //    let mut _6: bool;"}, {"sha": "d0dbcbd7515f838974806fde144eea1df778db63", "filename": "src/test/mir-opt/issue-49232.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Ftest%2Fmir-opt%2Fissue-49232.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Ftest%2Fmir-opt%2Fissue-49232.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-49232.rs?ref=101a2f59b490650c12c5f9e4561a7390bfce78d3", "patch": "@@ -21,7 +21,7 @@ fn main() {\n //     let _2: i32;\n //     let mut _3: bool;\n //     let mut _4: !;\n-//     let mut _5: ();\n+//     let _5: ();\n //     let mut _6: &i32;\n //     scope 1 {\n //     }\n@@ -73,12 +73,14 @@ fn main() {\n //     bb12: {\n //         FakeRead(ForLet, _2);\n //         StorageDead(_3);\n+//         StorageLive(_5);\n //         StorageLive(_6);\n //         _6 = &_2;\n //         _5 = const std::mem::drop::<&i32>(move _6) -> [return: bb13, unwind: bb4];\n //     }\n //     bb13: {\n //         StorageDead(_6);\n+//         StorageDead(_5);\n //         _1 = ();\n //         StorageDead(_2);\n //         goto -> bb1;"}, {"sha": "177080c04f9722e89bed7364c5435d9c25f0878d", "filename": "src/test/mir-opt/loop_test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Ftest%2Fmir-opt%2Floop_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Ftest%2Fmir-opt%2Floop_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test.rs?ref=101a2f59b490650c12c5f9e4561a7390bfce78d3", "patch": "@@ -25,6 +25,7 @@ fn main() {\n //    bb3: { // Entry into the loop\n //        _1 = ();\n //        StorageDead(_2);\n+//        StorageDead(_1);\n //        goto -> bb5;\n //    }\n //    ..."}, {"sha": "aeb162772fac09288f14b4b9503e2e71f56bd290", "filename": "src/test/mir-opt/match_test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Ftest%2Fmir-opt%2Fmatch_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Ftest%2Fmir-opt%2Fmatch_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_test.rs?ref=101a2f59b490650c12c5f9e4561a7390bfce78d3", "patch": "@@ -75,6 +75,7 @@ fn main() {\n //        goto -> bb14;\n //    }\n //    bb14: {\n+//        StorageDead(_3);\n //        _0 = ();\n //        StorageDead(_2);\n //        StorageDead(_1);"}, {"sha": "8228d9740f0d3f6901ea35e9472f24d3792d6ca9", "filename": "src/test/mir-opt/nll/region-subtyping-basic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs?ref=101a2f59b490650c12c5f9e4561a7390bfce78d3", "patch": "@@ -22,9 +22,9 @@ fn main() {\n \n // END RUST SOURCE\n // START rustc.main.nll.0.mir\n-// | '_#2r | U0 | {bb2[0..=8], bb3[0], bb5[0..=1]}\n-// | '_#3r | U0 | {bb2[1..=8], bb3[0], bb5[0..=1]}\n-// | '_#4r | U0 | {bb2[4..=8], bb3[0], bb5[0..=1]}\n+// | '_#2r | U0 | {bb2[0..=8], bb3[0], bb5[0..=2]}\n+// | '_#3r | U0 | {bb2[1..=8], bb3[0], bb5[0..=2]}\n+// | '_#4r | U0 | {bb2[4..=8], bb3[0], bb5[0..=2]}\n // END rustc.main.nll.0.mir\n // START rustc.main.nll.0.mir\n // let _2: &'_#3r usize;"}, {"sha": "95570ff76a6d0a9770ca5012b19405a492a525df", "filename": "src/test/mir-opt/storage_ranges.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Ftest%2Fmir-opt%2Fstorage_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Ftest%2Fmir-opt%2Fstorage_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_ranges.rs?ref=101a2f59b490650c12c5f9e4561a7390bfce78d3", "patch": "@@ -12,6 +12,7 @@ fn main() {\n //         StorageLive(_1);\n //         _1 = const 0i32;\n //         FakeRead(ForLet, _1);\n+//         StorageLive(_2);\n //         StorageLive(_3);\n //         StorageLive(_4);\n //         StorageLive(_5);\n@@ -23,6 +24,7 @@ fn main() {\n //         _2 = ();\n //         StorageDead(_4);\n //         StorageDead(_3);\n+//         StorageDead(_2);\n //         StorageLive(_6);\n //         _6 = const 1i32;\n //         FakeRead(ForLet, _6);"}, {"sha": "ce4642020f0f1067b71b56928d3dffd465f21e1f", "filename": "src/test/ui/generator/issue-61442-stmt-expr-with-drop.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Ftest%2Fui%2Fgenerator%2Fissue-61442-stmt-expr-with-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101a2f59b490650c12c5f9e4561a7390bfce78d3/src%2Ftest%2Fui%2Fgenerator%2Fissue-61442-stmt-expr-with-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-61442-stmt-expr-with-drop.rs?ref=101a2f59b490650c12c5f9e4561a7390bfce78d3", "patch": "@@ -0,0 +1,32 @@\n+// Test that we don't consider temporaries for statement expressions as live\n+// across yields\n+\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await, generators, generator_trait)]\n+\n+use std::ops::Generator;\n+\n+async fn drop_and_await() {\n+    async {};\n+    async {}.await;\n+}\n+\n+fn drop_and_yield() {\n+    let x = || {\n+        String::new();\n+        yield;\n+    };\n+    Box::pin(x).as_mut().resume();\n+    let y = static || {\n+        String::new();\n+        yield;\n+    };\n+    Box::pin(y).as_mut().resume();\n+}\n+\n+fn main() {\n+    drop_and_await();\n+    drop_and_yield();\n+}"}]}