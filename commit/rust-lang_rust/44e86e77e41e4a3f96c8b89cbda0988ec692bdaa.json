{"sha": "44e86e77e41e4a3f96c8b89cbda0988ec692bdaa", "node_id": "C_kwDOAAsO6NoAKDQ0ZTg2ZTc3ZTQxZTRhM2Y5NmM4Yjg5Y2JkYTA5ODhlYzY5MmJkYWE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-05-09T14:46:27Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-05-09T14:46:27Z"}, "message": "Separate config building from Miri command building", "tree": {"sha": "e7c1b769bd62543498c945d861ba5c083654921d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7c1b769bd62543498c945d861ba5c083654921d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44e86e77e41e4a3f96c8b89cbda0988ec692bdaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44e86e77e41e4a3f96c8b89cbda0988ec692bdaa", "html_url": "https://github.com/rust-lang/rust/commit/44e86e77e41e4a3f96c8b89cbda0988ec692bdaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44e86e77e41e4a3f96c8b89cbda0988ec692bdaa/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37c3af48418e7de3443a09a4017f293deff7f86f", "url": "https://api.github.com/repos/rust-lang/rust/commits/37c3af48418e7de3443a09a4017f293deff7f86f", "html_url": "https://github.com/rust-lang/rust/commit/37c3af48418e7de3443a09a4017f293deff7f86f"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "07f5d8e78a135f06d9a57cbacdc03adf26e85439", "filename": "src/tools/miri/tests/compiletest.rs", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/44e86e77e41e4a3f96c8b89cbda0988ec692bdaa/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e86e77e41e4a3f96c8b89cbda0988ec692bdaa/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs?ref=44e86e77e41e4a3f96c8b89cbda0988ec692bdaa", "patch": "@@ -46,42 +46,30 @@ fn build_so_for_c_ffi_tests() -> PathBuf {\n }\n \n fn run_tests(mode: Mode, path: &str, target: &str, with_dependencies: bool) -> Result<()> {\n-    let mut config = Config {\n-        target: Some(target.to_owned()),\n-        stderr_filters: STDERR.clone(),\n-        stdout_filters: STDOUT.clone(),\n-        root_dir: PathBuf::from(path),\n-        mode,\n-        program: CommandBuilder::rustc(),\n-        quiet: false,\n-        edition: Some(\"2021\".into()),\n-        ..Config::default()\n-    };\n-\n-    config.program.program = miri_path();\n+    // Miri is rustc-like, so we create a default builder for rustc and modify it\n+    let mut program = CommandBuilder::rustc();\n+    program.program = miri_path();\n \n     let in_rustc_test_suite = option_env!(\"RUSTC_STAGE\").is_some();\n \n     // Add some flags we always want.\n     if in_rustc_test_suite {\n         // Less aggressive warnings to make the rustc toolstate management less painful.\n         // (We often get warnings when e.g. a feature gets stabilized or some lint gets added/improved.)\n-        config.program.args.push(\"-Astable-features\".into());\n-        config.program.args.push(\"-Aunused\".into());\n+        program.args.push(\"-Astable-features\".into());\n+        program.args.push(\"-Aunused\".into());\n     } else {\n-        config.program.args.push(\"-Dwarnings\".into());\n-        config.program.args.push(\"-Dunused\".into());\n+        program.args.push(\"-Dwarnings\".into());\n+        program.args.push(\"-Dunused\".into());\n     }\n     if let Ok(extra_flags) = env::var(\"MIRIFLAGS\") {\n         for flag in extra_flags.split_whitespace() {\n-            config.program.args.push(flag.into());\n+            program.args.push(flag.into());\n         }\n     }\n-    config.program.args.push(\"-Zui-testing\".into());\n-    if let Some(target) = &config.target {\n-        config.program.args.push(\"--target\".into());\n-        config.program.args.push(target.into());\n-    }\n+    program.args.push(\"-Zui-testing\".into());\n+    program.args.push(\"--target\".into());\n+    program.args.push(target.into());\n \n     // If we're on linux, and we're testing the extern-so functionality,\n     // then build the shared object file for testing external C function calls\n@@ -90,18 +78,31 @@ fn run_tests(mode: Mode, path: &str, target: &str, with_dependencies: bool) -> R\n         let so_file_path = build_so_for_c_ffi_tests();\n         let mut flag = std::ffi::OsString::from(\"-Zmiri-extern-so-file=\");\n         flag.push(so_file_path.into_os_string());\n-        config.program.args.push(flag);\n+        program.args.push(flag);\n     }\n \n     let skip_ui_checks = env::var_os(\"MIRI_SKIP_UI_CHECKS\").is_some();\n \n-    config.output_conflict_handling = match (env::var_os(\"MIRI_BLESS\").is_some(), skip_ui_checks) {\n+    let output_conflict_handling = match (env::var_os(\"MIRI_BLESS\").is_some(), skip_ui_checks) {\n         (false, false) => OutputConflictHandling::Error,\n         (true, false) => OutputConflictHandling::Bless,\n         (false, true) => OutputConflictHandling::Ignore,\n         (true, true) => panic!(\"cannot use MIRI_BLESS and MIRI_SKIP_UI_CHECKS at the same time\"),\n     };\n \n+    let mut config = Config {\n+        target: Some(target.to_owned()),\n+        stderr_filters: STDERR.clone(),\n+        stdout_filters: STDOUT.clone(),\n+        root_dir: PathBuf::from(path),\n+        mode,\n+        program,\n+        output_conflict_handling,\n+        quiet: false,\n+        edition: Some(\"2021\".into()),\n+        ..Config::default()\n+    };\n+\n     // Handle command-line arguments.\n     let mut after_dashdash = false;\n     config.path_filter.extend(std::env::args().skip(1).filter(|arg| {"}]}