{"sha": "ab061945a1c3e4602b6cf42a2f36ea139fe0afe5", "node_id": "C_kwDOAAsO6NoAKGFiMDYxOTQ1YTFjM2U0NjAyYjZjZjQyYTJmMzZlYTEzOWZlMGFmZTU", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-12-06T19:11:24Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-12-06T19:11:24Z"}, "message": "Consider expression precedense in `remove_parentheses` assist", "tree": {"sha": "95c0fa2cb157fd19dccd349df45c12194223743e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95c0fa2cb157fd19dccd349df45c12194223743e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab061945a1c3e4602b6cf42a2f36ea139fe0afe5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab061945a1c3e4602b6cf42a2f36ea139fe0afe5", "html_url": "https://github.com/rust-lang/rust/commit/ab061945a1c3e4602b6cf42a2f36ea139fe0afe5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab061945a1c3e4602b6cf42a2f36ea139fe0afe5/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f79279b487fad2a74d21588c49af83a79d5fdec", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f79279b487fad2a74d21588c49af83a79d5fdec", "html_url": "https://github.com/rust-lang/rust/commit/5f79279b487fad2a74d21588c49af83a79d5fdec"}], "stats": {"total": 122, "additions": 117, "deletions": 5}, "files": [{"sha": "ff500ba035821d9048142b04900596be3f735e5a", "filename": "crates/ide-assists/src/handlers/remove_parentheses.rs", "status": "modified", "additions": 117, "deletions": 5, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/ab061945a1c3e4602b6cf42a2f36ea139fe0afe5/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_parentheses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab061945a1c3e4602b6cf42a2f36ea139fe0afe5/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_parentheses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_parentheses.rs?ref=ab061945a1c3e4602b6cf42a2f36ea139fe0afe5", "patch": "@@ -28,7 +28,13 @@ pub(crate) fn remove_parentheses(acc: &mut Assists, ctx: &AssistContext<'_>) ->\n         return None;\n     }\n \n-    // FIXME: check that precedence is right\n+    let expr = parens.expr()?;\n+    let parent = ast::Expr::cast(parens.syntax().parent()?);\n+    let is_ok_to_remove =\n+        parent.map_or(true, |p| ExprPrecedence::of(&expr) >= ExprPrecedence::of(&p));\n+    if !is_ok_to_remove {\n+        return None;\n+    }\n \n     let delete_from_l = l_paren.text_range().start();\n     let delete_to_l = match l_paren.next_token() {\n@@ -54,6 +60,97 @@ pub(crate) fn remove_parentheses(acc: &mut Assists, ctx: &AssistContext<'_>) ->\n     )\n }\n \n+#[derive(Debug, Copy, Clone, Ord, PartialOrd, Eq, PartialEq)]\n+pub enum ExprPrecedence {\n+    // N.B.: Order is important\n+    /// Precedence is unknown\n+    Dummy,\n+    Closure,\n+    Jump,\n+    Range,\n+    Bin(BinOpPresedence),\n+    Prefix,\n+    Postfix,\n+    Paren,\n+}\n+\n+#[derive(Debug, Copy, Clone, Ord, PartialOrd, Eq, PartialEq)]\n+pub enum BinOpPresedence {\n+    // N.B.: Order is important\n+    /// `=`, `+=`, `-=`, `*=`, `/=`, `%=`, `|=`, `&=`\n+    Assign,\n+    /// `||`\n+    LOr,\n+    /// `&&`\n+    LAnd,\n+    /// `<`, `<=`, `>`, `>=`, `==` and `!=`\n+    Cmp,\n+    /// `|`\n+    BitOr,\n+    /// `^`\n+    BitXor,\n+    /// `&`\n+    BitAnd,\n+    /// `<<` and `>>`\n+    Shift,\n+    /// `+` and `-`\n+    Add,\n+    /// `*`, `/` and `%`\n+    Mul,\n+    /// `as`\n+    As,\n+}\n+\n+impl ExprPrecedence {\n+    pub fn of(expr: &ast::Expr) -> Self {\n+        // Copied from <https://github.com/rust-lang/rust/blob/b6852428a8ea9728369b64b9964cad8e258403d3/compiler/rustc_ast/src/util/parser.rs#L296>\n+        use ast::Expr::*;\n+\n+        match expr {\n+            ClosureExpr(_) => Self::Closure,\n+\n+            ContinueExpr(_) | ReturnExpr(_) | YieldExpr(_) | BreakExpr(_) => Self::Jump,\n+\n+            RangeExpr(_) => Self::Range,\n+\n+            BinExpr(bin_expr) => bin_expr\n+                .op_kind()\n+                .map(|op| match op {\n+                    ast::BinaryOp::LogicOp(op) => match op {\n+                        ast::LogicOp::And => BinOpPresedence::LAnd,\n+                        ast::LogicOp::Or => BinOpPresedence::LOr,\n+                    },\n+                    ast::BinaryOp::ArithOp(op) => match op {\n+                        ast::ArithOp::Add => BinOpPresedence::Add,\n+                        ast::ArithOp::Mul => BinOpPresedence::Mul,\n+                        ast::ArithOp::Sub => BinOpPresedence::Add,\n+                        ast::ArithOp::Div => BinOpPresedence::Mul,\n+                        ast::ArithOp::Rem => BinOpPresedence::Mul,\n+                        ast::ArithOp::Shl => BinOpPresedence::Shift,\n+                        ast::ArithOp::Shr => BinOpPresedence::Shift,\n+                        ast::ArithOp::BitXor => BinOpPresedence::BitXor,\n+                        ast::ArithOp::BitOr => BinOpPresedence::BitOr,\n+                        ast::ArithOp::BitAnd => BinOpPresedence::BitAnd,\n+                    },\n+                    ast::BinaryOp::CmpOp(_) => BinOpPresedence::Cmp,\n+                    ast::BinaryOp::Assignment { .. } => BinOpPresedence::Assign,\n+                })\n+                .map(Self::Bin)\n+                .unwrap_or(Self::Dummy),\n+            CastExpr(_) => Self::Bin(BinOpPresedence::As),\n+\n+            BoxExpr(_) | RefExpr(_) | LetExpr(_) | PrefixExpr(_) => Self::Prefix,\n+\n+            AwaitExpr(_) | CallExpr(_) | MethodCallExpr(_) | FieldExpr(_) | IndexExpr(_)\n+            | TryExpr(_) | MacroExpr(_) => Self::Postfix,\n+\n+            ArrayExpr(_) | TupleExpr(_) | Literal(_) | PathExpr(_) | ParenExpr(_) | IfExpr(_)\n+            | WhileExpr(_) | ForExpr(_) | LoopExpr(_) | MatchExpr(_) | BlockExpr(_)\n+            | RecordExpr(_) | UnderscoreExpr(_) => Self::Paren,\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable};\n@@ -68,14 +165,29 @@ mod tests {\n         check_assist(remove_parentheses, r#\"fn f() { (2$0) + 2; }\"#, r#\"fn f() { 2 + 2; }\"#);\n     }\n \n-    // We should not permit assist here and yet\n     #[test]\n-    fn remove_parens_wrong() {\n+    fn remove_parens_precedence() {\n         check_assist(\n             remove_parentheses,\n-            r#\"fn f() { $0(2 + 2) * 8; }\"#,\n-            r#\"fn f() { 2 + 2 * 8; }\"#,\n+            r#\"fn f() { $0(2 * 3) + 1; }\"#,\n+            r#\"fn f() { 2 * 3 + 1; }\"#,\n         );\n+        check_assist(remove_parentheses, r#\"fn f() { ( $0(2) ); }\"#, r#\"fn f() { ( 2 ); }\"#);\n+        check_assist(remove_parentheses, r#\"fn f() { $0(2?)?; }\"#, r#\"fn f() { 2??; }\"#);\n+        check_assist(remove_parentheses, r#\"fn f() { f(($02 + 2)); }\"#, r#\"fn f() { f(2 + 2); }\"#);\n+        check_assist(\n+            remove_parentheses,\n+            r#\"fn f() { (1<2)&&$0(3>4); }\"#,\n+            r#\"fn f() { (1<2)&&3>4; }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn remove_parens_doesnt_apply_precedence() {\n+        check_assist_not_applicable(remove_parentheses, r#\"fn f() { $0(2 + 2) * 8; }\"#);\n+        check_assist_not_applicable(remove_parentheses, r#\"fn f() { $0(2 + 2).f(); }\"#);\n+        check_assist_not_applicable(remove_parentheses, r#\"fn f() { $0(2 + 2).await; }\"#);\n+        check_assist_not_applicable(remove_parentheses, r#\"fn f() { $0!(2..2); }\"#);\n     }\n \n     #[test]"}]}