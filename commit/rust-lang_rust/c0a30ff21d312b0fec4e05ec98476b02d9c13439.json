{"sha": "c0a30ff21d312b0fec4e05ec98476b02d9c13439", "node_id": "C_kwDOAAsO6NoAKGMwYTMwZmYyMWQzMTJiMGZlYzRlMDVlYzk4NDc2YjAyZDljMTM0Mzk", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2021-12-08T14:44:52Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2021-12-08T14:44:52Z"}, "message": "Move synstructure hack out of ItemTree lowering", "tree": {"sha": "8cfdb7ead5afd04685fd3b4d41b515fafbbe36c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cfdb7ead5afd04685fd3b4d41b515fafbbe36c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0a30ff21d312b0fec4e05ec98476b02d9c13439", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0a30ff21d312b0fec4e05ec98476b02d9c13439", "html_url": "https://github.com/rust-lang/rust/commit/c0a30ff21d312b0fec4e05ec98476b02d9c13439", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0a30ff21d312b0fec4e05ec98476b02d9c13439/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77f2d349306f137acb296561d10ff745fcf6fed9", "url": "https://api.github.com/repos/rust-lang/rust/commits/77f2d349306f137acb296561d10ff745fcf6fed9", "html_url": "https://github.com/rust-lang/rust/commit/77f2d349306f137acb296561d10ff745fcf6fed9"}], "stats": {"total": 70, "additions": 58, "deletions": 12}, "files": [{"sha": "b9f8c2f297acace94f1444db980c32cbec4266bf", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0a30ff21d312b0fec4e05ec98476b02d9c13439/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a30ff21d312b0fec4e05ec98476b02d9c13439/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=c0a30ff21d312b0fec4e05ec98476b02d9c13439", "patch": "@@ -255,7 +255,7 @@ impl ImplData {\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ConstData {\n-    /// const _: () = ();\n+    /// `None` for `const _: () = ();`\n     pub name: Option<Name>,\n     pub type_ref: Interned<TypeRef>,\n     pub visibility: RawVisibility,"}, {"sha": "68d77084a3cbda3423769bb20526f3715997511b", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0a30ff21d312b0fec4e05ec98476b02d9c13439/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a30ff21d312b0fec4e05ec98476b02d9c13439/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=c0a30ff21d312b0fec4e05ec98476b02d9c13439", "patch": "@@ -648,7 +648,7 @@ pub struct Enum {\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Const {\n-    /// const _: () = ();\n+    /// `None` for `const _: () = ();`\n     pub name: Option<Name>,\n     pub visibility: RawVisibilityId,\n     pub type_ref: Interned<TypeRef>,"}, {"sha": "4396801116c7994736b7d3e3a585488fd7cbf461", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c0a30ff21d312b0fec4e05ec98476b02d9c13439/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a30ff21d312b0fec4e05ec98476b02d9c13439/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=c0a30ff21d312b0fec4e05ec98476b02d9c13439", "patch": "@@ -375,12 +375,7 @@ impl<'a> Ctx<'a> {\n     }\n \n     fn lower_const(&mut self, konst: &ast::Const) -> FileItemTreeId<Const> {\n-        let mut name = konst.name().map(|it| it.as_name());\n-        if name.as_ref().map_or(false, |n| n.to_smol_str().starts_with(\"_DERIVE_\")) {\n-            // FIXME: this is a hack to treat consts generated by synstructure as unnamed\n-            // remove this some time in the future\n-            name = None;\n-        }\n+        let name = konst.name().map(|it| it.as_name());\n         let type_ref = self.lower_type_ref_opt(konst.ty());\n         let visibility = self.lower_visibility(konst);\n         let ast_id = self.source_ast_id_map.ast_id(konst);"}, {"sha": "1e53d392e8e8dcf783bba87f228607c383ffb8f8", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c0a30ff21d312b0fec4e05ec98476b02d9c13439/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a30ff21d312b0fec4e05ec98476b02d9c13439/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=c0a30ff21d312b0fec4e05ec98476b02d9c13439", "patch": "@@ -8,8 +8,9 @@ use arrayvec::ArrayVec;\n use base_db::{CrateId, Edition};\n use chalk_ir::{cast::Cast, Mutability, UniverseIndex};\n use hir_def::{\n-    lang_item::LangItemTarget, nameres::DefMap, AssocItemId, BlockId, FunctionId, GenericDefId,\n-    HasModule, ImplId, ItemContainerId, Lookup, ModuleId, TraitId,\n+    item_scope::ItemScope, lang_item::LangItemTarget, nameres::DefMap, AssocItemId, BlockId,\n+    ConstId, FunctionId, GenericDefId, HasModule, ImplId, ItemContainerId, Lookup, ModuleDefId,\n+    ModuleId, TraitId,\n };\n use hir_expand::name::Name;\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -177,7 +178,7 @@ impl TraitImpls {\n \n             // To better support custom derives, collect impls in all unnamed const items.\n             // const _: () = { ... };\n-            for konst in module_data.scope.unnamed_consts() {\n+            for konst in collect_unnamed_consts(db, &module_data.scope) {\n                 let body = db.body(konst.into());\n                 for (_, block_def_map) in body.blocks(db.upcast()) {\n                     self.collect_def_map(db, &block_def_map);\n@@ -297,7 +298,7 @@ impl InherentImpls {\n \n             // To better support custom derives, collect impls in all unnamed const items.\n             // const _: () = { ... };\n-            for konst in module_data.scope.unnamed_consts() {\n+            for konst in collect_unnamed_consts(db, &module_data.scope) {\n                 let body = db.body(konst.into());\n                 for (_, block_def_map) in body.blocks(db.upcast()) {\n                     self.collect_def_map(db, &block_def_map);\n@@ -318,6 +319,34 @@ impl InherentImpls {\n     }\n }\n \n+fn collect_unnamed_consts<'a>(\n+    db: &'a dyn HirDatabase,\n+    scope: &'a ItemScope,\n+) -> impl Iterator<Item = ConstId> + 'a {\n+    let unnamed_consts = scope.unnamed_consts();\n+\n+    // FIXME: Also treat consts named `_DERIVE_*` as unnamed, since synstructure generates those.\n+    // Should be removed once synstructure stops doing that.\n+    let synstructure_hack_consts = scope.values().filter_map(|(item, _)| match item {\n+        ModuleDefId::ConstId(id) => {\n+            let loc = id.lookup(db.upcast());\n+            let item_tree = loc.id.item_tree(db.upcast());\n+            if item_tree[loc.id.value]\n+                .name\n+                .as_ref()\n+                .map_or(false, |n| n.to_smol_str().starts_with(\"_DERIVE_\"))\n+            {\n+                Some(id)\n+            } else {\n+                None\n+            }\n+        }\n+        _ => None,\n+    });\n+\n+    unnamed_consts.chain(synstructure_hack_consts)\n+}\n+\n pub fn def_crates(\n     db: &dyn HirDatabase,\n     ty: &Ty,"}, {"sha": "731605ced1fa2226ba68ad1c4d6346999fe0647b", "filename": "crates/hir_ty/src/tests/method_resolution.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c0a30ff21d312b0fec4e05ec98476b02d9c13439/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a30ff21d312b0fec4e05ec98476b02d9c13439/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=c0a30ff21d312b0fec4e05ec98476b02d9c13439", "patch": "@@ -1248,6 +1248,28 @@ fn f() {\n     );\n }\n \n+#[test]\n+fn trait_impl_in_synstructure_const() {\n+    check_types(\n+        r#\"\n+struct S;\n+\n+trait Tr {\n+    fn method(&self) -> u16;\n+}\n+\n+const _DERIVE_Tr_: () = {\n+    impl Tr for S {}\n+};\n+\n+fn f() {\n+    S.method();\n+  //^^^^^^^^^^ u16\n+}\n+    \"#,\n+    );\n+}\n+\n #[test]\n fn inherent_impl_in_unnamed_const() {\n     check_types("}]}