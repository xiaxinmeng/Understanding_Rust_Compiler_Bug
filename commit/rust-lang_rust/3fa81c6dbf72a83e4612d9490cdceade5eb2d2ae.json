{"sha": "3fa81c6dbf72a83e4612d9490cdceade5eb2d2ae", "node_id": "C_kwDOAAsO6NoAKDNmYTgxYzZkYmY3MmE4M2U0NjEyZDk0OTBjZGNlYWRlNWViMmQyYWU", "commit": {"author": {"name": "Tom Milligan", "email": "tom@reinfer.io", "date": "2022-07-20T21:24:50Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2022-07-31T16:31:39Z"}, "message": "[review] use extend trait, enum for skip context", "tree": {"sha": "3feff95cf8faad8569b0c46f522c994436770e67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3feff95cf8faad8569b0c46f522c994436770e67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fa81c6dbf72a83e4612d9490cdceade5eb2d2ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fa81c6dbf72a83e4612d9490cdceade5eb2d2ae", "html_url": "https://github.com/rust-lang/rust/commit/3fa81c6dbf72a83e4612d9490cdceade5eb2d2ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fa81c6dbf72a83e4612d9490cdceade5eb2d2ae/comments", "author": {"login": "tommilligan", "id": 12255914, "node_id": "MDQ6VXNlcjEyMjU1OTE0", "avatar_url": "https://avatars.githubusercontent.com/u/12255914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tommilligan", "html_url": "https://github.com/tommilligan", "followers_url": "https://api.github.com/users/tommilligan/followers", "following_url": "https://api.github.com/users/tommilligan/following{/other_user}", "gists_url": "https://api.github.com/users/tommilligan/gists{/gist_id}", "starred_url": "https://api.github.com/users/tommilligan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tommilligan/subscriptions", "organizations_url": "https://api.github.com/users/tommilligan/orgs", "repos_url": "https://api.github.com/users/tommilligan/repos", "events_url": "https://api.github.com/users/tommilligan/events{/privacy}", "received_events_url": "https://api.github.com/users/tommilligan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cc126180f8340071741586c9b455b88b920b116", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cc126180f8340071741586c9b455b88b920b116", "html_url": "https://github.com/rust-lang/rust/commit/7cc126180f8340071741586c9b455b88b920b116"}], "stats": {"total": 58, "additions": 41, "deletions": 17}, "files": [{"sha": "59d6d84c96430a7b554cd718df89a6600e5949d8", "filename": "src/skip.rs", "status": "modified", "additions": 39, "deletions": 15, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/3fa81c6dbf72a83e4612d9490cdceade5eb2d2ae/src%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa81c6dbf72a83e4612d9490cdceade5eb2d2ae/src%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fskip.rs?ref=3fa81c6dbf72a83e4612d9490cdceade5eb2d2ae", "patch": "@@ -11,7 +11,7 @@ use std::collections::HashSet;\n /// - attributes slice\n /// - manually feeding values into the underlying contexts\n ///\n-/// Query this context to know if you need skip a block.\n+/// Query this context to know if you need to skip a block.\n #[derive(Default, Clone)]\n pub(crate) struct SkipContext {\n     pub(crate) macros: SkipNameContext,\n@@ -20,8 +20,8 @@ pub(crate) struct SkipContext {\n \n impl SkipContext {\n     pub(crate) fn update_with_attrs(&mut self, attrs: &[ast::Attribute]) {\n-        self.macros.append(get_skip_names(\"macros\", attrs));\n-        self.attributes.append(get_skip_names(\"attributes\", attrs));\n+        self.macros.extend(get_skip_names(\"macros\", attrs));\n+        self.attributes.extend(get_skip_names(\"attributes\", attrs));\n     }\n \n     pub(crate) fn update(&mut self, other: SkipContext) {\n@@ -34,28 +34,52 @@ impl SkipContext {\n /// Track which names to skip.\n ///\n /// Query this context with a string to know whether to skip it.\n-#[derive(Default, Clone)]\n-pub(crate) struct SkipNameContext {\n-    all: bool,\n-    values: HashSet<String>,\n+#[derive(Clone)]\n+pub(crate) enum SkipNameContext {\n+    All,\n+    Values(HashSet<String>),\n }\n \n-impl SkipNameContext {\n-    pub(crate) fn append(&mut self, values: Vec<String>) {\n-        self.values.extend(values);\n+impl Default for SkipNameContext {\n+    fn default() -> Self {\n+        Self::Values(Default::default())\n+    }\n+}\n+\n+impl Extend<String> for SkipNameContext {\n+    fn extend<T: IntoIterator<Item = String>>(&mut self, iter: T) {\n+        match self {\n+            Self::All => {}\n+            Self::Values(values) => values.extend(iter),\n+        }\n     }\n+}\n \n+impl SkipNameContext {\n     pub(crate) fn update(&mut self, other: Self) {\n-        self.all = self.all || other.all;\n-        self.values.extend(other.values);\n+        match (self, other) {\n+            // If we're already skipping everything, nothing more can be added\n+            (Self::All, _) => {}\n+            // If we want to skip all, set it\n+            (this, Self::All) => {\n+                *this = Self::All;\n+            }\n+            // If we have some new values to skip, add them\n+            (Self::Values(existing_values), Self::Values(new_values)) => {\n+                existing_values.extend(new_values)\n+            }\n+        }\n     }\n \n     pub(crate) fn skip(&self, name: &str) -> bool {\n-        self.all || self.values.contains(name)\n+        match self {\n+            Self::All => true,\n+            Self::Values(values) => values.contains(name),\n+        }\n     }\n \n-    pub(crate) fn set_all(&mut self, all: bool) {\n-        self.all = all;\n+    pub(crate) fn skip_all(&mut self) {\n+        *self = Self::All;\n     }\n }\n "}, {"sha": "c0fc37eaaa8993979d22442b491e3438854a27d7", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fa81c6dbf72a83e4612d9490cdceade5eb2d2ae/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa81c6dbf72a83e4612d9490cdceade5eb2d2ae/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=3fa81c6dbf72a83e4612d9490cdceade5eb2d2ae", "patch": "@@ -775,10 +775,10 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         for macro_selector in config.skip_macro_invocations().0 {\n             match macro_selector {\n                 MacroSelector::Name(name) => macro_names.push(name.to_string()),\n-                MacroSelector::All => skip_context.macros.set_all(true),\n+                MacroSelector::All => skip_context.macros.skip_all(),\n             }\n         }\n-        skip_context.macros.append(macro_names);\n+        skip_context.macros.extend(macro_names);\n         FmtVisitor {\n             parent_context: None,\n             parse_sess: parse_session,"}]}