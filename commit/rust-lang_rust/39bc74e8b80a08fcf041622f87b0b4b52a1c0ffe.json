{"sha": "39bc74e8b80a08fcf041622f87b0b4b52a1c0ffe", "node_id": "C_kwDOAAsO6NoAKDM5YmM3NGU4YjgwYTA4ZmNmMDQxNjIyZjg3YjBiNGI1MmExYzBmZmU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-23T15:20:48Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-03T16:32:21Z"}, "message": "Make object_lifetime_defaults a cross-crate query.", "tree": {"sha": "4d44182cbf36bef4f2824e3bdf5e36fb5777ecdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d44182cbf36bef4f2824e3bdf5e36fb5777ecdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39bc74e8b80a08fcf041622f87b0b4b52a1c0ffe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39bc74e8b80a08fcf041622f87b0b4b52a1c0ffe", "html_url": "https://github.com/rust-lang/rust/commit/39bc74e8b80a08fcf041622f87b0b4b52a1c0ffe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39bc74e8b80a08fcf041622f87b0b4b52a1c0ffe/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04f72f95384d97f4c4e7a59e60cb85ec581ebe06", "url": "https://api.github.com/repos/rust-lang/rust/commits/04f72f95384d97f4c4e7a59e60cb85ec581ebe06", "html_url": "https://github.com/rust-lang/rust/commit/04f72f95384d97f4c4e7a59e60cb85ec581ebe06"}], "stats": {"total": 62, "additions": 20, "deletions": 42}, "files": [{"sha": "34639c0b0d0cbec5e73ad523985cce2e8d8d18ba", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39bc74e8b80a08fcf041622f87b0b4b52a1c0ffe/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39bc74e8b80a08fcf041622f87b0b4b52a1c0ffe/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=39bc74e8b80a08fcf041622f87b0b4b52a1c0ffe", "patch": "@@ -1579,7 +1579,7 @@ rustc_queries! {\n     /// for each parameter if a trait object were to be passed for that parameter.\n     /// For example, for `struct Foo<'a, T, U>`, this would be `['static, 'static]`.\n     /// For `struct Foo<'a, T: 'a, U>`, this would instead be `['a, 'static]`.\n-    query object_lifetime_defaults(_: LocalDefId) -> Option<&'tcx [ObjectLifetimeDefault]> {\n+    query object_lifetime_defaults(_: DefId) -> Option<&'tcx [ObjectLifetimeDefault]> {\n         desc { \"looking up lifetime defaults for a region on an item\" }\n     }\n     query late_bound_vars_map(_: LocalDefId)"}, {"sha": "f52db86733b690c681203c2e00231472fc3e30a8", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 19, "deletions": 41, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/39bc74e8b80a08fcf041622f87b0b4b52a1c0ffe/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39bc74e8b80a08fcf041622f87b0b4b52a1c0ffe/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=39bc74e8b80a08fcf041622f87b0b4b52a1c0ffe", "patch": "@@ -11,7 +11,7 @@ use rustc_data_structures::fx::{FxHashSet, FxIndexMap, FxIndexSet};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{DefIdMap, LocalDefId};\n+use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{GenericArg, GenericParam, GenericParamKind, HirIdMap, LifetimeName, Node};\n use rustc_middle::bug;\n@@ -24,7 +24,6 @@ use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n use std::borrow::Cow;\n use std::fmt;\n-use std::mem::take;\n \n trait RegionExt {\n     fn early(hir_map: Map<'_>, index: &mut u32, param: &GenericParam<'_>) -> (LocalDefId, Region);\n@@ -131,9 +130,6 @@ pub(crate) struct LifetimeContext<'a, 'tcx> {\n     /// be false if the `Item` we are resolving lifetimes for is not a trait or\n     /// we eventually need lifetimes resolve for trait items.\n     trait_definition_only: bool,\n-\n-    /// Cache for cross-crate per-definition object lifetime defaults.\n-    xcrate_object_lifetime_defaults: DefIdMap<Vec<ObjectLifetimeDefault>>,\n }\n \n #[derive(Debug)]\n@@ -294,9 +290,23 @@ pub fn provide(providers: &mut ty::query::Providers) {\n \n         named_region_map: |tcx, id| resolve_lifetimes_for(tcx, id).defs.get(&id),\n         is_late_bound_map,\n-        object_lifetime_defaults: |tcx, id| match tcx.hir().find_by_def_id(id) {\n-            Some(Node::Item(item)) => compute_object_lifetime_defaults(tcx, item),\n-            _ => None,\n+        object_lifetime_defaults: |tcx, def_id| {\n+            if let Some(def_id) = def_id.as_local() {\n+                match tcx.hir().get_by_def_id(def_id) {\n+                    Node::Item(item) => compute_object_lifetime_defaults(tcx, item),\n+                    _ => None,\n+                }\n+            } else {\n+                Some(tcx.arena.alloc_from_iter(tcx.generics_of(def_id).params.iter().filter_map(\n+                    |param| match param.kind {\n+                        GenericParamDefKind::Type { object_lifetime_default, .. } => {\n+                            Some(object_lifetime_default)\n+                        }\n+                        GenericParamDefKind::Const { .. } => Some(Set1::Empty),\n+                        GenericParamDefKind::Lifetime => None,\n+                    },\n+                )))\n+            }\n         },\n         late_bound_vars_map: |tcx, id| resolve_lifetimes_for(tcx, id).late_bound_vars.get(&id),\n \n@@ -363,7 +373,6 @@ fn do_resolve(\n         map: &mut named_region_map,\n         scope: ROOT_SCOPE,\n         trait_definition_only,\n-        xcrate_object_lifetime_defaults: Default::default(),\n     };\n     visitor.visit_item(item);\n \n@@ -1413,20 +1422,17 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         F: for<'b> FnOnce(&mut LifetimeContext<'b, 'tcx>),\n     {\n         let LifetimeContext { tcx, map, .. } = self;\n-        let xcrate_object_lifetime_defaults = take(&mut self.xcrate_object_lifetime_defaults);\n         let mut this = LifetimeContext {\n             tcx: *tcx,\n             map,\n             scope: &wrap_scope,\n             trait_definition_only: self.trait_definition_only,\n-            xcrate_object_lifetime_defaults,\n         };\n         let span = tracing::debug_span!(\"scope\", scope = ?TruncatedScopeDebug(&this.scope));\n         {\n             let _enter = span.enter();\n             f(&mut this);\n         }\n-        self.xcrate_object_lifetime_defaults = this.xcrate_object_lifetime_defaults;\n     }\n \n     /// Visits self by adding a scope and handling recursive walk over the contents with `walk`.\n@@ -1780,35 +1786,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 }\n                 Set1::Many => None,\n             };\n-            if let Some(def_id) = def_id.as_local() {\n-                let id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n-                self.tcx\n-                    .object_lifetime_defaults(id.owner)\n-                    .unwrap()\n-                    .iter()\n-                    .map(set_to_region)\n-                    .collect()\n-            } else {\n-                let tcx = self.tcx;\n-                self.xcrate_object_lifetime_defaults\n-                    .entry(def_id)\n-                    .or_insert_with(|| {\n-                        tcx.generics_of(def_id)\n-                            .params\n-                            .iter()\n-                            .filter_map(|param| match param.kind {\n-                                GenericParamDefKind::Type { object_lifetime_default, .. } => {\n-                                    Some(object_lifetime_default)\n-                                }\n-                                GenericParamDefKind::Const { .. } => Some(Set1::Empty),\n-                                GenericParamDefKind::Lifetime => None,\n-                            })\n-                            .collect()\n-                    })\n-                    .iter()\n-                    .map(set_to_region)\n-                    .collect()\n-            }\n+            self.tcx.object_lifetime_defaults(def_id).unwrap().iter().map(set_to_region).collect()\n         });\n \n         debug!(\"visit_segment_args: object_lifetime_defaults={:?}\", object_lifetime_defaults);"}]}