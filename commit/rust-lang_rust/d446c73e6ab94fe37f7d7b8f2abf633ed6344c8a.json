{"sha": "d446c73e6ab94fe37f7d7b8f2abf633ed6344c8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NDZjNzNlNmFiOTRmZTM3ZjdkN2I4ZjJhYmY2MzNlZDYzNDRjOGE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-22T09:03:10Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-23T23:59:38Z"}, "message": "parser: refactor away at_end", "tree": {"sha": "79531baf6675cfe080d20573e3607f6dde64ea3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79531baf6675cfe080d20573e3607f6dde64ea3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d446c73e6ab94fe37f7d7b8f2abf633ed6344c8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d446c73e6ab94fe37f7d7b8f2abf633ed6344c8a", "html_url": "https://github.com/rust-lang/rust/commit/d446c73e6ab94fe37f7d7b8f2abf633ed6344c8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d446c73e6ab94fe37f7d7b8f2abf633ed6344c8a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abc46a579b336f7ac686b8f24c0ff31be8726038", "url": "https://api.github.com/repos/rust-lang/rust/commits/abc46a579b336f7ac686b8f24c0ff31be8726038", "html_url": "https://github.com/rust-lang/rust/commit/abc46a579b336f7ac686b8f24c0ff31be8726038"}], "stats": {"total": 12, "additions": 3, "deletions": 9}, "files": [{"sha": "52619866c4ef6dd98eac8e5dbfbd0f9e70b0dca2", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d446c73e6ab94fe37f7d7b8f2abf633ed6344c8a/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d446c73e6ab94fe37f7d7b8f2abf633ed6344c8a/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=d446c73e6ab94fe37f7d7b8f2abf633ed6344c8a", "patch": "@@ -161,7 +161,7 @@ impl<'a> Parser<'a> {\n             (Ident::invalid(), ItemKind::Use(P(tree)))\n         } else if self.check_fn_front_matter() {\n             // FUNCTION ITEM\n-            let (ident, sig, generics, body) = self.parse_fn(&mut false, attrs, req_name)?;\n+            let (ident, sig, generics, body) = self.parse_fn(attrs, req_name)?;\n             (ident, ItemKind::Fn(sig, generics, body))\n         } else if self.eat_keyword(kw::Extern) {\n             if self.eat_keyword(kw::Crate) {\n@@ -1406,7 +1406,6 @@ impl<'a> Parser<'a> {\n     /// Parse a function starting from the front matter (`const ...`) to the body `{ ... }` or `;`.\n     fn parse_fn(\n         &mut self,\n-        at_end: &mut bool,\n         attrs: &mut Vec<Attribute>,\n         req_name: ReqName,\n     ) -> PResult<'a, (Ident, FnSig, Generics, Option<P<Block>>)> {\n@@ -1415,18 +1414,14 @@ impl<'a> Parser<'a> {\n         let mut generics = self.parse_generics()?; // `<'a, T, ...>`\n         let decl = self.parse_fn_decl(req_name, AllowPlus::Yes)?; // `(p: u8, ...)`\n         generics.where_clause = self.parse_where_clause()?; // `where T: Ord`\n-        let body = self.parse_fn_body(at_end, attrs)?; // `;` or `{ ... }`.\n+        let body = self.parse_fn_body(attrs)?; // `;` or `{ ... }`.\n         Ok((ident, FnSig { header, decl }, generics, body))\n     }\n \n     /// Parse the \"body\" of a function.\n     /// This can either be `;` when there's no body,\n     /// or e.g. a block when the function is a provided one.\n-    fn parse_fn_body(\n-        &mut self,\n-        at_end: &mut bool,\n-        attrs: &mut Vec<Attribute>,\n-    ) -> PResult<'a, Option<P<Block>>> {\n+    fn parse_fn_body(&mut self, attrs: &mut Vec<Attribute>) -> PResult<'a, Option<P<Block>>> {\n         let (inner_attrs, body) = match self.token.kind {\n             token::Semi => {\n                 self.bump();\n@@ -1446,7 +1441,6 @@ impl<'a> Parser<'a> {\n             _ => return self.expected_semi_or_open_brace(),\n         };\n         attrs.extend(inner_attrs);\n-        *at_end = true;\n         Ok(body)\n     }\n "}]}