{"sha": "69316f06f6554c710c5e51e24d06523de166b63c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5MzE2ZjA2ZjY1NTRjNzEwYzVlNTFlMjRkMDY1MjNkZTE2NmI2M2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-02T16:18:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-02T16:18:37Z"}, "message": "auto merge of #6182 : huonw/rust/core-str-opts, r=nikomatsakis\n\nThis adds #[inline] to many very common string routines (e.g. `len`).\r\n\r\nIt also rewrites `repeat` to not use `+=` and make it O(n) rather than O(n^2), and also concat/connect(_slices) to reduce the overhead of reallocations, and constantly `set_len`ing (etc) in `push_str`. (The added complexity might not be worth the 20% speedup though.)", "tree": {"sha": "b1d919347c473a9fccb7efff2ae8ca0a261d6ca9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1d919347c473a9fccb7efff2ae8ca0a261d6ca9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69316f06f6554c710c5e51e24d06523de166b63c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69316f06f6554c710c5e51e24d06523de166b63c", "html_url": "https://github.com/rust-lang/rust/commit/69316f06f6554c710c5e51e24d06523de166b63c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69316f06f6554c710c5e51e24d06523de166b63c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c64f7a0f73dde275ba06cdfd3c3b6b5f2f9e39d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c64f7a0f73dde275ba06cdfd3c3b6b5f2f9e39d", "html_url": "https://github.com/rust-lang/rust/commit/1c64f7a0f73dde275ba06cdfd3c3b6b5f2f9e39d"}, {"sha": "5714e2c11b939628247dd0107545e2feb8b74b47", "url": "https://api.github.com/repos/rust-lang/rust/commits/5714e2c11b939628247dd0107545e2feb8b74b47", "html_url": "https://github.com/rust-lang/rust/commit/5714e2c11b939628247dd0107545e2feb8b74b47"}], "stats": {"total": 147, "additions": 132, "deletions": 15}, "files": [{"sha": "f3181b26bd7e02f914543462dd97fdd60688cb47", "filename": "src/libcore/str.rs", "status": "modified", "additions": 132, "deletions": 15, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/69316f06f6554c710c5e51e24d06523de166b63c/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69316f06f6554c710c5e51e24d06523de166b63c/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=69316f06f6554c710c5e51e24d06523de166b63c", "patch": "@@ -77,6 +77,7 @@ pub fn from_bytes_slice<'a>(vector: &'a [u8]) -> &'a str {\n }\n \n /// Copy a slice into a new unique str\n+#[inline(always)]\n pub fn from_slice(s: &str) -> ~str {\n     unsafe { raw::slice_bytes_owned(s, 0, len(s)) }\n }\n@@ -240,38 +241,132 @@ pub fn append(lhs: ~str, rhs: &str) -> ~str {\n \n /// Concatenate a vector of strings\n pub fn concat(v: &[~str]) -> ~str {\n-    let mut s: ~str = ~\"\";\n-    for vec::each(v) |ss| {\n-        push_str(&mut s, *ss);\n+    if v.is_empty() { return ~\"\"; }\n+\n+    let mut len = 0;\n+    for v.each |ss| {\n+        len += ss.len();\n+    }\n+    let mut s = ~\"\";\n+\n+    reserve(&mut s, len);\n+\n+    unsafe {\n+        do as_buf(s) |buf, _len| {\n+            let mut buf = ::cast::transmute_mut_unsafe(buf);\n+            for v.each |ss| {\n+                do as_buf(*ss) |ssbuf, sslen| {\n+                    let sslen = sslen - 1;\n+                    ptr::copy_memory(buf, ssbuf, sslen);\n+                    buf = buf.offset(sslen);\n+                }\n+            }\n+        }\n+        raw::set_len(&mut s, len);\n     }\n     s\n }\n \n /// Concatenate a vector of strings, placing a given separator between each\n pub fn connect(v: &[~str], sep: &str) -> ~str {\n+    if v.is_empty() { return ~\"\"; }\n+\n+    // concat is faster\n+    if sep.is_empty() { return concat(v); }\n+\n+    // this is wrong without the guarantee that v is non-empty\n+    let mut len = sep.len() * (v.len() - 1);\n+    for v.each |ss| {\n+        len += ss.len();\n+    }\n     let mut s = ~\"\", first = true;\n-    for vec::each(v) |ss| {\n-        if first { first = false; } else { push_str(&mut s, sep); }\n-        push_str(&mut s, *ss);\n+\n+    reserve(&mut s, len);\n+\n+    unsafe {\n+        do as_buf(s) |buf, _len| {\n+            do as_buf(sep) |sepbuf, seplen| {\n+                let seplen = seplen - 1;\n+                let mut buf = ::cast::transmute_mut_unsafe(buf);\n+                for v.each |ss| {\n+                    do as_buf(*ss) |ssbuf, sslen| {\n+                        let sslen = sslen - 1;\n+                        if first {\n+                            first = false;\n+                        } else {\n+                            ptr::copy_memory(buf, sepbuf, seplen);\n+                            buf = buf.offset(seplen);\n+                        }\n+                        ptr::copy_memory(buf, ssbuf, sslen);\n+                        buf = buf.offset(sslen);\n+                    }\n+                }\n+            }\n+        }\n+        raw::set_len(&mut s, len);\n     }\n     s\n }\n \n /// Concatenate a vector of strings, placing a given separator between each\n pub fn connect_slices(v: &[&str], sep: &str) -> ~str {\n+    if v.is_empty() { return ~\"\"; }\n+\n+    // this is wrong without the guarantee that v is non-empty\n+    let mut len = sep.len() * (v.len() - 1);\n+    for v.each |ss| {\n+        len += ss.len();\n+    }\n     let mut s = ~\"\", first = true;\n-    for vec::each(v) |ss| {\n-        if first { first = false; } else { push_str(&mut s, sep); }\n-        push_str(&mut s, *ss);\n+\n+    reserve(&mut s, len);\n+\n+    unsafe {\n+        do as_buf(s) |buf, _len| {\n+            do as_buf(sep) |sepbuf, seplen| {\n+                let seplen = seplen - 1;\n+                let mut buf = ::cast::transmute_mut_unsafe(buf);\n+                for vec::each(v) |ss| {\n+                    do as_buf(*ss) |ssbuf, sslen| {\n+                        let sslen = sslen - 1;\n+                        if first {\n+                            first = false;\n+                        } else if seplen > 0 {\n+                            ptr::copy_memory(buf, sepbuf, seplen);\n+                            buf = buf.offset(seplen);\n+                        }\n+                        ptr::copy_memory(buf, ssbuf, sslen);\n+                        buf = buf.offset(sslen);\n+                    }\n+                }\n+            }\n+        }\n+        raw::set_len(&mut s, len);\n     }\n     s\n }\n \n /// Given a string, make a new string with repeated copies of it\n pub fn repeat(ss: &str, nn: uint) -> ~str {\n-    let mut acc = ~\"\";\n-    for nn.times { acc += ss; }\n-    acc\n+    do as_buf(ss) |buf, len| {\n+        let mut ret = ~\"\";\n+        // ignore the NULL terminator\n+        let len = len - 1;\n+        reserve(&mut ret, nn * len);\n+\n+        unsafe {\n+            do as_buf(ret) |rbuf, _len| {\n+                let mut rbuf = ::cast::transmute_mut_unsafe(rbuf);\n+\n+                for nn.times {\n+                    ptr::copy_memory(rbuf, buf, len);\n+                    rbuf = rbuf.offset(len);\n+                }\n+            }\n+            raw::set_len(&mut ret, nn * len);\n+        }\n+        ret\n+    }\n }\n \n /*\n@@ -820,6 +915,7 @@ Section: Comparing strings\n /// Bytewise slice equality\n #[cfg(notest)]\n #[lang=\"str_eq\"]\n+#[inline]\n pub fn eq_slice(a: &str, b: &str) -> bool {\n     do as_buf(a) |ap, alen| {\n         do as_buf(b) |bp, blen| {\n@@ -836,6 +932,7 @@ pub fn eq_slice(a: &str, b: &str) -> bool {\n }\n \n #[cfg(test)]\n+#[inline]\n pub fn eq_slice(a: &str, b: &str) -> bool {\n     do as_buf(a) |ap, alen| {\n         do as_buf(b) |bp, blen| {\n@@ -854,15 +951,18 @@ pub fn eq_slice(a: &str, b: &str) -> bool {\n /// Bytewise string equality\n #[cfg(notest)]\n #[lang=\"uniq_str_eq\"]\n+#[inline]\n pub fn eq(a: &~str, b: &~str) -> bool {\n     eq_slice(*a, *b)\n }\n \n #[cfg(test)]\n+#[inline]\n pub fn eq(a: &~str, b: &~str) -> bool {\n     eq_slice(*a, *b)\n }\n \n+#[inline]\n fn cmp(a: &str, b: &str) -> Ordering {\n     let low = uint::min(a.len(), b.len());\n \n@@ -879,20 +979,24 @@ fn cmp(a: &str, b: &str) -> Ordering {\n \n #[cfg(notest)]\n impl<'self> TotalOrd for &'self str {\n+    #[inline]\n     fn cmp(&self, other: & &'self str) -> Ordering { cmp(*self, *other) }\n }\n \n #[cfg(notest)]\n impl TotalOrd for ~str {\n+    #[inline]\n     fn cmp(&self, other: &~str) -> Ordering { cmp(*self, *other) }\n }\n \n #[cfg(notest)]\n impl TotalOrd for @str {\n+    #[inline]\n     fn cmp(&self, other: &@str) -> Ordering { cmp(*self, *other) }\n }\n \n /// Bytewise slice less than\n+#[inline]\n fn lt(a: &str, b: &str) -> bool {\n     let (a_len, b_len) = (a.len(), b.len());\n     let end = uint::min(a_len, b_len);\n@@ -909,16 +1013,19 @@ fn lt(a: &str, b: &str) -> bool {\n }\n \n /// Bytewise less than or equal\n+#[inline]\n pub fn le(a: &str, b: &str) -> bool {\n     !lt(b, a)\n }\n \n /// Bytewise greater than or equal\n+#[inline]\n fn ge(a: &str, b: &str) -> bool {\n     !lt(a, b)\n }\n \n /// Bytewise greater than\n+#[inline]\n fn gt(a: &str, b: &str) -> bool {\n     !le(a, b)\n }\n@@ -1595,6 +1702,7 @@ Section: String properties\n */\n \n /// Returns true if the string has length 0\n+#[inline(always)]\n pub fn is_empty(s: &str) -> bool { len(s) == 0u }\n \n /**\n@@ -1616,11 +1724,13 @@ fn is_alphanumeric(s: &str) -> bool {\n }\n \n /// Returns the string length/size in bytes not counting the null terminator\n+#[inline(always)]\n pub fn len(s: &str) -> uint {\n     do as_buf(s) |_p, n| { n - 1u }\n }\n \n /// Returns the number of characters that a string holds\n+#[inline(always)]\n pub fn char_len(s: &str) -> uint { count_chars(s, 0u, len(s)) }\n \n /*\n@@ -1752,7 +1862,8 @@ pub fn count_chars(s: &str, start: uint, end: uint) -> uint {\n     return len;\n }\n \n-/// Counts the number of bytes taken by the `n` in `s` starting from `start`.\n+/// Counts the number of bytes taken by the first `n` chars in `s`\n+/// starting from `start`.\n pub fn count_bytes<'b>(s: &'b str, start: uint, n: uint) -> uint {\n     assert!(is_char_boundary(s, start));\n     let mut end = start, cnt = n;\n@@ -1988,6 +2099,7 @@ static tag_six_b: uint = 252u;\n  * let i = str::as_bytes(\"Hello World\") { |bytes| vec::len(bytes) };\n  * ~~~\n  */\n+#[inline]\n pub fn as_bytes<T>(s: &const ~str, f: &fn(&~[u8]) -> T) -> T {\n     unsafe {\n         let v: *~[u8] = cast::transmute(copy s);\n@@ -2023,6 +2135,7 @@ pub fn as_bytes_slice<'a>(s: &'a str) -> &'a [u8] {\n  * let s = str::as_c_str(\"PATH\", { |path| libc::getenv(path) });\n  * ~~~\n  */\n+#[inline]\n pub fn as_c_str<T>(s: &str, f: &fn(*libc::c_char) -> T) -> T {\n     do as_buf(s) |buf, len| {\n         // NB: len includes the trailing null.\n@@ -2099,6 +2212,7 @@ pub fn subslice_offset(outer: &str, inner: &str) -> uint {\n  * * s - A string\n  * * n - The number of bytes to reserve space for\n  */\n+#[inline(always)]\n pub fn reserve(s: &mut ~str, n: uint) {\n     unsafe {\n         let v: *mut ~[u8] = cast::transmute(s);\n@@ -2126,6 +2240,7 @@ pub fn reserve(s: &mut ~str, n: uint) {\n  * * s - A string\n  * * n - The number of bytes to reserve space for\n  */\n+#[inline(always)]\n pub fn reserve_at_least(s: &mut ~str, n: uint) {\n     reserve(s, uint::next_power_of_two(n + 1u) - 1u)\n }\n@@ -2314,6 +2429,7 @@ pub mod raw {\n     }\n \n     /// Sets the length of the string and adds the null terminator\n+    #[inline]\n     pub unsafe fn set_len(v: &mut ~str, new_len: uint) {\n         let v: **mut vec::raw::VecRepr = cast::transmute(v);\n         let repr: *mut vec::raw::VecRepr = *v;\n@@ -2489,7 +2605,7 @@ impl<'self> StrSlice<'self> for &'self str {\n     #[inline]\n     fn is_alphanumeric(&self) -> bool { is_alphanumeric(*self) }\n     /// Returns the size in bytes not counting the null terminator\n-    #[inline]\n+    #[inline(always)]\n     fn len(&self) -> uint { len(*self) }\n     /// Returns the number of characters that a string holds\n     #[inline]\n@@ -2599,10 +2715,11 @@ pub trait OwnedStr {\n }\n \n impl OwnedStr for ~str {\n+    #[inline]\n     fn push_str(&mut self, v: &str) {\n         push_str(self, v);\n     }\n-\n+    #[inline]\n     fn push_char(&mut self, c: char) {\n         push_char(self, c);\n     }"}]}