{"sha": "748788530962a4095762b82c21756ff4589066b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ODc4ODUzMDk2MmE0MDk1NzYyYjgyYzIxNzU2ZmY0NTg5MDY2YjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-25T10:57:15Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-25T10:58:00Z"}, "message": "Simplify", "tree": {"sha": "eb0452d7d5372c1dc5cd222189bc5835dab00536", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb0452d7d5372c1dc5cd222189bc5835dab00536"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/748788530962a4095762b82c21756ff4589066b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/748788530962a4095762b82c21756ff4589066b3", "html_url": "https://github.com/rust-lang/rust/commit/748788530962a4095762b82c21756ff4589066b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/748788530962a4095762b82c21756ff4589066b3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "575fb9ab6a5f3d0dc60a8fc811ba9833f5f81b4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/575fb9ab6a5f3d0dc60a8fc811ba9833f5f81b4e", "html_url": "https://github.com/rust-lang/rust/commit/575fb9ab6a5f3d0dc60a8fc811ba9833f5f81b4e"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "953960e145353a5e8b4e761b82c6af8320d9674b", "filename": "crates/hir/src/attrs.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/748788530962a4095762b82c21756ff4589066b3/crates%2Fhir%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748788530962a4095762b82c21756ff4589066b3/crates%2Fhir%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fattrs.rs?ref=748788530962a4095762b82c21756ff4589066b3", "patch": "@@ -1,3 +1,4 @@\n+//! Attributes & documentation for hir types.\n use hir_def::{\n     attr::Attrs,\n     db::DefDatabase,\n@@ -11,7 +12,6 @@ use stdx::impl_from;\n use crate::{\n     doc_links::Resolvable, Adt, Const, Enum, EnumVariant, Field, Function, GenericDef, ImplDef,\n     Local, MacroDef, Module, ModuleDef, Static, Struct, Trait, TypeAlias, TypeParam, Union,\n-    VariantDef,\n };\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n@@ -83,7 +83,7 @@ impl Resolvable for ModuleDef {\n \n impl Resolvable for TypeParam {\n     fn resolver<D: DefDatabase + HirDatabase>(&self, db: &D) -> Option<Resolver> {\n-        Some(Into::<ModuleId>::into(self.module(db)).resolver(db))\n+        Some(ModuleId::from(self.module(db)).resolver(db))\n     }\n \n     fn try_into_module_def(self) -> Option<ModuleDef> {\n@@ -93,7 +93,7 @@ impl Resolvable for TypeParam {\n \n impl Resolvable for MacroDef {\n     fn resolver<D: DefDatabase + HirDatabase>(&self, db: &D) -> Option<Resolver> {\n-        Some(Into::<ModuleId>::into(self.module(db)?).resolver(db))\n+        Some(ModuleId::from(self.module(db)?).resolver(db))\n     }\n \n     fn try_into_module_def(self) -> Option<ModuleDef> {\n@@ -103,7 +103,7 @@ impl Resolvable for MacroDef {\n \n impl Resolvable for Field {\n     fn resolver<D: DefDatabase + HirDatabase>(&self, db: &D) -> Option<Resolver> {\n-        Some(Into::<VariantId>::into(Into::<VariantDef>::into(self.parent_def(db))).resolver(db))\n+        Some(VariantId::from(self.parent_def(db)).resolver(db))\n     }\n \n     fn try_into_module_def(self) -> Option<ModuleDef> {\n@@ -113,7 +113,7 @@ impl Resolvable for Field {\n \n impl Resolvable for ImplDef {\n     fn resolver<D: DefDatabase + HirDatabase>(&self, db: &D) -> Option<Resolver> {\n-        Some(Into::<ModuleId>::into(self.module(db)).resolver(db))\n+        Some(ModuleId::from(self.module(db)).resolver(db))\n     }\n \n     fn try_into_module_def(self) -> Option<ModuleDef> {\n@@ -123,7 +123,7 @@ impl Resolvable for ImplDef {\n \n impl Resolvable for Local {\n     fn resolver<D: DefDatabase + HirDatabase>(&self, db: &D) -> Option<Resolver> {\n-        Some(Into::<ModuleId>::into(self.module(db)).resolver(db))\n+        Some(ModuleId::from(self.module(db)).resolver(db))\n     }\n \n     fn try_into_module_def(self) -> Option<ModuleDef> {"}]}