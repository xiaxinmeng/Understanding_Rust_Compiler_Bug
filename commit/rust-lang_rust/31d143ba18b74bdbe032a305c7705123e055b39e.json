{"sha": "31d143ba18b74bdbe032a305c7705123e055b39e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxZDE0M2JhMThiNzRiZGJlMDMyYTMwNWM3NzA1MTIzZTA1NWIzOWU=", "commit": {"author": {"name": "Jeff Muizelaar", "email": "jrmuizel@gmail.com", "date": "2019-02-02T17:11:12Z"}, "committer": {"name": "Jeff Muizelaar", "email": "jrmuizel@gmail.com", "date": "2019-02-03T03:39:13Z"}, "message": "Fix macro_rules separator parsing.\n\nmacro_rules rules are separated by ';' including an optional ';' at the\nend", "tree": {"sha": "00b4393d1e4caa2c77ee2f3492553d3a6bd01c62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00b4393d1e4caa2c77ee2f3492553d3a6bd01c62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31d143ba18b74bdbe032a305c7705123e055b39e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31d143ba18b74bdbe032a305c7705123e055b39e", "html_url": "https://github.com/rust-lang/rust/commit/31d143ba18b74bdbe032a305c7705123e055b39e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31d143ba18b74bdbe032a305c7705123e055b39e/comments", "author": {"login": "jrmuizel", "id": 332653, "node_id": "MDQ6VXNlcjMzMjY1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/332653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrmuizel", "html_url": "https://github.com/jrmuizel", "followers_url": "https://api.github.com/users/jrmuizel/followers", "following_url": "https://api.github.com/users/jrmuizel/following{/other_user}", "gists_url": "https://api.github.com/users/jrmuizel/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrmuizel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrmuizel/subscriptions", "organizations_url": "https://api.github.com/users/jrmuizel/orgs", "repos_url": "https://api.github.com/users/jrmuizel/repos", "events_url": "https://api.github.com/users/jrmuizel/events{/privacy}", "received_events_url": "https://api.github.com/users/jrmuizel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jrmuizel", "id": 332653, "node_id": "MDQ6VXNlcjMzMjY1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/332653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrmuizel", "html_url": "https://github.com/jrmuizel", "followers_url": "https://api.github.com/users/jrmuizel/followers", "following_url": "https://api.github.com/users/jrmuizel/following{/other_user}", "gists_url": "https://api.github.com/users/jrmuizel/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrmuizel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrmuizel/subscriptions", "organizations_url": "https://api.github.com/users/jrmuizel/orgs", "repos_url": "https://api.github.com/users/jrmuizel/repos", "events_url": "https://api.github.com/users/jrmuizel/events{/privacy}", "received_events_url": "https://api.github.com/users/jrmuizel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c0ab7db85d2084870db4a2f92d92a3ae67a3bb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c0ab7db85d2084870db4a2f92d92a3ae67a3bb1", "html_url": "https://github.com/rust-lang/rust/commit/4c0ab7db85d2084870db4a2f92d92a3ae67a3bb1"}], "stats": {"total": 50, "additions": 49, "deletions": 1}, "files": [{"sha": "bafa301eafbd46ff6ad2acdb961c382aa151e5f5", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/31d143ba18b74bdbe032a305c7705123e055b39e/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d143ba18b74bdbe032a305c7705123e055b39e/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=31d143ba18b74bdbe032a305c7705123e055b39e", "patch": "@@ -160,4 +160,46 @@ impl_froms!(TokenTree: Leaf, Subtree);\n          impl From < Subtree > for TokenTree {fn from (it : Subtree) -> TokenTree {TokenTree :: Subtree (it)}}\"\n     )\n     }\n+\n+    #[test]\n+    fn test_fail_match_pattern_by_token() {\n+        let macro_definition = r#\"\n+        macro_rules! foo {\n+            ($ i:ident) => (\n+                mod $ i {}\n+            );\n+            (= $ i:ident) => (\n+                fn $ i() {}\n+            );\n+            (+ $ i:ident) => (\n+                struct $ i;\n+            )\n+        }\n+\"#;\n+\n+        let macro_invocation = r#\"\n+foo! {   foo }\n+\"#;\n+\n+        let source_file = ast::SourceFile::parse(macro_definition);\n+        let macro_definition = source_file\n+            .syntax()\n+            .descendants()\n+            .find_map(ast::MacroCall::cast)\n+            .unwrap();\n+\n+        let source_file = ast::SourceFile::parse(macro_invocation);\n+        let macro_invocation = source_file\n+            .syntax()\n+            .descendants()\n+            .find_map(ast::MacroCall::cast)\n+            .unwrap();\n+\n+        let definition_tt = ast_to_token_tree(macro_definition.token_tree().unwrap()).unwrap();\n+        let invocation_tt = ast_to_token_tree(macro_invocation.token_tree().unwrap()).unwrap();\n+        let rules = crate::MacroRules::parse(&definition_tt).unwrap();\n+        let expansion = rules.expand(&invocation_tt).unwrap();\n+        assert_eq!(expansion.to_string(), \"mod foo {}\")\n+    }\n+\n }"}, {"sha": "abad2e8c80d01dfec1ff6489dc8ca00907a21187", "filename": "crates/ra_mbe/src/mbe_parser.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31d143ba18b74bdbe032a305c7705123e055b39e/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d143ba18b74bdbe032a305c7705123e055b39e/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs?ref=31d143ba18b74bdbe032a305c7705123e055b39e", "patch": "@@ -7,7 +7,13 @@ pub(crate) fn parse(tt: &tt::Subtree) -> Option<crate::MacroRules> {\n     let mut parser = TtCursor::new(tt);\n     let mut rules = Vec::new();\n     while !parser.is_eof() {\n-        rules.push(parse_rule(&mut parser)?)\n+        rules.push(parse_rule(&mut parser)?);\n+        if parser.expect_char(';') == None {\n+            if !parser.is_eof() {\n+                return None;\n+            }\n+            break;\n+        }\n     }\n     Some(crate::MacroRules { rules })\n }"}]}