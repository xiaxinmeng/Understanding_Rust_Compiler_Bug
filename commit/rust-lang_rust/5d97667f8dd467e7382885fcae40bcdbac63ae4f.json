{"sha": "5d97667f8dd467e7382885fcae40bcdbac63ae4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkOTc2NjdmOGRkNDY3ZTczODI4ODVmY2FlNDBiY2RiYWM2M2FlNGY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-24T16:05:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-24T16:05:16Z"}, "message": "Merge #4105\n\n4105: Adds attribute completions (#3941) r=matklad a=jrvidal\n\nI've hacked together some basic completions for a few builtin attributes.\r\n\r\n* I have no idea what `CompletionItemKind` we should set for them.\r\n* There's plenty of fancy stuff we could do by detecting the item the attribute is being added to. Nothing of that here.\r\n* Maybe we could complete as soon as you type `#` or `#!`?\r\n\r\nI'm not sure what info exactly we can dump on `CompletionContext` and what we should query during the completion calculation itself. I've assumed adding an `is_attribute` field is OK, since it allows to discard the completion quickly if it doesn't apply. Later we inspect the AST to find out whether it is an inner attribute or not.\n\nCo-authored-by: Roberto Vidal <vidal.roberto.j@gmail.com>", "tree": {"sha": "5fd1a5271033937b50f78bcbb1b62a3ade027d33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fd1a5271033937b50f78bcbb1b62a3ade027d33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d97667f8dd467e7382885fcae40bcdbac63ae4f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeow48CRBK7hj4Ov3rIwAAdHIIACpCV/knERJafxGxLPzBsHEU\nxJLIWcUHUXOzW5eEb7JiDmLgdLHOYSYwgx7B+edl69Ab37FPFYySSk9HGZhueqqj\n57C07cNa3t7gLoNHANMPGM2kla+NOZlcRk5kA0dWD1gGjCLTxXNidMcsFLTQ8pJC\nKWs7CKwbpZfXkD8UWxVxNxHlcfUQ2UsGZiGeh5x6pjo7YSZMDmU0kVavDjYMKqye\ntkaC7t35uTRZDH+3fR2C6HSvJn7oCJHKK3a2IdP883lOKJmpnL9iDr6wYzcnLKQC\nEF444U0TZ1k8UkdpR0KPZD563qARKXyVWUr+Atq2l7aXIaV/tX8CULjZORFbd8c=\n=4y04\n-----END PGP SIGNATURE-----\n", "payload": "tree 5fd1a5271033937b50f78bcbb1b62a3ade027d33\nparent edd6f91cab77c4fabf449a50f4f65e4761c98ca4\nparent 0dab5d58790d46e28d738c0d1d96e833a61495a1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1587744316 +0000\ncommitter GitHub <noreply@github.com> 1587744316 +0000\n\nMerge #4105\n\n4105: Adds attribute completions (#3941) r=matklad a=jrvidal\n\nI've hacked together some basic completions for a few builtin attributes.\r\n\r\n* I have no idea what `CompletionItemKind` we should set for them.\r\n* There's plenty of fancy stuff we could do by detecting the item the attribute is being added to. Nothing of that here.\r\n* Maybe we could complete as soon as you type `#` or `#!`?\r\n\r\nI'm not sure what info exactly we can dump on `CompletionContext` and what we should query during the completion calculation itself. I've assumed adding an `is_attribute` field is OK, since it allows to discard the completion quickly if it doesn't apply. Later we inspect the AST to find out whether it is an inner attribute or not.\n\nCo-authored-by: Roberto Vidal <vidal.roberto.j@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d97667f8dd467e7382885fcae40bcdbac63ae4f", "html_url": "https://github.com/rust-lang/rust/commit/5d97667f8dd467e7382885fcae40bcdbac63ae4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d97667f8dd467e7382885fcae40bcdbac63ae4f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edd6f91cab77c4fabf449a50f4f65e4761c98ca4", "url": "https://api.github.com/repos/rust-lang/rust/commits/edd6f91cab77c4fabf449a50f4f65e4761c98ca4", "html_url": "https://github.com/rust-lang/rust/commit/edd6f91cab77c4fabf449a50f4f65e4761c98ca4"}, {"sha": "0dab5d58790d46e28d738c0d1d96e833a61495a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dab5d58790d46e28d738c0d1d96e833a61495a1", "html_url": "https://github.com/rust-lang/rust/commit/0dab5d58790d46e28d738c0d1d96e833a61495a1"}], "stats": {"total": 595, "additions": 595, "deletions": 0}, "files": [{"sha": "4ca0fdf4fbfecf57e2ebc7983495b9d74ee0cdd5", "filename": "crates/ra_ide/src/completion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d97667f8dd467e7382885fcae40bcdbac63ae4f/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d97667f8dd467e7382885fcae40bcdbac63ae4f/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion.rs?ref=5d97667f8dd467e7382885fcae40bcdbac63ae4f", "patch": "@@ -5,6 +5,7 @@ mod completion_item;\n mod completion_context;\n mod presentation;\n \n+mod complete_attribute;\n mod complete_dot;\n mod complete_record;\n mod complete_pattern;\n@@ -78,6 +79,7 @@ pub(crate) fn completions(\n     complete_postfix::complete_postfix(&mut acc, &ctx);\n     complete_macro_in_item_position::complete_macro_in_item_position(&mut acc, &ctx);\n     complete_trait_impl::complete_trait_impl(&mut acc, &ctx);\n+    complete_attribute::complete_attribute(&mut acc, &ctx);\n \n     Some(acc)\n }"}, {"sha": "b405042e88ecbf7df38b7756100f2665dc38fa3f", "filename": "crates/ra_ide/src/completion/complete_attribute.rs", "status": "added", "additions": 587, "deletions": 0, "changes": 587, "blob_url": "https://github.com/rust-lang/rust/blob/5d97667f8dd467e7382885fcae40bcdbac63ae4f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d97667f8dd467e7382885fcae40bcdbac63ae4f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs?ref=5d97667f8dd467e7382885fcae40bcdbac63ae4f", "patch": "@@ -0,0 +1,587 @@\n+//! Completion for attributes\n+//!\n+//! This module uses a bit of static metadata to provide completions\n+//! for built-in attributes.\n+\n+use super::completion_context::CompletionContext;\n+use super::completion_item::{CompletionItem, CompletionItemKind, CompletionKind, Completions};\n+use ra_syntax::{\n+    ast::{Attr, AttrKind},\n+    AstNode,\n+};\n+\n+pub(super) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext) {\n+    if !ctx.is_attribute {\n+        return;\n+    }\n+\n+    let is_inner = ctx\n+        .original_token\n+        .ancestors()\n+        .find_map(Attr::cast)\n+        .map(|attr| attr.kind() == AttrKind::Inner)\n+        .unwrap_or(false);\n+\n+    for attr_completion in ATTRIBUTES {\n+        let mut item = CompletionItem::new(\n+            CompletionKind::Attribute,\n+            ctx.source_range(),\n+            attr_completion.label,\n+        )\n+        .kind(CompletionItemKind::Attribute);\n+\n+        match (attr_completion.snippet, ctx.config.snippet_cap) {\n+            (Some(snippet), Some(cap)) => {\n+                item = item.insert_snippet(cap, snippet);\n+            }\n+            _ => {}\n+        }\n+\n+        if is_inner || !attr_completion.should_be_inner {\n+            acc.add(item);\n+        }\n+    }\n+}\n+\n+struct AttrCompletion {\n+    label: &'static str,\n+    snippet: Option<&'static str>,\n+    should_be_inner: bool,\n+}\n+\n+const ATTRIBUTES: &[AttrCompletion] = &[\n+    AttrCompletion { label: \"allow\", snippet: Some(\"allow(${0:lint})\"), should_be_inner: false },\n+    AttrCompletion {\n+        label: \"cfg_attr\",\n+        snippet: Some(\"cfg_attr(${1:predicate}, ${0:attr})\"),\n+        should_be_inner: false,\n+    },\n+    AttrCompletion { label: \"cfg\", snippet: Some(\"cfg(${0:predicate})\"), should_be_inner: false },\n+    AttrCompletion { label: \"deny\", snippet: Some(\"deny(${0:lint})\"), should_be_inner: false },\n+    AttrCompletion {\n+        label: \"deprecated\",\n+        snippet: Some(r#\"deprecated = \"${0:reason}\"\"#),\n+        should_be_inner: false,\n+    },\n+    AttrCompletion {\n+        label: \"derive\",\n+        snippet: Some(r#\"derive(${0:Debug})\"#),\n+        should_be_inner: false,\n+    },\n+    AttrCompletion { label: \"doc\", snippet: Some(r#\"doc = \"${0:docs}\"\"#), should_be_inner: false },\n+    AttrCompletion { label: \"feature\", snippet: Some(\"feature(${0:flag})\"), should_be_inner: true },\n+    AttrCompletion { label: \"forbid\", snippet: Some(\"forbid(${0:lint})\"), should_be_inner: false },\n+    // FIXME: resolve through macro resolution?\n+    AttrCompletion { label: \"global_allocator\", snippet: None, should_be_inner: true },\n+    AttrCompletion { label: \"ignore\", snippet: Some(\"ignore(${0:lint})\"), should_be_inner: false },\n+    AttrCompletion { label: \"inline\", snippet: Some(\"inline(${0:lint})\"), should_be_inner: false },\n+    AttrCompletion {\n+        label: \"link_name\",\n+        snippet: Some(r#\"link_name = \"${0:symbol_name}\"\"#),\n+        should_be_inner: false,\n+    },\n+    AttrCompletion { label: \"link\", snippet: None, should_be_inner: false },\n+    AttrCompletion { label: \"macro_export\", snippet: None, should_be_inner: false },\n+    AttrCompletion { label: \"macro_use\", snippet: None, should_be_inner: false },\n+    AttrCompletion {\n+        label: \"must_use\",\n+        snippet: Some(r#\"must_use = \"${0:reason}\"\"#),\n+        should_be_inner: false,\n+    },\n+    AttrCompletion { label: \"no_mangle\", snippet: None, should_be_inner: false },\n+    AttrCompletion { label: \"no_std\", snippet: None, should_be_inner: true },\n+    AttrCompletion { label: \"non_exhaustive\", snippet: None, should_be_inner: false },\n+    AttrCompletion { label: \"panic_handler\", snippet: None, should_be_inner: true },\n+    AttrCompletion { label: \"path\", snippet: Some(\"path =\\\"${0:path}\\\"\"), should_be_inner: false },\n+    AttrCompletion { label: \"proc_macro\", snippet: None, should_be_inner: false },\n+    AttrCompletion { label: \"proc_macro_attribute\", snippet: None, should_be_inner: false },\n+    AttrCompletion {\n+        label: \"proc_macro_derive\",\n+        snippet: Some(\"proc_macro_derive(${0:Trait})\"),\n+        should_be_inner: false,\n+    },\n+    AttrCompletion {\n+        label: \"recursion_limit\",\n+        snippet: Some(\"recursion_limit = ${0:128}\"),\n+        should_be_inner: true,\n+    },\n+    AttrCompletion { label: \"repr\", snippet: Some(\"repr(${0:C})\"), should_be_inner: false },\n+    AttrCompletion {\n+        label: \"should_panic\",\n+        snippet: Some(r#\"expected = \"${0:reason}\"\"#),\n+        should_be_inner: false,\n+    },\n+    AttrCompletion {\n+        label: \"target_feature\",\n+        snippet: Some(\"target_feature = \\\"${0:feature}\\\"\"),\n+        should_be_inner: false,\n+    },\n+    AttrCompletion { label: \"test\", snippet: None, should_be_inner: false },\n+    AttrCompletion { label: \"used\", snippet: None, should_be_inner: false },\n+    AttrCompletion { label: \"warn\", snippet: Some(\"warn(${0:lint})\"), should_be_inner: false },\n+    AttrCompletion {\n+        label: \"windows_subsystem\",\n+        snippet: Some(r#\"windows_subsystem = \"${0:subsystem}\"\"#),\n+        should_be_inner: true,\n+    },\n+];\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::completion::{test_utils::do_completion, CompletionItem, CompletionKind};\n+    use insta::assert_debug_snapshot;\n+\n+    fn do_attr_completion(code: &str) -> Vec<CompletionItem> {\n+        do_completion(code, CompletionKind::Attribute)\n+    }\n+\n+    #[test]\n+    fn test_attribute_completion() {\n+        assert_debug_snapshot!(\n+        do_attr_completion(\n+                r\"\n+                #[<|>]\n+                \",\n+        ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"allow\",\n+                source_range: [19; 19),\n+                delete: [19; 19),\n+                insert: \"allow(${0:lint})\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"cfg\",\n+                source_range: [19; 19),\n+                delete: [19; 19),\n+                insert: \"cfg(${0:predicate})\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"cfg_attr\",\n+                source_range: [19; 19),\n+                delete: [19; 19),\n+                insert: \"cfg_attr(${1:predicate}, ${0:attr})\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"deny\",\n+                source_range: [19; 19),\n+                delete: [19; 19),\n+                insert: \"deny(${0:lint})\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"deprecated\",\n+                source_range: [19; 19),\n+                delete: [19; 19),\n+                insert: \"deprecated = \\\"${0:reason}\\\"\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"derive\",\n+                source_range: [19; 19),\n+                delete: [19; 19),\n+                insert: \"derive(${0:Debug})\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"doc\",\n+                source_range: [19; 19),\n+                delete: [19; 19),\n+                insert: \"doc = \\\"${0:docs}\\\"\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"forbid\",\n+                source_range: [19; 19),\n+                delete: [19; 19),\n+                insert: \"forbid(${0:lint})\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"ignore\",\n+                source_range: [19; 19),\n+                delete: [19; 19),\n+                insert: \"ignore(${0:lint})\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"inline\",\n+                source_range: [19; 19),\n+                delete: [19; 19),\n+                insert: \"inline(${0:lint})\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"link\",\n+                source_range: [19; 19),\n+                delete: [19; 19),\n+                insert: \"link\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"link_name\",\n+                source_range: [19; 19),\n+                delete: [19; 19),\n+                insert: \"link_name = \\\"${0:symbol_name}\\\"\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"macro_export\",\n+                source_range: [19; 19),\n+                delete: [19; 19),\n+                insert: \"macro_export\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"macro_use\",\n+                source_range: [19; 19),\n+                delete: [19; 19),\n+                insert: \"macro_use\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"must_use\",\n+                source_range: [19; 19),\n+                delete: [19; 19),\n+                insert: \"must_use = \\\"${0:reason}\\\"\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"no_mangle\",\n+                source_range: [19; 19),\n+                delete: [19; 19),\n+                insert: \"no_mangle\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"non_exhaustive\",\n+                source_range: [19; 19),\n+                delete: [19; 19),\n+                insert: \"non_exhaustive\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"path\",\n+                source_range: [19; 19),\n+                delete: [19; 19),\n+                insert: \"path =\\\"${0:path}\\\"\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"proc_macro\",\n+                source_range: [19; 19),\n+                delete: [19; 19),\n+                insert: \"proc_macro\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"proc_macro_attribute\",\n+                source_range: [19; 19),\n+                delete: [19; 19),\n+                insert: \"proc_macro_attribute\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"proc_macro_derive\",\n+                source_range: [19; 19),\n+                delete: [19; 19),\n+                insert: \"proc_macro_derive(${0:Trait})\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"repr\",\n+                source_range: [19; 19),\n+                delete: [19; 19),\n+                insert: \"repr(${0:C})\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"should_panic\",\n+                source_range: [19; 19),\n+                delete: [19; 19),\n+                insert: \"expected = \\\"${0:reason}\\\"\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"target_feature\",\n+                source_range: [19; 19),\n+                delete: [19; 19),\n+                insert: \"target_feature = \\\"${0:feature}\\\"\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"test\",\n+                source_range: [19; 19),\n+                delete: [19; 19),\n+                insert: \"test\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"used\",\n+                source_range: [19; 19),\n+                delete: [19; 19),\n+                insert: \"used\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"warn\",\n+                source_range: [19; 19),\n+                delete: [19; 19),\n+                insert: \"warn(${0:lint})\",\n+                kind: Attribute,\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n+\n+    #[test]\n+    fn test_inner_attribute_completion() {\n+        assert_debug_snapshot!(\n+        do_attr_completion(\n+                r\"\n+                #![<|>]\n+                \",\n+        ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"allow\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"allow(${0:lint})\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"cfg\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"cfg(${0:predicate})\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"cfg_attr\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"cfg_attr(${1:predicate}, ${0:attr})\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"deny\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"deny(${0:lint})\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"deprecated\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"deprecated = \\\"${0:reason}\\\"\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"derive\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"derive(${0:Debug})\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"doc\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"doc = \\\"${0:docs}\\\"\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"feature\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"feature(${0:flag})\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"forbid\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"forbid(${0:lint})\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"global_allocator\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"global_allocator\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"ignore\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"ignore(${0:lint})\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"inline\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"inline(${0:lint})\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"link\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"link\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"link_name\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"link_name = \\\"${0:symbol_name}\\\"\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"macro_export\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"macro_export\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"macro_use\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"macro_use\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"must_use\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"must_use = \\\"${0:reason}\\\"\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"no_mangle\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"no_mangle\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"no_std\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"no_std\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"non_exhaustive\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"non_exhaustive\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"panic_handler\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"panic_handler\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"path\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"path =\\\"${0:path}\\\"\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"proc_macro\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"proc_macro\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"proc_macro_attribute\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"proc_macro_attribute\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"proc_macro_derive\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"proc_macro_derive(${0:Trait})\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"recursion_limit\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"recursion_limit = ${0:128}\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"repr\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"repr(${0:C})\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"should_panic\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"expected = \\\"${0:reason}\\\"\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"target_feature\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"target_feature = \\\"${0:feature}\\\"\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"test\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"test\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"used\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"used\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"warn\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"warn(${0:lint})\",\n+                kind: Attribute,\n+            },\n+            CompletionItem {\n+                label: \"windows_subsystem\",\n+                source_range: [20; 20),\n+                delete: [20; 20),\n+                insert: \"windows_subsystem = \\\"${0:subsystem}\\\"\",\n+                kind: Attribute,\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n+}"}, {"sha": "37880448ad306899f1de9f9319c43f7e4c58ee48", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5d97667f8dd467e7382885fcae40bcdbac63ae4f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d97667f8dd467e7382885fcae40bcdbac63ae4f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=5d97667f8dd467e7382885fcae40bcdbac63ae4f", "patch": "@@ -57,6 +57,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) is_macro_call: bool,\n     pub(super) is_path_type: bool,\n     pub(super) has_type_args: bool,\n+    pub(super) is_attribute: bool,\n }\n \n impl<'a> CompletionContext<'a> {\n@@ -113,6 +114,7 @@ impl<'a> CompletionContext<'a> {\n             is_path_type: false,\n             has_type_args: false,\n             dot_receiver_is_ambiguous_float_literal: false,\n+            is_attribute: false,\n         };\n \n         let mut original_file = original_file.syntax().clone();\n@@ -306,6 +308,7 @@ impl<'a> CompletionContext<'a> {\n                 .and_then(|it| it.syntax().parent().and_then(ast::CallExpr::cast))\n                 .is_some();\n             self.is_macro_call = path.syntax().parent().and_then(ast::MacroCall::cast).is_some();\n+            self.is_attribute = path.syntax().parent().and_then(ast::Attr::cast).is_some();\n \n             self.is_path_type = path.syntax().parent().and_then(ast::PathType::cast).is_some();\n             self.has_type_args = segment.type_arg_list().is_some();"}, {"sha": "5936fb8f7c23d4d81e5388e7f32d2ae35a0abda4", "filename": "crates/ra_ide/src/completion/completion_item.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d97667f8dd467e7382885fcae40bcdbac63ae4f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d97667f8dd467e7382885fcae40bcdbac63ae4f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=5d97667f8dd467e7382885fcae40bcdbac63ae4f", "patch": "@@ -121,6 +121,7 @@ pub enum CompletionItemKind {\n     Method,\n     TypeParam,\n     Macro,\n+    Attribute,\n }\n \n #[derive(Debug, PartialEq, Eq, Copy, Clone)]\n@@ -134,6 +135,7 @@ pub(crate) enum CompletionKind {\n     Snippet,\n     Postfix,\n     BuiltinType,\n+    Attribute,\n }\n \n #[derive(Debug, PartialEq, Eq, Copy, Clone)]"}, {"sha": "2285cb1d3dc50da25ff7ee383b6369b07e91eb0c", "filename": "crates/rust-analyzer/src/conv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d97667f8dd467e7382885fcae40bcdbac63ae4f/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d97667f8dd467e7382885fcae40bcdbac63ae4f/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconv.rs?ref=5d97667f8dd467e7382885fcae40bcdbac63ae4f", "patch": "@@ -100,6 +100,7 @@ impl Conv for CompletionItemKind {\n             CompletionItemKind::Method => Method,\n             CompletionItemKind::TypeParam => TypeParameter,\n             CompletionItemKind::Macro => Method,\n+            CompletionItemKind::Attribute => EnumMember,\n         }\n     }\n }"}]}