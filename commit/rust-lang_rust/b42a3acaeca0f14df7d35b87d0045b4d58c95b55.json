{"sha": "b42a3acaeca0f14df7d35b87d0045b4d58c95b55", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MmEzYWNhZWNhMGYxNGRmN2QzNWI4N2QwMDQ1YjRkNThjOTViNTU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-12-22T17:06:20Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-12-23T09:29:38Z"}, "message": "stabilize min_const_unsafe_fn in 1.33.", "tree": {"sha": "247fc7ea243500efc9693c92238721bfe4278f16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/247fc7ea243500efc9693c92238721bfe4278f16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b42a3acaeca0f14df7d35b87d0045b4d58c95b55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b42a3acaeca0f14df7d35b87d0045b4d58c95b55", "html_url": "https://github.com/rust-lang/rust/commit/b42a3acaeca0f14df7d35b87d0045b4d58c95b55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b42a3acaeca0f14df7d35b87d0045b4d58c95b55/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16329b0ad3610b47a97a051df88405b1587238bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/16329b0ad3610b47a97a051df88405b1587238bd", "html_url": "https://github.com/rust-lang/rust/commit/16329b0ad3610b47a97a051df88405b1587238bd"}], "stats": {"total": 249, "additions": 72, "deletions": 177}, "files": [{"sha": "6852e2c69618b302c5ae21d9a1cf79528b1f127d", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b42a3acaeca0f14df7d35b87d0045b4d58c95b55/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b42a3acaeca0f14df7d35b87d0045b4d58c95b55/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=b42a3acaeca0f14df7d35b87d0045b4d58c95b55", "patch": "@@ -47,7 +47,6 @@ impl_stable_hash_for!(enum mir::BorrowKind {\n impl_stable_hash_for!(enum mir::UnsafetyViolationKind {\n     General,\n     GeneralAndConstFn,\n-    GatedConstFnCall,\n     ExternStatic(lint_node_id),\n     BorrowPacked(lint_node_id),\n });"}, {"sha": "120350a573b6e502245daeb0de379e52da60edfe", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b42a3acaeca0f14df7d35b87d0045b4d58c95b55/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b42a3acaeca0f14df7d35b87d0045b4d58c95b55/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=b42a3acaeca0f14df7d35b87d0045b4d58c95b55", "patch": "@@ -2792,9 +2792,6 @@ impl Location {\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub enum UnsafetyViolationKind {\n     General,\n-    /// Right now function calls to `const unsafe fn` are only permitted behind a feature gate\n-    /// Also, even `const unsafe fn` need an `unsafe` block to do the allowed operations.\n-    GatedConstFnCall,\n     /// Permitted in const fn and regular fns\n     GeneralAndConstFn,\n     ExternStatic(ast::NodeId),"}, {"sha": "89d9c03f74e3e9baf40ca5ed5dfc86487f2f62c2", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b42a3acaeca0f14df7d35b87d0045b4d58c95b55/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b42a3acaeca0f14df7d35b87d0045b4d58c95b55/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=b42a3acaeca0f14df7d35b87d0045b4d58c95b55", "patch": "@@ -23,7 +23,6 @@ use rustc::mir::visit::{PlaceContext, Visitor, MutatingUseContext};\n \n use syntax::ast;\n use syntax::symbol::Symbol;\n-use syntax::feature_gate::{emit_feature_err, GateIssue};\n \n use std::ops::Bound;\n \n@@ -97,7 +96,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 if let hir::Unsafety::Unsafe = sig.unsafety() {\n                     self.require_unsafe(\"call to unsafe function\",\n                         \"consult the function's documentation for information on how to avoid \\\n-                         undefined behavior\", UnsafetyViolationKind::GatedConstFnCall)\n+                         undefined behavior\", UnsafetyViolationKind::GeneralAndConstFn)\n                 }\n             }\n         }\n@@ -325,11 +324,6 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                             // compat lint\n                             violation.kind = UnsafetyViolationKind::General;\n                         },\n-                        UnsafetyViolationKind::GatedConstFnCall => {\n-                            // safe code can't call unsafe const fns, this `UnsafetyViolationKind`\n-                            // is only relevant for `Safety::ExplicitUnsafe` in `unsafe const fn`s\n-                            violation.kind = UnsafetyViolationKind::General;\n-                        }\n                     }\n                     if !self.violations.contains(&violation) {\n                         self.violations.push(violation)\n@@ -346,19 +340,8 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                 }\n                 // only some unsafety is allowed in const fn\n                 if self.min_const_fn {\n-                    let min_const_unsafe_fn = self.tcx.features().min_const_unsafe_fn;\n                     for violation in violations {\n                         match violation.kind {\n-                            UnsafetyViolationKind::GatedConstFnCall if min_const_unsafe_fn => {\n-                                // these function calls to unsafe functions are allowed\n-                                // if `#![feature(min_const_unsafe_fn)]` is active\n-                            },\n-                            UnsafetyViolationKind::GatedConstFnCall => {\n-                                // without the feature gate, we report errors\n-                                if !self.violations.contains(&violation) {\n-                                    self.violations.push(violation.clone())\n-                                }\n-                            }\n                             // these unsafe things are stable in const fn\n                             UnsafetyViolationKind::GeneralAndConstFn => {},\n                             // these things are forbidden in const fns\n@@ -620,16 +603,6 @@ pub fn check_unsafety<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n                     .note(&details.as_str()[..])\n                     .emit();\n             }\n-            UnsafetyViolationKind::GatedConstFnCall => {\n-                emit_feature_err(\n-                    &tcx.sess.parse_sess,\n-                    \"min_const_unsafe_fn\",\n-                    source_info.span,\n-                    GateIssue::Language,\n-                    \"calls to `const unsafe fn` in const fns are unstable\",\n-                );\n-\n-            }\n             UnsafetyViolationKind::ExternStatic(lint_node_id) => {\n                 tcx.lint_node_note(SAFE_EXTERN_STATICS,\n                               lint_node_id,"}, {"sha": "99a682832286ed7b63797d230e1be34fd3441746", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b42a3acaeca0f14df7d35b87d0045b4d58c95b55/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b42a3acaeca0f14df7d35b87d0045b4d58c95b55/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=b42a3acaeca0f14df7d35b87d0045b4d58c95b55", "patch": "@@ -273,7 +273,6 @@\n #![feature(libc)]\n #![feature(link_args)]\n #![feature(linkage)]\n-#![cfg_attr(not(stage0), feature(min_const_unsafe_fn))]\n #![feature(needs_panic_runtime)]\n #![feature(never_type)]\n #![feature(nll)]"}, {"sha": "2238e429a58e01a1c077667cf496538cfd6c341c", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b42a3acaeca0f14df7d35b87d0045b4d58c95b55/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b42a3acaeca0f14df7d35b87d0045b4d58c95b55/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=b42a3acaeca0f14df7d35b87d0045b4d58c95b55", "patch": "@@ -486,9 +486,6 @@ declare_features! (\n \n     // `extern crate self as foo;` puts local crate root into extern prelude under name `foo`.\n     (active, extern_crate_self, \"1.31.0\", Some(56409), None),\n-\n-    // Allows calling `const unsafe fn` inside `unsafe` blocks in `const fn` functions.\n-    (active, min_const_unsafe_fn, \"1.31.0\", Some(55607), None),\n );\n \n declare_features! (\n@@ -694,6 +691,8 @@ declare_features! (\n     (accepted, underscore_imports, \"1.33.0\", Some(48216), None),\n     // Allows `#[repr(packed(N))]` attribute on structs.\n     (accepted, repr_packed, \"1.33.0\", Some(33158), None),\n+    // Allows calling `const unsafe fn` inside `unsafe` blocks in `const fn` functions.\n+    (accepted, min_const_unsafe_fn, \"1.33.0\", Some(55607), None),\n );\n \n // If you change this, please modify `src/doc/unstable-book` as well. You must"}, {"sha": "3cd622a33b173afdbed2fb60bd59e4c7eb9aa46c", "filename": "src/test/run-pass-fulldeps/newtype_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b42a3acaeca0f14df7d35b87d0045b4d58c95b55/src%2Ftest%2Frun-pass-fulldeps%2Fnewtype_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b42a3acaeca0f14df7d35b87d0045b4d58c95b55/src%2Ftest%2Frun-pass-fulldeps%2Fnewtype_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fnewtype_index.rs?ref=b42a3acaeca0f14df7d35b87d0045b4d58c95b55", "patch": "@@ -1,4 +1,4 @@\n-#![feature(rustc_attrs, rustc_private, step_trait, min_const_unsafe_fn)]\n+#![feature(rustc_attrs, rustc_private, step_trait)]\n \n #[macro_use] extern crate rustc_data_structures;\n extern crate rustc_serialize;"}, {"sha": "f38fab91de7c4b1a501b2fd122482689ccec36bb", "filename": "src/test/rustdoc/const-display.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b42a3acaeca0f14df7d35b87d0045b4d58c95b55/src%2Ftest%2Frustdoc%2Fconst-display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b42a3acaeca0f14df7d35b87d0045b4d58c95b55/src%2Ftest%2Frustdoc%2Fconst-display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-display.rs?ref=b42a3acaeca0f14df7d35b87d0045b4d58c95b55", "patch": "@@ -15,7 +15,6 @@\n             issue = \"0\")]\n \n #![feature(rustc_const_unstable, const_fn, foo, foo2)]\n-#![feature(min_const_unsafe_fn)]\n #![feature(staged_api)]\n \n // @has 'foo/fn.foo.html' '//pre' 'pub unsafe fn foo() -> u32'"}, {"sha": "da875fe7a6b77ce7618ab6a9721ad94ebbbbd1ff", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe.rs", "status": "modified", "additions": 43, "deletions": 8, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b42a3acaeca0f14df7d35b87d0045b4d58c95b55/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b42a3acaeca0f14df7d35b87d0045b4d58c95b55/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.rs?ref=b42a3acaeca0f14df7d35b87d0045b4d58c95b55", "patch": "@@ -8,27 +8,62 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-min_const_unsafe_fn\n+//------------------------------------------------------------------------------\n+// OK\n+//------------------------------------------------------------------------------\n \n-// ok\n const unsafe fn ret_i32_no_unsafe() -> i32 { 42 }\n const unsafe fn ret_null_ptr_no_unsafe<T>() -> *const T { 0 as *const T }\n const unsafe fn ret_null_mut_ptr_no_unsafe<T>() -> *mut T { 0 as *mut T }\n const fn no_unsafe() { unsafe {} }\n \n-// not ok\n const fn call_unsafe_const_fn() -> i32 {\n-    unsafe { ret_i32_no_unsafe() } //~ ERROR calls to `const unsafe fn` in const fns are unstable\n+    unsafe { ret_i32_no_unsafe() }\n }\n const fn call_unsafe_generic_const_fn() -> *const String {\n     unsafe { ret_null_ptr_no_unsafe::<String>() }\n-    //~^ ERROR calls to `const unsafe fn` in const fns are unstable\n }\n-const fn call_unsafe_generic_cell_const_fn() -> *const Vec<std::cell::Cell<u32>> {\n+const fn call_unsafe_generic_cell_const_fn()\n+    -> *const Vec<std::cell::Cell<u32>>\n+{\n     unsafe { ret_null_mut_ptr_no_unsafe::<Vec<std::cell::Cell<u32>>>() }\n-    //~^ ERROR calls to `const unsafe fn` in const fns\n }\n-const unsafe fn deref_forbidden(x: *mut usize) -> usize { *x }\n+\n+const unsafe fn call_unsafe_const_unsafe_fn() -> i32 {\n+    unsafe { ret_i32_no_unsafe() }\n+}\n+const unsafe fn call_unsafe_generic_const_unsafe_fn() -> *const String {\n+    unsafe { ret_null_ptr_no_unsafe::<String>() }\n+}\n+const unsafe fn call_unsafe_generic_cell_const_unsafe_fn()\n+    -> *const Vec<std::cell::Cell<u32>>\n+{\n+    unsafe { ret_null_mut_ptr_no_unsafe::<Vec<std::cell::Cell<u32>>>() }\n+}\n+\n+const unsafe fn call_unsafe_const_unsafe_fn_immediate() -> i32 {\n+    ret_i32_no_unsafe()\n+}\n+const unsafe fn call_unsafe_generic_const_unsafe_fn_immediate() -> *const String {\n+    ret_null_ptr_no_unsafe::<String>()\n+}\n+const unsafe fn call_unsafe_generic_cell_const_unsafe_fn_immediate()\n+    -> *const Vec<std::cell::Cell<u32>>\n+{\n+    ret_null_mut_ptr_no_unsafe::<Vec<std::cell::Cell<u32>>>()\n+}\n+\n+//------------------------------------------------------------------------------\n+// NOT OK\n+//------------------------------------------------------------------------------\n+\n+const fn bad_const_fn_deref_raw(x: *mut usize) -> &'static usize { unsafe { &*x } } //~ is unsafe\n+//~^ dereferencing raw pointers in constant functions\n+\n+const unsafe fn bad_const_unsafe_deref_raw(x: *mut usize) -> usize { *x }\n+//~^ dereferencing raw pointers in constant functions\n+\n+const unsafe fn bad_const_unsafe_deref_raw_ref(x: *mut usize) -> &'static usize { &*x }\n //~^ dereferencing raw pointers in constant functions\n \n fn main() {}"}, {"sha": "1ce23bc21bb3e534427768209aa7106f141fdfa3", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe.stderr", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b42a3acaeca0f14df7d35b87d0045b4d58c95b55/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b42a3acaeca0f14df7d35b87d0045b4d58c95b55/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.stderr?ref=b42a3acaeca0f14df7d35b87d0045b4d58c95b55", "patch": "@@ -1,43 +1,44 @@\n error[E0658]: dereferencing raw pointers in constant functions is unstable (see issue #51911)\n-  --> $DIR/min_const_fn_unsafe.rs:31:59\n+  --> $DIR/min_const_fn_unsafe.rs:54:77\n    |\n-LL | const unsafe fn deref_forbidden(x: *mut usize) -> usize { *x }\n-   |                                                           ^^\n+LL | const fn bad_const_fn_deref_raw(x: *mut usize) -> &'static usize { unsafe { &*x } } //~ is unsafe\n+   |                                                                             ^^^\n    |\n    = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n \n-error[E0658]: unions in const fn are unstable (see issue #51909)\n-  --> $DIR/min_const_fn_unsafe.rs:38:5\n+error[E0658]: dereferencing raw pointers in constant functions is unstable (see issue #51911)\n+  --> $DIR/min_const_fn_unsafe.rs:57:70\n    |\n-LL |     Foo { x: () }.y\n-   |     ^^^^^^^^^^^^^^^\n+LL | const unsafe fn bad_const_unsafe_deref_raw(x: *mut usize) -> usize { *x }\n+   |                                                                      ^^\n    |\n-   = help: add #![feature(const_fn_union)] to the crate attributes to enable\n+   = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n \n-error[E0658]: calls to `const unsafe fn` in const fns are unstable (see issue #55607)\n-  --> $DIR/min_const_fn_unsafe.rs:21:14\n+error[E0658]: dereferencing raw pointers in constant functions is unstable (see issue #51911)\n+  --> $DIR/min_const_fn_unsafe.rs:60:83\n    |\n-LL |     unsafe { ret_i32_no_unsafe() } //~ ERROR calls to `const unsafe fn` in const fns are unstable\n-   |              ^^^^^^^^^^^^^^^^^^^\n+LL | const unsafe fn bad_const_unsafe_deref_raw_ref(x: *mut usize) -> &'static usize { &*x }\n+   |                                                                                   ^^^\n    |\n-   = help: add #![feature(min_const_unsafe_fn)] to the crate attributes to enable\n+   = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n \n-error[E0658]: calls to `const unsafe fn` in const fns are unstable (see issue #55607)\n-  --> $DIR/min_const_fn_unsafe.rs:24:14\n+error[E0658]: unions in const fn are unstable (see issue #51909)\n+  --> $DIR/min_const_fn_unsafe.rs:67:5\n    |\n-LL |     unsafe { ret_null_ptr_no_unsafe::<String>() }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     Foo { x: () }.y\n+   |     ^^^^^^^^^^^^^^^\n    |\n-   = help: add #![feature(min_const_unsafe_fn)] to the crate attributes to enable\n+   = help: add #![feature(const_fn_union)] to the crate attributes to enable\n \n-error[E0658]: calls to `const unsafe fn` in const fns are unstable (see issue #55607)\n-  --> $DIR/min_const_fn_unsafe.rs:28:14\n+error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n+  --> $DIR/min_const_fn_unsafe.rs:54:77\n    |\n-LL |     unsafe { ret_null_mut_ptr_no_unsafe::<Vec<std::cell::Cell<u32>>>() }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | const fn bad_const_fn_deref_raw(x: *mut usize) -> &'static usize { unsafe { &*x } } //~ is unsafe\n+   |                                                                             ^^^ dereference of raw pointer\n    |\n-   = help: add #![feature(min_const_unsafe_fn)] to the crate attributes to enable\n+   = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors occurred: E0133, E0658.\n+For more information about an error, try `rustc --explain E0133`."}, {"sha": "67a48206126421f973e497d0c1ad2eae03dda04b", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe_feature_gate.rs", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_feature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_feature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_feature_gate.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -1,61 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(min_const_unsafe_fn)]\n-\n-// ok\n-const unsafe fn foo4() -> i32 { 42 }\n-const unsafe fn foo5<T>() -> *const T { 0 as *const T }\n-const unsafe fn foo6<T>() -> *mut T { 0 as *mut T }\n-const fn no_unsafe() { unsafe {} }\n-\n-const fn foo8() -> i32 {\n-    unsafe { foo4() }\n-}\n-const fn foo9() -> *const String {\n-    unsafe { foo5::<String>() }\n-}\n-const fn foo10() -> *const Vec<std::cell::Cell<u32>> {\n-    unsafe { foo6::<Vec<std::cell::Cell<u32>>>() }\n-}\n-const unsafe fn foo8_3() -> i32 {\n-    unsafe { foo4() }\n-}\n-const unsafe fn foo9_3() -> *const String {\n-    unsafe { foo5::<String>() }\n-}\n-const unsafe fn foo10_3() -> *const Vec<std::cell::Cell<u32>> {\n-    unsafe { foo6::<Vec<std::cell::Cell<u32>>>() }\n-}\n-const unsafe fn foo8_2() -> i32 {\n-    foo4()\n-}\n-const unsafe fn foo9_2() -> *const String {\n-    foo5::<String>()\n-}\n-const unsafe fn foo10_2() -> *const Vec<std::cell::Cell<u32>> {\n-    foo6::<Vec<std::cell::Cell<u32>>>()\n-}\n-const unsafe fn foo30_3(x: *mut usize) -> usize { *x }\n-//~^ dereferencing raw pointers in constant functions\n-\n-const unsafe fn foo30_4(x: *mut usize) -> &'static usize { &*x }\n-//~^ dereferencing raw pointers in constant functions\n-\n-const fn foo30_5(x: *mut usize) -> &'static usize { unsafe { &*x } } //~ is unsafe\n-//~^ dereferencing raw pointers in constant functions\n-\n-fn main() {}\n-\n-const unsafe fn no_union() {\n-    union Foo { x: (), y: () }\n-    Foo { x: () }.y\n-    //~^ unions in const fn\n-}"}, {"sha": "63bf9a53e509cc7a908b2813d23c5d92b00bbdd8", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe_feature_gate.stderr", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_feature_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_feature_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_feature_gate.stderr?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -1,44 +0,0 @@\n-error[E0658]: dereferencing raw pointers in constant functions is unstable (see issue #51911)\n-  --> $DIR/min_const_fn_unsafe_feature_gate.rs:46:51\n-   |\n-LL | const unsafe fn foo30_3(x: *mut usize) -> usize { *x }\n-   |                                                   ^^\n-   |\n-   = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n-\n-error[E0658]: dereferencing raw pointers in constant functions is unstable (see issue #51911)\n-  --> $DIR/min_const_fn_unsafe_feature_gate.rs:49:60\n-   |\n-LL | const unsafe fn foo30_4(x: *mut usize) -> &'static usize { &*x }\n-   |                                                            ^^^\n-   |\n-   = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n-\n-error[E0658]: dereferencing raw pointers in constant functions is unstable (see issue #51911)\n-  --> $DIR/min_const_fn_unsafe_feature_gate.rs:52:62\n-   |\n-LL | const fn foo30_5(x: *mut usize) -> &'static usize { unsafe { &*x } } //~ is unsafe\n-   |                                                              ^^^\n-   |\n-   = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n-\n-error[E0658]: unions in const fn are unstable (see issue #51909)\n-  --> $DIR/min_const_fn_unsafe_feature_gate.rs:59:5\n-   |\n-LL |     Foo { x: () }.y\n-   |     ^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(const_fn_union)] to the crate attributes to enable\n-\n-error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n-  --> $DIR/min_const_fn_unsafe_feature_gate.rs:52:62\n-   |\n-LL | const fn foo30_5(x: *mut usize) -> &'static usize { unsafe { &*x } } //~ is unsafe\n-   |                                                              ^^^ dereference of raw pointer\n-   |\n-   = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n-\n-error: aborting due to 5 previous errors\n-\n-Some errors occurred: E0133, E0658.\n-For more information about an error, try `rustc --explain E0133`."}, {"sha": "33fcea9818959f3c5ffecc5dd5c5c1004ce535e3", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b42a3acaeca0f14df7d35b87d0045b4d58c95b55/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b42a3acaeca0f14df7d35b87d0045b4d58c95b55/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.rs?ref=b42a3acaeca0f14df7d35b87d0045b4d58c95b55", "patch": "@@ -14,7 +14,6 @@\n             issue = \"0\")]\n \n #![feature(rustc_const_unstable, const_fn, foo, foo2)]\n-#![feature(min_const_unsafe_fn)]\n #![feature(staged_api)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "68205edd63bc9f2bfc1b72c25c03de276c0f817b", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b42a3acaeca0f14df7d35b87d0045b4d58c95b55/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b42a3acaeca0f14df7d35b87d0045b4d58c95b55/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.rs?ref=b42a3acaeca0f14df7d35b87d0045b4d58c95b55", "patch": "@@ -14,7 +14,6 @@\n             issue = \"0\")]\n \n #![feature(rustc_const_unstable, const_fn, foo, foo2)]\n-#![feature(min_const_unsafe_fn)]\n #![feature(staged_api)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}