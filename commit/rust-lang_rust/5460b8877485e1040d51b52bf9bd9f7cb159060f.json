{"sha": "5460b8877485e1040d51b52bf9bd9f7cb159060f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NjBiODg3NzQ4NWUxMDQwZDUxYjUyYmY5YmQ5ZjdjYjE1OTA2MGY=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-02-07T03:13:14Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-03-07T00:58:03Z"}, "message": "Remove export_name query\n\nPart of #47320", "tree": {"sha": "b7762f2cd44386acb5510fcad16a64a7fec548f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7762f2cd44386acb5510fcad16a64a7fec548f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5460b8877485e1040d51b52bf9bd9f7cb159060f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5460b8877485e1040d51b52bf9bd9f7cb159060f", "html_url": "https://github.com/rust-lang/rust/commit/5460b8877485e1040d51b52bf9bd9f7cb159060f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5460b8877485e1040d51b52bf9bd9f7cb159060f/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97b30f096154970dc7fbc86543140f7c21a4912a", "url": "https://api.github.com/repos/rust-lang/rust/commits/97b30f096154970dc7fbc86543140f7c21a4912a", "html_url": "https://github.com/rust-lang/rust/commit/97b30f096154970dc7fbc86543140f7c21a4912a"}], "stats": {"total": 102, "additions": 38, "deletions": 64}, "files": [{"sha": "d50776b606247be5dcae6460f849978df1221987", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5460b8877485e1040d51b52bf9bd9f7cb159060f/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5460b8877485e1040d51b52bf9bd9f7cb159060f/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=5460b8877485e1040d51b52bf9bd9f7cb159060f", "patch": "@@ -627,7 +627,6 @@ define_dep_nodes!( <'tcx>\n     [input] AllCrateNums,\n     [] ExportedSymbols(CrateNum),\n     [eval_always] CollectAndPartitionTranslationItems,\n-    [] ExportName(DefId),\n     [] ContainsExternIndicator(DefId),\n     [] IsTranslatedItem(DefId),\n     [] CodegenUnit(InternedString),"}, {"sha": "c2fbf4df48911c55ac2e17485494da98c024d35a", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5460b8877485e1040d51b52bf9bd9f7cb159060f/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5460b8877485e1040d51b52bf9bd9f7cb159060f/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=5460b8877485e1040d51b52bf9bd9f7cb159060f", "patch": "@@ -2216,6 +2216,7 @@ pub fn provide(providers: &mut Providers) {\n pub struct TransFnAttrs {\n     pub flags: TransFnAttrFlags,\n     pub inline: InlineAttr,\n+    pub export_name: Option<Symbol>,\n }\n \n bitflags! {\n@@ -2234,6 +2235,7 @@ impl TransFnAttrs {\n         TransFnAttrs {\n             flags: TransFnAttrFlags::empty(),\n             inline: InlineAttr::None,\n+            export_name: None,\n         }\n     }\n "}, {"sha": "75c3f8ef28a82bc8de6c99598ab9af93e81dbcd1", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5460b8877485e1040d51b52bf9bd9f7cb159060f/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5460b8877485e1040d51b52bf9bd9f7cb159060f/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=5460b8877485e1040d51b52bf9bd9f7cb159060f", "patch": "@@ -1147,10 +1147,12 @@ impl<'hir> HashStable<StableHashingContext<'hir>> for hir::TransFnAttrs\n         let hir::TransFnAttrs {\n             flags,\n             inline,\n+            export_name,\n         } = *self;\n \n         flags.hash_stable(hcx, hasher);\n         inline.hash_stable(hcx, hasher);\n+        export_name.hash_stable(hcx, hasher);\n     }\n }\n "}, {"sha": "3a8dddaec114ae267377d9af2af7e1d6552d0874", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5460b8877485e1040d51b52bf9bd9f7cb159060f/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5460b8877485e1040d51b52bf9bd9f7cb159060f/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=5460b8877485e1040d51b52bf9bd9f7cb159060f", "patch": "@@ -363,7 +363,6 @@ define_maps! { <'tcx>\n     [] fn collect_and_partition_translation_items:\n         collect_and_partition_translation_items_node(CrateNum)\n         -> (Arc<DefIdSet>, Arc<Vec<Arc<CodegenUnit<'tcx>>>>),\n-    [] fn export_name: ExportName(DefId) -> Option<Symbol>,\n     [] fn contains_extern_indicator: ContainsExternIndicator(DefId) -> bool,\n     [] fn symbol_export_level: GetSymbolExportLevel(DefId) -> SymbolExportLevel,\n     [] fn is_translated_item: IsTranslatedItem(DefId) -> bool,"}, {"sha": "3c70257be71b678d042a6eaa843998aa4d9a0030", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5460b8877485e1040d51b52bf9bd9f7cb159060f/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5460b8877485e1040d51b52bf9bd9f7cb159060f/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=5460b8877485e1040d51b52bf9bd9f7cb159060f", "patch": "@@ -926,7 +926,6 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::CollectAndPartitionTranslationItems => {\n             force!(collect_and_partition_translation_items, LOCAL_CRATE);\n         }\n-        DepKind::ExportName => { force!(export_name, def_id!()); }\n         DepKind::ContainsExternIndicator => {\n             force!(contains_extern_indicator, def_id!());\n         }"}, {"sha": "13fa15faf4123048174da692bd8aa276b75a7a26", "filename": "src/librustc_trans_utils/diagnostics.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/97b30f096154970dc7fbc86543140f7c21a4912a/src%2Flibrustc_trans_utils%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97b30f096154970dc7fbc86543140f7c21a4912a/src%2Flibrustc_trans_utils%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Fdiagnostics.rs?ref=97b30f096154970dc7fbc86543140f7c21a4912a", "patch": "@@ -1,38 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(non_snake_case)]\n-\n-register_long_diagnostics! {\n-\n-E0558: r##\"\n-The `export_name` attribute was malformed.\n-\n-Erroneous code example:\n-\n-```ignore (error-emitted-at-codegen-which-cannot-be-handled-by-compile_fail)\n-#[export_name] // error: export_name attribute has invalid format\n-pub fn something() {}\n-\n-fn main() {}\n-```\n-\n-The `export_name` attribute expects a string in order to determine the name of\n-the exported symbol. Example:\n-\n-```\n-#[export_name = \"some_function\"] // ok!\n-pub fn something() {}\n-\n-fn main() {}\n-```\n-\"##,\n-\n-}"}, {"sha": "08265d5f618a5dd2e90a20e6426d1462185697b1", "filename": "src/librustc_trans_utils/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5460b8877485e1040d51b52bf9bd9f7cb159060f/src%2Flibrustc_trans_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5460b8877485e1040d51b52bf9bd9f7cb159060f/src%2Flibrustc_trans_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flib.rs?ref=5460b8877485e1040d51b52bf9bd9f7cb159060f", "patch": "@@ -37,7 +37,6 @@ extern crate rustc;\n extern crate rustc_back;\n extern crate rustc_mir;\n extern crate rustc_incremental;\n-#[macro_use]\n extern crate syntax;\n extern crate syntax_pos;\n extern crate rustc_data_structures;\n@@ -46,7 +45,6 @@ pub extern crate rustc as __rustc;\n \n use rustc::ty::TyCtxt;\n \n-pub mod diagnostics;\n pub mod link;\n pub mod trans_crate;\n pub mod symbol_names;"}, {"sha": "6c96620f7b65cfc0f1a3e424fcfc8a6bc72ab220", "filename": "src/librustc_trans_utils/symbol_names.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5460b8877485e1040d51b52bf9bd9f7cb159060f/src%2Flibrustc_trans_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5460b8877485e1040d51b52bf9bd9f7cb159060f/src%2Flibrustc_trans_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Fsymbol_names.rs?ref=5460b8877485e1040d51b52bf9bd9f7cb159060f", "patch": "@@ -120,27 +120,9 @@ pub fn provide(providers: &mut Providers) {\n         def_symbol_name,\n         symbol_name,\n \n-        export_name: |tcx, id| {\n-            tcx.get_attrs(id).iter().fold(None, |ia, attr| {\n-                if attr.check_name(\"export_name\") {\n-                    if let s @ Some(_) = attr.value_str() {\n-                        s\n-                    } else {\n-                        struct_span_err!(tcx.sess, attr.span, E0558,\n-                                         \"export_name attribute has invalid format\")\n-                            .span_label(attr.span, \"did you mean #[export_name=\\\"*\\\"]?\")\n-                            .emit();\n-                        None\n-                    }\n-                } else {\n-                    ia\n-                }\n-            })\n-        },\n-\n         contains_extern_indicator: |tcx, id| {\n             attr::contains_name(&tcx.get_attrs(id), \"no_mangle\") ||\n-                tcx.export_name(id).is_some()\n+                tcx.trans_fn_attrs(id).export_name.is_some()\n         },\n \n         ..*providers\n@@ -287,7 +269,7 @@ fn compute_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance\n         return tcx.item_name(def_id).to_string();\n     }\n \n-    if let Some(name) = tcx.export_name(def_id) {\n+    if let Some(name) = tcx.trans_fn_attrs(def_id).export_name {\n         // Use provided name\n         return name.to_string();\n     }"}, {"sha": "175729ad19f4c7e729fa914dfe65a96c79e4ee5e", "filename": "src/librustc_trans_utils/trans_crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5460b8877485e1040d51b52bf9bd9f7cb159060f/src%2Flibrustc_trans_utils%2Ftrans_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5460b8877485e1040d51b52bf9bd9f7cb159060f/src%2Flibrustc_trans_utils%2Ftrans_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Ftrans_crate.rs?ref=5460b8877485e1040d51b52bf9bd9f7cb159060f", "patch": "@@ -233,7 +233,6 @@ impl TransCrate for MetadataOnlyTransCrate {\n                 MonoItem::Fn(inst) => {\n                     let def_id = inst.def_id();\n                     if def_id.is_local()  {\n-                        let _ = tcx.export_name(def_id);\n                         let _ = tcx.contains_extern_indicator(def_id);\n                         let _ = inst.def.is_inline(tcx);\n                         let _ = tcx.trans_fn_attrs(def_id);"}, {"sha": "55d77ee27fece098557eaf90dbddad59fca82088", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5460b8877485e1040d51b52bf9bd9f7cb159060f/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5460b8877485e1040d51b52bf9bd9f7cb159060f/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=5460b8877485e1040d51b52bf9bd9f7cb159060f", "patch": "@@ -1777,6 +1777,15 @@ fn trans_fn_attrs<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefId) -> TransFnAt\n                     _ => ia,\n                 }\n             });\n+        } else if attr.check_name(\"export_name\") {\n+            if let s @ Some(_) = attr.value_str() {\n+                trans_fn_attrs.export_name = s;\n+            } else {\n+                struct_span_err!(tcx.sess, attr.span, E0558,\n+                                    \"export_name attribute has invalid format\")\n+                    .span_label(attr.span, \"did you mean #[export_name=\\\"*\\\"]?\")\n+                    .emit();\n+            }\n         }\n     }\n "}, {"sha": "96b2ec745f132266794706278fa2fdf2a48d04eb", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5460b8877485e1040d51b52bf9bd9f7cb159060f/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5460b8877485e1040d51b52bf9bd9f7cb159060f/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=5460b8877485e1040d51b52bf9bd9f7cb159060f", "patch": "@@ -3774,6 +3774,29 @@ For more information about the inline attribute, https:\n read://doc.rust-lang.org/reference.html#inline-attributes\n \"##,\n \n+E0558: r##\"\n+The `export_name` attribute was malformed.\n+\n+Erroneous code example:\n+\n+```ignore (error-emitted-at-codegen-which-cannot-be-handled-by-compile_fail)\n+#[export_name] // error: export_name attribute has invalid format\n+pub fn something() {}\n+\n+fn main() {}\n+```\n+\n+The `export_name` attribute expects a string in order to determine the name of\n+the exported symbol. Example:\n+\n+```\n+#[export_name = \"some_function\"] // ok!\n+pub fn something() {}\n+\n+fn main() {}\n+```\n+\"##,\n+\n E0559: r##\"\n An unknown field was specified into an enum's structure variant.\n "}]}