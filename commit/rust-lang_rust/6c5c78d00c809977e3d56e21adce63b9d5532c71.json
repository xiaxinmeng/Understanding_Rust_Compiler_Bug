{"sha": "6c5c78d00c809977e3d56e21adce63b9d5532c71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNWM3OGQwMGM4MDk5NzdlM2Q1NmUyMWFkY2U2M2I5ZDU1MzJjNzE=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-06-21T18:32:58Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-06-23T13:10:26Z"}, "message": "Collect features only once", "tree": {"sha": "c62454283bbe10e11b76c8a2d163f1878855a99a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c62454283bbe10e11b76c8a2d163f1878855a99a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c5c78d00c809977e3d56e21adce63b9d5532c71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c5c78d00c809977e3d56e21adce63b9d5532c71", "html_url": "https://github.com/rust-lang/rust/commit/6c5c78d00c809977e3d56e21adce63b9d5532c71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c5c78d00c809977e3d56e21adce63b9d5532c71/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebbc662f079ab222838e1f2f394b29022f9372a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebbc662f079ab222838e1f2f394b29022f9372a0", "html_url": "https://github.com/rust-lang/rust/commit/ebbc662f079ab222838e1f2f394b29022f9372a0"}], "stats": {"total": 88, "additions": 51, "deletions": 37}, "files": [{"sha": "4bd89f6f0bf22a846c01209e2a734e219d1ec3d2", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 33, "deletions": 28, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/6c5c78d00c809977e3d56e21adce63b9d5532c71/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5c78d00c809977e3d56e21adce63b9d5532c71/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=6c5c78d00c809977e3d56e21adce63b9d5532c71", "patch": "@@ -50,7 +50,36 @@ pub struct Feature {\n \n pub type Features = HashMap<String, Feature>;\n \n-pub fn check(path: &Path, bad: &mut bool, verbose: bool) {\n+pub struct CollectedFeatures {\n+    pub lib: Features,\n+    pub lang: Features,\n+}\n+\n+// Currently only used for unstable book generation\n+pub fn collect_lib_features(base_src_path: &Path) -> Features {\n+    let mut lib_features = Features::new();\n+\n+    // This library feature is defined in the `compiler_builtins` crate, which\n+    // has been moved out-of-tree. Now it can no longer be auto-discovered by\n+    // `tidy`, because we need to filter out its (submodule) directory. Manually\n+    // add it to the set of known library features so we can still generate docs.\n+    lib_features.insert(\"compiler_builtins_lib\".to_owned(), Feature {\n+        level: Status::Unstable,\n+        since: None,\n+        has_gate_test: false,\n+        tracking_issue: None,\n+    });\n+\n+    map_lib_features(base_src_path,\n+                     &mut |res, _, _| {\n+        if let Ok((name, feature)) = res {\n+            lib_features.insert(name.to_owned(), feature);\n+        }\n+    });\n+   lib_features\n+}\n+\n+pub fn check(path: &Path, bad: &mut bool, verbose: bool) -> CollectedFeatures {\n     let mut features = collect_lang_features(path, bad);\n     assert!(!features.is_empty());\n \n@@ -125,7 +154,7 @@ pub fn check(path: &Path, bad: &mut bool, verbose: bool) {\n     }\n \n     if *bad {\n-        return;\n+        return CollectedFeatures { lib: lib_features, lang: features };\n     }\n \n     if verbose {\n@@ -140,6 +169,8 @@ pub fn check(path: &Path, bad: &mut bool, verbose: bool) {\n     } else {\n         println!(\"* {} features\", features.len());\n     }\n+\n+    CollectedFeatures { lib: lib_features, lang: features }\n }\n \n fn format_features<'a>(features: &'a Features, family: &'a str) -> impl Iterator<Item = String> + 'a {\n@@ -303,32 +334,6 @@ pub fn collect_lang_features(base_src_path: &Path, bad: &mut bool) -> Features {\n         .collect()\n }\n \n-pub fn collect_lib_features(base_src_path: &Path) -> Features {\n-    let mut lib_features = Features::new();\n-\n-    // This library feature is defined in the `compiler_builtins` crate, which\n-    // has been moved out-of-tree. Now it can no longer be auto-discovered by\n-    // `tidy`, because we need to filter out its (submodule) directory. Manually\n-    // add it to the set of known library features so we can still generate docs.\n-    lib_features.insert(\"compiler_builtins_lib\".to_owned(), Feature {\n-        level: Status::Unstable,\n-        since: None,\n-        has_gate_test: false,\n-        tracking_issue: None,\n-    });\n-\n-    map_lib_features(base_src_path,\n-                     &mut |res, _, _| {\n-        if let Ok((name, feature)) = res {\n-            if lib_features.contains_key(name) {\n-                return;\n-            }\n-            lib_features.insert(name.to_owned(), feature);\n-        }\n-    });\n-   lib_features\n-}\n-\n fn get_and_check_lib_features(base_src_path: &Path,\n                               bad: &mut bool,\n                               lang_features: &Features) -> Features {"}, {"sha": "918762ed6e69a20217fdaae89681d4cc388980ae", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c5c78d00c809977e3d56e21adce63b9d5532c71/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5c78d00c809977e3d56e21adce63b9d5532c71/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=6c5c78d00c809977e3d56e21adce63b9d5532c71", "patch": "@@ -24,9 +24,9 @@ fn main() {\n     style::check(&path, &mut bad);\n     errors::check(&path, &mut bad);\n     cargo::check(&path, &mut bad);\n-    features::check(&path, &mut bad, verbose);\n+    let collected = features::check(&path, &mut bad, verbose);\n     pal::check(&path, &mut bad);\n-    unstable_book::check(&path, &mut bad);\n+    unstable_book::check(&path, collected, &mut bad);\n     libcoretest::check(&path, &mut bad);\n     if !args.iter().any(|s| *s == \"--no-vendor\") {\n         deps::check(&path, &mut bad);"}, {"sha": "fb63520f0684a09e308204795896f1698729edc5", "filename": "src/tools/tidy/src/unstable_book.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6c5c78d00c809977e3d56e21adce63b9d5532c71/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5c78d00c809977e3d56e21adce63b9d5532c71/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs?ref=6c5c78d00c809977e3d56e21adce63b9d5532c71", "patch": "@@ -1,7 +1,7 @@\n use std::collections::BTreeSet;\n use std::fs;\n use std::path::{PathBuf, Path};\n-use crate::features::{collect_lang_features, collect_lib_features, Features, Status};\n+use crate::features::{CollectedFeatures, Features, Feature, Status};\n \n pub const PATH_STR: &str = \"doc/unstable-book\";\n \n@@ -73,13 +73,22 @@ fn collect_unstable_book_lib_features_section_file_names(base_src_path: &Path) -\n     collect_unstable_book_section_file_names(&unstable_book_lib_features_path(base_src_path))\n }\n \n-pub fn check(path: &Path, bad: &mut bool) {\n-    // Library features\n-\n-    let lang_features = collect_lang_features(path, bad);\n-    let lib_features = collect_lib_features(path).into_iter().filter(|&(ref name, _)| {\n+pub fn check(path: &Path, features: CollectedFeatures, bad: &mut bool) {\n+    let lang_features = features.lang;\n+    let mut lib_features = features.lib.into_iter().filter(|&(ref name, _)| {\n         !lang_features.contains_key(name)\n-    }).collect();\n+    }).collect::<Features>();\n+\n+    // This library feature is defined in the `compiler_builtins` crate, which\n+    // has been moved out-of-tree. Now it can no longer be auto-discovered by\n+    // `tidy`, because we need to filter out its (submodule) directory. Manually\n+    // add it to the set of known library features so we can still generate docs.\n+    lib_features.insert(\"compiler_builtins_lib\".to_owned(), Feature {\n+        level: Status::Unstable,\n+        since: None,\n+        has_gate_test: false,\n+        tracking_issue: None,\n+    });\n \n     // Library features\n     let unstable_lib_feature_names = collect_unstable_feature_names(&lib_features);"}]}