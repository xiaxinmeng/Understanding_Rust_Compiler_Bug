{"sha": "e76929ff981cd50e6a4d4936bf1f89ed625b032a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NjkyOWZmOTgxY2Q1MGU2YTRkNDkzNmJmMWY4OWVkNjI1YjAzMmE=", "commit": {"author": {"name": "YuhanLiin", "email": "yuhanliin+github@protonmail.com", "date": "2021-05-29T21:47:51Z"}, "committer": {"name": "YuhanLiin", "email": "yuhanliin+github@protonmail.com", "date": "2021-05-29T21:47:51Z"}, "message": "Add has_data_left() to BufRead", "tree": {"sha": "cd1767fe850a5e4023f9059a57ac6cbdadbd74a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd1767fe850a5e4023f9059a57ac6cbdadbd74a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e76929ff981cd50e6a4d4936bf1f89ed625b032a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e76929ff981cd50e6a4d4936bf1f89ed625b032a", "html_url": "https://github.com/rust-lang/rust/commit/e76929ff981cd50e6a4d4936bf1f89ed625b032a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e76929ff981cd50e6a4d4936bf1f89ed625b032a/comments", "author": {"login": "YuhanLiin", "id": 15389635, "node_id": "MDQ6VXNlcjE1Mzg5NjM1", "avatar_url": "https://avatars.githubusercontent.com/u/15389635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YuhanLiin", "html_url": "https://github.com/YuhanLiin", "followers_url": "https://api.github.com/users/YuhanLiin/followers", "following_url": "https://api.github.com/users/YuhanLiin/following{/other_user}", "gists_url": "https://api.github.com/users/YuhanLiin/gists{/gist_id}", "starred_url": "https://api.github.com/users/YuhanLiin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YuhanLiin/subscriptions", "organizations_url": "https://api.github.com/users/YuhanLiin/orgs", "repos_url": "https://api.github.com/users/YuhanLiin/repos", "events_url": "https://api.github.com/users/YuhanLiin/events{/privacy}", "received_events_url": "https://api.github.com/users/YuhanLiin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "YuhanLiin", "id": 15389635, "node_id": "MDQ6VXNlcjE1Mzg5NjM1", "avatar_url": "https://avatars.githubusercontent.com/u/15389635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YuhanLiin", "html_url": "https://github.com/YuhanLiin", "followers_url": "https://api.github.com/users/YuhanLiin/followers", "following_url": "https://api.github.com/users/YuhanLiin/following{/other_user}", "gists_url": "https://api.github.com/users/YuhanLiin/gists{/gist_id}", "starred_url": "https://api.github.com/users/YuhanLiin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YuhanLiin/subscriptions", "organizations_url": "https://api.github.com/users/YuhanLiin/orgs", "repos_url": "https://api.github.com/users/YuhanLiin/repos", "events_url": "https://api.github.com/users/YuhanLiin/events{/privacy}", "received_events_url": "https://api.github.com/users/YuhanLiin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff5522fc1ae2c1d66fb2a465f48e03732fa8570b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff5522fc1ae2c1d66fb2a465f48e03732fa8570b", "html_url": "https://github.com/rust-lang/rust/commit/ff5522fc1ae2c1d66fb2a465f48e03732fa8570b"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "21cad51bf930de27eb538dc25e44870294633166", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e76929ff981cd50e6a4d4936bf1f89ed625b032a/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76929ff981cd50e6a4d4936bf1f89ed625b032a/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=e76929ff981cd50e6a4d4936bf1f89ed625b032a", "patch": "@@ -1953,6 +1953,37 @@ pub trait BufRead: Read {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn consume(&mut self, amt: usize);\n \n+    /// Check if the underlying `Read` has any data left to be read.\n+    ///\n+    /// This function may fill the buffer to check for data,\n+    /// so this functions returns `Result<bool>`, not `bool`.\n+    ///\n+    /// Default implementation calls `fill_buf` and checks that\n+    /// returned slice is empty (which means that there is no data left,\n+    /// since EOF is reached).\n+    ///\n+    /// Examples\n+    ///\n+    /// ```\n+    /// #![feature(buf_read_has_data_left)]\n+    /// use std::io;\n+    /// use std::io::prelude::*;\n+    ///\n+    /// let stdin = io::stdin();\n+    /// let mut stdin = stdin.lock();\n+    ///\n+    /// while stdin.has_data_left().unwrap() {\n+    ///     let mut line = String::new();\n+    ///     stdin.read_line(&mut line).unwrap();\n+    ///     // work with line\n+    ///     println!(\"{:?}\", line);\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"buf_read_has_data_left\", reason = \"recently added\", issue = \"40745\")]\n+    fn has_data_left(&mut self) -> Result<bool> {\n+        self.fill_buf().map(|b| !b.is_empty())\n+    }\n+\n     /// Read all bytes into `buf` until the delimiter `byte` or EOF is reached.\n     ///\n     /// This function will read bytes from the underlying stream until the"}, {"sha": "4206b79405864ed56d64a2d7082b79c7fc6890ab", "filename": "library/std/src/io/tests.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e76929ff981cd50e6a4d4936bf1f89ed625b032a/library%2Fstd%2Fsrc%2Fio%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76929ff981cd50e6a4d4936bf1f89ed625b032a/library%2Fstd%2Fsrc%2Fio%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ftests.rs?ref=e76929ff981cd50e6a4d4936bf1f89ed625b032a", "patch": "@@ -71,6 +71,16 @@ fn lines() {\n     assert!(s.next().is_none());\n }\n \n+#[test]\n+fn buf_read_has_data_left() {\n+    let mut buf = Cursor::new(&b\"abcd\"[..]);\n+    assert!(buf.has_data_left().unwrap());\n+    buf.read_exact(&mut [0; 2]).unwrap();\n+    assert!(buf.has_data_left().unwrap());\n+    buf.read_exact(&mut [0; 2]).unwrap();\n+    assert!(!buf.has_data_left().unwrap());\n+}\n+\n #[test]\n fn read_to_end() {\n     let mut c = Cursor::new(&b\"\"[..]);"}]}