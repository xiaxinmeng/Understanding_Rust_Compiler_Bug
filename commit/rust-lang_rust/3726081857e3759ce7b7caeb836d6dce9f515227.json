{"sha": "3726081857e3759ce7b7caeb836d6dce9f515227", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MjYwODE4NTdlMzc1OWNlN2I3Y2FlYjgzNmQ2ZGNlOWY1MTUyMjc=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-09-25T15:49:12Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-09-25T15:49:12Z"}, "message": "Add helper function to fetch `libc` constants", "tree": {"sha": "560226e02a389f2bfc3f9fbbb3a75b924d33053e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/560226e02a389f2bfc3f9fbbb3a75b924d33053e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3726081857e3759ce7b7caeb836d6dce9f515227", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3726081857e3759ce7b7caeb836d6dce9f515227", "html_url": "https://github.com/rust-lang/rust/commit/3726081857e3759ce7b7caeb836d6dce9f515227", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3726081857e3759ce7b7caeb836d6dce9f515227/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79b1f91f45e3883e0946846cfd82aa4273c9809a", "url": "https://api.github.com/repos/rust-lang/rust/commits/79b1f91f45e3883e0946846cfd82aa4273c9809a", "html_url": "https://github.com/rust-lang/rust/commit/79b1f91f45e3883e0946846cfd82aa4273c9809a"}], "stats": {"total": 49, "additions": 14, "deletions": 35}, "files": [{"sha": "2c0064976e3f3bf0771ddfec6885e9ed1cc6891f", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3726081857e3759ce7b7caeb836d6dce9f515227/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3726081857e3759ce7b7caeb836d6dce9f515227/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=3726081857e3759ce7b7caeb836d6dce9f515227", "patch": "@@ -949,6 +949,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         return Ok(None);\n     }\n+\n+    fn eval_libc_i32(&mut self, name: &str) -> InterpResult<'tcx, i32> {\n+        self\n+            .eval_context_mut()\n+            .eval_path_scalar(&[\"libc\", name])?\n+            .ok_or_else(|| err_unsup_format!(\"Path libc::{} cannot be resolved.\", name).into())\n+            .and_then(|scalar| scalar.to_i32())\n+    }\n }\n \n // Shims the linux 'getrandom()' syscall."}, {"sha": "4b9af52962e718688b62e8a974ae9945132881dc", "filename": "src/shims/io.rs", "status": "modified", "additions": 6, "deletions": 35, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/3726081857e3759ce7b7caeb836d6dce9f515227/src%2Fshims%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3726081857e3759ce7b7caeb836d6dce9f515227/src%2Fshims%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fio.rs?ref=3726081857e3759ce7b7caeb836d6dce9f515227", "patch": "@@ -27,17 +27,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let flag = this.read_scalar(flag_op)?.to_i32()?;\n \n-        if flag\n-            != this\n-                .eval_path_scalar(&[\"libc\", \"O_RDONLY\"])?\n-                .unwrap()\n-                .to_i32()?\n-            && flag\n-                != this\n-                    .eval_path_scalar(&[\"libc\", \"O_CLOEXEC\"])?\n-                    .unwrap()\n-                    .to_i32()?\n-        {\n+        if flag != this.eval_libc_i32(\"O_RDONLY\")? && flag != this.eval_libc_i32(\"O_CLOEXEC\")? {\n             throw_unsup_format!(\"Unsupported flag {:#x}\", flag);\n         }\n \n@@ -78,28 +68,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n         let cmd = this.read_scalar(cmd_op)?.to_i32()?;\n \n-        if cmd\n-            == this\n-                .eval_path_scalar(&[\"libc\", \"F_SETFD\"])?\n-                .unwrap()\n-                .to_i32()?\n-        {\n+        if cmd == this.eval_libc_i32(\"F_SETFD\")? {\n             let flag = this.read_scalar(arg_op.unwrap())?.to_i32()?;\n             this.machine.file_handler.flags.insert(fd, flag);\n             Ok(0)\n-        } else if cmd\n-            == this\n-                .eval_path_scalar(&[\"libc\", \"F_GETFD\"])?\n-                .unwrap()\n-                .to_i32()?\n-        {\n+        } else if cmd == this.eval_libc_i32(\"F_GETFD\")? {\n             if let Some(flag) = this.machine.file_handler.flags.get(&fd) {\n                 Ok(*flag)\n             } else {\n-                this.machine.last_error = this\n-                    .eval_path_scalar(&[\"libc\", \"EBADF\"])?\n-                    .unwrap()\n-                    .to_u32()?;\n+                this.machine.last_error = this.eval_libc_i32(\"EBADF\")? as u32;\n                 Ok(-1)\n             }\n         } else {\n@@ -125,10 +102,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n             }\n         } else {\n-            this.machine.last_error = this\n-                .eval_path_scalar(&[\"libc\", \"EBADF\"])?\n-                .unwrap()\n-                .to_u32()?;\n+            this.machine.last_error = this.eval_libc_i32(\"EBADF\")? as u32;\n             Ok(-1)\n         }\n     }\n@@ -169,10 +143,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n             }\n         } else {\n-            this.machine.last_error = this\n-                .eval_path_scalar(&[\"libc\", \"EBADF\"])?\n-                .unwrap()\n-                .to_u32()?;\n+            this.machine.last_error = this.eval_libc_i32(\"EBADF\")? as u32;\n             Ok(-1)\n         }\n     }"}]}