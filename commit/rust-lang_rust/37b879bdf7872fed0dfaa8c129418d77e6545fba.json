{"sha": "37b879bdf7872fed0dfaa8c129418d77e6545fba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3Yjg3OWJkZjc4NzJmZWQwZGZhYThjMTI5NDE4ZDc3ZTY1NDVmYmE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-07-15T00:10:47Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-07-15T00:27:36Z"}, "message": "Fix fuzzer to compile with ivec-ized pp module.", "tree": {"sha": "7a858301ba159f42d9bbdfd7924dc1b1a90534ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a858301ba159f42d9bbdfd7924dc1b1a90534ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37b879bdf7872fed0dfaa8c129418d77e6545fba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37b879bdf7872fed0dfaa8c129418d77e6545fba", "html_url": "https://github.com/rust-lang/rust/commit/37b879bdf7872fed0dfaa8c129418d77e6545fba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37b879bdf7872fed0dfaa8c129418d77e6545fba/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9a6fc94d5cd17fee6ec9b7cd232cb5475f84dac", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9a6fc94d5cd17fee6ec9b7cd232cb5475f84dac", "html_url": "https://github.com/rust-lang/rust/commit/e9a6fc94d5cd17fee6ec9b7cd232cb5475f84dac"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "07b451b3f4f0abf9b1f8fd43309a7121ba391fdf", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/37b879bdf7872fed0dfaa8c129418d77e6545fba/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b879bdf7872fed0dfaa8c129418d77e6545fba/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=37b879bdf7872fed0dfaa8c129418d77e6545fba", "patch": "@@ -6,8 +6,8 @@ import std::getopts;\n import std::getopts::optopt;\n import std::getopts::opt_present;\n import std::getopts::opt_str;\n-import std::io;\n-import std::io::stdout;\n+import std::ioivec;\n+import std::ioivec::stdout;\n import std::vec;\n import std::ivec;\n import std::str;\n@@ -46,11 +46,11 @@ import rustc::lib::llvm;\n */\n \n fn read_whole_file(&str filename) -> str {\n-    str::unsafe_from_bytes(io::file_reader(filename).read_whole_stream())\n+    str::unsafe_from_bytes_ivec(ioivec::file_reader(filename).read_whole_stream())\n }\n \n fn write_file(&str filename, &str content) {\n-    io::file_writer(filename, [io::create]).write_str(content);\n+    ioivec::file_writer(filename, ~[ioivec::create]).write_str(content);\n }\n \n fn file_contains(&str filename, &str needle) -> bool {\n@@ -145,9 +145,9 @@ fn replace_expr_in_crate(&ast::crate crate, uint i, ast::expr_ newexpr) -> ast::\n \n iter under(uint n) -> uint { let uint i = 0u; while (i < n) { put i; i += 1u; } }\n \n-fn devnull() -> io::writer { std::io::string_writer().get_writer() }\n+fn devnull() -> ioivec::writer { std::ioivec::string_writer().get_writer() }\n \n-fn as_str(fn (io::writer) f) -> str { auto w = std::io::string_writer(); f(w.get_writer()); w.get_str() }\n+fn as_str(fn (ioivec::writer) f) -> str { auto w = std::ioivec::string_writer(); f(w.get_writer()); w.get_str() }\n \n fn pp_variants(&ast::crate crate, &codemap::codemap cmap, &str filename) {\n     auto exprs = steal_exprs(crate);\n@@ -166,7 +166,6 @@ fn pp_variants(&ast::crate crate, &codemap::codemap cmap, &str filename) {\n \n fn check_roundtrip(@ast::crate crate2, &codemap::codemap cmap, &str filename) {\n     auto str3 = as_str(bind pprust::print_crate(cmap, crate2, filename, _, pprust::no_ann()));\n-    auto cm4 = codemap::new_codemap();\n     if (true\n       && !contains(str3, \"][]\") // https://github.com/graydon/rust/issues/669\n       && !contains(str3, \"][mutable]\") // https://github.com/graydon/rust/issues/669\n@@ -175,9 +174,10 @@ fn check_roundtrip(@ast::crate crate2, &codemap::codemap cmap, &str filename) {\n       && !contains(str3, \"spawn\") // more precedence issues\n       && !contains(str3, \"bind\") // more precedence issues?\n        ) {\n+        auto cm4 = codemap::new_codemap();\n         auto crate4 = parser::parse_crate_from_source_str(filename, str3, ~[], cm4);\n         // should compare crates at this point, but it's easier to compare strings\n-        auto str5 = as_str(bind pprust::print_crate(cmap, crate4, filename, _, pprust::no_ann()));\n+        auto str5 = as_str(bind pprust::print_crate(cm4, crate4, filename, _, pprust::no_ann()));\n         if (!str::is_ascii(str3)) {\n           log_err \"Non-ASCII in \" + filename; // why does non-ASCII work correctly with \"rustc --pretty normal\" but not here???\n         } else if (str3 != str5) {"}]}