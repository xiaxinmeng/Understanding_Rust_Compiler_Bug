{"sha": "a63deeb3d32fc21f36d484d62a3ea1d3d0c82500", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2M2RlZWIzZDMyZmMyMWYzNmQ0ODRkNjJhM2VhMWQzZDBjODI1MDA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-13T00:04:34Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-13T22:52:37Z"}, "message": "io: Bind to shutdown() for TCP streams\n\nThis is something that is plausibly useful, and is provided by libuv. This is\nnot currently surfaced as part of the `TcpStream` type, but it may possibly\nappear in the future. For now only the raw functionality is provided through the\nRtio objects.", "tree": {"sha": "09421405ec3085de6217dfdef14cc119fd6da596", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09421405ec3085de6217dfdef14cc119fd6da596"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a63deeb3d32fc21f36d484d62a3ea1d3d0c82500", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a63deeb3d32fc21f36d484d62a3ea1d3d0c82500", "html_url": "https://github.com/rust-lang/rust/commit/a63deeb3d32fc21f36d484d62a3ea1d3d0c82500", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a63deeb3d32fc21f36d484d62a3ea1d3d0c82500/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3316a0e6b2ad9352bab58e7c046ef3d212411d82", "url": "https://api.github.com/repos/rust-lang/rust/commits/3316a0e6b2ad9352bab58e7c046ef3d212411d82", "html_url": "https://github.com/rust-lang/rust/commit/3316a0e6b2ad9352bab58e7c046ef3d212411d82"}], "stats": {"total": 78, "additions": 78, "deletions": 0}, "files": [{"sha": "6a71107294207c9b87185aba0ce88ac18daa4c35", "filename": "src/libnative/io/net.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a63deeb3d32fc21f36d484d62a3ea1d3d0c82500/src%2Flibnative%2Fio%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63deeb3d32fc21f36d484d62a3ea1d3d0c82500/src%2Flibnative%2Fio%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fnet.rs?ref=a63deeb3d32fc21f36d484d62a3ea1d3d0c82500", "patch": "@@ -351,6 +351,11 @@ impl rtio::RtioTcpStream for TcpStream {\n     fn clone(&self) -> ~rtio::RtioTcpStream {\n         ~TcpStream { inner: self.inner.clone() } as ~rtio::RtioTcpStream\n     }\n+    fn close_write(&mut self) -> IoResult<()> {\n+        super::mkerr_libc(unsafe {\n+            libc::shutdown(self.fd(), libc::SHUT_WR)\n+        })\n+    }\n }\n \n impl rtio::RtioSocket for TcpStream {"}, {"sha": "a0eb2be3d4d2f82909329d74cecdcdacc0b1ac23", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a63deeb3d32fc21f36d484d62a3ea1d3d0c82500/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63deeb3d32fc21f36d484d62a3ea1d3d0c82500/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=a63deeb3d32fc21f36d484d62a3ea1d3d0c82500", "patch": "@@ -305,6 +305,38 @@ impl rtio::RtioTcpStream for TcpWatcher {\n             read_access: self.read_access.clone(),\n         } as ~rtio::RtioTcpStream\n     }\n+\n+    fn close_write(&mut self) -> Result<(), IoError> {\n+        struct Ctx {\n+            slot: Option<BlockedTask>,\n+            status: c_int,\n+        }\n+        let mut req = Request::new(uvll::UV_SHUTDOWN);\n+\n+        return match unsafe {\n+            uvll::uv_shutdown(req.handle, self.handle, shutdown_cb)\n+        } {\n+            0 => {\n+                req.defuse(); // uv callback now owns this request\n+                let mut cx = Ctx { slot: None, status: 0 };\n+\n+                wait_until_woken_after(&mut cx.slot, &self.uv_loop(), || {\n+                    req.set_data(&cx);\n+                });\n+\n+                status_to_io_result(cx.status)\n+            }\n+            n => Err(uv_error_to_io_error(UvError(n)))\n+        };\n+\n+        extern fn shutdown_cb(req: *uvll::uv_shutdown_t, status: libc::c_int) {\n+            let req = Request::wrap(req);\n+            assert!(status != uvll::ECANCELED);\n+            let cx: &mut Ctx = unsafe { req.get_data() };\n+            cx.status = status;\n+            wakeup(&mut cx.slot);\n+        }\n+    }\n }\n \n impl UvHandle<uvll::uv_tcp_t> for TcpWatcher {"}, {"sha": "b9b7ed13cc1b18d18ae4bcf2c0fbe94e5395e0d6", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a63deeb3d32fc21f36d484d62a3ea1d3d0c82500/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63deeb3d32fc21f36d484d62a3ea1d3d0c82500/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=a63deeb3d32fc21f36d484d62a3ea1d3d0c82500", "patch": "@@ -157,6 +157,7 @@ pub type uv_process_t = c_void;\n pub type uv_pipe_t = c_void;\n pub type uv_tty_t = c_void;\n pub type uv_signal_t = c_void;\n+pub type uv_shutdown_t = c_void;\n \n pub struct uv_timespec_t {\n     tv_sec: libc::c_long,\n@@ -248,6 +249,7 @@ pub type uv_exit_cb = extern \"C\" fn(handle: *uv_process_t,\n pub type uv_signal_cb = extern \"C\" fn(handle: *uv_signal_t,\n                                       signum: c_int);\n pub type uv_fs_cb = extern \"C\" fn(req: *uv_fs_t);\n+pub type uv_shutdown_cb = extern \"C\" fn(req: *uv_shutdown_t, status: c_int);\n \n #[cfg(unix)] pub type uv_uid_t = libc::types::os::arch::posix88::uid_t;\n #[cfg(unix)] pub type uv_gid_t = libc::types::os::arch::posix88::gid_t;\n@@ -539,6 +541,8 @@ extern {\n                          on_alloc: uv_alloc_cb,\n                          on_read: uv_read_cb) -> c_int;\n     pub fn uv_read_stop(stream: *uv_stream_t) -> c_int;\n+    pub fn uv_shutdown(req: *uv_shutdown_t, handle: *uv_stream_t,\n+                       cb: uv_shutdown_cb) -> c_int;\n \n     // idle bindings\n     pub fn uv_idle_init(l: *uv_loop_t, i: *uv_idle_t) -> c_int;"}, {"sha": "95be3add0db95a644ff0d134a7bb9fc624ee589a", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a63deeb3d32fc21f36d484d62a3ea1d3d0c82500/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63deeb3d32fc21f36d484d62a3ea1d3d0c82500/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=a63deeb3d32fc21f36d484d62a3ea1d3d0c82500", "patch": "@@ -751,5 +751,23 @@ mod test {\n \n         p.recv();\n     })\n+\n+    iotest!(fn shutdown_smoke() {\n+        use rt::rtio::RtioTcpStream;\n+\n+        let addr = next_test_ip4();\n+        let a = TcpListener::bind(addr).unwrap().listen();\n+        spawn(proc() {\n+            let mut a = a;\n+            let mut c = a.accept().unwrap();\n+            assert_eq!(c.read_to_end(), Ok(~[]));\n+            c.write([1]).unwrap();\n+        });\n+\n+        let mut s = TcpStream::connect(addr).unwrap();\n+        assert!(s.obj.close_write().is_ok());\n+        assert!(s.write([1]).is_err());\n+        assert_eq!(s.read_to_end(), Ok(~[1]));\n+    })\n }\n "}, {"sha": "585ffebd979b1729989bfa9987f9400defc41fc9", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a63deeb3d32fc21f36d484d62a3ea1d3d0c82500/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63deeb3d32fc21f36d484d62a3ea1d3d0c82500/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=a63deeb3d32fc21f36d484d62a3ea1d3d0c82500", "patch": "@@ -1611,6 +1611,10 @@ pub mod consts {\n             pub static SO_KEEPALIVE: c_int = 8;\n             pub static SO_BROADCAST: c_int = 32;\n             pub static SO_REUSEADDR: c_int = 4;\n+\n+            pub static SHUT_RD: c_int = 0;\n+            pub static SHUT_WR: c_int = 1;\n+            pub static SHUT_RDWR: c_int = 2;\n         }\n         pub mod extra {\n             use libc::types::os::arch::c95::c_int;\n@@ -2391,6 +2395,10 @@ pub mod consts {\n             pub static SO_KEEPALIVE: c_int = 9;\n             pub static SO_BROADCAST: c_int = 6;\n             pub static SO_REUSEADDR: c_int = 2;\n+\n+            pub static SHUT_RD: c_int = 0;\n+            pub static SHUT_WR: c_int = 1;\n+            pub static SHUT_RDWR: c_int = 2;\n         }\n         #[cfg(target_arch = \"x86\")]\n         #[cfg(target_arch = \"x86_64\")]\n@@ -2842,6 +2850,10 @@ pub mod consts {\n             pub static SO_KEEPALIVE: c_int = 0x0008;\n             pub static SO_BROADCAST: c_int = 0x0020;\n             pub static SO_REUSEADDR: c_int = 0x0004;\n+\n+            pub static SHUT_RD: c_int = 0;\n+            pub static SHUT_WR: c_int = 1;\n+            pub static SHUT_RDWR: c_int = 2;\n         }\n         pub mod extra {\n             use libc::types::os::arch::c95::c_int;\n@@ -3221,6 +3233,10 @@ pub mod consts {\n             pub static SO_KEEPALIVE: c_int = 0x0008;\n             pub static SO_BROADCAST: c_int = 0x0020;\n             pub static SO_REUSEADDR: c_int = 0x0004;\n+\n+            pub static SHUT_RD: c_int = 0;\n+            pub static SHUT_WR: c_int = 1;\n+            pub static SHUT_RDWR: c_int = 2;\n         }\n         pub mod extra {\n             use libc::types::os::arch::c95::c_int;\n@@ -3939,6 +3955,7 @@ pub mod funcs {\n             pub fn sendto(socket: c_int, buf: *c_void, len: size_t,\n                           flags: c_int, addr: *sockaddr,\n                           addrlen: socklen_t) -> ssize_t;\n+            pub fn shutdown(socket: c_int, how: c_int) -> c_int;\n         }\n     }\n \n@@ -3975,6 +3992,7 @@ pub mod funcs {\n             pub fn sendto(socket: SOCKET, buf: *c_void, len: c_int,\n                           flags: c_int, addr: *sockaddr,\n                           addrlen: c_int) -> c_int;\n+            pub fn shutdown(socket: SOCKET, how: c_int) -> c_int;\n         }\n     }\n "}, {"sha": "0dc1a11d267d255d0e6f5d1220f62230a986edf4", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a63deeb3d32fc21f36d484d62a3ea1d3d0c82500/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63deeb3d32fc21f36d484d62a3ea1d3d0c82500/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=a63deeb3d32fc21f36d484d62a3ea1d3d0c82500", "patch": "@@ -206,6 +206,7 @@ pub trait RtioTcpStream : RtioSocket {\n     fn keepalive(&mut self, delay_in_seconds: uint) -> Result<(), IoError>;\n     fn letdie(&mut self) -> Result<(), IoError>;\n     fn clone(&self) -> ~RtioTcpStream;\n+    fn close_write(&mut self) -> Result<(), IoError>;\n }\n \n pub trait RtioSocket {"}]}