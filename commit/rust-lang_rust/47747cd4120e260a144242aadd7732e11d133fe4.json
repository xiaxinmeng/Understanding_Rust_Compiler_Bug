{"sha": "47747cd4120e260a144242aadd7732e11d133fe4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NzQ3Y2Q0MTIwZTI2MGExNDQyNDJhYWRkNzczMmUxMWQxMzNmZTQ=", "commit": {"author": {"name": "Clemens Wasser", "email": "clemens.wasser@gmail.com", "date": "2021-06-07T11:59:01Z"}, "committer": {"name": "Clemens Wasser", "email": "clemens.wasser@gmail.com", "date": "2021-06-21T14:40:21Z"}, "message": "Apply some clippy suggestions", "tree": {"sha": "ba767d7da808c050e313446ac4cb90d810d0f4de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba767d7da808c050e313446ac4cb90d810d0f4de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47747cd4120e260a144242aadd7732e11d133fe4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47747cd4120e260a144242aadd7732e11d133fe4", "html_url": "https://github.com/rust-lang/rust/commit/47747cd4120e260a144242aadd7732e11d133fe4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47747cd4120e260a144242aadd7732e11d133fe4/comments", "author": {"login": "clemenswasser", "id": 26170289, "node_id": "MDQ6VXNlcjI2MTcwMjg5", "avatar_url": "https://avatars.githubusercontent.com/u/26170289?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clemenswasser", "html_url": "https://github.com/clemenswasser", "followers_url": "https://api.github.com/users/clemenswasser/followers", "following_url": "https://api.github.com/users/clemenswasser/following{/other_user}", "gists_url": "https://api.github.com/users/clemenswasser/gists{/gist_id}", "starred_url": "https://api.github.com/users/clemenswasser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clemenswasser/subscriptions", "organizations_url": "https://api.github.com/users/clemenswasser/orgs", "repos_url": "https://api.github.com/users/clemenswasser/repos", "events_url": "https://api.github.com/users/clemenswasser/events{/privacy}", "received_events_url": "https://api.github.com/users/clemenswasser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clemenswasser", "id": 26170289, "node_id": "MDQ6VXNlcjI2MTcwMjg5", "avatar_url": "https://avatars.githubusercontent.com/u/26170289?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clemenswasser", "html_url": "https://github.com/clemenswasser", "followers_url": "https://api.github.com/users/clemenswasser/followers", "following_url": "https://api.github.com/users/clemenswasser/following{/other_user}", "gists_url": "https://api.github.com/users/clemenswasser/gists{/gist_id}", "starred_url": "https://api.github.com/users/clemenswasser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clemenswasser/subscriptions", "organizations_url": "https://api.github.com/users/clemenswasser/orgs", "repos_url": "https://api.github.com/users/clemenswasser/repos", "events_url": "https://api.github.com/users/clemenswasser/events{/privacy}", "received_events_url": "https://api.github.com/users/clemenswasser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4402f2b280f58896ed0696f4243d88a58fd970ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/4402f2b280f58896ed0696f4243d88a58fd970ca", "html_url": "https://github.com/rust-lang/rust/commit/4402f2b280f58896ed0696f4243d88a58fd970ca"}], "stats": {"total": 146, "additions": 66, "deletions": 80}, "files": [{"sha": "88490fea98f801499ad9384eed502d0531f3e941", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=47747cd4120e260a144242aadd7732e11d133fe4", "patch": "@@ -219,8 +219,7 @@ impl Crate {\n         let doc_url = doc_attr_q.tt_values().map(|tt| {\n             let name = tt.token_trees.iter()\n                 .skip_while(|tt| !matches!(tt, TokenTree::Leaf(Leaf::Ident(Ident{text: ref ident, ..})) if ident == \"html_root_url\"))\n-                .skip(2)\n-                .next();\n+                .nth(2);\n \n             match name {\n                 Some(TokenTree::Leaf(Leaf::Literal(Literal{ref text, ..}))) => Some(text),\n@@ -1846,7 +1845,7 @@ impl TypeParam {\n \n     pub fn trait_bounds(self, db: &dyn HirDatabase) -> Vec<Trait> {\n         db.generic_predicates_for_param(self.id)\n-            .into_iter()\n+            .iter()\n             .filter_map(|pred| match &pred.skip_binders().skip_binders() {\n                 hir_ty::WhereClause::Implemented(trait_ref) => {\n                     Some(Trait::from(trait_ref.hir_trait_id()))\n@@ -1951,7 +1950,7 @@ impl Impl {\n             all.extend(\n                 db.inherent_impls_in_crate(id)\n                     .for_self_ty(&ty)\n-                    .into_iter()\n+                    .iter()\n                     .cloned()\n                     .map(Self::from)\n                     .filter(filter),\n@@ -2232,8 +2231,8 @@ impl Type {\n     }\n \n     pub fn is_packed(&self, db: &dyn HirDatabase) -> bool {\n-        let adt_id = match self.ty.kind(&Interner) {\n-            &TyKind::Adt(hir_ty::AdtId(adt_id), ..) => adt_id,\n+        let adt_id = match *self.ty.kind(&Interner) {\n+            TyKind::Adt(hir_ty::AdtId(adt_id), ..) => adt_id,\n             _ => return false,\n         };\n \n@@ -2287,9 +2286,9 @@ impl Type {\n     }\n \n     pub fn fields(&self, db: &dyn HirDatabase) -> Vec<(Field, Type)> {\n-        let (variant_id, substs) = match self.ty.kind(&Interner) {\n-            &TyKind::Adt(hir_ty::AdtId(AdtId::StructId(s)), ref substs) => (s.into(), substs),\n-            &TyKind::Adt(hir_ty::AdtId(AdtId::UnionId(u)), ref substs) => (u.into(), substs),\n+        let (variant_id, substs) = match *self.ty.kind(&Interner) {\n+            TyKind::Adt(hir_ty::AdtId(AdtId::StructId(s)), ref substs) => (s.into(), substs),\n+            TyKind::Adt(hir_ty::AdtId(AdtId::UnionId(u)), ref substs) => (u.into(), substs),\n             _ => return Vec::new(),\n         };\n \n@@ -2488,20 +2487,17 @@ impl Type {\n             cb: &mut impl FnMut(Type),\n         ) {\n             for pred in bounds {\n-                match pred.skip_binders() {\n-                    WhereClause::Implemented(trait_ref) => {\n-                        cb(type_.clone());\n-                        // skip the self type. it's likely the type we just got the bounds from\n-                        for ty in trait_ref\n-                            .substitution\n-                            .iter(&Interner)\n-                            .skip(1)\n-                            .filter_map(|a| a.ty(&Interner))\n-                        {\n-                            walk_type(db, &type_.derived(ty.clone()), cb);\n-                        }\n+                if let WhereClause::Implemented(trait_ref) = pred.skip_binders() {\n+                    cb(type_.clone());\n+                    // skip the self type. it's likely the type we just got the bounds from\n+                    for ty in trait_ref\n+                        .substitution\n+                        .iter(&Interner)\n+                        .skip(1)\n+                        .filter_map(|a| a.ty(&Interner))\n+                    {\n+                        walk_type(db, &type_.derived(ty.clone()), cb);\n                     }\n-                    _ => (),\n                 }\n             }\n         }\n@@ -2514,7 +2510,7 @@ impl Type {\n                     walk_substs(db, type_, substs, cb);\n                 }\n                 TyKind::AssociatedType(_, substs) => {\n-                    if let Some(_) = ty.associated_type_parent_trait(db) {\n+                    if ty.associated_type_parent_trait(db).is_some() {\n                         cb(type_.derived(ty.clone()));\n                     }\n                     walk_substs(db, type_, substs, cb);"}, {"sha": "f6e6cdbe2e3d2ff31ab7d301dd67644c12302ef2", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=47747cd4120e260a144242aadd7732e11d133fe4", "patch": "@@ -690,9 +690,7 @@ impl ExprCollector<'_> {\n                 }\n             }\n             ast::Stmt::Item(item) => {\n-                if self.check_cfg(&item).is_none() {\n-                    return;\n-                }\n+                self.check_cfg(&item);\n             }\n         }\n     }\n@@ -717,7 +715,8 @@ impl ExprCollector<'_> {\n         block.statements().for_each(|s| self.collect_stmt(s));\n         block.tail_expr().and_then(|e| {\n             let expr = self.maybe_collect_expr(e)?;\n-            Some(self.statements_in_scope.push(Statement::Expr { expr, has_semi: false }))\n+            self.statements_in_scope.push(Statement::Expr { expr, has_semi: false });\n+            Some(())\n         });\n \n         let mut tail = None;"}, {"sha": "673a75386167685f971e80ecf01bf3618e5d155c", "filename": "crates/hir_def/src/body/tests.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs?ref=47747cd4120e260a144242aadd7732e11d133fe4", "patch": "@@ -15,12 +15,9 @@ fn lower(ra_fixture: &str) -> Arc<Body> {\n     let mut fn_def = None;\n     'outer: for (_, module) in def_map.modules() {\n         for decl in module.scope.declarations() {\n-            match decl {\n-                ModuleDefId::FunctionId(it) => {\n-                    fn_def = Some(it);\n-                    break 'outer;\n-                }\n-                _ => {}\n+            if let ModuleDefId::FunctionId(it) = decl {\n+                fn_def = Some(it);\n+                break 'outer;\n             }\n         }\n     }"}, {"sha": "096ac796850cce8da9bfaf465396f86dc57f6cf7", "filename": "crates/hir_def/src/generics.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fgenerics.rs?ref=47747cd4120e260a144242aadd7732e11d133fe4", "patch": "@@ -104,7 +104,7 @@ impl GenericParams {\n     ) -> Interned<GenericParams> {\n         let _p = profile::span(\"generic_params_query\");\n \n-        let generics = match def {\n+        match def {\n             GenericDefId::FunctionId(id) => {\n                 let id = id.lookup(db).id;\n                 let tree = id.item_tree(db);\n@@ -150,8 +150,7 @@ impl GenericParams {\n             GenericDefId::EnumVariantId(_) | GenericDefId::ConstId(_) => {\n                 Interned::new(GenericParams::default())\n             }\n-        };\n-        generics\n+        }\n     }\n \n     fn new(db: &dyn DefDatabase, def: GenericDefId) -> (GenericParams, InFile<SourceMap>) {"}, {"sha": "567ae5660347af23fad85a1bd1856ad26305badf", "filename": "crates/hir_def/src/item_scope.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs?ref=47747cd4120e260a144242aadd7732e11d133fe4", "patch": "@@ -241,10 +241,8 @@ impl ItemScope {\n         check_changed!(changed, (self / def).values, glob_imports[lookup], def_import_type);\n         check_changed!(changed, (self / def).macros, glob_imports[lookup], def_import_type);\n \n-        if def.is_none() {\n-            if self.unresolved.insert(lookup.1) {\n-                changed = true;\n-            }\n+        if def.is_none() && self.unresolved.insert(lookup.1) {\n+            changed = true;\n         }\n \n         changed"}, {"sha": "8b12e5a67cb3c25f0d022484c33d0d508f0dcbca", "filename": "crates/hir_def/src/item_tree/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs?ref=47747cd4120e260a144242aadd7732e11d133fe4", "patch": "@@ -30,16 +30,16 @@ pub(super) fn print_item_tree(tree: &ItemTree) -> String {\n \n macro_rules! w {\n     ($dst:expr, $($arg:tt)*) => {\n-        drop(write!($dst, $($arg)*))\n+        { let _ = write!($dst, $($arg)*); }\n     };\n }\n \n macro_rules! wln {\n     ($dst:expr) => {\n-        drop(writeln!($dst))\n+        { let _ = writeln!($dst); }\n     };\n     ($dst:expr, $($arg:tt)*) => {\n-        drop(writeln!($dst, $($arg)*))\n+        { let _ = writeln!($dst, $($arg)*); }\n     };\n }\n "}, {"sha": "9e6aa96075b9170db7d5652dcc45a5e2a714a4ac", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=47747cd4120e260a144242aadd7732e11d133fe4", "patch": "@@ -367,10 +367,7 @@ impl DefMap {\n     pub fn containing_module(&self, local_mod: LocalModuleId) -> Option<ModuleId> {\n         match &self[local_mod].parent {\n             Some(parent) => Some(self.module_id(*parent)),\n-            None => match &self.block {\n-                Some(block) => Some(block.parent),\n-                None => None,\n-            },\n+            None => self.block.as_ref().map(|block| block.parent),\n         }\n     }\n "}, {"sha": "229f57d7793ef5648ef451899ab52bce0b6af682", "filename": "crates/hir_def/src/nameres/path_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=47747cd4120e260a144242aadd7732e11d133fe4", "patch": "@@ -55,7 +55,7 @@ impl ResolvePathResult {\n         segment_index: Option<usize>,\n         krate: Option<CrateId>,\n     ) -> ResolvePathResult {\n-        ResolvePathResult { resolved_def, reached_fixedpoint, segment_index, krate }\n+        ResolvePathResult { resolved_def, segment_index, reached_fixedpoint, krate }\n     }\n }\n "}, {"sha": "667092cd2083a1e30a7167ceca7a3fadc6d195b6", "filename": "crates/hir_def/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fhir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fhir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath.rs?ref=47747cd4120e260a144242aadd7732e11d133fe4", "patch": "@@ -209,7 +209,7 @@ impl Path {\n \n     pub fn is_self_type(&self) -> bool {\n         self.type_anchor.is_none()\n-            && self.generic_args == &[None]\n+            && self.generic_args == [None]\n             && self.mod_path.as_ident() == Some(&name!(Self))\n     }\n }"}, {"sha": "a11439c3b54bb903fb02fd5c65f630cbabd83acf", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=47747cd4120e260a144242aadd7732e11d133fe4", "patch": "@@ -388,9 +388,9 @@ impl Resolver {\n         self.module_scope().map(|t| t.0.krate())\n     }\n \n-    pub fn where_predicates_in_scope<'a>(\n-        &'a self,\n-    ) -> impl Iterator<Item = &'a crate::generics::WherePredicate> + 'a {\n+    pub fn where_predicates_in_scope(\n+        &self,\n+    ) -> impl Iterator<Item = &crate::generics::WherePredicate> {\n         self.scopes\n             .iter()\n             .rev()\n@@ -464,16 +464,16 @@ impl Scope {\n             &Scope::GenericParams { ref params, def: parent } => {\n                 for (local_id, param) in params.types.iter() {\n                     if let Some(ref name) = param.name {\n-                        let id = TypeParamId { local_id, parent };\n+                        let id = TypeParamId { parent, local_id };\n                         f(name.clone(), ScopeDef::GenericParam(id.into()))\n                     }\n                 }\n                 for (local_id, param) in params.consts.iter() {\n-                    let id = ConstParamId { local_id, parent };\n+                    let id = ConstParamId { parent, local_id };\n                     f(param.name.clone(), ScopeDef::GenericParam(id.into()))\n                 }\n                 for (local_id, param) in params.lifetimes.iter() {\n-                    let id = LifetimeParamId { local_id, parent };\n+                    let id = LifetimeParamId { parent, local_id };\n                     f(param.name.clone(), ScopeDef::GenericParam(id.into()))\n                 }\n             }"}, {"sha": "f556bc751dbdc6d2d7510c60300c7d1e8d284dc9", "filename": "crates/hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=47747cd4120e260a144242aadd7732e11d133fe4", "patch": "@@ -420,7 +420,7 @@ fn parse_string(tt: &tt::Subtree) -> Result<String, mbe::ExpandError> {\n             tt::TokenTree::Leaf(tt::Leaf::Literal(it)) => unquote_str(it),\n             _ => None,\n         })\n-        .ok_or_else(|| mbe::ExpandError::ConversionError)\n+        .ok_or(mbe::ExpandError::ConversionError)\n }\n \n fn include_expand(\n@@ -432,9 +432,8 @@ fn include_expand(\n         let path = parse_string(tt)?;\n         let file_id = relative_file(db, arg_id, &path, false)?;\n \n-        let subtree = parse_to_token_tree(&db.file_text(file_id))\n-            .ok_or_else(|| mbe::ExpandError::ConversionError)?\n-            .0;\n+        let subtree =\n+            parse_to_token_tree(&db.file_text(file_id)).ok_or(mbe::ExpandError::ConversionError)?.0;\n         Ok((subtree, file_id))\n     })();\n "}, {"sha": "66601f4df37d60c7efce7b0400fda6a319bc3d3c", "filename": "crates/hir_expand/src/eager.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fhir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fhir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Feager.rs?ref=47747cd4120e260a144242aadd7732e11d133fe4", "patch": "@@ -128,7 +128,7 @@ pub fn expand_eager_macro(\n         }),\n         kind: MacroCallKind::FnLike { ast_id: call_id, fragment: FragmentKind::Expr },\n     });\n-    let arg_file_id: MacroCallId = arg_id;\n+    let arg_file_id = arg_id;\n \n     let parsed_args =\n         diagnostic_sink.result(mbe::token_tree_to_syntax_node(&parsed_args, FragmentKind::Expr))?.0;\n@@ -177,7 +177,7 @@ fn lazy_expand(\n     let ast_id = db.ast_id_map(macro_call.file_id).ast_id(&macro_call.value);\n \n     let fragment = crate::to_fragment_kind(&macro_call.value);\n-    let id: MacroCallId = def.as_lazy_macro(\n+    let id = def.as_lazy_macro(\n         db,\n         krate,\n         MacroCallKind::FnLike { ast_id: macro_call.with_value(ast_id), fragment },\n@@ -207,7 +207,7 @@ fn eager_macro_recur(\n             .option_with(|| macro_resolver(child.path()?), || err(\"failed to resolve macro\"))?;\n         let insert = match def.kind {\n             MacroDefKind::BuiltInEager(..) => {\n-                let id: MacroCallId = expand_eager_macro(\n+                let id = expand_eager_macro(\n                     db,\n                     krate,\n                     curr.with_value(child.clone()),"}, {"sha": "0d694b1a7820b56ba2640b3f866854186f217a56", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=47747cd4120e260a144242aadd7732e11d133fe4", "patch": "@@ -645,7 +645,7 @@ fn match_loop(pattern: &MetaTemplate, src: &tt::Subtree) -> Match {\n                     None if match_res.err.is_none() => {\n                         bindings_builder.push_optional(&mut item.bindings, name);\n                     }\n-                    _ => {}\n+                    None => {}\n                 }\n                 if let Some(err) = match_res.err {\n                     res.add_err(err);\n@@ -756,19 +756,19 @@ impl<'a> TtIter<'a> {\n         let ok = match separator {\n             Separator::Ident(lhs) if idx == 0 => match fork.expect_ident_or_underscore() {\n                 Ok(rhs) => rhs.text == lhs.text,\n-                _ => false,\n+                Err(_) => false,\n             },\n             Separator::Literal(lhs) if idx == 0 => match fork.expect_literal() {\n                 Ok(rhs) => match rhs {\n                     tt::Leaf::Literal(rhs) => rhs.text == lhs.text,\n                     tt::Leaf::Ident(rhs) => rhs.text == lhs.text,\n                     tt::Leaf::Punct(_) => false,\n                 },\n-                _ => false,\n+                Err(_) => false,\n             },\n             Separator::Puncts(lhss) if idx < lhss.len() => match fork.expect_punct() {\n                 Ok(rhs) => rhs.char == lhss[idx].char,\n-                _ => false,\n+                Err(_) => false,\n             },\n             _ => false,\n         };"}, {"sha": "4894e2a0c37359008f78c987edfb05f1f17364c4", "filename": "crates/mbe/src/expander/transcriber.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fmbe%2Fsrc%2Fexpander%2Ftranscriber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fmbe%2Fsrc%2Fexpander%2Ftranscriber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Ftranscriber.rs?ref=47747cd4120e260a144242aadd7732e11d133fe4", "patch": "@@ -241,6 +241,6 @@ fn push_fragment(buf: &mut Vec<tt::TokenTree>, fragment: Fragment) {\n fn push_subtree(buf: &mut Vec<tt::TokenTree>, tt: tt::Subtree) {\n     match tt.delimiter {\n         None => buf.extend(tt.token_trees),\n-        _ => buf.push(tt.into()),\n+        Some(_) => buf.push(tt.into()),\n     }\n }"}, {"sha": "fcc596756ca7d025777d891f337215e45e1e1345", "filename": "crates/mbe/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fmbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fmbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Flib.rs?ref=47747cd4120e260a144242aadd7732e11d133fe4", "patch": "@@ -135,7 +135,7 @@ impl Shift {\n \n     /// Shift given TokenTree token id\n     fn shift_all(self, tt: &mut tt::Subtree) {\n-        for t in tt.token_trees.iter_mut() {\n+        for t in &mut tt.token_trees {\n             match t {\n                 tt::TokenTree::Leaf(leaf) => match leaf {\n                     tt::Leaf::Ident(ident) => ident.id = self.shift(ident.id),\n@@ -188,7 +188,7 @@ impl MacroRules {\n             }\n         }\n \n-        for rule in rules.iter() {\n+        for rule in &rules {\n             validate(&rule.lhs)?;\n         }\n \n@@ -241,7 +241,7 @@ impl MacroDef {\n             }\n             rules.push(rule);\n         }\n-        for rule in rules.iter() {\n+        for rule in &rules {\n             validate(&rule.lhs)?;\n         }\n \n@@ -268,7 +268,7 @@ impl MacroDef {\n }\n \n impl Rule {\n-    fn parse(src: &mut TtIter, expect_arrow: bool) -> Result<Rule, ParseError> {\n+    fn parse(src: &mut TtIter, expect_arrow: bool) -> Result<Self, ParseError> {\n         let lhs = src\n             .expect_subtree()\n             .map_err(|()| ParseError::Expected(\"expected subtree\".to_string()))?;\n@@ -356,7 +356,7 @@ impl<T> ExpandResult<T> {\n     }\n \n     pub fn result(self) -> Result<T, ExpandError> {\n-        self.err.map(Err).unwrap_or(Ok(self.value))\n+        self.err.map_or(Ok(self.value), Err)\n     }\n }\n "}, {"sha": "ffc2a60172b1e5113ab50f118e025048df91ac71", "filename": "crates/mbe/src/subtree_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fmbe%2Fsrc%2Fsubtree_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fmbe%2Fsrc%2Fsubtree_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsubtree_source.rs?ref=47747cd4120e260a144242aadd7732e11d133fe4", "patch": "@@ -115,7 +115,7 @@ impl<'a> TokenSource for SubtreeTokenSource {\n     fn is_keyword(&self, kw: &str) -> bool {\n         match self.cached.get(self.curr.1) {\n             Some(t) => t.text == *kw,\n-            _ => false,\n+            None => false,\n         }\n     }\n }"}, {"sha": "7526bd8e6b588439a02aeba87b6b0f04d400fd13", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=47747cd4120e260a144242aadd7732e11d133fe4", "patch": "@@ -283,7 +283,7 @@ trait TokenConvertor {\n                 let (id, idx) = self.id_alloc().open_delim(range);\n                 subtree.delimiter = Some(tt::Delimiter { id, kind });\n \n-                while self.peek().map(|it| it.kind() != closed).unwrap_or(false) {\n+                while self.peek().map_or(false, |it| it.kind() != closed) {\n                     self.collect_leaf(&mut subtree.token_trees);\n                 }\n                 let last_range = match self.bump() {"}, {"sha": "65da834765e7f967ae5415d8546655a0af1633e0", "filename": "crates/mbe/src/tt_iter.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftt_iter.rs?ref=47747cd4120e260a144242aadd7732e11d133fe4", "patch": "@@ -121,10 +121,11 @@ impl<'a> TtIter<'a> {\n \n         parser::parse_fragment(&mut src, &mut sink, fragment_kind);\n \n-        let mut err = None;\n-        if !sink.cursor.is_root() || sink.error {\n-            err = Some(err!(\"expected {:?}\", fragment_kind));\n-        }\n+        let mut err = if !sink.cursor.is_root() || sink.error {\n+            Some(err!(\"expected {:?}\", fragment_kind))\n+        } else {\n+            None\n+        };\n \n         let mut curr = buffer.begin();\n         let mut res = vec![];"}, {"sha": "e252e89a5697c26a70c6ccca8a3fdab45847e186", "filename": "crates/proc_macro_srv/src/rustc_server.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47747cd4120e260a144242aadd7732e11d133fe4/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs?ref=47747cd4120e260a144242aadd7732e11d133fe4", "patch": "@@ -248,7 +248,7 @@ pub mod token_stream {\n             token_trees: subtree\n                 .token_trees\n                 .into_iter()\n-                .map(|t| token_tree_replace_token_ids_with_unspecified(t))\n+                .map(token_tree_replace_token_ids_with_unspecified)\n                 .collect(),\n         }\n     }\n@@ -457,7 +457,7 @@ impl server::Group for Rustc {\n     }\n \n     fn span(&mut self, group: &Self::Group) -> Self::Span {\n-        group.delimiter.map(|it| it.id).unwrap_or_else(|| tt::TokenId::unspecified())\n+        group.delimiter.map(|it| it.id).unwrap_or_else(tt::TokenId::unspecified)\n     }\n \n     fn set_span(&mut self, _group: &mut Self::Group, _span: Self::Span) {"}]}