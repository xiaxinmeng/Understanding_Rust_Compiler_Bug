{"sha": "2dee07b12a2dd08a281a84146dc7085299389add", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZWUwN2IxMmEyZGQwOGEyODFhODQxNDZkYzcwODUyOTkzODlhZGQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-20T10:36:39Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-02-01T23:06:22Z"}, "message": "Remove cast suggestions", "tree": {"sha": "0341c7641a0589214ca381d3902a3ca740d09775", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0341c7641a0589214ca381d3902a3ca740d09775"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dee07b12a2dd08a281a84146dc7085299389add", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dee07b12a2dd08a281a84146dc7085299389add", "html_url": "https://github.com/rust-lang/rust/commit/2dee07b12a2dd08a281a84146dc7085299389add", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dee07b12a2dd08a281a84146dc7085299389add/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "621e61bff92554d784aab13a507afcc0acdde53b", "url": "https://api.github.com/repos/rust-lang/rust/commits/621e61bff92554d784aab13a507afcc0acdde53b", "html_url": "https://github.com/rust-lang/rust/commit/621e61bff92554d784aab13a507afcc0acdde53b"}], "stats": {"total": 240, "additions": 0, "deletions": 240}, "files": [{"sha": "d0d0c09869e9dd398021ab70aa5be6cc1c54d948", "filename": "src/libcore/ops/arith.rs", "status": "modified", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/2dee07b12a2dd08a281a84146dc7085299389add/src%2Flibcore%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dee07b12a2dd08a281a84146dc7085299389add/src%2Flibcore%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Farith.rs?ref=2dee07b12a2dd08a281a84146dc7085299389add", "patch": "@@ -76,78 +76,6 @@\n #[lang = \"add\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(\n-    on(\n-        any(\n-            all(_Self=\"i128\", RHS=\"i64\"),\n-            all(_Self=\"i128\", RHS=\"i32\"),\n-            all(_Self=\"i128\", RHS=\"i16\"),\n-            all(_Self=\"i128\", RHS=\"i8\"),\n-            all(_Self=\"i64\",  RHS=\"i32\"),\n-            all(_Self=\"i64\",  RHS=\"i16\"),\n-            all(_Self=\"i64\",  RHS=\"i8\"),\n-            all(_Self=\"i32\",  RHS=\"i16\"),\n-            all(_Self=\"i32\",  RHS=\"i8\"),\n-            all(_Self=\"i16\",  RHS=\"i8\"),\n-            all(_Self=\"u128\", RHS=\"u64\"),\n-            all(_Self=\"u128\", RHS=\"u32\"),\n-            all(_Self=\"u128\", RHS=\"u16\"),\n-            all(_Self=\"u128\", RHS=\"u8\"),\n-            all(_Self=\"u64\",  RHS=\"u32\"),\n-            all(_Self=\"u64\",  RHS=\"u16\"),\n-            all(_Self=\"u64\",  RHS=\"u8\"),\n-            all(_Self=\"u32\",  RHS=\"u16\"),\n-            all(_Self=\"u32\",  RHS=\"u8\"),\n-            all(_Self=\"u16\",  RHS=\"u8\"),\n-            all(_Self=\"f64\",  RHS=\"i32\"),\n-            all(_Self=\"f64\",  RHS=\"i16\"),\n-            all(_Self=\"f64\",  RHS=\"i8\"),\n-            all(_Self=\"f64\",  RHS=\"u32\"),\n-            all(_Self=\"f64\",  RHS=\"u16\"),\n-            all(_Self=\"f64\",  RHS=\"u8\"),\n-            all(_Self=\"f32\",  RHS=\"i16\"),\n-            all(_Self=\"f32\",  RHS=\"i8\"),\n-            all(_Self=\"f32\",  RHS=\"u16\"),\n-            all(_Self=\"f32\",  RHS=\"u8\"),\n-        ),\n-        label=\"no implementation for `{Self} + {RHS}`, but you can safely cast \\\n-               `{RHS}` into `{Self}` using `as {Self}`\",\n-    ),\n-    on(\n-        any(\n-            all(RHS=\"i128\", _Self=\"i64\"),\n-            all(RHS=\"i128\", _Self=\"i32\"),\n-            all(RHS=\"i128\", _Self=\"i16\"),\n-            all(RHS=\"i128\", _Self=\"i8\"),\n-            all(RHS=\"i64\",  _Self=\"i32\"),\n-            all(RHS=\"i64\",  _Self=\"i16\"),\n-            all(RHS=\"i64\",  _Self=\"i8\"),\n-            all(RHS=\"i32\",  _Self=\"i16\"),\n-            all(RHS=\"i32\",  _Self=\"i8\"),\n-            all(RHS=\"i16\",  _Self=\"i8\"),\n-            all(RHS=\"u128\", _Self=\"u64\"),\n-            all(RHS=\"u128\", _Self=\"u32\"),\n-            all(RHS=\"u128\", _Self=\"u16\"),\n-            all(RHS=\"u128\", _Self=\"u8\"),\n-            all(RHS=\"u64\",  _Self=\"u32\"),\n-            all(RHS=\"u64\",  _Self=\"u16\"),\n-            all(RHS=\"u64\",  _Self=\"u8\"),\n-            all(RHS=\"u32\",  _Self=\"u16\"),\n-            all(RHS=\"u32\",  _Self=\"u8\"),\n-            all(RHS=\"u16\",  _Self=\"u8\"),\n-            all(RHS=\"f64\",  _Self=\"i32\"),\n-            all(RHS=\"f64\",  _Self=\"i16\"),\n-            all(RHS=\"f64\",  _Self=\"i8\"),\n-            all(RHS=\"f64\",  _Self=\"u32\"),\n-            all(RHS=\"f64\",  _Self=\"u16\"),\n-            all(RHS=\"f64\",  _Self=\"u8\"),\n-            all(RHS=\"f32\",  _Self=\"i16\"),\n-            all(RHS=\"f32\",  _Self=\"i8\"),\n-            all(RHS=\"f32\",  _Self=\"u16\"),\n-            all(RHS=\"f32\",  _Self=\"u8\"),\n-        ),\n-        label=\"no implementation for `{Self} + {RHS}`, but you can safely cast \\\n-               `{Self}` into `{RHS}` using `as {RHS}`\",\n-    ),\n     on(\n         all(_Self=\"{integer}\", RHS=\"{float}\"),\n         message=\"cannot add a float to an integer\","}, {"sha": "b48b08daa1963900225e900e6e27a2dd7292fba2", "filename": "src/test/ui/on-unimplemented/multiple-impls-complex-filtering.rs", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/621e61bff92554d784aab13a507afcc0acdde53b/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls-complex-filtering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/621e61bff92554d784aab13a507afcc0acdde53b/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls-complex-filtering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls-complex-filtering.rs?ref=621e61bff92554d784aab13a507afcc0acdde53b", "patch": "@@ -1,61 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test if the on_unimplemented message override works\n-\n-#![feature(on_unimplemented)]\n-#![feature(rustc_attrs)]\n-\n-struct Foo<T>(T);\n-struct Bar<T>(T);\n-\n-#[rustc_on_unimplemented(\n-    on(_Self=\"[i32]\", label=\"trait label if i32\"),\n-    label=\"trait label\",\n-    message=\"trait message\",\n-)]\n-trait Index<Idx: ?Sized> {\n-    type Output: ?Sized;\n-    fn index(&self, index: Idx) -> &Self::Output;\n-}\n-\n-#[rustc_on_unimplemented(\n-    label=\"impl foo {Self} {Idx} {Index}\",\n-)]\n-impl Index<Foo<usize>> for [i32] {\n-    type Output = i32;\n-    fn index(&self, _index: Foo<usize>) -> &i32 {\n-        loop {}\n-    }\n-}\n-\n-#[rustc_on_unimplemented = \"on impl for Bar\"]\n-impl Index<Bar<usize>> for [i32] {\n-    type Output = i32;\n-    fn index(&self, _index: Bar<usize>) -> &i32 {\n-        loop {}\n-    }\n-}\n-\n-#[rustc_error]\n-fn main() {\n-    Index::index(&[] as &[i32], 2usize);\n-    Index::index(&[] as &[i32], 2u32);\n-    Index::index(&[] as &[u32], 2u32);\n-    //~^ ERROR E0277\n-    //~| ERROR E0277\n-    Index::index(&[] as &[i32], Foo(2usize));\n-    Index::index(&[] as &[i32], Foo(2u32));\n-    //~^ ERROR E0277\n-    //~| ERROR E0277\n-    Index::index(&[] as &[i32], Bar(2u32));\n-    //~^ ERROR E0277\n-    //~| ERROR E0277\n-}"}, {"sha": "c4bac12eebdbe70376607c68b58a79b99e300ccc", "filename": "src/test/ui/on-unimplemented/multiple-impls-complex-filtering.stderr", "status": "removed", "additions": 0, "deletions": 107, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/621e61bff92554d784aab13a507afcc0acdde53b/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls-complex-filtering.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/621e61bff92554d784aab13a507afcc0acdde53b/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls-complex-filtering.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls-complex-filtering.stderr?ref=621e61bff92554d784aab13a507afcc0acdde53b", "patch": "@@ -1,107 +0,0 @@\n-error[E0277]: trait message\n-  --> $DIR/multiple-impls-complex-filtering.rs:49:5\n-   |\n-49 |     Index::index(&[] as &[i32], 2usize);\n-   |     ^^^^^^^^^^^^ trait label if i32\n-   |\n-   = help: the trait `Index<usize>` is not implemented for `[i32]`\n-note: required by `Index::index`\n-  --> $DIR/multiple-impls-complex-filtering.rs:26:5\n-   |\n-26 |     fn index(&self, index: Idx) -> &Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: trait message\n-  --> $DIR/multiple-impls-complex-filtering.rs:49:5\n-   |\n-49 |     Index::index(&[] as &[i32], 2usize);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ trait label if i32\n-   |\n-   = help: the trait `Index<usize>` is not implemented for `[i32]`\n-\n-error[E0277]: trait message\n-  --> $DIR/multiple-impls-complex-filtering.rs:50:5\n-   |\n-50 |     Index::index(&[] as &[i32], 2u32);\n-   |     ^^^^^^^^^^^^ trait label if i32\n-   |\n-   = help: the trait `Index<u32>` is not implemented for `[i32]`\n-note: required by `Index::index`\n-  --> $DIR/multiple-impls-complex-filtering.rs:26:5\n-   |\n-26 |     fn index(&self, index: Idx) -> &Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: trait message\n-  --> $DIR/multiple-impls-complex-filtering.rs:50:5\n-   |\n-50 |     Index::index(&[] as &[i32], 2u32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ trait label if i32\n-   |\n-   = help: the trait `Index<u32>` is not implemented for `[i32]`\n-\n-error[E0277]: trait message\n-  --> $DIR/multiple-impls-complex-filtering.rs:51:5\n-   |\n-51 |     Index::index(&[] as &[u32], 2u32);\n-   |     ^^^^^^^^^^^^ trait label\n-   |\n-   = help: the trait `Index<_>` is not implemented for `[u32]`\n-note: required by `Index::index`\n-  --> $DIR/multiple-impls-complex-filtering.rs:26:5\n-   |\n-26 |     fn index(&self, index: Idx) -> &Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: trait message\n-  --> $DIR/multiple-impls-complex-filtering.rs:51:5\n-   |\n-51 |     Index::index(&[] as &[u32], 2u32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ trait label\n-   |\n-   = help: the trait `Index<_>` is not implemented for `[u32]`\n-\n-error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n-  --> $DIR/multiple-impls-complex-filtering.rs:55:5\n-   |\n-55 |     Index::index(&[] as &[i32], Foo(2u32));\n-   |     ^^^^^^^^^^^^ impl foo [i32] Foo<u32> Index\n-   |\n-   = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n-note: required by `Index::index`\n-  --> $DIR/multiple-impls-complex-filtering.rs:26:5\n-   |\n-26 |     fn index(&self, index: Idx) -> &Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n-  --> $DIR/multiple-impls-complex-filtering.rs:55:5\n-   |\n-55 |     Index::index(&[] as &[i32], Foo(2u32));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl foo [i32] Foo<u32> Index\n-   |\n-   = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n-\n-error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n-  --> $DIR/multiple-impls-complex-filtering.rs:58:5\n-   |\n-58 |     Index::index(&[] as &[i32], Bar(2u32));\n-   |     ^^^^^^^^^^^^ on impl for Bar\n-   |\n-   = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n-note: required by `Index::index`\n-  --> $DIR/multiple-impls-complex-filtering.rs:26:5\n-   |\n-26 |     fn index(&self, index: Idx) -> &Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n-  --> $DIR/multiple-impls-complex-filtering.rs:58:5\n-   |\n-58 |     Index::index(&[] as &[i32], Bar(2u32));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ on impl for Bar\n-   |\n-   = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n-\n-error: aborting due to 10 previous errors\n-"}]}