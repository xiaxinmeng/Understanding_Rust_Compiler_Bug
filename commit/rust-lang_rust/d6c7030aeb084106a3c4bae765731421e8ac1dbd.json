{"sha": "d6c7030aeb084106a3c4bae765731421e8ac1dbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YzcwMzBhZWIwODQxMDZhM2M0YmFlNzY1NzMxNDIxZThhYzFkYmQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-18T21:46:10Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-18T21:46:10Z"}, "message": "Add emacs function for extend shirnk selection", "tree": {"sha": "ca4448b02f4ba654243addba4785ff82d225a824", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca4448b02f4ba654243addba4785ff82d225a824"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6c7030aeb084106a3c4bae765731421e8ac1dbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6c7030aeb084106a3c4bae765731421e8ac1dbd", "html_url": "https://github.com/rust-lang/rust/commit/d6c7030aeb084106a3c4bae765731421e8ac1dbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6c7030aeb084106a3c4bae765731421e8ac1dbd/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79293d2593ba658243d0f2edf18cd283fa40447a", "url": "https://api.github.com/repos/rust-lang/rust/commits/79293d2593ba658243d0f2edf18cd283fa40447a", "html_url": "https://github.com/rust-lang/rust/commit/79293d2593ba658243d0f2edf18cd283fa40447a"}], "stats": {"total": 126, "additions": 123, "deletions": 3}, "files": [{"sha": "5e7bf3ed45708461789366e3e5770143ae93085b", "filename": "crates/ra_cli/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6c7030aeb084106a3c4bae765731421e8ac1dbd/crates%2Fra_cli%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d6c7030aeb084106a3c4bae765731421e8ac1dbd/crates%2Fra_cli%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2FCargo.toml?ref=d6c7030aeb084106a3c4bae765731421e8ac1dbd", "patch": "@@ -7,6 +7,7 @@ publish = false\n [dependencies]\n clap = \"2.32.0\"\n failure = \"0.1.1\"\n+join_to_string = \"0.1.1\"\n ra_syntax = { path = \"../ra_syntax\" }\n ra_editor = { path = \"../ra_editor\" }\n tools = { path = \"../tools\" }"}, {"sha": "11605cfd86ccad63a3f1e1d3b4ca996bf7fe2ff5", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d6c7030aeb084106a3c4bae765731421e8ac1dbd/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c7030aeb084106a3c4bae765731421e8ac1dbd/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=d6c7030aeb084106a3c4bae765731421e8ac1dbd", "patch": "@@ -1,6 +1,7 @@\n extern crate clap;\n #[macro_use]\n extern crate failure;\n+extern crate join_to_string;\n extern crate ra_syntax;\n extern crate ra_editor;\n extern crate tools;\n@@ -10,9 +11,10 @@ use std::{\n     time::Instant\n };\n use clap::{App, Arg, SubCommand};\n+use join_to_string::join;\n use tools::collect_tests;\n-use ra_syntax::File;\n-use ra_editor::{syntax_tree, file_structure};\n+use ra_syntax::{TextRange, File};\n+use ra_editor::{syntax_tree, file_structure, extend_selection};\n \n type Result<T> = ::std::result::Result<T, failure::Error>;\n \n@@ -39,6 +41,10 @@ fn main() -> Result<()> {\n                 .arg(Arg::with_name(\"no-dump\").long(\"--no-dump\"))\n         )\n         .subcommand(SubCommand::with_name(\"symbols\"))\n+        .subcommand(SubCommand::with_name(\"extend-selection\")\n+            .arg(Arg::with_name(\"start\"))\n+            .arg(Arg::with_name(\"end\"))\n+        )\n         .get_matches();\n     match matches.subcommand() {\n         (\"parse\", Some(matches)) => {\n@@ -65,6 +71,13 @@ fn main() -> Result<()> {\n             let (test, tree) = render_test(file, line)?;\n             println!(\"{}\\n{}\", test, tree);\n         }\n+        (\"extend-selection\", Some(matches)) => {\n+            let start: u32 = matches.value_of(\"start\").unwrap().parse()?;\n+            let end: u32 = matches.value_of(\"end\").unwrap().parse()?;\n+            let file = file()?;\n+            let sels = selections(&file, start, end);\n+            println!(\"{}\", sels)\n+        }\n         _ => unreachable!(),\n     }\n     Ok(())\n@@ -95,3 +108,19 @@ fn render_test(file: &Path, line: usize) -> Result<(String, String)> {\n     let tree = syntax_tree(&file);\n     Ok((test.text, tree))\n }\n+\n+fn selections(file: &File, start: u32, end: u32) -> String {\n+    let mut ranges = Vec::new();\n+    let mut cur = Some(TextRange::from_to((start - 1).into(), (end - 1).into()));\n+    while let Some(r) = cur {\n+        ranges.push(r);\n+        cur = extend_selection(&file, r);\n+    }\n+    let ranges = ranges.iter()\n+        .map(|r| (1 + u32::from(r.start()), 1 + u32::from(r.end())))\n+        .map(|(s, e)| format!(\"({} {})\", s, e));\n+    join(ranges)\n+        .separator(\" \")\n+        .surround_with(\"(\", \")\")\n+        .to_string()\n+}"}, {"sha": "8de44c5861492cf0f2ced72b17317e9ec938e6df", "filename": "crates/ra_syntax/src/algo/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6c7030aeb084106a3c4bae765731421e8ac1dbd/crates%2Fra_syntax%2Fsrc%2Falgo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c7030aeb084106a3c4bae765731421e8ac1dbd/crates%2Fra_syntax%2Fsrc%2Falgo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Falgo%2Fmod.rs?ref=d6c7030aeb084106a3c4bae765731421e8ac1dbd", "patch": "@@ -78,7 +78,11 @@ impl<'f> Iterator for LeafAtOffset<'f> {\n }\n \n pub fn find_covering_node(root: SyntaxNodeRef, range: TextRange) -> SyntaxNodeRef {\n-    assert!(is_subrange(root.range(), range));\n+    assert!(\n+        is_subrange(root.range(), range),\n+        \"node range: {:?}, target range: {:?}\",\n+        root.range(), range,\n+    );\n     let (left, right) = match (\n         find_leaf_at_offset(root, range.start()).right_biased(),\n         find_leaf_at_offset(root, range.end()).left_biased()"}, {"sha": "6ff2ae7426d4b563bfc0eabaed5ac55b1e76c0a8", "filename": "editors/emacs/ra.el", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/d6c7030aeb084106a3c4bae765731421e8ac1dbd/editors%2Femacs%2Fra.el", "raw_url": "https://github.com/rust-lang/rust/raw/d6c7030aeb084106a3c4bae765731421e8ac1dbd/editors%2Femacs%2Fra.el", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Femacs%2Fra.el?ref=d6c7030aeb084106a3c4bae765731421e8ac1dbd", "patch": "@@ -0,0 +1,86 @@\n+;;; ra.el --- Rust analyzer emacs bindings -*- lexical-binding: t; -*-\n+;;; Commentary:\n+;;; Small utilities for interacting with Rust analyzer.\n+;;; Run\n+;;;   cargo install --git https://github.com/matklad/rust-analyzer/ --bin ra_cli\n+;;; to install the binary, copy-paste the bellow code to your `.init.el` and use\n+;;; `ra-extend-selection` and `ra-shrink-selection` functions\n+;;; Code:\n+\n+\n+(defvar ra--selections-cache '(0 0 ()))\n+(defun ra--cache-tick ()\n+  \"Get buffer modification count for cache.\"\n+  (nth 0 ra--selections-cache))\n+(defun ra--cache-sel ()\n+  \"Get current selection for cache.\"\n+  (nth 1 ra--selections-cache))\n+(defun ra--cache-nth-sel (n)\n+  \"Get Nth selection.\"\n+  (nth n (nth 2 ra--selections-cache)))\n+(defun ra--cache-set-nth-sel (n)\n+  \"Get Nth selection.\"\n+  (setf (nth 1 ra--selections-cache) n)\n+  (nth n (nth 2 ra--selections-cache)))\n+\n+\n+(defun ra-extend-selection ()\n+  \"Extend START END region to contain the encompassing syntactic construct.\"\n+  (interactive)\n+  (let* ((p (point))\n+         (m (or (and mark-active (mark)) p))\n+         (start (min p m))\n+         (end (max p m)))\n+    (ra--extend-selection start end)))\n+\n+\n+(defun ra-shrink-selection (start end)\n+  \"Shrink START END region to contain previous selection.\"\n+  (interactive \"r\")\n+  (ra--freshen-cache start end)\n+  (let ((sel-id (ra--cache-sel)))\n+    (if (not (= 0 sel-id))\n+        (let* ((r (ra--cache-set-nth-sel (- sel-id 1))))\n+          (push-mark (nth 0 r) t t)\n+          (goto-char (nth 1 r))\n+          (setq deactivate-mark nil)))))\n+\n+; Add this to setup keybinding\n+; (require 'rust-mode)\n+; (define-key rust-mode-map (kbd \"C-w\") 'ra-extend-selection)\n+; (define-key rust-mode-map (kbd \"C-S-w\") 'ra-shrink-selection)\n+\n+\n+\n+(defun ra--extend-selection (start end)\n+  \"Extend START END region to contain the encompassing syntactic construct.\"\n+  (ra--freshen-cache start end)\n+  (let* ((next-sel-idx (+ 1 (ra--cache-sel)))\n+         (r (ra--cache-set-nth-sel next-sel-idx)))\n+    (push-mark (nth 0 r) t t)\n+    (goto-char (nth 1 r))\n+    (setq deactivate-mark nil)))\n+\n+(defun ra--selections (start end)\n+  \"Get list of selections for START END from Rust analyzer.\"\n+  (read (with-output-to-string\n+          (call-process-region\n+           (point-min) (point-max)\n+           \"ra_cli\" nil standard-output nil\n+           \"extend-selection\"\n+           (number-to-string start)\n+           (number-to-string end)))))\n+\n+(defun ra--freshen-cache (start end)\n+  \"Make selection cache up-to-date for current buffer state and START END.\"\n+  (if (not (and\n+            (= (buffer-modified-tick) (ra--cache-tick))\n+            (equal `(,start ,end) (ra--cache-nth-sel (ra--cache-sel)))))\n+      (ra--set-cache start end)))\n+\n+(defun ra--set-cache (start end)\n+  \"Set selections cache for current buffer state and START END.\"\n+  (setq ra--selections-cache `(,(buffer-modified-tick) 0 ,(ra--selections start end))))\n+\n+(provide 'ra)\n+;;; ra.el ends here"}]}