{"sha": "213773ccb2b33c988366ab93993ad31e5c88b32e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMzc3M2NjYjJiMzNjOTg4MzY2YWI5Mzk5M2FkMzFlNWM4OGIzMmU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-12-12T21:38:19Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-12-12T21:38:19Z"}, "message": "Fix tasks tutorial tests", "tree": {"sha": "37dabc75471d92b348e3e2d693027214d679b129", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37dabc75471d92b348e3e2d693027214d679b129"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/213773ccb2b33c988366ab93993ad31e5c88b32e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/213773ccb2b33c988366ab93993ad31e5c88b32e", "html_url": "https://github.com/rust-lang/rust/commit/213773ccb2b33c988366ab93993ad31e5c88b32e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/213773ccb2b33c988366ab93993ad31e5c88b32e/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ec658eb694f40c429eb69d07dce541e9b877667", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ec658eb694f40c429eb69d07dce541e9b877667", "html_url": "https://github.com/rust-lang/rust/commit/4ec658eb694f40c429eb69d07dce541e9b877667"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "799fcb99fd0fbe24a94493f5e777ad58ebb75664", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/213773ccb2b33c988366ab93993ad31e5c88b32e/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/213773ccb2b33c988366ab93993ad31e5c88b32e/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=213773ccb2b33c988366ab93993ad31e5c88b32e", "patch": "@@ -150,7 +150,7 @@ come in a variety of forms, each one appropriate for a different use case. In\n what follows, we cover the most commonly used varieties.\n \n The simplest way to create a pipe is to use the `pipes::stream`\n-function to create a `(Chan, Port)` pair. In Rust parlance, a *channel*\n+function to create a `(Port, Chan)` pair. In Rust parlance, a *channel*\n is a sending endpoint of a pipe, and a *port* is the receiving\n endpoint. Consider the following example of calculating two results\n concurrently:\n@@ -159,7 +159,7 @@ concurrently:\n use task::spawn;\n use pipes::{stream, Port, Chan};\n \n-let (chan, port): (Chan<int>, Port<int>) = stream();\n+let (port, chan): (Port<int>, Chan<int>) = stream();\n \n do spawn |move chan| {\n     let result = some_expensive_computation();\n@@ -179,7 +179,7 @@ a tuple into its component parts).\n \n ~~~~\n # use pipes::{stream, Chan, Port};\n-let (chan, port): (Chan<int>, Port<int>) = stream();\n+let (port, chan): (Port<int>, Chan<int>) = stream();\n ~~~~\n \n The child task will use the channel to send data to the parent task,\n@@ -191,7 +191,7 @@ spawns the child task.\n # use task::spawn;\n # use pipes::{stream, Port, Chan};\n # fn some_expensive_computation() -> int { 42 }\n-# let (chan, port) = stream();\n+# let (port, chan) = stream();\n do spawn |move chan| {\n     let result = some_expensive_computation();\n     chan.send(result);\n@@ -211,7 +211,7 @@ port:\n ~~~~\n # use pipes::{stream, Port, Chan};\n # fn some_other_expensive_computation() {}\n-# let (chan, port) = stream::<int>();\n+# let (port, chan) = stream::<int>();\n # chan.send(0);\n some_other_expensive_computation();\n let result = port.recv();\n@@ -227,7 +227,7 @@ following program is ill-typed:\n # use task::{spawn};\n # use pipes::{stream, Port, Chan};\n # fn some_expensive_computation() -> int { 42 }\n-let (chan, port) = stream();\n+let (port, chan) = stream();\n \n do spawn |move chan| {\n     chan.send(some_expensive_computation());\n@@ -247,7 +247,7 @@ Instead we can use a `SharedChan`, a type that allows a single\n # use task::spawn;\n use pipes::{stream, SharedChan};\n \n-let (chan, port) = stream();\n+let (port, chan) = stream();\n let chan = SharedChan(move chan);\n \n for uint::range(0, 3) |init_val| {\n@@ -282,7 +282,7 @@ might look like the example below.\n \n // Create a vector of ports, one for each child task\n let ports = do vec::from_fn(3) |init_val| {\n-    let (chan, port) = stream();\n+    let (port, chan) = stream();\n     do spawn |move chan| {\n         chan.send(some_expensive_computation(init_val));\n     }\n@@ -397,7 +397,7 @@ before returning. Hence:\n # use task::{spawn, try};\n # fn sleep_forever() { loop { task::yield() } }\n # do task::try {\n-let (sender, receiver): (Chan<int>, Port<int>) = stream();\n+let (receiver, sender): (Port<int>, Chan<int>) = stream();\n do spawn |move receiver| {  // Bidirectionally linked\n     // Wait for the supervised child task to exist.\n     let message = receiver.recv();"}]}