{"sha": "cf696c0ed64b9a63cdb738a68a6209278664de67", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNjk2YzBlZDY0YjlhNjNjZGI3MzhhNjhhNjIwOTI3ODY2NGRlNjc=", "commit": {"author": {"name": "Teddy_Wang", "email": "wangtheo662@gmail.com", "date": "2021-09-09T02:28:52Z"}, "committer": {"name": "Teddy_Wang", "email": "wangtheo662@gmail.com", "date": "2021-09-09T02:28:52Z"}, "message": "Show the type of what is being dereferenced in a deref expression", "tree": {"sha": "e1870567ab50857440f6e8d79814cbb50eb8f4cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1870567ab50857440f6e8d79814cbb50eb8f4cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf696c0ed64b9a63cdb738a68a6209278664de67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf696c0ed64b9a63cdb738a68a6209278664de67", "html_url": "https://github.com/rust-lang/rust/commit/cf696c0ed64b9a63cdb738a68a6209278664de67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf696c0ed64b9a63cdb738a68a6209278664de67/comments", "author": {"login": "theo-lw", "id": 28904678, "node_id": "MDQ6VXNlcjI4OTA0Njc4", "avatar_url": "https://avatars.githubusercontent.com/u/28904678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theo-lw", "html_url": "https://github.com/theo-lw", "followers_url": "https://api.github.com/users/theo-lw/followers", "following_url": "https://api.github.com/users/theo-lw/following{/other_user}", "gists_url": "https://api.github.com/users/theo-lw/gists{/gist_id}", "starred_url": "https://api.github.com/users/theo-lw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theo-lw/subscriptions", "organizations_url": "https://api.github.com/users/theo-lw/orgs", "repos_url": "https://api.github.com/users/theo-lw/repos", "events_url": "https://api.github.com/users/theo-lw/events{/privacy}", "received_events_url": "https://api.github.com/users/theo-lw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "theo-lw", "id": 28904678, "node_id": "MDQ6VXNlcjI4OTA0Njc4", "avatar_url": "https://avatars.githubusercontent.com/u/28904678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theo-lw", "html_url": "https://github.com/theo-lw", "followers_url": "https://api.github.com/users/theo-lw/followers", "following_url": "https://api.github.com/users/theo-lw/following{/other_user}", "gists_url": "https://api.github.com/users/theo-lw/gists{/gist_id}", "starred_url": "https://api.github.com/users/theo-lw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theo-lw/subscriptions", "organizations_url": "https://api.github.com/users/theo-lw/orgs", "repos_url": "https://api.github.com/users/theo-lw/repos", "events_url": "https://api.github.com/users/theo-lw/events{/privacy}", "received_events_url": "https://api.github.com/users/theo-lw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dae94bf2b3e496adb049da589c7efef272a39b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dae94bf2b3e496adb049da589c7efef272a39b8", "html_url": "https://github.com/rust-lang/rust/commit/3dae94bf2b3e496adb049da589c7efef272a39b8"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "af65cfce862345382e459851b7ab1be492b11cb0", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/cf696c0ed64b9a63cdb738a68a6209278664de67/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf696c0ed64b9a63cdb738a68a6209278664de67/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=cf696c0ed64b9a63cdb738a68a6209278664de67", "patch": "@@ -243,6 +243,9 @@ fn hover_ranged(\n     })?;\n     let res = match &expr_or_pat {\n         Either::Left(ast::Expr::TryExpr(try_expr)) => hover_try_expr(sema, config, try_expr),\n+        Either::Left(ast::Expr::PrefixExpr(prefix_expr)) if prefix_expr.op_kind() == Some(ast::UnaryOp::Deref) => {\n+            hover_deref_expr(sema, config, prefix_expr)\n+        }\n         _ => None,\n     };\n     let res = res.or_else(|| hover_type_info(sema, config, &expr_or_pat));\n@@ -346,6 +349,67 @@ fn hover_try_expr(\n     Some(res)\n }\n \n+fn hover_deref_expr(\n+    sema: &Semantics<RootDatabase>,\n+    config: &HoverConfig,\n+    deref_expr: &ast::PrefixExpr,\n+) -> Option<HoverResult> {\n+    let inner_ty = sema.type_of_expr(&deref_expr.expr()?)?.original;\n+    let TypeInfo { original, adjusted } = sema.type_of_expr(&ast::Expr::from(deref_expr.clone()))?;\n+\n+    let mut res = HoverResult::default();\n+    let mut targets: Vec<hir::ModuleDef> = Vec::new();\n+    let mut push_new_def = |item: hir::ModuleDef| {\n+        if !targets.contains(&item) {\n+            targets.push(item);\n+        }\n+    };\n+    walk_and_push_ty(sema.db, &inner_ty, &mut push_new_def);\n+    walk_and_push_ty(sema.db, &original, &mut push_new_def);\n+    \n+    res.markup = if let Some(adjusted_ty) = adjusted {\n+        walk_and_push_ty(sema.db, &adjusted_ty, &mut push_new_def);\n+        let original = original.display(sema.db).to_string();\n+        let adjusted = adjusted_ty.display(sema.db).to_string();\n+        let inner = inner_ty.display(sema.db).to_string();\n+        let type_len = \"Type: \".len();\n+        let coerced_len = \"Coerced to: \".len();\n+        let deref_len = \"Derefenced from: \".len();\n+        let max_len = (original.len() + type_len).max(adjusted.len() + coerced_len).max(inner.len() + deref_len);\n+        format!(\n+            \"{bt_start}Type: {:>apad$}\\nCoerced to: {:>opad$}\\nDerefenced from: {:>ipad$}\\n{bt_end}\",\n+            original,\n+            adjusted,\n+            inner,\n+            apad = max_len - type_len,\n+            opad = max_len - coerced_len,\n+            ipad = max_len - deref_len,\n+            bt_start = if config.markdown() { \"```text\\n\" } else { \"\" },\n+            bt_end = if config.markdown() { \"```\\n\" } else { \"\" }\n+        )\n+        .into()\n+    } else {\n+        let original = original.display(sema.db).to_string();\n+        let inner = inner_ty.display(sema.db).to_string();\n+        let type_len = \"Type: \".len();\n+        let deref_len = \"Derefenced from: \".len();\n+        let max_len = (original.len() + type_len).max(inner.len() + deref_len);\n+        format!(\n+            \"{bt_start}Type: {:>apad$}\\nDerefenced from: {:>ipad$}\\n{bt_end}\",\n+            original,\n+            inner,\n+            apad = max_len - type_len,\n+            ipad = max_len - deref_len,\n+            bt_start = if config.markdown() { \"```text\\n\" } else { \"\" },\n+            bt_end = if config.markdown() { \"```\\n\" } else { \"\" }\n+        )\n+        .into()\n+    };\n+    res.actions.push(HoverAction::goto_type_from_targets(sema.db, targets));\n+\n+    Some(res)\n+}\n+\n fn hover_type_info(\n     sema: &Semantics<RootDatabase>,\n     config: &HoverConfig,"}]}