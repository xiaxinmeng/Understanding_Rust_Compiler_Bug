{"sha": "64954283c12a5c0701fcd805454ca9282cafca51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0OTU0MjgzYzEyYTVjMDcwMWZjZDgwNTQ1NGNhOTI4MmNhZmNhNTE=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-16T07:03:06Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-16T07:03:06Z"}, "message": "add some imports to guard against crate moves", "tree": {"sha": "baaa1c593322697623364ba4781c10c61511ca3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baaa1c593322697623364ba4781c10c61511ca3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64954283c12a5c0701fcd805454ca9282cafca51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64954283c12a5c0701fcd805454ca9282cafca51", "html_url": "https://github.com/rust-lang/rust/commit/64954283c12a5c0701fcd805454ca9282cafca51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64954283c12a5c0701fcd805454ca9282cafca51/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47b605304db5e1bf3cac3879e11d0ceae9ba9959", "url": "https://api.github.com/repos/rust-lang/rust/commits/47b605304db5e1bf3cac3879e11d0ceae9ba9959", "html_url": "https://github.com/rust-lang/rust/commit/47b605304db5e1bf3cac3879e11d0ceae9ba9959"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "c45227f88f224f070b6b309b77c00c6377d0ef04", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/64954283c12a5c0701fcd805454ca9282cafca51/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64954283c12a5c0701fcd805454ca9282cafca51/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=64954283c12a5c0701fcd805454ca9282cafca51", "patch": "@@ -1,5 +1,5 @@\n #![feature(plugin_registrar, box_syntax)]\n-#![feature(rustc_private, collections)]\n+#![feature(rustc_private, core, collections)]\n #![feature(str_split_at)]\n \n #[macro_use]\n@@ -8,6 +8,7 @@ extern crate syntax;\n extern crate rustc;\n \n // Only for the compile time checking of paths\n+extern crate core;\n extern crate collections;\n \n use rustc::plugin::Registry;"}, {"sha": "f2df736bebc1f5388b2ce8935f850af80c403963", "filename": "src/methods.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/64954283c12a5c0701fcd805454ca9282cafca51/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64954283c12a5c0701fcd805454ca9282cafca51/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=64954283c12a5c0701fcd805454ca9282cafca51", "patch": "@@ -16,12 +16,19 @@ declare_lint!(pub STR_TO_STRING, Warn,\n declare_lint!(pub STRING_TO_STRING, Warn,\n               \"calling `String.to_string()` which is a no-op\");\n \n+#[allow(unused_imports)]\n impl LintPass for MethodsPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(OPTION_UNWRAP_USED, RESULT_UNWRAP_USED, STR_TO_STRING, STRING_TO_STRING)\n     }\n \n     fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n+        {\n+            // In case stuff gets moved around\n+            use core::option::Option;\n+            use core::result::Result;\n+            use collections::string::String;\n+        }\n         if let ExprMethodCall(ref ident, _, ref args) = expr.node {\n             let ref obj_ty = walk_ptrs_ty(cx.tcx.expr_ty(&*args[0])).sty;\n             if ident.node.name == \"unwrap\" {"}, {"sha": "aa5f1d13471f806e42379c2253200f1bfb593ee5", "filename": "src/types.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64954283c12a5c0701fcd805454ca9282cafca51/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64954283c12a5c0701fcd805454ca9282cafca51/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=64954283c12a5c0701fcd805454ca9282cafca51", "patch": "@@ -63,10 +63,8 @@ impl LintPass for TypePass {\n             // In case stuff gets moved around\n             use collections::linked_list::LinkedList as DL1;\n             use std::collections::linked_list::LinkedList as DL2;\n-            use std::collections::linked_list::LinkedList as DL3;\n         }\n         let dlists = [vec![\"std\",\"collections\",\"linked_list\",\"LinkedList\"],\n-                      vec![\"std\",\"collections\",\"linked_list\",\"LinkedList\"],\n                       vec![\"collections\",\"linked_list\",\"LinkedList\"]];\n         for path in &dlists {\n             if match_ty_unwrap(ty, &path[..]).is_some() {"}]}