{"sha": "992b4648d9f6a186c7c444a4db36b2bba00b09a5", "node_id": "C_kwDOAAsO6NoAKDk5MmI0NjQ4ZDlmNmExODZjN2M0NDRhNGRiMzZiMmJiYTAwYjA5YTU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-03T12:45:21Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-03T12:53:18Z"}, "message": "feat: Hide type inlay hints for constructors", "tree": {"sha": "9148fbd43f1e92e76273566800fe0a09cc520629", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9148fbd43f1e92e76273566800fe0a09cc520629"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/992b4648d9f6a186c7c444a4db36b2bba00b09a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/992b4648d9f6a186c7c444a4db36b2bba00b09a5", "html_url": "https://github.com/rust-lang/rust/commit/992b4648d9f6a186c7c444a4db36b2bba00b09a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/992b4648d9f6a186c7c444a4db36b2bba00b09a5/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b0c91d11844ee3975476cd2c7bf42af480d7781", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b0c91d11844ee3975476cd2c7bf42af480d7781", "html_url": "https://github.com/rust-lang/rust/commit/5b0c91d11844ee3975476cd2c7bf42af480d7781"}], "stats": {"total": 107, "additions": 102, "deletions": 5}, "files": [{"sha": "8dfceb35affdc9a20d42c9d32d0f66dea66c41fc", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 91, "deletions": 5, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/992b4648d9f6a186c7c444a4db36b2bba00b09a5/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992b4648d9f6a186c7c444a4db36b2bba00b09a5/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=992b4648d9f6a186c7c444a4db36b2bba00b09a5", "patch": "@@ -198,28 +198,69 @@ fn get_bind_pat_hints(\n \n     let descended = sema.descend_node_into_attributes(pat.clone()).pop();\n     let desc_pat = descended.as_ref().unwrap_or(pat);\n-    let krate = sema.scope(desc_pat.syntax()).module().map(|it| it.krate());\n-    let famous_defs = FamousDefs(sema, krate);\n-\n     let ty = sema.type_of_pat(&desc_pat.clone().into())?.original;\n \n     if should_not_display_type_hint(sema, &pat, &ty) {\n         return None;\n     }\n \n+    let krate = sema.scope(desc_pat.syntax()).module().map(|it| it.krate());\n+    let famous_defs = FamousDefs(sema, krate);\n+    let label = hint_iterator(sema, &famous_defs, config, &ty);\n+\n+    let label = match label {\n+        Some(label) => label,\n+        None => {\n+            let ty = ty.display_truncated(sema.db, config.max_length).to_string();\n+            if Some(&*ty) == get_constructor_name(sema, pat).as_deref() {\n+                return None;\n+            }\n+            ty.into()\n+        }\n+    };\n+\n     acc.push(InlayHint {\n         range: match pat.name() {\n             Some(name) => name.syntax().text_range(),\n             None => pat.syntax().text_range(),\n         },\n         kind: InlayKind::TypeHint,\n-        label: hint_iterator(sema, &famous_defs, config, &ty)\n-            .unwrap_or_else(|| ty.display_truncated(sema.db, config.max_length).to_string().into()),\n+        label,\n     });\n \n     Some(())\n }\n \n+fn get_constructor_name(sema: &Semantics<RootDatabase>, pat: &ast::IdentPat) -> Option<String> {\n+    let it = pat.syntax().parent()?;\n+    let expr = match_ast! {\n+        match it {\n+            ast::LetStmt(it) => it.initializer(),\n+            ast::Condition(it) => it.expr(),\n+            _ => None,\n+        }\n+    };\n+\n+    if let Some(expr) = expr {\n+        let expr = sema.descend_node_into_attributes(expr.clone()).pop().unwrap_or(expr);\n+        let expr = match expr {\n+            ast::Expr::TryExpr(it) => it.expr(),\n+            ast::Expr::AwaitExpr(it) => it.expr(),\n+            expr => Some(expr),\n+        }?;\n+        let path = match expr {\n+            ast::Expr::CallExpr(call) => match call.expr()? {\n+                ast::Expr::PathExpr(p) => p.path(),\n+                _ => None,\n+            },\n+            _ => None,\n+        }?;\n+        let seg = path.qualifier()?.segment()?;\n+        return Some(seg.to_string());\n+    }\n+    None\n+}\n+\n /// Checks if the type is an Iterator from std::iter and replaces its hint with an `impl Iterator<Item = Ty>`.\n fn hint_iterator(\n     sema: &Semantics<RootDatabase>,\n@@ -1234,6 +1275,51 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn skip_constructor_type_hints() {\n+        check_types(\n+            r#\"\n+//- minicore: try\n+use core::ops::ControlFlow;\n+\n+struct Struct;\n+struct TupleStruct();\n+\n+impl Struct {\n+    fn new() -> Self {\n+        Struct\n+    }\n+    fn try_new() -> ControlFlow<(), Self> {\n+        ControlFlow::Continue(Struct)\n+    }\n+}\n+\n+struct Generic<T>(T);\n+impl Generic<i32> {\n+    fn new() -> Self {\n+        Generic(0)\n+    }\n+}\n+\n+fn main() {\n+    let strukt = Struct::new();\n+    let tuple_struct = TupleStruct();\n+     // ^^^^^^^^^^^^ TupleStruct\n+    let generic0 = Generic::new();\n+     // ^^^^^^^^ Generic<i32>\n+    let generic1 = Generic::<i32>::new();\n+     // ^^^^^^^^ Generic<i32>\n+    let generic2 = <Generic<i32>>::new();\n+     // ^^^^^^^^ Generic<i32>\n+}\n+\n+fn fallible() -> ControlFlow<()> {\n+    let strukt = Struct::try_new()?;\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn closures() {\n         check("}, {"sha": "045b4898e508240c24488814d18642dca5de4921", "filename": "crates/test_utils/src/minicore.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/992b4648d9f6a186c7c444a4db36b2bba00b09a5/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992b4648d9f6a186c7c444a4db36b2bba00b09a5/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fminicore.rs?ref=992b4648d9f6a186c7c444a4db36b2bba00b09a5", "patch": "@@ -300,6 +300,17 @@ pub mod ops {\n             #[lang = \"branch\"]\n             fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n         }\n+\n+        impl<B, C> Try for ControlFlow<B, C> {\n+            type Output = C;\n+            type Residual = ControlFlow<B, convert::Infallible>;\n+            fn from_output(output: Self::Output) -> Self {}\n+            fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {}\n+        }\n+\n+        impl<B, C> FromResidual for ControlFlow<B, C> {\n+            fn from_residual(residual: ControlFlow<B, convert::Infallible>) -> Self {}\n+        }\n     }\n     pub use self::try_::{ControlFlow, FromResidual, Try};\n     // endregion:try"}]}