{"sha": "88593fc3fc808e78dd89be95c997c94ba4c816da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NTkzZmMzZmM4MDhlNzhkZDg5YmU5NWM5OTdjOTRiYTRjODE2ZGE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-01T18:38:55Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-03T16:16:31Z"}, "message": "Document logging and remove old functions\n\nThis adds a large doc-block to the top of the std::logging module explaining how\nto use it. This is mostly just making sure that all the information in the\nmanual's section about logging is also here (in case someone decides to look\ninto this module first).\n\nThis also removes the old console_{on,off} methods. As far as I can tell, the\nfunctions were only used by the compiler, and there's no reason for them to be\nused because they're all turned off by default anyway (maybe they were turned on\nby default at some point...)\n\nI believe that this is the final nail in the coffin and closes #5021", "tree": {"sha": "19ce3ecf02eead4594123bee1b05249ffce7dbb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19ce3ecf02eead4594123bee1b05249ffce7dbb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88593fc3fc808e78dd89be95c997c94ba4c816da", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88593fc3fc808e78dd89be95c997c94ba4c816da", "html_url": "https://github.com/rust-lang/rust/commit/88593fc3fc808e78dd89be95c997c94ba4c816da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88593fc3fc808e78dd89be95c997c94ba4c816da/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1ffb06ac828f689af428b715cdd601a41021862", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1ffb06ac828f689af428b715cdd601a41021862", "html_url": "https://github.com/rust-lang/rust/commit/a1ffb06ac828f689af428b715cdd601a41021862"}], "stats": {"total": 163, "additions": 90, "deletions": 73}, "files": [{"sha": "56cc1ab9a02befadd7ea0a091041313f29d6454c", "filename": "src/librustc/rustc.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88593fc3fc808e78dd89be95c997c94ba4c816da/src%2Flibrustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88593fc3fc808e78dd89be95c997c94ba4c816da/src%2Flibrustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rs?ref=88593fc3fc808e78dd89be95c997c94ba4c816da", "patch": "@@ -194,9 +194,6 @@ pub fn describe_debug_flags() {\n }\n \n pub fn run_compiler(args: &[~str], demitter: @diagnostic::Emitter) {\n-    // Don't display log spew by default. Can override with RUST_LOG.\n-    ::std::logging::console_off();\n-\n     let mut args = args.to_owned();\n     let binary = args.shift().to_managed();\n "}, {"sha": "5e1ef3658b3f5b18419eaee829e7101356bc8a84", "filename": "src/libstd/logging.rs", "status": "modified", "additions": 88, "deletions": 27, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/88593fc3fc808e78dd89be95c997c94ba4c816da/src%2Flibstd%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88593fc3fc808e78dd89be95c997c94ba4c816da/src%2Flibstd%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flogging.rs?ref=88593fc3fc808e78dd89be95c997c94ba4c816da", "patch": "@@ -8,40 +8,101 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Logging\n+/*!\n \n-use fmt;\n-use option::*;\n-use os;\n-use rt;\n-use rt::logging::{Logger, StdErrLogger};\n+Logging\n \n-/// Turns on logging to stdout globally\n-pub fn console_on() {\n-    rt::logging::console_on();\n-}\n+This module is used by the compiler when emitting output for the logging family\n+of macros. The methods of this module shouldn't necessarily be used directly,\n+but rather through the logging macros defined.\n \n-/**\n- * Turns off logging to stdout globally\n- *\n- * Turns off the console unless the user has overridden the\n- * runtime environment's logging spec, e.g. by setting\n- * the RUST_LOG environment variable\n- */\n-pub fn console_off() {\n-    // If RUST_LOG is set then the console can't be turned off\n-    if os::getenv(\"RUST_LOG\").is_some() {\n-        return;\n-    }\n+There are five macros that the logging subsystem uses:\n+\n+* `log!(level, ...)` - the generic logging macro, takes a level as a u32 and any\n+                       related `format!` arguments\n+* `debug!(...)` - a macro hard-wired to the log level of 4\n+* `info!(...)` - a macro hard-wired to the log level of 3\n+* `warn!(...)` - a macro hard-wired to the log level of 2\n+* `error!(...)` - a macro hard-wired to the log level of 1\n+\n+All of these macros use the same style of syntax as the `format!` syntax\n+extension. Details about the syntax can be found in the documentation of\n+`std::fmt` along with the Rust tutorial/manual\n+\n+## Enabling logging\n+\n+Log levels are controlled on a per-module basis, and by default all logging is\n+disabled except for `error!` (a log level of 1). Logging is controlled via the\n+`RUST_LOG` environment variable. The value of this environment variable is a\n+comma-separated list of logging directives. A logging directive is of the form:\n+\n+```\n+path::to::module=log_level\n+```\n+\n+The path to the module is rooted in the name of the crate it was compiled for,\n+so if your program is contained in a file `hello.rs`, for example, to turn on\n+logging for this file you would use a value of `RUST_LOG=hello`. Furthermore,\n+this path is a prefix-search, so all modules nested in the specified module will\n+also have logging enabled.\n+\n+The actual `log_level` is optional to specify. If omitted, all logging will be\n+enabled. If specified, the it must be either a numeric in the range of 1-255, or\n+it must be one of the strings `debug`, `error`, `info`, or `warn`. If a numeric\n+is specified, then all logging less than or equal to that numeral is enabled.\n+For example, if logging level 3 is active, error, warn, and info logs will be\n+printed, but debug will be omitted.\n+\n+As the log level for a module is optional, the module to enable logging for is\n+also optional. If only a `log_level` is provided, then the global log level for\n+all modules is set to this value.\n \n-    rt::logging::console_off();\n+Some examples of valid values of `RUST_LOG` are:\n+\n+```\n+hello                // turns on all logging for the 'hello' module\n+info                 // turns on all info logging\n+hello=debug          // turns on debug logging for 'hello'\n+hello=3              // turns on info logging for 'hello'\n+hello,std::hashmap   // turns on hello, and std's hashmap logging\n+error,hello=warn     // turn on global error logging and also warn for hello\n+```\n+\n+## Performance and Side Effects\n+\n+Each of these macros will expand to code similar to:\n+\n+```rust\n+if log_level <= my_module_log_level() {\n+    ::std::logging::log(log_level, format!(...));\n }\n+```\n \n-#[allow(missing_doc)]\n-pub fn log(_level: u32, args: &fmt::Arguments) {\n-    use rt::task::Task;\n-    use rt::local::Local;\n+What this means is that each of these macros are very cheap at runtime if\n+they're turned off (just a load and an integer comparison). This also means that\n+if logging is disabled, none of the components of the log will be executed.\n+\n+## Useful Values\n+\n+For convenience, if a value of `::help` is set for `RUST_LOG`, a program will\n+start, print out all modules registered for logging, and then exit.\n \n+*/\n+\n+use fmt;\n+use option::*;\n+use rt::local::Local;\n+use rt::logging::{Logger, StdErrLogger};\n+use rt::task::Task;\n+\n+/// This function is called directly by the compiler when using the logging\n+/// macros. This function does not take into account whether the log level\n+/// specified is active or not, it will always log something if this method is\n+/// called.\n+///\n+/// It is not recommended to call this function directly, rather it should be\n+/// invoked through the logging family of macros.\n+pub fn log(_level: u32, args: &fmt::Arguments) {\n     unsafe {\n         let optional_task: Option<*mut Task> = Local::try_unsafe_borrow();\n         match optional_task {"}, {"sha": "ea0f5f59a7ed2253716c4b74fb49a6349b370dea", "filename": "src/libstd/rt/logging.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/88593fc3fc808e78dd89be95c997c94ba4c816da/src%2Flibstd%2Frt%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88593fc3fc808e78dd89be95c997c94ba4c816da/src%2Flibstd%2Frt%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flogging.rs?ref=88593fc3fc808e78dd89be95c997c94ba4c816da", "patch": "@@ -10,7 +10,7 @@\n \n use fmt;\n use from_str::from_str;\n-use libc::{uintptr_t, exit};\n+use libc::exit;\n use option::{Some, None, Option};\n use rt;\n use rt::util::dumb_println;\n@@ -182,9 +182,7 @@ pub struct StdErrLogger;\n \n impl Logger for StdErrLogger {\n     fn log(&mut self, args: &fmt::Arguments) {\n-        if should_log_console() {\n-            fmt::writeln(self as &mut rt::io::Writer, args);\n-        }\n+        fmt::writeln(self as &mut rt::io::Writer, args);\n     }\n }\n \n@@ -220,21 +218,6 @@ pub fn init() {\n     }\n }\n \n-#[fixed_stack_segment] #[inline(never)]\n-pub fn console_on() { unsafe { rust_log_console_on() } }\n-\n-#[fixed_stack_segment] #[inline(never)]\n-pub fn console_off() { unsafe { rust_log_console_off() } }\n-\n-#[fixed_stack_segment] #[inline(never)]\n-fn should_log_console() -> bool { unsafe { rust_should_log_console() != 0 } }\n-\n-extern {\n-    fn rust_log_console_on();\n-    fn rust_log_console_off();\n-    fn rust_should_log_console() -> uintptr_t;\n-}\n-\n // Tests for parse_logging_spec()\n #[test]\n fn parse_logging_spec_valid() {"}, {"sha": "f27107d372d79222e5cf740b163d21e8eb54cc8f", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/88593fc3fc808e78dd89be95c997c94ba4c816da/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/88593fc3fc808e78dd89be95c997c94ba4c816da/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=88593fc3fc808e78dd89be95c997c94ba4c816da", "patch": "@@ -326,27 +326,6 @@ rust_mktime(rust_tm* timeptr) {\n     return mktime(&t);\n }\n \n-static lock_and_signal log_lock;\n-static bool log_to_console = true;\n-\n-extern \"C\" CDECL void\n-rust_log_console_on() {\n-    scoped_lock with(log_lock);\n-    log_to_console = true;\n-}\n-\n-extern \"C\" CDECL void\n-rust_log_console_off() {\n-    scoped_lock with(log_lock);\n-    log_to_console = false;\n-}\n-\n-extern \"C\" CDECL uintptr_t\n-rust_should_log_console() {\n-    scoped_lock with(log_lock);\n-    return log_to_console;\n-}\n-\n extern \"C\" lock_and_signal*\n rust_create_little_lock() {\n     return new lock_and_signal();"}, {"sha": "f622b5dbb148eae28d51dedfc9e24ae81a857f64", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88593fc3fc808e78dd89be95c997c94ba4c816da/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/88593fc3fc808e78dd89be95c997c94ba4c816da/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=88593fc3fc808e78dd89be95c997c94ba4c816da", "patch": "@@ -18,9 +18,6 @@ rust_get_stderr\n rust_list_dir_val\n rust_list_dir_wfd_size\n rust_list_dir_wfd_fp_buf\n-rust_log_console_on\n-rust_log_console_off\n-rust_should_log_console\n rust_unset_sigprocmask\n rust_env_pairs\n upcall_rust_personality"}]}