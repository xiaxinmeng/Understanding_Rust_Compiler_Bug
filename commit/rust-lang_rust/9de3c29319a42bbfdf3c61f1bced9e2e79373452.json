{"sha": "9de3c29319a42bbfdf3c61f1bced9e2e79373452", "node_id": "C_kwDOAAsO6NoAKDlkZTNjMjkzMTlhNDJiYmZkZjNjNjFmMWJjZWQ5ZTJlNzkzNzM0NTI", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-06-07T13:05:54Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-06-12T07:34:12Z"}, "message": "add support for blessing panic=abort mir-opt tests", "tree": {"sha": "e36b3f5777c1d70a6de69777e151f1d4cd414bc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e36b3f5777c1d70a6de69777e151f1d4cd414bc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9de3c29319a42bbfdf3c61f1bced9e2e79373452", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmSGynQACgkQzXazX3c0\ndp7FIg//ZZm/r3E2hOuzKcvwuPz6XxwGC4DpYj0ytO7eP6/V/w8h7bKUZKHKheKQ\nEqhrk7mQoyXbatrNP8UFXcjXNuoROpYv1bBTwntcXM5OswEiSuTngw17y6b4DeDI\nwvYUxLAx9i9X455n1Mf/QNWRIaGvVYucy7fpzw3OPHjpBzdWB13rM0KMkViMAzRV\nl/gE3zDQFzZgcrKdLtGRvchixZgZiAJhb/FHEUY+ep3zmIMzSHgfIhpi+dEUqu4N\ngV3Gc5dP8aSlgBru6ZD3TRrJwQFIe18IXD4DY42Z11SNIBvR0FHryQgkyx8ZXoll\n+Qq0VwyraQv7gNHO5zf0sY6HBNIbJFTMYbVHBTPKzjos1K+8/1K50FqW1JNfel0W\ntHG9DoCPEDUwtIQ8WEpHHhZdGa/5/o9jYFOgwY7nU1KXJrhHXXmT0uWr1dkKii6u\n7IJiOpsI6y2ZKwEOaIujjNtUNlOt/WYn3K2q+QwUGde4iKHJKmKX+aIOVPfOKpLl\nunQ0S7dO87sXBVNQAkcHS72KIDoCrnlnFzgK+90hBtPZvJ9ieGVfXNTcYdBDb8Fg\nKqVNZBJQU/Zi4IUxc60JyfUiBkY2sWy3g07sHs+5CQMRFe85JnoTEbjFeBN15ByA\nByAhMEvX8ok8r891CRqgisk5BDlirBzFgSWt9fWMCMp0PapLfEM=\n=wNwy\n-----END PGP SIGNATURE-----", "payload": "tree e36b3f5777c1d70a6de69777e151f1d4cd414bc9\nparent 9ec370d40ceb86249b303c9d26f576229ad0b318\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1686143154 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1686555252 +0200\n\nadd support for blessing panic=abort mir-opt tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9de3c29319a42bbfdf3c61f1bced9e2e79373452", "html_url": "https://github.com/rust-lang/rust/commit/9de3c29319a42bbfdf3c61f1bced9e2e79373452", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9de3c29319a42bbfdf3c61f1bced9e2e79373452/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ec370d40ceb86249b303c9d26f576229ad0b318", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ec370d40ceb86249b303c9d26f576229ad0b318", "html_url": "https://github.com/rust-lang/rust/commit/9ec370d40ceb86249b303c9d26f576229ad0b318"}], "stats": {"total": 110, "additions": 107, "deletions": 3}, "files": [{"sha": "8ee63e561ba789846787ce670090067168e2dfae", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9de3c29319a42bbfdf3c61f1bced9e2e79373452/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9de3c29319a42bbfdf3c61f1bced9e2e79373452/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=9de3c29319a42bbfdf3c61f1bced9e2e79373452", "patch": "@@ -429,6 +429,7 @@ impl std::str::FromStr for RustcLto {\n pub struct TargetSelection {\n     pub triple: Interned<String>,\n     file: Option<Interned<String>>,\n+    synthetic: bool,\n }\n \n /// Newtype over `Vec<TargetSelection>` so we can implement custom parsing logic\n@@ -460,7 +461,15 @@ impl TargetSelection {\n         let triple = INTERNER.intern_str(triple);\n         let file = file.map(|f| INTERNER.intern_str(f));\n \n-        Self { triple, file }\n+        Self { triple, file, synthetic: false }\n+    }\n+\n+    pub fn create_synthetic(triple: &str, file: &str) -> Self {\n+        Self {\n+            triple: INTERNER.intern_str(triple),\n+            file: Some(INTERNER.intern_str(file)),\n+            synthetic: true,\n+        }\n     }\n \n     pub fn rustc_target_arg(&self) -> &str {\n@@ -478,6 +487,11 @@ impl TargetSelection {\n     pub fn ends_with(&self, needle: &str) -> bool {\n         self.triple.ends_with(needle)\n     }\n+\n+    // See src/bootstrap/synthetic_targets.rs\n+    pub fn is_synthetic(&self) -> bool {\n+        self.synthetic\n+    }\n }\n \n impl fmt::Display for TargetSelection {"}, {"sha": "d7e77aeb338f6208e4f73d31314896e2e3938ff4", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9de3c29319a42bbfdf3c61f1bced9e2e79373452/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9de3c29319a42bbfdf3c61f1bced9e2e79373452/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=9de3c29319a42bbfdf3c61f1bced9e2e79373452", "patch": "@@ -61,6 +61,7 @@ mod run;\n mod sanity;\n mod setup;\n mod suggest;\n+mod synthetic_targets;\n mod tarball;\n mod test;\n mod tool;"}, {"sha": "7eeac9025c9b7a5b5876183a0cc774926c4f62a6", "filename": "src/bootstrap/synthetic_targets.rs", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/9de3c29319a42bbfdf3c61f1bced9e2e79373452/src%2Fbootstrap%2Fsynthetic_targets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9de3c29319a42bbfdf3c61f1bced9e2e79373452/src%2Fbootstrap%2Fsynthetic_targets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsynthetic_targets.rs?ref=9de3c29319a42bbfdf3c61f1bced9e2e79373452", "patch": "@@ -0,0 +1,82 @@\n+//! In some cases, parts of bootstrap need to change part of a target spec just for one or a few\n+//! steps. Adding these targets to rustc proper would \"leak\" this implementation detail of\n+//! bootstrap, and would make it more complex to apply additional changes if the need arises.\n+//!\n+//! To address that problem, this module implements support for \"synthetic targets\". Synthetic\n+//! targets are custom target specs generated using builtin target specs as their base. You can use\n+//! one of the target specs already defined in this module, or create new ones by adding a new step\n+//! that calls create_synthetic_target.\n+\n+use crate::builder::{Builder, ShouldRun, Step};\n+use crate::config::TargetSelection;\n+use crate::Compiler;\n+use std::process::{Command, Stdio};\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub(crate) struct MirOptPanicAbortSyntheticTarget {\n+    pub(crate) compiler: Compiler,\n+    pub(crate) base: TargetSelection,\n+}\n+\n+impl Step for MirOptPanicAbortSyntheticTarget {\n+    type Output = TargetSelection;\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = false;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.never()\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) -> Self::Output {\n+        create_synthetic_target(builder, self.compiler, \"miropt-abort\", self.base, |spec| {\n+            spec.insert(\"panic-strategy\".into(), \"abort\".into());\n+        })\n+    }\n+}\n+\n+fn create_synthetic_target(\n+    builder: &Builder<'_>,\n+    compiler: Compiler,\n+    suffix: &str,\n+    base: TargetSelection,\n+    customize: impl FnOnce(&mut serde_json::Map<String, serde_json::Value>),\n+) -> TargetSelection {\n+    if base.contains(\"synthetic\") {\n+        // This check is not strictly needed, but nothing currently needs recursive synthetic\n+        // targets. If the need arises, removing this in the future *SHOULD* be safe.\n+        panic!(\"cannot create synthetic targets with other synthetic targets as their base\");\n+    }\n+\n+    let name = format!(\"{base}-synthetic-{suffix}\");\n+    let path = builder.out.join(\"synthetic-target-specs\").join(format!(\"{name}.json\"));\n+    std::fs::create_dir_all(path.parent().unwrap()).unwrap();\n+\n+    if builder.config.dry_run() {\n+        std::fs::write(&path, b\"dry run\\n\").unwrap();\n+        return TargetSelection::create_synthetic(&name, path.to_str().unwrap());\n+    }\n+\n+    let mut cmd = Command::new(builder.rustc(compiler));\n+    cmd.arg(\"--target\").arg(base.rustc_target_arg());\n+    cmd.args([\"-Zunstable-options\", \"--print\", \"target-spec-json\"]);\n+    cmd.stdout(Stdio::piped());\n+\n+    let output = cmd.spawn().unwrap().wait_with_output().unwrap();\n+    if !output.status.success() {\n+        panic!(\"failed to gather the target spec for {base}\");\n+    }\n+\n+    let mut spec: serde_json::Value = serde_json::from_slice(&output.stdout).unwrap();\n+    let spec_map = spec.as_object_mut().unwrap();\n+\n+    // The `is-builtin` attribute of a spec needs to be removed, otherwise rustc will complain.\n+    spec_map.remove(\"is-builtin\");\n+\n+    customize(spec_map);\n+\n+    std::fs::write(&path, &serde_json::to_vec_pretty(&spec).unwrap()).unwrap();\n+    let target = TargetSelection::create_synthetic(&name, path.to_str().unwrap());\n+    crate::cc_detect::find_target(builder, target);\n+\n+    target\n+}"}, {"sha": "d7f0205cbed668dd6810e13ad758aa7238f2f53f", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9de3c29319a42bbfdf3c61f1bced9e2e79373452/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9de3c29319a42bbfdf3c61f1bced9e2e79373452/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=9de3c29319a42bbfdf3c61f1bced9e2e79373452", "patch": "@@ -23,6 +23,7 @@ use crate::doc::DocumentationFormat;\n use crate::flags::Subcommand;\n use crate::llvm;\n use crate::render_tests::add_flags_and_try_run_tests;\n+use crate::synthetic_targets::MirOptPanicAbortSyntheticTarget;\n use crate::tool::{self, SourceType, Tool};\n use crate::toolstate::ToolState;\n use crate::util::{self, add_link_lib_path, dylib_path, dylib_path_var, output, t, up_to_date};\n@@ -1347,8 +1348,8 @@ impl Step for MirOpt {\n         };\n \n         // We use custom logic to bless the mir-opt suite: mir-opt tests have multiple variants\n-        // (32bit vs 64bit), and all of them needs to be blessed. When blessing, we try best-effort\n-        // to also bless the other variants, to aid developers.\n+        // (32bit vs 64bit, and panic=abort vs panic=unwind), and all of them needs to be blessed.\n+        // When blessing, we try best-effort to also bless the other variants, to aid developers.\n         if builder.config.cmd.bless() {\n             let targets = MIR_OPT_BLESS_TARGET_MAPPING\n                 .iter()\n@@ -1385,6 +1386,12 @@ You can add that mapping by changing MIR_OPT_BLESS_TARGET_MAPPING in src/bootstr\n \n             for target in targets {\n                 run(target);\n+\n+                let panic_abort_target = builder.ensure(MirOptPanicAbortSyntheticTarget {\n+                    compiler: self.compiler,\n+                    base: target,\n+                });\n+                run(panic_abort_target);\n             }\n         } else {\n             run(self.target);"}]}