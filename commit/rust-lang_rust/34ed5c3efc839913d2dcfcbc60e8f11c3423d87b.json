{"sha": "34ed5c3efc839913d2dcfcbc60e8f11c3423d87b", "node_id": "C_kwDOAAsO6NoAKDM0ZWQ1YzNlZmM4Mzk5MTNkMmRjZmNiYzYwZThmMTFjMzQyM2Q4N2I", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-03-25T10:12:35Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-04-16T15:35:51Z"}, "message": "Alloc `hir::Lit` in an arena to remove the destructor from `Expr`\n\nThis allows allocating `Expr`s into a dropless arena, which is useful\nfor using length prefixed thing slices in HIR, since these can only be\nallocated in the dropless arena and not in a typed arena. This is\nsomething I'm working on.", "tree": {"sha": "34ee36eac838d5ab739be1ab531b1a18b0215882", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34ee36eac838d5ab739be1ab531b1a18b0215882"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34ed5c3efc839913d2dcfcbc60e8f11c3423d87b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34ed5c3efc839913d2dcfcbc60e8f11c3423d87b", "html_url": "https://github.com/rust-lang/rust/commit/34ed5c3efc839913d2dcfcbc60e8f11c3423d87b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34ed5c3efc839913d2dcfcbc60e8f11c3423d87b/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "html_url": "https://github.com/rust-lang/rust/commit/1b50ea9abb65b33aac7285dbe36b37f9e33381a2"}], "stats": {"total": 72, "additions": 34, "deletions": 38}, "files": [{"sha": "0d212b3e130a2d437156df9cfac869555b920c7a", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 25, "deletions": 30, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/34ed5c3efc839913d2dcfcbc60e8f11c3423d87b/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ed5c3efc839913d2dcfcbc60e8f11c3423d87b/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=34ed5c3efc839913d2dcfcbc60e8f11c3423d87b", "patch": "@@ -121,12 +121,16 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             LitKind::Err\n                         }\n                     };\n-                    hir::ExprKind::Lit(respan(self.lower_span(e.span), lit_kind))\n+                    let lit = self.arena.alloc(respan(self.lower_span(e.span), lit_kind));\n+                    hir::ExprKind::Lit(lit)\n+                }\n+                ExprKind::IncludedBytes(bytes) => {\n+                    let lit = self.arena.alloc(respan(\n+                        self.lower_span(e.span),\n+                        LitKind::ByteStr(bytes.clone(), StrStyle::Cooked),\n+                    ));\n+                    hir::ExprKind::Lit(lit)\n                 }\n-                ExprKind::IncludedBytes(bytes) => hir::ExprKind::Lit(respan(\n-                    self.lower_span(e.span),\n-                    LitKind::ByteStr(bytes.clone(), StrStyle::Cooked),\n-                )),\n                 ExprKind::Cast(expr, ty) => {\n                     let expr = self.lower_expr(expr);\n                     let ty =\n@@ -1746,40 +1750,31 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     pub(super) fn expr_usize(&mut self, sp: Span, value: usize) -> hir::Expr<'hir> {\n-        self.expr(\n-            sp,\n-            hir::ExprKind::Lit(hir::Lit {\n-                span: sp,\n-                node: ast::LitKind::Int(\n-                    value as u128,\n-                    ast::LitIntType::Unsigned(ast::UintTy::Usize),\n-                ),\n-            }),\n-        )\n+        let lit = self.arena.alloc(hir::Lit {\n+            span: sp,\n+            node: ast::LitKind::Int(value as u128, ast::LitIntType::Unsigned(ast::UintTy::Usize)),\n+        });\n+        self.expr(sp, hir::ExprKind::Lit(lit))\n     }\n \n     pub(super) fn expr_u32(&mut self, sp: Span, value: u32) -> hir::Expr<'hir> {\n-        self.expr(\n-            sp,\n-            hir::ExprKind::Lit(hir::Lit {\n-                span: sp,\n-                node: ast::LitKind::Int(value.into(), ast::LitIntType::Unsigned(ast::UintTy::U32)),\n-            }),\n-        )\n+        let lit = self.arena.alloc(hir::Lit {\n+            span: sp,\n+            node: ast::LitKind::Int(value.into(), ast::LitIntType::Unsigned(ast::UintTy::U32)),\n+        });\n+        self.expr(sp, hir::ExprKind::Lit(lit))\n     }\n \n     pub(super) fn expr_char(&mut self, sp: Span, value: char) -> hir::Expr<'hir> {\n-        self.expr(sp, hir::ExprKind::Lit(hir::Lit { span: sp, node: ast::LitKind::Char(value) }))\n+        let lit = self.arena.alloc(hir::Lit { span: sp, node: ast::LitKind::Char(value) });\n+        self.expr(sp, hir::ExprKind::Lit(lit))\n     }\n \n     pub(super) fn expr_str(&mut self, sp: Span, value: Symbol) -> hir::Expr<'hir> {\n-        self.expr(\n-            sp,\n-            hir::ExprKind::Lit(hir::Lit {\n-                span: sp,\n-                node: ast::LitKind::Str(value, ast::StrStyle::Cooked),\n-            }),\n-        )\n+        let lit = self\n+            .arena\n+            .alloc(hir::Lit { span: sp, node: ast::LitKind::Str(value, ast::StrStyle::Cooked) });\n+        self.expr(sp, hir::ExprKind::Lit(lit))\n     }\n \n     pub(super) fn expr_call_mut("}, {"sha": "3e5b3c498eee9356a64a6f19c65d24c69923c0e2", "filename": "compiler/rustc_hir/src/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34ed5c3efc839913d2dcfcbc60e8f11c3423d87b/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ed5c3efc839913d2dcfcbc60e8f11c3423d87b/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Farena.rs?ref=34ed5c3efc839913d2dcfcbc60e8f11c3423d87b", "patch": "@@ -51,6 +51,7 @@ macro_rules! arena_types {\n             [] type_binding: rustc_hir::TypeBinding<'tcx>,\n             [] variant: rustc_hir::Variant<'tcx>,\n             [] where_predicate: rustc_hir::WherePredicate<'tcx>,\n+            [] lit: rustc_hir::Lit,\n         ]);\n     )\n }"}, {"sha": "b274e628079889d59859ec6aead1a4ce0aeef8cf", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ed5c3efc839913d2dcfcbc60e8f11c3423d87b/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ed5c3efc839913d2dcfcbc60e8f11c3423d87b/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=34ed5c3efc839913d2dcfcbc60e8f11c3423d87b", "patch": "@@ -1957,7 +1957,7 @@ pub enum ExprKind<'hir> {\n     /// A unary operation (e.g., `!x`, `*x`).\n     Unary(UnOp, &'hir Expr<'hir>),\n     /// A literal (e.g., `1`, `\"foo\"`).\n-    Lit(Lit),\n+    Lit(&'hir Lit),\n     /// A cast (e.g., `foo as f64`).\n     Cast(&'hir Expr<'hir>, &'hir Ty<'hir>),\n     /// A type reference (e.g., `Foo`)."}, {"sha": "e82821850d62e45b04e1755df75871e0a411860b", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34ed5c3efc839913d2dcfcbc60e8f11c3423d87b/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ed5c3efc839913d2dcfcbc60e8f11c3423d87b/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=34ed5c3efc839913d2dcfcbc60e8f11c3423d87b", "patch": "@@ -1252,7 +1252,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 node: rustc_ast::LitKind::Int(lit, rustc_ast::LitIntType::Unsuffixed),\n                 span,\n             }) => {\n-                let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) else { return false; };\n+                let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(*span) else { return false; };\n                 if !(snippet.starts_with(\"0x\") || snippet.starts_with(\"0X\")) {\n                     return false;\n                 }\n@@ -1311,7 +1311,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // We have satisfied all requirements to provide a suggestion. Emit it.\n         err.span_suggestion(\n-            span,\n+            *span,\n             format!(\"if you meant to create a null pointer, use `{null_path_str}()`\"),\n             null_path_str + \"()\",\n             Applicability::MachineApplicable,"}, {"sha": "8c3ad24eeed4393d245148b9d3d07b66af75aa8c", "filename": "src/tools/clippy/clippy_lints/src/bool_assert_comparison.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ed5c3efc839913d2dcfcbc60e8f11c3423d87b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ed5c3efc839913d2dcfcbc60e8f11c3423d87b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbool_assert_comparison.rs?ref=34ed5c3efc839913d2dcfcbc60e8f11c3423d87b", "patch": "@@ -41,7 +41,7 @@ fn extract_bool_lit(e: &Expr<'_>) -> Option<bool> {\n     }) = e.kind\n         && !e.span.from_expansion()\n     {\n-        Some(b)\n+        Some(*b)\n     } else {\n         None\n     }"}, {"sha": "7d28c11162458d13f3f042e5b0e6122f28ac62e8", "filename": "src/tools/clippy/clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ed5c3efc839913d2dcfcbc60e8f11c3423d87b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ed5c3efc839913d2dcfcbc60e8f11c3423d87b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_strip.rs?ref=34ed5c3efc839913d2dcfcbc60e8f11c3423d87b", "patch": "@@ -159,7 +159,7 @@ fn eq_pattern_length<'tcx>(cx: &LateContext<'tcx>, pattern: &Expr<'_>, expr: &'t\n         ..\n     }) = expr.kind\n     {\n-        constant_length(cx, pattern).map_or(false, |length| length == n)\n+        constant_length(cx, pattern).map_or(false, |length| length == *n)\n     } else {\n         len_arg(cx, expr).map_or(false, |arg| eq_expr_value(cx, pattern, arg))\n     }"}, {"sha": "33bc20dad6b788b5ab61107336bc358461db125b", "filename": "src/tools/clippy/clippy_lints/src/matches/match_like_matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ed5c3efc839913d2dcfcbc60e8f11c3423d87b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ed5c3efc839913d2dcfcbc60e8f11c3423d87b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs?ref=34ed5c3efc839913d2dcfcbc60e8f11c3423d87b", "patch": "@@ -162,7 +162,7 @@ fn find_bool_lit(ex: &ExprKind<'_>) -> Option<bool> {\n                 node: LitKind::Bool(b), ..\n             }) = exp.kind\n             {\n-                Some(b)\n+                Some(*b)\n             } else {\n                 None\n             }"}, {"sha": "23d23f25f14cf401d900f46e4cafcbd234b1dc1d", "filename": "src/tools/clippy/clippy_lints/src/methods/open_options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ed5c3efc839913d2dcfcbc60e8f11c3423d87b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ed5c3efc839913d2dcfcbc60e8f11c3423d87b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fopen_options.rs?ref=34ed5c3efc839913d2dcfcbc60e8f11c3423d87b", "patch": "@@ -48,7 +48,7 @@ fn get_open_options(cx: &LateContext<'_>, argument: &Expr<'_>, options: &mut Vec\n                         ..\n                     } = *span\n                     {\n-                        if lit { Argument::True } else { Argument::False }\n+                        if *lit { Argument::True } else { Argument::False }\n                     } else {\n                         // The function is called with a literal which is not a boolean literal.\n                         // This is theoretically possible, but not very likely."}, {"sha": "2dac807c420e321ed7eb9ea2c5436599240a206e", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ed5c3efc839913d2dcfcbc60e8f11c3423d87b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ed5c3efc839913d2dcfcbc60e8f11c3423d87b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=34ed5c3efc839913d2dcfcbc60e8f11c3423d87b", "patch": "@@ -430,7 +430,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 kind!(\"Unary(UnOp::{op:?}, {inner})\");\n                 self.expr(inner);\n             },\n-            ExprKind::Lit(ref lit) => {\n+            ExprKind::Lit(lit) => {\n                 bind!(self, lit);\n                 kind!(\"Lit(ref {lit})\");\n                 self.lit(lit);"}]}