{"sha": "daf1a96ff07d7b6e7ae3e2878b300058091bbf6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZjFhOTZmZjA3ZDdiNmU3YWUzZTI4NzhiMzAwMDU4MDkxYmJmNmU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-08-22T19:58:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-22T19:58:35Z"}, "message": "Merge #1722\n\n1722: Parse `box` keyword in patterns below top-level r=matklad a=ecstatic-morse\n\nThis extends the parser to handle patterns like `if let Some(box x) = ...` where the `box` keyword is not at the top-level. The last line of the added test caused a `ParseError`. This is a variant of #1412 which was not fixed by #1414.\r\n\r\n~~I'm not familiar with `rust-analyzer`, otherwise I would fix this as well :smile:.~~\n\nCo-authored-by: Dylan MacKenzie <ecstaticmorse@gmail.com>", "tree": {"sha": "3419abf3750aefc3d36d143a663f265714fa2a4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3419abf3750aefc3d36d143a663f265714fa2a4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/daf1a96ff07d7b6e7ae3e2878b300058091bbf6e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdXvPrCRBK7hj4Ov3rIwAAdHIIAFDHP+2A1yf4oO5sElsJr/p8\ns+7RcYUo2Yyrec1x6oFrapFQuF93BD3A34NgK2JP3U2D8IqyVYFzHG1vXC6dygvN\nxHqU+t8osxhu8ZXqon0mxTr63fvLP49tEZGmLRQpjbJFwxL+PqIzUG/t2HOkGQEo\ne0KEYk1ySZu74hLY8kC61Cj6Zub/woAMOPSbiaH3Pl5TUPK2ibFBUAPIePYvyjES\nDXcKKnxYwIJ1t3TVGrLsZyajoy0K1uthfQjT0p3tApMs2d5w+0PEuP7rcK/Mkb5G\n4+eoGD4UpPlIWZQEH3wq2m8a4PCJOkeyJiEPIt/VNqxLv3MTtkEE35ibGIp8tqY=\n=9YXK\n-----END PGP SIGNATURE-----\n", "payload": "tree 3419abf3750aefc3d36d143a663f265714fa2a4f\nparent 08e5d394dfbca28b15ed5dc772d55d48f87c3f54\nparent 3e14b16c4d67e6a87e21424dd56732b511724e04\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1566503915 +0000\ncommitter GitHub <noreply@github.com> 1566503915 +0000\n\nMerge #1722\n\n1722: Parse `box` keyword in patterns below top-level r=matklad a=ecstatic-morse\n\nThis extends the parser to handle patterns like `if let Some(box x) = ...` where the `box` keyword is not at the top-level. The last line of the added test caused a `ParseError`. This is a variant of #1412 which was not fixed by #1414.\r\n\r\n~~I'm not familiar with `rust-analyzer`, otherwise I would fix this as well :smile:.~~\n\nCo-authored-by: Dylan MacKenzie <ecstaticmorse@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/daf1a96ff07d7b6e7ae3e2878b300058091bbf6e", "html_url": "https://github.com/rust-lang/rust/commit/daf1a96ff07d7b6e7ae3e2878b300058091bbf6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/daf1a96ff07d7b6e7ae3e2878b300058091bbf6e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08e5d394dfbca28b15ed5dc772d55d48f87c3f54", "url": "https://api.github.com/repos/rust-lang/rust/commits/08e5d394dfbca28b15ed5dc772d55d48f87c3f54", "html_url": "https://github.com/rust-lang/rust/commit/08e5d394dfbca28b15ed5dc772d55d48f87c3f54"}, {"sha": "3e14b16c4d67e6a87e21424dd56732b511724e04", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e14b16c4d67e6a87e21424dd56732b511724e04", "html_url": "https://github.com/rust-lang/rust/commit/3e14b16c4d67e6a87e21424dd56732b511724e04"}], "stats": {"total": 65, "additions": 52, "deletions": 13}, "files": [{"sha": "ab8fb9f6e906af6d7fd9ad23a3e18d2abf5e1acc", "filename": "crates/ra_parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daf1a96ff07d7b6e7ae3e2878b300058091bbf6e/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf1a96ff07d7b6e7ae3e2878b300058091bbf6e/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=daf1a96ff07d7b6e7ae3e2878b300058091bbf6e", "patch": "@@ -414,6 +414,8 @@ pub(crate) fn match_arm_list(p: &mut Parser) {\n //         X | Y if Z => (),\n //         | X | Y if Z => (),\n //         | X => (),\n+//         box X => (),\n+//         Some(box X) => (),\n //     };\n // }\n fn match_arm(p: &mut Parser) -> BlockLike {"}, {"sha": "1f6a6fd48ba8cb73e6779434a04508b7faa751cc", "filename": "crates/ra_parser/src/grammar/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daf1a96ff07d7b6e7ae3e2878b300058091bbf6e/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf1a96ff07d7b6e7ae3e2878b300058091bbf6e/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=daf1a96ff07d7b6e7ae3e2878b300058091bbf6e", "patch": "@@ -2,7 +2,7 @@ use super::*;\n \n pub(super) const PATTERN_FIRST: TokenSet = expressions::LITERAL_FIRST\n     .union(paths::PATH_FIRST)\n-    .union(token_set![REF_KW, MUT_KW, L_PAREN, L_BRACK, AMP, UNDERSCORE, MINUS]);\n+    .union(token_set![BOX_KW, REF_KW, MUT_KW, L_PAREN, L_BRACK, AMP, UNDERSCORE, MINUS]);\n \n pub(super) fn pattern(p: &mut Parser) {\n     pattern_r(p, PAT_RECOVERY_SET);"}, {"sha": "2d476278d1a1289235ee06eda2913d52b62a2ad4", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0066_match_arm.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daf1a96ff07d7b6e7ae3e2878b300058091bbf6e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf1a96ff07d7b6e7ae3e2878b300058091bbf6e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.rs?ref=daf1a96ff07d7b6e7ae3e2878b300058091bbf6e", "patch": "@@ -5,5 +5,7 @@ fn foo() {\n         X | Y if Z => (),\n         | X | Y if Z => (),\n         | X => (),\n+        box X => (),\n+        Some(box X) => (),\n     };\n }"}, {"sha": "28d501459db21ad425e95f9eaaf63cdf32737cc0", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0066_match_arm.txt", "status": "modified", "additions": 47, "deletions": 12, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/daf1a96ff07d7b6e7ae3e2878b300058091bbf6e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.txt", "raw_url": "https://github.com/rust-lang/rust/raw/daf1a96ff07d7b6e7ae3e2878b300058091bbf6e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.txt?ref=daf1a96ff07d7b6e7ae3e2878b300058091bbf6e", "patch": "@@ -1,5 +1,5 @@\n-SOURCE_FILE@[0; 167)\n-  FN_DEF@[0; 166)\n+SOURCE_FILE@[0; 215)\n+  FN_DEF@[0; 214)\n     FN_KW@[0; 2) \"fn\"\n     WHITESPACE@[2; 3) \" \"\n     NAME@[3; 6)\n@@ -8,18 +8,18 @@ SOURCE_FILE@[0; 167)\n       L_PAREN@[6; 7) \"(\"\n       R_PAREN@[7; 8) \")\"\n     WHITESPACE@[8; 9) \" \"\n-    BLOCK@[9; 166)\n+    BLOCK@[9; 214)\n       L_CURLY@[9; 10) \"{\"\n       WHITESPACE@[10; 15) \"\\n    \"\n-      EXPR_STMT@[15; 164)\n-        MATCH_EXPR@[15; 163)\n+      EXPR_STMT@[15; 212)\n+        MATCH_EXPR@[15; 211)\n           MATCH_KW@[15; 20) \"match\"\n           WHITESPACE@[20; 21) \" \"\n           TUPLE_EXPR@[21; 23)\n             L_PAREN@[21; 22) \"(\"\n             R_PAREN@[22; 23) \")\"\n           WHITESPACE@[23; 24) \" \"\n-          MATCH_ARM_LIST@[24; 163)\n+          MATCH_ARM_LIST@[24; 211)\n             L_CURLY@[24; 25) \"{\"\n             WHITESPACE@[25; 34) \"\\n        \"\n             MATCH_ARM@[34; 41)\n@@ -141,9 +141,44 @@ SOURCE_FILE@[0; 167)\n                 L_PAREN@[154; 155) \"(\"\n                 R_PAREN@[155; 156) \")\"\n             COMMA@[156; 157) \",\"\n-            WHITESPACE@[157; 162) \"\\n    \"\n-            R_CURLY@[162; 163) \"}\"\n-        SEMI@[163; 164) \";\"\n-      WHITESPACE@[164; 165) \"\\n\"\n-      R_CURLY@[165; 166) \"}\"\n-  WHITESPACE@[166; 167) \"\\n\"\n+            WHITESPACE@[157; 166) \"\\n        \"\n+            MATCH_ARM@[166; 177)\n+              BIND_PAT@[166; 171)\n+                BOX_KW@[166; 169) \"box\"\n+                WHITESPACE@[169; 170) \" \"\n+                NAME@[170; 171)\n+                  IDENT@[170; 171) \"X\"\n+              WHITESPACE@[171; 172) \" \"\n+              FAT_ARROW@[172; 174) \"=>\"\n+              WHITESPACE@[174; 175) \" \"\n+              TUPLE_EXPR@[175; 177)\n+                L_PAREN@[175; 176) \"(\"\n+                R_PAREN@[176; 177) \")\"\n+            COMMA@[177; 178) \",\"\n+            WHITESPACE@[178; 187) \"\\n        \"\n+            MATCH_ARM@[187; 204)\n+              TUPLE_STRUCT_PAT@[187; 198)\n+                PATH@[187; 191)\n+                  PATH_SEGMENT@[187; 191)\n+                    NAME_REF@[187; 191)\n+                      IDENT@[187; 191) \"Some\"\n+                L_PAREN@[191; 192) \"(\"\n+                BIND_PAT@[192; 197)\n+                  BOX_KW@[192; 195) \"box\"\n+                  WHITESPACE@[195; 196) \" \"\n+                  NAME@[196; 197)\n+                    IDENT@[196; 197) \"X\"\n+                R_PAREN@[197; 198) \")\"\n+              WHITESPACE@[198; 199) \" \"\n+              FAT_ARROW@[199; 201) \"=>\"\n+              WHITESPACE@[201; 202) \" \"\n+              TUPLE_EXPR@[202; 204)\n+                L_PAREN@[202; 203) \"(\"\n+                R_PAREN@[203; 204) \")\"\n+            COMMA@[204; 205) \",\"\n+            WHITESPACE@[205; 210) \"\\n    \"\n+            R_CURLY@[210; 211) \"}\"\n+        SEMI@[211; 212) \";\"\n+      WHITESPACE@[212; 213) \"\\n\"\n+      R_CURLY@[213; 214) \"}\"\n+  WHITESPACE@[214; 215) \"\\n\""}]}