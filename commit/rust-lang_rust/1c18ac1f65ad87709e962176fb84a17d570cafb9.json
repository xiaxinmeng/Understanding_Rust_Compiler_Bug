{"sha": "1c18ac1f65ad87709e962176fb84a17d570cafb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMThhYzFmNjVhZDg3NzA5ZTk2MjE3NmZiODRhMTdkNTcwY2FmYjk=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-18T11:22:41Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-24T06:50:45Z"}, "message": "privacy: HirIdify ObsoleteVisiblePrivateTypesVisitor", "tree": {"sha": "5513373a6698fd5bfc259af29c4100671f2188a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5513373a6698fd5bfc259af29c4100671f2188a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c18ac1f65ad87709e962176fb84a17d570cafb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c18ac1f65ad87709e962176fb84a17d570cafb9", "html_url": "https://github.com/rust-lang/rust/commit/1c18ac1f65ad87709e962176fb84a17d570cafb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c18ac1f65ad87709e962176fb84a17d570cafb9/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58ed6833790d2a0a3aeda57336b4106516278c52", "url": "https://api.github.com/repos/rust-lang/rust/commits/58ed6833790d2a0a3aeda57336b4106516278c52", "html_url": "https://github.com/rust-lang/rust/commit/58ed6833790d2a0a3aeda57336b4106516278c52"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "825721a1a96aeb1ad7738c9d8913f4d4081a6ec5", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c18ac1f65ad87709e962176fb84a17d570cafb9/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c18ac1f65ad87709e962176fb84a17d570cafb9/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=1c18ac1f65ad87709e962176fb84a17d570cafb9", "patch": "@@ -21,7 +21,7 @@ use rustc::ty::{self, TyCtxt, Ty, TraitRef, TypeFoldable, GenericParamDefKind};\n use rustc::ty::fold::TypeVisitor;\n use rustc::ty::query::Providers;\n use rustc::ty::subst::Substs;\n-use rustc::util::nodemap::NodeSet;\n+use rustc::util::nodemap::HirIdSet;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n use syntax::ast::{self, DUMMY_NODE_ID, Ident};\n@@ -1152,7 +1152,7 @@ struct ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx: 'a> {\n     access_levels: &'a AccessLevels,\n     in_variant: bool,\n     // Set of errors produced by this obsolete visitor.\n-    old_error_set: NodeSet,\n+    old_error_set: HirIdSet,\n }\n \n struct ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b: 'a, 'tcx: 'b> {\n@@ -1196,7 +1196,7 @@ impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n     fn check_generic_bound(&mut self, bound: &hir::GenericBound) {\n         if let hir::GenericBound::Trait(ref trait_ref, _) = *bound {\n             if self.path_is_private_type(&trait_ref.trait_ref.path) {\n-                self.old_error_set.insert(trait_ref.trait_ref.ref_id);\n+                self.old_error_set.insert(trait_ref.trait_ref.hir_ref_id);\n             }\n         }\n     }\n@@ -1452,7 +1452,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n     fn visit_ty(&mut self, t: &'tcx hir::Ty) {\n         if let hir::TyKind::Path(hir::QPath::Resolved(_, ref path)) = t.node {\n             if self.path_is_private_type(path) {\n-                self.old_error_set.insert(t.id);\n+                self.old_error_set.insert(t.hir_id);\n             }\n         }\n         intravisit::walk_ty(self, t)\n@@ -1596,7 +1596,7 @@ impl<'a, 'tcx> DefIdVisitor<'a, 'tcx> for SearchInterfaceForPrivateItemsVisitor<\n struct PrivateItemsInPublicInterfacesVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     has_pub_restricted: bool,\n-    old_error_set: &'a NodeSet,\n+    old_error_set: &'a HirIdSet,\n     private_crates: FxHashSet<CrateNum>\n }\n \n@@ -1608,7 +1608,7 @@ impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n         // Slow path taken only if there any errors in the crate.\n         for &id in self.old_error_set {\n             // Walk up the nodes until we find `item_id` (or we hit a root).\n-            let mut id = id;\n+            let mut id = self.tcx.hir().hir_to_node_id(id);\n             loop {\n                 if id == item_id {\n                     has_old_errors = true;"}]}