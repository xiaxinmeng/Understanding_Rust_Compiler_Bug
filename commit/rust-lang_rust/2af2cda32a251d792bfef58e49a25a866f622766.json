{"sha": "2af2cda32a251d792bfef58e49a25a866f622766", "node_id": "C_kwDOAAsO6NoAKDJhZjJjZGEzMmEyNTFkNzkyYmZlZjU4ZTQ5YTI1YTg2NmY2MjI3NjY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-31T19:30:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-31T19:30:08Z"}, "message": "Rollup merge of #100838 - hkmatsumoto:move-gen-args-to-trait-when-appropriate, r=davidtwco\n\nSuggest moving redundant generic args of an assoc fn to its trait\n\nCloses #89064", "tree": {"sha": "c4310e0aa37b90450ddf3427e4119c868b44b719", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4310e0aa37b90450ddf3427e4119c868b44b719"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2af2cda32a251d792bfef58e49a25a866f622766", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjD7bACRBK7hj4Ov3rIwAAuj0IAKFarHp8iW1EMItF4q2G/dbr\nIPcqnLU03bSgNisKlLoHtbXBZZVI87Z+Dm5ALMD5nznaaj6LSRMv8yd/CHkgbbSa\nqrLcry0v+DRJG7TWDx2gJe1icfWeMenNP8gQmpFsw+V4cpeo3pISoHQs0IBavey/\nFpGwGhCqve+7uVi2DQU+RvxNsPhIpj9nxFONCz0l68fo5aFJ3NmYoLooIAkbg9wP\nTmqVVmHGHfo2QyUwqABZiCfN48lp2wzTrLEiXvOC4hR5zlzRo7ojO9Bp5bGoc914\ny2HEWlPAD4B3Bl0Tq8BrYH4MbTN5Yaq3qmEkvoBBF23oIMe/RcBpsXyqo2fBQ20=\n=Qhun\n-----END PGP SIGNATURE-----\n", "payload": "tree c4310e0aa37b90450ddf3427e4119c868b44b719\nparent 6438f4addcf0aa012048448a7b208eaee0851d06\nparent 152913767a365d963f2486fb88eff976501d7f72\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661974208 +0200\ncommitter GitHub <noreply@github.com> 1661974208 +0200\n\nRollup merge of #100838 - hkmatsumoto:move-gen-args-to-trait-when-appropriate, r=davidtwco\n\nSuggest moving redundant generic args of an assoc fn to its trait\n\nCloses #89064\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2af2cda32a251d792bfef58e49a25a866f622766", "html_url": "https://github.com/rust-lang/rust/commit/2af2cda32a251d792bfef58e49a25a866f622766", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2af2cda32a251d792bfef58e49a25a866f622766/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6438f4addcf0aa012048448a7b208eaee0851d06", "url": "https://api.github.com/repos/rust-lang/rust/commits/6438f4addcf0aa012048448a7b208eaee0851d06", "html_url": "https://github.com/rust-lang/rust/commit/6438f4addcf0aa012048448a7b208eaee0851d06"}, {"sha": "152913767a365d963f2486fb88eff976501d7f72", "url": "https://api.github.com/repos/rust-lang/rust/commits/152913767a365d963f2486fb88eff976501d7f72", "html_url": "https://github.com/rust-lang/rust/commit/152913767a365d963f2486fb88eff976501d7f72"}], "stats": {"total": 248, "additions": 245, "deletions": 3}, "files": [{"sha": "d4b5e5e2fe44df3e917c11a7d97d9fb72929e067", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/2af2cda32a251d792bfef58e49a25a866f622766/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2af2cda32a251d792bfef58e49a25a866f622766/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=2af2cda32a251d792bfef58e49a25a866f622766", "patch": "@@ -523,6 +523,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n                 if self.not_enough_args_provided() {\n                     self.suggest_adding_args(err);\n                 } else if self.too_many_args_provided() {\n+                    self.suggest_moving_args_from_assoc_fn_to_trait(err);\n                     self.suggest_removing_args_or_generics(err);\n                 } else {\n                     unreachable!();\n@@ -653,6 +654,123 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n         }\n     }\n \n+    /// Suggests moving redundant argument(s) of an associate function to the\n+    /// trait it belongs to.\n+    ///\n+    /// ```compile_fail\n+    /// Into::into::<Option<_>>(42) // suggests considering `Into::<Option<_>>::into(42)`\n+    /// ```\n+    fn suggest_moving_args_from_assoc_fn_to_trait(&self, err: &mut Diagnostic) {\n+        let trait_ = match self.tcx.trait_of_item(self.def_id) {\n+            Some(def_id) => def_id,\n+            None => return,\n+        };\n+\n+        // Skip suggestion when the associated function is itself generic, it is unclear\n+        // how to split the provided parameters between those to suggest to the trait and\n+        // those to remain on the associated type.\n+        let num_assoc_fn_expected_args =\n+            self.num_expected_type_or_const_args() + self.num_expected_lifetime_args();\n+        if num_assoc_fn_expected_args > 0 {\n+            return;\n+        }\n+\n+        let num_assoc_fn_excess_args =\n+            self.num_excess_type_or_const_args() + self.num_excess_lifetime_args();\n+\n+        let trait_generics = self.tcx.generics_of(trait_);\n+        let num_trait_generics_except_self =\n+            trait_generics.count() - if trait_generics.has_self { 1 } else { 0 };\n+\n+        let msg = format!(\n+            \"consider moving {these} generic argument{s} to the `{name}` trait, which takes up to {num} argument{s}\",\n+            these = pluralize!(\"this\", num_assoc_fn_excess_args),\n+            s = pluralize!(num_assoc_fn_excess_args),\n+            name = self.tcx.item_name(trait_),\n+            num = num_trait_generics_except_self,\n+        );\n+\n+        if let Some(hir_id) = self.path_segment.hir_id\n+        && let Some(parent_node) = self.tcx.hir().find_parent_node(hir_id)\n+        && let Some(parent_node) = self.tcx.hir().find(parent_node)\n+        && let hir::Node::Expr(expr) = parent_node {\n+            match expr.kind {\n+                hir::ExprKind::Path(ref qpath) => {\n+                    self.suggest_moving_args_from_assoc_fn_to_trait_for_qualified_path(\n+                        err,\n+                        qpath,\n+                        msg,\n+                        num_assoc_fn_excess_args,\n+                        num_trait_generics_except_self\n+                    )\n+                },\n+                hir::ExprKind::MethodCall(..) => {\n+                    self.suggest_moving_args_from_assoc_fn_to_trait_for_method_call(\n+                        err,\n+                        trait_,\n+                        expr,\n+                        msg,\n+                        num_assoc_fn_excess_args,\n+                        num_trait_generics_except_self\n+                    )\n+                },\n+                _ => return,\n+            }\n+        }\n+    }\n+\n+    fn suggest_moving_args_from_assoc_fn_to_trait_for_qualified_path(\n+        &self,\n+        err: &mut Diagnostic,\n+        qpath: &'tcx hir::QPath<'tcx>,\n+        msg: String,\n+        num_assoc_fn_excess_args: usize,\n+        num_trait_generics_except_self: usize,\n+    ) {\n+        if let hir::QPath::Resolved(_, path) = qpath\n+        && let Some(trait_path_segment) = path.segments.get(0) {\n+            let num_generic_args_supplied_to_trait = trait_path_segment.args().num_generic_params();\n+\n+            if num_assoc_fn_excess_args == num_trait_generics_except_self - num_generic_args_supplied_to_trait {\n+                if let Some(span) = self.gen_args.span_ext()\n+                && let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n+                    let sugg = vec![\n+                        (self.path_segment.ident.span, format!(\"{}::{}\", snippet, self.path_segment.ident)),\n+                        (span.with_lo(self.path_segment.ident.span.hi()), \"\".to_owned())\n+                    ];\n+\n+                    err.multipart_suggestion(\n+                        msg,\n+                        sugg,\n+                        Applicability::MaybeIncorrect\n+                    );\n+                }\n+            }\n+        }\n+    }\n+\n+    fn suggest_moving_args_from_assoc_fn_to_trait_for_method_call(\n+        &self,\n+        err: &mut Diagnostic,\n+        trait_: DefId,\n+        expr: &'tcx hir::Expr<'tcx>,\n+        msg: String,\n+        num_assoc_fn_excess_args: usize,\n+        num_trait_generics_except_self: usize,\n+    ) {\n+        if let hir::ExprKind::MethodCall(_, args, _) = expr.kind {\n+            assert_eq!(args.len(), 1);\n+            if num_assoc_fn_excess_args == num_trait_generics_except_self {\n+                if let Some(gen_args) = self.gen_args.span_ext()\n+                && let Ok(gen_args) = self.tcx.sess.source_map().span_to_snippet(gen_args)\n+                && let Ok(args) = self.tcx.sess.source_map().span_to_snippet(args[0].span) {\n+                    let sugg = format!(\"{}::{}::{}({})\", self.tcx.item_name(trait_), gen_args, self.tcx.item_name(self.def_id), args);\n+                    err.span_suggestion(expr.span, msg, sugg, Applicability::MaybeIncorrect);\n+                }\n+            }\n+        }\n+    }\n+\n     /// Suggests to remove redundant argument(s):\n     ///\n     /// ```text"}, {"sha": "d955b4f9651daa4906530e94bb19a0278ac331af", "filename": "src/test/ui/const-generics/invalid-const-arg-for-type-param.stderr", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2af2cda32a251d792bfef58e49a25a866f622766/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2af2cda32a251d792bfef58e49a25a866f622766/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr?ref=2af2cda32a251d792bfef58e49a25a866f622766", "patch": "@@ -2,15 +2,22 @@ error[E0107]: this associated function takes 0 generic arguments but 1 generic a\n   --> $DIR/invalid-const-arg-for-type-param.rs:6:23\n    |\n LL |     let _: u32 = 5i32.try_into::<32>().unwrap();\n-   |                       ^^^^^^^^------ help: remove these generics\n-   |                       |\n-   |                       expected 0 generic arguments\n+   |                       ^^^^^^^^ expected 0 generic arguments\n    |\n note: associated function defined here, with 0 generic parameters\n   --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n    |\n LL |     fn try_into(self) -> Result<T, Self::Error>;\n    |        ^^^^^^^^\n+help: consider moving this generic argument to the `TryInto` trait, which takes up to 1 argument\n+   |\n+LL |     let _: u32 = TryInto::<32>::try_into(5i32).unwrap();\n+   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+help: remove these generics\n+   |\n+LL -     let _: u32 = 5i32.try_into::<32>().unwrap();\n+LL +     let _: u32 = 5i32.try_into().unwrap();\n+   |\n \n error[E0599]: no method named `f` found for struct `S` in the current scope\n   --> $DIR/invalid-const-arg-for-type-param.rs:9:7"}, {"sha": "fa5fc899dc083639119b384248a0dbcab088f0ce", "filename": "src/test/ui/suggestions/issue-89064.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2af2cda32a251d792bfef58e49a25a866f622766/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89064.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2af2cda32a251d792bfef58e49a25a866f622766/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89064.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89064.rs?ref=2af2cda32a251d792bfef58e49a25a866f622766", "patch": "@@ -0,0 +1,35 @@\n+use std::convert::TryInto;\n+\n+trait A<T> {\n+    fn foo() {}\n+}\n+\n+trait B<T, U> {\n+    fn bar() {}\n+}\n+\n+struct S;\n+\n+impl<T> A<T> for S {}\n+impl<T, U> B<T, U> for S {}\n+\n+fn main() {\n+    let _ = A::foo::<S>();\n+    //~^ ERROR\n+    //~| HELP remove these generics\n+    //~| HELP consider moving this generic argument\n+\n+    let _ = B::bar::<S, S>();\n+    //~^ ERROR\n+    //~| HELP remove these generics\n+    //~| HELP consider moving these generic arguments\n+\n+    let _ = A::<S>::foo::<S>();\n+    //~^ ERROR\n+    //~| HELP remove these generics\n+\n+    let _ = 42.into::<Option<_>>();\n+    //~^ ERROR\n+    //~| HELP remove these generics\n+    //~| HELP consider moving this generic argument\n+}"}, {"sha": "8b2a388162806e86866c4da9657ffafad3b83024", "filename": "src/test/ui/suggestions/issue-89064.stderr", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/2af2cda32a251d792bfef58e49a25a866f622766/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89064.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2af2cda32a251d792bfef58e49a25a866f622766/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89064.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89064.stderr?ref=2af2cda32a251d792bfef58e49a25a866f622766", "patch": "@@ -0,0 +1,82 @@\n+error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n+  --> $DIR/issue-89064.rs:17:16\n+   |\n+LL |     let _ = A::foo::<S>();\n+   |                ^^^ expected 0 generic arguments\n+   |\n+note: associated function defined here, with 0 generic parameters\n+  --> $DIR/issue-89064.rs:4:8\n+   |\n+LL |     fn foo() {}\n+   |        ^^^\n+help: consider moving this generic argument to the `A` trait, which takes up to 1 argument\n+   |\n+LL -     let _ = A::foo::<S>();\n+LL +     let _ = A::<S>::foo();\n+   |\n+help: remove these generics\n+   |\n+LL -     let _ = A::foo::<S>();\n+LL +     let _ = A::foo();\n+   |\n+\n+error[E0107]: this associated function takes 0 generic arguments but 2 generic arguments were supplied\n+  --> $DIR/issue-89064.rs:22:16\n+   |\n+LL |     let _ = B::bar::<S, S>();\n+   |                ^^^ expected 0 generic arguments\n+   |\n+note: associated function defined here, with 0 generic parameters\n+  --> $DIR/issue-89064.rs:8:8\n+   |\n+LL |     fn bar() {}\n+   |        ^^^\n+help: consider moving these generic arguments to the `B` trait, which takes up to 2 arguments\n+   |\n+LL -     let _ = B::bar::<S, S>();\n+LL +     let _ = B::<S, S>::bar();\n+   |\n+help: remove these generics\n+   |\n+LL -     let _ = B::bar::<S, S>();\n+LL +     let _ = B::bar();\n+   |\n+\n+error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n+  --> $DIR/issue-89064.rs:27:21\n+   |\n+LL |     let _ = A::<S>::foo::<S>();\n+   |                     ^^^----- help: remove these generics\n+   |                     |\n+   |                     expected 0 generic arguments\n+   |\n+note: associated function defined here, with 0 generic parameters\n+  --> $DIR/issue-89064.rs:4:8\n+   |\n+LL |     fn foo() {}\n+   |        ^^^\n+\n+error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n+  --> $DIR/issue-89064.rs:31:16\n+   |\n+LL |     let _ = 42.into::<Option<_>>();\n+   |                ^^^^ expected 0 generic arguments\n+   |\n+note: associated function defined here, with 0 generic parameters\n+  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn into(self) -> T;\n+   |        ^^^^\n+help: consider moving this generic argument to the `Into` trait, which takes up to 1 argument\n+   |\n+LL |     let _ = Into::<Option<_>>::into(42);\n+   |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+help: remove these generics\n+   |\n+LL -     let _ = 42.into::<Option<_>>();\n+LL +     let _ = 42.into();\n+   |\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0107`."}]}