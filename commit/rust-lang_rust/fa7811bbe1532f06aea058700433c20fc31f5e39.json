{"sha": "fa7811bbe1532f06aea058700433c20fc31f5e39", "node_id": "C_kwDOAAsO6NoAKGZhNzgxMWJiZTE1MzJmMDZhZWEwNTg3MDA0MzNjMjBmYzMxZjVlMzk", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-14T17:08:09Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-14T17:19:44Z"}, "message": "use the cargo default for debug/release builds", "tree": {"sha": "fe8207275d000aee760c649d44933def9443d595", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe8207275d000aee760c649d44933def9443d595"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa7811bbe1532f06aea058700433c20fc31f5e39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa7811bbe1532f06aea058700433c20fc31f5e39", "html_url": "https://github.com/rust-lang/rust/commit/fa7811bbe1532f06aea058700433c20fc31f5e39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa7811bbe1532f06aea058700433c20fc31f5e39/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d5999ab13e849c66f39b23a685512110e0d8eee", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d5999ab13e849c66f39b23a685512110e0d8eee", "html_url": "https://github.com/rust-lang/rust/commit/5d5999ab13e849c66f39b23a685512110e0d8eee"}], "stats": {"total": 76, "additions": 27, "deletions": 49}, "files": [{"sha": "8c63a57a4f490a6727061871ac79bc085ffcb45f", "filename": "ci.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa7811bbe1532f06aea058700433c20fc31f5e39/ci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/fa7811bbe1532f06aea058700433c20fc31f5e39/ci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci.sh?ref=fa7811bbe1532f06aea058700433c20fc31f5e39", "patch": "@@ -3,13 +3,13 @@ set -euo pipefail\n set -x\n \n # Determine configuration\n-export RUSTFLAGS=\"-D warnings -C debug-assertions -C debuginfo=1\"\n+export RUSTFLAGS=\"-D warnings\"\n export CARGO_INCREMENTAL=0\n export CARGO_EXTRA_FLAGS=\"--all-features\"\n \n # Prepare\n echo \"Build and install miri\"\n-RUSTFLAGS=\"\" ./miri install # implicitly locked, and explicitly without debug assertions\n+./miri install # implicitly locked\n ./miri build --all-targets --locked # the build that all the `./miri test` below will use\n echo\n "}, {"sha": "7b53b802db62a535db03580a69ca1b96e02c2e64", "filename": "miri", "status": "modified", "additions": 25, "deletions": 47, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/fa7811bbe1532f06aea058700433c20fc31f5e39/miri", "raw_url": "https://github.com/rust-lang/rust/raw/fa7811bbe1532f06aea058700433c20fc31f5e39/miri", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri?ref=fa7811bbe1532f06aea058700433c20fc31f5e39", "patch": "@@ -6,7 +6,8 @@ USAGE=$(cat <<\"EOF\"\n ./miri install <flags>:\n Installs the miri driver and cargo-miri. <flags> are passed to `cargo\n install`. Sets up the rpath such that the installed binary should work in any\n-working directory.\n+working directory. However, the rustup toolchain when invoking `cargo miri`\n+needs to be the same one used for `./miri install`.\n \n ./miri build <flags>:\n Just build miri. <flags> are passed to `cargo build`.\n@@ -22,10 +23,6 @@ to the final `cargo test` invocation.\n Build miri, set up a sysroot and then run the driver with the given <flags>.\n (Also respects MIRIFLAGS environment variable.)\n \n-The commands above also exist in a \"-debug\" variant (e.g. \"./miri run-debug\n-<flags>\") which uses debug builds instead of release builds, for faster build\n-times and slower execution times.\n-\n ./miri fmt <flags>:\n Format all sources and tests. <flags> are passed to `rustfmt`.\n \n@@ -99,38 +96,21 @@ fi\n \n # Prepare flags for cargo and rustc.\n CARGO=\"cargo +$TOOLCHAIN\"\n-if [ -z \"$CARGO_INCREMENTAL\" ]; then\n-    # Default CARGO_INCREMENTAL to 1.\n-    export CARGO_INCREMENTAL=1\n-fi\n if [ -z \"$CARGO_TARGET_DIR\" ]; then\n     # Share target dir between `miri` and `cargo-miri`.\n     export CARGO_TARGET_DIR=\"$MIRIDIR/target\"\n fi\n # We set the rpath so that Miri finds the private rustc libraries it needs.\n export RUSTFLAGS=\"-C link-args=-Wl,-rpath,$LIBDIR $RUSTFLAGS\"\n-# Determine flags passed to all cargo invocations.\n-# This is a bit more annoying that one would hope due to\n-# <https://github.com/rust-lang/cargo/issues/6992>.\n-case \"$COMMAND\" in\n-*-debug)\n-    CARGO_INSTALL_FLAGS=\"--target $TARGET --debug $CARGO_EXTRA_FLAGS\"\n-    CARGO_BUILD_FLAGS=\"--target $TARGET $CARGO_EXTRA_FLAGS\"\n-    ;;\n-*)\n-    CARGO_INSTALL_FLAGS=\"--target $TARGET $CARGO_EXTRA_FLAGS\"\n-    CARGO_BUILD_FLAGS=\"--target $TARGET --release $CARGO_EXTRA_FLAGS\"\n-    ;;\n-esac\n \n ## Helper functions\n \n # Build a sysroot and set MIRI_SYSROOT to use it. Arguments are passed to `cargo miri setup`.\n build_sysroot() {\n     # Build once, for the user to see.\n-    $CARGO run $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml -- miri setup \"$@\"\n+    $CARGO run $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml -- miri setup \"$@\"\n     # Call again, to just set env var.\n-    export MIRI_SYSROOT=\"$($CARGO run $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml -q -- miri setup --print-sysroot \"$@\")\"\n+    export MIRI_SYSROOT=\"$($CARGO run $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml -q -- miri setup --print-sysroot \"$@\")\"\n }\n \n # Prepare and set MIRI_SYSROOT. Respects `MIRI_TEST_TARGET` and takes into account\n@@ -152,37 +132,35 @@ find_sysroot() {\n \n # Run command.\n case \"$COMMAND\" in\n-install|install-debug)\n+install)\n     # \"--locked\" to respect the Cargo.lock file if it exists,\n     # \"--offline\" to avoid querying the registry (for yanked packages).\n-    $CARGO install $CARGO_INSTALL_FLAGS --path \"$MIRIDIR\" --force --locked --offline \"$@\"\n-    $CARGO install $CARGO_INSTALL_FLAGS --path \"$MIRIDIR\"/cargo-miri --force --locked --offline \"$@\"\n+    $CARGO install $CARGO_EXTRA_FLAGS --path \"$MIRIDIR\" --force --locked --offline \"$@\"\n+    $CARGO install $CARGO_EXTRA_FLAGS --path \"$MIRIDIR\"/cargo-miri --force --locked --offline \"$@\"\n     ;;\n-check|check-debug)\n+check)\n     # Check, and let caller control flags.\n-    $CARGO check $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml --all-targets \"$@\"\n-    $CARGO check $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml \"$@\"\n+    $CARGO check $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml --all-targets \"$@\"\n+    $CARGO check $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml \"$@\"\n     ;;\n-build|build-debug)\n+build)\n     # Build, and let caller control flags.\n-    $CARGO build $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml \"$@\"\n-    $CARGO build $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml \"$@\"\n+    $CARGO build $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml \"$@\"\n+    $CARGO build $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml \"$@\"\n     ;;\n-test|test-debug|bless|bless-debug)\n+test|bless)\n     # First build and get a sysroot.\n-    $CARGO build $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml\n+    $CARGO build $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml\n     find_sysroot\n-    case \"$COMMAND\" in\n-    bless|bless-debug)\n+    if [ \"$COMMAND\" = \"bless\" ]; then\n         export MIRI_BLESS=\"Gesundheit\"\n-        ;;\n-    esac\n+    fi\n     # Then test, and let caller control flags.\n     # Only in root project and ui_test as `cargo-miri` has no tests.\n-    $CARGO test $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml \"$@\"\n-    $CARGO test $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/ui_test/Cargo.toml \"$@\"\n+    $CARGO test $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml \"$@\"\n+    $CARGO test $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/ui_test/Cargo.toml \"$@\"\n     ;;\n-run|run-debug)\n+run)\n     # Scan for \"--target\" to overwrite the \"MIRI_TEST_TARGET\" env var so\n     # that we set the MIRI_SYSROOT up the right way.\n     FOUND_TARGET_OPT=0\n@@ -200,19 +178,19 @@ run|run-debug)\n         MIRIFLAGS=\"$MIRIFLAGS --target $MIRI_TEST_TARGET\"\n     fi\n     # First build and get a sysroot.\n-    $CARGO build $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml\n+    $CARGO build $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml\n     find_sysroot\n     # Then run the actual command.\n-    exec $CARGO run $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml -- --sysroot \"$MIRI_SYSROOT\" $MIRIFLAGS \"$@\"\n+    exec $CARGO run $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml -- --sysroot \"$MIRI_SYSROOT\" $MIRIFLAGS \"$@\"\n     ;;\n fmt)\n     find \"$MIRIDIR\" -not \\( -name target -prune \\) -name '*.rs' \\\n         | xargs rustfmt +$TOOLCHAIN --edition=2021 --config-path \"$MIRIDIR/rustfmt.toml\" \"$@\"\n     ;;\n clippy)\n-    $CARGO clippy $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml --all-targets \"$@\"\n-    $CARGO clippy $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/ui_test/Cargo.toml --all-targets \"$@\"\n-    $CARGO clippy $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml \"$@\"\n+    $CARGO clippy $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml --all-targets \"$@\"\n+    $CARGO clippy $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/ui_test/Cargo.toml --all-targets \"$@\"\n+    $CARGO clippy $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml \"$@\"\n     ;;\n *)\n     if [ -n \"$COMMAND\" ]; then"}]}