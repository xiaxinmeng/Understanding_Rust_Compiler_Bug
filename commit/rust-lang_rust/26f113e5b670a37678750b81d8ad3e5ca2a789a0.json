{"sha": "26f113e5b670a37678750b81d8ad3e5ca2a789a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ZjExM2U1YjY3MGEzNzY3ODc1MGI4MWQ4YWQzZTVjYTJhNzg5YTA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-17T15:54:22Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-17T17:13:53Z"}, "message": "rustc_metadata: Remove `CrateMetadata::is_proc_macro_crate`", "tree": {"sha": "469801df09dcb10e911fe82f392571943d2ec909", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/469801df09dcb10e911fe82f392571943d2ec909"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26f113e5b670a37678750b81d8ad3e5ca2a789a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26f113e5b670a37678750b81d8ad3e5ca2a789a0", "html_url": "https://github.com/rust-lang/rust/commit/26f113e5b670a37678750b81d8ad3e5ca2a789a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26f113e5b670a37678750b81d8ad3e5ca2a789a0/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09c1c94df3b0289acbfaa60533f0322cf4ae9810", "url": "https://api.github.com/repos/rust-lang/rust/commits/09c1c94df3b0289acbfaa60533f0322cf4ae9810", "html_url": "https://github.com/rust-lang/rust/commit/09c1c94df3b0289acbfaa60533f0322cf4ae9810"}], "stats": {"total": 20, "additions": 8, "deletions": 12}, "files": [{"sha": "4f7239bd931eab30864fd65c238d043f72479a31", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/26f113e5b670a37678750b81d8ad3e5ca2a789a0/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26f113e5b670a37678750b81d8ad3e5ca2a789a0/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=26f113e5b670a37678750b81d8ad3e5ca2a789a0", "patch": "@@ -607,10 +607,6 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    fn is_proc_macro_crate(&self) -> bool {\n-        self.root.is_proc_macro_crate()\n-    }\n-\n     fn is_proc_macro(&self, id: DefIndex) -> bool {\n         self.root.proc_macro_data.and_then(|data| data.decode(self).find(|x| *x == id)).is_some()\n     }\n@@ -895,7 +891,7 @@ impl<'a, 'tcx> CrateMetadata {\n \n     /// Iterates over the language items in the given crate.\n     fn get_lang_items(&self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {\n-        if self.is_proc_macro_crate() {\n+        if self.root.is_proc_macro_crate() {\n             // Proc macro crates do not export any lang-items to the target.\n             &[]\n         } else {\n@@ -911,7 +907,7 @@ impl<'a, 'tcx> CrateMetadata {\n         &self,\n         tcx: TyCtxt<'tcx>,\n     ) -> &'tcx FxHashMap<Symbol, DefId> {\n-        tcx.arena.alloc(if self.is_proc_macro_crate() {\n+        tcx.arena.alloc(if self.root.is_proc_macro_crate() {\n             // Proc macro crates do not export any diagnostic-items to the target.\n             Default::default()\n         } else {\n@@ -1219,7 +1215,7 @@ impl<'a, 'tcx> CrateMetadata {\n         tcx: TyCtxt<'tcx>,\n         filter: Option<DefId>,\n     ) -> &'tcx [DefId] {\n-        if self.is_proc_macro_crate() {\n+        if self.root.is_proc_macro_crate() {\n             // proc-macro crates export no trait impls.\n             return &[]\n         }\n@@ -1263,7 +1259,7 @@ impl<'a, 'tcx> CrateMetadata {\n \n \n     fn get_native_libraries(&self, sess: &Session) -> Vec<NativeLibrary> {\n-        if self.is_proc_macro_crate() {\n+        if self.root.is_proc_macro_crate() {\n             // Proc macro crates do not have any *target* native libraries.\n             vec![]\n         } else {\n@@ -1272,7 +1268,7 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     fn get_foreign_modules(&self, tcx: TyCtxt<'tcx>) -> &'tcx [ForeignModule] {\n-        if self.is_proc_macro_crate() {\n+        if self.root.is_proc_macro_crate() {\n             // Proc macro crates do not have any *target* foreign modules.\n             &[]\n         } else {\n@@ -1295,7 +1291,7 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     fn get_missing_lang_items(&self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {\n-        if self.is_proc_macro_crate() {\n+        if self.root.is_proc_macro_crate() {\n             // Proc macro crates do not depend on any target weak lang-items.\n             &[]\n         } else {\n@@ -1319,7 +1315,7 @@ impl<'a, 'tcx> CrateMetadata {\n         &self,\n         tcx: TyCtxt<'tcx>,\n     ) -> Vec<(ExportedSymbol<'tcx>, SymbolExportLevel)> {\n-        if self.is_proc_macro_crate() {\n+        if self.root.is_proc_macro_crate() {\n             // If this crate is a custom derive crate, then we're not even going to\n             // link those in so we skip those crates.\n             vec![]"}, {"sha": "abb0ceb4ff4277f8083bafc1bd31fa5ad2da750c", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26f113e5b670a37678750b81d8ad3e5ca2a789a0/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26f113e5b670a37678750b81d8ad3e5ca2a789a0/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=26f113e5b670a37678750b81d8ad3e5ca2a789a0", "patch": "@@ -410,7 +410,7 @@ impl cstore::CStore {\n         let _prof_timer = sess.prof.generic_activity(\"metadata_load_macro\");\n \n         let data = self.get_crate_data(id.krate);\n-        if data.is_proc_macro_crate() {\n+        if data.root.is_proc_macro_crate() {\n             return LoadedMacro::ProcMacro(data.load_proc_macro(id.index, sess));\n         }\n "}]}