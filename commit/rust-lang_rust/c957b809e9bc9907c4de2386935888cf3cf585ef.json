{"sha": "c957b809e9bc9907c4de2386935888cf3cf585ef", "node_id": "C_kwDOAAsO6NoAKGM5NTdiODA5ZTliYzk5MDdjNGRlMjM4NjkzNTg4OGNmM2NmNTg1ZWY", "commit": {"author": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2022-04-06T21:16:17Z"}, "committer": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2022-04-06T21:23:57Z"}, "message": "Update binary_search example to instead redirect to partition_point", "tree": {"sha": "7ad4d6671869c0ab325d3530b14216b3e194179f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ad4d6671869c0ab325d3530b14216b3e194179f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c957b809e9bc9907c4de2386935888cf3cf585ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c957b809e9bc9907c4de2386935888cf3cf585ef", "html_url": "https://github.com/rust-lang/rust/commit/c957b809e9bc9907c4de2386935888cf3cf585ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c957b809e9bc9907c4de2386935888cf3cf585ef/comments", "author": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2afaba465e0bf44b9b37beba8d908b78dcdadc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2afaba465e0bf44b9b37beba8d908b78dcdadc7", "html_url": "https://github.com/rust-lang/rust/commit/c2afaba465e0bf44b9b37beba8d908b78dcdadc7"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "2133f3725c876cad13f0c9d1639e59e702a788b1", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c957b809e9bc9907c4de2386935888cf3cf585ef/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c957b809e9bc9907c4de2386935888cf3cf585ef/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=c957b809e9bc9907c4de2386935888cf3cf585ef", "patch": "@@ -2593,14 +2593,15 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// ```\n     ///\n     /// If you want to insert an item to a sorted deque, while maintaining\n-    /// sort order:\n+    /// sort order, consider using [`partition_point`]:\n     ///\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut deque: VecDeque<_> = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\n     /// let num = 42;\n-    /// let idx = deque.binary_search(&num).unwrap_or_else(|x| x);\n+    /// let idx = deque.partition_point(&num);\n+    /// // The above is equivalent to `let idx = deque.binary_search(&num).unwrap_or_else(|x| x);`\n     /// deque.insert(idx, num);\n     /// assert_eq!(deque, &[0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);\n     /// ```\n@@ -2744,6 +2745,19 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// assert!(deque.iter().take(i).all(|&x| x < 5));\n     /// assert!(deque.iter().skip(i).all(|&x| !(x < 5)));\n     /// ```\n+    ///\n+    /// If you want to insert an item to a sorted deque, while maintaining\n+    /// sort order:\n+    ///\n+    /// ```\n+    /// use std::collections::VecDeque;\n+    ///\n+    /// let mut deque: VecDeque<_> = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\n+    /// let num = 42;\n+    /// let idx = deque.partition_point(&num);\n+    /// deque.insert(idx, num);\n+    /// assert_eq!(deque, &[0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);\n+    /// ```\n     #[stable(feature = \"vecdeque_binary_search\", since = \"1.54.0\")]\n     pub fn partition_point<P>(&self, mut pred: P) -> usize\n     where"}, {"sha": "dee089d4e97b60f6be4aa4cb76ef72e3243efc1d", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c957b809e9bc9907c4de2386935888cf3cf585ef/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c957b809e9bc9907c4de2386935888cf3cf585ef/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=c957b809e9bc9907c4de2386935888cf3cf585ef", "patch": "@@ -2332,12 +2332,13 @@ impl<T> [T] {\n     /// ```\n     ///\n     /// If you want to insert an item to a sorted vector, while maintaining\n-    /// sort order:\n+    /// sort order, consider using [`partition_point`]:\n     ///\n     /// ```\n     /// let mut s = vec![0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n     /// let num = 42;\n-    /// let idx = s.binary_search(&num).unwrap_or_else(|x| x);\n+    /// let idx = s.partition_point(&num);\n+    /// // The above is equivalent to `let idx = s.binary_search(&num).unwrap_or_else(|x| x);`\n     /// s.insert(idx, num);\n     /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);\n     /// ```\n@@ -3744,6 +3745,17 @@ impl<T> [T] {\n     /// assert!(v[..i].iter().all(|&x| x < 5));\n     /// assert!(v[i..].iter().all(|&x| !(x < 5)));\n     /// ```\n+    ///\n+    /// If you want to insert an item to a sorted vector, while maintaining\n+    /// sort order:\n+    ///\n+    /// ```\n+    /// let mut s = vec![0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n+    /// let num = 42;\n+    /// let idx = s.partition_point(&num);\n+    /// s.insert(idx, num);\n+    /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);\n+    /// ```\n     #[stable(feature = \"partition_point\", since = \"1.52.0\")]\n     #[must_use]\n     pub fn partition_point<P>(&self, mut pred: P) -> usize"}]}