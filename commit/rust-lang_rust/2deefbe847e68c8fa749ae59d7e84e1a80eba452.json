{"sha": "2deefbe847e68c8fa749ae59d7e84e1a80eba452", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZWVmYmU4NDdlNjhjOGZhNzQ5YWU1OWQ3ZTg0ZTFhODBlYmE0NTI=", "commit": {"author": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-04-30T08:05:16Z"}, "committer": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-04-30T08:05:16Z"}, "message": "Change flags to -Z print-link-args and --link-args", "tree": {"sha": "d7e3c5dc1a55162281474fa6a68adb748af84905", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7e3c5dc1a55162281474fa6a68adb748af84905"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2deefbe847e68c8fa749ae59d7e84e1a80eba452", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2deefbe847e68c8fa749ae59d7e84e1a80eba452", "html_url": "https://github.com/rust-lang/rust/commit/2deefbe847e68c8fa749ae59d7e84e1a80eba452", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2deefbe847e68c8fa749ae59d7e84e1a80eba452/comments", "author": null, "committer": null, "parents": [{"sha": "e75203ce82357f6d0f81d5644e77d3c2efe53fcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e75203ce82357f6d0f81d5644e77d3c2efe53fcb", "html_url": "https://github.com/rust-lang/rust/commit/e75203ce82357f6d0f81d5644e77d3c2efe53fcb"}], "stats": {"total": 21, "additions": 5, "deletions": 16}, "files": [{"sha": "0a91c29d89071e1cabc1f9c3942d7e884a884370", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2deefbe847e68c8fa749ae59d7e84e1a80eba452/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2deefbe847e68c8fa749ae59d7e84e1a80eba452/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=2deefbe847e68c8fa749ae59d7e84e1a80eba452", "patch": "@@ -308,7 +308,7 @@ pub fn compile_rest(sess: Session,\n \n     };\n \n-    if (sess.opts.output_info & session::out_link_args) > 0 {\n+    if (sess.opts.debugging_opts & session::print_link_args) != 0 {\n         io::println(str::connect(link::link_args(sess,\n             &outputs.obj_filename, &outputs.out_filename, link_meta), \" \"));\n     }\n@@ -651,7 +651,7 @@ pub fn build_session_options(binary: @~str,\n \n     let addl_lib_search_paths = getopts::opt_strs(matches, ~\"L\").map(|s| Path(*s));\n \n-    let linker_args = getopts::opt_strs(matches, ~\"linker\").flat_map( |a| {\n+    let linker_args = getopts::opt_strs(matches, ~\"link-args\").flat_map( |a| {\n         let mut args = ~[];\n         for str::each_split_char(*a, ',') |arg| {\n             args.push(str::from_slice(arg));\n@@ -664,11 +664,6 @@ pub fn build_session_options(binary: @~str,\n     let android_cross_path = getopts::opt_maybe_str(\n         matches, ~\"android-cross-path\");\n \n-    let mut output_info = 0;\n-    if opt_present(matches, \"print-link-args\") {\n-        output_info |= session::out_link_args;\n-    }\n-\n     let sopts = @session::options {\n         crate_type: crate_type,\n         is_static: static,\n@@ -691,7 +686,6 @@ pub fn build_session_options(binary: @~str,\n         parse_only: parse_only,\n         no_trans: no_trans,\n         debugging_opts: debugging_opts,\n-        output_info: output_info,\n         android_cross_path: android_cross_path\n     };\n     return sopts;\n@@ -766,7 +760,7 @@ pub fn optgroups() -> ~[getopts::groups::OptGroup] {\n   optmulti(\"L\", \"\",   \"Add a directory to the library search path\",\n                               \"PATH\"),\n   optflag(\"\",  \"lib\", \"Compile a library crate\"),\n-  optmulti(\"\",  \"linker\", \"FLAGS is a comma-separated list of flags\n+  optmulti(\"\",  \"link-args\", \"FLAGS is a comma-separated list of flags\n                             passed to the linker\", \"FLAGS\"),\n   optflag(\"\",  \"ls\",  \"List the symbols defined by a library crate\"),\n   optflag(\"\", \"no-trans\",\n@@ -787,8 +781,6 @@ pub fn optgroups() -> ~[getopts::groups::OptGroup] {\n                           typed (crates expanded, with type annotations),\n                           or identified (fully parenthesized,\n                           AST nodes and blocks with IDs)\", \"TYPE\"),\n-  optflag(\"\", \"print-link-args\", \"Prints all the arguments that would be\n-                                    passed to the linker.\"),\n   optflag(\"S\", \"\",    \"Compile only; do not assemble or link\"),\n   optflag(\"\", \"save-temps\",\n                         \"Write intermediate files (.bc, .opt.bc, .o)"}, {"sha": "ff623049f758d0cf501a7e885c03c69391ba3256", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2deefbe847e68c8fa749ae59d7e84e1a80eba452/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2deefbe847e68c8fa749ae59d7e84e1a80eba452/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=2deefbe847e68c8fa749ae59d7e84e1a80eba452", "patch": "@@ -63,6 +63,7 @@ pub static jit: uint = 1 << 19;\n pub static debug_info: uint = 1 << 20;\n pub static extra_debug_info: uint = 1 << 21;\n pub static static: uint = 1 << 22;\n+pub static print_link_args: uint = 1 << 23;\n \n pub fn debugging_opts_map() -> ~[(~str, ~str, uint)] {\n     ~[(~\"verbose\", ~\"in general, enable more debug printouts\", verbose),\n@@ -90,6 +91,7 @@ pub fn debugging_opts_map() -> ~[(~str, ~str, uint)] {\n      (~\"no-opt\", ~\"do not optimize, even if -O is passed\", no_opt),\n      (~\"no-monomorphic-collapse\", ~\"do not collapse template instantiations\",\n       no_monomorphic_collapse),\n+     (~\"print-link-args\", ~\"Print the arguments passed to the linker\", print_link_args),\n      (~\"gc\", ~\"Garbage collect shared data (experimental)\", gc),\n      (~\"jit\", ~\"Execute using JIT (experimental)\", jit),\n      (~\"extra-debug-info\", ~\"Extra debugging info (experimental)\",\n@@ -100,9 +102,6 @@ pub fn debugging_opts_map() -> ~[(~str, ~str, uint)] {\n     ]\n }\n \n-// Information output flags\n-pub static out_link_args : uint = 1 << 0;\n-\n #[deriving(Eq)]\n pub enum OptLevel {\n     No, // -O0\n@@ -139,7 +138,6 @@ pub struct options {\n     parse_only: bool,\n     no_trans: bool,\n     debugging_opts: uint,\n-    output_info: uint,\n     android_cross_path: Option<~str>\n }\n \n@@ -314,7 +312,6 @@ pub fn basic_options() -> @options {\n         parse_only: false,\n         no_trans: false,\n         debugging_opts: 0u,\n-        output_info: 0u,\n         android_cross_path: None\n     }\n }"}]}