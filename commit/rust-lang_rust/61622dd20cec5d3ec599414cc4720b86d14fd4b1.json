{"sha": "61622dd20cec5d3ec599414cc4720b86d14fd4b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNjIyZGQyMGNlYzVkM2VjNTk5NDE0Y2M0NzIwYjg2ZDE0ZmQ0YjE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-02-25T02:23:01Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-20T20:33:43Z"}, "message": "std: Remove AtomicU64\n\nSupport for this is less universal than for word-size things;\nit has no users; i'd rather play it safe.", "tree": {"sha": "4c8b296e853797f9ec21209c275ef4158632b647", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c8b296e853797f9ec21209c275ef4158632b647"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61622dd20cec5d3ec599414cc4720b86d14fd4b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61622dd20cec5d3ec599414cc4720b86d14fd4b1", "html_url": "https://github.com/rust-lang/rust/commit/61622dd20cec5d3ec599414cc4720b86d14fd4b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61622dd20cec5d3ec599414cc4720b86d14fd4b1/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8748322c9b1d4c6fd0ebceb6dc7165b2b50bca4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8748322c9b1d4c6fd0ebceb6dc7165b2b50bca4a", "html_url": "https://github.com/rust-lang/rust/commit/8748322c9b1d4c6fd0ebceb6dc7165b2b50bca4a"}], "stats": {"total": 52, "additions": 0, "deletions": 52}, "files": [{"sha": "85fe51862982e3334a5e66f9bfe3b0fbf0e00e82", "filename": "src/libstd/sync/atomics.rs", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/61622dd20cec5d3ec599414cc4720b86d14fd4b1/src%2Flibstd%2Fsync%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61622dd20cec5d3ec599414cc4720b86d14fd4b1/src%2Flibstd%2Fsync%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fatomics.rs?ref=61622dd20cec5d3ec599414cc4720b86d14fd4b1", "patch": "@@ -134,13 +134,6 @@ pub struct AtomicUint {\n     priv nopod: marker::NoPod\n }\n \n-/// An unsigned atomic integer type that is forced to be 64-bits. This does not\n-/// support all operations.\n-pub struct AtomicU64 {\n-    priv v: Unsafe<u64>,\n-    priv nopod: marker::NoPod\n-}\n-\n /// An unsafe atomic pointer. Only supports basic atomic operations\n pub struct AtomicPtr<T> {\n     priv p: Unsafe<uint>,\n@@ -198,11 +191,6 @@ pub static INIT_ATOMIC_INT  : AtomicInt  = AtomicInt  { v: Unsafe{value: 0,\n pub static INIT_ATOMIC_UINT : AtomicUint = AtomicUint { v: Unsafe{value: 0,\n                                                                   marker1: marker::InvariantType},\n                                                         nopod: marker::NoPod };\n-/// An `AtomicU64` initialized to `0`\n-pub static INIT_ATOMIC_U64 : AtomicU64 = AtomicU64 { v: Unsafe{value: 0,\n-                                                               marker1: marker::InvariantType},\n-                                                     nopod: marker::NoPod };\n-\n \n // NB: Needs to be -1 (0b11111111...) to make fetch_nand work correctly\n static UINT_TRUE: uint = -1;\n@@ -478,46 +466,6 @@ impl AtomicInt {\n     }\n }\n \n-// temporary workaround\n-// it causes link failure on MIPS target\n-// libgcc doesn't implement 64-bit atomic operations for MIPS32\n-#[cfg(not(target_arch = \"mips\"))]\n-impl AtomicU64 {\n-    pub fn new(v: u64) -> AtomicU64 {\n-        AtomicU64 { v: Unsafe::new(v), nopod: marker::NoPod }\n-    }\n-\n-    #[inline]\n-    pub fn load(&self, order: Ordering) -> u64 {\n-        unsafe { atomic_load(self.v.get(), order) }\n-    }\n-\n-    #[inline]\n-    pub fn store(&self, val: u64, order: Ordering) {\n-        unsafe { atomic_store(self.v.get(), val, order); }\n-    }\n-\n-    #[inline]\n-    pub fn swap(&self, val: u64, order: Ordering) -> u64 {\n-        unsafe { atomic_swap(self.v.get(), val, order) }\n-    }\n-\n-    #[inline]\n-    pub fn compare_and_swap(&self, old: u64, new: u64, order: Ordering) -> u64 {\n-        unsafe { atomic_compare_and_swap(self.v.get(), old, new, order) }\n-    }\n-\n-    #[inline]\n-    pub fn fetch_add(&self, val: u64, order: Ordering) -> u64 {\n-        unsafe { atomic_add(self.v.get(), val, order) }\n-    }\n-\n-    #[inline]\n-    pub fn fetch_sub(&self, val: u64, order: Ordering) -> u64 {\n-        unsafe { atomic_sub(self.v.get(), val, order) }\n-    }\n-}\n-\n impl AtomicUint {\n     /// Create a new `AtomicUint`\n     pub fn new(v: uint) -> AtomicUint {"}]}