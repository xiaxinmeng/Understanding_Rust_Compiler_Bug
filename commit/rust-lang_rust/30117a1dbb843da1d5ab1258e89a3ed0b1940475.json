{"sha": "30117a1dbb843da1d5ab1258e89a3ed0b1940475", "node_id": "C_kwDOAAsO6NoAKDMwMTE3YTFkYmI4NDNkYTFkNWFiMTI1OGU4OWEzZWQwYjE5NDA0NzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-18T06:54:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-18T06:54:37Z"}, "message": "Auto merge of #103179 - ferrocene:pa-run-in-run-make, r=jyn514\n\nFix `src/test/run-make/issue-36710` on cross-compiled targets\n\nThis PR fixes the `src/test/run-make/issue-36710` test not working on cross-compiled targets by telling the make infra how to run tests remotely with `remote-test-server`.\n\nThis PR includes a revert of #102723 (cc `@pcc),` which disabled that test on all cross-compiled targets.", "tree": {"sha": "581acb9906cba5c57a4c659d8dcc552b853d070b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/581acb9906cba5c57a4c659d8dcc552b853d070b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30117a1dbb843da1d5ab1258e89a3ed0b1940475", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30117a1dbb843da1d5ab1258e89a3ed0b1940475", "html_url": "https://github.com/rust-lang/rust/commit/30117a1dbb843da1d5ab1258e89a3ed0b1940475", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30117a1dbb843da1d5ab1258e89a3ed0b1940475/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83356b78c4ff3e7d84e977aa6143793545967301", "url": "https://api.github.com/repos/rust-lang/rust/commits/83356b78c4ff3e7d84e977aa6143793545967301", "html_url": "https://github.com/rust-lang/rust/commit/83356b78c4ff3e7d84e977aa6143793545967301"}, {"sha": "00ec6797a3b9f5e0fe3c6e66af0a3a6c82fa56c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/00ec6797a3b9f5e0fe3c6e66af0a3a6c82fa56c0", "html_url": "https://github.com/rust-lang/rust/commit/00ec6797a3b9f5e0fe3c6e66af0a3a6c82fa56c0"}], "stats": {"total": 83, "additions": 54, "deletions": 29}, "files": [{"sha": "65c882fb801e5b736e8958cc7b5fcf381a67a0b5", "filename": "src/bootstrap/cc_detect.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/30117a1dbb843da1d5ab1258e89a3ed0b1940475/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30117a1dbb843da1d5ab1258e89a3ed0b1940475/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=30117a1dbb843da1d5ab1258e89a3ed0b1940475", "patch": "@@ -168,23 +168,7 @@ fn set_compiler(\n         // compiler already takes into account the triple in question.\n         t if t.contains(\"android\") => {\n             if let Some(ndk) = config.and_then(|c| c.ndk.as_ref()) {\n-                let mut triple_iter = target.triple.split(\"-\");\n-                let triple_translated = if let Some(arch) = triple_iter.next() {\n-                    let arch_new = match arch {\n-                        \"arm\" | \"armv7\" | \"armv7neon\" | \"thumbv7\" | \"thumbv7neon\" => \"armv7a\",\n-                        other => other,\n-                    };\n-                    std::iter::once(arch_new).chain(triple_iter).collect::<Vec<&str>>().join(\"-\")\n-                } else {\n-                    target.triple.to_string()\n-                };\n-\n-                // API 19 is the earliest API level supported by NDK r25b but AArch64 and x86_64 support\n-                // begins at API level 21.\n-                let api_level =\n-                    if t.contains(\"aarch64\") || t.contains(\"x86_64\") { \"21\" } else { \"19\" };\n-                let compiler = format!(\"{}{}-{}\", triple_translated, api_level, compiler.clang());\n-                cfg.compiler(ndk.join(\"bin\").join(compiler));\n+                cfg.compiler(ndk_compiler(compiler, &*target.triple, ndk));\n             }\n         }\n \n@@ -236,8 +220,28 @@ fn set_compiler(\n     }\n }\n \n+pub(crate) fn ndk_compiler(compiler: Language, triple: &str, ndk: &Path) -> PathBuf {\n+    let mut triple_iter = triple.split(\"-\");\n+    let triple_translated = if let Some(arch) = triple_iter.next() {\n+        let arch_new = match arch {\n+            \"arm\" | \"armv7\" | \"armv7neon\" | \"thumbv7\" | \"thumbv7neon\" => \"armv7a\",\n+            other => other,\n+        };\n+        std::iter::once(arch_new).chain(triple_iter).collect::<Vec<&str>>().join(\"-\")\n+    } else {\n+        triple.to_string()\n+    };\n+\n+    // API 19 is the earliest API level supported by NDK r25b but AArch64 and x86_64 support\n+    // begins at API level 21.\n+    let api_level =\n+        if triple.contains(\"aarch64\") || triple.contains(\"x86_64\") { \"21\" } else { \"19\" };\n+    let compiler = format!(\"{}{}-{}\", triple_translated, api_level, compiler.clang());\n+    ndk.join(\"bin\").join(compiler)\n+}\n+\n /// The target programming language for a native compiler.\n-enum Language {\n+pub(crate) enum Language {\n     /// The compiler is targeting C.\n     C,\n     /// The compiler is targeting C++."}, {"sha": "c61025b556aa5702941f43215aebc73144aaa59e", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/30117a1dbb843da1d5ab1258e89a3ed0b1940475/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30117a1dbb843da1d5ab1258e89a3ed0b1940475/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=30117a1dbb843da1d5ab1258e89a3ed0b1940475", "patch": "@@ -15,6 +15,7 @@ use std::str::FromStr;\n \n use crate::builder::TaskPath;\n use crate::cache::{Interned, INTERNER};\n+use crate::cc_detect::{ndk_compiler, Language};\n use crate::channel::{self, GitInfo};\n pub use crate::flags::Subcommand;\n use crate::flags::{Color, Flags};\n@@ -1237,8 +1238,12 @@ impl Config {\n                 if let Some(s) = cfg.no_std {\n                     target.no_std = s;\n                 }\n-                target.cc = cfg.cc.map(PathBuf::from);\n-                target.cxx = cfg.cxx.map(PathBuf::from);\n+                target.cc = cfg.cc.map(PathBuf::from).or_else(|| {\n+                    target.ndk.as_ref().map(|ndk| ndk_compiler(Language::C, &triple, ndk))\n+                });\n+                target.cxx = cfg.cxx.map(PathBuf::from).or_else(|| {\n+                    target.ndk.as_ref().map(|ndk| ndk_compiler(Language::CPlusPlus, &triple, ndk))\n+                });\n                 target.ar = cfg.ar.map(PathBuf::from);\n                 target.ranlib = cfg.ranlib.map(PathBuf::from);\n                 target.linker = cfg.linker.map(PathBuf::from);"}, {"sha": "57e63cd39d2f8f6ba5ba23f1bab1f21c244ea4af", "filename": "src/ci/docker/host-x86_64/armhf-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30117a1dbb843da1d5ab1258e89a3ed0b1940475/src%2Fci%2Fdocker%2Fhost-x86_64%2Farmhf-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/30117a1dbb843da1d5ab1258e89a3ed0b1940475/src%2Fci%2Fdocker%2Fhost-x86_64%2Farmhf-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Farmhf-gnu%2FDockerfile?ref=30117a1dbb843da1d5ab1258e89a3ed0b1940475", "patch": "@@ -9,7 +9,7 @@ RUN apt-get update -y && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-\n       curl \\\n       file \\\n       g++ \\\n-      gcc-arm-linux-gnueabihf \\\n+      g++-arm-linux-gnueabihf \\\n       git \\\n       libc6-dev \\\n       libc6-dev-armhf-cross \\"}, {"sha": "0f5425daa1684c2941d0c3b557b3372065fe3d49", "filename": "src/test/run-make-fulldeps/tools.mk", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/30117a1dbb843da1d5ab1258e89a3ed0b1940475/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/30117a1dbb843da1d5ab1258e89a3ed0b1940475/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk?ref=30117a1dbb843da1d5ab1258e89a3ed0b1940475", "patch": "@@ -40,6 +40,17 @@ endif\n # e.g. for `$(CC) -o $(RUN_BINFILE)`.\n RUN_BINFILE = $(TMPDIR)/$(1)\n \n+# Invoke the generated binary on the remote machine if compiletest was\n+# configured to use a remote test device, otherwise run it on the current host.\n+ifdef REMOTE_TEST_CLIENT\n+# FIXME: if a test requires additional files, this will need to be changed to\n+# also push them (by changing the 0 to the number of additional files, and\n+# providing the path of the additional files as the last arguments).\n+EXECUTE = $(REMOTE_TEST_CLIENT) run 0 $(RUN_BINFILE)\n+else\n+EXECUTE = $(RUN_BINFILE)\n+endif\n+\n # RUN and FAIL are basic way we will invoke the generated binary.  On\n # non-windows platforms, they set the LD_LIBRARY_PATH environment\n # variable before running the binary.\n@@ -50,16 +61,16 @@ BIN = $(1)\n UNAME = $(shell uname)\n \n ifeq ($(UNAME),Darwin)\n-RUN = $(TARGET_RPATH_ENV) $(RUN_BINFILE)\n-FAIL = $(TARGET_RPATH_ENV) $(RUN_BINFILE) && exit 1 || exit 0\n+RUN = $(TARGET_RPATH_ENV) $(EXECUTE)\n+FAIL = $(TARGET_RPATH_ENV) $(EXECUTE) && exit 1 || exit 0\n DYLIB_GLOB = lib$(1)*.dylib\n DYLIB = $(TMPDIR)/lib$(1).dylib\n STATICLIB = $(TMPDIR)/lib$(1).a\n STATICLIB_GLOB = lib$(1)*.a\n else\n ifdef IS_WINDOWS\n-RUN = PATH=\"$(PATH):$(TARGET_RPATH_DIR)\" $(RUN_BINFILE)\n-FAIL = PATH=\"$(PATH):$(TARGET_RPATH_DIR)\" $(RUN_BINFILE) && exit 1 || exit 0\n+RUN = PATH=\"$(PATH):$(TARGET_RPATH_DIR)\" $(EXECUTE)\n+FAIL = PATH=\"$(PATH):$(TARGET_RPATH_DIR)\" $(EXECUTE) && exit 1 || exit 0\n DYLIB_GLOB = $(1)*.dll\n DYLIB = $(TMPDIR)/$(1).dll\n ifdef IS_MSVC\n@@ -73,8 +84,8 @@ endif\n BIN = $(1).exe\n LLVM_FILECHECK := $(shell cygpath -u \"$(LLVM_FILECHECK)\")\n else\n-RUN = $(TARGET_RPATH_ENV) $(RUN_BINFILE)\n-FAIL = $(TARGET_RPATH_ENV) $(RUN_BINFILE) && exit 1 || exit 0\n+RUN = $(TARGET_RPATH_ENV) $(EXECUTE)\n+FAIL = $(TARGET_RPATH_ENV) $(EXECUTE) && exit 1 || exit 0\n DYLIB_GLOB = lib$(1)*.so\n DYLIB = $(TMPDIR)/lib$(1).so\n STATICLIB = $(TMPDIR)/lib$(1).a"}, {"sha": "d6145c07126b8f5c577a4df7275067c98e7230c3", "filename": "src/test/run-make/issue-36710/Makefile", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/30117a1dbb843da1d5ab1258e89a3ed0b1940475/src%2Ftest%2Frun-make%2Fissue-36710%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/30117a1dbb843da1d5ab1258e89a3ed0b1940475/src%2Ftest%2Frun-make%2Fissue-36710%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-36710%2FMakefile?ref=30117a1dbb843da1d5ab1258e89a3ed0b1940475", "patch": "@@ -1,6 +1,7 @@\n-# ignore-cross-compile $(call RUN,foo) expects to run the target executable natively\n-#                              so it won't work with remote-test-server\n # ignore-none no-std is not supported\n+# ignore-wasm32 FIXME: don't attempt to compile C++ to WASM\n+# ignore-wasm64 FIXME: don't attempt to compile C++ to WASM\n+# ignore-nvptx64-nvidia-cuda FIXME: can't find crate for `std`\n # ignore-musl FIXME: this makefile needs teaching how to use a musl toolchain\n #                    (see dist-i586-gnu-i586-i686-musl Dockerfile)\n "}, {"sha": "ebce0283fbaf1c1bd55016060ea231d9c0031d05", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30117a1dbb843da1d5ab1258e89a3ed0b1940475/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30117a1dbb843da1d5ab1258e89a3ed0b1940475/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=30117a1dbb843da1d5ab1258e89a3ed0b1940475", "patch": "@@ -2987,6 +2987,10 @@ impl<'test> TestCx<'test> {\n             cmd.env(\"LLVM_BIN_DIR\", llvm_bin_dir);\n         }\n \n+        if let Some(ref remote_test_client) = self.config.remote_test_client {\n+            cmd.env(\"REMOTE_TEST_CLIENT\", remote_test_client);\n+        }\n+\n         // We don't want RUSTFLAGS set from the outside to interfere with\n         // compiler flags set in the test cases:\n         cmd.env_remove(\"RUSTFLAGS\");"}]}