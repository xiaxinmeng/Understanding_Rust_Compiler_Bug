{"sha": "0cb6a1fad3f5ee54f05028c7f2fdd7844c8d16a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjYjZhMWZhZDNmNWVlNTRmMDUwMjhjN2YyZmRkNzg0NGM4ZDE2YTg=", "commit": {"author": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2017-05-22T01:05:16Z"}, "committer": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2017-05-22T01:05:16Z"}, "message": "rustdoc: Fix names of items in cross crate reexported modules\n\nFor renamed reexports the new name should be used.", "tree": {"sha": "f8f156a00cddfc42765f56259393cc41927a5be0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8f156a00cddfc42765f56259393cc41927a5be0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cb6a1fad3f5ee54f05028c7f2fdd7844c8d16a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cb6a1fad3f5ee54f05028c7f2fdd7844c8d16a8", "html_url": "https://github.com/rust-lang/rust/commit/0cb6a1fad3f5ee54f05028c7f2fdd7844c8d16a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cb6a1fad3f5ee54f05028c7f2fdd7844c8d16a8/comments", "author": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14f30da6132c25543da1f06c32a8c5699d3e5747", "url": "https://api.github.com/repos/rust-lang/rust/commits/14f30da6132c25543da1f06c32a8c5699d3e5747", "html_url": "https://github.com/rust-lang/rust/commit/14f30da6132c25543da1f06c32a8c5699d3e5747"}], "stats": {"total": 83, "additions": 60, "deletions": 23}, "files": [{"sha": "141efe471af5fe1cdae32198ed4ea7add4d767e7", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0cb6a1fad3f5ee54f05028c7f2fdd7844c8d16a8/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb6a1fad3f5ee54f05028c7f2fdd7844c8d16a8/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=0cb6a1fad3f5ee54f05028c7f2fdd7844c8d16a8", "patch": "@@ -41,26 +41,11 @@ use super::Clean;\n ///\n /// The returned value is `None` if the definition could not be inlined,\n /// and `Some` of a vector of items if it was successfully expanded.\n-pub fn try_inline(cx: &DocContext, def: Def, into: Option<ast::Name>)\n+pub fn try_inline(cx: &DocContext, def: Def, name: ast::Name)\n                   -> Option<Vec<clean::Item>> {\n     if def == Def::Err { return None }\n     let did = def.def_id();\n     if did.is_local() { return None }\n-    try_inline_def(cx, def).map(|vec| {\n-        vec.into_iter().map(|mut item| {\n-            match into {\n-                Some(into) if item.name.is_some() => {\n-                    item.name = Some(into.clean(cx));\n-                }\n-                _ => {}\n-            }\n-            item\n-        }).collect()\n-    })\n-}\n-\n-fn try_inline_def(cx: &DocContext, def: Def) -> Option<Vec<clean::Item>> {\n-    let tcx = cx.tcx;\n     let mut ret = Vec::new();\n     let inner = match def {\n         Def::Trait(did) => {\n@@ -112,16 +97,15 @@ fn try_inline_def(cx: &DocContext, def: Def) -> Option<Vec<clean::Item>> {\n         }\n         _ => return None,\n     };\n-    let did = def.def_id();\n     cx.renderinfo.borrow_mut().inlined.insert(did);\n     ret.push(clean::Item {\n-        source: tcx.def_span(did).clean(cx),\n-        name: Some(tcx.item_name(did).to_string()),\n+        source: cx.tcx.def_span(did).clean(cx),\n+        name: Some(name.clean(cx)),\n         attrs: load_attrs(cx, did),\n         inner: inner,\n         visibility: Some(clean::Public),\n-        stability: tcx.lookup_stability(did).clean(cx),\n-        deprecation: tcx.lookup_deprecation(did).clean(cx),\n+        stability: cx.tcx.lookup_stability(did).clean(cx),\n+        deprecation: cx.tcx.lookup_deprecation(did).clean(cx),\n         def_id: did,\n     });\n     Some(ret)\n@@ -463,7 +447,7 @@ fn build_module(cx: &DocContext, did: DefId) -> clean::Module {\n             let def_id = item.def.def_id();\n             if cx.tcx.sess.cstore.visibility(def_id) == ty::Visibility::Public {\n                 if !visited.insert(def_id) { continue }\n-                if let Some(i) = try_inline_def(cx, item.def) {\n+                if let Some(i) = try_inline(cx, item.def, item.name) {\n                     items.extend(i)\n                 }\n             }"}, {"sha": "48d387f812d2548df1868fe197a082531d4ccdd4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb6a1fad3f5ee54f05028c7f2fdd7844c8d16a8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb6a1fad3f5ee54f05028c7f2fdd7844c8d16a8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=0cb6a1fad3f5ee54f05028c7f2fdd7844c8d16a8", "patch": "@@ -2618,7 +2618,7 @@ impl Clean<Vec<Item>> for doctree::Import {\n         } else {\n             let name = self.name;\n             if !denied {\n-                if let Some(items) = inline::try_inline(cx, path.def, Some(name)) {\n+                if let Some(items) = inline::try_inline(cx, path.def, name) {\n                     return items;\n                 }\n             }"}, {"sha": "9f7a259a7db03ace211c67b828a26873189beae1", "filename": "src/test/rustdoc/inline_cross/auxiliary/renamed-via-module.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0cb6a1fad3f5ee54f05028c7f2fdd7844c8d16a8/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Frenamed-via-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb6a1fad3f5ee54f05028c7f2fdd7844c8d16a8/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Frenamed-via-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Frenamed-via-module.rs?ref=0cb6a1fad3f5ee54f05028c7f2fdd7844c8d16a8", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+pub mod iter {\n+    mod range {\n+        pub struct StepBy;\n+    }\n+    pub use self::range::StepBy as DeprecatedStepBy;\n+    pub struct StepBy;\n+}"}, {"sha": "a4e01543761425ad82fe175a30b09f9596367d03", "filename": "src/test/rustdoc/inline_cross/renamed-via-module.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0cb6a1fad3f5ee54f05028c7f2fdd7844c8d16a8/src%2Ftest%2Frustdoc%2Finline_cross%2Frenamed-via-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb6a1fad3f5ee54f05028c7f2fdd7844c8d16a8/src%2Ftest%2Frustdoc%2Finline_cross%2Frenamed-via-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Frenamed-via-module.rs?ref=0cb6a1fad3f5ee54f05028c7f2fdd7844c8d16a8", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:renamed-via-module.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+#![crate_name = \"bar\"]\n+\n+extern crate foo;\n+\n+// @has foo/iter/index.html\n+// @has - '//a/[@href=\"struct.DeprecatedStepBy.html\"]' \"DeprecatedStepBy\"\n+// @has - '//a/[@href=\"struct.StepBy.html\"]' \"StepBy\"\n+// @has foo/iter/struct.DeprecatedStepBy.html\n+// @has - '//h1' \"Struct foo::iter::DeprecatedStepBy\"\n+// @has foo/iter/struct.StepBy.html\n+// @has - '//h1' \"Struct foo::iter::StepBy\"\n+\n+// @has bar/iter/index.html\n+// @has - '//a/[@href=\"struct.DeprecatedStepBy.html\"]' \"DeprecatedStepBy\"\n+// @has - '//a/[@href=\"struct.StepBy.html\"]' \"StepBy\"\n+// @has bar/iter/struct.DeprecatedStepBy.html\n+// @has - '//h1' \"Struct bar::iter::DeprecatedStepBy\"\n+// @has bar/iter/struct.StepBy.html\n+// @has - '//h1' \"Struct bar::iter::StepBy\"\n+pub use foo::iter;"}]}