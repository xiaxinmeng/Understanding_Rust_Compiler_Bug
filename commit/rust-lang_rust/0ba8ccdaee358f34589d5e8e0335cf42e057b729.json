{"sha": "0ba8ccdaee358f34589d5e8e0335cf42e057b729", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYThjY2RhZWUzNThmMzQ1ODlkNWU4ZTAzMzVjZjQyZTA1N2I3Mjk=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-18T16:23:48Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-21T02:05:03Z"}, "message": "rm obsolete float to_str_radix free functions", "tree": {"sha": "c469d95f9b675d7e68d7e2152bc125199994ce38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c469d95f9b675d7e68d7e2152bc125199994ce38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ba8ccdaee358f34589d5e8e0335cf42e057b729", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ba8ccdaee358f34589d5e8e0335cf42e057b729", "html_url": "https://github.com/rust-lang/rust/commit/0ba8ccdaee358f34589d5e8e0335cf42e057b729", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ba8ccdaee358f34589d5e8e0335cf42e057b729/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46fc549fa98d473f925b04e53d08f26c2e15bc2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/46fc549fa98d473f925b04e53d08f26c2e15bc2a", "html_url": "https://github.com/rust-lang/rust/commit/46fc549fa98d473f925b04e53d08f26c2e15bc2a"}], "stats": {"total": 127, "additions": 53, "deletions": 74}, "files": [{"sha": "a493dba467e46426f8ba191a0578818ed515bb6b", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0ba8ccdaee358f34589d5e8e0335cf42e057b729/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ba8ccdaee358f34589d5e8e0335cf42e057b729/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=0ba8ccdaee358f34589d5e8e0335cf42e057b729", "patch": "@@ -740,29 +740,6 @@ pub fn to_str_hex(num: f32) -> ~str {\n     r\n }\n \n-///\n-/// Converts a float to a string in a given radix\n-///\n-/// # Arguments\n-///\n-/// * num - The float value\n-/// * radix - The base to use\n-///\n-/// # Failure\n-///\n-/// Fails if called on a special value like `inf`, `-inf` or `NaN` due to\n-/// possible misinterpretation of the result at higher bases. If those values\n-/// are expected, use `to_str_radix_special()` instead.\n-///\n-#[inline]\n-pub fn to_str_radix(num: f32, rdx: uint) -> ~str {\n-    let (r, special) = strconv::float_to_str_common(\n-        num, rdx, true, strconv::SignNeg, strconv::DigAll);\n-    if special { fail!(\"number has a special value, \\\n-                      try to_str_radix_special() if those are expected\") }\n-    r\n-}\n-\n ///\n /// Converts a float to a string in a given radix, and a flag indicating\n /// whether it's a special value\n@@ -816,9 +793,25 @@ impl to_str::ToStr for f32 {\n }\n \n impl num::ToStrRadix for f32 {\n+    /// Converts a float to a string in a given radix\n+    ///\n+    /// # Arguments\n+    ///\n+    /// * num - The float value\n+    /// * radix - The base to use\n+    ///\n+    /// # Failure\n+    ///\n+    /// Fails if called on a special value like `inf`, `-inf` or `NaN` due to\n+    /// possible misinterpretation of the result at higher bases. If those values\n+    /// are expected, use `to_str_radix_special()` instead.\n     #[inline]\n     fn to_str_radix(&self, rdx: uint) -> ~str {\n-        to_str_radix(*self, rdx)\n+        let (r, special) = strconv::float_to_str_common(\n+            *self, rdx, true, strconv::SignNeg, strconv::DigAll);\n+        if special { fail!(\"number has a special value, \\\n+                          try to_str_radix_special() if those are expected\") }\n+        r\n     }\n }\n "}, {"sha": "52e74d969eb71901e2405e4065539a87d354bb29", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0ba8ccdaee358f34589d5e8e0335cf42e057b729/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ba8ccdaee358f34589d5e8e0335cf42e057b729/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=0ba8ccdaee358f34589d5e8e0335cf42e057b729", "patch": "@@ -787,29 +787,6 @@ pub fn to_str_hex(num: f64) -> ~str {\n     r\n }\n \n-///\n-/// Converts a float to a string in a given radix\n-///\n-/// # Arguments\n-///\n-/// * num - The float value\n-/// * radix - The base to use\n-///\n-/// # Failure\n-///\n-/// Fails if called on a special value like `inf`, `-inf` or `NaN` due to\n-/// possible misinterpretation of the result at higher bases. If those values\n-/// are expected, use `to_str_radix_special()` instead.\n-///\n-#[inline]\n-pub fn to_str_radix(num: f64, rdx: uint) -> ~str {\n-    let (r, special) = strconv::float_to_str_common(\n-        num, rdx, true, strconv::SignNeg, strconv::DigAll);\n-    if special { fail!(\"number has a special value, \\\n-                      try to_str_radix_special() if those are expected\") }\n-    r\n-}\n-\n ///\n /// Converts a float to a string in a given radix, and a flag indicating\n /// whether it's a special value\n@@ -863,9 +840,25 @@ impl to_str::ToStr for f64 {\n }\n \n impl num::ToStrRadix for f64 {\n+    /// Converts a float to a string in a given radix\n+    ///\n+    /// # Arguments\n+    ///\n+    /// * num - The float value\n+    /// * radix - The base to use\n+    ///\n+    /// # Failure\n+    ///\n+    /// Fails if called on a special value like `inf`, `-inf` or `NaN` due to\n+    /// possible misinterpretation of the result at higher bases. If those values\n+    /// are expected, use `to_str_radix_special()` instead.\n     #[inline]\n     fn to_str_radix(&self, rdx: uint) -> ~str {\n-        to_str_radix(*self, rdx)\n+        let (r, special) = strconv::float_to_str_common(\n+            *self, rdx, true, strconv::SignNeg, strconv::DigAll);\n+        if special { fail!(\"number has a special value, \\\n+                          try to_str_radix_special() if those are expected\") }\n+        r\n     }\n }\n "}, {"sha": "20c7adbd62c47887900510e5012a1b9a3547e830", "filename": "src/libstd/num/float.rs", "status": "modified", "additions": 19, "deletions": 26, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0ba8ccdaee358f34589d5e8e0335cf42e057b729/src%2Flibstd%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ba8ccdaee358f34589d5e8e0335cf42e057b729/src%2Flibstd%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ffloat.rs?ref=0ba8ccdaee358f34589d5e8e0335cf42e057b729", "patch": "@@ -111,29 +111,6 @@ pub fn to_str_hex(num: float) -> ~str {\n     r\n }\n \n-///\n-/// Converts a float to a string in a given radix\n-///\n-/// # Arguments\n-///\n-/// * num - The float value\n-/// * radix - The base to use\n-///\n-/// # Failure\n-///\n-/// Fails if called on a special value like `inf`, `-inf` or `NaN` due to\n-/// possible misinterpretation of the result at higher bases. If those values\n-/// are expected, use `to_str_radix_special()` instead.\n-///\n-#[inline]\n-pub fn to_str_radix(num: float, radix: uint) -> ~str {\n-    let (r, special) = strconv::float_to_str_common(\n-        num, radix, true, strconv::SignNeg, strconv::DigAll);\n-    if special { fail!(\"number has a special value, \\\n-                         try to_str_radix_special() if those are expected\") }\n-    r\n-}\n-\n ///\n /// Converts a float to a string in a given radix, and a flag indicating\n /// whether it's a special value\n@@ -187,9 +164,25 @@ impl to_str::ToStr for float {\n }\n \n impl num::ToStrRadix for float {\n+    /// Converts a float to a string in a given radix\n+    ///\n+    /// # Arguments\n+    ///\n+    /// * num - The float value\n+    /// * radix - The base to use\n+    ///\n+    /// # Failure\n+    ///\n+    /// Fails if called on a special value like `inf`, `-inf` or `NaN` due to\n+    /// possible misinterpretation of the result at higher bases. If those values\n+    /// are expected, use `to_str_radix_special()` instead.\n     #[inline]\n     fn to_str_radix(&self, radix: uint) -> ~str {\n-        to_str_radix(*self, radix)\n+        let (r, special) = strconv::float_to_str_common(\n+            *self, radix, true, strconv::SignNeg, strconv::DigAll);\n+        if special { fail!(\"number has a special value, \\\n+                             try to_str_radix_special() if those are expected\") }\n+        r\n     }\n }\n \n@@ -1342,8 +1335,8 @@ mod tests {\n \n     #[test]\n     pub fn test_to_str_radix() {\n-        assert_eq!(to_str_radix(36., 36u), ~\"10\");\n-        assert_eq!(to_str_radix(8.125, 2u), ~\"1000.001\");\n+        assert_eq!(36.0f.to_str_radix(36u), ~\"10\");\n+        assert_eq!(8.125f.to_str_radix(2u), ~\"1000.001\");\n     }\n \n     #[test]"}]}