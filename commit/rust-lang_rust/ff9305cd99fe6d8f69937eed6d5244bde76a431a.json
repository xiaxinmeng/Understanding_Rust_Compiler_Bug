{"sha": "ff9305cd99fe6d8f69937eed6d5244bde76a431a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmOTMwNWNkOTlmZTZkOGY2OTkzN2VlZDZkNTI0NGJkZTc2YTQzMWE=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-04-03T17:38:54Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-04-04T05:43:10Z"}, "message": "std: add a pure rust strftime formatter.", "tree": {"sha": "b7056d43bfff036824b4384ac70e9c3235d0caea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7056d43bfff036824b4384ac70e9c3235d0caea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff9305cd99fe6d8f69937eed6d5244bde76a431a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff9305cd99fe6d8f69937eed6d5244bde76a431a", "html_url": "https://github.com/rust-lang/rust/commit/ff9305cd99fe6d8f69937eed6d5244bde76a431a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff9305cd99fe6d8f69937eed6d5244bde76a431a/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a4889859e84b65617c27a08e129086267b58695", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a4889859e84b65617c27a08e129086267b58695", "html_url": "https://github.com/rust-lang/rust/commit/4a4889859e84b65617c27a08e129086267b58695"}], "stats": {"total": 306, "additions": 306, "deletions": 0}, "files": [{"sha": "3bdfb9a6aa20b9b8e2deca8f71ce7655f56a89d1", "filename": "src/libstd/time.rs", "status": "modified", "additions": 306, "deletions": 0, "changes": 306, "blob_url": "https://github.com/rust-lang/rust/blob/ff9305cd99fe6d8f69937eed6d5244bde76a431a/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff9305cd99fe6d8f69937eed6d5244bde76a431a/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=ff9305cd99fe6d8f69937eed6d5244bde76a431a", "patch": "@@ -116,6 +116,175 @@ fn now() -> tm {\n     at(get_time())\n }\n \n+fn strftime(format: str, tm: tm) -> str {\n+    fn parse_type(ch: char, tm: tm) -> str {\n+        //FIXME: Implement missing types.\n+        alt check ch {\n+          'A' {\n+            alt check tm.tm_wday as int {\n+              0 { \"Sunday\" }\n+              1 { \"Monday\" }\n+              2 { \"Tuesday\" }\n+              3 { \"Wednesday\" }\n+              4 { \"Thursday\" }\n+              5 { \"Friday\" }\n+              6 { \"Saturday\" }\n+            }\n+          }\n+          'a' {\n+            alt check tm.tm_wday as int {\n+              0 { \"Sun\" }\n+              1 { \"Mon\" }\n+              2 { \"Tue\" }\n+              3 { \"Wed\" }\n+              4 { \"Thu\" }\n+              5 { \"Fri\" }\n+              6 { \"Sat\" }\n+            }\n+          }\n+          'B' {\n+            alt check tm.tm_mon as int {\n+              0 { \"January\" }\n+              1 { \"February\" }\n+              2 { \"March\" }\n+              3 { \"April\" }\n+              4 { \"May\" }\n+              5 { \"June\" }\n+              6 { \"July\" }\n+              7 { \"August\" }\n+              8 { \"September\" }\n+              9 { \"October\" }\n+              10 { \"November\" }\n+              11 { \"December\" }\n+            }\n+          }\n+          'b' | 'h' {\n+            alt check tm.tm_mon as int {\n+              0 { \"Jan\" }\n+              1 { \"Feb\" }\n+              2 { \"Mar\" }\n+              3 { \"Apr\" }\n+              4 { \"May\" }\n+              5 { \"Jun\" }\n+              6 { \"Jul\" }\n+              7 { \"Aug\" }\n+              8 { \"Sep\" }\n+              9 { \"Oct\" }\n+              10 { \"Nov\" }\n+              11 { \"Dec\" }\n+            }\n+          }\n+          'C' { #fmt(\"%02d\", (tm.tm_year as int + 1900) / 100) }\n+          'c' {\n+            #fmt(\"%s %s %s %s %s\",\n+                parse_type('a', tm),\n+                parse_type('b', tm),\n+                parse_type('e', tm),\n+                parse_type('T', tm),\n+                parse_type('Y', tm))\n+          }\n+          'D' | 'x' {\n+            #fmt(\"%s/%s/%s\",\n+                parse_type('m', tm),\n+                parse_type('d', tm),\n+                parse_type('y', tm))\n+          }\n+          'd' { #fmt(\"%02d\", tm.tm_mday as int) }\n+          'e' { #fmt(\"%2d\", tm.tm_mday as int) }\n+          'F' {\n+            #fmt(\"%s-%s-%s\",\n+                parse_type('Y', tm),\n+                parse_type('m', tm),\n+                parse_type('d', tm))\n+          }\n+          //'G' {}\n+          //'g' {}\n+          'H' { #fmt(\"%02d\", tm.tm_hour as int) }\n+          'I' {\n+            let mut h = tm.tm_hour as int;\n+            if h == 0 { h = 12 }\n+            if h > 12 { h -= 12 }\n+            #fmt(\"%02d\", h)\n+          }\n+          'j' { #fmt(\"%03d\", tm.tm_yday as int + 1) }\n+          'k' { #fmt(\"%2d\", tm.tm_hour as int) }\n+          'l' {\n+            let mut h = tm.tm_hour as int;\n+            if h == 0 { h = 12 }\n+            if h > 12 { h -= 12 }\n+            #fmt(\"%2d\", h)\n+          }\n+          'M' { #fmt(\"%02d\", tm.tm_min as int) }\n+          'm' { #fmt(\"%02d\", tm.tm_mon as int + 1) }\n+          'n' { \"\\n\" }\n+          'P' { if tm.tm_hour as int < 12 { \"am\" } else { \"pm\" } }\n+          'p' { if tm.tm_hour as int < 12 { \"AM\" } else { \"PM\" } }\n+          'R' {\n+            #fmt(\"%s:%s\",\n+                parse_type('H', tm),\n+                parse_type('M', tm))\n+          }\n+          'r' {\n+            #fmt(\"%s:%s:%s %s\",\n+                parse_type('I', tm),\n+                parse_type('M', tm),\n+                parse_type('S', tm),\n+                parse_type('p', tm))\n+          }\n+          'S' { #fmt(\"%02d\", tm.tm_sec as int) }\n+          's' { #fmt(\"%d\", tm.to_timespec().sec as int) }\n+          'T' | 'X' {\n+            #fmt(\"%s:%s:%s\",\n+                parse_type('H', tm),\n+                parse_type('M', tm),\n+                parse_type('S', tm))\n+          }\n+          't' { \"\\t\" }\n+          //'U' {}\n+          'u' {\n+            let i = tm.tm_wday as int;\n+            int::str(if i == 0 { 7 } else { i })\n+          }\n+          //'V' {}\n+          'v' {\n+            #fmt(\"%s-%s-%s\",\n+                parse_type('e', tm),\n+                parse_type('b', tm),\n+                parse_type('Y', tm))\n+          }\n+          //'W' {}\n+          'w' { int::str(tm.tm_wday as int) }\n+          //'X' {}\n+          //'x' {}\n+          'Y' { int::str(tm.tm_year as int + 1900) }\n+          'y' { #fmt(\"%02d\", (tm.tm_year as int + 1900) % 100) }\n+          'Z' { tm.tm_zone }\n+          'z' {\n+            let sign = if tm.tm_gmtoff > 0_i32 { '+' } else { '-' };\n+            let mut m = i32::abs(tm.tm_gmtoff) / 60_i32;\n+            let h = m / 60_i32;\n+            m -= h * 60_i32;\n+            #fmt(\"%c%02d%02d\", sign, h as int, m as int)\n+          }\n+          //'+' {}\n+          '%' { \"%\" }\n+        }\n+    }\n+\n+    let mut buf = \"\";\n+\n+    io::with_str_reader(format) { |rdr|\n+        while !rdr.eof() {\n+            alt rdr.read_char() {\n+                '%' { buf += parse_type(rdr.read_char(), tm); }\n+                ch { str::push_char(buf, ch); }\n+            }\n+        }\n+    }\n+\n+    buf\n+}\n+\n impl tm for tm {\n     #[doc = \"Convert time to the seconds from January 1, 1970\"]\n     fn to_timespec() -> timespec {\n@@ -137,6 +306,58 @@ impl tm for tm {\n     fn to_utc() -> tm {\n         at_utc(self.to_timespec())\n     }\n+\n+    #[doc = \"\n+    Return a string of the current time in the form\n+    \\\"Thu Jan  1 00:00:00 1970\\\".\n+    \"]\n+    fn ctime() -> str { self.strftime(\"%c\") }\n+\n+    #[doc = \"Formats the time according to the format string.\"]\n+    fn strftime(format: str) -> str { strftime(format, self) }\n+\n+    #[doc = \"\n+    Returns a time string formatted according to RFC 822.\n+\n+    local: \\\"Thu, 22 Mar 2012 07:53:18 PST\\\"\n+    utc:   \\\"Thu, 22 Mar 2012 14:53:18 UTC\\\"\n+    \"]\n+    fn rfc822() -> str {\n+        if self.tm_gmtoff == 0_i32 {\n+            self.strftime(\"%a, %d %b %Y %T GMT\")\n+        } else {\n+            self.strftime(\"%a, %d %b %Y %T %Z\")\n+        }\n+    }\n+\n+    #[doc = \"\n+    Returns a time string formatted according to RFC 822 with Zulu time.\n+\n+    local: \\\"Thu, 22 Mar 2012 07:53:18 -0700\\\"\n+    utc:   \\\"Thu, 22 Mar 2012 14:53:18 -0000\\\"\n+    \"]\n+    fn rfc822z() -> str {\n+        self.strftime(\"%a, %d %b %Y %T %z\")\n+    }\n+\n+    #[doc = \"\n+    Returns a time string formatted according to ISO 8601.\n+\n+    local: \\\"2012-02-22T07:53:18-07:00\\\"\n+    utc:   \\\"2012-02-22T14:53:18Z\\\"\n+    \"]\n+    fn rfc3339() -> str {\n+        if self.tm_gmtoff == 0_i32 {\n+            self.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n+        } else {\n+            let s = self.strftime(\"%Y-%m-%dT%H:%M:%S\");\n+            let sign = if self.tm_gmtoff > 0_i32 { '+' } else { '-' };\n+            let mut m = i32::abs(self.tm_gmtoff) / 60_i32;\n+            let h = m / 60_i32;\n+            m -= h * 60_i32;\n+            s + #fmt(\"%c%02d:%02d\", sign, h as int, m as int)\n+        }\n+    }\n }\n \n #[cfg(test)]\n@@ -258,4 +479,89 @@ mod tests {\n         assert utc.to_local() == local;\n         assert utc.to_local().to_utc() == utc;\n     }\n+\n+    #[test]\n+    fn test_ctime() {\n+        os::setenv(\"TZ\", \"America/Los_Angeles\");\n+\n+        let time = { sec: 1234567890_i64, nsec: 54321_i32 };\n+        let utc   = at_utc(time);\n+        let local = at(time);\n+\n+        assert utc.ctime()   == \"Fri Feb 13 23:31:30 2009\";\n+        assert local.ctime() == \"Fri Feb 13 15:31:30 2009\";\n+    }\n+\n+    #[test]\n+    fn test_strftime() {\n+        os::setenv(\"TZ\", \"America/Los_Angeles\");\n+\n+        let time = { sec: 1234567890_i64, nsec: 54321_i32 };\n+        let utc = at_utc(time);\n+        let local = at(time);\n+\n+        assert local.strftime(\"\") == \"\";\n+        assert local.strftime(\"%A\") == \"Friday\";\n+        assert local.strftime(\"%a\") == \"Fri\";\n+        assert local.strftime(\"%B\") == \"February\";\n+        assert local.strftime(\"%b\") == \"Feb\";\n+        assert local.strftime(\"%C\") == \"20\";\n+        assert local.strftime(\"%c\") == \"Fri Feb 13 15:31:30 2009\";\n+        assert local.strftime(\"%D\") == \"02/13/09\";\n+        assert local.strftime(\"%d\") == \"13\";\n+        assert local.strftime(\"%e\") == \"13\";\n+        assert local.strftime(\"%F\") == \"2009-02-13\";\n+        // assert local.strftime(\"%G\") == \"2009\";\n+        // assert local.strftime(\"%g\") == \"09\";\n+        assert local.strftime(\"%H\") == \"15\";\n+        assert local.strftime(\"%I\") == \"03\";\n+        assert local.strftime(\"%j\") == \"044\";\n+        assert local.strftime(\"%k\") == \"15\";\n+        assert local.strftime(\"%l\") == \" 3\";\n+        assert local.strftime(\"%M\") == \"31\";\n+        assert local.strftime(\"%m\") == \"02\";\n+        assert local.strftime(\"%n\") == \"\\n\";\n+        assert local.strftime(\"%P\") == \"pm\";\n+        assert local.strftime(\"%p\") == \"PM\";\n+        assert local.strftime(\"%R\") == \"15:31\";\n+        assert local.strftime(\"%r\") == \"03:31:30 PM\";\n+        assert local.strftime(\"%S\") == \"30\";\n+        assert local.strftime(\"%s\") == \"1234567890\";\n+        assert local.strftime(\"%T\") == \"15:31:30\";\n+        assert local.strftime(\"%t\") == \"\\t\";\n+        // assert local.strftime(\"%U\") == \"06\";\n+        assert local.strftime(\"%u\") == \"5\";\n+        // assert local.strftime(\"%V\") == \"07\";\n+        assert local.strftime(\"%v\") == \"13-Feb-2009\";\n+        // assert local.strftime(\"%W\") == \"06\";\n+        assert local.strftime(\"%w\") == \"5\";\n+        // handle \"%X\"\n+        // handle \"%x\"\n+        assert local.strftime(\"%Y\") == \"2009\";\n+        assert local.strftime(\"%y\") == \"09\";\n+\n+        // FIXME: We should probably standardize on the timezone\n+        // abbreviation.\n+        let zone = local.strftime(\"%Z\");\n+        assert zone == \"PST\" || zone == \"Pacific Standard Time\";\n+\n+        assert local.strftime(\"%z\") == \"-0800\";\n+        assert local.strftime(\"%%\") == \"%\";\n+\n+        // FIXME: We should probably standardize on the timezone\n+        // abbreviation.\n+        let rfc822 = local.rfc822();\n+        let prefix = \"Fri, 13 Feb 2009 15:31:30 \";\n+        assert rfc822 == prefix + \"PST\" ||\n+               rfc822 == prefix + \"Pacific Standard Time\";\n+\n+        assert local.ctime() == \"Fri Feb 13 15:31:30 2009\";\n+        assert local.rfc822z() == \"Fri, 13 Feb 2009 15:31:30 -0800\";\n+        assert local.rfc3339() == \"2009-02-13T15:31:30-08:00\";\n+\n+        assert utc.ctime() == \"Fri Feb 13 23:31:30 2009\";\n+        assert utc.rfc822() == \"Fri, 13 Feb 2009 23:31:30 GMT\";\n+        assert utc.rfc822z() == \"Fri, 13 Feb 2009 23:31:30 -0000\";\n+        assert utc.rfc3339() == \"2009-02-13T23:31:30Z\";\n+    }\n }"}]}