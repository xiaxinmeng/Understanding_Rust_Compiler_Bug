{"sha": "7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NTBjM2Q0NmJjMTk3ODRhZGIxZWU2ZTM3YTVlYzdlNGNkN2U3NzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-26T14:08:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-26T14:08:46Z"}, "message": "Auto merge of #73513 - oli-obk:const_binop_overflow, r=estebank\n\nShow the values and computation that would overflow a const evaluation or propagation\n\nFixes #71134\n\nIn contrast to the example in the issue it doesn't use individual spans for each operand. The effort required to implement that is quite high compared to the little (if at all) benefit it would bring to diagnostics.\n\ncc @shepmaster\n\nThe way this is implemented it is also fairly easy to do the same for overflow panics at runtime, but that should be done in a separate PR since it may have runtime performance implications.", "tree": {"sha": "e395669f205e3b46ff20c3eaa11b02b07f52528d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e395669f205e3b46ff20c3eaa11b02b07f52528d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "html_url": "https://github.com/rust-lang/rust/commit/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "html_url": "https://github.com/rust-lang/rust/commit/9672b5e95c520774cc17bffc7031c80a1bcf4b4c"}, {"sha": "819cde5dabd90dab1fb462cd713457421d0ebd36", "url": "https://api.github.com/repos/rust-lang/rust/commits/819cde5dabd90dab1fb462cd713457421d0ebd36", "html_url": "https://github.com/rust-lang/rust/commit/819cde5dabd90dab1fb462cd713457421d0ebd36"}], "stats": {"total": 2259, "additions": 1273, "deletions": 986}, "files": [{"sha": "480f9a5032087ad5d54249f4c1a49ca2dbb382ae", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -380,7 +380,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         // checked operation, just a comparison with the minimum\n         // value, so we have to check for the assert message.\n         if !bx.check_overflow() {\n-            if let AssertKind::OverflowNeg = *msg {\n+            if let AssertKind::OverflowNeg(_) = *msg {\n                 const_cond = Some(expected);\n             }\n         }"}, {"sha": "b3e410f362d685136d5bc0881d95ec7eb0c9367b", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 88, "deletions": 16, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,6 +2,8 @@\n //!\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/mir/index.html\n \n+// ignore-tidy-filelength\n+\n use crate::mir::interpret::{GlobalAlloc, Scalar};\n use crate::mir::visit::MirVisitable;\n use crate::ty::adjustment::PointerCast;\n@@ -1246,10 +1248,10 @@ pub enum TerminatorKind<'tcx> {\n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable, PartialEq)]\n pub enum AssertKind<O> {\n     BoundsCheck { len: O, index: O },\n-    Overflow(BinOp),\n-    OverflowNeg,\n-    DivisionByZero,\n-    RemainderByZero,\n+    Overflow(BinOp, O, O),\n+    OverflowNeg(O),\n+    DivisionByZero(O),\n+    RemainderByZero(O),\n     ResumedAfterReturn(GeneratorKind),\n     ResumedAfterPanic(GeneratorKind),\n }\n@@ -1522,17 +1524,17 @@ impl<O> AssertKind<O> {\n     pub fn description(&self) -> &'static str {\n         use AssertKind::*;\n         match self {\n-            Overflow(BinOp::Add) => \"attempt to add with overflow\",\n-            Overflow(BinOp::Sub) => \"attempt to subtract with overflow\",\n-            Overflow(BinOp::Mul) => \"attempt to multiply with overflow\",\n-            Overflow(BinOp::Div) => \"attempt to divide with overflow\",\n-            Overflow(BinOp::Rem) => \"attempt to calculate the remainder with overflow\",\n-            OverflowNeg => \"attempt to negate with overflow\",\n-            Overflow(BinOp::Shr) => \"attempt to shift right with overflow\",\n-            Overflow(BinOp::Shl) => \"attempt to shift left with overflow\",\n-            Overflow(op) => bug!(\"{:?} cannot overflow\", op),\n-            DivisionByZero => \"attempt to divide by zero\",\n-            RemainderByZero => \"attempt to calculate the remainder with a divisor of zero\",\n+            Overflow(BinOp::Add, _, _) => \"attempt to add with overflow\",\n+            Overflow(BinOp::Sub, _, _) => \"attempt to subtract with overflow\",\n+            Overflow(BinOp::Mul, _, _) => \"attempt to multiply with overflow\",\n+            Overflow(BinOp::Div, _, _) => \"attempt to divide with overflow\",\n+            Overflow(BinOp::Rem, _, _) => \"attempt to calculate the remainder with overflow\",\n+            OverflowNeg(_) => \"attempt to negate with overflow\",\n+            Overflow(BinOp::Shr, _, _) => \"attempt to shift right with overflow\",\n+            Overflow(BinOp::Shl, _, _) => \"attempt to shift left with overflow\",\n+            Overflow(op, _, _) => bug!(\"{:?} cannot overflow\", op),\n+            DivisionByZero(_) => \"attempt to divide by zero\",\n+            RemainderByZero(_) => \"attempt to calculate the remainder with a divisor of zero\",\n             ResumedAfterReturn(GeneratorKind::Gen) => \"generator resumed after completion\",\n             ResumedAfterReturn(GeneratorKind::Async(_)) => \"`async fn` resumed after completion\",\n             ResumedAfterPanic(GeneratorKind::Gen) => \"generator resumed after panicking\",\n@@ -1546,12 +1548,54 @@ impl<O> AssertKind<O> {\n     where\n         O: Debug,\n     {\n+        use AssertKind::*;\n         match self {\n-            AssertKind::BoundsCheck { ref len, ref index } => write!(\n+            BoundsCheck { ref len, ref index } => write!(\n                 f,\n                 \"\\\"index out of bounds: the len is {{}} but the index is {{}}\\\", {:?}, {:?}\",\n                 len, index\n             ),\n+\n+            OverflowNeg(op) => {\n+                write!(f, \"\\\"attempt to negate {{}} which would overflow\\\", {:?}\", op)\n+            }\n+            DivisionByZero(op) => write!(f, \"\\\"attempt to divide {{}} by zero\\\", {:?}\", op),\n+            RemainderByZero(op) => write!(\n+                f,\n+                \"\\\"attempt to calculate the remainder of {{}} with a divisor of zero\\\", {:?}\",\n+                op\n+            ),\n+            Overflow(BinOp::Add, l, r) => write!(\n+                f,\n+                \"\\\"attempt to compute `{{}} + {{}}` which would overflow\\\", {:?}, {:?}\",\n+                l, r\n+            ),\n+            Overflow(BinOp::Sub, l, r) => write!(\n+                f,\n+                \"\\\"attempt to compute `{{}} - {{}}` which would overflow\\\", {:?}, {:?}\",\n+                l, r\n+            ),\n+            Overflow(BinOp::Mul, l, r) => write!(\n+                f,\n+                \"\\\"attempt to compute `{{}} * {{}}` which would overflow\\\", {:?}, {:?}\",\n+                l, r\n+            ),\n+            Overflow(BinOp::Div, l, r) => write!(\n+                f,\n+                \"\\\"attempt to compute `{{}} / {{}}` which would overflow\\\", {:?}, {:?}\",\n+                l, r\n+            ),\n+            Overflow(BinOp::Rem, l, r) => write!(\n+                f,\n+                \"\\\"attempt to compute the remainder of `{{}} % {{}}` which would overflow\\\", {:?}, {:?}\",\n+                l, r\n+            ),\n+            Overflow(BinOp::Shr, _, r) => {\n+                write!(f, \"\\\"attempt to shift right by {{}} which would overflow\\\", {:?}\", r)\n+            }\n+            Overflow(BinOp::Shl, _, r) => {\n+                write!(f, \"\\\"attempt to shift left by {{}} which would overflow\\\", {:?}\", r)\n+            }\n             _ => write!(f, \"\\\"{}\\\"\", self.description()),\n         }\n     }\n@@ -1564,6 +1608,34 @@ impl<O: fmt::Debug> fmt::Debug for AssertKind<O> {\n             BoundsCheck { ref len, ref index } => {\n                 write!(f, \"index out of bounds: the len is {:?} but the index is {:?}\", len, index)\n             }\n+            OverflowNeg(op) => write!(f, \"attempt to negate {:#?} which would overflow\", op),\n+            DivisionByZero(op) => write!(f, \"attempt to divide {:#?} by zero\", op),\n+            RemainderByZero(op) => {\n+                write!(f, \"attempt to calculate the remainder of {:#?} with a divisor of zero\", op)\n+            }\n+            Overflow(BinOp::Add, l, r) => {\n+                write!(f, \"attempt to compute `{:#?} + {:#?}` which would overflow\", l, r)\n+            }\n+            Overflow(BinOp::Sub, l, r) => {\n+                write!(f, \"attempt to compute `{:#?} - {:#?}` which would overflow\", l, r)\n+            }\n+            Overflow(BinOp::Mul, l, r) => {\n+                write!(f, \"attempt to compute `{:#?} * {:#?}` which would overflow\", l, r)\n+            }\n+            Overflow(BinOp::Div, l, r) => {\n+                write!(f, \"attempt to compute `{:#?} / {:#?}` which would overflow\", l, r)\n+            }\n+            Overflow(BinOp::Rem, l, r) => write!(\n+                f,\n+                \"attempt to compute the remainder of `{:#?} % {:#?}` which would overflow\",\n+                l, r\n+            ),\n+            Overflow(BinOp::Shr, _, r) => {\n+                write!(f, \"attempt to shift right by {:#?} which would overflow\", r)\n+            }\n+            Overflow(BinOp::Shl, _, r) => {\n+                write!(f, \"attempt to shift left by {:#?} which would overflow\", r)\n+            }\n             _ => write!(f, \"{}\", self.description()),\n         }\n     }"}, {"sha": "6bb6abe0289108064e108bb14b7d835154b9324f", "filename": "src/librustc_middle/mir/type_foldable.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Flibrustc_middle%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Flibrustc_middle%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Ftype_foldable.rs?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -58,15 +58,14 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n             Assert { ref cond, expected, ref msg, target, cleanup } => {\n                 use AssertKind::*;\n                 let msg = match msg {\n-                    BoundsCheck { ref len, ref index } => {\n+                    BoundsCheck { len, index } => {\n                         BoundsCheck { len: len.fold_with(folder), index: index.fold_with(folder) }\n                     }\n-                    Overflow(_)\n-                    | OverflowNeg\n-                    | DivisionByZero\n-                    | RemainderByZero\n-                    | ResumedAfterReturn(_)\n-                    | ResumedAfterPanic(_) => msg.clone(),\n+                    Overflow(op, l, r) => Overflow(*op, l.fold_with(folder), r.fold_with(folder)),\n+                    OverflowNeg(op) => OverflowNeg(op.fold_with(folder)),\n+                    DivisionByZero(op) => DivisionByZero(op.fold_with(folder)),\n+                    RemainderByZero(op) => RemainderByZero(op.fold_with(folder)),\n+                    ResumedAfterReturn(_) | ResumedAfterPanic(_) => msg.clone(),\n                 };\n                 Assert { cond: cond.fold_with(folder), expected, msg, target, cleanup }\n             }\n@@ -117,12 +116,11 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                         BoundsCheck { ref len, ref index } => {\n                             len.visit_with(visitor) || index.visit_with(visitor)\n                         }\n-                        Overflow(_)\n-                        | OverflowNeg\n-                        | DivisionByZero\n-                        | RemainderByZero\n-                        | ResumedAfterReturn(_)\n-                        | ResumedAfterPanic(_) => false,\n+                        Overflow(_, l, r) => l.visit_with(visitor) || r.visit_with(visitor),\n+                        OverflowNeg(op) | DivisionByZero(op) | RemainderByZero(op) => {\n+                            op.visit_with(visitor)\n+                        }\n+                        ResumedAfterReturn(_) | ResumedAfterPanic(_) => false,\n                     }\n                 } else {\n                     false"}, {"sha": "c6ace5bbf6685b393e0f24c9cc5301fcce0dc5a8", "filename": "src/librustc_middle/mir/visit.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fvisit.rs?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -571,7 +571,13 @@ macro_rules! make_mir_visitor {\n                         self.visit_operand(len, location);\n                         self.visit_operand(index, location);\n                     }\n-                    Overflow(_) | OverflowNeg | DivisionByZero | RemainderByZero |\n+                    Overflow(_, l, r) => {\n+                        self.visit_operand(l, location);\n+                        self.visit_operand(r, location);\n+                    }\n+                    OverflowNeg(op) | DivisionByZero(op) | RemainderByZero(op) => {\n+                        self.visit_operand(op, location);\n+                    }\n                     ResumedAfterReturn(_) | ResumedAfterPanic(_) => {\n                         // Nothing to visit\n                     }"}, {"sha": "ced0429deab934736c835b16d8f14220815424cb", "filename": "src/librustc_middle/ty/consts.rs", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Flibrustc_middle%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Flibrustc_middle%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fconsts.rs?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -0,0 +1,111 @@\n+use crate::mir::interpret::truncate;\n+use rustc_target::abi::Size;\n+\n+#[derive(Copy, Clone)]\n+/// A type for representing any integer. Only used for printing.\n+// FIXME: Use this for the integer-tree representation needed for type level ints and\n+// const generics?\n+pub struct ConstInt {\n+    /// Number of bytes of the integer. Only 1, 2, 4, 8, 16 are legal values.\n+    size: u8,\n+    /// Whether the value is of a signed integer type.\n+    signed: bool,\n+    /// Whether the value is a `usize` or `isize` type.\n+    is_ptr_sized_integral: bool,\n+    /// Raw memory of the integer. All bytes beyond the `size` are unused and must be zero.\n+    raw: u128,\n+}\n+\n+impl ConstInt {\n+    pub fn new(raw: u128, size: Size, signed: bool, is_ptr_sized_integral: bool) -> Self {\n+        assert!(raw <= truncate(u128::MAX, size));\n+        Self { raw, size: size.bytes() as u8, signed, is_ptr_sized_integral }\n+    }\n+}\n+\n+impl std::fmt::Debug for ConstInt {\n+    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        let Self { size, signed, raw, is_ptr_sized_integral } = *self;\n+        if signed {\n+            let bit_size = size * 8;\n+            let min = 1u128 << (bit_size - 1);\n+            let max = min - 1;\n+            if raw == min {\n+                match (size, is_ptr_sized_integral) {\n+                    (_, true) => write!(fmt, \"isize::MIN\"),\n+                    (1, _) => write!(fmt, \"i8::MIN\"),\n+                    (2, _) => write!(fmt, \"i16::MIN\"),\n+                    (4, _) => write!(fmt, \"i32::MIN\"),\n+                    (8, _) => write!(fmt, \"i64::MIN\"),\n+                    (16, _) => write!(fmt, \"i128::MIN\"),\n+                    _ => bug!(\"ConstInt 0x{:x} with size = {} and signed = {}\", raw, size, signed),\n+                }\n+            } else if raw == max {\n+                match (size, is_ptr_sized_integral) {\n+                    (_, true) => write!(fmt, \"isize::MAX\"),\n+                    (1, _) => write!(fmt, \"i8::MAX\"),\n+                    (2, _) => write!(fmt, \"i16::MAX\"),\n+                    (4, _) => write!(fmt, \"i32::MAX\"),\n+                    (8, _) => write!(fmt, \"i64::MAX\"),\n+                    (16, _) => write!(fmt, \"i128::MAX\"),\n+                    _ => bug!(\"ConstInt 0x{:x} with size = {} and signed = {}\", raw, size, signed),\n+                }\n+            } else {\n+                match size {\n+                    1 => write!(fmt, \"{}\", raw as i8)?,\n+                    2 => write!(fmt, \"{}\", raw as i16)?,\n+                    4 => write!(fmt, \"{}\", raw as i32)?,\n+                    8 => write!(fmt, \"{}\", raw as i64)?,\n+                    16 => write!(fmt, \"{}\", raw as i128)?,\n+                    _ => bug!(\"ConstInt 0x{:x} with size = {} and signed = {}\", raw, size, signed),\n+                }\n+                if fmt.alternate() {\n+                    match (size, is_ptr_sized_integral) {\n+                        (_, true) => write!(fmt, \"_isize\")?,\n+                        (1, _) => write!(fmt, \"_i8\")?,\n+                        (2, _) => write!(fmt, \"_i16\")?,\n+                        (4, _) => write!(fmt, \"_i32\")?,\n+                        (8, _) => write!(fmt, \"_i64\")?,\n+                        (16, _) => write!(fmt, \"_i128\")?,\n+                        _ => bug!(),\n+                    }\n+                }\n+                Ok(())\n+            }\n+        } else {\n+            let max = truncate(u128::MAX, Size::from_bytes(size));\n+            if raw == max {\n+                match (size, is_ptr_sized_integral) {\n+                    (_, true) => write!(fmt, \"usize::MAX\"),\n+                    (1, _) => write!(fmt, \"u8::MAX\"),\n+                    (2, _) => write!(fmt, \"u16::MAX\"),\n+                    (4, _) => write!(fmt, \"u32::MAX\"),\n+                    (8, _) => write!(fmt, \"u64::MAX\"),\n+                    (16, _) => write!(fmt, \"u128::MAX\"),\n+                    _ => bug!(\"ConstInt 0x{:x} with size = {} and signed = {}\", raw, size, signed),\n+                }\n+            } else {\n+                match size {\n+                    1 => write!(fmt, \"{}\", raw as u8)?,\n+                    2 => write!(fmt, \"{}\", raw as u16)?,\n+                    4 => write!(fmt, \"{}\", raw as u32)?,\n+                    8 => write!(fmt, \"{}\", raw as u64)?,\n+                    16 => write!(fmt, \"{}\", raw as u128)?,\n+                    _ => bug!(\"ConstInt 0x{:x} with size = {} and signed = {}\", raw, size, signed),\n+                }\n+                if fmt.alternate() {\n+                    match (size, is_ptr_sized_integral) {\n+                        (_, true) => write!(fmt, \"_usize\")?,\n+                        (1, _) => write!(fmt, \"_u8\")?,\n+                        (2, _) => write!(fmt, \"_u16\")?,\n+                        (4, _) => write!(fmt, \"_u32\")?,\n+                        (8, _) => write!(fmt, \"_u64\")?,\n+                        (16, _) => write!(fmt, \"_u128\")?,\n+                        _ => bug!(),\n+                    }\n+                }\n+                Ok(())\n+            }\n+        }\n+    }\n+}"}, {"sha": "03aab2c0f9f2cb11d0ff46b4282c940455ff6961", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -84,6 +84,8 @@ pub use self::trait_def::TraitDef;\n \n pub use self::query::queries;\n \n+pub use self::consts::ConstInt;\n+\n pub mod adjustment;\n pub mod binding;\n pub mod cast;\n@@ -108,6 +110,7 @@ pub mod trait_def;\n pub mod util;\n pub mod walk;\n \n+mod consts;\n mod context;\n mod diagnostics;\n mod instance;"}, {"sha": "061214249713d689f2d7f1e1c6eb9e0ab6f677df", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 7, "deletions": 30, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -1,10 +1,8 @@\n use crate::middle::cstore::{ExternCrate, ExternCrateSource};\n-use crate::mir::interpret::{\n-    sign_extend, truncate, AllocId, ConstValue, GlobalAlloc, Pointer, Scalar,\n-};\n+use crate::mir::interpret::{AllocId, ConstValue, GlobalAlloc, Pointer, Scalar};\n use crate::ty::layout::IntegerExt;\n use crate::ty::subst::{GenericArg, GenericArgKind, Subst};\n-use crate::ty::{self, DefIdTree, ParamConst, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{self, ConstInt, DefIdTree, ParamConst, Ty, TyCtxt, TypeFoldable};\n use rustc_apfloat::ieee::{Double, Single};\n use rustc_apfloat::Float;\n use rustc_ast::ast;\n@@ -981,35 +979,14 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             // Int\n             (Scalar::Raw { data, .. }, ty::Uint(ui)) => {\n-                let bit_size = Integer::from_attr(&self.tcx(), UnsignedInt(*ui)).size();\n-                let max = truncate(u128::MAX, bit_size);\n-\n-                let ui_str = ui.name_str();\n-                if data == max {\n-                    p!(write(\"{}::MAX\", ui_str))\n-                } else {\n-                    if print_ty { p!(write(\"{}{}\", data, ui_str)) } else { p!(write(\"{}\", data)) }\n-                };\n+                let size = Integer::from_attr(&self.tcx(), UnsignedInt(*ui)).size();\n+                let int = ConstInt::new(data, size, false, ty.is_ptr_sized_integral());\n+                if print_ty { p!(write(\"{:#?}\", int)) } else { p!(write(\"{:?}\", int)) }\n             }\n             (Scalar::Raw { data, .. }, ty::Int(i)) => {\n                 let size = Integer::from_attr(&self.tcx(), SignedInt(*i)).size();\n-                let bit_size = size.bits() as u128;\n-                let min = 1u128 << (bit_size - 1);\n-                let max = min - 1;\n-\n-                let i_str = i.name_str();\n-                match data {\n-                    d if d == min => p!(write(\"{}::MIN\", i_str)),\n-                    d if d == max => p!(write(\"{}::MAX\", i_str)),\n-                    _ => {\n-                        let data = sign_extend(data, size) as i128;\n-                        if print_ty {\n-                            p!(write(\"{}{}\", data, i_str))\n-                        } else {\n-                            p!(write(\"{}\", data))\n-                        }\n-                    }\n-                }\n+                let int = ConstInt::new(data, size, true, ty.is_ptr_sized_integral());\n+                if print_ty { p!(write(\"{:#?}\", int)) } else { p!(write(\"{:?}\", int)) }\n             }\n             // Char\n             (Scalar::Raw { data, .. }, ty::Char) if char::from_u32(data as u32).is_some() => {"}, {"sha": "8a72be33b8429ce34d90131492e1f193a9217453", "filename": "src/librustc_mir/const_eval/error.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Flibrustc_mir%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Flibrustc_mir%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Ferror.rs?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,6 +2,7 @@ use std::error::Error;\n use std::fmt;\n \n use rustc_middle::mir::AssertKind;\n+use rustc_middle::ty::ConstInt;\n use rustc_span::{Span, Symbol};\n \n use super::InterpCx;\n@@ -13,7 +14,7 @@ pub enum ConstEvalErrKind {\n     NeedsRfc(String),\n     ConstAccessesStatic,\n     ModifiedGlobal,\n-    AssertFailure(AssertKind<u64>),\n+    AssertFailure(AssertKind<ConstInt>),\n     Panic { msg: Symbol, line: u32, col: u32, file: Symbol },\n }\n "}, {"sha": "8be0ab9019fe228d064b49dc921be8839bb31da4", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -248,25 +248,19 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         _unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n         use rustc_middle::mir::AssertKind::*;\n-        // Convert `AssertKind<Operand>` to `AssertKind<u64>`.\n+        // Convert `AssertKind<Operand>` to `AssertKind<Scalar>`.\n+        let eval_to_int =\n+            |op| ecx.read_immediate(ecx.eval_operand(op, None)?).map(|x| x.to_const_int());\n         let err = match msg {\n             BoundsCheck { ref len, ref index } => {\n-                let len = ecx\n-                    .read_immediate(ecx.eval_operand(len, None)?)\n-                    .expect(\"can't eval len\")\n-                    .to_scalar()?\n-                    .to_machine_usize(&*ecx)?;\n-                let index = ecx\n-                    .read_immediate(ecx.eval_operand(index, None)?)\n-                    .expect(\"can't eval index\")\n-                    .to_scalar()?\n-                    .to_machine_usize(&*ecx)?;\n+                let len = eval_to_int(len)?;\n+                let index = eval_to_int(index)?;\n                 BoundsCheck { len, index }\n             }\n-            Overflow(op) => Overflow(*op),\n-            OverflowNeg => OverflowNeg,\n-            DivisionByZero => DivisionByZero,\n-            RemainderByZero => RemainderByZero,\n+            Overflow(op, l, r) => Overflow(*op, eval_to_int(l)?, eval_to_int(r)?),\n+            OverflowNeg(op) => OverflowNeg(eval_to_int(op)?),\n+            DivisionByZero(op) => DivisionByZero(eval_to_int(op)?),\n+            RemainderByZero(op) => RemainderByZero(eval_to_int(op)?),\n             ResumedAfterReturn(generator_kind) => ResumedAfterReturn(*generator_kind),\n             ResumedAfterPanic(generator_kind) => ResumedAfterPanic(*generator_kind),\n         };"}, {"sha": "dd746f5cfb409bd6de80853cd2c6e6ac4c8b1b7f", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::def::Namespace;\n use rustc_macros::HashStable;\n use rustc_middle::ty::layout::{PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::print::{FmtPrinter, PrettyPrinter, Printer};\n-use rustc_middle::ty::Ty;\n+use rustc_middle::ty::{ConstInt, Ty};\n use rustc_middle::{mir, ty};\n use rustc_target::abi::{Abi, HasDataLayout, LayoutOf, Size, TagEncoding};\n use rustc_target::abi::{VariantIdx, Variants};\n@@ -207,6 +207,19 @@ impl<'tcx, Tag: Copy> ImmTy<'tcx, Tag> {\n     pub fn from_int(i: impl Into<i128>, layout: TyAndLayout<'tcx>) -> Self {\n         Self::from_scalar(Scalar::from_int(i, layout.size), layout)\n     }\n+\n+    #[inline]\n+    pub fn to_const_int(self) -> ConstInt {\n+        assert!(self.layout.ty.is_integral());\n+        ConstInt::new(\n+            self.to_scalar()\n+                .expect(\"to_const_int doesn't work on scalar pairs\")\n+                .assert_bits(self.layout.size),\n+            self.layout.size,\n+            self.layout.ty.is_signed(),\n+            self.layout.ty.is_ptr_sized_integral(),\n+        )\n+    }\n }\n \n impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {"}, {"sha": "19337c520f9074ae47458a3b0fcc6c570b3cceac", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 40, "deletions": 30, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -19,7 +19,7 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutError, TyAndLayout};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n-use rustc_middle::ty::{self, ConstKind, Instance, ParamEnv, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, ConstInt, ConstKind, Instance, ParamEnv, Ty, TyCtxt, TypeFoldable};\n use rustc_session::lint;\n use rustc_span::{def_id::DefId, Span};\n use rustc_target::abi::{HasDataLayout, LayoutOf, Size, TargetDataLayout};\n@@ -449,7 +449,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         lint: &'static lint::Lint,\n         source_info: SourceInfo,\n         message: &'static str,\n-        panic: AssertKind<u64>,\n+        panic: AssertKind<ConstInt>,\n     ) -> Option<()> {\n         let lint_root = self.lint_root(source_info)?;\n         self.tcx.struct_span_lint_hir(lint, lint_root, source_info.span, |lint| {\n@@ -466,10 +466,10 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         arg: &Operand<'tcx>,\n         source_info: SourceInfo,\n     ) -> Option<()> {\n-        if self.use_ecx(|this| {\n+        if let (val, true) = self.use_ecx(|this| {\n             let val = this.ecx.read_immediate(this.ecx.eval_operand(arg, None)?)?;\n             let (_res, overflow, _ty) = this.ecx.overflowing_unary_op(op, val)?;\n-            Ok(overflow)\n+            Ok((val, overflow))\n         })? {\n             // `AssertKind` only has an `OverflowNeg` variant, so make sure that is\n             // appropriate to use.\n@@ -478,7 +478,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 lint::builtin::ARITHMETIC_OVERFLOW,\n                 source_info,\n                 \"this arithmetic operation will overflow\",\n-                AssertKind::OverflowNeg,\n+                AssertKind::OverflowNeg(val.to_const_int()),\n             )?;\n         }\n \n@@ -494,37 +494,52 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     ) -> Option<()> {\n         let r =\n             self.use_ecx(|this| this.ecx.read_immediate(this.ecx.eval_operand(right, None)?))?;\n+        let l = self.use_ecx(|this| this.ecx.read_immediate(this.ecx.eval_operand(left, None)?));\n         // Check for exceeding shifts *even if* we cannot evaluate the LHS.\n         if op == BinOp::Shr || op == BinOp::Shl {\n             // We need the type of the LHS. We cannot use `place_layout` as that is the type\n             // of the result, which for checked binops is not the same!\n             let left_ty = left.ty(&self.local_decls, self.tcx);\n-            let left_size_bits = self.ecx.layout_of(left_ty).ok()?.size.bits();\n+            let left_size = self.ecx.layout_of(left_ty).ok()?.size;\n             let right_size = r.layout.size;\n             let r_bits = r.to_scalar().ok();\n             // This is basically `force_bits`.\n             let r_bits = r_bits.and_then(|r| r.to_bits_or_ptr(right_size, &self.tcx).ok());\n-            if r_bits.map_or(false, |b| b >= left_size_bits as u128) {\n+            if r_bits.map_or(false, |b| b >= left_size.bits() as u128) {\n                 self.report_assert_as_lint(\n                     lint::builtin::ARITHMETIC_OVERFLOW,\n                     source_info,\n                     \"this arithmetic operation will overflow\",\n-                    AssertKind::Overflow(op),\n+                    AssertKind::Overflow(\n+                        op,\n+                        match l {\n+                            Some(l) => l.to_const_int(),\n+                            // Invent a dummy value, the diagnostic ignores it anyway\n+                            None => ConstInt::new(\n+                                1,\n+                                left_size,\n+                                left_ty.is_signed(),\n+                                left_ty.is_ptr_sized_integral(),\n+                            ),\n+                        },\n+                        r.to_const_int(),\n+                    ),\n                 )?;\n             }\n         }\n \n+        let l = l?;\n+\n         // The remaining operators are handled through `overflowing_binary_op`.\n         if self.use_ecx(|this| {\n-            let l = this.ecx.read_immediate(this.ecx.eval_operand(left, None)?)?;\n             let (_res, overflow, _ty) = this.ecx.overflowing_binary_op(op, l, r)?;\n             Ok(overflow)\n         })? {\n             self.report_assert_as_lint(\n                 lint::builtin::ARITHMETIC_OVERFLOW,\n                 source_info,\n                 \"this arithmetic operation will overflow\",\n-                AssertKind::Overflow(op),\n+                AssertKind::Overflow(op, l.to_const_int(), r.to_const_int()),\n             )?;\n         }\n \n@@ -949,31 +964,26 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                             }\n                             Operand::Constant(_) => {}\n                         }\n+                        let mut eval_to_int = |op| {\n+                            let op = self\n+                                .eval_operand(op, source_info)\n+                                .expect(\"if we got here, it must be const\");\n+                            self.ecx.read_immediate(op).unwrap().to_const_int()\n+                        };\n                         let msg = match msg {\n-                            AssertKind::DivisionByZero => AssertKind::DivisionByZero,\n-                            AssertKind::RemainderByZero => AssertKind::RemainderByZero,\n+                            AssertKind::DivisionByZero(op) => {\n+                                AssertKind::DivisionByZero(eval_to_int(op))\n+                            }\n+                            AssertKind::RemainderByZero(op) => {\n+                                AssertKind::RemainderByZero(eval_to_int(op))\n+                            }\n                             AssertKind::BoundsCheck { ref len, ref index } => {\n-                                let len =\n-                                    self.eval_operand(len, source_info).expect(\"len must be const\");\n-                                let len = self\n-                                    .ecx\n-                                    .read_scalar(len)\n-                                    .unwrap()\n-                                    .to_machine_usize(&self.tcx)\n-                                    .unwrap();\n-                                let index = self\n-                                    .eval_operand(index, source_info)\n-                                    .expect(\"index must be const\");\n-                                let index = self\n-                                    .ecx\n-                                    .read_scalar(index)\n-                                    .unwrap()\n-                                    .to_machine_usize(&self.tcx)\n-                                    .unwrap();\n+                                let len = eval_to_int(len);\n+                                let index = eval_to_int(index);\n                                 AssertKind::BoundsCheck { len, index }\n                             }\n                             // Overflow is are already covered by checks on the binary operators.\n-                            AssertKind::Overflow(_) | AssertKind::OverflowNeg => return,\n+                            AssertKind::Overflow(..) | AssertKind::OverflowNeg(_) => return,\n                             // Need proper const propagator for these.\n                             _ => return,\n                         };"}, {"sha": "e2217fdfac036becda935869bc0ff7c53cfba4d6", "filename": "src/librustc_mir_build/build/expr/as_rvalue.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -87,7 +87,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         block,\n                         Operand::Move(is_min),\n                         false,\n-                        AssertKind::OverflowNeg,\n+                        AssertKind::OverflowNeg(arg.to_copy()),\n                         expr_span,\n                     );\n                 }\n@@ -288,7 +288,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 block,\n                 source_info,\n                 result_value,\n-                Rvalue::CheckedBinaryOp(op, lhs, rhs),\n+                Rvalue::CheckedBinaryOp(op, lhs.to_copy(), rhs.to_copy()),\n             );\n             let val_fld = Field::new(0);\n             let of_fld = Field::new(1);\n@@ -297,7 +297,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let val = tcx.mk_place_field(result_value, val_fld, ty);\n             let of = tcx.mk_place_field(result_value, of_fld, bool_ty);\n \n-            let err = AssertKind::Overflow(op);\n+            let err = AssertKind::Overflow(op, lhs, rhs);\n \n             block = self.assert(block, Operand::Move(of), false, err, span);\n \n@@ -308,11 +308,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // and 2. there are two possible failure cases, divide-by-zero and overflow.\n \n                 let zero_err = if op == BinOp::Div {\n-                    AssertKind::DivisionByZero\n+                    AssertKind::DivisionByZero(lhs.to_copy())\n                 } else {\n-                    AssertKind::RemainderByZero\n+                    AssertKind::RemainderByZero(lhs.to_copy())\n                 };\n-                let overflow_err = AssertKind::Overflow(op);\n+                let overflow_err = AssertKind::Overflow(op, lhs.to_copy(), rhs.to_copy());\n \n                 // Check for / 0\n                 let is_zero = self.temp(bool_ty, span);"}, {"sha": "832b2420c238999fcf526f1f6158fca02c2b5b5b", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -481,8 +481,8 @@ pub fn print_const(cx: &DocContext<'_>, n: &'tcx ty::Const<'_>) -> String {\n         _ => {\n             let mut s = n.to_string();\n             // array lengths are obviously usize\n-            if s.ends_with(\"usize\") {\n-                let n = s.len() - \"usize\".len();\n+            if s.ends_with(\"_usize\") {\n+                let n = s.len() - \"_usize\".len();\n                 s.truncate(n);\n                 if s.ends_with(\": \") {\n                     let n = s.len() - \": \".len();"}, {"sha": "07793b3598f9ead5b07ea7d87856469ade523520", "filename": "src/test/mir-opt/address-of/rustc.address_of_reborrow.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Faddress-of%2Frustc.address_of_reborrow.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Faddress-of%2Frustc.address_of_reborrow.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Faddress-of%2Frustc.address_of_reborrow.SimplifyCfg-initial.after.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -128,7 +128,7 @@ fn address_of_reborrow() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/address-of.rs:4:9: 4:10\n         StorageLive(_2);                 // scope 0 at $DIR/address-of.rs:4:14: 4:21\n-        _2 = [const 0i32; 10];           // scope 0 at $DIR/address-of.rs:4:14: 4:21\n+        _2 = [const 0_i32; 10];          // scope 0 at $DIR/address-of.rs:4:14: 4:21\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -139,7 +139,7 @@ fn address_of_reborrow() -> () {\n         FakeRead(ForLet, _1);            // scope 0 at $DIR/address-of.rs:4:9: 4:10\n         StorageLive(_3);                 // scope 1 at $DIR/address-of.rs:5:9: 5:14\n         StorageLive(_4);                 // scope 1 at $DIR/address-of.rs:5:22: 5:29\n-        _4 = [const 0i32; 10];           // scope 1 at $DIR/address-of.rs:5:22: 5:29\n+        _4 = [const 0_i32; 10];          // scope 1 at $DIR/address-of.rs:5:22: 5:29\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000000))"}, {"sha": "2a3a18d6c5b5dbe50f429fb12b81346f550514ee", "filename": "src/test/mir-opt/array-index-is-temporary/32bit/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -25,7 +25,7 @@ fn main() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/array-index-is-temporary.rs:13:9: 13:14\n-        _1 = [const 42u32, const 43u32, const 44u32]; // scope 0 at $DIR/array-index-is-temporary.rs:13:17: 13:29\n+        _1 = [const 42_u32, const 43_u32, const 44_u32]; // scope 0 at $DIR/array-index-is-temporary.rs:13:17: 13:29\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x0000002a))\n@@ -45,7 +45,7 @@ fn main() -> () {\n                                          // + span: $DIR/array-index-is-temporary.rs:13:26: 13:28\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002c)) }\n         StorageLive(_2);                 // scope 1 at $DIR/array-index-is-temporary.rs:14:9: 14:14\n-        _2 = const 1usize;               // scope 1 at $DIR/array-index-is-temporary.rs:14:17: 14:18\n+        _2 = const 1_usize;              // scope 1 at $DIR/array-index-is-temporary.rs:14:17: 14:18\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x00000001))"}, {"sha": "093c170cf7a3a41ae68187368e7e4801e39579ae", "filename": "src/test/mir-opt/array-index-is-temporary/64bit/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -25,7 +25,7 @@ fn main() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/array-index-is-temporary.rs:13:9: 13:14\n-        _1 = [const 42u32, const 43u32, const 44u32]; // scope 0 at $DIR/array-index-is-temporary.rs:13:17: 13:29\n+        _1 = [const 42_u32, const 43_u32, const 44_u32]; // scope 0 at $DIR/array-index-is-temporary.rs:13:17: 13:29\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x0000002a))\n@@ -45,7 +45,7 @@ fn main() -> () {\n                                          // + span: $DIR/array-index-is-temporary.rs:13:26: 13:28\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002c)) }\n         StorageLive(_2);                 // scope 1 at $DIR/array-index-is-temporary.rs:14:9: 14:14\n-        _2 = const 1usize;               // scope 1 at $DIR/array-index-is-temporary.rs:14:17: 14:18\n+        _2 = const 1_usize;              // scope 1 at $DIR/array-index-is-temporary.rs:14:17: 14:18\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000001))"}, {"sha": "54e01dceb5099967c27e37e63f62f1f99ec60eda", "filename": "src/test/mir-opt/byte_slice/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fbyte_slice%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fbyte_slice%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbyte_slice%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -21,7 +21,7 @@ fn main() -> () {\n                                          // + span: $DIR/byte_slice.rs:5:13: 5:19\n                                          // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc0)) }\n         StorageLive(_2);                 // scope 1 at $DIR/byte_slice.rs:6:9: 6:10\n-        _2 = [const 5u8, const 120u8];   // scope 1 at $DIR/byte_slice.rs:6:13: 6:24\n+        _2 = [const 5_u8, const 120_u8]; // scope 1 at $DIR/byte_slice.rs:6:13: 6:24\n                                          // ty::Const\n                                          // + ty: u8\n                                          // + val: Value(Scalar(0x05))"}, {"sha": "65db967fe5f81f81afeb3e4d7777be114e4f2c24", "filename": "src/test/mir-opt/combine_array_len/32bit/rustc.norm2.InstCombine.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F32bit%2Frustc.norm2.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F32bit%2Frustc.norm2.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F32bit%2Frustc.norm2.InstCombine.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -28,15 +28,15 @@\n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/combine_array_len.rs:5:9: 5:10\n           StorageLive(_3);                 // scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n-          _3 = const 0usize;               // scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n+          _3 = const 0_usize;              // scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x00000000))\n                                            // mir::Constant\n                                            // + span: $DIR/combine_array_len.rs:5:15: 5:16\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n -         _4 = Len(_1);                    // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-+         _4 = const 2usize;               // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n++         _4 = const 2_usize;              // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n +                                          // ty::Const\n +                                          // + ty: usize\n +                                          // + val: Value(Scalar(0x00000002))\n@@ -52,15 +52,15 @@\n           StorageDead(_3);                 // scope 0 at $DIR/combine_array_len.rs:5:17: 5:18\n           StorageLive(_6);                 // scope 1 at $DIR/combine_array_len.rs:6:9: 6:10\n           StorageLive(_7);                 // scope 1 at $DIR/combine_array_len.rs:6:15: 6:16\n-          _7 = const 1usize;               // scope 1 at $DIR/combine_array_len.rs:6:15: 6:16\n+          _7 = const 1_usize;              // scope 1 at $DIR/combine_array_len.rs:6:15: 6:16\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x00000001))\n                                            // mir::Constant\n                                            // + span: $DIR/combine_array_len.rs:6:15: 6:16\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n -         _8 = Len(_1);                    // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n-+         _8 = const 2usize;               // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n++         _8 = const 2_usize;              // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n +                                          // ty::Const\n +                                          // + ty: usize\n +                                          // + val: Value(Scalar(0x00000002))"}, {"sha": "712c4eb230c7eef2a522c395d1aae33dca3ca805", "filename": "src/test/mir-opt/combine_array_len/64bit/rustc.norm2.InstCombine.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F64bit%2Frustc.norm2.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F64bit%2Frustc.norm2.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F64bit%2Frustc.norm2.InstCombine.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -28,15 +28,15 @@\n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/combine_array_len.rs:5:9: 5:10\n           StorageLive(_3);                 // scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n-          _3 = const 0usize;               // scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n+          _3 = const 0_usize;              // scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x0000000000000000))\n                                            // mir::Constant\n                                            // + span: $DIR/combine_array_len.rs:5:15: 5:16\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n -         _4 = Len(_1);                    // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-+         _4 = const 2usize;               // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n++         _4 = const 2_usize;              // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n +                                          // ty::Const\n +                                          // + ty: usize\n +                                          // + val: Value(Scalar(0x0000000000000002))\n@@ -52,15 +52,15 @@\n           StorageDead(_3);                 // scope 0 at $DIR/combine_array_len.rs:5:17: 5:18\n           StorageLive(_6);                 // scope 1 at $DIR/combine_array_len.rs:6:9: 6:10\n           StorageLive(_7);                 // scope 1 at $DIR/combine_array_len.rs:6:15: 6:16\n-          _7 = const 1usize;               // scope 1 at $DIR/combine_array_len.rs:6:15: 6:16\n+          _7 = const 1_usize;              // scope 1 at $DIR/combine_array_len.rs:6:15: 6:16\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x0000000000000001))\n                                            // mir::Constant\n                                            // + span: $DIR/combine_array_len.rs:6:15: 6:16\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n -         _8 = Len(_1);                    // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n-+         _8 = const 2usize;               // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n++         _8 = const 2_usize;              // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n +                                          // ty::Const\n +                                          // + ty: usize\n +                                          // + val: Value(Scalar(0x0000000000000002))"}, {"sha": "e84e88b93fcd8a3af3ff39ecef9ec01c3ad04114", "filename": "src/test/mir-opt/const_prop/aggregate/rustc.main.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -14,7 +14,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/aggregate.rs:5:9: 5:10\n           StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:5:13: 5:24\n           StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:5:13: 5:22\n-          _3 = (const 0i32, const 1i32, const 2i32); // scope 0 at $DIR/aggregate.rs:5:13: 5:22\n+          _3 = (const 0_i32, const 1_i32, const 2_i32); // scope 0 at $DIR/aggregate.rs:5:13: 5:22\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000000))\n@@ -34,8 +34,8 @@\n                                            // + span: $DIR/aggregate.rs:5:20: 5:21\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n -         _2 = (_3.1: i32);                // scope 0 at $DIR/aggregate.rs:5:13: 5:24\n--         _1 = Add(move _2, const 0i32);   // scope 0 at $DIR/aggregate.rs:5:13: 5:28\n-+         _2 = const 1i32;                 // scope 0 at $DIR/aggregate.rs:5:13: 5:24\n+-         _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/aggregate.rs:5:13: 5:28\n++         _2 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:5:13: 5:24\n                                            // ty::Const\n                                            // + ty: i32\n -                                          // + val: Value(Scalar(0x00000000))\n@@ -45,7 +45,7 @@\n -                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n +                                          // + span: $DIR/aggregate.rs:5:13: 5:24\n +                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-+         _1 = const 1i32;                 // scope 0 at $DIR/aggregate.rs:5:13: 5:28\n++         _1 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:5:13: 5:28\n +                                          // ty::Const\n +                                          // + ty: i32\n +                                          // + val: Value(Scalar(0x00000001))"}, {"sha": "48908479935d1e2a2311e5fb627d882360e354a4", "filename": "src/test/mir-opt/const_prop/array_index/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F32bit%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -15,7 +15,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/array_index.rs:5:9: 5:10\n           StorageLive(_2);                 // scope 0 at $DIR/array_index.rs:5:18: 5:30\n-          _2 = [const 0u32, const 1u32, const 2u32, const 3u32]; // scope 0 at $DIR/array_index.rs:5:18: 5:30\n+          _2 = [const 0_u32, const 1_u32, const 2_u32, const 3_u32]; // scope 0 at $DIR/array_index.rs:5:18: 5:30\n                                            // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x00000000))\n@@ -41,14 +41,14 @@\n                                            // + span: $DIR/array_index.rs:5:28: 5:29\n                                            // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n           StorageLive(_3);                 // scope 0 at $DIR/array_index.rs:5:31: 5:32\n-          _3 = const 2usize;               // scope 0 at $DIR/array_index.rs:5:31: 5:32\n+          _3 = const 2_usize;              // scope 0 at $DIR/array_index.rs:5:31: 5:32\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x00000002))\n                                            // mir::Constant\n                                            // + span: $DIR/array_index.rs:5:31: 5:32\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x00000002)) }\n-          _4 = const 4usize;               // scope 0 at $DIR/array_index.rs:5:18: 5:33\n+          _4 = const 4_usize;              // scope 0 at $DIR/array_index.rs:5:18: 5:33\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x00000004))\n@@ -75,7 +75,7 @@\n   \n       bb1: {\n -         _1 = _2[_3];                     // scope 0 at $DIR/array_index.rs:5:18: 5:33\n-+         _1 = const 2u32;                 // scope 0 at $DIR/array_index.rs:5:18: 5:33\n++         _1 = const 2_u32;                // scope 0 at $DIR/array_index.rs:5:18: 5:33\n +                                          // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x00000002))"}, {"sha": "fd662698a0fd431b4003d4156907aeca2e5c15ce", "filename": "src/test/mir-opt/const_prop/array_index/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F64bit%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -15,7 +15,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/array_index.rs:5:9: 5:10\n           StorageLive(_2);                 // scope 0 at $DIR/array_index.rs:5:18: 5:30\n-          _2 = [const 0u32, const 1u32, const 2u32, const 3u32]; // scope 0 at $DIR/array_index.rs:5:18: 5:30\n+          _2 = [const 0_u32, const 1_u32, const 2_u32, const 3_u32]; // scope 0 at $DIR/array_index.rs:5:18: 5:30\n                                            // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x00000000))\n@@ -41,14 +41,14 @@\n                                            // + span: $DIR/array_index.rs:5:28: 5:29\n                                            // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n           StorageLive(_3);                 // scope 0 at $DIR/array_index.rs:5:31: 5:32\n-          _3 = const 2usize;               // scope 0 at $DIR/array_index.rs:5:31: 5:32\n+          _3 = const 2_usize;              // scope 0 at $DIR/array_index.rs:5:31: 5:32\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x0000000000000002))\n                                            // mir::Constant\n                                            // + span: $DIR/array_index.rs:5:31: 5:32\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n-          _4 = const 4usize;               // scope 0 at $DIR/array_index.rs:5:18: 5:33\n+          _4 = const 4_usize;              // scope 0 at $DIR/array_index.rs:5:18: 5:33\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x0000000000000004))\n@@ -75,7 +75,7 @@\n   \n       bb1: {\n -         _1 = _2[_3];                     // scope 0 at $DIR/array_index.rs:5:18: 5:33\n-+         _1 = const 2u32;                 // scope 0 at $DIR/array_index.rs:5:18: 5:33\n++         _1 = const 2_u32;                // scope 0 at $DIR/array_index.rs:5:18: 5:33\n +                                          // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x00000002))"}, {"sha": "ed28678edb30d6aef09522d7760a799d7ba2cd58", "filename": "src/test/mir-opt/const_prop/bad_op_div_by_zero/rustc.main.ConstProp.diff", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -19,7 +19,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/bad_op_div_by_zero.rs:4:9: 4:10\n-          _1 = const 0i32;                 // scope 0 at $DIR/bad_op_div_by_zero.rs:4:13: 4:14\n+          _1 = const 0_i32;                // scope 0 at $DIR/bad_op_div_by_zero.rs:4:13: 4:14\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000000))\n@@ -29,8 +29,8 @@\n           StorageLive(_2);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:5:9: 5:11\n           StorageLive(_3);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n -         _3 = _1;                         // scope 1 at $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n--         _4 = Eq(_3, const 0i32);         // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-+         _3 = const 0i32;                 // scope 1 at $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n+-         _4 = Eq(_3, const 0_i32);        // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n++         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000000))\n@@ -45,11 +45,17 @@\n +                                          // mir::Constant\n +                                          // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-          assert(!move _4, \"attempt to divide by zero\") -> bb1; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n+          assert(!move _4, \"attempt to divide {} by zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:15\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n       }\n   \n       bb1: {\n--         _5 = Eq(_3, const -1i32);        // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n+-         _5 = Eq(_3, const -1_i32);       // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n +         _5 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n                                            // ty::Const\n -                                          // + ty: i32\n@@ -59,7 +65,7 @@\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n -                                          // + literal: Const { ty: i32, val: Value(Scalar(0xffffffff)) }\n--         _6 = Eq(const 1i32, const i32::MIN); // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n+-         _6 = Eq(const 1_i32, const i32::MIN); // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n +         _6 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n                                            // ty::Const\n@@ -82,19 +88,25 @@\n                                            // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n -                                          // + literal: Const { ty: i32, val: Value(Scalar(0x80000000)) }\n -         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n--         assert(!move _7, \"attempt to divide with overflow\") -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n+-         assert(!move _7, \"attempt to compute `{} / {}` which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+         assert(!const false, \"attempt to divide with overflow\") -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n++         assert(!const false, \"attempt to compute `{} / {}` which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x00))\n +                                          // mir::Constant\n +                                          // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:15\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n       }\n   \n       bb2: {\n-          _2 = Div(const 1i32, move _3);   // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n+          _2 = Div(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000001))"}, {"sha": "8855df95aeab5c5e2590cd81a8aeac12a13b05bd", "filename": "src/test/mir-opt/const_prop/bad_op_mod_by_zero/rustc.main.ConstProp.diff", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -19,7 +19,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:4:9: 4:10\n-          _1 = const 0i32;                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:4:13: 4:14\n+          _1 = const 0_i32;                // scope 0 at $DIR/bad_op_mod_by_zero.rs:4:13: 4:14\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000000))\n@@ -29,8 +29,8 @@\n           StorageLive(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:9: 5:11\n           StorageLive(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n -         _3 = _1;                         // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n--         _4 = Eq(_3, const 0i32);         // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-+         _3 = const 0i32;                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n+-         _4 = Eq(_3, const 0_i32);        // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n++         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000000))\n@@ -45,11 +45,17 @@\n +                                          // mir::Constant\n +                                          // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-          assert(!move _4, \"attempt to calculate the remainder with a divisor of zero\") -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n+          assert(!move _4, \"attempt to calculate the remainder of {} with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:15\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n       }\n   \n       bb1: {\n--         _5 = Eq(_3, const -1i32);        // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n+-         _5 = Eq(_3, const -1_i32);       // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n +         _5 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n                                            // ty::Const\n -                                          // + ty: i32\n@@ -59,7 +65,7 @@\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n -                                          // + literal: Const { ty: i32, val: Value(Scalar(0xffffffff)) }\n--         _6 = Eq(const 1i32, const i32::MIN); // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n+-         _6 = Eq(const 1_i32, const i32::MIN); // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n +         _6 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n                                            // ty::Const\n@@ -82,19 +88,25 @@\n                                            // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n -                                          // + literal: Const { ty: i32, val: Value(Scalar(0x80000000)) }\n -         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n--         assert(!move _7, \"attempt to calculate the remainder with overflow\") -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n+-         assert(!move _7, \"attempt to compute the remainder of `{} % {}` which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+         assert(!const false, \"attempt to calculate the remainder with overflow\") -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n++         assert(!const false, \"attempt to compute the remainder of `{} % {}` which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x00))\n +                                          // mir::Constant\n +                                          // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:15\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n       }\n   \n       bb2: {\n-          _2 = Rem(const 1i32, move _3);   // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n+          _2 = Rem(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000001))"}, {"sha": "ee4d4c39f172ca41b76f36e968fa43bfcfce3fa6", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F32bit%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -39,7 +39,7 @@\n           StorageDead(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:35: 5:36\n           StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:13: 7:15\n           StorageLive(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n-          _6 = const 3usize;               // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n+          _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x00000003))"}, {"sha": "3626814fa977017b16603db172f6aa0caf13c707", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F64bit%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -39,7 +39,7 @@\n           StorageDead(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:35: 5:36\n           StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:13: 7:15\n           StorageLive(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n-          _6 = const 3usize;               // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n+          _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x0000000000000003))"}, {"sha": "f271188ebfdb0bf755e1109248bd88735c7567b3", "filename": "src/test/mir-opt/const_prop/boxes/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -17,7 +17,7 @@\n           StorageLive(_3);                 // scope 0 at $DIR/boxes.rs:12:14: 12:22\n           StorageLive(_4);                 // scope 0 at $DIR/boxes.rs:12:14: 12:22\n           _4 = Box(i32);                   // scope 0 at $DIR/boxes.rs:12:14: 12:22\n-          (*_4) = const 42i32;             // scope 0 at $DIR/boxes.rs:12:19: 12:21\n+          (*_4) = const 42_i32;            // scope 0 at $DIR/boxes.rs:12:19: 12:21\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002a))\n@@ -27,7 +27,7 @@\n           _3 = move _4;                    // scope 0 at $DIR/boxes.rs:12:14: 12:22\n           StorageDead(_4);                 // scope 0 at $DIR/boxes.rs:12:21: 12:22\n           _2 = (*_3);                      // scope 0 at $DIR/boxes.rs:12:13: 12:22\n-          _1 = Add(move _2, const 0i32);   // scope 0 at $DIR/boxes.rs:12:13: 12:26\n+          _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/boxes.rs:12:13: 12:26\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000000))"}, {"sha": "54af804d19b000701291b43b06f2c07ecf087ae2", "filename": "src/test/mir-opt/const_prop/cast/rustc.main.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcast%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcast%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcast%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -14,16 +14,16 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/cast.rs:4:9: 4:10\n--         _1 = const 42u8 as u32 (Misc);   // scope 0 at $DIR/cast.rs:4:13: 4:24\n-+         _1 = const 42u32;                // scope 0 at $DIR/cast.rs:4:13: 4:24\n+-         _1 = const 42_u8 as u32 (Misc);  // scope 0 at $DIR/cast.rs:4:13: 4:24\n++         _1 = const 42_u32;               // scope 0 at $DIR/cast.rs:4:13: 4:24\n                                            // ty::Const\n -                                          // + ty: u8\n -                                          // + val: Value(Scalar(0x2a))\n -                                          // mir::Constant\n -                                          // + span: $DIR/cast.rs:4:13: 4:17\n -                                          // + literal: Const { ty: u8, val: Value(Scalar(0x2a)) }\n -         StorageLive(_2);                 // scope 1 at $DIR/cast.rs:6:9: 6:10\n--         _2 = const 42u32 as u8 (Misc);   // scope 1 at $DIR/cast.rs:6:13: 6:24\n+-         _2 = const 42_u32 as u8 (Misc);  // scope 1 at $DIR/cast.rs:6:13: 6:24\n -                                          // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x0000002a))\n@@ -32,7 +32,7 @@\n +                                          // + span: $DIR/cast.rs:4:13: 4:24\n                                            // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n +         StorageLive(_2);                 // scope 1 at $DIR/cast.rs:6:9: 6:10\n-+         _2 = const 42u8;                 // scope 1 at $DIR/cast.rs:6:13: 6:24\n++         _2 = const 42_u8;                // scope 1 at $DIR/cast.rs:6:13: 6:24\n +                                          // ty::Const\n +                                          // + ty: u8\n +                                          // + val: Value(Scalar(0x2a))"}, {"sha": "e3690d71294979dc7fb5a04ce5b4a7121015c2a0", "filename": "src/test/mir-opt/const_prop/checked_add/rustc.main.ConstProp.diff", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -11,8 +11,8 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/checked_add.rs:5:9: 5:10\n--         _2 = CheckedAdd(const 1u32, const 1u32); // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n-+         _2 = (const 2u32, const false);  // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n+-         _2 = CheckedAdd(const 1_u32, const 1_u32); // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n++         _2 = (const 2_u32, const false); // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n                                            // ty::Const\n                                            // + ty: u32\n -                                          // + val: Value(Scalar(0x00000001))\n@@ -30,21 +30,33 @@\n                                            // mir::Constant\n -                                          // + span: $DIR/checked_add.rs:5:22: 5:23\n -                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n--         assert(!move (_2.1: bool), \"attempt to add with overflow\") -> bb1; // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n+-         assert(!move (_2.1: bool), \"attempt to compute `{} + {}` which would overflow\", const 1_u32, const 1_u32) -> bb1; // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n +                                          // + span: $DIR/checked_add.rs:5:18: 5:23\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+         assert(!const false, \"attempt to add with overflow\") -> bb1; // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n-+                                          // ty::Const\n++         assert(!const false, \"attempt to compute `{} + {}` which would overflow\", const 1_u32, const 1_u32) -> bb1; // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n+                                           // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x00))\n +                                          // mir::Constant\n +                                          // + span: $DIR/checked_add.rs:5:18: 5:23\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++                                          // ty::Const\n+                                           // + ty: u32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/checked_add.rs:5:18: 5:19\n+                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n+                                           // ty::Const\n+                                           // + ty: u32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/checked_add.rs:5:22: 5:23\n+                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n       }\n   \n       bb1: {\n -         _1 = move (_2.0: u32);           // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n-+         _1 = const 2u32;                 // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n++         _1 = const 2_u32;                // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n +                                          // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x00000002))"}, {"sha": "26010b43c922ae80dcefc7c5e579958a9dc7333a", "filename": "src/test/mir-opt/const_prop/discriminant/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F32bit%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -25,17 +25,17 @@\n -                                          // + span: $DIR/discriminant.rs:11:39: 11:43\n -                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n -         _4 = discriminant(_3);           // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n--         switchInt(move _4) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n+-         switchInt(move _4) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n +                                          // + span: $DIR/discriminant.rs:11:34: 11:44\n +                                          // + literal: Const { ty: std::option::Option<bool>, val: Value(Scalar(0x01)) }\n-+         _4 = const 1isize;               // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n++         _4 = const 1_isize;              // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n +                                          // ty::Const\n +                                          // + ty: isize\n +                                          // + val: Value(Scalar(0x00000001))\n +                                          // mir::Constant\n +                                          // + span: $DIR/discriminant.rs:11:21: 11:31\n +                                          // + literal: Const { ty: isize, val: Value(Scalar(0x00000001)) }\n-+         switchInt(const 1isize) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n++         switchInt(const 1_isize) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n +                                          // ty::Const\n +                                          // + ty: isize\n +                                          // + val: Value(Scalar(0x00000001))\n@@ -45,7 +45,7 @@\n       }\n   \n       bb1: {\n-          _2 = const 10i32;                // scope 0 at $DIR/discriminant.rs:11:59: 11:61\n+          _2 = const 10_i32;               // scope 0 at $DIR/discriminant.rs:11:59: 11:61\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000000a))\n@@ -60,7 +60,7 @@\n       }\n   \n       bb3: {\n-          _2 = const 42i32;                // scope 0 at $DIR/discriminant.rs:11:47: 11:49\n+          _2 = const 42_i32;               // scope 0 at $DIR/discriminant.rs:11:47: 11:49\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002a))\n@@ -71,7 +71,7 @@\n       }\n   \n       bb4: {\n-          _1 = Add(move _2, const 0i32);   // scope 0 at $DIR/discriminant.rs:11:13: 11:68\n+          _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/discriminant.rs:11:13: 11:68\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000000))"}, {"sha": "b09c9c47661169dd07ec9c7752aa3b3425041eec", "filename": "src/test/mir-opt/const_prop/discriminant/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F64bit%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -25,17 +25,17 @@\n -                                          // + span: $DIR/discriminant.rs:11:39: 11:43\n -                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n -         _4 = discriminant(_3);           // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n--         switchInt(move _4) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n+-         switchInt(move _4) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n +                                          // + span: $DIR/discriminant.rs:11:34: 11:44\n +                                          // + literal: Const { ty: std::option::Option<bool>, val: Value(Scalar(0x01)) }\n-+         _4 = const 1isize;               // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n++         _4 = const 1_isize;              // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n +                                          // ty::Const\n +                                          // + ty: isize\n +                                          // + val: Value(Scalar(0x0000000000000001))\n +                                          // mir::Constant\n +                                          // + span: $DIR/discriminant.rs:11:21: 11:31\n +                                          // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000001)) }\n-+         switchInt(const 1isize) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n++         switchInt(const 1_isize) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n +                                          // ty::Const\n +                                          // + ty: isize\n +                                          // + val: Value(Scalar(0x0000000000000001))\n@@ -45,7 +45,7 @@\n       }\n   \n       bb1: {\n-          _2 = const 10i32;                // scope 0 at $DIR/discriminant.rs:11:59: 11:61\n+          _2 = const 10_i32;               // scope 0 at $DIR/discriminant.rs:11:59: 11:61\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000000a))\n@@ -60,7 +60,7 @@\n       }\n   \n       bb3: {\n-          _2 = const 42i32;                // scope 0 at $DIR/discriminant.rs:11:47: 11:49\n+          _2 = const 42_i32;               // scope 0 at $DIR/discriminant.rs:11:47: 11:49\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002a))\n@@ -71,7 +71,7 @@\n       }\n   \n       bb4: {\n-          _1 = Add(move _2, const 0i32);   // scope 0 at $DIR/discriminant.rs:11:13: 11:68\n+          _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/discriminant.rs:11:13: 11:68\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000000))"}, {"sha": "71980185fd5cd38bad195ab60f9b20ed7603ea1e", "filename": "src/test/mir-opt/const_prop/indirect/rustc.main.ConstProp.diff", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -13,8 +13,8 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/indirect.rs:5:9: 5:10\n           StorageLive(_2);                 // scope 0 at $DIR/indirect.rs:5:13: 5:25\n--         _2 = const 2u32 as u8 (Misc);    // scope 0 at $DIR/indirect.rs:5:13: 5:25\n-+         _2 = const 2u8;                  // scope 0 at $DIR/indirect.rs:5:13: 5:25\n+-         _2 = const 2_u32 as u8 (Misc);   // scope 0 at $DIR/indirect.rs:5:13: 5:25\n++         _2 = const 2_u8;                 // scope 0 at $DIR/indirect.rs:5:13: 5:25\n                                            // ty::Const\n -                                          // + ty: u32\n -                                          // + val: Value(Scalar(0x00000002))\n@@ -23,38 +23,44 @@\n                                            // mir::Constant\n -                                          // + span: $DIR/indirect.rs:5:14: 5:18\n -                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n--         _3 = CheckedAdd(move _2, const 1u8); // scope 0 at $DIR/indirect.rs:5:13: 5:29\n+-         _3 = CheckedAdd(_2, const 1_u8); // scope 0 at $DIR/indirect.rs:5:13: 5:29\n +                                          // + span: $DIR/indirect.rs:5:13: 5:25\n +                                          // + literal: Const { ty: u8, val: Value(Scalar(0x02)) }\n-+         _3 = (const 3u8, const false);   // scope 0 at $DIR/indirect.rs:5:13: 5:29\n++         _3 = (const 3_u8, const false);  // scope 0 at $DIR/indirect.rs:5:13: 5:29\n                                            // ty::Const\n                                            // + ty: u8\n -                                          // + val: Value(Scalar(0x01))\n +                                          // + val: Value(Scalar(0x03))\n                                            // mir::Constant\n -                                          // + span: $DIR/indirect.rs:5:28: 5:29\n -                                          // + literal: Const { ty: u8, val: Value(Scalar(0x01)) }\n--         assert(!move (_3.1: bool), \"attempt to add with overflow\") -> bb1; // scope 0 at $DIR/indirect.rs:5:13: 5:29\n+-         assert(!move (_3.1: bool), \"attempt to compute `{} + {}` which would overflow\", move _2, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:5:13: 5:29\n +                                          // + span: $DIR/indirect.rs:5:13: 5:29\n +                                          // + literal: Const { ty: u8, val: Value(Scalar(0x03)) }\n-+                                          // ty::Const\n+                                           // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x00))\n +                                          // mir::Constant\n +                                          // + span: $DIR/indirect.rs:5:13: 5:29\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+         assert(!const false, \"attempt to add with overflow\") -> bb1; // scope 0 at $DIR/indirect.rs:5:13: 5:29\n++         assert(!const false, \"attempt to compute `{} + {}` which would overflow\", move _2, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:5:13: 5:29\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x00))\n +                                          // mir::Constant\n +                                          // + span: $DIR/indirect.rs:5:13: 5:29\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++                                          // ty::Const\n+                                           // + ty: u8\n+                                           // + val: Value(Scalar(0x01))\n+                                           // mir::Constant\n+                                           // + span: $DIR/indirect.rs:5:28: 5:29\n+                                           // + literal: Const { ty: u8, val: Value(Scalar(0x01)) }\n       }\n   \n       bb1: {\n -         _1 = move (_3.0: u8);            // scope 0 at $DIR/indirect.rs:5:13: 5:29\n-+         _1 = const 3u8;                  // scope 0 at $DIR/indirect.rs:5:13: 5:29\n++         _1 = const 3_u8;                 // scope 0 at $DIR/indirect.rs:5:13: 5:29\n +                                          // ty::Const\n +                                          // + ty: u8\n +                                          // + val: Value(Scalar(0x03))"}, {"sha": "242907b5599d8ea45aaeac449fc21cdaebb2887c", "filename": "src/test/mir-opt/const_prop/issue-66971/rustc.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-66971%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-66971%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-66971%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -19,7 +19,7 @@\n +                                          // mir::Constant\n +                                          // + span: $DIR/issue-66971.rs:16:13: 16:15\n +                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          _2 = (move _3, const 0u8, const 0u8); // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n+          _2 = (move _3, const 0_u8, const 0_u8); // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n                                            // ty::Const\n                                            // + ty: u8\n                                            // + val: Value(Scalar(0x00))"}, {"sha": "d5c1105d7caff24b15027915085d621fca7c05ba", "filename": "src/test/mir-opt/const_prop/issue-67019/rustc.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-67019%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-67019%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-67019%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -11,7 +11,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/issue-67019.rs:11:5: 11:20\n           StorageLive(_2);                 // scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n           StorageLive(_3);                 // scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n-          _3 = (const 1u8, const 2u8);     // scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n+          _3 = (const 1_u8, const 2_u8);   // scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n                                            // ty::Const\n                                            // + ty: u8\n                                            // + val: Value(Scalar(0x01))"}, {"sha": "3d4309a8aec547e830778e86417a506ccc615851", "filename": "src/test/mir-opt/const_prop/mutable_variable/rustc.main.ConstProp.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -14,14 +14,14 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable.rs:5:9: 5:14\n-          _1 = const 42i32;                // scope 0 at $DIR/mutable_variable.rs:5:17: 5:19\n+          _1 = const 42_i32;               // scope 0 at $DIR/mutable_variable.rs:5:17: 5:19\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002a))\n                                            // mir::Constant\n                                            // + span: $DIR/mutable_variable.rs:5:17: 5:19\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n-          _1 = const 99i32;                // scope 1 at $DIR/mutable_variable.rs:6:5: 6:11\n+          _1 = const 99_i32;               // scope 1 at $DIR/mutable_variable.rs:6:5: 6:11\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000063))\n@@ -30,7 +30,7 @@\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000063)) }\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable.rs:7:9: 7:10\n -         _2 = _1;                         // scope 1 at $DIR/mutable_variable.rs:7:13: 7:14\n-+         _2 = const 99i32;                // scope 1 at $DIR/mutable_variable.rs:7:13: 7:14\n++         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable.rs:7:13: 7:14\n +                                          // ty::Const\n +                                          // + ty: i32\n +                                          // + val: Value(Scalar(0x00000063))"}, {"sha": "f581b222c83cbc9f59593f0fd092a0d902c3ed5a", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate/rustc.main.ConstProp.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -14,7 +14,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:5:9: 5:14\n-          _1 = (const 42i32, const 43i32); // scope 0 at $DIR/mutable_variable_aggregate.rs:5:17: 5:25\n+          _1 = (const 42_i32, const 43_i32); // scope 0 at $DIR/mutable_variable_aggregate.rs:5:17: 5:25\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002a))\n@@ -29,7 +29,7 @@\n -                                          // + span: $DIR/mutable_variable_aggregate.rs:5:22: 5:24\n +                                          // + span: $DIR/mutable_variable_aggregate.rs:5:17: 5:25\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000002b)) }\n-          (_1.1: i32) = const 99i32;       // scope 1 at $DIR/mutable_variable_aggregate.rs:6:5: 6:13\n+          (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate.rs:6:5: 6:13\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000063))\n@@ -38,7 +38,7 @@\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000063)) }\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:7:9: 7:10\n -         _2 = _1;                         // scope 1 at $DIR/mutable_variable_aggregate.rs:7:13: 7:14\n-+         _2 = (const 42i32, const 99i32); // scope 1 at $DIR/mutable_variable_aggregate.rs:7:13: 7:14\n++         _2 = (const 42_i32, const 99_i32); // scope 1 at $DIR/mutable_variable_aggregate.rs:7:13: 7:14\n +                                          // ty::Const\n +                                          // + ty: i32\n +                                          // + val: Value(Scalar(0x0000002a))"}, {"sha": "e78bc31b7748022470034a12db776e88d6f94a62", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate_mut_ref/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -18,7 +18,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:5:9: 5:14\n-          _1 = (const 42i32, const 43i32); // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:5:17: 5:25\n+          _1 = (const 42_i32, const 43_i32); // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:5:17: 5:25\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002a))\n@@ -35,7 +35,7 @@\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000002b)) }\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:6:9: 6:10\n           _2 = &mut _1;                    // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:6:13: 6:19\n-          ((*_2).1: i32) = const 99i32;    // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:7:5: 7:13\n+          ((*_2).1: i32) = const 99_i32;   // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:7:5: 7:13\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000063))"}, {"sha": "b1a0ab88fccd59f708c04b469526bb2a702e7a42", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate_partial_read/rustc.main.ConstProp.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -24,14 +24,14 @@\n       }\n   \n       bb1: {\n-          (_1.1: i32) = const 99i32;       // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:6:5: 6:13\n+          (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:6:5: 6:13\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000063))\n                                            // mir::Constant\n                                            // + span: $DIR/mutable_variable_aggregate_partial_read.rs:6:11: 6:13\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000063)) }\n-          (_1.0: i32) = const 42i32;       // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:7:5: 7:13\n+          (_1.0: i32) = const 42_i32;      // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:7:5: 7:13\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002a))\n@@ -40,7 +40,7 @@\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:8:9: 8:10\n -         _2 = (_1.1: i32);                // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:8:13: 8:16\n-+         _2 = const 99i32;                // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:8:13: 8:16\n++         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:8:13: 8:16\n +                                          // ty::Const\n +                                          // + ty: i32\n +                                          // + val: Value(Scalar(0x00000063))"}, {"sha": "3b72af2d0b9c57341342d7f53c1c88b6a0678270", "filename": "src/test/mir-opt/const_prop/mutable_variable_no_prop/rustc.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -19,7 +19,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_no_prop.rs:7:9: 7:14\n-          _1 = const 42u32;                // scope 0 at $DIR/mutable_variable_no_prop.rs:7:17: 7:19\n+          _1 = const 42_u32;               // scope 0 at $DIR/mutable_variable_no_prop.rs:7:17: 7:19\n                                            // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x0000002a))"}, {"sha": "b59b180b07d7fd4091ef770e9cd3edfe97a90e23", "filename": "src/test/mir-opt/const_prop/mutable_variable_unprop_assign/rustc.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -34,7 +34,7 @@\n   \n       bb1: {\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:6:9: 6:14\n-          _2 = (const 1i32, const 2i32);   // scope 1 at $DIR/mutable_variable_unprop_assign.rs:6:29: 6:35\n+          _2 = (const 1_i32, const 2_i32); // scope 1 at $DIR/mutable_variable_unprop_assign.rs:6:29: 6:35\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000001))"}, {"sha": "4bfa50e9851f417cbc2946fd8d74e485ae8ec4a4", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -24,8 +24,8 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n--         _2 = CheckedAdd(const 2i32, const 2i32); // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+         _2 = (const 4i32, const false);  // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n+-         _2 = CheckedAdd(const 2_i32, const 2_i32); // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n++         _2 = (const 4_i32, const false); // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n                                            // ty::Const\n                                            // + ty: i32\n -                                          // + val: Value(Scalar(0x00000002))\n@@ -43,21 +43,33 @@\n                                            // mir::Constant\n -                                          // + span: $DIR/optimizes_into_variable.rs:12:17: 12:18\n -                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n--         assert(!move (_2.1: bool), \"attempt to add with overflow\") -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n+-         assert(!move (_2.1: bool), \"attempt to compute `{} + {}` which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+         assert(!const false, \"attempt to add with overflow\") -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+                                          // ty::Const\n++         assert(!const false, \"attempt to compute `{} + {}` which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n+                                           // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x00))\n +                                          // mir::Constant\n +                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++                                          // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000002))\n+                                           // mir::Constant\n+                                           // + span: $DIR/optimizes_into_variable.rs:12:13: 12:14\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000002))\n+                                           // mir::Constant\n+                                           // + span: $DIR/optimizes_into_variable.rs:12:17: 12:18\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n       }\n   \n       bb1: {\n -         _1 = move (_2.0: i32);           // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+         _1 = const 4i32;                 // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n++         _1 = const 4_i32;                // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // ty::Const\n +                                          // + ty: i32\n +                                          // + val: Value(Scalar(0x00000004))\n@@ -66,7 +78,7 @@\n +                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n           StorageLive(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n           StorageLive(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n-          _4 = [const 0i32, const 1i32, const 2i32, const 3i32, const 4i32, const 5i32]; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n+          _4 = [const 0_i32, const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32]; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000000))\n@@ -104,14 +116,14 @@\n                                            // + span: $DIR/optimizes_into_variable.rs:13:29: 13:30\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n           StorageLive(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n-          _5 = const 3usize;               // scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n+          _5 = const 3_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x00000003))\n                                            // mir::Constant\n                                            // + span: $DIR/optimizes_into_variable.rs:13:32: 13:33\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x00000003)) }\n-          _6 = const 6usize;               // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+          _6 = const 6_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x00000006))\n@@ -138,7 +150,7 @@\n   \n       bb2: {\n -         _3 = _4[_5];                     // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+         _3 = const 3i32;                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n++         _3 = const 3_i32;                // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // ty::Const\n +                                          // + ty: i32\n +                                          // + val: Value(Scalar(0x00000003))\n@@ -149,7 +161,7 @@\n           StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n           StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n           StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n-          _9 = Point { x: const 12u32, y: const 42u32 }; // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n+          _9 = Point { x: const 12_u32, y: const 42_u32 }; // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n                                            // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x0000000c))\n@@ -163,7 +175,7 @@\n                                            // + span: $DIR/optimizes_into_variable.rs:14:32: 14:34\n                                            // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n -         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n-+         _8 = const 42u32;                // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n++         _8 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n +                                          // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x0000002a))"}, {"sha": "7b74bf81d96fea575bed78ff602ca82f5257068f", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable/32bit/rustc.main.SimplifyLocals.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.SimplifyLocals.after.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -17,23 +17,23 @@ fn main() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n-        _1 = const 4i32;                 // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n+        _1 = const 4_i32;                // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000004))\n                                          // mir::Constant\n                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n         StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n-        _2 = const 3i32;                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+        _2 = const 3_i32;                // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000003))\n                                          // mir::Constant\n                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n-        _3 = const 42u32;                // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n+        _3 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x0000002a))"}, {"sha": "2d40567ce8da17d80cb8531d1a9501830651f627", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -24,8 +24,8 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n--         _2 = CheckedAdd(const 2i32, const 2i32); // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+         _2 = (const 4i32, const false);  // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n+-         _2 = CheckedAdd(const 2_i32, const 2_i32); // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n++         _2 = (const 4_i32, const false); // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n                                            // ty::Const\n                                            // + ty: i32\n -                                          // + val: Value(Scalar(0x00000002))\n@@ -43,21 +43,33 @@\n                                            // mir::Constant\n -                                          // + span: $DIR/optimizes_into_variable.rs:12:17: 12:18\n -                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n--         assert(!move (_2.1: bool), \"attempt to add with overflow\") -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n+-         assert(!move (_2.1: bool), \"attempt to compute `{} + {}` which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+         assert(!const false, \"attempt to add with overflow\") -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+                                          // ty::Const\n++         assert(!const false, \"attempt to compute `{} + {}` which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n+                                           // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x00))\n +                                          // mir::Constant\n +                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++                                          // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000002))\n+                                           // mir::Constant\n+                                           // + span: $DIR/optimizes_into_variable.rs:12:13: 12:14\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000002))\n+                                           // mir::Constant\n+                                           // + span: $DIR/optimizes_into_variable.rs:12:17: 12:18\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n       }\n   \n       bb1: {\n -         _1 = move (_2.0: i32);           // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+         _1 = const 4i32;                 // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n++         _1 = const 4_i32;                // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // ty::Const\n +                                          // + ty: i32\n +                                          // + val: Value(Scalar(0x00000004))\n@@ -66,7 +78,7 @@\n +                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n           StorageLive(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n           StorageLive(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n-          _4 = [const 0i32, const 1i32, const 2i32, const 3i32, const 4i32, const 5i32]; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n+          _4 = [const 0_i32, const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32]; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000000))\n@@ -104,14 +116,14 @@\n                                            // + span: $DIR/optimizes_into_variable.rs:13:29: 13:30\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n           StorageLive(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n-          _5 = const 3usize;               // scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n+          _5 = const 3_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x0000000000000003))\n                                            // mir::Constant\n                                            // + span: $DIR/optimizes_into_variable.rs:13:32: 13:33\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }\n-          _6 = const 6usize;               // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+          _6 = const 6_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x0000000000000006))\n@@ -138,7 +150,7 @@\n   \n       bb2: {\n -         _3 = _4[_5];                     // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+         _3 = const 3i32;                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n++         _3 = const 3_i32;                // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // ty::Const\n +                                          // + ty: i32\n +                                          // + val: Value(Scalar(0x00000003))\n@@ -149,7 +161,7 @@\n           StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n           StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n           StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n-          _9 = Point { x: const 12u32, y: const 42u32 }; // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n+          _9 = Point { x: const 12_u32, y: const 42_u32 }; // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n                                            // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x0000000c))\n@@ -163,7 +175,7 @@\n                                            // + span: $DIR/optimizes_into_variable.rs:14:32: 14:34\n                                            // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n -         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n-+         _8 = const 42u32;                // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n++         _8 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n +                                          // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x0000002a))"}, {"sha": "7b74bf81d96fea575bed78ff602ca82f5257068f", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable/64bit/rustc.main.SimplifyLocals.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.SimplifyLocals.after.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -17,23 +17,23 @@ fn main() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n-        _1 = const 4i32;                 // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n+        _1 = const 4_i32;                // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000004))\n                                          // mir::Constant\n                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n         StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n-        _2 = const 3i32;                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+        _2 = const 3_i32;                // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000003))\n                                          // mir::Constant\n                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n-        _3 = const 42u32;                // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n+        _3 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x0000002a))"}, {"sha": "36edfc42b9a76c3168ed0f911ba0cdcdd6a248a0", "filename": "src/test/mir-opt/const_prop/read_immutable_static/rustc.main.ConstProp.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -24,7 +24,7 @@\n                                            // + span: $DIR/read_immutable_static.rs:7:13: 7:16\n                                            // + literal: Const { ty: &u8, val: Value(Scalar(alloc0)) }\n -         _2 = (*_3);                      // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n-+         _2 = const 2u8;                  // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n++         _2 = const 2_u8;                 // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n +                                          // ty::Const\n +                                          // + ty: u8\n +                                          // + val: Value(Scalar(0x02))\n@@ -42,14 +42,14 @@\n                                            // + literal: Const { ty: &u8, val: Value(Scalar(alloc0)) }\n -         _4 = (*_5);                      // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n -         _1 = Add(move _2, move _4);      // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:22\n-+         _4 = const 2u8;                  // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n++         _4 = const 2_u8;                 // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n +                                          // ty::Const\n +                                          // + ty: u8\n +                                          // + val: Value(Scalar(0x02))\n +                                          // mir::Constant\n +                                          // + span: $DIR/read_immutable_static.rs:7:19: 7:22\n +                                          // + literal: Const { ty: u8, val: Value(Scalar(0x02)) }\n-+         _1 = const 4u8;                  // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:22\n++         _1 = const 4_u8;                 // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:22\n +                                          // ty::Const\n +                                          // + ty: u8\n +                                          // + val: Value(Scalar(0x04))"}, {"sha": "12e3a04d89bf2893eee8f42d25c1165412047a2f", "filename": "src/test/mir-opt/const_prop/ref_deref/rustc.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -20,7 +20,7 @@\n                                            // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:3 ~ ref_deref[317d]::main[0]), [], Some(promoted[0])) }\n           _2 = _4;                         // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n -         _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n-+         _1 = const 4i32;                 // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n++         _1 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n +                                          // ty::Const\n +                                          // + ty: i32\n +                                          // + val: Value(Scalar(0x00000004))"}, {"sha": "d56f07e0f57f5430a65d2aed0983befad6156313", "filename": "src/test/mir-opt/const_prop/ref_deref/rustc.main.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.PromoteTemps.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -12,7 +12,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n           StorageLive(_2);                 // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n -         StorageLive(_3);                 // scope 0 at $DIR/ref_deref.rs:5:8: 5:9\n--         _3 = const 4i32;                 // scope 0 at $DIR/ref_deref.rs:5:8: 5:9\n+-         _3 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:5:8: 5:9\n +         _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n                                            // ty::Const\n -                                          // + ty: i32"}, {"sha": "0b9c1caa6bdaee2566406b77f375dbb786f4d328", "filename": "src/test/mir-opt/const_prop/ref_deref_project/rustc.main.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.PromoteTemps.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -12,7 +12,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n           StorageLive(_2);                 // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n -         StorageLive(_3);                 // scope 0 at $DIR/ref_deref_project.rs:5:8: 5:14\n--         _3 = (const 4i32, const 5i32);   // scope 0 at $DIR/ref_deref_project.rs:5:8: 5:14\n+-         _3 = (const 4_i32, const 5_i32); // scope 0 at $DIR/ref_deref_project.rs:5:8: 5:14\n +         _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n                                            // ty::Const\n -                                          // + ty: i32"}, {"sha": "3046b2ca9b8a42b7946a91e51c12cc78624d1517", "filename": "src/test/mir-opt/const_prop/repeat/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F32bit%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -17,22 +17,22 @@\n           StorageLive(_1);                 // scope 0 at $DIR/repeat.rs:6:9: 6:10\n           StorageLive(_2);                 // scope 0 at $DIR/repeat.rs:6:18: 6:28\n           StorageLive(_3);                 // scope 0 at $DIR/repeat.rs:6:18: 6:25\n-          _3 = [const 42u32; 8];           // scope 0 at $DIR/repeat.rs:6:18: 6:25\n+          _3 = [const 42_u32; 8];          // scope 0 at $DIR/repeat.rs:6:18: 6:25\n                                            // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x0000002a))\n                                            // mir::Constant\n                                            // + span: $DIR/repeat.rs:6:19: 6:21\n                                            // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n           StorageLive(_4);                 // scope 0 at $DIR/repeat.rs:6:26: 6:27\n-          _4 = const 2usize;               // scope 0 at $DIR/repeat.rs:6:26: 6:27\n+          _4 = const 2_usize;              // scope 0 at $DIR/repeat.rs:6:26: 6:27\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x00000002))\n                                            // mir::Constant\n                                            // + span: $DIR/repeat.rs:6:26: 6:27\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x00000002)) }\n-          _5 = const 8usize;               // scope 0 at $DIR/repeat.rs:6:18: 6:28\n+          _5 = const 8_usize;              // scope 0 at $DIR/repeat.rs:6:18: 6:28\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x00000008))\n@@ -59,8 +59,8 @@\n   \n       bb1: {\n -         _2 = _3[_4];                     // scope 0 at $DIR/repeat.rs:6:18: 6:28\n--         _1 = Add(move _2, const 0u32);   // scope 0 at $DIR/repeat.rs:6:18: 6:32\n-+         _2 = const 42u32;                // scope 0 at $DIR/repeat.rs:6:18: 6:28\n+-         _1 = Add(move _2, const 0_u32);  // scope 0 at $DIR/repeat.rs:6:18: 6:32\n++         _2 = const 42_u32;               // scope 0 at $DIR/repeat.rs:6:18: 6:28\n                                            // ty::Const\n                                            // + ty: u32\n -                                          // + val: Value(Scalar(0x00000000))\n@@ -70,7 +70,7 @@\n -                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n +                                          // + span: $DIR/repeat.rs:6:18: 6:28\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n-+         _1 = const 42u32;                // scope 0 at $DIR/repeat.rs:6:18: 6:32\n++         _1 = const 42_u32;               // scope 0 at $DIR/repeat.rs:6:18: 6:32\n +                                          // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x0000002a))"}, {"sha": "c06ed33df24c1bc052ccdc0d6371e7ccec87f01f", "filename": "src/test/mir-opt/const_prop/repeat/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F64bit%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -17,22 +17,22 @@\n           StorageLive(_1);                 // scope 0 at $DIR/repeat.rs:6:9: 6:10\n           StorageLive(_2);                 // scope 0 at $DIR/repeat.rs:6:18: 6:28\n           StorageLive(_3);                 // scope 0 at $DIR/repeat.rs:6:18: 6:25\n-          _3 = [const 42u32; 8];           // scope 0 at $DIR/repeat.rs:6:18: 6:25\n+          _3 = [const 42_u32; 8];          // scope 0 at $DIR/repeat.rs:6:18: 6:25\n                                            // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x0000002a))\n                                            // mir::Constant\n                                            // + span: $DIR/repeat.rs:6:19: 6:21\n                                            // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n           StorageLive(_4);                 // scope 0 at $DIR/repeat.rs:6:26: 6:27\n-          _4 = const 2usize;               // scope 0 at $DIR/repeat.rs:6:26: 6:27\n+          _4 = const 2_usize;              // scope 0 at $DIR/repeat.rs:6:26: 6:27\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x0000000000000002))\n                                            // mir::Constant\n                                            // + span: $DIR/repeat.rs:6:26: 6:27\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n-          _5 = const 8usize;               // scope 0 at $DIR/repeat.rs:6:18: 6:28\n+          _5 = const 8_usize;              // scope 0 at $DIR/repeat.rs:6:18: 6:28\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x0000000000000008))\n@@ -59,8 +59,8 @@\n   \n       bb1: {\n -         _2 = _3[_4];                     // scope 0 at $DIR/repeat.rs:6:18: 6:28\n--         _1 = Add(move _2, const 0u32);   // scope 0 at $DIR/repeat.rs:6:18: 6:32\n-+         _2 = const 42u32;                // scope 0 at $DIR/repeat.rs:6:18: 6:28\n+-         _1 = Add(move _2, const 0_u32);  // scope 0 at $DIR/repeat.rs:6:18: 6:32\n++         _2 = const 42_u32;               // scope 0 at $DIR/repeat.rs:6:18: 6:28\n                                            // ty::Const\n                                            // + ty: u32\n -                                          // + val: Value(Scalar(0x00000000))\n@@ -70,7 +70,7 @@\n -                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n +                                          // + span: $DIR/repeat.rs:6:18: 6:28\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n-+         _1 = const 42u32;                // scope 0 at $DIR/repeat.rs:6:18: 6:32\n++         _1 = const 42_u32;               // scope 0 at $DIR/repeat.rs:6:18: 6:32\n +                                          // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x0000002a))"}, {"sha": "5e39c8e6d523ed4a5563ff3d3293e0fc17bc48ab", "filename": "src/test/mir-opt/const_prop/return_place/rustc.add.ConstProp.diff", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place%2Frustc.add.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place%2Frustc.add.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place%2Frustc.add.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -6,8 +6,8 @@\n       let mut _1: (u32, bool);             // in scope 0 at $DIR/return_place.rs:6:5: 6:10\n   \n       bb0: {\n--         _1 = CheckedAdd(const 2u32, const 2u32); // scope 0 at $DIR/return_place.rs:6:5: 6:10\n-+         _1 = (const 4u32, const false);  // scope 0 at $DIR/return_place.rs:6:5: 6:10\n+-         _1 = CheckedAdd(const 2_u32, const 2_u32); // scope 0 at $DIR/return_place.rs:6:5: 6:10\n++         _1 = (const 4_u32, const false); // scope 0 at $DIR/return_place.rs:6:5: 6:10\n                                            // ty::Const\n                                            // + ty: u32\n -                                          // + val: Value(Scalar(0x00000002))\n@@ -25,21 +25,33 @@\n                                            // mir::Constant\n -                                          // + span: $DIR/return_place.rs:6:9: 6:10\n -                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n--         assert(!move (_1.1: bool), \"attempt to add with overflow\") -> bb1; // scope 0 at $DIR/return_place.rs:6:5: 6:10\n+-         assert(!move (_1.1: bool), \"attempt to compute `{} + {}` which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:6:5: 6:10\n +                                          // + span: $DIR/return_place.rs:6:5: 6:10\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+         assert(!const false, \"attempt to add with overflow\") -> bb1; // scope 0 at $DIR/return_place.rs:6:5: 6:10\n-+                                          // ty::Const\n++         assert(!const false, \"attempt to compute `{} + {}` which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:6:5: 6:10\n+                                           // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x00))\n +                                          // mir::Constant\n +                                          // + span: $DIR/return_place.rs:6:5: 6:10\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++                                          // ty::Const\n+                                           // + ty: u32\n+                                           // + val: Value(Scalar(0x00000002))\n+                                           // mir::Constant\n+                                           // + span: $DIR/return_place.rs:6:5: 6:6\n+                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n+                                           // ty::Const\n+                                           // + ty: u32\n+                                           // + val: Value(Scalar(0x00000002))\n+                                           // mir::Constant\n+                                           // + span: $DIR/return_place.rs:6:9: 6:10\n+                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n       }\n   \n       bb1: {\n -         _0 = move (_1.0: u32);           // scope 0 at $DIR/return_place.rs:6:5: 6:10\n-+         _0 = const 4u32;                 // scope 0 at $DIR/return_place.rs:6:5: 6:10\n++         _0 = const 4_u32;                // scope 0 at $DIR/return_place.rs:6:5: 6:10\n +                                          // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x00000004))"}, {"sha": "23ad8d057ba8dbb5cb061b64d11adeebb634c6a4", "filename": "src/test/mir-opt/const_prop/return_place/rustc.add.PreCodegen.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place%2Frustc.add.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place%2Frustc.add.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place%2Frustc.add.PreCodegen.before.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -4,7 +4,7 @@ fn add() -> u32 {\n     let mut _0: u32;                     // return place in scope 0 at $DIR/return_place.rs:5:13: 5:16\n \n     bb0: {\n-        _0 = const 4u32;                 // scope 0 at $DIR/return_place.rs:6:5: 6:10\n+        _0 = const 4_u32;                // scope 0 at $DIR/return_place.rs:6:5: 6:10\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000004))"}, {"sha": "43e0eb09a2e5f2b3c2296177f099c59c4a299741", "filename": "src/test/mir-opt/const_prop/scalar_literal_propagation/rustc.main.ConstProp.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -12,7 +12,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/scalar_literal_propagation.rs:3:9: 3:10\n-          _1 = const 1u32;                 // scope 0 at $DIR/scalar_literal_propagation.rs:3:13: 3:14\n+          _1 = const 1_u32;                // scope 0 at $DIR/scalar_literal_propagation.rs:3:13: 3:14\n                                            // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x00000001))\n@@ -23,14 +23,14 @@\n           StorageLive(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:4:13: 4:14\n -         _3 = _1;                         // scope 1 at $DIR/scalar_literal_propagation.rs:4:13: 4:14\n -         _2 = const consume(move _3) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:4:5: 4:15\n-+         _3 = const 1u32;                 // scope 1 at $DIR/scalar_literal_propagation.rs:4:13: 4:14\n++         _3 = const 1_u32;                // scope 1 at $DIR/scalar_literal_propagation.rs:4:13: 4:14\n                                            // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x00000001))\n +                                          // mir::Constant\n +                                          // + span: $DIR/scalar_literal_propagation.rs:4:13: 4:14\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n-+         _2 = const consume(const 1u32) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:4:5: 4:15\n++         _2 = const consume(const 1_u32) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:4:5: 4:15\n +                                          // ty::Const\n                                            // + ty: fn(u32) {consume}\n                                            // + val: Value(Scalar(<ZST>))"}, {"sha": "70c415648822308780ad5cdc04109f7d48b0c9b2", "filename": "src/test/mir-opt/const_prop/slice_len/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F32bit%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -30,7 +30,7 @@\n           _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:5:18: 5:19\n           StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n-          _6 = const 1usize;               // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n+          _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x00000001))\n@@ -40,7 +40,7 @@\n -         _7 = Len((*_2));                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n -         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n -         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+         _7 = const 3usize;               // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++         _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +                                          // ty::Const\n +                                          // + ty: usize\n +                                          // + val: Value(Scalar(0x00000003))\n@@ -65,7 +65,7 @@\n   \n       bb1: {\n -         _1 = (*_2)[_6];                  // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+         _1 = const 2u32;                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++         _1 = const 2_u32;                // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +                                          // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x00000002))"}, {"sha": "885f28124c4b7d4133a2007e52f0cfb10c330367", "filename": "src/test/mir-opt/const_prop/slice_len/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F64bit%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -30,7 +30,7 @@\n           _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:5:18: 5:19\n           StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n-          _6 = const 1usize;               // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n+          _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x0000000000000001))\n@@ -40,7 +40,7 @@\n -         _7 = Len((*_2));                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n -         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n -         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+         _7 = const 3usize;               // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++         _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +                                          // ty::Const\n +                                          // + ty: usize\n +                                          // + val: Value(Scalar(0x0000000000000003))\n@@ -65,7 +65,7 @@\n   \n       bb1: {\n -         _1 = (*_2)[_6];                  // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+         _1 = const 2u32;                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++         _1 = const 2_u32;                // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +                                          // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x00000002))"}, {"sha": "9580b99da9e403650378c1c15917aada453fcf92", "filename": "src/test/mir-opt/const_prop/switch_int/rustc.main.ConstProp.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -7,15 +7,15 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/switch_int.rs:7:11: 7:12\n-          _1 = const 1i32;                 // scope 0 at $DIR/switch_int.rs:7:11: 7:12\n+          _1 = const 1_i32;                // scope 0 at $DIR/switch_int.rs:7:11: 7:12\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000001))\n                                            // mir::Constant\n                                            // + span: $DIR/switch_int.rs:7:11: 7:12\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n--         switchInt(_1) -> [1i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:8:9: 8:10\n-+         switchInt(const 1i32) -> [1i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:8:9: 8:10\n+-         switchInt(_1) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:8:9: 8:10\n++         switchInt(const 1_i32) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:8:9: 8:10\n +                                          // ty::Const\n +                                          // + ty: i32\n +                                          // + val: Value(Scalar(0x00000001))\n@@ -25,7 +25,7 @@\n       }\n   \n       bb1: {\n-          _0 = const foo(const -1i32) -> bb3; // scope 0 at $DIR/switch_int.rs:9:14: 9:21\n+          _0 = const foo(const -1_i32) -> bb3; // scope 0 at $DIR/switch_int.rs:9:14: 9:21\n                                            // ty::Const\n                                            // + ty: fn(i32) {foo}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -41,7 +41,7 @@\n       }\n   \n       bb2: {\n-          _0 = const foo(const 0i32) -> bb3; // scope 0 at $DIR/switch_int.rs:8:14: 8:20\n+          _0 = const foo(const 0_i32) -> bb3; // scope 0 at $DIR/switch_int.rs:8:14: 8:20\n                                            // ty::Const\n                                            // + ty: fn(i32) {foo}\n                                            // + val: Value(Scalar(<ZST>))"}, {"sha": "54f37e609ec1310f87248d9cf81a4786b0970d58", "filename": "src/test/mir-opt/const_prop/switch_int/rustc.main.SimplifyBranches-after-const-prop.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int%2Frustc.main.SimplifyBranches-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int%2Frustc.main.SimplifyBranches-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int%2Frustc.main.SimplifyBranches-after-const-prop.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -7,14 +7,14 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/switch_int.rs:7:11: 7:12\n-          _1 = const 1i32;                 // scope 0 at $DIR/switch_int.rs:7:11: 7:12\n+          _1 = const 1_i32;                // scope 0 at $DIR/switch_int.rs:7:11: 7:12\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000001))\n                                            // mir::Constant\n                                            // + span: $DIR/switch_int.rs:7:11: 7:12\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n--         switchInt(const 1i32) -> [1i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:8:9: 8:10\n+-         switchInt(const 1_i32) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:8:9: 8:10\n -                                          // ty::Const\n -                                          // + ty: i32\n -                                          // + val: Value(Scalar(0x00000001))\n@@ -25,7 +25,7 @@\n       }\n   \n       bb1: {\n-          _0 = const foo(const -1i32) -> bb3; // scope 0 at $DIR/switch_int.rs:9:14: 9:21\n+          _0 = const foo(const -1_i32) -> bb3; // scope 0 at $DIR/switch_int.rs:9:14: 9:21\n                                            // ty::Const\n                                            // + ty: fn(i32) {foo}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -41,7 +41,7 @@\n       }\n   \n       bb2: {\n-          _0 = const foo(const 0i32) -> bb3; // scope 0 at $DIR/switch_int.rs:8:14: 8:20\n+          _0 = const foo(const 0_i32) -> bb3; // scope 0 at $DIR/switch_int.rs:8:14: 8:20\n                                            // ty::Const\n                                            // + ty: fn(i32) {foo}\n                                            // + val: Value(Scalar(<ZST>))"}, {"sha": "941ec64a3cc12561ab93c7729eff97115ed1a623", "filename": "src/test/mir-opt/const_prop/tuple_literal_propagation/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation%2Frustc.main.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -12,7 +12,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/tuple_literal_propagation.rs:3:9: 3:10\n-          _1 = (const 1u32, const 2u32);   // scope 0 at $DIR/tuple_literal_propagation.rs:3:13: 3:19\n+          _1 = (const 1_u32, const 2_u32); // scope 0 at $DIR/tuple_literal_propagation.rs:3:13: 3:19\n                                            // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x00000001))\n@@ -30,7 +30,7 @@\n           StorageLive(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:5:5: 5:15\n           StorageLive(_3);                 // scope 1 at $DIR/tuple_literal_propagation.rs:5:13: 5:14\n -         _3 = _1;                         // scope 1 at $DIR/tuple_literal_propagation.rs:5:13: 5:14\n-+         _3 = (const 1u32, const 2u32);   // scope 1 at $DIR/tuple_literal_propagation.rs:5:13: 5:14\n++         _3 = (const 1_u32, const 2_u32); // scope 1 at $DIR/tuple_literal_propagation.rs:5:13: 5:14\n +                                          // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x00000001))"}, {"sha": "5fe35b479c12687bf4924cd6a6de10d3aa0e8f2a", "filename": "src/test/mir-opt/const_prop_miscompile/rustc.bar.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile%2Frustc.bar.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile%2Frustc.bar.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile%2Frustc.bar.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -19,8 +19,8 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:12:9: 12:14\n--         _1 = (const 1i32,);              // scope 0 at $DIR/const_prop_miscompile.rs:12:17: 12:21\n-+         _1 = const (1i32,);              // scope 0 at $DIR/const_prop_miscompile.rs:12:17: 12:21\n+-         _1 = (const 1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:12:17: 12:21\n++         _1 = const (1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:12:17: 12:21\n                                            // ty::Const\n -                                          // + ty: i32\n +                                          // + ty: (i32,)\n@@ -33,7 +33,7 @@\n           StorageLive(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:13:5: 15:6\n           StorageLive(_3);                 // scope 2 at $DIR/const_prop_miscompile.rs:14:10: 14:22\n           _3 = &raw mut (_1.0: i32);       // scope 2 at $DIR/const_prop_miscompile.rs:14:10: 14:22\n-          (*_3) = const 5i32;              // scope 2 at $DIR/const_prop_miscompile.rs:14:9: 14:26\n+          (*_3) = const 5_i32;             // scope 2 at $DIR/const_prop_miscompile.rs:14:9: 14:26\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000005))\n@@ -52,7 +52,7 @@\n           StorageLive(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:16:9: 16:10\n           StorageLive(_5);                 // scope 1 at $DIR/const_prop_miscompile.rs:16:13: 16:20\n           _5 = (_1.0: i32);                // scope 1 at $DIR/const_prop_miscompile.rs:16:15: 16:18\n-          _4 = Eq(move _5, const 5i32);    // scope 1 at $DIR/const_prop_miscompile.rs:16:13: 16:25\n+          _4 = Eq(move _5, const 5_i32);   // scope 1 at $DIR/const_prop_miscompile.rs:16:13: 16:25\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000005))"}, {"sha": "98e9825c1c43564cec29507532a7b21786539001", "filename": "src/test/mir-opt/const_prop_miscompile/rustc.foo.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile%2Frustc.foo.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile%2Frustc.foo.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile%2Frustc.foo.ConstProp.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -16,8 +16,8 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:5:9: 5:14\n--         _1 = (const 1i32,);              // scope 0 at $DIR/const_prop_miscompile.rs:5:17: 5:21\n-+         _1 = const (1i32,);              // scope 0 at $DIR/const_prop_miscompile.rs:5:17: 5:21\n+-         _1 = (const 1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:5:17: 5:21\n++         _1 = const (1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:5:17: 5:21\n                                            // ty::Const\n -                                          // + ty: i32\n +                                          // + ty: (i32,)\n@@ -29,7 +29,7 @@\n +                                          // + literal: Const { ty: (i32,), val: Value(Scalar(0x00000001)) }\n           StorageLive(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:6:6: 6:14\n           _2 = &mut (_1.0: i32);           // scope 1 at $DIR/const_prop_miscompile.rs:6:6: 6:14\n-          (*_2) = const 5i32;              // scope 1 at $DIR/const_prop_miscompile.rs:6:5: 6:18\n+          (*_2) = const 5_i32;             // scope 1 at $DIR/const_prop_miscompile.rs:6:5: 6:18\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000005))\n@@ -40,7 +40,7 @@\n           StorageLive(_3);                 // scope 1 at $DIR/const_prop_miscompile.rs:7:9: 7:10\n           StorageLive(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:7:13: 7:20\n           _4 = (_1.0: i32);                // scope 1 at $DIR/const_prop_miscompile.rs:7:15: 7:18\n-          _3 = Eq(move _4, const 5i32);    // scope 1 at $DIR/const_prop_miscompile.rs:7:13: 7:25\n+          _3 = Eq(move _4, const 5_i32);   // scope 1 at $DIR/const_prop_miscompile.rs:7:13: 7:25\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000005))"}, {"sha": "22fbf4e836ba47937a29c5be02db06c3d2202a3a", "filename": "src/test/mir-opt/copy_propagation_arg/rustc.arg_src.CopyPropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.arg_src.CopyPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.arg_src.CopyPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.arg_src.CopyPropagation.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -12,7 +12,7 @@\n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:28:9: 28:10\n           _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:28:13: 28:14\n-          _1 = const 123i32;               // scope 1 at $DIR/copy_propagation_arg.rs:29:5: 29:12\n+          _1 = const 123_i32;              // scope 1 at $DIR/copy_propagation_arg.rs:29:5: 29:12\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000007b))"}, {"sha": "6953a80a5f08aea697866010ab19e8a8f08aec64", "filename": "src/test/mir-opt/copy_propagation_arg/rustc.bar.CopyPropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.bar.CopyPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.bar.CopyPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.bar.CopyPropagation.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -23,7 +23,7 @@\n       bb1: {\n           StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:16:12: 16:13\n           StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:16:13: 16:14\n-          _1 = const 5u8;                  // scope 0 at $DIR/copy_propagation_arg.rs:17:5: 17:10\n+          _1 = const 5_u8;                 // scope 0 at $DIR/copy_propagation_arg.rs:17:5: 17:10\n                                            // ty::Const\n                                            // + ty: u8\n                                            // + val: Value(Scalar(0x05))"}, {"sha": "b84ca5df9964e01b09a0419569648e2e2fedf0af", "filename": "src/test/mir-opt/exponential-or/rustc.match_tuple.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fexponential-or%2Frustc.match_tuple.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fexponential-or%2Frustc.match_tuple.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fexponential-or%2Frustc.match_tuple.SimplifyCfg-initial.after.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -19,11 +19,11 @@ fn match_tuple(_1: (u32, bool, std::option::Option<i32>, u32)) -> u32 {\n \n     bb0: {\n         FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/exponential-or.rs:7:11: 7:12\n-        switchInt((_1.0: u32)) -> [1u32: bb2, 4u32: bb2, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:8:15: 8:16\n+        switchInt((_1.0: u32)) -> [1_u32: bb2, 4_u32: bb2, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:8:15: 8:16\n     }\n \n     bb1: {\n-        _0 = const 0u32;                 // scope 0 at $DIR/exponential-or.rs:9:14: 9:15\n+        _0 = const 0_u32;                // scope 0 at $DIR/exponential-or.rs:9:14: 9:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -35,15 +35,15 @@ fn match_tuple(_1: (u32, bool, std::option::Option<i32>, u32)) -> u32 {\n \n     bb2: {\n         _2 = discriminant((_1.2: std::option::Option<i32>)); // scope 0 at $DIR/exponential-or.rs:8:37: 8:48\n-        switchInt(move _2) -> [0isize: bb4, 1isize: bb3, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:8:37: 8:48\n+        switchInt(move _2) -> [0_isize: bb4, 1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:8:37: 8:48\n     }\n \n     bb3: {\n-        switchInt((((_1.2: std::option::Option<i32>) as Some).0: i32)) -> [1i32: bb4, 8i32: bb4, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:8:42: 8:43\n+        switchInt((((_1.2: std::option::Option<i32>) as Some).0: i32)) -> [1_i32: bb4, 8_i32: bb4, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:8:42: 8:43\n     }\n \n     bb4: {\n-        _5 = Le(const 6u32, (_1.3: u32)); // scope 0 at $DIR/exponential-or.rs:8:62: 8:67\n+        _5 = Le(const 6_u32, (_1.3: u32)); // scope 0 at $DIR/exponential-or.rs:8:62: 8:67\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000006))\n@@ -54,7 +54,7 @@ fn match_tuple(_1: (u32, bool, std::option::Option<i32>, u32)) -> u32 {\n     }\n \n     bb5: {\n-        _6 = Le((_1.3: u32), const 9u32); // scope 0 at $DIR/exponential-or.rs:8:62: 8:67\n+        _6 = Le((_1.3: u32), const 9_u32); // scope 0 at $DIR/exponential-or.rs:8:62: 8:67\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000009))\n@@ -65,7 +65,7 @@ fn match_tuple(_1: (u32, bool, std::option::Option<i32>, u32)) -> u32 {\n     }\n \n     bb6: {\n-        _3 = Le(const 13u32, (_1.3: u32)); // scope 0 at $DIR/exponential-or.rs:8:70: 8:77\n+        _3 = Le(const 13_u32, (_1.3: u32)); // scope 0 at $DIR/exponential-or.rs:8:70: 8:77\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x0000000d))\n@@ -76,7 +76,7 @@ fn match_tuple(_1: (u32, bool, std::option::Option<i32>, u32)) -> u32 {\n     }\n \n     bb7: {\n-        _4 = Le((_1.3: u32), const 16u32); // scope 0 at $DIR/exponential-or.rs:8:70: 8:77\n+        _4 = Le((_1.3: u32), const 16_u32); // scope 0 at $DIR/exponential-or.rs:8:70: 8:77\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000010))"}, {"sha": "bd64a31663a6996c7c9c91e307b5ef1dd021c5f7", "filename": "src/test/mir-opt/generator-drop-cleanup/rustc.main-{{closure}}.generator_drop.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -34,7 +34,7 @@ fn main::{{closure}}#0(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15:\n \n     bb0: {\n         _9 = discriminant((*_1));        // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n-        switchInt(move _9) -> [0u32: bb7, 3u32: bb11, otherwise: bb12]; // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        switchInt(move _9) -> [0_u32: bb7, 3_u32: bb11, otherwise: bb12]; // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n     bb1 (cleanup): {"}, {"sha": "7dcfda32ca4a2e34436fa647dfee77bcc7deaf50", "filename": "src/test/mir-opt/generator-storage-dead-unwind/rustc.main-{{closure}}.StateTransform.before.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind%2Frustc.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind%2Frustc.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind%2Frustc.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -21,15 +21,15 @@ yields ()\n \n     bb0: {\n         StorageLive(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:23:13: 23:14\n-        _3 = Foo(const 5i32);            // scope 0 at $DIR/generator-storage-dead-unwind.rs:23:17: 23:23\n+        _3 = Foo(const 5_i32);           // scope 0 at $DIR/generator-storage-dead-unwind.rs:23:17: 23:23\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000005))\n                                          // mir::Constant\n                                          // + span: $DIR/generator-storage-dead-unwind.rs:23:21: 23:22\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n         StorageLive(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:24:13: 24:14\n-        _4 = Bar(const 6i32);            // scope 1 at $DIR/generator-storage-dead-unwind.rs:24:17: 24:23\n+        _4 = Bar(const 6_i32);           // scope 1 at $DIR/generator-storage-dead-unwind.rs:24:17: 24:23\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000006))"}, {"sha": "8776e5919bd8d1fc9efd06d892ad8ff80403f091", "filename": "src/test/mir-opt/generator-tiny/rustc.main-{{closure}}.generator_resume.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -32,7 +32,7 @@ fn main::{{closure}}#0(_1: std::pin::Pin<&mut [generator@$DIR/generator-tiny.rs:\n \n     bb0: {\n         _11 = discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 25:6 {u8, HasDrop, ()}]))); // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n-        switchInt(move _11) -> [0u32: bb1, 3u32: bb5, otherwise: bb6]; // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n+        switchInt(move _11) -> [0_u32: bb1, 3_u32: bb5, otherwise: bb6]; // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n     }\n \n     bb1: {"}, {"sha": "c9ff1fe29f5edf96c948c0ede4e65fa02a202429", "filename": "src/test/mir-opt/inline/inline-any-operand/rustc.bar.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Finline%2Finline-any-operand%2Frustc.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Finline%2Finline-any-operand%2Frustc.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-any-operand%2Frustc.bar.Inline.after.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -25,14 +25,14 @@ fn bar() -> bool {\n                                          // + literal: Const { ty: fn(i32, i32) -> bool {foo}, val: Value(Scalar(<ZST>)) }\n         StorageLive(_2);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:6\n         _2 = _1;                         // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:6\n-        _3 = const 1i32;                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n+        _3 = const 1_i32;                // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-any-operand.rs:12:7: 12:8\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-        _4 = const -1i32;                // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n+        _4 = const -1_i32;               // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0xffffffff))"}, {"sha": "3b71fbaa5e8a2edb4180f8c0cf12c5ef456090c5", "filename": "src/test/mir-opt/inline/inline-into-box-place/32bit/rustc.main.Inline.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F32bit%2Frustc.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F32bit%2Frustc.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F32bit%2Frustc.main.Inline.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -19,7 +19,7 @@\n           _2 = Box(std::vec::Vec<u32>);    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n -         (*_2) = const std::vec::Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _4 = &mut (*_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: std::ptr::Unique::<u32> { pointer: {0x4 as *const u32}, _marker: std::marker::PhantomData::<u32> }, cap: 0usize, alloc: std::alloc::Global }; // scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n++         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: std::ptr::Unique::<u32> { pointer: {0x4 as *const u32}, _marker: std::marker::PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n                                            // ty::Const\n -                                          // + ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}\n -                                          // + val: Value(Scalar(<ZST>))\n@@ -39,7 +39,7 @@\n +                                          // + span: $SRC_DIR/liballoc/vec.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n-+         ((*_4).1: usize) = const 0usize; // scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n++         ((*_4).1: usize) = const 0_usize; // scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n +                                          // ty::Const\n +                                          // + ty: usize\n +                                          // + val: Value(Scalar(0x00000000))"}, {"sha": "2e7dde39115b7813ef6807261daa595a359c5936", "filename": "src/test/mir-opt/inline/inline-into-box-place/64bit/rustc.main.Inline.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F64bit%2Frustc.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F64bit%2Frustc.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F64bit%2Frustc.main.Inline.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -19,7 +19,7 @@\n           _2 = Box(std::vec::Vec<u32>);    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n -         (*_2) = const std::vec::Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _4 = &mut (*_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: std::ptr::Unique::<u32> { pointer: {0x4 as *const u32}, _marker: std::marker::PhantomData::<u32> }, cap: 0usize, alloc: std::alloc::Global }; // scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n++         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: std::ptr::Unique::<u32> { pointer: {0x4 as *const u32}, _marker: std::marker::PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n                                            // ty::Const\n -                                          // + ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}\n -                                          // + val: Value(Scalar(<ZST>))\n@@ -39,7 +39,7 @@\n +                                          // + span: $SRC_DIR/liballoc/vec.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n-+         ((*_4).1: usize) = const 0usize; // scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n++         ((*_4).1: usize) = const 0_usize; // scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n +                                          // ty::Const\n +                                          // + ty: usize\n +                                          // + val: Value(Scalar(0x0000000000000000))"}, {"sha": "c273c43c4297da7f9731c653de0b626c175c2563", "filename": "src/test/mir-opt/inline/inline-specialization/rustc.main.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Finline%2Finline-specialization%2Frustc.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Finline%2Finline-specialization%2Frustc.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-specialization%2Frustc.main.Inline.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -13,7 +13,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline-specialization.rs:5:9: 5:10\n -         _1 = const <std::vec::Vec<()> as Foo>::bar() -> bb1; // scope 0 at $DIR/inline-specialization.rs:5:13: 5:38\n-+         _1 = const 123u32;               // scope 2 at $DIR/inline-specialization.rs:14:31: 14:34\n++         _1 = const 123_u32;              // scope 2 at $DIR/inline-specialization.rs:14:31: 14:34\n                                            // ty::Const\n -                                          // + ty: fn() -> u32 {<std::vec::Vec<()> as Foo>::bar}\n -                                          // + val: Value(Scalar(<ZST>))"}, {"sha": "8a079f0da4b01441b72002c7b3519333047971d0", "filename": "src/test/mir-opt/instrument_coverage/rustc.bar.InstrumentCoverage.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Finstrument_coverage%2Frustc.bar.InstrumentCoverage.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Finstrument_coverage%2Frustc.bar.InstrumentCoverage.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage%2Frustc.bar.InstrumentCoverage.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -7,7 +7,7 @@\n   \n       bb0: {\n +         StorageLive(_1);                 // scope 0 at $DIR/instrument_coverage.rs:18:1: 20:2\n-+         _1 = const std::intrinsics::count_code_region(const 0u32) -> bb2; // scope 0 at $DIR/instrument_coverage.rs:18:1: 20:2\n++         _1 = const std::intrinsics::count_code_region(const 0_u32) -> bb2; // scope 0 at $DIR/instrument_coverage.rs:18:1: 20:2\n +                                          // ty::Const\n +                                          // + ty: unsafe extern \"rust-intrinsic\" fn(u32) {std::intrinsics::count_code_region}\n +                                          // + val: Value(Scalar(<ZST>))"}, {"sha": "3c2ec1dc06b70e0a352fc5b4bd0b623eabb204a6", "filename": "src/test/mir-opt/instrument_coverage/rustc.main.InstrumentCoverage.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Finstrument_coverage%2Frustc.main.InstrumentCoverage.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Finstrument_coverage%2Frustc.main.InstrumentCoverage.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage%2Frustc.main.InstrumentCoverage.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -11,7 +11,7 @@\n       bb0: {\n -         falseUnwind -> [real: bb1, cleanup: bb2]; // scope 0 at $DIR/instrument_coverage.rs:10:5: 14:6\n +         StorageLive(_4);                 // scope 0 at $DIR/instrument_coverage.rs:9:1: 15:2\n-+         _4 = const std::intrinsics::count_code_region(const 0u32) -> bb7; // scope 0 at $DIR/instrument_coverage.rs:9:1: 15:2\n++         _4 = const std::intrinsics::count_code_region(const 0_u32) -> bb7; // scope 0 at $DIR/instrument_coverage.rs:9:1: 15:2\n +                                          // ty::Const\n +                                          // + ty: unsafe extern \"rust-intrinsic\" fn(u32) {std::intrinsics::count_code_region}\n +                                          // + val: Value(Scalar(<ZST>))"}, {"sha": "403555964ca15310fabcc122544ecdcf9e615fa7", "filename": "src/test/mir-opt/issue-41697/32bit/rustc.{{impl}}-{{constant}}.SimplifyCfg-qualify-consts.after.mir", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fissue-41697%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fissue-41697%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41697%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -5,7 +5,20 @@\n     let mut _1: (usize, bool);           // in scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n \n     bb0: {\n-        _1 = CheckedAdd(const 1usize, const 1usize); // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        _1 = CheckedAdd(const 1_usize, const 1_usize); // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41697.rs:18:19: 18:20\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41697.rs:18:21: 18:22\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n+        assert(!move (_1.1: bool), \"attempt to compute `{} + {}` which would overflow\", const 1_usize, const 1_usize) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x00000001))\n@@ -18,7 +31,6 @@\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41697.rs:18:21: 18:22\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n-        assert(!move (_1.1: bool), \"attempt to add with overflow\") -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n \n     bb1 (cleanup): {"}, {"sha": "df933d3ac251f21a8016869ca0d26c7ce1b293b8", "filename": "src/test/mir-opt/issue-41697/64bit/rustc.{{impl}}-{{constant}}.SimplifyCfg-qualify-consts.after.mir", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fissue-41697%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fissue-41697%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41697%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -5,7 +5,20 @@\n     let mut _1: (usize, bool);           // in scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n \n     bb0: {\n-        _1 = CheckedAdd(const 1usize, const 1usize); // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        _1 = CheckedAdd(const 1_usize, const 1_usize); // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x0000000000000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41697.rs:18:19: 18:20\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x0000000000000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41697.rs:18:21: 18:22\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n+        assert(!move (_1.1: bool), \"attempt to compute `{} + {}` which would overflow\", const 1_usize, const 1_usize) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000001))\n@@ -18,7 +31,6 @@\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41697.rs:18:21: 18:22\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n-        assert(!move (_1.1: bool), \"attempt to add with overflow\") -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n \n     bb1 (cleanup): {"}, {"sha": "76ad865bcc842ef5e7b3fd91a207d03cefca2303", "filename": "src/test/mir-opt/issue-41888/rustc.main.ElaborateDrops.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fissue-41888%2Frustc.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fissue-41888%2Frustc.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41888%2Frustc.main.ElaborateDrops.after.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -96,7 +96,7 @@ fn main() -> () {\n     bb8: {\n         StorageDead(_3);                 // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n         _5 = discriminant(_1);           // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n-        switchInt(move _5) -> [0isize: bb10, otherwise: bb9]; // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n+        switchInt(move _5) -> [0_isize: bb10, otherwise: bb9]; // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n     }\n \n     bb9: {\n@@ -250,7 +250,7 @@ fn main() -> () {\n \n     bb20: {\n         _10 = discriminant(_1);          // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-        switchInt(move _10) -> [0isize: bb15, otherwise: bb18]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        switchInt(move _10) -> [0_isize: bb15, otherwise: bb18]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n     bb21: {\n@@ -259,7 +259,7 @@ fn main() -> () {\n \n     bb22 (cleanup): {\n         _11 = discriminant(_1);          // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-        switchInt(move _11) -> [0isize: bb17, otherwise: bb19]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        switchInt(move _11) -> [0_isize: bb17, otherwise: bb19]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n     bb23 (cleanup): {"}, {"sha": "f65b93a34da65a918c2e68a3d24ec966fb3181b5", "filename": "src/test/mir-opt/issue-49232/rustc.main.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fissue-49232%2Frustc.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fissue-49232%2Frustc.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-49232%2Frustc.main.mir_map.0.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -58,7 +58,7 @@ fn main() -> () {\n     }\n \n     bb7: {\n-        _2 = const 4i32;                 // scope 0 at $DIR/issue-49232.rs:9:26: 9:27\n+        _2 = const 4_i32;                // scope 0 at $DIR/issue-49232.rs:9:26: 9:27\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000004))"}, {"sha": "56916d676ed44c0509b8e3e0c9d895e1b6d70008", "filename": "src/test/mir-opt/issue-62289/rustc.test.ElaborateDrops.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fissue-62289%2Frustc.test.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fissue-62289%2Frustc.test.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-62289%2Frustc.test.ElaborateDrops.before.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -46,7 +46,7 @@ fn test() -> std::option::Option<std::boxed::Box<u32>> {\n     bb2: {\n         StorageDead(_4);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n         _5 = discriminant(_3);           // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        switchInt(move _5) -> [0isize: bb4, 1isize: bb6, otherwise: bb5]; // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        switchInt(move _5) -> [0_isize: bb4, 1_isize: bb6, otherwise: bb5]; // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n     }\n \n     bb3 (cleanup): {"}, {"sha": "9f8810e752cb305e5e52750cc0b9e30a80c52c9f", "filename": "src/test/mir-opt/issue-72181/32bit/rustc.foo.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fissue-72181%2F32bit%2Frustc.foo.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fissue-72181%2F32bit%2Frustc.foo.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181%2F32bit%2Frustc.foo.mir_map.0.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -9,7 +9,7 @@ fn foo(_1: [(Never, u32); 1]) -> u32 {\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n-        _2 = const 0usize;               // scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n+        _2 = const 0_usize;              // scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x00000000))"}, {"sha": "e3fb5eb193ae961ee6ae4af5c6491a3011829889", "filename": "src/test/mir-opt/issue-72181/32bit/rustc.main.mir_map.0.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fissue-72181%2F32bit%2Frustc.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fissue-72181%2F32bit%2Frustc.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181%2F32bit%2Frustc.main.mir_map.0.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -39,15 +39,15 @@ fn main() -> () {\n         StorageDead(_1);                 // scope 0 at $DIR/issue-72181.rs:24:34: 24:35\n         StorageLive(_2);                 // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n         StorageLive(_3);                 // scope 1 at $DIR/issue-72181.rs:26:14: 26:27\n-        _3 = Foo { a: const 42u64 };     // scope 1 at $DIR/issue-72181.rs:26:14: 26:27\n+        _3 = Foo { a: const 42_u64 };    // scope 1 at $DIR/issue-72181.rs:26:14: 26:27\n                                          // ty::Const\n                                          // + ty: u64\n                                          // + val: Value(Scalar(0x000000000000002a))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-72181.rs:26:23: 26:25\n                                          // + literal: Const { ty: u64, val: Value(Scalar(0x000000000000002a)) }\n         StorageLive(_4);                 // scope 1 at $DIR/issue-72181.rs:26:29: 26:42\n-        _4 = Foo { a: const 10u64 };     // scope 1 at $DIR/issue-72181.rs:26:29: 26:42\n+        _4 = Foo { a: const 10_u64 };    // scope 1 at $DIR/issue-72181.rs:26:29: 26:42\n                                          // ty::Const\n                                          // + ty: u64\n                                          // + val: Value(Scalar(0x000000000000000a))\n@@ -60,7 +60,7 @@ fn main() -> () {\n         FakeRead(ForLet, _2);            // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n         StorageLive(_5);                 // scope 2 at $DIR/issue-72181.rs:27:13: 27:30\n         StorageLive(_6);                 // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n-        _6 = const 0usize;               // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n+        _6 = const 0_usize;              // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x00000000))"}, {"sha": "aab8efb415c69c4110b160b1feaa8bd380e9ed69", "filename": "src/test/mir-opt/issue-72181/64bit/rustc.foo.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fissue-72181%2F64bit%2Frustc.foo.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fissue-72181%2F64bit%2Frustc.foo.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181%2F64bit%2Frustc.foo.mir_map.0.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -9,7 +9,7 @@ fn foo(_1: [(Never, u32); 1]) -> u32 {\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n-        _2 = const 0usize;               // scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n+        _2 = const 0_usize;              // scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000000))"}, {"sha": "d9e791b86bc2b203e0c690c6dfa338c2066373e2", "filename": "src/test/mir-opt/issue-72181/64bit/rustc.main.mir_map.0.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fissue-72181%2F64bit%2Frustc.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fissue-72181%2F64bit%2Frustc.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181%2F64bit%2Frustc.main.mir_map.0.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -39,15 +39,15 @@ fn main() -> () {\n         StorageDead(_1);                 // scope 0 at $DIR/issue-72181.rs:24:34: 24:35\n         StorageLive(_2);                 // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n         StorageLive(_3);                 // scope 1 at $DIR/issue-72181.rs:26:14: 26:27\n-        _3 = Foo { a: const 42u64 };     // scope 1 at $DIR/issue-72181.rs:26:14: 26:27\n+        _3 = Foo { a: const 42_u64 };    // scope 1 at $DIR/issue-72181.rs:26:14: 26:27\n                                          // ty::Const\n                                          // + ty: u64\n                                          // + val: Value(Scalar(0x000000000000002a))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-72181.rs:26:23: 26:25\n                                          // + literal: Const { ty: u64, val: Value(Scalar(0x000000000000002a)) }\n         StorageLive(_4);                 // scope 1 at $DIR/issue-72181.rs:26:29: 26:42\n-        _4 = Foo { a: const 10u64 };     // scope 1 at $DIR/issue-72181.rs:26:29: 26:42\n+        _4 = Foo { a: const 10_u64 };    // scope 1 at $DIR/issue-72181.rs:26:29: 26:42\n                                          // ty::Const\n                                          // + ty: u64\n                                          // + val: Value(Scalar(0x000000000000000a))\n@@ -60,7 +60,7 @@ fn main() -> () {\n         FakeRead(ForLet, _2);            // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n         StorageLive(_5);                 // scope 2 at $DIR/issue-72181.rs:27:13: 27:30\n         StorageLive(_6);                 // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n-        _6 = const 0usize;               // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n+        _6 = const 0_usize;              // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000000))"}, {"sha": "e699abf421d6074b08d99b550f1a00e446d1481b", "filename": "src/test/mir-opt/loop_test/rustc.main.SimplifyCfg-qualify-consts.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Floop_test%2Frustc.main.SimplifyCfg-qualify-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Floop_test%2Frustc.main.SimplifyCfg-qualify-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test%2Frustc.main.SimplifyCfg-qualify-consts.after.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -67,7 +67,7 @@ fn main() -> () {\n \n     bb6: {\n         StorageLive(_6);                 // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n-        _6 = const 1i32;                 // scope 0 at $DIR/loop_test.rs:14:17: 14:18\n+        _6 = const 1_i32;                // scope 0 at $DIR/loop_test.rs:14:17: 14:18\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))"}, {"sha": "c6832f21208d4d8b86179aa27c1c47b9df04ed23", "filename": "src/test/mir-opt/match-arm-scopes/rustc.complicated_match.ElaborateDrops.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.ElaborateDrops.after.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -54,7 +54,7 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n     }\n \n     bb5: {\n-        _0 = const 1i32;                 // scope 1 at $DIR/match-arm-scopes.rs:16:77: 16:78\n+        _0 = const 1_i32;                // scope 1 at $DIR/match-arm-scopes.rs:16:77: 16:78\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))\n@@ -82,7 +82,7 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n     }\n \n     bb8: {\n-        _0 = const 3i32;                 // scope 0 at $DIR/match-arm-scopes.rs:16:59: 16:60\n+        _0 = const 3_i32;                // scope 0 at $DIR/match-arm-scopes.rs:16:59: 16:60\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000003))\n@@ -142,7 +142,7 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n     }\n \n     bb16: {\n-        _0 = const 3i32;                 // scope 0 at $DIR/match-arm-scopes.rs:16:59: 16:60\n+        _0 = const 3_i32;                // scope 0 at $DIR/match-arm-scopes.rs:16:59: 16:60\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000003))\n@@ -181,7 +181,7 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n     }\n \n     bb20: {\n-        _0 = const 2i32;                 // scope 2 at $DIR/match-arm-scopes.rs:17:41: 17:42\n+        _0 = const 2_i32;                // scope 2 at $DIR/match-arm-scopes.rs:17:41: 17:42\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000002))"}, {"sha": "45f7e91d097c042a195c8a14fc021b44beed98a7", "filename": "src/test/mir-opt/match-arm-scopes/rustc.complicated_match.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.SimplifyCfg-initial.after.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -67,7 +67,7 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n     }\n \n     bb8: {\n-        _0 = const 1i32;                 // scope 1 at $DIR/match-arm-scopes.rs:16:77: 16:78\n+        _0 = const 1_i32;                // scope 1 at $DIR/match-arm-scopes.rs:16:77: 16:78\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))\n@@ -102,7 +102,7 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n     }\n \n     bb12: {\n-        _0 = const 3i32;                 // scope 0 at $DIR/match-arm-scopes.rs:16:59: 16:60\n+        _0 = const 3_i32;                // scope 0 at $DIR/match-arm-scopes.rs:16:59: 16:60\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000003))\n@@ -173,7 +173,7 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n     }\n \n     bb21: {\n-        _0 = const 3i32;                 // scope 0 at $DIR/match-arm-scopes.rs:16:59: 16:60\n+        _0 = const 3_i32;                // scope 0 at $DIR/match-arm-scopes.rs:16:59: 16:60\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000003))\n@@ -216,7 +216,7 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n     }\n \n     bb25: {\n-        _0 = const 2i32;                 // scope 2 at $DIR/match-arm-scopes.rs:17:41: 17:42\n+        _0 = const 2_i32;                // scope 2 at $DIR/match-arm-scopes.rs:17:41: 17:42\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000002))"}, {"sha": "d4a2afe2957818b7ebe875b60d93133a5826d23b", "filename": "src/test/mir-opt/match_false_edges/rustc.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -26,7 +26,7 @@ fn full_tested_match() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n         StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n-        _2 = std::option::Option::<i32>::Some(const 42i32); // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n+        _2 = std::option::Option::<i32>::Some(const 42_i32); // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x0000002a))\n@@ -35,15 +35,15 @@ fn full_tested_match() -> () {\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n-        switchInt(move _3) -> [0isize: bb2, 1isize: bb3, otherwise: bb5]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n+        switchInt(move _3) -> [0_isize: bb2, 1_isize: bb3, otherwise: bb5]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n     }\n \n     bb1 (cleanup): {\n         resume;                          // scope 0 at $DIR/match_false_edges.rs:14:1: 20:2\n     }\n \n     bb2: {\n-        _1 = (const 3i32, const 3i32);   // scope 0 at $DIR/match_false_edges.rs:18:17: 18:23\n+        _1 = (const 3_i32, const 3_i32); // scope 0 at $DIR/match_false_edges.rs:18:17: 18:23\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000003))\n@@ -104,7 +104,7 @@ fn full_tested_match() -> () {\n         _5 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n         StorageLive(_8);                 // scope 2 at $DIR/match_false_edges.rs:16:35: 16:36\n         _8 = _5;                         // scope 2 at $DIR/match_false_edges.rs:16:35: 16:36\n-        _1 = (const 1i32, move _8);      // scope 2 at $DIR/match_false_edges.rs:16:31: 16:37\n+        _1 = (const 1_i32, move _8);     // scope 2 at $DIR/match_false_edges.rs:16:31: 16:37\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))\n@@ -128,7 +128,7 @@ fn full_tested_match() -> () {\n         _9 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:17:14: 17:15\n         StorageLive(_10);                // scope 3 at $DIR/match_false_edges.rs:17:24: 17:25\n         _10 = _9;                        // scope 3 at $DIR/match_false_edges.rs:17:24: 17:25\n-        _1 = (const 2i32, move _10);     // scope 3 at $DIR/match_false_edges.rs:17:20: 17:26\n+        _1 = (const 2_i32, move _10);    // scope 3 at $DIR/match_false_edges.rs:17:20: 17:26\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000002))"}, {"sha": "f1744a94fdc132ca7e8830406831a731a0e9b01c", "filename": "src/test/mir-opt/match_false_edges/rustc.full_tested_match2.PromoteTemps.before.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match2.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match2.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match2.PromoteTemps.before.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -25,7 +25,7 @@ fn full_tested_match2() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n         StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n-        _2 = std::option::Option::<i32>::Some(const 42i32); // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n+        _2 = std::option::Option::<i32>::Some(const 42_i32); // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x0000002a))\n@@ -34,7 +34,7 @@ fn full_tested_match2() -> () {\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n         _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n-        switchInt(move _3) -> [0isize: bb2, 1isize: bb3, otherwise: bb5]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n+        switchInt(move _3) -> [0_isize: bb2, 1_isize: bb3, otherwise: bb5]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n     }\n \n     bb1 (cleanup): {\n@@ -54,7 +54,7 @@ fn full_tested_match2() -> () {\n         _9 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:29:14: 29:15\n         StorageLive(_10);                // scope 3 at $DIR/match_false_edges.rs:29:24: 29:25\n         _10 = _9;                        // scope 3 at $DIR/match_false_edges.rs:29:24: 29:25\n-        _1 = (const 2i32, move _10);     // scope 3 at $DIR/match_false_edges.rs:29:20: 29:26\n+        _1 = (const 2_i32, move _10);    // scope 3 at $DIR/match_false_edges.rs:29:20: 29:26\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000002))\n@@ -96,7 +96,7 @@ fn full_tested_match2() -> () {\n         _5 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n         StorageLive(_8);                 // scope 2 at $DIR/match_false_edges.rs:27:35: 27:36\n         _8 = _5;                         // scope 2 at $DIR/match_false_edges.rs:27:35: 27:36\n-        _1 = (const 1i32, move _8);      // scope 2 at $DIR/match_false_edges.rs:27:31: 27:37\n+        _1 = (const 1_i32, move _8);     // scope 2 at $DIR/match_false_edges.rs:27:31: 27:37\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))\n@@ -116,7 +116,7 @@ fn full_tested_match2() -> () {\n     }\n \n     bb10: {\n-        _1 = (const 3i32, const 3i32);   // scope 0 at $DIR/match_false_edges.rs:28:17: 28:23\n+        _1 = (const 3_i32, const 3_i32); // scope 0 at $DIR/match_false_edges.rs:28:17: 28:23\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000003))"}, {"sha": "4ab4c4d341e2fc3f466fa1dbc674bc55d8bd045a", "filename": "src/test/mir-opt/match_false_edges/rustc.main.PromoteTemps.before.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.main.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.main.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.main.PromoteTemps.before.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -36,7 +36,7 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n         StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n-        _2 = std::option::Option::<i32>::Some(const 1i32); // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n+        _2 = std::option::Option::<i32>::Some(const 1_i32); // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))\n@@ -45,7 +45,7 @@ fn main() -> () {\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         _4 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n-        switchInt(move _4) -> [1isize: bb3, otherwise: bb2]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n+        switchInt(move _4) -> [1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n     }\n \n     bb1 (cleanup): {\n@@ -63,7 +63,7 @@ fn main() -> () {\n     bb4: {\n         StorageLive(_14);                // scope 0 at $DIR/match_false_edges.rs:39:9: 39:11\n         _14 = _2;                        // scope 0 at $DIR/match_false_edges.rs:39:9: 39:11\n-        _1 = const 4i32;                 // scope 5 at $DIR/match_false_edges.rs:39:15: 39:16\n+        _1 = const 4_i32;                // scope 5 at $DIR/match_false_edges.rs:39:15: 39:16\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000004))\n@@ -102,7 +102,7 @@ fn main() -> () {\n         FakeRead(ForGuardBinding, _7);   // scope 0 at $DIR/match_false_edges.rs:36:27: 36:28\n         StorageLive(_6);                 // scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n         _6 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n-        _1 = const 1i32;                 // scope 2 at $DIR/match_false_edges.rs:36:32: 36:33\n+        _1 = const 1_i32;                // scope 2 at $DIR/match_false_edges.rs:36:32: 36:33\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))\n@@ -123,7 +123,7 @@ fn main() -> () {\n     bb10: {\n         StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n         _9 = _2;                         // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n-        _1 = const 2i32;                 // scope 3 at $DIR/match_false_edges.rs:37:15: 37:16\n+        _1 = const 2_i32;                // scope 3 at $DIR/match_false_edges.rs:37:15: 37:16\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000002))\n@@ -161,7 +161,7 @@ fn main() -> () {\n         FakeRead(ForGuardBinding, _11);  // scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n         StorageLive(_10);                // scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n         _10 = ((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n-        _1 = const 3i32;                 // scope 4 at $DIR/match_false_edges.rs:38:33: 38:34\n+        _1 = const 3_i32;                // scope 4 at $DIR/match_false_edges.rs:38:33: 38:34\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000003))"}, {"sha": "ef6c88d8005b3dbce79565c634cbc8f4d77fbcf9", "filename": "src/test/mir-opt/match_test/rustc.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fmatch_test%2Frustc.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fmatch_test%2Frustc.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_test%2Frustc.main.SimplifyCfg-initial.after.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -20,7 +20,7 @@ fn main() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/match_test.rs:7:9: 7:10\n-        _1 = const 3i32;                 // scope 0 at $DIR/match_test.rs:7:13: 7:14\n+        _1 = const 3_i32;                // scope 0 at $DIR/match_test.rs:7:13: 7:14\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000003))\n@@ -39,7 +39,7 @@ fn main() -> () {\n         FakeRead(ForLet, _2);            // scope 1 at $DIR/match_test.rs:8:9: 8:10\n         StorageLive(_3);                 // scope 2 at $DIR/match_test.rs:12:5: 17:6\n         FakeRead(ForMatchedPlace, _1);   // scope 2 at $DIR/match_test.rs:12:11: 12:12\n-        _6 = Le(const 0i32, _1);         // scope 2 at $DIR/match_test.rs:13:9: 13:14\n+        _6 = Le(const 0_i32, _1);        // scope 2 at $DIR/match_test.rs:13:9: 13:14\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -50,7 +50,7 @@ fn main() -> () {\n     }\n \n     bb1: {\n-        _7 = Lt(_1, const 10i32);        // scope 2 at $DIR/match_test.rs:13:9: 13:14\n+        _7 = Lt(_1, const 10_i32);       // scope 2 at $DIR/match_test.rs:13:9: 13:14\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x0000000a))\n@@ -65,7 +65,7 @@ fn main() -> () {\n     }\n \n     bb3: {\n-        _3 = const 3i32;                 // scope 2 at $DIR/match_test.rs:16:14: 16:15\n+        _3 = const 3_i32;                // scope 2 at $DIR/match_test.rs:16:14: 16:15\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000003))\n@@ -76,7 +76,7 @@ fn main() -> () {\n     }\n \n     bb4: {\n-        _4 = Le(const 10i32, _1);        // scope 2 at $DIR/match_test.rs:14:9: 14:16\n+        _4 = Le(const 10_i32, _1);       // scope 2 at $DIR/match_test.rs:14:9: 14:16\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x0000000a))\n@@ -87,7 +87,7 @@ fn main() -> () {\n     }\n \n     bb5: {\n-        _5 = Le(_1, const 20i32);        // scope 2 at $DIR/match_test.rs:14:9: 14:16\n+        _5 = Le(_1, const 20_i32);       // scope 2 at $DIR/match_test.rs:14:9: 14:16\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000014))\n@@ -102,7 +102,7 @@ fn main() -> () {\n     }\n \n     bb7: {\n-        switchInt(_1) -> [-1i32: bb8, otherwise: bb3]; // scope 2 at $DIR/match_test.rs:15:9: 15:11\n+        switchInt(_1) -> [-1_i32: bb8, otherwise: bb3]; // scope 2 at $DIR/match_test.rs:15:9: 15:11\n     }\n \n     bb8: {\n@@ -119,7 +119,7 @@ fn main() -> () {\n     bb10: {\n         StorageDead(_9);                 // scope 2 at $DIR/match_test.rs:13:24: 13:25\n         FakeRead(ForMatchGuard, _8);     // scope 2 at $DIR/match_test.rs:13:18: 13:19\n-        _3 = const 0i32;                 // scope 2 at $DIR/match_test.rs:13:23: 13:24\n+        _3 = const 0_i32;                // scope 2 at $DIR/match_test.rs:13:23: 13:24\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -135,7 +135,7 @@ fn main() -> () {\n     }\n \n     bb12: {\n-        _3 = const 1i32;                 // scope 2 at $DIR/match_test.rs:14:20: 14:21\n+        _3 = const 1_i32;                // scope 2 at $DIR/match_test.rs:14:20: 14:21\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))\n@@ -146,7 +146,7 @@ fn main() -> () {\n     }\n \n     bb13: {\n-        _3 = const 2i32;                 // scope 2 at $DIR/match_test.rs:15:15: 15:16\n+        _3 = const 2_i32;                // scope 2 at $DIR/match_test.rs:15:15: 15:16\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000002))"}, {"sha": "ce987a57d5fc7b3854d11bb7ad660633ef48ab64", "filename": "src/test/mir-opt/no-drop-for-inactive-variant/rustc.unwrap.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fno-drop-for-inactive-variant%2Frustc.unwrap.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fno-drop-for-inactive-variant%2Frustc.unwrap.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno-drop-for-inactive-variant%2Frustc.unwrap.SimplifyCfg-elaborate-drops.after.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -14,7 +14,7 @@ fn unwrap(_1: std::option::Option<T>) -> T {\n \n     bb0: {\n         _2 = discriminant(_1);           // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:9: 9:16\n-        switchInt(move _2) -> [0isize: bb2, 1isize: bb4, otherwise: bb3]; // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:9: 9:16\n+        switchInt(move _2) -> [0_isize: bb2, 1_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:9: 9:16\n     }\n \n     bb1 (cleanup): {"}, {"sha": "18fbffb463067b4fbbce55941619f35e18078bd0", "filename": "src/test/mir-opt/nrvo-simple/rustc.nrvo.RenameReturnPlace.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fnrvo-simple%2Frustc.nrvo.RenameReturnPlace.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fnrvo-simple%2Frustc.nrvo.RenameReturnPlace.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnrvo-simple%2Frustc.nrvo.RenameReturnPlace.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -17,8 +17,8 @@\n   \n       bb0: {\n -         StorageLive(_2);                 // scope 0 at $DIR/nrvo-simple.rs:3:9: 3:16\n--         _2 = [const 0u8; 1024];          // scope 0 at $DIR/nrvo-simple.rs:3:19: 3:28\n-+         _0 = [const 0u8; 1024];          // scope 0 at $DIR/nrvo-simple.rs:3:19: 3:28\n+-         _2 = [const 0_u8; 1024];         // scope 0 at $DIR/nrvo-simple.rs:3:19: 3:28\n++         _0 = [const 0_u8; 1024];         // scope 0 at $DIR/nrvo-simple.rs:3:19: 3:28\n                                            // ty::Const\n                                            // + ty: u8\n                                            // + val: Value(Scalar(0x00))"}, {"sha": "075c7647c671fc94e8cc1630809859a5c389e792", "filename": "src/test/mir-opt/packed-struct-drop-aligned/32bit/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -16,7 +16,7 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:9: 6:14\n         StorageLive(_2);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:24: 6:42\n         StorageLive(_3);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n-        _3 = Droppy(const 0usize);       // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n+        _3 = Droppy(const 0_usize);      // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x00000000))\n@@ -29,7 +29,7 @@ fn main() -> () {\n         StorageDead(_2);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:42: 6:43\n         StorageLive(_4);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:11: 7:29\n         StorageLive(_5);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n-        _5 = Droppy(const 0usize);       // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n+        _5 = Droppy(const 0_usize);      // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x00000000))"}, {"sha": "99a74b6b24f7fd5f4e913c6e245c5c9f88564f42", "filename": "src/test/mir-opt/packed-struct-drop-aligned/64bit/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -16,7 +16,7 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:9: 6:14\n         StorageLive(_2);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:24: 6:42\n         StorageLive(_3);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n-        _3 = Droppy(const 0usize);       // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n+        _3 = Droppy(const 0_usize);      // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000000))\n@@ -29,7 +29,7 @@ fn main() -> () {\n         StorageDead(_2);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:42: 6:43\n         StorageLive(_4);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:11: 7:29\n         StorageLive(_5);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n-        _5 = Droppy(const 0usize);       // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n+        _5 = Droppy(const 0_usize);      // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000000))"}, {"sha": "7fc209778703eeee0822a7c64c0ac9116e982046", "filename": "src/test/mir-opt/remove_fake_borrows/rustc.match_guard.CleanupNonCodegenStatements.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows%2Frustc.match_guard.CleanupNonCodegenStatements.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows%2Frustc.match_guard.CleanupNonCodegenStatements.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows%2Frustc.match_guard.CleanupNonCodegenStatements.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -16,11 +16,11 @@\n -         FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n +         nop;                             // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n           _3 = discriminant(_1);           // scope 0 at $DIR/remove_fake_borrows.rs:8:9: 8:16\n-          switchInt(move _3) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/remove_fake_borrows.rs:8:9: 8:16\n+          switchInt(move _3) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/remove_fake_borrows.rs:8:9: 8:16\n       }\n   \n       bb1: {\n-          _0 = const 1i32;                 // scope 0 at $DIR/remove_fake_borrows.rs:9:14: 9:15\n+          _0 = const 1_i32;                // scope 0 at $DIR/remove_fake_borrows.rs:9:14: 9:15\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000001))\n@@ -31,7 +31,7 @@\n       }\n   \n       bb2: {\n-          switchInt((*(*((_1 as Some).0: &&i32)))) -> [0i32: bb3, otherwise: bb1]; // scope 0 at $DIR/remove_fake_borrows.rs:8:14: 8:15\n+          switchInt((*(*((_1 as Some).0: &&i32)))) -> [0_i32: bb3, otherwise: bb1]; // scope 0 at $DIR/remove_fake_borrows.rs:8:14: 8:15\n       }\n   \n       bb3: {\n@@ -62,7 +62,7 @@\n +         nop;                             // scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n +         nop;                             // scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n +         nop;                             // scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n-          _0 = const 0i32;                 // scope 0 at $DIR/remove_fake_borrows.rs:8:25: 8:26\n+          _0 = const 0_i32;                // scope 0 at $DIR/remove_fake_borrows.rs:8:25: 8:26\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000000))"}, {"sha": "14a7f2d500542c6b1e6edd5ae9a95c7d948b95bc", "filename": "src/test/mir-opt/retag/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -56,7 +56,7 @@ fn main() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/retag.rs:30:9: 30:14\n-        _1 = const 0i32;                 // scope 0 at $DIR/retag.rs:30:17: 30:18\n+        _1 = const 0_i32;                // scope 0 at $DIR/retag.rs:30:17: 30:18\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -67,7 +67,7 @@ fn main() -> () {\n         StorageLive(_3);                 // scope 1 at $DIR/retag.rs:32:13: 32:14\n         StorageLive(_4);                 // scope 1 at $DIR/retag.rs:32:17: 32:24\n         StorageLive(_5);                 // scope 1 at $DIR/retag.rs:32:17: 32:24\n-        _5 = Test(const 0i32);           // scope 1 at $DIR/retag.rs:32:17: 32:24\n+        _5 = Test(const 0_i32);          // scope 1 at $DIR/retag.rs:32:17: 32:24\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -170,7 +170,7 @@ fn main() -> () {\n         StorageLive(_19);                // scope 7 at $DIR/retag.rs:47:5: 47:24\n         StorageLive(_20);                // scope 7 at $DIR/retag.rs:47:5: 47:12\n         StorageLive(_21);                // scope 7 at $DIR/retag.rs:47:5: 47:12\n-        _21 = Test(const 0i32);          // scope 7 at $DIR/retag.rs:47:5: 47:12\n+        _21 = Test(const 0_i32);         // scope 7 at $DIR/retag.rs:47:5: 47:12\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000000))"}, {"sha": "da3191554f0e067b88069b127875bdcaa1739a63", "filename": "src/test/mir-opt/simple-match/32bit/rustc.match_bool.mir_map.0.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimple-match%2F32bit%2Frustc.match_bool.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimple-match%2F32bit%2Frustc.match_bool.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple-match%2F32bit%2Frustc.match_bool.mir_map.0.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -18,7 +18,7 @@ fn match_bool(_1: bool) -> usize {\n     }\n \n     bb3: {\n-        _0 = const 20usize;              // scope 0 at $DIR/simple-match.rs:8:14: 8:16\n+        _0 = const 20_usize;             // scope 0 at $DIR/simple-match.rs:8:14: 8:16\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x00000014))\n@@ -29,7 +29,7 @@ fn match_bool(_1: bool) -> usize {\n     }\n \n     bb4: {\n-        _0 = const 10usize;              // scope 0 at $DIR/simple-match.rs:7:17: 7:19\n+        _0 = const 10_usize;             // scope 0 at $DIR/simple-match.rs:7:17: 7:19\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000a))"}, {"sha": "55b51a899bc507a33fe996a25a174cd98d66e7a0", "filename": "src/test/mir-opt/simple-match/64bit/rustc.match_bool.mir_map.0.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimple-match%2F64bit%2Frustc.match_bool.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimple-match%2F64bit%2Frustc.match_bool.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple-match%2F64bit%2Frustc.match_bool.mir_map.0.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -18,7 +18,7 @@ fn match_bool(_1: bool) -> usize {\n     }\n \n     bb3: {\n-        _0 = const 20usize;              // scope 0 at $DIR/simple-match.rs:8:14: 8:16\n+        _0 = const 20_usize;             // scope 0 at $DIR/simple-match.rs:8:14: 8:16\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000014))\n@@ -29,7 +29,7 @@ fn match_bool(_1: bool) -> usize {\n     }\n \n     bb4: {\n-        _0 = const 10usize;              // scope 0 at $DIR/simple-match.rs:7:17: 7:19\n+        _0 = const 10_usize;             // scope 0 at $DIR/simple-match.rs:7:17: 7:19\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x000000000000000a))"}, {"sha": "33a3403cada92e4524dfb7961f24f4c57f4ae83f", "filename": "src/test/mir-opt/simplify-arm-identity/32bit/rustc.main.SimplifyArmIdentity.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F32bit%2Frustc.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F32bit%2Frustc.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F32bit%2Frustc.main.SimplifyArmIdentity.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -19,7 +19,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/simplify-arm-identity.rs:18:9: 18:10\n-          ((_1 as Foo).0: u8) = const 0u8; // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n+          ((_1 as Foo).0: u8) = const 0_u8; // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n                                            // ty::Const\n                                            // + ty: u8\n                                            // + val: Value(Scalar(0x00))\n@@ -28,7 +28,7 @@\n                                            // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n           discriminant(_1) = 0;            // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n           StorageLive(_2);                 // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n-          _3 = const 0isize;               // scope 1 at $DIR/simplify-arm-identity.rs:20:9: 20:20\n+          _3 = const 0_isize;              // scope 1 at $DIR/simplify-arm-identity.rs:20:9: 20:20\n                                            // ty::Const\n                                            // + ty: isize\n                                            // + val: Value(Scalar(0x00000000))\n@@ -39,7 +39,7 @@\n       }\n   \n       bb1: {\n-          _2 = const Dst::Foo(0u8);        // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n+          _2 = const Dst::Foo(0_u8);       // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n                                            // ty::Const\n                                            // + ty: Dst\n                                            // + val: Value(Scalar(0x00))"}, {"sha": "7e4fe1c2dcc4c9633ee1b755ab9f0e16cf8bdd62", "filename": "src/test/mir-opt/simplify-arm-identity/64bit/rustc.main.SimplifyArmIdentity.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F64bit%2Frustc.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F64bit%2Frustc.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F64bit%2Frustc.main.SimplifyArmIdentity.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -19,7 +19,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/simplify-arm-identity.rs:18:9: 18:10\n-          ((_1 as Foo).0: u8) = const 0u8; // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n+          ((_1 as Foo).0: u8) = const 0_u8; // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n                                            // ty::Const\n                                            // + ty: u8\n                                            // + val: Value(Scalar(0x00))\n@@ -28,7 +28,7 @@\n                                            // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n           discriminant(_1) = 0;            // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n           StorageLive(_2);                 // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n-          _3 = const 0isize;               // scope 1 at $DIR/simplify-arm-identity.rs:20:9: 20:20\n+          _3 = const 0_isize;              // scope 1 at $DIR/simplify-arm-identity.rs:20:9: 20:20\n                                            // ty::Const\n                                            // + ty: isize\n                                            // + val: Value(Scalar(0x0000000000000000))\n@@ -39,7 +39,7 @@\n       }\n   \n       bb1: {\n-          _2 = const Dst::Foo(0u8);        // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n+          _2 = const Dst::Foo(0_u8);       // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n                                            // ty::Const\n                                            // + ty: Dst\n                                            // + val: Value(Scalar(0x00))"}, {"sha": "daae94e87f04461c053039d2a85c16c718c5a998", "filename": "src/test/mir-opt/simplify-arm/rustc.id.SimplifyArmIdentity.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id.SimplifyArmIdentity.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -13,7 +13,7 @@\n   \n       bb0: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/simplify-arm.rs:11:9: 11:16\n-          switchInt(move _2) -> [0isize: bb1, 1isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:11:9: 11:16\n+          switchInt(move _2) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:11:9: 11:16\n       }\n   \n       bb1: {"}, {"sha": "15bd5e7c9f0b02e23d2ddfdc4a3c55619a7b86be", "filename": "src/test/mir-opt/simplify-arm/rustc.id.SimplifyBranchSame.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id.SimplifyBranchSame.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -13,7 +13,7 @@\n   \n       bb0: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/simplify-arm.rs:11:9: 11:16\n-          switchInt(move _2) -> [0isize: bb1, 1isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:11:9: 11:16\n+          switchInt(move _2) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:11:9: 11:16\n       }\n   \n       bb1: {"}, {"sha": "37273d1d6517ba07c506201101f2ae1edcc2c1b9", "filename": "src/test/mir-opt/simplify-arm/rustc.id_result.SimplifyArmIdentity.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_result.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_result.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_result.SimplifyArmIdentity.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -18,7 +18,7 @@\n   \n       bb0: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/simplify-arm.rs:18:9: 18:14\n-          switchInt(move _2) -> [0isize: bb3, 1isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:18:9: 18:14\n+          switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:18:9: 18:14\n       }\n   \n       bb1: {"}, {"sha": "f138d637435f8b8e39ef0ff81e8499ce3a88631a", "filename": "src/test/mir-opt/simplify-arm/rustc.id_result.SimplifyBranchSame.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_result.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_result.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_result.SimplifyBranchSame.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -18,7 +18,7 @@\n   \n       bb0: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/simplify-arm.rs:18:9: 18:14\n-          switchInt(move _2) -> [0isize: bb3, 1isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:18:9: 18:14\n+          switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:18:9: 18:14\n       }\n   \n       bb1: {"}, {"sha": "b46ca21fb90b3015b5c73f0d9dc990c8e4d04962", "filename": "src/test/mir-opt/simplify-arm/rustc.id_try.SimplifyArmIdentity.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_try.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_try.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_try.SimplifyArmIdentity.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -45,7 +45,7 @@\n       bb1: {\n           StorageDead(_4);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n           _5 = discriminant(_3);           // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-          switchInt(move _5) -> [0isize: bb2, 1isize: bb4, otherwise: bb3]; // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+          switchInt(move _5) -> [0_isize: bb2, 1_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n       }\n   \n       bb2: {"}, {"sha": "93412d1a74f8ab088a611823bb1ce745d0718f8b", "filename": "src/test/mir-opt/simplify-arm/rustc.id_try.SimplifyBranchSame.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_try.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_try.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_try.SimplifyBranchSame.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -45,7 +45,7 @@\n       bb1: {\n           StorageDead(_4);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n           _5 = discriminant(_3);           // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-          switchInt(move _5) -> [0isize: bb2, 1isize: bb4, otherwise: bb3]; // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+          switchInt(move _5) -> [0_isize: bb2, 1_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n       }\n   \n       bb2: {"}, {"sha": "720296a2c66b0c9bcde98f0bd05c876482ee4f94", "filename": "src/test/mir-opt/simplify-locals-fixedpoint/rustc.foo.SimplifyLocals.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimplify-locals-fixedpoint%2Frustc.foo.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimplify-locals-fixedpoint%2Frustc.foo.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-fixedpoint%2Frustc.foo.SimplifyLocals.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -26,7 +26,7 @@\n           StorageDead(_3);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:68: 4:69\n           StorageDead(_2);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:68: 4:69\n           _5 = discriminant((_1.0: std::option::Option<u8>)); // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:13: 4:20\n-          switchInt(move _5) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:13: 4:20\n+          switchInt(move _5) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:13: 4:20\n       }\n   \n       bb1: {\n@@ -42,7 +42,7 @@\n   \n       bb2: {\n           _4 = discriminant((_1.1: std::option::Option<T>)); // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:22: 4:26\n-          switchInt(move _4) -> [0isize: bb3, otherwise: bb1]; // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:22: 4:26\n+          switchInt(move _4) -> [0_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:22: 4:26\n       }\n   \n       bb3: {\n@@ -51,7 +51,7 @@\n           StorageLive(_7);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:20\n           StorageLive(_8);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:13\n           _8 = _6;                         // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:13\n-          _7 = Gt(move _8, const 42u8);    // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:20\n+          _7 = Gt(move _8, const 42_u8);   // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:20\n                                            // ty::Const\n                                            // + ty: u8\n                                            // + val: Value(Scalar(0x2a))"}, {"sha": "db06b0392df6c3a4133b0393d2dbe6fc21588b0f", "filename": "src/test/mir-opt/simplify-locals-removes-unused-consts/rustc.main.SimplifyLocals.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts%2Frustc.main.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts%2Frustc.main.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts%2Frustc.main.SimplifyLocals.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -98,32 +98,32 @@\n -         StorageLive(_9);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:34\n -         StorageLive(_10);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n -         StorageLive(_11);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n--         _11 = const Temp { x: 40u8 };    // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n+-         _11 = const Temp { x: 40_u8 };   // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n +         StorageDead(_1);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:22: 14:23\n +         StorageLive(_2);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n-+         _2 = const use_u8(const 42u8) -> bb2; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n++         _2 = const use_u8(const 42_u8) -> bb2; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n                                            // ty::Const\n -                                          // + ty: Temp\n -                                          // + val: Value(Scalar(0x28))\n -                                          // mir::Constant\n -                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n -                                          // + literal: Const { ty: Temp, val: Value(Scalar(0x28)) }\n--         _10 = const 40u8;                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n+-         _10 = const 40_u8;               // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n -                                          // ty::Const\n -                                          // + ty: u8\n -                                          // + val: Value(Scalar(0x28))\n -                                          // mir::Constant\n -                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n -                                          // + literal: Const { ty: u8, val: Value(Scalar(0x28)) }\n--         _9 = const 42u8;                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:34\n+-         _9 = const 42_u8;                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:34\n -                                          // ty::Const\n -                                          // + ty: u8\n -                                          // + val: Value(Scalar(0x2a))\n -                                          // mir::Constant\n -                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:34\n -                                          // + literal: Const { ty: u8, val: Value(Scalar(0x2a)) }\n -         StorageDead(_10);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:33: 16:34\n--         _8 = const use_u8(const 42u8) -> bb2; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n+-         _8 = const use_u8(const 42_u8) -> bb2; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n -                                          // ty::Const\n                                            // + ty: fn(u8) {use_u8}\n                                            // + val: Value(Scalar(<ZST>))"}, {"sha": "f0b696118e9968680305e713291f76d3a5c2f5ed", "filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads/32bit/rustc.map.SimplifyLocals.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F32bit%2Frustc.map.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F32bit%2Frustc.map.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F32bit%2Frustc.map.SimplifyLocals.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -15,7 +15,7 @@\n   \n       bb0: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n-          switchInt(move _2) -> [0isize: bb2, otherwise: bb1]; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n       }\n   \n       bb1: {"}, {"sha": "1ac6eb85441f5ebe44d84762fe31985b71f01e8f", "filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads/64bit/rustc.map.SimplifyLocals.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F64bit%2Frustc.map.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F64bit%2Frustc.map.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F64bit%2Frustc.map.SimplifyLocals.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -15,7 +15,7 @@\n   \n       bb0: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n-          switchInt(move _2) -> [0isize: bb2, otherwise: bb1]; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n       }\n   \n       bb1: {"}, {"sha": "7f8366309c0896198a68e6392969bad7366d1bfd", "filename": "src/test/mir-opt/simplify_try/rustc.try_identity.SimplifyArmIdentity.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyArmIdentity.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -46,7 +46,7 @@\n           _3 = move _4;                    // scope 6 at $SRC_DIR/libcore/result.rs:LL:COL\n           StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n           _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-          switchInt(move _5) -> [0isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+          switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n       }\n   \n       bb1: {"}, {"sha": "aa416049f6613e298a2243b576554a19a78b2b00", "filename": "src/test/mir-opt/simplify_try_if_let/rustc.{{impl}}-append.SimplifyArmIdentity.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimplify_try_if_let%2Frustc.%7B%7Bimpl%7D%7D-append.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fsimplify_try_if_let%2Frustc.%7B%7Bimpl%7D%7D-append.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try_if_let%2Frustc.%7B%7Bimpl%7D%7D-append.SimplifyArmIdentity.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -26,7 +26,7 @@\n   \n       bb0: {\n           _3 = discriminant(((*_1).1: std::option::Option<std::ptr::NonNull<Node>>)); // scope 0 at $DIR/simplify_try_if_let.rs:22:13: 22:17\n-          switchInt(move _3) -> [0isize: bb3, 1isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try_if_let.rs:22:13: 22:17\n+          switchInt(move _3) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try_if_let.rs:22:13: 22:17\n       }\n   \n       bb1: {\n@@ -62,7 +62,7 @@\n       bb4: {\n           StorageDead(_6);                 // scope 1 at $DIR/simplify_try_if_let.rs:26:59: 26:60\n           _7 = discriminant(_5);           // scope 1 at $DIR/simplify_try_if_let.rs:26:24: 26:40\n-          switchInt(move _7) -> [1isize: bb6, otherwise: bb5]; // scope 1 at $DIR/simplify_try_if_let.rs:26:24: 26:40\n+          switchInt(move _7) -> [1_isize: bb6, otherwise: bb5]; // scope 1 at $DIR/simplify_try_if_let.rs:26:24: 26:40\n       }\n   \n       bb5: {"}, {"sha": "4a13ddb33b5deb498144f9607e2aece017eb060e", "filename": "src/test/mir-opt/slice-drop-shim/32bit/rustc.ptr-drop_in_place.[std__string__String].AddMovesForPackedDrops.before.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fslice-drop-shim%2F32bit%2Frustc.ptr-drop_in_place.%5Bstd__string__String%5D.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fslice-drop-shim%2F32bit%2Frustc.ptr-drop_in_place.%5Bstd__string__String%5D.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice-drop-shim%2F32bit%2Frustc.ptr-drop_in_place.%5Bstd__string__String%5D.AddMovesForPackedDrops.before.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -31,7 +31,7 @@ fn std::intrinsics::drop_in_place(_1: *mut [std::string::String]) -> () {\n \n     bb3 (cleanup): {\n         _5 = &raw mut (*_1)[_4];         // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _4 = Add(move _4, const 1usize); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _4 = Add(move _4, const 1_usize); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x00000001))\n@@ -48,7 +48,7 @@ fn std::intrinsics::drop_in_place(_1: *mut [std::string::String]) -> () {\n \n     bb5: {\n         _7 = &raw mut (*_1)[_4];         // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _4 = Add(move _4, const 1usize); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _4 = Add(move _4, const 1_usize); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x00000001))\n@@ -64,7 +64,7 @@ fn std::intrinsics::drop_in_place(_1: *mut [std::string::String]) -> () {\n     }\n \n     bb7: {\n-        _4 = const 0usize;               // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _4 = const 0_usize;              // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x00000000))\n@@ -80,7 +80,7 @@ fn std::intrinsics::drop_in_place(_1: *mut [std::string::String]) -> () {\n \n     bb9 (cleanup): {\n         _11 = _9;                        // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _9 = Offset(move _9, const 1usize); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _9 = Offset(move _9, const 1_usize); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x00000001))\n@@ -97,7 +97,7 @@ fn std::intrinsics::drop_in_place(_1: *mut [std::string::String]) -> () {\n \n     bb11: {\n         _13 = _9;                        // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _9 = Offset(move _9, const 1usize); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _9 = Offset(move _9, const 1_usize); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x00000001))\n@@ -126,6 +126,6 @@ fn std::intrinsics::drop_in_place(_1: *mut [std::string::String]) -> () {\n     bb15: {\n         _2 = SizeOf(std::string::String); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n         _3 = Len((*_1));                 // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        switchInt(move _2) -> [0usize: bb8, otherwise: bb14]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        switchInt(move _2) -> [0_usize: bb8, otherwise: bb14]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n }"}, {"sha": "9968c57c237865854579d8fc04ae8af3a66a6931", "filename": "src/test/mir-opt/slice-drop-shim/64bit/rustc.ptr-drop_in_place.[std__string__String].AddMovesForPackedDrops.before.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fslice-drop-shim%2F64bit%2Frustc.ptr-drop_in_place.%5Bstd__string__String%5D.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fslice-drop-shim%2F64bit%2Frustc.ptr-drop_in_place.%5Bstd__string__String%5D.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice-drop-shim%2F64bit%2Frustc.ptr-drop_in_place.%5Bstd__string__String%5D.AddMovesForPackedDrops.before.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -31,7 +31,7 @@ fn std::intrinsics::drop_in_place(_1: *mut [std::string::String]) -> () {\n \n     bb3 (cleanup): {\n         _5 = &raw mut (*_1)[_4];         // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _4 = Add(move _4, const 1usize); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _4 = Add(move _4, const 1_usize); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000001))\n@@ -48,7 +48,7 @@ fn std::intrinsics::drop_in_place(_1: *mut [std::string::String]) -> () {\n \n     bb5: {\n         _7 = &raw mut (*_1)[_4];         // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _4 = Add(move _4, const 1usize); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _4 = Add(move _4, const 1_usize); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000001))\n@@ -64,7 +64,7 @@ fn std::intrinsics::drop_in_place(_1: *mut [std::string::String]) -> () {\n     }\n \n     bb7: {\n-        _4 = const 0usize;               // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _4 = const 0_usize;              // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000000))\n@@ -80,7 +80,7 @@ fn std::intrinsics::drop_in_place(_1: *mut [std::string::String]) -> () {\n \n     bb9 (cleanup): {\n         _11 = _9;                        // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _9 = Offset(move _9, const 1usize); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _9 = Offset(move _9, const 1_usize); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000001))\n@@ -97,7 +97,7 @@ fn std::intrinsics::drop_in_place(_1: *mut [std::string::String]) -> () {\n \n     bb11: {\n         _13 = _9;                        // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _9 = Offset(move _9, const 1usize); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _9 = Offset(move _9, const 1_usize); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000001))\n@@ -126,6 +126,6 @@ fn std::intrinsics::drop_in_place(_1: *mut [std::string::String]) -> () {\n     bb15: {\n         _2 = SizeOf(std::string::String); // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n         _3 = Len((*_1));                 // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        switchInt(move _2) -> [0usize: bb8, otherwise: bb14]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        switchInt(move _2) -> [0_usize: bb8, otherwise: bb14]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n }"}, {"sha": "d7f73a22c26fd4ad03348d28a0f313a4c861cf0b", "filename": "src/test/mir-opt/storage_live_dead_in_statics/rustc.XXX.mir_map.0.mir", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics%2Frustc.XXX.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics%2Frustc.XXX.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics%2Frustc.XXX.mir_map.0.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -59,7 +59,7 @@ static XXX: &Foo = {\n         StorageLive(_5);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:7:11: 22:6\n         StorageLive(_6);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:7:12: 22:6\n         StorageLive(_7);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:8:9: 8:15\n-        _7 = (const 0u32, const 1u32);   // scope 0 at $DIR/storage_live_dead_in_statics.rs:8:9: 8:15\n+        _7 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:8:9: 8:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -73,7 +73,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:8:13: 8:14\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n         StorageLive(_8);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:8:17: 8:23\n-        _8 = (const 0u32, const 2u32);   // scope 0 at $DIR/storage_live_dead_in_statics.rs:8:17: 8:23\n+        _8 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:8:17: 8:23\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -87,7 +87,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:8:21: 8:22\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n         StorageLive(_9);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:8:25: 8:31\n-        _9 = (const 0u32, const 3u32);   // scope 0 at $DIR/storage_live_dead_in_statics.rs:8:25: 8:31\n+        _9 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:8:25: 8:31\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -101,7 +101,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:8:29: 8:30\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_10);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:9:9: 9:15\n-        _10 = (const 0u32, const 1u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:9:9: 9:15\n+        _10 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:9:9: 9:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -115,7 +115,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:9:13: 9:14\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n         StorageLive(_11);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:9:17: 9:23\n-        _11 = (const 0u32, const 2u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:9:17: 9:23\n+        _11 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:9:17: 9:23\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -129,7 +129,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:9:21: 9:22\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n         StorageLive(_12);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:9:25: 9:31\n-        _12 = (const 0u32, const 3u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:9:25: 9:31\n+        _12 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:9:25: 9:31\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -143,7 +143,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:9:29: 9:30\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_13);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:10:9: 10:15\n-        _13 = (const 0u32, const 1u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:10:9: 10:15\n+        _13 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:10:9: 10:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -157,7 +157,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:10:13: 10:14\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n         StorageLive(_14);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:10:17: 10:23\n-        _14 = (const 0u32, const 2u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:10:17: 10:23\n+        _14 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:10:17: 10:23\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -171,7 +171,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:10:21: 10:22\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n         StorageLive(_15);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:10:25: 10:31\n-        _15 = (const 0u32, const 3u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:10:25: 10:31\n+        _15 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:10:25: 10:31\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -185,7 +185,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:10:29: 10:30\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_16);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:11:9: 11:15\n-        _16 = (const 0u32, const 1u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:11:9: 11:15\n+        _16 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:11:9: 11:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -199,7 +199,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:11:13: 11:14\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n         StorageLive(_17);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:11:17: 11:23\n-        _17 = (const 0u32, const 2u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:11:17: 11:23\n+        _17 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:11:17: 11:23\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -213,7 +213,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:11:21: 11:22\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n         StorageLive(_18);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:11:25: 11:31\n-        _18 = (const 0u32, const 3u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:11:25: 11:31\n+        _18 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:11:25: 11:31\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -227,7 +227,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:11:29: 11:30\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_19);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:12:9: 12:15\n-        _19 = (const 0u32, const 1u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:12:9: 12:15\n+        _19 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:12:9: 12:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -241,7 +241,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:12:13: 12:14\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n         StorageLive(_20);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:12:17: 12:23\n-        _20 = (const 0u32, const 2u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:12:17: 12:23\n+        _20 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:12:17: 12:23\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -255,7 +255,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:12:21: 12:22\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n         StorageLive(_21);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:12:25: 12:31\n-        _21 = (const 0u32, const 3u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:12:25: 12:31\n+        _21 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:12:25: 12:31\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -269,7 +269,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:12:29: 12:30\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_22);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:13:9: 13:15\n-        _22 = (const 0u32, const 1u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:13:9: 13:15\n+        _22 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:13:9: 13:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -283,7 +283,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:13:13: 13:14\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n         StorageLive(_23);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:13:17: 13:23\n-        _23 = (const 0u32, const 2u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:13:17: 13:23\n+        _23 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:13:17: 13:23\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -297,7 +297,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:13:21: 13:22\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n         StorageLive(_24);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:13:25: 13:31\n-        _24 = (const 0u32, const 3u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:13:25: 13:31\n+        _24 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:13:25: 13:31\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -311,7 +311,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:13:29: 13:30\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_25);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:14:9: 14:15\n-        _25 = (const 0u32, const 1u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:14:9: 14:15\n+        _25 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:14:9: 14:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -325,7 +325,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:14:13: 14:14\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n         StorageLive(_26);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:14:17: 14:23\n-        _26 = (const 0u32, const 2u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:14:17: 14:23\n+        _26 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:14:17: 14:23\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -339,7 +339,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:14:21: 14:22\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n         StorageLive(_27);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:14:25: 14:31\n-        _27 = (const 0u32, const 3u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:14:25: 14:31\n+        _27 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:14:25: 14:31\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -353,7 +353,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:14:29: 14:30\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_28);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:15:9: 15:15\n-        _28 = (const 0u32, const 1u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:15:9: 15:15\n+        _28 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:15:9: 15:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -367,7 +367,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:15:13: 15:14\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n         StorageLive(_29);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:15:17: 15:23\n-        _29 = (const 0u32, const 2u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:15:17: 15:23\n+        _29 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:15:17: 15:23\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -381,7 +381,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:15:21: 15:22\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n         StorageLive(_30);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:15:25: 15:31\n-        _30 = (const 0u32, const 3u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:15:25: 15:31\n+        _30 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:15:25: 15:31\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -395,7 +395,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:15:29: 15:30\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_31);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:16:9: 16:15\n-        _31 = (const 0u32, const 1u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:16:9: 16:15\n+        _31 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:16:9: 16:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -409,7 +409,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:16:13: 16:14\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n         StorageLive(_32);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:16:17: 16:23\n-        _32 = (const 0u32, const 2u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:16:17: 16:23\n+        _32 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:16:17: 16:23\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -423,7 +423,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:16:21: 16:22\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n         StorageLive(_33);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:16:25: 16:31\n-        _33 = (const 0u32, const 3u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:16:25: 16:31\n+        _33 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:16:25: 16:31\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -437,7 +437,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:16:29: 16:30\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_34);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:17:9: 17:15\n-        _34 = (const 0u32, const 1u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:17:9: 17:15\n+        _34 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:17:9: 17:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -451,7 +451,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:17:13: 17:14\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n         StorageLive(_35);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:17:17: 17:23\n-        _35 = (const 0u32, const 2u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:17:17: 17:23\n+        _35 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:17:17: 17:23\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -465,7 +465,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:17:21: 17:22\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n         StorageLive(_36);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:17:25: 17:31\n-        _36 = (const 0u32, const 3u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:17:25: 17:31\n+        _36 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:17:25: 17:31\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -479,7 +479,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:17:29: 17:30\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_37);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:18:9: 18:15\n-        _37 = (const 0u32, const 1u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:18:9: 18:15\n+        _37 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:18:9: 18:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -493,7 +493,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:18:13: 18:14\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n         StorageLive(_38);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:18:17: 18:23\n-        _38 = (const 0u32, const 2u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:18:17: 18:23\n+        _38 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:18:17: 18:23\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -507,7 +507,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:18:21: 18:22\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n         StorageLive(_39);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:18:25: 18:31\n-        _39 = (const 0u32, const 3u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:18:25: 18:31\n+        _39 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:18:25: 18:31\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -521,7 +521,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:18:29: 18:30\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_40);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:19:9: 19:15\n-        _40 = (const 0u32, const 1u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:19:9: 19:15\n+        _40 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:19:9: 19:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -535,7 +535,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:19:13: 19:14\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n         StorageLive(_41);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:19:17: 19:23\n-        _41 = (const 0u32, const 2u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:19:17: 19:23\n+        _41 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:19:17: 19:23\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -549,7 +549,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:19:21: 19:22\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n         StorageLive(_42);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:19:25: 19:31\n-        _42 = (const 0u32, const 3u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:19:25: 19:31\n+        _42 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:19:25: 19:31\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -563,7 +563,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:19:29: 19:30\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_43);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:20:9: 20:15\n-        _43 = (const 0u32, const 1u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:20:9: 20:15\n+        _43 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:20:9: 20:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -577,7 +577,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:20:13: 20:14\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n         StorageLive(_44);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:20:17: 20:23\n-        _44 = (const 0u32, const 2u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:20:17: 20:23\n+        _44 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:20:17: 20:23\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -591,7 +591,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:20:21: 20:22\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n         StorageLive(_45);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:20:25: 20:31\n-        _45 = (const 0u32, const 3u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:20:25: 20:31\n+        _45 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:20:25: 20:31\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -605,7 +605,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:20:29: 20:30\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_46);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:21:9: 21:15\n-        _46 = (const 0u32, const 1u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:21:9: 21:15\n+        _46 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:21:9: 21:15\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -619,7 +619,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:21:13: 21:14\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n         StorageLive(_47);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:21:17: 21:23\n-        _47 = (const 0u32, const 2u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:21:17: 21:23\n+        _47 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:21:17: 21:23\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -633,7 +633,7 @@ static XXX: &Foo = {\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:21:21: 21:22\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n         StorageLive(_48);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:21:25: 21:31\n-        _48 = (const 0u32, const 3u32);  // scope 0 at $DIR/storage_live_dead_in_statics.rs:21:25: 21:31\n+        _48 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:21:25: 21:31\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x00000000))"}, {"sha": "099535c0ad279e4a2648d91fae6927288e43dde9", "filename": "src/test/mir-opt/storage_ranges/rustc.main.nll.0.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fstorage_ranges%2Frustc.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Fstorage_ranges%2Frustc.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_ranges%2Frustc.main.nll.0.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -38,7 +38,7 @@ fn main() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/storage_ranges.rs:4:9: 4:10\n-        _1 = const 0i32;                 // scope 0 at $DIR/storage_ranges.rs:4:13: 4:14\n+        _1 = const 0_i32;                // scope 0 at $DIR/storage_ranges.rs:4:13: 4:14\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000000))\n@@ -66,7 +66,7 @@ fn main() -> () {\n         StorageDead(_3);                 // scope 1 at $DIR/storage_ranges.rs:7:5: 7:6\n         StorageDead(_2);                 // scope 1 at $DIR/storage_ranges.rs:7:5: 7:6\n         StorageLive(_6);                 // scope 1 at $DIR/storage_ranges.rs:8:9: 8:10\n-        _6 = const 1i32;                 // scope 1 at $DIR/storage_ranges.rs:8:13: 8:14\n+        _6 = const 1_i32;                // scope 1 at $DIR/storage_ranges.rs:8:13: 8:14\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))"}, {"sha": "5ceca2d091e30fa88ae7c226d5e36ca932878f49", "filename": "src/test/mir-opt/tls-access/rustc.main.SimplifyCfg-final.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Ftls-access%2Frustc.main.SimplifyCfg-final.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Ftls-access%2Frustc.main.SimplifyCfg-final.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ftls-access%2Frustc.main.SimplifyCfg-final.after.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -18,7 +18,7 @@ fn main() -> () {\n         _1 = &(*_2);                     // scope 1 at $DIR/tls-access.rs:8:17: 8:21\n         StorageLive(_3);                 // scope 2 at $DIR/tls-access.rs:9:9: 9:12\n         _3 = &/*tls*/ mut FOO;           // scope 2 at $DIR/tls-access.rs:9:9: 9:12\n-        (*_3) = const 42u8;              // scope 2 at $DIR/tls-access.rs:9:9: 9:17\n+        (*_3) = const 42_u8;             // scope 2 at $DIR/tls-access.rs:9:9: 9:17\n                                          // ty::Const\n                                          // + ty: u8\n                                          // + val: Value(Scalar(0x2a))"}, {"sha": "eb40baa2000f8cd7aa8025029f43e8f40b46ce6d", "filename": "src/test/mir-opt/uniform_array_move_out/rustc.move_out_by_subslice.mir_map.0.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_by_subslice.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_by_subslice.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_by_subslice.mir_map.0.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -20,7 +20,7 @@ fn move_out_by_subslice() -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n         StorageLive(_3);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n         _3 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n-        (*_3) = const 1i32;              // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n+        (*_3) = const 1_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))\n@@ -48,7 +48,7 @@ fn move_out_by_subslice() -> () {\n         StorageLive(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n         StorageLive(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n         _5 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n-        (*_5) = const 2i32;              // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n+        (*_5) = const 2_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000002))"}, {"sha": "7beceb66577fe82ce1be0d36d7699ff1ea76794f", "filename": "src/test/mir-opt/uniform_array_move_out/rustc.move_out_from_end.mir_map.0.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_from_end.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_from_end.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_from_end.mir_map.0.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -20,7 +20,7 @@ fn move_out_from_end() -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n         StorageLive(_3);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n         _3 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n-        (*_3) = const 1i32;              // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n+        (*_3) = const 1_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))\n@@ -48,7 +48,7 @@ fn move_out_from_end() -> () {\n         StorageLive(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n         StorageLive(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n         _5 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n-        (*_5) = const 2i32;              // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n+        (*_5) = const 2_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000002))"}, {"sha": "4f4fb7defc3794f0708e84edef625911a9ee86f5", "filename": "src/test/mir-opt/uninhabited_enum_branching/rustc.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching%2Frustc.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching%2Frustc.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching%2Frustc.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -33,7 +33,7 @@ fn main() -> () {\n         StorageLive(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n         _7 = Test2::D;                   // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n         _8 = discriminant(_7);           // scope 0 at $DIR/uninhabited_enum_branching.rs:27:9: 27:17\n-        switchInt(move _8) -> [4isize: bb2, otherwise: bb1]; // scope 0 at $DIR/uninhabited_enum_branching.rs:27:9: 27:17\n+        switchInt(move _8) -> [4_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/uninhabited_enum_branching.rs:27:9: 27:17\n     }\n \n     bb1: {"}, {"sha": "d262c9432ca833b6ee209844603536218a6055da", "filename": "src/test/mir-opt/uninhabited_enum_branching/rustc.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching%2Frustc.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching%2Frustc.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching%2Frustc.main.UninhabitedEnumBranching.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -18,7 +18,7 @@\n           StorageLive(_2);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n           _2 = Test1::C;                   // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n           _3 = discriminant(_2);           // scope 0 at $DIR/uninhabited_enum_branching.rs:21:9: 21:20\n--         switchInt(move _3) -> [0isize: bb2, 1isize: bb3, otherwise: bb1]; // scope 0 at $DIR/uninhabited_enum_branching.rs:21:9: 21:20\n+-         switchInt(move _3) -> [0_isize: bb2, 1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/uninhabited_enum_branching.rs:21:9: 21:20\n +         switchInt(move _3) -> bb1;       // scope 0 at $DIR/uninhabited_enum_branching.rs:21:9: 21:20\n       }\n   \n@@ -68,7 +68,7 @@\n           StorageLive(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n           _7 = Test2::D;                   // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n           _8 = discriminant(_7);           // scope 0 at $DIR/uninhabited_enum_branching.rs:27:9: 27:17\n-          switchInt(move _8) -> [4isize: bb6, otherwise: bb5]; // scope 0 at $DIR/uninhabited_enum_branching.rs:27:9: 27:17\n+          switchInt(move _8) -> [4_isize: bb6, otherwise: bb5]; // scope 0 at $DIR/uninhabited_enum_branching.rs:27:9: 27:17\n       }\n   \n       bb5: {"}, {"sha": "e7abf57880047d9a8237c92fe694b8981873d16c", "filename": "src/test/mir-opt/unreachable/rustc.main.UnreachablePropagation.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Funreachable%2Frustc.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Funreachable%2Frustc.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable%2Frustc.main.UnreachablePropagation.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -30,7 +30,7 @@\n   \n       bb1: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/unreachable.rs:9:12: 9:20\n--         switchInt(move _2) -> [1isize: bb3, otherwise: bb2]; // scope 0 at $DIR/unreachable.rs:9:12: 9:20\n+-         switchInt(move _2) -> [1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/unreachable.rs:9:12: 9:20\n +         goto -> bb2;                     // scope 0 at $DIR/unreachable.rs:9:12: 9:20\n       }\n   \n@@ -63,7 +63,7 @@\n -     }\n - \n -     bb4: {\n--         _4 = const 42i32;                // scope 2 at $DIR/unreachable.rs:15:13: 15:20\n+-         _4 = const 42_i32;               // scope 2 at $DIR/unreachable.rs:15:13: 15:20\n -                                          // ty::Const\n -                                          // + ty: i32\n -                                          // + val: Value(Scalar(0x0000002a))\n@@ -81,7 +81,7 @@\n -     }\n - \n -     bb5: {\n--         _4 = const 21i32;                // scope 2 at $DIR/unreachable.rs:13:13: 13:20\n+-         _4 = const 21_i32;               // scope 2 at $DIR/unreachable.rs:13:13: 13:20\n -                                          // ty::Const\n -                                          // + ty: i32\n -                                          // + val: Value(Scalar(0x00000015))"}, {"sha": "50694900024a081e5da0cacb68a056474b9817f1", "filename": "src/test/mir-opt/unreachable_asm/rustc.main.UnreachablePropagation.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Funreachable_asm%2Frustc.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Funreachable_asm%2Frustc.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm%2Frustc.main.UnreachablePropagation.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -33,7 +33,7 @@\n   \n       bb1: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/unreachable_asm.rs:11:12: 11:20\n-          switchInt(move _2) -> [1isize: bb3, otherwise: bb2]; // scope 0 at $DIR/unreachable_asm.rs:11:12: 11:20\n+          switchInt(move _2) -> [1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/unreachable_asm.rs:11:12: 11:20\n       }\n   \n       bb2: {\n@@ -65,7 +65,7 @@\n       }\n   \n       bb4: {\n-          _4 = const 42i32;                // scope 2 at $DIR/unreachable_asm.rs:17:13: 17:20\n+          _4 = const 42_i32;               // scope 2 at $DIR/unreachable_asm.rs:17:13: 17:20\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002a))\n@@ -83,7 +83,7 @@\n       }\n   \n       bb5: {\n-          _4 = const 21i32;                // scope 2 at $DIR/unreachable_asm.rs:15:13: 15:20\n+          _4 = const 21_i32;               // scope 2 at $DIR/unreachable_asm.rs:15:13: 15:20\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000015))"}, {"sha": "9be05aefcf69e678eeb8782d054bb01ceef8df37", "filename": "src/test/mir-opt/unreachable_asm_2/rustc.main.UnreachablePropagation.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Funreachable_asm_2%2Frustc.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Funreachable_asm_2%2Frustc.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm_2%2Frustc.main.UnreachablePropagation.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -36,7 +36,7 @@\n   \n       bb1: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/unreachable_asm_2.rs:11:12: 11:20\n-          switchInt(move _2) -> [1isize: bb3, otherwise: bb2]; // scope 0 at $DIR/unreachable_asm_2.rs:11:12: 11:20\n+          switchInt(move _2) -> [1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/unreachable_asm_2.rs:11:12: 11:20\n       }\n   \n       bb2: {\n@@ -78,7 +78,7 @@\n                                            // + span: $DIR/unreachable_asm_2.rs:20:13: 20:41\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_8);                 // scope 2 at $DIR/unreachable_asm_2.rs:20:40: 20:41\n-          _4 = const 42i32;                // scope 2 at $DIR/unreachable_asm_2.rs:21:13: 21:20\n+          _4 = const 42_i32;               // scope 2 at $DIR/unreachable_asm_2.rs:21:13: 21:20\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002a))\n@@ -107,7 +107,7 @@\n                                            // + span: $DIR/unreachable_asm_2.rs:16:13: 16:41\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_7);                 // scope 2 at $DIR/unreachable_asm_2.rs:16:40: 16:41\n-          _4 = const 21i32;                // scope 2 at $DIR/unreachable_asm_2.rs:17:13: 17:20\n+          _4 = const 21_i32;               // scope 2 at $DIR/unreachable_asm_2.rs:17:13: 17:20\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000015))"}, {"sha": "e7886f683c07e12971935aa33a42203318bdcc03", "filename": "src/test/mir-opt/unreachable_diverging/rustc.main.UnreachablePropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Funreachable_diverging%2Frustc.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Funreachable_diverging%2Frustc.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_diverging%2Frustc.main.UnreachablePropagation.diff?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -38,7 +38,7 @@\n   \n       bb1: {\n           _3 = discriminant(_2);           // scope 1 at $DIR/unreachable_diverging.rs:14:12: 14:22\n-          switchInt(move _3) -> [1isize: bb3, otherwise: bb2]; // scope 1 at $DIR/unreachable_diverging.rs:14:12: 14:22\n+          switchInt(move _3) -> [1_isize: bb3, otherwise: bb2]; // scope 1 at $DIR/unreachable_diverging.rs:14:12: 14:22\n       }\n   \n       bb2: {"}, {"sha": "7f0266d65899231ab90766c6d29dc4b29bc1f5ed", "filename": "src/test/mir-opt/unusual-item-types/32bit/rustc.E-V-{{constant}}.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -4,7 +4,7 @@ E::V::{{constant}}#0: isize = {\n     let mut _0: isize;                   // return place in scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n \n     bb0: {\n-        _0 = const 5isize;               // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n+        _0 = const 5_isize;              // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n                                          // ty::Const\n                                          // + ty: isize\n                                          // + val: Value(Scalar(0x00000005))"}, {"sha": "4af856c654eedc8ca4bc32eb9f7841078a8fb844", "filename": "src/test/mir-opt/unusual-item-types/32bit/rustc.{{impl}}-ASSOCIATED_CONSTANT.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -4,7 +4,7 @@ const <impl at $DIR/unusual-item-types.rs:9:1: 11:2>::ASSOCIATED_CONSTANT: i32 =\n     let mut _0: i32;                     // return place in scope 0 at $DIR/unusual-item-types.rs:10:32: 10:35\n \n     bb0: {\n-        _0 = const 2i32;                 // scope 0 at $DIR/unusual-item-types.rs:10:38: 10:39\n+        _0 = const 2_i32;                // scope 0 at $DIR/unusual-item-types.rs:10:38: 10:39\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000002))"}, {"sha": "f2c1e9c97ddfef10de6dd7ac715e98be5f883abe", "filename": "src/test/mir-opt/unusual-item-types/64bit/rustc.E-V-{{constant}}.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -4,7 +4,7 @@ E::V::{{constant}}#0: isize = {\n     let mut _0: isize;                   // return place in scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n \n     bb0: {\n-        _0 = const 5isize;               // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n+        _0 = const 5_isize;              // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n                                          // ty::Const\n                                          // + ty: isize\n                                          // + val: Value(Scalar(0x0000000000000005))"}, {"sha": "4af856c654eedc8ca4bc32eb9f7841078a8fb844", "filename": "src/test/mir-opt/unusual-item-types/64bit/rustc.{{impl}}-ASSOCIATED_CONSTANT.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -4,7 +4,7 @@ const <impl at $DIR/unusual-item-types.rs:9:1: 11:2>::ASSOCIATED_CONSTANT: i32 =\n     let mut _0: i32;                     // return place in scope 0 at $DIR/unusual-item-types.rs:10:32: 10:35\n \n     bb0: {\n-        _0 = const 2i32;                 // scope 0 at $DIR/unusual-item-types.rs:10:38: 10:39\n+        _0 = const 2_i32;                // scope 0 at $DIR/unusual-item-types.rs:10:38: 10:39\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000002))"}, {"sha": "85be89719ec395914c6ba9cf6ca0cba54834acb4", "filename": "src/test/rustdoc/const-generics/add-impl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -1,7 +1,6 @@\n // ignore-tidy-linelength\n \n #![feature(const_generics)]\n-\n #![crate_name = \"foo\"]\n \n use std::ops::Add;\n@@ -11,7 +10,7 @@ pub struct Simd<T, const WIDTH: usize> {\n     inner: T,\n }\n \n-// @has foo/struct.Simd.html '//div[@id=\"trait-implementations-list\"]/h3/code' 'impl Add<Simd<u8, 16usize>> for Simd<u8, 16>'\n+// @has foo/struct.Simd.html '//div[@id=\"trait-implementations-list\"]/h3/code' 'impl Add<Simd<u8, 16_usize>> for Simd<u8, 16>'\n impl Add for Simd<u8, 16> {\n     type Output = Self;\n "}, {"sha": "0ad05b3adeb88faf45c31ec42b49a4770c0c5ce0", "filename": "src/test/ui/array-slice-vec/match_arr_unknown_len.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n   --> $DIR/match_arr_unknown_len.rs:6:9\n    |\n LL |         [1, 2] => true,\n-   |         ^^^^^^ expected `2usize`, found `N`\n+   |         ^^^^^^ expected `2_usize`, found `N`\n    |\n    = note: expected array `[u32; 2]`\n               found array `[u32; N]`"}, {"sha": "c1b08010cd5b6396efd829580bd105d66af9e13f", "filename": "src/test/ui/associated-const/defaults-not-assumed-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-fail.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL |     const B: u8 = Self::A + 1;\n    |     --------------^^^^^^^^^^^-\n    |                   |\n-   |                   attempt to add with overflow\n+   |                   attempt to compute `u8::MAX + 1_u8` which would overflow\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "724823e36405ee5e451015b3cb032ffccb1da711", "filename": "src/test/ui/associated-const/issue-69020-assoc-const-arith-overflow.noopt.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.noopt.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,41 +2,41 @@ error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:29:22\n    |\n LL |     const NEG: i32 = -i32::MIN + T::NEG;\n-   |                      ^^^^^^^^^ attempt to negate with overflow\n+   |                      ^^^^^^^^^ attempt to negate i32::MIN which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:31:35\n    |\n LL |     const NEG_REV: i32 = T::NEG + (-i32::MIN);\n-   |                                   ^^^^^^^^^^^ attempt to negate with overflow\n+   |                                   ^^^^^^^^^^^ attempt to negate i32::MIN which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:34:22\n    |\n LL |     const ADD: i32 = (i32::MAX+1) + T::ADD;\n-   |                      ^^^^^^^^^^^^ attempt to add with overflow\n+   |                      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:36:36\n    |\n LL |     const ADD_REV: i32 =  T::ADD + (i32::MAX+1);\n-   |                                    ^^^^^^^^^^^^ attempt to add with overflow\n+   |                                    ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32` which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:39:22\n    |\n LL |     const DIV: i32 = (1/0) + T::DIV;\n-   |                      ^^^^^ attempt to divide by zero\n+   |                      ^^^^^ attempt to divide 1_i32 by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:41:35\n    |\n LL |     const DIV_REV: i32 = T::DIV + (1/0);\n-   |                                   ^^^^^ attempt to divide by zero\n+   |                                   ^^^^^ attempt to divide 1_i32 by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:44:22"}, {"sha": "724823e36405ee5e451015b3cb032ffccb1da711", "filename": "src/test/ui/associated-const/issue-69020-assoc-const-arith-overflow.opt.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,41 +2,41 @@ error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:29:22\n    |\n LL |     const NEG: i32 = -i32::MIN + T::NEG;\n-   |                      ^^^^^^^^^ attempt to negate with overflow\n+   |                      ^^^^^^^^^ attempt to negate i32::MIN which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:31:35\n    |\n LL |     const NEG_REV: i32 = T::NEG + (-i32::MIN);\n-   |                                   ^^^^^^^^^^^ attempt to negate with overflow\n+   |                                   ^^^^^^^^^^^ attempt to negate i32::MIN which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:34:22\n    |\n LL |     const ADD: i32 = (i32::MAX+1) + T::ADD;\n-   |                      ^^^^^^^^^^^^ attempt to add with overflow\n+   |                      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:36:36\n    |\n LL |     const ADD_REV: i32 =  T::ADD + (i32::MAX+1);\n-   |                                    ^^^^^^^^^^^^ attempt to add with overflow\n+   |                                    ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32` which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:39:22\n    |\n LL |     const DIV: i32 = (1/0) + T::DIV;\n-   |                      ^^^^^ attempt to divide by zero\n+   |                      ^^^^^ attempt to divide 1_i32 by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:41:35\n    |\n LL |     const DIV_REV: i32 = T::DIV + (1/0);\n-   |                                   ^^^^^ attempt to divide by zero\n+   |                                   ^^^^^ attempt to divide 1_i32 by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:44:22"}, {"sha": "724823e36405ee5e451015b3cb032ffccb1da711", "filename": "src/test/ui/associated-const/issue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,41 +2,41 @@ error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:29:22\n    |\n LL |     const NEG: i32 = -i32::MIN + T::NEG;\n-   |                      ^^^^^^^^^ attempt to negate with overflow\n+   |                      ^^^^^^^^^ attempt to negate i32::MIN which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:31:35\n    |\n LL |     const NEG_REV: i32 = T::NEG + (-i32::MIN);\n-   |                                   ^^^^^^^^^^^ attempt to negate with overflow\n+   |                                   ^^^^^^^^^^^ attempt to negate i32::MIN which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:34:22\n    |\n LL |     const ADD: i32 = (i32::MAX+1) + T::ADD;\n-   |                      ^^^^^^^^^^^^ attempt to add with overflow\n+   |                      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:36:36\n    |\n LL |     const ADD_REV: i32 =  T::ADD + (i32::MAX+1);\n-   |                                    ^^^^^^^^^^^^ attempt to add with overflow\n+   |                                    ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32` which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:39:22\n    |\n LL |     const DIV: i32 = (1/0) + T::DIV;\n-   |                      ^^^^^ attempt to divide by zero\n+   |                      ^^^^^ attempt to divide 1_i32 by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:41:35\n    |\n LL |     const DIV_REV: i32 = T::DIV + (1/0);\n-   |                                   ^^^^^ attempt to divide by zero\n+   |                                   ^^^^^ attempt to divide 1_i32 by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:44:22"}, {"sha": "ceda31550ff44b766b8dfbfafc48b6f2a43cafa3", "filename": "src/test/ui/const-generics/array-impls/into-iter-no-impls-length-33.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-no-impls-length-33.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-no-impls-length-33.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-no-impls-length-33.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -13,9 +13,9 @@ LL | pub fn no_iterator() -> impl Iterator<Item = i32> {\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n LL |\n LL |     IntoIter::new([0i32; 33])\n-   |     ------------------------- this returned value is of type `std::array::IntoIter<i32, 33usize>`\n+   |     ------------------------- this returned value is of type `std::array::IntoIter<i32, 33_usize>`\n    |\n-   = note: required because of the requirements on the impl of `std::iter::Iterator` for `std::array::IntoIter<i32, 33usize>`\n+   = note: required because of the requirements on the impl of `std::iter::Iterator` for `std::array::IntoIter<i32, 33_usize>`\n    = note: the return type of a function must have a statically known size\n \n error[E0277]: arrays only have std trait implementations for lengths 0..=32\n@@ -33,9 +33,9 @@ LL | pub fn no_double_ended_iterator() -> impl DoubleEndedIterator {\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n LL |\n LL |     IntoIter::new([0i32; 33])\n-   |     ------------------------- this returned value is of type `std::array::IntoIter<i32, 33usize>`\n+   |     ------------------------- this returned value is of type `std::array::IntoIter<i32, 33_usize>`\n    |\n-   = note: required because of the requirements on the impl of `std::iter::DoubleEndedIterator` for `std::array::IntoIter<i32, 33usize>`\n+   = note: required because of the requirements on the impl of `std::iter::DoubleEndedIterator` for `std::array::IntoIter<i32, 33_usize>`\n    = note: the return type of a function must have a statically known size\n \n error[E0277]: arrays only have std trait implementations for lengths 0..=32\n@@ -53,9 +53,9 @@ LL | pub fn no_exact_size_iterator() -> impl ExactSizeIterator {\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n LL |\n LL |     IntoIter::new([0i32; 33])\n-   |     ------------------------- this returned value is of type `std::array::IntoIter<i32, 33usize>`\n+   |     ------------------------- this returned value is of type `std::array::IntoIter<i32, 33_usize>`\n    |\n-   = note: required because of the requirements on the impl of `std::iter::ExactSizeIterator` for `std::array::IntoIter<i32, 33usize>`\n+   = note: required because of the requirements on the impl of `std::iter::ExactSizeIterator` for `std::array::IntoIter<i32, 33_usize>`\n    = note: the return type of a function must have a statically known size\n \n error[E0277]: arrays only have std trait implementations for lengths 0..=32\n@@ -73,9 +73,9 @@ LL | pub fn no_fused_iterator() -> impl FusedIterator {\n    |                               ^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n LL |\n LL |     IntoIter::new([0i32; 33])\n-   |     ------------------------- this returned value is of type `std::array::IntoIter<i32, 33usize>`\n+   |     ------------------------- this returned value is of type `std::array::IntoIter<i32, 33_usize>`\n    |\n-   = note: required because of the requirements on the impl of `std::iter::FusedIterator` for `std::array::IntoIter<i32, 33usize>`\n+   = note: required because of the requirements on the impl of `std::iter::FusedIterator` for `std::array::IntoIter<i32, 33_usize>`\n    = note: the return type of a function must have a statically known size\n \n error[E0277]: arrays only have std trait implementations for lengths 0..=32\n@@ -93,9 +93,9 @@ LL | pub fn no_trusted_len() -> impl TrustedLen {\n    |                            ^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n LL |\n LL |     IntoIter::new([0i32; 33])\n-   |     ------------------------- this returned value is of type `std::array::IntoIter<i32, 33usize>`\n+   |     ------------------------- this returned value is of type `std::array::IntoIter<i32, 33_usize>`\n    |\n-   = note: required because of the requirements on the impl of `std::iter::TrustedLen` for `std::array::IntoIter<i32, 33usize>`\n+   = note: required because of the requirements on the impl of `std::iter::TrustedLen` for `std::array::IntoIter<i32, 33_usize>`\n    = note: the return type of a function must have a statically known size\n \n error[E0277]: arrays only have std trait implementations for lengths 0..=32\n@@ -113,9 +113,9 @@ LL | pub fn no_clone() -> impl Clone {\n    |                      ^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n LL |\n LL |     IntoIter::new([0i32; 33])\n-   |     ------------------------- this returned value is of type `std::array::IntoIter<i32, 33usize>`\n+   |     ------------------------- this returned value is of type `std::array::IntoIter<i32, 33_usize>`\n    |\n-   = note: required because of the requirements on the impl of `std::clone::Clone` for `std::array::IntoIter<i32, 33usize>`\n+   = note: required because of the requirements on the impl of `std::clone::Clone` for `std::array::IntoIter<i32, 33_usize>`\n    = note: the return type of a function must have a statically known size\n \n error[E0277]: arrays only have std trait implementations for lengths 0..=32\n@@ -133,9 +133,9 @@ LL | pub fn no_debug() -> impl Debug {\n    |                      ^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n LL |\n LL |     IntoIter::new([0i32; 33])\n-   |     ------------------------- this returned value is of type `std::array::IntoIter<i32, 33usize>`\n+   |     ------------------------- this returned value is of type `std::array::IntoIter<i32, 33_usize>`\n    |\n-   = note: required because of the requirements on the impl of `std::fmt::Debug` for `std::array::IntoIter<i32, 33usize>`\n+   = note: required because of the requirements on the impl of `std::fmt::Debug` for `std::array::IntoIter<i32, 33_usize>`\n    = note: the return type of a function must have a statically known size\n \n error: aborting due to 14 previous errors"}, {"sha": "a3f331ee81155a4ae540b84171e3dad5bf9beff4", "filename": "src/test/ui/const-generics/different_byref.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -11,10 +11,10 @@ error[E0308]: mismatched types\n   --> $DIR/different_byref.rs:8:9\n    |\n LL |     x = Const::<{ [4] }> {};\n-   |         ^^^^^^^^^^^^^^^^^^^ expected `3usize`, found `4usize`\n+   |         ^^^^^^^^^^^^^^^^^^^ expected `3_usize`, found `4_usize`\n    |\n-   = note: expected type `[3usize]`\n-              found type `[4usize]`\n+   = note: expected type `[3_usize]`\n+              found type `[4_usize]`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "49530c9d240b5daeeb04cb1087c04e1370709c6f", "filename": "src/test/ui/const-generics/types-mismatch-const-args.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -11,10 +11,10 @@ error[E0308]: mismatched types\n   --> $DIR/types-mismatch-const-args.rs:13:41\n    |\n LL |     let _: A<'a, u32, {2u32}, {3u32}> = A::<'a, u32, {4u32}, {3u32}> { data: PhantomData };\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `2u32`, found `4u32`\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `2_u32`, found `4_u32`\n    |\n-   = note: expected type `2u32`\n-              found type `4u32`\n+   = note: expected type `2_u32`\n+              found type `4_u32`\n \n error[E0308]: mismatched types\n   --> $DIR/types-mismatch-const-args.rs:15:41"}, {"sha": "0cb77518197748787ff0cf744a2aab0146bf4e74", "filename": "src/test/ui/consts/const-err-early.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | pub const A: i8 = -std::i8::MIN;\n    | ------------------^^^^^^^^^^^^^-\n    |                   |\n-   |                   attempt to negate with overflow\n+   |                   attempt to negate i8::MIN which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-err-early.rs:1:9\n@@ -18,23 +18,23 @@ error: any use of this value will cause an error\n LL | pub const B: u8 = 200u8 + 200u8;\n    | ------------------^^^^^^^^^^^^^-\n    |                   |\n-   |                   attempt to add with overflow\n+   |                   attempt to compute `200_u8 + 200_u8` which would overflow\n \n error: any use of this value will cause an error\n   --> $DIR/const-err-early.rs:5:19\n    |\n LL | pub const C: u8 = 200u8 * 4;\n    | ------------------^^^^^^^^^-\n    |                   |\n-   |                   attempt to multiply with overflow\n+   |                   attempt to compute `200_u8 * 4_u8` which would overflow\n \n error: any use of this value will cause an error\n   --> $DIR/const-err-early.rs:6:19\n    |\n LL | pub const D: u8 = 42u8 - (42u8 + 1);\n    | ------------------^^^^^^^^^^^^^^^^^-\n    |                   |\n-   |                   attempt to subtract with overflow\n+   |                   attempt to compute `42_u8 - 43_u8` which would overflow\n \n error: any use of this value will cause an error\n   --> $DIR/const-err-early.rs:7:19"}, {"sha": "4ac4a8754d396ed521ffb87e1a4b0916817a58ad", "filename": "src/test/ui/consts/const-err-multi.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | pub const A: i8 = -std::i8::MIN;\n    | ------------------^^^^^^^^^^^^^-\n    |                   |\n-   |                   attempt to negate with overflow\n+   |                   attempt to negate i8::MIN which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-err-multi.rs:1:9"}, {"sha": "687ffc4c4bf95765f841df37c011b26d3e9ac0d5", "filename": "src/test/ui/consts/const-err2.noopt.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.noopt.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,39 +2,39 @@ error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:19:13\n    |\n LL |     let a = -std::i8::MIN;\n-   |             ^^^^^^^^^^^^^ attempt to negate with overflow\n+   |             ^^^^^^^^^^^^^ attempt to negate i8::MIN which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:21:18\n    |\n LL |     let a_i128 = -std::i128::MIN;\n-   |                  ^^^^^^^^^^^^^^^ attempt to negate with overflow\n+   |                  ^^^^^^^^^^^^^^^ attempt to negate i128::MIN which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:23:13\n    |\n LL |     let b = 200u8 + 200u8 + 200u8;\n-   |             ^^^^^^^^^^^^^ attempt to add with overflow\n+   |             ^^^^^^^^^^^^^ attempt to compute `200_u8 + 200_u8` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:25:18\n    |\n LL |     let b_i128 = std::i128::MIN - std::i128::MAX;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to compute `i128::MIN - i128::MAX` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:27:13\n    |\n LL |     let c = 200u8 * 4;\n-   |             ^^^^^^^^^ attempt to multiply with overflow\n+   |             ^^^^^^^^^ attempt to compute `200_u8 * 4_u8` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:29:13\n    |\n LL |     let d = 42u8 - (42u8 + 1);\n-   |             ^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n+   |             ^^^^^^^^^^^^^^^^^ attempt to compute `42_u8 - 43_u8` which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/const-err2.rs:31:14"}, {"sha": "687ffc4c4bf95765f841df37c011b26d3e9ac0d5", "filename": "src/test/ui/consts/const-err2.opt.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,39 +2,39 @@ error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:19:13\n    |\n LL |     let a = -std::i8::MIN;\n-   |             ^^^^^^^^^^^^^ attempt to negate with overflow\n+   |             ^^^^^^^^^^^^^ attempt to negate i8::MIN which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:21:18\n    |\n LL |     let a_i128 = -std::i128::MIN;\n-   |                  ^^^^^^^^^^^^^^^ attempt to negate with overflow\n+   |                  ^^^^^^^^^^^^^^^ attempt to negate i128::MIN which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:23:13\n    |\n LL |     let b = 200u8 + 200u8 + 200u8;\n-   |             ^^^^^^^^^^^^^ attempt to add with overflow\n+   |             ^^^^^^^^^^^^^ attempt to compute `200_u8 + 200_u8` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:25:18\n    |\n LL |     let b_i128 = std::i128::MIN - std::i128::MAX;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to compute `i128::MIN - i128::MAX` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:27:13\n    |\n LL |     let c = 200u8 * 4;\n-   |             ^^^^^^^^^ attempt to multiply with overflow\n+   |             ^^^^^^^^^ attempt to compute `200_u8 * 4_u8` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:29:13\n    |\n LL |     let d = 42u8 - (42u8 + 1);\n-   |             ^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n+   |             ^^^^^^^^^^^^^^^^^ attempt to compute `42_u8 - 43_u8` which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/const-err2.rs:31:14"}, {"sha": "687ffc4c4bf95765f841df37c011b26d3e9ac0d5", "filename": "src/test/ui/consts/const-err2.opt_with_overflow_checks.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt_with_overflow_checks.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,39 +2,39 @@ error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:19:13\n    |\n LL |     let a = -std::i8::MIN;\n-   |             ^^^^^^^^^^^^^ attempt to negate with overflow\n+   |             ^^^^^^^^^^^^^ attempt to negate i8::MIN which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:21:18\n    |\n LL |     let a_i128 = -std::i128::MIN;\n-   |                  ^^^^^^^^^^^^^^^ attempt to negate with overflow\n+   |                  ^^^^^^^^^^^^^^^ attempt to negate i128::MIN which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:23:13\n    |\n LL |     let b = 200u8 + 200u8 + 200u8;\n-   |             ^^^^^^^^^^^^^ attempt to add with overflow\n+   |             ^^^^^^^^^^^^^ attempt to compute `200_u8 + 200_u8` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:25:18\n    |\n LL |     let b_i128 = std::i128::MIN - std::i128::MAX;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to compute `i128::MIN - i128::MAX` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:27:13\n    |\n LL |     let c = 200u8 * 4;\n-   |             ^^^^^^^^^ attempt to multiply with overflow\n+   |             ^^^^^^^^^ attempt to compute `200_u8 * 4_u8` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:29:13\n    |\n LL |     let d = 42u8 - (42u8 + 1);\n-   |             ^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n+   |             ^^^^^^^^^^^^^^^^^ attempt to compute `42_u8 - 43_u8` which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/const-err2.rs:31:14"}, {"sha": "62f339809e431c0d3eccb9d986dcc207771094c6", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -4,7 +4,7 @@ warning: any use of this value will cause an error\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n    | ------------------^^^^^---------------------------\n    |                   |\n-   |                   attempt to subtract with overflow\n+   |                   attempt to compute `5_u32 - 6_u32` which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/conditional_array_execution.rs:3:9"}, {"sha": "dd79cbd7e5ff72e19a34b2fd2d377a3e0dbbb877", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,7 +2,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/const-eval-overflow-3.rs:20:11\n    |\n LL |     = [0; (i8::MAX + 1) as usize];\n-   |           ^^^^^^^^^^^^^ attempt to add with overflow\n+   |           ^^^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8` which would overflow\n \n error: aborting due to previous error\n "}, {"sha": "30c52a82ea3643e796dcc9b43d28e4f943888d41", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,7 +2,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/const-eval-overflow-4.rs:13:13\n    |\n LL |     : [u32; (i8::MAX as i8 + 1i8) as usize]\n-   |             ^^^^^^^^^^^^^^^^^^^^^ attempt to add with overflow\n+   |             ^^^^^^^^^^^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8` which would overflow\n \n error: aborting due to previous error\n "}, {"sha": "2ad557a71139ee2f2560fd79d5bddbefd7c826b7", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I8: (i8,) =\n LL | |     (\n LL | |      i8::MIN - 1,\n-   | |      ^^^^^^^^^^^ attempt to subtract with overflow\n+   | |      ^^^^^^^^^^^ attempt to compute `i8::MIN - 1_i8` which would overflow\n LL | |      );\n    | |_______-\n    |\n@@ -20,7 +20,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I16: (i16,) =\n LL | |     (\n LL | |      i16::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to subtract with overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `i16::MIN - 1_i16` which would overflow\n LL | |      );\n    | |_______-\n \n@@ -30,7 +30,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I32: (i32,) =\n LL | |     (\n LL | |      i32::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to subtract with overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `i32::MIN - 1_i32` which would overflow\n LL | |      );\n    | |_______-\n \n@@ -40,7 +40,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I64: (i64,) =\n LL | |     (\n LL | |      i64::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to subtract with overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `i64::MIN - 1_i64` which would overflow\n LL | |      );\n    | |_______-\n \n@@ -50,7 +50,7 @@ error: any use of this value will cause an error\n LL | / const VALS_U8: (u8,) =\n LL | |     (\n LL | |      u8::MIN - 1,\n-   | |      ^^^^^^^^^^^ attempt to subtract with overflow\n+   | |      ^^^^^^^^^^^ attempt to compute `0_u8 - 1_u8` which would overflow\n LL | |      );\n    | |_______-\n \n@@ -59,7 +59,7 @@ error: any use of this value will cause an error\n    |\n LL | / const VALS_U16: (u16,) = (\n LL | |      u16::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to subtract with overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `0_u16 - 1_u16` which would overflow\n LL | |      );\n    | |_______-\n \n@@ -68,7 +68,7 @@ error: any use of this value will cause an error\n    |\n LL | / const VALS_U32: (u32,) = (\n LL | |      u32::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to subtract with overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `0_u32 - 1_u32` which would overflow\n LL | |      );\n    | |_______-\n \n@@ -78,7 +78,7 @@ error: any use of this value will cause an error\n LL | / const VALS_U64: (u64,) =\n LL | |     (\n LL | |      u64::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to subtract with overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `0_u64 - 1_u64` which would overflow\n LL | |      );\n    | |_______-\n "}, {"sha": "fce616b296c291d3a5090600cadf2d586ef32e3a", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2b.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I8: (i8,) =\n LL | |     (\n LL | |      i8::MAX + 1,\n-   | |      ^^^^^^^^^^^ attempt to add with overflow\n+   | |      ^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8` which would overflow\n LL | |      );\n    | |_______-\n    |\n@@ -20,7 +20,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I16: (i16,) =\n LL | |     (\n LL | |      i16::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to add with overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `i16::MAX + 1_i16` which would overflow\n LL | |      );\n    | |_______-\n \n@@ -30,7 +30,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I32: (i32,) =\n LL | |     (\n LL | |      i32::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to add with overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32` which would overflow\n LL | |      );\n    | |_______-\n \n@@ -40,7 +40,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I64: (i64,) =\n LL | |     (\n LL | |      i64::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to add with overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `i64::MAX + 1_i64` which would overflow\n LL | |      );\n    | |_______-\n \n@@ -50,7 +50,7 @@ error: any use of this value will cause an error\n LL | / const VALS_U8: (u8,) =\n LL | |     (\n LL | |      u8::MAX + 1,\n-   | |      ^^^^^^^^^^^ attempt to add with overflow\n+   | |      ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8` which would overflow\n LL | |      );\n    | |_______-\n \n@@ -59,7 +59,7 @@ error: any use of this value will cause an error\n    |\n LL | / const VALS_U16: (u16,) = (\n LL | |      u16::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to add with overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `u16::MAX + 1_u16` which would overflow\n LL | |      );\n    | |_______-\n \n@@ -68,7 +68,7 @@ error: any use of this value will cause an error\n    |\n LL | / const VALS_U32: (u32,) = (\n LL | |      u32::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to add with overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `u32::MAX + 1_u32` which would overflow\n LL | |      );\n    | |_______-\n \n@@ -78,7 +78,7 @@ error: any use of this value will cause an error\n LL | / const VALS_U64: (u64,) =\n LL | |     (\n LL | |      u64::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to add with overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `u64::MAX + 1_u64` which would overflow\n LL | |      );\n    | |_______-\n "}, {"sha": "76201524d32bcaffea76c886cf4bdb540db41162", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2c.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I8: (i8,) =\n LL | |     (\n LL | |      i8::MIN * 2,\n-   | |      ^^^^^^^^^^^ attempt to multiply with overflow\n+   | |      ^^^^^^^^^^^ attempt to compute `i8::MIN * 2_i8` which would overflow\n LL | |      );\n    | |_______-\n    |\n@@ -20,7 +20,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I16: (i16,) =\n LL | |     (\n LL | |      i16::MIN * 2,\n-   | |      ^^^^^^^^^^^^ attempt to multiply with overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `i16::MIN * 2_i16` which would overflow\n LL | |      );\n    | |_______-\n \n@@ -30,7 +30,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I32: (i32,) =\n LL | |     (\n LL | |      i32::MIN * 2,\n-   | |      ^^^^^^^^^^^^ attempt to multiply with overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `i32::MIN * 2_i32` which would overflow\n LL | |      );\n    | |_______-\n \n@@ -40,7 +40,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I64: (i64,) =\n LL | |     (\n LL | |      i64::MIN * 2,\n-   | |      ^^^^^^^^^^^^ attempt to multiply with overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `i64::MIN * 2_i64` which would overflow\n LL | |      );\n    | |_______-\n \n@@ -50,7 +50,7 @@ error: any use of this value will cause an error\n LL | / const VALS_U8: (u8,) =\n LL | |     (\n LL | |      u8::MAX * 2,\n-   | |      ^^^^^^^^^^^ attempt to multiply with overflow\n+   | |      ^^^^^^^^^^^ attempt to compute `u8::MAX * 2_u8` which would overflow\n LL | |      );\n    | |_______-\n \n@@ -59,7 +59,7 @@ error: any use of this value will cause an error\n    |\n LL | / const VALS_U16: (u16,) = (\n LL | |      u16::MAX * 2,\n-   | |      ^^^^^^^^^^^^ attempt to multiply with overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `u16::MAX * 2_u16` which would overflow\n LL | |      );\n    | |_______-\n \n@@ -68,7 +68,7 @@ error: any use of this value will cause an error\n    |\n LL | / const VALS_U32: (u32,) = (\n LL | |      u32::MAX * 2,\n-   | |      ^^^^^^^^^^^^ attempt to multiply with overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `u32::MAX * 2_u32` which would overflow\n LL | |      );\n    | |_______-\n \n@@ -78,7 +78,7 @@ error: any use of this value will cause an error\n LL | / const VALS_U64: (u64,) =\n LL | |     (\n LL | |      u64::MAX * 2,\n-   | |      ^^^^^^^^^^^^ attempt to multiply with overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `u64::MAX * 2_u64` which would overflow\n LL | |      );\n    | |_______-\n "}, {"sha": "b3e1f496ae3e3e501552715923334734efe456e8", "filename": "src/test/ui/consts/const-eval/issue-43197.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -4,7 +4,7 @@ warning: any use of this value will cause an error\n LL |     const X: u32 = 0 - 1;\n    |     ---------------^^^^^-\n    |                    |\n-   |                    attempt to subtract with overflow\n+   |                    attempt to compute `0_u32 - 1_u32` which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/issue-43197.rs:3:9\n@@ -18,7 +18,7 @@ warning: any use of this value will cause an error\n LL |     const Y: u32 = foo(0 - 1);\n    |     -------------------^^^^^--\n    |                        |\n-   |                        attempt to subtract with overflow\n+   |                        attempt to compute `0_u32 - 1_u32` which would overflow\n \n error[E0080]: evaluation of constant expression failed\n   --> $DIR/issue-43197.rs:14:23"}, {"sha": "4be84f8d1843cf8dd1e79f2eef5330fae06af7b3", "filename": "src/test/ui/consts/const-eval/issue-50814.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL |     const MAX: u8 = A::MAX + B::MAX;\n    |     ----------------^^^^^^^^^^^^^^^-\n    |                     |\n-   |                     attempt to add with overflow\n+   |                     attempt to compute `u8::MAX + u8::MAX` which would overflow\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "52313205dc80bff826cb0c05d97cf3eaa80bebd1", "filename": "src/test/ui/consts/const-eval/promoted_errors.noopt.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,7 +2,7 @@ warning: this arithmetic operation will overflow\n   --> $DIR/promoted_errors.rs:12:20\n    |\n LL |     println!(\"{}\", 0u32 - 1);\n-   |                    ^^^^^^^^ attempt to subtract with overflow\n+   |                    ^^^^^^^^ attempt to compute `0_u32 - 1_u32` which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:9:20\n@@ -14,13 +14,13 @@ warning: this arithmetic operation will overflow\n   --> $DIR/promoted_errors.rs:14:14\n    |\n LL |     let _x = 0u32 - 1;\n-   |              ^^^^^^^^ attempt to subtract with overflow\n+   |              ^^^^^^^^ attempt to compute `0_u32 - 1_u32` which would overflow\n \n warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:16:20\n    |\n LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ attempt to divide by zero\n+   |                    ^^^^^^^^^^^ attempt to divide 1_i32 by zero\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:9:41\n@@ -50,13 +50,13 @@ warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:20:14\n    |\n LL |     let _x = 1 / (1 - 1);\n-   |              ^^^^^^^^^^^ attempt to divide by zero\n+   |              ^^^^^^^^^^^ attempt to divide 1_i32 by zero\n \n warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:22:20\n    |\n LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide by zero\n+   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide 1_u32 by zero\n \n warning: reaching this expression at runtime will panic or abort\n   --> $DIR/promoted_errors.rs:22:20\n@@ -74,7 +74,7 @@ warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:26:14\n    |\n LL |     let _x = 1 / (false as u32);\n-   |              ^^^^^^^^^^^^^^^^^^ attempt to divide by zero\n+   |              ^^^^^^^^^^^^^^^^^^ attempt to divide 1_u32 by zero\n \n warning: 10 warnings emitted\n "}, {"sha": "b411bb2e7fe2005b0c6bab92cf194c0788a34294", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,7 +2,7 @@ warning: this arithmetic operation will overflow\n   --> $DIR/promoted_errors.rs:14:14\n    |\n LL |     let _x = 0u32 - 1;\n-   |              ^^^^^^^^ attempt to subtract with overflow\n+   |              ^^^^^^^^ attempt to compute `0_u32 - 1_u32` which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:9:20\n@@ -14,7 +14,7 @@ warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:16:20\n    |\n LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ attempt to divide by zero\n+   |                    ^^^^^^^^^^^ attempt to divide 1_i32 by zero\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:9:41\n@@ -44,13 +44,13 @@ warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:20:14\n    |\n LL |     let _x = 1 / (1 - 1);\n-   |              ^^^^^^^^^^^ attempt to divide by zero\n+   |              ^^^^^^^^^^^ attempt to divide 1_i32 by zero\n \n warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:22:20\n    |\n LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide by zero\n+   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide 1_u32 by zero\n \n warning: reaching this expression at runtime will panic or abort\n   --> $DIR/promoted_errors.rs:22:20\n@@ -68,7 +68,7 @@ warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:26:14\n    |\n LL |     let _x = 1 / (false as u32);\n-   |              ^^^^^^^^^^^^^^^^^^ attempt to divide by zero\n+   |              ^^^^^^^^^^^^^^^^^^ attempt to divide 1_u32 by zero\n \n warning: 9 warnings emitted\n "}, {"sha": "52313205dc80bff826cb0c05d97cf3eaa80bebd1", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt_with_overflow_checks.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,7 +2,7 @@ warning: this arithmetic operation will overflow\n   --> $DIR/promoted_errors.rs:12:20\n    |\n LL |     println!(\"{}\", 0u32 - 1);\n-   |                    ^^^^^^^^ attempt to subtract with overflow\n+   |                    ^^^^^^^^ attempt to compute `0_u32 - 1_u32` which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:9:20\n@@ -14,13 +14,13 @@ warning: this arithmetic operation will overflow\n   --> $DIR/promoted_errors.rs:14:14\n    |\n LL |     let _x = 0u32 - 1;\n-   |              ^^^^^^^^ attempt to subtract with overflow\n+   |              ^^^^^^^^ attempt to compute `0_u32 - 1_u32` which would overflow\n \n warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:16:20\n    |\n LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ attempt to divide by zero\n+   |                    ^^^^^^^^^^^ attempt to divide 1_i32 by zero\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:9:41\n@@ -50,13 +50,13 @@ warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:20:14\n    |\n LL |     let _x = 1 / (1 - 1);\n-   |              ^^^^^^^^^^^ attempt to divide by zero\n+   |              ^^^^^^^^^^^ attempt to divide 1_i32 by zero\n \n warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:22:20\n    |\n LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide by zero\n+   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide 1_u32 by zero\n \n warning: reaching this expression at runtime will panic or abort\n   --> $DIR/promoted_errors.rs:22:20\n@@ -74,7 +74,7 @@ warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:26:14\n    |\n LL |     let _x = 1 / (false as u32);\n-   |              ^^^^^^^^^^^^^^^^^^ attempt to divide by zero\n+   |              ^^^^^^^^^^^^^^^^^^ attempt to divide 1_u32 by zero\n \n warning: 10 warnings emitted\n "}, {"sha": "ecdba2f1c506d60cccdb3980ce4fda8a37505b13", "filename": "src/test/ui/consts/const-eval/pub_const_err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -4,7 +4,7 @@ warning: any use of this value will cause an error\n LL | pub const Z: u32 = 0 - 1;\n    | -------------------^^^^^-\n    |                    |\n-   |                    attempt to subtract with overflow\n+   |                    attempt to compute `0_u32 - 1_u32` which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/pub_const_err.rs:2:9"}, {"sha": "b2b65767dc05964ad7bb5439d830feb591d8d861", "filename": "src/test/ui/consts/const-eval/pub_const_err_bin.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -4,7 +4,7 @@ warning: any use of this value will cause an error\n LL | pub const Z: u32 = 0 - 1;\n    | -------------------^^^^^-\n    |                    |\n-   |                    attempt to subtract with overflow\n+   |                    attempt to compute `0_u32 - 1_u32` which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/pub_const_err_bin.rs:2:9"}, {"sha": "478769ca9ffe1dc62dfa6aba0c93785c5451fd85", "filename": "src/test/ui/consts/const-eval/shift_overflow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fshift_overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fshift_overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fshift_overflow.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,7 +2,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/shift_overflow.rs:3:9\n    |\n LL |     X = 1 << ((u32::MAX as u64) + 1),\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to shift left with overflow\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to shift left by 4294967296_u64 which would overflow\n \n error: aborting due to previous error\n "}, {"sha": "eff50587ca3411887fb34cd3c4a426be75cf5116", "filename": "src/test/ui/consts/const-len-underflow-separate-spans.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | const LEN: usize = ONE - TWO;\n    | -------------------^^^^^^^^^-\n    |                    |\n-   |                    attempt to subtract with overflow\n+   |                    attempt to compute `1_usize - 2_usize` which would overflow\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "8ef8ef9625c81c7303cbcc49d4ff2dad485ca0ec", "filename": "src/test/ui/consts/const-len-underflow-subspans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-subspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-subspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-subspans.rs?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -7,5 +7,5 @@ const TWO: usize = 2;\n fn main() {\n     let a: [i8; ONE - TWO] = unimplemented!();\n     //~^ ERROR evaluation of constant value failed\n-    //~| attempt to subtract with overflow\n+    //~| attempt to compute `1_usize - 2_usize` which would overflow\n }"}, {"sha": "e52e64b25b6de3f838fa7406f79821e58f318ba4", "filename": "src/test/ui/consts/const-len-underflow-subspans.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-subspans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-subspans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-subspans.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,7 +2,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/const-len-underflow-subspans.rs:8:17\n    |\n LL |     let a: [i8; ONE - TWO] = unimplemented!();\n-   |                 ^^^^^^^^^ attempt to subtract with overflow\n+   |                 ^^^^^^^^^ attempt to compute `1_usize - 2_usize` which would overflow\n \n error: aborting due to previous error\n "}, {"sha": "eb6b0774e152c42462ddf076226a6c1e482e2e51", "filename": "src/test/ui/consts/const-match-check.eval1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -1,8 +1,8 @@\n-error[E0005]: refutable pattern in local binding: `i32::MIN..=-1i32` and `1i32..=i32::MAX` not covered\n+error[E0005]: refutable pattern in local binding: `i32::MIN..=-1_i32` and `1_i32..=i32::MAX` not covered\n   --> $DIR/const-match-check.rs:25:15\n    |\n LL |     A = { let 0 = 0; 0 },\n-   |               ^ patterns `i32::MIN..=-1i32` and `1i32..=i32::MAX` not covered\n+   |               ^ patterns `i32::MIN..=-1_i32` and `1_i32..=i32::MAX` not covered\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html"}, {"sha": "756426d84a47990faa5eb01cdfd9653bafdc4dff", "filename": "src/test/ui/consts/const-match-check.eval2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -1,8 +1,8 @@\n-error[E0005]: refutable pattern in local binding: `i32::MIN..=-1i32` and `1i32..=i32::MAX` not covered\n+error[E0005]: refutable pattern in local binding: `i32::MIN..=-1_i32` and `1_i32..=i32::MAX` not covered\n   --> $DIR/const-match-check.rs:31:24\n    |\n LL |     let x: [i32; { let 0 = 0; 0 }] = [];\n-   |                        ^ patterns `i32::MIN..=-1i32` and `1i32..=i32::MAX` not covered\n+   |                        ^ patterns `i32::MIN..=-1_i32` and `1_i32..=i32::MAX` not covered\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html"}, {"sha": "84600bb1b8aadebb9a089ac090b5c66b85c76862", "filename": "src/test/ui/consts/const-match-check.matchck.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -1,8 +1,8 @@\n-error[E0005]: refutable pattern in local binding: `i32::MIN..=-1i32` and `1i32..=i32::MAX` not covered\n+error[E0005]: refutable pattern in local binding: `i32::MIN..=-1_i32` and `1_i32..=i32::MAX` not covered\n   --> $DIR/const-match-check.rs:4:22\n    |\n LL | const X: i32 = { let 0 = 0; 0 };\n-   |                      ^ patterns `i32::MIN..=-1i32` and `1i32..=i32::MAX` not covered\n+   |                      ^ patterns `i32::MIN..=-1_i32` and `1_i32..=i32::MAX` not covered\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n@@ -12,11 +12,11 @@ help: you might want to use `if let` to ignore the variant that isn't matched\n LL | const X: i32 = { if let 0 = 0 { /* */ } 0 };\n    |                  ^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0005]: refutable pattern in local binding: `i32::MIN..=-1i32` and `1i32..=i32::MAX` not covered\n+error[E0005]: refutable pattern in local binding: `i32::MIN..=-1_i32` and `1_i32..=i32::MAX` not covered\n   --> $DIR/const-match-check.rs:8:23\n    |\n LL | static Y: i32 = { let 0 = 0; 0 };\n-   |                       ^ patterns `i32::MIN..=-1i32` and `1i32..=i32::MAX` not covered\n+   |                       ^ patterns `i32::MIN..=-1_i32` and `1_i32..=i32::MAX` not covered\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n@@ -26,11 +26,11 @@ help: you might want to use `if let` to ignore the variant that isn't matched\n LL | static Y: i32 = { if let 0 = 0 { /* */ } 0 };\n    |                   ^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0005]: refutable pattern in local binding: `i32::MIN..=-1i32` and `1i32..=i32::MAX` not covered\n+error[E0005]: refutable pattern in local binding: `i32::MIN..=-1_i32` and `1_i32..=i32::MAX` not covered\n   --> $DIR/const-match-check.rs:13:26\n    |\n LL |     const X: i32 = { let 0 = 0; 0 };\n-   |                          ^ patterns `i32::MIN..=-1i32` and `1i32..=i32::MAX` not covered\n+   |                          ^ patterns `i32::MIN..=-1_i32` and `1_i32..=i32::MAX` not covered\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n@@ -40,11 +40,11 @@ help: you might want to use `if let` to ignore the variant that isn't matched\n LL |     const X: i32 = { if let 0 = 0 { /* */ } 0 };\n    |                      ^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0005]: refutable pattern in local binding: `i32::MIN..=-1i32` and `1i32..=i32::MAX` not covered\n+error[E0005]: refutable pattern in local binding: `i32::MIN..=-1_i32` and `1_i32..=i32::MAX` not covered\n   --> $DIR/const-match-check.rs:19:26\n    |\n LL |     const X: i32 = { let 0 = 0; 0 };\n-   |                          ^ patterns `i32::MIN..=-1i32` and `1i32..=i32::MAX` not covered\n+   |                          ^ patterns `i32::MIN..=-1_i32` and `1_i32..=i32::MAX` not covered\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html"}, {"sha": "2105c12a1680a7bbf49ddb55b3ffece7a2f196fd", "filename": "src/test/ui/consts/const-pattern-irrefutable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-irrefutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-irrefutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-irrefutable.rs?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -9,8 +9,8 @@ use foo::d;\n const a: u8 = 2;\n \n fn main() {\n-    let a = 4; //~ ERROR refutable pattern in local binding: `0u8..=1u8` and `3u8..=u8::MAX\n-    let c = 4; //~ ERROR refutable pattern in local binding: `0u8..=1u8` and `3u8..=u8::MAX\n-    let d = 4; //~ ERROR refutable pattern in local binding: `0u8..=1u8` and `3u8..=u8::MAX\n+    let a = 4; //~ ERROR refutable pattern in local binding: `0_u8..=1_u8` and `3_u8..=u8::MAX\n+    let c = 4; //~ ERROR refutable pattern in local binding: `0_u8..=1_u8` and `3_u8..=u8::MAX\n+    let d = 4; //~ ERROR refutable pattern in local binding: `0_u8..=1_u8` and `3_u8..=u8::MAX\n     fn f() {} // Check that the `NOTE`s still work with an item here (cf. issue #35115).\n }"}, {"sha": "3e3bc1979a2e0e4c762965956d088172d0971318", "filename": "src/test/ui/consts/const-pattern-irrefutable.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-irrefutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-irrefutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-irrefutable.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -1,4 +1,4 @@\n-error[E0005]: refutable pattern in local binding: `0u8..=1u8` and `3u8..=u8::MAX` not covered\n+error[E0005]: refutable pattern in local binding: `0_u8..=1_u8` and `3_u8..=u8::MAX` not covered\n   --> $DIR/const-pattern-irrefutable.rs:12:9\n    |\n LL | const a: u8 = 2;\n@@ -12,7 +12,7 @@ LL |     let a = 4;\n    |\n    = note: the matched value is of type `u8`\n \n-error[E0005]: refutable pattern in local binding: `0u8..=1u8` and `3u8..=u8::MAX` not covered\n+error[E0005]: refutable pattern in local binding: `0_u8..=1_u8` and `3_u8..=u8::MAX` not covered\n   --> $DIR/const-pattern-irrefutable.rs:13:9\n    |\n LL |     pub const b: u8 = 2;\n@@ -26,7 +26,7 @@ LL |     let c = 4;\n    |\n    = note: the matched value is of type `u8`\n \n-error[E0005]: refutable pattern in local binding: `0u8..=1u8` and `3u8..=u8::MAX` not covered\n+error[E0005]: refutable pattern in local binding: `0_u8..=1_u8` and `3_u8..=u8::MAX` not covered\n   --> $DIR/const-pattern-irrefutable.rs:14:9\n    |\n LL |     pub const d: u8 = 2;"}, {"sha": "cde2fe32626922d8b8c5275c0c1d82d43c93cf57", "filename": "src/test/ui/consts/offset_from_ub.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -45,7 +45,7 @@ error: any use of this value will cause an error\n LL |           intrinsics::ptr_offset_from(self, origin)\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |           |\n-   |           exact_div: 1isize cannot be divided by 2isize without remainder\n+   |           exact_div: 1_isize cannot be divided by 2_isize without remainder\n    |           inside `std::ptr::const_ptr::<impl *const u16>::offset_from` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n    |           inside `NOT_MULTIPLE_OF_SIZE` at $DIR/offset_from_ub.rs:31:14\n    | "}, {"sha": "b31cf2ec447e7108796b61f24bb90ae9c11d4703", "filename": "src/test/ui/error-codes/E0080.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Ferror-codes%2FE0080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Ferror-codes%2FE0080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0080.rs?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -1,6 +1,6 @@\n enum Enum {\n     X = (1 << 500), //~ ERROR E0080\n-    //~| shift left with overflow\n+    //~| attempt to shift left by 500_i32 which would overflow\n     Y = (1 / 0) //~ ERROR E0080\n }\n "}, {"sha": "3acd15ff6bc9ecb6c7930a3db3e405a735bb787f", "filename": "src/test/ui/error-codes/E0080.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Ferror-codes%2FE0080.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Ferror-codes%2FE0080.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0080.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,13 +2,13 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/E0080.rs:2:9\n    |\n LL |     X = (1 << 500),\n-   |         ^^^^^^^^^^ attempt to shift left with overflow\n+   |         ^^^^^^^^^^ attempt to shift left by 500_i32 which would overflow\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/E0080.rs:4:9\n    |\n LL |     Y = (1 / 0)\n-   |         ^^^^^^^ attempt to divide by zero\n+   |         ^^^^^^^ attempt to divide 1_isize by zero\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4ef06c78069f2f86901e4b1b0b5f73b2c0c0470c", "filename": "src/test/ui/eval-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Feval-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Feval-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feval-enum.rs?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -1,9 +1,9 @@\n enum Test {\n     DivZero = 1/0,\n-    //~^ attempt to divide by zero\n+    //~^ attempt to divide 1_isize by zero\n     //~| ERROR evaluation of constant value failed\n     RemZero = 1%0,\n-    //~^ attempt to calculate the remainder with a divisor of zero\n+    //~^ attempt to calculate the remainder of 1_isize with a divisor of zero\n     //~| ERROR evaluation of constant value failed\n }\n "}, {"sha": "dd89a2d7c3bfc740566980e244c9adceda9803c5", "filename": "src/test/ui/eval-enum.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Feval-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Feval-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feval-enum.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,13 +2,13 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/eval-enum.rs:2:15\n    |\n LL |     DivZero = 1/0,\n-   |               ^^^ attempt to divide by zero\n+   |               ^^^ attempt to divide 1_isize by zero\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/eval-enum.rs:5:15\n    |\n LL |     RemZero = 1%0,\n-   |               ^^^ attempt to calculate the remainder with a divisor of zero\n+   |               ^^^ attempt to calculate the remainder of 1_isize with a divisor of zero\n \n error: aborting due to 2 previous errors\n "}, {"sha": "20b689aa5e0afc8273843335c3e5bc97edb8c6b4", "filename": "src/test/ui/for/for-loop-refutable-pattern-error-message.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Ffor%2Ffor-loop-refutable-pattern-error-message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Ffor%2Ffor-loop-refutable-pattern-error-message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-loop-refutable-pattern-error-message.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -1,8 +1,8 @@\n-error[E0005]: refutable pattern in `for` loop binding: `&i32::MIN..=0i32` and `&2i32..=i32::MAX` not covered\n+error[E0005]: refutable pattern in `for` loop binding: `&i32::MIN..=0_i32` and `&2_i32..=i32::MAX` not covered\n   --> $DIR/for-loop-refutable-pattern-error-message.rs:2:9\n    |\n LL |     for &1 in [1].iter() {}\n-   |         ^^ patterns `&i32::MIN..=0i32` and `&2i32..=i32::MAX` not covered\n+   |         ^^ patterns `&i32::MIN..=0_i32` and `&2_i32..=i32::MAX` not covered\n    |\n    = note: the matched value is of type `&i32`\n "}, {"sha": "5744232235dd151e8c777702759a2fa3c56ef5f4", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-exhaustive-fail.stderr", "status": "modified", "additions": 70, "deletions": 70, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -79,20 +79,20 @@ LL |         m!(0, ..core::u8::MAX);\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u8`\n \n-error[E0004]: non-exhaustive patterns: `254u8..=u8::MAX` not covered\n+error[E0004]: non-exhaustive patterns: `254_u8..=u8::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:42:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n-   |            ^ pattern `254u8..=u8::MAX` not covered\n+   |            ^ pattern `254_u8..=u8::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u8`\n \n-error[E0004]: non-exhaustive patterns: `0u8` not covered\n+error[E0004]: non-exhaustive patterns: `0_u8` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:43:12\n    |\n LL |         m!(0, ALMOST_MIN..);\n-   |            ^ pattern `0u8` not covered\n+   |            ^ pattern `0_u8` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u8`\n@@ -106,20 +106,20 @@ LL |         m!(0, ..=ALMOST_MAX);\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u8`\n \n-error[E0004]: non-exhaustive patterns: `43u8` not covered\n+error[E0004]: non-exhaustive patterns: `43_u8` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:45:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n-   |            ^ pattern `43u8` not covered\n+   |            ^ pattern `43_u8` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u8`\n \n-error[E0004]: non-exhaustive patterns: `43u8` not covered\n+error[E0004]: non-exhaustive patterns: `43_u8` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:46:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n-   |            ^ pattern `43u8` not covered\n+   |            ^ pattern `43_u8` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u8`\n@@ -133,20 +133,20 @@ LL |         m!(0, ..core::u16::MAX);\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u16`\n \n-error[E0004]: non-exhaustive patterns: `65534u16..=u16::MAX` not covered\n+error[E0004]: non-exhaustive patterns: `65534_u16..=u16::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:55:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n-   |            ^ pattern `65534u16..=u16::MAX` not covered\n+   |            ^ pattern `65534_u16..=u16::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u16`\n \n-error[E0004]: non-exhaustive patterns: `0u16` not covered\n+error[E0004]: non-exhaustive patterns: `0_u16` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:56:12\n    |\n LL |         m!(0, ALMOST_MIN..);\n-   |            ^ pattern `0u16` not covered\n+   |            ^ pattern `0_u16` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u16`\n@@ -160,20 +160,20 @@ LL |         m!(0, ..=ALMOST_MAX);\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u16`\n \n-error[E0004]: non-exhaustive patterns: `43u16` not covered\n+error[E0004]: non-exhaustive patterns: `43_u16` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:58:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n-   |            ^ pattern `43u16` not covered\n+   |            ^ pattern `43_u16` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u16`\n \n-error[E0004]: non-exhaustive patterns: `43u16` not covered\n+error[E0004]: non-exhaustive patterns: `43_u16` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:59:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n-   |            ^ pattern `43u16` not covered\n+   |            ^ pattern `43_u16` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u16`\n@@ -187,20 +187,20 @@ LL |         m!(0, ..core::u32::MAX);\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u32`\n \n-error[E0004]: non-exhaustive patterns: `4294967294u32..=u32::MAX` not covered\n+error[E0004]: non-exhaustive patterns: `4294967294_u32..=u32::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:68:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n-   |            ^ pattern `4294967294u32..=u32::MAX` not covered\n+   |            ^ pattern `4294967294_u32..=u32::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u32`\n \n-error[E0004]: non-exhaustive patterns: `0u32` not covered\n+error[E0004]: non-exhaustive patterns: `0_u32` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:69:12\n    |\n LL |         m!(0, ALMOST_MIN..);\n-   |            ^ pattern `0u32` not covered\n+   |            ^ pattern `0_u32` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u32`\n@@ -214,20 +214,20 @@ LL |         m!(0, ..=ALMOST_MAX);\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u32`\n \n-error[E0004]: non-exhaustive patterns: `43u32` not covered\n+error[E0004]: non-exhaustive patterns: `43_u32` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:71:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n-   |            ^ pattern `43u32` not covered\n+   |            ^ pattern `43_u32` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u32`\n \n-error[E0004]: non-exhaustive patterns: `43u32` not covered\n+error[E0004]: non-exhaustive patterns: `43_u32` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:72:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n-   |            ^ pattern `43u32` not covered\n+   |            ^ pattern `43_u32` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u32`\n@@ -241,20 +241,20 @@ LL |         m!(0, ..core::u64::MAX);\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u64`\n \n-error[E0004]: non-exhaustive patterns: `18446744073709551614u64..=u64::MAX` not covered\n+error[E0004]: non-exhaustive patterns: `18446744073709551614_u64..=u64::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:81:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n-   |            ^ pattern `18446744073709551614u64..=u64::MAX` not covered\n+   |            ^ pattern `18446744073709551614_u64..=u64::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u64`\n \n-error[E0004]: non-exhaustive patterns: `0u64` not covered\n+error[E0004]: non-exhaustive patterns: `0_u64` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:82:12\n    |\n LL |         m!(0, ALMOST_MIN..);\n-   |            ^ pattern `0u64` not covered\n+   |            ^ pattern `0_u64` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u64`\n@@ -268,20 +268,20 @@ LL |         m!(0, ..=ALMOST_MAX);\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u64`\n \n-error[E0004]: non-exhaustive patterns: `43u64` not covered\n+error[E0004]: non-exhaustive patterns: `43_u64` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:84:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n-   |            ^ pattern `43u64` not covered\n+   |            ^ pattern `43_u64` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u64`\n \n-error[E0004]: non-exhaustive patterns: `43u64` not covered\n+error[E0004]: non-exhaustive patterns: `43_u64` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:85:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n-   |            ^ pattern `43u64` not covered\n+   |            ^ pattern `43_u64` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u64`\n@@ -295,20 +295,20 @@ LL |         m!(0, ..core::u128::MAX);\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u128`\n \n-error[E0004]: non-exhaustive patterns: `340282366920938463463374607431768211454u128..=u128::MAX` not covered\n+error[E0004]: non-exhaustive patterns: `340282366920938463463374607431768211454_u128..=u128::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:94:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n-   |            ^ pattern `340282366920938463463374607431768211454u128..=u128::MAX` not covered\n+   |            ^ pattern `340282366920938463463374607431768211454_u128..=u128::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u128`\n \n-error[E0004]: non-exhaustive patterns: `0u128` not covered\n+error[E0004]: non-exhaustive patterns: `0_u128` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:95:12\n    |\n LL |         m!(0, ALMOST_MIN..);\n-   |            ^ pattern `0u128` not covered\n+   |            ^ pattern `0_u128` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u128`\n@@ -322,20 +322,20 @@ LL |         m!(0, ..=ALMOST_MAX);\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u128`\n \n-error[E0004]: non-exhaustive patterns: `43u128` not covered\n+error[E0004]: non-exhaustive patterns: `43_u128` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:97:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n-   |            ^ pattern `43u128` not covered\n+   |            ^ pattern `43_u128` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u128`\n \n-error[E0004]: non-exhaustive patterns: `43u128` not covered\n+error[E0004]: non-exhaustive patterns: `43_u128` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:98:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n-   |            ^ pattern `43u128` not covered\n+   |            ^ pattern `43_u128` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u128`\n@@ -349,11 +349,11 @@ LL |         m!(0, ..core::i8::MAX);\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i8`\n \n-error[E0004]: non-exhaustive patterns: `126i8..=i8::MAX` not covered\n+error[E0004]: non-exhaustive patterns: `126_i8..=i8::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:110:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n-   |            ^ pattern `126i8..=i8::MAX` not covered\n+   |            ^ pattern `126_i8..=i8::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i8`\n@@ -376,20 +376,20 @@ LL |         m!(0, ..=ALMOST_MAX);\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i8`\n \n-error[E0004]: non-exhaustive patterns: `43i8` not covered\n+error[E0004]: non-exhaustive patterns: `43_i8` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:113:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n-   |            ^ pattern `43i8` not covered\n+   |            ^ pattern `43_i8` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i8`\n \n-error[E0004]: non-exhaustive patterns: `43i8` not covered\n+error[E0004]: non-exhaustive patterns: `43_i8` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:114:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n-   |            ^ pattern `43i8` not covered\n+   |            ^ pattern `43_i8` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i8`\n@@ -403,11 +403,11 @@ LL |         m!(0, ..core::i16::MAX);\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i16`\n \n-error[E0004]: non-exhaustive patterns: `32766i16..=i16::MAX` not covered\n+error[E0004]: non-exhaustive patterns: `32766_i16..=i16::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:123:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n-   |            ^ pattern `32766i16..=i16::MAX` not covered\n+   |            ^ pattern `32766_i16..=i16::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i16`\n@@ -430,20 +430,20 @@ LL |         m!(0, ..=ALMOST_MAX);\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i16`\n \n-error[E0004]: non-exhaustive patterns: `43i16` not covered\n+error[E0004]: non-exhaustive patterns: `43_i16` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:126:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n-   |            ^ pattern `43i16` not covered\n+   |            ^ pattern `43_i16` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i16`\n \n-error[E0004]: non-exhaustive patterns: `43i16` not covered\n+error[E0004]: non-exhaustive patterns: `43_i16` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:127:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n-   |            ^ pattern `43i16` not covered\n+   |            ^ pattern `43_i16` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i16`\n@@ -457,11 +457,11 @@ LL |         m!(0, ..core::i32::MAX);\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i32`\n \n-error[E0004]: non-exhaustive patterns: `2147483646i32..=i32::MAX` not covered\n+error[E0004]: non-exhaustive patterns: `2147483646_i32..=i32::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:136:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n-   |            ^ pattern `2147483646i32..=i32::MAX` not covered\n+   |            ^ pattern `2147483646_i32..=i32::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i32`\n@@ -484,20 +484,20 @@ LL |         m!(0, ..=ALMOST_MAX);\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i32`\n \n-error[E0004]: non-exhaustive patterns: `43i32` not covered\n+error[E0004]: non-exhaustive patterns: `43_i32` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:139:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n-   |            ^ pattern `43i32` not covered\n+   |            ^ pattern `43_i32` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i32`\n \n-error[E0004]: non-exhaustive patterns: `43i32` not covered\n+error[E0004]: non-exhaustive patterns: `43_i32` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:140:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n-   |            ^ pattern `43i32` not covered\n+   |            ^ pattern `43_i32` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i32`\n@@ -511,11 +511,11 @@ LL |         m!(0, ..core::i64::MAX);\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i64`\n \n-error[E0004]: non-exhaustive patterns: `9223372036854775806i64..=i64::MAX` not covered\n+error[E0004]: non-exhaustive patterns: `9223372036854775806_i64..=i64::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:149:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n-   |            ^ pattern `9223372036854775806i64..=i64::MAX` not covered\n+   |            ^ pattern `9223372036854775806_i64..=i64::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i64`\n@@ -538,20 +538,20 @@ LL |         m!(0, ..=ALMOST_MAX);\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i64`\n \n-error[E0004]: non-exhaustive patterns: `43i64` not covered\n+error[E0004]: non-exhaustive patterns: `43_i64` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:152:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n-   |            ^ pattern `43i64` not covered\n+   |            ^ pattern `43_i64` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i64`\n \n-error[E0004]: non-exhaustive patterns: `43i64` not covered\n+error[E0004]: non-exhaustive patterns: `43_i64` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:153:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n-   |            ^ pattern `43i64` not covered\n+   |            ^ pattern `43_i64` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i64`\n@@ -565,11 +565,11 @@ LL |         m!(0, ..core::i128::MAX);\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i128`\n \n-error[E0004]: non-exhaustive patterns: `170141183460469231731687303715884105726i128..=i128::MAX` not covered\n+error[E0004]: non-exhaustive patterns: `170141183460469231731687303715884105726_i128..=i128::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:162:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n-   |            ^ pattern `170141183460469231731687303715884105726i128..=i128::MAX` not covered\n+   |            ^ pattern `170141183460469231731687303715884105726_i128..=i128::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i128`\n@@ -592,20 +592,20 @@ LL |         m!(0, ..=ALMOST_MAX);\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i128`\n \n-error[E0004]: non-exhaustive patterns: `43i128` not covered\n+error[E0004]: non-exhaustive patterns: `43_i128` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:165:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n-   |            ^ pattern `43i128` not covered\n+   |            ^ pattern `43_i128` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i128`\n \n-error[E0004]: non-exhaustive patterns: `43i128` not covered\n+error[E0004]: non-exhaustive patterns: `43_i128` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:166:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n-   |            ^ pattern `43i128` not covered\n+   |            ^ pattern `43_i128` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i128`"}, {"sha": "eb8d66790ccea455e0e18b5fc71147d0da371787", "filename": "src/test/ui/issues/issue-8460-const.noopt.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.noopt.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,149 +2,149 @@ error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:14:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^ attempt to divide with overflow\n+   |                                    ^^^^^^^^^^^^^^^ attempt to compute `isize::MIN / -1_isize` which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:16:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^ attempt to divide with overflow\n+   |                                    ^^^^^^^^^^^^ attempt to compute `i8::MIN / -1_i8` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:18:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute `i16::MIN / -1_i16` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:20:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute `i32::MIN / -1_i32` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:22:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute `i64::MIN / -1_i64` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:24:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^ attempt to divide with overflow\n+   |                                    ^^^^^^^^^^^^^^ attempt to compute `i128::MIN / -1_i128` which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:26:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^ attempt to divide by zero\n+   |                                    ^^^^^^^^^^ attempt to divide 1_isize by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:28:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n-   |                                    ^^^^^^^ attempt to divide by zero\n+   |                                    ^^^^^^^ attempt to divide 1_i8 by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:30:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide by zero\n+   |                                    ^^^^^^^^ attempt to divide 1_i16 by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:32:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide by zero\n+   |                                    ^^^^^^^^ attempt to divide 1_i32 by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:34:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide by zero\n+   |                                    ^^^^^^^^ attempt to divide 1_i64 by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:36:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^ attempt to divide by zero\n+   |                                    ^^^^^^^^^ attempt to divide 1_i128 by zero\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:38:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+   |                                    ^^^^^^^^^^^^^^^ attempt to compute the remainder of `isize::MIN % -1_isize` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:40:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+   |                                    ^^^^^^^^^^^^ attempt to compute the remainder of `i8::MIN % -1_i8` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:42:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i16::MIN % -1_i16` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:44:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i32::MIN % -1_i32` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:46:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:48:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+   |                                    ^^^^^^^^^^^^^^ attempt to compute the remainder of `i128::MIN % -1_i128` which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:50:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+   |                                    ^^^^^^^^^^ attempt to calculate the remainder of 1_isize with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:52:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n-   |                                    ^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+   |                                    ^^^^^^^ attempt to calculate the remainder of 1_i8 with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:54:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+   |                                    ^^^^^^^^ attempt to calculate the remainder of 1_i16 with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:56:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+   |                                    ^^^^^^^^ attempt to calculate the remainder of 1_i32 with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:58:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+   |                                    ^^^^^^^^ attempt to calculate the remainder of 1_i64 with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:60:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+   |                                    ^^^^^^^^^ attempt to calculate the remainder of 1_i128 with a divisor of zero\n \n error: aborting due to 24 previous errors\n "}, {"sha": "eb8d66790ccea455e0e18b5fc71147d0da371787", "filename": "src/test/ui/issues/issue-8460-const.opt.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,149 +2,149 @@ error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:14:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^ attempt to divide with overflow\n+   |                                    ^^^^^^^^^^^^^^^ attempt to compute `isize::MIN / -1_isize` which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:16:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^ attempt to divide with overflow\n+   |                                    ^^^^^^^^^^^^ attempt to compute `i8::MIN / -1_i8` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:18:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute `i16::MIN / -1_i16` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:20:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute `i32::MIN / -1_i32` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:22:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute `i64::MIN / -1_i64` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:24:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^ attempt to divide with overflow\n+   |                                    ^^^^^^^^^^^^^^ attempt to compute `i128::MIN / -1_i128` which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:26:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^ attempt to divide by zero\n+   |                                    ^^^^^^^^^^ attempt to divide 1_isize by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:28:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n-   |                                    ^^^^^^^ attempt to divide by zero\n+   |                                    ^^^^^^^ attempt to divide 1_i8 by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:30:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide by zero\n+   |                                    ^^^^^^^^ attempt to divide 1_i16 by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:32:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide by zero\n+   |                                    ^^^^^^^^ attempt to divide 1_i32 by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:34:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide by zero\n+   |                                    ^^^^^^^^ attempt to divide 1_i64 by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:36:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^ attempt to divide by zero\n+   |                                    ^^^^^^^^^ attempt to divide 1_i128 by zero\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:38:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+   |                                    ^^^^^^^^^^^^^^^ attempt to compute the remainder of `isize::MIN % -1_isize` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:40:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+   |                                    ^^^^^^^^^^^^ attempt to compute the remainder of `i8::MIN % -1_i8` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:42:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i16::MIN % -1_i16` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:44:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i32::MIN % -1_i32` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:46:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:48:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+   |                                    ^^^^^^^^^^^^^^ attempt to compute the remainder of `i128::MIN % -1_i128` which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:50:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+   |                                    ^^^^^^^^^^ attempt to calculate the remainder of 1_isize with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:52:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n-   |                                    ^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+   |                                    ^^^^^^^ attempt to calculate the remainder of 1_i8 with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:54:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+   |                                    ^^^^^^^^ attempt to calculate the remainder of 1_i16 with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:56:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+   |                                    ^^^^^^^^ attempt to calculate the remainder of 1_i32 with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:58:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+   |                                    ^^^^^^^^ attempt to calculate the remainder of 1_i64 with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:60:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+   |                                    ^^^^^^^^^ attempt to calculate the remainder of 1_i128 with a divisor of zero\n \n error: aborting due to 24 previous errors\n "}, {"sha": "eb8d66790ccea455e0e18b5fc71147d0da371787", "filename": "src/test/ui/issues/issue-8460-const.opt_with_overflow_checks.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt_with_overflow_checks.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,149 +2,149 @@ error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:14:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^ attempt to divide with overflow\n+   |                                    ^^^^^^^^^^^^^^^ attempt to compute `isize::MIN / -1_isize` which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:16:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^ attempt to divide with overflow\n+   |                                    ^^^^^^^^^^^^ attempt to compute `i8::MIN / -1_i8` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:18:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute `i16::MIN / -1_i16` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:20:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute `i32::MIN / -1_i32` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:22:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute `i64::MIN / -1_i64` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:24:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^ attempt to divide with overflow\n+   |                                    ^^^^^^^^^^^^^^ attempt to compute `i128::MIN / -1_i128` which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:26:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^ attempt to divide by zero\n+   |                                    ^^^^^^^^^^ attempt to divide 1_isize by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:28:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n-   |                                    ^^^^^^^ attempt to divide by zero\n+   |                                    ^^^^^^^ attempt to divide 1_i8 by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:30:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide by zero\n+   |                                    ^^^^^^^^ attempt to divide 1_i16 by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:32:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide by zero\n+   |                                    ^^^^^^^^ attempt to divide 1_i32 by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:34:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide by zero\n+   |                                    ^^^^^^^^ attempt to divide 1_i64 by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:36:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^ attempt to divide by zero\n+   |                                    ^^^^^^^^^ attempt to divide 1_i128 by zero\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:38:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+   |                                    ^^^^^^^^^^^^^^^ attempt to compute the remainder of `isize::MIN % -1_isize` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:40:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+   |                                    ^^^^^^^^^^^^ attempt to compute the remainder of `i8::MIN % -1_i8` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:42:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i16::MIN % -1_i16` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:44:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i32::MIN % -1_i32` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:46:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64` which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:48:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+   |                                    ^^^^^^^^^^^^^^ attempt to compute the remainder of `i128::MIN % -1_i128` which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:50:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+   |                                    ^^^^^^^^^^ attempt to calculate the remainder of 1_isize with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:52:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n-   |                                    ^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+   |                                    ^^^^^^^ attempt to calculate the remainder of 1_i8 with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:54:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+   |                                    ^^^^^^^^ attempt to calculate the remainder of 1_i16 with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:56:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+   |                                    ^^^^^^^^ attempt to calculate the remainder of 1_i32 with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:58:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+   |                                    ^^^^^^^^ attempt to calculate the remainder of 1_i64 with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:60:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+   |                                    ^^^^^^^^^ attempt to calculate the remainder of 1_i128 with a divisor of zero\n \n error: aborting due to 24 previous errors\n "}, {"sha": "d33b99bdc43870f85f97d719a7fa582036be8216", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.noopt.stderr", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.noopt.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -1,152 +1,152 @@\n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:17:20\n+  --> $DIR/lint-exceeding-bitshifts.rs:18:20\n    |\n LL |     const N: i32 = T::N << 42;\n-   |                    ^^^^^^^^^^ attempt to shift left with overflow\n+   |                    ^^^^^^^^^^ attempt to shift left by 42_i32 which would overflow\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-exceeding-bitshifts.rs:9:9\n+  --> $DIR/lint-exceeding-bitshifts.rs:10:9\n    |\n LL | #![warn(arithmetic_overflow, const_err)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:21:13\n+  --> $DIR/lint-exceeding-bitshifts.rs:22:13\n    |\n LL |     let _ = x << 42;\n-   |             ^^^^^^^ attempt to shift left with overflow\n+   |             ^^^^^^^ attempt to shift left by 42_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:26:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:27:15\n    |\n LL |       let n = 1u8 << 8;\n-   |               ^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^ attempt to shift left by 8_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:28:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:29:15\n    |\n LL |       let n = 1u16 << 16;\n-   |               ^^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^^ attempt to shift left by 16_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:30:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:31:15\n    |\n LL |       let n = 1u32 << 32;\n-   |               ^^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^^ attempt to shift left by 32_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:32:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:33:15\n    |\n LL |       let n = 1u64 << 64;\n-   |               ^^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^^ attempt to shift left by 64_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:34:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:35:15\n    |\n LL |       let n = 1i8 << 8;\n-   |               ^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^ attempt to shift left by 8_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:36:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:37:15\n    |\n LL |       let n = 1i16 << 16;\n-   |               ^^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^^ attempt to shift left by 16_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:38:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:39:15\n    |\n LL |       let n = 1i32 << 32;\n-   |               ^^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^^ attempt to shift left by 32_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:40:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:41:15\n    |\n LL |       let n = 1i64 << 64;\n-   |               ^^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^^ attempt to shift left by 64_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:43:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:44:15\n    |\n LL |       let n = 1u8 >> 8;\n-   |               ^^^^^^^^ attempt to shift right with overflow\n+   |               ^^^^^^^^ attempt to shift right by 8_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:45:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:46:15\n    |\n LL |       let n = 1u16 >> 16;\n-   |               ^^^^^^^^^^ attempt to shift right with overflow\n+   |               ^^^^^^^^^^ attempt to shift right by 16_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:47:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:48:15\n    |\n LL |       let n = 1u32 >> 32;\n-   |               ^^^^^^^^^^ attempt to shift right with overflow\n+   |               ^^^^^^^^^^ attempt to shift right by 32_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:49:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:50:15\n    |\n LL |       let n = 1u64 >> 64;\n-   |               ^^^^^^^^^^ attempt to shift right with overflow\n+   |               ^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:51:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:52:15\n    |\n LL |       let n = 1i8 >> 8;\n-   |               ^^^^^^^^ attempt to shift right with overflow\n+   |               ^^^^^^^^ attempt to shift right by 8_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:53:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:54:15\n    |\n LL |       let n = 1i16 >> 16;\n-   |               ^^^^^^^^^^ attempt to shift right with overflow\n+   |               ^^^^^^^^^^ attempt to shift right by 16_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:55:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:56:15\n    |\n LL |       let n = 1i32 >> 32;\n-   |               ^^^^^^^^^^ attempt to shift right with overflow\n+   |               ^^^^^^^^^^ attempt to shift right by 32_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:57:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:58:15\n    |\n LL |       let n = 1i64 >> 64;\n-   |               ^^^^^^^^^^ attempt to shift right with overflow\n+   |               ^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:61:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:62:15\n    |\n LL |       let n = n << 8;\n-   |               ^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^ attempt to shift left by 8_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:63:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:64:15\n    |\n LL |       let n = 1u8 << -8;\n-   |               ^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^ attempt to shift left by -8_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:68:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:69:15\n    |\n LL |       let n = 1u8 << (4+4);\n-   |               ^^^^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^^^^ attempt to shift left by 8_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:70:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:71:15\n    |\n LL |       let n = 1i64 >> [64][0];\n-   |               ^^^^^^^^^^^^^^^ attempt to shift right with overflow\n+   |               ^^^^^^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:76:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:77:15\n    |\n LL |       let n = 1_isize << BITS;\n-   |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left by %BITS% which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:77:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:78:15\n    |\n LL |       let n = 1_usize << BITS;\n-   |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left by %BITS% which would overflow\n \n warning: 24 warnings emitted\n "}, {"sha": "d33b99bdc43870f85f97d719a7fa582036be8216", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.opt.stderr", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -1,152 +1,152 @@\n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:17:20\n+  --> $DIR/lint-exceeding-bitshifts.rs:18:20\n    |\n LL |     const N: i32 = T::N << 42;\n-   |                    ^^^^^^^^^^ attempt to shift left with overflow\n+   |                    ^^^^^^^^^^ attempt to shift left by 42_i32 which would overflow\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-exceeding-bitshifts.rs:9:9\n+  --> $DIR/lint-exceeding-bitshifts.rs:10:9\n    |\n LL | #![warn(arithmetic_overflow, const_err)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:21:13\n+  --> $DIR/lint-exceeding-bitshifts.rs:22:13\n    |\n LL |     let _ = x << 42;\n-   |             ^^^^^^^ attempt to shift left with overflow\n+   |             ^^^^^^^ attempt to shift left by 42_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:26:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:27:15\n    |\n LL |       let n = 1u8 << 8;\n-   |               ^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^ attempt to shift left by 8_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:28:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:29:15\n    |\n LL |       let n = 1u16 << 16;\n-   |               ^^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^^ attempt to shift left by 16_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:30:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:31:15\n    |\n LL |       let n = 1u32 << 32;\n-   |               ^^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^^ attempt to shift left by 32_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:32:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:33:15\n    |\n LL |       let n = 1u64 << 64;\n-   |               ^^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^^ attempt to shift left by 64_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:34:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:35:15\n    |\n LL |       let n = 1i8 << 8;\n-   |               ^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^ attempt to shift left by 8_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:36:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:37:15\n    |\n LL |       let n = 1i16 << 16;\n-   |               ^^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^^ attempt to shift left by 16_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:38:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:39:15\n    |\n LL |       let n = 1i32 << 32;\n-   |               ^^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^^ attempt to shift left by 32_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:40:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:41:15\n    |\n LL |       let n = 1i64 << 64;\n-   |               ^^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^^ attempt to shift left by 64_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:43:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:44:15\n    |\n LL |       let n = 1u8 >> 8;\n-   |               ^^^^^^^^ attempt to shift right with overflow\n+   |               ^^^^^^^^ attempt to shift right by 8_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:45:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:46:15\n    |\n LL |       let n = 1u16 >> 16;\n-   |               ^^^^^^^^^^ attempt to shift right with overflow\n+   |               ^^^^^^^^^^ attempt to shift right by 16_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:47:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:48:15\n    |\n LL |       let n = 1u32 >> 32;\n-   |               ^^^^^^^^^^ attempt to shift right with overflow\n+   |               ^^^^^^^^^^ attempt to shift right by 32_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:49:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:50:15\n    |\n LL |       let n = 1u64 >> 64;\n-   |               ^^^^^^^^^^ attempt to shift right with overflow\n+   |               ^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:51:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:52:15\n    |\n LL |       let n = 1i8 >> 8;\n-   |               ^^^^^^^^ attempt to shift right with overflow\n+   |               ^^^^^^^^ attempt to shift right by 8_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:53:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:54:15\n    |\n LL |       let n = 1i16 >> 16;\n-   |               ^^^^^^^^^^ attempt to shift right with overflow\n+   |               ^^^^^^^^^^ attempt to shift right by 16_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:55:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:56:15\n    |\n LL |       let n = 1i32 >> 32;\n-   |               ^^^^^^^^^^ attempt to shift right with overflow\n+   |               ^^^^^^^^^^ attempt to shift right by 32_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:57:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:58:15\n    |\n LL |       let n = 1i64 >> 64;\n-   |               ^^^^^^^^^^ attempt to shift right with overflow\n+   |               ^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:61:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:62:15\n    |\n LL |       let n = n << 8;\n-   |               ^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^ attempt to shift left by 8_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:63:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:64:15\n    |\n LL |       let n = 1u8 << -8;\n-   |               ^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^ attempt to shift left by -8_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:68:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:69:15\n    |\n LL |       let n = 1u8 << (4+4);\n-   |               ^^^^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^^^^ attempt to shift left by 8_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:70:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:71:15\n    |\n LL |       let n = 1i64 >> [64][0];\n-   |               ^^^^^^^^^^^^^^^ attempt to shift right with overflow\n+   |               ^^^^^^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:76:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:77:15\n    |\n LL |       let n = 1_isize << BITS;\n-   |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left by %BITS% which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:77:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:78:15\n    |\n LL |       let n = 1_usize << BITS;\n-   |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left by %BITS% which would overflow\n \n warning: 24 warnings emitted\n "}, {"sha": "d33b99bdc43870f85f97d719a7fa582036be8216", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.opt_with_overflow_checks.stderr", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt_with_overflow_checks.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -1,152 +1,152 @@\n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:17:20\n+  --> $DIR/lint-exceeding-bitshifts.rs:18:20\n    |\n LL |     const N: i32 = T::N << 42;\n-   |                    ^^^^^^^^^^ attempt to shift left with overflow\n+   |                    ^^^^^^^^^^ attempt to shift left by 42_i32 which would overflow\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-exceeding-bitshifts.rs:9:9\n+  --> $DIR/lint-exceeding-bitshifts.rs:10:9\n    |\n LL | #![warn(arithmetic_overflow, const_err)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:21:13\n+  --> $DIR/lint-exceeding-bitshifts.rs:22:13\n    |\n LL |     let _ = x << 42;\n-   |             ^^^^^^^ attempt to shift left with overflow\n+   |             ^^^^^^^ attempt to shift left by 42_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:26:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:27:15\n    |\n LL |       let n = 1u8 << 8;\n-   |               ^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^ attempt to shift left by 8_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:28:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:29:15\n    |\n LL |       let n = 1u16 << 16;\n-   |               ^^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^^ attempt to shift left by 16_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:30:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:31:15\n    |\n LL |       let n = 1u32 << 32;\n-   |               ^^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^^ attempt to shift left by 32_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:32:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:33:15\n    |\n LL |       let n = 1u64 << 64;\n-   |               ^^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^^ attempt to shift left by 64_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:34:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:35:15\n    |\n LL |       let n = 1i8 << 8;\n-   |               ^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^ attempt to shift left by 8_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:36:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:37:15\n    |\n LL |       let n = 1i16 << 16;\n-   |               ^^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^^ attempt to shift left by 16_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:38:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:39:15\n    |\n LL |       let n = 1i32 << 32;\n-   |               ^^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^^ attempt to shift left by 32_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:40:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:41:15\n    |\n LL |       let n = 1i64 << 64;\n-   |               ^^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^^ attempt to shift left by 64_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:43:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:44:15\n    |\n LL |       let n = 1u8 >> 8;\n-   |               ^^^^^^^^ attempt to shift right with overflow\n+   |               ^^^^^^^^ attempt to shift right by 8_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:45:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:46:15\n    |\n LL |       let n = 1u16 >> 16;\n-   |               ^^^^^^^^^^ attempt to shift right with overflow\n+   |               ^^^^^^^^^^ attempt to shift right by 16_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:47:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:48:15\n    |\n LL |       let n = 1u32 >> 32;\n-   |               ^^^^^^^^^^ attempt to shift right with overflow\n+   |               ^^^^^^^^^^ attempt to shift right by 32_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:49:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:50:15\n    |\n LL |       let n = 1u64 >> 64;\n-   |               ^^^^^^^^^^ attempt to shift right with overflow\n+   |               ^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:51:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:52:15\n    |\n LL |       let n = 1i8 >> 8;\n-   |               ^^^^^^^^ attempt to shift right with overflow\n+   |               ^^^^^^^^ attempt to shift right by 8_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:53:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:54:15\n    |\n LL |       let n = 1i16 >> 16;\n-   |               ^^^^^^^^^^ attempt to shift right with overflow\n+   |               ^^^^^^^^^^ attempt to shift right by 16_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:55:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:56:15\n    |\n LL |       let n = 1i32 >> 32;\n-   |               ^^^^^^^^^^ attempt to shift right with overflow\n+   |               ^^^^^^^^^^ attempt to shift right by 32_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:57:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:58:15\n    |\n LL |       let n = 1i64 >> 64;\n-   |               ^^^^^^^^^^ attempt to shift right with overflow\n+   |               ^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:61:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:62:15\n    |\n LL |       let n = n << 8;\n-   |               ^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^ attempt to shift left by 8_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:63:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:64:15\n    |\n LL |       let n = 1u8 << -8;\n-   |               ^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^ attempt to shift left by -8_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:68:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:69:15\n    |\n LL |       let n = 1u8 << (4+4);\n-   |               ^^^^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^^^^ attempt to shift left by 8_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:70:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:71:15\n    |\n LL |       let n = 1i64 >> [64][0];\n-   |               ^^^^^^^^^^^^^^^ attempt to shift right with overflow\n+   |               ^^^^^^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:76:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:77:15\n    |\n LL |       let n = 1_isize << BITS;\n-   |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left by %BITS% which would overflow\n \n warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:77:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:78:15\n    |\n LL |       let n = 1_usize << BITS;\n-   |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left by %BITS% which would overflow\n \n warning: 24 warnings emitted\n "}, {"sha": "a76ca93f8e1a3885606400bfecb61542ff57b4b7", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -4,6 +4,7 @@\n //[opt_with_overflow_checks]compile-flags: -C overflow-checks=on -O\n // build-pass\n // ignore-pass (test emits codegen-time warnings and verifies that they are not errors)\n+// normalize-stderr-test \"shift left by (64|32)_usize which\" -> \"shift left by %BITS% which\"\n \n #![crate_type=\"lib\"]\n #![warn(arithmetic_overflow, const_err)]"}, {"sha": "b4f74a52a74cd1f412973e4de93fe03c9433ea67", "filename": "src/test/ui/mir/mir_detects_invalid_ops.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fmir%2Fmir_detects_invalid_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fmir%2Fmir_detects_invalid_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_detects_invalid_ops.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,15 +2,15 @@ error: this operation will panic at runtime\n   --> $DIR/mir_detects_invalid_ops.rs:11:14\n    |\n LL |     let _z = 1 / y;\n-   |              ^^^^^ attempt to divide by zero\n+   |              ^^^^^ attempt to divide 1_i32 by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n   --> $DIR/mir_detects_invalid_ops.rs:16:14\n    |\n LL |     let _z = 1 % y;\n-   |              ^^^^^ attempt to calculate the remainder with a divisor of zero\n+   |              ^^^^^ attempt to calculate the remainder of 1_i32 with a divisor of zero\n \n error: aborting due to 2 previous errors\n "}, {"sha": "995afeeed880ccf5083867512109b8890ecc1a2c", "filename": "src/test/ui/numbers-arithmetic/overflowing-lsh-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-1.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-lsh-1.rs:7:14\n    |\n LL |     let _x = 1_i32 << 32;\n-   |              ^^^^^^^^^^^ attempt to shift left with overflow\n+   |              ^^^^^^^^^^^ attempt to shift left by 32_i32 which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-lsh-1.rs:4:9"}, {"sha": "e6f6b1ccd192dace68367da03fb7c404bde605e3", "filename": "src/test/ui/numbers-arithmetic/overflowing-lsh-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-2.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-lsh-2.rs:7:14\n    |\n LL |     let _x = 1 << -1;\n-   |              ^^^^^^^ attempt to shift left with overflow\n+   |              ^^^^^^^ attempt to shift left by -1_i32 which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-lsh-2.rs:4:9"}, {"sha": "e57b892b8085da2149156fb3d7762b28a65ff58d", "filename": "src/test/ui/numbers-arithmetic/overflowing-lsh-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-3.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-lsh-3.rs:7:14\n    |\n LL |     let _x = 1_u64 << 64;\n-   |              ^^^^^^^^^^^ attempt to shift left with overflow\n+   |              ^^^^^^^^^^^ attempt to shift left by 64_i32 which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-lsh-3.rs:4:9"}, {"sha": "f20b41c1baa4f76015006ab03bfc3c85ff87d526", "filename": "src/test/ui/numbers-arithmetic/overflowing-lsh-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-4.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-lsh-4.rs:11:13\n    |\n LL |     let x = 1_i8 << 17;\n-   |             ^^^^^^^^^^ attempt to shift left with overflow\n+   |             ^^^^^^^^^^ attempt to shift left by 17_i32 which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-lsh-4.rs:7:9"}, {"sha": "18861a1b96fa870bf7b7043121ec93e7346a2ace", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-1.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-rsh-1.rs:7:14\n    |\n LL |     let _x = -1_i32 >> 32;\n-   |              ^^^^^^^^^^^^ attempt to shift right with overflow\n+   |              ^^^^^^^^^^^^ attempt to shift right by 32_i32 which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-rsh-1.rs:4:9"}, {"sha": "a2fb2b90535c30fbaac861752152f470a8941ea6", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-2.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-rsh-2.rs:7:14\n    |\n LL |     let _x = -1_i32 >> -1;\n-   |              ^^^^^^^^^^^^ attempt to shift right with overflow\n+   |              ^^^^^^^^^^^^ attempt to shift right by -1_i32 which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-rsh-2.rs:4:9"}, {"sha": "24588b4a6b9b6719b803b79bc92353261a4450f7", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-3.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-rsh-3.rs:7:14\n    |\n LL |     let _x = -1_i64 >> 64;\n-   |              ^^^^^^^^^^^^ attempt to shift right with overflow\n+   |              ^^^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-rsh-3.rs:4:9"}, {"sha": "3f59653ea6075568d9bf16be3c269ea1c339d3ad", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-4.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-rsh-4.rs:11:13\n    |\n LL |     let x = 2_i8 >> 17;\n-   |             ^^^^^^^^^^ attempt to shift right with overflow\n+   |             ^^^^^^^^^^ attempt to shift right by 17_i32 which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-rsh-4.rs:7:9"}, {"sha": "8b0daf1551e4bab57c19a26b4d977eebf8617cf4", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-5.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-rsh-5.rs:7:14\n    |\n LL |     let _n = 1i64 >> [64][0];\n-   |              ^^^^^^^^^^^^^^^ attempt to shift right with overflow\n+   |              ^^^^^^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-rsh-5.rs:4:9"}, {"sha": "53a1445b54e387171e37550aa8ddf688fb09d178", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-6.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-rsh-6.rs:7:14\n    |\n LL |     let _n = 1i64 >> [64][0];\n-   |              ^^^^^^^^^^^^^^^ attempt to shift right with overflow\n+   |              ^^^^^^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-rsh-6.rs:4:9"}, {"sha": "f2d5de75b65bd37f36852edffe4c9a2657fdc1bf", "filename": "src/test/ui/or-patterns/exhaustiveness-non-exhaustive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.rs?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -4,15 +4,15 @@\n // We wrap patterns in a tuple because top-level or-patterns were special-cased.\n fn main() {\n     match (0u8, 0u8) {\n-        //~^ ERROR non-exhaustive patterns: `(2u8..=u8::MAX, _)`\n+        //~^ ERROR non-exhaustive patterns: `(2_u8..=u8::MAX, _)`\n         (0 | 1, 2 | 3) => {}\n     }\n     match ((0u8,),) {\n-        //~^ ERROR non-exhaustive patterns: `((4u8..=u8::MAX))`\n+        //~^ ERROR non-exhaustive patterns: `((4_u8..=u8::MAX))`\n         ((0 | 1,) | (2 | 3,),) => {}\n     }\n     match (Some(0u8),) {\n-        //~^ ERROR non-exhaustive patterns: `(Some(2u8..=u8::MAX))`\n+        //~^ ERROR non-exhaustive patterns: `(Some(2_u8..=u8::MAX))`\n         (None | Some(0 | 1),) => {}\n     }\n }"}, {"sha": "7e8bb73190747fd19e1efb397d740254f339a441", "filename": "src/test/ui/or-patterns/exhaustiveness-non-exhaustive.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -1,26 +1,26 @@\n-error[E0004]: non-exhaustive patterns: `(2u8..=u8::MAX, _)` not covered\n+error[E0004]: non-exhaustive patterns: `(2_u8..=u8::MAX, _)` not covered\n   --> $DIR/exhaustiveness-non-exhaustive.rs:6:11\n    |\n LL |     match (0u8, 0u8) {\n-   |           ^^^^^^^^^^ pattern `(2u8..=u8::MAX, _)` not covered\n+   |           ^^^^^^^^^^ pattern `(2_u8..=u8::MAX, _)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `(u8, u8)`\n \n-error[E0004]: non-exhaustive patterns: `((4u8..=u8::MAX))` not covered\n+error[E0004]: non-exhaustive patterns: `((4_u8..=u8::MAX))` not covered\n   --> $DIR/exhaustiveness-non-exhaustive.rs:10:11\n    |\n LL |     match ((0u8,),) {\n-   |           ^^^^^^^^^ pattern `((4u8..=u8::MAX))` not covered\n+   |           ^^^^^^^^^ pattern `((4_u8..=u8::MAX))` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `((u8,),)`\n \n-error[E0004]: non-exhaustive patterns: `(Some(2u8..=u8::MAX))` not covered\n+error[E0004]: non-exhaustive patterns: `(Some(2_u8..=u8::MAX))` not covered\n   --> $DIR/exhaustiveness-non-exhaustive.rs:14:11\n    |\n LL |     match (Some(0u8),) {\n-   |           ^^^^^^^^^^^^ pattern `(Some(2u8..=u8::MAX))` not covered\n+   |           ^^^^^^^^^^^^ pattern `(Some(2_u8..=u8::MAX))` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `(std::option::Option<u8>,)`"}, {"sha": "2acf1f41c6fa60c1a11492235eda8f27ebc7d2f1", "filename": "src/test/ui/or-patterns/issue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -1,8 +1,8 @@\n-error[E0005]: refutable pattern in local binding: `i32::MIN..=-1i32` and `3i32..=i32::MAX` not covered\n+error[E0005]: refutable pattern in local binding: `i32::MIN..=-1_i32` and `3_i32..=i32::MAX` not covered\n   --> $DIR/issue-69875-should-have-been-expanded-earlier-non-exhaustive.rs:4:9\n    |\n LL |     let 0 | (1 | 2) = 0;\n-   |         ^^^^^^^^^^^ patterns `i32::MIN..=-1i32` and `3i32..=i32::MAX` not covered\n+   |         ^^^^^^^^^^^ patterns `i32::MIN..=-1_i32` and `3_i32..=i32::MAX` not covered\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n@@ -12,11 +12,11 @@ help: you might want to use `if let` to ignore the variant that isn't matched\n LL |     if let 0 | (1 | 2) = 0 { /* */ }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0004]: non-exhaustive patterns: `i32::MIN..=-1i32` and `3i32..=i32::MAX` not covered\n+error[E0004]: non-exhaustive patterns: `i32::MIN..=-1_i32` and `3_i32..=i32::MAX` not covered\n   --> $DIR/issue-69875-should-have-been-expanded-earlier-non-exhaustive.rs:5:11\n    |\n LL |     match 0 {\n-   |           ^ patterns `i32::MIN..=-1i32` and `3i32..=i32::MAX` not covered\n+   |           ^ patterns `i32::MIN..=-1_i32` and `3_i32..=i32::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i32`"}, {"sha": "161ac477183c32b9294ec4baeaf9f9bee1c52eca", "filename": "src/test/ui/pattern/usefulness/exhaustive_integer_patterns.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fexhaustive_integer_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fexhaustive_integer_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fexhaustive_integer_patterns.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -10,20 +10,20 @@ note: the lint level is defined here\n LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error[E0004]: non-exhaustive patterns: `128u8..=u8::MAX` not covered\n+error[E0004]: non-exhaustive patterns: `128_u8..=u8::MAX` not covered\n   --> $DIR/exhaustive_integer_patterns.rs:28:11\n    |\n LL |     match x {\n-   |           ^ pattern `128u8..=u8::MAX` not covered\n+   |           ^ pattern `128_u8..=u8::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u8`\n \n-error[E0004]: non-exhaustive patterns: `11u8..=19u8`, `31u8..=34u8`, `36u8..=69u8` and 1 more not covered\n+error[E0004]: non-exhaustive patterns: `11_u8..=19_u8`, `31_u8..=34_u8`, `36_u8..=69_u8` and 1 more not covered\n   --> $DIR/exhaustive_integer_patterns.rs:33:11\n    |\n LL |     match x {\n-   |           ^ patterns `11u8..=19u8`, `31u8..=34u8`, `36u8..=69u8` and 1 more not covered\n+   |           ^ patterns `11_u8..=19_u8`, `31_u8..=34_u8`, `36_u8..=69_u8` and 1 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u8`\n@@ -34,11 +34,11 @@ error: unreachable pattern\n LL |         -2..=20 => {}\n    |         ^^^^^^^\n \n-error[E0004]: non-exhaustive patterns: `i8::MIN..=-8i8`, `-6i8`, `121i8..=124i8` and 1 more not covered\n+error[E0004]: non-exhaustive patterns: `i8::MIN..=-8_i8`, `-6_i8`, `121_i8..=124_i8` and 1 more not covered\n   --> $DIR/exhaustive_integer_patterns.rs:41:11\n    |\n LL |     match x {\n-   |           ^ patterns `i8::MIN..=-8i8`, `-6i8`, `121i8..=124i8` and 1 more not covered\n+   |           ^ patterns `i8::MIN..=-8_i8`, `-6_i8`, `121_i8..=124_i8` and 1 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i8`\n@@ -52,38 +52,38 @@ LL |     match 0i8 {\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i8`\n \n-error[E0004]: non-exhaustive patterns: `0i16` not covered\n+error[E0004]: non-exhaustive patterns: `0_i16` not covered\n   --> $DIR/exhaustive_integer_patterns.rs:91:11\n    |\n LL |     match 0i16 {\n-   |           ^^^^ pattern `0i16` not covered\n+   |           ^^^^ pattern `0_i16` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i16`\n \n-error[E0004]: non-exhaustive patterns: `128u8..=u8::MAX` not covered\n+error[E0004]: non-exhaustive patterns: `128_u8..=u8::MAX` not covered\n   --> $DIR/exhaustive_integer_patterns.rs:109:11\n    |\n LL |     match 0u8 {\n-   |           ^^^ pattern `128u8..=u8::MAX` not covered\n+   |           ^^^ pattern `128_u8..=u8::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u8`\n \n-error[E0004]: non-exhaustive patterns: `(0u8, Some(_))` and `(2u8..=u8::MAX, Some(_))` not covered\n+error[E0004]: non-exhaustive patterns: `(0_u8, Some(_))` and `(2_u8..=u8::MAX, Some(_))` not covered\n   --> $DIR/exhaustive_integer_patterns.rs:121:11\n    |\n LL |     match (0u8, Some(())) {\n-   |           ^^^^^^^^^^^^^^^ patterns `(0u8, Some(_))` and `(2u8..=u8::MAX, Some(_))` not covered\n+   |           ^^^^^^^^^^^^^^^ patterns `(0_u8, Some(_))` and `(2_u8..=u8::MAX, Some(_))` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `(u8, std::option::Option<()>)`\n \n-error[E0004]: non-exhaustive patterns: `(126u8..=127u8, false)` not covered\n+error[E0004]: non-exhaustive patterns: `(126_u8..=127_u8, false)` not covered\n   --> $DIR/exhaustive_integer_patterns.rs:126:11\n    |\n LL |     match (0u8, true) {\n-   |           ^^^^^^^^^^^ pattern `(126u8..=127u8, false)` not covered\n+   |           ^^^^^^^^^^^ pattern `(126_u8..=127_u8, false)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `(u8, bool)`\n@@ -92,7 +92,7 @@ error: multiple patterns covering the same range\n   --> $DIR/exhaustive_integer_patterns.rs:141:9\n    |\n LL |         0 .. 2 => {}\n-   |         ------ this range overlaps on `1u8`\n+   |         ------ this range overlaps on `1_u8`\n LL |         1 ..= 2 => {}\n    |         ^^^^^^^ overlapping patterns\n    |\n@@ -111,20 +111,20 @@ LL |     match 0u128 {\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u128`\n \n-error[E0004]: non-exhaustive patterns: `5u128..=u128::MAX` not covered\n+error[E0004]: non-exhaustive patterns: `5_u128..=u128::MAX` not covered\n   --> $DIR/exhaustive_integer_patterns.rs:150:11\n    |\n LL |     match 0u128 {\n-   |           ^^^^^ pattern `5u128..=u128::MAX` not covered\n+   |           ^^^^^ pattern `5_u128..=u128::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u128`\n \n-error[E0004]: non-exhaustive patterns: `0u128..=3u128` not covered\n+error[E0004]: non-exhaustive patterns: `0_u128..=3_u128` not covered\n   --> $DIR/exhaustive_integer_patterns.rs:154:11\n    |\n LL |     match 0u128 {\n-   |           ^^^^^ pattern `0u128..=3u128` not covered\n+   |           ^^^^^ pattern `0_u128..=3_u128` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u128`"}, {"sha": "04feef1706cf433dff5f486f86d5da353d7a932c", "filename": "src/test/ui/pattern/usefulness/issue-43253.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-43253.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-43253.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-43253.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -2,7 +2,7 @@ warning: multiple patterns covering the same range\n   --> $DIR/issue-43253.rs:16:9\n    |\n LL |         1..10 => {},\n-   |         ----- this range overlaps on `9i32`\n+   |         ----- this range overlaps on `9_i32`\n LL |         9..=10 => {},\n    |         ^^^^^^ overlapping patterns\n    |"}, {"sha": "ffc8433403fd59d96de8e2caa10fe9750c066106", "filename": "src/test/ui/pattern/usefulness/match-byte-array-patterns-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns-2.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -1,8 +1,8 @@\n-error[E0004]: non-exhaustive patterns: `&[0u8..=64u8, _, _, _]` and `&[66u8..=u8::MAX, _, _, _]` not covered\n+error[E0004]: non-exhaustive patterns: `&[0_u8..=64_u8, _, _, _]` and `&[66_u8..=u8::MAX, _, _, _]` not covered\n   --> $DIR/match-byte-array-patterns-2.rs:4:11\n    |\n LL |     match buf {\n-   |           ^^^ patterns `&[0u8..=64u8, _, _, _]` and `&[66u8..=u8::MAX, _, _, _]` not covered\n+   |           ^^^ patterns `&[0_u8..=64_u8, _, _, _]` and `&[66_u8..=u8::MAX, _, _, _]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&[u8; 4]`"}, {"sha": "a35d61e4b710be63198d39488c98c71420218f0b", "filename": "src/test/ui/pattern/usefulness/match-non-exhaustive.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-non-exhaustive.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -1,8 +1,8 @@\n-error[E0004]: non-exhaustive patterns: `i32::MIN..=0i32` and `2i32..=i32::MAX` not covered\n+error[E0004]: non-exhaustive patterns: `i32::MIN..=0_i32` and `2_i32..=i32::MAX` not covered\n   --> $DIR/match-non-exhaustive.rs:2:11\n    |\n LL |     match 0 { 1 => () }\n-   |           ^ patterns `i32::MIN..=0i32` and `2i32..=i32::MAX` not covered\n+   |           ^ patterns `i32::MIN..=0_i32` and `2_i32..=i32::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i32`"}, {"sha": "a28cfb579f4f1771af1e8ae356162504af8b909f", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.rs?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -11,8 +11,8 @@ fn main() {\n     match Some(10) { //~ ERROR non-exhaustive patterns: `Some(_)` not covered\n       None => {}\n     }\n-    match (2, 3, 4) { //~ ERROR non-exhaustive patterns: `(_, _, i32::MIN..=3i32)`\n-                      //  and `(_, _, 5i32..=i32::MAX)` not covered\n+    match (2, 3, 4) { //~ ERROR non-exhaustive patterns: `(_, _, i32::MIN..=3_i32)`\n+                      //  and `(_, _, 5_i32..=i32::MAX)` not covered\n       (_, _, 4) => {}\n     }\n     match (T::A, T::A) { //~ ERROR non-exhaustive patterns: `(A, A)` not covered"}, {"sha": "056efb9b75ddd7083b72fa84bd197059bb1e8d83", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -36,11 +36,11 @@ LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `std::option::Option<i32>`\n \n-error[E0004]: non-exhaustive patterns: `(_, _, i32::MIN..=3i32)` and `(_, _, 5i32..=i32::MAX)` not covered\n+error[E0004]: non-exhaustive patterns: `(_, _, i32::MIN..=3_i32)` and `(_, _, 5_i32..=i32::MAX)` not covered\n   --> $DIR/non-exhaustive-match.rs:14:11\n    |\n LL |     match (2, 3, 4) {\n-   |           ^^^^^^^^^ patterns `(_, _, i32::MIN..=3i32)` and `(_, _, 5i32..=i32::MAX)` not covered\n+   |           ^^^^^^^^^ patterns `(_, _, i32::MIN..=3_i32)` and `(_, _, 5_i32..=i32::MAX)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `(i32, i32, i32)`"}, {"sha": "75658c490c4e2eea349771ebd9b840bc2dd8c056", "filename": "src/test/ui/pattern/usefulness/refutable-pattern-errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-errors.rs?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -5,5 +5,5 @@ fn func((1, (Some(1), 2..=3)): (isize, (Option<isize>, isize))) { }\n \n fn main() {\n     let (1, (Some(1), 2..=3)) = (1, (None, 2));\n-    //~^ ERROR refutable pattern in local binding: `(i32::MIN..=0i32, _)` and `(2i32..=i32::MAX, _)` not covered\n+    //~^ ERROR refutable pattern in local binding: `(i32::MIN..=0_i32, _)` and `(2_i32..=i32::MAX, _)` not covered\n }"}, {"sha": "8d0409a6af940ddb62384bb0c57866c5a4c9704a", "filename": "src/test/ui/pattern/usefulness/refutable-pattern-errors.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-errors.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -6,11 +6,11 @@ LL | fn func((1, (Some(1), 2..=3)): (isize, (Option<isize>, isize))) { }\n    |\n    = note: the matched value is of type `(isize, (std::option::Option<isize>, isize))`\n \n-error[E0005]: refutable pattern in local binding: `(i32::MIN..=0i32, _)` and `(2i32..=i32::MAX, _)` not covered\n+error[E0005]: refutable pattern in local binding: `(i32::MIN..=0_i32, _)` and `(2_i32..=i32::MAX, _)` not covered\n   --> $DIR/refutable-pattern-errors.rs:7:9\n    |\n LL |     let (1, (Some(1), 2..=3)) = (1, (None, 2));\n-   |         ^^^^^^^^^^^^^^^^^^^^^ patterns `(i32::MIN..=0i32, _)` and `(2i32..=i32::MAX, _)` not covered\n+   |         ^^^^^^^^^^^^^^^^^^^^^ patterns `(i32::MIN..=0_i32, _)` and `(2_i32..=i32::MAX, _)` not covered\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html"}, {"sha": "9a34171a391c456d4a6399b41acb540358cb1b6e", "filename": "src/test/ui/precise_pointer_size_matching.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -1,17 +1,17 @@\n-error[E0004]: non-exhaustive patterns: `isize::MIN..=-6isize` and `21isize..=isize::MAX` not covered\n+error[E0004]: non-exhaustive patterns: `isize::MIN..=-6_isize` and `21_isize..=isize::MAX` not covered\n   --> $DIR/precise_pointer_size_matching.rs:24:11\n    |\n LL |     match 0isize {\n-   |           ^^^^^^ patterns `isize::MIN..=-6isize` and `21isize..=isize::MAX` not covered\n+   |           ^^^^^^ patterns `isize::MIN..=-6_isize` and `21_isize..=isize::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `isize`\n \n-error[E0004]: non-exhaustive patterns: `0usize` and `21usize..=usize::MAX` not covered\n+error[E0004]: non-exhaustive patterns: `0_usize` and `21_usize..=usize::MAX` not covered\n   --> $DIR/precise_pointer_size_matching.rs:29:11\n    |\n LL |     match 0usize {\n-   |           ^^^^^^ patterns `0usize` and `21usize..=usize::MAX` not covered\n+   |           ^^^^^^ patterns `0_usize` and `21_usize..=usize::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `usize`"}, {"sha": "ac819dce6db2b5cf2fc838cc1cf84361b71876f1", "filename": "src/test/ui/suggestions/const-pat-non-exaustive-let-new-var.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fsuggestions%2Fconst-pat-non-exaustive-let-new-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fsuggestions%2Fconst-pat-non-exaustive-let-new-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconst-pat-non-exaustive-let-new-var.rs?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let A = 3;\n-    //~^ ERROR refutable pattern in local binding: `i32::MIN..=1i32` and\n+    //~^ ERROR refutable pattern in local binding: `i32::MIN..=1_i32` and\n     //~| interpreted as a constant pattern, not a new variable\n     //~| HELP introduce a variable instead\n     //~| SUGGESTION a_var"}, {"sha": "af64c09d5cadb5e6d3858b6c7603c46a271165c8", "filename": "src/test/ui/suggestions/const-pat-non-exaustive-let-new-var.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fsuggestions%2Fconst-pat-non-exaustive-let-new-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src%2Ftest%2Fui%2Fsuggestions%2Fconst-pat-non-exaustive-let-new-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconst-pat-non-exaustive-let-new-var.stderr?ref=7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "patch": "@@ -1,4 +1,4 @@\n-error[E0005]: refutable pattern in local binding: `i32::MIN..=1i32` and `3i32..=i32::MAX` not covered\n+error[E0005]: refutable pattern in local binding: `i32::MIN..=1_i32` and `3_i32..=i32::MAX` not covered\n   --> $DIR/const-pat-non-exaustive-let-new-var.rs:2:9\n    |\n LL |     let A = 3;"}]}