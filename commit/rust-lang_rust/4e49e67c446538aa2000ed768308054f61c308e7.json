{"sha": "4e49e67c446538aa2000ed768308054f61c308e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNDllNjdjNDQ2NTM4YWEyMDAwZWQ3NjgzMDgwNTRmNjFjMzA4ZTc=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-05-10T10:57:58Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-06-11T15:24:01Z"}, "message": "Stop special casing top level TAIT", "tree": {"sha": "0dfa75a821e90ad97474bcb215b982505f0e6fd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dfa75a821e90ad97474bcb215b982505f0e6fd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e49e67c446538aa2000ed768308054f61c308e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e49e67c446538aa2000ed768308054f61c308e7", "html_url": "https://github.com/rust-lang/rust/commit/4e49e67c446538aa2000ed768308054f61c308e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e49e67c446538aa2000ed768308054f61c308e7/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d77e86142fa3ce3ee230dbbbceab7cc8ed8a499d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d77e86142fa3ce3ee230dbbbceab7cc8ed8a499d", "html_url": "https://github.com/rust-lang/rust/commit/d77e86142fa3ce3ee230dbbbceab7cc8ed8a499d"}], "stats": {"total": 747, "additions": 323, "deletions": 424}, "files": [{"sha": "489e01e805c2f8a84323afc6382a9df869332bbc", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -1858,15 +1858,6 @@ impl TyKind {\n     pub fn is_unit(&self) -> bool {\n         if let TyKind::Tup(ref tys) = *self { tys.is_empty() } else { false }\n     }\n-\n-    /// HACK(type_alias_impl_trait, Centril): A temporary crutch used\n-    /// in lowering to avoid making larger changes there and beyond.\n-    pub fn opaque_top_hack(&self) -> Option<&GenericBounds> {\n-        match self {\n-            Self::ImplTrait(_, bounds) => Some(bounds),\n-            _ => None,\n-        }\n-    }\n }\n \n /// Syntax used to declare a trait object."}, {"sha": "f8a5120b72a18502b47db0872e808595a6c8c08d", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 15, "deletions": 41, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -1,5 +1,5 @@\n use super::{AnonymousLifetimeMode, LoweringContext, ParamMode};\n-use super::{ImplTraitContext, ImplTraitPosition, ImplTraitTypeIdVisitor};\n+use super::{ImplTraitContext, ImplTraitPosition};\n use crate::Arena;\n \n use rustc_ast::ast::*;\n@@ -165,13 +165,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             }\n             ItemKind::MacroDef(..) => SmallVec::new(),\n             ItemKind::Fn(..) | ItemKind::Impl { of_trait: None, .. } => smallvec![i.id],\n-            ItemKind::Static(ref ty, ..) | ItemKind::Const(_, ref ty, ..) => {\n-                let mut ids = smallvec![i.id];\n-                if self.sess.features_untracked().impl_trait_in_bindings {\n-                    ImplTraitTypeIdVisitor { ids: &mut ids }.visit_ty(ty);\n-                }\n-                ids\n-            }\n             _ => smallvec![i.id],\n         };\n \n@@ -292,23 +285,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             ItemKind::Mod(ref m) => hir::ItemKind::Mod(self.lower_mod(m)),\n             ItemKind::ForeignMod(ref nm) => hir::ItemKind::ForeignMod(self.lower_foreign_mod(nm)),\n             ItemKind::GlobalAsm(ref ga) => hir::ItemKind::GlobalAsm(self.lower_global_asm(ga)),\n-            ItemKind::TyAlias(_, ref gen, _, Some(ref ty)) => match ty.kind.opaque_top_hack() {\n-                None => {\n-                    let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n-                    let generics = self.lower_generics(gen, ImplTraitContext::disallowed());\n-                    hir::ItemKind::TyAlias(ty, generics)\n-                }\n-                Some(bounds) => {\n-                    let ctx = || ImplTraitContext::OpaqueTy(None, hir::OpaqueTyOrigin::Misc);\n-                    let ty = hir::OpaqueTy {\n-                        generics: self.lower_generics(gen, ctx()),\n-                        bounds: self.lower_param_bounds(bounds, ctx()),\n-                        impl_trait_fn: None,\n-                        origin: hir::OpaqueTyOrigin::TypeAlias,\n-                    };\n-                    hir::ItemKind::OpaqueTy(ty)\n-                }\n-            },\n+            ItemKind::TyAlias(_, ref gen, _, Some(ref ty)) => {\n+                let ty =\n+                    self.lower_ty(ty, ImplTraitContext::OpaqueTy(None, hir::OpaqueTyOrigin::Misc));\n+                let generics = self.lower_generics(gen, ImplTraitContext::disallowed());\n+                hir::ItemKind::TyAlias(ty, generics)\n+            }\n             ItemKind::TyAlias(_, ref generics, _, None) => {\n                 let ty = self.arena.alloc(self.ty(span, hir::TyKind::Err));\n                 let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n@@ -844,16 +826,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         let ty = self.arena.alloc(self.ty(i.span, hir::TyKind::Err));\n                         hir::ImplItemKind::TyAlias(ty)\n                     }\n-                    Some(ty) => match ty.kind.opaque_top_hack() {\n-                        None => {\n-                            let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n-                            hir::ImplItemKind::TyAlias(ty)\n-                        }\n-                        Some(bs) => {\n-                            let bs = self.lower_param_bounds(bs, ImplTraitContext::disallowed());\n-                            hir::ImplItemKind::OpaqueTy(bs)\n-                        }\n-                    },\n+                    Some(ty) => {\n+                        let ty = self.lower_ty(\n+                            ty,\n+                            ImplTraitContext::OpaqueTy(None, hir::OpaqueTyOrigin::Misc),\n+                        );\n+                        hir::ImplItemKind::TyAlias(ty)\n+                    }\n                 };\n                 (generics, kind)\n             }\n@@ -887,12 +866,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             defaultness,\n             kind: match &i.kind {\n                 AssocItemKind::Const(..) => hir::AssocItemKind::Const,\n-                AssocItemKind::TyAlias(.., ty) => {\n-                    match ty.as_deref().and_then(|ty| ty.kind.opaque_top_hack()) {\n-                        None => hir::AssocItemKind::Type,\n-                        Some(_) => hir::AssocItemKind::OpaqueTy,\n-                    }\n-                }\n+                AssocItemKind::TyAlias(..) => hir::AssocItemKind::Type,\n                 AssocItemKind::Fn(_, sig, ..) => {\n                     hir::AssocItemKind::Fn { has_self: sig.decl.has_self() }\n                 }"}, {"sha": "0154e10112b4970dc74b9adae3298418ffbc2521", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -1371,8 +1371,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         let hir_bounds = self.with_hir_id_owner(opaque_ty_node_id, lower_bounds);\n \n-        let (lifetimes, lifetime_defs) =\n-            self.lifetimes_from_impl_trait_bounds(opaque_ty_node_id, opaque_ty_def_id, &hir_bounds);\n+        let (lifetimes, lifetime_defs): (&[_], &[_]) = if fn_def_id.is_some() {\n+            self.lifetimes_from_impl_trait_bounds(opaque_ty_node_id, opaque_ty_def_id, &hir_bounds)\n+        } else {\n+            // Non return-position impl trait captures all of the lifetimes of\n+            // the parent item.\n+            (&[], &[])\n+        };\n \n         debug!(\"lower_opaque_impl_trait: lifetimes={:#?}\", lifetimes,);\n "}, {"sha": "e9f5956a41692370e33500a1d825b01ab0930d23", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -1102,6 +1102,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeAliasBounds {\n             hir::ItemKind::TyAlias(ref ty, ref generics) => (&*ty, generics),\n             _ => return,\n         };\n+        if let hir::TyKind::Def(..) = ty.kind {\n+            // Bounds are respected for `type X = impl Trait`\n+            return;\n+        }\n         let mut suggested_changing_assoc_types = false;\n         // There must not be a where clause\n         if !type_alias_generics.where_clause.predicates.is_empty() {"}, {"sha": "e8e92646bf46ad211d338ed758f83bb11b11f5c9", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -672,6 +672,8 @@ impl<'hir> Map<'hir> {\n             if let Node::Item(Item {\n                 kind:\n                     ItemKind::Fn(..)\n+                    | ItemKind::Const(..)\n+                    | ItemKind::Static(..)\n                     | ItemKind::Mod(..)\n                     | ItemKind::Enum(..)\n                     | ItemKind::Struct(..)\n@@ -700,11 +702,7 @@ impl<'hir> Map<'hir> {\n                 return CRATE_HIR_ID;\n             }\n             match self.get(scope) {\n-                Node::Item(Item {\n-                    kind: ItemKind::OpaqueTy(OpaqueTy { impl_trait_fn: None, .. }),\n-                    ..\n-                })\n-                | Node::Block(_) => {}\n+                Node::Block(_) => {}\n                 _ => break,\n             }\n         }"}, {"sha": "2419e6965968ed0213aa8b0de268143491acf723", "filename": "src/librustc_passes/layout_test.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Flibrustc_passes%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Flibrustc_passes%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flayout_test.rs?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -27,8 +27,7 @@ impl ItemLikeVisitor<'tcx> for LayoutTest<'tcx> {\n             ItemKind::TyAlias(..)\n             | ItemKind::Enum(..)\n             | ItemKind::Struct(..)\n-            | ItemKind::Union(..)\n-            | ItemKind::OpaqueTy(..) => {\n+            | ItemKind::Union(..) => {\n                 for attr in self.tcx.get_attrs(item_def_id.to_def_id()).iter() {\n                     if attr.check_name(sym::rustc_layout) {\n                         self.dump_layout_of(item_def_id, item, attr);\n@@ -83,9 +82,11 @@ impl LayoutTest<'tcx> {\n                         }\n \n                         sym::debug => {\n+                            let normalized_ty =\n+                                self.tcx.normalize_erasing_regions(param_env.with_reveal_all(), ty);\n                             self.tcx.sess.span_err(\n                                 item.span,\n-                                &format!(\"layout_of({:?}) = {:#?}\", ty, *ty_layout),\n+                                &format!(\"layout_of({:?}) = {:#?}\", normalized_ty, *ty_layout),\n                             );\n                         }\n "}, {"sha": "53ec7f67f19062ae75b2b3fd4d9005974ebe4293", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -746,12 +746,11 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             }\n \n             // These items live in the type namespace.\n-            ItemKind::TyAlias(_, _, _, ref ty) => {\n-                let def_kind = match ty.as_deref().and_then(|ty| ty.kind.opaque_top_hack()) {\n-                    None => DefKind::TyAlias,\n-                    Some(_) => DefKind::OpaqueTy,\n-                };\n-                let res = Res::Def(def_kind, self.r.definitions.local_def_id(item.id).to_def_id());\n+            ItemKind::TyAlias(..) => {\n+                let res = Res::Def(\n+                    DefKind::TyAlias,\n+                    self.r.definitions.local_def_id(item.id).to_def_id(),\n+                );\n                 self.r.define(parent, ident, TypeNS, (res, vis, sp, expansion));\n             }\n "}, {"sha": "02193dcec901e8d277c00d912f8280f0eec2e598", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -396,15 +396,12 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 let scope = Scope::Elision { elide: Elide::Exact(Region::Static), s: ROOT_SCOPE };\n                 self.with(scope, |_, this| intravisit::walk_item(this, item));\n             }\n-            hir::ItemKind::OpaqueTy(hir::OpaqueTy { impl_trait_fn: Some(_), .. }) => {\n-                // Currently opaque type declarations are just generated from `impl Trait`\n-                // items. Doing anything on this node is irrelevant, as we currently don't need\n-                // it.\n+            hir::ItemKind::OpaqueTy(hir::OpaqueTy { .. }) => {\n+                // Opaque types are visited when we visit the `TyKind::Def`, so\n+                // that they have the lifetimes from their parent opaque_ty in\n+                // scope.\n             }\n             hir::ItemKind::TyAlias(_, ref generics)\n-            | hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n-                impl_trait_fn: None, ref generics, ..\n-            })\n             | hir::ItemKind::Enum(_, ref generics)\n             | hir::ItemKind::Struct(_, ref generics)\n             | hir::ItemKind::Union(_, ref generics)\n@@ -563,17 +560,22 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 // `type MyAnonTy<'b> = impl MyTrait<'b>;`\n                 //                 ^                  ^ this gets resolved in the scope of\n                 //                                      the opaque_ty generics\n-                let (generics, bounds) = match self.tcx.hir().expect_item(item_id.id).kind {\n+                let opaque_ty = self.tcx.hir().expect_item(item_id.id);\n+                let (generics, bounds) = match opaque_ty.kind {\n                     // Named opaque `impl Trait` types are reached via `TyKind::Path`.\n                     // This arm is for `impl Trait` in the types of statics, constants and locals.\n                     hir::ItemKind::OpaqueTy(hir::OpaqueTy { impl_trait_fn: None, .. }) => {\n                         intravisit::walk_ty(self, ty);\n+                        intravisit::walk_item(this, opaque_ty);\n                         return;\n                     }\n                     // RPIT (return position impl trait)\n-                    hir::ItemKind::OpaqueTy(hir::OpaqueTy { ref generics, bounds, .. }) => {\n-                        (generics, bounds)\n-                    }\n+                    hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n+                        impl_trait_fn: Some(_),\n+                        ref generics,\n+                        bounds,\n+                        ..\n+                    }) => (generics, bounds),\n                     ref i => bug!(\"`impl Trait` pointed to non-opaque type?? {:#?}\", i),\n                 };\n \n@@ -2667,8 +2669,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 // going to make a fresh name, so we cannot\n                 // necessarily replace a single-use lifetime with\n                 // `'_`.\n-                Scope::Elision { elide: Elide::Exact(_), .. } => break false,\n-                Scope::Elision { elide: Elide::Error(_), .. } => break false,\n+                Scope::Elision {\n+                    elide: Elide::Exact(_) | Elide::Error(_) | Elide::Forbid, ..\n+                } => break false,\n \n                 Scope::ObjectLifetimeDefault { s, .. } => scope = s,\n             }"}, {"sha": "51b1db390b9270b0964a37b2129839aad033932e", "filename": "src/librustc_trait_selection/opaque_types.rs", "status": "modified", "additions": 32, "deletions": 37, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Fopaque_types.rs?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -133,9 +133,9 @@ pub trait InferCtxtExt<'tcx> {\n     fn generate_member_constraint(\n         &self,\n         concrete_ty: Ty<'tcx>,\n-        opaque_type_generics: &ty::Generics,\n         opaque_defn: &OpaqueTypeDecl<'tcx>,\n         opaque_type_def_id: DefId,\n+        first_own_region_index: usize,\n     );\n \n     /*private*/\n@@ -405,7 +405,16 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         debug!(\"constrain_opaque_type: concrete_ty={:?}\", concrete_ty);\n \n-        let opaque_type_generics = tcx.generics_of(def_id);\n+        let first_own_region = match opaque_defn.origin {\n+            hir::OpaqueTyOrigin::FnReturn | hir::OpaqueTyOrigin::AsyncFn => {\n+                // For these opaque types, only the item's own lifetime\n+                // parameters are considered.\n+                tcx.generics_of(def_id).parent_count\n+            }\n+            // These opaque type inherit all lifetime parameters from their\n+            // parent.\n+            hir::OpaqueTyOrigin::Misc => 0,\n+        };\n \n         let span = tcx.def_span(def_id);\n \n@@ -427,12 +436,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 });\n             }\n             if let GenerateMemberConstraints::IfNoStaticBound = mode {\n-                self.generate_member_constraint(\n-                    concrete_ty,\n-                    opaque_type_generics,\n-                    opaque_defn,\n-                    def_id,\n-                );\n+                self.generate_member_constraint(concrete_ty, opaque_defn, def_id, first_own_region);\n             }\n             return;\n         }\n@@ -445,29 +449,27 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         // `['a]` for the first impl trait and `'b` for the\n         // second.\n         let mut least_region = None;\n-        for param in &opaque_type_generics.params {\n-            match param.kind {\n-                GenericParamDefKind::Lifetime => {}\n-                _ => continue,\n-            }\n \n-            // Get the value supplied for this region from the substs.\n-            let subst_arg = opaque_defn.substs.region_at(param.index as usize);\n+        for subst_arg in &opaque_defn.substs[first_own_region..] {\n+            let subst_region = match subst_arg.unpack() {\n+                GenericArgKind::Lifetime(r) => r,\n+                GenericArgKind::Type(_) | GenericArgKind::Const(_) => continue,\n+            };\n \n             // Compute the least upper bound of it with the other regions.\n             debug!(\"constrain_opaque_types: least_region={:?}\", least_region);\n-            debug!(\"constrain_opaque_types: subst_arg={:?}\", subst_arg);\n+            debug!(\"constrain_opaque_types: subst_region={:?}\", subst_region);\n             match least_region {\n-                None => least_region = Some(subst_arg),\n+                None => least_region = Some(subst_region),\n                 Some(lr) => {\n-                    if free_region_relations.sub_free_regions(self.tcx, lr, subst_arg) {\n+                    if free_region_relations.sub_free_regions(self.tcx, lr, subst_region) {\n                         // keep the current least region\n-                    } else if free_region_relations.sub_free_regions(self.tcx, subst_arg, lr) {\n-                        // switch to `subst_arg`\n-                        least_region = Some(subst_arg);\n+                    } else if free_region_relations.sub_free_regions(self.tcx, subst_region, lr) {\n+                        // switch to `subst_region`\n+                        least_region = Some(subst_region);\n                     } else {\n                         // There are two regions (`lr` and\n-                        // `subst_arg`) which are not relatable. We\n+                        // `subst_region`) which are not relatable. We\n                         // can't find a best choice. Therefore,\n                         // instead of creating a single bound like\n                         // `'r: 'a` (which is our preferred choice),\n@@ -476,13 +478,13 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         // regions that appear in the impl trait.\n \n                         // For now, enforce a feature gate outside of async functions.\n-                        self.member_constraint_feature_gate(opaque_defn, def_id, lr, subst_arg);\n+                        self.member_constraint_feature_gate(opaque_defn, def_id, lr, subst_region);\n \n                         return self.generate_member_constraint(\n                             concrete_ty,\n-                            opaque_type_generics,\n                             opaque_defn,\n                             def_id,\n+                            first_own_region,\n                         );\n                     }\n                 }\n@@ -494,12 +496,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         if let GenerateMemberConstraints::IfNoStaticBound = mode {\n             if least_region != tcx.lifetimes.re_static {\n-                self.generate_member_constraint(\n-                    concrete_ty,\n-                    opaque_type_generics,\n-                    opaque_defn,\n-                    def_id,\n-                );\n+                self.generate_member_constraint(concrete_ty, opaque_defn, def_id, first_own_region);\n             }\n         }\n         concrete_ty.visit_with(&mut ConstrainOpaqueTypeRegionVisitor {\n@@ -518,22 +515,20 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     fn generate_member_constraint(\n         &self,\n         concrete_ty: Ty<'tcx>,\n-        opaque_type_generics: &ty::Generics,\n         opaque_defn: &OpaqueTypeDecl<'tcx>,\n         opaque_type_def_id: DefId,\n+        first_own_region: usize,\n     ) {\n         // Create the set of choice regions: each region in the hidden\n         // type can be equal to any of the region parameters of the\n         // opaque type definition.\n         let choice_regions: Lrc<Vec<ty::Region<'tcx>>> = Lrc::new(\n-            opaque_type_generics\n-                .params\n+            opaque_defn.substs[first_own_region..]\n                 .iter()\n-                .filter(|param| match param.kind {\n-                    GenericParamDefKind::Lifetime => true,\n-                    GenericParamDefKind::Type { .. } | GenericParamDefKind::Const => false,\n+                .filter_map(|arg| match arg.unpack() {\n+                    GenericArgKind::Lifetime(r) => Some(r),\n+                    GenericArgKind::Type(_) | GenericArgKind::Const(_) => None,\n                 })\n-                .map(|param| opaque_defn.substs.region_at(param.index as usize))\n                 .chain(std::iter::once(self.tcx.lifetimes.re_static))\n                 .collect(),\n         );"}, {"sha": "24e38cc42ef6cbc48600183d59407234bdc5b675", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -2839,8 +2839,26 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 self.res_to_ty(opt_self_ty, path, false)\n             }\n             hir::TyKind::Def(item_id, ref lifetimes) => {\n-                let did = tcx.hir().local_def_id(item_id.id);\n-                self.impl_trait_ty_to_ty(did.to_def_id(), lifetimes)\n+                let opaque_ty = tcx.hir().expect_item(item_id.id);\n+                let def_id = tcx.hir().local_def_id(item_id.id).to_def_id();\n+\n+                match opaque_ty.kind {\n+                    // RPIT (return position impl trait)\n+                    // Only lifetimes mentioned in the impl Trait predicate are\n+                    // captured by the opaque type, so the lifetime parameters\n+                    // from the parent item need to be replaced with `'static`.\n+                    hir::ItemKind::OpaqueTy(hir::OpaqueTy { impl_trait_fn: Some(_), .. }) => {\n+                        self.impl_trait_ty_to_ty(def_id, lifetimes)\n+                    }\n+                    // This arm is for `impl Trait` in the types of statics,\n+                    // constants, locals and type aliases. These capture all\n+                    // parent lifetimes, so they can use their identity subst.\n+                    hir::ItemKind::OpaqueTy(hir::OpaqueTy { impl_trait_fn: None, .. }) => {\n+                        let substs = InternalSubsts::identity_for_item(tcx, def_id);\n+                        tcx.mk_opaque(def_id, substs)\n+                    }\n+                    ref i => bug!(\"`impl Trait` pointed to non-opaque type?? {:#?}\", i),\n+                }\n             }\n             hir::TyKind::Path(hir::QPath::TypeRelative(ref qself, ref segment)) => {\n                 debug!(\"ast_ty_to_ty: qself={:?} segment={:?}\", qself, segment);"}, {"sha": "159d3d7a538a668e18c5b20910e3e0f06caa7c8c", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -460,7 +460,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             let mut skip_add = false;\n \n             if let ty::Opaque(defin_ty_def_id, _substs) = definition_ty.kind {\n-                if let hir::OpaqueTyOrigin::TypeAlias = opaque_defn.origin {\n+                if let hir::OpaqueTyOrigin::Misc = opaque_defn.origin {\n                     if def_id == defin_ty_def_id {\n                         debug!(\n                             \"skipping adding concrete definition for opaque type {:?} {:?}\","}, {"sha": "7038caf4367e6492c8585caabdc6fa701c6c6264", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -1202,22 +1202,11 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             ItemKind::OpaqueTy(hir::OpaqueTy { impl_trait_fn, .. }) => {\n                 impl_trait_fn.or_else(|| {\n                     let parent_id = tcx.hir().get_parent_item(hir_id);\n-                    if parent_id != hir_id && parent_id != CRATE_HIR_ID {\n+                    assert!(parent_id != hir_id && parent_id != CRATE_HIR_ID);\n                         debug!(\"generics_of: parent of opaque ty {:?} is {:?}\", def_id, parent_id);\n-                        // If this 'impl Trait' is nested inside another 'impl Trait'\n-                        // (e.g. `impl Foo<MyType = impl Bar<A>>`), we need to use the 'parent'\n-                        // 'impl Trait' for its generic parameters, since we can reference them\n-                        // from the 'child' 'impl Trait'\n-                        if let Node::Item(hir::Item { kind: ItemKind::OpaqueTy(..), .. }) =\n-                            tcx.hir().get(parent_id)\n-                        {\n+                    // Opaque types are always nested within another item, and\n+                    // inherit the generics of the item.\n                             Some(tcx.hir().local_def_id(parent_id).to_def_id())\n-                        } else {\n-                            None\n-                        }\n-                    } else {\n-                        None\n-                    }\n                 })\n             }\n             _ => None,"}, {"sha": "8b5c5219430b6e9f517af3e7b91d32942d2573e0", "filename": "src/test/ui/associated-type-bounds/duplicate.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -108,18 +108,12 @@ type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n //~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n //~| ERROR could not find defining uses\n-//~| ERROR could not find defining uses\n-//~| ERROR could not find defining uses\n type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n //~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n //~| ERROR could not find defining uses\n-//~| ERROR could not find defining uses\n-//~| ERROR could not find defining uses\n type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n //~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n //~| ERROR could not find defining uses\n-//~| ERROR could not find defining uses\n-//~| ERROR could not find defining uses\n type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n //~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n //~| ERROR could not find defining uses"}, {"sha": "712211e60cbace04c98d1dac8d42b2f0efae431a", "filename": "src/test/ui/associated-type-bounds/duplicate.stderr", "status": "modified", "additions": 81, "deletions": 117, "changes": 198, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -223,30 +223,6 @@ LL | fn FAPIT3(_: impl Iterator<Item: 'static, Item: 'static>) {}\n    |                            |\n    |                            `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:62:42\n-   |\n-LL | fn FRPIT1() -> impl Iterator<Item: Copy, Item: Send> { iter::empty() }\n-   |                              ----------  ^^^^^^^^^^ re-bound here\n-   |                              |\n-   |                              `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:64:42\n-   |\n-LL | fn FRPIT2() -> impl Iterator<Item: Copy, Item: Copy> { iter::empty() }\n-   |                              ----------  ^^^^^^^^^^ re-bound here\n-   |                              |\n-   |                              `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:66:45\n-   |\n-LL | fn FRPIT3() -> impl Iterator<Item: 'static, Item: 'static> { iter::empty() }\n-   |                              -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                              |\n-   |                              `Item` bound here first\n-\n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:75:39\n    |\n@@ -367,12 +343,6 @@ LL | type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n    |                                |\n    |                                `Item` bound here first\n \n-error: could not find defining uses\n-  --> $DIR/duplicate.rs:108:1\n-   |\n-LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:108:36\n    |\n@@ -381,352 +351,346 @@ LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n    |                        |\n    |                        `Item` bound here first\n \n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+  --> $DIR/duplicate.rs:62:42\n+   |\n+LL | fn FRPIT1() -> impl Iterator<Item: Copy, Item: Send> { iter::empty() }\n+   |                              ----------  ^^^^^^^^^^ re-bound here\n+   |                              |\n+   |                              `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+  --> $DIR/duplicate.rs:64:42\n+   |\n+LL | fn FRPIT2() -> impl Iterator<Item: Copy, Item: Copy> { iter::empty() }\n+   |                              ----------  ^^^^^^^^^^ re-bound here\n+   |                              |\n+   |                              `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+  --> $DIR/duplicate.rs:66:45\n+   |\n+LL | fn FRPIT3() -> impl Iterator<Item: 'static, Item: 'static> { iter::empty() }\n+   |                              -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                              |\n+   |                              `Item` bound here first\n+\n error: could not find defining uses\n-  --> $DIR/duplicate.rs:113:1\n+  --> $DIR/duplicate.rs:108:51\n    |\n-LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n+   |                                                   ^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:113:36\n+  --> $DIR/duplicate.rs:111:36\n    |\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:118:1\n+  --> $DIR/duplicate.rs:111:51\n    |\n-LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n+   |                                                   ^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:118:39\n+  --> $DIR/duplicate.rs:114:39\n    |\n LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:123:1\n+  --> $DIR/duplicate.rs:114:57\n+   |\n+LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n+   |                                                         ^^^^^^^^^\n+\n+error: could not find defining uses\n+  --> $DIR/duplicate.rs:117:14\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:123:40\n+  --> $DIR/duplicate.rs:117:40\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:128:1\n+  --> $DIR/duplicate.rs:122:14\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:128:40\n+  --> $DIR/duplicate.rs:122:40\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:133:1\n+  --> $DIR/duplicate.rs:127:14\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:133:43\n+  --> $DIR/duplicate.rs:127:43\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:139:36\n+  --> $DIR/duplicate.rs:133:36\n    |\n LL | trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:141:36\n+  --> $DIR/duplicate.rs:135:36\n    |\n LL | trait TRI2<T: Iterator<Item: Copy, Item: Copy>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:143:39\n+  --> $DIR/duplicate.rs:137:39\n    |\n LL | trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:145:34\n+  --> $DIR/duplicate.rs:139:34\n    |\n LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:147:34\n+  --> $DIR/duplicate.rs:141:34\n    |\n LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:149:37\n+  --> $DIR/duplicate.rs:143:37\n    |\n LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:151:45\n+  --> $DIR/duplicate.rs:145:45\n    |\n LL | trait TRW1<T> where T: Iterator<Item: Copy, Item: Send> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:153:45\n+  --> $DIR/duplicate.rs:147:45\n    |\n LL | trait TRW2<T> where T: Iterator<Item: Copy, Item: Copy> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:155:48\n+  --> $DIR/duplicate.rs:149:48\n    |\n LL | trait TRW3<T> where T: Iterator<Item: 'static, Item: 'static> {}\n    |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:157:46\n+  --> $DIR/duplicate.rs:151:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:157:46\n+  --> $DIR/duplicate.rs:151:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:160:46\n+  --> $DIR/duplicate.rs:154:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:160:46\n+  --> $DIR/duplicate.rs:154:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:163:49\n+  --> $DIR/duplicate.rs:157:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:163:49\n+  --> $DIR/duplicate.rs:157:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:166:43\n+  --> $DIR/duplicate.rs:160:43\n    |\n LL | trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:168:43\n+  --> $DIR/duplicate.rs:162:43\n    |\n LL | trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:170:46\n+  --> $DIR/duplicate.rs:164:46\n    |\n LL | trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:173:40\n+  --> $DIR/duplicate.rs:167:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:177:44\n+  --> $DIR/duplicate.rs:171:44\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:181:43\n+  --> $DIR/duplicate.rs:175:43\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:108:24\n-   |\n-LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n-   |                        ^^^^^^^^^^\n-\n-error: could not find defining uses\n-  --> $DIR/duplicate.rs:108:36\n-   |\n-LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n-   |                                    ^^^^^^^^^^\n-\n-error: could not find defining uses\n-  --> $DIR/duplicate.rs:113:24\n-   |\n-LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n-   |                        ^^^^^^^^^^\n-\n-error: could not find defining uses\n-  --> $DIR/duplicate.rs:113:36\n-   |\n-LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n-   |                                    ^^^^^^^^^^\n-\n-error: could not find defining uses\n-  --> $DIR/duplicate.rs:118:24\n-   |\n-LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n-   |                        ^^^^^^^^^^^^^\n-\n-error: could not find defining uses\n-  --> $DIR/duplicate.rs:118:39\n-   |\n-LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n-   |                                       ^^^^^^^^^^^^^\n-\n-error: could not find defining uses\n-  --> $DIR/duplicate.rs:123:28\n+  --> $DIR/duplicate.rs:117:28\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    |                            ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:123:40\n+  --> $DIR/duplicate.rs:117:40\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    |                                        ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:128:28\n+  --> $DIR/duplicate.rs:122:28\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    |                            ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:128:40\n+  --> $DIR/duplicate.rs:122:40\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    |                                        ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:133:28\n+  --> $DIR/duplicate.rs:127:28\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    |                            ^^^^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:133:43\n+  --> $DIR/duplicate.rs:127:43\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    |                                           ^^^^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:173:28\n+  --> $DIR/duplicate.rs:167:28\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:173:40\n+  --> $DIR/duplicate.rs:167:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                                        ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:177:32\n+  --> $DIR/duplicate.rs:171:32\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:177:44\n+  --> $DIR/duplicate.rs:171:44\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                            ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:181:28\n+  --> $DIR/duplicate.rs:175:28\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                            ^^^^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:181:43\n+  --> $DIR/duplicate.rs:175:43\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                                           ^^^^^^^^^^^^^\n \n-error: aborting due to 96 previous errors; 1 warning emitted\n+error: aborting due to 90 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0719`."}, {"sha": "3b6c9791722bb152585bc47c17bb64ee6205dae9", "filename": "src/test/ui/feature-gates/feature-gate-type_alias_impl_trait.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -9,10 +9,14 @@ trait Bar {\n \n impl Bar for () {\n     type Baa = impl Debug; //~ ERROR `impl Trait` in type aliases is unstable\n-    fn define() -> Self::Baa { 0 }\n+    fn define() -> Self::Baa {\n+        0\n+    }\n }\n \n-fn define() -> Foo { 0 }\n+fn define() -> Foo {\n+    0\n+}\n \n trait TraitWithDefault {\n     type Assoc = impl Debug;\n@@ -26,20 +30,20 @@ type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>\n //~| ERROR `impl Trait` in type aliases is unstable\n //~| ERROR `impl Trait` in type aliases is unstable\n //~| ERROR `impl Trait` in type aliases is unstable\n-//~| ERROR `impl Trait` not allowed outside of function\n-//~| ERROR `impl Trait` not allowed outside of function\n-//~| ERROR `impl Trait` not allowed outside of function\n+\n+fn define_multiple() -> NestedFree {\n+    (vec![true], 0u8, 0i32..1)\n+}\n \n impl Bar for u8 {\n-    type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n+    type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug> + Debug);\n     //~^ ERROR `impl Trait` in type aliases is unstable\n     //~| ERROR `impl Trait` in type aliases is unstable\n     //~| ERROR `impl Trait` in type aliases is unstable\n     //~| ERROR `impl Trait` in type aliases is unstable\n-    //~| ERROR `impl Trait` not allowed outside of function\n-    //~| ERROR `impl Trait` not allowed outside of function\n-    //~| ERROR `impl Trait` not allowed outside of function\n-    fn define() -> Self::Baa { (vec![true], 0u8, 0i32..1) }\n+    fn define() -> Self::Baa {\n+        (vec![true], 0u8, 0i32..1)\n+    }\n }\n \n fn main() {}"}, {"sha": "8bab0d0c4a95c24ed3757b8e710ef7e0296ebe99", "filename": "src/test/ui/feature-gates/feature-gate-type_alias_impl_trait.stderr", "status": "modified", "additions": 17, "deletions": 53, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -17,7 +17,7 @@ LL |     type Baa = impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: associated type defaults are unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:18:5\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:22:5\n    |\n LL |     type Assoc = impl Debug;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |     type Assoc = impl Debug;\n    = help: add `#![feature(associated_type_defaults)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:18:18\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:22:18\n    |\n LL |     type Assoc = impl Debug;\n    |                  ^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL |     type Assoc = impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:24:24\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:28:24\n    |\n LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n    |                        ^^^^^^^^^^\n@@ -44,7 +44,7 @@ LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl D\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:24:37\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:28:37\n    |\n LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n    |                                     ^^^^^^^^^^\n@@ -53,7 +53,7 @@ LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl D\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:24:49\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:28:49\n    |\n LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -62,7 +62,7 @@ LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl D\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:24:70\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:28:70\n    |\n LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n    |                                                                      ^^^^^^^^^^\n@@ -71,84 +71,48 @@ LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl D\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:34:21\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:39:21\n    |\n-LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n+LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug> + Debug);\n    |                     ^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:34:34\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:39:34\n    |\n-LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n+LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug> + Debug);\n    |                                  ^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:34:46\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:39:46\n    |\n-LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n-   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug> + Debug);\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:34:67\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:39:67\n    |\n-LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n+LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug> + Debug);\n    |                                                                   ^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:18:18\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:22:18\n    |\n LL |     type Assoc = impl Debug;\n    |                  ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:24:24\n-   |\n-LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n-   |                        ^^^^^^^^^^\n-\n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:24:37\n-   |\n-LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n-   |                                     ^^^^^^^^^^\n-\n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:24:49\n-   |\n-LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n-   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:34:21\n-   |\n-LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n-   |                     ^^^^^^^^^^\n-\n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:34:34\n-   |\n-LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n-   |                                  ^^^^^^^^^^\n-\n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:34:46\n-   |\n-LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n-   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 19 previous errors\n+error: aborting due to 13 previous errors\n \n Some errors have detailed explanations: E0562, E0658.\n For more information about an error, try `rustc --explain E0562`."}, {"sha": "cf2773f4ef59dc921a6e919aab056bb13c89f94a", "filename": "src/test/ui/impl-trait/auto-trait.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.rs?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -2,22 +2,24 @@\n // the purposes of coherence checking\n #![feature(type_alias_impl_trait)]\n \n-trait OpaqueTrait { }\n-impl<T> OpaqueTrait for T { }\n+trait OpaqueTrait {}\n+impl<T> OpaqueTrait for T {}\n type OpaqueType = impl OpaqueTrait;\n-fn mk_opaque() -> OpaqueType { () }\n+fn mk_opaque() -> OpaqueType {\n+    ()\n+}\n \n #[derive(Debug)]\n struct D<T>(T);\n \n-trait AnotherTrait { }\n-impl<T: Send> AnotherTrait for T { }\n+trait AnotherTrait {}\n+impl<T: Send> AnotherTrait for T {}\n \n // This is in error, because we cannot assume that `OpaqueType: !Send`.\n // (We treat opaque types as \"foreign types\" that could grow more impls\n // in the future.)\n impl AnotherTrait for D<OpaqueType> {\n-    //~^ ERROR conflicting implementations of trait `AnotherTrait` for type `D<OpaqueType>`\n+    //~^ ERROR conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`\n }\n \n fn main() {}"}, {"sha": "16fe1b56b50c6beeba9a7ccd2bddf0f7e1ddbf43", "filename": "src/test/ui/impl-trait/auto-trait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.stderr?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -1,11 +1,11 @@\n-error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<OpaqueType>`:\n-  --> $DIR/auto-trait.rs:19:1\n+error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`:\n+  --> $DIR/auto-trait.rs:21:1\n    |\n-LL | impl<T: Send> AnotherTrait for T { }\n+LL | impl<T: Send> AnotherTrait for T {}\n    | -------------------------------- first implementation here\n ...\n LL | impl AnotherTrait for D<OpaqueType> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `D<OpaqueType>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `D<impl OpaqueTrait>`\n \n error: aborting due to previous error\n "}, {"sha": "5131509cdf03e0ceb7b7959eed48c23b1428b49c", "filename": "src/test/ui/impl-trait/issue-55872-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `S: std::marker::Copy` is not satisfied in `(S, T)`\n-  --> $DIR/issue-55872-1.rs:12:5\n+  --> $DIR/issue-55872-1.rs:12:14\n    |\n LL |     type E = impl Copy;\n-   |     ^^^^^^^^^^^^^^^^^^^ within `(S, T)`, the trait `std::marker::Copy` is not implemented for `S`\n+   |              ^^^^^^^^^ within `(S, T)`, the trait `std::marker::Copy` is not implemented for `S`\n    |\n    = note: required because it appears within the type `(S, T)`\n    = note: the return type of a function must have a statically known size\n@@ -12,10 +12,10 @@ LL | impl<S: Default + std::marker::Copy> Bar for S {\n    |                 ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied in `(S, T)`\n-  --> $DIR/issue-55872-1.rs:12:5\n+  --> $DIR/issue-55872-1.rs:12:14\n    |\n LL |     type E = impl Copy;\n-   |     ^^^^^^^^^^^^^^^^^^^ within `(S, T)`, the trait `std::marker::Copy` is not implemented for `T`\n+   |              ^^^^^^^^^ within `(S, T)`, the trait `std::marker::Copy` is not implemented for `T`\n    |\n    = note: required because it appears within the type `(S, T)`\n    = note: the return type of a function must have a statically known size"}, {"sha": "649109e4c932412e03eb3a703fa9992117b714e4", "filename": "src/test/ui/impl-trait/issue-55872-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `impl std::future::Future: std::marker::Copy` is not satisfied\n-  --> $DIR/issue-55872-2.rs:13:5\n+  --> $DIR/issue-55872-2.rs:13:14\n    |\n LL |     type E = impl Copy;\n-   |     ^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `impl std::future::Future`\n+   |              ^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `impl std::future::Future`\n    |\n    = note: the return type of a function must have a statically known size\n "}, {"sha": "d173fe83fb7913c35699f933005570245680faac", "filename": "src/test/ui/impl-trait/negative-reasoning.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.rs?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -2,21 +2,22 @@\n // other trait\n #![feature(type_alias_impl_trait)]\n \n-trait OpaqueTrait { }\n-impl<T> OpaqueTrait for T { }\n+trait OpaqueTrait {}\n+impl<T> OpaqueTrait for T {}\n type OpaqueType = impl OpaqueTrait;\n-fn mk_opaque() -> OpaqueType { () }\n+fn mk_opaque() -> OpaqueType {\n+    ()\n+}\n \n #[derive(Debug)]\n struct D<T>(T);\n \n-trait AnotherTrait { }\n-impl<T: std::fmt::Debug> AnotherTrait for T { }\n-\n+trait AnotherTrait {}\n+impl<T: std::fmt::Debug> AnotherTrait for T {}\n \n // This is in error, because we cannot assume that `OpaqueType: !Debug`\n impl AnotherTrait for D<OpaqueType> {\n-    //~^ ERROR conflicting implementations of trait `AnotherTrait` for type `D<OpaqueType>`\n+    //~^ ERROR conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`\n }\n \n fn main() {}"}, {"sha": "e43d8c857b2570c2840d5fd16623572157c11faa", "filename": "src/test/ui/impl-trait/negative-reasoning.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -1,13 +1,13 @@\n-error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<OpaqueType>`:\n-  --> $DIR/negative-reasoning.rs:18:1\n+error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`:\n+  --> $DIR/negative-reasoning.rs:19:1\n    |\n-LL | impl<T: std::fmt::Debug> AnotherTrait for T { }\n+LL | impl<T: std::fmt::Debug> AnotherTrait for T {}\n    | ------------------------------------------- first implementation here\n ...\n LL | impl AnotherTrait for D<OpaqueType> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `D<OpaqueType>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `D<impl OpaqueTrait>`\n    |\n-   = note: upstream crates may add a new impl of trait `std::fmt::Debug` for type `OpaqueType` in future versions\n+   = note: upstream crates may add a new impl of trait `std::fmt::Debug` for type `impl OpaqueTrait` in future versions\n \n error: aborting due to previous error\n "}, {"sha": "7addc006e190022f3654044e9cc613d446933f2d", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -256,16 +256,16 @@ LL |     let _in_return_in_local_variable = || -> impl Fn() { || {} };\n    |                                              ^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/where-allowed.rs:155:1\n+  --> $DIR/where-allowed.rs:119:16\n    |\n-LL | type InTypeAlias<R> = impl Debug;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     type Out = impl Debug;\n+   |                ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/where-allowed.rs:119:5\n+  --> $DIR/where-allowed.rs:155:23\n    |\n-LL |     type Out = impl Debug;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+LL | type InTypeAlias<R> = impl Debug;\n+   |                       ^^^^^^^^^^\n \n error: aborting due to 42 previous errors\n "}, {"sha": "cebe834824a6121657964960694a54e2b9dc2ea0", "filename": "src/test/ui/issues/issue-60662.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Fissues%2Fissue-60662.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Fissues%2Fissue-60662.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60662.stdout?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -10,5 +10,5 @@ extern crate std;\n trait Animal { }\n \n fn main() {\n-              pub type ServeFut = impl Animal;\n+              pub type ServeFut = /*impl Trait*/;\n           }"}, {"sha": "ae04612a4dd69aa536f27640786b8821dd773b0b", "filename": "src/test/ui/lint/inline-trait-and-foreign-items.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -62,10 +62,10 @@ LL |     type U = impl Trait;\n    |     -------------------- not a function or closure\n \n error: could not find defining uses\n-  --> $DIR/inline-trait-and-foreign-items.rs:26:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:26:14\n    |\n LL |     type U = impl Trait;\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^\n \n error: aborting due to 6 previous errors; 2 warnings emitted\n "}, {"sha": "3cbc084ecae7cbd524c932b2790525204039fd67", "filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -1,5 +1,4 @@\n #![feature(type_alias_impl_trait)]\n-\n #![deny(improper_ctypes)]\n \n type A = impl Fn();\n@@ -10,7 +9,7 @@ pub fn ret_closure() -> A {\n \n extern \"C\" {\n     pub fn a(_: A);\n-    //~^ ERROR `extern` block uses type `A`, which is not FFI-safe\n+//~^ ERROR `extern` block uses type `impl std::ops::Fn<()>`, which is not FFI-safe\n }\n \n fn main() {}"}, {"sha": "06dfb7b8fbeca49e84e219087db025355baa352b", "filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -1,11 +1,11 @@\n-error: `extern` block uses type `A`, which is not FFI-safe\n-  --> $DIR/opaque-ty-ffi-unsafe.rs:12:17\n+error: `extern` block uses type `impl std::ops::Fn<()>`, which is not FFI-safe\n+  --> $DIR/opaque-ty-ffi-unsafe.rs:11:17\n    |\n LL |     pub fn a(_: A);\n    |                 ^ not FFI-safe\n    |\n note: the lint level is defined here\n-  --> $DIR/opaque-ty-ffi-unsafe.rs:3:9\n+  --> $DIR/opaque-ty-ffi-unsafe.rs:2:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^"}, {"sha": "cd7c37cb04b22a44114f4171aafabcac5039021f", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -9,7 +9,9 @@ mod m {\n     trait PrivTr {}\n     impl PrivTr for Priv {}\n     pub trait PubTrAux1<T> {}\n-    pub trait PubTrAux2 { type A; }\n+    pub trait PubTrAux2 {\n+        type A;\n+    }\n     impl<T> PubTrAux1<T> for u8 {}\n     impl PubTrAux2 for u8 {\n         type A = Priv;\n@@ -41,8 +43,9 @@ mod m {\n \n         type Exist = impl PrivTr;\n         //~^ ERROR private trait `m::PrivTr` in public interface\n-        //~| ERROR private trait `m::PrivTr` in public interface\n-        fn infer_exist() -> Self::Exist { Priv }\n+        fn infer_exist() -> Self::Exist {\n+            Priv\n+        }\n     }\n }\n "}, {"sha": "1a3ca3f16ed4cccfa5574bbf6382d55200a6358d", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.stderr", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -1,5 +1,5 @@\n error[E0446]: private type `m::Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:15:9\n+  --> $DIR/private-in-public-assoc-ty.rs:17:9\n    |\n LL |     struct Priv;\n    |     - `m::Priv` declared as private\n@@ -8,7 +8,7 @@ LL |         type A = Priv;\n    |         ^^^^^^^^^^^^^^ can't leak private type\n \n warning: private trait `m::PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-assoc-ty.rs:21:5\n+  --> $DIR/private-in-public-assoc-ty.rs:23:5\n    |\n LL | /     pub trait PubTr {\n LL | |\n@@ -24,7 +24,7 @@ LL | |     }\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n warning: private type `m::Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-assoc-ty.rs:21:5\n+  --> $DIR/private-in-public-assoc-ty.rs:23:5\n    |\n LL | /     pub trait PubTr {\n LL | |\n@@ -39,7 +39,7 @@ LL | |     }\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n warning: private type `m::Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-assoc-ty.rs:21:5\n+  --> $DIR/private-in-public-assoc-ty.rs:23:5\n    |\n LL | /     pub trait PubTr {\n LL | |\n@@ -54,7 +54,7 @@ LL | |     }\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error[E0446]: private type `m::Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:32:9\n+  --> $DIR/private-in-public-assoc-ty.rs:34:9\n    |\n LL |     struct Priv;\n    |     - `m::Priv` declared as private\n@@ -63,7 +63,7 @@ LL |         type Alias4 = Priv;\n    |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `m::Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:39:9\n+  --> $DIR/private-in-public-assoc-ty.rs:41:9\n    |\n LL |     struct Priv;\n    |     - `m::Priv` declared as private\n@@ -72,24 +72,15 @@ LL |         type Alias1 = Priv;\n    |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0445]: private trait `m::PrivTr` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:42:9\n+  --> $DIR/private-in-public-assoc-ty.rs:44:9\n    |\n LL |     trait PrivTr {}\n    |     - `m::PrivTr` declared as private\n ...\n LL |         type Exist = impl PrivTr;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n \n-error[E0445]: private trait `m::PrivTr` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:42:9\n-   |\n-LL |     trait PrivTr {}\n-   |     - `m::PrivTr` declared as private\n-...\n-LL |         type Exist = impl PrivTr;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n-\n-error: aborting due to 5 previous errors; 3 warnings emitted\n+error: aborting due to 4 previous errors; 3 warnings emitted\n \n Some errors have detailed explanations: E0445, E0446.\n For more information about an error, try `rustc --explain E0445`."}, {"sha": "3af6d0a3e076e74dcfb886c0e0d77e79037a64a2", "filename": "src/test/ui/save-analysis/issue-68621.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.stderr?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -1,8 +1,8 @@\n error: could not find defining uses\n-  --> $DIR/issue-68621.rs:14:5\n+  --> $DIR/issue-68621.rs:14:19\n    |\n LL |     type Future = impl Trait;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                   ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "9ebf63468e77373be22996651048ddd9b400f14b", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `T: TraitWithAssoc` is not satisfied\n-  --> $DIR/bound_reduction2.rs:10:1\n+  --> $DIR/bound_reduction2.rs:10:15\n    |\n LL | type Foo<V> = impl Trait<V>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `TraitWithAssoc` is not implemented for `T`\n+   |               ^^^^^^^^^^^^^ the trait `TraitWithAssoc` is not implemented for `T`\n    |\n help: consider further restricting this bound\n    |"}, {"sha": "21c2e8a9db618ceffe81427738ab2ddc426244b6", "filename": "src/test/ui/type-alias-impl-trait/declared_but_never_defined.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.stderr?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -1,8 +1,8 @@\n error: could not find defining uses\n-  --> $DIR/declared_but_never_defined.rs:6:1\n+  --> $DIR/declared_but_never_defined.rs:6:12\n    |\n LL | type Bar = impl std::fmt::Debug;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "c0cb94b15d033135ca3af397b52eac6c922ac320", "filename": "src/test/ui/type-alias-impl-trait/declared_but_not_defined_in_scope.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.stderr?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -1,8 +1,8 @@\n error: could not find defining uses\n-  --> $DIR/declared_but_not_defined_in_scope.rs:7:5\n+  --> $DIR/declared_but_not_defined_in_scope.rs:7:20\n    |\n LL |     pub type Boo = impl ::std::fmt::Debug;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "18d8daa05e63d168fb413a3ca948c39316897749", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -13,16 +13,16 @@ LL |     let z: i32 = x;\n    |            expected due to this\n ...\n LL | type WrongGeneric<T> = impl 'static;\n-   | ------------------------------------ the found opaque type\n+   |                        ------------ the found opaque type\n    |\n    = note:     expected type `i32`\n-           found opaque type `WrongGeneric::<&{integer}>`\n+           found opaque type `impl Sized`\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:9:1\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:9:24\n    |\n LL | type WrongGeneric<T> = impl 'static;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |                        ^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n ...\n LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n    |                  - help: consider adding an explicit lifetime bound...: `T: 'static`"}, {"sha": "911f592f73f27d0781ab3c3fe41e3daf77095d3f", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -5,10 +5,10 @@ LL | type Underconstrained<T: Trait> = impl 'static;\n    |                                   ^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: Trait` is not satisfied\n-  --> $DIR/generic_underconstrained.rs:6:1\n+  --> $DIR/generic_underconstrained.rs:6:35\n    |\n LL | type Underconstrained<T: Trait> = impl 'static;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n+   |                                   ^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n    |\n    = note: the return type of a function must have a statically known size\n help: consider restricting type parameter `T`"}, {"sha": "247d68ef2a1f0edd078cf7fe2ee4e54a0e7e65b8", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -11,10 +11,10 @@ LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n    |                                              ^^^^^^^^^^^^\n \n error[E0277]: `U` doesn't implement `std::fmt::Debug`\n-  --> $DIR/generic_underconstrained2.rs:5:1\n+  --> $DIR/generic_underconstrained2.rs:5:45\n    |\n LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |                                             ^^^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n ...\n LL |     5u32\n    |     ---- this returned value is of type `u32`\n@@ -27,10 +27,10 @@ LL | fn underconstrained<U: std::fmt::Debug>(_: U) -> Underconstrained<U> {\n    |                      ^^^^^^^^^^^^^^^^^\n \n error[E0277]: `V` doesn't implement `std::fmt::Debug`\n-  --> $DIR/generic_underconstrained2.rs:14:1\n+  --> $DIR/generic_underconstrained2.rs:14:46\n    |\n LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `V` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |                                              ^^^^^^^^^^^^ `V` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n ...\n LL |     5u32\n    |     ---- this returned value is of type `u32`"}, {"sha": "cc121ac89fb8d756033655c89870fb82000950dc", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -1,19 +1,19 @@\n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/issue-57611-trait-alias.rs:17:5\n+  --> $DIR/issue-57611-trait-alias.rs:17:16\n    |\n LL |     type Bar = impl Baz<Self, Self>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected signature of `for<'r> fn(&'r X) -> _`\n+   |                ^^^^^^^^^^^^^^^^^^^^ expected signature of `for<'r> fn(&'r X) -> _`\n ...\n LL |         |x| x\n    |         ----- found signature of `fn(_) -> _`\n    |\n    = note: the return type of a function must have a statically known size\n \n error[E0271]: type mismatch resolving `for<'r> <[closure@$DIR/issue-57611-trait-alias.rs:21:9: 21:14] as std::ops::FnOnce<(&'r X,)>>::Output == &'r X`\n-  --> $DIR/issue-57611-trait-alias.rs:17:5\n+  --> $DIR/issue-57611-trait-alias.rs:17:16\n    |\n LL |     type Bar = impl Baz<Self, Self>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter, found concrete lifetime\n+   |                ^^^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter, found concrete lifetime\n    |\n    = note: the return type of a function must have a statically known size\n "}, {"sha": "bf2d612fcdb411511500d8dc3b6494582a040522", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -8,20 +8,20 @@ LL |     type Item = impl Bug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `(): Bug` is not satisfied\n-  --> $DIR/issue-60371.rs:8:5\n+  --> $DIR/issue-60371.rs:8:17\n    |\n LL |     type Item = impl Bug;\n-   |     ^^^^^^^^^^^^^^^^^^^^^ the trait `Bug` is not implemented for `()`\n+   |                 ^^^^^^^^ the trait `Bug` is not implemented for `()`\n    |\n    = help: the following implementations were found:\n              <&() as Bug>\n    = note: the return type of a function must have a statically known size\n \n error: could not find defining uses\n-  --> $DIR/issue-60371.rs:8:5\n+  --> $DIR/issue-60371.rs:8:17\n    |\n LL |     type Item = impl Bug;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |                 ^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "d07f64c3312d3da03062d1c52df0d967411aa971", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -1,10 +1,10 @@\n error[E0271]: type mismatch resolving `<[closure@$DIR/issue-63279.rs:8:5: 8:28] as std::ops::FnOnce<()>>::Output == ()`\n-  --> $DIR/issue-63279.rs:5:1\n+  --> $DIR/issue-63279.rs:5:16\n    |\n LL | type Closure = impl FnOnce();\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected opaque type, found `()`\n+   |                ^^^^^^^^^^^^^ expected opaque type, found `()`\n    |\n-   = note: expected opaque type `Closure`\n+   = note: expected opaque type `impl std::ops::FnOnce<()>`\n                 found unit type `()`\n    = note: the return type of a function must have a statically known size\n "}, {"sha": "4fbbf3475280355f7a93983c669e399efc80bef4", "filename": "src/test/ui/type-alias-impl-trait/never_reveal_concrete_type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.stderr?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -2,17 +2,17 @@ error[E0308]: mismatched types\n   --> $DIR/never_reveal_concrete_type.rs:13:27\n    |\n LL | type NoReveal = impl std::fmt::Debug;\n-   | ------------------------------------- the found opaque type\n+   |                 -------------------- the found opaque type\n ...\n LL |     let _: &'static str = x;\n    |            ------------   ^ expected `&str`, found opaque type\n    |            |\n    |            expected due to this\n    |\n    = note: expected reference `&'static str`\n-            found opaque type `NoReveal`\n+            found opaque type `impl std::fmt::Debug`\n \n-error[E0605]: non-primitive cast: `NoReveal` as `&'static str`\n+error[E0605]: non-primitive cast: `impl std::fmt::Debug` as `&'static str`\n   --> $DIR/never_reveal_concrete_type.rs:14:13\n    |\n LL |     let _ = x as &'static str;"}, {"sha": "61025e846921e3dfc7c39d65c1178c702a95df40", "filename": "src/test/ui/type-alias-impl-trait/no_inferrable_concrete_type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.stderr?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -1,8 +1,8 @@\n error: could not find defining uses\n-  --> $DIR/no_inferrable_concrete_type.rs:6:1\n+  --> $DIR/no_inferrable_concrete_type.rs:6:12\n    |\n LL | type Foo = impl Copy;\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d237cc6238ae176478321c77e558c5f890ca5644", "filename": "src/test/ui/type-alias-impl-trait/no_revealing_outside_defining_module.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.stderr?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -2,28 +2,28 @@ error[E0308]: mismatched types\n   --> $DIR/no_revealing_outside_defining_module.rs:15:19\n    |\n LL |     pub type Boo = impl ::std::fmt::Debug;\n-   |     -------------------------------------- the found opaque type\n+   |                    ---------------------- the found opaque type\n ...\n LL |     let _: &str = bomp();\n    |            ----   ^^^^^^ expected `&str`, found opaque type\n    |            |\n    |            expected due to this\n    |\n    = note: expected reference `&str`\n-            found opaque type `Boo`\n+            found opaque type `impl std::fmt::Debug`\n \n error[E0308]: mismatched types\n   --> $DIR/no_revealing_outside_defining_module.rs:19:5\n    |\n LL |     pub type Boo = impl ::std::fmt::Debug;\n-   |     -------------------------------------- the expected opaque type\n+   |                    ---------------------- the expected opaque type\n ...\n LL | fn bomp() -> boo::Boo {\n-   |              -------- expected `Boo` because of return type\n+   |              -------- expected `impl std::fmt::Debug` because of return type\n LL |     \"\"\n    |     ^^ expected opaque type, found `&str`\n    |\n-   = note: expected opaque type `Boo`\n+   = note: expected opaque type `impl std::fmt::Debug`\n                 found reference `&'static str`\n \n error: aborting due to 2 previous errors"}, {"sha": "726f4ea6e00f71c5006f71ec819b6db13d0544f8", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-with-cycle-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error.stderr?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -1,8 +1,8 @@\n error: could not find defining uses\n-  --> $DIR/type-alias-impl-trait-with-cycle-error.rs:3:1\n+  --> $DIR/type-alias-impl-trait-with-cycle-error.rs:3:12\n    |\n LL | type Foo = impl Fn() -> Foo;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3947cc4d27055f5972f5b183beba416da1604957", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-with-cycle-error2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e49e67c446538aa2000ed768308054f61c308e7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error2.stderr?ref=4e49e67c446538aa2000ed768308054f61c308e7", "patch": "@@ -1,8 +1,8 @@\n error: could not find defining uses\n-  --> $DIR/type-alias-impl-trait-with-cycle-error2.rs:7:1\n+  --> $DIR/type-alias-impl-trait-with-cycle-error2.rs:7:12\n    |\n LL | type Foo = impl Bar<Foo, Item = Foo>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}]}