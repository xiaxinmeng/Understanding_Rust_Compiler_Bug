{"sha": "94414ac7bba05377468ef0b7c775df6e87535ddd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NDE0YWM3YmJhMDUzNzc0NjhlZjBiN2M3NzVkZjZlODc1MzVkZGQ=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-10-04T05:01:01Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-12-02T13:30:30Z"}, "message": "Address excessive line length that was triggering warning during linting", "tree": {"sha": "1beb08a6a6863b98e8f900228b674665d82e4c14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1beb08a6a6863b98e8f900228b674665d82e4c14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94414ac7bba05377468ef0b7c775df6e87535ddd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94414ac7bba05377468ef0b7c775df6e87535ddd", "html_url": "https://github.com/rust-lang/rust/commit/94414ac7bba05377468ef0b7c775df6e87535ddd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94414ac7bba05377468ef0b7c775df6e87535ddd/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad734680af76d92f8e490141d72bf2a629e2d5f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad734680af76d92f8e490141d72bf2a629e2d5f8", "html_url": "https://github.com/rust-lang/rust/commit/ad734680af76d92f8e490141d72bf2a629e2d5f8"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "940f35cf49830aa1f4b04c8246a40baaf0f38e70", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94414ac7bba05377468ef0b7c775df6e87535ddd/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94414ac7bba05377468ef0b7c775df6e87535ddd/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=94414ac7bba05377468ef0b7c775df6e87535ddd", "patch": "@@ -217,7 +217,11 @@ impl<'tcx> Body<'tcx> {\n \n     #[inline]\n     pub fn unwrap_predecessors(&self) -> &IndexVec<BasicBlock, Vec<BasicBlock>> {\n-        assert!(self.predecessors_cache.is_some(), \"Expected predecessors_cache to be `Some(...)` for block at: {:?}\", self.span.data());\n+        assert!(\n+            self.predecessors_cache.is_some(),\n+            \"Expected predecessors_cache to be `Some(...)` for block at: {:?}\",\n+            self.span.data()\n+        );\n         self.predecessors_cache.as_ref().unwrap()\n     }\n "}]}