{"sha": "2f6945c77664eb0575de6f016f24c9f6ced1923f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNjk0NWM3NzY2NGViMDU3NWRlNmYwMTZmMjRjOWY2Y2VkMTkyM2Y=", "commit": {"author": {"name": "Roman Stoliar", "email": "rizakrko@rambler.ru", "date": "2018-04-22T17:35:21Z"}, "committer": {"name": "Roman Stoliar", "email": "rizakrko@rambler.ru", "date": "2018-05-11T12:12:30Z"}, "message": "added missing implementation hint", "tree": {"sha": "bec29631fc46bd5771ad5c306a99d1d7ec5ec379", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bec29631fc46bd5771ad5c306a99d1d7ec5ec379"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f6945c77664eb0575de6f016f24c9f6ced1923f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f6945c77664eb0575de6f016f24c9f6ced1923f", "html_url": "https://github.com/rust-lang/rust/commit/2f6945c77664eb0575de6f016f24c9f6ced1923f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f6945c77664eb0575de6f016f24c9f6ced1923f/comments", "author": {"login": "rizakrko", "id": 18172179, "node_id": "MDQ6VXNlcjE4MTcyMTc5", "avatar_url": "https://avatars.githubusercontent.com/u/18172179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rizakrko", "html_url": "https://github.com/rizakrko", "followers_url": "https://api.github.com/users/rizakrko/followers", "following_url": "https://api.github.com/users/rizakrko/following{/other_user}", "gists_url": "https://api.github.com/users/rizakrko/gists{/gist_id}", "starred_url": "https://api.github.com/users/rizakrko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rizakrko/subscriptions", "organizations_url": "https://api.github.com/users/rizakrko/orgs", "repos_url": "https://api.github.com/users/rizakrko/repos", "events_url": "https://api.github.com/users/rizakrko/events{/privacy}", "received_events_url": "https://api.github.com/users/rizakrko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rizakrko", "id": 18172179, "node_id": "MDQ6VXNlcjE4MTcyMTc5", "avatar_url": "https://avatars.githubusercontent.com/u/18172179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rizakrko", "html_url": "https://github.com/rizakrko", "followers_url": "https://api.github.com/users/rizakrko/followers", "following_url": "https://api.github.com/users/rizakrko/following{/other_user}", "gists_url": "https://api.github.com/users/rizakrko/gists{/gist_id}", "starred_url": "https://api.github.com/users/rizakrko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rizakrko/subscriptions", "organizations_url": "https://api.github.com/users/rizakrko/orgs", "repos_url": "https://api.github.com/users/rizakrko/repos", "events_url": "https://api.github.com/users/rizakrko/events{/privacy}", "received_events_url": "https://api.github.com/users/rizakrko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e5a155a93d21d17fc62fff3d61dc33b90880820", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e5a155a93d21d17fc62fff3d61dc33b90880820", "html_url": "https://github.com/rust-lang/rust/commit/4e5a155a93d21d17fc62fff3d61dc33b90880820"}], "stats": {"total": 122, "additions": 86, "deletions": 36}, "files": [{"sha": "de042ae31fbd36c86d71aac8aaf0844d5f1acef8", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 68, "deletions": 36, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/2f6945c77664eb0575de6f016f24c9f6ced1923f/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6945c77664eb0575de6f016f24c9f6ced1923f/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=2f6945c77664eb0575de6f016f24c9f6ced1923f", "patch": "@@ -280,43 +280,67 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                     op.node.as_str()));\n                             }\n                         }\n-\n-                        let missing_trait = match op.node {\n-                            hir::BiAdd    => Some(\"std::ops::Add\"),\n-                            hir::BiSub    => Some(\"std::ops::Sub\"),\n-                            hir::BiMul    => Some(\"std::ops::Mul\"),\n-                            hir::BiDiv    => Some(\"std::ops::Div\"),\n-                            hir::BiRem    => Some(\"std::ops::Rem\"),\n-                            hir::BiBitAnd => Some(\"std::ops::BitAnd\"),\n-                            hir::BiBitOr  => Some(\"std::ops::BitOr\"),\n-                            hir::BiShl    => Some(\"std::ops::Shl\"),\n-                            hir::BiShr    => Some(\"std::ops::Shr\"),\n-                            hir::BiEq | hir::BiNe => Some(\"std::cmp::PartialEq\"),\n-                            hir::BiLt | hir::BiLe | hir::BiGt | hir::BiGe =>\n-                                Some(\"std::cmp::PartialOrd\"),\n-                            _             => None\n-                        };\n-\n-                        if let Some(missing_trait) = missing_trait {\n-                            if missing_trait == \"std::ops::Add\" &&\n-                                self.check_str_addition(expr, lhs_expr, rhs_expr, lhs_ty,\n-                                                        rhs_ty, &mut err) {\n-                                // This has nothing here because it means we did string\n-                                // concatenation (e.g. \"Hello \" + \"World!\"). This means\n-                                // we don't want the note in the else clause to be emitted\n-                            } else if let ty::TyParam(_) = lhs_ty.sty {\n-                                // FIXME: point to span of param\n-                                err.note(\n-                                    &format!(\"`{}` might need a bound for `{}`\",\n-                                             lhs_ty, missing_trait));\n-                            } else {\n-                                err.note(\n-                                    &format!(\"an implementation of `{}` might be missing for `{}`\",\n-                                             missing_trait, lhs_ty));\n+                        IsAssign::No => {\n+                            let mut err = struct_span_err!(self.tcx.sess, expr.span, E0369,\n+                                            \"binary operation `{}` cannot be applied to type `{}`\",\n+                                            op.node.as_str(),\n+                                            lhs_ty);\n+                            let missing_trait = match op.node {\n+                                hir::BiAdd    => Some(\"std::ops::Add\"),\n+                                hir::BiSub    => Some(\"std::ops::Sub\"),\n+                                hir::BiMul    => Some(\"std::ops::Mul\"),\n+                                hir::BiDiv    => Some(\"std::ops::Div\"),\n+                                hir::BiRem    => Some(\"std::ops::Rem\"),\n+                                hir::BiBitAnd => Some(\"std::ops::BitAnd\"),\n+                                hir::BiBitXor => Some(\"std::ops::BitXor\"),\n+                                hir::BiBitOr  => Some(\"std::ops::BitOr\"),\n+                                hir::BiShl    => Some(\"std::ops::Shl\"),\n+                                hir::BiShr    => Some(\"std::ops::Shr\"),\n+                                hir::BiEq | hir::BiNe => Some(\"std::cmp::PartialEq\"),\n+                                hir::BiLt | hir::BiLe | hir::BiGt | hir::BiGe =>\n+                                    Some(\"std::cmp::PartialOrd\"),\n+                                _             => None\n+                            };\n+                            if let TypeVariants::TyRef(_, ref ty_mut) = lhs_ty.sty {\n+                                if {\n+                                    !self.infcx.type_moves_by_default(self.param_env,\n+                                                                        ty_mut.ty,\n+                                                                        lhs_expr.span) &&\n+                                        self.lookup_op_method(ty_mut.ty,\n+                                                                &[rhs_ty],\n+                                                                Op::Binary(op, is_assign))\n+                                            .is_ok()\n+                                } {\n+                                    err.note(\n+                                        &format!(\n+                                                \"this is a reference to a type that `{}` can be \\\n+                                                applied to; you need to dereference this variable \\\n+                                                once for this operation to work\",\n+                                        op.node.as_str()));\n+                                }\n                             }\n+                            (err, missing_trait)\n+                        }\n+                    };\n+                    if let Some(missing_trait) = missing_trait {\n+                        if missing_trait == \"std::ops::Add\" &&\n+                            self.check_str_addition(expr, lhs_expr, rhs_expr, lhs_ty,\n+                                                    rhs_ty, &mut err) {\n+                            // This has nothing here because it means we did string\n+                            // concatenation (e.g. \"Hello \" + \"World!\"). This means\n+                            // we don't want the note in the else clause to be emitted\n+                        } else if let ty::TyParam(_) = lhs_ty.sty {\n+                            // FIXME: point to span of param\n+                            err.note(\n+                                &format!(\"`{}` might need a bound for `{}`\",\n+                                            lhs_ty, missing_trait));\n+                        } else {\n+                            err.note(\n+                                &format!(\"an implementation of `{}` might be missing for `{}`\",\n+                                            missing_trait, lhs_ty));\n                         }\n-                        err.emit();\n                     }\n+                    err.emit();\n                 }\n                 self.tcx.types.err\n             }\n@@ -393,9 +417,17 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             Err(()) => {\n                 let actual = self.resolve_type_vars_if_possible(&operand_ty);\n                 if !actual.references_error() {\n-                    struct_span_err!(self.tcx.sess, ex.span, E0600,\n+                    let mut err = struct_span_err!(self.tcx.sess, ex.span, E0600,\n                                      \"cannot apply unary operator `{}` to type `{}`\",\n-                                     op.as_str(), actual).emit();\n+                                     op.as_str(), actual);\n+                    let missing_trait = match op {\n+                        hir::UnNeg => \"std::ops::Neg\",\n+                        hir::UnNot => \"std::ops::Not\",\n+                        hir::UnDeref => \"std::ops::UnDerf\"\n+                    };\n+                    err.note(&format!(\"an implementation of `{}` might be missing for `{}`\",\n+                                             missing_trait, operand_ty));\n+                    err.emit();\n                 }\n                 self.tcx.types.err\n             }"}, {"sha": "b5c2376239d14adbfae19494e1418240d1777673", "filename": "src/test/ui/codemap_tests/issue-28308.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6945c77664eb0575de6f016f24c9f6ced1923f/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6945c77664eb0575de6f016f24c9f6ced1923f/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr?ref=2f6945c77664eb0575de6f016f24c9f6ced1923f", "patch": "@@ -3,6 +3,8 @@ error[E0600]: cannot apply unary operator `!` to type `&'static str`\n    |\n LL |     assert!(\"foo\");\n    |     ^^^^^^^^^^^^^^^\n+   |\n+   = note: an implementation of `std::ops::Not` might be missing for `&'static str`\n \n error: aborting due to previous error\n "}, {"sha": "43e1ca4096cf69a37f9c90006a04ced496241fc9", "filename": "src/test/ui/error-codes/E0067.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6945c77664eb0575de6f016f24c9f6ced1923f/src%2Ftest%2Fui%2Ferror-codes%2FE0067.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6945c77664eb0575de6f016f24c9f6ced1923f/src%2Ftest%2Fui%2Ferror-codes%2FE0067.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0067.stderr?ref=2f6945c77664eb0575de6f016f24c9f6ced1923f", "patch": "@@ -5,6 +5,8 @@ LL |     LinkedList::new() += 1; //~ ERROR E0368\n    |     -----------------^^^^^\n    |     |\n    |     cannot use `+=` on type `std::collections::LinkedList<_>`\n+   |\n+   = note: an implementation of `std::ops::AddAssign` might be missing for `std::collections::LinkedList<_>`\n \n error[E0067]: invalid left-hand side expression\n   --> $DIR/E0067.rs:14:5"}, {"sha": "bd79ea79c8b56341f4981ab0fa72999a4d593581", "filename": "src/test/ui/error-codes/E0600.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6945c77664eb0575de6f016f24c9f6ced1923f/src%2Ftest%2Fui%2Ferror-codes%2FE0600.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6945c77664eb0575de6f016f24c9f6ced1923f/src%2Ftest%2Fui%2Ferror-codes%2FE0600.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0600.stderr?ref=2f6945c77664eb0575de6f016f24c9f6ced1923f", "patch": "@@ -3,6 +3,8 @@ error[E0600]: cannot apply unary operator `!` to type `&'static str`\n    |\n LL |     !\"a\"; //~ ERROR E0600\n    |     ^^^^\n+   |\n+   = note: an implementation of `std::ops::Not` might be missing for `&'static str`\n \n error: aborting due to previous error\n "}, {"sha": "6165806aac9c4fcfac467f6ae18486cee360646b", "filename": "src/test/ui/error-festival.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f6945c77664eb0575de6f016f24c9f6ced1923f/src%2Ftest%2Fui%2Ferror-festival.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6945c77664eb0575de6f016f24c9f6ced1923f/src%2Ftest%2Fui%2Ferror-festival.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-festival.stderr?ref=2f6945c77664eb0575de6f016f24c9f6ced1923f", "patch": "@@ -17,6 +17,8 @@ LL |     x += 2;\n    |     -^^^^^\n    |     |\n    |     cannot use `+=` on type `&str`\n+   |\n+   = note: an implementation of `std::ops::AddAssign` might be missing for `&str`\n \n error[E0599]: no method named `z` found for type `&str` in the current scope\n   --> $DIR/error-festival.rs:26:7\n@@ -29,6 +31,8 @@ error[E0600]: cannot apply unary operator `!` to type `Question`\n    |\n LL |     !Question::Yes;\n    |     ^^^^^^^^^^^^^^\n+   |\n+   = note: an implementation of `std::ops::Not` might be missing for `Question`\n \n error[E0604]: only `u8` can be cast as `char`, not `u32`\n   --> $DIR/error-festival.rs:35:5"}, {"sha": "8831e874a200e55434a9908b13c4648761214d54", "filename": "src/test/ui/feature-gate-negate-unsigned.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f6945c77664eb0575de6f016f24c9f6ced1923f/src%2Ftest%2Fui%2Ffeature-gate-negate-unsigned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6945c77664eb0575de6f016f24c9f6ced1923f/src%2Ftest%2Fui%2Ffeature-gate-negate-unsigned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-negate-unsigned.stderr?ref=2f6945c77664eb0575de6f016f24c9f6ced1923f", "patch": "@@ -3,12 +3,16 @@ error[E0600]: cannot apply unary operator `-` to type `usize`\n    |\n LL |     let _max: usize = -1;\n    |                       ^^\n+   |\n+   = note: an implementation of `std::ops::Neg` might be missing for `usize`\n \n error[E0600]: cannot apply unary operator `-` to type `u8`\n   --> $DIR/feature-gate-negate-unsigned.rs:24:14\n    |\n LL |     let _y = -x;\n    |              ^^\n+   |\n+   = note: an implementation of `std::ops::Neg` might be missing for `u8`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "adef9848ba743b72c10ac55cc14c66049c10a87e", "filename": "src/test/ui/issue-5239-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6945c77664eb0575de6f016f24c9f6ced1923f/src%2Ftest%2Fui%2Fissue-5239-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6945c77664eb0575de6f016f24c9f6ced1923f/src%2Ftest%2Fui%2Fissue-5239-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-5239-1.stderr?ref=2f6945c77664eb0575de6f016f24c9f6ced1923f", "patch": "@@ -5,6 +5,8 @@ LL |     let x = |ref x: isize| { x += 1; };\n    |                              -^^^^^\n    |                              |\n    |                              cannot use `+=` on type `&isize`\n+   |\n+   = note: an implementation of `std::ops::AddAssign` might be missing for `&isize`\n \n error: aborting due to previous error\n "}, {"sha": "7ba21efcd5125448da10ba8c422e7c827b3d3295", "filename": "src/test/ui/reachable/expr_unary.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6945c77664eb0575de6f016f24c9f6ced1923f/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6945c77664eb0575de6f016f24c9f6ced1923f/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr?ref=2f6945c77664eb0575de6f016f24c9f6ced1923f", "patch": "@@ -3,6 +3,8 @@ error[E0600]: cannot apply unary operator `!` to type `!`\n    |\n LL |     let x: ! = ! { return; }; //~ ERROR unreachable\n    |                ^^^^^^^^^^^^^\n+   |\n+   = note: an implementation of `std::ops::Not` might be missing for `!`\n \n error: unreachable expression\n   --> $DIR/expr_unary.rs:17:16"}]}