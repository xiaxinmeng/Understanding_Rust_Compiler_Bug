{"sha": "dc2c9746f8236825b063e9b1fa4fe1f57a6118ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMmM5NzQ2ZjgyMzY4MjViMDYzZTliMWZhNGZlMWY1N2E2MTE4ZWQ=", "commit": {"author": {"name": "L\u00e9o Lanteri Thauvin", "email": "leseulartichaut@gmail.com", "date": "2021-08-25T13:48:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-25T13:48:58Z"}, "message": "Rollup merge of #88291 - mdsn:partition-in-blocks-safety, r=Mark-Simulacrum\n\nAdd SAFETY comments to core::slice::sort::partition_in_blocks\n\nA few more SAFETY comments for #66219. There are still a few more in this module.\n\n`@rustbot` label T-libs T-compiler C-cleanup", "tree": {"sha": "f805d22d2b674e01488152a34a0f9d93a9e9ab07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f805d22d2b674e01488152a34a0f9d93a9e9ab07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc2c9746f8236825b063e9b1fa4fe1f57a6118ed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhJkpKCRBK7hj4Ov3rIwAAFBAIABpeHR0Mha3/fRN63AT45pCj\neXiUJSB3IZNwJuLeafixFlHhO7BVlcltfMFScBTi89hFi7SV2uX/AoDL6FfAIBGS\n+bCN8vICH3ddeP1QvmcW9QL5VJ6dT2WI8mtsh6FoG//IKadiW6WrXDh5DIUzx9Ei\ntSG3oEJcCNmky9KYhnBNDeB4Jh7gOd8eoMPKwumO6PaWjkbWKQ/7anARsi+uqAdF\nN40Z2zy/+L9+P2RJHlkCm/VUX6unzcgVPj53zNe3/487YSOwQTcGq78loEIV1/SN\nQXXB9324/g4U4iyHGY0obyzi6YBDD0HUcokfYLonTbkRK9WSyAlgr9enNB0fsZM=\n=sMvA\n-----END PGP SIGNATURE-----\n", "payload": "tree f805d22d2b674e01488152a34a0f9d93a9e9ab07\nparent e6d922b018c4b7775aa88962c6e04b05727b5a7b\nparent 09e02a891963d7418f1db4d8d4cf9a8d177d2cf9\nauthor L\u00e9o Lanteri Thauvin <leseulartichaut@gmail.com> 1629899338 +0200\ncommitter GitHub <noreply@github.com> 1629899338 +0200\n\nRollup merge of #88291 - mdsn:partition-in-blocks-safety, r=Mark-Simulacrum\n\nAdd SAFETY comments to core::slice::sort::partition_in_blocks\n\nA few more SAFETY comments for #66219. There are still a few more in this module.\n\n`@rustbot` label T-libs T-compiler C-cleanup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc2c9746f8236825b063e9b1fa4fe1f57a6118ed", "html_url": "https://github.com/rust-lang/rust/commit/dc2c9746f8236825b063e9b1fa4fe1f57a6118ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc2c9746f8236825b063e9b1fa4fe1f57a6118ed/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6d922b018c4b7775aa88962c6e04b05727b5a7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6d922b018c4b7775aa88962c6e04b05727b5a7b", "html_url": "https://github.com/rust-lang/rust/commit/e6d922b018c4b7775aa88962c6e04b05727b5a7b"}, {"sha": "09e02a891963d7418f1db4d8d4cf9a8d177d2cf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/09e02a891963d7418f1db4d8d4cf9a8d177d2cf9", "html_url": "https://github.com/rust-lang/rust/commit/09e02a891963d7418f1db4d8d4cf9a8d177d2cf9"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "8a31388fbdbbc6b68704022a2de0f4e09d50f5b6", "filename": "library/core/src/slice/sort.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dc2c9746f8236825b063e9b1fa4fe1f57a6118ed/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2c9746f8236825b063e9b1fa4fe1f57a6118ed/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs?ref=dc2c9746f8236825b063e9b1fa4fe1f57a6118ed", "patch": "@@ -369,6 +369,22 @@ where\n             // Instead of swapping one pair at the time, it is more efficient to perform a cyclic\n             // permutation. This is not strictly equivalent to swapping, but produces a similar\n             // result using fewer memory operations.\n+\n+            // SAFETY: The use of `ptr::read` is valid because there is at least one element in\n+            // both `offsets_l` and `offsets_r`, so `left!` is a valid pointer to read from.\n+            //\n+            // The uses of `left!` involve calls to `offset` on `l`, which points to the\n+            // beginning of `v`. All the offsets pointed-to by `start_l` are at most `block_l`, so\n+            // these `offset` calls are safe as all reads are within the block. The same argument\n+            // applies for the uses of `right!`.\n+            //\n+            // The calls to `start_l.offset` are valid because there are at most `count-1` of them,\n+            // plus the final one at the end of the unsafe block, where `count` is the minimum number\n+            // of collected offsets in `offsets_l` and `offsets_r`, so there is no risk of there not\n+            // being enough elements. The same reasoning applies to the calls to `start_r.offset`.\n+            //\n+            // The calls to `copy_nonoverlapping` are safe because `left!` and `right!` are guaranteed\n+            // not to overlap, and are valid because of the reasoning above.\n             unsafe {\n                 let tmp = ptr::read(left!());\n                 ptr::copy_nonoverlapping(right!(), left!(), 1);\n@@ -389,11 +405,21 @@ where\n \n         if start_l == end_l {\n             // All out-of-order elements in the left block were moved. Move to the next block.\n+\n+            // block-width-guarantee\n+            // SAFETY: if `!is_done` then the slice width is guaranteed to be at least `2*BLOCK` wide. There\n+            // are at most `BLOCK` elements in `offsets_l` because of its size, so the `offset` operation is\n+            // safe. Otherwise, the debug assertions in the `is_done` case guarantee that\n+            // `width(l, r) == block_l + block_r`, namely, that the block sizes have been adjusted to account\n+            // for the smaller number of remaining elements.\n             l = unsafe { l.offset(block_l as isize) };\n         }\n \n         if start_r == end_r {\n             // All out-of-order elements in the right block were moved. Move to the previous block.\n+\n+            // SAFETY: Same argument as [block-width-guarantee]. Either this is a full block `2*BLOCK`-wide,\n+            // or `block_r` has been adjusted for the last handful of elements.\n             r = unsafe { r.offset(-(block_r as isize)) };\n         }\n "}]}