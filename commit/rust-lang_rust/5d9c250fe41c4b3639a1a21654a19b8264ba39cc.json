{"sha": "5d9c250fe41c4b3639a1a21654a19b8264ba39cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkOWMyNTBmZTQxYzRiMzYzOWExYTIxNjU0YTE5YjgyNjRiYTM5Y2M=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-08-24T20:51:57Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-08-24T21:39:56Z"}, "message": "Use StructGEP instead of GEPi where appropriate\n\nStructGEP seems clearer and probably does an even better job of the\nmicro-optimization that we have in GEPi.", "tree": {"sha": "27254aea2c07a42537d4c1ddfe534307a753e470", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27254aea2c07a42537d4c1ddfe534307a753e470"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d9c250fe41c4b3639a1a21654a19b8264ba39cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d9c250fe41c4b3639a1a21654a19b8264ba39cc", "html_url": "https://github.com/rust-lang/rust/commit/5d9c250fe41c4b3639a1a21654a19b8264ba39cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d9c250fe41c4b3639a1a21654a19b8264ba39cc/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "110a34cd84585b9f8853331bd6df9f6dc9989220", "url": "https://api.github.com/repos/rust-lang/rust/commits/110a34cd84585b9f8853331bd6df9f6dc9989220", "html_url": "https://github.com/rust-lang/rust/commit/110a34cd84585b9f8853331bd6df9f6dc9989220"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "46211e6bd01ae0d4e40fda8f51130f115a8a56ad", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5d9c250fe41c4b3639a1a21654a19b8264ba39cc/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9c250fe41c4b3639a1a21654a19b8264ba39cc/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=5d9c250fe41c4b3639a1a21654a19b8264ba39cc", "patch": "@@ -892,7 +892,7 @@ pub fn trans_get_discr<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, r: &Repr<'tcx>,\n     let val = match *r {\n         CEnum(ity, min, max) => load_discr(bcx, ity, scrutinee, min, max),\n         General(ity, ref cases, _) => {\n-            let ptr = GEPi(bcx, scrutinee, &[0, 0]);\n+            let ptr = StructGEP(bcx, scrutinee, 0);\n             load_discr(bcx, ity, ptr, 0, (cases.len() - 1) as Disr)\n         }\n         Univariant(..) => C_u8(bcx.ccx(), 0),\n@@ -986,13 +986,13 @@ pub fn trans_set_discr<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, r: &Repr<'tcx>,\n                 Store(bcx, C_u8(bcx.ccx(), DTOR_NEEDED), ptr);\n             }\n             Store(bcx, C_integral(ll_inttype(bcx.ccx(), ity), discr as u64, true),\n-                  GEPi(bcx, val, &[0, 0]));\n+                  StructGEP(bcx, val, 0));\n         }\n         Univariant(ref st, dtor) => {\n             assert_eq!(discr, 0);\n             if dtor_active(dtor) {\n                 Store(bcx, C_u8(bcx.ccx(), DTOR_NEEDED),\n-                    GEPi(bcx, val, &[0, st.fields.len() - 1]));\n+                      StructGEP(bcx, val, st.fields.len() - 1));\n             }\n         }\n         RawNullablePointer { nndiscr, nnty, ..} => {\n@@ -1091,7 +1091,7 @@ pub fn struct_field_ptr<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, st: &Struct<'tcx>, v\n         val\n     };\n \n-    GEPi(bcx, val, &[0, ix])\n+    StructGEP(bcx, val, ix)\n }\n \n pub fn fold_variants<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n@@ -1162,7 +1162,7 @@ pub fn trans_drop_flag_ptr<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n     let ptr_ty = bcx.tcx().mk_imm_ptr(tcx.dtor_type());\n     match *r {\n         Univariant(ref st, dtor) if dtor_active(dtor) => {\n-            let flag_ptr = GEPi(bcx, val, &[0, st.fields.len() - 1]);\n+            let flag_ptr = StructGEP(bcx, val, st.fields.len() - 1);\n             datum::immediate_rvalue_bcx(bcx, flag_ptr, ptr_ty).to_expr_datumblock()\n         }\n         General(_, _, dtor) if dtor_active(dtor) => {"}, {"sha": "e8b669894a70587b7e7d2db3a3aab81dce85045d", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d9c250fe41c4b3639a1a21654a19b8264ba39cc/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9c250fe41c4b3639a1a21654a19b8264ba39cc/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=5d9c250fe41c4b3639a1a21654a19b8264ba39cc", "patch": "@@ -1415,7 +1415,7 @@ pub fn create_datums_for_fn_args<'a, 'tcx>(mut bcx: Block<'a, 'tcx>,\n                                                                llval| {\n                         for (j, &tupled_arg_ty) in\n                                     tupled_arg_tys.iter().enumerate() {\n-                            let lldest = GEPi(bcx, llval, &[0, j]);\n+                            let lldest = StructGEP(bcx, llval, j);\n                             if common::type_is_fat_ptr(bcx.tcx(), tupled_arg_ty) {\n                                 let data = get_param(bcx.fcx.llfn, idx);\n                                 let extra = get_param(bcx.fcx.llfn, idx + 1);"}, {"sha": "d29a5f0f746e9ed0f751497b07aaa061cf48e7bc", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d9c250fe41c4b3639a1a21654a19b8264ba39cc/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9c250fe41c4b3639a1a21654a19b8264ba39cc/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=5d9c250fe41c4b3639a1a21654a19b8264ba39cc", "patch": "@@ -70,7 +70,7 @@ fn load_closure_environment<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         let upvar_id = ty::UpvarId { var_id: freevar.def.local_node_id(),\n                                      closure_expr_id: closure_id.node };\n         let upvar_capture = bcx.tcx().upvar_capture(upvar_id).unwrap();\n-        let mut upvar_ptr = GEPi(bcx, llenv, &[0, i]);\n+        let mut upvar_ptr = StructGEP(bcx, llenv, i);\n         let captured_by_ref = match upvar_capture {\n             ty::UpvarCapture::ByValue => false,\n             ty::UpvarCapture::ByRef(..) => {"}, {"sha": "273192e97142dd02caef9582babe396c8e6572ba", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d9c250fe41c4b3639a1a21654a19b8264ba39cc/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9c250fe41c4b3639a1a21654a19b8264ba39cc/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=5d9c250fe41c4b3639a1a21654a19b8264ba39cc", "patch": "@@ -283,11 +283,11 @@ pub fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n }\n \n pub fn get_meta(bcx: Block, fat_ptr: ValueRef) -> ValueRef {\n-    GEPi(bcx, fat_ptr, &[0, abi::FAT_PTR_EXTRA])\n+    StructGEP(bcx, fat_ptr, abi::FAT_PTR_EXTRA)\n }\n \n pub fn get_dataptr(bcx: Block, fat_ptr: ValueRef) -> ValueRef {\n-    GEPi(bcx, fat_ptr, &[0, abi::FAT_PTR_ADDR])\n+    StructGEP(bcx, fat_ptr, abi::FAT_PTR_ADDR)\n }\n \n pub fn copy_fat_ptr(bcx: Block, src_ptr: ValueRef, dst_ptr: ValueRef) {"}, {"sha": "b1c85ce54b73fff86a5944386c400f598500c044", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d9c250fe41c4b3639a1a21654a19b8264ba39cc/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9c250fe41c4b3639a1a21654a19b8264ba39cc/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=5d9c250fe41c4b3639a1a21654a19b8264ba39cc", "patch": "@@ -821,10 +821,10 @@ pub fn trans_rust_fn_with_foreign_abi<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                    i, ccx.tn().val_to_string(llrust_arg));\n             if type_is_fat_ptr(ccx.tcx(), rust_ty) {\n                 let next_llrust_ty = rust_param_tys.next().expect(\"Not enough parameter types!\");\n-                llrust_args.push(builder.load(builder.bitcast(builder.gepi(\n-                                llrust_arg, &[0, abi::FAT_PTR_ADDR]), llrust_ty.ptr_to())));\n-                llrust_args.push(builder.load(builder.bitcast(builder.gepi(\n-                                llrust_arg, &[0, abi::FAT_PTR_EXTRA]), next_llrust_ty.ptr_to())));\n+                llrust_args.push(builder.load(builder.bitcast(builder.struct_gep(\n+                                llrust_arg, abi::FAT_PTR_ADDR), llrust_ty.ptr_to())));\n+                llrust_args.push(builder.load(builder.bitcast(builder.struct_gep(\n+                                llrust_arg, abi::FAT_PTR_EXTRA), next_llrust_ty.ptr_to())));\n             } else {\n                 llrust_args.push(llrust_arg);\n             }"}, {"sha": "f3a3268bebbd535d3578345993fe32aaa453bd01", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d9c250fe41c4b3639a1a21654a19b8264ba39cc/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9c250fe41c4b3639a1a21654a19b8264ba39cc/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=5d9c250fe41c4b3639a1a21654a19b8264ba39cc", "patch": "@@ -66,7 +66,7 @@ pub fn trans_fixed_vstore<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         SaveIn(lldest) => {\n             // lldest will have type *[T x N], but we want the type *T,\n             // so use GEP to convert:\n-            let lldest = GEPi(bcx, lldest, &[0, 0]);\n+            let lldest = StructGEP(bcx, lldest, 0);\n             write_content(bcx, &vt, expr, expr, SaveIn(lldest))\n         }\n     };\n@@ -122,7 +122,7 @@ pub fn trans_slice_vec<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         // llfixed has type *[T x N], but we want the type *T,\n         // so use GEP to convert\n         bcx = write_content(bcx, &vt, slice_expr, content_expr,\n-                            SaveIn(GEPi(bcx, llfixed, &[0, 0])));\n+                            SaveIn(StructGEP(bcx, llfixed, 0)));\n     };\n \n     immediate_rvalue_bcx(bcx, llfixed, vec_ty).to_expr_datumblock()"}]}