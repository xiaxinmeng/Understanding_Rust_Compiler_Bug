{"sha": "248f2aba56d12958d4c42c2fd38347a849564280", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0OGYyYWJhNTZkMTI5NThkNGM0MmMyZmQzODM0N2E4NDk1NjQyODA=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-02T01:27:02Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-02T01:27:02Z"}, "message": "Merge branch 'master' of github.com:rust-lang-nursery/rustfmt", "tree": {"sha": "24c51d7020722f1bf4f240db76daaa497bb6cb92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24c51d7020722f1bf4f240db76daaa497bb6cb92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/248f2aba56d12958d4c42c2fd38347a849564280", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/248f2aba56d12958d4c42c2fd38347a849564280", "html_url": "https://github.com/rust-lang/rust/commit/248f2aba56d12958d4c42c2fd38347a849564280", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/248f2aba56d12958d4c42c2fd38347a849564280/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbb2370d66e35029e6e6545f12831d591b1e0cae", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbb2370d66e35029e6e6545f12831d591b1e0cae", "html_url": "https://github.com/rust-lang/rust/commit/fbb2370d66e35029e6e6545f12831d591b1e0cae"}, {"sha": "b8da53ad7865a813e5862fb2de7e839d41af27b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8da53ad7865a813e5862fb2de7e839d41af27b3", "html_url": "https://github.com/rust-lang/rust/commit/b8da53ad7865a813e5862fb2de7e839d41af27b3"}], "stats": {"total": 167, "additions": 131, "deletions": 36}, "files": [{"sha": "3d076ad576302287a3bba56f6c6f580a8d940951", "filename": "Cargo.toml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/248f2aba56d12958d4c42c2fd38347a849564280/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/248f2aba56d12958d4c42c2fd38347a849564280/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=248f2aba56d12958d4c42c2fd38347a849564280", "patch": "@@ -19,14 +19,14 @@ cargo-fmt = []\n toml = \"0.2.1\"\n rustc-serialize = \"0.3\"\n unicode-segmentation = \"1.0.0\"\n-regex = \"0.1\"\n+regex = \"0.2\"\n term = \"0.4\"\n strings = \"0.0.1\"\n diff = \"0.1\"\n-syntex_syntax = \"0.56\"\n-syntex_errors = \"0.56\"\n+syntex_syntax = \"0.58\"\n+syntex_errors = \"0.58\"\n log = \"0.3\"\n-env_logger = \"0.3\"\n+env_logger = \"0.4\"\n getopts = \"0.2\"\n itertools = \"0.5.8\"\n multimap = \"0.3\""}, {"sha": "145f9bac3d8f2c7c7495e763b592280678df60b2", "filename": "README.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/248f2aba56d12958d4c42c2fd38347a849564280/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/248f2aba56d12958d4c42c2fd38347a849564280/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=248f2aba56d12958d4c42c2fd38347a849564280", "patch": "@@ -124,13 +124,13 @@ A minimal Travis setup could look like this:\n ```yaml\n language: rust\n cache: cargo\n-before_script: (cargo install rustfmt || true)\n+before_script:\n+- export PATH=\"$PATH:$HOME/.cargo/bin\"\n+- which rustfmt || cargo install rustfmt\n script:\n-- |\n-  export PATH=$PATH:~/.cargo/bin &&\n-  cargo fmt -- --write-mode=diff &&\n-  cargo build &&\n-  cargo test\n+- cargo fmt -- --write-mode=diff\n+- cargo build\n+- cargo test\n ```\n \n Note that using `cache: cargo` is optional but highly recommended to speed up the installation."}, {"sha": "83f6e1f22c757c1ec7348342a17c705c3e30263a", "filename": "src/expr.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/248f2aba56d12958d4c42c2fd38347a849564280/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248f2aba56d12958d4c42c2fd38347a849564280/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=248f2aba56d12958d4c42c2fd38347a849564280", "patch": "@@ -1287,21 +1287,33 @@ impl Rewrite for ast::Arm {\n                 (\"{\", \"}\")\n             }\n         } else {\n-            (\"\", \"\")\n+            (\"\", \",\")\n         };\n \n+\n         let block_sep = match context.config.control_brace_style {\n             ControlBraceStyle::AlwaysNextLine => alt_block_sep + body_prefix + \"\\n\",\n             _ => String::from(\" \") + body_prefix + \"\\n\",\n         };\n-        Some(format!(\"{}{} =>{}{}{}\\n{}{}\",\n-                     attr_str.trim_left(),\n-                     pats_str,\n-                     block_sep,\n-                     indent_str,\n-                     next_line_body,\n-                     shape.indent.to_string(context.config),\n-                     body_suffix))\n+\n+        if context.config.wrap_match_arms {\n+            Some(format!(\"{}{} =>{}{}{}\\n{}{}\",\n+                         attr_str.trim_left(),\n+                         pats_str,\n+                         block_sep,\n+                         indent_str,\n+                         next_line_body,\n+                         shape.indent.to_string(context.config),\n+                         body_suffix))\n+        } else {\n+            Some(format!(\"{}{} =>{}{}{}{}\",\n+                         attr_str.trim_left(),\n+                         pats_str,\n+                         block_sep,\n+                         indent_str,\n+                         next_line_body,\n+                         body_suffix))\n+        }\n     }\n }\n "}, {"sha": "f232d5a8989594eaebb4407ceb361757e2b35185", "filename": "src/items.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/248f2aba56d12958d4c42c2fd38347a849564280/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248f2aba56d12958d4c42c2fd38347a849564280/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=248f2aba56d12958d4c42c2fd38347a849564280", "patch": "@@ -1236,11 +1236,11 @@ pub fn rewrite_associated_type(ident: ast::Ident,\n     let type_bounds_str = if let Some(ty_param_bounds) = ty_param_bounds_opt {\n         let bounds: &[_] = ty_param_bounds;\n         let bound_str = try_opt!(bounds.iter()\n-                                     .map(|ty_bound| {\n-            ty_bound.rewrite(context, Shape::legacy(context.config.max_width, indent))\n-        })\n-                                     .intersperse(Some(\" + \".to_string()))\n-                                     .collect::<Option<String>>());\n+            .map(|ty_bound| {\n+                ty_bound.rewrite(context, Shape::legacy(context.config.max_width, indent))\n+            })\n+            .intersperse(Some(\" + \".to_string()))\n+            .collect::<Option<String>>());\n         if bounds.len() > 0 {\n             format!(\": {}\", bound_str)\n         } else {\n@@ -1263,6 +1263,22 @@ pub fn rewrite_associated_type(ident: ast::Ident,\n     }\n }\n \n+pub fn rewrite_associated_impl_type(ident: ast::Ident,\n+                                    defaultness: ast::Defaultness,\n+                                    ty_opt: Option<&ptr::P<ast::Ty>>,\n+                                    ty_param_bounds_opt: Option<&ast::TyParamBounds>,\n+                                    context: &RewriteContext,\n+                                    indent: Indent)\n+                                    -> Option<String> {\n+    let result =\n+        try_opt!(rewrite_associated_type(ident, ty_opt, ty_param_bounds_opt, context, indent));\n+\n+    match defaultness {\n+        ast::Defaultness::Default => Some(format!(\"default {}\", result)),\n+        _ => Some(result),\n+    }\n+}\n+\n impl Rewrite for ast::FunctionRetTy {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         match *self {"}, {"sha": "cbaa29a456904e797bfec4d45e4b5d12f2c84572", "filename": "src/patterns.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/248f2aba56d12958d4c42c2fd38347a849564280/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248f2aba56d12958d4c42c2fd38347a849564280/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=248f2aba56d12958d4c42c2fd38347a849564280", "patch": "@@ -18,7 +18,7 @@ use types::{rewrite_path, PathContext};\n use super::Spanned;\n use comment::FindUncommented;\n \n-use syntax::ast::{self, BindingMode, Pat, PatKind, FieldPat};\n+use syntax::ast::{self, BindingMode, Pat, PatKind, FieldPat, RangeEnd};\n use syntax::ptr;\n use syntax::codemap::{self, BytePos, Span};\n \n@@ -56,8 +56,15 @@ impl Rewrite for Pat {\n                     None\n                 }\n             }\n-            PatKind::Range(ref lhs, ref rhs) => {\n-                rewrite_pair(&**lhs, &**rhs, \"\", \"...\", \"\", context, shape)\n+            PatKind::Range(ref lhs, ref rhs, ref end_kind) => {\n+                match *end_kind {\n+                    RangeEnd::Included => {\n+                        rewrite_pair(&**lhs, &**rhs, \"\", \"...\", \"\", context, shape)\n+                    }\n+                    RangeEnd::Excluded => {\n+                        rewrite_pair(&**lhs, &**rhs, \"\", \"..\", \"\", context, shape)\n+                    }\n+                }\n             }\n             PatKind::Ref(ref pat, mutability) => {\n                 let prefix = format!(\"&{}\", format_mutability(mutability));"}, {"sha": "8f51b09b6cc067240e85857121ad9cd950e5bad5", "filename": "src/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/248f2aba56d12958d4c42c2fd38347a849564280/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248f2aba56d12958d4c42c2fd38347a849564280/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=248f2aba56d12958d4c42c2fd38347a849564280", "patch": "@@ -32,7 +32,7 @@ pub struct StringFormat<'a> {\n // FIXME: simplify this!\n pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String> {\n     // Strip line breaks.\n-    let re = Regex::new(r\"([^\\\\](\\\\\\\\)*)\\\\[\\n\\r][:space:]*\").unwrap();\n+    let re = Regex::new(r\"([^\\\\](\\\\\\\\)*)\\\\[\\n\\r][[:space:]]*\").unwrap();\n     let stripped_str = re.replace_all(orig, \"$1\");\n \n     let graphemes = UnicodeSegmentation::graphemes(&*stripped_str, false).collect::<Vec<&str>>();"}, {"sha": "6cd00ffc1f49b25023c391b3ed1a1c840b1b173c", "filename": "src/visitor.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/248f2aba56d12958d4c42c2fd38347a849564280/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248f2aba56d12958d4c42c2fd38347a849564280/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=248f2aba56d12958d4c42c2fd38347a849564280", "patch": "@@ -21,7 +21,8 @@ use config::Config;\n use rewrite::{Rewrite, RewriteContext};\n use comment::rewrite_comment;\n use macros::{rewrite_macro, MacroPosition};\n-use items::{rewrite_static, rewrite_associated_type, rewrite_type_alias, format_impl, format_trait};\n+use items::{rewrite_static, rewrite_associated_type, rewrite_associated_impl_type,\n+            rewrite_type_alias, format_impl, format_trait};\n \n fn is_use_item(item: &ast::Item) -> bool {\n     match item.node {\n@@ -411,11 +412,12 @@ impl<'a> FmtVisitor<'a> {\n                 self.push_rewrite(ii.span, rewrite);\n             }\n             ast::ImplItemKind::Type(ref ty) => {\n-                let rewrite = rewrite_associated_type(ii.ident,\n-                                                      Some(ty),\n-                                                      None,\n-                                                      &self.get_context(),\n-                                                      self.block_indent);\n+                let rewrite = rewrite_associated_impl_type(ii.ident,\n+                                                           ii.defaultness,\n+                                                           Some(ty),\n+                                                           None,\n+                                                           &self.get_context(),\n+                                                           self.block_indent);\n                 self.push_rewrite(ii.span, rewrite);\n             }\n             ast::ImplItemKind::Macro(ref mac) => {"}, {"sha": "4820f5ea2295d84bdd2803c2989efe05036d6ea7", "filename": "tests/source/issue-1127.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/248f2aba56d12958d4c42c2fd38347a849564280/tests%2Fsource%2Fissue-1127.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248f2aba56d12958d4c42c2fd38347a849564280/tests%2Fsource%2Fissue-1127.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-1127.rs?ref=248f2aba56d12958d4c42c2fd38347a849564280", "patch": "@@ -0,0 +1,23 @@\n+// rustfmt-max_width:120\n+// rustfmt-wrap_match_arms: false\n+// rustfmt-match_block_trailing_comma: true\n+\n+fn a_very_very_very_very_very_very_very_very_very_very_very_long_function_name() -> i32 {\n+    42\n+}\n+\n+enum TestEnum {\n+    AVeryVeryLongEnumName,\n+    AnotherVeryLongEnumName,\n+    TheLastVeryLongEnumName,\n+}\n+\n+fn main() {\n+    let var = TestEnum::AVeryVeryLongEnumName;\n+    let num = match var {\n+        TestEnum::AVeryVeryLongEnumName => a_very_very_very_very_very_very_very_very_very_very_very_long_function_name(),\n+        TestEnum::AnotherVeryLongEnumName => a_very_very_very_very_very_very_very_very_very_very_very_long_function_name(),\n+        TestEnum::TheLastVeryLongEnumName => a_very_very_very_very_very_very_very_very_very_very_very_long_function_name(),\n+    };\n+}\n+"}, {"sha": "257b1ec46bf9640051318d21382e08eb2fccb5cf", "filename": "tests/system.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/248f2aba56d12958d4c42c2fd38347a849564280/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248f2aba56d12958d4c42c2fd38347a849564280/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=248f2aba56d12958d4c42c2fd38347a849564280", "patch": "@@ -300,8 +300,8 @@ fn read_significant_comments(file_name: &str) -> HashMap<String, String> {\n         .take_while(|line| line_regex.is_match(&line))\n         .filter_map(|line| {\n                         regex.captures_iter(&line).next().map(|capture| {\n-                (capture.at(1).expect(\"Couldn't unwrap capture\").to_owned(),\n-                 capture.at(2).expect(\"Couldn't unwrap capture\").to_owned())\n+                (capture.get(1).expect(\"Couldn't unwrap capture\").as_str().to_owned(),\n+                 capture.get(2).expect(\"Couldn't unwrap capture\").as_str().to_owned())\n             })\n                     })\n         .collect()"}, {"sha": "3d133f4ce9c0c275ed05eaad463d5ae1f6ac7f14", "filename": "tests/target/issue-1127.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/248f2aba56d12958d4c42c2fd38347a849564280/tests%2Ftarget%2Fissue-1127.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248f2aba56d12958d4c42c2fd38347a849564280/tests%2Ftarget%2Fissue-1127.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1127.rs?ref=248f2aba56d12958d4c42c2fd38347a849564280", "patch": "@@ -0,0 +1,25 @@\n+// rustfmt-max_width:120\n+// rustfmt-wrap_match_arms: false\n+// rustfmt-match_block_trailing_comma: true\n+\n+fn a_very_very_very_very_very_very_very_very_very_very_very_long_function_name() -> i32 {\n+    42\n+}\n+\n+enum TestEnum {\n+    AVeryVeryLongEnumName,\n+    AnotherVeryLongEnumName,\n+    TheLastVeryLongEnumName,\n+}\n+\n+fn main() {\n+    let var = TestEnum::AVeryVeryLongEnumName;\n+    let num = match var {\n+        TestEnum::AVeryVeryLongEnumName => \n+            a_very_very_very_very_very_very_very_very_very_very_very_long_function_name(),\n+        TestEnum::AnotherVeryLongEnumName => \n+            a_very_very_very_very_very_very_very_very_very_very_very_long_function_name(),\n+        TestEnum::TheLastVeryLongEnumName => \n+            a_very_very_very_very_very_very_very_very_very_very_very_long_function_name(),\n+    };\n+}"}, {"sha": "2d4633844a9feb5102449026aa1f1dd4e8624a96", "filename": "tests/target/issue-1255.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/248f2aba56d12958d4c42c2fd38347a849564280/tests%2Ftarget%2Fissue-1255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248f2aba56d12958d4c42c2fd38347a849564280/tests%2Ftarget%2Fissue-1255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1255.rs?ref=248f2aba56d12958d4c42c2fd38347a849564280", "patch": "@@ -0,0 +1,10 @@\n+// Test for issue #1255\n+// Default annotation incorrectly removed on associated types\n+#![feature(specialization)]\n+\n+trait Trait {\n+    type Type;\n+}\n+impl<T> Trait for T {\n+    default type Type = u64; // 'default' should not be removed\n+}"}]}