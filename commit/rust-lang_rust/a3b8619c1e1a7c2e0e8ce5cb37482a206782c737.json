{"sha": "a3b8619c1e1a7c2e0e8ce5cb37482a206782c737", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYjg2MTljMWUxYTdjMmUwZThjZTVjYjM3NDgyYTIwNjc4MmM3Mzc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-01-04T17:27:00Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-01-04T17:27:00Z"}, "message": "Revert \"Use simd instructions for int and float simd intrinsics\"\n\nThis reverts commit 5e984a32d9b8a381d0b7f192f4a915aac59f18db.\n\nIt was causing issues with vectors bigger than 128bit", "tree": {"sha": "0f4e9725ad77e091d424f598113e2bc65ed8728c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f4e9725ad77e091d424f598113e2bc65ed8728c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3b8619c1e1a7c2e0e8ce5cb37482a206782c737", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3b8619c1e1a7c2e0e8ce5cb37482a206782c737", "html_url": "https://github.com/rust-lang/rust/commit/a3b8619c1e1a7c2e0e8ce5cb37482a206782c737", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3b8619c1e1a7c2e0e8ce5cb37482a206782c737/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4802b80540408a97d43e0810f2b4bea60d18612", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4802b80540408a97d43e0810f2b4bea60d18612", "html_url": "https://github.com/rust-lang/rust/commit/b4802b80540408a97d43e0810f2b4bea60d18612"}], "stats": {"total": 72, "additions": 42, "deletions": 30}, "files": [{"sha": "0aab46b3bf0097025c918eb1cf0bd388ad87fa86", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 42, "deletions": 30, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/a3b8619c1e1a7c2e0e8ce5cb37482a206782c737/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b8619c1e1a7c2e0e8ce5cb37482a206782c737/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=a3b8619c1e1a7c2e0e8ce5cb37482a206782c737", "patch": "@@ -267,16 +267,20 @@ macro simd_int_binop {\n         simd_int_binop!($fx, $op|$op($x, $y) -> $ret);\n     },\n     ($fx:expr, $op_u:ident|$op_s:ident($x:ident, $y:ident) -> $ret:ident) => {\n-        let (lane_layout, lane_count) = lane_type_and_count($fx.tcx, $x.layout());\n-        let x_val = $x.load_scalar($fx);\n-        let y_val = $y.load_scalar($fx);\n-\n-        let res = match lane_layout.ty.kind {\n-            ty::Uint(_) => $fx.bcx.ins().$op_u(x_val, y_val),\n-            ty::Int(_) => $fx.bcx.ins().$op_s(x_val, y_val),\n-            _ => unreachable!(\"{:?}\", lane_layout.ty),\n-        };\n-        $ret.write_cvalue($fx, CValue::by_val(res, $ret.layout()));\n+        simd_pair_for_each_lane(\n+            $fx,\n+            $x,\n+            $y,\n+            $ret,\n+            |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n+                let res_lane = match lane_layout.ty.kind {\n+                    ty::Uint(_) => fx.bcx.ins().$op_u(x_lane, y_lane),\n+                    ty::Int(_) => fx.bcx.ins().$op_s(x_lane, y_lane),\n+                    _ => unreachable!(\"{:?}\", lane_layout.ty),\n+                };\n+                CValue::by_val(res_lane, ret_lane_layout)\n+            },\n+        );\n     },\n }\n \n@@ -285,30 +289,38 @@ macro simd_int_flt_binop {\n         simd_int_flt_binop!($fx, $op|$op|$op_f($x, $y) -> $ret);\n     },\n     ($fx:expr, $op_u:ident|$op_s:ident|$op_f:ident($x:ident, $y:ident) -> $ret:ident) => {\n-        let (lane_layout, lane_count) = lane_type_and_count($fx.tcx, $x.layout());\n-        let x_val = $x.load_scalar($fx);\n-        let y_val = $y.load_scalar($fx);\n-\n-        let res = match lane_layout.ty.kind {\n-            ty::Uint(_) => $fx.bcx.ins().$op_u(x_val, y_val),\n-            ty::Int(_) => $fx.bcx.ins().$op_s(x_val, y_val),\n-            ty::Float(_) => $fx.bcx.ins().$op_f(x_val, y_val),\n-            _ => unreachable!(\"{:?}\", lane_layout.ty),\n-        };\n-        $ret.write_cvalue($fx, CValue::by_val(res, $ret.layout()));\n+        simd_pair_for_each_lane(\n+            $fx,\n+            $x,\n+            $y,\n+            $ret,\n+            |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n+                let res_lane = match lane_layout.ty.kind {\n+                    ty::Uint(_) => fx.bcx.ins().$op_u(x_lane, y_lane),\n+                    ty::Int(_) => fx.bcx.ins().$op_s(x_lane, y_lane),\n+                    ty::Float(_) => fx.bcx.ins().$op_f(x_lane, y_lane),\n+                    _ => unreachable!(\"{:?}\", lane_layout.ty),\n+                };\n+                CValue::by_val(res_lane, ret_lane_layout)\n+            },\n+        );\n     },\n }\n \n macro simd_flt_binop($fx:expr, $op:ident($x:ident, $y:ident) -> $ret:ident) {\n-    let (lane_layout, lane_count) = lane_type_and_count($fx.tcx, $x.layout());\n-    let x_val = $x.load_scalar($fx);\n-    let y_val = $y.load_scalar($fx);\n-\n-    let res = match lane_layout.ty.kind {\n-        ty::Float(_) => $fx.bcx.ins().$op(x_val, y_val),\n-        _ => unreachable!(\"{:?}\", lane_layout.ty),\n-    };\n-    $ret.write_cvalue($fx, CValue::by_val(res, $ret.layout()));\n+    simd_pair_for_each_lane(\n+        $fx,\n+        $x,\n+        $y,\n+        $ret,\n+        |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n+            let res_lane = match lane_layout.ty.kind {\n+                ty::Float(_) => fx.bcx.ins().$op(x_lane, y_lane),\n+                _ => unreachable!(\"{:?}\", lane_layout.ty),\n+            };\n+            CValue::by_val(res_lane, ret_lane_layout)\n+        },\n+    );\n }\n \n pub fn codegen_intrinsic_call<'tcx>("}]}