{"sha": "bd45139cb014d51adaff46b9797504bc6eac2564", "node_id": "C_kwDOAAsO6NoAKGJkNDUxMzljYjAxNGQ1MWFkYWZmNDZiOTc5NzUwNGJjNmVhYzI1NjQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-09-09T10:05:01Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-09-14T17:04:13Z"}, "message": "Allow query system to recover a HirId.", "tree": {"sha": "3cb9c0ffb46b77c3cf8ee93a44adaafa28766892", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cb9c0ffb46b77c3cf8ee93a44adaafa28766892"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd45139cb014d51adaff46b9797504bc6eac2564", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd45139cb014d51adaff46b9797504bc6eac2564", "html_url": "https://github.com/rust-lang/rust/commit/bd45139cb014d51adaff46b9797504bc6eac2564", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd45139cb014d51adaff46b9797504bc6eac2564/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb19a8a6208d992d6d4e661be8fa80c1eeab01f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb19a8a6208d992d6d4e661be8fa80c1eeab01f6", "html_url": "https://github.com/rust-lang/rust/commit/eb19a8a6208d992d6d4e661be8fa80c1eeab01f6"}], "stats": {"total": 44, "additions": 37, "deletions": 7}, "files": [{"sha": "aae12705e3d43622dacbedd64fc162e6093c3c9b", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bd45139cb014d51adaff46b9797504bc6eac2564/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd45139cb014d51adaff46b9797504bc6eac2564/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=bd45139cb014d51adaff46b9797504bc6eac2564", "patch": "@@ -62,7 +62,7 @@ use crate::ty::TyCtxt;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId};\n use rustc_hir::definitions::DefPathHash;\n-use rustc_hir::HirId;\n+use rustc_hir::{HirId, ItemLocalId};\n use rustc_query_system::dep_graph::FingerprintStyle;\n use rustc_span::symbol::Symbol;\n use std::hash::Hash;\n@@ -289,7 +289,7 @@ impl DepNodeExt for DepNode {\n         let kind = dep_kind_from_label_string(label)?;\n \n         match kind.fingerprint_style(tcx) {\n-            FingerprintStyle::Opaque => Err(()),\n+            FingerprintStyle::Opaque | FingerprintStyle::HirId => Err(()),\n             FingerprintStyle::Unit => Ok(DepNode::new_no_params(tcx, kind)),\n             FingerprintStyle::DefPathHash => {\n                 Ok(DepNode::from_def_path_hash(tcx, def_path_hash, kind))\n@@ -417,7 +417,7 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for (DefId, DefId) {\n impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for HirId {\n     #[inline(always)]\n     fn fingerprint_style() -> FingerprintStyle {\n-        FingerprintStyle::Opaque\n+        FingerprintStyle::HirId\n     }\n \n     // We actually would not need to specialize the implementation of this\n@@ -426,10 +426,36 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for HirId {\n     #[inline(always)]\n     fn to_fingerprint(&self, tcx: TyCtxt<'tcx>) -> Fingerprint {\n         let HirId { owner, local_id } = *self;\n-\n         let def_path_hash = tcx.def_path_hash(owner.to_def_id());\n-        let local_id = Fingerprint::from_smaller_hash(local_id.as_u32().into());\n+        Fingerprint::new(\n+            // `owner` is local, so is completely defined by the local hash\n+            def_path_hash.local_hash(),\n+            local_id.as_u32().into(),\n+        )\n+    }\n \n-        def_path_hash.0.combine(local_id)\n+    #[inline(always)]\n+    fn to_debug_str(&self, tcx: TyCtxt<'tcx>) -> String {\n+        let HirId { owner, local_id } = *self;\n+        format!(\"{}.{}\", tcx.def_path_str(owner.to_def_id()), local_id.as_u32())\n+    }\n+\n+    #[inline(always)]\n+    fn recover(tcx: TyCtxt<'tcx>, dep_node: &DepNode) -> Option<Self> {\n+        if dep_node.kind.fingerprint_style(tcx) == FingerprintStyle::HirId {\n+            let (local_hash, local_id) = Fingerprint::from(dep_node.hash).as_value();\n+            let def_path_hash = DefPathHash::new(tcx.sess.local_stable_crate_id(), local_hash);\n+            let owner = tcx\n+                .def_path_hash_to_def_id(def_path_hash, &mut || {\n+                    panic!(\"Failed to extract HirId: {:?} {}\", dep_node.kind, dep_node.hash)\n+                })\n+                .expect_local();\n+            let local_id = local_id\n+                .try_into()\n+                .unwrap_or_else(|_| panic!(\"local id should be u32, found {:?}\", local_id));\n+            Some(HirId { owner, local_id: ItemLocalId::from_u32(local_id) })\n+        } else {\n+            None\n+        }\n     }\n }"}, {"sha": "6f3bd7762165ca2a9b7f21786cd79b2350c760ef", "filename": "compiler/rustc_query_system/src/dep_graph/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd45139cb014d51adaff46b9797504bc6eac2564/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd45139cb014d51adaff46b9797504bc6eac2564/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs?ref=bd45139cb014d51adaff46b9797504bc6eac2564", "patch": "@@ -67,6 +67,8 @@ impl<T: DepContext> HasDepContext for T {\n pub enum FingerprintStyle {\n     /// The fingerprint is actually a DefPathHash.\n     DefPathHash,\n+    /// The fingerprint is actually a HirId.\n+    HirId,\n     /// Query key was `()` or equivalent, so fingerprint is just zero.\n     Unit,\n     /// Some opaque hash.\n@@ -77,7 +79,9 @@ impl FingerprintStyle {\n     #[inline]\n     pub fn reconstructible(self) -> bool {\n         match self {\n-            FingerprintStyle::DefPathHash | FingerprintStyle::Unit => true,\n+            FingerprintStyle::DefPathHash | FingerprintStyle::Unit | FingerprintStyle::HirId => {\n+                true\n+            }\n             FingerprintStyle::Opaque => false,\n         }\n     }"}]}