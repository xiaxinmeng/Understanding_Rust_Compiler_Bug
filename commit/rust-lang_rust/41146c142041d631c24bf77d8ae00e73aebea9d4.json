{"sha": "41146c142041d631c24bf77d8ae00e73aebea9d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMTQ2YzE0MjA0MWQ2MzFjMjRiZjc3ZDhhZTAwZTczYWViZWE5ZDQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-14T00:30:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-14T00:30:42Z"}, "message": "Rollup merge of #77817 - jyn514:const-since, r=petrochenkov\n\nSwitch rustdoc from `clean::Stability` to `rustc_attr::Stability`\n\nThis gives greater type safety and is less work to maintain on the rustdoc end. It also makes rustdoc more consistent with rustc.\nNoticed this while working on https://github.com/rust-lang/rust/issues/76998.\n\n- Remove `clean::Stability` in favor of `rustc_attr::Stability`\n- Remove `impl Clean for Stability`; it's no longer necessary\n\nr? @GuillaumeGomez\ncc @petrochenkov", "tree": {"sha": "e77ad9853eb0df4e245802134cc43cb9e41dbe78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e77ad9853eb0df4e245802134cc43cb9e41dbe78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41146c142041d631c24bf77d8ae00e73aebea9d4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfhkayCRBK7hj4Ov3rIwAAdHIIAK6yRCfYpun/TF7QwkByyBDR\nHvKSjiAH6QxoFZo5+KmUTYAt+/WxFtvVb+PtbdyHp67E8/ZNqVfu/W6xt2/hjlhC\n9VHIyJKw9ibOzDOCy056Y5JfuGRqdKQoLZ4jNkYCD2v8AObKVJCHrIOFLxBwSBjv\nPFeGQwim6sSZki/flHXnEQtAu5sS9FyomTMZB7290TWY824AAmsdaDZqb8YVSaML\n9tWzNqmq+yqivRxNGaCbOIG8PxC5GDMNk7PNguvtjofcdu3iMutGMTQ39vBh7QGC\nXk1nagbaSVriL0jI8blbrzsAZur5BVW2oMURb9WWCW9BM8IeT38MEQcqTqCIxcA=\n=kZPt\n-----END PGP SIGNATURE-----\n", "payload": "tree e77ad9853eb0df4e245802134cc43cb9e41dbe78\nparent becd6c61c8b83ef26d5838808fc0cc100b51bf01\nparent 96b0446b538a160c83ade3d9e5e9d2203868492d\nauthor Dylan DPC <dylan.dpc@gmail.com> 1602635442 +0200\ncommitter GitHub <noreply@github.com> 1602635442 +0200\n\nRollup merge of #77817 - jyn514:const-since, r=petrochenkov\n\nSwitch rustdoc from `clean::Stability` to `rustc_attr::Stability`\n\nThis gives greater type safety and is less work to maintain on the rustdoc end. It also makes rustdoc more consistent with rustc.\nNoticed this while working on https://github.com/rust-lang/rust/issues/76998.\n\n- Remove `clean::Stability` in favor of `rustc_attr::Stability`\n- Remove `impl Clean for Stability`; it's no longer necessary\n\nr? @GuillaumeGomez\ncc @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41146c142041d631c24bf77d8ae00e73aebea9d4", "html_url": "https://github.com/rust-lang/rust/commit/41146c142041d631c24bf77d8ae00e73aebea9d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41146c142041d631c24bf77d8ae00e73aebea9d4/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "becd6c61c8b83ef26d5838808fc0cc100b51bf01", "url": "https://api.github.com/repos/rust-lang/rust/commits/becd6c61c8b83ef26d5838808fc0cc100b51bf01", "html_url": "https://github.com/rust-lang/rust/commit/becd6c61c8b83ef26d5838808fc0cc100b51bf01"}, {"sha": "96b0446b538a160c83ade3d9e5e9d2203868492d", "url": "https://api.github.com/repos/rust-lang/rust/commits/96b0446b538a160c83ade3d9e5e9d2203868492d", "html_url": "https://github.com/rust-lang/rust/commit/96b0446b538a160c83ade3d9e5e9d2203868492d"}], "stats": {"total": 144, "additions": 62, "deletions": 82}, "files": [{"sha": "9c309345000bbe2b96f601b7b9e91c29df6f99a1", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41146c142041d631c24bf77d8ae00e73aebea9d4/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41146c142041d631c24bf77d8ae00e73aebea9d4/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=41146c142041d631c24bf77d8ae00e73aebea9d4", "patch": "@@ -154,7 +154,7 @@ pub struct ConstStability {\n }\n \n /// The available stability levels.\n-#[derive(Encodable, Decodable, PartialEq, PartialOrd, Copy, Clone, Debug, Eq, Hash)]\n+#[derive(Encodable, Decodable, PartialEq, Copy, Clone, Debug, Eq, Hash)]\n #[derive(HashStable_Generic)]\n pub enum StabilityLevel {\n     // Reason for the current stability level and the relevant rust-lang issue"}, {"sha": "6267b02e5d2c48c10ae6aa7bdb5b252bf5ed7a05", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41146c142041d631c24bf77d8ae00e73aebea9d4/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41146c142041d631c24bf77d8ae00e73aebea9d4/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=41146c142041d631c24bf77d8ae00e73aebea9d4", "patch": "@@ -130,7 +130,7 @@ pub fn try_inline(\n         attrs,\n         inner,\n         visibility: clean::Public,\n-        stability: cx.tcx.lookup_stability(did).clean(cx),\n+        stability: cx.tcx.lookup_stability(did).cloned(),\n         deprecation: cx.tcx.lookup_deprecation(did).clean(cx),\n         def_id: did,\n     });\n@@ -461,7 +461,7 @@ pub fn build_impl(\n         name: None,\n         attrs,\n         visibility: clean::Inherited,\n-        stability: tcx.lookup_stability(did).clean(cx),\n+        stability: tcx.lookup_stability(did).cloned(),\n         deprecation: tcx.lookup_deprecation(did).clean(cx),\n         def_id: did,\n     });"}, {"sha": "776b131a076110c4c6a381493acd488feaab2579", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 16, "deletions": 38, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/41146c142041d631c24bf77d8ae00e73aebea9d4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41146c142041d631c24bf77d8ae00e73aebea9d4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=41146c142041d631c24bf77d8ae00e73aebea9d4", "patch": "@@ -19,7 +19,6 @@ use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::region_constraints::{Constraint, RegionConstraintData};\n use rustc_middle::bug;\n use rustc_middle::middle::resolve_lifetime as rl;\n-use rustc_middle::middle::stability;\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{self, AdtKind, Lift, Ty, TyCtxt};\n@@ -274,7 +273,7 @@ impl Clean<Item> for doctree::Module<'_> {\n             attrs,\n             source: span.clean(cx),\n             visibility: self.vis.clean(cx),\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             inner: ModuleItem(Module { is_crate: self.is_crate, items }),\n@@ -914,7 +913,7 @@ impl Clean<Item> for doctree::Function<'_> {\n             attrs: self.attrs.clean(cx),\n             source: self.span.clean(cx),\n             visibility: self.vis.clean(cx),\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             def_id: did.to_def_id(),\n             inner: FunctionItem(Function {\n@@ -1023,7 +1022,7 @@ impl Clean<Item> for doctree::Trait<'_> {\n             source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             inner: TraitItem(Trait {\n                 auto: self.is_auto.clean(cx),\n@@ -1047,7 +1046,7 @@ impl Clean<Item> for doctree::TraitAlias<'_> {\n             source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             inner: TraitAliasItem(TraitAlias {\n                 generics: self.generics.clean(cx),\n@@ -1832,7 +1831,7 @@ impl Clean<Item> for doctree::Struct<'_> {\n             source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             inner: StructItem(Struct {\n                 struct_type: self.struct_type,\n@@ -1852,7 +1851,7 @@ impl Clean<Item> for doctree::Union<'_> {\n             source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             inner: UnionItem(Union {\n                 struct_type: self.struct_type,\n@@ -1882,7 +1881,7 @@ impl Clean<Item> for doctree::Enum<'_> {\n             source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             inner: EnumItem(Enum {\n                 variants: self.variants.iter().map(|v| v.clean(cx)).collect(),\n@@ -1900,7 +1899,7 @@ impl Clean<Item> for doctree::Variant<'_> {\n             attrs: self.attrs.clean(cx),\n             source: self.span.clean(cx),\n             visibility: Inherited,\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             inner: VariantItem(Variant { kind: self.def.clean(cx) }),\n@@ -2049,7 +2048,7 @@ impl Clean<Item> for doctree::Typedef<'_> {\n             source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             inner: TypedefItem(Typedef { type_, generics: self.gen.clean(cx), item_type }, false),\n         }\n@@ -2064,7 +2063,7 @@ impl Clean<Item> for doctree::OpaqueTy<'_> {\n             source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             inner: OpaqueTyItem(OpaqueTy {\n                 bounds: self.opaque_ty.bounds.clean(cx),\n@@ -2092,7 +2091,7 @@ impl Clean<Item> for doctree::Static<'_> {\n             source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             inner: StaticItem(Static {\n                 type_: self.type_.clean(cx),\n@@ -2113,7 +2112,7 @@ impl Clean<Item> for doctree::Constant<'_> {\n             source: self.span.clean(cx),\n             def_id: def_id.to_def_id(),\n             visibility: self.vis.clean(cx),\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             inner: ConstantItem(Constant {\n                 type_: self.type_.clean(cx),\n@@ -2167,7 +2166,7 @@ impl Clean<Vec<Item>> for doctree::Impl<'_> {\n             source: self.span.clean(cx),\n             def_id: def_id.to_def_id(),\n             visibility: self.vis.clean(cx),\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             inner: ImplItem(Impl {\n                 unsafety: self.unsafety,\n@@ -2349,7 +2348,7 @@ impl Clean<Item> for doctree::ForeignItem<'_> {\n             source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             inner,\n         }\n@@ -2364,7 +2363,7 @@ impl Clean<Item> for doctree::Macro<'_> {\n             attrs: self.attrs.clean(cx),\n             source: self.span.clean(cx),\n             visibility: Public,\n-            stability: cx.stability(self.hid).clean(cx),\n+            stability: cx.stability(self.hid),\n             deprecation: cx.deprecation(self.hid).clean(cx),\n             def_id: self.def_id,\n             inner: MacroItem(Macro {\n@@ -2389,35 +2388,14 @@ impl Clean<Item> for doctree::ProcMacro<'_> {\n             attrs: self.attrs.clean(cx),\n             source: self.span.clean(cx),\n             visibility: Public,\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             inner: ProcMacroItem(ProcMacro { kind: self.kind, helpers: self.helpers.clean(cx) }),\n         }\n     }\n }\n \n-impl Clean<Stability> for attr::Stability {\n-    fn clean(&self, _: &DocContext<'_>) -> Stability {\n-        Stability {\n-            level: stability::StabilityLevel::from_attr_level(&self.level),\n-            feature: self.feature.to_string(),\n-            since: match self.level {\n-                attr::Stable { ref since } => since.to_string(),\n-                _ => String::new(),\n-            },\n-            unstable_reason: match self.level {\n-                attr::Unstable { reason: Some(ref reason), .. } => Some(reason.to_string()),\n-                _ => None,\n-            },\n-            issue: match self.level {\n-                attr::Unstable { issue, .. } => issue,\n-                _ => None,\n-            },\n-        }\n-    }\n-}\n-\n impl Clean<Deprecation> for attr::Deprecation {\n     fn clean(&self, _: &DocContext<'_>) -> Deprecation {\n         Deprecation {"}, {"sha": "3b72cf5c4f97a8a48f467bebf887ca3b1f5fbe5b", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/41146c142041d631c24bf77d8ae00e73aebea9d4/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41146c142041d631c24bf77d8ae00e73aebea9d4/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=41146c142041d631c24bf77d8ae00e73aebea9d4", "patch": "@@ -4,7 +4,6 @@ use std::fmt;\n use std::hash::{Hash, Hasher};\n use std::iter::FromIterator;\n use std::lazy::SyncOnceCell as OnceCell;\n-use std::num::NonZeroU32;\n use std::rc::Rc;\n use std::sync::Arc;\n use std::{slice, vec};\n@@ -13,18 +12,18 @@ use rustc_ast::attr;\n use rustc_ast::util::comments::beautify_doc_string;\n use rustc_ast::{self as ast, AttrStyle};\n use rustc_ast::{FloatTy, IntTy, UintTy};\n+use rustc_attr::{Stability, StabilityLevel};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::Mutability;\n use rustc_index::vec::IndexVec;\n-use rustc_middle::middle::stability;\n use rustc_middle::ty::{AssocKind, TyCtxt};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::DUMMY_SP;\n-use rustc_span::symbol::{kw, sym, Ident, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol, SymbolStr};\n use rustc_span::{self, FileName};\n use rustc_target::abi::VariantIdx;\n use rustc_target::spec::abi::Abi;\n@@ -197,7 +196,7 @@ impl Item {\n         self.stability.as_ref().and_then(|ref s| {\n             let mut classes = Vec::with_capacity(2);\n \n-            if s.level == stability::Unstable {\n+            if s.level.is_unstable() {\n                 classes.push(\"unstable\");\n             }\n \n@@ -210,8 +209,11 @@ impl Item {\n         })\n     }\n \n-    pub fn stable_since(&self) -> Option<&str> {\n-        self.stability.as_ref().map(|s| &s.since[..])\n+    pub fn stable_since(&self) -> Option<SymbolStr> {\n+        match self.stability?.level {\n+            StabilityLevel::Stable { since, .. } => Some(since.as_str()),\n+            StabilityLevel::Unstable { .. } => None,\n+        }\n     }\n \n     pub fn is_non_exhaustive(&self) -> bool {\n@@ -1698,15 +1700,6 @@ pub struct ProcMacro {\n     pub helpers: Vec<String>,\n }\n \n-#[derive(Clone, Debug)]\n-pub struct Stability {\n-    pub level: stability::StabilityLevel,\n-    pub feature: String,\n-    pub since: String,\n-    pub unstable_reason: Option<String>,\n-    pub issue: Option<NonZeroU32>,\n-}\n-\n #[derive(Clone, Debug)]\n pub struct Deprecation {\n     pub since: Option<String>,"}, {"sha": "9a7f1964a1157de8fe4c33067aae93aa04f83b25", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/41146c142041d631c24bf77d8ae00e73aebea9d4/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41146c142041d631c24bf77d8ae00e73aebea9d4/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=41146c142041d631c24bf77d8ae00e73aebea9d4", "patch": "@@ -3,12 +3,13 @@ use crate::clean::blanket_impl::BlanketImplFinder;\n use crate::clean::{\n     inline, Clean, Crate, Deprecation, ExternalCrate, FnDecl, FnRetTy, Generic, GenericArg,\n     GenericArgs, GenericBound, Generics, GetDefId, ImportSource, Item, ItemEnum, Lifetime,\n-    MacroKind, Path, PathSegment, Primitive, PrimitiveType, ResolvedPath, Span, Stability, Type,\n-    TypeBinding, TypeKind, Visibility, WherePredicate,\n+    MacroKind, Path, PathSegment, Primitive, PrimitiveType, ResolvedPath, Span, Type, TypeBinding,\n+    TypeKind, Visibility, WherePredicate,\n };\n use crate::core::DocContext;\n \n use itertools::Itertools;\n+use rustc_attr::Stability;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -102,7 +103,7 @@ pub fn krate(mut cx: &mut DocContext<'_>) -> Crate {\n \n // extract the stability index for a node from tcx, if possible\n pub fn get_stability(cx: &DocContext<'_>, def_id: DefId) -> Option<Stability> {\n-    cx.tcx.lookup_stability(def_id).clean(cx)\n+    cx.tcx.lookup_stability(def_id).cloned()\n }\n \n pub fn get_deprecation(cx: &DocContext<'_>, def_id: DefId) -> Option<Deprecation> {"}, {"sha": "f81ea0f6d46ac89904c66bb4d13befea2ffdebd4", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/41146c142041d631c24bf77d8ae00e73aebea9d4/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41146c142041d631c24bf77d8ae00e73aebea9d4/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=41146c142041d631c24bf77d8ae00e73aebea9d4", "patch": "@@ -49,6 +49,7 @@ use std::sync::Arc;\n \n use itertools::Itertools;\n use rustc_ast_pretty::pprust;\n+use rustc_attr::StabilityLevel;\n use rustc_data_structures::flock;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_feature::UnstableFeatures;\n@@ -1983,10 +1984,12 @@ fn item_module(w: &mut Buffer, cx: &Context, item: &clean::Item, items: &[clean:\n         }\n         let s1 = i1.stability.as_ref().map(|s| s.level);\n         let s2 = i2.stability.as_ref().map(|s| s.level);\n-        match (s1, s2) {\n-            (Some(stability::Unstable), Some(stability::Stable)) => return Ordering::Greater,\n-            (Some(stability::Stable), Some(stability::Unstable)) => return Ordering::Less,\n-            _ => {}\n+        if let (Some(a), Some(b)) = (s1, s2) {\n+            match (a.is_stable(), b.is_stable()) {\n+                (true, true) | (false, false) => {}\n+                (false, true) => return Ordering::Less,\n+                (true, false) => return Ordering::Greater,\n+            }\n         }\n         let lhs = i1.name.as_ref().map_or(\"\", |s| &**s);\n         let rhs = i2.name.as_ref().map_or(\"\", |s| &**s);\n@@ -2150,10 +2153,7 @@ fn stability_tags(item: &clean::Item) -> String {\n \n     // The \"rustc_private\" crates are permanently unstable so it makes no sense\n     // to render \"unstable\" everywhere.\n-    if item\n-        .stability\n-        .as_ref()\n-        .map(|s| s.level == stability::Unstable && s.feature != \"rustc_private\")\n+    if item.stability.as_ref().map(|s| s.level.is_unstable() && s.feature != sym::rustc_private)\n         == Some(true)\n     {\n         tags += &tag_html(\"unstable\", \"\", \"Experimental\");\n@@ -2204,16 +2204,17 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n \n     // Render unstable items. But don't render \"rustc_private\" crates (internal compiler crates).\n     // Those crates are permanently unstable so it makes no sense to render \"unstable\" everywhere.\n-    if let Some(stab) = item\n+    if let Some((StabilityLevel::Unstable { reason, issue, .. }, feature)) = item\n         .stability\n         .as_ref()\n-        .filter(|stab| stab.level == stability::Unstable && stab.feature != \"rustc_private\")\n+        .filter(|stab| stab.feature != sym::rustc_private)\n+        .map(|stab| (stab.level, stab.feature))\n     {\n         let mut message =\n             \"<span class='emoji'>\ud83d\udd2c</span> This is a nightly-only experimental API.\".to_owned();\n \n-        let mut feature = format!(\"<code>{}</code>\", Escape(&stab.feature));\n-        if let (Some(url), Some(issue)) = (&cx.shared.issue_tracker_base_url, stab.issue) {\n+        let mut feature = format!(\"<code>{}</code>\", Escape(&feature.as_str()));\n+        if let (Some(url), Some(issue)) = (&cx.shared.issue_tracker_base_url, issue) {\n             feature.push_str(&format!(\n                 \"&nbsp;<a href=\\\"{url}{issue}\\\">#{issue}</a>\",\n                 url = url,\n@@ -2223,13 +2224,13 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n \n         message.push_str(&format!(\" ({})\", feature));\n \n-        if let Some(unstable_reason) = &stab.unstable_reason {\n+        if let Some(unstable_reason) = reason {\n             let mut ids = cx.id_map.borrow_mut();\n             message = format!(\n                 \"<details><summary>{}</summary>{}</details>\",\n                 message,\n                 MarkdownHtml(\n-                    &unstable_reason,\n+                    &unstable_reason.as_str(),\n                     &mut ids,\n                     error_codes,\n                     cx.shared.edition,\n@@ -2355,7 +2356,7 @@ fn render_implementor(\n         implementor,\n         AssocItemLink::Anchor(None),\n         RenderMode::Normal,\n-        implementor.impl_item.stable_since(),\n+        implementor.impl_item.stable_since().as_deref(),\n         false,\n         Some(use_absolute),\n         false,\n@@ -2384,7 +2385,7 @@ fn render_impls(\n                 i,\n                 assoc_link,\n                 RenderMode::Normal,\n-                containing_item.stable_since(),\n+                containing_item.stable_since().as_deref(),\n                 true,\n                 None,\n                 false,\n@@ -2629,7 +2630,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n                     &implementor,\n                     assoc_link,\n                     RenderMode::Normal,\n-                    implementor.impl_item.stable_since(),\n+                    implementor.impl_item.stable_since().as_deref(),\n                     false,\n                     None,\n                     true,\n@@ -2780,7 +2781,11 @@ fn render_stability_since_raw(w: &mut Buffer, ver: Option<&str>, containing_ver:\n }\n \n fn render_stability_since(w: &mut Buffer, item: &clean::Item, containing_item: &clean::Item) {\n-    render_stability_since_raw(w, item.stable_since(), containing_item.stable_since())\n+    render_stability_since_raw(\n+        w,\n+        item.stable_since().as_deref(),\n+        containing_item.stable_since().as_deref(),\n+    )\n }\n \n fn render_assoc_item(\n@@ -3324,7 +3329,7 @@ fn render_assoc_items(\n                 i,\n                 AssocItemLink::Anchor(None),\n                 render_mode,\n-                containing_item.stable_since(),\n+                containing_item.stable_since().as_deref(),\n                 true,\n                 None,\n                 false,\n@@ -3564,8 +3569,11 @@ fn render_impl(\n             );\n         }\n         write!(w, \"<a href='#{}' class='anchor'></a>\", id);\n-        let since = i.impl_item.stability.as_ref().map(|s| &s.since[..]);\n-        render_stability_since_raw(w, since, outer_version);\n+        let since = i.impl_item.stability.as_ref().and_then(|s| match s.level {\n+            StabilityLevel::Stable { since } => Some(since.as_str()),\n+            StabilityLevel::Unstable { .. } => None,\n+        });\n+        render_stability_since_raw(w, since.as_deref(), outer_version);\n         if let Some(l) = cx.src_href(&i.impl_item, cache) {\n             write!(w, \"<a class='srclink' href='{}' title='{}'>[src]</a>\", l, \"goto source code\");\n         }\n@@ -3626,7 +3634,7 @@ fn render_impl(\n                     write!(w, \"<code>\");\n                     render_assoc_item(w, item, link.anchor(&id), ItemType::Impl);\n                     write!(w, \"</code>\");\n-                    render_stability_since_raw(w, item.stable_since(), outer_version);\n+                    render_stability_since_raw(w, item.stable_since().as_deref(), outer_version);\n                     if let Some(l) = cx.src_href(item, cache) {\n                         write!(\n                             w,\n@@ -3648,7 +3656,7 @@ fn render_impl(\n                 write!(w, \"<h4 id='{}' class=\\\"{}{}\\\"><code>\", id, item_type, extra_class);\n                 assoc_const(w, item, ty, default.as_ref(), link.anchor(&id), \"\");\n                 write!(w, \"</code>\");\n-                render_stability_since_raw(w, item.stable_since(), outer_version);\n+                render_stability_since_raw(w, item.stable_since().as_deref(), outer_version);\n                 if let Some(l) = cx.src_href(item, cache) {\n                     write!(\n                         w,"}]}