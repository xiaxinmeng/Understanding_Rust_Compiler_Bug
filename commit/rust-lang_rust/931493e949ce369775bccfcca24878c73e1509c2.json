{"sha": "931493e949ce369775bccfcca24878c73e1509c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMTQ5M2U5NDljZTM2OTc3NWJjY2ZjY2EyNDg3OGM3M2UxNTA5YzI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-26T22:57:40Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-26T23:00:18Z"}, "message": "Accept more than just the standard rust literal suffixes in *Number::suffix", "tree": {"sha": "e3cf89e43891a3772843c7d20b56b969ed1e0107", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3cf89e43891a3772843c7d20b56b969ed1e0107"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/931493e949ce369775bccfcca24878c73e1509c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/931493e949ce369775bccfcca24878c73e1509c2", "html_url": "https://github.com/rust-lang/rust/commit/931493e949ce369775bccfcca24878c73e1509c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/931493e949ce369775bccfcca24878c73e1509c2/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc0354b2803bccfeb6e0c3335a5d4e52288c05b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc0354b2803bccfeb6e0c3335a5d4e52288c05b4", "html_url": "https://github.com/rust-lang/rust/commit/fc0354b2803bccfeb6e0c3335a5d4e52288c05b4"}], "stats": {"total": 40, "additions": 18, "deletions": 22}, "files": [{"sha": "754ca8c62f32cbbc61893e8a868731bb8c854664", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/931493e949ce369775bccfcca24878c73e1509c2/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/931493e949ce369775bccfcca24878c73e1509c2/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=931493e949ce369775bccfcca24878c73e1509c2", "patch": "@@ -534,11 +534,6 @@ impl HasFormatSpecifier for ast::String {\n }\n \n impl ast::IntNumber {\n-    const SUFFIXES: &'static [&'static str] = &[\n-        \"u8\", \"u16\", \"u32\", \"u64\", \"u128\", \"usize\", // Unsigned.\n-        \"i8\", \"i16\", \"i32\", \"i64\", \"i128\", \"isize\", // Signed.\n-    ];\n-\n     pub fn radix(&self) -> Radix {\n         match self.text().get(..2).unwrap_or_default() {\n             \"0b\" => Radix::Binary,\n@@ -571,29 +566,30 @@ impl ast::IntNumber {\n \n     pub fn suffix(&self) -> Option<&str> {\n         let text = self.text();\n-        // FIXME: don't check a fixed set of suffixes, `1_0_1_l_o_l` is valid\n-        // syntax, suffix is `l_o_l`.\n-        ast::IntNumber::SUFFIXES.iter().chain(ast::FloatNumber::SUFFIXES.iter()).find_map(\n-            |suffix| {\n-                if text.ends_with(suffix) {\n-                    return Some(&text[text.len() - suffix.len()..]);\n-                }\n-                None\n-            },\n-        )\n+        let radix = self.radix();\n+        let mut indices = text.char_indices();\n+        if radix != Radix::Decimal {\n+            indices.next()?;\n+            indices.next()?;\n+        }\n+        let is_suffix_start: fn(&(usize, char)) -> bool = match radix {\n+            Radix::Hexadecimal => |(_, c)| matches!(c, 'g'..='z' | 'G'..='Z'),\n+            _ => |(_, c)| c.is_ascii_alphabetic(),\n+        };\n+        let (suffix_start, _) = indices.find(is_suffix_start)?;\n+        Some(&text[suffix_start..])\n     }\n }\n \n impl ast::FloatNumber {\n-    const SUFFIXES: &'static [&'static str] = &[\"f32\", \"f64\"];\n     pub fn suffix(&self) -> Option<&str> {\n         let text = self.text();\n-        ast::FloatNumber::SUFFIXES.iter().find_map(|suffix| {\n-            if text.ends_with(suffix) {\n-                return Some(&text[text.len() - suffix.len()..]);\n-            }\n-            None\n-        })\n+        let mut indices = text.char_indices();\n+        let (mut suffix_start, c) = indices.by_ref().find(|(_, c)| c.is_ascii_alphabetic())?;\n+        if c == 'e' || c == 'E' {\n+            suffix_start = indices.find(|(_, c)| c.is_ascii_alphabetic())?.0;\n+        }\n+        Some(&text[suffix_start..])\n     }\n }\n "}]}