{"sha": "1e2f350d921e73d7165fe9d7a5f0f6cfe613e3df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMmYzNTBkOTIxZTczZDcxNjVmZTlkN2E1ZjBmNmNmZTYxM2UzZGY=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-08-04T13:36:09Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-08-16T14:42:26Z"}, "message": "save_analysis: support `QPath::LangItem`\n\nThis commit implements support for `QPath::LangItem` and\n`GenericBound::LangItemTrait` in save analysis.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "725890063a9f5d9c733a1b935845e444e050bda8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/725890063a9f5d9c733a1b935845e444e050bda8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e2f350d921e73d7165fe9d7a5f0f6cfe613e3df", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl85RdIACgkQJZLnbIc4\nH9mJiRAAnJYaA2jm6jffUHMtOWOVwr+my6qTwm7kK6abb07RFAazjgPY7+clkSMS\nJLVtOhHVOfez3FpRWCoPKF866tncvrb5P7XD1xzDbLDL4nyOHbKKCC9if7vwNLWG\npU5rIJzYmT4czNvu4+bgdKRsN4G2jv1FwhQswJcAScFWiiM++Pmm3e+QNF/drbg8\nD6auBpqwBIGfbDv4zvT1g0qtV5/yT2cCNhAyk+lJm5aQrxwfDOC69VgBspqTTscf\nudCO5nKSRuZIFAXksL3S9Hk579lY6uoMgPAgzrTn5Pgb2E95kSteK47Au0VtqSfc\nfjSK8ns+kXGKTlmPlcznFrSUP/XWoGV6jrtqx66WbSqXl0rnpKFGTzK8JOSbNkaC\nCH3Urn7FthqS53sa45xp75RhKGHLS1seLe2eC7qdmwRt/feGAJfvB3yXnSE5cjuG\nFSgYifQR3RAkEIfAwxndhoOGY6bMg61Fgla6McExTjqtSKmmgMQiAUH3GLmuqWBS\nu8JkNZTWuO/ekapex1eqyKXZpYQg8Ht3p3/QKyBq0obg4a63axnv8/dY5KyqR30z\nKYhstSE4JR+QsGv3uT+Js/PB/uiPBq4yqEVZ/fMXBeMFSHkYRcyD8rKfxLfiIjgi\nHGXUZM75hsYSupTD/DbJ/sKi2c2iFVuKUjol/+C1qALxCW2uz58=\n=jGfJ\n-----END PGP SIGNATURE-----", "payload": "tree 725890063a9f5d9c733a1b935845e444e050bda8\nparent 762137e2121ac8998b5bb916453eb24ec6523450\nauthor David Wood <david@davidtw.co> 1596548169 +0100\ncommitter David Wood <david@davidtw.co> 1597588946 +0100\n\nsave_analysis: support `QPath::LangItem`\n\nThis commit implements support for `QPath::LangItem` and\n`GenericBound::LangItemTrait` in save analysis.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e2f350d921e73d7165fe9d7a5f0f6cfe613e3df", "html_url": "https://github.com/rust-lang/rust/commit/1e2f350d921e73d7165fe9d7a5f0f6cfe613e3df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e2f350d921e73d7165fe9d7a5f0f6cfe613e3df/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "762137e2121ac8998b5bb916453eb24ec6523450", "url": "https://api.github.com/repos/rust-lang/rust/commits/762137e2121ac8998b5bb916453eb24ec6523450", "html_url": "https://github.com/rust-lang/rust/commit/762137e2121ac8998b5bb916453eb24ec6523450"}], "stats": {"total": 76, "additions": 32, "deletions": 44}, "files": [{"sha": "6e56e3b9ebb70df1ac4ee287cb2015e8983a2814", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1e2f350d921e73d7165fe9d7a5f0f6cfe613e3df/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e2f350d921e73d7165fe9d7a5f0f6cfe613e3df/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=1e2f350d921e73d7165fe9d7a5f0f6cfe613e3df", "patch": "@@ -702,15 +702,18 @@ impl<'tcx> DumpVisitor<'tcx> {\n \n         // super-traits\n         for super_bound in trait_refs.iter() {\n-            let trait_ref = match *super_bound {\n-                hir::GenericBound::Trait(ref trait_ref, _) => trait_ref,\n+            let (def_id, sub_span) = match *super_bound {\n+                hir::GenericBound::Trait(ref trait_ref, _) => (\n+                    self.lookup_def_id(trait_ref.trait_ref.hir_ref_id),\n+                    trait_ref.trait_ref.path.segments.last().unwrap().ident.span,\n+                ),\n+                hir::GenericBound::LangItemTrait(lang_item, span, _, _) => {\n+                    (Some(self.tcx.require_lang_item(lang_item, Some(span))), span)\n+                }\n                 hir::GenericBound::Outlives(..) => continue,\n-                hir::GenericBound::LangItemTrait(..) => unimplemented!(),\n             };\n \n-            let trait_ref = &trait_ref.trait_ref;\n-            if let Some(id) = self.lookup_def_id(trait_ref.hir_ref_id) {\n-                let sub_span = trait_ref.path.segments.last().unwrap().ident.span;\n+            if let Some(id) = def_id {\n                 if !self.span.filter_generated(sub_span) {\n                     let span = self.span_from_span(sub_span);\n                     self.dumper.dump_ref(Ref {\n@@ -763,12 +766,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n     }\n \n     fn process_path(&mut self, id: hir::HirId, path: &hir::QPath<'tcx>) {\n-        let span = match path {\n-            hir::QPath::Resolved(_, path) => path.span,\n-            hir::QPath::TypeRelative(_, segment) => segment.ident.span,\n-            hir::QPath::LangItem(..) => unimplemented!(),\n-        };\n-        if self.span.filter_generated(span) {\n+        if self.span.filter_generated(path.span()) {\n             return;\n         }\n         self.dump_path_ref(id, path);\n@@ -785,7 +783,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n                 self.visit_ty(ty);\n                 std::slice::from_ref(*segment)\n             }\n-            hir::QPath::LangItem(..) => unimplemented!(),\n+            hir::QPath::LangItem(..) => return,\n         };\n         for seg in segments {\n             if let Some(ref generic_args) = seg.args {\n@@ -1358,11 +1356,7 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n                 }\n \n                 if let Some(id) = self.lookup_def_id(t.hir_id) {\n-                    let sub_span = match path {\n-                        hir::QPath::Resolved(_, path) => path.segments.last().unwrap().ident.span,\n-                        hir::QPath::TypeRelative(_, segment) => segment.ident.span,\n-                        hir::QPath::LangItem(..) => unimplemented!(),\n-                    };\n+                    let sub_span = path.last_segment_span();\n                     let span = self.span_from_span(sub_span);\n                     self.dumper.dump_ref(Ref {\n                         kind: RefKind::Type,"}, {"sha": "fc8a5384739deea43e7c5b8607ef3c87287f5f41", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1e2f350d921e73d7165fe9d7a5f0f6cfe613e3df/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e2f350d921e73d7165fe9d7a5f0f6cfe613e3df/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=1e2f350d921e73d7165fe9d7a5f0f6cfe613e3df", "patch": "@@ -551,29 +551,22 @@ impl<'tcx> SaveContext<'tcx> {\n                     }\n                 }\n             }\n-            hir::ExprKind::Struct(qpath, ..) => {\n-                let segment = match qpath {\n-                    hir::QPath::Resolved(_, path) => path.segments.last().unwrap(),\n-                    hir::QPath::TypeRelative(_, segment) => segment,\n-                    hir::QPath::LangItem(..) => unimplemented!(),\n-                };\n-                match ty.kind {\n-                    ty::Adt(def, _) => {\n-                        let sub_span = segment.ident.span;\n-                        filter!(self.span_utils, sub_span);\n-                        let span = self.span_from_span(sub_span);\n-                        Some(Data::RefData(Ref {\n-                            kind: RefKind::Type,\n-                            span,\n-                            ref_id: id_from_def_id(def.did),\n-                        }))\n-                    }\n-                    _ => {\n-                        debug!(\"expected adt, found {:?}\", ty);\n-                        None\n-                    }\n+            hir::ExprKind::Struct(qpath, ..) => match ty.kind {\n+                ty::Adt(def, _) => {\n+                    let sub_span = qpath.last_segment_span();\n+                    filter!(self.span_utils, sub_span);\n+                    let span = self.span_from_span(sub_span);\n+                    Some(Data::RefData(Ref {\n+                        kind: RefKind::Type,\n+                        span,\n+                        ref_id: id_from_def_id(def.did),\n+                    }))\n                 }\n-            }\n+                _ => {\n+                    debug!(\"expected adt, found {:?}\", ty);\n+                    None\n+                }\n+            },\n             hir::ExprKind::MethodCall(ref seg, ..) => {\n                 let method_id = match self.typeck_results().type_dependent_def_id(expr.hir_id) {\n                     Some(id) => id,\n@@ -637,10 +630,9 @@ impl<'tcx> SaveContext<'tcx> {\n             })\n             | Node::Ty(&hir::Ty { kind: hir::TyKind::Path(ref qpath), .. }) => match qpath {\n                 hir::QPath::Resolved(_, path) => path.res,\n-                hir::QPath::TypeRelative(..) => self\n+                hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self\n                     .maybe_typeck_results\n                     .map_or(Res::Err, |typeck_results| typeck_results.qpath_res(qpath, hir_id)),\n-                hir::QPath::LangItem(..) => unimplemented!(),\n             },\n \n             Node::Binding(&hir::Pat {\n@@ -655,7 +647,7 @@ impl<'tcx> SaveContext<'tcx> {\n         let segment = match path {\n             hir::QPath::Resolved(_, path) => path.segments.last(),\n             hir::QPath::TypeRelative(_, segment) => Some(*segment),\n-            hir::QPath::LangItem(..) => unimplemented!(),\n+            hir::QPath::LangItem(..) => None,\n         };\n         segment.and_then(|seg| {\n             self.get_path_segment_data(seg).or_else(|| self.get_path_segment_data_with_id(seg, id))"}, {"sha": "f6869cbbfd2aa4545a2e0587db384b5aeac49435", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e2f350d921e73d7165fe9d7a5f0f6cfe613e3df/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e2f350d921e73d7165fe9d7a5f0f6cfe613e3df/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=1e2f350d921e73d7165fe9d7a5f0f6cfe613e3df", "patch": "@@ -286,7 +286,9 @@ impl<'hir> Sig for hir::Ty<'hir> {\n                     refs: vec![SigElement { id, start, end }],\n                 })\n             }\n-            hir::TyKind::Path(hir::QPath::LangItem(..)) => unimplemented!(),\n+            hir::TyKind::Path(hir::QPath::LangItem(lang_item, _)) => {\n+                Ok(text_sig(format!(\"#[lang = \\\"{}\\\"]\", lang_item.name())))\n+            }\n             hir::TyKind::TraitObject(bounds, ..) => {\n                 // FIXME recurse into bounds\n                 let bounds: Vec<hir::GenericBound<'_>> = bounds"}]}