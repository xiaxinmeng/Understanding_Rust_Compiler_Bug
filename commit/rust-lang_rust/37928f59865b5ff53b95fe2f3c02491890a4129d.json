{"sha": "37928f59865b5ff53b95fe2f3c02491890a4129d", "node_id": "C_kwDOAAsO6NoAKDM3OTI4ZjU5ODY1YjVmZjUzYjk1ZmUyZjNjMDI0OTE4OTBhNDEyOWQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-18T16:01:10Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-21T13:11:54Z"}, "message": "Neither require nor imply lifetime bounds on opaque type for well formedness", "tree": {"sha": "989c04f5e99348a4253f8d17f2a0a1e012b543ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/989c04f5e99348a4253f8d17f2a0a1e012b543ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37928f59865b5ff53b95fe2f3c02491890a4129d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37928f59865b5ff53b95fe2f3c02491890a4129d", "html_url": "https://github.com/rust-lang/rust/commit/37928f59865b5ff53b95fe2f3c02491890a4129d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37928f59865b5ff53b95fe2f3c02491890a4129d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8ecf09a25720bb87f1da7b1741238eb70aa2762", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8ecf09a25720bb87f1da7b1741238eb70aa2762", "html_url": "https://github.com/rust-lang/rust/commit/c8ecf09a25720bb87f1da7b1741238eb70aa2762"}], "stats": {"total": 539, "additions": 497, "deletions": 42}, "files": [{"sha": "e0140e281ee736cc07e072955fcaf5c8c87f7895", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -362,6 +362,11 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n                     self.region_bound_pairs\n                         .insert(ty::OutlivesPredicate(GenericKind::Projection(projection_b), r_a));\n                 }\n+\n+                OutlivesBound::RegionSubOpaque(r_a, def_id, substs) => {\n+                    self.region_bound_pairs\n+                        .insert(ty::OutlivesPredicate(GenericKind::Opaque(def_id, substs), r_a));\n+                }\n             }\n         }\n     }"}, {"sha": "e33035381e0a989817bfabd044d32c53370df63a", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -2374,6 +2374,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let labeled_user_string = match bound_kind {\n             GenericKind::Param(ref p) => format!(\"the parameter type `{}`\", p),\n             GenericKind::Projection(ref p) => format!(\"the associated type `{}`\", p),\n+            GenericKind::Opaque(def_id, substs) => {\n+                format!(\"the opaque type `{}`\", self.tcx.def_path_str_with_substs(def_id, substs))\n+            }\n         };\n \n         if let Some(SubregionOrigin::CompareImplItemObligation {"}, {"sha": "14ee9f05190102b8f7067bf28a1f56a7b332b9b5", "filename": "compiler/rustc_infer/src/infer/outlives/components.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -3,8 +3,9 @@\n // RFC for reference.\n \n use rustc_data_structures::sso::SsoHashSet;\n+use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, SubstsRef, Ty, TyCtxt, TypeVisitable};\n use smallvec::{smallvec, SmallVec};\n \n #[derive(Debug)]\n@@ -45,6 +46,8 @@ pub enum Component<'tcx> {\n     // them. This gives us room to improve the regionck reasoning in\n     // the future without breaking backwards compat.\n     EscapingProjection(Vec<Component<'tcx>>),\n+\n+    Opaque(DefId, SubstsRef<'tcx>),\n }\n \n /// Push onto `out` all the things that must outlive `'a` for the condition\n@@ -120,6 +123,17 @@ fn compute_components<'tcx>(\n                 out.push(Component::Param(p));\n             }\n \n+            // Ignore lifetimes found in opaque types. Opaque types can\n+            // have lifetimes in their substs which their hidden type doesn't\n+            // actually use. If we inferred that an opaque type is outlived by\n+            // its parameter lifetimes, then we could prove that any lifetime\n+            // outlives any other lifetime, which is unsound.\n+            // See https://github.com/rust-lang/rust/issues/84305 for\n+            // more details.\n+            ty::Opaque(def_id, substs) => {\n+                out.push(Component::Opaque(def_id, substs));\n+            },\n+\n             // For projections, we prefer to generate an obligation like\n             // `<P0 as Trait<P1...Pn>>::Foo: 'a`, because this gives the\n             // regionck more ways to prove that it holds. However,\n@@ -168,7 +182,6 @@ fn compute_components<'tcx>(\n             ty::Float(..) |       // OutlivesScalar\n             ty::Never |           // ...\n             ty::Adt(..) |         // OutlivesNominalType\n-            ty::Opaque(..) |      // OutlivesNominalType (ish)\n             ty::Foreign(..) |     // OutlivesNominalType\n             ty::Str |             // OutlivesScalar (ish)\n             ty::Slice(..) |       // ..."}, {"sha": "281c65bda77a7274d1b753963a12b34cc9568023", "filename": "compiler/rustc_infer/src/infer/outlives/env.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fenv.rs?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -140,6 +140,10 @@ impl<'a, 'tcx> OutlivesEnvironmentBuilder<'tcx> {\n                     self.region_bound_pairs\n                         .insert(ty::OutlivesPredicate(GenericKind::Projection(projection_b), r_a));\n                 }\n+                OutlivesBound::RegionSubOpaque(r_a, def_id, substs) => {\n+                    self.region_bound_pairs\n+                        .insert(ty::OutlivesPredicate(GenericKind::Opaque(def_id, substs), r_a));\n+                }\n                 OutlivesBound::RegionSubRegion(r_a, r_b) => {\n                     if let (ReEarlyBound(_) | ReFree(_), ReVar(vid_b)) = (r_a.kind(), r_b.kind()) {\n                         infcx"}, {"sha": "ad5fbb9a15823f112a04a00d8b7d2cf9f38cb356", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -284,6 +284,9 @@ where\n                 Component::Param(param_ty) => {\n                     self.param_ty_must_outlive(origin, region, *param_ty);\n                 }\n+                Component::Opaque(def_id, substs) => {\n+                    self.opaque_must_outlive(*def_id, substs, origin, region)\n+                }\n                 Component::Projection(projection_ty) => {\n                     self.projection_must_outlive(origin, region, *projection_ty);\n                 }\n@@ -319,6 +322,27 @@ where\n         self.delegate.push_verify(origin, generic, region, verify_bound);\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n+    fn opaque_must_outlive(\n+        &mut self,\n+        def_id: DefId,\n+        substs: SubstsRef<'tcx>,\n+        origin: infer::SubregionOrigin<'tcx>,\n+        region: ty::Region<'tcx>,\n+    ) {\n+        self.generic_must_outlive(\n+            origin,\n+            region,\n+            GenericKind::Opaque(def_id, substs),\n+            def_id,\n+            substs,\n+            |ty| match *ty.kind() {\n+                ty::Opaque(def_id, substs) => (def_id, substs),\n+                _ => bug!(\"expected only projection types from env, not {:?}\", ty),\n+            },\n+        );\n+    }\n+\n     #[instrument(level = \"debug\", skip(self))]\n     fn projection_must_outlive(\n         &mut self,"}, {"sha": "040843d837070cf042f9d237320e46cdedc43b5d", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -47,6 +47,7 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n             GenericKind::Projection(projection_ty) => {\n                 self.projection_bound(projection_ty, &mut visited)\n             }\n+            GenericKind::Opaque(def_id, substs) => self.opaque_bound(def_id, substs),\n         }\n     }\n \n@@ -155,6 +156,20 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         VerifyBound::AnyBound(env_bounds.chain(trait_bounds).collect()).or(recursive_bound)\n     }\n \n+    fn opaque_bound(&self, def_id: DefId, substs: SubstsRef<'tcx>) -> VerifyBound<'tcx> {\n+        let bounds: Vec<_> =\n+            self.bounds(def_id, substs).map(|r| VerifyBound::OutlivedBy(r)).collect();\n+        trace!(\"{:#?}\", bounds);\n+        if bounds.is_empty() {\n+            // No bounds means the value must not have any lifetimes.\n+            // FIXME: should we implicitly add 'static to `tcx.item_bounds` for opaque types, just\n+            // like we add `Sized`?\n+            VerifyBound::OutlivedBy(self.tcx.lifetimes.re_static)\n+        } else {\n+            VerifyBound::AnyBound(bounds)\n+        }\n+    }\n+\n     fn bound_from_components(\n         &self,\n         components: &[Component<'tcx>],\n@@ -184,6 +199,7 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         match *component {\n             Component::Region(lt) => VerifyBound::OutlivedBy(lt),\n             Component::Param(param_ty) => self.param_bound(param_ty),\n+            Component::Opaque(did, substs) => self.opaque_bound(did, substs),\n             Component::Projection(projection_ty) => self.projection_bound(projection_ty, visited),\n             Component::EscapingProjection(ref components) => {\n                 self.bound_from_components(components, visited)"}, {"sha": "67b3da687200e9538aff976cbf4db4af520c482e", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -12,8 +12,10 @@ use rustc_data_structures::intern::Interned;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::undo_log::UndoLogs;\n use rustc_data_structures::unify as ut;\n+use rustc_hir::def_id::DefId;\n use rustc_index::vec::IndexVec;\n use rustc_middle::infer::unify_key::{RegionVidKey, UnifiedRegion};\n+use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::ReStatic;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::ty::{ReLateBound, ReVar};\n@@ -168,6 +170,7 @@ pub struct Verify<'tcx> {\n pub enum GenericKind<'tcx> {\n     Param(ty::ParamTy),\n     Projection(ty::ProjectionTy<'tcx>),\n+    Opaque(DefId, SubstsRef<'tcx>),\n }\n \n /// Describes the things that some `GenericKind` value `G` is known to\n@@ -747,6 +750,9 @@ impl<'tcx> fmt::Debug for GenericKind<'tcx> {\n         match *self {\n             GenericKind::Param(ref p) => write!(f, \"{:?}\", p),\n             GenericKind::Projection(ref p) => write!(f, \"{:?}\", p),\n+            GenericKind::Opaque(def_id, substs) => ty::tls::with(|tcx| {\n+                write!(f, \"{}\", tcx.def_path_str_with_substs(def_id, tcx.lift(substs).unwrap()))\n+            }),\n         }\n     }\n }\n@@ -756,6 +762,9 @@ impl<'tcx> fmt::Display for GenericKind<'tcx> {\n         match *self {\n             GenericKind::Param(ref p) => write!(f, \"{}\", p),\n             GenericKind::Projection(ref p) => write!(f, \"{}\", p),\n+            GenericKind::Opaque(def_id, substs) => ty::tls::with(|tcx| {\n+                write!(f, \"{}\", tcx.def_path_str_with_substs(def_id, tcx.lift(substs).unwrap()))\n+            }),\n         }\n     }\n }\n@@ -765,6 +774,7 @@ impl<'tcx> GenericKind<'tcx> {\n         match *self {\n             GenericKind::Param(ref p) => p.to_ty(tcx),\n             GenericKind::Projection(ref p) => tcx.mk_projection(p.item_def_id, p.substs),\n+            GenericKind::Opaque(def_id, substs) => tcx.mk_opaque(def_id, substs),\n         }\n     }\n }"}, {"sha": "e12c069dcc1d980de0587cc5368b863574767ca0", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -246,6 +246,13 @@ impl<'tcx> Elaborator<'tcx> {\n \n                             Component::UnresolvedInferenceVariable(_) => None,\n \n+                            Component::Opaque(def_id, substs) => {\n+                                let ty = tcx.mk_opaque(def_id, substs);\n+                                Some(ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(\n+                                    ty, r_min,\n+                                )))\n+                            }\n+\n                             Component::Projection(projection) => {\n                                 // We might end up here if we have `Foo<<Bar as Baz>::Assoc>: 'a`.\n                                 // With this, we can deduce that `<Bar as Baz>::Assoc: 'a`.\n@@ -262,8 +269,9 @@ impl<'tcx> Elaborator<'tcx> {\n                                 None\n                             }\n                         })\n-                        .map(ty::Binder::dummy)\n-                        .map(|predicate_kind| predicate_kind.to_predicate(tcx))\n+                        .map(|predicate_kind| {\n+                            bound_predicate.rebind(predicate_kind).to_predicate(tcx)\n+                        })\n                         .filter(|&predicate| visited.insert(predicate))\n                         .map(|predicate| {\n                             predicate_obligation("}, {"sha": "fb152b63f63448675059b251cbd6191681df48fa", "filename": "compiler/rustc_middle/src/traits/query.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -8,8 +8,9 @@\n use crate::error::DropCheckOverflow;\n use crate::infer::canonical::{Canonical, QueryResponse};\n use crate::ty::error::TypeError;\n-use crate::ty::subst::GenericArg;\n+use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt};\n+use rustc_hir::def_id::DefId;\n use rustc_span::source_map::Span;\n use std::iter::FromIterator;\n \n@@ -219,4 +220,5 @@ pub enum OutlivesBound<'tcx> {\n     RegionSubRegion(ty::Region<'tcx>, ty::Region<'tcx>),\n     RegionSubParam(ty::Region<'tcx>, ty::ParamTy),\n     RegionSubProjection(ty::Region<'tcx>, ty::ProjectionTy<'tcx>),\n+    RegionSubOpaque(ty::Region<'tcx>, DefId, SubstsRef<'tcx>),\n }"}, {"sha": "d77ed97c6c8da539848b64c063f889e135f418b9", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -153,6 +153,9 @@ fn implied_bounds_from_components<'tcx>(\n                 Component::Region(r) => Some(OutlivesBound::RegionSubRegion(sub_region, r)),\n                 Component::Param(p) => Some(OutlivesBound::RegionSubParam(sub_region, p)),\n                 Component::Projection(p) => Some(OutlivesBound::RegionSubProjection(sub_region, p)),\n+                Component::Opaque(def_id, substs) => {\n+                    Some(OutlivesBound::RegionSubOpaque(sub_region, def_id, substs))\n+                }\n                 Component::EscapingProjection(_) =>\n                 // If the projection has escaping regions, don't\n                 // try to infer any implied bounds even for its"}, {"sha": "39610e3ae38057228ec2d97c6690806261aeabfe", "filename": "compiler/rustc_typeck/src/mem_categorization.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -265,6 +265,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n         self.cat_expr_adjusted_with(expr, || Ok(previous), adjustment)\n     }\n \n+    #[instrument(level = \"debug\", skip(self, previous))]\n     fn cat_expr_adjusted_with<F>(\n         &self,\n         expr: &hir::Expr<'_>,\n@@ -274,7 +275,6 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n     where\n         F: FnOnce() -> McResult<PlaceWithHirId<'tcx>>,\n     {\n-        debug!(\"cat_expr_adjusted_with({:?}): {:?}\", adjustment, expr);\n         let target = self.resolve_vars_if_possible(adjustment.target);\n         match adjustment.kind {\n             adjustment::Adjust::Deref(overloaded) => {\n@@ -299,6 +299,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     pub(crate) fn cat_expr_unadjusted(\n         &self,\n         expr: &hir::Expr<'_>,\n@@ -387,15 +388,14 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip(self, span))]\n     pub(crate) fn cat_res(\n         &self,\n         hir_id: hir::HirId,\n         span: Span,\n         expr_ty: Ty<'tcx>,\n         res: Res,\n     ) -> McResult<PlaceWithHirId<'tcx>> {\n-        debug!(\"cat_res: id={:?} expr={:?} def={:?}\", hir_id, expr_ty, res);\n-\n         match res {\n             Res::Def(\n                 DefKind::Ctor(..)\n@@ -475,13 +475,12 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n         ret\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn cat_overloaded_place(\n         &self,\n         expr: &hir::Expr<'_>,\n         base: &hir::Expr<'_>,\n     ) -> McResult<PlaceWithHirId<'tcx>> {\n-        debug!(\"cat_overloaded_place(expr={:?}, base={:?})\", expr, base);\n-\n         // Reconstruct the output assuming it's a reference with the\n         // same region and mutability as the receiver. This holds for\n         // `Deref(Mut)::Deref(_mut)` and `Index(Mut)::index(_mut)`.\n@@ -497,13 +496,12 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n         self.cat_deref(expr, base)\n     }\n \n+    #[instrument(level = \"debug\", skip(self, node))]\n     fn cat_deref(\n         &self,\n         node: &impl HirNode,\n         base_place: PlaceWithHirId<'tcx>,\n     ) -> McResult<PlaceWithHirId<'tcx>> {\n-        debug!(\"cat_deref: base_place={:?}\", base_place);\n-\n         let base_curr_ty = base_place.place.ty();\n         let deref_ty = match base_curr_ty.builtin_deref(true) {\n             Some(mt) => mt.ty,"}, {"sha": "4c32a1e81ba542b2bc1a2483187474e5a5439643", "filename": "compiler/rustc_typeck/src/outlives/utils.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -1,6 +1,6 @@\n use rustc_infer::infer::outlives::components::{push_outlives_components, Component};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n-use rustc_middle::ty::{self, Region, Ty, TyCtxt};\n+use rustc_middle::ty::{self, EarlyBinder, Region, Ty, TyCtxt};\n use rustc_span::Span;\n use smallvec::smallvec;\n use std::collections::BTreeMap;\n@@ -96,6 +96,39 @@ pub(crate) fn insert_outlives_predicate<'tcx>(\n                             .or_insert(span);\n                     }\n \n+                    Component::Opaque(def_id, substs) => {\n+                        for predicate in tcx.item_bounds(def_id) {\n+                            let predicate = EarlyBinder(predicate).subst(tcx, substs);\n+                            // FIXME(oli-obk): fishy skip-binder\n+                            match predicate.kind().skip_binder() {\n+                                ty::PredicateKind::Trait(tp) => {\n+                                    for subst in tp.trait_ref.substs {\n+                                        insert_outlives_predicate(\n+                                            tcx,\n+                                            subst,\n+                                            outlived_region,\n+                                            span,\n+                                            required_predicates,\n+                                        )\n+                                    }\n+                                }\n+                                ty::PredicateKind::RegionOutlives(_)\n+                                | ty::PredicateKind::TypeOutlives(_)\n+                                | ty::PredicateKind::Projection(_)\n+                                | ty::PredicateKind::WellFormed(_)\n+                                | ty::PredicateKind::ObjectSafe(_)\n+                                | ty::PredicateKind::ClosureKind(_, _, _)\n+                                | ty::PredicateKind::Subtype(_)\n+                                | ty::PredicateKind::Coerce(_)\n+                                | ty::PredicateKind::ConstEvaluatable(_)\n+                                | ty::PredicateKind::ConstEquate(_, _)\n+                                | ty::PredicateKind::TypeWellFormedFromEnv(_) => {\n+                                    todo!(\"{:#?}\", predicate)\n+                                }\n+                            }\n+                        }\n+                    }\n+\n                     Component::EscapingProjection(_) => {\n                         // As above, but the projection involves\n                         // late-bound regions.  Therefore, the WF"}, {"sha": "de1b464a41dbe81ebe20d175f37ebbfc74eba1be", "filename": "src/test/ui/generic-associated-types/bugs/issue-86218.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c8ecf09a25720bb87f1da7b1741238eb70aa2762/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8ecf09a25720bb87f1da7b1741238eb70aa2762/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.stderr?ref=c8ecf09a25720bb87f1da7b1741238eb70aa2762", "patch": "@@ -1,23 +0,0 @@\n-error[E0477]: the type `<() as Yay<&'a ()>>::InnerStream<'s>` does not fulfill the required lifetime\n-  --> $DIR/issue-86218.rs:22:28\n-   |\n-LL |     type InnerStream<'s> = impl Stream<Item = i32> + 's;\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: type must outlive the lifetime `'s` as defined here as required by this binding\n-  --> $DIR/issue-86218.rs:22:22\n-   |\n-LL |     type InnerStream<'s> = impl Stream<Item = i32> + 's;\n-   |                      ^^\n-\n-error: unconstrained opaque type\n-  --> $DIR/issue-86218.rs:22:28\n-   |\n-LL |     type InnerStream<'s> = impl Stream<Item = i32> + 's;\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `InnerStream` must be used in combination with a concrete type within the same module\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0477`."}, {"sha": "897836af6b0b8883bdd702fc86ed3f9d0de05523", "filename": "src/test/ui/generic-associated-types/issue-86218-2.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86218-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86218-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86218-2.rs?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+\n+pub trait Stream {\n+    type Item;\n+}\n+\n+impl Stream for () {\n+    type Item = i32;\n+}\n+\n+trait Yay<AdditionalValue> {\n+    type InnerStream<'s>: Stream<Item = i32> + 's;\n+    fn foo<'s>() -> Self::InnerStream<'s>;\n+}\n+\n+impl<T> Yay<T> for () {\n+    type InnerStream<'s> = impl Stream<Item = i32> + 's;\n+    //^ ERROR does not fulfill the required lifetime\n+    fn foo<'s>() -> Self::InnerStream<'s> { () }\n+}\n+\n+fn main() {}"}, {"sha": "b2c3071f06b100cc8b804bf0ac0b6a40e71b2518", "filename": "src/test/ui/generic-associated-types/issue-86218.rs", "status": "renamed", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86218.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86218.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86218.rs?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -1,7 +1,4 @@\n-// check-fail\n-// known-bug: #86218\n-\n-// This should pass, but seems to run into a TAIT issue.\n+// check-pass\n \n #![feature(type_alias_impl_trait)]\n \n@@ -20,7 +17,8 @@ trait Yay<AdditionalValue> {\n \n impl<'a> Yay<&'a ()> for () {\n     type InnerStream<'s> = impl Stream<Item = i32> + 's;\n-    fn foo<'s>() -> Self::InnerStream<'s> { todo!() }\n+    //^ ERROR does not fulfill the required lifetime\n+    fn foo<'s>() -> Self::InnerStream<'s> { () }\n }\n \n fn main() {}", "previous_filename": "src/test/ui/generic-associated-types/bugs/issue-86218.rs"}, {"sha": "53cbf8d229006ecdb2cfbcdf9c168733a4f68e15", "filename": "src/test/ui/type-alias-impl-trait/implied_bounds.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds.rs?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -0,0 +1,51 @@\n+#![feature(type_alias_impl_trait)]\n+\n+type WithLifetime<'a> = impl Equals<SelfType = ()>;\n+fn _defining_use<'a>() -> WithLifetime<'a> {}\n+\n+trait Convert<'a> {\n+    type Witness;\n+    fn convert<'b, T: ?Sized>(_proof: &'b Self::Witness, x: &'a T) -> &'b T;\n+}\n+\n+impl<'a> Convert<'a> for () {\n+    type Witness = WithLifetime<'a>;\n+\n+    fn convert<'b, T: ?Sized>(_proof: &'b WithLifetime<'a>, x: &'a T) -> &'b T {\n+        // compiler used to think it gets to assume 'a: 'b here because\n+        // of the `&'b WithLifetime<'a>` argument\n+        x\n+        //~^ ERROR lifetime may not live long enough\n+    }\n+}\n+\n+fn extend_lifetime<'a, 'b, T: ?Sized>(x: &'a T) -> &'b T {\n+    WithLifetime::<'a>::convert_helper::<(), T>(&(), x)\n+}\n+\n+trait Equals {\n+    type SelfType;\n+    fn convert_helper<'a, 'b, W: Convert<'a, Witness = Self>, T: ?Sized>(\n+        proof: &'b Self::SelfType,\n+        x: &'a T,\n+    ) -> &'b T;\n+}\n+\n+impl<S> Equals for S {\n+    type SelfType = Self;\n+    fn convert_helper<'a, 'b, W: Convert<'a, Witness = Self>, T: ?Sized>(\n+        proof: &'b Self,\n+        x: &'a T,\n+    ) -> &'b T {\n+        W::convert(proof, x)\n+    }\n+}\n+\n+fn main() {\n+    let r;\n+    {\n+        let x = String::from(\"Hello World?\");\n+        r = extend_lifetime(&x);\n+    }\n+    println!(\"{}\", r);\n+}"}, {"sha": "6f11b66634b293aa8331e8fd22a71f9f3e50a2e3", "filename": "src/test/ui/type-alias-impl-trait/implied_bounds.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds.stderr?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -0,0 +1,16 @@\n+error: lifetime may not live long enough\n+  --> $DIR/implied_bounds.rs:17:9\n+   |\n+LL | impl<'a> Convert<'a> for () {\n+   |      -- lifetime `'a` defined here\n+...\n+LL |     fn convert<'b, T: ?Sized>(_proof: &'b WithLifetime<'a>, x: &'a T) -> &'b T {\n+   |                -- lifetime `'b` defined here\n+...\n+LL |         x\n+   |         ^ associated function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n+\n+error: aborting due to previous error\n+"}, {"sha": "d2ad062e799b084c8c56524741d7fef1a6c20950", "filename": "src/test/ui/type-alias-impl-trait/implied_bounds2.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds2.rs?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -0,0 +1,9 @@\n+#![feature(type_alias_impl_trait)]\n+\n+type Ty<'a, A> = impl Sized + 'a;\n+fn defining<'a, A>() -> Ty<'a, A> {}\n+fn assert_static<T: 'static>() {}\n+fn test<'a, A>() where Ty<'a, A>: 'static, { assert_static::<Ty<'a, A>>() }\n+//~^ ERROR: may not live long enough\n+\n+fn main() {}"}, {"sha": "b1c42c2c37fe2a72452fcf16774afc6948319df4", "filename": "src/test/ui/type-alias-impl-trait/implied_bounds2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds2.stderr?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -0,0 +1,12 @@\n+error[E0310]: the opaque type `Ty<'_, A>::{opaque#0}` may not live long enough\n+  --> $DIR/implied_bounds2.rs:6:46\n+   |\n+LL | fn test<'a, A>() where Ty<'a, A>: 'static, { assert_static::<Ty<'a, A>>() }\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `Ty<'_, A>::{opaque#0}: 'static`...\n+   = note: ...so that the type `Ty<'_, A>` will meet its required lifetime bounds\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0310`."}, {"sha": "4cf35f951904a93c10981fd9ae05a0b3301686b7", "filename": "src/test/ui/type-alias-impl-trait/implied_bounds_closure.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds_closure.rs?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -0,0 +1,31 @@\n+trait StaticDefaultRef: 'static {\n+    fn default_ref() -> &'static Self;\n+}\n+\n+impl StaticDefaultRef for str {\n+    fn default_ref() -> &'static str {\n+        \"\"\n+    }\n+}\n+\n+fn into_impl(x: &str) -> &(impl ?Sized + AsRef<str> + StaticDefaultRef + '_) {\n+    x\n+}\n+\n+fn extend_lifetime<'a>(x: &'a str) -> &'static str {\n+    let t = into_impl(x);\n+    helper(|_| t) //~ ERROR lifetime may not live long enough\n+}\n+\n+fn helper<T: ?Sized + AsRef<str> + StaticDefaultRef>(f: impl FnOnce(&T) -> &T) -> &'static str {\n+    f(T::default_ref()).as_ref()\n+}\n+\n+fn main() {\n+    let r;\n+    {\n+        let x = String::from(\"Hello World?\");\n+        r = extend_lifetime(&x);\n+    }\n+    println!(\"{}\", r);\n+}"}, {"sha": "151564c3b45a169a5e4f23425a0c932227b20a5a", "filename": "src/test/ui/type-alias-impl-trait/implied_bounds_closure.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds_closure.stderr?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/implied_bounds_closure.rs:17:16\n+   |\n+LL | fn extend_lifetime<'a>(x: &'a str) -> &'static str {\n+   |                    -- lifetime `'a` defined here\n+LL |     let t = into_impl(x);\n+LL |     helper(|_| t)\n+   |                ^ returning this value requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "8023cd24f0bf621d86e16fd6ea02d25d6b9efe52", "filename": "src/test/ui/type-alias-impl-trait/implied_bounds_from_types.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds_from_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds_from_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds_from_types.rs?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -0,0 +1,51 @@\n+#![feature(type_alias_impl_trait)]\n+\n+type WithLifetime<T> = impl Equals<SelfType = ()>;\n+fn _defining_use<T>() -> WithLifetime<T> {}\n+\n+trait Convert<'a> {\n+    type Witness;\n+    fn convert<'b, T: ?Sized>(_proof: &'b Self::Witness, x: &'a T) -> &'b T;\n+}\n+\n+impl<'a> Convert<'a> for () {\n+    type Witness = WithLifetime<&'a ()>;\n+\n+    fn convert<'b, T: ?Sized>(_proof: &'b WithLifetime<&'a ()>, x: &'a T) -> &'b T {\n+        // compiler used to think it gets to assume 'a: 'b here because\n+        // of the `&'b WithLifetime<&'a ()>` argument\n+        x\n+        //~^ ERROR lifetime may not live long enough\n+    }\n+}\n+\n+fn extend_lifetime<'a, 'b, T: ?Sized>(x: &'a T) -> &'b T {\n+    WithLifetime::<&'a ()>::convert_helper::<(), T>(&(), x)\n+}\n+\n+trait Equals {\n+    type SelfType;\n+    fn convert_helper<'a, 'b, W: Convert<'a, Witness = Self>, T: ?Sized>(\n+        proof: &'b Self::SelfType,\n+        x: &'a T,\n+    ) -> &'b T;\n+}\n+\n+impl<S> Equals for S {\n+    type SelfType = Self;\n+    fn convert_helper<'a, 'b, W: Convert<'a, Witness = Self>, T: ?Sized>(\n+        proof: &'b Self,\n+        x: &'a T,\n+    ) -> &'b T {\n+        W::convert(proof, x)\n+    }\n+}\n+\n+fn main() {\n+    let r;\n+    {\n+        let x = String::from(\"Hello World?\");\n+        r = extend_lifetime(&x);\n+    }\n+    println!(\"{}\", r);\n+}"}, {"sha": "cbc5e6073181582e7c9f1dc8492c40a5aa2e5b36", "filename": "src/test/ui/type-alias-impl-trait/implied_bounds_from_types.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds_from_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds_from_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds_from_types.stderr?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -0,0 +1,16 @@\n+error: lifetime may not live long enough\n+  --> $DIR/implied_bounds_from_types.rs:17:9\n+   |\n+LL | impl<'a> Convert<'a> for () {\n+   |      -- lifetime `'a` defined here\n+...\n+LL |     fn convert<'b, T: ?Sized>(_proof: &'b WithLifetime<&'a ()>, x: &'a T) -> &'b T {\n+   |                -- lifetime `'b` defined here\n+...\n+LL |         x\n+   |         ^ associated function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n+\n+error: aborting due to previous error\n+"}, {"sha": "a2063cf5e3ee5df29655b8e05d26951862662182", "filename": "src/test/ui/type-alias-impl-trait/implied_lifetime_wf_check.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_lifetime_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_lifetime_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_lifetime_wf_check.rs?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -0,0 +1,18 @@\n+trait Mirror<'a> {\n+    type Item;\n+}\n+\n+impl<'a, T> Mirror<'a> for T {\n+    type Item = T;\n+}\n+\n+trait AnotherTrait {\n+    type Blah;\n+}\n+\n+impl<'a> AnotherTrait for <u32 as Mirror<'a>>::Item {\n+    //~^ ERROR: the lifetime parameter `'a` is not constrained\n+    type Blah = &'a u32;\n+}\n+\n+fn main() {}"}, {"sha": "cadf2ce4a9d5d5c8f462f349bdf2f53886c363ef", "filename": "src/test/ui/type-alias-impl-trait/implied_lifetime_wf_check.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_lifetime_wf_check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_lifetime_wf_check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_lifetime_wf_check.stderr?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -0,0 +1,9 @@\n+error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/implied_lifetime_wf_check.rs:13:6\n+   |\n+LL | impl<'a> AnotherTrait for <u32 as Mirror<'a>>::Item {\n+   |      ^^ unconstrained lifetime parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0207`."}, {"sha": "4f52f7a34af8ec98e623932fb038e252663bec55", "filename": "src/test/ui/type-alias-impl-trait/implied_lifetime_wf_check2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_lifetime_wf_check2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_lifetime_wf_check2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_lifetime_wf_check2.rs?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -0,0 +1,13 @@\n+#![feature(type_alias_impl_trait)]\n+\n+// check-pass\n+\n+trait Tr { type Assoc; }\n+impl<'a> Tr for &'a str { type Assoc = &'a str; }\n+\n+type OpaqueTy<'a> = impl Tr;\n+fn defining(s: &str) -> OpaqueTy<'_> { s }\n+\n+// now we must be able to conclude `'a: 'static` from `Opaque<'a>: 'static`\n+\n+fn main() {}"}, {"sha": "4cbb6b63670ac04cb8e116b45448c3f890bf1349", "filename": "src/test/ui/type-alias-impl-trait/implied_lifetime_wf_check3.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_lifetime_wf_check3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_lifetime_wf_check3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_lifetime_wf_check3.rs?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -0,0 +1,42 @@\n+#![feature(type_alias_impl_trait)]\n+\n+mod test_lifetime_param {\n+    type Ty<'a> = impl Sized;\n+    fn defining(a: &str) -> Ty<'_> { a }\n+    fn assert_static<'a: 'static>() {}\n+    //~^ WARN: unnecessary lifetime parameter `'a`\n+    fn test<'a>() where Ty<'a>: 'static { assert_static::<'a>() }\n+}\n+\n+mod test_higher_kinded_lifetime_param {\n+    type Ty<'a> = impl Sized;\n+    fn defining(a: &str) -> Ty<'_> { a }\n+    fn assert_static<'a: 'static>() {}\n+    //~^ WARN: unnecessary lifetime parameter `'a`\n+    fn test<'a>() where for<'b> Ty<'b>: 'a { assert_static::<'a>() }\n+}\n+\n+mod test_higher_kinded_lifetime_param2 {\n+    fn assert_static<'a: 'static>() {}\n+    //~^ WARN: unnecessary lifetime parameter `'a`\n+    fn test<'a>() { assert_static::<'a>() }\n+    // no error because all the other errors happen first and then we abort before\n+    // emitting an error here.\n+}\n+\n+mod test_type_param {\n+    type Ty<A> = impl Sized;\n+    fn defining<A>(s: A) -> Ty<A> { s }\n+    fn assert_static<A: 'static>() {}\n+    fn test<A>() where Ty<A>: 'static { assert_static::<A>() }\n+}\n+\n+mod test_type_param_static {\n+    type Ty<A> = impl Sized + 'static;\n+    //~^ ERROR: the parameter type `A` may not live long enough\n+    fn defining<A: 'static>(s: A) -> Ty<A> { s }\n+    fn assert_static<A: 'static>() {}\n+    fn test<A>() where Ty<A>: 'static { assert_static::<A>() }\n+}\n+\n+fn main() {}"}, {"sha": "16d529698f4d62b06a69b27bb78ea0198fc8a074", "filename": "src/test/ui/type-alias-impl-trait/implied_lifetime_wf_check3.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_lifetime_wf_check3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_lifetime_wf_check3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_lifetime_wf_check3.stderr?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -0,0 +1,38 @@\n+warning: unnecessary lifetime parameter `'a`\n+  --> $DIR/implied_lifetime_wf_check3.rs:6:22\n+   |\n+LL |     fn assert_static<'a: 'static>() {}\n+   |                      ^^\n+   |\n+   = help: you can use the `'static` lifetime directly, in place of `'a`\n+\n+warning: unnecessary lifetime parameter `'a`\n+  --> $DIR/implied_lifetime_wf_check3.rs:14:22\n+   |\n+LL |     fn assert_static<'a: 'static>() {}\n+   |                      ^^\n+   |\n+   = help: you can use the `'static` lifetime directly, in place of `'a`\n+\n+warning: unnecessary lifetime parameter `'a`\n+  --> $DIR/implied_lifetime_wf_check3.rs:20:22\n+   |\n+LL |     fn assert_static<'a: 'static>() {}\n+   |                      ^^\n+   |\n+   = help: you can use the `'static` lifetime directly, in place of `'a`\n+\n+error[E0310]: the parameter type `A` may not live long enough\n+  --> $DIR/implied_lifetime_wf_check3.rs:35:18\n+   |\n+LL |     type Ty<A> = impl Sized + 'static;\n+   |                  ^^^^^^^^^^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     type Ty<A: 'static> = impl Sized + 'static;\n+   |              +++++++++\n+\n+error: aborting due to previous error; 3 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0310`."}, {"sha": "477b61390ed46d44a6ebe734180e7c6b19ec787a", "filename": "src/test/ui/type-alias-impl-trait/issue-58662-generator-with-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58662-generator-with-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58662-generator-with-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58662-generator-with-lifetime.rs?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -16,7 +16,7 @@ fn rand_generator<'a>(rng: &'a ()) -> RandGenerator<'a> {\n     }\n }\n \n-pub type RandGeneratorWithIndirection<'a> = impl Generator<Return = (), Yield = u64> + 'a;\n+pub type RandGeneratorWithIndirection<'c> = impl Generator<Return = (), Yield = u64> + 'c;\n pub fn rand_generator_with_indirection<'a>(rng: &'a ()) -> RandGeneratorWithIndirection<'a> {\n     fn helper<'b>(rng: &'b ()) -> impl 'b + Generator<Return = (), Yield = u64> {\n         move || {"}, {"sha": "27ca7d0fdc9fa4fd76a7da1e1a95e8a3debcbefa", "filename": "src/test/ui/type-alias-impl-trait/issue-58662-simplified.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58662-simplified.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58662-simplified.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58662-simplified.rs?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -0,0 +1,20 @@\n+// check-pass\n+\n+#![feature(generators, generator_trait)]\n+#![feature(type_alias_impl_trait)]\n+\n+trait Trait {}\n+\n+impl<T> Trait for T {}\n+\n+type Foo<'c> = impl Trait + 'c;\n+fn foo<'a>(rng: &'a ()) -> Foo<'a> {\n+    fn helper<'b>(rng: &'b ()) -> impl 'b + Trait {\n+        rng\n+    }\n+\n+    helper(rng)\n+}\n+\n+fn main() {\n+}"}]}