{"sha": "ad0b78d2c99a83f39111ecaf60d9225201a699e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMGI3OGQyYzk5YTgzZjM5MTExZWNhZjYwZDkyMjUyMDFhNjk5ZTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-24T21:45:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-24T21:45:17Z"}, "message": "Rollup merge of #64016 - nnethercote:Compiler-fiddling, r=oli-obk\n\nStreamline `Compiler`\n\nA few commits to clean up `Compiler`.\n\nr? @Zoxc", "tree": {"sha": "2cb16f4e0b97d0bbfd2714f588402a6cca58a9a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cb16f4e0b97d0bbfd2714f588402a6cca58a9a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad0b78d2c99a83f39111ecaf60d9225201a699e4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdio5tCRBK7hj4Ov3rIwAAdHIIAHTMT+OlukcMDNq7cV7gyY4O\na4tMWwuIOL0pbYOoBCcwh/PD3mah5/JIbN64HlAUjhhPsbbkzInGD7hOlV+Wz+86\nNBIfIFY5NzUkFtw7indM842iXCqWFvfI7DqX8Ao8TiMRbXu97K/kXJsop5bThrPo\nWT0PX2V/MD+aiSi1G8tns+NPPfU5dHof7Z92WHYgu7d1v2M5DqBpSbTdUJ2mCiea\n10XTiOnfayhTs377IwviK7eJYWePrVIUTFjUYyfL5zu0egysOGIvo1PriQR6CS6G\noKXdfIbOdkaBBXybAo8fwLkx5RkbqRxDn8g/zYufVlN8xk99blKQKtZLfrSy50I=\n=jp3s\n-----END PGP SIGNATURE-----\n", "payload": "tree 2cb16f4e0b97d0bbfd2714f588402a6cca58a9a0\nparent 94628afbefe70c29b8f4080327145d98c17a7e2b\nparent 25211894386a34db1639fbd69680e8f7b35ee1a4\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1569361517 +0200\ncommitter GitHub <noreply@github.com> 1569361517 +0200\n\nRollup merge of #64016 - nnethercote:Compiler-fiddling, r=oli-obk\n\nStreamline `Compiler`\n\nA few commits to clean up `Compiler`.\n\nr? @Zoxc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad0b78d2c99a83f39111ecaf60d9225201a699e4", "html_url": "https://github.com/rust-lang/rust/commit/ad0b78d2c99a83f39111ecaf60d9225201a699e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad0b78d2c99a83f39111ecaf60d9225201a699e4/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94628afbefe70c29b8f4080327145d98c17a7e2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/94628afbefe70c29b8f4080327145d98c17a7e2b", "html_url": "https://github.com/rust-lang/rust/commit/94628afbefe70c29b8f4080327145d98c17a7e2b"}, {"sha": "25211894386a34db1639fbd69680e8f7b35ee1a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/25211894386a34db1639fbd69680e8f7b35ee1a4", "html_url": "https://github.com/rust-lang/rust/commit/25211894386a34db1639fbd69680e8f7b35ee1a4"}], "stats": {"total": 52, "additions": 31, "deletions": 21}, "files": [{"sha": "33de518c59675097ba835aad26096f6b5a64e683", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad0b78d2c99a83f39111ecaf60d9225201a699e4/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad0b78d2c99a83f39111ecaf60d9225201a699e4/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=ad0b78d2c99a83f39111ecaf60d9225201a699e4", "patch": "@@ -221,7 +221,6 @@ pub struct PluginInfo {\n }\n \n pub fn register_plugins<'a>(\n-    compiler: &Compiler,\n     sess: &'a Session,\n     cstore: &'a CStore,\n     mut krate: ast::Crate,\n@@ -261,9 +260,6 @@ pub fn register_plugins<'a>(\n         });\n     }\n \n-    // If necessary, compute the dependency graph (in the background).\n-    compiler.dep_graph_future().ok();\n-\n     time(sess, \"recursion limit\", || {\n         middle::recursion_limit::update_limits(sess, &krate);\n     });"}, {"sha": "ff5cd8b8c695d2fbc2dac7efa04fc271fc6c0cce", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 29, "deletions": 16, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ad0b78d2c99a83f39111ecaf60d9225201a699e4/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad0b78d2c99a83f39111ecaf60d9225201a699e4/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=ad0b78d2c99a83f39111ecaf60d9225201a699e4", "patch": "@@ -114,29 +114,38 @@ impl Compiler {\n             let crate_name = self.crate_name()?.peek().clone();\n             let krate = self.parse()?.take();\n \n-            passes::register_plugins(\n-                self,\n+            let result = passes::register_plugins(\n                 self.session(),\n                 self.cstore(),\n                 krate,\n                 &crate_name,\n-            )\n+            );\n+\n+            // Compute the dependency graph (in the background). We want to do\n+            // this as early as possible, to give the DepGraph maximum time to\n+            // load before dep_graph() is called, but it also can't happen\n+            // until after rustc_incremental::prepare_session_directory() is\n+            // called, which happens within passes::register_plugins().\n+            self.dep_graph_future().ok();\n+\n+            result\n         })\n     }\n \n     pub fn crate_name(&self) -> Result<&Query<String>> {\n         self.queries.crate_name.compute(|| {\n-            let parse_result = self.parse()?;\n-            let krate = parse_result.peek();\n-            let result = match self.crate_name {\n+            Ok(match self.crate_name {\n                 Some(ref crate_name) => crate_name.clone(),\n-                None => rustc_codegen_utils::link::find_crate_name(\n-                    Some(self.session()),\n-                    &krate.attrs,\n-                    &self.input\n-                ),\n-            };\n-            Ok(result)\n+                None => {\n+                    let parse_result = self.parse()?;\n+                    let krate = parse_result.peek();\n+                    rustc_codegen_utils::link::find_crate_name(\n+                        Some(self.session()),\n+                        &krate.attrs,\n+                        &self.input\n+                    )\n+                }\n+            })\n         })\n     }\n \n@@ -194,7 +203,6 @@ impl Compiler {\n \n     pub fn prepare_outputs(&self) -> Result<&Query<OutputFilenames>> {\n         self.queries.prepare_outputs.compute(|| {\n-            self.lower_to_hir()?;\n             let krate = self.expansion()?;\n             let krate = krate.peek();\n             let crate_name = self.crate_name()?;\n@@ -267,6 +275,11 @@ impl Compiler {\n         })\n     }\n \n+    // This method is different to all the other methods in `Compiler` because\n+    // it lacks a `Queries` entry. It's also not currently used. It does serve\n+    // as an example of how `Compiler` can be used, with additional steps added\n+    // between some passes. And see `rustc_driver::run_compiler` for a more\n+    // complex example.\n     pub fn compile(&self) -> Result<()> {\n         self.prepare_outputs()?;\n \n@@ -278,12 +291,12 @@ impl Compiler {\n \n         self.global_ctxt()?;\n \n-        // Drop AST after creating GlobalCtxt to free memory\n+        // Drop AST after creating GlobalCtxt to free memory.\n         mem::drop(self.expansion()?.take());\n \n         self.ongoing_codegen()?;\n \n-        // Drop GlobalCtxt after starting codegen to free memory\n+        // Drop GlobalCtxt after starting codegen to free memory.\n         mem::drop(self.global_ctxt()?.take());\n \n         self.link().map(|_| ())"}, {"sha": "e290f7fa6b13a97d0fbb1e08fe2d43c55448f683", "filename": "src/test/run-make-fulldeps/issue-19371/foo.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad0b78d2c99a83f39111ecaf60d9225201a699e4/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad0b78d2c99a83f39111ecaf60d9225201a699e4/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs?ref=ad0b78d2c99a83f39111ecaf60d9225201a699e4", "patch": "@@ -62,6 +62,7 @@ fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n     };\n \n     interface::run_compiler(config, |compiler| {\n-        compiler.compile().ok();\n+        // This runs all the passes prior to linking, too.\n+        compiler.link().ok();\n     });\n }"}]}