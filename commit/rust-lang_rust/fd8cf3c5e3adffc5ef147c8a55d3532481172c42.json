{"sha": "fd8cf3c5e3adffc5ef147c8a55d3532481172c42", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkOGNmM2M1ZTNhZGZmYzVlZjE0N2M4YTU1ZDM1MzI0ODExNzJjNDI=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-04-10T20:44:15Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-04-11T22:18:51Z"}, "message": "Simplify macro", "tree": {"sha": "b3e0bcd9a8595d66d63dcb3aec1069e06c472c66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3e0bcd9a8595d66d63dcb3aec1069e06c472c66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd8cf3c5e3adffc5ef147c8a55d3532481172c42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd8cf3c5e3adffc5ef147c8a55d3532481172c42", "html_url": "https://github.com/rust-lang/rust/commit/fd8cf3c5e3adffc5ef147c8a55d3532481172c42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd8cf3c5e3adffc5ef147c8a55d3532481172c42/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e5a21069dc7e975b2ed9ca821e4f419ba011d97", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e5a21069dc7e975b2ed9ca821e4f419ba011d97", "html_url": "https://github.com/rust-lang/rust/commit/6e5a21069dc7e975b2ed9ca821e4f419ba011d97"}], "stats": {"total": 76, "additions": 19, "deletions": 57}, "files": [{"sha": "f3a49438f5b2fc5db5aa31faf5abe273eb80fc70", "filename": "src/librustc_middle/ty/query/plumbing.rs", "status": "modified", "additions": 19, "deletions": 57, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/fd8cf3c5e3adffc5ef147c8a55d3532481172c42/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8cf3c5e3adffc5ef147c8a55d3532481172c42/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs?ref=fd8cf3c5e3adffc5ef147c8a55d3532481172c42", "patch": "@@ -242,59 +242,9 @@ macro_rules! define_queries {\n     }\n }\n \n-macro_rules! define_query_helper {\n-    (TyCtxtAt<$tcx:tt>, $(#[$attr:meta])* $name:ident(DefId) -> $V:ty) => {\n-        $(#[$attr])*\n-        #[inline(always)]\n-        pub fn $name(self, key: impl Into<DefId>) -> $V {\n-            fn mono(this: TyCtxtAt<$tcx>, key: DefId) -> $V {\n-                get_query::<queries::$name<'_>, _>(this.tcx, this.span, key)\n-            }\n-\n-            mono(self, key.into())\n-        }\n-    };\n-    (TyCtxtAt<$tcx:tt>, $(#[$attr:meta])* $name:ident($K:ty) -> $V:ty) => {\n-        $(#[$attr])*\n-        #[inline(always)]\n-        pub fn $name(self, key: $K) -> $V {\n-            get_query::<queries::$name<'_>, _>(self.tcx, self.span, key)\n-        }\n-    };\n-\n-    (TyCtxt<$tcx:tt>, $(#[$attr:meta])* $name:ident(DefId) -> $V:ty) => {\n-        $(#[$attr])*\n-        #[inline(always)]\n-        pub fn $name(self, key: impl Into<DefId>) -> $V {\n-            self.at(DUMMY_SP).$name(key)\n-        }\n-    };\n-    (TyCtxt<$tcx:tt>, $(#[$attr:meta])* $name:ident($K:ty) -> $V:ty) => {\n-        $(#[$attr])*\n-        #[inline(always)]\n-        pub fn $name(self, key: $K) -> $V {\n-            self.at(DUMMY_SP).$name(key)\n-        }\n-    };\n-\n-    (TyCtxtEnsure<$tcx:tt>, $(#[$attr:meta])* $name:ident(DefId) -> $V:ty) => {\n-        $(#[$attr])*\n-        #[inline(always)]\n-        pub fn $name(self, key: impl Into<DefId>) {\n-            fn mono(this: TyCtxtEnsure<$tcx>, key: DefId) {\n-                ensure_query::<queries::$name<'_>, _>(this.tcx, key)\n-            }\n-\n-            mono(self, key.into())\n-        }\n-    };\n-    (TyCtxtEnsure<$tcx:tt>, $(#[$attr:meta])* $name:ident($K:ty) -> $V:ty) => {\n-        $(#[$attr])*\n-        #[inline(always)]\n-        pub fn $name(self, key: $K) {\n-            ensure_query::<queries::$name<'_>, _>(self.tcx, key)\n-        }\n-    };\n+macro_rules! query_helper_param_ty {\n+    (DefId) => { impl Into<DefId> };\n+    ($K:ty) => { $K };\n }\n \n macro_rules! define_queries_inner {\n@@ -432,8 +382,12 @@ macro_rules! define_queries_inner {\n             pub tcx: TyCtxt<'tcx>,\n         }\n \n-        impl TyCtxtEnsure<'tcx> {\n-            $( define_query_helper!(TyCtxtEnsure<'tcx>, $(#[$attr])* $name($($K)*) -> $V); )*\n+        impl TyCtxtEnsure<$tcx> {\n+            $($(#[$attr])*\n+            #[inline(always)]\n+            pub fn $name(self, key: query_helper_param_ty!($($K)*)) {\n+                ensure_query::<queries::$name<'_>, _>(self.tcx, key.into())\n+            })*\n         }\n \n         #[derive(Copy, Clone)]\n@@ -470,7 +424,11 @@ macro_rules! define_queries_inner {\n                 }\n             }\n \n-            $( define_query_helper!(TyCtxt<$tcx>, $(#[$attr])* $name($($K)*) -> $V); )*\n+            $($(#[$attr])*\n+            #[inline(always)]\n+            pub fn $name(self, key: query_helper_param_ty!($($K)*)) -> $V {\n+                self.at(DUMMY_SP).$name(key)\n+            })*\n \n             /// All self-profiling events generated by the query engine use\n             /// virtual `StringId`s for their `event_id`. This method makes all\n@@ -503,7 +461,11 @@ macro_rules! define_queries_inner {\n         }\n \n         impl TyCtxtAt<$tcx> {\n-            $( define_query_helper!(TyCtxtAt<$tcx>, $(#[$attr])* $name($($K)*) -> $V); )*\n+            $($(#[$attr])*\n+            #[inline(always)]\n+            pub fn $name(self, key: query_helper_param_ty!($($K)*)) -> $V {\n+                get_query::<queries::$name<'_>, _>(self.tcx, self.span, key.into())\n+            })*\n         }\n \n         define_provider_struct! {"}]}