{"sha": "6b7c68bec27bd4b50882ce32ea27d9f1901b452b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiN2M2OGJlYzI3YmQ0YjUwODgyY2UzMmVhMjdkOWYxOTAxYjQ1MmI=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-12-17T11:19:24Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-12-17T11:19:32Z"}, "message": "Rename bits to bytes for consistency.", "tree": {"sha": "5e14683fecb7f186c3b3a1d23543e740cd0940e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e14683fecb7f186c3b3a1d23543e740cd0940e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b7c68bec27bd4b50882ce32ea27d9f1901b452b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b7c68bec27bd4b50882ce32ea27d9f1901b452b", "html_url": "https://github.com/rust-lang/rust/commit/6b7c68bec27bd4b50882ce32ea27d9f1901b452b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b7c68bec27bd4b50882ce32ea27d9f1901b452b/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fe41ad8d52b4add5a185c1a309b03186dc013fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fe41ad8d52b4add5a185c1a309b03186dc013fb", "html_url": "https://github.com/rust-lang/rust/commit/4fe41ad8d52b4add5a185c1a309b03186dc013fb"}], "stats": {"total": 80, "additions": 40, "deletions": 40}, "files": [{"sha": "2e1ac075294b4a0017efc0876c6a483a0f78033d", "filename": "src/operator.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/6b7c68bec27bd4b50882ce32ea27d9f1901b452b/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b7c68bec27bd4b50882ce32ea27d9f1901b452b/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=6b7c68bec27bd4b50882ce32ea27d9f1901b452b", "patch": "@@ -9,11 +9,11 @@ use value::{\n     PrimVal,\n     PrimValKind,\n     Value,\n-    bits_to_f32,\n-    bits_to_f64,\n-    f32_to_bits,\n-    f64_to_bits,\n-    bits_to_bool,\n+    bytes_to_f32,\n+    bytes_to_f64,\n+    f32_to_bytes,\n+    f64_to_bytes,\n+    bytes_to_bool,\n };\n \n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n@@ -108,23 +108,23 @@ macro_rules! int_shift {\n }\n \n macro_rules! float_arithmetic {\n-    ($from_bits:ident, $to_bits:ident, $float_op:tt, $l:expr, $r:expr) => ({\n-        let l = $from_bits($l);\n-        let r = $from_bits($r);\n-        let bits = $to_bits(l $float_op r);\n-        PrimVal::Bytes(bits)\n+    ($from_bytes:ident, $to_bytes:ident, $float_op:tt, $l:expr, $r:expr) => ({\n+        let l = $from_bytes($l);\n+        let r = $from_bytes($r);\n+        let bytes = $to_bytes(l $float_op r);\n+        PrimVal::Bytes(bytes)\n     })\n }\n \n macro_rules! f32_arithmetic {\n     ($float_op:tt, $l:expr, $r:expr) => (\n-        float_arithmetic!(bits_to_f32, f32_to_bits, $float_op, $l, $r)\n+        float_arithmetic!(bytes_to_f32, f32_to_bytes, $float_op, $l, $r)\n     )\n }\n \n macro_rules! f64_arithmetic {\n     ($float_op:tt, $l:expr, $r:expr) => (\n-        float_arithmetic!(bits_to_f64, f64_to_bits, $float_op, $l, $r)\n+        float_arithmetic!(bytes_to_f64, f64_to_bytes, $float_op, $l, $r)\n     )\n }\n \n@@ -202,19 +202,19 @@ pub fn binary_op<'tcx>(\n     }\n \n     let val = match (bin_op, left_kind) {\n-        (Eq, F32) => PrimVal::from_bool(bits_to_f32(l) == bits_to_f32(r)),\n-        (Ne, F32) => PrimVal::from_bool(bits_to_f32(l) != bits_to_f32(r)),\n-        (Lt, F32) => PrimVal::from_bool(bits_to_f32(l) <  bits_to_f32(r)),\n-        (Le, F32) => PrimVal::from_bool(bits_to_f32(l) <= bits_to_f32(r)),\n-        (Gt, F32) => PrimVal::from_bool(bits_to_f32(l) >  bits_to_f32(r)),\n-        (Ge, F32) => PrimVal::from_bool(bits_to_f32(l) >= bits_to_f32(r)),\n-\n-        (Eq, F64) => PrimVal::from_bool(bits_to_f64(l) == bits_to_f64(r)),\n-        (Ne, F64) => PrimVal::from_bool(bits_to_f64(l) != bits_to_f64(r)),\n-        (Lt, F64) => PrimVal::from_bool(bits_to_f64(l) <  bits_to_f64(r)),\n-        (Le, F64) => PrimVal::from_bool(bits_to_f64(l) <= bits_to_f64(r)),\n-        (Gt, F64) => PrimVal::from_bool(bits_to_f64(l) >  bits_to_f64(r)),\n-        (Ge, F64) => PrimVal::from_bool(bits_to_f64(l) >= bits_to_f64(r)),\n+        (Eq, F32) => PrimVal::from_bool(bytes_to_f32(l) == bytes_to_f32(r)),\n+        (Ne, F32) => PrimVal::from_bool(bytes_to_f32(l) != bytes_to_f32(r)),\n+        (Lt, F32) => PrimVal::from_bool(bytes_to_f32(l) <  bytes_to_f32(r)),\n+        (Le, F32) => PrimVal::from_bool(bytes_to_f32(l) <= bytes_to_f32(r)),\n+        (Gt, F32) => PrimVal::from_bool(bytes_to_f32(l) >  bytes_to_f32(r)),\n+        (Ge, F32) => PrimVal::from_bool(bytes_to_f32(l) >= bytes_to_f32(r)),\n+\n+        (Eq, F64) => PrimVal::from_bool(bytes_to_f64(l) == bytes_to_f64(r)),\n+        (Ne, F64) => PrimVal::from_bool(bytes_to_f64(l) != bytes_to_f64(r)),\n+        (Lt, F64) => PrimVal::from_bool(bytes_to_f64(l) <  bytes_to_f64(r)),\n+        (Le, F64) => PrimVal::from_bool(bytes_to_f64(l) <= bytes_to_f64(r)),\n+        (Gt, F64) => PrimVal::from_bool(bytes_to_f64(l) >  bytes_to_f64(r)),\n+        (Ge, F64) => PrimVal::from_bool(bytes_to_f64(l) >= bytes_to_f64(r)),\n \n         (Add, F32) => f32_arithmetic!(+, l, r),\n         (Sub, F32) => f32_arithmetic!(-, l, r),\n@@ -278,7 +278,7 @@ pub fn unary_op<'tcx>(\n     let bytes = val.to_bytes()?;\n \n     let result_bytes = match (un_op, val_kind) {\n-        (Not, Bool) => !bits_to_bool(bytes) as u64,\n+        (Not, Bool) => !bytes_to_bool(bytes) as u64,\n \n         (Not, U8)  => !(bytes as u8) as u64,\n         (Not, U16) => !(bytes as u16) as u64,\n@@ -295,8 +295,8 @@ pub fn unary_op<'tcx>(\n         (Neg, I32) => -(bytes as i32) as u64,\n         (Neg, I64) => -(bytes as i64) as u64,\n \n-        (Neg, F32) => f32_to_bits(-bits_to_f32(bytes)),\n-        (Neg, F64) => f64_to_bits(-bits_to_f64(bytes)),\n+        (Neg, F32) => f32_to_bytes(-bytes_to_f32(bytes)),\n+        (Neg, F64) => f64_to_bytes(-bytes_to_f64(bytes)),\n \n         _ => {\n             let msg = format!(\"unimplemented unary op: {:?}, {:?}\", un_op, val);"}, {"sha": "ddffdd01ee8cd493e87cec68a8a8799564c7938f", "filename": "src/value.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6b7c68bec27bd4b50882ce32ea27d9f1901b452b/src%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b7c68bec27bd4b50882ce32ea27d9f1901b452b/src%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue.rs?ref=6b7c68bec27bd4b50882ce32ea27d9f1901b452b", "patch": "@@ -6,25 +6,25 @@ use std::mem::transmute;\n use error::{EvalError, EvalResult};\n use memory::{Memory, Pointer};\n \n-pub(super) fn bits_to_f32(bits: u64) -> f32 {\n-    unsafe { transmute::<u32, f32>(bits as u32) }\n+pub(super) fn bytes_to_f32(bytes: u64) -> f32 {\n+    unsafe { transmute::<u32, f32>(bytes as u32) }\n }\n \n-pub(super) fn bits_to_f64(bits: u64) -> f64 {\n-    unsafe { transmute::<u64, f64>(bits) }\n+pub(super) fn bytes_to_f64(bytes: u64) -> f64 {\n+    unsafe { transmute::<u64, f64>(bytes) }\n }\n \n-pub(super) fn f32_to_bits(f: f32) -> u64 {\n+pub(super) fn f32_to_bytes(f: f32) -> u64 {\n     unsafe { transmute::<f32, u32>(f) as u64 }\n }\n \n-pub(super) fn f64_to_bits(f: f64) -> u64 {\n+pub(super) fn f64_to_bytes(f: f64) -> u64 {\n     unsafe { transmute::<f64, u64>(f) }\n }\n \n-pub(super) fn bits_to_bool(n: u64) -> bool {\n+pub(super) fn bytes_to_bool(n: u64) -> bool {\n     // FIXME(solson): Can we reach here due to user error?\n-    debug_assert!(n == 0 || n == 1, \"bits interpreted as bool were {}\", n);\n+    debug_assert!(n == 0 || n == 1, \"bytes interpreted as bool were {}\", n);\n     n & 1 == 1\n }\n \n@@ -126,11 +126,11 @@ impl<'tcx> PrimVal {\n     }\n \n     pub fn from_f32(f: f32) -> Self {\n-        PrimVal::Bytes(f32_to_bits(f))\n+        PrimVal::Bytes(f32_to_bytes(f))\n     }\n \n     pub fn from_f64(f: f64) -> Self {\n-        PrimVal::Bytes(f64_to_bits(f))\n+        PrimVal::Bytes(f64_to_bytes(f))\n     }\n \n     pub fn from_bool(b: bool) -> Self {\n@@ -166,11 +166,11 @@ impl<'tcx> PrimVal {\n     }\n \n     pub fn to_f32(self) -> EvalResult<'tcx, f32> {\n-        self.to_bytes().map(bits_to_f32)\n+        self.to_bytes().map(bytes_to_f32)\n     }\n \n     pub fn to_f64(self) -> EvalResult<'tcx, f64> {\n-        self.to_bytes().map(bits_to_f64)\n+        self.to_bytes().map(bytes_to_f64)\n     }\n \n     pub fn to_bool(self) -> EvalResult<'tcx, bool> {"}]}