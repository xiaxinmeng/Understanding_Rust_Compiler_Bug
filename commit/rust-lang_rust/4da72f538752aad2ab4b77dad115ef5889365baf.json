{"sha": "4da72f538752aad2ab4b77dad115ef5889365baf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkYTcyZjUzODc1MmFhZDJhYjRiNzdkYWQxMTVlZjU4ODkzNjViYWY=", "commit": {"author": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2020-06-28T21:33:15Z"}, "committer": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2020-07-30T11:59:01Z"}, "message": "Add additional clashing_extern_decl cases.", "tree": {"sha": "bdb7f26f5315e4f813f1907b4028409bb22ca61f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdb7f26f5315e4f813f1907b4028409bb22ca61f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4da72f538752aad2ab4b77dad115ef5889365baf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4da72f538752aad2ab4b77dad115ef5889365baf", "html_url": "https://github.com/rust-lang/rust/commit/4da72f538752aad2ab4b77dad115ef5889365baf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4da72f538752aad2ab4b77dad115ef5889365baf/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1799d31847294d6e3816c17679247a5c206e809a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1799d31847294d6e3816c17679247a5c206e809a", "html_url": "https://github.com/rust-lang/rust/commit/1799d31847294d6e3816c17679247a5c206e809a"}], "stats": {"total": 186, "additions": 124, "deletions": 62}, "files": [{"sha": "c2a8cadc6b5f8615e726842be5f35821b4a9e42c", "filename": "src/test/ui/lint/auxiliary/external_extern_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4da72f538752aad2ab4b77dad115ef5889365baf/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Fexternal_extern_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da72f538752aad2ab4b77dad115ef5889365baf/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Fexternal_extern_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Fexternal_extern_fn.rs?ref=4da72f538752aad2ab4b77dad115ef5889365baf", "patch": "@@ -1,3 +1,3 @@\n-extern {\n+extern \"C\" {\n     pub fn extern_fn(x: u8);\n }"}, {"sha": "72c5d3da4b0032a12f5a0308806f4d67e42839fb", "filename": "src/test/ui/lint/clashing-extern-fn.rs", "status": "modified", "additions": 110, "deletions": 36, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/4da72f538752aad2ab4b77dad115ef5889365baf/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da72f538752aad2ab4b77dad115ef5889365baf/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs?ref=4da72f538752aad2ab4b77dad115ef5889365baf", "patch": "@@ -3,52 +3,40 @@\n #![crate_type = \"lib\"]\n #![warn(clashing_extern_declarations)]\n \n-extern crate external_extern_fn;\n-\n-extern \"C\" {\n-    fn clash(x: u8);\n-    fn no_clash(x: u8);\n-}\n-\n-fn redeclared_different_signature() {\n-    extern \"C\" {\n-        fn clash(x: u64); //~ WARN `clash` redeclared with a different signature\n+mod redeclared_different_signature {\n+    mod a {\n+        extern \"C\" {\n+            fn clash(x: u8);\n+        }\n     }\n-\n-    unsafe {\n-        clash(123);\n-        no_clash(123);\n+    mod b {\n+        extern \"C\" {\n+            fn clash(x: u64); //~ WARN `clash` redeclared with a different signature\n+        }\n     }\n }\n \n-fn redeclared_same_signature() {\n-    extern \"C\" {\n-        fn no_clash(x: u8);\n+mod redeclared_same_signature {\n+    mod a {\n+        extern \"C\" {\n+            fn no_clash(x: u8);\n+        }\n     }\n-    unsafe {\n-        no_clash(123);\n+    mod b {\n+        extern \"C\" {\n+            fn no_clash(x: u8);\n+        }\n     }\n }\n \n-extern \"C\" {\n-    fn extern_fn(x: u64);\n-}\n-\n-fn extern_clash() {\n+extern crate external_extern_fn;\n+mod extern_no_clash {\n+    // Should not clash with external_extern_fn::extern_fn.\n     extern \"C\" {\n-        fn extern_fn(x: u32); //~ WARN `extern_fn` redeclared with a different signature\n-    }\n-    unsafe {\n-        extern_fn(123);\n+        fn extern_fn(x: u8);\n     }\n }\n \n-fn extern_no_clash() {\n-    unsafe {\n-        external_extern_fn::extern_fn(123);\n-        crate::extern_fn(123);\n-    }\n-}\n extern \"C\" {\n     fn some_other_new_name(x: i16);\n \n@@ -134,9 +122,9 @@ mod banana {\n             weight: u32,\n             length: u16,\n         } // note: distinct type\n-        extern \"C\" {\n           // This should not trigger the lint because two::Banana is structurally equivalent to\n           // one::Banana.\n+        extern \"C\" {\n             fn weigh_banana(count: *const Banana) -> u64;\n         }\n     }\n@@ -180,7 +168,93 @@ mod sameish_members {\n         // always be the case, for every architecture and situation. This is also a really odd\n         // thing to do anyway.\n         extern \"C\" {\n-            fn draw_point(p: Point); //~ WARN `draw_point` redeclared with a different\n+            fn draw_point(p: Point);\n+            //~^ WARN `draw_point` redeclared with a different signature\n+        }\n+    }\n+}\n+\n+mod transparent {\n+    #[repr(transparent)]\n+    struct T(usize);\n+    mod a {\n+        use super::T;\n+        extern \"C\" {\n+            fn transparent() -> T;\n+        }\n+    }\n+\n+    mod b {\n+        extern \"C\" {\n+            // Shouldn't warn here, because repr(transparent) guarantees that T's layout is the\n+            // same as just the usize.\n+            fn transparent() -> usize;\n+        }\n+    }\n+}\n+\n+mod missing_return_type {\n+    mod a {\n+        extern \"C\" {\n+            fn missing_return_type() -> usize;\n+        }\n+    }\n+\n+    mod b {\n+        extern \"C\" {\n+            // This should warn, because we can't assume that the first declaration is the correct\n+            // one -- if this one is the correct one, then calling the usize-returning version\n+            // would allow reads into uninitialised memory.\n+            fn missing_return_type();\n+            //~^ WARN `missing_return_type` redeclared with a different signature\n+        }\n+    }\n+}\n+\n+mod non_zero_and_non_null {\n+    mod a {\n+        extern \"C\" {\n+            fn non_zero_usize() -> core::num::NonZeroUsize;\n+            fn non_null_ptr() -> core::ptr::NonNull<usize>;\n+        }\n+    }\n+    mod b {\n+        extern \"C\" {\n+            // For both of these cases, if there's a clash, you're either gaining an incorrect\n+            // invariant that the value is non-zero, or you're missing out on that invariant. Both\n+            // cases are warning for, from both a caller-convenience and optimisation perspective.\n+            fn non_zero_usize() -> usize;\n+            //~^ WARN `non_zero_usize` redeclared with a different signature\n+            fn non_null_ptr() -> *const usize;\n+            //~^ WARN `non_null_ptr` redeclared with a different signature\n+        }\n+    }\n+}\n+\n+mod null_optimised_enums {\n+    mod a {\n+        extern \"C\" {\n+            fn option_non_zero_usize() -> usize;\n+            fn option_non_zero_isize() -> isize;\n+            fn option_non_null_ptr() -> *const usize;\n+\n+            fn option_non_zero_usize_incorrect() -> usize;\n+            fn option_non_null_ptr_incorrect() -> *const usize;\n+        }\n+    }\n+    mod b {\n+        extern \"C\" {\n+            // This should be allowed, because these conversions are guaranteed to be FFI-safe (see\n+            // #60300)\n+            fn option_non_zero_usize() -> Option<core::num::NonZeroUsize>;\n+            fn option_non_zero_isize() -> Option<core::num::NonZeroIsize>;\n+            fn option_non_null_ptr() -> Option<core::ptr::NonNull<usize>>;\n+\n+            // However, these should be incorrect (note isize instead of usize)\n+            fn option_non_zero_usize_incorrect() -> isize;\n+            //~^ WARN `option_non_zero_usize_incorrect` redeclared with a different signature\n+            fn option_non_null_ptr_incorrect() -> *const isize;\n+            //~^ WARN `option_non_null_ptr_incorrect` redeclared with a different signature\n         }\n     }\n }"}, {"sha": "a2aaaba717370c0fdeb1e4c75d2dc715b72cd145", "filename": "src/test/ui/lint/clashing-extern-fn.stderr", "status": "modified", "additions": 13, "deletions": 25, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4da72f538752aad2ab4b77dad115ef5889365baf/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4da72f538752aad2ab4b77dad115ef5889365baf/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr?ref=4da72f538752aad2ab4b77dad115ef5889365baf", "patch": "@@ -1,11 +1,11 @@\n warning: `clash` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:15:9\n+  --> $DIR/clashing-extern-fn.rs:14:13\n    |\n-LL |     fn clash(x: u8);\n-   |     ---------------- `clash` previously declared here\n+LL |             fn clash(x: u8);\n+   |             ---------------- `clash` previously declared here\n ...\n-LL |         fn clash(x: u64);\n-   |         ^^^^^^^^^^^^^^^^^ this signature doesn't match the previous declaration\n+LL |             fn clash(x: u64);\n+   |             ^^^^^^^^^^^^^^^^^ this signature doesn't match the previous declaration\n    |\n note: the lint level is defined here\n   --> $DIR/clashing-extern-fn.rs:4:9\n@@ -15,20 +15,8 @@ LL | #![warn(clashing_extern_declarations)]\n    = note: expected `unsafe extern \"C\" fn(u8)`\n               found `unsafe extern \"C\" fn(u64)`\n \n-warning: `extern_fn` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:39:9\n-   |\n-LL |     fn extern_fn(x: u64);\n-   |     --------------------- `extern_fn` previously declared here\n-...\n-LL |         fn extern_fn(x: u32);\n-   |         ^^^^^^^^^^^^^^^^^^^^^ this signature doesn't match the previous declaration\n-   |\n-   = note: expected `unsafe extern \"C\" fn(u64)`\n-              found `unsafe extern \"C\" fn(u32)`\n-\n warning: `extern_link_name` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:64:9\n+  --> $DIR/clashing-extern-fn.rs:52:9\n    |\n LL | /     #[link_name = \"extern_link_name\"]\n LL | |     fn some_new_name(x: i16);\n@@ -41,7 +29,7 @@ LL |           fn extern_link_name(x: u32);\n               found `unsafe extern \"C\" fn(u32)`\n \n warning: `some_other_extern_link_name` redeclares `some_other_new_name` with a different signature\n-  --> $DIR/clashing-extern-fn.rs:67:9\n+  --> $DIR/clashing-extern-fn.rs:55:9\n    |\n LL |       fn some_other_new_name(x: i16);\n    |       ------------------------------- `some_other_new_name` previously declared here\n@@ -55,7 +43,7 @@ LL | |         fn some_other_extern_link_name(x: u32);\n               found `unsafe extern \"C\" fn(u32)`\n \n warning: `other_both_names_different` redeclares `link_name_same` with a different signature\n-  --> $DIR/clashing-extern-fn.rs:71:9\n+  --> $DIR/clashing-extern-fn.rs:59:9\n    |\n LL | /     #[link_name = \"link_name_same\"]\n LL | |     fn both_names_different(x: i16);\n@@ -70,7 +58,7 @@ LL | |         fn other_both_names_different(x: u32);\n               found `unsafe extern \"C\" fn(u32)`\n \n warning: `different_mod` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:84:9\n+  --> $DIR/clashing-extern-fn.rs:72:9\n    |\n LL |         fn different_mod(x: u8);\n    |         ------------------------ `different_mod` previously declared here\n@@ -82,7 +70,7 @@ LL |         fn different_mod(x: u64);\n               found `unsafe extern \"C\" fn(u64)`\n \n warning: `variadic_decl` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:94:9\n+  --> $DIR/clashing-extern-fn.rs:82:9\n    |\n LL |     fn variadic_decl(x: u8, ...);\n    |     ----------------------------- `variadic_decl` previously declared here\n@@ -94,7 +82,7 @@ LL |         fn variadic_decl(x: u8);\n               found `unsafe extern \"C\" fn(u8)`\n \n warning: `weigh_banana` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:154:13\n+  --> $DIR/clashing-extern-fn.rs:142:13\n    |\n LL |             fn weigh_banana(count: *const Banana) -> u64;\n    |             --------------------------------------------- `weigh_banana` previously declared here\n@@ -106,7 +94,7 @@ LL |             fn weigh_banana(count: *const Banana) -> u64;\n               found `unsafe extern \"C\" fn(*const banana::three::Banana) -> u64`\n \n warning: `draw_point` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:183:13\n+  --> $DIR/clashing-extern-fn.rs:171:13\n    |\n LL |             fn draw_point(p: Point);\n    |             ------------------------ `draw_point` previously declared here\n@@ -117,5 +105,5 @@ LL |             fn draw_point(p: Point);\n    = note: expected `unsafe extern \"C\" fn(sameish_members::a::Point)`\n               found `unsafe extern \"C\" fn(sameish_members::b::Point)`\n \n-warning: 9 warnings emitted\n+warning: 8 warnings emitted\n "}]}