{"sha": "c0dd1f9f7614d86c15fcccd4e0faabaa52c7c339", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZGQxZjlmNzYxNGQ4NmMxNWZjY2NkNGUwZmFhYmFhNTJjN2MzMzk=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-10-26T10:02:01Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-10-26T10:15:01Z"}, "message": "Fix tests for `map_unwrap_or*`", "tree": {"sha": "22a1941339f355dacd652cf7560bc932dca9b37c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22a1941339f355dacd652cf7560bc932dca9b37c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0dd1f9f7614d86c15fcccd4e0faabaa52c7c339", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0dd1f9f7614d86c15fcccd4e0faabaa52c7c339", "html_url": "https://github.com/rust-lang/rust/commit/c0dd1f9f7614d86c15fcccd4e0faabaa52c7c339", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0dd1f9f7614d86c15fcccd4e0faabaa52c7c339/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2d86b5b809584da55952f4150016fdbaf74e7f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2d86b5b809584da55952f4150016fdbaf74e7f4", "html_url": "https://github.com/rust-lang/rust/commit/e2d86b5b809584da55952f4150016fdbaf74e7f4"}], "stats": {"total": 161, "additions": 95, "deletions": 66}, "files": [{"sha": "87e16f5d09bd75b03786b26e07b6a225510decd9", "filename": "tests/ui/map_unwrap_or.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c0dd1f9f7614d86c15fcccd4e0faabaa52c7c339/tests%2Fui%2Fmap_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0dd1f9f7614d86c15fcccd4e0faabaa52c7c339/tests%2Fui%2Fmap_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unwrap_or.rs?ref=c0dd1f9f7614d86c15fcccd4e0faabaa52c7c339", "patch": "@@ -12,6 +12,10 @@ fn option_methods() {\n     let opt = Some(1);\n \n     // Check for `option.map(_).unwrap_or(_)` use.\n+    // Single line case.\n+    let _ = opt.map(|x| x + 1)\n+        // Should lint even though this call is on a separate line.\n+        .unwrap_or(0);\n     // Multi-line cases.\n     let _ = opt.map(|x| {\n         x + 1\n@@ -53,6 +57,25 @@ fn option_methods() {\n         );\n }\n \n+#[rustfmt::skip]\n+fn result_methods() {\n+    let res: Result<i32, ()> = Ok(1);\n+\n+    // Check for `result.map(_).unwrap_or_else(_)` use.\n+    // multi line cases\n+    let _ = res.map(|x| {\n+        x + 1\n+    }\n+    ).unwrap_or_else(|_e| 0);\n+    let _ = res.map(|x| x + 1)\n+        .unwrap_or_else(|_e| {\n+            0\n+        });\n+    // macro case\n+    let _ = opt_map!(res, |x| x + 1).unwrap_or_else(|_e| 0); // should not lint\n+}\n+\n fn main() {\n     option_methods();\n+    result_methods();\n }"}, {"sha": "96b9d6cc3c14519aed1cb04cdf5d9c941a797deb", "filename": "tests/ui/map_unwrap_or.stderr", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c0dd1f9f7614d86c15fcccd4e0faabaa52c7c339/tests%2Fui%2Fmap_unwrap_or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0dd1f9f7614d86c15fcccd4e0faabaa52c7c339/tests%2Fui%2Fmap_unwrap_or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unwrap_or.stderr?ref=c0dd1f9f7614d86c15fcccd4e0faabaa52c7c339", "patch": "@@ -1,14 +1,28 @@\n error: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead\n   --> $DIR/map_unwrap_or.rs:16:13\n    |\n+LL |       let _ = opt.map(|x| x + 1)\n+   |  _____________^\n+LL | |         // Should lint even though this call is on a separate line.\n+LL | |         .unwrap_or(0);\n+   | |_____________________^\n+   |\n+   = note: `-D clippy::map-unwrap-or` implied by `-D warnings`\n+help: use `map_or(<a>, <f>)` instead\n+   |\n+LL |     let _ = opt.map_or(0, |x| x + 1);\n+   |                 ^^^^^^ ^^          --\n+\n+error: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead\n+  --> $DIR/map_unwrap_or.rs:20:13\n+   |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n LL | |         x + 1\n LL | |     }\n LL | |     ).unwrap_or(0);\n    | |__________________^\n    |\n-   = note: `-D clippy::map-unwrap-or` implied by `-D warnings`\n help: use `map_or(<a>, <f>)` instead\n    |\n LL |     let _ = opt.map_or(0, |x| {\n@@ -18,7 +32,7 @@ LL |     );\n    |\n \n error: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead\n-  --> $DIR/map_unwrap_or.rs:20:13\n+  --> $DIR/map_unwrap_or.rs:24:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -35,7 +49,7 @@ LL |         }, |x| x + 1);\n    |\n \n error: called `map(<f>).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(<f>)` instead\n-  --> $DIR/map_unwrap_or.rs:25:13\n+  --> $DIR/map_unwrap_or.rs:29:13\n    |\n LL |     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -46,7 +60,7 @@ LL |     let _ = opt.and_then(|x| Some(x + 1));\n    |                 ^^^^^^^^                --\n \n error: called `map(<f>).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(<f>)` instead\n-  --> $DIR/map_unwrap_or.rs:27:13\n+  --> $DIR/map_unwrap_or.rs:31:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -64,7 +78,7 @@ LL |     );\n    |\n \n error: called `map(<f>).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(<f>)` instead\n-  --> $DIR/map_unwrap_or.rs:31:13\n+  --> $DIR/map_unwrap_or.rs:35:13\n    |\n LL |       let _ = opt\n    |  _____________^\n@@ -78,7 +92,7 @@ LL |         .and_then(|x| Some(x + 1));\n    |          ^^^^^^^^                --\n \n error: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead\n-  --> $DIR/map_unwrap_or.rs:42:13\n+  --> $DIR/map_unwrap_or.rs:46:13\n    |\n LL |     let _ = Some(\"prefix\").map(|p| format!(\"{}.\", p)).unwrap_or(id);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -89,7 +103,7 @@ LL |     let _ = Some(\"prefix\").map_or(id, |p| format!(\"{}.\", p));\n    |                            ^^^^^^ ^^^                      --\n \n error: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead\n-  --> $DIR/map_unwrap_or.rs:46:13\n+  --> $DIR/map_unwrap_or.rs:50:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -99,7 +113,7 @@ LL | |     ).unwrap_or_else(|| 0);\n    | |__________________________^\n \n error: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead\n-  --> $DIR/map_unwrap_or.rs:50:13\n+  --> $DIR/map_unwrap_or.rs:54:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -108,5 +122,25 @@ LL | |             0\n LL | |         );\n    | |_________^\n \n-error: aborting due to 8 previous errors\n+error: called `map(<f>).unwrap_or_else(<g>)` on a `Result` value. This can be done more directly by calling `.map_or_else(<g>, <f>)` instead\n+  --> $DIR/map_unwrap_or.rs:66:13\n+   |\n+LL |       let _ = res.map(|x| {\n+   |  _____________^\n+LL | |         x + 1\n+LL | |     }\n+LL | |     ).unwrap_or_else(|_e| 0);\n+   | |____________________________^\n+\n+error: called `map(<f>).unwrap_or_else(<g>)` on a `Result` value. This can be done more directly by calling `.map_or_else(<g>, <f>)` instead\n+  --> $DIR/map_unwrap_or.rs:70:13\n+   |\n+LL |       let _ = res.map(|x| x + 1)\n+   |  _____________^\n+LL | |         .unwrap_or_else(|_e| {\n+LL | |             0\n+LL | |         });\n+   | |__________^\n+\n+error: aborting due to 11 previous errors\n "}, {"sha": "2cb76d70684d10d01d1870ee514540e849298642", "filename": "tests/ui/map_unwrap_or_else_fixable.stderr", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e2d86b5b809584da55952f4150016fdbaf74e7f4/tests%2Fui%2Fmap_unwrap_or_else_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2d86b5b809584da55952f4150016fdbaf74e7f4/tests%2Fui%2Fmap_unwrap_or_else_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unwrap_or_else_fixable.stderr?ref=e2d86b5b809584da55952f4150016fdbaf74e7f4", "patch": "@@ -1,40 +0,0 @@\n-error: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead\n-  --> $DIR/map_unwrap_or_else_fixable.rs:17:13\n-   |\n-LL |       let _ = opt.map(|x| x + 1)\n-   |  _____________^\n-LL | |         // Should lint even though this call is on a separate line.\n-LL | |         .unwrap_or_else(|| 0);\n-   | |_____________________________^ help: try this: `opt.map_or_else(|| 0, |x| x + 1)`\n-   |\n-   = note: `-D clippy::map-unwrap-or` implied by `-D warnings`\n-\n-error: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead\n-  --> $DIR/map_unwrap_or_else_fixable.rs:27:13\n-   |\n-LL |       let _ = opt.map(|x| x + 1)\n-   |  _____________^\n-LL | |         // Should lint even though this call is on a separate line.\n-LL | |         .unwrap_or_else(|| 0);\n-   | |_____________________________^ help: try this: `opt.map_or_else(|| 0, |x| x + 1)`\n-\n-error: called `map(<f>).unwrap_or_else(<g>)` on a `Result` value. This can be done more directly by calling `.map_or_else(<g>, <f>)` instead\n-  --> $DIR/map_unwrap_or_else_fixable.rs:52:13\n-   |\n-LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|_e| 0); // should lint even though this call is on a separate line\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `res.map_or_else(|_e| 0, |x| x + 1)`\n-\n-error: called `map(<f>).unwrap_or_else(<g>)` on a `Result` value. This can be done more directly by calling `.map_or_else(<g>, <f>)` instead\n-  --> $DIR/map_unwrap_or_else_fixable.rs:54:13\n-   |\n-LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|_e| 0);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `res.map_or_else(|_e| 0, |x| x + 1)`\n-\n-error: called `map(<f>).unwrap_or_else(<g>)` on a `Result` value. This can be done more directly by calling `.map_or_else(<g>, <f>)` instead\n-  --> $DIR/map_unwrap_or_else_fixable.rs:55:13\n-   |\n-LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|_e| 0);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `res.map_or_else(|_e| 0, |x| x + 1)`\n-\n-error: aborting due to 5 previous errors\n-"}, {"sha": "bd5b4f7165a4e65396224e927a5b10b3e99bb2ca", "filename": "tests/ui/map_unwrap_or_fixable.fixed", "status": "renamed", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c0dd1f9f7614d86c15fcccd4e0faabaa52c7c339/tests%2Fui%2Fmap_unwrap_or_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c0dd1f9f7614d86c15fcccd4e0faabaa52c7c339/tests%2Fui%2Fmap_unwrap_or_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unwrap_or_fixable.fixed?ref=c0dd1f9f7614d86c15fcccd4e0faabaa52c7c339", "patch": "@@ -20,10 +20,6 @@ fn option_methods() {\n     // Should not lint.\n     let _ = opt_map!(opt, |x| x + 1).unwrap_or_else(|| 0);\n \n-    // Check for `option.map(_).unwrap_or_else(_)` use.\n-    // single line case\n-    let _ = opt.map_or_else(|| 0, |x| x + 1);\n-\n     // Issue #4144\n     {\n         let mut frequencies = HashMap::new();\n@@ -40,15 +36,14 @@ fn option_methods() {\n     }\n }\n \n+#[rustfmt::skip]\n fn result_methods() {\n     let res: Result<i32, ()> = Ok(1);\n \n     // Check for `result.map(_).unwrap_or_else(_)` use.\n     // single line case\n-    let _ = res.map_or_else(|_e| 0, |x| x + 1); // should lint even though this call is on a separate line\n-                                                       // multi line cases\n-    let _ = res.map_or_else(|_e| 0, |x| x + 1);\n     let _ = res.map_or_else(|_e| 0, |x| x + 1);\n+\n     // macro case\n     let _ = opt_map!(res, |x| x + 1).unwrap_or_else(|_e| 0); // should not lint\n }", "previous_filename": "tests/ui/map_unwrap_or_else_fixable.fixed"}, {"sha": "0b892caf20e82a41d6c9c4f245af09ff647da0d2", "filename": "tests/ui/map_unwrap_or_fixable.rs", "status": "renamed", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c0dd1f9f7614d86c15fcccd4e0faabaa52c7c339/tests%2Fui%2Fmap_unwrap_or_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0dd1f9f7614d86c15fcccd4e0faabaa52c7c339/tests%2Fui%2Fmap_unwrap_or_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unwrap_or_fixable.rs?ref=c0dd1f9f7614d86c15fcccd4e0faabaa52c7c339", "patch": "@@ -22,12 +22,6 @@ fn option_methods() {\n     // Should not lint.\n     let _ = opt_map!(opt, |x| x + 1).unwrap_or_else(|| 0);\n \n-    // Check for `option.map(_).unwrap_or_else(_)` use.\n-    // single line case\n-    let _ = opt.map(|x| x + 1)\n-        // Should lint even though this call is on a separate line.\n-        .unwrap_or_else(|| 0);\n-\n     // Issue #4144\n     {\n         let mut frequencies = HashMap::new();\n@@ -44,15 +38,16 @@ fn option_methods() {\n     }\n }\n \n+#[rustfmt::skip]\n fn result_methods() {\n     let res: Result<i32, ()> = Ok(1);\n \n     // Check for `result.map(_).unwrap_or_else(_)` use.\n     // single line case\n-    let _ = res.map(|x| x + 1).unwrap_or_else(|_e| 0); // should lint even though this call is on a separate line\n-                                                       // multi line cases\n-    let _ = res.map(|x| x + 1).unwrap_or_else(|_e| 0);\n-    let _ = res.map(|x| x + 1).unwrap_or_else(|_e| 0);\n+    let _ = res.map(|x| x + 1)\n+        // should lint even though this call is on a separate line\n+        .unwrap_or_else(|_e| 0);\n+\n     // macro case\n     let _ = opt_map!(res, |x| x + 1).unwrap_or_else(|_e| 0); // should not lint\n }", "previous_filename": "tests/ui/map_unwrap_or_else_fixable.rs"}, {"sha": "1837bc2ca3b8b393526be48f827c18029dca064c", "filename": "tests/ui/map_unwrap_or_fixable.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c0dd1f9f7614d86c15fcccd4e0faabaa52c7c339/tests%2Fui%2Fmap_unwrap_or_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0dd1f9f7614d86c15fcccd4e0faabaa52c7c339/tests%2Fui%2Fmap_unwrap_or_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unwrap_or_fixable.stderr?ref=c0dd1f9f7614d86c15fcccd4e0faabaa52c7c339", "patch": "@@ -0,0 +1,22 @@\n+error: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead\n+  --> $DIR/map_unwrap_or_fixable.rs:17:13\n+   |\n+LL |       let _ = opt.map(|x| x + 1)\n+   |  _____________^\n+LL | |         // Should lint even though this call is on a separate line.\n+LL | |         .unwrap_or_else(|| 0);\n+   | |_____________________________^ help: try this: `opt.map_or_else(|| 0, |x| x + 1)`\n+   |\n+   = note: `-D clippy::map-unwrap-or` implied by `-D warnings`\n+\n+error: called `map(<f>).unwrap_or_else(<g>)` on a `Result` value. This can be done more directly by calling `.map_or_else(<g>, <f>)` instead\n+  --> $DIR/map_unwrap_or_fixable.rs:47:13\n+   |\n+LL |       let _ = res.map(|x| x + 1)\n+   |  _____________^\n+LL | |         // should lint even though this call is on a separate line\n+LL | |         .unwrap_or_else(|_e| 0);\n+   | |_______________________________^ help: try this: `res.map_or_else(|_e| 0, |x| x + 1)`\n+\n+error: aborting due to 2 previous errors\n+"}]}