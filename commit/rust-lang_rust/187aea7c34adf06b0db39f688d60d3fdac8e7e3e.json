{"sha": "187aea7c34adf06b0db39f688d60d3fdac8e7e3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4N2FlYTdjMzRhZGYwNmIwZGIzOWY2ODhkNjBkM2ZkYWM4ZTdlM2U=", "commit": {"author": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2020-06-10T02:10:55Z"}, "committer": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2020-06-10T02:10:55Z"}, "message": "Impl Default for ranges", "tree": {"sha": "f922c68adcf36c28cc2e613afa6ad120c37e09ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f922c68adcf36c28cc2e613afa6ad120c37e09ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/187aea7c34adf06b0db39f688d60d3fdac8e7e3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/187aea7c34adf06b0db39f688d60d3fdac8e7e3e", "html_url": "https://github.com/rust-lang/rust/commit/187aea7c34adf06b0db39f688d60d3fdac8e7e3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/187aea7c34adf06b0db39f688d60d3fdac8e7e3e/comments", "author": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "committer": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "283522400b5c13dfdf2b7e608e63a70ee8e3d7af", "url": "https://api.github.com/repos/rust-lang/rust/commits/283522400b5c13dfdf2b7e608e63a70ee8e3d7af", "html_url": "https://github.com/rust-lang/rust/commit/283522400b5c13dfdf2b7e608e63a70ee8e3d7af"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "7422e5d720b4cf171d84300c4bbe915384ac0cf2", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/187aea7c34adf06b0db39f688d60d3fdac8e7e3e/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/187aea7c34adf06b0db39f688d60d3fdac8e7e3e/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=187aea7c34adf06b0db39f688d60d3fdac8e7e3e", "patch": "@@ -39,7 +39,7 @@ use crate::hash::Hash;\n /// [`Iterator`]: ../iter/trait.IntoIterator.html\n /// [slicing index]: ../slice/trait.SliceIndex.html\n #[doc(alias = \"..\")]\n-#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, Default, PartialEq, Eq, Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RangeFull;\n \n@@ -71,7 +71,7 @@ impl fmt::Debug for RangeFull {\n /// assert_eq!(arr[1..=3], [  1,2,3  ]);\n /// ```\n #[doc(alias = \"..\")]\n-#[derive(Clone, PartialEq, Eq, Hash)] // not Copy -- see #27186\n+#[derive(Clone, Default, PartialEq, Eq, Hash)] // not Copy -- see #27186\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Range<Idx> {\n     /// The lower bound of the range (inclusive).\n@@ -179,7 +179,7 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n ///\n /// [`Iterator`]: ../iter/trait.IntoIterator.html\n #[doc(alias = \"..\")]\n-#[derive(Clone, PartialEq, Eq, Hash)] // not Copy -- see #27186\n+#[derive(Clone, Default, PartialEq, Eq, Hash)] // not Copy -- see #27186\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RangeFrom<Idx> {\n     /// The lower bound of the range (inclusive).\n@@ -261,7 +261,7 @@ impl<Idx: PartialOrd<Idx>> RangeFrom<Idx> {\n /// [`Iterator`]: ../iter/trait.IntoIterator.html\n /// [slicing index]: ../slice/trait.SliceIndex.html\n #[doc(alias = \"..\")]\n-#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, Default, PartialEq, Eq, Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RangeTo<Idx> {\n     /// The upper bound of the range (exclusive).\n@@ -329,7 +329,7 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n /// assert_eq!(arr[1..=3], [  1,2,3  ]);  // RangeInclusive\n /// ```\n #[doc(alias = \"..=\")]\n-#[derive(Clone, PartialEq, Eq, Hash)] // not Copy -- see #27186\n+#[derive(Clone, Default, PartialEq, Eq, Hash)] // not Copy -- see #27186\n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n pub struct RangeInclusive<Idx> {\n     // Note that the fields here are not public to allow changing the\n@@ -556,7 +556,7 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n /// [`Iterator`]: ../iter/trait.IntoIterator.html\n /// [slicing index]: ../slice/trait.SliceIndex.html\n #[doc(alias = \"..=\")]\n-#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, Default, PartialEq, Eq, Hash)]\n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n pub struct RangeToInclusive<Idx> {\n     /// The upper bound of the range (inclusive)"}]}