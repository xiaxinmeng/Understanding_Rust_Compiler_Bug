{"sha": "947536fca06e6dc6c3a3dd4ff1f66fc5080e9cbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NzUzNmZjYTA2ZTZkYzZjM2EzZGQ0ZmYxZjY2ZmM1MDgwZTljYmI=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2020-09-07T15:43:48Z"}, "committer": {"name": "Christiaan", "email": "christiaan@dirkx.email", "date": "2020-09-23T19:33:39Z"}, "message": "Make delegation methods of `std::net::IpAddr` unstable const\n\nMake the following methods of `std::net::IpAddr` unstable const under the `const_ip` feature:\n- `is_unspecified`\n- `is_loopback`\n- `is_global`\n- `is_multicast`\n\nAlso adds a test for these methods in a const context.\n\nPossible because these methods delegate to the inner `Ipv4Addr` or `Ipv6Addr`, which were made const, and the recent stabilization of const control flow.\n\nPart of #76205", "tree": {"sha": "8321a3515bc1a161482d7f11bed659b01f49c085", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8321a3515bc1a161482d7f11bed659b01f49c085"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/947536fca06e6dc6c3a3dd4ff1f66fc5080e9cbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/947536fca06e6dc6c3a3dd4ff1f66fc5080e9cbb", "html_url": "https://github.com/rust-lang/rust/commit/947536fca06e6dc6c3a3dd4ff1f66fc5080e9cbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/947536fca06e6dc6c3a3dd4ff1f66fc5080e9cbb/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6008fac97f81a3fc51668b0c7fa0e2e6f2a599b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6008fac97f81a3fc51668b0c7fa0e2e6f2a599b", "html_url": "https://github.com/rust-lang/rust/commit/a6008fac97f81a3fc51668b0c7fa0e2e6f2a599b"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "ac0075ad129c5778e0fe27ace2057edfac1366f1", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/947536fca06e6dc6c3a3dd4ff1f66fc5080e9cbb/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947536fca06e6dc6c3a3dd4ff1f66fc5080e9cbb/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=947536fca06e6dc6c3a3dd4ff1f66fc5080e9cbb", "patch": "@@ -238,6 +238,7 @@\n #![feature(const_cstr_unchecked)]\n #![feature(const_fn_transmute)]\n #![feature(const_fn)]\n+#![feature(const_ip)]\n #![feature(const_ipv6)]\n #![feature(const_raw_ptr_deref)]\n #![feature(const_ipv4)]"}, {"sha": "f01a7b72a655959da76a24b202535e0ad63fee37", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/947536fca06e6dc6c3a3dd4ff1f66fc5080e9cbb/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947536fca06e6dc6c3a3dd4ff1f66fc5080e9cbb/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=947536fca06e6dc6c3a3dd4ff1f66fc5080e9cbb", "patch": "@@ -148,8 +148,9 @@ impl IpAddr {\n     /// assert_eq!(IpAddr::V4(Ipv4Addr::new(0, 0, 0, 0)).is_unspecified(), true);\n     /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0)).is_unspecified(), true);\n     /// ```\n+    #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n-    pub fn is_unspecified(&self) -> bool {\n+    pub const fn is_unspecified(&self) -> bool {\n         match self {\n             IpAddr::V4(ip) => ip.is_unspecified(),\n             IpAddr::V6(ip) => ip.is_unspecified(),\n@@ -169,8 +170,9 @@ impl IpAddr {\n     /// assert_eq!(IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)).is_loopback(), true);\n     /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0x1)).is_loopback(), true);\n     /// ```\n+    #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n-    pub fn is_loopback(&self) -> bool {\n+    pub const fn is_loopback(&self) -> bool {\n         match self {\n             IpAddr::V4(ip) => ip.is_loopback(),\n             IpAddr::V6(ip) => ip.is_loopback(),\n@@ -192,7 +194,8 @@ impl IpAddr {\n     /// assert_eq!(IpAddr::V4(Ipv4Addr::new(80, 9, 12, 3)).is_global(), true);\n     /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0, 0, 0x1c9, 0, 0, 0xafc8, 0, 0x1)).is_global(), true);\n     /// ```\n-    pub fn is_global(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n+    pub const fn is_global(&self) -> bool {\n         match self {\n             IpAddr::V4(ip) => ip.is_global(),\n             IpAddr::V6(ip) => ip.is_global(),\n@@ -212,8 +215,9 @@ impl IpAddr {\n     /// assert_eq!(IpAddr::V4(Ipv4Addr::new(224, 254, 0, 0)).is_multicast(), true);\n     /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0xff00, 0, 0, 0, 0, 0, 0, 0)).is_multicast(), true);\n     /// ```\n+    #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n-    pub fn is_multicast(&self) -> bool {\n+    pub const fn is_multicast(&self) -> bool {\n         match self {\n             IpAddr::V4(ip) => ip.is_multicast(),\n             IpAddr::V6(ip) => ip.is_multicast(),\n@@ -238,7 +242,8 @@ impl IpAddr {\n     ///     true\n     /// );\n     /// ```\n-    pub fn is_documentation(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n+    pub const fn is_documentation(&self) -> bool {\n         match self {\n             IpAddr::V4(ip) => ip.is_documentation(),\n             IpAddr::V6(ip) => ip.is_documentation(),"}, {"sha": "d9fbdd1b5e7945732835493c49b63a674788963d", "filename": "library/std/src/net/ip/tests.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/947536fca06e6dc6c3a3dd4ff1f66fc5080e9cbb/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947536fca06e6dc6c3a3dd4ff1f66fc5080e9cbb/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs?ref=947536fca06e6dc6c3a3dd4ff1f66fc5080e9cbb", "patch": "@@ -918,3 +918,22 @@ fn ipv6_const() {\n     const IP_V4: Option<Ipv4Addr> = IP_ADDRESS.to_ipv4();\n     assert_eq!(IP_V4.unwrap(), Ipv4Addr::new(0, 0, 0, 1));\n }\n+\n+#[test]\n+fn ip_const() {\n+    // test that the methods of `IpAddr` are usable in a const context\n+\n+    const IP_ADDRESS: IpAddr = IpAddr::V4(Ipv4Addr::LOCALHOST);\n+\n+    const IS_UNSPECIFIED: bool = IP_ADDRESS.is_unspecified();\n+    assert!(!IS_UNSPECIFIED);\n+\n+    const IS_LOOPBACK: bool = IP_ADDRESS.is_loopback();\n+    assert!(IS_LOOPBACK);\n+\n+    const IS_GLOBAL: bool = IP_ADDRESS.is_global();\n+    assert!(!IS_GLOBAL);\n+\n+    const IS_MULTICAST: bool = IP_ADDRESS.is_multicast();\n+    assert!(!IS_MULTICAST);\n+}"}]}