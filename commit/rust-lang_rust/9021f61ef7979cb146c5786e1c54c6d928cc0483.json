{"sha": "9021f61ef7979cb146c5786e1c54c6d928cc0483", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMjFmNjFlZjc5NzljYjE0NmM1Nzg2ZTFjNTRjNmQ5MjhjYzA0ODM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-16T04:04:52Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-16T04:04:52Z"}, "message": "std: Second pass stabilization of `default`\n\nThis commit performs a second pass stabilization of the `std::default` module.\nThe module was already marked `#[stable]`, and the inheritance of `#[stable]`\nwas removed since this attribute was applied. This commit adds the `#[stable]`\nattribute to the trait definition and one method name, along with all\nimplementations found in the standard distribution.", "tree": {"sha": "27ac6ed7de9a386a692e20dbf84e8aba722e4e9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27ac6ed7de9a386a692e20dbf84e8aba722e4e9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9021f61ef7979cb146c5786e1c54c6d928cc0483", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9021f61ef7979cb146c5786e1c54c6d928cc0483", "html_url": "https://github.com/rust-lang/rust/commit/9021f61ef7979cb146c5786e1c54c6d928cc0483", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9021f61ef7979cb146c5786e1c54c6d928cc0483/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23bae856b7f3a037caffbf6af6f376a7d48058cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/23bae856b7f3a037caffbf6af6f376a7d48058cd", "html_url": "https://github.com/rust-lang/rust/commit/23bae856b7f3a037caffbf6af6f376a7d48058cd"}], "stats": {"total": 60, "additions": 57, "deletions": 3}, "files": [{"sha": "876f335406fa224daea2f1e8341d3176f9bb8c5c", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=9021f61ef7979cb146c5786e1c54c6d928cc0483", "patch": "@@ -316,7 +316,9 @@ impl<T: fmt::Show> fmt::Show for Arc<T> {\n     }\n }\n \n+#[stable]\n impl<T: Default + Sync + Send> Default for Arc<T> {\n+    #[stable]\n     fn default() -> Arc<T> { Arc::new(Default::default()) }\n }\n "}, {"sha": "8fb441c374fdde2502410a8eba22a5e8fc30133c", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=9021f61ef7979cb146c5786e1c54c6d928cc0483", "patch": "@@ -44,11 +44,15 @@ pub static HEAP: () = ();\n #[unstable = \"custom allocators will add an additional type parameter (with default)\"]\n pub struct Box<T>(*mut T);\n \n+#[stable]\n impl<T: Default> Default for Box<T> {\n+    #[stable]\n     fn default() -> Box<T> { box Default::default() }\n }\n \n+#[stable]\n impl<T> Default for Box<[T]> {\n+    #[stable]\n     fn default() -> Box<[T]> { box [] }\n }\n "}, {"sha": "636bf48e876e153289f60df0fd3f69f075e98131", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=9021f61ef7979cb146c5786e1c54c6d928cc0483", "patch": "@@ -447,6 +447,7 @@ impl<T: Default> Default for Rc<T> {\n     /// let x: Rc<int> = Default::default();\n     /// ```\n     #[inline]\n+    #[stable]\n     fn default() -> Rc<T> {\n         Rc::new(Default::default())\n     }"}, {"sha": "9421159269896200fe4c706fa08618c3cd1ddf5d", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=9021f61ef7979cb146c5786e1c54c6d928cc0483", "patch": "@@ -172,8 +172,10 @@ pub struct BinaryHeap<T> {\n     data: Vec<T>,\n }\n \n+#[stable]\n impl<T: Ord> Default for BinaryHeap<T> {\n     #[inline]\n+    #[stable]\n     fn default() -> BinaryHeap<T> { BinaryHeap::new() }\n }\n "}, {"sha": "5d8d1084169e71ffab10e577ac06a550654bd138", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=9021f61ef7979cb146c5786e1c54c6d928cc0483", "patch": "@@ -824,8 +824,10 @@ pub fn from_fn<F>(len: uint, mut f: F) -> Bitv where F: FnMut(uint) -> bool {\n     bitv\n }\n \n+#[stable]\n impl Default for Bitv {\n     #[inline]\n+    #[stable]\n     fn default() -> Bitv { Bitv::new() }\n }\n "}, {"sha": "dff2c070b57abdb648451c04bb1e481037c9760b", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=9021f61ef7979cb146c5786e1c54c6d928cc0483", "patch": "@@ -836,7 +836,9 @@ impl<S: Writer, K: Hash<S>, V: Hash<S>> Hash<S> for BTreeMap<K, V> {\n     }\n }\n \n+#[stable]\n impl<K: Ord, V> Default for BTreeMap<K, V> {\n+    #[stable]\n     fn default() -> BTreeMap<K, V> {\n         BTreeMap::new()\n     }"}, {"sha": "172d7ea02eedd7d3aa5900df569885425576f868", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=9021f61ef7979cb146c5786e1c54c6d928cc0483", "patch": "@@ -436,7 +436,9 @@ impl<T: Ord> Extend<T> for BTreeSet<T> {\n     }\n }\n \n+#[stable]\n impl<T: Ord> Default for BTreeSet<T> {\n+    #[stable]\n     fn default() -> BTreeSet<T> {\n         BTreeSet::new()\n     }"}, {"sha": "bc4bd64092a7fd200dd3cee2887c70b21172eee4", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=9021f61ef7979cb146c5786e1c54c6d928cc0483", "patch": "@@ -192,8 +192,10 @@ impl<T> DList<T> {\n     }\n }\n \n+#[stable]\n impl<T> Default for DList<T> {\n     #[inline]\n+    #[stable]\n     fn default() -> DList<T> { DList::new() }\n }\n "}, {"sha": "60042b5ebd82b5059eee08e21c4222528275c711", "filename": "src/libcollections/hash/sip.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcollections%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcollections%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhash%2Fsip.rs?ref=9021f61ef7979cb146c5786e1c54c6d928cc0483", "patch": "@@ -204,8 +204,10 @@ impl Clone for SipState {\n     }\n }\n \n+#[stable]\n impl Default for SipState {\n     #[inline]\n+    #[stable]\n     fn default() -> SipState {\n         SipState::new()\n     }"}, {"sha": "5a29d7c085ea5ce6011570a28a94ba833bf31dd7", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=9021f61ef7979cb146c5786e1c54c6d928cc0483", "patch": "@@ -68,7 +68,9 @@ impl<T> Drop for RingBuf<T> {\n     }\n }\n \n+#[stable]\n impl<T> Default for RingBuf<T> {\n+    #[stable]\n     #[inline]\n     fn default() -> RingBuf<T> { RingBuf::new() }\n }"}, {"sha": "505b6367d883bdc74c071f7e337886f444d3eb1f", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=9021f61ef7979cb146c5786e1c54c6d928cc0483", "patch": "@@ -826,6 +826,7 @@ impl StrAllocating for String {\n \n #[stable]\n impl Default for String {\n+    #[stable]\n     fn default() -> String {\n         String::new()\n     }"}, {"sha": "2b14f9569b0cf216eb9b05487b19d5f7d6c48fc4", "filename": "src/libcollections/tree/map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcollections%2Ftree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcollections%2Ftree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftree%2Fmap.rs?ref=9021f61ef7979cb146c5786e1c54c6d928cc0483", "patch": "@@ -185,8 +185,10 @@ impl<K: Ord + Show, V: Show> Show for TreeMap<K, V> {\n     }\n }\n \n+#[stable]\n impl<K: Ord, V> Default for TreeMap<K,V> {\n     #[inline]\n+    #[stable]\n     fn default() -> TreeMap<K, V> { TreeMap::new() }\n }\n "}, {"sha": "c3aebc2736c960d44eb3c96e1f529f11052ce7f3", "filename": "src/libcollections/tree/set.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcollections%2Ftree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcollections%2Ftree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftree%2Fset.rs?ref=9021f61ef7979cb146c5786e1c54c6d928cc0483", "patch": "@@ -134,8 +134,10 @@ impl<T: Ord + Show> Show for TreeSet<T> {\n     }\n }\n \n+#[stable]\n impl<T: Ord> Default for TreeSet<T> {\n     #[inline]\n+    #[stable]\n     fn default() -> TreeSet<T> { TreeSet::new() }\n }\n "}, {"sha": "67c5407eb6e5b871d01d34832f20a0342619c123", "filename": "src/libcollections/trie/map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcollections%2Ftrie%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcollections%2Ftrie%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie%2Fmap.rs?ref=9021f61ef7979cb146c5786e1c54c6d928cc0483", "patch": "@@ -150,8 +150,10 @@ impl<T: Show> Show for TrieMap<T> {\n     }\n }\n \n+#[stable]\n impl<T> Default for TrieMap<T> {\n     #[inline]\n+    #[stable]\n     fn default() -> TrieMap<T> { TrieMap::new() }\n }\n "}, {"sha": "5d24673ae751c4a0eac10b2e9a63748e476d7e01", "filename": "src/libcollections/trie/set.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcollections%2Ftrie%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcollections%2Ftrie%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie%2Fset.rs?ref=9021f61ef7979cb146c5786e1c54c6d928cc0483", "patch": "@@ -69,8 +69,10 @@ impl Show for TrieSet {\n     }\n }\n \n+#[stable]\n impl Default for TrieSet {\n     #[inline]\n+    #[stable]\n     fn default() -> TrieSet { TrieSet::new() }\n }\n "}, {"sha": "d6ab2c9a75f901e1d93ecfb805be4479c54aa5bc", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=9021f61ef7979cb146c5786e1c54c6d928cc0483", "patch": "@@ -1322,6 +1322,7 @@ impl<T> Drop for Vec<T> {\n \n #[stable]\n impl<T> Default for Vec<T> {\n+    #[stable]\n     fn default() -> Vec<T> {\n         Vec::new()\n     }"}, {"sha": "d3f28e4a8c8bb94f4b92c9d9da2b2eae1ddb04eb", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=9021f61ef7979cb146c5786e1c54c6d928cc0483", "patch": "@@ -66,7 +66,9 @@ pub struct VecMap<V> {\n     v: Vec<Option<V>>,\n }\n \n+#[stable]\n impl<V> Default for VecMap<V> {\n+    #[stable]\n     #[inline]\n     fn default() -> VecMap<V> { VecMap::new() }\n }"}, {"sha": "1e09cf9d5c28cd97689928852cac6809098aeaaa", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=9021f61ef7979cb146c5786e1c54c6d928cc0483", "patch": "@@ -215,8 +215,9 @@ impl<T:Copy> Clone for Cell<T> {\n     }\n }\n \n-#[unstable]\n+#[stable]\n impl<T:Default + Copy> Default for Cell<T> {\n+    #[stable]\n     fn default() -> Cell<T> {\n         Cell::new(Default::default())\n     }\n@@ -349,8 +350,9 @@ impl<T: Clone> Clone for RefCell<T> {\n     }\n }\n \n-#[unstable]\n+#[stable]\n impl<T:Default> Default for RefCell<T> {\n+    #[stable]\n     fn default() -> RefCell<T> {\n         RefCell::new(Default::default())\n     }"}, {"sha": "10facfe4750f9922175c50cb7c9d78915b97dc5a", "filename": "src/libcore/default.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=9021f61ef7979cb146c5786e1c54c6d928cc0483", "patch": "@@ -97,6 +97,7 @@\n ///     bar: f32,\n /// }\n /// ```\n+#[stable]\n pub trait Default {\n     /// Returns the \"default value\" for a type.\n     ///\n@@ -130,13 +131,16 @@ pub trait Default {\n     ///     fn default() -> Kind { Kind::A }\n     /// }\n     /// ```\n+    #[stable]\n     fn default() -> Self;\n }\n \n macro_rules! default_impl(\n     ($t:ty, $v:expr) => {\n+        #[stable]\n         impl Default for $t {\n             #[inline]\n+            #[stable]\n             fn default() -> $t { $v }\n         }\n     }"}, {"sha": "51f19d8f90601eb292caa8525774b63cc64d0148", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=9021f61ef7979cb146c5786e1c54c6d928cc0483", "patch": "@@ -760,6 +760,7 @@ impl<T> AsSlice<T> for Option<T> {\n \n #[stable]\n impl<T> Default for Option<T> {\n+    #[stable]\n     #[inline]\n     fn default() -> Option<T> { None }\n }"}, {"sha": "22d40797f719eb2dcb19d37df37d3e80e6b6b24c", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=9021f61ef7979cb146c5786e1c54c6d928cc0483", "patch": "@@ -1044,8 +1044,9 @@ impl<'a, T, Sized? U: AsSlice<T>> AsSlice<T> for &'a mut U {\n     fn as_slice<'a>(&'a self) -> &'a [T] { AsSlice::as_slice(*self) }\n }\n \n-#[unstable = \"waiting for DST\"]\n+#[stable]\n impl<'a, T> Default for &'a [T] {\n+    #[stable]\n     fn default() -> &'a [T] { &[] }\n }\n "}, {"sha": "e85d5a3e3151b4ebb86fc962dd0222ff14d2c076", "filename": "src/libcore/str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=9021f61ef7979cb146c5786e1c54c6d928cc0483", "patch": "@@ -2349,7 +2349,9 @@ impl StrPrelude for str {\n     fn len(&self) -> uint { self.repr().len }\n }\n \n+#[stable]\n impl<'a> Default for &'a str {\n+    #[stable]\n     fn default() -> &'a str { \"\" }\n }\n "}, {"sha": "5ea84f7db9179bb440bc88dbcdf7bb60ad282f63", "filename": "src/libcore/tuple/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcore%2Ftuple%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibcore%2Ftuple%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple%2Fmod.rs?ref=9021f61ef7979cb146c5786e1c54c6d928cc0483", "patch": "@@ -182,6 +182,7 @@ macro_rules! tuple_impls {\n \n             #[stable]\n             impl<$($T:Default),+> Default for ($($T,)+) {\n+                #[stable]\n                 #[inline]\n                 fn default() -> ($($T,)+) {\n                     ($({ let x: $T = Default::default(); x},)+)"}, {"sha": "46ee67940f26997ed832cdb298bb24ce561de223", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=9021f61ef7979cb146c5786e1c54c6d928cc0483", "patch": "@@ -142,7 +142,9 @@ impl<R: Rng + Default> Reseeder<R> for ReseedWithDefault {\n         *rng = Default::default();\n     }\n }\n+#[stable]\n impl Default for ReseedWithDefault {\n+    #[stable]\n     fn default() -> ReseedWithDefault { ReseedWithDefault }\n }\n "}, {"sha": "b245f167e9d5818aea9dfd904045a5c9a8a36a05", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=9021f61ef7979cb146c5786e1c54c6d928cc0483", "patch": "@@ -1288,7 +1288,9 @@ impl<K: Eq + Hash<S> + Show, V: Show, S, H: Hasher<S>> Show for HashMap<K, V, H>\n     }\n }\n \n+#[stable]\n impl<K: Eq + Hash<S>, V, S, H: Hasher<S> + Default> Default for HashMap<K, V, H> {\n+    #[stable]\n     fn default() -> HashMap<K, V, H> {\n         HashMap::with_hasher(Default::default())\n     }"}, {"sha": "ca8d2df4651a23dceb4cad6e0d47bfac3cda2257", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=9021f61ef7979cb146c5786e1c54c6d928cc0483", "patch": "@@ -610,7 +610,9 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> Extend<T> for HashSet<T, H> {\n     }\n }\n \n+#[stable]\n impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> Default for HashSet<T, H> {\n+    #[stable]\n     fn default() -> HashSet<T, H> {\n         HashSet::with_hasher(Default::default())\n     }"}, {"sha": "b2fac31853d927e9f14a188c91a554e4b4ccfead", "filename": "src/libstd/hash.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibstd%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibstd%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash.rs?ref=9021f61ef7979cb146c5786e1c54c6d928cc0483", "patch": "@@ -95,7 +95,9 @@ impl Hasher<sip::SipState> for RandomSipHasher {\n     }\n }\n \n+#[stable]\n impl Default for RandomSipHasher {\n+    #[stable]\n     #[inline]\n     fn default() -> RandomSipHasher {\n         RandomSipHasher::new()"}, {"sha": "b9139c5d0e23aba49893d823f3064743d6ffa675", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9021f61ef7979cb146c5786e1c54c6d928cc0483/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=9021f61ef7979cb146c5786e1c54c6d928cc0483", "patch": "@@ -1911,7 +1911,9 @@ bitflags! {\n }\n \n \n+#[stable]\n impl Default for FilePermission {\n+    #[stable]\n     #[inline]\n     fn default() -> FilePermission { FilePermission::empty() }\n }"}]}