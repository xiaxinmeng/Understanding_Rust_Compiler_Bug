{"sha": "623af22b9af0c31d9797211dca7399418b52ba61", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyM2FmMjJiOWFmMGMzMWQ5Nzk3MjExZGNhNzM5OTQxOGI1MmJhNjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-28T17:24:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-28T17:24:01Z"}, "message": "Auto merge of #33821 - sanxiyn:cfg-test, r=nikomatsakis\n\nDo not inject test harness for --cfg test\n\nFix #33670.", "tree": {"sha": "5de2ccf29d357ade9c970ecd3fee3e64eba94e07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5de2ccf29d357ade9c970ecd3fee3e64eba94e07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/623af22b9af0c31d9797211dca7399418b52ba61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/623af22b9af0c31d9797211dca7399418b52ba61", "html_url": "https://github.com/rust-lang/rust/commit/623af22b9af0c31d9797211dca7399418b52ba61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/623af22b9af0c31d9797211dca7399418b52ba61/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1776fe244d8603006536dceb7a21967e1c21f9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1776fe244d8603006536dceb7a21967e1c21f9c", "html_url": "https://github.com/rust-lang/rust/commit/f1776fe244d8603006536dceb7a21967e1c21f9c"}, {"sha": "3c4eb014829110a98b4d9d65336fe9fb529ba897", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c4eb014829110a98b4d9d65336fe9fb529ba897", "html_url": "https://github.com/rust-lang/rust/commit/3c4eb014829110a98b4d9d65336fe9fb529ba897"}], "stats": {"total": 37, "additions": 25, "deletions": 12}, "files": [{"sha": "a8ddc7e7bdab0f4aa6642d9ebd7a1f883248b1ba", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/623af22b9af0c31d9797211dca7399418b52ba61/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/623af22b9af0c31d9797211dca7399418b52ba61/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=623af22b9af0c31d9797211dca7399418b52ba61", "patch": "@@ -734,7 +734,10 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     })?;\n \n     krate = time(time_passes, \"maybe building test harness\", || {\n-        syntax::test::modify_for_testing(&sess.parse_sess, &sess.opts.cfg, krate, sess.diagnostic())\n+        syntax::test::modify_for_testing(&sess.parse_sess,\n+                                         sess.opts.test,\n+                                         krate,\n+                                         sess.diagnostic())\n     });\n \n     krate = time(time_passes,"}, {"sha": "6fbbed2ee9842befbfd1236ef1ede25c3066323a", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/623af22b9af0c31d9797211dca7399418b52ba61/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/623af22b9af0c31d9797211dca7399418b52ba61/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=623af22b9af0c31d9797211dca7399418b52ba61", "patch": "@@ -59,7 +59,6 @@ struct TestCtxt<'a> {\n     testfns: Vec<Test>,\n     reexport_test_harness_main: Option<InternedString>,\n     is_test_crate: bool,\n-    config: ast::CrateConfig,\n \n     // top-level re-export submodule, filled out after folding is finished\n     toplevel_reexport: Option<ast::Ident>,\n@@ -68,14 +67,9 @@ struct TestCtxt<'a> {\n // Traverse the crate, collecting all the test functions, eliding any\n // existing main functions, and synthesizing a main test harness\n pub fn modify_for_testing(sess: &ParseSess,\n-                          cfg: &ast::CrateConfig,\n+                          should_test: bool,\n                           krate: ast::Crate,\n                           span_diagnostic: &errors::Handler) -> ast::Crate {\n-    // We generate the test harness when building in the 'test'\n-    // configuration, either with the '--test' or '--cfg test'\n-    // command line options.\n-    let should_test = attr::contains_name(&krate.config, \"test\");\n-\n     // Check for #[reexport_test_harness_main = \"some_name\"] which\n     // creates a `use some_name = __test::main;`. This needs to be\n     // unconditional, so that the attribute is still marked as used in\n@@ -85,7 +79,7 @@ pub fn modify_for_testing(sess: &ParseSess,\n                                            \"reexport_test_harness_main\");\n \n     if should_test {\n-        generate_test_harness(sess, reexport_test_harness_main, krate, cfg, span_diagnostic)\n+        generate_test_harness(sess, reexport_test_harness_main, krate, span_diagnostic)\n     } else {\n         strip_test_functions(krate)\n     }\n@@ -271,7 +265,6 @@ fn mk_reexport_mod(cx: &mut TestCtxt, tests: Vec<ast::Ident>,\n fn generate_test_harness(sess: &ParseSess,\n                          reexport_test_harness_main: Option<InternedString>,\n                          krate: ast::Crate,\n-                         cfg: &ast::CrateConfig,\n                          sd: &errors::Handler) -> ast::Crate {\n     // Remove the entry points\n     let mut cleaner = EntryPointCleaner { depth: 0 };\n@@ -281,14 +274,13 @@ fn generate_test_harness(sess: &ParseSess,\n     let mut cx: TestCtxt = TestCtxt {\n         sess: sess,\n         span_diagnostic: sd,\n-        ext_cx: ExtCtxt::new(sess, cfg.clone(),\n+        ext_cx: ExtCtxt::new(sess, vec![],\n                              ExpansionConfig::default(\"test\".to_string()),\n                              &mut feature_gated_cfgs),\n         path: Vec::new(),\n         testfns: Vec::new(),\n         reexport_test_harness_main: reexport_test_harness_main,\n         is_test_crate: is_test_crate(&krate),\n-        config: krate.config.clone(),\n         toplevel_reexport: None,\n     };\n     cx.ext_cx.crate_root = Some(\"std\");"}, {"sha": "708fde598886291dc69d348a980a250a6394cf08", "filename": "src/test/run-pass/test-vs-cfg-test.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/623af22b9af0c31d9797211dca7399418b52ba61/src%2Ftest%2Frun-pass%2Ftest-vs-cfg-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/623af22b9af0c31d9797211dca7399418b52ba61/src%2Ftest%2Frun-pass%2Ftest-vs-cfg-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftest-vs-cfg-test.rs?ref=623af22b9af0c31d9797211dca7399418b52ba61", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --cfg test\n+\n+// Make sure `--cfg test` does not inject test harness\n+\n+#[test]\n+fn test() { panic!(); }\n+\n+fn main() {}"}]}