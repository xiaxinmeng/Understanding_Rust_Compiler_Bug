{"sha": "c09c16c0dff47b1ec143c266c3c06acdc84a4257", "node_id": "C_kwDOAAsO6NoAKGMwOWMxNmMwZGZmNDdiMWVjMTQzYzI2NmMzYzA2YWNkYzg0YTQyNTc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-01T09:50:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-01T09:50:21Z"}, "message": "Rollup merge of #91298 - FabianWolff:issue-91028-source-avail, r=cjgillot\n\nImprove error message for `E0659` if the source is not available\n\nFixes #91028. The fix is similar to those in #89233 and #87088. With this change, instead of the dangling\n```\nnote: `Option` could also refer to the enum defined here\n```\nI get\n```\nnote: `Option` could also refer to an enum from prelude\n```\nIf the standard library source code _is_ available, the output does not change.", "tree": {"sha": "fd39fe268a98b6fc776bd12fa0f31766140295ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd39fe268a98b6fc776bd12fa0f31766140295ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c09c16c0dff47b1ec143c266c3c06acdc84a4257", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhp0VeCRBK7hj4Ov3rIwAAfR4IABJDb+SJP6reJA0qSi5y6Jko\n7Iv3IEDvuU2cA3XRI9PrHoeBes0UmFlORHsjx3s0CrCuTrEroUQxHXN/bd/QtA1a\nz+N+e87MAFNQg+E0qbiOSCDyr1Zm1EPEeNdSZ5UlgSjZSxUVQlvcoHLJUdrY4duT\nHnYqr3WfAK9XfJNU0oxc35cPs27pVL4fhU+7AJ2AuMVNGDyO02d/vd+94hjJAOsX\nISwH57Ri8Ht+U2vtii673pifnbUdHZorYBA/BRTTuHekzSUdqxbsVJ+MWuz6qR0A\nYny/JShXbR3NqZJouayec3DMaEJgwEZ4/HFbKyTWBRObTnQVrBTodWRx+YUZaHk=\n=JceF\n-----END PGP SIGNATURE-----\n", "payload": "tree fd39fe268a98b6fc776bd12fa0f31766140295ff\nparent d93df5775cbbd076bf438a4063c5c98a6293addf\nparent 6dfed31c4313c1eee7b1aa155e0761c5cdf7f128\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638352221 +0100\ncommitter GitHub <noreply@github.com> 1638352221 +0100\n\nRollup merge of #91298 - FabianWolff:issue-91028-source-avail, r=cjgillot\n\nImprove error message for `E0659` if the source is not available\n\nFixes #91028. The fix is similar to those in #89233 and #87088. With this change, instead of the dangling\n```\nnote: `Option` could also refer to the enum defined here\n```\nI get\n```\nnote: `Option` could also refer to an enum from prelude\n```\nIf the standard library source code _is_ available, the output does not change.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c09c16c0dff47b1ec143c266c3c06acdc84a4257", "html_url": "https://github.com/rust-lang/rust/commit/c09c16c0dff47b1ec143c266c3c06acdc84a4257", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c09c16c0dff47b1ec143c266c3c06acdc84a4257/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d93df5775cbbd076bf438a4063c5c98a6293addf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d93df5775cbbd076bf438a4063c5c98a6293addf", "html_url": "https://github.com/rust-lang/rust/commit/d93df5775cbbd076bf438a4063c5c98a6293addf"}, {"sha": "6dfed31c4313c1eee7b1aa155e0761c5cdf7f128", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dfed31c4313c1eee7b1aa155e0761c5cdf7f128", "html_url": "https://github.com/rust-lang/rust/commit/6dfed31c4313c1eee7b1aa155e0761c5cdf7f128"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "6a13627a56314f11cb9359ca9348ed8bafeae7a6", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09c16c0dff47b1ec143c266c3c06acdc84a4257/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09c16c0dff47b1ec143c266c3c06acdc84a4257/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=c09c16c0dff47b1ec143c266c3c06acdc84a4257", "patch": "@@ -1178,7 +1178,7 @@ impl<'a> Resolver<'a> {\n \n     fn binding_description(&self, b: &NameBinding<'_>, ident: Ident, from_prelude: bool) -> String {\n         let res = b.res();\n-        if b.span.is_dummy() {\n+        if b.span.is_dummy() || self.session.source_map().span_to_snippet(b.span).is_err() {\n             // These already contain the \"built-in\" prefix or look bad with it.\n             let add_built_in =\n                 !matches!(b.res(), Res::NonMacroAttr(..) | Res::PrimTy(..) | Res::ToolMod);"}]}