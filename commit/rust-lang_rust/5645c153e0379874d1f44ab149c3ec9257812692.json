{"sha": "5645c153e0379874d1f44ab149c3ec9257812692", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NDVjMTUzZTAzNzk4NzRkMWY0NGFiMTQ5YzNlYzkyNTc4MTI2OTI=", "commit": {"author": {"name": "Geoffry Song", "email": "goffrie@gmail.com", "date": "2019-11-15T20:05:29Z"}, "committer": {"name": "Geoffry Song", "email": "goffrie@gmail.com", "date": "2019-11-15T20:05:29Z"}, "message": "Attempt to implement typed accessors", "tree": {"sha": "82739e158bc148307ac245f5b97c6e97a4d65c69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82739e158bc148307ac245f5b97c6e97a4d65c69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5645c153e0379874d1f44ab149c3ec9257812692", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5645c153e0379874d1f44ab149c3ec9257812692", "html_url": "https://github.com/rust-lang/rust/commit/5645c153e0379874d1f44ab149c3ec9257812692", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5645c153e0379874d1f44ab149c3ec9257812692/comments", "author": {"login": "goffrie", "id": 1240398, "node_id": "MDQ6VXNlcjEyNDAzOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1240398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goffrie", "html_url": "https://github.com/goffrie", "followers_url": "https://api.github.com/users/goffrie/followers", "following_url": "https://api.github.com/users/goffrie/following{/other_user}", "gists_url": "https://api.github.com/users/goffrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/goffrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goffrie/subscriptions", "organizations_url": "https://api.github.com/users/goffrie/orgs", "repos_url": "https://api.github.com/users/goffrie/repos", "events_url": "https://api.github.com/users/goffrie/events{/privacy}", "received_events_url": "https://api.github.com/users/goffrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "goffrie", "id": 1240398, "node_id": "MDQ6VXNlcjEyNDAzOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1240398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goffrie", "html_url": "https://github.com/goffrie", "followers_url": "https://api.github.com/users/goffrie/followers", "following_url": "https://api.github.com/users/goffrie/following{/other_user}", "gists_url": "https://api.github.com/users/goffrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/goffrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goffrie/subscriptions", "organizations_url": "https://api.github.com/users/goffrie/orgs", "repos_url": "https://api.github.com/users/goffrie/repos", "events_url": "https://api.github.com/users/goffrie/events{/privacy}", "received_events_url": "https://api.github.com/users/goffrie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a68aefdc463af054e7e98293c06b751c135911d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a68aefdc463af054e7e98293c06b751c135911d5", "html_url": "https://github.com/rust-lang/rust/commit/a68aefdc463af054e7e98293c06b751c135911d5"}], "stats": {"total": 58, "additions": 50, "deletions": 8}, "files": [{"sha": "277532a8cbf68fd705d28ec4c548abd9caac99d1", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5645c153e0379874d1f44ab149c3ec9257812692/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5645c153e0379874d1f44ab149c3ec9257812692/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=5645c153e0379874d1f44ab149c3ec9257812692", "patch": "@@ -16,7 +16,7 @@ use crate::{\n };\n \n pub use self::{\n-    expr_extensions::{ArrayExprKind, BinOp, ElseBranch, LiteralKind, PrefixOp},\n+    expr_extensions::{ArrayExprKind, BinOp, ElseBranch, LiteralKind, PrefixOp, RangeOp},\n     extensions::{FieldKind, PathSegmentKind, SelfParamKind, StructKind, TypeBoundKind},\n     generated::*,\n     tokens::*,"}, {"sha": "7c53aa934400ae411849aa73d784a12bb83b546b", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5645c153e0379874d1f44ab149c3ec9257812692/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5645c153e0379874d1f44ab149c3ec9257812692/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=5645c153e0379874d1f44ab149c3ec9257812692", "patch": "@@ -189,6 +189,52 @@ impl ast::BinExpr {\n     }\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+pub enum RangeOp {\n+    /// `..`\n+    Exclusive,\n+    /// `..=`\n+    Inclusive,\n+}\n+\n+impl ast::RangeExpr {\n+    fn op_details(&self) -> Option<(usize, SyntaxToken, RangeOp)> {\n+        self.syntax().children_with_tokens().enumerate().find_map(|(ix, child)| {\n+            let token = child.into_token()?;\n+            let bin_op = match token.kind() {\n+                T![..] => RangeOp::Exclusive,\n+                T![..=] => RangeOp::Inclusive,\n+                _ => return None,\n+            };\n+            Some((ix, token, bin_op))\n+        })\n+    }\n+\n+    pub fn op_kind(&self) -> Option<RangeOp> {\n+        self.op_details().map(|t| t.2)\n+    }\n+\n+    pub fn op_token(&self) -> Option<SyntaxToken> {\n+        self.op_details().map(|t| t.1)\n+    }\n+\n+    pub fn start(&self) -> Option<ast::Expr> {\n+        let op_ix = self.op_details()?.0;\n+        self.syntax()\n+            .children_with_tokens()\n+            .take(op_ix)\n+            .find_map(|it| ast::Expr::cast(it.into_node()?))\n+    }\n+\n+    pub fn end(&self) -> Option<ast::Expr> {\n+        let op_ix = self.op_details()?.0;\n+        self.syntax()\n+            .children_with_tokens()\n+            .skip(op_ix + 1)\n+            .find_map(|it| ast::Expr::cast(it.into_node()?))\n+    }\n+}\n+\n impl ast::IndexExpr {\n     pub fn base(&self) -> Option<ast::Expr> {\n         children(self).nth(0)"}, {"sha": "222ac15f871b2f08ada52b795e8a3fdf9cacc517", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5645c153e0379874d1f44ab149c3ec9257812692/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5645c153e0379874d1f44ab149c3ec9257812692/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=5645c153e0379874d1f44ab149c3ec9257812692", "patch": "@@ -230,14 +230,10 @@ fn validate_visibility(vis: ast::Visibility, errors: &mut Vec<SyntaxError>) {\n }\n \n fn validate_range_expr(expr: ast::RangeExpr, errors: &mut Vec<SyntaxError>) {\n-    let last_child = match expr.syntax().last_child_or_token() {\n-        Some(it) => it,\n-        None => return,\n-    };\n-    if last_child.kind() == T![..=] {\n+    if expr.op_kind() == Some(ast::RangeOp::Inclusive) && expr.end().is_none() {\n         errors.push(SyntaxError::new(\n             SyntaxErrorKind::InclusiveRangeMissingEnd,\n-            last_child.text_range(),\n+            expr.syntax().text_range(),\n         ));\n     }\n }"}, {"sha": "3810b9680a309824016ba1f80b5edc783bec3498", "filename": "crates/ra_syntax/test_data/parser/err/0038_endless_inclusive_range.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5645c153e0379874d1f44ab149c3ec9257812692/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5645c153e0379874d1f44ab149c3ec9257812692/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.txt?ref=5645c153e0379874d1f44ab149c3ec9257812692", "patch": "@@ -26,5 +26,5 @@ SOURCE_FILE@[0; 33)\n         WHITESPACE@[30; 31) \"\\n\"\n         R_CURLY@[31; 32) \"}\"\n   WHITESPACE@[32; 33) \"\\n\"\n-error [17; 20): An inclusive range must have an end expression\n+error [16; 20): An inclusive range must have an end expression\n error [26; 29): An inclusive range must have an end expression"}]}