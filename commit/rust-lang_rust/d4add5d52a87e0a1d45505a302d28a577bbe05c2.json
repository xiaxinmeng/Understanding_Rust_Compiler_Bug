{"sha": "d4add5d52a87e0a1d45505a302d28a577bbe05c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0YWRkNWQ1MmE4N2UwYTFkNDU1MDVhMzAyZDI4YTU3N2JiZTA1YzI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-11-27T14:08:11Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-12-13T19:50:39Z"}, "message": "Refactoring: pull bitvector initialization out from other parts of dataflow.\n\nThis is meant to ease development of multi-stage dataflow analyses\nwhere the output from one analysis is used to initialize the state\nfor the next; in such a context, you cannot start with `bottom_value`\nfor all the bits.", "tree": {"sha": "cffe1de8a4dd98a973057291522b39787be2cbc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cffe1de8a4dd98a973057291522b39787be2cbc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4add5d52a87e0a1d45505a302d28a577bbe05c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4add5d52a87e0a1d45505a302d28a577bbe05c2", "html_url": "https://github.com/rust-lang/rust/commit/d4add5d52a87e0a1d45505a302d28a577bbe05c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4add5d52a87e0a1d45505a302d28a577bbe05c2/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "171c2aeb25539c5bb1a1a3b231c8a17c6e6b05cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/171c2aeb25539c5bb1a1a3b231c8a17c6e6b05cc", "html_url": "https://github.com/rust-lang/rust/commit/171c2aeb25539c5bb1a1a3b231c8a17c6e6b05cc"}], "stats": {"total": 39, "additions": 18, "deletions": 21}, "files": [{"sha": "eeb7f32c25c292e9b41b7cf1171787237a872f4d", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4add5d52a87e0a1d45505a302d28a577bbe05c2/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4add5d52a87e0a1d45505a302d28a577bbe05c2/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=d4add5d52a87e0a1d45505a302d28a577bbe05c2", "patch": "@@ -22,7 +22,7 @@ use rustc_data_structures::bitslice::{BitwiseOperator};\n use rustc_data_structures::indexed_set::{IdxSet};\n use rustc_data_structures::indexed_vec::{IndexVec};\n \n-use dataflow::{BitDenotation, BlockSets, DataflowOperator};\n+use dataflow::{BitDenotation, BlockSets, InitialFlow};\n pub use dataflow::indexes::BorrowIndex;\n use borrow_check::nll::region_infer::RegionInferenceContext;\n use borrow_check::nll::ToRegionVid;\n@@ -339,7 +339,7 @@ impl<'a, 'gcx, 'tcx> BitwiseOperator for Borrows<'a, 'gcx, 'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> DataflowOperator for Borrows<'a, 'gcx, 'tcx> {\n+impl<'a, 'gcx, 'tcx> InitialFlow for Borrows<'a, 'gcx, 'tcx> {\n     #[inline]\n     fn bottom_value() -> bool {\n         false // bottom = no Rvalue::Refs are active by default"}, {"sha": "106a88e703c798179453703b9f9fe65050723076", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d4add5d52a87e0a1d45505a302d28a577bbe05c2/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4add5d52a87e0a1d45505a302d28a577bbe05c2/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=d4add5d52a87e0a1d45505a302d28a577bbe05c2", "patch": "@@ -23,7 +23,7 @@ use util::elaborate_drops::DropFlagState;\n \n use super::move_paths::{HasMoveData, MoveData, MoveOutIndex, MovePathIndex, InitIndex};\n use super::move_paths::{LookupResult, InitKind};\n-use super::{BitDenotation, BlockSets, DataflowOperator};\n+use super::{BitDenotation, BlockSets, InitialFlow};\n \n use super::drop_flag_effects_for_function_entry;\n use super::drop_flag_effects_for_location;\n@@ -702,35 +702,35 @@ impl<'a, 'gcx, 'tcx> BitwiseOperator for EverInitializedLvals<'a, 'gcx, 'tcx> {\n // propagating, or you start at all-ones and then use Intersect as\n // your merge when propagating.\n \n-impl<'a, 'gcx, 'tcx> DataflowOperator for MaybeInitializedLvals<'a, 'gcx, 'tcx> {\n+impl<'a, 'gcx, 'tcx> InitialFlow for MaybeInitializedLvals<'a, 'gcx, 'tcx> {\n     #[inline]\n     fn bottom_value() -> bool {\n         false // bottom = uninitialized\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> DataflowOperator for MaybeUninitializedLvals<'a, 'gcx, 'tcx> {\n+impl<'a, 'gcx, 'tcx> InitialFlow for MaybeUninitializedLvals<'a, 'gcx, 'tcx> {\n     #[inline]\n     fn bottom_value() -> bool {\n         false // bottom = initialized (start_block_effect counters this at outset)\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> DataflowOperator for DefinitelyInitializedLvals<'a, 'gcx, 'tcx> {\n+impl<'a, 'gcx, 'tcx> InitialFlow for DefinitelyInitializedLvals<'a, 'gcx, 'tcx> {\n     #[inline]\n     fn bottom_value() -> bool {\n         true // bottom = initialized (start_block_effect counters this at outset)\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> DataflowOperator for MovingOutStatements<'a, 'gcx, 'tcx> {\n+impl<'a, 'gcx, 'tcx> InitialFlow for MovingOutStatements<'a, 'gcx, 'tcx> {\n     #[inline]\n     fn bottom_value() -> bool {\n         false // bottom = no loans in scope by default\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> DataflowOperator for EverInitializedLvals<'a, 'gcx, 'tcx> {\n+impl<'a, 'gcx, 'tcx> InitialFlow for EverInitializedLvals<'a, 'gcx, 'tcx> {\n     #[inline]\n     fn bottom_value() -> bool {\n         false // bottom = no initialized variables by default"}, {"sha": "dea61542ac4e2e7616deddfc2313bb1e0c0ca748", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4add5d52a87e0a1d45505a302d28a577bbe05c2/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4add5d52a87e0a1d45505a302d28a577bbe05c2/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=d4add5d52a87e0a1d45505a302d28a577bbe05c2", "patch": "@@ -74,7 +74,7 @@ impl<'a, 'tcx> BitwiseOperator for MaybeStorageLive<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> DataflowOperator for MaybeStorageLive<'a, 'tcx> {\n+impl<'a, 'tcx> InitialFlow for MaybeStorageLive<'a, 'tcx> {\n     #[inline]\n     fn bottom_value() -> bool {\n         false // bottom = dead"}, {"sha": "fe152b46c1d512dc932b4fed25f127f399c9fd47", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d4add5d52a87e0a1d45505a302d28a577bbe05c2/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4add5d52a87e0a1d45505a302d28a577bbe05c2/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=d4add5d52a87e0a1d45505a302d28a577bbe05c2", "patch": "@@ -127,7 +127,7 @@ pub(crate) fn do_dataflow<'a, 'gcx, 'tcx, BD, P>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                                  bd: BD,\n                                                  p: P)\n                                                  -> DataflowResults<BD>\n-    where BD: BitDenotation,\n+    where BD: BitDenotation + InitialFlow,\n           P: Fn(&BD, BD::Idx) -> DebugFormatted\n {\n     let name_found = |sess: &Session, attrs: &[ast::Attribute], name| -> Option<String> {\n@@ -176,7 +176,6 @@ impl<'a, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD> where BD: BitDenotation\n         };\n         while propcx.changed {\n             propcx.changed = false;\n-            propcx.reset(&mut temp);\n             propcx.walk_cfg(&mut temp);\n         }\n     }\n@@ -212,13 +211,6 @@ impl<'a, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD> where BD: BitDenotation\n \n impl<'b, 'a: 'b, 'tcx: 'a, BD> PropagationContext<'b, 'a, 'tcx, BD> where BD: BitDenotation\n {\n-    fn reset(&mut self, bits: &mut IdxSet<BD::Idx>) {\n-        let e = if BD::bottom_value() {!0} else {0};\n-        for b in bits.words_mut() {\n-            *b = e;\n-        }\n-    }\n-\n     fn walk_cfg(&mut self, in_out: &mut IdxSet<BD::Idx>) {\n         let mir = self.builder.mir;\n         for (bb_idx, bb_data) in mir.basic_blocks().iter().enumerate() {\n@@ -554,12 +546,17 @@ impl<E:Idx> AllSets<E> {\n }\n \n /// Parameterization for the precise form of data flow that is used.\n-pub trait DataflowOperator: BitwiseOperator {\n+/// `InitialFlow` handles initializing the bitvectors before any\n+/// code is inspected by the analysis. Analyses that need more nuanced\n+/// initialization (e.g. they need to consult the results of some other\n+/// dataflow analysis to set up the initial bitvectors) should not\n+/// implement this.\n+pub trait InitialFlow {\n     /// Specifies the initial value for each bit in the `on_entry` set\n     fn bottom_value() -> bool;\n }\n \n-pub trait BitDenotation: DataflowOperator {\n+pub trait BitDenotation: BitwiseOperator {\n     /// Specifies what index type is used to access the bitvector.\n     type Idx: Idx;\n \n@@ -642,7 +639,7 @@ impl<'a, 'gcx, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation\n     pub fn new(_tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                mir: &'a Mir<'tcx>,\n                dead_unwinds: &'a IdxSet<mir::BasicBlock>,\n-               denotation: D) -> Self {\n+               denotation: D) -> Self where D: InitialFlow {\n         let bits_per_block = denotation.bits_per_block();\n         let usize_bits = mem::size_of::<usize>() * 8;\n         let words_per_block = (bits_per_block + usize_bits - 1) / usize_bits;"}]}