{"sha": "02fe61b381c2dedc0071e1aacfbe91e0bad1f656", "node_id": "C_kwDOAAsO6NoAKDAyZmU2MWIzODFjMmRlZGMwMDcxZTFhYWNmYmU5MWUwYmFkMWY2NTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-09T01:29:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-09T01:29:22Z"}, "message": "Auto merge of #92497 - bjorn3:remove_lazy_meta_min_size, r=eddyb\n\nRemove LazyMeta::min_size\n\nIt is extremely conservative and as such barely reduces the size of encoded Lazy distances, but does increase complexity.", "tree": {"sha": "2d2e268dcbf19baa5261f97aabe28b7d8ebdd452", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d2e268dcbf19baa5261f97aabe28b7d8ebdd452"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02fe61b381c2dedc0071e1aacfbe91e0bad1f656", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02fe61b381c2dedc0071e1aacfbe91e0bad1f656", "html_url": "https://github.com/rust-lang/rust/commit/02fe61b381c2dedc0071e1aacfbe91e0bad1f656", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02fe61b381c2dedc0071e1aacfbe91e0bad1f656/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23ce5fc4655ed546f74a85fc8836e95bec0c64fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/23ce5fc4655ed546f74a85fc8836e95bec0c64fd", "html_url": "https://github.com/rust-lang/rust/commit/23ce5fc4655ed546f74a85fc8836e95bec0c64fd"}, {"sha": "717d4b35f847d8b8d491215574459f0bdbc2e393", "url": "https://api.github.com/repos/rust-lang/rust/commits/717d4b35f847d8b8d491215574459f0bdbc2e393", "html_url": "https://github.com/rust-lang/rust/commit/717d4b35f847d8b8d491215574459f0bdbc2e393"}], "stats": {"total": 45, "additions": 13, "deletions": 32}, "files": [{"sha": "603b21d400578b1232645cf1a76c53b5ee7d7207", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/02fe61b381c2dedc0071e1aacfbe91e0bad1f656/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02fe61b381c2dedc0071e1aacfbe91e0bad1f656/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=02fe61b381c2dedc0071e1aacfbe91e0bad1f656", "patch": "@@ -304,18 +304,17 @@ impl<'a, 'tcx> DecodeContext<'a, 'tcx> {\n         &mut self,\n         meta: T::Meta,\n     ) -> Result<Lazy<T>, <Self as Decoder>::Error> {\n-        let min_size = T::min_size(meta);\n         let distance = self.read_usize()?;\n         let position = match self.lazy_state {\n             LazyState::NoNode => bug!(\"read_lazy_with_meta: outside of a metadata node\"),\n             LazyState::NodeStart(start) => {\n                 let start = start.get();\n-                assert!(distance + min_size <= start);\n-                start - distance - min_size\n+                assert!(distance <= start);\n+                start - distance\n             }\n-            LazyState::Previous(last_min_end) => last_min_end.get() + distance,\n+            LazyState::Previous(last_pos) => last_pos.get() + distance,\n         };\n-        self.lazy_state = LazyState::Previous(NonZeroUsize::new(position + min_size).unwrap());\n+        self.lazy_state = LazyState::Previous(NonZeroUsize::new(position).unwrap());\n         Ok(Lazy::from_position_and_meta(NonZeroUsize::new(position).unwrap(), meta))\n     }\n "}, {"sha": "8a74aef60ddaff9a18d547af13606bfa84798cbb", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/02fe61b381c2dedc0071e1aacfbe91e0bad1f656/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02fe61b381c2dedc0071e1aacfbe91e0bad1f656/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=02fe61b381c2dedc0071e1aacfbe91e0bad1f656", "patch": "@@ -404,24 +404,24 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         &mut self,\n         lazy: Lazy<T>,\n     ) -> Result<(), <Self as Encoder>::Error> {\n-        let min_end = lazy.position.get() + T::min_size(lazy.meta);\n+        let pos = lazy.position.get();\n         let distance = match self.lazy_state {\n             LazyState::NoNode => bug!(\"emit_lazy_distance: outside of a metadata node\"),\n             LazyState::NodeStart(start) => {\n                 let start = start.get();\n-                assert!(min_end <= start);\n-                start - min_end\n+                assert!(pos <= start);\n+                start - pos\n             }\n-            LazyState::Previous(last_min_end) => {\n+            LazyState::Previous(last_pos) => {\n                 assert!(\n-                    last_min_end <= lazy.position,\n+                    last_pos <= lazy.position,\n                     \"make sure that the calls to `lazy*` \\\n                      are in the same order as the metadata fields\",\n                 );\n-                lazy.position.get() - last_min_end.get()\n+                lazy.position.get() - last_pos.get()\n             }\n         };\n-        self.lazy_state = LazyState::Previous(NonZeroUsize::new(min_end).unwrap());\n+        self.lazy_state = LazyState::Previous(NonZeroUsize::new(pos).unwrap());\n         self.emit_usize(distance)\n     }\n \n@@ -436,7 +436,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let meta = value.encode_contents_for_lazy(self);\n         self.lazy_state = LazyState::NoNode;\n \n-        assert!(pos.get() + <T>::min_size(meta) <= self.position());\n+        assert!(pos.get() <= self.position());\n \n         Lazy::from_position_and_meta(pos, meta)\n     }"}, {"sha": "432ca547de6cdfa964e32f4dd68bcc91102b7eb5", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/02fe61b381c2dedc0071e1aacfbe91e0bad1f656/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02fe61b381c2dedc0071e1aacfbe91e0bad1f656/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=02fe61b381c2dedc0071e1aacfbe91e0bad1f656", "patch": "@@ -63,27 +63,14 @@ pub const METADATA_HEADER: &[u8] = &[b'r', b'u', b's', b't', 0, 0, 0, METADATA_V\n /// e.g. for `Lazy<[T]>`, this is the length (count of `T` values).\n trait LazyMeta {\n     type Meta: Copy + 'static;\n-\n-    /// Returns the minimum encoded size.\n-    // FIXME(eddyb) Give better estimates for certain types.\n-    fn min_size(meta: Self::Meta) -> usize;\n }\n \n impl<T> LazyMeta for T {\n     type Meta = ();\n-\n-    fn min_size(_: ()) -> usize {\n-        assert_ne!(std::mem::size_of::<T>(), 0);\n-        1\n-    }\n }\n \n impl<T> LazyMeta for [T] {\n     type Meta = usize;\n-\n-    fn min_size(len: usize) -> usize {\n-        len * T::min_size(())\n-    }\n }\n \n /// A value of type T referred to by its absolute position\n@@ -161,8 +148,7 @@ enum LazyState {\n     NodeStart(NonZeroUsize),\n \n     /// Inside a metadata node, with a previous `Lazy`.\n-    /// The position is a conservative estimate of where that\n-    /// previous `Lazy` would end (see their comments).\n+    /// The position is where that previous `Lazy` would start.\n     Previous(NonZeroUsize),\n }\n "}, {"sha": "265ca5a6d8d1369c5d14945ba88b864d913918f3", "filename": "compiler/rustc_metadata/src/rmeta/table.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02fe61b381c2dedc0071e1aacfbe91e0bad1f656/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02fe61b381c2dedc0071e1aacfbe91e0bad1f656/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs?ref=02fe61b381c2dedc0071e1aacfbe91e0bad1f656", "patch": "@@ -183,10 +183,6 @@ where\n     Option<T>: FixedSizeEncoding,\n {\n     type Meta = usize;\n-\n-    fn min_size(len: usize) -> usize {\n-        len\n-    }\n }\n \n impl<I: Idx, T> Lazy<Table<I, T>>"}]}