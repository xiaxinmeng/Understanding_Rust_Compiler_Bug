{"sha": "99eac011c6059de129de4b1c8ab7c6cd6794e6e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZWFjMDExYzYwNTlkZTEyOWRlNGIxYzhhYjdjNmNkNjc5NGU2ZTQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-07-19T21:09:05Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-07-20T03:27:16Z"}, "message": "proc_macro: avoid exposing internal details in formatting impls.", "tree": {"sha": "9bd86c9b72c2db9cb365f32a35beb2897116c98b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bd86c9b72c2db9cb365f32a35beb2897116c98b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99eac011c6059de129de4b1c8ab7c6cd6794e6e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99eac011c6059de129de4b1c8ab7c6cd6794e6e4", "html_url": "https://github.com/rust-lang/rust/commit/99eac011c6059de129de4b1c8ab7c6cd6794e6e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99eac011c6059de129de4b1c8ab7c6cd6794e6e4/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc2b21cc4e2679191b14ade2511e9015e717da53", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc2b21cc4e2679191b14ade2511e9015e717da53", "html_url": "https://github.com/rust-lang/rust/commit/bc2b21cc4e2679191b14ade2511e9015e717da53"}], "stats": {"total": 44, "additions": 37, "deletions": 7}, "files": [{"sha": "61da9db76f6c81e4ca4346b6e61d5025a8ba03b1", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/99eac011c6059de129de4b1c8ab7c6cd6794e6e4/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99eac011c6059de129de4b1c8ab7c6cd6794e6e4/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=99eac011c6059de129de4b1c8ab7c6cd6794e6e4", "patch": "@@ -588,7 +588,7 @@ impl fmt::Display for TokenTree {\n /// A delimited token stream.\n ///\n /// A `Group` internally contains a `TokenStream` which is surrounded by `Delimiter`s.\n-#[derive(Clone, Debug)]\n+#[derive(Clone)]\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n pub struct Group {\n     delimiter: Delimiter,\n@@ -682,12 +682,23 @@ impl fmt::Display for Group {\n     }\n }\n \n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n+impl fmt::Debug for Group {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"Group\")\n+            .field(\"delimiter\", &self.delimiter())\n+            .field(\"stream\", &self.stream())\n+            .field(\"span\", &self.span())\n+            .finish()\n+    }\n+}\n+\n /// An `Punct` is an single punctuation character like `+`, `-` or `#`.\n ///\n /// Multicharacter operators like `+=` are represented as two instances of `Punct` with different\n /// forms of `Spacing` returned.\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n-#[derive(Clone, Debug)]\n+#[derive(Clone)]\n pub struct Punct {\n     ch: char,\n     spacing: Spacing,\n@@ -771,8 +782,19 @@ impl fmt::Display for Punct {\n     }\n }\n \n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n+impl fmt::Debug for Punct {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"Punct\")\n+            .field(\"ch\", &self.as_char())\n+            .field(\"spacing\", &self.spacing())\n+            .field(\"span\", &self.span())\n+            .finish()\n+    }\n+}\n+\n /// An identifier (`ident`).\n-#[derive(Clone, Debug)]\n+#[derive(Clone)]\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n pub struct Ident {\n     sym: Symbol,\n@@ -851,17 +873,25 @@ impl Ident {\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Display for Ident {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        if self.is_raw {\n-            f.write_str(\"r#\")?;\n-        }\n-        self.sym.as_str().fmt(f)\n+        TokenStream::from(TokenTree::from(self.clone())).fmt(f)\n+    }\n+}\n+\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n+impl fmt::Debug for Ident {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"Ident\")\n+            .field(\"ident\", &self.to_string())\n+            .field(\"span\", &self.span())\n+            .finish()\n     }\n }\n \n /// A literal string (`\"hello\"`), byte string (`b\"hello\"`),\n /// character (`'a'`), byte character (`b'a'`), an integer or floating point number\n /// with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).\n /// Boolean literals like `true` and `false` do not belong here, they are `Ident`s.\n+// FIXME(eddyb) `Literal` should not expose internal `Debug` impls.\n #[derive(Clone, Debug)]\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n pub struct Literal {"}]}