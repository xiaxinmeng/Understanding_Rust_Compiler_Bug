{"sha": "5a56ac4b72e7f57fb20d49bcf531611f144cc0e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNTZhYzRiNzJlN2Y1N2ZiMjBkNDliY2Y1MzE2MTFmMTQ0Y2MwZTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-13T14:19:27Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-13T14:19:27Z"}, "message": "Better limiting", "tree": {"sha": "895b810cdebc1afa199133b17441339fdf4e1ff0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/895b810cdebc1afa199133b17441339fdf4e1ff0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a56ac4b72e7f57fb20d49bcf531611f144cc0e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a56ac4b72e7f57fb20d49bcf531611f144cc0e0", "html_url": "https://github.com/rust-lang/rust/commit/5a56ac4b72e7f57fb20d49bcf531611f144cc0e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a56ac4b72e7f57fb20d49bcf531611f144cc0e0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ae56fa6d0e8a03d6ad75919d6be953f5fc27083", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ae56fa6d0e8a03d6ad75919d6be953f5fc27083", "html_url": "https://github.com/rust-lang/rust/commit/8ae56fa6d0e8a03d6ad75919d6be953f5fc27083"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "562fab290848519f608b69c5455010eea1e34557", "filename": "crates/libanalysis/src/lib.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5a56ac4b72e7f57fb20d49bcf531611f144cc0e0/crates%2Flibanalysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a56ac4b72e7f57fb20d49bcf531611f144cc0e0/crates%2Flibanalysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Flib.rs?ref=5a56ac4b72e7f57fb20d49bcf531611f144cc0e0", "patch": "@@ -94,12 +94,12 @@ impl World {\n         Ok(index.clone())\n     }\n \n-    pub fn world_symbols<'a>(&'a self, query: Query) -> impl Iterator<Item=(&'a Path, &'a FileSymbol)> + 'a {\n+    pub fn world_symbols<'a>(&'a self, mut query: Query) -> impl Iterator<Item=(&'a Path, &'a FileSymbol)> + 'a {\n         self.data.file_map.iter()\n             .flat_map(move |(path, data)| {\n                 let path: &'a Path = path.as_path();\n-                let symbols = data.symbols(path);\n-                query.process(symbols).map(move |s| (path, s))\n+                let symbols = data.symbols();\n+                query.process(symbols).into_iter().map(move |s| (path, s))\n             })\n     }\n \n@@ -125,7 +125,8 @@ impl World {\n \n         let mut query = Query::new(name.to_string());\n         query.exact();\n-        Ok(self.world_symbols(query).take(4).collect())\n+        query.limit(4);\n+        Ok(self.world_symbols(query).collect())\n     }\n \n     fn file_data(&self, path: &Path) -> Result<Arc<FileData>> {\n@@ -178,9 +179,14 @@ impl FileData {\n             })\n     }\n \n-    fn symbols(&self, path: &Path) -> &FileSymbols {\n-        let syntax = self.syntax(path);\n+    fn syntax_transient(&self) -> ast::File {\n+        self.syntax.get().map(|s| s.clone())\n+            .unwrap_or_else(|| ast::File::parse(&self.text))\n+    }\n+\n+    fn symbols(&self) -> &FileSymbols {\n+        let syntax = self.syntax_transient();\n         self.symbols\n-            .get_or_init(|| FileSymbols::new(syntax))\n+            .get_or_init(|| FileSymbols::new(&syntax))\n     }\n }"}, {"sha": "a7ae197e01b5bf2ef638eb8f0a4e778cc4793e12", "filename": "crates/libanalysis/src/symbol_index.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5a56ac4b72e7f57fb20d49bcf531611f144cc0e0/crates%2Flibanalysis%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a56ac4b72e7f57fb20d49bcf531611f144cc0e0/crates%2Flibanalysis%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fsymbol_index.rs?ref=5a56ac4b72e7f57fb20d49bcf531611f144cc0e0", "patch": "@@ -35,6 +35,7 @@ pub struct Query {\n     lowercased: String,\n     only_types: bool,\n     exact: bool,\n+    limit: usize,\n }\n \n impl Query {\n@@ -45,6 +46,7 @@ impl Query {\n             lowercased,\n             only_types: false,\n             exact: false,\n+            limit: usize::max_value()\n         }\n     }\n \n@@ -56,10 +58,14 @@ impl Query {\n         self.exact = true;\n     }\n \n+    pub fn limit(&mut self, limit: usize) {\n+        self.limit = limit\n+    }\n+\n     pub(crate) fn process<'a>(\n-        &self,\n+        &mut self,\n         file: &'a FileSymbols,\n-    ) -> impl Iterator<Item=&'a FileSymbol> + 'a {\n+    ) -> Vec<&'a FileSymbol> {\n         fn is_type(kind: SyntaxKind) -> bool {\n             match kind {\n                 STRUCT | ENUM | TRAIT | TYPE_ITEM => true,\n@@ -70,6 +76,9 @@ impl Query {\n         let mut stream = file.map.search(automaton).into_stream();\n         let mut res = Vec::new();\n         while let Some((_, idx)) = stream.next() {\n+            if self.limit == 0 {\n+                break;\n+            }\n             let idx = idx as usize;\n             let symbol = &file.symbols[idx];\n             if self.only_types && !is_type(symbol.kind) {\n@@ -78,9 +87,10 @@ impl Query {\n             if self.exact && symbol.name != self.query {\n                 continue;\n             }\n-            res.push(symbol)\n+            res.push(symbol);\n+            self.limit -= 1;\n         }\n-        res.into_iter()\n+        res\n     }\n }\n "}, {"sha": "bfdfcb51e646114026b87e21b48c35a8c92ff115", "filename": "crates/server/src/main_loop/handlers.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a56ac4b72e7f57fb20d49bcf531611f144cc0e0/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a56ac4b72e7f57fb20d49bcf531611f144cc0e0/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=5a56ac4b72e7f57fb20d49bcf531611f144cc0e0", "patch": "@@ -110,10 +110,11 @@ pub fn handle_workspace_symbol(\n         if !all_symbols {\n             q.only_types();\n         }\n+        q.limit(128);\n         q\n     };\n \n-    for (path, symbol) in world.world_symbols(query).take(128) {\n+    for (path, symbol) in world.world_symbols(query) {\n         let line_index = world.file_line_index(path)?;\n         let info = SymbolInformation {\n             name: symbol.name.to_string(),"}]}