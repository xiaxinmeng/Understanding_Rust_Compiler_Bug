{"sha": "0aece75cdd40daa4d48484103cfcd36ba13ba076", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZWNlNzVjZGQ0MGRhYTRkNDg0ODQxMDNjZmNkMzZiYTEzYmEwNzY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-11T17:25:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-11T17:36:31Z"}, "message": "Remove dead code", "tree": {"sha": "6cfd504aa174c971242f5f0d16e8d0a7ff216ba2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cfd504aa174c971242f5f0d16e8d0a7ff216ba2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0aece75cdd40daa4d48484103cfcd36ba13ba076", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0aece75cdd40daa4d48484103cfcd36ba13ba076", "html_url": "https://github.com/rust-lang/rust/commit/0aece75cdd40daa4d48484103cfcd36ba13ba076", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0aece75cdd40daa4d48484103cfcd36ba13ba076/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a39bc3ba29351feabcd4a16e12568a9e12818ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a39bc3ba29351feabcd4a16e12568a9e12818ca", "html_url": "https://github.com/rust-lang/rust/commit/7a39bc3ba29351feabcd4a16e12568a9e12818ca"}], "stats": {"total": 95, "additions": 40, "deletions": 55}, "files": [{"sha": "58ae6ce418546cd439fa1d56d0403ca47dfc245d", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0aece75cdd40daa4d48484103cfcd36ba13ba076/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aece75cdd40daa4d48484103cfcd36ba13ba076/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=0aece75cdd40daa4d48484103cfcd36ba13ba076", "patch": "@@ -317,8 +317,7 @@ fn scope_for_offset(\n             if source.file_id != offset.file_id {\n                 return None;\n             }\n-            let syntax_node_ptr =\n-                source.value.either(|it| it.syntax_node_ptr(), |it| it.syntax_node_ptr());\n+            let syntax_node_ptr = source.value.syntax_node_ptr();\n             Some((syntax_node_ptr, scope))\n         })\n         // find containing scope\n@@ -397,8 +396,7 @@ fn adjust(\n             if source.file_id != file_id {\n                 return None;\n             }\n-            let syntax_node_ptr =\n-                source.value.either(|it| it.syntax_node_ptr(), |it| it.syntax_node_ptr());\n+            let syntax_node_ptr = source.value.syntax_node_ptr();\n             Some((syntax_node_ptr, scope))\n         })\n         .map(|(ptr, scope)| (ptr.range(), scope))"}, {"sha": "eafaf48c17eea77cb01a84a8359ca677f2608caa", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0aece75cdd40daa4d48484103cfcd36ba13ba076/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aece75cdd40daa4d48484103cfcd36ba13ba076/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=0aece75cdd40daa4d48484103cfcd36ba13ba076", "patch": "@@ -9,6 +9,8 @@ use drop_bomb::DropBomb;\n use either::Either;\n use hir_expand::{ast_id_map::AstIdMap, hygiene::Hygiene, AstId, HirFileId, InFile, MacroDefId};\n use ra_arena::{map::ArenaMap, Arena};\n+use ra_cfg::CfgOptions;\n+use ra_db::CrateId;\n use ra_prof::profile;\n use ra_syntax::{ast, AstNode, AstPtr};\n use rustc_hash::FxHashMap;\n@@ -24,8 +26,6 @@ use crate::{\n     src::HasSource,\n     AsMacroCall, DefWithBodyId, HasModule, Lookup, ModuleId,\n };\n-use ra_cfg::CfgOptions;\n-use ra_db::CrateId;\n \n /// A subser of Exander that only deals with cfg attributes. We only need it to\n /// avoid cyclic queries in crate def map during enum processing.\n@@ -187,7 +187,7 @@ pub struct Body {\n     pub item_scope: ItemScope,\n }\n \n-pub type ExprPtr = Either<AstPtr<ast::Expr>, AstPtr<ast::RecordField>>;\n+pub type ExprPtr = AstPtr<ast::Expr>;\n pub type ExprSource = InFile<ExprPtr>;\n \n pub type PatPtr = Either<AstPtr<ast::Pat>, AstPtr<ast::SelfParam>>;\n@@ -285,7 +285,7 @@ impl BodySourceMap {\n     }\n \n     pub fn node_expr(&self, node: InFile<&ast::Expr>) -> Option<ExprId> {\n-        let src = node.map(|it| Either::Left(AstPtr::new(it)));\n+        let src = node.map(|it| AstPtr::new(it));\n         self.expr_map.get(&src).cloned()\n     }\n "}, {"sha": "cc2532e88b294197d06280e9c3303ac2cc9721f7", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0aece75cdd40daa4d48484103cfcd36ba13ba076/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aece75cdd40daa4d48484103cfcd36ba13ba076/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=0aece75cdd40daa4d48484103cfcd36ba13ba076", "patch": "@@ -101,7 +101,6 @@ impl ExprCollector<'_> {\n     }\n \n     fn alloc_expr(&mut self, expr: Expr, ptr: AstPtr<ast::Expr>) -> ExprId {\n-        let ptr = Either::Left(ptr);\n         let src = self.expander.to_source(ptr);\n         let id = self.make_expr(expr, Ok(src.clone()));\n         self.source_map.expr_map.insert(src, id);\n@@ -281,7 +280,7 @@ impl ExprCollector<'_> {\n             ast::Expr::ParenExpr(e) => {\n                 let inner = self.collect_expr_opt(e.expr());\n                 // make the paren expr point to the inner expression as well\n-                let src = self.expander.to_source(Either::Left(syntax_ptr));\n+                let src = self.expander.to_source(syntax_ptr);\n                 self.source_map.expr_map.insert(src, inner);\n                 inner\n             }"}, {"sha": "69b527f74498267c6e924fd32281fa9303ba5119", "filename": "crates/ra_hir_ty/src/expr.rs", "status": "modified", "additions": 25, "deletions": 30, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/0aece75cdd40daa4d48484103cfcd36ba13ba076/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aece75cdd40daa4d48484103cfcd36ba13ba076/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs?ref=0aece75cdd40daa4d48484103cfcd36ba13ba076", "patch": "@@ -89,21 +89,19 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         let (_, source_map) = db.body_with_source_map(self.func.into());\n \n         if let Ok(source_ptr) = source_map.expr_syntax(id) {\n-            if let Some(expr) = source_ptr.value.as_ref().left() {\n-                let root = source_ptr.file_syntax(db.upcast());\n-                if let ast::Expr::RecordLit(record_lit) = expr.to_node(&root) {\n-                    if let Some(field_list) = record_lit.record_field_list() {\n-                        let variant_data = variant_data(db.upcast(), variant_def);\n-                        let missed_fields = missed_fields\n-                            .into_iter()\n-                            .map(|idx| variant_data.fields()[idx].name.clone())\n-                            .collect();\n-                        self.sink.push(MissingFields {\n-                            file: source_ptr.file_id,\n-                            field_list: AstPtr::new(&field_list),\n-                            missed_fields,\n-                        })\n-                    }\n+            let root = source_ptr.file_syntax(db.upcast());\n+            if let ast::Expr::RecordLit(record_lit) = &source_ptr.value.to_node(&root) {\n+                if let Some(field_list) = record_lit.record_field_list() {\n+                    let variant_data = variant_data(db.upcast(), variant_def);\n+                    let missed_fields = missed_fields\n+                        .into_iter()\n+                        .map(|idx| variant_data.fields()[idx].name.clone())\n+                        .collect();\n+                    self.sink.push(MissingFields {\n+                        file: source_ptr.file_id,\n+                        field_list: AstPtr::new(&field_list),\n+                        missed_fields,\n+                    })\n                 }\n             }\n         }\n@@ -205,18 +203,16 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         }\n \n         if let Ok(source_ptr) = source_map.expr_syntax(id) {\n-            if let Some(expr) = source_ptr.value.as_ref().left() {\n-                let root = source_ptr.file_syntax(db.upcast());\n-                if let ast::Expr::MatchExpr(match_expr) = expr.to_node(&root) {\n-                    if let (Some(match_expr), Some(arms)) =\n-                        (match_expr.expr(), match_expr.match_arm_list())\n-                    {\n-                        self.sink.push(MissingMatchArms {\n-                            file: source_ptr.file_id,\n-                            match_expr: AstPtr::new(&match_expr),\n-                            arms: AstPtr::new(&arms),\n-                        })\n-                    }\n+            let root = source_ptr.file_syntax(db.upcast());\n+            if let ast::Expr::MatchExpr(match_expr) = &source_ptr.value.to_node(&root) {\n+                if let (Some(match_expr), Some(arms)) =\n+                    (match_expr.expr(), match_expr.match_arm_list())\n+                {\n+                    self.sink.push(MissingMatchArms {\n+                        file: source_ptr.file_id,\n+                        match_expr: AstPtr::new(&match_expr),\n+                        arms: AstPtr::new(&arms),\n+                    })\n                 }\n             }\n         }\n@@ -247,9 +243,8 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             let (_, source_map) = db.body_with_source_map(self.func.into());\n \n             if let Ok(source_ptr) = source_map.expr_syntax(id) {\n-                if let Some(expr) = source_ptr.value.left() {\n-                    self.sink.push(MissingOkInTailExpr { file: source_ptr.file_id, expr });\n-                }\n+                self.sink\n+                    .push(MissingOkInTailExpr { file: source_ptr.file_id, expr: source_ptr.value });\n             }\n         }\n     }"}, {"sha": "81fc0f63a850717f8dfba207e6e267386b91e28c", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0aece75cdd40daa4d48484103cfcd36ba13ba076/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aece75cdd40daa4d48484103cfcd36ba13ba076/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=0aece75cdd40daa4d48484103cfcd36ba13ba076", "patch": "@@ -82,9 +82,7 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n \n         for (expr, ty) in inference_result.type_of_expr.iter() {\n             let syntax_ptr = match body_source_map.expr_syntax(expr) {\n-                Ok(sp) => {\n-                    sp.map(|ast| ast.either(|it| it.syntax_node_ptr(), |it| it.syntax_node_ptr()))\n-                }\n+                Ok(sp) => sp.map(|ast| ast.syntax_node_ptr()),\n                 Err(SyntheticSyntax) => continue,\n             };\n             types.push((syntax_ptr.clone(), ty));"}, {"sha": "63e272fbfa53bd17ee66d630aa0ec76b99d52fed", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aece75cdd40daa4d48484103cfcd36ba13ba076/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aece75cdd40daa4d48484103cfcd36ba13ba076/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=0aece75cdd40daa4d48484103cfcd36ba13ba076", "patch": "@@ -189,8 +189,6 @@ impl ast::StructDef {\n \n impl ast::RecordField {\n     pub fn for_field_name(field_name: &ast::NameRef) -> Option<ast::RecordField> {\n-        eprintln!(\"field_name = {}\", field_name);\n-        dbg!(field_name.syntax().ancestors().nth(6));\n         let candidate =\n             field_name.syntax().parent().and_then(ast::RecordField::cast).or_else(|| {\n                 field_name.syntax().ancestors().nth(4).and_then(ast::RecordField::cast)"}, {"sha": "a796e78b1251cebbc2136400be2804471e494dd2", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0aece75cdd40daa4d48484103cfcd36ba13ba076/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aece75cdd40daa4d48484103cfcd36ba13ba076/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=0aece75cdd40daa4d48484103cfcd36ba13ba076", "patch": "@@ -19,6 +19,11 @@\n //! [RFC]: <https://github.com/rust-lang/rfcs/pull/2256>\n //! [Swift]: <https://github.com/apple/swift/blob/13d593df6f359d0cb2fc81cfaac273297c539455/lib/Syntax/README.md>\n \n+#[allow(unused)]\n+macro_rules! eprintln {\n+    ($($tt:tt)*) => { stdx::eprintln!($($tt)*) };\n+}\n+\n mod syntax_node;\n mod syntax_error;\n mod parsing;"}, {"sha": "e9ee0b888f45cff0a01e42b2418d9c878de1ec70", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0aece75cdd40daa4d48484103cfcd36ba13ba076/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aece75cdd40daa4d48484103cfcd36ba13ba076/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=0aece75cdd40daa4d48484103cfcd36ba13ba076", "patch": "@@ -163,10 +163,7 @@ pub fn analysis_stats(\n                 if let Ok(src) = src {\n                     let original_file = src.file_id.original_file(db);\n                     let line_index = host.analysis().file_line_index(original_file).unwrap();\n-                    let text_range = src.value.either(\n-                        |it| it.syntax_node_ptr().range(),\n-                        |it| it.syntax_node_ptr().range(),\n-                    );\n+                    let text_range = src.value.syntax_node_ptr().range();\n                     let (start, end) = (\n                         line_index.line_col(text_range.start()),\n                         line_index.line_col(text_range.end()),\n@@ -192,12 +189,7 @@ pub fn analysis_stats(\n                         // FIXME: it might be nice to have a function (on Analysis?) that goes from Source<T> -> (LineCol, LineCol) directly\n                         // But also, we should just turn the type mismatches into diagnostics and provide these\n                         let root = db.parse_or_expand(src.file_id).unwrap();\n-                        let node = src.map(|e| {\n-                            e.either(\n-                                |p| p.to_node(&root).syntax().clone(),\n-                                |p| p.to_node(&root).syntax().clone(),\n-                            )\n-                        });\n+                        let node = src.map(|e| e.to_node(&root).syntax().clone());\n                         let original_range = original_range(db, node.as_ref());\n                         let path = db.file_relative_path(original_range.file_id);\n                         let line_index ="}]}