{"sha": "df25bb65eb56aa3815226c74190079be3904c13c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMjViYjY1ZWI1NmFhMzgxNTIyNmM3NDE5MDA3OWJlMzkwNGMxM2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-30T22:31:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-30T22:31:57Z"}, "message": "auto merge of #11125 : vmx/rust/rational, r=huonw\n\nThe Ratio::rational() converts a float (f32 and f64) into a\r\nRatio<BigInt>.\r\n\r\nCloses #9838", "tree": {"sha": "f1d24e017ba5e26e610023a28c4ace72fe3e16b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1d24e017ba5e26e610023a28c4ace72fe3e16b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df25bb65eb56aa3815226c74190079be3904c13c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df25bb65eb56aa3815226c74190079be3904c13c", "html_url": "https://github.com/rust-lang/rust/commit/df25bb65eb56aa3815226c74190079be3904c13c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df25bb65eb56aa3815226c74190079be3904c13c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1502b1197b78624aad5180fa8eff3f77f6f0abfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1502b1197b78624aad5180fa8eff3f77f6f0abfc", "html_url": "https://github.com/rust-lang/rust/commit/1502b1197b78624aad5180fa8eff3f77f6f0abfc"}, {"sha": "e0a6910f7092ffff33331a08f2fafb55eed46835", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0a6910f7092ffff33331a08f2fafb55eed46835", "html_url": "https://github.com/rust-lang/rust/commit/e0a6910f7092ffff33331a08f2fafb55eed46835"}], "stats": {"total": 61, "additions": 60, "deletions": 1}, "files": [{"sha": "3ab9f99d5cf52a2e8c20e325d2e3a74b704430f0", "filename": "src/libextra/num/rational.rs", "status": "modified", "additions": 60, "deletions": 1, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/df25bb65eb56aa3815226c74190079be3904c13c/src%2Flibextra%2Fnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df25bb65eb56aa3815226c74190079be3904c13c/src%2Flibextra%2Fnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Frational.rs?ref=df25bb65eb56aa3815226c74190079be3904c13c", "patch": "@@ -14,7 +14,7 @@\n use std::cmp;\n use std::from_str::FromStr;\n use std::num::{Zero,One,ToStrRadix,FromStrRadix,Round};\n-use super::bigint::BigInt;\n+use super::bigint::{BigInt, BigUint, Sign, Plus, Minus};\n \n /// Represents the ratio between 2 numbers.\n #[deriving(Clone)]\n@@ -107,6 +107,27 @@ impl<T: Clone + Integer + Ord>\n     }\n }\n \n+impl Ratio<BigInt> {\n+    /// Converts a float into a rational number\n+    pub fn from_float<T: Float>(f: T) -> Option<BigRational> {\n+        if !f.is_finite() {\n+            return None;\n+        }\n+        let (mantissa, exponent, sign) = f.integer_decode();\n+        let bigint_sign: Sign = if sign == 1 { Plus } else { Minus };\n+        if exponent < 0 {\n+            let one: BigInt = One::one();\n+            let denom: BigInt = one << ((-exponent) as uint);\n+            let numer: BigUint = FromPrimitive::from_u64(mantissa).unwrap();\n+            Some(Ratio::new(BigInt::from_biguint(bigint_sign, numer), denom))\n+        } else {\n+            let mut numer: BigUint = FromPrimitive::from_u64(mantissa).unwrap();\n+            numer = numer << (exponent as uint);\n+            Some(Ratio::from_integer(BigInt::from_biguint(bigint_sign, numer)))\n+        }\n+    }\n+}\n+\n /* Comparisons */\n \n // comparing a/b and c/d is the same as comparing a*d and b*c, so we\n@@ -621,4 +642,42 @@ mod test {\n             test(s);\n         }\n     }\n+\n+    #[test]\n+    fn test_from_float() {\n+        fn test<T: Float>(given: T, (numer, denom): (&str, &str)) {\n+            let ratio: BigRational = Ratio::from_float(given).unwrap();\n+            assert_eq!(ratio, Ratio::new(\n+                FromStr::from_str(numer).unwrap(),\n+                FromStr::from_str(denom).unwrap()));\n+        }\n+\n+        // f32\n+        test(3.14159265359f32, (\"13176795\", \"4194304\"));\n+        test(2f32.pow(&100.), (\"1267650600228229401496703205376\", \"1\"));\n+        test(-2f32.pow(&100.), (\"-1267650600228229401496703205376\", \"1\"));\n+        test(1.0 / 2f32.pow(&100.), (\"1\", \"1267650600228229401496703205376\"));\n+        test(684729.48391f32, (\"1369459\", \"2\"));\n+        test(-8573.5918555f32, (\"-4389679\", \"512\"));\n+\n+        // f64\n+        test(3.14159265359f64, (\"3537118876014453\", \"1125899906842624\"));\n+        test(2f64.pow(&100.), (\"1267650600228229401496703205376\", \"1\"));\n+        test(-2f64.pow(&100.), (\"-1267650600228229401496703205376\", \"1\"));\n+        test(684729.48391f64, (\"367611342500051\", \"536870912\"));\n+        test(-8573.5918555, (\"-4713381968463931\", \"549755813888\"));\n+        test(1.0 / 2f64.pow(&100.), (\"1\", \"1267650600228229401496703205376\"));\n+    }\n+\n+    #[test]\n+    fn test_from_float_fail() {\n+        use std::{f32, f64};\n+\n+        assert_eq!(Ratio::from_float(f32::NAN), None);\n+        assert_eq!(Ratio::from_float(f32::INFINITY), None);\n+        assert_eq!(Ratio::from_float(f32::NEG_INFINITY), None);\n+        assert_eq!(Ratio::from_float(f64::NAN), None);\n+        assert_eq!(Ratio::from_float(f64::INFINITY), None);\n+        assert_eq!(Ratio::from_float(f64::NEG_INFINITY), None);\n+    }\n }"}]}