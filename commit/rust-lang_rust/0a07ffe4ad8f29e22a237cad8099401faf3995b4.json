{"sha": "0a07ffe4ad8f29e22a237cad8099401faf3995b4", "node_id": "C_kwDOAAsO6NoAKDBhMDdmZmU0YWQ4ZjI5ZTIyYTIzN2NhZDgwOTk0MDFmYWYzOTk1YjQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-06T12:27:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-06T12:27:43Z"}, "message": "Rollup merge of #105287 - compiler-errors:issue-105275, r=eholk\n\nSynthesize substitutions for bad auto traits in dyn types\n\nAuto traits are stored as just `DefId`s inside a `dyn Trait`'s existential predicates list. This is usually fine, since auto traits are forbidden to have generics -- but this becomes a problem for an ill-formed auto trait.\n\nBut since this will always result in an error, just synthesize some dummy (error) substitutions which are used at least to keep trait selection code happy about the number of substs in a trait ref.\n\nFixes #104808", "tree": {"sha": "3addaf85970f6a3a833a9f00c4c1cc857b377aad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3addaf85970f6a3a833a9f00c4c1cc857b377aad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a07ffe4ad8f29e22a237cad8099401faf3995b4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjjzU/CRBK7hj4Ov3rIwAAJkAIAEEmI/9NQoFWQljNoIPFPKdB\nEqvTJAkjM9U9teiBMBtag7VcmAD6UOKos1Jws6PMKyKnZvJDk2lrOe+NmcubkZH6\nwwT/k+GTX+DoFPK7DVi9Fjj8g/ShNk77B9qfhrSCQ3DY3xsX7+bfR7gvIu1jrb/6\ncAX2LEf0d3Z0+ENCSozR82f6NlSRPyPD56gAdpNGn2OovQdHd/DsmzOA987rPGg/\n+h6UikuznCtcVcVfNBvHWbMPzh0TKyxWTs+3r0OJebuVbAzzFcC52h7TnHXxw+u4\njbgxikjcdKbu6nRJsrGU4GwYs620yielb4wQWSqLoZv2ybfWEL5YCtkffS9sORk=\n=3ISV\n-----END PGP SIGNATURE-----\n", "payload": "tree 3addaf85970f6a3a833a9f00c4c1cc857b377aad\nparent ddb98e0aace469b3bc361cb273ca44e32d1c3aa8\nparent 6dc2aa26759578f09974041f19767a75b8c6320e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670329663 +0100\ncommitter GitHub <noreply@github.com> 1670329663 +0100\n\nRollup merge of #105287 - compiler-errors:issue-105275, r=eholk\n\nSynthesize substitutions for bad auto traits in dyn types\n\nAuto traits are stored as just `DefId`s inside a `dyn Trait`'s existential predicates list. This is usually fine, since auto traits are forbidden to have generics -- but this becomes a problem for an ill-formed auto trait.\n\nBut since this will always result in an error, just synthesize some dummy (error) substitutions which are used at least to keep trait selection code happy about the number of substs in a trait ref.\n\nFixes #104808\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a07ffe4ad8f29e22a237cad8099401faf3995b4", "html_url": "https://github.com/rust-lang/rust/commit/0a07ffe4ad8f29e22a237cad8099401faf3995b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a07ffe4ad8f29e22a237cad8099401faf3995b4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddb98e0aace469b3bc361cb273ca44e32d1c3aa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddb98e0aace469b3bc361cb273ca44e32d1c3aa8", "html_url": "https://github.com/rust-lang/rust/commit/ddb98e0aace469b3bc361cb273ca44e32d1c3aa8"}, {"sha": "6dc2aa26759578f09974041f19767a75b8c6320e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dc2aa26759578f09974041f19767a75b8c6320e", "html_url": "https://github.com/rust-lang/rust/commit/6dc2aa26759578f09974041f19767a75b8c6320e"}], "stats": {"total": 65, "additions": 63, "deletions": 2}, "files": [{"sha": "48329da3e63326049a5878ba502c28f0b1c73a19", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0a07ffe4ad8f29e22a237cad8099401faf3995b4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a07ffe4ad8f29e22a237cad8099401faf3995b4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=0a07ffe4ad8f29e22a237cad8099401faf3995b4", "patch": "@@ -101,6 +101,20 @@ impl GenericParamDef {\n             _ => None,\n         }\n     }\n+\n+    pub fn to_error<'tcx>(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        preceding_substs: &[ty::GenericArg<'tcx>],\n+    ) -> ty::GenericArg<'tcx> {\n+        match &self.kind {\n+            ty::GenericParamDefKind::Lifetime => tcx.lifetimes.re_static.into(),\n+            ty::GenericParamDefKind::Type { .. } => tcx.ty_error().into(),\n+            ty::GenericParamDefKind::Const { .. } => {\n+                tcx.const_error(tcx.bound_type_of(self.def_id).subst(tcx, preceding_substs)).into()\n+            }\n+        }\n+    }\n }\n \n #[derive(Default)]"}, {"sha": "1eec119616ea7cdee5eadc64d0ab86f92a8dfc05", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0a07ffe4ad8f29e22a237cad8099401faf3995b4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a07ffe4ad8f29e22a237cad8099401faf3995b4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=0a07ffe4ad8f29e22a237cad8099401faf3995b4", "patch": "@@ -722,8 +722,17 @@ impl<'tcx> PolyExistentialPredicate<'tcx> {\n                 self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)\n             }\n             ExistentialPredicate::AutoTrait(did) => {\n-                let trait_ref = self.rebind(tcx.mk_trait_ref(did, [self_ty]));\n-                trait_ref.without_const().to_predicate(tcx)\n+                let generics = tcx.generics_of(did);\n+                let trait_ref = if generics.params.len() == 1 {\n+                    tcx.mk_trait_ref(did, [self_ty])\n+                } else {\n+                    // If this is an ill-formed auto trait, then synthesize\n+                    // new error substs for the missing generics.\n+                    let err_substs =\n+                        ty::InternalSubsts::extend_with_error(tcx, did, &[self_ty.into()]);\n+                    tcx.mk_trait_ref(did, err_substs)\n+                };\n+                self.rebind(trait_ref).without_const().to_predicate(tcx)\n             }\n         }\n     }"}, {"sha": "23507d280459230849d781b5f66205a8a12e7c6c", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0a07ffe4ad8f29e22a237cad8099401faf3995b4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a07ffe4ad8f29e22a237cad8099401faf3995b4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=0a07ffe4ad8f29e22a237cad8099401faf3995b4", "patch": "@@ -352,6 +352,22 @@ impl<'tcx> InternalSubsts<'tcx> {\n         }\n     }\n \n+    // Extend an `original_substs` list to the full number of substs expected by `def_id`,\n+    // filling in the missing parameters with error ty/ct or 'static regions.\n+    pub fn extend_with_error(\n+        tcx: TyCtxt<'tcx>,\n+        def_id: DefId,\n+        original_substs: &[GenericArg<'tcx>],\n+    ) -> SubstsRef<'tcx> {\n+        ty::InternalSubsts::for_item(tcx, def_id, |def, substs| {\n+            if let Some(subst) = original_substs.get(def.index as usize) {\n+                *subst\n+            } else {\n+                def.to_error(tcx, substs)\n+            }\n+        })\n+    }\n+\n     #[inline]\n     pub fn types(&'tcx self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'tcx {\n         self.iter()"}, {"sha": "3f8ac14c72d9538078dcf3317166b6e80a5f6750", "filename": "src/test/ui/auto-traits/bad-generics-on-dyn.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0a07ffe4ad8f29e22a237cad8099401faf3995b4/src%2Ftest%2Fui%2Fauto-traits%2Fbad-generics-on-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a07ffe4ad8f29e22a237cad8099401faf3995b4/src%2Ftest%2Fui%2Fauto-traits%2Fbad-generics-on-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fbad-generics-on-dyn.rs?ref=0a07ffe4ad8f29e22a237cad8099401faf3995b4", "patch": "@@ -0,0 +1,11 @@\n+#![feature(auto_traits)]\n+\n+auto trait Trait1<'a> {}\n+//~^ ERROR auto traits cannot have generic parameters\n+\n+fn f<'a>(x: &dyn Trait1<'a>)\n+{}\n+\n+fn main() {\n+    f(&1);\n+}"}, {"sha": "ade69ced6060d32cff0b96abcf4eafe1aa999d81", "filename": "src/test/ui/auto-traits/bad-generics-on-dyn.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0a07ffe4ad8f29e22a237cad8099401faf3995b4/src%2Ftest%2Fui%2Fauto-traits%2Fbad-generics-on-dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a07ffe4ad8f29e22a237cad8099401faf3995b4/src%2Ftest%2Fui%2Fauto-traits%2Fbad-generics-on-dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fbad-generics-on-dyn.stderr?ref=0a07ffe4ad8f29e22a237cad8099401faf3995b4", "patch": "@@ -0,0 +1,11 @@\n+error[E0567]: auto traits cannot have generic parameters\n+  --> $DIR/bad-generics-on-dyn.rs:3:18\n+   |\n+LL | auto trait Trait1<'a> {}\n+   |            ------^^^^ help: remove the parameters\n+   |            |\n+   |            auto trait cannot have generic parameters\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0567`."}]}