{"sha": "c60cc439858a028d8ecc2be1e7468c04cc36e8f2", "node_id": "C_kwDOAAsO6NoAKGM2MGNjNDM5ODU4YTAyOGQ4ZWNjMmJlMWU3NDY4YzA0Y2MzNmU4ZjI", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-02-05T12:28:12Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-02-05T14:19:52Z"}, "message": "rustc_metadata: Encode/decode some `LazyArray`s without an `Option`\n\nAlso add asserts to decoding `LazyArray`s with `Option`", "tree": {"sha": "dc9241e3374679a348b7ae06a4dc6d446cda33d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc9241e3374679a348b7ae06a4dc6d446cda33d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c60cc439858a028d8ecc2be1e7468c04cc36e8f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c60cc439858a028d8ecc2be1e7468c04cc36e8f2", "html_url": "https://github.com/rust-lang/rust/commit/c60cc439858a028d8ecc2be1e7468c04cc36e8f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c60cc439858a028d8ecc2be1e7468c04cc36e8f2/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb5f2d3980aa80fd91173401b167d55ec431a512", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb5f2d3980aa80fd91173401b167d55ec431a512", "html_url": "https://github.com/rust-lang/rust/commit/eb5f2d3980aa80fd91173401b167d55ec431a512"}], "stats": {"total": 80, "additions": 45, "deletions": 35}, "files": [{"sha": "06c8c32c4b301c988b4fbb63e79c6344552d74cc", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c60cc439858a028d8ecc2be1e7468c04cc36e8f2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60cc439858a028d8ecc2be1e7468c04cc36e8f2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=c60cc439858a028d8ecc2be1e7468c04cc36e8f2", "patch": "@@ -864,7 +864,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 .tables\n                 .children\n                 .get(self, index)\n-                .unwrap_or_else(LazyArray::default)\n+                .expect(\"fields are not encoded for a variant\")\n                 .decode(self)\n                 .map(|index| ty::FieldDef {\n                     did: self.local_def_id(index),\n@@ -896,7 +896,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 .tables\n                 .children\n                 .get(self, item_id)\n-                .unwrap_or_else(LazyArray::default)\n+                .expect(\"variants are not encoded for an enum\")\n                 .decode(self)\n                 .filter_map(|index| {\n                     let kind = self.def_kind(index);\n@@ -1045,7 +1045,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .tables\n             .fn_arg_names\n             .get(self, id)\n-            .unwrap_or_else(LazyArray::default)\n+            .expect(\"argument names not encoded for a function\")\n             .decode((self, sess))\n             .nth(0)\n             .map_or(false, |ident| ident.name == kw::SelfLower)\n@@ -1060,21 +1060,20 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .tables\n             .children\n             .get(self, id)\n-            .unwrap_or_else(LazyArray::default)\n+            .expect(\"associated items not encoded for an item\")\n             .decode((self, sess))\n             .map(move |child_index| self.local_def_id(child_index))\n     }\n \n     fn get_associated_item(self, id: DefIndex, sess: &'a Session) -> ty::AssocItem {\n         let name = self.item_name(id);\n \n-        let kind = match self.def_kind(id) {\n-            DefKind::AssocConst => ty::AssocKind::Const,\n-            DefKind::AssocFn => ty::AssocKind::Fn,\n-            DefKind::AssocTy => ty::AssocKind::Type,\n+        let (kind, has_self) = match self.def_kind(id) {\n+            DefKind::AssocConst => (ty::AssocKind::Const, false),\n+            DefKind::AssocFn => (ty::AssocKind::Fn, self.get_fn_has_self_parameter(id, sess)),\n+            DefKind::AssocTy => (ty::AssocKind::Type, false),\n             _ => bug!(\"cannot get associated-item of `{:?}`\", self.def_key(id)),\n         };\n-        let has_self = self.get_fn_has_self_parameter(id, sess);\n         let container = self.root.tables.assoc_container.get(self, id).unwrap();\n \n         ty::AssocItem {\n@@ -1131,7 +1130,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .tables\n             .children\n             .get(self, id)\n-            .unwrap_or_else(LazyArray::default)\n+            .expect(\"fields not encoded for a struct\")\n             .decode(self)\n             .map(move |index| respan(self.get_span(index, sess), self.item_name(index)))\n     }\n@@ -1144,7 +1143,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .tables\n             .children\n             .get(self, id)\n-            .unwrap_or_else(LazyArray::default)\n+            .expect(\"fields not encoded for a struct\")\n             .decode(self)\n             .map(move |field_index| self.get_visibility(field_index))\n     }\n@@ -1159,7 +1158,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 .tables\n                 .inherent_impls\n                 .get(self, id)\n-                .unwrap_or_else(LazyArray::default)\n                 .decode(self)\n                 .map(|index| self.local_def_id(index)),\n         )\n@@ -1174,7 +1172,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 .tables\n                 .inherent_impls\n                 .get(self, ty_index)\n-                .unwrap_or_else(LazyArray::default)\n                 .decode(self)\n                 .map(move |impl_index| (ty_def_id, self.local_def_id(impl_index)))\n         })"}, {"sha": "07cc84ab95368480a2ec09b80fe0bad29ed63e0c", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c60cc439858a028d8ecc2be1e7468c04cc36e8f2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60cc439858a028d8ecc2be1e7468c04cc36e8f2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=c60cc439858a028d8ecc2be1e7468c04cc36e8f2", "patch": "@@ -1,6 +1,7 @@\n use crate::creader::{CStore, LoadedMacro};\n use crate::foreign_modules;\n use crate::native_libs;\n+use crate::rmeta::table::IsDefault;\n use crate::rmeta::AttrFlags;\n \n use rustc_ast as ast;\n@@ -88,6 +89,14 @@ macro_rules! provide_one {\n             }\n         }\n     };\n+    ($tcx:ident, $def_id:ident, $other:ident, $cdata:ident, $name:ident => { table_defaulted_array }) => {\n+        provide_one! {\n+            $tcx, $def_id, $other, $cdata, $name => {\n+                let lazy = $cdata.root.tables.$name.get($cdata, $def_id.index);\n+                if lazy.is_default() { &[] } else { $tcx.arena.alloc_from_iter(lazy.decode(($cdata, $tcx))) }\n+            }\n+        }\n+    };\n     ($tcx:ident, $def_id:ident, $other:ident, $cdata:ident, $name:ident => { table_direct }) => {\n         provide_one! {\n             $tcx, $def_id, $other, $cdata, $name => {\n@@ -187,10 +196,10 @@ impl IntoArgs for (CrateNum, SimplifiedType) {\n }\n \n provide! { tcx, def_id, other, cdata,\n-    explicit_item_bounds => { table }\n+    explicit_item_bounds => { table_defaulted_array }\n     explicit_predicates_of => { table }\n     generics_of => { table }\n-    inferred_outlives_of => { table }\n+    inferred_outlives_of => { table_defaulted_array }\n     super_predicates_of => { table }\n     type_of => { table }\n     variances_of => { table }"}, {"sha": "07c37b296219f1d65888ec3cdd9f1fdbeb9c3470", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c60cc439858a028d8ecc2be1e7468c04cc36e8f2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60cc439858a028d8ecc2be1e7468c04cc36e8f2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=c60cc439858a028d8ecc2be1e7468c04cc36e8f2", "patch": "@@ -389,6 +389,16 @@ macro_rules! record_array {\n     }};\n }\n \n+macro_rules! record_defaulted_array {\n+    ($self:ident.$tables:ident.$table:ident[$def_id:expr] <- $value:expr) => {{\n+        {\n+            let value = $value;\n+            let lazy = $self.lazy_array(value);\n+            $self.$tables.$table.set($def_id.index, lazy);\n+        }\n+    }};\n+}\n+\n impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     fn emit_lazy_distance(&mut self, position: NonZeroUsize) {\n         let pos = position.get();\n@@ -1190,9 +1200,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 record!(self.tables.generics_of[def_id] <- g);\n                 record!(self.tables.explicit_predicates_of[def_id] <- self.tcx.explicit_predicates_of(def_id));\n                 let inferred_outlives = self.tcx.inferred_outlives_of(def_id);\n-                if !inferred_outlives.is_empty() {\n-                    record_array!(self.tables.inferred_outlives_of[def_id] <- inferred_outlives);\n-                }\n+                record_defaulted_array!(self.tables.inferred_outlives_of[def_id] <- inferred_outlives);\n             }\n             if should_encode_type(tcx, local_id, def_kind) {\n                 record!(self.tables.type_of[def_id] <- self.tcx.type_of(def_id));\n@@ -1213,15 +1221,12 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 record!(self.tables.trait_impl_trait_tys[def_id] <- table);\n             }\n         }\n+\n         let inherent_impls = tcx.with_stable_hashing_context(|hcx| {\n             tcx.crate_inherent_impls(()).inherent_impls.to_sorted(&hcx, true)\n         });\n-\n-        for (def_id, implementations) in inherent_impls {\n-            if implementations.is_empty() {\n-                continue;\n-            }\n-            record_array!(self.tables.inherent_impls[def_id.to_def_id()] <- implementations.iter().map(|&def_id| {\n+        for (def_id, impls) in inherent_impls {\n+            record_defaulted_array!(self.tables.inherent_impls[def_id.to_def_id()] <- impls.iter().map(|def_id| {\n                 assert!(def_id.is_local());\n                 def_id.index\n             }));\n@@ -1330,9 +1335,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     fn encode_explicit_item_bounds(&mut self, def_id: DefId) {\n         debug!(\"EncodeContext::encode_explicit_item_bounds({:?})\", def_id);\n         let bounds = self.tcx.explicit_item_bounds(def_id);\n-        if !bounds.is_empty() {\n-            record_array!(self.tables.explicit_item_bounds[def_id] <- bounds);\n-        }\n+        record_defaulted_array!(self.tables.explicit_item_bounds[def_id] <- bounds);\n     }\n \n     fn encode_info_for_trait_item(&mut self, def_id: DefId) {"}, {"sha": "f0b9bf045372c10c587868f0e121d6a4313aaedc", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c60cc439858a028d8ecc2be1e7468c04cc36e8f2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60cc439858a028d8ecc2be1e7468c04cc36e8f2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=c60cc439858a028d8ecc2be1e7468c04cc36e8f2", "patch": "@@ -350,6 +350,9 @@ define_tables! {\n     is_macro_rules: Table<DefIndex, bool>,\n     is_type_alias_impl_trait: Table<DefIndex, bool>,\n     attr_flags: Table<DefIndex, AttrFlags>,\n+    explicit_item_bounds: Table<DefIndex, LazyArray<(ty::Predicate<'static>, Span)>>,\n+    inferred_outlives_of: Table<DefIndex, LazyArray<(ty::Clause<'static>, Span)>>,\n+    inherent_impls: Table<DefIndex, LazyArray<DefIndex>>,\n \n - optional:\n     attributes: Table<DefIndex, LazyArray<ast::Attribute>>,\n@@ -362,12 +365,8 @@ define_tables! {\n     lookup_const_stability: Table<DefIndex, LazyValue<attr::ConstStability>>,\n     lookup_default_body_stability: Table<DefIndex, LazyValue<attr::DefaultBodyStability>>,\n     lookup_deprecation_entry: Table<DefIndex, LazyValue<attr::Deprecation>>,\n-    // As an optimization, a missing entry indicates an empty `&[]`.\n-    explicit_item_bounds: Table<DefIndex, LazyArray<(ty::Predicate<'static>, Span)>>,\n     explicit_predicates_of: Table<DefIndex, LazyValue<ty::GenericPredicates<'static>>>,\n     generics_of: Table<DefIndex, LazyValue<ty::Generics>>,\n-    // As an optimization, a missing entry indicates an empty `&[]`.\n-    inferred_outlives_of: Table<DefIndex, LazyArray<(ty::Clause<'static>, Span)>>,\n     super_predicates_of: Table<DefIndex, LazyValue<ty::GenericPredicates<'static>>>,\n     type_of: Table<DefIndex, LazyValue<Ty<'static>>>,\n     variances_of: Table<DefIndex, LazyArray<ty::Variance>>,\n@@ -395,7 +394,6 @@ define_tables! {\n     generator_kind: Table<DefIndex, LazyValue<hir::GeneratorKind>>,\n     trait_def: Table<DefIndex, LazyValue<ty::TraitDef>>,\n     trait_item_def_id: Table<DefIndex, RawDefId>,\n-    inherent_impls: Table<DefIndex, LazyArray<DefIndex>>,\n     expn_that_defined: Table<DefIndex, LazyValue<ExpnId>>,\n     unused_generic_params: Table<DefIndex, LazyValue<UnusedGenericParams>>,\n     params_in_repr: Table<DefIndex, LazyValue<BitSet<u32>>>,"}, {"sha": "a6e0f13f69830350d8c55611c635841edc461212", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c60cc439858a028d8ecc2be1e7468c04cc36e8f2/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60cc439858a028d8ecc2be1e7468c04cc36e8f2/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=c60cc439858a028d8ecc2be1e7468c04cc36e8f2", "patch": "@@ -22,14 +22,17 @@ fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n         hir::ItemKind::Impl(ref impl_) => tcx.arena.alloc_from_iter(\n             impl_.items.iter().map(|impl_item_ref| impl_item_ref.id.owner_id.to_def_id()),\n         ),\n-        hir::ItemKind::TraitAlias(..) => &[],\n         _ => span_bug!(item.span, \"associated_item_def_ids: not impl or trait\"),\n     }\n }\n \n fn associated_items(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AssocItems<'_> {\n-    let items = tcx.associated_item_def_ids(def_id).iter().map(|did| tcx.associated_item(*did));\n-    ty::AssocItems::new(items)\n+    if tcx.is_trait_alias(def_id) {\n+        ty::AssocItems::new(Vec::new())\n+    } else {\n+        let items = tcx.associated_item_def_ids(def_id).iter().map(|did| tcx.associated_item(*did));\n+        ty::AssocItems::new(items)\n+    }\n }\n \n fn impl_item_implementor_ids(tcx: TyCtxt<'_>, impl_id: DefId) -> FxHashMap<DefId, DefId> {"}]}