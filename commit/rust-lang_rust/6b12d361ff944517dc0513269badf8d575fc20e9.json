{"sha": "6b12d361ff944517dc0513269badf8d575fc20e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMTJkMzYxZmY5NDQ1MTdkYzA1MTMyNjliYWRmOGQ1NzVmYzIwZTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-17T06:46:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-17T06:46:31Z"}, "message": "Auto merge of #49882 - Zoxc:sync-misc2, r=michaelwoerister\n\nMore thread-safety changes\n\nr? @michaelwoerister", "tree": {"sha": "afd499a39e789e0ad08786de79d03347ee9366c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afd499a39e789e0ad08786de79d03347ee9366c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b12d361ff944517dc0513269badf8d575fc20e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b12d361ff944517dc0513269badf8d575fc20e9", "html_url": "https://github.com/rust-lang/rust/commit/6b12d361ff944517dc0513269badf8d575fc20e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b12d361ff944517dc0513269badf8d575fc20e9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "186db76159c57f4af442d8aa5e7c1a330ee0004b", "url": "https://api.github.com/repos/rust-lang/rust/commits/186db76159c57f4af442d8aa5e7c1a330ee0004b", "html_url": "https://github.com/rust-lang/rust/commit/186db76159c57f4af442d8aa5e7c1a330ee0004b"}, {"sha": "fe636373505b610447b952200d91ae2708ce5947", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe636373505b610447b952200d91ae2708ce5947", "html_url": "https://github.com/rust-lang/rust/commit/fe636373505b610447b952200d91ae2708ce5947"}], "stats": {"total": 212, "additions": 159, "deletions": 53}, "files": [{"sha": "e03d9454d062fc982de12ff08ecdde4a39536a25", "filename": "src/Cargo.lock", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b12d361ff944517dc0513269badf8d575fc20e9/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6b12d361ff944517dc0513269badf8d575fc20e9/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=6b12d361ff944517dc0513269badf8d575fc20e9", "patch": "@@ -66,6 +66,9 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n [[package]]\n name = \"arena\"\n version = \"0.0.0\"\n+dependencies = [\n+ \"rustc_data_structures 0.0.0\",\n+]\n \n [[package]]\n name = \"arrayvec\""}, {"sha": "e2af67dd9286138e61ef1196d4d7a8487a80c20c", "filename": "src/libarena/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b12d361ff944517dc0513269badf8d575fc20e9/src%2Flibarena%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6b12d361ff944517dc0513269badf8d575fc20e9/src%2Flibarena%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2FCargo.toml?ref=6b12d361ff944517dc0513269badf8d575fc20e9", "patch": "@@ -7,3 +7,6 @@ version = \"0.0.0\"\n name = \"arena\"\n path = \"lib.rs\"\n crate-type = [\"dylib\"]\n+\n+[dependencies]\n+rustc_data_structures = { path = \"../librustc_data_structures\" }\n\\ No newline at end of file"}, {"sha": "c79e0e14e3d8b4d1ab65050153537f716e37508b", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/6b12d361ff944517dc0513269badf8d575fc20e9/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b12d361ff944517dc0513269badf8d575fc20e9/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=6b12d361ff944517dc0513269badf8d575fc20e9", "patch": "@@ -32,6 +32,9 @@\n #![allow(deprecated)]\n \n extern crate alloc;\n+extern crate rustc_data_structures;\n+\n+use rustc_data_structures::sync::MTLock;\n \n use std::cell::{Cell, RefCell};\n use std::cmp;\n@@ -290,6 +293,8 @@ pub struct DroplessArena {\n     chunks: RefCell<Vec<TypedArenaChunk<u8>>>,\n }\n \n+unsafe impl Send for DroplessArena {}\n+\n impl DroplessArena {\n     pub fn new() -> DroplessArena {\n         DroplessArena {\n@@ -410,6 +415,72 @@ impl DroplessArena {\n     }\n }\n \n+pub struct SyncTypedArena<T> {\n+    lock: MTLock<TypedArena<T>>,\n+}\n+\n+impl<T> SyncTypedArena<T> {\n+    #[inline(always)]\n+    pub fn new() -> SyncTypedArena<T> {\n+        SyncTypedArena {\n+            lock: MTLock::new(TypedArena::new())\n+        }\n+    }\n+\n+    #[inline(always)]\n+    pub fn alloc(&self, object: T) -> &mut T {\n+        // Extend the lifetime of the result since it's limited to the lock guard\n+        unsafe { &mut *(self.lock.lock().alloc(object) as *mut T) }\n+    }\n+\n+    #[inline(always)]\n+    pub fn alloc_slice(&self, slice: &[T]) -> &mut [T]\n+    where\n+        T: Copy,\n+    {\n+        // Extend the lifetime of the result since it's limited to the lock guard\n+        unsafe { &mut *(self.lock.lock().alloc_slice(slice) as *mut [T]) }\n+    }\n+\n+    #[inline(always)]\n+    pub fn clear(&mut self) {\n+        self.lock.get_mut().clear();\n+    }\n+}\n+\n+pub struct SyncDroplessArena {\n+    lock: MTLock<DroplessArena>,\n+}\n+\n+impl SyncDroplessArena {\n+    #[inline(always)]\n+    pub fn new() -> SyncDroplessArena {\n+        SyncDroplessArena {\n+            lock: MTLock::new(DroplessArena::new())\n+        }\n+    }\n+\n+    #[inline(always)]\n+    pub fn in_arena<T: ?Sized>(&self, ptr: *const T) -> bool {\n+        self.lock.lock().in_arena(ptr)\n+    }\n+\n+    #[inline(always)]\n+    pub fn alloc<T>(&self, object: T) -> &mut T {\n+        // Extend the lifetime of the result since it's limited to the lock guard\n+        unsafe { &mut *(self.lock.lock().alloc(object) as *mut T) }\n+    }\n+\n+    #[inline(always)]\n+    pub fn alloc_slice<T>(&self, slice: &[T]) -> &mut [T]\n+    where\n+        T: Copy,\n+    {\n+        // Extend the lifetime of the result since it's limited to the lock guard\n+        unsafe { &mut *(self.lock.lock().alloc_slice(slice) as *mut [T]) }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     extern crate test;"}, {"sha": "b88185c3154a9fea222d470159aa1afd4ee2dc17", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b12d361ff944517dc0513269badf8d575fc20e9/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b12d361ff944517dc0513269badf8d575fc20e9/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=6b12d361ff944517dc0513269badf8d575fc20e9", "patch": "@@ -32,7 +32,7 @@ use hir::print::Nested;\n use hir::svh::Svh;\n use util::nodemap::{DefIdMap, FxHashMap};\n \n-use arena::TypedArena;\n+use arena::SyncTypedArena;\n use std::io;\n use ty::TyCtxt;\n \n@@ -219,15 +219,15 @@ impl<'hir> MapEntry<'hir> {\n pub struct Forest {\n     krate: Crate,\n     pub dep_graph: DepGraph,\n-    inlined_bodies: TypedArena<Body>\n+    inlined_bodies: SyncTypedArena<Body>\n }\n \n impl Forest {\n     pub fn new(krate: Crate, dep_graph: &DepGraph) -> Forest {\n         Forest {\n             krate,\n             dep_graph: dep_graph.clone(),\n-            inlined_bodies: TypedArena::new()\n+            inlined_bodies: SyncTypedArena::new()\n         }\n     }\n "}, {"sha": "40cc43c3ca670d00e56b7d160f449d762cd7cf09", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b12d361ff944517dc0513269badf8d575fc20e9/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b12d361ff944517dc0513269badf8d575fc20e9/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=6b12d361ff944517dc0513269badf8d575fc20e9", "patch": "@@ -37,7 +37,7 @@ use errors::DiagnosticBuilder;\n use syntax_pos::{self, Span};\n use syntax_pos::symbol::InternedString;\n use util::nodemap::FxHashMap;\n-use arena::DroplessArena;\n+use arena::SyncDroplessArena;\n \n use self::combine::CombineFields;\n use self::higher_ranked::HrMatchResult;\n@@ -407,15 +407,15 @@ impl fmt::Display for FixupError {\n /// F: for<'b, 'tcx> where 'gcx: 'tcx FnOnce(InferCtxt<'b, 'gcx, 'tcx>).\n pub struct InferCtxtBuilder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     global_tcx: TyCtxt<'a, 'gcx, 'gcx>,\n-    arena: DroplessArena,\n+    arena: SyncDroplessArena,\n     fresh_tables: Option<RefCell<ty::TypeckTables<'tcx>>>,\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'gcx> {\n     pub fn infer_ctxt(self) -> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n         InferCtxtBuilder {\n             global_tcx: self,\n-            arena: DroplessArena::new(),\n+            arena: SyncDroplessArena::new(),\n             fresh_tables: None,\n \n         }"}, {"sha": "d5849ea22b1ef299cf4bd8aa0dee5c7ca152e255", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b12d361ff944517dc0513269badf8d575fc20e9/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b12d361ff944517dc0513269badf8d575fc20e9/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=6b12d361ff944517dc0513269badf8d575fc20e9", "patch": "@@ -27,6 +27,7 @@\n use self::TargetLint::*;\n \n use std::slice;\n+use rustc_data_structures::sync::{RwLock, ReadGuard};\n use lint::{EarlyLintPassObject, LateLintPassObject};\n use lint::{Level, Lint, LintId, LintPass, LintBuffer};\n use lint::builtin::BuiltinLintDiagnostics;\n@@ -39,7 +40,6 @@ use ty::layout::{LayoutError, LayoutOf, TyLayout};\n use util::nodemap::FxHashMap;\n \n use std::default::Default as StdDefault;\n-use std::cell::{Ref, RefCell};\n use syntax::ast;\n use syntax::edition;\n use syntax_pos::{MultiSpan, Span};\n@@ -78,7 +78,7 @@ pub struct LintStore {\n \n pub struct LintSession<'a, PassObject> {\n     /// Reference to the store of registered lints.\n-    lints: Ref<'a, LintStore>,\n+    lints: ReadGuard<'a, LintStore>,\n \n     /// Trait objects for each lint pass.\n     passes: Option<Vec<PassObject>>,\n@@ -336,7 +336,7 @@ impl<'a, PassObject: LintPassObject> LintSession<'a, PassObject> {\n     /// Creates a new `LintSession`, by moving out the `LintStore`'s initial\n     /// lint levels and pass objects. These can be restored using the `restore`\n     /// method.\n-    fn new(store: &'a RefCell<LintStore>) -> LintSession<'a, PassObject> {\n+    fn new(store: &'a RwLock<LintStore>) -> LintSession<'a, PassObject> {\n         let mut s = store.borrow_mut();\n         let passes = PassObject::take_passes(&mut *s);\n         drop(s);\n@@ -347,7 +347,7 @@ impl<'a, PassObject: LintPassObject> LintSession<'a, PassObject> {\n     }\n \n     /// Restores the levels back to the original lint store.\n-    fn restore(self, store: &RefCell<LintStore>) {\n+    fn restore(self, store: &RwLock<LintStore>) {\n         drop(self.lints);\n         let mut s = store.borrow_mut();\n         PassObject::restore_passes(&mut *s, self.passes);"}, {"sha": "696bd736594d4bd6a685bb4fb5cea0e79293b535", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b12d361ff944517dc0513269badf8d575fc20e9/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b12d361ff944517dc0513269badf8d575fc20e9/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=6b12d361ff944517dc0513269badf8d575fc20e9", "patch": "@@ -26,7 +26,7 @@ use util::nodemap::{FxHashSet};\n use util::common::{duration_to_secs_str, ErrorReported};\n use util::common::ProfileQueriesMsg;\n \n-use rustc_data_structures::sync::{Lrc, Lock, LockCell, OneThread, Once};\n+use rustc_data_structures::sync::{Lrc, Lock, LockCell, OneThread, Once, RwLock};\n \n use syntax::ast::NodeId;\n use errors::{self, DiagnosticBuilder, DiagnosticId};\n@@ -83,8 +83,8 @@ pub struct Session {\n \n     // FIXME: lint_store and buffered_lints are not thread-safe,\n     // but are only used in a single thread\n-    pub lint_store: OneThread<RefCell<lint::LintStore>>,\n-    pub buffered_lints: OneThread<RefCell<Option<lint::LintBuffer>>>,\n+    pub lint_store: RwLock<lint::LintStore>,\n+    pub buffered_lints: Lock<Option<lint::LintBuffer>>,\n \n     /// Set of (DiagnosticId, Option<Span>, message) tuples tracking\n     /// (sub)diagnostics that have been set once, but should not be set again,\n@@ -1089,8 +1089,8 @@ pub fn build_session_(\n         default_sysroot,\n         local_crate_source_file,\n         working_dir,\n-        lint_store: OneThread::new(RefCell::new(lint::LintStore::new())),\n-        buffered_lints: OneThread::new(RefCell::new(Some(lint::LintBuffer::new()))),\n+        lint_store: RwLock::new(lint::LintStore::new()),\n+        buffered_lints: Lock::new(Some(lint::LintBuffer::new())),\n         one_time_diagnostics: RefCell::new(FxHashSet()),\n         plugin_llvm_passes: OneThread::new(RefCell::new(Vec::new())),\n         plugin_attributes: OneThread::new(RefCell::new(Vec::new())),"}, {"sha": "4c7d8d7f44e6af58ca29dfce8803330e59b88802", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6b12d361ff944517dc0513269badf8d575fc20e9/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b12d361ff944517dc0513269badf8d575fc20e9/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=6b12d361ff944517dc0513269badf8d575fc20e9", "patch": "@@ -57,12 +57,11 @@ use rustc_data_structures::accumulate_vec::AccumulateVec;\n use rustc_data_structures::stable_hasher::{HashStable, hash_stable_hashmap,\n                                            StableHasher, StableHasherResult,\n                                            StableVec};\n-use arena::{TypedArena, DroplessArena};\n+use arena::{TypedArena, SyncDroplessArena};\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::sync::{Lrc, Lock};\n use std::any::Any;\n use std::borrow::Borrow;\n-use std::cell::Cell;\n use std::cmp::Ordering;\n use std::collections::hash_map::{self, Entry};\n use std::hash::{Hash, Hasher};\n@@ -83,14 +82,14 @@ use hir;\n \n pub struct AllArenas<'tcx> {\n     pub global: GlobalArenas<'tcx>,\n-    pub interner: DroplessArena,\n+    pub interner: SyncDroplessArena,\n }\n \n impl<'tcx> AllArenas<'tcx> {\n     pub fn new() -> Self {\n         AllArenas {\n             global: GlobalArenas::new(),\n-            interner: DroplessArena::new(),\n+            interner: SyncDroplessArena::new(),\n         }\n     }\n }\n@@ -130,7 +129,7 @@ type InternedSet<'tcx, T> = Lock<FxHashSet<Interned<'tcx, T>>>;\n \n pub struct CtxtInterners<'tcx> {\n     /// The arena that types, regions, etc are allocated from\n-    arena: &'tcx DroplessArena,\n+    arena: &'tcx SyncDroplessArena,\n \n     /// Specifically use a speedy hash algorithm for these hash sets,\n     /// they're accessed quite often.\n@@ -147,7 +146,7 @@ pub struct CtxtInterners<'tcx> {\n }\n \n impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n-    fn new(arena: &'tcx DroplessArena) -> CtxtInterners<'tcx> {\n+    fn new(arena: &'tcx SyncDroplessArena) -> CtxtInterners<'tcx> {\n         CtxtInterners {\n             arena,\n             type_: Default::default(),\n@@ -174,10 +173,10 @@ impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n                 return ty;\n             }\n             let global_interner = global_interners.map(|interners| {\n-                interners.type_.borrow_mut()\n+                (interners.type_.borrow_mut(), &interners.arena)\n             });\n-            if let Some(ref interner) = global_interner {\n-                if let Some(&Interned(ty)) = interner.get(&st) {\n+            if let Some((ref type_, _)) = global_interner {\n+                if let Some(&Interned(ty)) = type_.get(&st) {\n                     return ty;\n                 }\n             }\n@@ -193,18 +192,18 @@ impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n             // determine that all contents are in the global tcx.\n             // See comments on Lift for why we can't use that.\n             if !flags.flags.intersects(ty::TypeFlags::KEEP_IN_LOCAL_TCX) {\n-                if let Some(interner) = global_interners {\n+                if let Some((mut type_, arena)) = global_interner {\n                     let ty_struct: TyS<'gcx> = unsafe {\n                         mem::transmute(ty_struct)\n                     };\n-                    let ty: Ty<'gcx> = interner.arena.alloc(ty_struct);\n-                    global_interner.unwrap().insert(Interned(ty));\n+                    let ty: Ty<'gcx> = arena.alloc(ty_struct);\n+                    type_.insert(Interned(ty));\n                     return ty;\n                 }\n             } else {\n                 // Make sure we don't end up with inference\n                 // types/regions in the global tcx.\n-                if global_interners.is_none() {\n+                if global_interner.is_none() {\n                     drop(interner);\n                     bug!(\"Attempted to intern `{:?}` which contains \\\n                           inference types/regions in the global type context\",\n@@ -915,9 +914,6 @@ pub struct GlobalCtxt<'tcx> {\n     /// Data layout specification for the current target.\n     pub data_layout: TargetDataLayout,\n \n-    /// Used to prevent layout from recursing too deeply.\n-    pub layout_depth: Cell<usize>,\n-\n     stability_interner: Lock<FxHashSet<&'tcx attr::Stability>>,\n \n     pub interpret_interner: InterpretInterner<'tcx>,\n@@ -1292,7 +1288,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             crate_name: Symbol::intern(crate_name),\n             data_layout,\n             layout_interner: Lock::new(FxHashSet()),\n-            layout_depth: Cell::new(0),\n             stability_interner: Lock::new(FxHashSet()),\n             interpret_interner: Default::default(),\n             tx_to_llvm_workers: Lock::new(tx),\n@@ -1559,7 +1554,7 @@ impl<'gcx: 'tcx, 'tcx> GlobalCtxt<'gcx> {\n     /// Call the closure with a local `TyCtxt` using the given arena.\n     pub fn enter_local<F, R>(\n         &self,\n-        arena: &'tcx DroplessArena,\n+        arena: &'tcx SyncDroplessArena,\n         f: F\n     ) -> R\n     where\n@@ -1574,6 +1569,7 @@ impl<'gcx: 'tcx, 'tcx> GlobalCtxt<'gcx> {\n             let new_icx = ty::tls::ImplicitCtxt {\n                 tcx,\n                 query: icx.query.clone(),\n+                layout_depth: icx.layout_depth,\n             };\n             ty::tls::enter_context(&new_icx, |new_icx| {\n                 f(new_icx.tcx)\n@@ -1768,6 +1764,9 @@ pub mod tls {\n         /// The current query job, if any. This is updated by start_job in\n         /// ty::maps::plumbing when executing a query\n         pub query: Option<Lrc<maps::QueryJob<'gcx>>>,\n+\n+        /// Used to prevent layout from recursing too deeply.\n+        pub layout_depth: usize,\n     }\n \n     // A thread local value which stores a pointer to the current ImplicitCtxt\n@@ -1853,6 +1852,7 @@ pub mod tls {\n             let icx = ImplicitCtxt {\n                 tcx,\n                 query: None,\n+                layout_depth: 0,\n             };\n             enter_context(&icx, |_| {\n                 f(tcx)"}, {"sha": "6bd833568d4f39dc2c84d1db179116cb983b7d71", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6b12d361ff944517dc0513269badf8d575fc20e9/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b12d361ff944517dc0513269badf8d575fc20e9/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=6b12d361ff944517dc0513269badf8d575fc20e9", "patch": "@@ -896,21 +896,26 @@ fn layout_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n                         -> Result<&'tcx LayoutDetails, LayoutError<'tcx>>\n {\n-    let (param_env, ty) = query.into_parts();\n+    ty::tls::with_related_context(tcx, move |icx| {\n+        let rec_limit = *tcx.sess.recursion_limit.get();\n+        let (param_env, ty) = query.into_parts();\n \n-    let rec_limit = *tcx.sess.recursion_limit.get();\n-    let depth = tcx.layout_depth.get();\n-    if depth > rec_limit {\n-        tcx.sess.fatal(\n-            &format!(\"overflow representing the type `{}`\", ty));\n-    }\n+        if icx.layout_depth > rec_limit {\n+            tcx.sess.fatal(\n+                &format!(\"overflow representing the type `{}`\", ty));\n+        }\n \n-    tcx.layout_depth.set(depth+1);\n-    let cx = LayoutCx { tcx, param_env };\n-    let layout = cx.layout_raw_uncached(ty);\n-    tcx.layout_depth.set(depth);\n+        // Update the ImplicitCtxt to increase the layout_depth\n+        let icx = ty::tls::ImplicitCtxt {\n+            layout_depth: icx.layout_depth + 1,\n+            ..icx.clone()\n+        };\n \n-    layout\n+        ty::tls::enter_context(&icx, |_| {\n+            let cx = LayoutCx { tcx, param_env };\n+            cx.layout_raw_uncached(ty)\n+        })\n+    })\n }\n \n pub fn provide(providers: &mut ty::maps::Providers) {"}, {"sha": "f88e33c708e3685027e0aade041adf1ee5243e11", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6b12d361ff944517dc0513269badf8d575fc20e9/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b12d361ff944517dc0513269badf8d575fc20e9/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=6b12d361ff944517dc0513269badf8d575fc20e9", "patch": "@@ -33,6 +33,7 @@ use ty;\n use ty::maps::job::QueryResult;\n use ty::codec::{self as ty_codec, TyDecoder, TyEncoder};\n use ty::context::TyCtxt;\n+use util::common::time;\n \n const TAG_FILE_FOOTER: u128 = 0xC0FFEE_C0FFEE_C0FFEE_C0FFEE_C0FFEE;\n \n@@ -214,7 +215,7 @@ impl<'sess> OnDiskCache<'sess> {\n             // Encode query results\n             let mut query_result_index = EncodedQueryResultIndex::new();\n \n-            {\n+            time(tcx.sess, \"encode query results\", || {\n                 use ty::maps::queries::*;\n                 let enc = &mut encoder;\n                 let qri = &mut query_result_index;\n@@ -258,7 +259,9 @@ impl<'sess> OnDiskCache<'sess> {\n                         }\n                     }\n                 }\n-            }\n+\n+                Ok(())\n+            })?;\n \n             // Encode diagnostics\n             let diagnostics_index = {\n@@ -1125,6 +1128,11 @@ fn encode_query_results<'enc, 'a, 'tcx, Q, E>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n           E: 'enc + TyEncoder,\n           Q::Value: Encodable,\n {\n+    let desc = &format!(\"encode_query_results for {}\",\n+        unsafe { ::std::intrinsics::type_name::<Q>() });\n+\n+    time(tcx.sess, desc, || {\n+\n     for (key, entry) in Q::get_cache_internal(tcx).map.iter() {\n         if Q::cache_on_disk(key.clone()) {\n             let entry = match *entry {\n@@ -1143,4 +1151,5 @@ fn encode_query_results<'enc, 'a, 'tcx, Q, E>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n \n     Ok(())\n+    })\n }"}, {"sha": "185db623c6f160303334884cb331341203b00c09", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b12d361ff944517dc0513269badf8d575fc20e9/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b12d361ff944517dc0513269badf8d575fc20e9/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=6b12d361ff944517dc0513269badf8d575fc20e9", "patch": "@@ -522,6 +522,7 @@ macro_rules! define_maps {\n                         let icx = ty::tls::ImplicitCtxt {\n                             tcx,\n                             query: Some(job.clone()),\n+                            layout_depth: icx.layout_depth,\n                         };\n \n                         // Use the ImplicitCtxt while we execute the query"}, {"sha": "a0eed9e2f8ce8aad480f5c2faf38896bec68c4ec", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b12d361ff944517dc0513269badf8d575fc20e9/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b12d361ff944517dc0513269badf8d575fc20e9/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=6b12d361ff944517dc0513269badf8d575fc20e9", "patch": "@@ -793,9 +793,13 @@ pub fn phase_2_configure_and_expand_inner<'a, F>(sess: &'a Session,\n         let mut ecx = ExtCtxt::new(&sess.parse_sess, cfg, &mut resolver);\n         let err_count = ecx.parse_sess.span_diagnostic.err_count();\n \n-        let krate = ecx.monotonic_expander().expand_crate(krate);\n+        let krate = time(sess, \"expand crate\", || {\n+            ecx.monotonic_expander().expand_crate(krate)\n+        });\n \n-        ecx.check_unused_macros();\n+        time(sess, \"check unused macros\", || {\n+            ecx.check_unused_macros();\n+        });\n \n         let mut missing_fragment_specifiers: Vec<_> =\n             ecx.parse_sess.missing_fragment_specifiers.borrow().iter().cloned().collect();"}, {"sha": "e524fcecf9094a3edce0a932d97ee83f2878272c", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6b12d361ff944517dc0513269badf8d575fc20e9/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b12d361ff944517dc0513269badf8d575fc20e9/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=6b12d361ff944517dc0513269badf8d575fc20e9", "patch": "@@ -43,7 +43,11 @@ pub fn save_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n             time(sess, \"persist dep-graph\", || {\n                 save_in(sess,\n                         dep_graph_path(sess),\n-                        |e| encode_dep_graph(tcx, e));\n+                        |e| {\n+                            time(sess, \"encode dep-graph\", || {\n+                                encode_dep_graph(tcx, e)\n+                            })\n+                        });\n             });\n         }\n \n@@ -145,7 +149,9 @@ fn encode_dep_graph(tcx: TyCtxt,\n     tcx.sess.opts.dep_tracking_hash().encode(encoder)?;\n \n     // Encode the graph data.\n-    let serialized_graph = tcx.dep_graph.serialize();\n+    let serialized_graph = time(tcx.sess, \"getting serialized graph\", || {\n+        tcx.dep_graph.serialize()\n+    });\n \n     if tcx.sess.opts.debugging_opts.incremental_info {\n         #[derive(Clone)]\n@@ -221,7 +227,9 @@ fn encode_dep_graph(tcx: TyCtxt,\n         println!(\"[incremental]\");\n     }\n \n-    serialized_graph.encode(encoder)?;\n+    time(tcx.sess, \"encoding serialized graph\", || {\n+        serialized_graph.encode(encoder)\n+    })?;\n \n     Ok(())\n }\n@@ -245,5 +253,7 @@ fn encode_work_products(dep_graph: &DepGraph,\n fn encode_query_cache(tcx: TyCtxt,\n                       encoder: &mut Encoder)\n                       -> io::Result<()> {\n-    tcx.serialize_query_result_cache(encoder)\n+    time(tcx.sess, \"serialize query result cache\", || {\n+        tcx.serialize_query_result_cache(encoder)\n+    })\n }"}]}