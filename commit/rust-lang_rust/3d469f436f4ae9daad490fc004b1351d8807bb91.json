{"sha": "3d469f436f4ae9daad490fc004b1351d8807bb91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNDY5ZjQzNmY0YWU5ZGFhZDQ5MGZjMDA0YjEzNTFkODgwN2JiOTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-10T09:15:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-10T09:15:27Z"}, "message": "Auto merge of #3933 - phansch:add_rustfix_eta, r=oli-obk\n\nAdd // run-rustfix for eta.rs test\n\ncc #3071, #3630", "tree": {"sha": "9d90bc02149d814b90bdd6ab5e05c1d5fcca5d1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d90bc02149d814b90bdd6ab5e05c1d5fcca5d1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d469f436f4ae9daad490fc004b1351d8807bb91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d469f436f4ae9daad490fc004b1351d8807bb91", "html_url": "https://github.com/rust-lang/rust/commit/3d469f436f4ae9daad490fc004b1351d8807bb91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d469f436f4ae9daad490fc004b1351d8807bb91/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb9f9b1f97b4d7073ef368a8b64c0030cc1b2cf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb9f9b1f97b4d7073ef368a8b64c0030cc1b2cf4", "html_url": "https://github.com/rust-lang/rust/commit/eb9f9b1f97b4d7073ef368a8b64c0030cc1b2cf4"}, {"sha": "9e4e1302a6ce2ba0c3b6a50f1313390c291ee668", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e4e1302a6ce2ba0c3b6a50f1313390c291ee668", "html_url": "https://github.com/rust-lang/rust/commit/9e4e1302a6ce2ba0c3b6a50f1313390c291ee668"}], "stats": {"total": 159, "additions": 148, "deletions": 11}, "files": [{"sha": "7e487fe21679eb2b1cf23b1efe890a395c4f1523", "filename": "tests/ui/eta.fixed", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/3d469f436f4ae9daad490fc004b1351d8807bb91/tests%2Fui%2Feta.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3d469f436f4ae9daad490fc004b1351d8807bb91/tests%2Fui%2Feta.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.fixed?ref=3d469f436f4ae9daad490fc004b1351d8807bb91", "patch": "@@ -0,0 +1,135 @@\n+// run-rustfix\n+\n+#![allow(\n+    unused,\n+    clippy::no_effect,\n+    clippy::redundant_closure_call,\n+    clippy::many_single_char_names,\n+    clippy::needless_pass_by_value,\n+    clippy::option_map_unit_fn,\n+    clippy::trivially_copy_pass_by_ref\n+)]\n+#![warn(clippy::redundant_closure, clippy::needless_borrow)]\n+\n+use std::path::PathBuf;\n+\n+fn main() {\n+    let a = Some(1u8).map(foo);\n+    meta(foo);\n+    let c = Some(1u8).map({1+2; foo});\n+    let d = Some(1u8).map(|a| foo((|b| foo2(b))(a))); //is adjusted?\n+    all(&[1, 2, 3], &2, |x, y| below(x, y)); //is adjusted\n+    unsafe {\n+        Some(1u8).map(|a| unsafe_fn(a)); // unsafe fn\n+    }\n+\n+    // See #815\n+    let e = Some(1u8).map(|a| divergent(a));\n+    let e = Some(1u8).map(generic);\n+    let e = Some(1u8).map(generic);\n+    // See #515\n+    let a: Option<Box<::std::ops::Deref<Target = [i32]>>> =\n+        Some(vec![1i32, 2]).map(|v| -> Box<::std::ops::Deref<Target = [i32]>> { Box::new(v) });\n+}\n+\n+trait TestTrait {\n+    fn trait_foo(self) -> bool;\n+    fn trait_foo_ref(&self) -> bool;\n+}\n+\n+struct TestStruct<'a> {\n+    some_ref: &'a i32,\n+}\n+\n+impl<'a> TestStruct<'a> {\n+    fn foo(self) -> bool {\n+        false\n+    }\n+    unsafe fn foo_unsafe(self) -> bool {\n+        true\n+    }\n+}\n+\n+impl<'a> TestTrait for TestStruct<'a> {\n+    fn trait_foo(self) -> bool {\n+        false\n+    }\n+    fn trait_foo_ref(&self) -> bool {\n+        false\n+    }\n+}\n+\n+impl<'a> std::ops::Deref for TestStruct<'a> {\n+    type Target = char;\n+    fn deref(&self) -> &char {\n+        &'a'\n+    }\n+}\n+\n+fn test_redundant_closures_containing_method_calls() {\n+    let i = 10;\n+    let e = Some(TestStruct { some_ref: &i }).map(TestStruct::foo);\n+    let e = Some(TestStruct { some_ref: &i }).map(TestStruct::foo);\n+    let e = Some(TestStruct { some_ref: &i }).map(TestTrait::trait_foo);\n+    let e = Some(TestStruct { some_ref: &i }).map(|a| a.trait_foo_ref());\n+    let e = Some(TestStruct { some_ref: &i }).map(TestTrait::trait_foo);\n+    let e = Some(&mut vec![1, 2, 3]).map(std::vec::Vec::clear);\n+    let e = Some(&mut vec![1, 2, 3]).map(std::vec::Vec::clear);\n+    unsafe {\n+        let e = Some(TestStruct { some_ref: &i }).map(|a| a.foo_unsafe());\n+    }\n+    let e = Some(\"str\").map(std::string::ToString::to_string);\n+    let e = Some(\"str\").map(str::to_string);\n+    let e = Some('a').map(char::to_uppercase);\n+    let e = Some('a').map(char::to_uppercase);\n+    let e: std::vec::Vec<usize> = vec!['a', 'b', 'c'].iter().map(|c| c.len_utf8()).collect();\n+    let e: std::vec::Vec<char> = vec!['a', 'b', 'c'].iter().map(char::to_ascii_uppercase).collect();\n+    let e: std::vec::Vec<char> = vec!['a', 'b', 'c'].iter().map(char::to_ascii_uppercase).collect();\n+    let p = Some(PathBuf::new());\n+    let e = p.as_ref().and_then(|s| s.to_str());\n+    let c = Some(TestStruct { some_ref: &i })\n+        .as_ref()\n+        .map(|c| c.to_ascii_uppercase());\n+\n+    fn test_different_borrow_levels<T>(t: &[&T])\n+    where\n+        T: TestTrait,\n+    {\n+        t.iter().filter(|x| x.trait_foo_ref());\n+        t.iter().map(|x| x.trait_foo_ref());\n+    }\n+}\n+\n+fn meta<F>(f: F)\n+where\n+    F: Fn(u8),\n+{\n+    f(1u8)\n+}\n+\n+fn foo(_: u8) {}\n+\n+fn foo2(_: u8) -> u8 {\n+    1u8\n+}\n+\n+fn all<X, F>(x: &[X], y: &X, f: F) -> bool\n+where\n+    F: Fn(&X, &X) -> bool,\n+{\n+    x.iter().all(|e| f(e, y))\n+}\n+\n+fn below(x: &u8, y: &u8) -> bool {\n+    x < y\n+}\n+\n+unsafe fn unsafe_fn(_: u8) {}\n+\n+fn divergent(_: u8) -> ! {\n+    unimplemented!()\n+}\n+\n+fn generic<T>(_: T) -> u8 {\n+    0\n+}"}, {"sha": "a0d83c4382510018266d1f95c9d6d00dc8f97680", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d469f436f4ae9daad490fc004b1351d8807bb91/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d469f436f4ae9daad490fc004b1351d8807bb91/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=3d469f436f4ae9daad490fc004b1351d8807bb91", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n #![allow(\n     unused,\n     clippy::no_effect,"}, {"sha": "77423694f815380e075ba811e56d5749438cca73", "filename": "tests/ui/eta.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3d469f436f4ae9daad490fc004b1351d8807bb91/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d469f436f4ae9daad490fc004b1351d8807bb91/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=3d469f436f4ae9daad490fc004b1351d8807bb91", "patch": "@@ -1,69 +1,69 @@\n error: redundant closure found\n-  --> $DIR/eta.rs:15:27\n+  --> $DIR/eta.rs:17:27\n    |\n LL |     let a = Some(1u8).map(|a| foo(a));\n    |                           ^^^^^^^^^^ help: remove closure as shown: `foo`\n    |\n    = note: `-D clippy::redundant-closure` implied by `-D warnings`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:16:10\n+  --> $DIR/eta.rs:18:10\n    |\n LL |     meta(|a| foo(a));\n    |          ^^^^^^^^^^ help: remove closure as shown: `foo`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:17:27\n+  --> $DIR/eta.rs:19:27\n    |\n LL |     let c = Some(1u8).map(|a| {1+2; foo}(a));\n    |                           ^^^^^^^^^^^^^^^^^ help: remove closure as shown: `{1+2; foo}`\n \n error: this expression borrows a reference that is immediately dereferenced by the compiler\n-  --> $DIR/eta.rs:19:21\n+  --> $DIR/eta.rs:21:21\n    |\n LL |     all(&[1, 2, 3], &&2, |x, y| below(x, y)); //is adjusted\n    |                     ^^^ help: change this to: `&2`\n    |\n    = note: `-D clippy::needless-borrow` implied by `-D warnings`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:26:27\n+  --> $DIR/eta.rs:28:27\n    |\n LL |     let e = Some(1u8).map(|a| generic(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `generic`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:69:51\n+  --> $DIR/eta.rs:71:51\n    |\n LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.foo());\n    |                                                   ^^^^^^^^^^^ help: remove closure as shown: `TestStruct::foo`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:71:51\n+  --> $DIR/eta.rs:73:51\n    |\n LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.trait_foo());\n    |                                                   ^^^^^^^^^^^^^^^^^ help: remove closure as shown: `TestTrait::trait_foo`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:74:42\n+  --> $DIR/eta.rs:76:42\n    |\n LL |     let e = Some(&mut vec![1, 2, 3]).map(|v| v.clear());\n    |                                          ^^^^^^^^^^^^^ help: remove closure as shown: `std::vec::Vec::clear`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:79:29\n+  --> $DIR/eta.rs:81:29\n    |\n LL |     let e = Some(\"str\").map(|s| s.to_string());\n    |                             ^^^^^^^^^^^^^^^^^ help: remove closure as shown: `std::string::ToString::to_string`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:81:27\n+  --> $DIR/eta.rs:83:27\n    |\n LL |     let e = Some('a').map(|s| s.to_uppercase());\n    |                           ^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `char::to_uppercase`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:84:65\n+  --> $DIR/eta.rs:86:65\n    |\n LL |     let e: std::vec::Vec<char> = vec!['a', 'b', 'c'].iter().map(|c| c.to_ascii_uppercase()).collect();\n    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `char::to_ascii_uppercase`"}]}