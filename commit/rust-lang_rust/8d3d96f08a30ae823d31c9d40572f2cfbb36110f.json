{"sha": "8d3d96f08a30ae823d31c9d40572f2cfbb36110f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkM2Q5NmYwOGEzMGFlODIzZDMxYzlkNDA1NzJmMmNmYmIzNjExMGY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-12T14:04:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-12T14:04:13Z"}, "message": "Rollup merge of #54950 - alexcrichton:wasm-sync-allocator, r=sfackler\n\nstd: Synchronize global allocator on wasm32\n\nWe originally didn't have threads, and now we're starting to add them!\nMake sure we properly synchronize access to dlmalloc when the `atomics`\nfeature is enabled for `wasm32-unknown-unknown`.", "tree": {"sha": "eb76f3fb9b094aee687fbc57fa8c39963f27a69e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb76f3fb9b094aee687fbc57fa8c39963f27a69e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d3d96f08a30ae823d31c9d40572f2cfbb36110f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbwKndCRBK7hj4Ov3rIwAAdHIIAJbmF0G7m6goxIfLw9YjdKdF\n25yO6HghWKnWZ+as37sJGgUcay2eBer1Pat1Rf4fmGMhKEMQ/rKXoSlL6rZoxo+8\n/9/cI9vDk9aLnJN3P1OyPNzu+XIQI2Rt5+u6Ly8TpuqbpFheDSPlHw8f9+sPnXhp\nVXRIsrX9E99ne2FeAnKbT+RRQbt4trMKOZnDxzF3cB+9hSKax1Om2EeKf0urEW2Z\nm9FarNXHmPTW1P/4vUuKRfy3B9JFTPbdzM9aOZszLz2OBIaGiExYGIcp0q2ZHvGb\n5KqeIw1oJ7u2xB++WNuHxq5w92TeP49GKBlm2SqMNIic0rPEtx43IXTv9KZF4rw=\n=h49D\n-----END PGP SIGNATURE-----\n", "payload": "tree eb76f3fb9b094aee687fbc57fa8c39963f27a69e\nparent 4f1a618e5db3b17442ab076d954d3e1f0767a091\nparent c1f7e922e6e082d3f58db4a69fdf821e93ffa665\nauthor kennytm <kennytm@gmail.com> 1539353053 +0800\ncommitter GitHub <noreply@github.com> 1539353053 +0800\n\nRollup merge of #54950 - alexcrichton:wasm-sync-allocator, r=sfackler\n\nstd: Synchronize global allocator on wasm32\n\nWe originally didn't have threads, and now we're starting to add them!\nMake sure we properly synchronize access to dlmalloc when the `atomics`\nfeature is enabled for `wasm32-unknown-unknown`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d3d96f08a30ae823d31c9d40572f2cfbb36110f", "html_url": "https://github.com/rust-lang/rust/commit/8d3d96f08a30ae823d31c9d40572f2cfbb36110f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d3d96f08a30ae823d31c9d40572f2cfbb36110f/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f1a618e5db3b17442ab076d954d3e1f0767a091", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f1a618e5db3b17442ab076d954d3e1f0767a091", "html_url": "https://github.com/rust-lang/rust/commit/4f1a618e5db3b17442ab076d954d3e1f0767a091"}, {"sha": "c1f7e922e6e082d3f58db4a69fdf821e93ffa665", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1f7e922e6e082d3f58db4a69fdf821e93ffa665", "html_url": "https://github.com/rust-lang/rust/commit/c1f7e922e6e082d3f58db4a69fdf821e93ffa665"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "15283036bb49522d35aec181804831dba3fb4dce", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/8d3d96f08a30ae823d31c9d40572f2cfbb36110f/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3d96f08a30ae823d31c9d40572f2cfbb36110f/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=8d3d96f08a30ae823d31c9d40572f2cfbb36110f", "patch": "@@ -20,6 +20,10 @@\n #![feature(nll)]\n #![feature(staged_api)]\n #![feature(rustc_attrs)]\n+#![cfg_attr(\n+    all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n+    feature(integer_atomics, stdsimd)\n+)]\n #![cfg_attr(any(unix, target_os = \"cloudabi\", target_os = \"redox\"), feature(libc))]\n #![rustc_alloc_kind = \"lib\"]\n \n@@ -331,29 +335,76 @@ mod platform {\n     use core::alloc::{GlobalAlloc, Layout};\n     use System;\n \n-    // No need for synchronization here as wasm is currently single-threaded\n     static mut DLMALLOC: dlmalloc::Dlmalloc = dlmalloc::DLMALLOC_INIT;\n \n     #[stable(feature = \"alloc_system_type\", since = \"1.28.0\")]\n     unsafe impl GlobalAlloc for System {\n         #[inline]\n         unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n+            let _lock = lock::lock();\n             DLMALLOC.malloc(layout.size(), layout.align())\n         }\n \n         #[inline]\n         unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {\n+            let _lock = lock::lock();\n             DLMALLOC.calloc(layout.size(), layout.align())\n         }\n \n         #[inline]\n         unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {\n+            let _lock = lock::lock();\n             DLMALLOC.free(ptr, layout.size(), layout.align())\n         }\n \n         #[inline]\n         unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {\n+            let _lock = lock::lock();\n             DLMALLOC.realloc(ptr, layout.size(), layout.align(), new_size)\n         }\n     }\n+\n+    #[cfg(target_feature = \"atomics\")]\n+    mod lock {\n+        use core::arch::wasm32;\n+        use core::sync::atomic::{AtomicI32, Ordering::SeqCst};\n+\n+        static LOCKED: AtomicI32 = AtomicI32::new(0);\n+\n+        pub struct DropLock;\n+\n+        pub fn lock() -> DropLock {\n+            loop {\n+                if LOCKED.swap(1, SeqCst) == 0 {\n+                    return DropLock\n+                }\n+                unsafe {\n+                    let r = wasm32::atomic::wait_i32(\n+                        &LOCKED as *const AtomicI32 as *mut i32,\n+                        1,  // expected value\n+                        -1, // timeout\n+                    );\n+                    debug_assert!(r == 0 || r == 1);\n+                }\n+            }\n+        }\n+\n+        impl Drop for DropLock {\n+            fn drop(&mut self) {\n+                let r = LOCKED.swap(0, SeqCst);\n+                debug_assert_eq!(r, 1);\n+                unsafe {\n+                    wasm32::atomic::wake(\n+                        &LOCKED as *const AtomicI32 as *mut i32,\n+                        1, // only one thread\n+                    );\n+                }\n+            }\n+        }\n+    }\n+\n+    #[cfg(not(target_feature = \"atomics\"))]\n+    mod lock {\n+        pub fn lock() {} // no atomics, no threads, that's easy!\n+    }\n }"}]}