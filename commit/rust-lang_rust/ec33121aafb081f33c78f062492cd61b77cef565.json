{"sha": "ec33121aafb081f33c78f062492cd61b77cef565", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMzMxMjFhYWZiMDgxZjMzYzc4ZjA2MjQ5MmNkNjFiNzdjZWY1NjU=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-23T13:13:29Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-23T13:13:29Z"}, "message": "Format source codes", "tree": {"sha": "fa9434080f8c98ff428ab4fc2276a68a34c23e25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa9434080f8c98ff428ab4fc2276a68a34c23e25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec33121aafb081f33c78f062492cd61b77cef565", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec33121aafb081f33c78f062492cd61b77cef565", "html_url": "https://github.com/rust-lang/rust/commit/ec33121aafb081f33c78f062492cd61b77cef565", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec33121aafb081f33c78f062492cd61b77cef565/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb4a6a24191f1a5535a6694b2310be5ac9d60bfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb4a6a24191f1a5535a6694b2310be5ac9d60bfe", "html_url": "https://github.com/rust-lang/rust/commit/cb4a6a24191f1a5535a6694b2310be5ac9d60bfe"}], "stats": {"total": 230, "additions": 104, "deletions": 126}, "files": [{"sha": "9591ffc4427f8010c0153816e4990fac9fd35024", "filename": "src/comment.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ec33121aafb081f33c78f062492cd61b77cef565/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec33121aafb081f33c78f062492cd61b77cef565/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=ec33121aafb081f33c78f062492cd61b77cef565", "patch": "@@ -158,15 +158,14 @@ fn light_rewrite_comment(orig: &str, offset: Indent, config: &Config) -> Option<\n             // `*` in `/*`.\n             let first_non_whitespace = l.find(|c| !char::is_whitespace(c));\n             if let Some(fnw) = first_non_whitespace {\n-                    if l.as_bytes()[fnw] == '*' as u8 && fnw > 0 {\n-                        &l[fnw - 1..]\n-                    } else {\n-                        &l[fnw..]\n-                    }\n+                if l.as_bytes()[fnw] == '*' as u8 && fnw > 0 {\n+                    &l[fnw - 1..]\n                 } else {\n-                    \"\"\n+                    &l[fnw..]\n                 }\n-                .trim_right()\n+            } else {\n+                \"\"\n+            }.trim_right()\n         })\n         .collect();\n     Some(lines.join(&format!(\"\\n{}\", offset.to_string(config))))"}, {"sha": "885577b304ef30a4e97da34fd935c46a781556ef", "filename": "src/expr.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ec33121aafb081f33c78f062492cd61b77cef565/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec33121aafb081f33c78f062492cd61b77cef565/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=ec33121aafb081f33c78f062492cd61b77cef565", "patch": "@@ -316,8 +316,7 @@ pub fn rewrite_pair<LHS, RHS>(lhs: &LHS,\n     let lhs_budget = try_opt!(context\n                                   .config\n                                   .max_width()\n-                                  .checked_sub(shape.used_width() + prefix.len() +\n-                                               infix.len()));\n+                                  .checked_sub(shape.used_width() + prefix.len() + infix.len()));\n     let rhs_shape = match context.config.control_style() {\n         Style::Default => {\n             try_opt!(shape.sub_width(suffix.len() + prefix.len())).visual_indent(prefix.len())\n@@ -853,8 +852,8 @@ impl<'a> ControlFlow<'a> {\n \n             let new_width = try_opt!(new_width.checked_sub(if_str.len()));\n             let else_expr = &else_node.stmts[0];\n-            let else_str = try_opt!(else_expr.rewrite(context,\n-                                                      Shape::legacy(new_width, Indent::empty())));\n+            let else_str =\n+                try_opt!(else_expr.rewrite(context, Shape::legacy(new_width, Indent::empty())));\n \n             if if_str.contains('\\n') || else_str.contains('\\n') {\n                 return None;\n@@ -953,14 +952,13 @@ impl<'a> Rewrite for ControlFlow<'a> {\n         };\n \n         // for event in event\n-        let between_kwd_cond =\n-            mk_sp(context.codemap.span_after(self.span, self.keyword.trim()),\n-                  self.pat\n-                      .map_or(cond_span.lo, |p| if self.matcher.is_empty() {\n-                p.span.lo\n-            } else {\n-                context.codemap.span_before(self.span, self.matcher.trim())\n-            }));\n+        let between_kwd_cond = mk_sp(context.codemap.span_after(self.span, self.keyword.trim()),\n+                                     self.pat\n+                                         .map_or(cond_span.lo, |p| if self.matcher.is_empty() {\n+            p.span.lo\n+        } else {\n+            context.codemap.span_before(self.span, self.matcher.trim())\n+        }));\n \n         let between_kwd_cond_comment = extract_comment(between_kwd_cond, context, shape);\n \n@@ -1042,9 +1040,10 @@ impl<'a> Rewrite for ControlFlow<'a> {\n             let between_kwd_else_block_comment =\n                 extract_comment(between_kwd_else_block, context, shape);\n \n-            let after_else = mk_sp(context.codemap.span_after(mk_sp(self.block.span.hi,\n-                                                                    else_block.span.lo),\n-                                                              \"else\"),\n+            let after_else = mk_sp(context\n+                                       .codemap\n+                                       .span_after(mk_sp(self.block.span.hi, else_block.span.lo),\n+                                                   \"else\"),\n                                    else_block.span.lo);\n             let after_else_comment = extract_comment(after_else, context, shape);\n "}, {"sha": "bddb07263b874acdf92d73a59689b794636d82ae", "filename": "src/items.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/ec33121aafb081f33c78f062492cd61b77cef565/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec33121aafb081f33c78f062492cd61b77cef565/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=ec33121aafb081f33c78f062492cd61b77cef565", "patch": "@@ -1062,11 +1062,11 @@ fn format_tuple_struct(context: &RewriteContext,\n                          |field| field.rewrite(context, Shape::legacy(item_budget, item_indent)),\n                          context.codemap.span_after(span, \"(\"),\n                          span.hi);\n-        let body_budget = try_opt!(context\n-                                       .config\n-                                       .max_width()\n-                                       .checked_sub(offset.block_only().width() + result.len() +\n-                                                    3));\n+        let body_budget =\n+            try_opt!(context\n+                         .config\n+                         .max_width()\n+                         .checked_sub(offset.block_only().width() + result.len() + 3));\n         let body = try_opt!(list_helper(items,\n                                         // TODO budget is wrong in block case\n                                         Shape::legacy(body_budget, item_indent),\n@@ -1126,8 +1126,7 @@ pub fn rewrite_type_alias(context: &RewriteContext,\n \n     let generics_indent = indent + result.len();\n     let generics_span = mk_sp(context.codemap.span_after(span, \"type\"), ty.span.lo);\n-    let shape = try_opt!(Shape::indented(generics_indent, context.config)\n-                             .sub_width(\" =\".len()));\n+    let shape = try_opt!(Shape::indented(generics_indent, context.config).sub_width(\" =\".len()));\n     let generics_str = try_opt!(rewrite_generics(context, generics, shape, generics_span));\n \n     result.push_str(&generics_str);\n@@ -1310,28 +1309,30 @@ pub fn rewrite_associated_type(ident: ast::Ident,\n                                -> Option<String> {\n     let prefix = format!(\"type {}\", ident);\n \n-    let type_bounds_str =\n-        if let Some(ty_param_bounds) = ty_param_bounds_opt {\n-            let joiner = match context.config.type_punctuation_density() {\n-                TypeDensity::Compressed => \"+\",\n-                TypeDensity::Wide => \" + \",\n-            };\n-            let bounds: &[_] = ty_param_bounds;\n-            let bound_str = try_opt!(bounds\n-                                         .iter()\n-                                         .map(|ty_bound| {\n-                ty_bound.rewrite(context, Shape::legacy(context.config.max_width(), indent))\n-            })\n-                                         .intersperse(Some(joiner.to_string()))\n-                                         .collect::<Option<String>>());\n-            if bounds.len() > 0 {\n-                format!(\": {}\", bound_str)\n-            } else {\n-                String::new()\n-            }\n+    let type_bounds_str = if let Some(ty_param_bounds) = ty_param_bounds_opt {\n+        let joiner = match context.config.type_punctuation_density() {\n+            TypeDensity::Compressed => \"+\",\n+            TypeDensity::Wide => \" + \",\n+        };\n+        let bounds: &[_] = ty_param_bounds;\n+        let bound_str =\n+            try_opt!(bounds\n+                         .iter()\n+                         .map(|ty_bound| {\n+                                  ty_bound.rewrite(context,\n+                                                   Shape::legacy(context.config.max_width(),\n+                                                                 indent))\n+                              })\n+                         .intersperse(Some(joiner.to_string()))\n+                         .collect::<Option<String>>());\n+        if bounds.len() > 0 {\n+            format!(\": {}\", bound_str)\n         } else {\n             String::new()\n-        };\n+        }\n+    } else {\n+        String::new()\n+    };\n \n     if let Some(ty) = ty_opt {\n         let ty_str = try_opt!(ty.rewrite(context,\n@@ -1931,8 +1932,7 @@ fn compute_budgets_for_args(context: &RewriteContext,\n             let multi_line_budget = try_opt!(context\n                                                  .config\n                                                  .max_width()\n-                                                 .checked_sub(indent.width() + result.len() +\n-                                                              4));\n+                                                 .checked_sub(indent.width() + result.len() + 4));\n \n             return Some((one_line_budget, multi_line_budget, indent + result.len() + 1));\n         }"}, {"sha": "688d6719441610cce02b2fe22d3078a28b92c3be", "filename": "src/types.rs", "status": "modified", "additions": 25, "deletions": 36, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/ec33121aafb081f33c78f062492cd61b77cef565/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec33121aafb081f33c78f062492cd61b77cef565/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=ec33121aafb081f33c78f062492cd61b77cef565", "patch": "@@ -364,12 +364,11 @@ impl Rewrite for ast::WherePredicate {\n                 let colon = type_bound_colon(context);\n \n                 if !bound_lifetimes.is_empty() {\n-                    let lifetime_str: String =\n-                        try_opt!(bound_lifetimes\n-                                     .iter()\n-                                     .map(|lt| lt.rewrite(context, shape))\n-                                     .intersperse(Some(\", \".to_string()))\n-                                     .collect());\n+                    let lifetime_str: String = try_opt!(bound_lifetimes\n+                                                            .iter()\n+                                                            .map(|lt| lt.rewrite(context, shape))\n+                                                            .intersperse(Some(\", \".to_string()))\n+                                                            .collect());\n \n                     let joiner = match context.config.type_punctuation_density() {\n                         TypeDensity::Compressed => \"+\",\n@@ -378,17 +377,13 @@ impl Rewrite for ast::WherePredicate {\n                     // 6 = \"for<> \".len()\n                     let used_width = lifetime_str.len() + type_str.len() + colon.len() + 6;\n                     let budget = try_opt!(shape.width.checked_sub(used_width));\n-                    let bounds_str: String =\n-                        try_opt!(bounds\n-                                     .iter()\n-                                     .map(|ty_bound| {\n-                                              ty_bound.rewrite(context,\n-                                                               Shape::legacy(budget,\n-                                                                             shape.indent +\n-                                                                             used_width))\n-                                          })\n-                                     .intersperse(Some(joiner.to_string()))\n-                                     .collect());\n+                    let bounds_str: String = try_opt!(bounds\n+                                                          .iter()\n+                                                          .map(|ty_bound| {\n+                        ty_bound.rewrite(context, Shape::legacy(budget, shape.indent + used_width))\n+                    })\n+                                                          .intersperse(Some(joiner.to_string()))\n+                                                          .collect());\n \n                     if context.config.spaces_within_angle_brackets() && lifetime_str.len() > 0 {\n                         format!(\"for< {} > {}{}{}\",\n@@ -406,17 +401,13 @@ impl Rewrite for ast::WherePredicate {\n                     };\n                     let used_width = type_str.len() + colon.len();\n                     let budget = try_opt!(shape.width.checked_sub(used_width));\n-                    let bounds_str: String =\n-                        try_opt!(bounds\n-                                     .iter()\n-                                     .map(|ty_bound| {\n-                                              ty_bound.rewrite(context,\n-                                                               Shape::legacy(budget,\n-                                                                             shape.indent +\n-                                                                             used_width))\n-                                          })\n-                                     .intersperse(Some(joiner.to_string()))\n-                                     .collect());\n+                    let bounds_str: String = try_opt!(bounds\n+                                                          .iter()\n+                                                          .map(|ty_bound| {\n+                        ty_bound.rewrite(context, Shape::legacy(budget, shape.indent + used_width))\n+                    })\n+                                                          .intersperse(Some(joiner.to_string()))\n+                                                          .collect());\n \n                     format!(\"{}{}{}\", type_str, colon, bounds_str)\n                 }\n@@ -532,12 +523,11 @@ impl Rewrite for ast::TyParam {\n                 TypeDensity::Compressed => \"+\",\n                 TypeDensity::Wide => \" + \",\n             };\n-            let bounds: String =\n-                try_opt!(self.bounds\n-                             .iter()\n-                             .map(|ty_bound| ty_bound.rewrite(context, shape))\n-                             .intersperse(Some(joiner.to_string()))\n-                             .collect());\n+            let bounds: String = try_opt!(self.bounds\n+                                              .iter()\n+                                              .map(|ty_bound| ty_bound.rewrite(context, shape))\n+                                              .intersperse(Some(joiner.to_string()))\n+                                              .collect());\n \n             result.push_str(&bounds);\n         }\n@@ -612,8 +602,7 @@ impl Rewrite for ast::Ty {\n                              let lt_budget = try_opt!(shape.width.checked_sub(2 + mut_len));\n                              let lt_str = try_opt!(lifetime.rewrite(context,\n                                                                     Shape::legacy(lt_budget,\n-                                                                                  shape.indent +\n-                                                                                  2 +\n+                                                                                  shape.indent + 2 +\n                                                                                   mut_len)));\n                              let lt_len = lt_str.len();\n                              let budget = try_opt!(shape.width.checked_sub(2 + mut_len + lt_len));"}, {"sha": "80b024829912fd786336d20f11b69d5881f5e47c", "filename": "tests/target/chains.rs", "status": "modified", "additions": 23, "deletions": 29, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ec33121aafb081f33c78f062492cd61b77cef565/tests%2Ftarget%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec33121aafb081f33c78f062492cd61b77cef565/tests%2Ftarget%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains.rs?ref=ec33121aafb081f33c78f062492cd61b77cef565", "patch": "@@ -66,38 +66,34 @@ fn floaters() {\n     };\n \n     let x = Foo {\n-            field1: val1,\n-            field2: val2,\n-        }\n-        .method_call()\n+        field1: val1,\n+        field2: val2,\n+    }.method_call()\n         .method_call();\n \n     let y = if cond {\n-            val1\n-        } else {\n-            val2\n-        }\n-        .method_call();\n+        val1\n+    } else {\n+        val2\n+    }.method_call();\n \n     {\n         match x {\n             PushParam => {\n                 // params are 1-indexed\n                 stack.push(mparams[match cur.to_digit(10) {\n-                                   Some(d) => d as usize - 1,\n-                                   None => return Err(\"bad param number\".to_owned()),\n-                               }]\n-                               .clone());\n+                    Some(d) => d as usize - 1,\n+                    None => return Err(\"bad param number\".to_owned()),\n+                }].clone());\n             }\n         }\n     }\n \n     if cond {\n-            some();\n-        } else {\n-            none();\n-        }\n-        .bar()\n+        some();\n+    } else {\n+        none();\n+    }.bar()\n         .baz();\n \n     Foo { x: val }\n@@ -108,21 +104,19 @@ fn floaters() {\n         .quux();\n \n     Foo {\n-            y: i_am_multi_line,\n-            z: ok,\n-        }\n-        .baz(|| {\n-                 force();\n-                 multiline();\n-             })\n+        y: i_am_multi_line,\n+        z: ok,\n+    }.baz(|| {\n+              force();\n+              multiline();\n+          })\n         .quux();\n \n     a +\n     match x {\n-            true => \"yay!\",\n-            false => \"boo!\",\n-        }\n-        .bar()\n+        true => \"yay!\",\n+        false => \"boo!\",\n+    }.bar()\n }\n \n fn is_replaced_content() -> bool {"}, {"sha": "8149269158c2fa89110952654d6466c9a1e8dbfb", "filename": "tests/target/configs-fn_call_style-block.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec33121aafb081f33c78f062492cd61b77cef565/tests%2Ftarget%2Fconfigs-fn_call_style-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec33121aafb081f33c78f062492cd61b77cef565/tests%2Ftarget%2Fconfigs-fn_call_style-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_call_style-block.rs?ref=ec33121aafb081f33c78f062492cd61b77cef565", "patch": "@@ -37,8 +37,7 @@ fn issue1420() {\n         # Getting started\n         ...\n     \"#,\n-    )\n-        .running(waltz)\n+    ).running(waltz)\n }\n \n // #1563"}, {"sha": "a43f314a2420c554b419dbef365c0f81f41966a6", "filename": "tests/target/file-lines-1.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec33121aafb081f33c78f062492cd61b77cef565/tests%2Ftarget%2Ffile-lines-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec33121aafb081f33c78f062492cd61b77cef565/tests%2Ftarget%2Ffile-lines-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffile-lines-1.rs?ref=ec33121aafb081f33c78f062492cd61b77cef565", "patch": "@@ -2,10 +2,9 @@\n \n fn floaters() {\n     let x = Foo {\n-            field1: val1,\n-            field2: val2,\n-        }\n-        .method_call()\n+        field1: val1,\n+        field2: val2,\n+    }.method_call()\n         .method_call();\n \n     let y = if cond {"}, {"sha": "754c7c879b014e6e510c46f5e58b78e967243eb1", "filename": "tests/target/file-lines-3.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec33121aafb081f33c78f062492cd61b77cef565/tests%2Ftarget%2Ffile-lines-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec33121aafb081f33c78f062492cd61b77cef565/tests%2Ftarget%2Ffile-lines-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffile-lines-3.rs?ref=ec33121aafb081f33c78f062492cd61b77cef565", "patch": "@@ -3,10 +3,9 @@\n \n fn floaters() {\n     let x = Foo {\n-            field1: val1,\n-            field2: val2,\n-        }\n-        .method_call()\n+        field1: val1,\n+        field2: val2,\n+    }.method_call()\n         .method_call();\n \n     let y = if cond { val1 } else { val2 }.method_call();"}]}