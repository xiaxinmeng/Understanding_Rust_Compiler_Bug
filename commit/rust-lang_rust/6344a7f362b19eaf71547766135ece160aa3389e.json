{"sha": "6344a7f362b19eaf71547766135ece160aa3389e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNDRhN2YzNjJiMTllYWY3MTU0Nzc2NjEzNWVjZTE2MGFhMzM4OWU=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-08-10T12:05:01Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-08-10T12:05:01Z"}, "message": "Fix clippy warnings", "tree": {"sha": "53dc390d807291f62c1f249f571b36b760e096f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53dc390d807291f62c1f249f571b36b760e096f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6344a7f362b19eaf71547766135ece160aa3389e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6344a7f362b19eaf71547766135ece160aa3389e", "html_url": "https://github.com/rust-lang/rust/commit/6344a7f362b19eaf71547766135ece160aa3389e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6344a7f362b19eaf71547766135ece160aa3389e/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3336509e52187a7a70a8043557a7317872e3a2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3336509e52187a7a70a8043557a7317872e3a2f", "html_url": "https://github.com/rust-lang/rust/commit/f3336509e52187a7a70a8043557a7317872e3a2f"}], "stats": {"total": 72, "additions": 38, "deletions": 34}, "files": [{"sha": "bd83895f78251f2ecac9cba72a3fd64e46ce31dd", "filename": "crates/expect/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6344a7f362b19eaf71547766135ece160aa3389e/crates%2Fexpect%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6344a7f362b19eaf71547766135ece160aa3389e/crates%2Fexpect%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fexpect%2Fsrc%2Flib.rs?ref=6344a7f362b19eaf71547766135ece160aa3389e", "patch": "@@ -74,7 +74,7 @@ impl fmt::Display for Position {\n impl Expect {\n     pub fn assert_eq(&self, actual: &str) {\n         let trimmed = self.trimmed();\n-        if &trimmed == actual {\n+        if trimmed == actual {\n             return;\n         }\n         Runtime::fail_expect(self, &trimmed, actual);"}, {"sha": "36e0e085ac58721fd17fea93aded79778caac0b9", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6344a7f362b19eaf71547766135ece160aa3389e/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6344a7f362b19eaf71547766135ece160aa3389e/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=6344a7f362b19eaf71547766135ece160aa3389e", "patch": "@@ -108,7 +108,7 @@ struct FlycheckActor {\n \n enum Event {\n     Restart(Restart),\n-    CheckEvent(Option<cargo_metadata::Message>),\n+    CheckEvent(Option<Box<cargo_metadata::Message>>),\n }\n \n impl FlycheckActor {\n@@ -123,7 +123,7 @@ impl FlycheckActor {\n         let check_chan = self.cargo_handle.as_ref().map(|cargo| &cargo.receiver);\n         select! {\n             recv(inbox) -> msg => msg.ok().map(Event::Restart),\n-            recv(check_chan.unwrap_or(&never())) -> msg => Some(Event::CheckEvent(msg.ok())),\n+            recv(check_chan.unwrap_or(&never())) -> msg => Some(Event::CheckEvent(msg.ok().map(Box::new))),\n         }\n     }\n     fn run(mut self, inbox: Receiver<Restart>) {\n@@ -149,7 +149,7 @@ impl FlycheckActor {\n                     let res = cargo_handle.join();\n                     self.send(Message::Progress(Progress::DidFinish(res)));\n                 }\n-                Event::CheckEvent(Some(message)) => match message {\n+                Event::CheckEvent(Some(message)) => match *message {\n                     cargo_metadata::Message::CompilerArtifact(msg) => {\n                         self.send(Message::Progress(Progress::DidCheckCrate(msg.target.name)));\n                     }"}, {"sha": "c1b58712c16e724c0efce2d060877a4e7dc4baad", "filename": "crates/ra_arena/src/map.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6344a7f362b19eaf71547766135ece160aa3389e/crates%2Fra_arena%2Fsrc%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6344a7f362b19eaf71547766135ece160aa3389e/crates%2Fra_arena%2Fsrc%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_arena%2Fsrc%2Fmap.rs?ref=6344a7f362b19eaf71547766135ece160aa3389e", "patch": "@@ -13,18 +13,18 @@ pub struct ArenaMap<ID, V> {\n \n impl<T, V> ArenaMap<Idx<T>, V> {\n     pub fn insert(&mut self, id: Idx<T>, t: V) {\n-        let idx = Self::to_idx(id);\n+        let idx = Self::into_idx(id);\n \n         self.v.resize_with((idx + 1).max(self.v.len()), || None);\n         self.v[idx] = Some(t);\n     }\n \n     pub fn get(&self, id: Idx<T>) -> Option<&V> {\n-        self.v.get(Self::to_idx(id)).and_then(|it| it.as_ref())\n+        self.v.get(Self::into_idx(id)).and_then(|it| it.as_ref())\n     }\n \n     pub fn get_mut(&mut self, id: Idx<T>) -> Option<&mut V> {\n-        self.v.get_mut(Self::to_idx(id)).and_then(|it| it.as_mut())\n+        self.v.get_mut(Self::into_idx(id)).and_then(|it| it.as_mut())\n     }\n \n     pub fn values(&self) -> impl Iterator<Item = &V> {\n@@ -39,7 +39,7 @@ impl<T, V> ArenaMap<Idx<T>, V> {\n         self.v.iter().enumerate().filter_map(|(idx, o)| Some((Self::from_idx(idx), o.as_ref()?)))\n     }\n \n-    fn to_idx(id: Idx<T>) -> usize {\n+    fn into_idx(id: Idx<T>) -> usize {\n         u32::from(id.into_raw()) as usize\n     }\n \n@@ -51,7 +51,7 @@ impl<T, V> ArenaMap<Idx<T>, V> {\n impl<T, V> std::ops::Index<Idx<V>> for ArenaMap<Idx<V>, T> {\n     type Output = T;\n     fn index(&self, id: Idx<V>) -> &T {\n-        self.v[Self::to_idx(id)].as_ref().unwrap()\n+        self.v[Self::into_idx(id)].as_ref().unwrap()\n     }\n }\n "}, {"sha": "933a3a3b5e3d178f47425f7d1d86342f9354e749", "filename": "crates/ra_mbe/src/mbe_expander/matcher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6344a7f362b19eaf71547766135ece160aa3389e/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6344a7f362b19eaf71547766135ece160aa3389e/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs?ref=6344a7f362b19eaf71547766135ece160aa3389e", "patch": "@@ -276,7 +276,7 @@ impl<'a> TtIter<'a> {\n         Ok(tt::Subtree {\n             delimiter: None,\n             token_trees: vec![\n-                tt::Leaf::Punct(punct.clone()).into(),\n+                tt::Leaf::Punct(*punct).into(),\n                 tt::Leaf::Ident(ident.clone()).into(),\n             ],\n         }"}, {"sha": "ca6569c9f251af4df249089015aa35c1f6f212ba", "filename": "crates/ra_parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6344a7f362b19eaf71547766135ece160aa3389e/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6344a7f362b19eaf71547766135ece160aa3389e/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=6344a7f362b19eaf71547766135ece160aa3389e", "patch": "@@ -243,12 +243,10 @@ fn lambda_expr(p: &mut Parser) -> CompletedMarker {\n         // test lambda_ret_block\n         // fn main() { || -> i32 { 92 }(); }\n         block_expr(p);\n+    } else if p.at_ts(EXPR_FIRST) {\n+        expr(p);\n     } else {\n-        if p.at_ts(EXPR_FIRST) {\n-            expr(p);\n-        } else {\n-            p.error(\"expected expression\");\n-        }\n+        p.error(\"expected expression\");\n     }\n     m.complete(p, CLOSURE_EXPR)\n }"}, {"sha": "37dd3f496566d539abd58af086ad0242217048c7", "filename": "crates/ra_proc_macro/src/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6344a7f362b19eaf71547766135ece160aa3389e/crates%2Fra_proc_macro%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6344a7f362b19eaf71547766135ece160aa3389e/crates%2Fra_proc_macro%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro%2Fsrc%2Fprocess.rs?ref=6344a7f362b19eaf71547766135ece160aa3389e", "patch": "@@ -90,7 +90,7 @@ impl ProcMacroProcessSrv {\n             }\n             Some(it) => it,\n         };\n-        sender.send(Task { req: req.into(), result_tx }).unwrap();\n+        sender.send(Task { req, result_tx }).unwrap();\n         let res = result_rx\n             .recv()\n             .map_err(|_| ra_tt::ExpansionError::Unknown(\"Proc macro thread is closed.\".into()))?;"}, {"sha": "d68791cf1fdff30445f33ea9be9e9266aeb1462f", "filename": "crates/ra_text_edit/src/lib.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6344a7f362b19eaf71547766135ece160aa3389e/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6344a7f362b19eaf71547766135ece160aa3389e/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Flib.rs?ref=6344a7f362b19eaf71547766135ece160aa3389e", "patch": "@@ -76,10 +76,6 @@ impl TextEdit {\n         self.indels.iter()\n     }\n \n-    pub fn into_iter(self) -> vec::IntoIter<Indel> {\n-        self.indels.into_iter()\n-    }\n-\n     pub fn apply(&self, text: &mut String) {\n         match self.len() {\n             0 => return,\n@@ -141,6 +137,15 @@ impl TextEdit {\n     }\n }\n \n+impl IntoIterator for TextEdit {\n+    type Item = Indel;\n+    type IntoIter = vec::IntoIter<Self::Item>;\n+\n+    fn into_iter(self) -> Self::IntoIter {\n+        self.indels.into_iter()\n+    }\n+}\n+\n impl TextEditBuilder {\n     pub fn replace(&mut self, range: TextRange, replace_with: String) {\n         self.indels.push(Indel::replace(range, replace_with))"}, {"sha": "20c3f5eabfb8dfe54e2e6e75ff3f51882239c737", "filename": "crates/ra_tt/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6344a7f362b19eaf71547766135ece160aa3389e/crates%2Fra_tt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6344a7f362b19eaf71547766135ece160aa3389e/crates%2Fra_tt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tt%2Fsrc%2Flib.rs?ref=6344a7f362b19eaf71547766135ece160aa3389e", "patch": "@@ -107,7 +107,7 @@ fn print_debug_subtree(f: &mut fmt::Formatter<'_>, subtree: &Subtree, level: usi\n         for (idx, child) in subtree.token_trees.iter().enumerate() {\n             print_debug_token(f, child, level + 1)?;\n             if idx != subtree.token_trees.len() - 1 {\n-                writeln!(f, \"\")?;\n+                writeln!(f)?;\n             }\n         }\n     }"}, {"sha": "00bfcd29ed066f8d9debc63c6497bf611da35936", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6344a7f362b19eaf71547766135ece160aa3389e/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6344a7f362b19eaf71547766135ece160aa3389e/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=6344a7f362b19eaf71547766135ece160aa3389e", "patch": "@@ -10,15 +10,15 @@ pub fn is_ci() -> bool {\n \n pub trait SepBy: Sized {\n     /// Returns an `impl fmt::Display`, which joins elements via a separator.\n-    fn sep_by<'a>(self, sep: &'a str) -> SepByBuilder<'a, Self>;\n+    fn sep_by(self, sep: &str) -> SepByBuilder<'_, Self>;\n }\n \n impl<I> SepBy for I\n where\n     I: Iterator,\n     I::Item: fmt::Display,\n {\n-    fn sep_by<'a>(self, sep: &'a str) -> SepByBuilder<'a, Self> {\n+    fn sep_by(self, sep: &str) -> SepByBuilder<'_, Self> {\n         SepByBuilder::new(sep, self)\n     }\n }"}, {"sha": "9f11268eeedad0ce9898170fa3f982f5805adc5d", "filename": "crates/vfs/src/file_set.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6344a7f362b19eaf71547766135ece160aa3389e/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6344a7f362b19eaf71547766135ece160aa3389e/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Ffile_set.rs?ref=6344a7f362b19eaf71547766135ece160aa3389e", "patch": "@@ -19,6 +19,9 @@ impl FileSet {\n     pub fn len(&self) -> usize {\n         self.files.len()\n     }\n+    pub fn is_empty(&self) -> bool {\n+        self.len() == 0\n+    }\n     pub fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId> {\n         let mut base = self.paths[&anchor].clone();\n         base.pop();"}, {"sha": "af9d63b06e78dcbb70ddbf450c97dedf0ef05118", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6344a7f362b19eaf71547766135ece160aa3389e/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6344a7f362b19eaf71547766135ece160aa3389e/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=6344a7f362b19eaf71547766135ece160aa3389e", "patch": "@@ -91,18 +91,16 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: &AstSrc) -> Result<String> {\n                             support::children(&self.syntax)\n                         }\n                     }\n-                } else {\n-                    if let Some(token_kind) = field.token_kind() {\n-                        quote! {\n-                            pub fn #method_name(&self) -> Option<#ty> {\n-                                support::token(&self.syntax, #token_kind)\n-                            }\n+                } else if let Some(token_kind) = field.token_kind() {\n+                    quote! {\n+                        pub fn #method_name(&self) -> Option<#ty> {\n+                            support::token(&self.syntax, #token_kind)\n                         }\n-                    } else {\n-                        quote! {\n-                            pub fn #method_name(&self) -> Option<#ty> {\n-                                support::child(&self.syntax)\n-                            }\n+                    }\n+                } else {\n+                    quote! {\n+                        pub fn #method_name(&self) -> Option<#ty> {\n+                            support::child(&self.syntax)\n                         }\n                     }\n                 }"}]}