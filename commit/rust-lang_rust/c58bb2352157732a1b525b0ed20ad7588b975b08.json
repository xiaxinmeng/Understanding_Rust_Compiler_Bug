{"sha": "c58bb2352157732a1b525b0ed20ad7588b975b08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1OGJiMjM1MjE1NzczMmExYjUyNWIwZWQyMGFkNzU4OGI5NzViMDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-06T08:31:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-06T08:31:57Z"}, "message": "auto merge of #11315 : alexcrichton/rust/issue-11309, r=huonw\n\nThere was a scheduling race where a child may not increment the global task\r\ncount before the parent exits, and the parent would then think that there are no\r\nmore tasks left.\r\n\r\nCloses #11039", "tree": {"sha": "0366c8fbba5ac615cfd80f2959e08c1d94d88f94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0366c8fbba5ac615cfd80f2959e08c1d94d88f94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c58bb2352157732a1b525b0ed20ad7588b975b08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c58bb2352157732a1b525b0ed20ad7588b975b08", "html_url": "https://github.com/rust-lang/rust/commit/c58bb2352157732a1b525b0ed20ad7588b975b08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c58bb2352157732a1b525b0ed20ad7588b975b08/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6a1fde1c6a13691f21cf739a9e4b6706c6c49c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6a1fde1c6a13691f21cf739a9e4b6706c6c49c9", "html_url": "https://github.com/rust-lang/rust/commit/b6a1fde1c6a13691f21cf739a9e4b6706c6c49c9"}, {"sha": "9c8813f006d9955196b5e9c21c06df8a8b1a3f15", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c8813f006d9955196b5e9c21c06df8a8b1a3f15", "html_url": "https://github.com/rust-lang/rust/commit/9c8813f006d9955196b5e9c21c06df8a8b1a3f15"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "5a1ef5c836e16781b91d4af30db233cb80226e1e", "filename": "src/libnative/task.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c58bb2352157732a1b525b0ed20ad7588b975b08/src%2Flibnative%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c58bb2352157732a1b525b0ed20ad7588b975b08/src%2Flibnative%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Ftask.rs?ref=c58bb2352157732a1b525b0ed20ad7588b975b08", "patch": "@@ -72,6 +72,11 @@ pub fn spawn_opts(opts: TaskOpts, f: proc()) {\n     let task = task;\n     let ops = ops();\n \n+    // Note that this increment must happen *before* the spawn in order to\n+    // guarantee that if this task exits it will always end up waiting for the\n+    // spawned task to exit.\n+    bookeeping::increment();\n+\n     // Spawning a new OS thread guarantees that __morestack will never get\n     // triggered, but we must manually set up the actual stack bounds once this\n     // function starts executing. This raises the lower limit by a bit because\n@@ -88,7 +93,6 @@ pub fn spawn_opts(opts: TaskOpts, f: proc()) {\n         let mut ops = ops;\n         ops.stack_bounds = Some((my_stack - stack + 1024, my_stack));\n \n-        bookeeping::increment();\n         let mut f = Some(f);\n         let mut task = task;\n         task.put_runtime(ops as ~rt::Runtime);"}, {"sha": "c015ee306396e1f4fb2c4f4120bbf6a7ca0124bf", "filename": "src/test/run-pass/native-always-waits.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c58bb2352157732a1b525b0ed20ad7588b975b08/src%2Ftest%2Frun-pass%2Fnative-always-waits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c58bb2352157732a1b525b0ed20ad7588b975b08/src%2Ftest%2Frun-pass%2Fnative-always-waits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnative-always-waits.rs?ref=c58bb2352157732a1b525b0ed20ad7588b975b08", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast\n+\n+extern mod native;\n+\n+static mut set: bool = false;\n+\n+#[start]\n+fn start(argc: int, argv: **u8) -> int {\n+    // make sure that native::start always waits for all children to finish\n+    do native::start(argc, argv) {\n+        do spawn {\n+            unsafe { set = true; }\n+        }\n+    };\n+\n+    // if we didn't set the global, then return a nonzero code\n+    if unsafe {set} {0} else {1}\n+}"}]}