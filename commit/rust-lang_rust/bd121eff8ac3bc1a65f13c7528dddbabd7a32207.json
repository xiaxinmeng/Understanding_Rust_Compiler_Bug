{"sha": "bd121eff8ac3bc1a65f13c7528dddbabd7a32207", "node_id": "C_kwDOAAsO6NoAKGJkMTIxZWZmOGFjM2JjMWE2NWYxM2M3NTI4ZGRkYmFiZDdhMzIyMDc", "commit": {"author": {"name": "Serial", "email": "69764315+Serial-ATA@users.noreply.github.com", "date": "2022-08-13T00:02:57Z"}, "committer": {"name": "Serial", "email": "69764315+Serial-ATA@users.noreply.github.com", "date": "2022-08-16T19:53:01Z"}, "message": "Fix [`non_ascii_literal`] in tests", "tree": {"sha": "35ab3aca74bbc7aea6d1a31c4a6666552d993c74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35ab3aca74bbc7aea6d1a31c4a6666552d993c74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd121eff8ac3bc1a65f13c7528dddbabd7a32207", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd121eff8ac3bc1a65f13c7528dddbabd7a32207", "html_url": "https://github.com/rust-lang/rust/commit/bd121eff8ac3bc1a65f13c7528dddbabd7a32207", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd121eff8ac3bc1a65f13c7528dddbabd7a32207/comments", "author": {"login": "Serial-ATA", "id": 69764315, "node_id": "MDQ6VXNlcjY5NzY0MzE1", "avatar_url": "https://avatars.githubusercontent.com/u/69764315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Serial-ATA", "html_url": "https://github.com/Serial-ATA", "followers_url": "https://api.github.com/users/Serial-ATA/followers", "following_url": "https://api.github.com/users/Serial-ATA/following{/other_user}", "gists_url": "https://api.github.com/users/Serial-ATA/gists{/gist_id}", "starred_url": "https://api.github.com/users/Serial-ATA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Serial-ATA/subscriptions", "organizations_url": "https://api.github.com/users/Serial-ATA/orgs", "repos_url": "https://api.github.com/users/Serial-ATA/repos", "events_url": "https://api.github.com/users/Serial-ATA/events{/privacy}", "received_events_url": "https://api.github.com/users/Serial-ATA/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Serial-ATA", "id": 69764315, "node_id": "MDQ6VXNlcjY5NzY0MzE1", "avatar_url": "https://avatars.githubusercontent.com/u/69764315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Serial-ATA", "html_url": "https://github.com/Serial-ATA", "followers_url": "https://api.github.com/users/Serial-ATA/followers", "following_url": "https://api.github.com/users/Serial-ATA/following{/other_user}", "gists_url": "https://api.github.com/users/Serial-ATA/gists{/gist_id}", "starred_url": "https://api.github.com/users/Serial-ATA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Serial-ATA/subscriptions", "organizations_url": "https://api.github.com/users/Serial-ATA/orgs", "repos_url": "https://api.github.com/users/Serial-ATA/repos", "events_url": "https://api.github.com/users/Serial-ATA/events{/privacy}", "received_events_url": "https://api.github.com/users/Serial-ATA/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfa780e0ef24984f7be1c00828ddde4e6ac1eb92", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfa780e0ef24984f7be1c00828ddde4e6ac1eb92", "html_url": "https://github.com/rust-lang/rust/commit/dfa780e0ef24984f7be1c00828ddde4e6ac1eb92"}], "stats": {"total": 149, "additions": 110, "deletions": 39}, "files": [{"sha": "8980283e5c82634ca1ded1a0a0be6db8672b3094", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bd121eff8ac3bc1a65f13c7528dddbabd7a32207/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd121eff8ac3bc1a65f13c7528dddbabd7a32207/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=bd121eff8ac3bc1a65f13c7528dddbabd7a32207", "patch": "@@ -1,5 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::is_lint_allowed;\n+use clippy_utils::macros::span_is_local;\n use clippy_utils::source::snippet;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n@@ -98,6 +99,10 @@ fn escape<T: Iterator<Item = char>>(s: T) -> String {\n }\n \n fn check_str(cx: &LateContext<'_>, span: Span, id: HirId) {\n+    if !span_is_local(span) {\n+        return;\n+    }\n+\n     let string = snippet(cx, span, \"\");\n     if string.chars().any(|c| ['\\u{200B}', '\\u{ad}', '\\u{2060}'].contains(&c)) {\n         span_lint_and_sugg(\n@@ -113,6 +118,7 @@ fn check_str(cx: &LateContext<'_>, span: Span, id: HirId) {\n             Applicability::MachineApplicable,\n         );\n     }\n+\n     if string.chars().any(|c| c as u32 > 0x7F) {\n         span_lint_and_sugg(\n             cx,\n@@ -128,6 +134,7 @@ fn check_str(cx: &LateContext<'_>, span: Span, id: HirId) {\n             Applicability::MachineApplicable,\n         );\n     }\n+\n     if is_lint_allowed(cx, NON_ASCII_LITERAL, id) && string.chars().zip(string.nfc()).any(|(a, b)| a != b) {\n         span_lint_and_sugg(\n             cx,"}, {"sha": "94b4723452fada45a142dcd5dc7992e028ae8b60", "filename": "tests/ui/unicode.fixed", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/bd121eff8ac3bc1a65f13c7528dddbabd7a32207/tests%2Fui%2Funicode.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bd121eff8ac3bc1a65f13c7528dddbabd7a32207/tests%2Fui%2Funicode.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funicode.fixed?ref=bd121eff8ac3bc1a65f13c7528dddbabd7a32207", "patch": "@@ -1,4 +1,7 @@\n // run-rustfix\n+// compile-flags: --test\n+#![allow(dead_code)]\n+\n #[warn(clippy::invisible_characters)]\n fn zero() {\n     print!(\"Here >\\u{200B}< is a ZWS, and \\u{200B}another\");\n@@ -15,22 +18,43 @@ fn canon() {\n     print!(\"a\\u{0300}h?\"); // also ok\n }\n \n-#[warn(clippy::non_ascii_literal)]\n-fn uni() {\n-    print!(\"\\u{dc}ben!\");\n-    print!(\"\\u{DC}ben!\"); // this is ok\n-}\n+mod non_ascii_literal {\n+    #![deny(clippy::non_ascii_literal)]\n+\n+    fn uni() {\n+        print!(\"\\u{dc}ben!\");\n+        print!(\"\\u{DC}ben!\"); // this is ok\n+    }\n+\n+    // issue 8013\n+    fn single_quote() {\n+        const _EMPTY_BLOCK: char = '\\u{25b1}';\n+        const _FULL_BLOCK: char = '\\u{25b0}';\n+    }\n+\n+    #[test]\n+    pub fn issue_7739() {\n+        // Ry\u016b crate: https://github.com/dtolnay/ryu\n+    }\n+\n+    mod issue_8263 {\n+        #![deny(clippy::non_ascii_literal)]\n+\n+        // Re-allow for a single test\n+        #[test]\n+        #[allow(clippy::non_ascii_literal)]\n+        fn allowed() {\n+            let _ = \"\u60b2\u3057\u3044\u304b\u306a\u3001\u3053\u3053\u306b\u65e5\u672c\u8a9e\u3092\u66f8\u304f\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\";\n+        }\n \n-// issue 8013\n-#[warn(clippy::non_ascii_literal)]\n-fn single_quote() {\n-    const _EMPTY_BLOCK: char = '\\u{25b1}';\n-    const _FULL_BLOCK: char = '\\u{25b0}';\n+        #[test]\n+        fn denied() {\n+            let _ = \"\\u{60b2}\\u{3057}\\u{3044}\\u{304b}\\u{306a}\\u{3001}\\u{3053}\\u{3053}\\u{306b}\\u{65e5}\\u{672c}\\u{8a9e}\\u{3092}\\u{66f8}\\u{304f}\\u{3053}\\u{3068}\\u{306f}\\u{3067}\\u{304d}\\u{306a}\\u{3044}\\u{3002}\";\n+        }\n+    }\n }\n \n fn main() {\n     zero();\n-    uni();\n     canon();\n-    single_quote();\n }"}, {"sha": "6ad0b255b94856c96943f0af5d329db3f7d46f8e", "filename": "tests/ui/unicode.rs", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/bd121eff8ac3bc1a65f13c7528dddbabd7a32207/tests%2Fui%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd121eff8ac3bc1a65f13c7528dddbabd7a32207/tests%2Fui%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funicode.rs?ref=bd121eff8ac3bc1a65f13c7528dddbabd7a32207", "patch": "@@ -1,4 +1,7 @@\n // run-rustfix\n+// compile-flags: --test\n+#![allow(dead_code)]\n+\n #[warn(clippy::invisible_characters)]\n fn zero() {\n     print!(\"Here >\u200b< is a ZWS, and \u200banother\");\n@@ -15,22 +18,43 @@ fn canon() {\n     print!(\"a\\u{0300}h?\"); // also ok\n }\n \n-#[warn(clippy::non_ascii_literal)]\n-fn uni() {\n-    print!(\"\u00dcben!\");\n-    print!(\"\\u{DC}ben!\"); // this is ok\n-}\n+mod non_ascii_literal {\n+    #![deny(clippy::non_ascii_literal)]\n+\n+    fn uni() {\n+        print!(\"\u00dcben!\");\n+        print!(\"\\u{DC}ben!\"); // this is ok\n+    }\n+\n+    // issue 8013\n+    fn single_quote() {\n+        const _EMPTY_BLOCK: char = '\u25b1';\n+        const _FULL_BLOCK: char = '\u25b0';\n+    }\n+\n+    #[test]\n+    pub fn issue_7739() {\n+        // Ry\u016b crate: https://github.com/dtolnay/ryu\n+    }\n+\n+    mod issue_8263 {\n+        #![deny(clippy::non_ascii_literal)]\n+\n+        // Re-allow for a single test\n+        #[test]\n+        #[allow(clippy::non_ascii_literal)]\n+        fn allowed() {\n+            let _ = \"\u60b2\u3057\u3044\u304b\u306a\u3001\u3053\u3053\u306b\u65e5\u672c\u8a9e\u3092\u66f8\u304f\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\";\n+        }\n \n-// issue 8013\n-#[warn(clippy::non_ascii_literal)]\n-fn single_quote() {\n-    const _EMPTY_BLOCK: char = '\u25b1';\n-    const _FULL_BLOCK: char = '\u25b0';\n+        #[test]\n+        fn denied() {\n+            let _ = \"\u60b2\u3057\u3044\u304b\u306a\u3001\u3053\u3053\u306b\u65e5\u672c\u8a9e\u3092\u66f8\u304f\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\";\n+        }\n+    }\n }\n \n fn main() {\n     zero();\n-    uni();\n     canon();\n-    single_quote();\n }"}, {"sha": "ea74a81451e3a9c3157bd99d3819c1690d602266", "filename": "tests/ui/unicode.stderr", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/bd121eff8ac3bc1a65f13c7528dddbabd7a32207/tests%2Fui%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd121eff8ac3bc1a65f13c7528dddbabd7a32207/tests%2Fui%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funicode.stderr?ref=bd121eff8ac3bc1a65f13c7528dddbabd7a32207", "patch": "@@ -1,50 +1,66 @@\n error: invisible character detected\n-  --> $DIR/unicode.rs:4:12\n+  --> $DIR/unicode.rs:7:12\n    |\n LL |     print!(\"Here >\u200b< is a ZWS, and \u200banother\");\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider replacing the string with: `\"Here >/u{200B}< is a ZWS, and /u{200B}another\"`\n    |\n    = note: `-D clippy::invisible-characters` implied by `-D warnings`\n \n error: invisible character detected\n-  --> $DIR/unicode.rs:6:12\n+  --> $DIR/unicode.rs:9:12\n    |\n LL |     print!(\"Here >\u00ad< is a SHY, and \u00adanother\");\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider replacing the string with: `\"Here >/u{AD}< is a SHY, and /u{AD}another\"`\n \n error: invisible character detected\n-  --> $DIR/unicode.rs:8:12\n+  --> $DIR/unicode.rs:11:12\n    |\n LL |     print!(\"Here >\u2060< is a WJ, and \u2060another\");\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider replacing the string with: `\"Here >/u{2060}< is a WJ, and /u{2060}another\"`\n \n error: non-NFC Unicode sequence detected\n-  --> $DIR/unicode.rs:14:12\n+  --> $DIR/unicode.rs:17:12\n    |\n LL |     print!(\"\u0300a\u0300h?\");\n    |            ^^^^^ help: consider replacing the string with: `\"\u0300\u00e0h?\"`\n    |\n    = note: `-D clippy::unicode-not-nfc` implied by `-D warnings`\n \n error: literal non-ASCII character detected\n-  --> $DIR/unicode.rs:20:12\n+  --> $DIR/unicode.rs:25:16\n    |\n-LL |     print!(\"\u00dcben!\");\n-   |            ^^^^^^^ help: consider replacing the string with: `\"/u{dc}ben!\"`\n+LL |         print!(\"\u00dcben!\");\n+   |                ^^^^^^^ help: consider replacing the string with: `\"/u{dc}ben!\"`\n    |\n-   = note: `-D clippy::non-ascii-literal` implied by `-D warnings`\n+note: the lint level is defined here\n+  --> $DIR/unicode.rs:22:13\n+   |\n+LL |     #![deny(clippy::non_ascii_literal)]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: literal non-ASCII character detected\n+  --> $DIR/unicode.rs:31:36\n+   |\n+LL |         const _EMPTY_BLOCK: char = '\u25b1';\n+   |                                    ^^^ help: consider replacing the string with: `'/u{25b1}'`\n \n error: literal non-ASCII character detected\n-  --> $DIR/unicode.rs:27:32\n+  --> $DIR/unicode.rs:32:35\n    |\n-LL |     const _EMPTY_BLOCK: char = '\u25b1';\n-   |                                ^^^ help: consider replacing the string with: `'/u{25b1}'`\n+LL |         const _FULL_BLOCK: char = '\u25b0';\n+   |                                   ^^^ help: consider replacing the string with: `'/u{25b0}'`\n \n error: literal non-ASCII character detected\n-  --> $DIR/unicode.rs:28:31\n+  --> $DIR/unicode.rs:52:21\n+   |\n+LL |             let _ = \"\u60b2\u3057\u3044\u304b\u306a\u3001\u3053\u3053\u306b\u65e5\u672c\u8a9e\u3092\u66f8\u304f\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\";\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider replacing the string with: `\"/u{60b2}/u{3057}/u{3044}/u{304b}/u{306a}/u{3001}/u{3053}/u{3053}/u{306b}/u{65e5}/u{672c}/u{8a9e}/u{3092}/u{66f8}/u{304f}/u{3053}/u{3068}/u{306f}/u{3067}/u{304d}/u{306a}/u{3044}/u{3002}\"`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unicode.rs:41:17\n    |\n-LL |     const _FULL_BLOCK: char = '\u25b0';\n-   |                               ^^^ help: consider replacing the string with: `'/u{25b0}'`\n+LL |         #![deny(clippy::non_ascii_literal)]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n "}]}