{"sha": "82bd7196c2e47d8f66566b049b721089abbf9ab9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyYmQ3MTk2YzJlNDdkOGY2NjU2NmIwNDliNzIxMDg5YWJiZjlhYjk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-16T12:40:32Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-04-23T20:35:15Z"}, "message": "rustc: don't track var_hir_id or mutability in mir::UpvarDecl.", "tree": {"sha": "e29c55b1370bc340b79342fb6c181f27fa4af073", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e29c55b1370bc340b79342fb6c181f27fa4af073"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82bd7196c2e47d8f66566b049b721089abbf9ab9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82bd7196c2e47d8f66566b049b721089abbf9ab9", "html_url": "https://github.com/rust-lang/rust/commit/82bd7196c2e47d8f66566b049b721089abbf9ab9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82bd7196c2e47d8f66566b049b721089abbf9ab9/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61fcbfcd59dbc2b8b900aff5ea464330637b210b", "url": "https://api.github.com/repos/rust-lang/rust/commits/61fcbfcd59dbc2b8b900aff5ea464330637b210b", "html_url": "https://github.com/rust-lang/rust/commit/61fcbfcd59dbc2b8b900aff5ea464330637b210b"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "7c432c9c7eb242d1896048f427dbf5eb35cc9dc4", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/82bd7196c2e47d8f66566b049b721089abbf9ab9/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82bd7196c2e47d8f66566b049b721089abbf9ab9/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=82bd7196c2e47d8f66566b049b721089abbf9ab9", "patch": "@@ -4,7 +4,7 @@\n \n use crate::hir::def::{CtorKind, Namespace};\n use crate::hir::def_id::DefId;\n-use crate::hir::{self, HirId, InlineAsm as HirInlineAsm};\n+use crate::hir::{self, InlineAsm as HirInlineAsm};\n use crate::mir::interpret::{ConstValue, InterpError, Scalar};\n use crate::mir::visit::MirVisitable;\n use rustc_apfloat::ieee::{Double, Single};\n@@ -138,16 +138,16 @@ pub struct Mir<'tcx> {\n     /// If this MIR was built for a constant, this will be 0.\n     pub arg_count: usize,\n \n-    /// Names and capture modes of all the closure upvars, assuming\n-    /// the first argument is either the closure or a reference to it.\n-    pub upvar_decls: Vec<UpvarDecl>,\n-\n     /// Mark an argument local (which must be a tuple) as getting passed as\n     /// its individual components at the LLVM level.\n     ///\n     /// This is used for the \"rust-call\" ABI.\n     pub spread_arg: Option<Local>,\n \n+    /// Names and capture modes of all the closure upvars, assuming\n+    /// the first argument is either the closure or a reference to it.\n+    pub upvar_decls: Vec<UpvarDecl>,\n+\n     /// Mark this MIR of a const context other than const functions as having converted a `&&` or\n     /// `||` expression into `&` or `|` respectively. This is problematic because if we ever stop\n     /// this conversion from happening and use short circuiting, we will cause the following code\n@@ -986,13 +986,8 @@ impl<'tcx> LocalDecl<'tcx> {\n pub struct UpvarDecl {\n     pub debug_name: Name,\n \n-    /// `HirId` of the captured variable\n-    pub var_hir_id: ClearCrossCrate<HirId>,\n-\n     /// If true, the capture is behind a reference.\n     pub by_ref: bool,\n-\n-    pub mutability: Mutability,\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "c58b570d8fc9fb74710378ef83a8338836cd8245", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82bd7196c2e47d8f66566b049b721089abbf9ab9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82bd7196c2e47d8f66566b049b721089abbf9ab9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=82bd7196c2e47d8f66566b049b721089abbf9ab9", "patch": "@@ -556,10 +556,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 );\n                 // Not in a closure\n                 debug_assert!(\n-                    this.upvar_decls.len() > upvar_index.index(),\n+                    this.upvar_mutbls.len() > upvar_index.index(),\n                     \"Unexpected capture place\"\n                 );\n-                this.upvar_decls[upvar_index.index()].mutability\n+                this.upvar_mutbls[upvar_index.index()]\n             }\n             _ => bug!(\"Unexpected capture place\"),\n         };"}, {"sha": "cd2fa10927f6717fcfdda36a212cda68ccaa8a65", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/82bd7196c2e47d8f66566b049b721089abbf9ab9/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82bd7196c2e47d8f66566b049b721089abbf9ab9/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=82bd7196c2e47d8f66566b049b721089abbf9ab9", "patch": "@@ -376,6 +376,7 @@ struct Builder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n     canonical_user_type_annotations: ty::CanonicalUserTypeAnnotations<'tcx>,\n     upvar_decls: Vec<UpvarDecl>,\n+    upvar_mutbls: Vec<Mutability>,\n     unit_temp: Option<Place<'tcx>>,\n \n     /// Cached block with the `RESUME` terminator; this is created\n@@ -625,6 +626,7 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n     let fn_def_id = tcx_hir.local_def_id_from_hir_id(fn_id);\n \n     // Gather the upvars of a closure, if any.\n+    let mut upvar_mutbls = vec![];\n     // In analyze_closure() in upvar.rs we gathered a list of upvars used by a\n     // closure and we stored in a map called upvar_list in TypeckTables indexed\n     // with the closure's DefId. Here, we run through that vec of UpvarIds for\n@@ -644,24 +646,24 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n             };\n             let mut decl = UpvarDecl {\n                 debug_name: keywords::Invalid.name(),\n-                var_hir_id: ClearCrossCrate::Set(var_hir_id),\n                 by_ref,\n-                mutability: Mutability::Not,\n             };\n+            let mut mutability = Mutability::Not;\n             if let Some(Node::Binding(pat)) = tcx_hir.find(var_node_id) {\n                 if let hir::PatKind::Binding(_, _, ident, _) = pat.node {\n                     decl.debug_name = ident.name;\n                     if let Some(&bm) = hir.tables.pat_binding_modes().get(pat.hir_id) {\n                         if bm == ty::BindByValue(hir::MutMutable) {\n-                            decl.mutability = Mutability::Mut;\n+                            mutability = Mutability::Mut;\n                         } else {\n-                            decl.mutability = Mutability::Not;\n+                            mutability = Mutability::Not;\n                         }\n                     } else {\n                         tcx.sess.delay_span_bug(pat.span, \"missing binding mode\");\n                     }\n                 }\n             }\n+            upvar_mutbls.push(mutability);\n             decl\n         })\n         .collect();\n@@ -672,7 +674,8 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n         safety,\n         return_ty,\n         return_ty_span,\n-        upvar_decls);\n+        upvar_decls,\n+        upvar_mutbls);\n \n     let call_site_scope = region::Scope {\n         id: body.value.hir_id.local_id,\n@@ -734,7 +737,7 @@ fn construct_const<'a, 'gcx, 'tcx>(\n     let ty = hir.tables().expr_ty_adjusted(ast_expr);\n     let owner_id = tcx.hir().body_owner(body_id);\n     let span = tcx.hir().span(owner_id);\n-    let mut builder = Builder::new(hir, span, 0, Safety::Safe, ty, ty_span,vec![]);\n+    let mut builder = Builder::new(hir, span, 0, Safety::Safe, ty, ty_span, vec![], vec![]);\n \n     let mut block = START_BLOCK;\n     let expr = builder.hir.mirror(ast_expr);\n@@ -762,7 +765,7 @@ fn construct_error<'a, 'gcx, 'tcx>(hir: Cx<'a, 'gcx, 'tcx>,\n     let owner_id = hir.tcx().hir().body_owner(body_id);\n     let span = hir.tcx().hir().span(owner_id);\n     let ty = hir.tcx().types.err;\n-    let mut builder = Builder::new(hir, span, 0, Safety::Safe, ty, span, vec![]);\n+    let mut builder = Builder::new(hir, span, 0, Safety::Safe, ty, span, vec![], vec![]);\n     let source_info = builder.source_info(span);\n     builder.cfg.terminate(START_BLOCK, source_info, TerminatorKind::Unreachable);\n     builder.finish(None)\n@@ -775,7 +778,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n            safety: Safety,\n            return_ty: Ty<'tcx>,\n            return_span: Span,\n-           upvar_decls: Vec<UpvarDecl>)\n+           upvar_decls: Vec<UpvarDecl>,\n+           upvar_mutbls: Vec<Mutability>)\n            -> Builder<'a, 'gcx, 'tcx> {\n         let lint_level = LintLevel::Explicit(hir.root_lint_level);\n         let mut builder = Builder {\n@@ -798,6 +802,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             ),\n             canonical_user_type_annotations: IndexVec::new(),\n             upvar_decls,\n+            upvar_mutbls,\n             var_indices: Default::default(),\n             unit_temp: None,\n             cached_resume_block: None,"}]}