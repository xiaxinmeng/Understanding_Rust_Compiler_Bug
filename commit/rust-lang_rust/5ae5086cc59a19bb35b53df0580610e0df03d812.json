{"sha": "5ae5086cc59a19bb35b53df0580610e0df03d812", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZTUwODZjYzU5YTE5YmIzNWI1M2RmMDU4MDYxMGUwZGYwM2Q4MTI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-17T05:38:26Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-22T23:29:29Z"}, "message": "let_chains: --bless tests due to recovery in lowering.", "tree": {"sha": "ee9c23b37ed144ddce8c2ba2e50f6d82e34a2888", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee9c23b37ed144ddce8c2ba2e50f6d82e34a2888"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ae5086cc59a19bb35b53df0580610e0df03d812", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ae5086cc59a19bb35b53df0580610e0df03d812", "html_url": "https://github.com/rust-lang/rust/commit/5ae5086cc59a19bb35b53df0580610e0df03d812", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ae5086cc59a19bb35b53df0580610e0df03d812/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2017be4ef657d1a7d03a9dac80d868645c6673dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2017be4ef657d1a7d03a9dac80d868645c6673dd", "html_url": "https://github.com/rust-lang/rust/commit/2017be4ef657d1a7d03a9dac80d868645c6673dd"}], "stats": {"total": 999, "additions": 905, "deletions": 94}, "files": [{"sha": "7d1e5c3d64df3f3989051e920a8b9fab658b85bb", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.rs", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5086cc59a19bb35b53df0580610e0df03d812/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5086cc59a19bb35b53df0580610e0df03d812/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs?ref=5ae5086cc59a19bb35b53df0580610e0df03d812", "patch": "@@ -1,4 +1,4 @@\n-// Here we test that `ast_validation` behaves correctly wrt. `let $pats = $expr` expressions.\n+// Here we test that `lowering` behaves correctly wrt. `let $pats = $expr` expressions.\n //\n // We want to make sure that `let` is banned in situations other than:\n //\n@@ -30,17 +30,22 @@ fn main() {}\n \n fn nested_within_if_expr() {\n     if &let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR `let` expressions only supported in `if`\n+    //~^ ERROR mismatched types\n \n     if !let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n     if *let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n+    //~^ ERROR type `bool` cannot be dereferenced\n     if -let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n+    //~^ ERROR cannot apply unary operator `-` to type `bool`\n \n     fn _check_try_binds_tighter() -> Result<(), ()> {\n         if let 0 = 0? {}\n+        //~^ ERROR the `?` operator can only be applied to values that implement `std::ops::Try`\n         Ok(())\n     }\n     if (let 0 = 0)? {} //~ ERROR `let` expressions are not supported here\n+    //~^ ERROR the `?` operator can only be applied to values that implement `std::ops::Try`\n+    //~| ERROR the `?` operator can only be used in a function that returns `Result`\n \n     if true || let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n     if (true || let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n@@ -49,42 +54,62 @@ fn nested_within_if_expr() {\n \n     let mut x = true;\n     if x = let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n+    //~^ ERROR mismatched types\n \n     if true..(let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n+    //~^ ERROR mismatched types\n     if ..(let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n+    //~^ ERROR mismatched types\n     if (let 0 = 0).. {} //~ ERROR `let` expressions are not supported here\n+    //~^ ERROR mismatched types\n \n     // Binds as `(let ... = true)..true &&/|| false`.\n     if let Range { start: _, end: _ } = true..true && false {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR mismatched types\n     if let Range { start: _, end: _ } = true..true || false {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR mismatched types\n \n     // Binds as `(let Range { start: F, end } = F)..(|| true)`.\n     const F: fn() -> bool = || true;\n     if let Range { start: F, end } = F..|| true {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR mismatched types\n+    //~| ERROR mismatched types\n \n     // Binds as `(let Range { start: true, end } = t)..(&&false)`.\n     let t = &&true;\n     if let Range { start: true, end } = t..&&false {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR mismatched types\n+    //~| ERROR mismatched types\n \n     if let true = let true = true {} //~ ERROR `let` expressions are not supported here\n }\n \n fn nested_within_while_expr() {\n     while &let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n+    //~^ ERROR mismatched types\n \n     while !let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n     while *let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n+    //~^ ERROR type `bool` cannot be dereferenced\n     while -let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n+    //~^ ERROR cannot apply unary operator `-` to type `bool`\n \n     fn _check_try_binds_tighter() -> Result<(), ()> {\n         while let 0 = 0? {}\n+        //~^ ERROR the `?` operator can only be applied to values that implement `std::ops::Try`\n         Ok(())\n     }\n     while (let 0 = 0)? {} //~ ERROR `let` expressions are not supported here\n+    //~^ ERROR the `?` operator can only be applied to values that implement `std::ops::Try`\n+    //~| ERROR the `?` operator can only be used in a function that returns `Result`\n \n     while true || let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n     while (true || let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n@@ -93,26 +118,40 @@ fn nested_within_while_expr() {\n \n     let mut x = true;\n     while x = let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n+    //~^ ERROR mismatched types\n \n     while true..(let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n+    //~^ ERROR mismatched types\n     while ..(let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n+    //~^ ERROR mismatched types\n     while (let 0 = 0).. {} //~ ERROR `let` expressions are not supported here\n+    //~^ ERROR mismatched types\n \n     // Binds as `(let ... = true)..true &&/|| false`.\n     while let Range { start: _, end: _ } = true..true && false {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR mismatched types\n     while let Range { start: _, end: _ } = true..true || false {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR mismatched types\n \n     // Binds as `(let Range { start: F, end } = F)..(|| true)`.\n     const F: fn() -> bool = || true;\n     while let Range { start: F, end } = F..|| true {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR mismatched types\n+    //~| ERROR mismatched types\n \n     // Binds as `(let Range { start: true, end } = t)..(&&false)`.\n     let t = &&true;\n     while let Range { start: true, end } = t..&&false {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR mismatched types\n+    //~| ERROR mismatched types\n \n     while let true = let true = true {} //~ ERROR `let` expressions are not supported here\n }\n@@ -132,13 +171,18 @@ fn outside_if_and_while_expr() {\n \n     !let 0 = 0; //~ ERROR `let` expressions are not supported here\n     *let 0 = 0; //~ ERROR `let` expressions are not supported here\n+    //~^ ERROR type `bool` cannot be dereferenced\n     -let 0 = 0; //~ ERROR `let` expressions are not supported here\n+    //~^ ERROR cannot apply unary operator `-` to type `bool`\n \n     fn _check_try_binds_tighter() -> Result<(), ()> {\n         let 0 = 0?;\n+        //~^ ERROR the `?` operator can only be applied to values that implement `std::ops::Try`\n         Ok(())\n     }\n     (let 0 = 0)?; //~ ERROR `let` expressions are not supported here\n+    //~^ ERROR the `?` operator can only be used in a function that returns `Result`\n+    //~| ERROR the `?` operator can only be applied to values that implement `std::ops::Try`\n \n     true || let 0 = 0; //~ ERROR `let` expressions are not supported here\n     (true || let 0 = 0); //~ ERROR `let` expressions are not supported here\n@@ -153,6 +197,7 @@ fn outside_if_and_while_expr() {\n \n     (let Range { start: _, end: _ } = true..true || false);\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n \n     (let true = let true = true);\n     //~^ ERROR `let` expressions are not supported here\n@@ -161,6 +206,7 @@ fn outside_if_and_while_expr() {\n     // Check function tail position.\n     &let 0 = 0\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n }\n \n // Let's make sure that `let` inside const generic arguments are considered.\n@@ -170,14 +216,20 @@ fn inside_const_generic_arguments() {\n \n     if let A::<{\n         true && let 1 = 1 //~ ERROR `let` expressions are not supported here\n+        //~^ ERROR constant contains unimplemented expression type\n+        //~| ERROR constant contains unimplemented expression type\n     }>::O = 5 {}\n \n     while let A::<{\n         true && let 1 = 1 //~ ERROR `let` expressions are not supported here\n+        //~^ ERROR constant contains unimplemented expression type\n+        //~| ERROR constant contains unimplemented expression type\n     }>::O = 5 {}\n \n     if A::<{\n         true && let 1 = 1 //~ ERROR `let` expressions are not supported here\n+        //~^ ERROR constant contains unimplemented expression type\n+        //~| ERROR constant contains unimplemented expression type\n     }>::O == 5 {}\n \n     // In the cases above we have `ExprKind::Block` to help us out."}, {"sha": "207d0d6d6b84a431bf4b5eb1e674f041c8f7b329", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 523, "deletions": 57, "changes": 580, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5086cc59a19bb35b53df0580610e0df03d812/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5086cc59a19bb35b53df0580610e0df03d812/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=5ae5086cc59a19bb35b53df0580610e0df03d812", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `,` or `>`, found `&&`\n-  --> $DIR/disallowed-positions.rs:190:14\n+  --> $DIR/disallowed-positions.rs:242:14\n    |\n LL |         true && let 1 = 1\n    |              ^^ expected one of `,` or `>` here\n@@ -44,7 +44,7 @@ LL |     if *let 0 = 0 {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:37:9\n+  --> $DIR/disallowed-positions.rs:38:9\n    |\n LL |     if -let 0 = 0 {}\n    |         ^^^^^^^^^\n@@ -53,7 +53,7 @@ LL |     if -let 0 = 0 {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:43:9\n+  --> $DIR/disallowed-positions.rs:46:9\n    |\n LL |     if (let 0 = 0)? {}\n    |         ^^^^^^^^^\n@@ -62,7 +62,7 @@ LL |     if (let 0 = 0)? {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:45:16\n+  --> $DIR/disallowed-positions.rs:50:16\n    |\n LL |     if true || let 0 = 0 {}\n    |                ^^^^^^^^^\n@@ -71,7 +71,7 @@ LL |     if true || let 0 = 0 {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:46:17\n+  --> $DIR/disallowed-positions.rs:51:17\n    |\n LL |     if (true || let 0 = 0) {}\n    |                 ^^^^^^^^^\n@@ -80,7 +80,7 @@ LL |     if (true || let 0 = 0) {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:47:25\n+  --> $DIR/disallowed-positions.rs:52:25\n    |\n LL |     if true && (true || let 0 = 0) {}\n    |                         ^^^^^^^^^\n@@ -89,7 +89,7 @@ LL |     if true && (true || let 0 = 0) {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:48:25\n+  --> $DIR/disallowed-positions.rs:53:25\n    |\n LL |     if true || (true && let 0 = 0) {}\n    |                         ^^^^^^^^^\n@@ -98,7 +98,7 @@ LL |     if true || (true && let 0 = 0) {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:51:12\n+  --> $DIR/disallowed-positions.rs:56:12\n    |\n LL |     if x = let 0 = 0 {}\n    |            ^^^^^^^^^\n@@ -107,7 +107,7 @@ LL |     if x = let 0 = 0 {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:53:15\n+  --> $DIR/disallowed-positions.rs:59:15\n    |\n LL |     if true..(let 0 = 0) {}\n    |               ^^^^^^^^^\n@@ -116,7 +116,7 @@ LL |     if true..(let 0 = 0) {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:54:11\n+  --> $DIR/disallowed-positions.rs:61:11\n    |\n LL |     if ..(let 0 = 0) {}\n    |           ^^^^^^^^^\n@@ -125,7 +125,7 @@ LL |     if ..(let 0 = 0) {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:55:9\n+  --> $DIR/disallowed-positions.rs:63:9\n    |\n LL |     if (let 0 = 0).. {}\n    |         ^^^^^^^^^\n@@ -134,7 +134,7 @@ LL |     if (let 0 = 0).. {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:58:8\n+  --> $DIR/disallowed-positions.rs:67:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -143,7 +143,7 @@ LL |     if let Range { start: _, end: _ } = true..true && false {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:60:8\n+  --> $DIR/disallowed-positions.rs:71:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -152,7 +152,7 @@ LL |     if let Range { start: _, end: _ } = true..true || false {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:65:8\n+  --> $DIR/disallowed-positions.rs:78:8\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -161,7 +161,7 @@ LL |     if let Range { start: F, end } = F..|| true {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:70:8\n+  --> $DIR/disallowed-positions.rs:86:8\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -170,7 +170,7 @@ LL |     if let Range { start: true, end } = t..&&false {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:73:19\n+  --> $DIR/disallowed-positions.rs:92:19\n    |\n LL |     if let true = let true = true {}\n    |                   ^^^^^^^^^^^^^^^\n@@ -179,7 +179,7 @@ LL |     if let true = let true = true {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:77:12\n+  --> $DIR/disallowed-positions.rs:96:12\n    |\n LL |     while &let 0 = 0 {}\n    |            ^^^^^^^^^\n@@ -188,7 +188,7 @@ LL |     while &let 0 = 0 {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:79:12\n+  --> $DIR/disallowed-positions.rs:99:12\n    |\n LL |     while !let 0 = 0 {}\n    |            ^^^^^^^^^\n@@ -197,7 +197,7 @@ LL |     while !let 0 = 0 {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:80:12\n+  --> $DIR/disallowed-positions.rs:100:12\n    |\n LL |     while *let 0 = 0 {}\n    |            ^^^^^^^^^\n@@ -206,7 +206,7 @@ LL |     while *let 0 = 0 {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:81:12\n+  --> $DIR/disallowed-positions.rs:102:12\n    |\n LL |     while -let 0 = 0 {}\n    |            ^^^^^^^^^\n@@ -215,7 +215,7 @@ LL |     while -let 0 = 0 {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:87:12\n+  --> $DIR/disallowed-positions.rs:110:12\n    |\n LL |     while (let 0 = 0)? {}\n    |            ^^^^^^^^^\n@@ -224,7 +224,7 @@ LL |     while (let 0 = 0)? {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:89:19\n+  --> $DIR/disallowed-positions.rs:114:19\n    |\n LL |     while true || let 0 = 0 {}\n    |                   ^^^^^^^^^\n@@ -233,7 +233,7 @@ LL |     while true || let 0 = 0 {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:90:20\n+  --> $DIR/disallowed-positions.rs:115:20\n    |\n LL |     while (true || let 0 = 0) {}\n    |                    ^^^^^^^^^\n@@ -242,7 +242,7 @@ LL |     while (true || let 0 = 0) {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:91:28\n+  --> $DIR/disallowed-positions.rs:116:28\n    |\n LL |     while true && (true || let 0 = 0) {}\n    |                            ^^^^^^^^^\n@@ -251,7 +251,7 @@ LL |     while true && (true || let 0 = 0) {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:92:28\n+  --> $DIR/disallowed-positions.rs:117:28\n    |\n LL |     while true || (true && let 0 = 0) {}\n    |                            ^^^^^^^^^\n@@ -260,7 +260,7 @@ LL |     while true || (true && let 0 = 0) {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:95:15\n+  --> $DIR/disallowed-positions.rs:120:15\n    |\n LL |     while x = let 0 = 0 {}\n    |               ^^^^^^^^^\n@@ -269,7 +269,7 @@ LL |     while x = let 0 = 0 {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:97:18\n+  --> $DIR/disallowed-positions.rs:123:18\n    |\n LL |     while true..(let 0 = 0) {}\n    |                  ^^^^^^^^^\n@@ -278,7 +278,7 @@ LL |     while true..(let 0 = 0) {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:98:14\n+  --> $DIR/disallowed-positions.rs:125:14\n    |\n LL |     while ..(let 0 = 0) {}\n    |              ^^^^^^^^^\n@@ -287,7 +287,7 @@ LL |     while ..(let 0 = 0) {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:99:12\n+  --> $DIR/disallowed-positions.rs:127:12\n    |\n LL |     while (let 0 = 0).. {}\n    |            ^^^^^^^^^\n@@ -296,7 +296,7 @@ LL |     while (let 0 = 0).. {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:102:11\n+  --> $DIR/disallowed-positions.rs:131:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -305,7 +305,7 @@ LL |     while let Range { start: _, end: _ } = true..true && false {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:104:11\n+  --> $DIR/disallowed-positions.rs:135:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -314,7 +314,7 @@ LL |     while let Range { start: _, end: _ } = true..true || false {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:109:11\n+  --> $DIR/disallowed-positions.rs:142:11\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -323,7 +323,7 @@ LL |     while let Range { start: F, end } = F..|| true {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:114:11\n+  --> $DIR/disallowed-positions.rs:150:11\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -332,7 +332,7 @@ LL |     while let Range { start: true, end } = t..&&false {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:117:22\n+  --> $DIR/disallowed-positions.rs:156:22\n    |\n LL |     while let true = let true = true {}\n    |                      ^^^^^^^^^^^^^^^\n@@ -341,7 +341,7 @@ LL |     while let true = let true = true {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:131:6\n+  --> $DIR/disallowed-positions.rs:170:6\n    |\n LL |     &let 0 = 0;\n    |      ^^^^^^^^^\n@@ -350,7 +350,7 @@ LL |     &let 0 = 0;\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:133:6\n+  --> $DIR/disallowed-positions.rs:172:6\n    |\n LL |     !let 0 = 0;\n    |      ^^^^^^^^^\n@@ -359,7 +359,7 @@ LL |     !let 0 = 0;\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:134:6\n+  --> $DIR/disallowed-positions.rs:173:6\n    |\n LL |     *let 0 = 0;\n    |      ^^^^^^^^^\n@@ -368,7 +368,7 @@ LL |     *let 0 = 0;\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:135:6\n+  --> $DIR/disallowed-positions.rs:175:6\n    |\n LL |     -let 0 = 0;\n    |      ^^^^^^^^^\n@@ -377,7 +377,7 @@ LL |     -let 0 = 0;\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:141:6\n+  --> $DIR/disallowed-positions.rs:183:6\n    |\n LL |     (let 0 = 0)?;\n    |      ^^^^^^^^^\n@@ -386,7 +386,7 @@ LL |     (let 0 = 0)?;\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:143:13\n+  --> $DIR/disallowed-positions.rs:187:13\n    |\n LL |     true || let 0 = 0;\n    |             ^^^^^^^^^\n@@ -395,7 +395,7 @@ LL |     true || let 0 = 0;\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:144:14\n+  --> $DIR/disallowed-positions.rs:188:14\n    |\n LL |     (true || let 0 = 0);\n    |              ^^^^^^^^^\n@@ -404,7 +404,7 @@ LL |     (true || let 0 = 0);\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:145:22\n+  --> $DIR/disallowed-positions.rs:189:22\n    |\n LL |     true && (true || let 0 = 0);\n    |                      ^^^^^^^^^\n@@ -413,7 +413,7 @@ LL |     true && (true || let 0 = 0);\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:148:9\n+  --> $DIR/disallowed-positions.rs:192:9\n    |\n LL |     x = let 0 = 0;\n    |         ^^^^^^^^^\n@@ -422,7 +422,7 @@ LL |     x = let 0 = 0;\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:150:12\n+  --> $DIR/disallowed-positions.rs:194:12\n    |\n LL |     true..(let 0 = 0);\n    |            ^^^^^^^^^\n@@ -431,7 +431,7 @@ LL |     true..(let 0 = 0);\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:151:8\n+  --> $DIR/disallowed-positions.rs:195:8\n    |\n LL |     ..(let 0 = 0);\n    |        ^^^^^^^^^\n@@ -440,7 +440,7 @@ LL |     ..(let 0 = 0);\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:152:6\n+  --> $DIR/disallowed-positions.rs:196:6\n    |\n LL |     (let 0 = 0)..;\n    |      ^^^^^^^^^\n@@ -449,7 +449,7 @@ LL |     (let 0 = 0)..;\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:154:6\n+  --> $DIR/disallowed-positions.rs:198:6\n    |\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -458,7 +458,7 @@ LL |     (let Range { start: _, end: _ } = true..true || false);\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:157:6\n+  --> $DIR/disallowed-positions.rs:202:6\n    |\n LL |     (let true = let true = true);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -467,7 +467,7 @@ LL |     (let true = let true = true);\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:157:17\n+  --> $DIR/disallowed-positions.rs:202:17\n    |\n LL |     (let true = let true = true);\n    |                 ^^^^^^^^^^^^^^^\n@@ -476,7 +476,7 @@ LL |     (let true = let true = true);\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:162:6\n+  --> $DIR/disallowed-positions.rs:207:6\n    |\n LL |     &let 0 = 0\n    |      ^^^^^^^^^\n@@ -485,7 +485,7 @@ LL |     &let 0 = 0\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:172:17\n+  --> $DIR/disallowed-positions.rs:218:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n@@ -494,7 +494,7 @@ LL |         true && let 1 = 1\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:176:17\n+  --> $DIR/disallowed-positions.rs:224:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n@@ -503,19 +503,485 @@ LL |         true && let 1 = 1\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:180:17\n+  --> $DIR/disallowed-positions.rs:230:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n-error: `let` expressions only supported in `if`\n-  --> $DIR/disallowed-positions.rs:32:9\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:32:8\n    |\n LL |     if &let 0 = 0 {}\n-   |         ^^^^^^^^^\n+   |        ^^^^^^^^^^ expected bool, found &bool\n+   |\n+   = note: expected type `bool`\n+              found type `&bool`\n+\n+error[E0614]: type `bool` cannot be dereferenced\n+  --> $DIR/disallowed-positions.rs:36:8\n+   |\n+LL |     if *let 0 = 0 {}\n+   |        ^^^^^^^^^^\n+\n+error[E0600]: cannot apply unary operator `-` to type `bool`\n+  --> $DIR/disallowed-positions.rs:38:8\n+   |\n+LL |     if -let 0 = 0 {}\n+   |        ^^^^^^^^^^ cannot apply unary operator `-`\n+   |\n+   = note: an implementation of `std::ops::Neg` might be missing for `bool`\n+\n+error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n+  --> $DIR/disallowed-positions.rs:46:8\n+   |\n+LL |     if (let 0 = 0)? {}\n+   |        ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n+   |\n+   = help: the trait `std::ops::Try` is not implemented for `bool`\n+   = note: required by `std::ops::Try::into_result`\n+\n+error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n+  --> $DIR/disallowed-positions.rs:46:8\n+   |\n+LL |     if (let 0 = 0)? {}\n+   |        ^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n+   |\n+   = help: the trait `std::ops::Try` is not implemented for `()`\n+   = note: required by `std::ops::Try::from_error`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:56:8\n+   |\n+LL |     if x = let 0 = 0 {}\n+   |        ^^^^^^^^^^^^^\n+   |        |\n+   |        expected bool, found ()\n+   |        help: try comparing for equality: `x == let 0 = 0`\n+   |\n+   = note: expected type `bool`\n+              found type `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:59:8\n+   |\n+LL |     if true..(let 0 = 0) {}\n+   |        ^^^^^^^^^^^^^^^^^ expected bool, found struct `std::ops::Range`\n+   |\n+   = note: expected type `bool`\n+              found type `std::ops::Range<bool>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:61:8\n+   |\n+LL |     if ..(let 0 = 0) {}\n+   |        ^^^^^^^^^^^^^ expected bool, found struct `std::ops::RangeTo`\n+   |\n+   = note: expected type `bool`\n+              found type `std::ops::RangeTo<bool>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:63:8\n+   |\n+LL |     if (let 0 = 0).. {}\n+   |        ^^^^^^^^^^^^^ expected bool, found struct `std::ops::RangeFrom`\n+   |\n+   = note: expected type `bool`\n+              found type `std::ops::RangeFrom<bool>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:67:12\n+   |\n+LL |     if let Range { start: _, end: _ } = true..true && false {}\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this match expression has type `bool`\n+   |            |\n+   |            expected bool, found struct `std::ops::Range`\n+   |\n+   = note: expected type `bool`\n+              found type `std::ops::Range<_>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:67:8\n+   |\n+LL |     if let Range { start: _, end: _ } = true..true && false {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected bool, found struct `std::ops::Range`\n+   |\n+   = note: expected type `bool`\n+              found type `std::ops::Range<bool>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:71:12\n+   |\n+LL |     if let Range { start: _, end: _ } = true..true || false {}\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this match expression has type `bool`\n+   |            |\n+   |            expected bool, found struct `std::ops::Range`\n+   |\n+   = note: expected type `bool`\n+              found type `std::ops::Range<_>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:71:8\n+   |\n+LL |     if let Range { start: _, end: _ } = true..true || false {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected bool, found struct `std::ops::Range`\n+   |\n+   = note: expected type `bool`\n+              found type `std::ops::Range<bool>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:78:12\n+   |\n+LL |     if let Range { start: F, end } = F..|| true {}\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^ expected fn pointer, found struct `std::ops::Range`\n+   |\n+   = note: expected type `fn() -> bool`\n+              found type `std::ops::Range<_>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:78:41\n+   |\n+LL |     if let Range { start: F, end } = F..|| true {}\n+   |                                         ^^^^^^^ expected bool, found closure\n+   |\n+   = note: expected type `bool`\n+              found type `[closure@$DIR/disallowed-positions.rs:78:41: 78:48]`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:78:8\n+   |\n+LL |     if let Range { start: F, end } = F..|| true {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected bool, found struct `std::ops::Range`\n+   |\n+   = note: expected type `bool`\n+              found type `std::ops::Range<bool>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:86:12\n+   |\n+LL |     if let Range { start: true, end } = t..&&false {}\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this match expression has type `bool`\n+   |            |\n+   |            expected bool, found struct `std::ops::Range`\n+   |\n+   = note: expected type `bool`\n+              found type `std::ops::Range<_>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:86:44\n+   |\n+LL |     if let Range { start: true, end } = t..&&false {}\n+   |                                            ^^^^^^^ expected bool, found &&bool\n+   |\n+   = note: expected type `bool`\n+              found type `&&bool`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:86:8\n+   |\n+LL |     if let Range { start: true, end } = t..&&false {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected bool, found struct `std::ops::Range`\n+   |\n+   = note: expected type `bool`\n+              found type `std::ops::Range<bool>`\n+\n+error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n+  --> $DIR/disallowed-positions.rs:42:20\n+   |\n+LL |         if let 0 = 0? {}\n+   |                    ^^ the `?` operator cannot be applied to type `{integer}`\n+   |\n+   = help: the trait `std::ops::Try` is not implemented for `{integer}`\n+   = note: required by `std::ops::Try::into_result`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:96:11\n+   |\n+LL |     while &let 0 = 0 {}\n+   |           ^^^^^^^^^^ expected bool, found &bool\n+   |\n+   = note: expected type `bool`\n+              found type `&bool`\n+\n+error[E0614]: type `bool` cannot be dereferenced\n+  --> $DIR/disallowed-positions.rs:100:11\n+   |\n+LL |     while *let 0 = 0 {}\n+   |           ^^^^^^^^^^\n+\n+error[E0600]: cannot apply unary operator `-` to type `bool`\n+  --> $DIR/disallowed-positions.rs:102:11\n+   |\n+LL |     while -let 0 = 0 {}\n+   |           ^^^^^^^^^^ cannot apply unary operator `-`\n+   |\n+   = note: an implementation of `std::ops::Neg` might be missing for `bool`\n+\n+error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n+  --> $DIR/disallowed-positions.rs:110:11\n+   |\n+LL |     while (let 0 = 0)? {}\n+   |           ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n+   |\n+   = help: the trait `std::ops::Try` is not implemented for `bool`\n+   = note: required by `std::ops::Try::into_result`\n+\n+error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n+  --> $DIR/disallowed-positions.rs:110:11\n+   |\n+LL |     while (let 0 = 0)? {}\n+   |           ^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n+   |\n+   = help: the trait `std::ops::Try` is not implemented for `()`\n+   = note: required by `std::ops::Try::from_error`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:120:11\n+   |\n+LL |     while x = let 0 = 0 {}\n+   |           ^^^^^^^^^^^^^\n+   |           |\n+   |           expected bool, found ()\n+   |           help: try comparing for equality: `x == let 0 = 0`\n+   |\n+   = note: expected type `bool`\n+              found type `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:123:11\n+   |\n+LL |     while true..(let 0 = 0) {}\n+   |           ^^^^^^^^^^^^^^^^^ expected bool, found struct `std::ops::Range`\n+   |\n+   = note: expected type `bool`\n+              found type `std::ops::Range<bool>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:125:11\n+   |\n+LL |     while ..(let 0 = 0) {}\n+   |           ^^^^^^^^^^^^^ expected bool, found struct `std::ops::RangeTo`\n+   |\n+   = note: expected type `bool`\n+              found type `std::ops::RangeTo<bool>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:127:11\n+   |\n+LL |     while (let 0 = 0).. {}\n+   |           ^^^^^^^^^^^^^ expected bool, found struct `std::ops::RangeFrom`\n+   |\n+   = note: expected type `bool`\n+              found type `std::ops::RangeFrom<bool>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:131:15\n+   |\n+LL |     while let Range { start: _, end: _ } = true..true && false {}\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this match expression has type `bool`\n+   |               |\n+   |               expected bool, found struct `std::ops::Range`\n+   |\n+   = note: expected type `bool`\n+              found type `std::ops::Range<_>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:131:11\n+   |\n+LL |     while let Range { start: _, end: _ } = true..true && false {}\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected bool, found struct `std::ops::Range`\n+   |\n+   = note: expected type `bool`\n+              found type `std::ops::Range<bool>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:135:15\n+   |\n+LL |     while let Range { start: _, end: _ } = true..true || false {}\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this match expression has type `bool`\n+   |               |\n+   |               expected bool, found struct `std::ops::Range`\n+   |\n+   = note: expected type `bool`\n+              found type `std::ops::Range<_>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:135:11\n+   |\n+LL |     while let Range { start: _, end: _ } = true..true || false {}\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected bool, found struct `std::ops::Range`\n+   |\n+   = note: expected type `bool`\n+              found type `std::ops::Range<bool>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:142:15\n+   |\n+LL |     while let Range { start: F, end } = F..|| true {}\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^ expected fn pointer, found struct `std::ops::Range`\n+   |\n+   = note: expected type `fn() -> bool`\n+              found type `std::ops::Range<_>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:142:44\n+   |\n+LL |     while let Range { start: F, end } = F..|| true {}\n+   |                                            ^^^^^^^ expected bool, found closure\n+   |\n+   = note: expected type `bool`\n+              found type `[closure@$DIR/disallowed-positions.rs:142:44: 142:51]`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:142:11\n+   |\n+LL |     while let Range { start: F, end } = F..|| true {}\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected bool, found struct `std::ops::Range`\n+   |\n+   = note: expected type `bool`\n+              found type `std::ops::Range<bool>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:150:15\n+   |\n+LL |     while let Range { start: true, end } = t..&&false {}\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this match expression has type `bool`\n+   |               |\n+   |               expected bool, found struct `std::ops::Range`\n+   |\n+   = note: expected type `bool`\n+              found type `std::ops::Range<_>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:150:47\n+   |\n+LL |     while let Range { start: true, end } = t..&&false {}\n+   |                                               ^^^^^^^ expected bool, found &&bool\n+   |\n+   = note: expected type `bool`\n+              found type `&&bool`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:150:11\n+   |\n+LL |     while let Range { start: true, end } = t..&&false {}\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected bool, found struct `std::ops::Range`\n+   |\n+   = note: expected type `bool`\n+              found type `std::ops::Range<bool>`\n+\n+error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n+  --> $DIR/disallowed-positions.rs:106:23\n+   |\n+LL |         while let 0 = 0? {}\n+   |                       ^^ the `?` operator cannot be applied to type `{integer}`\n+   |\n+   = help: the trait `std::ops::Try` is not implemented for `{integer}`\n+   = note: required by `std::ops::Try::into_result`\n+\n+error[E0614]: type `bool` cannot be dereferenced\n+  --> $DIR/disallowed-positions.rs:173:5\n+   |\n+LL |     *let 0 = 0;\n+   |     ^^^^^^^^^^\n+\n+error[E0600]: cannot apply unary operator `-` to type `bool`\n+  --> $DIR/disallowed-positions.rs:175:5\n+   |\n+LL |     -let 0 = 0;\n+   |     ^^^^^^^^^^ cannot apply unary operator `-`\n+   |\n+   = note: an implementation of `std::ops::Neg` might be missing for `bool`\n+\n+error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n+  --> $DIR/disallowed-positions.rs:183:5\n+   |\n+LL |     (let 0 = 0)?;\n+   |     ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n+   |\n+   = help: the trait `std::ops::Try` is not implemented for `bool`\n+   = note: required by `std::ops::Try::into_result`\n+\n+error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n+  --> $DIR/disallowed-positions.rs:183:5\n+   |\n+LL |     (let 0 = 0)?;\n+   |     ^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n+   |\n+   = help: the trait `std::ops::Try` is not implemented for `()`\n+   = note: required by `std::ops::Try::from_error`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:198:10\n+   |\n+LL |     (let Range { start: _, end: _ } = true..true || false);\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this match expression has type `bool`\n+   |          |\n+   |          expected bool, found struct `std::ops::Range`\n+   |\n+   = note: expected type `bool`\n+              found type `std::ops::Range<_>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/disallowed-positions.rs:207:5\n+   |\n+LL | fn outside_if_and_while_expr() {\n+   |                                - help: try adding a return type: `-> &bool`\n+...\n+LL |     &let 0 = 0\n+   |     ^^^^^^^^^^ expected (), found &bool\n+   |\n+   = note: expected type `()`\n+              found type `&bool`\n+\n+error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n+  --> $DIR/disallowed-positions.rs:179:17\n+   |\n+LL |         let 0 = 0?;\n+   |                 ^^ the `?` operator cannot be applied to type `{integer}`\n+   |\n+   = help: the trait `std::ops::Try` is not implemented for `{integer}`\n+   = note: required by `std::ops::Try::into_result`\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/disallowed-positions.rs:218:25\n+   |\n+LL |         true && let 1 = 1\n+   |                         ^\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/disallowed-positions.rs:218:21\n+   |\n+LL |         true && let 1 = 1\n+   |                     ^\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/disallowed-positions.rs:224:25\n+   |\n+LL |         true && let 1 = 1\n+   |                         ^\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/disallowed-positions.rs:224:21\n+   |\n+LL |         true && let 1 = 1\n+   |                     ^\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/disallowed-positions.rs:230:25\n+   |\n+LL |         true && let 1 = 1\n+   |                         ^\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/disallowed-positions.rs:230:21\n+   |\n+LL |         true && let 1 = 1\n+   |                     ^\n \n-error: aborting due to 57 previous errors\n+error: aborting due to 109 previous errors\n \n+Some errors have detailed explanations: E0019, E0277, E0308, E0600, E0614.\n+For more information about an error, try `rustc --explain E0019`."}, {"sha": "64987663adb90bb3a7d520e82267520d59d18a6f", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5086cc59a19bb35b53df0580610e0df03d812/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5086cc59a19bb35b53df0580610e0df03d812/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs?ref=5ae5086cc59a19bb35b53df0580610e0df03d812", "patch": "@@ -13,72 +13,99 @@ fn _if() {\n \n     if (let 0 = 1) {}\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n-    //~| ERROR `let` expressions only supported in `if`\n+    //~| ERROR `let` expressions are not supported here\n \n     if (((let 0 = 1))) {}\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions are not supported here\n \n     if true && let 0 = 1 {}\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions are not supported here\n \n     if let 0 = 1 && true {}\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions are not supported here\n \n     if (let 0 = 1) && true {}\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions are not supported here\n \n     if true && (let 0 = 1) {}\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions are not supported here\n \n     if (let 0 = 1) && (let 0 = 1) {}\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n     //~| ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions are not supported here\n+    //~| ERROR `let` expressions are not supported here\n \n     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n     //~| ERROR `let` expressions in this position are experimental [E0658]\n     //~| ERROR `let` expressions in this position are experimental [E0658]\n     //~| ERROR `let` expressions in this position are experimental [E0658]\n     //~| ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions are not supported here\n+    //~| ERROR `let` expressions are not supported here\n+    //~| ERROR `let` expressions are not supported here\n+    //~| ERROR `let` expressions are not supported here\n+    //~| ERROR `let` expressions are not supported here\n \n     if let Range { start: _, end: _ } = (true..true) && false {}\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions are not supported here\n }\n \n fn _while() {\n-    if let 0 = 1 {} // Stable!\n+    while let 0 = 1 {} // Stable!\n \n     while (let 0 = 1) {}\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions are not supported here\n \n     while (((let 0 = 1))) {}\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions are not supported here\n \n     while true && let 0 = 1 {}\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions are not supported here\n \n     while let 0 = 1 && true {}\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions are not supported here\n \n     while (let 0 = 1) && true {}\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions are not supported here\n \n     while true && (let 0 = 1) {}\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions are not supported here\n \n     while (let 0 = 1) && (let 0 = 1) {}\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n     //~| ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions are not supported here\n+    //~| ERROR `let` expressions are not supported here\n \n     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n     //~| ERROR `let` expressions in this position are experimental [E0658]\n     //~| ERROR `let` expressions in this position are experimental [E0658]\n     //~| ERROR `let` expressions in this position are experimental [E0658]\n     //~| ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions are not supported here\n+    //~| ERROR `let` expressions are not supported here\n+    //~| ERROR `let` expressions are not supported here\n+    //~| ERROR `let` expressions are not supported here\n+    //~| ERROR `let` expressions are not supported here\n \n     while let Range { start: _, end: _ } = (true..true) && false {}\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions are not supported here\n }\n \n fn _macros() {\n@@ -95,8 +122,10 @@ fn _macros() {\n     }\n     use_expr!((let 0 = 1 && 0 == 0));\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions are not supported here\n     use_expr!((let 0 = 1));\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions are not supported here\n     #[cfg(FALSE)] (let 0 = 1);\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n     use_expr!(let 0 = 1);"}, {"sha": "6167427fa9fdc8268c0d71bcaf31b5757f315470", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.stderr", "status": "modified", "additions": 297, "deletions": 33, "changes": 330, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5086cc59a19bb35b53df0580610e0df03d812/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5086cc59a19bb35b53df0580610e0df03d812/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr?ref=5ae5086cc59a19bb35b53df0580610e0df03d812", "patch": "@@ -1,5 +1,5 @@\n error: no rules expected the token `let`\n-  --> $DIR/feature-gate.rs:102:15\n+  --> $DIR/feature-gate.rs:131:15\n    |\n LL |     macro_rules! use_expr {\n    |     --------------------- when calling this macro\n@@ -26,7 +26,7 @@ LL |     if (((let 0 = 1))) {}\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:21:16\n+  --> $DIR/feature-gate.rs:22:16\n    |\n LL |     if true && let 0 = 1 {}\n    |                ^^^^^^^^^\n@@ -35,7 +35,7 @@ LL |     if true && let 0 = 1 {}\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:24:8\n+  --> $DIR/feature-gate.rs:26:8\n    |\n LL |     if let 0 = 1 && true {}\n    |        ^^^^^^^^^\n@@ -44,7 +44,7 @@ LL |     if let 0 = 1 && true {}\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:27:9\n+  --> $DIR/feature-gate.rs:30:9\n    |\n LL |     if (let 0 = 1) && true {}\n    |         ^^^^^^^^^\n@@ -53,7 +53,7 @@ LL |     if (let 0 = 1) && true {}\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:30:17\n+  --> $DIR/feature-gate.rs:34:17\n    |\n LL |     if true && (let 0 = 1) {}\n    |                 ^^^^^^^^^\n@@ -62,7 +62,7 @@ LL |     if true && (let 0 = 1) {}\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:33:9\n+  --> $DIR/feature-gate.rs:38:9\n    |\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |         ^^^^^^^^^\n@@ -71,7 +71,7 @@ LL |     if (let 0 = 1) && (let 0 = 1) {}\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:33:24\n+  --> $DIR/feature-gate.rs:38:24\n    |\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |                        ^^^^^^^^^\n@@ -80,7 +80,7 @@ LL |     if (let 0 = 1) && (let 0 = 1) {}\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:37:8\n+  --> $DIR/feature-gate.rs:44:8\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |        ^^^^^^^^^\n@@ -89,7 +89,7 @@ LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:37:21\n+  --> $DIR/feature-gate.rs:44:21\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                     ^^^^^^^^^\n@@ -98,7 +98,7 @@ LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:37:35\n+  --> $DIR/feature-gate.rs:44:35\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                   ^^^^^^^^^\n@@ -107,7 +107,7 @@ LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:37:48\n+  --> $DIR/feature-gate.rs:44:48\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                ^^^^^^^^^\n@@ -116,7 +116,7 @@ LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:37:61\n+  --> $DIR/feature-gate.rs:44:61\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                             ^^^^^^^^^\n@@ -125,7 +125,7 @@ LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:44:8\n+  --> $DIR/feature-gate.rs:56:8\n    |\n LL |     if let Range { start: _, end: _ } = (true..true) && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -134,7 +134,7 @@ LL |     if let Range { start: _, end: _ } = (true..true) && false {}\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:51:12\n+  --> $DIR/feature-gate.rs:64:12\n    |\n LL |     while (let 0 = 1) {}\n    |            ^^^^^^^^^\n@@ -143,7 +143,7 @@ LL |     while (let 0 = 1) {}\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:54:14\n+  --> $DIR/feature-gate.rs:68:14\n    |\n LL |     while (((let 0 = 1))) {}\n    |              ^^^^^^^^^\n@@ -152,7 +152,7 @@ LL |     while (((let 0 = 1))) {}\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:57:19\n+  --> $DIR/feature-gate.rs:72:19\n    |\n LL |     while true && let 0 = 1 {}\n    |                   ^^^^^^^^^\n@@ -161,7 +161,7 @@ LL |     while true && let 0 = 1 {}\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:60:11\n+  --> $DIR/feature-gate.rs:76:11\n    |\n LL |     while let 0 = 1 && true {}\n    |           ^^^^^^^^^\n@@ -170,7 +170,7 @@ LL |     while let 0 = 1 && true {}\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:63:12\n+  --> $DIR/feature-gate.rs:80:12\n    |\n LL |     while (let 0 = 1) && true {}\n    |            ^^^^^^^^^\n@@ -179,7 +179,7 @@ LL |     while (let 0 = 1) && true {}\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:66:20\n+  --> $DIR/feature-gate.rs:84:20\n    |\n LL |     while true && (let 0 = 1) {}\n    |                    ^^^^^^^^^\n@@ -188,7 +188,7 @@ LL |     while true && (let 0 = 1) {}\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:69:12\n+  --> $DIR/feature-gate.rs:88:12\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |            ^^^^^^^^^\n@@ -197,7 +197,7 @@ LL |     while (let 0 = 1) && (let 0 = 1) {}\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:69:27\n+  --> $DIR/feature-gate.rs:88:27\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |                           ^^^^^^^^^\n@@ -206,7 +206,7 @@ LL |     while (let 0 = 1) && (let 0 = 1) {}\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:73:11\n+  --> $DIR/feature-gate.rs:94:11\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |           ^^^^^^^^^\n@@ -215,7 +215,7 @@ LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:73:24\n+  --> $DIR/feature-gate.rs:94:24\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                        ^^^^^^^^^\n@@ -224,7 +224,7 @@ LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:73:38\n+  --> $DIR/feature-gate.rs:94:38\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                      ^^^^^^^^^\n@@ -233,7 +233,7 @@ LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:73:51\n+  --> $DIR/feature-gate.rs:94:51\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                   ^^^^^^^^^\n@@ -242,7 +242,7 @@ LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:73:64\n+  --> $DIR/feature-gate.rs:94:64\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                                ^^^^^^^^^\n@@ -251,7 +251,7 @@ LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:80:11\n+  --> $DIR/feature-gate.rs:106:11\n    |\n LL |     while let Range { start: _, end: _ } = (true..true) && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -260,7 +260,7 @@ LL |     while let Range { start: _, end: _ } = (true..true) && false {}\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:100:20\n+  --> $DIR/feature-gate.rs:129:20\n    |\n LL |     #[cfg(FALSE)] (let 0 = 1);\n    |                    ^^^^^^^^^\n@@ -269,7 +269,7 @@ LL |     #[cfg(FALSE)] (let 0 = 1);\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:87:17\n+  --> $DIR/feature-gate.rs:114:17\n    |\n LL |     noop_expr!((let 0 = 1));\n    |                 ^^^^^^^^^\n@@ -278,7 +278,7 @@ LL |     noop_expr!((let 0 = 1));\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:96:16\n+  --> $DIR/feature-gate.rs:123:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n@@ -287,20 +287,284 @@ LL |     use_expr!((let 0 = 1 && 0 == 0));\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:98:16\n+  --> $DIR/feature-gate.rs:126:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n    = help: add #![feature(let_chains)] to the crate attributes to enable\n \n-error: `let` expressions only supported in `if`\n+error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:14:9\n    |\n LL |     if (let 0 = 1) {}\n    |         ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:18:11\n+   |\n+LL |     if (((let 0 = 1))) {}\n+   |           ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:22:16\n+   |\n+LL |     if true && let 0 = 1 {}\n+   |                ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:26:8\n+   |\n+LL |     if let 0 = 1 && true {}\n+   |        ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:30:9\n+   |\n+LL |     if (let 0 = 1) && true {}\n+   |         ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:34:17\n+   |\n+LL |     if true && (let 0 = 1) {}\n+   |                 ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:38:9\n+   |\n+LL |     if (let 0 = 1) && (let 0 = 1) {}\n+   |         ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:38:24\n+   |\n+LL |     if (let 0 = 1) && (let 0 = 1) {}\n+   |                        ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:44:8\n+   |\n+LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |        ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:44:21\n+   |\n+LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                     ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:44:35\n+   |\n+LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                   ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:44:48\n+   |\n+LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                                ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:44:61\n+   |\n+LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                                             ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:56:8\n+   |\n+LL |     if let Range { start: _, end: _ } = (true..true) && false {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:64:12\n+   |\n+LL |     while (let 0 = 1) {}\n+   |            ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:68:14\n+   |\n+LL |     while (((let 0 = 1))) {}\n+   |              ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:72:19\n+   |\n+LL |     while true && let 0 = 1 {}\n+   |                   ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:76:11\n+   |\n+LL |     while let 0 = 1 && true {}\n+   |           ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:80:12\n+   |\n+LL |     while (let 0 = 1) && true {}\n+   |            ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:84:20\n+   |\n+LL |     while true && (let 0 = 1) {}\n+   |                    ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:88:12\n+   |\n+LL |     while (let 0 = 1) && (let 0 = 1) {}\n+   |            ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:88:27\n+   |\n+LL |     while (let 0 = 1) && (let 0 = 1) {}\n+   |                           ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:94:11\n+   |\n+LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |           ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:94:24\n+   |\n+LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                        ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:94:38\n+   |\n+LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                      ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:94:51\n+   |\n+LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                                   ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:94:64\n+   |\n+LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                                                ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:106:11\n+   |\n+LL |     while let Range { start: _, end: _ } = (true..true) && false {}\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:123:16\n+   |\n+LL |     use_expr!((let 0 = 1 && 0 == 0));\n+   |                ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:126:16\n+   |\n+LL |     use_expr!((let 0 = 1));\n+   |                ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n \n-error: aborting due to 34 previous errors\n+error: aborting due to 63 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}]}