{"sha": "99b1ebbb33c5dcf02adaaa1c1e4ae101cc34abd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YjFlYmJiMzNjNWRjZjAyYWRhYWExYzFlNGFlMTAxY2MzNGFiZDQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2016-07-14T11:13:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-14T11:13:11Z"}, "message": "Merge pull request #1096 from cramertj/1086-negative-zero\n\nFix #1086-Added sign check on Constant f64 PartialEq implementation", "tree": {"sha": "ed90ad125fb930e57f113ea997a72fbe1dda0363", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed90ad125fb930e57f113ea997a72fbe1dda0363"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99b1ebbb33c5dcf02adaaa1c1e4ae101cc34abd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99b1ebbb33c5dcf02adaaa1c1e4ae101cc34abd4", "html_url": "https://github.com/rust-lang/rust/commit/99b1ebbb33c5dcf02adaaa1c1e4ae101cc34abd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99b1ebbb33c5dcf02adaaa1c1e4ae101cc34abd4/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1a0ddf31b15de9c4934a977e3083ec823439fcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1a0ddf31b15de9c4934a977e3083ec823439fcf", "html_url": "https://github.com/rust-lang/rust/commit/f1a0ddf31b15de9c4934a977e3083ec823439fcf"}, {"sha": "7450d842ea778e351320540ad2d13bc4b1f4a249", "url": "https://api.github.com/repos/rust-lang/rust/commits/7450d842ea778e351320540ad2d13bc4b1f4a249", "html_url": "https://github.com/rust-lang/rust/commit/7450d842ea778e351320540ad2d13bc4b1f4a249"}], "stats": {"total": 58, "additions": 56, "deletions": 2}, "files": [{"sha": "aac9aa3e8ef1f6168632023d974f950e9c2a6ff6", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/99b1ebbb33c5dcf02adaaa1c1e4ae101cc34abd4/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b1ebbb33c5dcf02adaaa1c1e4ae101cc34abd4/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=99b1ebbb33c5dcf02adaaa1c1e4ae101cc34abd4", "patch": "@@ -92,7 +92,10 @@ impl PartialEq for Constant {\n                 // we want `Fw32 == FwAny` and `FwAny == Fw64`, by transitivity we must have\n                 // `Fw32 == Fw64` so don\u2019t compare them\n                 match (ls.parse::<f64>(), rs.parse::<f64>()) {\n-                    (Ok(l), Ok(r)) => l.eq(&r),\n+                    // mem::transmute is required to catch non-matching 0.0, -0.0, and NaNs\n+                    (Ok(l), Ok(r)) => unsafe {\n+                        mem::transmute::<f64, u64>(l) == mem::transmute::<f64, u64>(r)\n+                    },\n                     _ => false,\n                 }\n             }\n@@ -159,7 +162,11 @@ impl PartialOrd for Constant {\n             (&Constant::Int(l), &Constant::Int(r)) => Some(l.cmp(&r)),\n             (&Constant::Float(ref ls, _), &Constant::Float(ref rs, _)) => {\n                 match (ls.parse::<f64>(), rs.parse::<f64>()) {\n-                    (Ok(ref l), Ok(ref r)) => l.partial_cmp(r),\n+                    (Ok(ref l), Ok(ref r)) => match (l.partial_cmp(r), l.is_sign_positive() == r.is_sign_positive()) {\n+                        // Check for comparison of -0.0 and 0.0\n+                        (Some(Ordering::Equal), false) => None,\n+                        (x, _) => x\n+                    },\n                     _ => None,\n                 }\n             }"}, {"sha": "3c3e43931ed7bf4ccdcc4e7bfea3c991cccf808c", "filename": "tests/compile-fail/copies.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/99b1ebbb33c5dcf02adaaa1c1e4ae101cc34abd4/tests%2Fcompile-fail%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b1ebbb33c5dcf02adaaa1c1e4ae101cc34abd4/tests%2Fcompile-fail%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopies.rs?ref=99b1ebbb33c5dcf02adaaa1c1e4ae101cc34abd4", "patch": "@@ -9,6 +9,7 @@\n #![allow(cyclomatic_complexity)]\n #![allow(blacklisted_name)]\n #![allow(collapsible_if)]\n+#![allow(zero_divided_by_zero, eq_op)]\n \n fn bar<T>(_: T) {}\n fn foo() -> bool { unimplemented!() }\n@@ -229,6 +230,46 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         _ => 0,\n     };\n \n+    let _ = if true {\n+        //~^NOTE same as this\n+        0.0\n+    } else { //~ERROR this `if` has identical blocks\n+        0.0\n+    };\n+\n+    let _ = if true {\n+        //~^NOTE same as this\n+        -0.0\n+    } else { //~ERROR this `if` has identical blocks\n+        -0.0\n+    };\n+\n+    let _ = if true {\n+        0.0\n+    } else {\n+        -0.0\n+    };\n+\n+    // Different NaNs\n+    let _ = if true {\n+        0.0 / 0.0\n+    } else {\n+        std::f32::NAN\n+    };\n+\n+    // Same NaNs\n+    let _ = if true {\n+        //~^NOTE same as this\n+        std::f32::NAN\n+    } else { //~ERROR this `if` has identical blocks\n+        std::f32::NAN\n+    };\n+\n+    let _ = match Some(()) {\n+        Some(()) => 0.0,\n+        None => -0.0\n+    };\n+\n     match (Some(42), Some(\"\")) {\n         (Some(a), None) => bar(a),\n         (None, Some(a)) => bar(a), // bindings have different types"}, {"sha": "5f5f4cb47d0afe121cb655c81e18c92eede872f2", "filename": "tests/consts.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99b1ebbb33c5dcf02adaaa1c1e4ae101cc34abd4/tests%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b1ebbb33c5dcf02adaaa1c1e4ae101cc34abd4/tests%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconsts.rs?ref=99b1ebbb33c5dcf02adaaa1c1e4ae101cc34abd4", "patch": "@@ -82,6 +82,12 @@ fn test_ops() {\n     let half_any = Constant::Float(\"0.5\".into(), FloatWidth::Any);\n     let half32 = Constant::Float(\"0.5\".into(), FloatWidth::F32);\n     let half64 = Constant::Float(\"0.5\".into(), FloatWidth::F64);\n+    let pos_zero = Constant::Float(\"0.0\".into(), FloatWidth::F64);\n+    let neg_zero = Constant::Float(\"-0.0\".into(), FloatWidth::F64);\n+\n+    assert_eq!(pos_zero, pos_zero);\n+    assert_eq!(neg_zero, neg_zero);\n+    assert_eq!(None, pos_zero.partial_cmp(&neg_zero));\n \n     assert_eq!(half_any, half32);\n     assert_eq!(half_any, half64);"}]}