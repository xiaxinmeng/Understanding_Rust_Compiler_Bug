{"sha": "87b3ae3909d24829da338b40fa0c24e073c3a64d", "node_id": "C_kwDOAAsO6NoAKDg3YjNhZTM5MDlkMjQ4MjlkYTMzOGI0MGZhMGMyNGUwNzNjM2E2NGQ", "commit": {"author": {"name": "Tam Pham", "email": "tam001p@gmail.com", "date": "2023-04-04T02:09:06Z"}, "committer": {"name": "Tam Pham", "email": "tam001p@gmail.com", "date": "2023-04-04T02:52:27Z"}, "message": "Make \"unneccesary visibility qualifier\" error much more clear", "tree": {"sha": "58d44ba2b3b69ed832c4afcc41056d37fe3743d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58d44ba2b3b69ed832c4afcc41056d37fe3743d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87b3ae3909d24829da338b40fa0c24e073c3a64d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87b3ae3909d24829da338b40fa0c24e073c3a64d", "html_url": "https://github.com/rust-lang/rust/commit/87b3ae3909d24829da338b40fa0c24e073c3a64d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87b3ae3909d24829da338b40fa0c24e073c3a64d/comments", "author": {"login": "ElectrifyPro", "id": 1387522, "node_id": "MDQ6VXNlcjEzODc1MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1387522?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ElectrifyPro", "html_url": "https://github.com/ElectrifyPro", "followers_url": "https://api.github.com/users/ElectrifyPro/followers", "following_url": "https://api.github.com/users/ElectrifyPro/following{/other_user}", "gists_url": "https://api.github.com/users/ElectrifyPro/gists{/gist_id}", "starred_url": "https://api.github.com/users/ElectrifyPro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ElectrifyPro/subscriptions", "organizations_url": "https://api.github.com/users/ElectrifyPro/orgs", "repos_url": "https://api.github.com/users/ElectrifyPro/repos", "events_url": "https://api.github.com/users/ElectrifyPro/events{/privacy}", "received_events_url": "https://api.github.com/users/ElectrifyPro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ElectrifyPro", "id": 1387522, "node_id": "MDQ6VXNlcjEzODc1MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1387522?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ElectrifyPro", "html_url": "https://github.com/ElectrifyPro", "followers_url": "https://api.github.com/users/ElectrifyPro/followers", "following_url": "https://api.github.com/users/ElectrifyPro/following{/other_user}", "gists_url": "https://api.github.com/users/ElectrifyPro/gists{/gist_id}", "starred_url": "https://api.github.com/users/ElectrifyPro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ElectrifyPro/subscriptions", "organizations_url": "https://api.github.com/users/ElectrifyPro/orgs", "repos_url": "https://api.github.com/users/ElectrifyPro/repos", "events_url": "https://api.github.com/users/ElectrifyPro/events{/privacy}", "received_events_url": "https://api.github.com/users/ElectrifyPro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf7ada217c8ac63367b184afd9fffaff30f6ed44", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf7ada217c8ac63367b184afd9fffaff30f6ed44", "html_url": "https://github.com/rust-lang/rust/commit/cf7ada217c8ac63367b184afd9fffaff30f6ed44"}], "stats": {"total": 83, "additions": 51, "deletions": 32}, "files": [{"sha": "a349fe6a3c44b4586d428d2484a5d49e6364de8d", "filename": "compiler/rustc_ast_passes/messages.ftl", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/87b3ae3909d24829da338b40fa0c24e073c3a64d/compiler%2Frustc_ast_passes%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/87b3ae3909d24829da338b40fa0c24e073c3a64d/compiler%2Frustc_ast_passes%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fmessages.ftl?ref=87b3ae3909d24829da338b40fa0c24e073c3a64d", "patch": "@@ -17,9 +17,10 @@ ast_passes_keyword_lifetime =\n ast_passes_invalid_label =\n     invalid label name `{$name}`\n \n-ast_passes_invalid_visibility =\n-    unnecessary visibility qualifier\n-    .implied = `pub` not permitted here because it's implied\n+ast_passes_visibility_not_permitted =\n+    visibility qualifiers are not permitted here\n+    .enum_variant = enum variants and their fields always share the visibility of the enum they are in\n+    .trait_impl = trait items always share the visibility of their trait\n     .individual_impl_items = place qualifiers on individual impl items instead\n     .individual_foreign_items = place qualifiers on individual foreign items instead\n "}, {"sha": "924b843d97f1264bb90758d5df32ed6b2e42730c", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/87b3ae3909d24829da338b40fa0c24e073c3a64d/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b3ae3909d24829da338b40fa0c24e073c3a64d/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=87b3ae3909d24829da338b40fa0c24e073c3a64d", "patch": "@@ -240,16 +240,12 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn invalid_visibility(&self, vis: &Visibility, note: Option<errors::InvalidVisibilityNote>) {\n+    fn visibility_not_permitted(&self, vis: &Visibility, note: errors::VisibilityNotPermittedNote) {\n         if let VisibilityKind::Inherited = vis.kind {\n             return;\n         }\n \n-        self.session.emit_err(errors::InvalidVisibility {\n-            span: vis.span,\n-            implied: vis.kind.is_pub().then_some(vis.span),\n-            note,\n-        });\n+        self.session.emit_err(errors::VisibilityNotPermitted { span: vis.span, note });\n     }\n \n     fn check_decl_no_pat(decl: &FnDecl, mut report_err: impl FnMut(Span, Option<Ident>, bool)) {\n@@ -819,7 +815,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 items,\n             }) => {\n                 self.with_in_trait_impl(true, Some(*constness), |this| {\n-                    this.invalid_visibility(&item.vis, None);\n+                    this.visibility_not_permitted(\n+                        &item.vis,\n+                        errors::VisibilityNotPermittedNote::TraitImpl,\n+                    );\n                     if let TyKind::Err = self_ty.kind {\n                         this.err_handler().emit_err(errors::ObsoleteAuto { span: item.span });\n                     }\n@@ -866,9 +865,9 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         only_trait: only_trait.then_some(()),\n                     };\n \n-                self.invalid_visibility(\n+                self.visibility_not_permitted(\n                     &item.vis,\n-                    Some(errors::InvalidVisibilityNote::IndividualImplItems),\n+                    errors::VisibilityNotPermittedNote::IndividualImplItems,\n                 );\n                 if let &Unsafe::Yes(span) = unsafety {\n                     self.err_handler().emit_err(errors::InherentImplCannotUnsafe {\n@@ -924,9 +923,9 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }\n             ItemKind::ForeignMod(ForeignMod { abi, unsafety, .. }) => {\n                 let old_item = mem::replace(&mut self.extern_mod, Some(item));\n-                self.invalid_visibility(\n+                self.visibility_not_permitted(\n                     &item.vis,\n-                    Some(errors::InvalidVisibilityNote::IndividualForeignItems),\n+                    errors::VisibilityNotPermittedNote::IndividualForeignItems,\n                 );\n                 if let &Unsafe::Yes(span) = unsafety {\n                     self.err_handler().emit_err(errors::UnsafeItem { span, kind: \"extern block\" });\n@@ -940,9 +939,15 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }\n             ItemKind::Enum(def, _) => {\n                 for variant in &def.variants {\n-                    self.invalid_visibility(&variant.vis, None);\n+                    self.visibility_not_permitted(\n+                        &variant.vis,\n+                        errors::VisibilityNotPermittedNote::EnumVariant,\n+                    );\n                     for field in variant.data.fields() {\n-                        self.invalid_visibility(&field.vis, None);\n+                        self.visibility_not_permitted(\n+                            &field.vis,\n+                            errors::VisibilityNotPermittedNote::EnumVariant,\n+                        );\n                     }\n                 }\n             }\n@@ -1303,7 +1308,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         }\n \n         if ctxt == AssocCtxt::Trait || self.in_trait_impl {\n-            self.invalid_visibility(&item.vis, None);\n+            self.visibility_not_permitted(&item.vis, errors::VisibilityNotPermittedNote::TraitImpl);\n             if let AssocItemKind::Fn(box Fn { sig, .. }) = &item.kind {\n                 self.check_trait_fn_not_const(sig.header.constness);\n             }"}, {"sha": "27bbd237961a932db7b3b5e7a8493cd0e9d21e99", "filename": "compiler/rustc_ast_passes/src/errors.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/87b3ae3909d24829da338b40fa0c24e073c3a64d/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b3ae3909d24829da338b40fa0c24e073c3a64d/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs?ref=87b3ae3909d24829da338b40fa0c24e073c3a64d", "patch": "@@ -42,18 +42,20 @@ pub struct InvalidLabel {\n }\n \n #[derive(Diagnostic)]\n-#[diag(ast_passes_invalid_visibility, code = \"E0449\")]\n-pub struct InvalidVisibility {\n+#[diag(ast_passes_visibility_not_permitted, code = \"E0449\")]\n+pub struct VisibilityNotPermitted {\n     #[primary_span]\n     pub span: Span,\n-    #[label(ast_passes_implied)]\n-    pub implied: Option<Span>,\n     #[subdiagnostic]\n-    pub note: Option<InvalidVisibilityNote>,\n+    pub note: VisibilityNotPermittedNote,\n }\n \n #[derive(Subdiagnostic)]\n-pub enum InvalidVisibilityNote {\n+pub enum VisibilityNotPermittedNote {\n+    #[note(ast_passes_enum_variant)]\n+    EnumVariant,\n+    #[note(ast_passes_trait_impl)]\n+    TraitImpl,\n     #[note(ast_passes_individual_impl_items)]\n     IndividualImplItems,\n     #[note(ast_passes_individual_foreign_items)]"}, {"sha": "a5876e0752842715e8f7dc36266cd5df7200dbb8", "filename": "compiler/rustc_error_codes/src/error_codes/E0449.md", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/87b3ae3909d24829da338b40fa0c24e073c3a64d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0449.md", "raw_url": "https://github.com/rust-lang/rust/raw/87b3ae3909d24829da338b40fa0c24e073c3a64d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0449.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0449.md?ref=87b3ae3909d24829da338b40fa0c24e073c3a64d", "patch": "@@ -1,4 +1,6 @@\n-A visibility qualifier was used when it was unnecessary.\n+A visibility qualifier was used where one is not permitted. Visibility\n+qualifiers are not permitted on enum variants, trait items, impl blocks, and\n+extern blocks, as they already share the visibility of the parent item.\n \n Erroneous code examples:\n \n@@ -9,15 +11,18 @@ trait Foo {\n     fn foo();\n }\n \n-pub impl Bar {} // error: unnecessary visibility qualifier\n+enum Baz {\n+    pub Qux, // error: visibility qualifiers are not permitted here\n+}\n+\n+pub impl Bar {} // error: visibility qualifiers are not permitted here\n \n-pub impl Foo for Bar { // error: unnecessary visibility qualifier\n-    pub fn foo() {} // error: unnecessary visibility qualifier\n+pub impl Foo for Bar { // error: visibility qualifiers are not permitted here\n+    pub fn foo() {} // error: visibility qualifiers are not permitted here\n }\n ```\n \n-To fix this error, please remove the visibility qualifier when it is not\n-required. Example:\n+To fix this error, simply remove the visibility qualifier. Example:\n \n ```\n struct Bar;\n@@ -26,12 +31,18 @@ trait Foo {\n     fn foo();\n }\n \n+enum Baz {\n+    // Enum variants share the visibility of the enum they are in, so\n+    // `pub` is not allowed here\n+    Qux,\n+}\n+\n // Directly implemented methods share the visibility of the type itself,\n-// so `pub` is unnecessary here\n+// so `pub` is not allowed here\n impl Bar {}\n \n-// Trait methods share the visibility of the trait, so `pub` is\n-// unnecessary in either case\n+// Trait methods share the visibility of the trait, so `pub` is not\n+// allowed in either case\n impl Foo for Bar {\n     fn foo() {}\n }"}]}