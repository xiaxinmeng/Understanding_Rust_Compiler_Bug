{"sha": "14661aeb0a3f78acc0f406f93a329e870af5f0b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NjYxYWViMGEzZjc4YWNjMGY0MDZmOTNhMzI5ZTg3MGFmNWYwYjA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-19T15:51:06Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-19T15:51:06Z"}, "message": "Rollup merge of #33708 - nham:zero-elided-lifetimes, r=sanxiyn\n\nOnly print parameters with elided lifetimes in elision error messages.\n\nWhen displaying the function parameters for a lifetime elision error message,\nthis changes it to first filter out the parameters that don't have elided\nlifetimes.\n\nFixes #30255.", "tree": {"sha": "aec8ca9655c21af6b4929b67f2f939be93bc45ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aec8ca9655c21af6b4929b67f2f939be93bc45ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14661aeb0a3f78acc0f406f93a329e870af5f0b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14661aeb0a3f78acc0f406f93a329e870af5f0b0", "html_url": "https://github.com/rust-lang/rust/commit/14661aeb0a3f78acc0f406f93a329e870af5f0b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14661aeb0a3f78acc0f406f93a329e870af5f0b0/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "355d9f98f584891610d6ba4f4df35501b981c011", "url": "https://api.github.com/repos/rust-lang/rust/commits/355d9f98f584891610d6ba4f4df35501b981c011", "html_url": "https://github.com/rust-lang/rust/commit/355d9f98f584891610d6ba4f4df35501b981c011"}, {"sha": "a50c82bc3bde5988a8f32ef2b593f0b051545e8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a50c82bc3bde5988a8f32ef2b593f0b051545e8a", "html_url": "https://github.com/rust-lang/rust/commit/a50c82bc3bde5988a8f32ef2b593f0b051545e8a"}], "stats": {"total": 57, "additions": 48, "deletions": 9}, "files": [{"sha": "1df12b63e0a50e76a12f3fc9beda37f649bdde03", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/14661aeb0a3f78acc0f406f93a329e870af5f0b0/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14661aeb0a3f78acc0f406f93a329e870af5f0b0/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=14661aeb0a3f78acc0f406f93a329e870af5f0b0", "patch": "@@ -215,15 +215,18 @@ fn report_elision_failure(\n {\n     let mut m = String::new();\n     let len = params.len();\n-    let mut any_lifetimes = false;\n \n-    for (i, info) in params.into_iter().enumerate() {\n+    let elided_params: Vec<_> = params.into_iter()\n+                                       .filter(|info| info.lifetime_count > 0)\n+                                       .collect();\n+\n+    let elided_len = elided_params.len();\n+\n+    for (i, info) in elided_params.into_iter().enumerate() {\n         let ElisionFailureInfo {\n             name, lifetime_count: n, have_bound_regions\n         } = info;\n \n-        any_lifetimes = any_lifetimes || (n > 0);\n-\n         let help_name = if name.is_empty() {\n             format!(\"argument {}\", i + 1)\n         } else {\n@@ -237,13 +240,14 @@ fn report_elision_failure(\n                     if have_bound_regions { \"free \" } else { \"\" } )\n         })[..]);\n \n-        if len == 2 && i == 0 {\n+        if elided_len == 2 && i == 0 {\n             m.push_str(\" or \");\n-        } else if i + 2 == len {\n+        } else if i + 2 == elided_len {\n             m.push_str(\", or \");\n-        } else if i + 1 != len {\n+        } else if i != elided_len - 1 {\n             m.push_str(\", \");\n         }\n+\n     }\n \n     if len == 0 {\n@@ -252,15 +256,15 @@ fn report_elision_failure(\n                     there is no value for it to be borrowed from\");\n         help!(db,\n                    \"consider giving it a 'static lifetime\");\n-    } else if !any_lifetimes {\n+    } else if elided_len == 0 {\n         help!(db,\n                    \"this function's return type contains a borrowed value with \\\n                     an elided lifetime, but the lifetime cannot be derived from \\\n                     the arguments\");\n         help!(db,\n                    \"consider giving it an explicit bounded or 'static \\\n                     lifetime\");\n-    } else if len == 1 {\n+    } else if elided_len == 1 {\n         help!(db,\n                    \"this function's return type contains a borrowed value, but \\\n                     the signature does not say which {} it is borrowed from\","}, {"sha": "1daa6a61f777ca5b183eccbbbae0591b0bb59c6c", "filename": "src/test/compile-fail/issue-30255.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/14661aeb0a3f78acc0f406f93a329e870af5f0b0/src%2Ftest%2Fcompile-fail%2Fissue-30255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14661aeb0a3f78acc0f406f93a329e870af5f0b0/src%2Ftest%2Fcompile-fail%2Fissue-30255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-30255.rs?ref=14661aeb0a3f78acc0f406f93a329e870af5f0b0", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// Test that lifetime elision error messages correctly omit parameters\n+// with no elided lifetimes\n+\n+struct S<'a> {\n+    field: &'a i32,\n+}\n+\n+fn f(a: &S, b: i32) -> &i32 {\n+//~^ ERROR missing lifetime specifier [E0106]\n+//~^^ HELP does not say which one of `a`'s 2 elided lifetimes it is borrowed from\n+    panic!();\n+}\n+\n+fn g(a: &S, b: bool, c: &i32) -> &i32 {\n+//~^ ERROR missing lifetime specifier [E0106]\n+//~^^ HELP does not say whether it is borrowed from one of `a`'s 2 elided lifetimes or `c`\n+    panic!();\n+}\n+\n+fn h(a: &bool, b: bool, c: &S, d: &i32) -> &i32 {\n+//~^ ERROR missing lifetime specifier [E0106]\n+//~^^ HELP does not say whether it is borrowed from `a`, one of `c`'s 2 elided lifetimes, or `d`\n+    panic!();\n+}\n+"}]}