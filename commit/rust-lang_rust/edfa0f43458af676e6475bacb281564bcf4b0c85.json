{"sha": "edfa0f43458af676e6475bacb281564bcf4b0c85", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZmEwZjQzNDU4YWY2NzZlNjQ3NWJhY2IyODE1NjRiY2Y0YjBjODU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-29T00:34:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-29T00:34:48Z"}, "message": "Rollup merge of #68556 - ollie27:rustdoc_primitive_re-export, r=GuillaumeGomez\n\nrustdoc: Fix re-exporting primitive types\n\n* Generate links to the primitive type docs for re-exports.\n* Don't ICE on cross crate primitive type re-exports.\n* Make primitive type re-exports show up cross crate.\n\nFixes #67646\nCloses #67972\n\nr? @GuillaumeGomez", "tree": {"sha": "93f8d61df90739f0564d7f6c2753b2443cb55872", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93f8d61df90739f0564d7f6c2753b2443cb55872"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edfa0f43458af676e6475bacb281564bcf4b0c85", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeMNMoCRBK7hj4Ov3rIwAAdHIIACDlI5gU7NMusO7x5L/pvN/d\ndVXwg7wtd/Q7K6dofN/EMqvUafyqi4WsxkI+694ASL6j+A4+uBR9fZc9rDZAcOfx\nLqYC6obxNuyVjH5+DWk6GtyjW++nLxqOwdRBeAXEGVXioGH3Sv+sBUABSAvbiqB1\n+vOPbyQWPFFCflNs4GzU/gz/AbWe5ALp/aJXxs7Vp3GMmOUdhZuirKse8kOZL2Q8\n+BUOcyJ6uLqFNi9iRvLtJ6Bd3pWVvAyvfeD+WR529OpE2+yVxG0zxEuOP8zawQBc\nP0WhhdSxuyBf6IeSxAJiPZzvsfkPIIvmrCjuQUBi1PVpBB6SrPBOzWiEIZlcUeY=\n=dS1t\n-----END PGP SIGNATURE-----\n", "payload": "tree 93f8d61df90739f0564d7f6c2753b2443cb55872\nparent 85f324004e2936fde4d409d9d7f9451d829cb20d\nparent bbc2ae7590ad53fca02fda187e7f9c2470c9e949\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1580258088 +0900\ncommitter GitHub <noreply@github.com> 1580258088 +0900\n\nRollup merge of #68556 - ollie27:rustdoc_primitive_re-export, r=GuillaumeGomez\n\nrustdoc: Fix re-exporting primitive types\n\n* Generate links to the primitive type docs for re-exports.\n* Don't ICE on cross crate primitive type re-exports.\n* Make primitive type re-exports show up cross crate.\n\nFixes #67646\nCloses #67972\n\nr? @GuillaumeGomez\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edfa0f43458af676e6475bacb281564bcf4b0c85", "html_url": "https://github.com/rust-lang/rust/commit/edfa0f43458af676e6475bacb281564bcf4b0c85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edfa0f43458af676e6475bacb281564bcf4b0c85/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85f324004e2936fde4d409d9d7f9451d829cb20d", "url": "https://api.github.com/repos/rust-lang/rust/commits/85f324004e2936fde4d409d9d7f9451d829cb20d", "html_url": "https://github.com/rust-lang/rust/commit/85f324004e2936fde4d409d9d7f9451d829cb20d"}, {"sha": "bbc2ae7590ad53fca02fda187e7f9c2470c9e949", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbc2ae7590ad53fca02fda187e7f9c2470c9e949", "html_url": "https://github.com/rust-lang/rust/commit/bbc2ae7590ad53fca02fda187e7f9c2470c9e949"}], "stats": {"total": 108, "additions": 91, "deletions": 17}, "files": [{"sha": "df72bf0b56e61c07fc9ba70b123667ceacced973", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/edfa0f43458af676e6475bacb281564bcf4b0c85/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edfa0f43458af676e6475bacb281564bcf4b0c85/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=edfa0f43458af676e6475bacb281564bcf4b0c85", "patch": "@@ -445,12 +445,41 @@ fn build_module(cx: &DocContext<'_>, did: DefId, visited: &mut FxHashSet<DefId>)\n         // two namespaces, so the target may be listed twice. Make sure we only\n         // visit each node at most once.\n         for &item in cx.tcx.item_children(did).iter() {\n-            let def_id = item.res.def_id();\n             if item.vis == ty::Visibility::Public {\n-                if did == def_id || !visited.insert(def_id) {\n-                    continue;\n+                if let Some(def_id) = item.res.mod_def_id() {\n+                    if did == def_id || !visited.insert(def_id) {\n+                        continue;\n+                    }\n                 }\n-                if let Some(i) = try_inline(cx, item.res, item.ident.name, None, visited) {\n+                if let Res::PrimTy(p) = item.res {\n+                    // Primitive types can't be inlined so generate an import instead.\n+                    items.push(clean::Item {\n+                        name: None,\n+                        attrs: clean::Attributes::default(),\n+                        source: clean::Span::empty(),\n+                        def_id: cx.tcx.hir().local_def_id_from_node_id(ast::CRATE_NODE_ID),\n+                        visibility: clean::Public,\n+                        stability: None,\n+                        deprecation: None,\n+                        inner: clean::ImportItem(clean::Import::Simple(\n+                            item.ident.to_string(),\n+                            clean::ImportSource {\n+                                path: clean::Path {\n+                                    global: false,\n+                                    res: item.res,\n+                                    segments: vec![clean::PathSegment {\n+                                        name: clean::PrimitiveType::from(p).as_str().to_string(),\n+                                        args: clean::GenericArgs::AngleBracketed {\n+                                            args: Vec::new(),\n+                                            bindings: Vec::new(),\n+                                        },\n+                                    }],\n+                                },\n+                                did: None,\n+                            },\n+                        )),\n+                    });\n+                } else if let Some(i) = try_inline(cx, item.res, item.ident.name, None, visited) {\n                     items.extend(i)\n                 }\n             }"}, {"sha": "8501fee56cfaedfd5b41cd8c01d3df1ee2a16282", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/edfa0f43458af676e6475bacb281564bcf4b0c85/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edfa0f43458af676e6475bacb281564bcf4b0c85/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=edfa0f43458af676e6475bacb281564bcf4b0c85", "patch": "@@ -1290,6 +1290,19 @@ impl From<ast::FloatTy> for PrimitiveType {\n     }\n }\n \n+impl From<hir::PrimTy> for PrimitiveType {\n+    fn from(prim_ty: hir::PrimTy) -> PrimitiveType {\n+        match prim_ty {\n+            hir::PrimTy::Int(int_ty) => int_ty.into(),\n+            hir::PrimTy::Uint(uint_ty) => uint_ty.into(),\n+            hir::PrimTy::Float(float_ty) => float_ty.into(),\n+            hir::PrimTy::Str => PrimitiveType::Str,\n+            hir::PrimTy::Bool => PrimitiveType::Bool,\n+            hir::PrimTy::Char => PrimitiveType::Char,\n+        }\n+    }\n+}\n+\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub enum Visibility {\n     Public,"}, {"sha": "e110545c6f27b05d67fae5896978d827a3e64213", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/edfa0f43458af676e6475bacb281564bcf4b0c85/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edfa0f43458af676e6475bacb281564bcf4b0c85/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=edfa0f43458af676e6475bacb281564bcf4b0c85", "patch": "@@ -570,14 +570,7 @@ pub fn resolve_type(cx: &DocContext<'_>, path: Path, id: hir::HirId) -> Type {\n     }\n \n     let is_generic = match path.res {\n-        Res::PrimTy(p) => match p {\n-            hir::PrimTy::Str => return Primitive(PrimitiveType::Str),\n-            hir::PrimTy::Bool => return Primitive(PrimitiveType::Bool),\n-            hir::PrimTy::Char => return Primitive(PrimitiveType::Char),\n-            hir::PrimTy::Int(int_ty) => return Primitive(int_ty.into()),\n-            hir::PrimTy::Uint(uint_ty) => return Primitive(uint_ty.into()),\n-            hir::PrimTy::Float(float_ty) => return Primitive(float_ty.into()),\n-        },\n+        Res::PrimTy(p) => return Primitive(PrimitiveType::from(p)),\n         Res::SelfTy(..) if path.segments.len() == 1 => {\n             return Generic(kw::SelfUpper.to_string());\n         }"}, {"sha": "c3313ba63ef13785f55ad1b6b1cc63cf86e1836c", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/edfa0f43458af676e6475bacb281564bcf4b0c85/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edfa0f43458af676e6475bacb281564bcf4b0c85/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=edfa0f43458af676e6475bacb281564bcf4b0c85", "patch": "@@ -1171,11 +1171,14 @@ impl clean::ImportSource {\n         display_fn(move |f| match self.did {\n             Some(did) => resolved_path(f, did, &self.path, true, false),\n             _ => {\n-                for (i, seg) in self.path.segments.iter().enumerate() {\n-                    if i > 0 {\n-                        write!(f, \"::\")?\n-                    }\n-                    write!(f, \"{}\", seg.name)?;\n+                for seg in &self.path.segments[..self.path.segments.len() - 1] {\n+                    write!(f, \"{}::\", seg.name)?;\n+                }\n+                let name = self.path.last_name();\n+                if let hir::def::Res::PrimTy(p) = self.path.res {\n+                    primitive_link(f, PrimitiveType::from(p), name)?;\n+                } else {\n+                    write!(f, \"{}\", name)?;\n                 }\n                 Ok(())\n             }"}, {"sha": "b2e9fa43b395afb4c102228a6a46fa4fb3cfebfa", "filename": "src/test/rustdoc/auxiliary/primitive-reexport.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/edfa0f43458af676e6475bacb281564bcf4b0c85/src%2Ftest%2Frustdoc%2Fauxiliary%2Fprimitive-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edfa0f43458af676e6475bacb281564bcf4b0c85/src%2Ftest%2Frustdoc%2Fauxiliary%2Fprimitive-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fprimitive-reexport.rs?ref=edfa0f43458af676e6475bacb281564bcf4b0c85", "patch": "@@ -0,0 +1,8 @@\n+// compile-flags: --emit metadata --crate-type lib --edition 2018\n+\n+#![crate_name = \"foo\"]\n+\n+pub mod bar {\n+    pub use bool;\n+    pub use char as my_char;\n+}"}, {"sha": "de18360d4077c2615a47a5081ee0b0cd647ccf56", "filename": "src/test/rustdoc/primitive-reexport.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/edfa0f43458af676e6475bacb281564bcf4b0c85/src%2Ftest%2Frustdoc%2Fprimitive-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edfa0f43458af676e6475bacb281564bcf4b0c85/src%2Ftest%2Frustdoc%2Fprimitive-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprimitive-reexport.rs?ref=edfa0f43458af676e6475bacb281564bcf4b0c85", "patch": "@@ -0,0 +1,28 @@\n+// aux-build: primitive-reexport.rs\n+// compile-flags:--extern foo --edition 2018\n+\n+#![crate_name = \"bar\"]\n+\n+// @has bar/p/index.html\n+// @has - '//code' 'pub use bool;'\n+// @has - '//code/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\"]' 'bool'\n+// @has - '//code' 'pub use char as my_char;'\n+// @has - '//code/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.char.html\"]' 'char'\n+pub mod p {\n+    pub use foo::bar::*;\n+}\n+\n+// @has bar/baz/index.html\n+// @has - '//code' 'pub use bool;'\n+// @has - '//code/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\"]' 'bool'\n+// @has - '//code' 'pub use char as my_char;'\n+// @has - '//code/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.char.html\"]' 'char'\n+pub use foo::bar as baz;\n+\n+// @has bar/index.html\n+// @has - '//code' 'pub use str;'\n+// @has - '//code/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\"]' 'str'\n+// @has - '//code' 'pub use i32 as my_i32;'\n+// @has - '//code/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\"]' 'i32'\n+pub use str;\n+pub use i32 as my_i32;"}]}