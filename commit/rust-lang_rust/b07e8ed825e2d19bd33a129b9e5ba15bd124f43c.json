{"sha": "b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwN2U4ZWQ4MjVlMmQxOWJkMzNhMTI5YjllNWJhMTViZDEyNGY0M2M=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-29T03:08:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-29T03:08:19Z"}, "message": "Rollup merge of #65318 - estebank:coherence, r=varkor\n\nCall out the types that are non local on E0117\n\nCC #24745.", "tree": {"sha": "bf5771a65d834c4bf37a1219b32f4cfc02a3b1c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf5771a65d834c4bf37a1219b32f4cfc02a3b1c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdt60jCRBK7hj4Ov3rIwAAdHIIACmBdfHWcbjOett5/71JP/oX\nbRDrzlK5mkC+MeQaZH91BVf5z16poNNWUJH0cOFsYkWP1Ov+fS0g/If/KgPxalYi\nImxkV9gcJ4iZSwow+AmDox8ZReP5+G1/s1LrsJKGTdH4Z6e7phD2u+3LRRGIJ6Cp\nN5l7DF7HlHKwklWMRr0DRRTLLDZ+rffl9LWkOtEKTJZs6DR0EZJf8OP7yC3xsjfW\nvIFGNK5iVJw0y+J0/XZ2Ll9We34ZLXR1pRkm+u9T0kR62POqscq19rM+n76dMozI\nGTkVwdRdvUZihc/Xg3INW/xz8RqxXOUZbFUg7dmiWGOHZoy/3n0/kfkht3p1eS0=\n=QbRi\n-----END PGP SIGNATURE-----\n", "payload": "tree bf5771a65d834c4bf37a1219b32f4cfc02a3b1c8\nparent 42d4e261a170377fefb49516405445f9a27c0df5\nparent 627691f13861b42e3187ad291fcb122053084e2b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1572318499 +0100\ncommitter GitHub <noreply@github.com> 1572318499 +0100\n\nRollup merge of #65318 - estebank:coherence, r=varkor\n\nCall out the types that are non local on E0117\n\nCC #24745.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "html_url": "https://github.com/rust-lang/rust/commit/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42d4e261a170377fefb49516405445f9a27c0df5", "url": "https://api.github.com/repos/rust-lang/rust/commits/42d4e261a170377fefb49516405445f9a27c0df5", "html_url": "https://github.com/rust-lang/rust/commit/42d4e261a170377fefb49516405445f9a27c0df5"}, {"sha": "627691f13861b42e3187ad291fcb122053084e2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/627691f13861b42e3187ad291fcb122053084e2b", "html_url": "https://github.com/rust-lang/rust/commit/627691f13861b42e3187ad291fcb122053084e2b"}], "stats": {"total": 717, "additions": 467, "deletions": 250}, "files": [{"sha": "49a4d17d88d03d926ed87bead20a3fbd2d87d134", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 77, "deletions": 30, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -237,7 +237,7 @@ pub fn trait_ref_is_local_or_fundamental<'tcx>(\n }\n \n pub enum OrphanCheckErr<'tcx> {\n-    NoLocalInputType,\n+    NonLocalInputType(Vec<(Ty<'tcx>, bool /* Is this the first input type? */)>),\n     UncoveredTy(Ty<'tcx>),\n }\n \n@@ -355,7 +355,7 @@ pub fn orphan_check(\n /// Note that this function is never called for types that have both type\n /// parameters and inference variables.\n fn orphan_check_trait_ref<'tcx>(\n-    tcx: TyCtxt<'_>,\n+    tcx: TyCtxt<'tcx>,\n     trait_ref: ty::TraitRef<'tcx>,\n     in_crate: InCrate,\n ) -> Result<(), OrphanCheckErr<'tcx>> {\n@@ -378,40 +378,51 @@ fn orphan_check_trait_ref<'tcx>(\n         //      Let Ti be the first such type.\n         //     - No uncovered type parameters P1..=Pn may appear in T0..Ti (excluding Ti)\n         //\n-        fn uncover_fundamental_ty<'a>(\n-            tcx: TyCtxt<'_>,\n-            ty: Ty<'a>,\n+        fn uncover_fundamental_ty<'tcx>(\n+            tcx: TyCtxt<'tcx>,\n+            ty: Ty<'tcx>,\n             in_crate: InCrate,\n-        ) -> Vec<Ty<'a>> {\n-            if fundamental_ty(ty) && !ty_is_local(tcx, ty, in_crate) {\n+        ) -> Vec<Ty<'tcx>> {\n+            if fundamental_ty(ty) && ty_is_non_local(tcx, ty, in_crate).is_some() {\n                 ty.walk_shallow().flat_map(|ty| uncover_fundamental_ty(tcx, ty, in_crate)).collect()\n             } else {\n                 vec![ty]\n             }\n         }\n \n-        for input_ty in\n-            trait_ref.input_types().flat_map(|ty| uncover_fundamental_ty(tcx, ty, in_crate))\n+        let mut non_local_spans = vec![];\n+        for (i, input_ty) in trait_ref\n+            .input_types()\n+            .flat_map(|ty| uncover_fundamental_ty(tcx, ty, in_crate))\n+            .enumerate()\n         {\n             debug!(\"orphan_check_trait_ref: check ty `{:?}`\", input_ty);\n-            if ty_is_local(tcx, input_ty, in_crate) {\n+            let non_local_tys = ty_is_non_local(tcx, input_ty, in_crate);\n+            if non_local_tys.is_none() {\n                 debug!(\"orphan_check_trait_ref: ty_is_local `{:?}`\", input_ty);\n                 return Ok(());\n             } else if let ty::Param(_) = input_ty.kind {\n                 debug!(\"orphan_check_trait_ref: uncovered ty: `{:?}`\", input_ty);\n                 return Err(OrphanCheckErr::UncoveredTy(input_ty))\n             }\n+            if let Some(non_local_tys) = non_local_tys {\n+                for input_ty in non_local_tys {\n+                    non_local_spans.push((input_ty, i == 0));\n+                }\n+            }\n         }\n         // If we exit above loop, never found a local type.\n         debug!(\"orphan_check_trait_ref: no local type\");\n-        Err(OrphanCheckErr::NoLocalInputType)\n+        Err(OrphanCheckErr::NonLocalInputType(non_local_spans))\n     } else {\n+        let mut non_local_spans = vec![];\n         // First, create an ordered iterator over all the type\n         // parameters to the trait, with the self type appearing\n         // first.  Find the first input type that either references a\n         // type parameter OR some local type.\n-        for input_ty in trait_ref.input_types() {\n-            if ty_is_local(tcx, input_ty, in_crate) {\n+        for (i, input_ty) in trait_ref.input_types().enumerate() {\n+            let non_local_tys = ty_is_non_local(tcx, input_ty, in_crate);\n+            if non_local_tys.is_none() {\n                 debug!(\"orphan_check_trait_ref: ty_is_local `{:?}`\", input_ty);\n \n                 // First local input type. Check that there are no\n@@ -438,15 +449,21 @@ fn orphan_check_trait_ref<'tcx>(\n                 debug!(\"orphan_check_trait_ref: uncovered type `{:?}`\", param);\n                 return Err(OrphanCheckErr::UncoveredTy(param));\n             }\n+\n+            if let Some(non_local_tys) = non_local_tys {\n+                for input_ty in non_local_tys {\n+                    non_local_spans.push((input_ty, i == 0));\n+                }\n+            }\n         }\n         // If we exit above loop, never found a local type.\n         debug!(\"orphan_check_trait_ref: no local type\");\n-        Err(OrphanCheckErr::NoLocalInputType)\n+        Err(OrphanCheckErr::NonLocalInputType(non_local_spans))\n     }\n }\n \n-fn uncovered_tys<'tcx>(tcx: TyCtxt<'_>, ty: Ty<'tcx>, in_crate: InCrate) -> Vec<Ty<'tcx>> {\n-    if ty_is_local_constructor(tcx, ty, in_crate) {\n+fn uncovered_tys<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, in_crate: InCrate) -> Vec<Ty<'tcx>> {\n+    if ty_is_non_local_constructor(tcx, ty, in_crate).is_none() {\n         vec![]\n     } else if fundamental_ty(ty) {\n         ty.walk_shallow()\n@@ -464,9 +481,23 @@ fn is_possibly_remote_type(ty: Ty<'_>, _in_crate: InCrate) -> bool {\n     }\n }\n \n-fn ty_is_local(tcx: TyCtxt<'_>, ty: Ty<'_>, in_crate: InCrate) -> bool {\n-    ty_is_local_constructor(tcx, ty, in_crate) ||\n-        fundamental_ty(ty) && ty.walk_shallow().any(|t| ty_is_local(tcx, t, in_crate))\n+fn ty_is_non_local<'t>(tcx: TyCtxt<'t>, ty: Ty<'t>, in_crate: InCrate) -> Option<Vec<Ty<'t>>> {\n+    match ty_is_non_local_constructor(tcx, ty, in_crate) {\n+        Some(ty) => if !fundamental_ty(ty) {\n+            Some(vec![ty])\n+        } else {\n+            let tys: Vec<_> = ty.walk_shallow()\n+                .filter_map(|t| ty_is_non_local(tcx, t, in_crate))\n+                .flat_map(|i| i)\n+                .collect();\n+            if tys.is_empty() {\n+                None\n+            } else {\n+                Some(tys)\n+            }\n+        },\n+        None => None,\n+    }\n }\n \n fn fundamental_ty(ty: Ty<'_>) -> bool {\n@@ -486,8 +517,12 @@ fn def_id_is_local(def_id: DefId, in_crate: InCrate) -> bool {\n     }\n }\n \n-fn ty_is_local_constructor(tcx: TyCtxt<'_>, ty: Ty<'_>, in_crate: InCrate) -> bool {\n-    debug!(\"ty_is_local_constructor({:?})\", ty);\n+fn ty_is_non_local_constructor<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    ty: Ty<'tcx>,\n+    in_crate: InCrate,\n+) -> Option<Ty<'tcx>> {\n+    debug!(\"ty_is_non_local_constructor({:?})\", ty);\n \n     match ty.kind {\n         ty::Bool |\n@@ -506,37 +541,49 @@ fn ty_is_local_constructor(tcx: TyCtxt<'_>, ty: Ty<'_>, in_crate: InCrate) -> bo\n         ty::Tuple(..) |\n         ty::Param(..) |\n         ty::Projection(..) => {\n-            false\n+            Some(ty)\n         }\n \n         ty::Placeholder(..) | ty::Bound(..) | ty::Infer(..) => match in_crate {\n-            InCrate::Local => false,\n+            InCrate::Local => Some(ty),\n             // The inference variable might be unified with a local\n             // type in that remote crate.\n-            InCrate::Remote => true,\n+            InCrate::Remote => None,\n         },\n \n-        ty::Adt(def, _) => def_id_is_local(def.did, in_crate),\n-        ty::Foreign(did) => def_id_is_local(did, in_crate),\n+        ty::Adt(def, _) => if def_id_is_local(def.did, in_crate) {\n+            None\n+        } else {\n+            Some(ty)\n+        },\n+        ty::Foreign(did) => if def_id_is_local(did, in_crate) {\n+            None\n+        } else {\n+            Some(ty)\n+        },\n         ty::Opaque(did, _) => {\n             // Check the underlying type that this opaque\n             // type resolves to.\n             // This recursion will eventually terminate,\n             // since we've already managed to successfully\n             // resolve all opaque types by this point\n             let real_ty = tcx.type_of(did);\n-            ty_is_local_constructor(tcx, real_ty, in_crate)\n+            ty_is_non_local_constructor(tcx, real_ty, in_crate)\n         }\n \n         ty::Dynamic(ref tt, ..) => {\n             if let Some(principal) = tt.principal() {\n-                def_id_is_local(principal.def_id(), in_crate)\n+                if def_id_is_local(principal.def_id(), in_crate) {\n+                    None\n+                } else {\n+                    Some(ty)\n+                }\n             } else {\n-                false\n+                Some(ty)\n             }\n         }\n \n-        ty::Error => true,\n+        ty::Error => None,\n \n         ty::UnnormalizedProjection(..) |\n         ty::Closure(..) |"}, {"sha": "f066ca762c09e5c49ae7f4935680281a2fd5e5ce", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 66, "deletions": 24, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -24,7 +24,7 @@ impl ItemLikeVisitor<'v> for OrphanChecker<'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n         let def_id = self.tcx.hir().local_def_id(item.hir_id);\n         // \"Trait\" impl\n-        if let hir::ItemKind::Impl(.., Some(_), _, _) = item.kind {\n+        if let hir::ItemKind::Impl(.., generics, Some(tr), impl_ty, _) = &item.kind {\n             debug!(\"coherence2::orphan check: trait impl {}\",\n                    self.tcx.hir().node_to_string(item.hir_id));\n             let trait_ref = self.tcx.impl_trait_ref(def_id).unwrap();\n@@ -33,32 +33,74 @@ impl ItemLikeVisitor<'v> for OrphanChecker<'tcx> {\n             let sp = cm.def_span(item.span);\n             match traits::orphan_check(self.tcx, def_id) {\n                 Ok(()) => {}\n-                Err(traits::OrphanCheckErr::NoLocalInputType) => {\n-                    struct_span_err!(self.tcx.sess,\n-                                     sp,\n-                                     E0117,\n-                                     \"only traits defined in the current crate can be \\\n-                                      implemented for arbitrary types\")\n-                        .span_label(sp, \"impl doesn't use types inside crate\")\n-                        .note(\"the impl does not reference only types defined in this crate\")\n-                        .note(\"define and implement a trait or new type instead\")\n-                        .emit();\n+                Err(traits::OrphanCheckErr::NonLocalInputType(tys)) => {\n+                    let mut err = struct_span_err!(\n+                        self.tcx.sess,\n+                        sp,\n+                        E0117,\n+                        \"only traits defined in the current crate can be implemented for \\\n+                         arbitrary types\"\n+                    );\n+                    err.span_label(sp, \"impl doesn't use only types from inside the current crate\");\n+                    for (ty, is_target_ty) in &tys {\n+                        let mut ty = *ty;\n+                        self.tcx.infer_ctxt().enter(|infcx| {\n+                            // Remove the lifetimes unnecessary for this error.\n+                            ty = infcx.freshen(ty);\n+                        });\n+                        ty = match ty.kind {\n+                            // Remove the type arguments from the output, as they are not relevant.\n+                            // You can think of this as the reverse of `resolve_vars_if_possible`.\n+                            // That way if we had `Vec<MyType>`, we will properly attribute the\n+                            // problem to `Vec<T>` and avoid confusing the user if they were to see\n+                            // `MyType` in the error.\n+                            ty::Adt(def, _) => self.tcx.mk_adt(def, ty::List::empty()),\n+                            _ => ty,\n+                        };\n+                        let this = \"this\".to_string();\n+                        let (ty, postfix) = match &ty.kind {\n+                            ty::Slice(_) => (this, \" because slices are always foreign\"),\n+                            ty::Array(..) => (this, \" because arrays are always foreign\"),\n+                            ty::Tuple(..) => (this, \" because tuples are always foreign\"),\n+                            _ => (format!(\"`{}`\", ty), \"\"),\n+                        };\n+                        let msg = format!(\"{} is not defined in the current crate{}\", ty, postfix);\n+                        if *is_target_ty {\n+                            // Point at `D<A>` in `impl<A, B> for C<B> in D<A>`\n+                            err.span_label(impl_ty.span, &msg);\n+                        } else {\n+                            // Point at `C<B>` in `impl<A, B> for C<B> in D<A>`\n+                            err.span_label(tr.path.span, &msg);\n+                        }\n+                    }\n+                    err.note(\"define and implement a trait or new type instead\");\n+                    err.emit();\n                     return;\n                 }\n                 Err(traits::OrphanCheckErr::UncoveredTy(param_ty)) => {\n-                    struct_span_err!(self.tcx.sess,\n-                                     sp,\n-                                     E0210,\n-                                     \"type parameter `{}` must be used as the type parameter \\\n-                                      for some local type (e.g., `MyStruct<{}>`)\",\n-                                     param_ty,\n-                                     param_ty)\n-                        .span_label(sp,\n-                                    format!(\"type parameter `{}` must be used as the type \\\n-                                             parameter for some local type\", param_ty))\n-                        .note(\"only traits defined in the current crate can be implemented \\\n-                               for a type parameter\")\n-                        .emit();\n+                    let mut sp = sp;\n+                    for param in &generics.params {\n+                        if param.name.ident().to_string() == param_ty.to_string() {\n+                            sp = param.span;\n+                        }\n+                    }\n+                    let mut err = struct_span_err!(\n+                        self.tcx.sess,\n+                        sp,\n+                        E0210,\n+                        \"type parameter `{}` must be used as the type parameter for some local \\\n+                         type (e.g., `MyStruct<{}>`)\",\n+                        param_ty,\n+                        param_ty\n+                    );\n+                    err.span_label(sp, format!(\n+                        \"type parameter `{}` must be used as the type parameter for some local \\\n+                         type\",\n+                        param_ty,\n+                    ));\n+                    err.note(\"only traits defined in the current crate can be implemented for a \\\n+                              type parameter\");\n+                    err.emit();\n                     return;\n                 }\n             }"}, {"sha": "0541db2b8505f829a9573d01895f8cceab40e718", "filename": "src/test/ui/coherence/coherence-all-remote.old.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.old.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-all-remote.rs:9:1\n+  --> $DIR/coherence-all-remote.rs:9:6\n    |\n LL | impl<T> Remote1<T> for isize { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "0541db2b8505f829a9573d01895f8cceab40e718", "filename": "src/test/ui/coherence/coherence-all-remote.re.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.re.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-all-remote.rs:9:1\n+  --> $DIR/coherence-all-remote.rs:9:6\n    |\n LL | impl<T> Remote1<T> for isize { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "816ad949a2bce88eb677bb7043087188b72241ec", "filename": "src/test/ui/coherence/coherence-bigint-param.old.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.old.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-bigint-param.rs:11:1\n+  --> $DIR/coherence-bigint-param.rs:11:6\n    |\n LL | impl<T> Remote1<BigInt> for T { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "816ad949a2bce88eb677bb7043087188b72241ec", "filename": "src/test/ui/coherence/coherence-bigint-param.re.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.re.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-bigint-param.rs:11:1\n+  --> $DIR/coherence-bigint-param.rs:11:6\n    |\n LL | impl<T> Remote1<BigInt> for T { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "d3f8ba63f07eb911803117837238249a656a9f19", "filename": "src/test/ui/coherence/coherence-cow.a.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.a.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-cow.rs:18:1\n+  --> $DIR/coherence-cow.rs:18:6\n    |\n LL | impl<T> Remote for Pair<T,Cover<T>> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "d8db025cbcf2768dac7803fd112f2bb91527fee0", "filename": "src/test/ui/coherence/coherence-cow.b.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.b.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-cow.rs:23:1\n+  --> $DIR/coherence-cow.rs:23:6\n    |\n LL | impl<T> Remote for Pair<Cover<T>,T> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "ff46d7ea280323dbfa924b6f672dee4918ce4147", "filename": "src/test/ui/coherence/coherence-cow.c.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.c.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-cow.rs:28:1\n+  --> $DIR/coherence-cow.rs:28:6\n    |\n LL | impl<T,U> Remote for Pair<Cover<T>,U> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "06e77b2797d25af5f4eda1fb6fd14d1640b1c0c6", "filename": "src/test/ui/coherence/coherence-cow.re_a.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_a.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-cow.rs:18:1\n    |\n LL | impl<T> Remote for Pair<T,Cover<T>> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^----------------\n+   | |                  |\n+   | |                  `lib::Pair` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "146232ac02b0fa8ffedf1fd678effaf854245eea", "filename": "src/test/ui/coherence/coherence-cow.re_b.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_b.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-cow.rs:23:1\n    |\n LL | impl<T> Remote for Pair<Cover<T>,T> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^----------------\n+   | |                  |\n+   | |                  `lib::Pair` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "e0cf6aab7bbde12bc09df65afebdeaa1e08833d1", "filename": "src/test/ui/coherence/coherence-cow.re_c.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_c.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-cow.rs:28:1\n    |\n LL | impl<T,U> Remote for Pair<Cover<T>,U> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^----------------\n+   | |                    |\n+   | |                    `lib::Pair` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "971abe29639ff614b76a5c923bbde31334bbbaee", "filename": "src/test/ui/coherence/coherence-cross-crate-conflict.old.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.old.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -8,10 +8,10 @@ LL | impl<A> Foo for A {\n            - impl trait_impl_conflict::Foo for isize;\n \n error[E0210]: type parameter `A` must be used as the type parameter for some local type (e.g., `MyStruct<A>`)\n-  --> $DIR/coherence-cross-crate-conflict.rs:12:1\n+  --> $DIR/coherence-cross-crate-conflict.rs:12:6\n    |\n LL | impl<A> Foo for A {\n-   | ^^^^^^^^^^^^^^^^^ type parameter `A` must be used as the type parameter for some local type\n+   |      ^ type parameter `A` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "971abe29639ff614b76a5c923bbde31334bbbaee", "filename": "src/test/ui/coherence/coherence-cross-crate-conflict.re.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.re.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -8,10 +8,10 @@ LL | impl<A> Foo for A {\n            - impl trait_impl_conflict::Foo for isize;\n \n error[E0210]: type parameter `A` must be used as the type parameter for some local type (e.g., `MyStruct<A>`)\n-  --> $DIR/coherence-cross-crate-conflict.rs:12:1\n+  --> $DIR/coherence-cross-crate-conflict.rs:12:6\n    |\n LL | impl<A> Foo for A {\n-   | ^^^^^^^^^^^^^^^^^ type parameter `A` must be used as the type parameter for some local type\n+   |      ^ type parameter `A` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "a3da52fe484ac4fcc918f614336d469f820c5add", "filename": "src/test/ui/coherence/coherence-fundamental-trait-objects.old.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.old.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-fundamental-trait-objects.rs:15:1\n    |\n LL | impl Misc for dyn Fundamental<Local> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^----------------------\n+   | |             |\n+   | |             `dyn coherence_fundamental_trait_lib::Fundamental<Local>` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "a3da52fe484ac4fcc918f614336d469f820c5add", "filename": "src/test/ui/coherence/coherence-fundamental-trait-objects.re.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.re.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-fundamental-trait-objects.rs:15:1\n    |\n LL | impl Misc for dyn Fundamental<Local> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^----------------------\n+   | |             |\n+   | |             `dyn coherence_fundamental_trait_lib::Fundamental<Local>` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "b8137b36948cdb36ed995c6ad07bf2e8c6f54a2e", "filename": "src/test/ui/coherence/coherence-impl-trait-for-marker-trait-negative.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -14,9 +14,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:22:1\n    |\n LL | impl !Send for dyn Marker2 {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^-----------\n+   | |              |\n+   | |              `dyn Marker2` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `(dyn Object + 'static)`"}, {"sha": "d68337bed0066df70f4c54cd1e4906b4e7cbfa4f", "filename": "src/test/ui/coherence/coherence-impl-trait-for-marker-trait-positive.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -14,9 +14,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:22:1\n    |\n LL | unsafe impl Send for dyn Marker2 {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^-----------\n+   | |                    |\n+   | |                    `dyn Marker2` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `(dyn Object + 'static)`"}, {"sha": "742845b190737c9bc1f5f4c00c25f2de6caa7705", "filename": "src/test/ui/coherence/coherence-impls-copy.old.stderr", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.old.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -49,36 +49,44 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-impls-copy.rs:8:1\n    |\n LL | impl Copy for i32 {}\n-   | ^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^---\n+   | |             |\n+   | |             `i32` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impls-copy.rs:32:1\n    |\n LL | impl Copy for (MyType, MyType) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^----------------\n+   | |             |\n+   | |             this is not defined in the current crate because tuples are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impls-copy.rs:40:1\n    |\n LL | impl Copy for [MyType] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^--------\n+   | |             |\n+   | |             this is not defined in the current crate because slices are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impls-copy.rs:45:1\n    |\n LL | impl Copy for &'static [NotSync] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^------------------\n+   | |             |\n+   | |             this is not defined in the current crate because slices are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 10 previous errors"}, {"sha": "742845b190737c9bc1f5f4c00c25f2de6caa7705", "filename": "src/test/ui/coherence/coherence-impls-copy.re.stderr", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.re.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -49,36 +49,44 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-impls-copy.rs:8:1\n    |\n LL | impl Copy for i32 {}\n-   | ^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^---\n+   | |             |\n+   | |             `i32` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impls-copy.rs:32:1\n    |\n LL | impl Copy for (MyType, MyType) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^----------------\n+   | |             |\n+   | |             this is not defined in the current crate because tuples are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impls-copy.rs:40:1\n    |\n LL | impl Copy for [MyType] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^--------\n+   | |             |\n+   | |             this is not defined in the current crate because slices are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impls-copy.rs:45:1\n    |\n LL | impl Copy for &'static [NotSync] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^------------------\n+   | |             |\n+   | |             this is not defined in the current crate because slices are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 10 previous errors"}, {"sha": "7584b01ca893018a1c957ac85c1d6392302fb444", "filename": "src/test/ui/coherence/coherence-impls-send.old.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.old.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-impls-send.rs:20:1\n    |\n LL | unsafe impl Send for (MyType, MyType) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^----------------\n+   | |                    |\n+   | |                    this is not defined in the current crate because tuples are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `&'static NotSync`\n@@ -17,18 +19,22 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-impls-send.rs:28:1\n    |\n LL | unsafe impl Send for [MyType] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^--------\n+   | |                    |\n+   | |                    this is not defined in the current crate because slices are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impls-send.rs:32:1\n    |\n LL | unsafe impl Send for &'static [NotSync] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^------------------\n+   | |                    |\n+   | |                    this is not defined in the current crate because slices are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 4 previous errors"}, {"sha": "7584b01ca893018a1c957ac85c1d6392302fb444", "filename": "src/test/ui/coherence/coherence-impls-send.re.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.re.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-impls-send.rs:20:1\n    |\n LL | unsafe impl Send for (MyType, MyType) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^----------------\n+   | |                    |\n+   | |                    this is not defined in the current crate because tuples are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `&'static NotSync`\n@@ -17,18 +19,22 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-impls-send.rs:28:1\n    |\n LL | unsafe impl Send for [MyType] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^--------\n+   | |                    |\n+   | |                    this is not defined in the current crate because slices are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impls-send.rs:32:1\n    |\n LL | unsafe impl Send for &'static [NotSync] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^------------------\n+   | |                    |\n+   | |                    this is not defined in the current crate because slices are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 4 previous errors"}, {"sha": "ef999bcf461bc3f13a3173410ef38e79ca87f01b", "filename": "src/test/ui/coherence/coherence-impls-sized.old.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.old.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -38,27 +38,33 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-impls-sized.rs:27:1\n    |\n LL | impl Sized for (MyType, MyType) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^----------------\n+   | |              |\n+   | |              this is not defined in the current crate because tuples are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impls-sized.rs:39:1\n    |\n LL | impl Sized for [MyType] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^--------\n+   | |              |\n+   | |              this is not defined in the current crate because slices are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impls-sized.rs:46:1\n    |\n LL | impl Sized for &'static [NotSync] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^------------------\n+   | |              |\n+   | |              this is not defined in the current crate because slices are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 9 previous errors"}, {"sha": "ef999bcf461bc3f13a3173410ef38e79ca87f01b", "filename": "src/test/ui/coherence/coherence-impls-sized.re.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.re.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -38,27 +38,33 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-impls-sized.rs:27:1\n    |\n LL | impl Sized for (MyType, MyType) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^----------------\n+   | |              |\n+   | |              this is not defined in the current crate because tuples are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impls-sized.rs:39:1\n    |\n LL | impl Sized for [MyType] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^--------\n+   | |              |\n+   | |              this is not defined in the current crate because slices are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impls-sized.rs:46:1\n    |\n LL | impl Sized for &'static [NotSync] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^------------------\n+   | |              |\n+   | |              this is not defined in the current crate because slices are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 9 previous errors"}, {"sha": "731752045cd34820a7167bf5823f05025195a6ae", "filename": "src/test/ui/coherence/coherence-lone-type-parameter.old.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.old.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-lone-type-parameter.rs:9:1\n+  --> $DIR/coherence-lone-type-parameter.rs:9:6\n    |\n LL | impl<T> Remote for T { }\n-   | ^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "731752045cd34820a7167bf5823f05025195a6ae", "filename": "src/test/ui/coherence/coherence-lone-type-parameter.re.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.re.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-lone-type-parameter.rs:9:1\n+  --> $DIR/coherence-lone-type-parameter.rs:9:6\n    |\n LL | impl<T> Remote for T { }\n-   | ^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "a353acf0679dc543a90ec2f0888192122c37146e", "filename": "src/test/ui/coherence/coherence-orphan.old.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.old.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -2,18 +2,23 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-orphan.rs:13:1\n    |\n LL | impl TheTrait<usize> for isize { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^---------------^^^^^-----\n+   | |    |                   |\n+   | |    |                   `isize` is not defined in the current crate\n+   | |    `usize` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-orphan.rs:21:1\n    |\n LL | impl !Send for Vec<isize> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^----------\n+   | |              |\n+   | |              `std::vec::Vec` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 2 previous errors"}, {"sha": "a353acf0679dc543a90ec2f0888192122c37146e", "filename": "src/test/ui/coherence/coherence-orphan.re.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.re.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -2,18 +2,23 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-orphan.rs:13:1\n    |\n LL | impl TheTrait<usize> for isize { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^---------------^^^^^-----\n+   | |    |                   |\n+   | |    |                   `isize` is not defined in the current crate\n+   | |    `usize` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-orphan.rs:21:1\n    |\n LL | impl !Send for Vec<isize> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^----------\n+   | |              |\n+   | |              `std::vec::Vec` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 2 previous errors"}, {"sha": "7c62716f7058cff687180bf988de1b0568b6f0f6", "filename": "src/test/ui/coherence/coherence-overlapping-pairs.old.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.old.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-overlapping-pairs.rs:11:1\n+  --> $DIR/coherence-overlapping-pairs.rs:11:6\n    |\n LL | impl<T> Remote for lib::Pair<T,Foo> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "2277b33fcebee0f34f54906d81550372c0bf63b7", "filename": "src/test/ui/coherence/coherence-overlapping-pairs.re.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.re.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-overlapping-pairs.rs:11:1\n    |\n LL | impl<T> Remote for lib::Pair<T,Foo> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^----------------\n+   | |                  |\n+   | |                  `lib::Pair` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "9f55df4c974b8da20861878ca1673fee37d3dae9", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered-1.old.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.old.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-pair-covered-uncovered-1.rs:15:1\n+  --> $DIR/coherence-pair-covered-uncovered-1.rs:15:6\n    |\n LL | impl<T, U> Remote1<Pair<T, Local<U>>> for i32 { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "f6e755b666249ca516a3997d9158fba6dd2618ee", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered-1.re.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.re.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -2,9 +2,12 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-pair-covered-uncovered-1.rs:15:1\n    |\n LL | impl<T, U> Remote1<Pair<T, Local<U>>> for i32 { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^--------------------------^^^^^---\n+   | |          |                              |\n+   | |          |                              `i32` is not defined in the current crate\n+   | |          `lib::Pair` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "4084061eb4ac50fc71ae2670d5f32f9e550bd0f7", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered.old.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.old.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-pair-covered-uncovered.rs:11:1\n+  --> $DIR/coherence-pair-covered-uncovered.rs:11:6\n    |\n LL | impl<T,U> Remote for Pair<T,Local<U>> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "9fa860cb584a1b3376e719486ced664bb8005e09", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered.re.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.re.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-pair-covered-uncovered.rs:11:1\n    |\n LL | impl<T,U> Remote for Pair<T,Local<U>> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^----------------\n+   | |                    |\n+   | |                    `lib::Pair` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "fbcf8fb762a010ff243079e249d0b2ba6b4403da", "filename": "src/test/ui/coherence/coherence-vec-local-2.old.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.old.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-vec-local-2.rs:14:1\n+  --> $DIR/coherence-vec-local-2.rs:14:6\n    |\n LL | impl<T> Remote for Vec<Local<T>> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "48a2848c55f1b94d117fa1bbe21db5914ff3cd1b", "filename": "src/test/ui/coherence/coherence-vec-local-2.re.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.re.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-vec-local-2.rs:14:1\n    |\n LL | impl<T> Remote for Vec<Local<T>> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^-------------\n+   | |                  |\n+   | |                  `std::vec::Vec` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "4b199dd91421794c559bc72f0a9249413c3fa6b7", "filename": "src/test/ui/coherence/coherence-vec-local.old.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.old.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-vec-local.rs:14:1\n    |\n LL | impl Remote for Vec<Local> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^----------\n+   | |               |\n+   | |               `std::vec::Vec` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "4b199dd91421794c559bc72f0a9249413c3fa6b7", "filename": "src/test/ui/coherence/coherence-vec-local.re.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.re.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-vec-local.rs:14:1\n    |\n LL | impl Remote for Vec<Local> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^----------\n+   | |               |\n+   | |               `std::vec::Vec` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "0782f823128728cae1a82f057ae946f860475027", "filename": "src/test/ui/coherence/coherence_local_err_struct.old.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.old.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence_local_err_struct.rs:17:1\n    |\n LL | impl lib::MyCopy for lib::MyStruct<MyType> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^---------------------\n+   | |                    |\n+   | |                    `lib::MyStruct` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "0782f823128728cae1a82f057ae946f860475027", "filename": "src/test/ui/coherence/coherence_local_err_struct.re.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.re.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence_local_err_struct.rs:17:1\n    |\n LL | impl lib::MyCopy for lib::MyStruct<MyType> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^---------------------\n+   | |                    |\n+   | |                    `lib::MyStruct` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "f01623f76217e1fd263a9e7d9d0c537a90cdd23f", "filename": "src/test/ui/coherence/coherence_local_err_tuple.old.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.old.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence_local_err_tuple.rs:17:1\n    |\n LL | impl lib::MyCopy for (MyType,) { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^---------\n+   | |                    |\n+   | |                    this is not defined in the current crate because tuples are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "f01623f76217e1fd263a9e7d9d0c537a90cdd23f", "filename": "src/test/ui/coherence/coherence_local_err_tuple.re.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.re.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence_local_err_tuple.rs:17:1\n    |\n LL | impl lib::MyCopy for (MyType,) { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^---------\n+   | |                    |\n+   | |                    this is not defined in the current crate because tuples are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "4d7757799e7cd2cb59b5effb3cadf1a43cdf7610", "filename": "src/test/ui/coherence/impl-foreign-for-foreign.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/impl-foreign-for-foreign.rs:12:1\n    |\n LL | impl Remote for i32 {\n-   | ^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^---\n+   | |               |\n+   | |               `i32` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "4d15f0db65ffb0fe3e0840d4d804e2b715970d0d", "filename": "src/test/ui/coherence/impl-foreign-for-foreign[foreign].stderr", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Bforeign%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Bforeign%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Bforeign%5D.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -2,27 +2,36 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/impl-foreign-for-foreign[foreign].rs:12:1\n    |\n LL | impl Remote1<Rc<i32>> for i32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^----------------^^^^^---\n+   | |    |                    |\n+   | |    |                    `i32` is not defined in the current crate\n+   | |    `std::rc::Rc` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/impl-foreign-for-foreign[foreign].rs:16:1\n    |\n LL | impl Remote1<Rc<Local>> for f64 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^------------------^^^^^---\n+   | |    |                      |\n+   | |    |                      `f64` is not defined in the current crate\n+   | |    `std::rc::Rc` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/impl-foreign-for-foreign[foreign].rs:20:1\n    |\n LL | impl<T> Remote1<Rc<T>> for f32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^--------------^^^^^---\n+   | |       |                  |\n+   | |       |                  `f32` is not defined in the current crate\n+   | |       `std::rc::Rc` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 3 previous errors"}, {"sha": "d1f4d9849ac313516b84f31ec3ee1fb8baec0dad", "filename": "src/test/ui/coherence/impl-foreign-for-fundamental[foreign].stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Bforeign%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Bforeign%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Bforeign%5D.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -2,18 +2,22 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/impl-foreign-for-fundamental[foreign].rs:12:1\n    |\n LL | impl Remote for Box<i32> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^--------\n+   | |               |\n+   | |               `i32` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/impl-foreign-for-fundamental[foreign].rs:16:1\n    |\n LL | impl<T> Remote for Box<Rc<T>> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^----------\n+   | |                  |\n+   | |                  `std::rc::Rc` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 2 previous errors"}, {"sha": "07c7632a53ff4fbf32bb789e8d34aa93fa1cd369", "filename": "src/test/ui/coherence/impl-foreign[foreign]-for-foreign.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bforeign%5D-for-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bforeign%5D-for-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bforeign%5D-for-foreign.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -2,9 +2,12 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/impl-foreign[foreign]-for-foreign.rs:12:1\n    |\n LL | impl Remote1<u32> for f64 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^------------^^^^^---\n+   | |    |                |\n+   | |    |                `f64` is not defined in the current crate\n+   | |    `u32` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "8dcac05c0ccb60f23b0cf532da48c51e93b553f4", "filename": "src/test/ui/coherence/impl-foreign[fundemental[foreign]]-for-foreign.stderr", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Bforeign%5D%5D-for-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Bforeign%5D%5D-for-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Bforeign%5D%5D-for-foreign.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -2,27 +2,36 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/impl-foreign[fundemental[foreign]]-for-foreign.rs:13:1\n    |\n LL | impl Remote1<Box<String>> for i32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^--------------------^^^^^---\n+   | |    |                        |\n+   | |    |                        `i32` is not defined in the current crate\n+   | |    `std::string::String` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/impl-foreign[fundemental[foreign]]-for-foreign.rs:17:1\n    |\n LL | impl Remote1<Box<Rc<i32>>> for f64 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^---------------------^^^^^---\n+   | |    |                         |\n+   | |    |                         `f64` is not defined in the current crate\n+   | |    `std::rc::Rc` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/impl-foreign[fundemental[foreign]]-for-foreign.rs:21:1\n    |\n LL | impl<T> Remote1<Box<Rc<T>>> for f32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^-------------------^^^^^---\n+   | |       |                       |\n+   | |       |                       `f32` is not defined in the current crate\n+   | |       `std::rc::Rc` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 3 previous errors"}, {"sha": "7e9d3c6e72927a6b120db255e592479887e60057", "filename": "src/test/ui/coherence/impl[t]-foreign-for-foreign[t].stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-foreign%5Bt%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-foreign%5Bt%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-foreign%5Bt%5D.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -2,18 +2,22 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/impl[t]-foreign-for-foreign[t].rs:13:1\n    |\n LL | impl Remote for Rc<Local> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^---------\n+   | |               |\n+   | |               `std::rc::Rc` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/impl[t]-foreign-for-foreign[t].rs:18:1\n    |\n LL | impl<T> Remote for Arc<T> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^------\n+   | |                  |\n+   | |                  `std::sync::Arc` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 2 previous errors"}, {"sha": "a26b87a326211980f17bfad1c10cd6025f257521", "filename": "src/test/ui/coherence/impl[t]-foreign-for-fundamental[t].stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-fundamental%5Bt%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-fundamental%5Bt%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-fundamental%5Bt%5D.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign-for-fundamental[t].rs:12:1\n+  --> $DIR/impl[t]-foreign-for-fundamental[t].rs:12:6\n    |\n LL | impl<T> Remote for Box<T> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "cbead462e67904d23502fe9adb0d69364aa433f7", "filename": "src/test/ui/coherence/impl[t]-foreign[foreign]-for-fundamental[t].stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-fundamental%5Bt%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-fundamental%5Bt%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-fundamental%5Bt%5D.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -1,16 +1,16 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[foreign]-for-fundamental[t].rs:12:1\n+  --> $DIR/impl[t]-foreign[foreign]-for-fundamental[t].rs:12:6\n    |\n LL | impl<T> Remote1<u32> for Box<T> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[foreign]-for-fundamental[t].rs:16:1\n+  --> $DIR/impl[t]-foreign[foreign]-for-fundamental[t].rs:16:10\n    |\n LL | impl<'a, T> Remote1<u32> for &'a T {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |          ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "3d9afdf6cf6051f970ab65110a578db4b09e3810", "filename": "src/test/ui/coherence/impl[t]-foreign[foreign]-for-t.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-t.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-t.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-t.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[foreign]-for-t.rs:12:1\n+  --> $DIR/impl[t]-foreign[foreign]-for-t.rs:12:6\n    |\n LL | impl<T> Remote1<u32> for T {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "150b1962acb840af48f55dd58b26e83133ecb9d2", "filename": "src/test/ui/coherence/impl[t]-foreign[fundamental[t]]-for-foreign.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-foreign.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -1,16 +1,16 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[fundamental[t]]-for-foreign.rs:12:1\n+  --> $DIR/impl[t]-foreign[fundamental[t]]-for-foreign.rs:12:6\n    |\n LL | impl<T> Remote1<Box<T>> for u32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[fundamental[t]]-for-foreign.rs:16:1\n+  --> $DIR/impl[t]-foreign[fundamental[t]]-for-foreign.rs:16:10\n    |\n LL | impl<'a, T> Remote1<&'a T> for u32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |          ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "0d86e74788cf89c3a5deb24a44ce1685bf1948f3", "filename": "src/test/ui/coherence/impl[t]-foreign[fundamental[t]]-for-fundamental[t].stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-fundamental%5Bt%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-fundamental%5Bt%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-fundamental%5Bt%5D.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -1,16 +1,16 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[fundamental[t]]-for-fundamental[t].rs:12:1\n+  --> $DIR/impl[t]-foreign[fundamental[t]]-for-fundamental[t].rs:12:10\n    |\n LL | impl<'a, T> Remote1<Box<T>> for &'a T {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |          ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[fundamental[t]]-for-fundamental[t].rs:15:1\n+  --> $DIR/impl[t]-foreign[fundamental[t]]-for-fundamental[t].rs:15:10\n    |\n LL | impl<'a, T> Remote1<&'a T> for Box<T> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |          ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "04ac6a868fa1ab3009711c0ad49228333534a886", "filename": "src/test/ui/coherence/impl[t]-foreign[fundamental[t]]-for-t.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-t.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-t.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-t.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -1,16 +1,16 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[fundamental[t]]-for-t.rs:12:1\n+  --> $DIR/impl[t]-foreign[fundamental[t]]-for-t.rs:12:6\n    |\n LL | impl<T> Remote1<Box<T>> for T {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[fundamental[t]]-for-t.rs:15:1\n+  --> $DIR/impl[t]-foreign[fundamental[t]]-for-t.rs:15:10\n    |\n LL | impl<'a, T> Remote1<&'a T> for T {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |          ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "f1fdcecf57df83315717761e7a4b8bb3522a1c6f", "filename": "src/test/ui/coherence/impl[t]-foreign[fundamental[t]_local]-for-foreign.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D_local%5D-for-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D_local%5D-for-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D_local%5D-for-foreign.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -1,16 +1,16 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[fundamental[t]_local]-for-foreign.rs:12:1\n+  --> $DIR/impl[t]-foreign[fundamental[t]_local]-for-foreign.rs:12:6\n    |\n LL | impl<T> Remote2<Box<T>, Local> for u32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[fundamental[t]_local]-for-foreign.rs:16:1\n+  --> $DIR/impl[t]-foreign[fundamental[t]_local]-for-foreign.rs:16:10\n    |\n LL | impl<'a, T> Remote2<&'a T, Local> for u32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |          ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "99ccbb89fc2fc086595eb7611958bd8a3ac52a42", "filename": "src/test/ui/coherence/impl[t]-foreign[local]-for-fundamental[t].stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bt%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bt%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bt%5D.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -1,16 +1,16 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[local]-for-fundamental[t].rs:12:1\n+  --> $DIR/impl[t]-foreign[local]-for-fundamental[t].rs:12:6\n    |\n LL | impl<T> Remote1<Local> for Box<T> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[local]-for-fundamental[t].rs:16:1\n+  --> $DIR/impl[t]-foreign[local]-for-fundamental[t].rs:16:6\n    |\n LL | impl<T> Remote1<Local> for &T {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "08cf414c139af3b40d5edf0bb699ae59c4ac74ca", "filename": "src/test/ui/coherence/impl[t]-foreign[local]-for-t.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-t.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-t.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-t.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[local]-for-t.rs:12:1\n+  --> $DIR/impl[t]-foreign[local]-for-t.rs:12:6\n    |\n LL | impl<T> Remote1<Local> for T {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "e9d1ea8a8157516c63f7865944e4f74c04be4a65", "filename": "src/test/ui/coherence/impl[t]-foreign[t]-for-foreign.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-foreign.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[t]-for-foreign.rs:12:1\n+  --> $DIR/impl[t]-foreign[t]-for-foreign.rs:12:6\n    |\n LL | impl<T> Remote1<T> for u32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "d8b0d25a5782bbbb20dfcb7a42f52f709fa17483", "filename": "src/test/ui/coherence/impl[t]-foreign[t]-for-fundamental.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-fundamental.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-fundamental.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-fundamental.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -1,16 +1,16 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[t]-for-fundamental.rs:12:1\n+  --> $DIR/impl[t]-foreign[t]-for-fundamental.rs:12:6\n    |\n LL | impl<T> Remote1<T> for Box<T> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error[E0210]: type parameter `B` must be used as the type parameter for some local type (e.g., `MyStruct<B>`)\n-  --> $DIR/impl[t]-foreign[t]-for-fundamental.rs:16:1\n+  --> $DIR/impl[t]-foreign[t]-for-fundamental.rs:16:13\n    |\n LL | impl<'a, A, B> Remote1<A> for &'a B {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `B` must be used as the type parameter for some local type\n+   |             ^ type parameter `B` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "7b651e66c3dcb2a760b2d19a09a0bd17937aa20a", "filename": "src/test/ui/coherence/impl[t]-foreign[t]-for-t.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-t.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-t.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-t.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[t]-for-t.rs:12:1\n+  --> $DIR/impl[t]-foreign[t]-for-t.rs:12:6\n    |\n LL | impl<T> Remote1<T> for T {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "a374b0d2636cddfb212e10f6066dcbcbaf771ef2", "filename": "src/test/ui/dropck/drop-on-non-struct.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -8,9 +8,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/drop-on-non-struct.rs:1:1\n    |\n LL | impl<'a> Drop for &'a mut isize {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^-------------\n+   | |                 |\n+   | |                 `isize` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 2 previous errors"}, {"sha": "f0cfc8a2533248a6e50320df44388d07c7000056", "filename": "src/test/ui/error-codes/E0117.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -8,9 +8,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/E0117.rs:1:1\n    |\n LL | impl Drop for u32 {}\n-   | ^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^---\n+   | |             |\n+   | |             `u32` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 2 previous errors"}, {"sha": "e4ad4ffb45fee6b2d0c1ca5fcc3da067d390aca2", "filename": "src/test/ui/error-codes/E0206.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -14,9 +14,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/E0206.rs:3:1\n    |\n LL | impl Copy for Foo { }\n-   | ^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^---\n+   | |             |\n+   | |             this is not defined in the current crate because arrays are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 3 previous errors"}, {"sha": "f7516d20af472562748d69793a60ebe07f2d6206", "filename": "src/test/ui/error-codes/e0119/complex-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fcomplex-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fcomplex-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fcomplex-impl.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -9,10 +9,10 @@ LL | impl<R> External for (Q, R) {}\n              where <U as std::ops::FnOnce<(T,)>>::Output == V, <V as std::iter::Iterator>::Item == T, 'b : 'a, T : 'a, U: std::ops::FnOnce<(T,)>, U : 'static, V: std::iter::Iterator, V: std::clone::Clone, W: std::ops::Add, <W as std::ops::Add>::Output: std::marker::Copy;\n \n error[E0210]: type parameter `R` must be used as the type parameter for some local type (e.g., `MyStruct<R>`)\n-  --> $DIR/complex-impl.rs:9:1\n+  --> $DIR/complex-impl.rs:9:6\n    |\n LL | impl<R> External for (Q, R) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `R` must be used as the type parameter for some local type\n+   |      ^ type parameter `R` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "ec8e8144d42cfa6b5a756f25876ddb342531a94c", "filename": "src/test/ui/error-codes/e0119/issue-28981.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-28981.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-28981.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-28981.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -9,10 +9,10 @@ LL | impl<Foo> Deref for Foo { }\n              where T: ?Sized;\n \n error[E0210]: type parameter `Foo` must be used as the type parameter for some local type (e.g., `MyStruct<Foo>`)\n-  --> $DIR/issue-28981.rs:5:1\n+  --> $DIR/issue-28981.rs:5:6\n    |\n LL | impl<Foo> Deref for Foo { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^ type parameter `Foo` must be used as the type parameter for some local type\n+   |      ^^^ type parameter `Foo` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "504bfb56979609c0c0c6102ca84f58cf16077cb1", "filename": "src/test/ui/feature-gates/feature-gate-re-rebalance-coherence.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-re-rebalance-coherence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-re-rebalance-coherence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-re-rebalance-coherence.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/feature-gate-re-rebalance-coherence.rs:10:1\n+  --> $DIR/feature-gate-re-rebalance-coherence.rs:10:10\n    |\n LL | impl<'a, T:'a, Tab> QueryFragment<Oracle> for BatchInsert<'a, T, Tab> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |          ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "12d4da7159929b4cc0e4180aeb73b83c0c9ed62c", "filename": "src/test/ui/issues/issue-41974.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fissues%2Fissue-41974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Fissues%2Fissue-41974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41974.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -16,10 +16,10 @@ LL | impl<T> Drop for T where T: A {\n    |                  ^ implementing Drop requires a struct\n \n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/issue-41974.rs:7:1\n+  --> $DIR/issue-41974.rs:7:6\n    |\n LL | impl<T> Drop for T where T: A {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "cb21b26bba75af4e15b805b6d7fffc89cfcd3a64", "filename": "src/test/ui/orphan-check-diagnostics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Forphan-check-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Forphan-check-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Forphan-check-diagnostics.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/orphan-check-diagnostics.rs:11:1\n+  --> $DIR/orphan-check-diagnostics.rs:11:6\n    |\n LL | impl<T> RemoteTrait for T where T: LocalTrait {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "a54826787da46e2bc9b951e1d8ec5c87168f6778", "filename": "src/test/ui/typeck/typeck-default-trait-impl-cross-crate-coherence.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-cross-crate-coherence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07e8ed825e2d19bd33a129b9e5ba15bd124f43c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-cross-crate-coherence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-cross-crate-coherence.stderr?ref=b07e8ed825e2d19bd33a129b9e5ba15bd124f43c", "patch": "@@ -2,18 +2,22 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/typeck-default-trait-impl-cross-crate-coherence.rs:13:1\n    |\n LL | impl DefaultedTrait for (A,) { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^----\n+   | |                       |\n+   | |                       this is not defined in the current crate because tuples are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/typeck-default-trait-impl-cross-crate-coherence.rs:16:1\n    |\n LL | impl !DefaultedTrait for (B,) { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^----\n+   | |                        |\n+   | |                        this is not defined in the current crate because tuples are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0321]: cross-crate traits with a default impl, like `lib::DefaultedTrait`, can only be implemented for a struct/enum type defined in the current crate\n@@ -26,9 +30,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/typeck-default-trait-impl-cross-crate-coherence.rs:21:1\n    |\n LL | impl DefaultedTrait for lib::Something<C> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^-----------------\n+   | |                       |\n+   | |                       `lib::Something` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 4 previous errors"}]}