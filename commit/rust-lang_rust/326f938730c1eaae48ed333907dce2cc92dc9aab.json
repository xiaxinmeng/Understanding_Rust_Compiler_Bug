{"sha": "326f938730c1eaae48ed333907dce2cc92dc9aab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNmY5Mzg3MzBjMWVhYWU0OGVkMzMzOTA3ZGNlMmNjOTJkYzlhYWI=", "commit": {"author": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2014-04-14T18:39:59Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-16T02:45:00Z"}, "message": "rustdoc: Better sorting criteria for searching.\n\nThis essentially rewrites the sorting algorithm, which relied on\nthe implementation-defined handling of non-consistent sorting function\n(cf. ECMA-262 5th edition, section 15.4.4.11)\nand was also a bit inefficient.\n\nThe new criteria expands the prior criteria while adding these ones:\n\n- The current crate is always preferred over other crates.\n  (Closes #13178)\n- An item with a description is preferred over one without it,\n  if item names match. This is a heuristic assuming that\n  the documented item is more likely to be relevant.\n- An item with no literal occurrence of search query is handled correctly.", "tree": {"sha": "535d8680b57c46a97ece228b50c23713aa9fb584", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/535d8680b57c46a97ece228b50c23713aa9fb584"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/326f938730c1eaae48ed333907dce2cc92dc9aab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/326f938730c1eaae48ed333907dce2cc92dc9aab", "html_url": "https://github.com/rust-lang/rust/commit/326f938730c1eaae48ed333907dce2cc92dc9aab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/326f938730c1eaae48ed333907dce2cc92dc9aab/comments", "author": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea5d9088ad36d08671a5ac77697e9ba7f4340b1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea5d9088ad36d08671a5ac77697e9ba7f4340b1a", "html_url": "https://github.com/rust-lang/rust/commit/ea5d9088ad36d08671a5ac77697e9ba7f4340b1a"}], "stats": {"total": 103, "additions": 52, "deletions": 51}, "files": [{"sha": "e975fac6ed758a4b5f072530e14b94e02acc7c07", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 52, "deletions": 51, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/326f938730c1eaae48ed333907dce2cc92dc9aab/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/326f938730c1eaae48ed333907dce2cc92dc9aab/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=326f938730c1eaae48ed333907dce2cc92dc9aab", "patch": "@@ -189,67 +189,68 @@\n             for (var i = 0; i < nresults; i += 1) {\n                 results[i].word = searchWords[results[i].id];\n                 results[i].item = searchIndex[results[i].id] || {};\n-                results[i].ty = results[i].item.ty;\n-                results[i].path = results[i].item.path;\n             }\n             // if there are no results then return to default and fail\n             if (results.length === 0) {\n                 return [];\n             }\n \n-            // sort by exact match\n-            results.sort(function search_complete_sort0(aaa, bbb) {\n-                if (aaa.word === valLower &&\n-                    bbb.word !== valLower) {\n-                    return 1;\n-                }\n-            });\n-            // first sorting attempt\n-            // sort by item name length\n-            results.sort(function search_complete_sort1(aaa, bbb) {\n-                if (aaa.word.length > bbb.word.length) {\n-                    return 1;\n-                }\n+            results.sort(function(aaa, bbb) {\n+                var a, b;\n+\n+                // sort by crate (non-current crate goes later)\n+                a = (aaa.item.crate !== window.currentCrate);\n+                b = (bbb.item.crate !== window.currentCrate);\n+                if (a !== b) return a - b;\n+\n+                // sort by exact match (mismatch goes later)\n+                a = (aaa.word !== valLower);\n+                b = (bbb.word !== valLower);\n+                if (a !== b) return a - b;\n+\n+                // sort by item name length (longer goes later)\n+                a = aaa.word.length;\n+                b = bbb.word.length;\n+                if (a !== b) return a - b;\n+\n+                // sort by item name (lexicographically larger goes later)\n+                a = aaa.word;\n+                b = bbb.word;\n+                if (a !== b) return (a > b ? +1 : -1);\n+\n+                // sort by index of keyword in item name (no literal occurrence goes later)\n+                a = (aaa.index < 0);\n+                b = (bbb.index < 0);\n+                if (a !== b) return a - b;\n+                // (later literal occurrence, if any, goes later)\n+                a = aaa.index;\n+                b = bbb.index;\n+                if (a !== b) return a - b;\n+\n+                // sort by description (no description goes later)\n+                a = (aaa.item.desc === '');\n+                b = (bbb.item.desc === '');\n+                if (a !== b) return a - b;\n+\n+                // sort by type (later occurrence in `itemTypes` goes later)\n+                a = aaa.item.ty;\n+                b = bbb.item.ty;\n+                if (a !== b) return a - b;\n+\n+                // sort by path (lexicographically larger goes later)\n+                a = aaa.item.path;\n+                b = bbb.item.path;\n+                if (a !== b) return (a > b ? +1 : -1);\n+\n+                // que sera, sera\n+                return 0;\n             });\n-            // second sorting attempt\n-            // sort by item name\n-            results.sort(function search_complete_sort1(aaa, bbb) {\n-                if (aaa.word.length === bbb.word.length &&\n-                    aaa.word > bbb.word) {\n-                    return 1;\n-                }\n-            });\n-            // third sorting attempt\n-            // sort by index of keyword in item name\n-            if (results[0].index !== -1) {\n-                results.sort(function search_complete_sort1(aaa, bbb) {\n-                    if (aaa.index > bbb.index && bbb.index === 0) {\n-                        return 1;\n-                    }\n-                });\n-            }\n-            // fourth sorting attempt\n-            // sort by type\n-            results.sort(function search_complete_sort3(aaa, bbb) {\n-                if (aaa.word === bbb.word &&\n-                    aaa.ty > bbb.ty) {\n-                    return 1;\n-                }\n-            });\n-            // fifth sorting attempt\n-            // sort by path\n-            results.sort(function search_complete_sort4(aaa, bbb) {\n-                if (aaa.word === bbb.word &&\n-                    aaa.ty === bbb.ty && aaa.path > bbb.path) {\n-                    return 1;\n-                }\n-            });\n-            // sixth sorting attempt\n+\n             // remove duplicates, according to the data provided\n             for (var i = results.length - 1; i > 0; i -= 1) {\n                 if (results[i].word === results[i - 1].word &&\n-                    results[i].ty === results[i - 1].ty &&\n-                    results[i].path === results[i - 1].path)\n+                    results[i].item.ty === results[i - 1].item.ty &&\n+                    results[i].item.path === results[i - 1].item.path)\n                 {\n                     results[i].id = -1;\n                 }"}]}