{"sha": "b7bb67abd32ae15476cd40746cae7f9a96bc65da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3YmI2N2FiZDMyYWUxNTQ3NmNkNDA3NDZjYWU3ZjlhOTZiYzY1ZGE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-12-09T02:35:55Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-12-09T20:43:46Z"}, "message": "Use spans for -Z external-macro-backtrace\n\n```\n% rustc ui/type-check/cannot_infer_local_or_vec.rs -Z external-macro-backtrace\nerror[E0282]: type annotations needed\n  --> <vec macros>:3:1\n   |\n1  | / ( $ elem : expr ; $ n : expr ) => (\n2  | | $ crate :: vec :: from_elem ( $ elem , $ n ) ) ; ( $ ( $ x : expr ) , * ) => (\n3  | | < [ _ ] > :: into_vec ( box [ $ ( $ x ) , * ] ) ) ; ( $ ( $ x : expr , ) * )\n   | | ^^^^^^^^^^^^^^^^^^^^^\n   | | |\n   | | cannot infer type for `T`\n4  | | => ( vec ! [ $ ( $ x ) , * ] )\n   | |______________________________- in this expansion of `vec!`\n   |\n  ::: ui/type-check/cannot_infer_local_or_vec.rs\n   |\n12 |       let x = vec![];\n   |           -   ------ in this macro invocation\n   |           |\n   |           consider giving `x` a type\n\nerror: aborting due to previous error\n```", "tree": {"sha": "02bf83dec08fe27351b585b5c27ef1b9184e62b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02bf83dec08fe27351b585b5c27ef1b9184e62b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7bb67abd32ae15476cd40746cae7f9a96bc65da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7bb67abd32ae15476cd40746cae7f9a96bc65da", "html_url": "https://github.com/rust-lang/rust/commit/b7bb67abd32ae15476cd40746cae7f9a96bc65da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7bb67abd32ae15476cd40746cae7f9a96bc65da/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7b6d8263b0c106503d102ab8148769ac9f7d086", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7b6d8263b0c106503d102ab8148769ac9f7d086", "html_url": "https://github.com/rust-lang/rust/commit/c7b6d8263b0c106503d102ab8148769ac9f7d086"}], "stats": {"total": 214, "additions": 152, "deletions": 62}, "files": [{"sha": "802563c7b6e502a836ae4e6d16581f5f9bbd2d21", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 49, "deletions": 53, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/b7bb67abd32ae15476cd40746cae7f9a96bc65da/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7bb67abd32ae15476cd40746cae7f9a96bc65da/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=b7bb67abd32ae15476cd40746cae7f9a96bc65da", "patch": "@@ -64,11 +64,11 @@ impl Emitter for EmitterWriter {\n             }\n         }\n \n-        if !db.handler.flags.external_macro_backtrace {\n-            self.fix_multispans_in_std_macros(&mut primary_span, &mut children);\n-        }\n+        self.fix_multispans_in_std_macros(&mut primary_span,\n+                                          &mut children,\n+                                          db.handler.flags.external_macro_backtrace);\n+\n         self.emit_messages_default(&db.level,\n-                                   db.handler.flags.external_macro_backtrace,\n                                    &db.styled_message(),\n                                    &db.code,\n                                    &primary_span,\n@@ -726,7 +726,9 @@ impl EmitterWriter {\n     // This \"fixes\" MultiSpans that contain Spans that are pointing to locations inside of\n     // <*macros>. Since these locations are often difficult to read, we move these Spans from\n     // <*macros> to their corresponding use site.\n-    fn fix_multispan_in_std_macros(&mut self, span: &mut MultiSpan) -> bool {\n+    fn fix_multispan_in_std_macros(&mut self,\n+                                   span: &mut MultiSpan,\n+                                   always_backtrace: bool) -> bool {\n         let mut spans_updated = false;\n \n         if let Some(ref cm) = self.cm {\n@@ -739,22 +741,45 @@ impl EmitterWriter {\n                     continue;\n                 }\n                 let call_sp = cm.call_span_if_macro(*sp);\n-                if call_sp != *sp {\n-                    before_after.push((sp.clone(), call_sp));\n+                if call_sp != *sp && !always_backtrace {\n+                    before_after.push((*sp, call_sp));\n                 }\n-                for trace in sp.macro_backtrace().iter().rev() {\n+                let backtrace_len = sp.macro_backtrace().len();\n+                for (i, trace) in sp.macro_backtrace().iter().rev().enumerate() {\n                     // Only show macro locations that are local\n                     // and display them like a span_note\n                     if let Some(def_site) = trace.def_site_span {\n                         if def_site == DUMMY_SP {\n                             continue;\n                         }\n+                        if always_backtrace {\n+                            new_labels.push((def_site,\n+                                             format!(\"in this expansion of `{}`{}\",\n+                                                     trace.macro_decl_name,\n+                                                     if backtrace_len > 2 {\n+                                                         // if backtrace_len == 1 it'll be pointed\n+                                                         // at by \"in this macro invocation\"\n+                                                         format!(\" (#{})\", i + 1)\n+                                                     } else {\n+                                                         \"\".to_string()\n+                                                     })));\n+                        }\n                         // Check to make sure we're not in any <*macros>\n                         if !cm.span_to_filename(def_site).contains(\"macros>\") &&\n-                           !trace.macro_decl_name.starts_with(\"#[\") {\n+                           !trace.macro_decl_name.starts_with(\"#[\") ||\n+                           always_backtrace {\n                             new_labels.push((trace.call_site,\n-                                             \"in this macro invocation\".to_string()));\n-                            break;\n+                                             format!(\"in this macro invocation{}\",\n+                                                     if backtrace_len > 2 && always_backtrace {\n+                                                         // only specify order when the macro\n+                                                         // backtrace is multiple levels deep\n+                                                         format!(\" (#{})\", i + 1)\n+                                                     } else {\n+                                                         \"\".to_string()\n+                                                     })));\n+                            if !always_backtrace {\n+                                break;\n+                            }\n                         }\n                     }\n                 }\n@@ -766,7 +791,9 @@ impl EmitterWriter {\n                 if sp_label.span == DUMMY_SP {\n                     continue;\n                 }\n-                if cm.span_to_filename(sp_label.span.clone()).contains(\"macros>\") {\n+                if cm.span_to_filename(sp_label.span.clone()).contains(\"macros>\") &&\n+                    !always_backtrace\n+                {\n                     let v = sp_label.span.macro_backtrace();\n                     if let Some(use_site) = v.last() {\n                         before_after.push((sp_label.span.clone(), use_site.call_site.clone()));\n@@ -788,18 +815,19 @@ impl EmitterWriter {\n     // will change the span to point at the use site.\n     fn fix_multispans_in_std_macros(&mut self,\n                                     span: &mut MultiSpan,\n-                                    children: &mut Vec<SubDiagnostic>) {\n-        let mut spans_updated = self.fix_multispan_in_std_macros(span);\n+                                    children: &mut Vec<SubDiagnostic>,\n+                                    backtrace: bool) {\n+        let mut spans_updated = self.fix_multispan_in_std_macros(span, backtrace);\n         for child in children.iter_mut() {\n-            spans_updated |= self.fix_multispan_in_std_macros(&mut child.span);\n+            spans_updated |= self.fix_multispan_in_std_macros(&mut child.span, backtrace);\n         }\n         if spans_updated {\n             children.push(SubDiagnostic {\n                 level: Level::Note,\n                 message: vec![\n-                    ([\"this error originates in a macro outside of the current crate\",\n-                      \"(in Nightly builds, run with -Z external-macro-backtrace for more info)\"]\n-                      .join(\" \"),\n+                    (\"this error originates in a macro outside of the current crate \\\n+                      (in Nightly builds, run with -Z external-macro-backtrace \\\n+                       for more info)\".to_string(),\n                      Style::NoStyle),\n                 ],\n                 span: MultiSpan::new(),\n@@ -861,7 +889,7 @@ impl EmitterWriter {\n         //       (\"see?\", Style::Highlight),\n         //     ];\n         //\n-        // the expected output on a note is (* surround the  highlighted text)\n+        // the expected output on a note is (* surround the highlighted text)\n         //\n         //        = note: highlighted multiline\n         //                string to\n@@ -889,7 +917,6 @@ impl EmitterWriter {\n                             msg: &Vec<(String, Style)>,\n                             code: &Option<DiagnosticId>,\n                             level: &Level,\n-                            external_macro_backtrace: bool,\n                             max_line_num_len: usize,\n                             is_secondary: bool)\n                             -> io::Result<()> {\n@@ -1087,18 +1114,13 @@ impl EmitterWriter {\n             }\n         }\n \n-        if external_macro_backtrace {\n-            if let Some(ref primary_span) = msp.primary_span().as_ref() {\n-                self.render_macro_backtrace_old_school(primary_span, &mut buffer)?;\n-            }\n-        }\n-\n         // final step: take our styled buffer, render it, then output it\n         emit_to_destination(&buffer.render(), level, &mut self.dst, self.short_message)?;\n \n         Ok(())\n \n     }\n+\n     fn emit_suggestion_default(&mut self,\n                                suggestion: &CodeSuggestion,\n                                level: &Level,\n@@ -1182,9 +1204,9 @@ impl EmitterWriter {\n         }\n         Ok(())\n     }\n+\n     fn emit_messages_default(&mut self,\n                              level: &Level,\n-                             external_macro_backtrace: bool,\n                              message: &Vec<(String, Style)>,\n                              code: &Option<DiagnosticId>,\n                              span: &MultiSpan,\n@@ -1197,7 +1219,6 @@ impl EmitterWriter {\n                                         message,\n                                         code,\n                                         level,\n-                                        external_macro_backtrace,\n                                         max_line_num_len,\n                                         false) {\n             Ok(()) => {\n@@ -1219,7 +1240,6 @@ impl EmitterWriter {\n                                                         &child.styled_message(),\n                                                         &None,\n                                                         &child.level,\n-                                                        external_macro_backtrace,\n                                                         max_line_num_len,\n                                                         true) {\n                             Err(e) => panic!(\"failed to emit error: {}\", e),\n@@ -1248,30 +1268,6 @@ impl EmitterWriter {\n             }\n         }\n     }\n-\n-    fn render_macro_backtrace_old_school(&self,\n-                                         sp: &Span,\n-                                         buffer: &mut StyledBuffer) -> io::Result<()> {\n-        if let Some(ref cm) = self.cm {\n-            for trace in sp.macro_backtrace().iter().rev() {\n-                let line_offset = buffer.num_lines();\n-\n-                let mut diag_string =\n-                    format!(\"in this expansion of {}\", trace.macro_decl_name);\n-                if let Some(def_site_span) = trace.def_site_span {\n-                    diag_string.push_str(\n-                        &format!(\" (defined in {})\",\n-                            cm.span_to_filename(def_site_span)));\n-                }\n-                let snippet = cm.span_to_string(trace.call_site);\n-                buffer.append(line_offset, &format!(\"{} \", snippet), Style::NoStyle);\n-                buffer.append(line_offset, \"note\", Style::Level(Level::Note));\n-                buffer.append(line_offset, \": \", Style::NoStyle);\n-                buffer.append(line_offset, &diag_string, Style::OldSchoolNoteText);\n-            }\n-        }\n-        Ok(())\n-    }\n }\n \n fn draw_col_separator(buffer: &mut StyledBuffer, line: usize, col: usize) {"}, {"sha": "e4131dde8f7208500fc06b522e8d99789df0b90f", "filename": "src/test/ui/macro_backtrace/auxiliary/ping.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b7bb67abd32ae15476cd40746cae7f9a96bc65da/src%2Ftest%2Fui%2Fmacro_backtrace%2Fauxiliary%2Fping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7bb67abd32ae15476cd40746cae7f9a96bc65da/src%2Ftest%2Fui%2Fmacro_backtrace%2Fauxiliary%2Fping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro_backtrace%2Fauxiliary%2Fping.rs?ref=b7bb67abd32ae15476cd40746cae7f9a96bc65da", "patch": "@@ -18,3 +18,24 @@ macro_rules! ping {\n     }\n }\n \n+#[macro_export]\n+macro_rules! deep {\n+    () => {\n+        foo!();\n+    }\n+}\n+\n+#[macro_export]\n+macro_rules! foo {\n+    () => {\n+        bar!();\n+    }\n+}\n+\n+#[macro_export]\n+macro_rules! bar {\n+    () => {\n+        ping!();\n+    }\n+}\n+"}, {"sha": "77faac17d1a2877d08238a2d43c62f8fa0f543e8", "filename": "src/test/ui/macro_backtrace/main.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b7bb67abd32ae15476cd40746cae7f9a96bc65da/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7bb67abd32ae15476cd40746cae7f9a96bc65da/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.rs?ref=b7bb67abd32ae15476cd40746cae7f9a96bc65da", "patch": "@@ -16,11 +16,14 @@\n \n // a local macro\n macro_rules! pong {\n-    () => { syntax error }; //~ ERROR expected one of\n+    () => { syntax error };\n     //~^ ERROR expected one of\n+    //~| ERROR expected one of\n+    //~| ERROR expected one of\n }\n \n fn main() {\n     pong!();\n     ping!();\n+    deep!();\n }"}, {"sha": "e543a9f5bc0c9a61f0aee52cd03e46c327f18bcd", "filename": "src/test/ui/macro_backtrace/main.stderr", "status": "modified", "additions": 78, "deletions": 8, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/b7bb67abd32ae15476cd40746cae7f9a96bc65da/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7bb67abd32ae15476cd40746cae7f9a96bc65da/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.stderr?ref=b7bb67abd32ae15476cd40746cae7f9a96bc65da", "patch": "@@ -1,17 +1,87 @@\n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n   --> $DIR/main.rs:19:20\n    |\n-19 |     () => { syntax error }; //~ ERROR expected one of\n-   |                    ^^^^^ expected one of 8 possible tokens here\n-$DIR/main.rs:24:5: 24:13 note: in this expansion of pong! (defined in $DIR/main.rs)\n+18 | / macro_rules! pong {\n+19 | |     () => { syntax error };\n+   | |                    ^^^^^ expected one of 8 possible tokens here\n+20 | |     //~^ ERROR expected one of\n+21 | |     //~| ERROR expected one of\n+22 | |     //~| ERROR expected one of\n+23 | | }\n+   | |_- in this expansion of `pong!`\n+...\n+26 |       pong!();\n+   |       -------- in this macro invocation\n \n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n   --> $DIR/main.rs:19:20\n    |\n-19 |     () => { syntax error }; //~ ERROR expected one of\n-   |                    ^^^^^ expected one of 8 possible tokens here\n-$DIR/main.rs:25:5: 25:13 note: in this expansion of ping! (defined in <ping macros>)\n-<ping macros>:1:11: 1:24 note: in this expansion of pong! (defined in $DIR/main.rs)\n+18 | / macro_rules! pong {\n+19 | |     () => { syntax error };\n+   | |                    ^^^^^ expected one of 8 possible tokens here\n+20 | |     //~^ ERROR expected one of\n+21 | |     //~| ERROR expected one of\n+22 | |     //~| ERROR expected one of\n+23 | | }\n+   | |_- in this expansion of `pong!`\n+...\n+27 |       ping!();\n+   |       -------- in this macro invocation\n+   | \n+  ::: <ping macros>\n+   |\n+1  |   (  ) => { pong ! (  ) ; }\n+   |   -------------------------\n+   |   |         |\n+   |   |         in this macro invocation\n+   |   in this expansion of `ping!`\n+\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n+  --> $DIR/main.rs:19:20\n+   |\n+18 | / macro_rules! pong {\n+19 | |     () => { syntax error };\n+   | |                    ^^^^^ expected one of 8 possible tokens here\n+20 | |     //~^ ERROR expected one of\n+21 | |     //~| ERROR expected one of\n+22 | |     //~| ERROR expected one of\n+23 | | }\n+   | |_- in this expansion of `pong!` (#5)\n+...\n+28 |       deep!();\n+   |       -------- in this macro invocation (#1)\n+   | \n+  ::: <deep macros>\n+   |\n+1  |   (  ) => { foo ! (  ) ; }\n+   |   ------------------------\n+   |   |         |\n+   |   |         in this macro invocation (#2)\n+   |   in this expansion of `deep!` (#1)\n+   | \n+  ::: <foo macros>\n+   |\n+1  |   (  ) => { bar ! (  ) ; }\n+   |   ------------------------\n+   |   |         |\n+   |   |         in this macro invocation (#3)\n+   |   in this expansion of `foo!` (#2)\n+   | \n+  ::: <bar macros>\n+   |\n+1  |   (  ) => { ping ! (  ) ; }\n+   |   -------------------------\n+   |   |         |\n+   |   |         in this macro invocation (#4)\n+   |   in this expansion of `bar!` (#3)\n+   | \n+  ::: <ping macros>\n+   |\n+1  |   (  ) => { pong ! (  ) ; }\n+   |   -------------------------\n+   |   |         |\n+   |   |         in this macro invocation (#5)\n+   |   in this expansion of `ping!` (#4)\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n "}]}