{"sha": "64a05f56c33d4754808ef85e634f72a9053c56fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0YTA1ZjU2YzMzZDQ3NTQ4MDhlZjg1ZTYzNGY3MmE5MDUzYzU2ZmQ=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-05-27T22:36:15Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-05-27T22:58:48Z"}, "message": "len_zero: skip ranges if feature `range_is_empty` is not enabled", "tree": {"sha": "d08e62253c067ea294ee183e78800f2ba8309c1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d08e62253c067ea294ee183e78800f2ba8309c1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64a05f56c33d4754808ef85e634f72a9053c56fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64a05f56c33d4754808ef85e634f72a9053c56fd", "html_url": "https://github.com/rust-lang/rust/commit/64a05f56c33d4754808ef85e634f72a9053c56fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64a05f56c33d4754808ef85e634f72a9053c56fd/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ea7cd165ad6705603852771bf82cc2fd6560db5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ea7cd165ad6705603852771bf82cc2fd6560db5", "html_url": "https://github.com/rust-lang/rust/commit/7ea7cd165ad6705603852771bf82cc2fd6560db5"}], "stats": {"total": 71, "additions": 70, "deletions": 1}, "files": [{"sha": "f5bfede75a76171a0deed70db698ce938b56b359", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/64a05f56c33d4754808ef85e634f72a9053c56fd/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a05f56c33d4754808ef85e634f72a9053c56fd/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=64a05f56c33d4754808ef85e634f72a9053c56fd", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{get_item_name, snippet_with_applicability, span_lint, span_lint_and_sugg, walk_ptrs_ty};\n+use crate::utils::{get_item_name, higher, snippet_with_applicability, span_lint, span_lint_and_sugg, walk_ptrs_ty};\n use rustc_ast::ast::LitKind;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n@@ -259,6 +259,17 @@ fn check_len(\n \n /// Checks if this type has an `is_empty` method.\n fn has_is_empty(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n+    /// Special case ranges until `range_is_empty` is stabilized. See issue 3807.\n+    fn should_skip_range(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n+        higher::range(cx, expr).map_or(false, |_| {\n+            !cx.tcx\n+                .features()\n+                .declared_lib_features\n+                .iter()\n+                .any(|(name, _)| name.as_str() == \"range_is_empty\")\n+        })\n+    }\n+\n     /// Gets an `AssocItem` and return true if it matches `is_empty(self)`.\n     fn is_is_empty(cx: &LateContext<'_, '_>, item: &ty::AssocItem) -> bool {\n         if let ty::AssocKind::Fn = item.kind {\n@@ -284,6 +295,10 @@ fn has_is_empty(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n         })\n     }\n \n+    if should_skip_range(cx, expr) {\n+        return false;\n+    }\n+\n     let ty = &walk_ptrs_ty(cx.tables.expr_ty(expr));\n     match ty.kind {\n         ty::Dynamic(ref tt, ..) => {"}, {"sha": "a29b832eb6019af0dda1ffc160fe49ebfac08f32", "filename": "tests/ui/len_zero.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64a05f56c33d4754808ef85e634f72a9053c56fd/tests%2Fui%2Flen_zero.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/64a05f56c33d4754808ef85e634f72a9053c56fd/tests%2Fui%2Flen_zero.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.fixed?ref=64a05f56c33d4754808ef85e634f72a9053c56fd", "patch": "@@ -141,3 +141,11 @@ fn main() {\n fn test_slice(b: &[u8]) {\n     if !b.is_empty() {}\n }\n+\n+mod issue_3807 {\n+    // Avoid suggesting changes to ranges if the user did not enable `range_is_empty`.\n+    // See https://github.com/rust-lang/rust/issues/48111#issuecomment-445132965\n+    fn no_suggestion() {\n+        let _ = (0..42).len() == 0;\n+    }\n+}"}, {"sha": "8fd0093f4fdbbc13e31205003209de35fa9a21df", "filename": "tests/ui/len_zero.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64a05f56c33d4754808ef85e634f72a9053c56fd/tests%2Fui%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a05f56c33d4754808ef85e634f72a9053c56fd/tests%2Fui%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.rs?ref=64a05f56c33d4754808ef85e634f72a9053c56fd", "patch": "@@ -141,3 +141,11 @@ fn main() {\n fn test_slice(b: &[u8]) {\n     if b.len() != 0 {}\n }\n+\n+mod issue_3807 {\n+    // Avoid suggesting changes to ranges if the user did not enable `range_is_empty`.\n+    // See https://github.com/rust-lang/rust/issues/48111#issuecomment-445132965\n+    fn no_suggestion() {\n+        let _ = (0..42).len() == 0;\n+    }\n+}"}, {"sha": "7da26f8ff4d477b9ab0cde400eb834b44ee24cde", "filename": "tests/ui/len_zero_ranges.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/64a05f56c33d4754808ef85e634f72a9053c56fd/tests%2Fui%2Flen_zero_ranges.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/64a05f56c33d4754808ef85e634f72a9053c56fd/tests%2Fui%2Flen_zero_ranges.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero_ranges.fixed?ref=64a05f56c33d4754808ef85e634f72a9053c56fd", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+#![feature(range_is_empty)]\n+#![warn(clippy::len_zero)]\n+#![allow(unused)]\n+\n+mod issue_3807 {\n+    // With the feature enabled, `is_empty` should be suggested\n+    fn suggestion_is_fine() {\n+        let _ = (0..42).is_empty();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "be7b4244bc06c4d27463f35de2181ca23ab2c20a", "filename": "tests/ui/len_zero_ranges.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/64a05f56c33d4754808ef85e634f72a9053c56fd/tests%2Fui%2Flen_zero_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a05f56c33d4754808ef85e634f72a9053c56fd/tests%2Fui%2Flen_zero_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero_ranges.rs?ref=64a05f56c33d4754808ef85e634f72a9053c56fd", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+#![feature(range_is_empty)]\n+#![warn(clippy::len_zero)]\n+#![allow(unused)]\n+\n+mod issue_3807 {\n+    // With the feature enabled, `is_empty` should be suggested\n+    fn suggestion_is_fine() {\n+        let _ = (0..42).len() == 0;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "6e5fa41fb08a55c127f9bb7a8e34624498e018d5", "filename": "tests/ui/len_zero_ranges.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/64a05f56c33d4754808ef85e634f72a9053c56fd/tests%2Fui%2Flen_zero_ranges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64a05f56c33d4754808ef85e634f72a9053c56fd/tests%2Fui%2Flen_zero_ranges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero_ranges.stderr?ref=64a05f56c33d4754808ef85e634f72a9053c56fd", "patch": "@@ -0,0 +1,10 @@\n+error: length comparison to zero\n+  --> $DIR/len_zero_ranges.rs:10:17\n+   |\n+LL |         let _ = (0..42).len() == 0;\n+   |                 ^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `(0..42).is_empty()`\n+   |\n+   = note: `-D clippy::len-zero` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}