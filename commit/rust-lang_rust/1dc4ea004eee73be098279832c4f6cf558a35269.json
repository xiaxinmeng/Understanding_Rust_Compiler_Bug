{"sha": "1dc4ea004eee73be098279832c4f6cf558a35269", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYzRlYTAwNGVlZTczYmUwOTgyNzk4MzJjNGY2Y2Y1NThhMzUyNjk=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-05-31T15:54:15Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-05-31T22:12:12Z"}, "message": "bool: rm functions duplicating methods", "tree": {"sha": "634dbd5e21c4c8f9042aa34f9885b38747b05513", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/634dbd5e21c4c8f9042aa34f9885b38747b05513"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dc4ea004eee73be098279832c4f6cf558a35269", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dc4ea004eee73be098279832c4f6cf558a35269", "html_url": "https://github.com/rust-lang/rust/commit/1dc4ea004eee73be098279832c4f6cf558a35269", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dc4ea004eee73be098279832c4f6cf558a35269/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a30c000e8f5df73e3d2b60d94c536304d3a0eb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a30c000e8f5df73e3d2b60d94c536304d3a0eb0", "html_url": "https://github.com/rust-lang/rust/commit/2a30c000e8f5df73e3d2b60d94c536304d3a0eb0"}], "stats": {"total": 89, "additions": 39, "deletions": 50}, "files": [{"sha": "66a5bfa944f10870d93ba1ede4ad5983972be5f8", "filename": "src/libstd/bool.rs", "status": "modified", "additions": 38, "deletions": 45, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/1dc4ea004eee73be098279832c4f6cf558a35269/src%2Flibstd%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc4ea004eee73be098279832c4f6cf558a35269/src%2Flibstd%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbool.rs?ref=1dc4ea004eee73be098279832c4f6cf558a35269", "patch": "@@ -38,6 +38,7 @@ Finally, some inquries into the nature of truth: `is_true` and `is_false`.\n use cmp::{Eq, Ord, TotalOrd, Ordering};\n use option::{None, Option, Some};\n use from_str::FromStr;\n+use to_str::ToStr;\n \n /**\n * Negation of a boolean value.\n@@ -129,44 +130,6 @@ pub fn xor(a: bool, b: bool) -> bool { (a && !b) || (!a && b) }\n */\n pub fn implies(a: bool, b: bool) -> bool { !a || b }\n \n-/**\n-* Equality between two boolean values.\n-*\n-* Two booleans are equal if they have the same value.\n-*\n-* # Examples\n-*\n-* ~~~ {.rust}\n-* rusti> std::bool::eq(false, true)\n-* false\n-* ~~~\n-*\n-* ~~~ {.rust}\n-* rusti> std::bool::eq(false, false)\n-* true\n-* ~~~\n-*/\n-pub fn eq(a: bool, b: bool) -> bool { a == b }\n-\n-/**\n-* Non-equality between two boolean values.\n-*\n-* Two booleans are not equal if they have different values.\n-*\n-* # Examples\n-*\n-* ~~~ {.rust}\n-* rusti> std::bool::ne(false, true)\n-* true\n-* ~~~\n-*\n-* ~~~ {.rust}\n-* rusti> std::bool::ne(false, false)\n-* false\n-* ~~~\n-*/\n-pub fn ne(a: bool, b: bool) -> bool { a != b }\n-\n /**\n * Is a given boolean value true?\n *\n@@ -239,16 +202,21 @@ impl FromStr for bool {\n * # Examples\n *\n * ~~~ {.rust}\n-* rusti> std::bool::to_str(true)\n+* rusti> true.to_str()\n * \"true\"\n * ~~~\n *\n * ~~~ {.rust}\n-* rusti> std::bool::to_str(false)\n+* rusti> false.to_str()\n * \"false\"\n * ~~~\n */\n-pub fn to_str(v: bool) -> ~str { if v { ~\"true\" } else { ~\"false\" } }\n+impl ToStr for bool {\n+    #[inline(always)]\n+    fn to_str(&self) -> ~str {\n+        if *self { ~\"true\" } else { ~\"false\" }\n+    }\n+}\n \n /**\n * Iterates over all truth values, passing them to the given block.\n@@ -258,7 +226,7 @@ pub fn to_str(v: bool) -> ~str { if v { ~\"true\" } else { ~\"false\" } }\n * # Examples\n * ~~~\n * do std::bool::all_values |x: bool| {\n-*     println(std::bool::to_str(x));\n+*     println(x.to_str())\n * }\n * ~~~\n */\n@@ -303,6 +271,31 @@ impl TotalOrd for bool {\n     fn cmp(&self, other: &bool) -> Ordering { to_bit(*self).cmp(&to_bit(*other)) }\n }\n \n+/**\n+* Equality between two boolean values.\n+*\n+* Two booleans are equal if they have the same value.\n+*\n+* ~~~ {.rust}\n+* rusti> false.eq(&true)\n+* false\n+* ~~~\n+*\n+* ~~~ {.rust}\n+* rusti> false == false\n+* true\n+* ~~~\n+*\n+* ~~~ {.rust}\n+* rusti> false != true\n+* true\n+* ~~~\n+*\n+* ~~~ {.rust}\n+* rusti> false.ne(&false)\n+* false\n+* ~~~\n+*/\n #[cfg(not(test))]\n impl Eq for bool {\n     #[inline(always)]\n@@ -319,14 +312,14 @@ mod tests {\n     #[test]\n     fn test_bool_from_str() {\n         do all_values |v| {\n-            assert!(Some(v) == FromStr::from_str(to_str(v)))\n+            assert!(Some(v) == FromStr::from_str(v.to_str()))\n         }\n     }\n \n     #[test]\n     fn test_bool_to_str() {\n-        assert_eq!(to_str(false), ~\"false\");\n-        assert_eq!(to_str(true), ~\"true\");\n+        assert_eq!(false.to_str(), ~\"false\");\n+        assert_eq!(true.to_str(), ~\"true\");\n     }\n \n     #[test]"}, {"sha": "fecfdbf3b11df5cbf0ba3d819b2d6be0940c66bc", "filename": "src/libstd/to_str.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1dc4ea004eee73be098279832c4f6cf558a35269/src%2Flibstd%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc4ea004eee73be098279832c4f6cf558a35269/src%2Flibstd%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_str.rs?ref=1dc4ea004eee73be098279832c4f6cf558a35269", "patch": "@@ -34,10 +34,6 @@ pub trait ToStrConsume {\n     fn to_str_consume(self) -> ~str;\n }\n \n-impl ToStr for bool {\n-    #[inline(always)]\n-    fn to_str(&self) -> ~str { ::bool::to_str(*self) }\n-}\n impl ToStr for () {\n     #[inline(always)]\n     fn to_str(&self) -> ~str { ~\"()\" }"}, {"sha": "e218d3326eeefa75e3bbc5716f442a66f8d80eb6", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dc4ea004eee73be098279832c4f6cf558a35269/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc4ea004eee73be098279832c4f6cf558a35269/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=1dc4ea004eee73be098279832c4f6cf558a35269", "patch": "@@ -517,7 +517,7 @@ impl TyVisitor for my_visitor {\n     fn visit_nil(&self) -> bool { true }\n     fn visit_bool(&self) -> bool {\n         do self.get::<bool>() |b| {\n-            self.vals.push(bool::to_str(b));\n+            self.vals.push(b.to_str());\n         };\n         true\n     }"}]}