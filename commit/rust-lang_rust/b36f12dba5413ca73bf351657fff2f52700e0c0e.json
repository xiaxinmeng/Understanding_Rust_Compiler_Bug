{"sha": "b36f12dba5413ca73bf351657fff2f52700e0c0e", "node_id": "C_kwDOAAsO6NoAKGIzNmYxMmRiYTU0MTNjYTczYmYzNTE2NTdmZmYyZjUyNzAwZTBjMGU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-21T13:56:06Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-21T14:05:21Z"}, "message": "Simplify", "tree": {"sha": "40baf49598233d09fd28e757e3182f9a3a0b36b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40baf49598233d09fd28e757e3182f9a3a0b36b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b36f12dba5413ca73bf351657fff2f52700e0c0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b36f12dba5413ca73bf351657fff2f52700e0c0e", "html_url": "https://github.com/rust-lang/rust/commit/b36f12dba5413ca73bf351657fff2f52700e0c0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b36f12dba5413ca73bf351657fff2f52700e0c0e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d6e0b8f21385d008eb6161b56a98da2eac141a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d6e0b8f21385d008eb6161b56a98da2eac141a2", "html_url": "https://github.com/rust-lang/rust/commit/6d6e0b8f21385d008eb6161b56a98da2eac141a2"}], "stats": {"total": 296, "additions": 112, "deletions": 184}, "files": [{"sha": "51befc698c053d210ea5d3fdf71e7acac121013e", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b36f12dba5413ca73bf351657fff2f52700e0c0e/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36f12dba5413ca73bf351657fff2f52700e0c0e/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=b36f12dba5413ca73bf351657fff2f52700e0c0e", "patch": "@@ -682,20 +682,7 @@ impl<'db> SemanticsImpl<'db> {\n     fn resolve_lifetime_param(&self, lifetime: &ast::Lifetime) -> Option<LifetimeParam> {\n         let text = lifetime.text();\n         let lifetime_param = lifetime.syntax().ancestors().find_map(|syn| {\n-            let gpl = match_ast! {\n-                match syn {\n-                    ast::Fn(it) => it.generic_param_list()?,\n-                    ast::TypeAlias(it) => it.generic_param_list()?,\n-                    ast::Struct(it) => it.generic_param_list()?,\n-                    ast::Enum(it) => it.generic_param_list()?,\n-                    ast::Union(it) => it.generic_param_list()?,\n-                    ast::Trait(it) => it.generic_param_list()?,\n-                    ast::Impl(it) => it.generic_param_list()?,\n-                    ast::WherePred(it) => it.generic_param_list()?,\n-                    ast::ForType(it) => it.generic_param_list()?,\n-                    _ => return None,\n-                }\n-            };\n+            let gpl = ast::DynGenericParamsOwner::cast(syn)?.generic_param_list()?;\n             gpl.lifetime_params()\n                 .find(|tp| tp.lifetime().as_ref().map(|lt| lt.text()).as_ref() == Some(&text))\n         })?;"}, {"sha": "047d97c90f02924098a12e56e32967f17b2c6305", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 105, "deletions": 153, "changes": 258, "blob_url": "https://github.com/rust-lang/rust/blob/b36f12dba5413ca73bf351657fff2f52700e0c0e/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36f12dba5413ca73bf351657fff2f52700e0c0e/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=b36f12dba5413ca73bf351657fff2f52700e0c0e", "patch": "@@ -3618,12 +3618,10 @@ impl AstNode for DynArgListOwner {\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        let res = match syntax.kind() {\n-            CALL_EXPR => DynArgListOwner { syntax },\n-            METHOD_CALL_EXPR => DynArgListOwner { syntax },\n-            _ => return None,\n-        };\n-        Some(res)\n+        match syntax.kind() {\n+            CALL_EXPR | METHOD_CALL_EXPR => Some(DynArgListOwner { syntax }),\n+            _ => None,\n+        }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -3705,75 +3703,74 @@ impl AstNode for DynAttrsOwner {\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        let res = match syntax.kind() {\n-            MACRO_CALL => DynAttrsOwner { syntax },\n-            SOURCE_FILE => DynAttrsOwner { syntax },\n-            CONST => DynAttrsOwner { syntax },\n-            ENUM => DynAttrsOwner { syntax },\n-            EXTERN_BLOCK => DynAttrsOwner { syntax },\n-            EXTERN_CRATE => DynAttrsOwner { syntax },\n-            FN => DynAttrsOwner { syntax },\n-            IMPL => DynAttrsOwner { syntax },\n-            MACRO_RULES => DynAttrsOwner { syntax },\n-            MACRO_DEF => DynAttrsOwner { syntax },\n-            MODULE => DynAttrsOwner { syntax },\n-            STATIC => DynAttrsOwner { syntax },\n-            STRUCT => DynAttrsOwner { syntax },\n-            TRAIT => DynAttrsOwner { syntax },\n-            TYPE_ALIAS => DynAttrsOwner { syntax },\n-            UNION => DynAttrsOwner { syntax },\n-            USE => DynAttrsOwner { syntax },\n-            ITEM_LIST => DynAttrsOwner { syntax },\n-            BLOCK_EXPR => DynAttrsOwner { syntax },\n-            SELF_PARAM => DynAttrsOwner { syntax },\n-            PARAM => DynAttrsOwner { syntax },\n-            RECORD_FIELD => DynAttrsOwner { syntax },\n-            TUPLE_FIELD => DynAttrsOwner { syntax },\n-            VARIANT => DynAttrsOwner { syntax },\n-            ASSOC_ITEM_LIST => DynAttrsOwner { syntax },\n-            EXTERN_ITEM_LIST => DynAttrsOwner { syntax },\n-            CONST_PARAM => DynAttrsOwner { syntax },\n-            LIFETIME_PARAM => DynAttrsOwner { syntax },\n-            TYPE_PARAM => DynAttrsOwner { syntax },\n-            EXPR_STMT => DynAttrsOwner { syntax },\n-            LET_STMT => DynAttrsOwner { syntax },\n-            ARRAY_EXPR => DynAttrsOwner { syntax },\n-            AWAIT_EXPR => DynAttrsOwner { syntax },\n-            BIN_EXPR => DynAttrsOwner { syntax },\n-            BOX_EXPR => DynAttrsOwner { syntax },\n-            BREAK_EXPR => DynAttrsOwner { syntax },\n-            CALL_EXPR => DynAttrsOwner { syntax },\n-            CAST_EXPR => DynAttrsOwner { syntax },\n-            CLOSURE_EXPR => DynAttrsOwner { syntax },\n-            CONTINUE_EXPR => DynAttrsOwner { syntax },\n-            EFFECT_EXPR => DynAttrsOwner { syntax },\n-            FIELD_EXPR => DynAttrsOwner { syntax },\n-            FOR_EXPR => DynAttrsOwner { syntax },\n-            IF_EXPR => DynAttrsOwner { syntax },\n-            INDEX_EXPR => DynAttrsOwner { syntax },\n-            LITERAL => DynAttrsOwner { syntax },\n-            LOOP_EXPR => DynAttrsOwner { syntax },\n-            MATCH_EXPR => DynAttrsOwner { syntax },\n-            METHOD_CALL_EXPR => DynAttrsOwner { syntax },\n-            PAREN_EXPR => DynAttrsOwner { syntax },\n-            PATH_EXPR => DynAttrsOwner { syntax },\n-            PREFIX_EXPR => DynAttrsOwner { syntax },\n-            RANGE_EXPR => DynAttrsOwner { syntax },\n-            REF_EXPR => DynAttrsOwner { syntax },\n-            RETURN_EXPR => DynAttrsOwner { syntax },\n-            TRY_EXPR => DynAttrsOwner { syntax },\n-            TUPLE_EXPR => DynAttrsOwner { syntax },\n-            WHILE_EXPR => DynAttrsOwner { syntax },\n-            YIELD_EXPR => DynAttrsOwner { syntax },\n-            RECORD_EXPR_FIELD_LIST => DynAttrsOwner { syntax },\n-            RECORD_EXPR_FIELD => DynAttrsOwner { syntax },\n-            MATCH_ARM_LIST => DynAttrsOwner { syntax },\n-            MATCH_ARM => DynAttrsOwner { syntax },\n-            IDENT_PAT => DynAttrsOwner { syntax },\n-            RECORD_PAT_FIELD => DynAttrsOwner { syntax },\n-            _ => return None,\n-        };\n-        Some(res)\n+        match syntax.kind() {\n+            MACRO_CALL\n+            | SOURCE_FILE\n+            | CONST\n+            | ENUM\n+            | EXTERN_BLOCK\n+            | EXTERN_CRATE\n+            | FN\n+            | IMPL\n+            | MACRO_RULES\n+            | MACRO_DEF\n+            | MODULE\n+            | STATIC\n+            | STRUCT\n+            | TRAIT\n+            | TYPE_ALIAS\n+            | UNION\n+            | USE\n+            | ITEM_LIST\n+            | BLOCK_EXPR\n+            | SELF_PARAM\n+            | PARAM\n+            | RECORD_FIELD\n+            | TUPLE_FIELD\n+            | VARIANT\n+            | ASSOC_ITEM_LIST\n+            | EXTERN_ITEM_LIST\n+            | CONST_PARAM\n+            | LIFETIME_PARAM\n+            | TYPE_PARAM\n+            | EXPR_STMT\n+            | LET_STMT\n+            | ARRAY_EXPR\n+            | AWAIT_EXPR\n+            | BIN_EXPR\n+            | BOX_EXPR\n+            | BREAK_EXPR\n+            | CALL_EXPR\n+            | CAST_EXPR\n+            | CLOSURE_EXPR\n+            | CONTINUE_EXPR\n+            | EFFECT_EXPR\n+            | FIELD_EXPR\n+            | FOR_EXPR\n+            | IF_EXPR\n+            | INDEX_EXPR\n+            | LITERAL\n+            | LOOP_EXPR\n+            | MATCH_EXPR\n+            | METHOD_CALL_EXPR\n+            | PAREN_EXPR\n+            | PATH_EXPR\n+            | PREFIX_EXPR\n+            | RANGE_EXPR\n+            | REF_EXPR\n+            | RETURN_EXPR\n+            | TRY_EXPR\n+            | TUPLE_EXPR\n+            | WHILE_EXPR\n+            | YIELD_EXPR\n+            | RECORD_EXPR_FIELD_LIST\n+            | RECORD_EXPR_FIELD\n+            | MATCH_ARM_LIST\n+            | MATCH_ARM\n+            | IDENT_PAT\n+            | RECORD_PAT_FIELD => Some(DynAttrsOwner { syntax }),\n+            _ => None,\n+        }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -3791,17 +3788,12 @@ impl AstNode for DynGenericParamsOwner {\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        let res = match syntax.kind() {\n-            ENUM => DynGenericParamsOwner { syntax },\n-            FN => DynGenericParamsOwner { syntax },\n-            IMPL => DynGenericParamsOwner { syntax },\n-            STRUCT => DynGenericParamsOwner { syntax },\n-            TRAIT => DynGenericParamsOwner { syntax },\n-            TYPE_ALIAS => DynGenericParamsOwner { syntax },\n-            UNION => DynGenericParamsOwner { syntax },\n-            _ => return None,\n-        };\n-        Some(res)\n+        match syntax.kind() {\n+            ENUM | FN | IMPL | STRUCT | TRAIT | TYPE_ALIAS | UNION => {\n+                Some(DynGenericParamsOwner { syntax })\n+            }\n+            _ => None,\n+        }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -3819,13 +3811,10 @@ impl AstNode for DynLoopBodyOwner {\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        let res = match syntax.kind() {\n-            FOR_EXPR => DynLoopBodyOwner { syntax },\n-            LOOP_EXPR => DynLoopBodyOwner { syntax },\n-            WHILE_EXPR => DynLoopBodyOwner { syntax },\n-            _ => return None,\n-        };\n-        Some(res)\n+        match syntax.kind() {\n+            FOR_EXPR | LOOP_EXPR | WHILE_EXPR => Some(DynLoopBodyOwner { syntax }),\n+            _ => None,\n+        }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -3843,13 +3832,10 @@ impl AstNode for DynModuleItemOwner {\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        let res = match syntax.kind() {\n-            MACRO_ITEMS => DynModuleItemOwner { syntax },\n-            SOURCE_FILE => DynModuleItemOwner { syntax },\n-            ITEM_LIST => DynModuleItemOwner { syntax },\n-            _ => return None,\n-        };\n-        Some(res)\n+        match syntax.kind() {\n+            MACRO_ITEMS | SOURCE_FILE | ITEM_LIST => Some(DynModuleItemOwner { syntax }),\n+            _ => None,\n+        }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -3869,28 +3855,12 @@ impl AstNode for DynNameOwner {\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        let res = match syntax.kind() {\n-            CONST => DynNameOwner { syntax },\n-            ENUM => DynNameOwner { syntax },\n-            FN => DynNameOwner { syntax },\n-            MACRO_RULES => DynNameOwner { syntax },\n-            MACRO_DEF => DynNameOwner { syntax },\n-            MODULE => DynNameOwner { syntax },\n-            STATIC => DynNameOwner { syntax },\n-            STRUCT => DynNameOwner { syntax },\n-            TRAIT => DynNameOwner { syntax },\n-            TYPE_ALIAS => DynNameOwner { syntax },\n-            UNION => DynNameOwner { syntax },\n-            RENAME => DynNameOwner { syntax },\n-            SELF_PARAM => DynNameOwner { syntax },\n-            RECORD_FIELD => DynNameOwner { syntax },\n-            VARIANT => DynNameOwner { syntax },\n-            CONST_PARAM => DynNameOwner { syntax },\n-            TYPE_PARAM => DynNameOwner { syntax },\n-            IDENT_PAT => DynNameOwner { syntax },\n-            _ => return None,\n-        };\n-        Some(res)\n+        match syntax.kind() {\n+            CONST | ENUM | FN | MACRO_RULES | MACRO_DEF | MODULE | STATIC | STRUCT | TRAIT\n+            | TYPE_ALIAS | UNION | RENAME | SELF_PARAM | RECORD_FIELD | VARIANT | CONST_PARAM\n+            | TYPE_PARAM | IDENT_PAT => Some(DynNameOwner { syntax }),\n+            _ => None,\n+        }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -3908,16 +3878,12 @@ impl AstNode for DynTypeBoundsOwner {\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        let res = match syntax.kind() {\n-            ASSOC_TYPE_ARG => DynTypeBoundsOwner { syntax },\n-            TRAIT => DynTypeBoundsOwner { syntax },\n-            TYPE_ALIAS => DynTypeBoundsOwner { syntax },\n-            LIFETIME_PARAM => DynTypeBoundsOwner { syntax },\n-            TYPE_PARAM => DynTypeBoundsOwner { syntax },\n-            WHERE_PRED => DynTypeBoundsOwner { syntax },\n-            _ => return None,\n-        };\n-        Some(res)\n+        match syntax.kind() {\n+            ASSOC_TYPE_ARG | TRAIT | TYPE_ALIAS | LIFETIME_PARAM | TYPE_PARAM | WHERE_PRED => {\n+                Some(DynTypeBoundsOwner { syntax })\n+            }\n+            _ => None,\n+        }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -3938,27 +3904,13 @@ impl AstNode for DynVisibilityOwner {\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        let res = match syntax.kind() {\n-            CONST => DynVisibilityOwner { syntax },\n-            ENUM => DynVisibilityOwner { syntax },\n-            EXTERN_CRATE => DynVisibilityOwner { syntax },\n-            FN => DynVisibilityOwner { syntax },\n-            IMPL => DynVisibilityOwner { syntax },\n-            MACRO_RULES => DynVisibilityOwner { syntax },\n-            MACRO_DEF => DynVisibilityOwner { syntax },\n-            MODULE => DynVisibilityOwner { syntax },\n-            STATIC => DynVisibilityOwner { syntax },\n-            STRUCT => DynVisibilityOwner { syntax },\n-            TRAIT => DynVisibilityOwner { syntax },\n-            TYPE_ALIAS => DynVisibilityOwner { syntax },\n-            UNION => DynVisibilityOwner { syntax },\n-            USE => DynVisibilityOwner { syntax },\n-            RECORD_FIELD => DynVisibilityOwner { syntax },\n-            TUPLE_FIELD => DynVisibilityOwner { syntax },\n-            VARIANT => DynVisibilityOwner { syntax },\n-            _ => return None,\n-        };\n-        Some(res)\n+        match syntax.kind() {\n+            CONST | ENUM | EXTERN_CRATE | FN | IMPL | MACRO_RULES | MACRO_DEF | MODULE | STATIC\n+            | STRUCT | TRAIT | TYPE_ALIAS | UNION | USE | RECORD_FIELD | TUPLE_FIELD | VARIANT => {\n+                Some(DynVisibilityOwner { syntax })\n+            }\n+            _ => None,\n+        }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }"}, {"sha": "930e5ce74f77ebe174a053b01be4f7f6b0a0e87e", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b36f12dba5413ca73bf351657fff2f52700e0c0e/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36f12dba5413ca73bf351657fff2f52700e0c0e/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=b36f12dba5413ca73bf351657fff2f52700e0c0e", "patch": "@@ -572,16 +572,7 @@ impl ast::Variant {\n \n impl ast::Item {\n     pub fn generic_param_list(&self) -> Option<ast::GenericParamList> {\n-        match self {\n-            ast::Item::Enum(it) => it.generic_param_list(),\n-            ast::Item::Fn(it) => it.generic_param_list(),\n-            ast::Item::Impl(it) => it.generic_param_list(),\n-            ast::Item::Struct(it) => it.generic_param_list(),\n-            ast::Item::Trait(it) => it.generic_param_list(),\n-            ast::Item::TypeAlias(it) => it.generic_param_list(),\n-            ast::Item::Union(it) => it.generic_param_list(),\n-            _ => None,\n-        }\n+        ast::DynGenericParamsOwner::cast(self.syntax().clone())?.generic_param_list()\n     }\n }\n "}, {"sha": "08700cd5a8a70c538916da458fddba23207041b5", "filename": "crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b36f12dba5413ca73bf351657fff2f52700e0c0e/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36f12dba5413ca73bf351657fff2f52700e0c0e/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=b36f12dba5413ca73bf351657fff2f52700e0c0e", "patch": "@@ -250,13 +250,11 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: &AstSrc) -> String {\n                             }\n                         }\n                         fn cast(syntax: SyntaxNode) -> Option<Self> {\n-                            let res = match syntax.kind() {\n-                                #(\n-                                #kinds => #name { syntax },\n-                                )*\n-                                _ => return None,\n-                            };\n-                            Some(res)\n+                            match syntax.kind() {\n+                                #(#kinds)|* => Some(#name { syntax }),\n+                                _ => None,\n+                            }\n+\n                         }\n                         fn syntax(&self) -> &SyntaxNode {\n                             &self.syntax"}]}