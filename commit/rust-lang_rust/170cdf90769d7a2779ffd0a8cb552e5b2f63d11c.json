{"sha": "170cdf90769d7a2779ffd0a8cb552e5b2f63d11c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MGNkZjkwNzY5ZDdhMjc3OWZmZDBhOGNiNTUyZTViMmY2M2QxMWM=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-06-19T16:32:42Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-06-19T20:07:58Z"}, "message": "Shift bound variables correctly when using assoc type shorthand\n\nFixes #4885.\nFixes #4800.", "tree": {"sha": "d0930615d22a99de16b502ea99409cca5313c922", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0930615d22a99de16b502ea99409cca5313c922"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/170cdf90769d7a2779ffd0a8cb552e5b2f63d11c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/170cdf90769d7a2779ffd0a8cb552e5b2f63d11c", "html_url": "https://github.com/rust-lang/rust/commit/170cdf90769d7a2779ffd0a8cb552e5b2f63d11c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/170cdf90769d7a2779ffd0a8cb552e5b2f63d11c/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d4388f6bd02e6dda816028f0bdac7b39225ca0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d4388f6bd02e6dda816028f0bdac7b39225ca0b", "html_url": "https://github.com/rust-lang/rust/commit/1d4388f6bd02e6dda816028f0bdac7b39225ca0b"}], "stats": {"total": 94, "additions": 94, "deletions": 0}, "files": [{"sha": "d5154f436ee7e107cf483c8d3c8ef3ada5e35e0c", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/170cdf90769d7a2779ffd0a8cb552e5b2f63d11c/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/170cdf90769d7a2779ffd0a8cb552e5b2f63d11c/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=170cdf90769d7a2779ffd0a8cb552e5b2f63d11c", "patch": "@@ -467,6 +467,9 @@ impl Ty {\n                             }\n                             TypeParamLoweringMode::Variable => t.substs.clone(),\n                         };\n+                        // We need to shift in the bound vars, since\n+                        // associated_type_shorthand_candidates does not do that\n+                        let substs = substs.shift_bound_vars(ctx.in_binders);\n                         // FIXME handle type parameters on the segment\n                         return Some(Ty::Projection(ProjectionTy {\n                             associated_ty,"}, {"sha": "4da2e972bd2ed3ee89fe0d52c03250041b4adc3e", "filename": "crates/ra_hir_ty/src/tests/regression.rs", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/170cdf90769d7a2779ffd0a8cb552e5b2f63d11c/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/170cdf90769d7a2779ffd0a8cb552e5b2f63d11c/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=170cdf90769d7a2779ffd0a8cb552e5b2f63d11c", "patch": "@@ -693,3 +693,94 @@ fn check<T: PrimInt>(i: T) {\n     \"###\n     );\n }\n+\n+#[test]\n+fn issue_4885() {\n+    assert_snapshot!(\n+        infer(r#\"\n+#[lang = \"coerce_unsized\"]\n+pub trait CoerceUnsized<T> {}\n+\n+trait Future {\n+    type Output;\n+}\n+trait Foo<R> {\n+    type Bar;\n+}\n+fn foo<R, K>(key: &K) -> impl Future<Output = K::Bar>\n+where\n+    K: Foo<R>,\n+{\n+    bar(key)\n+}\n+fn bar<R, K>(key: &K) -> impl Future<Output = K::Bar>\n+where\n+    K: Foo<R>,\n+{\n+}\n+\"#),\n+        @r###\"\n+    137..140 'key': &K\n+    199..215 '{     ...key) }': impl Future<Output = <K as Foo<R>>::Bar>\n+    205..208 'bar': fn bar<R, K>(&K) -> impl Future<Output = <K as Foo<R>>::Bar>\n+    205..213 'bar(key)': impl Future<Output = <K as Foo<R>>::Bar>\n+    209..212 'key': &K\n+    229..232 'key': &K\n+    291..294 '{ }': ()\n+    \"###\n+    );\n+}\n+\n+#[test]\n+fn issue_4800() {\n+    assert_snapshot!(\n+        infer(r#\"\n+trait Debug {}\n+\n+struct Foo<T>;\n+\n+type E1<T> = (T, T, T);\n+type E2<T> = E1<E1<E1<(T, T, T)>>>;\n+\n+impl Debug for Foo<E2<()>> {}\n+\n+struct Request;\n+\n+pub trait Future {\n+    type Output;\n+}\n+\n+pub struct PeerSet<D>;\n+\n+impl<D> Service<Request> for PeerSet<D>\n+where\n+    D: Discover,\n+    D::Key: Debug,\n+{\n+    type Error = ();\n+    type Future = dyn Future<Output = Self::Error>;\n+\n+    fn call(&mut self) -> Self::Future {\n+        loop {}\n+    }\n+}\n+\n+pub trait Discover {\n+    type Key;\n+}\n+\n+pub trait Service<Request> {\n+    type Error;\n+    type Future: Future<Output = Self::Error>;\n+    fn call(&mut self) -> Self::Future;\n+}\n+\"#),\n+        @r###\"\n+    380..384 'self': &mut PeerSet<D>\n+    402..425 '{     ...     }': dyn Future<Output = ()>\n+    412..419 'loop {}': !\n+    417..419 '{}': ()\n+    576..580 'self': &mut Self\n+    \"###\n+    );\n+}"}]}