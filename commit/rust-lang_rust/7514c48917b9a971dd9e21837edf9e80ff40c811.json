{"sha": "7514c48917b9a971dd9e21837edf9e80ff40c811", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MTRjNDg5MTdiOWE5NzFkZDllMjE4MzdlZGY5ZTgwZmY0MGM4MTE=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-06T15:06:57Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-06T15:09:03Z"}, "message": "Factor out constructing a new wildcard pattern", "tree": {"sha": "8104d02cdb311363da5b376aef27b666bd57591b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8104d02cdb311363da5b376aef27b666bd57591b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7514c48917b9a971dd9e21837edf9e80ff40c811", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7514c48917b9a971dd9e21837edf9e80ff40c811", "html_url": "https://github.com/rust-lang/rust/commit/7514c48917b9a971dd9e21837edf9e80ff40c811", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7514c48917b9a971dd9e21837edf9e80ff40c811/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "816aee2501812c9e910c962c052a7166a37aa289", "url": "https://api.github.com/repos/rust-lang/rust/commits/816aee2501812c9e910c962c052a7166a37aa289", "html_url": "https://github.com/rust-lang/rust/commit/816aee2501812c9e910c962c052a7166a37aa289"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "495c6de0f5ae97bee54320030ff4e46b276b6725", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7514c48917b9a971dd9e21837edf9e80ff40c811/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7514c48917b9a971dd9e21837edf9e80ff40c811/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=7514c48917b9a971dd9e21837edf9e80ff40c811", "patch": "@@ -780,11 +780,7 @@ impl<'tcx> Constructor<'tcx> {\n         cx: &MatchCheckCtxt<'a, 'tcx>,\n         ty: Ty<'tcx>,\n     ) -> impl Iterator<Item = Pat<'tcx>> + DoubleEndedIterator {\n-        constructor_sub_pattern_tys(cx, self, ty).into_iter().map(|ty| Pat {\n-            ty,\n-            span: DUMMY_SP,\n-            kind: box PatKind::Wild,\n-        })\n+        constructor_sub_pattern_tys(cx, self, ty).into_iter().map(Pat::wildcard_from_ty)\n     }\n \n     /// This computes the arity of a constructor. The arity of a constructor\n@@ -862,7 +858,7 @@ impl<'tcx> Constructor<'tcx> {\n                 VarLenSlice(prefix_len, _suffix_len) => {\n                     let prefix = subpatterns.by_ref().take(*prefix_len as usize).collect();\n                     let suffix = subpatterns.collect();\n-                    let wild = Pat { ty, span: DUMMY_SP, kind: Box::new(PatKind::Wild) };\n+                    let wild = Pat::wildcard_from_ty(ty);\n                     PatKind::Slice { prefix, slice: Some(wild), suffix }\n                 }\n                 _ => bug!(\"bad slice pattern {:?} {:?}\", self, ty),\n@@ -931,7 +927,7 @@ impl<'tcx> Usefulness<'tcx> {\n     fn apply_wildcard(self, ty: Ty<'tcx>) -> Self {\n         match self {\n             UsefulWithWitness(witnesses) => {\n-                let wild = Pat { ty, span: DUMMY_SP, kind: box PatKind::Wild };\n+                let wild = Pat::wildcard_from_ty(ty);\n                 UsefulWithWitness(\n                     witnesses\n                         .into_iter()"}, {"sha": "a63a9a687d8d3a419f083ccf52adad885c615373", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7514c48917b9a971dd9e21837edf9e80ff40c811/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7514c48917b9a971dd9e21837edf9e80ff40c811/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=7514c48917b9a971dd9e21837edf9e80ff40c811", "patch": "@@ -18,7 +18,7 @@ use rustc::hir::{self, Pat};\n \n use std::slice;\n \n-use syntax_pos::{MultiSpan, Span, DUMMY_SP};\n+use syntax_pos::{MultiSpan, Span};\n \n crate fn check_match(tcx: TyCtxt<'_>, def_id: DefId) {\n     let body_id = match tcx.hir().as_local_hir_id(def_id) {\n@@ -491,7 +491,7 @@ fn check_not_useful(\n     matrix: &Matrix<'_, 'tcx>,\n     hir_id: HirId,\n ) -> Result<(), Vec<super::Pat<'tcx>>> {\n-    let wild_pattern = super::Pat { ty, span: DUMMY_SP, kind: box PatKind::Wild };\n+    let wild_pattern = super::Pat::wildcard_from_ty(ty);\n     match is_useful(cx, matrix, &PatStack::from_pattern(&wild_pattern), ConstructWitness, hir_id) {\n         NotUseful => Ok(()), // This is good, wildcard pattern isn't reachable.\n         UsefulWithWitness(pats) => Err(if pats.is_empty() {"}, {"sha": "9e9f5f8fa90946fec1f8258a717b8c88c37395bc", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7514c48917b9a971dd9e21837edf9e80ff40c811/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7514c48917b9a971dd9e21837edf9e80ff40c811/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=7514c48917b9a971dd9e21837edf9e80ff40c811", "patch": "@@ -26,7 +26,7 @@ use rustc_index::vec::Idx;\n use std::cmp::Ordering;\n use std::fmt;\n use syntax::ast;\n-use syntax_pos::Span;\n+use syntax_pos::{Span, DUMMY_SP};\n \n #[derive(Clone, Debug)]\n pub enum PatternError {\n@@ -55,6 +55,11 @@ pub struct Pat<'tcx> {\n     pub kind: Box<PatKind<'tcx>>,\n }\n \n+impl<'tcx> Pat<'tcx> {\n+    pub(crate) fn wildcard_from_ty(ty: Ty<'tcx>) -> Self {\n+        Pat { ty, span: DUMMY_SP, kind: Box::new(PatKind::Wild) }\n+    }\n+}\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n pub struct PatTyProj<'tcx> {"}]}