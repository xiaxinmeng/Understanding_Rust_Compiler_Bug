{"sha": "62dad457bc73804891c6ac9a31f90de19cbb59a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZGFkNDU3YmM3MzgwNDg5MWM2YWM5YTMxZjkwZGUxOWNiYjU5YTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-03T19:07:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-03T19:07:38Z"}, "message": "Auto merge of #73819 - euclio:rustdoc-summaries, r=jyn514,GuillaumeGomez\n\nrustdoc: do not use plain summary for trait impls\n\nFixes #38386.\nFixes #48332.\nFixes #49430.\nFixes #62741.\nFixes #73474.\n\nUnfortunately this is not quite ready to go because the newly-working links trigger a bunch of linkcheck failures. The failures are tough to fix because the links are resolved relative to the implementor, which could be anywhere in the module hierarchy.\n\n(In the current docs, these links end up rendering as uninterpreted markdown syntax, so I don't think these failures are any worse than the status quo. It might be acceptable to just add them to the linkchecker whitelist.)\n\nIdeally this could be fixed with intra-doc links ~~but it isn't working for me: I am currently investigating if it's possible to solve it this way.~~ Opened #73829.\n\nEDIT: This is now ready!", "tree": {"sha": "5943cae017c9a53fb331fadd3525091d92fad72f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5943cae017c9a53fb331fadd3525091d92fad72f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62dad457bc73804891c6ac9a31f90de19cbb59a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62dad457bc73804891c6ac9a31f90de19cbb59a3", "html_url": "https://github.com/rust-lang/rust/commit/62dad457bc73804891c6ac9a31f90de19cbb59a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62dad457bc73804891c6ac9a31f90de19cbb59a3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3edf11cf811707cde49b30a80896c24189649d95", "url": "https://api.github.com/repos/rust-lang/rust/commits/3edf11cf811707cde49b30a80896c24189649d95", "html_url": "https://github.com/rust-lang/rust/commit/3edf11cf811707cde49b30a80896c24189649d95"}, {"sha": "98232ece14bdd68aeac3d761039d9a7c88c30b3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/98232ece14bdd68aeac3d761039d9a7c88c30b3f", "html_url": "https://github.com/rust-lang/rust/commit/98232ece14bdd68aeac3d761039d9a7c88c30b3f"}], "stats": {"total": 234, "additions": 152, "deletions": 82}, "files": [{"sha": "48b7f2739eeb29b9ac47958bdb14d13bf3acf06d", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62dad457bc73804891c6ac9a31f90de19cbb59a3/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62dad457bc73804891c6ac9a31f90de19cbb59a3/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=62dad457bc73804891c6ac9a31f90de19cbb59a3", "patch": "@@ -168,8 +168,6 @@ pub trait Write {\n     /// This method should generally not be invoked manually, but rather through\n     /// the [`write!`] macro itself.\n     ///\n-    /// [`write!`]: ../../std/macro.write.html\n-    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "f50807116bd096b9eee8798024a279015ba00dfd", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62dad457bc73804891c6ac9a31f90de19cbb59a3/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62dad457bc73804891c6ac9a31f90de19cbb59a3/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=62dad457bc73804891c6ac9a31f90de19cbb59a3", "patch": "@@ -148,7 +148,7 @@ pub trait DoubleEndedIterator: Iterator {\n     /// This is the reverse version of [`try_fold()`]: it takes elements\n     /// starting from the back of the iterator.\n     ///\n-    /// [`try_fold()`]: trait.Iterator.html#method.try_fold\n+    /// [`try_fold()`]: Iterator::try_fold\n     ///\n     /// # Examples\n     ///\n@@ -213,7 +213,7 @@ pub trait DoubleEndedIterator: Iterator {\n     /// Folding is useful whenever you have a collection of something, and want\n     /// to produce a single value from it.\n     ///\n-    /// [`fold()`]: trait.Iterator.html#method.fold\n+    /// [`fold()`]: Iterator::fold\n     ///\n     /// # Examples\n     ///"}, {"sha": "503f015e76a68cc40b7bc0ba5868021c7ba1eae7", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62dad457bc73804891c6ac9a31f90de19cbb59a3/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62dad457bc73804891c6ac9a31f90de19cbb59a3/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=62dad457bc73804891c6ac9a31f90de19cbb59a3", "patch": "@@ -3319,7 +3319,7 @@ pub unsafe trait SliceIndex<T: ?Sized>: private_slice_index::Sealed {\n     /// Calling this method with an out-of-bounds index or a dangling `slice` pointer\n     /// is *[undefined behavior]* even if the resulting reference is not used.\n     ///\n-    /// [undefined behavior]: ../../reference/behavior-considered-undefined.html\n+    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n     #[unstable(feature = \"slice_index_methods\", issue = \"none\")]\n     unsafe fn get_unchecked(self, slice: *const T) -> *const Self::Output;\n \n@@ -3328,7 +3328,7 @@ pub unsafe trait SliceIndex<T: ?Sized>: private_slice_index::Sealed {\n     /// Calling this method with an out-of-bounds index or a dangling `slice` pointer\n     /// is *[undefined behavior]* even if the resulting reference is not used.\n     ///\n-    /// [undefined behavior]: ../../reference/behavior-considered-undefined.html\n+    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n     #[unstable(feature = \"slice_index_methods\", issue = \"none\")]\n     unsafe fn get_unchecked_mut(self, slice: *mut T) -> *mut Self::Output;\n "}, {"sha": "14719a9be5e8a24be91b93c1d54a02de432e6b2d", "filename": "library/std/src/os/linux/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62dad457bc73804891c6ac9a31f90de19cbb59a3/library%2Fstd%2Fsrc%2Fos%2Flinux%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62dad457bc73804891c6ac9a31f90de19cbb59a3/library%2Fstd%2Fsrc%2Fos%2Flinux%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Ffs.rs?ref=62dad457bc73804891c6ac9a31f90de19cbb59a3", "patch": "@@ -196,7 +196,7 @@ pub trait MetadataExt {\n     fn st_atime(&self) -> i64;\n     /// Returns the last access time of the file, in nanoseconds since [`st_atime`].\n     ///\n-    /// [`st_atime`]: #tymethod.st_atime\n+    /// [`st_atime`]: Self::st_atime\n     ///\n     /// # Examples\n     ///\n@@ -232,7 +232,7 @@ pub trait MetadataExt {\n     fn st_mtime(&self) -> i64;\n     /// Returns the last modification time of the file, in nanoseconds since [`st_mtime`].\n     ///\n-    /// [`st_mtime`]: #tymethod.st_mtime\n+    /// [`st_mtime`]: Self::st_mtime\n     ///\n     /// # Examples\n     ///\n@@ -268,7 +268,7 @@ pub trait MetadataExt {\n     fn st_ctime(&self) -> i64;\n     /// Returns the last status change time of the file, in nanoseconds since [`st_ctime`].\n     ///\n-    /// [`st_ctime`]: #tymethod.st_ctime\n+    /// [`st_ctime`]: Self::st_ctime\n     ///\n     /// # Examples\n     ///"}, {"sha": "0f179c8b837dd8708a584aa45338c38770ec9c07", "filename": "library/std/src/os/redox/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62dad457bc73804891c6ac9a31f90de19cbb59a3/library%2Fstd%2Fsrc%2Fos%2Fredox%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62dad457bc73804891c6ac9a31f90de19cbb59a3/library%2Fstd%2Fsrc%2Fos%2Fredox%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fredox%2Ffs.rs?ref=62dad457bc73804891c6ac9a31f90de19cbb59a3", "patch": "@@ -200,7 +200,7 @@ pub trait MetadataExt {\n     fn st_atime(&self) -> i64;\n     /// Returns the last access time of the file, in nanoseconds since [`st_atime`].\n     ///\n-    /// [`st_atime`]: #tymethod.st_atime\n+    /// [`st_atime`]: Self::st_atime\n     ///\n     /// # Examples\n     ///\n@@ -236,7 +236,7 @@ pub trait MetadataExt {\n     fn st_mtime(&self) -> i64;\n     /// Returns the last modification time of the file, in nanoseconds since [`st_mtime`].\n     ///\n-    /// [`st_mtime`]: #tymethod.st_mtime\n+    /// [`st_mtime`]: Self::st_mtime\n     ///\n     /// # Examples\n     ///\n@@ -272,7 +272,7 @@ pub trait MetadataExt {\n     fn st_ctime(&self) -> i64;\n     /// Returns the last status change time of the file, in nanoseconds since [`st_ctime`].\n     ///\n-    /// [`st_ctime`]: #tymethod.st_ctime\n+    /// [`st_ctime`]: Self::st_ctime\n     ///\n     /// # Examples\n     ///"}, {"sha": "b99321e8484c97ca224fa036d25efdedc277d60a", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62dad457bc73804891c6ac9a31f90de19cbb59a3/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62dad457bc73804891c6ac9a31f90de19cbb59a3/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=62dad457bc73804891c6ac9a31f90de19cbb59a3", "patch": "@@ -16,7 +16,7 @@ use crate::formats::item_type::ItemType;\n use crate::formats::Impl;\n use crate::html::render::cache::{extern_location, get_index_search_type, ExternalLocation};\n use crate::html::render::IndexItem;\n-use crate::html::render::{plain_summary_line, shorten};\n+use crate::html::render::{plain_text_summary, shorten};\n \n thread_local!(crate static CACHE_KEY: RefCell<Arc<Cache>> = Default::default());\n \n@@ -313,7 +313,7 @@ impl DocFolder for Cache {\n                             ty: item.type_(),\n                             name: s.to_string(),\n                             path: path.join(\"::\"),\n-                            desc: shorten(plain_summary_line(item.doc_value())),\n+                            desc: shorten(plain_text_summary(item.doc_value())),\n                             parent,\n                             parent_idx: None,\n                             search_type: get_index_search_type(&item),"}, {"sha": "098ece9a1d50ec709051b93999a10e486961cfc7", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 22, "deletions": 33, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/62dad457bc73804891c6ac9a31f90de19cbb59a3/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62dad457bc73804891c6ac9a31f90de19cbb59a3/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=62dad457bc73804891c6ac9a31f90de19cbb59a3", "patch": "@@ -954,44 +954,33 @@ impl MarkdownSummaryLine<'_> {\n     }\n }\n \n-pub fn plain_summary_line(md: &str) -> String {\n-    struct ParserWrapper<'a> {\n-        inner: Parser<'a>,\n-        is_in: isize,\n-        is_first: bool,\n+/// Renders the first paragraph of the provided markdown as plain text.\n+///\n+/// - Headings, links, and formatting are stripped.\n+/// - Inline code is rendered as-is, surrounded by backticks.\n+/// - HTML and code blocks are ignored.\n+pub fn plain_text_summary(md: &str) -> String {\n+    if md.is_empty() {\n+        return String::new();\n     }\n \n-    impl<'a> Iterator for ParserWrapper<'a> {\n-        type Item = String;\n-\n-        fn next(&mut self) -> Option<String> {\n-            let next_event = self.inner.next()?;\n-            let (ret, is_in) = match next_event {\n-                Event::Start(Tag::Paragraph) => (None, 1),\n-                Event::Start(Tag::Heading(_)) => (None, 1),\n-                Event::Code(code) => (Some(format!(\"`{}`\", code)), 0),\n-                Event::Text(ref s) if self.is_in > 0 => (Some(s.as_ref().to_owned()), 0),\n-                Event::End(Tag::Paragraph | Tag::Heading(_)) => (None, -1),\n-                _ => (None, 0),\n-            };\n-            if is_in > 0 || (is_in < 0 && self.is_in > 0) {\n-                self.is_in += is_in;\n-            }\n-            if ret.is_some() {\n-                self.is_first = false;\n-                ret\n-            } else {\n-                Some(String::new())\n+    let mut s = String::with_capacity(md.len() * 3 / 2);\n+\n+    for event in Parser::new_ext(md, Options::ENABLE_STRIKETHROUGH) {\n+        match &event {\n+            Event::Text(text) => s.push_str(text),\n+            Event::Code(code) => {\n+                s.push('`');\n+                s.push_str(code);\n+                s.push('`');\n             }\n+            Event::HardBreak | Event::SoftBreak => s.push(' '),\n+            Event::Start(Tag::CodeBlock(..)) => break,\n+            Event::End(Tag::Paragraph) => break,\n+            _ => (),\n         }\n     }\n-    let mut s = String::with_capacity(md.len() * 3 / 2);\n-    let p = ParserWrapper {\n-        inner: Parser::new_ext(md, Options::ENABLE_STRIKETHROUGH),\n-        is_in: 0,\n-        is_first: true,\n-    };\n-    p.filter(|t| !t.is_empty()).for_each(|i| s.push_str(&i));\n+\n     s\n }\n "}, {"sha": "8e618733f078ed363fce33d9f991e0a6171a5262", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/62dad457bc73804891c6ac9a31f90de19cbb59a3/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62dad457bc73804891c6ac9a31f90de19cbb59a3/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=62dad457bc73804891c6ac9a31f90de19cbb59a3", "patch": "@@ -1,4 +1,4 @@\n-use super::plain_summary_line;\n+use super::plain_text_summary;\n use super::{ErrorCodes, IdMap, Ignore, LangString, Markdown, MarkdownHtml};\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use std::cell::RefCell;\n@@ -205,18 +205,25 @@ fn test_header_ids_multiple_blocks() {\n }\n \n #[test]\n-fn test_plain_summary_line() {\n+fn test_plain_text_summary() {\n     fn t(input: &str, expect: &str) {\n-        let output = plain_summary_line(input);\n+        let output = plain_text_summary(input);\n         assert_eq!(output, expect, \"original: {}\", input);\n     }\n \n     t(\"hello [Rust](https://www.rust-lang.org) :)\", \"hello Rust :)\");\n+    t(\"**bold**\", \"bold\");\n+    t(\"Multi-line\\nsummary\", \"Multi-line summary\");\n+    t(\"Hard-break  \\nsummary\", \"Hard-break summary\");\n+    t(\"hello [Rust] :)\\n\\n[Rust]: https://www.rust-lang.org\", \"hello Rust :)\");\n     t(\"hello [Rust](https://www.rust-lang.org \\\"Rust\\\") :)\", \"hello Rust :)\");\n     t(\"code `let x = i32;` ...\", \"code `let x = i32;` ...\");\n     t(\"type `Type<'static>` ...\", \"type `Type<'static>` ...\");\n     t(\"# top header\", \"top header\");\n     t(\"## header\", \"header\");\n+    t(\"first paragraph\\n\\nsecond paragraph\", \"first paragraph\");\n+    t(\"```\\nfn main() {}\\n```\", \"\");\n+    t(\"<div>hello</div>\", \"\");\n }\n \n #[test]"}, {"sha": "cf785d362cd11cf5a8123356b044c919170dc5df", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62dad457bc73804891c6ac9a31f90de19cbb59a3/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62dad457bc73804891c6ac9a31f90de19cbb59a3/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=62dad457bc73804891c6ac9a31f90de19cbb59a3", "patch": "@@ -9,7 +9,7 @@ use crate::clean::types::GetDefId;\n use crate::clean::{self, AttributesExt};\n use crate::formats::cache::Cache;\n use crate::formats::item_type::ItemType;\n-use crate::html::render::{plain_summary_line, shorten};\n+use crate::html::render::{plain_text_summary, shorten};\n use crate::html::render::{Generic, IndexItem, IndexItemFunctionType, RenderType, TypeWithKind};\n \n /// Indicates where an external crate can be found.\n@@ -78,7 +78,7 @@ pub fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n                 ty: item.type_(),\n                 name: item.name.clone().unwrap(),\n                 path: fqp[..fqp.len() - 1].join(\"::\"),\n-                desc: shorten(plain_summary_line(item.doc_value())),\n+                desc: shorten(plain_text_summary(item.doc_value())),\n                 parent: Some(did),\n                 parent_idx: None,\n                 search_type: get_index_search_type(&item),\n@@ -127,7 +127,7 @@ pub fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n     let crate_doc = krate\n         .module\n         .as_ref()\n-        .map(|module| shorten(plain_summary_line(module.doc_value())))\n+        .map(|module| shorten(plain_text_summary(module.doc_value())))\n         .unwrap_or(String::new());\n \n     #[derive(Serialize)]"}, {"sha": "57b3b9502a37fd554f0c850b2b1128fd76932759", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 33, "deletions": 29, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/62dad457bc73804891c6ac9a31f90de19cbb59a3/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62dad457bc73804891c6ac9a31f90de19cbb59a3/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=62dad457bc73804891c6ac9a31f90de19cbb59a3", "patch": "@@ -1508,6 +1508,7 @@ impl Context {\n         }\n     }\n \n+    /// Construct a map of items shown in the sidebar to a plain-text summary of their docs.\n     fn build_sidebar_items(&self, m: &clean::Module) -> BTreeMap<String, Vec<NameDoc>> {\n         // BTreeMap instead of HashMap to get a sorted output\n         let mut map: BTreeMap<_, Vec<_>> = BTreeMap::new();\n@@ -1524,7 +1525,7 @@ impl Context {\n             let short = short.to_string();\n             map.entry(short)\n                 .or_default()\n-                .push((myname, Some(plain_summary_line(item.doc_value()))));\n+                .push((myname, Some(plain_text_summary(item.doc_value()))));\n         }\n \n         if self.shared.sort_modules_alphabetically {\n@@ -1730,22 +1731,15 @@ fn full_path(cx: &Context, item: &clean::Item) -> String {\n     s\n }\n \n+/// Renders the first paragraph of the given markdown as plain text, making it suitable for\n+/// contexts like alt-text or the search index.\n+///\n+/// If no markdown is supplied, the empty string is returned.\n+///\n+/// See [`markdown::plain_text_summary`] for further details.\n #[inline]\n-crate fn plain_summary_line(s: Option<&str>) -> String {\n-    let s = s.unwrap_or(\"\");\n-    // This essentially gets the first paragraph of text in one line.\n-    let mut line = s\n-        .lines()\n-        .skip_while(|line| line.chars().all(|c| c.is_whitespace()))\n-        .take_while(|line| line.chars().any(|c| !c.is_whitespace()))\n-        .fold(String::new(), |mut acc, line| {\n-            acc.push_str(line);\n-            acc.push(' ');\n-            acc\n-        });\n-    // remove final whitespace\n-    line.pop();\n-    markdown::plain_summary_line(&line[..])\n+crate fn plain_text_summary(s: Option<&str>) -> String {\n+    s.map(markdown::plain_text_summary).unwrap_or_default()\n }\n \n crate fn shorten(s: String) -> String {\n@@ -1802,25 +1796,35 @@ fn render_markdown(\n     )\n }\n \n+/// Writes a documentation block containing only the first paragraph of the documentation. If the\n+/// docs are longer, a \"Read more\" link is appended to the end.\n fn document_short(\n     w: &mut Buffer,\n-    cx: &Context,\n     item: &clean::Item,\n     link: AssocItemLink<'_>,\n     prefix: &str,\n     is_hidden: bool,\n ) {\n     if let Some(s) = item.doc_value() {\n-        let markdown = if s.contains('\\n') {\n-            format!(\n-                \"{} [Read more]({})\",\n-                &plain_summary_line(Some(s)),\n-                naive_assoc_href(item, link)\n-            )\n-        } else {\n-            plain_summary_line(Some(s))\n-        };\n-        render_markdown(w, cx, &markdown, item.links(), prefix, is_hidden);\n+        let mut summary_html = MarkdownSummaryLine(s, &item.links()).into_string();\n+\n+        if s.contains('\\n') {\n+            let link = format!(r#\" <a href=\"{}\">Read more</a>\"#, naive_assoc_href(item, link));\n+\n+            if let Some(idx) = summary_html.rfind(\"</p>\") {\n+                summary_html.insert_str(idx, &link);\n+            } else {\n+                summary_html.push_str(&link);\n+            }\n+        }\n+\n+        write!(\n+            w,\n+            \"<div class='docblock{}'>{}{}</div>\",\n+            if is_hidden { \" hidden\" } else { \"\" },\n+            prefix,\n+            summary_html,\n+        );\n     } else if !prefix.is_empty() {\n         write!(\n             w,\n@@ -3677,7 +3681,7 @@ fn render_impl(\n                         } else if show_def_docs {\n                             // In case the item isn't documented,\n                             // provide short documentation from the trait.\n-                            document_short(w, cx, it, link, \"\", is_hidden);\n+                            document_short(w, it, link, \"\", is_hidden);\n                         }\n                     }\n                 } else {\n@@ -3689,7 +3693,7 @@ fn render_impl(\n             } else {\n                 document_stability(w, cx, item, is_hidden);\n                 if show_def_docs {\n-                    document_short(w, cx, item, link, \"\", is_hidden);\n+                    document_short(w, item, link, \"\", is_hidden);\n                 }\n             }\n         }"}, {"sha": "c995ccbf0af6770426242051a5a7c6a13baf2320", "filename": "src/test/rustdoc/plain-text-summaries.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/62dad457bc73804891c6ac9a31f90de19cbb59a3/src%2Ftest%2Frustdoc%2Fplain-text-summaries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62dad457bc73804891c6ac9a31f90de19cbb59a3/src%2Ftest%2Frustdoc%2Fplain-text-summaries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fplain-text-summaries.rs?ref=62dad457bc73804891c6ac9a31f90de19cbb59a3", "patch": "@@ -0,0 +1,26 @@\n+#![crate_type = \"lib\"]\n+#![crate_name = \"summaries\"]\n+\n+//! This summary has a [link] and `code`.\n+//!\n+//! This is the second paragraph.\n+//!\n+//! [link]: https://example.com\n+\n+// @has search-index.js 'This summary has a link and `code`.'\n+// @!has - 'second paragraph'\n+\n+/// This `code` should be in backticks.\n+///\n+/// This text should not be rendered.\n+pub struct Sidebar;\n+\n+// @has summaries/sidebar-items.js 'This `code` should be in backticks.'\n+// @!has - 'text should not be rendered'\n+\n+/// ```text\n+/// this block should not be rendered\n+/// ```\n+pub struct Sidebar2;\n+\n+// @!has summaries/sidebar-items.js 'block should not be rendered'"}, {"sha": "3bcaa3bb673139956d3681eaa6c7aaf7ea06e781", "filename": "src/test/rustdoc/trait-impl.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/62dad457bc73804891c6ac9a31f90de19cbb59a3/src%2Ftest%2Frustdoc%2Ftrait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62dad457bc73804891c6ac9a31f90de19cbb59a3/src%2Ftest%2Frustdoc%2Ftrait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-impl.rs?ref=62dad457bc73804891c6ac9a31f90de19cbb59a3", "patch": "@@ -0,0 +1,46 @@\n+pub trait Trait {\n+    /// Some long docs here.\n+    ///\n+    /// These docs are long enough that a link will be added to the end.\n+    fn a();\n+\n+    /// These docs contain a [reference link].\n+    ///\n+    /// [reference link]: https://example.com\n+    fn b();\n+\n+    /// ```\n+    /// This code block should not be in the output, but a Read more link should be generated\n+    /// ```\n+    fn c();\n+\n+    /// Escaped formatting a\\*b\\*c\\* works\n+    fn d();\n+}\n+\n+pub struct Struct;\n+\n+impl Trait for Struct {\n+    // @has trait_impl/struct.Struct.html '//*[@id=\"method.a\"]/../div/p' 'Some long docs'\n+    // @!has - '//*[@id=\"method.a\"]/../div/p' 'link will be added'\n+    // @has - '//*[@id=\"method.a\"]/../div/p/a' 'Read more'\n+    // @has - '//*[@id=\"method.a\"]/../div/p/a/@href' 'trait.Trait.html'\n+    fn a() {}\n+\n+    // @has trait_impl/struct.Struct.html '//*[@id=\"method.b\"]/../div/p' 'These docs contain'\n+    // @has - '//*[@id=\"method.b\"]/../div/p/a' 'reference link'\n+    // @has - '//*[@id=\"method.b\"]/../div/p/a/@href' 'https://example.com'\n+    // @has - '//*[@id=\"method.b\"]/../div/p/a' 'Read more'\n+    // @has - '//*[@id=\"method.b\"]/../div/p/a/@href' 'trait.Trait.html'\n+    fn b() {}\n+\n+    // @!has trait_impl/struct.Struct.html '//*[@id=\"method.c\"]/../div/p' 'code block'\n+    // @has - '//*[@id=\"method.c\"]/../div/p/a' 'Read more'\n+    // @has - '//*[@id=\"method.c\"]/../div/p/a/@href' 'trait.Trait.html'\n+    fn c() {}\n+\n+    // @has trait_impl/struct.Struct.html '//*[@id=\"method.d\"]/../div/p' \\\n+    //   'Escaped formatting a*b*c* works'\n+    // @!has trait_impl/struct.Struct.html '//*[@id=\"method.d\"]/../div/p/em'\n+    fn d() {}\n+}"}]}