{"sha": "2161400c7da89dbae504a9ca620e0b37c9af8782", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNjE0MDBjN2RhODlkYmFlNTA0YTljYTYyMGUwYjM3YzlhZjg3ODI=", "commit": {"author": {"name": "Ga\u00ebtan Cassiers", "email": "gaetan.cassiers@gmail.com", "date": "2015-06-22T00:53:28Z"}, "committer": {"name": "Ga\u00ebtan Cassiers", "email": "gaetan.cassiers@gmail.com", "date": "2015-06-23T00:15:46Z"}, "message": "Add a try_opt! macro for ease of work with Rewrite", "tree": {"sha": "9ddedcd96d3032efdc4863cb816ffe82a8a3f48c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ddedcd96d3032efdc4863cb816ffe82a8a3f48c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2161400c7da89dbae504a9ca620e0b37c9af8782", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2161400c7da89dbae504a9ca620e0b37c9af8782", "html_url": "https://github.com/rust-lang/rust/commit/2161400c7da89dbae504a9ca620e0b37c9af8782", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2161400c7da89dbae504a9ca620e0b37c9af8782/comments", "author": {"login": "cassiersg", "id": 9348542, "node_id": "MDQ6VXNlcjkzNDg1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9348542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassiersg", "html_url": "https://github.com/cassiersg", "followers_url": "https://api.github.com/users/cassiersg/followers", "following_url": "https://api.github.com/users/cassiersg/following{/other_user}", "gists_url": "https://api.github.com/users/cassiersg/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassiersg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassiersg/subscriptions", "organizations_url": "https://api.github.com/users/cassiersg/orgs", "repos_url": "https://api.github.com/users/cassiersg/repos", "events_url": "https://api.github.com/users/cassiersg/events{/privacy}", "received_events_url": "https://api.github.com/users/cassiersg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cassiersg", "id": 9348542, "node_id": "MDQ6VXNlcjkzNDg1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9348542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassiersg", "html_url": "https://github.com/cassiersg", "followers_url": "https://api.github.com/users/cassiersg/followers", "following_url": "https://api.github.com/users/cassiersg/following{/other_user}", "gists_url": "https://api.github.com/users/cassiersg/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassiersg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassiersg/subscriptions", "organizations_url": "https://api.github.com/users/cassiersg/orgs", "repos_url": "https://api.github.com/users/cassiersg/repos", "events_url": "https://api.github.com/users/cassiersg/events{/privacy}", "received_events_url": "https://api.github.com/users/cassiersg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c012d311c42523c674bf5a01ab0871a4ef267b9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c012d311c42523c674bf5a01ab0871a4ef267b9c", "html_url": "https://github.com/rust-lang/rust/commit/c012d311c42523c674bf5a01ab0871a4ef267b9c"}], "stats": {"total": 58, "additions": 28, "deletions": 30}, "files": [{"sha": "dbb526ac48244a6503bababc0432dba116fe1536", "filename": "src/expr.rs", "status": "modified", "additions": 19, "deletions": 30, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2161400c7da89dbae504a9ca620e0b37c9af8782/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2161400c7da89dbae504a9ca620e0b37c9af8782/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=2161400c7da89dbae504a9ca620e0b37c9af8782", "patch": "@@ -125,19 +125,16 @@ fn rewrite_string_lit(context: &RewriteContext, s: &str, span: Span, width: usiz\n }\n \n fn rewrite_call(context: &RewriteContext,\n-                    callee: &ast::Expr,\n-                    args: &[ptr::P<ast::Expr>],\n-                    width: usize,\n-                    offset: usize)\n+                callee: &ast::Expr,\n+                args: &[ptr::P<ast::Expr>],\n+                width: usize,\n+                offset: usize)\n         -> Option<String>\n {\n     debug!(\"rewrite_call, width: {}, offset: {}\", width, offset);\n \n     // TODO using byte lens instead of char lens (and probably all over the place too)\n-    let callee_str = match callee.rewrite(context, width, offset) {\n-        Some(s) => s,\n-        None => { return None; }\n-    };\n+    let callee_str = try_opt!(callee.rewrite(context, width, offset));\n     debug!(\"rewrite_call, callee_str: `{:?}`\", callee_str);\n     // 2 is for parens.\n     let remaining_width = width - callee_str.len() - 2;\n@@ -147,10 +144,8 @@ fn rewrite_call(context: &RewriteContext,\n     let args_str = if arg_count > 0 {\n         let mut args_rewritten = Vec::with_capacity(args.len());\n         for arg in args.iter() {\n-            match arg.rewrite(context, remaining_width, offset) {\n-                Some(s) => { args_rewritten.push((s, String::new())); }\n-                None => { return None; }\n-            }\n+            args_rewritten.push((try_opt!(arg.rewrite(context, remaining_width, offset)),\n+                                 String::new()));\n         }\n         let fmt = ListFormatting {\n             tactic: ListTactic::HorizontalVertical,\n@@ -178,11 +173,11 @@ fn rewrite_paren(context: &RewriteContext, subexpr: &ast::Expr, width: usize, of\n }\n \n fn rewrite_struct_lit(context: &RewriteContext,\n-                          path: &ast::Path,\n-                          fields: &[ast::Field],\n-                          base: Option<&ast::Expr>,\n-                          width: usize,\n-                          offset: usize)\n+                      path: &ast::Path,\n+                      fields: &[ast::Field],\n+                      base: Option<&ast::Expr>,\n+                      width: usize,\n+                      offset: usize)\n         -> Option<String>\n {\n     debug!(\"rewrite_struct_lit: width {}, offset {}\", width, offset);\n@@ -195,17 +190,11 @@ fn rewrite_struct_lit(context: &RewriteContext,\n \n     let mut field_strs = Vec::with_capacity(fields.len());\n     for field in fields.iter() {\n-        match rewrite_field(context, field, budget, indent) {\n-            Some(s) => { field_strs.push(s); }\n-            None => { return None; }\n-        }\n+        field_strs.push(try_opt!(rewrite_field(context, field, budget, indent)));\n     }\n     if let Some(expr) = base {\n         // Another 2 on the width/indent for the ..\n-        field_strs.push(match expr.rewrite(context, budget - 2, indent + 2) {\n-            Some(s) => format!(\"..{}\", s),\n-            None => { return None; }\n-        });\n+        field_strs.push(format!(\"..{}\", try_opt!(expr.rewrite(context, budget - 2, indent + 2))));\n     }\n \n     // FIXME comments\n@@ -238,7 +227,10 @@ fn rewrite_field(context: &RewriteContext, field: &ast::Field, width: usize, off\n     expr.map(|s| format!(\"{}: {}\", name, s))\n }\n \n-fn rewrite_tuple_lit(context: &RewriteContext, items: &[ptr::P<ast::Expr>], width: usize, offset: usize)\n+fn rewrite_tuple_lit(context: &RewriteContext,\n+                     items: &[ptr::P<ast::Expr>],\n+                     width: usize,\n+                     offset: usize)\n     -> Option<String> {\n         // opening paren\n         let indent = offset + 1;\n@@ -254,10 +246,7 @@ fn rewrite_tuple_lit(context: &RewriteContext, items: &[ptr::P<ast::Expr>], widt\n             } else {\n                 config!(max_width) - indent - 2\n             };\n-            match item.rewrite(context, rem_width, indent) {\n-                Some(s) => { item_strs.push(s); }\n-                None => {return None; }\n-            }\n+            item_strs.push(try_opt!(item.rewrite(context, rem_width, indent)));\n         }\n         let tactics = if item_strs.iter().any(|s| s.contains('\\n')) {\n             ListTactic::Vertical"}, {"sha": "795c0d983093a85a83d841ed013ca319c5114a09", "filename": "src/utils.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2161400c7da89dbae504a9ca620e0b37c9af8782/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2161400c7da89dbae504a9ca620e0b37c9af8782/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=2161400c7da89dbae504a9ca620e0b37c9af8782", "patch": "@@ -159,6 +159,15 @@ macro_rules! impl_enum_decodable {\n     };\n }\n \n+// Same as try!, but for Option\n+#[macro_export]\n+macro_rules! try_opt {\n+    ($expr:expr) => (match $expr {\n+        Some(val) => val,\n+        None => { return None; }\n+    })\n+}\n+\n #[test]\n fn power_rounding() {\n     assert_eq!(0, round_up_to_power_of_two(0));"}]}