{"sha": "27a046e9338fb0455c33b13e8fe28da78212dedc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YTA0NmU5MzM4ZmIwNDU1YzMzYjEzZThmZTI4ZGE3ODIxMmRlZGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-18T17:50:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-18T17:50:21Z"}, "message": "Auto merge of #48322 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 6 pull requests\n\n- Successful merges: #48194, #48273, #48274, #48275, #48282, #48312\n- Failed merges:", "tree": {"sha": "004849f31563f7dd4c1eb9f54d12ad392887c077", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/004849f31563f7dd4c1eb9f54d12ad392887c077"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27a046e9338fb0455c33b13e8fe28da78212dedc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27a046e9338fb0455c33b13e8fe28da78212dedc", "html_url": "https://github.com/rust-lang/rust/commit/27a046e9338fb0455c33b13e8fe28da78212dedc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27a046e9338fb0455c33b13e8fe28da78212dedc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ad094d81c97b3d2dd8e980ccd1475a80647540d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ad094d81c97b3d2dd8e980ccd1475a80647540d", "html_url": "https://github.com/rust-lang/rust/commit/1ad094d81c97b3d2dd8e980ccd1475a80647540d"}, {"sha": "cc20de3993bc47be613d20fdd4ec3c35cc410fcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc20de3993bc47be613d20fdd4ec3c35cc410fcd", "html_url": "https://github.com/rust-lang/rust/commit/cc20de3993bc47be613d20fdd4ec3c35cc410fcd"}], "stats": {"total": 1714, "additions": 243, "deletions": 1471}, "files": [{"sha": "fc2f8bbc8a350667c7e938ad363c8db1c1c5e9fe", "filename": ".gitmodules", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -2,10 +2,6 @@\n \tpath = src/llvm\n \turl = https://github.com/rust-lang/llvm.git\n \tbranch = master\n-[submodule \"src/rt/hoedown\"]\n-\tpath = src/rt/hoedown\n-\turl = https://github.com/rust-lang/hoedown.git\n-\tbranch = rust-2015-09-21-do-not-delete\n [submodule \"src/jemalloc\"]\n \tpath = src/jemalloc\n \turl = https://github.com/rust-lang/jemalloc.git"}, {"sha": "9bc018d983d7d7822cda2149245cc5eb08e3292b", "filename": "COPYRIGHT", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/COPYRIGHT", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/COPYRIGHT", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/COPYRIGHT?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -192,28 +192,6 @@ their own copyright notices and license terms:\n     USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\n     OF SUCH DAMAGE.\n \n-* Hoedown, the markdown parser, under src/rt/hoedown, is\n-  licensed as follows.\n-\n-    Copyright (c) 2008, Natacha Port\u00e9\n-    Copyright (c) 2011, Vicent Mart\u00ed\n-    Copyright (c) 2013, Devin Torres and the Hoedown authors\n-\n-    Permission to use, copy, modify, and distribute this\n-    software for any purpose with or without fee is hereby\n-    granted, provided that the above copyright notice and\n-    this permission notice appear in all copies.\n-\n-    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR\n-    DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE\n-    INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\n-    FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY\n-    SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR\n-    ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA\n-    OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n-    OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\n-    CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n-\n * libbacktrace, under src/libbacktrace:\n \n     Copyright (C) 2012-2014 Free Software Foundation, Inc."}, {"sha": "64e2145e0f37b444953dfef48c7f1f28f6f69cfd", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -29,7 +29,7 @@ Libraries\n - [Copied `AsciiExt` methods onto `char`][46077]\n - [Remove `T: Sized` requirement on `ptr::is_null()`][46094]\n - [impl `From<RecvError>` for `{TryRecvError, RecvTimeoutError}`][45506]\n-- [Optimised `f32::{min, max}` to generate more efficent x86 assembly][47080]\n+- [Optimised `f32::{min, max}` to generate more efficient x86 assembly][47080]\n - [`[u8]::contains` now uses memchr which provides a 3x speed improvement][46713]\n \n Stabilized APIs"}, {"sha": "8d1fa3eec5cf2df5d484cd51539293a5914a5c93", "filename": "config.toml.example", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -151,8 +151,8 @@\n # default.\n #extended = false\n \n-# Installs choosen set of extended tools if enables. By default builds all.\n-# If choosen tool failed to build the installation fails.\n+# Installs chosen set of extended tools if enables. By default builds all.\n+# If chosen tool failed to build the installation fails.\n #tools = [\"cargo\", \"rls\", \"rustfmt\", \"analysis\", \"src\"]\n \n # Verbosity level: 0 == not verbose, 1 == verbose, 2 == very verbose"}, {"sha": "d8306c66daf84d6ecad292048407ef99ef341933", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 242, "changes": 242, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -480,30 +480,6 @@ dependencies = [\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"cssparser\"\n-version = \"0.13.7\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"cssparser-macros 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"phf 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"procedural-masquerade 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"cssparser-macros\"\n-version = \"0.3.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"phf_codegen 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"procedural-masquerade 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"curl\"\n version = \"0.4.11\"\n@@ -533,14 +509,6 @@ dependencies = [\n  \"winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"debug_unreachable\"\n-version = \"0.1.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"deglob\"\n version = \"0.1.0\"\n@@ -761,15 +729,6 @@ name = \"fuchsia-zircon-sys\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"futf\"\n-version = \"0.1.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"debug_unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"futures\"\n version = \"0.1.17\"\n@@ -870,26 +829,6 @@ dependencies = [\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"html-diff\"\n-version = \"0.0.6\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"kuchiki 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"html5ever\"\n-version = \"0.20.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"markup5ever 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"idna\"\n version = \"0.1.4\"\n@@ -1010,17 +949,6 @@ dependencies = [\n  \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"kuchiki\"\n-version = \"0.6.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"cssparser 0.13.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"html5ever 0.20.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"selectors 0.18.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"languageserver-types\"\n version = \"0.30.0\"\n@@ -1138,24 +1066,6 @@ dependencies = [\n  \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"mac\"\n-version = \"0.1.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"markup5ever\"\n-version = \"0.5.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"phf 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"phf_codegen 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"string_cache 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"string_cache_codegen 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tendril 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"matches\"\n version = \"0.1.6\"\n@@ -1440,50 +1350,11 @@ name = \"pest\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"phf\"\n-version = \"0.7.21\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"phf_shared 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"phf_codegen\"\n-version = \"0.7.21\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"phf_generator 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"phf_shared 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"phf_generator\"\n-version = \"0.7.21\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"phf_shared 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.3.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"phf_shared\"\n-version = \"0.7.21\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"siphasher 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"pkg-config\"\n version = \"0.3.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"precomputed-hash\"\n-version = \"0.1.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"proc_macro\"\n version = \"0.0.0\"\n@@ -1493,11 +1364,6 @@ dependencies = [\n  \"syntax_pos 0.0.0\",\n ]\n \n-[[package]]\n-name = \"procedural-masquerade\"\n-version = \"0.1.5\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"profiler_builtins\"\n version = \"0.0.0\"\n@@ -2238,9 +2104,6 @@ dependencies = [\n name = \"rustdoc\"\n version = \"0.0.0\"\n dependencies = [\n- \"build_helper 0.1.0\",\n- \"cc 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"html-diff 0.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -2322,21 +2185,6 @@ name = \"scopeguard\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"selectors\"\n-version = \"0.18.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cssparser 0.13.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"phf 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"phf_codegen 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"precomputed-hash 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smallvec 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"semver\"\n version = \"0.6.0\"\n@@ -2435,16 +2283,6 @@ name = \"shlex\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"siphasher\"\n-version = \"0.2.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"smallvec\"\n-version = \"0.3.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"smallvec\"\n version = \"0.6.0\"\n@@ -2495,36 +2333,6 @@ dependencies = [\n  \"core 0.0.0\",\n ]\n \n-[[package]]\n-name = \"string_cache\"\n-version = \"0.6.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"debug_unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"phf_shared 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"precomputed-hash 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"string_cache_codegen 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"string_cache_shared 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"string_cache_codegen\"\n-version = \"0.4.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"phf_generator 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"phf_shared 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"string_cache_shared 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"string_cache_shared\"\n-version = \"0.3.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"strsim\"\n version = \"0.6.0\"\n@@ -2645,16 +2453,6 @@ dependencies = [\n  \"rand 0.3.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"tendril\"\n-version = \"0.4.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"futf 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"utf-8 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"term\"\n version = \"0.0.0\"\n@@ -2803,14 +2601,6 @@ name = \"unicode-xid\"\n version = \"0.0.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"unreachable\"\n-version = \"0.1.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"unreachable\"\n version = \"1.0.0\"\n@@ -2862,14 +2652,6 @@ dependencies = [\n  \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"utf-8\"\n-version = \"0.7.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"utf8-ranges\"\n version = \"0.1.3\"\n@@ -3016,11 +2798,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum crossbeam 0.2.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bd66663db5a988098a89599d4857919b3acf7f61402e61365acfd3919857b9be\"\n \"checksum crossbeam 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"24ce9782d4d5c53674646a6a4c1863a21a8fc0cb649b3c94dfc16e45071dea19\"\n \"checksum crypto-hash 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"34903878eec1694faf53cae8473a088df333181de421d4d3d48061d6559fe602\"\n-\"checksum cssparser 0.13.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ef6124306e5ebc5ab11891d063aeafdd0cdc308079b708c8b566125f3680292b\"\n-\"checksum cssparser-macros 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"079adec4af52bb5275eadd004292028c79eb3c5f5b4ee8086a36d4197032f6df\"\n \"checksum curl 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b70fd6394677d3c0e239ff4be6f2b3176e171ffd1c23ffdc541e78dea2b8bb5e\"\n \"checksum curl-sys 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f46e49c7125131f5afaded06944d6888b55cbdf8eba05dae73c954019b907961\"\n-\"checksum debug_unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a032eac705ca39214d169f83e3d3da290af06d8d1d344d1baad2fd002dca4b3\"\n \"checksum derive-new 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"415f627ab054041c3eb748c2e1da0ef751989f5f0c386b63a098e545854a98ba\"\n \"checksum diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3c2b69f912779fbb121ceb775d74d51e915af17aaebc38d28a592843a2dd0a3a\"\n \"checksum docopt 0.8.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d8acd393692c503b168471874953a2531df0e9ab77d0b6bbc582395743300a4a\"\n@@ -3044,7 +2823,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum fs2 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213\"\n \"checksum fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82\"\n \"checksum fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7\"\n-\"checksum futf 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"51f93f3de6ba1794dcd5810b3546d004600a59a98266487c8407bc4b24e398f3\"\n \"checksum futures 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"118b49cac82e04121117cbd3121ede3147e885627d82c4546b87c702debb90c1\"\n \"checksum getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"65922871abd2f101a2eb0eaebadc66668e54a87ad9c3dd82520b5f86ede5eff9\"\n \"checksum git2 0.6.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee5b4bb7cd2a44e6e5ee3a26ba6a9ca10d4ce2771cdc3839bbc54b47b7d1be84\"\n@@ -3056,8 +2834,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum hex 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d6a22814455d41612f41161581c2883c0c6a1c41852729b17d5ed88f01e153aa\"\n \"checksum hex 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"459d3cf58137bb02ad4adeef5036377ff59f066dbb82517b7192e3a5462a2abc\"\n \"checksum home 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9f25ae61099d8f3fee8b483df0bd4ecccf4b2731897aad40d50eca1b641fe6db\"\n-\"checksum html-diff 0.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee4cfdf62a484a3ac0d9b80f562d37f99366db08a63621b917ea3056565345f7\"\n-\"checksum html5ever 0.20.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5bfb46978eb757a603b7dfe2dafb1c62cb4dee3428d8ac1de734d83d6b022d06\"\n \"checksum idna 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"014b298351066f1512874135335d62a789ffe78a9974f94b43ed5621951eaf7d\"\n \"checksum if_chain 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"61bb90bdd39e3af69b0172dfc6130f6cd6332bf040fbb9bdd4401d37adbd48b8\"\n \"checksum ignore 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb2f0238094bd1b41800fb6eb9b16fdd5e9832ed6053ed91409f0cd5bf28dcfd\"\n@@ -3069,7 +2845,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum json 0.11.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"39ebf0fac977ee3a4a3242b6446004ff64514889e3e2730bbd4f764a67a2e483\"\n \"checksum jsonrpc-core 8.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddf83704f4e79979a424d1082dd2c1e52683058056c9280efa19ac5f6bc9033c\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n-\"checksum kuchiki 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e03098e8e719c92b7794515dfd5c1724e2b12f5ce1788e61cfa4663f82eba8d8\"\n \"checksum languageserver-types 0.30.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1541f9b22687f060511d213036e1f058797c48e3501e177f01cb6e88de802f5b\"\n \"checksum lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76f033c7ad61445c5b347c7382dd1237847eb1bce590fe50365dcb33d546be73\"\n \"checksum lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c8f31047daa365f19be14b47c29df4f7c3b581832407daabe6ae77397619237d\"\n@@ -3082,8 +2857,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"89f010e843f2b1a31dbd316b3b8d443758bc634bed37aabade59c686d644e0a2\"\n \"checksum log_settings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3d382732ea0fbc09790c4899db3255bdea0fc78b54bf234bd18a63bb603915b6\"\n \"checksum lzma-sys 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c1b93b78f89e8737dac81837fc8f5521ac162abcba902e1a3db949d55346d1da\"\n-\"checksum mac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c41e0c4fef86961ac6d6f8a82609f55f31b05e4fce149ac5710e439df7619ba4\"\n-\"checksum markup5ever 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"047150a0e03b57e638fc45af33a0b63a0362305d5b9f92ecef81df472a4cceb0\"\n \"checksum matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"100aabe6b8ff4e4a7e32c1c13523379802df0772b82466207ac25b013f193376\"\n \"checksum mdbook 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fef236caad7ba3b5b3944df946f19ab3e190bca53c111dd00fe05fa8d879f2fd\"\n \"checksum memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d8b629fb514376c675b98c1421e80b151d3817ac42d7c667717d282761418d20\"\n@@ -3111,13 +2884,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum parking_lot_core 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6bf05dc61189828dfd7a59fd6e66d538e88d6b30390da1124a291e09fd3098b3\"\n \"checksum percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"31010dd2e1ac33d5b46a5b413495239882813e0369f8ed8a5e266f173602f831\"\n \"checksum pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a6dda33d67c26f0aac90d324ab2eb7239c819fc7b2552fe9faa4fe88441edc8\"\n-\"checksum phf 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cb325642290f28ee14d8c6201159949a872f220c62af6e110a56ea914fbe42fc\"\n-\"checksum phf_codegen 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d62594c0bb54c464f633175d502038177e90309daf2e0158be42ed5f023ce88f\"\n-\"checksum phf_generator 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6b07ffcc532ccc85e3afc45865469bf5d9e4ef5bfcf9622e3cfe80c2d275ec03\"\n-\"checksum phf_shared 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"07e24b0ca9643bdecd0632f2b3da6b1b89bbb0030e0b992afc1113b23a7bc2f2\"\n \"checksum pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a8b4c6b8165cd1a1cd4b9b120978131389f64bdaf456435caa41e630edba903\"\n-\"checksum precomputed-hash 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"925383efa346730478fb4838dbe9137d2a47675ad789c546d150a6e1dd4ab31c\"\n-\"checksum procedural-masquerade 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dc1bcafee1590f81acb329ae45ec627b318123f085153913620316ae9a144b2a\"\n \"checksum pulldown-cmark 0.0.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"378e941dbd392c101f2cb88097fa4d7167bc421d4b88de3ff7dbee503bc3233b\"\n \"checksum pulldown-cmark 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a656fdb8b6848f896df5e478a0eb9083681663e37dcb77dd16981ff65329fe8b\"\n \"checksum quick-error 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eda5fe9b71976e62bc81b781206aaa076401769b2143379d3eb2118388babac4\"\n@@ -3154,7 +2921,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum scoped-tls 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f417c22df063e9450888a7561788e9bd46d3bb3c1466435b4eccb903807f147d\"\n \"checksum scopeguard 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"59a076157c1e2dc561d8de585151ee6965d910dd4dcb5dabb7ae3e83981a6c57\"\n \"checksum scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94258f53601af11e6a49f722422f6e3425c52b06245a5cf9bc09908b174f5e27\"\n-\"checksum selectors 0.18.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e3c89b1c6a3c029c82263f7dd2d44d0005ee7374eb09e254ab59dede4353a8c0\"\n \"checksum semver 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a3186ec9e65071a2095434b1f5bb24838d4e8e130f584c790f6033c79943537\"\n \"checksum semver 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bee2bc909ab2d8d60dab26e8cad85b25d795b14603a0dcb627b78b9d30b6454b\"\n \"checksum semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\"\n@@ -3167,14 +2933,9 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum shared_child 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"099b38928dbe4a0a01fcd8c233183072f14a7d126a34bed05880869be66e14cc\"\n \"checksum shell-escape 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dd5cc96481d54583947bfe88bf30c23d53f883c6cd0145368b69989d97b84ef8\"\n \"checksum shlex 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7fdf1b9db47230893d76faad238fd6097fd6d6a9245cd7a4d90dbd639536bbd2\"\n-\"checksum siphasher 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0df90a788073e8d0235a67e50441d47db7c8ad9debd91cbf43736a2a92d36537\"\n-\"checksum smallvec 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4f8266519bc1d17d0b5b16f6c21295625d562841c708f6376f49028a43e9c11e\"\n \"checksum smallvec 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"44db0ecb22921ef790d17ae13a3f6d15784183ff5f2a01aa32098c7498d2b4b9\"\n \"checksum socket2 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cf5d5aa364bf61a0d744a293da20381617b6445b89eb524800fab857c5aed2d8\"\n \"checksum stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15132e0e364248108c5e2c02e3ab539be8d6f5d52a01ca9bbf27ed657316f02b\"\n-\"checksum string_cache 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"413fc7852aeeb5472f1986ef755f561ddf0c789d3d796e65f0b6fe293ecd4ef8\"\n-\"checksum string_cache_codegen 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"479cde50c3539481f33906a387f2bd17c8e87cb848c35b6021d41fb81ff9b4d7\"\n-\"checksum string_cache_shared 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b1884d1bc09741d466d9b14e6d37ac89d6909cbcac41dd9ae982d4d063bbedfc\"\n \"checksum strsim 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b4d15c810519a91cf877e7e36e63fe068815c678181439f2f29e2562147c3694\"\n \"checksum syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3b891b9015c88c576343b9b3e41c2c11a51c219ef067b264bd9c8aa9b441dad\"\n \"checksum synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a393066ed9010ebaed60b9eafa373d4b1baac186dd7e008555b0f702b51945b6\"\n@@ -3184,7 +2945,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum syntex_syntax 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76a302e717e348aa372ff577791c3832395650073b8d8432f8b3cb170b34afde\"\n \"checksum tar 0.4.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1605d3388ceb50252952ffebab4b5dc43017ead7e4481b175961c283bb951195\"\n \"checksum tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"87974a6f5c1dfb344d733055601650059a3363de2a6104819293baff662132d6\"\n-\"checksum tendril 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9de21546595a0873061940d994bbbc5c35f024ae4fd61ec5c5b159115684f508\"\n \"checksum term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fa63644f74ce96fbeb9b794f66aff2a52d601cbd5e80f4b97123e3899f4570f1\"\n \"checksum termcolor 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9065bced9c3e43453aa3d56f1e98590b8455b341d2fa191a1090c0dd0b242c75\"\n \"checksum termion 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"689a3bdfaab439fd92bc87df5c4c78417d3cbe537487274e9b0b2dce76e92096\"\n@@ -3202,12 +2962,10 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bf3a113775714a22dcb774d8ea3655c53a32debae63a063acc00a91cc586245f\"\n \"checksum unicode-xid 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"36dff09cafb4ec7c8cf0023eb0b686cb6ce65499116a12201c9e11840ca01beb\"\n \"checksum unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f860d7d29cf02cb2f3f359fd35991af3d30bac52c57d265a3c461074cb4dc\"\n-\"checksum unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1f2ae5ddb18e1c92664717616dd9549dde73f539f01bd7b77c2edb2446bdff91\"\n \"checksum unreachable 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"382810877fe448991dfc7f0dd6e3ae5d58088fd0ea5e35189655f84e6814fa56\"\n \"checksum url 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fa35e768d4daf1d85733418a49fb42e10d7f633e394fccab4ab7aba897053fe2\"\n \"checksum url_serde 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"74e7d099f1ee52f823d4bdd60c93c3602043c728f5db3b97bdb548467f7bddea\"\n \"checksum userenv-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"71d28ea36bbd9192d75bd9fa9b39f96ddb986eaee824adae5d53b6e51919b2f3\"\n-\"checksum utf-8 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b6f923c601c7ac48ef1d66f7d5b5b2d9a7ba9c51333ab75a3ddf8d0309185a56\"\n \"checksum utf8-ranges 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1ca13c08c41c9c3e04224ed9ff80461d97e121589ff27c753a16cb10830ae0f\"\n \"checksum utf8-ranges 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"662fab6525a98beff2921d7f61a39e7d59e0b425ebc7d0d9e66d316e55124122\"\n \"checksum vcpkg 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9e0a7d8bed3178a8fb112199d466eeca9ed09a14ba8ad67718179b4fd5487d0b\""}, {"sha": "798d5c3eb6736fc63b06f94dd3780715f210fa05", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -62,12 +62,9 @@ fn main() {\n     // it up so we can make rustdoc print this into the docs\n     if let Some(version) = env::var_os(\"RUSTDOC_CRATE_VERSION\") {\n         // This \"unstable-options\" can be removed when `--crate-version` is stabilized\n-        cmd.arg(\"-Z\").arg(\"unstable-options\")\n+        cmd.arg(\"-Z\")\n+           .arg(\"unstable-options\")\n            .arg(\"--crate-version\").arg(version);\n-\n-        // While we can assume that `-Z unstable-options` is set, let's also force rustdoc to panic\n-        // if pulldown rendering differences are found\n-        cmd.arg(\"--deny-render-differences\");\n     }\n \n     if verbose > 1 {"}, {"sha": "eb5c3b8ce147f54ac3cc265d063d15df245b1a7a", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -60,6 +60,7 @@ pub enum Subcommand {\n         test_args: Vec<String>,\n         rustc_args: Vec<String>,\n         fail_fast: bool,\n+        doc_tests: bool,\n     },\n     Bench {\n         paths: Vec<PathBuf>,\n@@ -164,6 +165,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\");\n                     \"extra options to pass the compiler when running tests\",\n                     \"ARGS\",\n                 );\n+                opts.optflag(\"\", \"doc\", \"run doc tests\");\n             },\n             \"bench\" => { opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\"); },\n             \"clean\" => { opts.optflag(\"\", \"all\", \"clean all build artifacts\"); },\n@@ -320,6 +322,7 @@ Arguments:\n                     test_args: matches.opt_strs(\"test-args\"),\n                     rustc_args: matches.opt_strs(\"rustc-args\"),\n                     fail_fast: !matches.opt_present(\"no-fail-fast\"),\n+                    doc_tests: matches.opt_present(\"doc\"),\n                 }\n             }\n             \"bench\" => {\n@@ -410,6 +413,13 @@ impl Subcommand {\n             _ => false,\n         }\n     }\n+\n+    pub fn doc_tests(&self) -> bool {\n+        match *self {\n+            Subcommand::Test { doc_tests, .. } => doc_tests,\n+            _ => false,\n+        }\n+    }\n }\n \n fn split(s: Vec<String>) -> Vec<String> {"}, {"sha": "90f50275b6bb462a6e75f258d3ba1cb9c2481cdb", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -226,6 +226,7 @@ pub struct Build {\n     rustfmt_info: channel::GitInfo,\n     local_rebuild: bool,\n     fail_fast: bool,\n+    doc_tests: bool,\n     verbosity: usize,\n \n     // Targets for which to build.\n@@ -326,6 +327,7 @@ impl Build {\n             initial_cargo: config.initial_cargo.clone(),\n             local_rebuild: config.local_rebuild,\n             fail_fast: config.cmd.fail_fast(),\n+            doc_tests: config.cmd.doc_tests(),\n             verbosity: config.verbose,\n \n             build: config.build,"}, {"sha": "bd8c36a296c095d8772ce29f1633f8c173bf52a2", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -935,7 +935,7 @@ impl Step for Compiletest {\n             }\n         }\n         if suite == \"run-make\" && !build.config.llvm_enabled {\n-            println!(\"Ignoring run-make test suite as they generally dont work without LLVM\");\n+            println!(\"Ignoring run-make test suite as they generally don't work without LLVM\");\n             return;\n         }\n \n@@ -1355,6 +1355,9 @@ impl Step for Crate {\n         if test_kind.subcommand() == \"test\" && !build.fail_fast {\n             cargo.arg(\"--no-fail-fast\");\n         }\n+        if build.doc_tests {\n+            cargo.arg(\"--doc\");\n+        }\n \n         cargo.arg(\"-p\").arg(krate);\n "}, {"sha": "ebb28c95b2ea68b96eddb9e71aff4d32eacc74f0", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -1 +1 @@\n-Subproject commit 919980be7df4ea7d45a9dca8efc34da89bcf7d6b\n+Subproject commit ebb28c95b2ea68b96eddb9e71aff4d32eacc74f0"}, {"sha": "ec9d85db107d4b08418311d10117d249efd983af", "filename": "src/doc/unstable-book/src/language-features/macro-at-most-once-rep.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmacro-at-most-once-rep.md", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmacro-at-most-once-rep.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmacro-at-most-once-rep.md?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -6,7 +6,10 @@ With this feature gate enabled, one can use `?` as a Kleene operator meaning \"0\n or 1 repetitions\" in a macro definition. Previously only `+` and `*` were allowed.\n \n For example:\n+\n ```rust\n+#![feature(macro_at_most_once_rep)]\n+\n macro_rules! foo {\n     (something $(,)?) // `?` indicates `,` is \"optional\"...\n         => {}"}, {"sha": "dfd42f3e7330157bec889946ce712a74ef4409dd", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -159,7 +159,7 @@ unsafe impl<A, F: FnMut() -> A> TrustedLen for RepeatWith<F> {}\n /// [`repeat`]: fn.repeat.html\n ///\n /// An iterator produced by `repeat_with()` is a `DoubleEndedIterator`.\n-/// It is important to not that reversing `repeat_with(f)` will produce\n+/// It is important to note that reversing `repeat_with(f)` will produce\n /// the exact same sequence as the non-reversed iterator. In other words,\n /// `repeat_with(f).rev().collect::<Vec<_>>()` is equivalent to\n /// `repeat_with(f).collect::<Vec<_>>()`."}, {"sha": "287516474d49a55865f9fae16a265c88deeea1bc", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -1891,7 +1891,7 @@ is a function pointer, which is not zero-sized.\n This pattern should be rewritten. There are a few possible ways to do this:\n \n - change the original fn declaration to match the expected signature,\n-  and do the cast in the fn body (the prefered option)\n+  and do the cast in the fn body (the preferred option)\n - cast the fn item fo a fn pointer before calling transmute, as shown here:\n \n     ```"}, {"sha": "bc03f7ead8187ddf475796e64aa35a41124b945c", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -543,7 +543,7 @@ impl Generics {\n }\n \n /// Synthetic Type Parameters are converted to an other form during lowering, this allows\n-/// to track the original form they had. Usefull for error messages.\n+/// to track the original form they had. Useful for error messages.\n #[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum SyntheticTyParamKind {\n     ImplTrait"}, {"sha": "700d06acf11a4520ea85090b60124c6a89cc3e25", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -734,7 +734,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            // When finding T != &T, hightlight only the borrow\n+            // When finding T != &T, highlight only the borrow\n             (&ty::TyRef(r1, ref tnm1), _) if equals(&tnm1.ty, &t2) => {\n                 let mut values = (DiagnosticStyledString::new(), DiagnosticStyledString::new());\n                 push_ty_ref(&r1, tnm1, &mut values.0);\n@@ -946,7 +946,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         let type_param = generics.type_param(param, self.tcx);\n                         let hir = &self.tcx.hir;\n                         hir.as_local_node_id(type_param.def_id).map(|id| {\n-                            // Get the `hir::TyParam` to verify wether it already has any bounds.\n+                            // Get the `hir::TyParam` to verify whether it already has any bounds.\n                             // We do this to avoid suggesting code that ends up as `T: 'a'b`,\n                             // instead we suggest `T: 'a + 'b` in that case.\n                             let has_lifetimes = if let hir_map::NodeTyParam(ref p) = hir.get(id) {"}, {"sha": "36e657f78b4b2e74dd4d35406b2798c34e5988f0", "filename": "src/librustc/infer/outlives/obligations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -106,7 +106,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// done (or else an assert will fire).\n     ///\n     /// See the `region_obligations` field of `InferCtxt` for some\n-    /// comments about how this funtion fits into the overall expected\n+    /// comments about how this function fits into the overall expected\n     /// flow of the the inferencer. The key point is that it is\n     /// invoked after all type-inference variables have been bound --\n     /// towards the end of regionck. This also ensures that the"}, {"sha": "95f9c8c835398e5ef09e15d9fa18a5cabb48b5d5", "filename": "src/librustc/infer/region_constraints/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc%2Finfer%2Fregion_constraints%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc%2Finfer%2Fregion_constraints%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2FREADME.md?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -19,7 +19,7 @@ The constraints are always of one of three possible forms:\n   a subregion of Rj\n - `ConstrainRegSubVar(R, Ri)` states that the concrete region R (which\n   must not be a variable) must be a subregion of the variable Ri\n-- `ConstrainVarSubReg(Ri, R)` states the variable Ri shoudl be less\n+- `ConstrainVarSubReg(Ri, R)` states the variable Ri should be less\n   than the concrete region R. This is kind of deprecated and ought to\n   be replaced with a verify (they essentially play the same role).\n "}, {"sha": "3ce4ab04777ca9e886aca8188a9b71c15dddb5e1", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -886,7 +886,7 @@ fn resolve_block<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>, blk:\n     //\n     // Each of the statements within the block is a terminating\n     // scope, and thus a temporary (e.g. the result of calling\n-    // `bar()` in the initalizer expression for `let inner = ...;`)\n+    // `bar()` in the initializer expression for `let inner = ...;`)\n     // will be cleaned up immediately after its corresponding\n     // statement (i.e. `let inner = ...;`) executes.\n     //"}, {"sha": "a80695ec9b987c2651b0a673522f0b79828b184b", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -56,7 +56,7 @@ pub struct GlobalId<'tcx> {\n ////////////////////////////////////////////////////////////////////////////////\n \n pub trait PointerArithmetic: layout::HasDataLayout {\n-    // These are not supposed to be overriden.\n+    // These are not supposed to be overridden.\n \n     //// Trunace the given value to the pointer size; also return whether there was an overflow\n     fn truncate_to_ptr(self, val: u128) -> (u64, bool) {"}, {"sha": "b88dea871ce67a91462c47ff74e7c17598f4ac2a", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -1950,7 +1950,7 @@ pub struct GeneratorLayout<'tcx> {\n /// ```\n ///\n /// here, there is one unique free region (`'a`) but it appears\n-/// twice. We would \"renumber\" each occurence to a unique vid, as follows:\n+/// twice. We would \"renumber\" each occurrence to a unique vid, as follows:\n ///\n /// ```text\n /// ClosureSubsts = ["}, {"sha": "7311b47974ac539bf25e72bc8a5f2120084559fe", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -277,7 +277,7 @@ pub fn orphan_check<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n ///     is bad, because the only local type with `T` as a subtree is\n ///     `LocalType<T>`, and `Vec<->` is between it and the type parameter.\n ///     - similarly, `FundamentalPair<LocalType<T>, T>` is bad, because\n-///     the second occurence of `T` is not a subtree of *any* local type.\n+///     the second occurrence of `T` is not a subtree of *any* local type.\n ///     - however, `LocalType<Vec<T>>` is OK, because `T` is a subtree of\n ///     `LocalType<Vec<T>>`, which is local and has no types between it and\n ///     the type parameter."}, {"sha": "41cc8ca601ac067df4bd161a5eb000d98192427f", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -621,7 +621,7 @@ pub fn fully_normalize<'a, 'gcx, 'tcx, T>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n     // FIXME (@jroesch) ISSUE 26721\n     // I'm not sure if this is a bug or not, needs further investigation.\n     // It appears that by reusing the fulfillment_cx here we incur more\n-    // obligations and later trip an asssertion on regionck.rs line 337.\n+    // obligations and later trip an assertion on regionck.rs line 337.\n     //\n     // The two possibilities I see is:\n     //      - normalization is not actually fully happening and we"}, {"sha": "c3cd65230bd86114530f49b73ebd9410dd59298d", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -2059,7 +2059,7 @@ impl<'a, 'tcx> LayoutOf<Ty<'tcx>> for LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n         // can however trigger recursive invocations of `layout_of`.\n         // Therefore, we execute it *after* the main query has\n         // completed, to avoid problems around recursive structures\n-        // and the like. (Admitedly, I wasn't able to reproduce a problem\n+        // and the like. (Admittedly, I wasn't able to reproduce a problem\n         // here, but it seems like the right thing to do. -nmatsakis)\n         self.record_layout_for_printing(layout);\n \n@@ -2085,7 +2085,7 @@ impl<'a, 'tcx> LayoutOf<Ty<'tcx>> for LayoutCx<'tcx, ty::maps::TyCtxtAt<'a, 'tcx\n         // can however trigger recursive invocations of `layout_of`.\n         // Therefore, we execute it *after* the main query has\n         // completed, to avoid problems around recursive structures\n-        // and the like. (Admitedly, I wasn't able to reproduce a problem\n+        // and the like. (Admittedly, I wasn't able to reproduce a problem\n         // here, but it seems like the right thing to do. -nmatsakis)\n         let cx = LayoutCx {\n             tcx: *self.tcx,"}, {"sha": "ff46ee79c31d02f28adb74656196fc8b426e7a61", "filename": "src/librustc_apfloat/tests/ieee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_apfloat%2Ftests%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_apfloat%2Ftests%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Ftests%2Fieee.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -2201,12 +2201,12 @@ fn is_finite_non_zero() {\n     assert!(!Single::ZERO.is_finite_non_zero());\n     assert!(!(-Single::ZERO).is_finite_non_zero());\n \n-    // Test +/- qNaN. +/- dont mean anything with qNaN but paranoia can't hurt in\n+    // Test +/- qNaN. +/- don't mean anything with qNaN but paranoia can't hurt in\n     // this instance.\n     assert!(!Single::NAN.is_finite_non_zero());\n     assert!(!(-Single::NAN).is_finite_non_zero());\n \n-    // Test +/- sNaN. +/- dont mean anything with sNaN but paranoia can't hurt in\n+    // Test +/- sNaN. +/- don't mean anything with sNaN but paranoia can't hurt in\n     // this instance.\n     assert!(!Single::snan(None).is_finite_non_zero());\n     assert!(!(-Single::snan(None)).is_finite_non_zero());"}, {"sha": "58818d0ce803315d6dc164234a34483a7358a36e", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -1111,7 +1111,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n \n     /// Given a type, if it is an immutable reference, return a suggestion to make it mutable\n     fn suggest_mut_for_immutable(&self, pty: &hir::Ty, is_implicit_self: bool) -> Option<String> {\n-        // Check wether the argument is an immutable reference\n+        // Check whether the argument is an immutable reference\n         debug!(\"suggest_mut_for_immutable({:?}, {:?})\", pty, is_implicit_self);\n         if let hir::TyRptr(lifetime, hir::MutTy {\n             mutbl: hir::Mutability::MutImmutable,"}, {"sha": "e30f5cb4f12935566b7543397e53aeeae557335e", "filename": "src/librustc_const_eval/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_const_eval%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_const_eval%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2F_match.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -607,7 +607,7 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n         // be able to observe whether the types of the struct's fields are\n         // inhabited.\n         //\n-        // If the field is truely inaccessible, then all the patterns\n+        // If the field is truly inaccessible, then all the patterns\n         // matching against it must be wildcard patterns, so its type\n         // does not matter.\n         //"}, {"sha": "b11ca107af7dd038e8863001f3da55420b851286", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -204,7 +204,7 @@ macro_rules! newtype_index {\n                           $($tokens)*);\n     );\n \n-    // The case where no derives are added, but encodable is overriden. Don't\n+    // The case where no derives are added, but encodable is overridden. Don't\n     // derive serialization traits\n     (@pub          [$($pub:tt)*]\n      @type         [$type:ident]"}, {"sha": "c6ed971f767cf15fba9385874c3d511e14e49cbc", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -117,7 +117,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n             for move_error in move_errors {\n                 let (span, kind): (Span, IllegalMoveOriginKind) = match move_error {\n                     MoveError::UnionMove { .. } => {\n-                        unimplemented!(\"dont know how to report union move errors yet.\")\n+                        unimplemented!(\"don't know how to report union move errors yet.\")\n                     }\n                     MoveError::IllegalMove {\n                         cannot_move_out_of: o,\n@@ -1424,7 +1424,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     /// tracked in the MoveData.\n     ///\n     /// An Err result includes a tag indicated why the search failed.\n-    /// Currenly this can only occur if the place is built off of a\n+    /// Currently this can only occur if the place is built off of a\n     /// static variable, as we do not track those in the MoveData.\n     fn move_path_closest_to(\n         &mut self,\n@@ -1439,7 +1439,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         }\n         match *last_prefix {\n             Place::Local(_) => panic!(\"should have move path for every Local\"),\n-            Place::Projection(_) => panic!(\"PrefixSet::All meant dont stop for Projection\"),\n+            Place::Projection(_) => panic!(\"PrefixSet::All meant don't stop for Projection\"),\n             Place::Static(_) => return Err(NoMovePathFound::ReachedStatic),\n         }\n     }\n@@ -1484,7 +1484,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         { }\n \n                         ProjectionElem::Subslice { .. } => {\n-                            panic!(\"we dont allow assignments to subslices, context: {:?}\",\n+                            panic!(\"we don't allow assignments to subslices, context: {:?}\",\n                                    context);\n                         }\n "}, {"sha": "07e5091da9c1ef5e7026842c44af006608ae87e0", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -278,7 +278,7 @@ fn for_each_region_constraint(\n \n /// Right now, we piggy back on the `ReVar` to store our NLL inference\n /// regions. These are indexed with `RegionVid`. This method will\n-/// assert that the region is a `ReVar` and extract its interal index.\n+/// assert that the region is a `ReVar` and extract its internal index.\n /// This is reasonable because in our MIR we replace all universal regions\n /// with inference variables.\n pub trait ToRegionVid {"}, {"sha": "33c012dfad829203ecc0e08389745e2ff87fc26d", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -964,7 +964,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     debug!(\"check_universal_region: fr_minus={:?}\", fr_minus);\n \n                     // Grow `shorter_fr` until we find a non-local\n-                    // regon. (We always will.)  We'll call that\n+                    // region. (We always will.)  We'll call that\n                     // `shorter_fr+` -- it's ever so slightly larger than\n                     // `fr`.\n                     let shorter_fr_plus = self.universal_regions.non_local_upper_bound(shorter_fr);"}, {"sha": "45236bbc4aae287101fff08859589605126b77ed", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -150,7 +150,7 @@ pub(super) enum RegionElement {\n     /// A point in the control-flow graph.\n     Location(Location),\n \n-    /// An in-scope, universally quantified region (e.g., a liftime parameter).\n+    /// An in-scope, universally quantified region (e.g., a lifetime parameter).\n     UniversalRegion(RegionVid),\n }\n "}, {"sha": "58ce572ae8d88abd79e7936d6f871fbc4b72cf92", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Code related to match expresions. These are sufficiently complex\n+//! Code related to match expressions. These are sufficiently complex\n //! to warrant their own module and submodules. :) This main module\n //! includes the high-level algorithm, the submodules contain the\n //! details."}, {"sha": "8ab4035cf4aecacd27a8393d5b1053b7c9d2141d", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -80,14 +80,14 @@ pub struct Borrows<'a, 'gcx: 'tcx, 'tcx: 'a> {\n /// tracking (phased) borrows. It computes where a borrow is reserved;\n /// i.e. where it can reach in the control flow starting from its\n /// initial `assigned = &'rgn borrowed` statement, and ending\n-/// whereever `'rgn` itself ends.\n+/// wherever `'rgn` itself ends.\n pub(crate) struct Reservations<'a, 'gcx: 'tcx, 'tcx: 'a>(pub(crate) Borrows<'a, 'gcx, 'tcx>);\n \n /// The `ActiveBorrows` analysis is the second of the two flow\n /// analyses tracking (phased) borrows. It computes where any given\n /// borrow `&assigned = &'rgn borrowed` is *active*, which starts at\n /// the first use of `assigned` after the reservation has started, and\n-/// ends whereever `'rgn` itself ends.\n+/// ends wherever `'rgn` itself ends.\n pub(crate) struct ActiveBorrows<'a, 'gcx: 'tcx, 'tcx: 'a>(pub(crate) Borrows<'a, 'gcx, 'tcx>);\n \n impl<'a, 'gcx, 'tcx> Reservations<'a, 'gcx, 'tcx> {"}, {"sha": "3491faf9cdac0bb25e08d2f88c61660f31c49d06", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -365,7 +365,7 @@ with `#[derive(Clone)]`.\n Some types have no ownership semantics at all and are trivial to duplicate. An\n example is `i32` and the other number types. We don't have to call `.clone()` to\n clone them, because they are marked `Copy` in addition to `Clone`.  Implicit\n-cloning is more convienient in this case. We can mark our own types `Copy` if\n+cloning is more convenient in this case. We can mark our own types `Copy` if\n all their members also are marked `Copy`.\n \n In the example below, we implement a `Point` type. Because it only stores two"}, {"sha": "3578164feb7c5796f5dcd628f0e44d0e5b186989", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -84,7 +84,7 @@ pub struct Frame<'tcx> {\n     /// return).\n     pub block: mir::BasicBlock,\n \n-    /// The index of the currently evaluated statment.\n+    /// The index of the currently evaluated statement.\n     pub stmt: usize,\n }\n "}, {"sha": "a5078187a57e30d14e60a7981487ce0d942f08ce", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -68,7 +68,7 @@ pub enum InstantiationMode {\n         /// however, our local copy may conflict with other crates also\n         /// inlining the same function.\n         ///\n-        /// This flag indicates that this situation is occuring, and informs\n+        /// This flag indicates that this situation is occurring, and informs\n         /// symbol name calculation that some extra mangling is needed to\n         /// avoid conflicts. Note that this may eventually go away entirely if\n         /// ThinLTO enables us to *always* have a globally shared instance of a"}, {"sha": "6ae047609535e51ba992d8ff657aeee07ae376da", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -781,7 +781,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n     // Additionally, until better reachability analysis for macros 2.0 is available,\n     // we prohibit access to private statics from other crates, this allows to give\n     // more code internal visibility at link time. (Access to private functions\n-    // is already prohibited by type privacy for funciton types.)\n+    // is already prohibited by type privacy for function types.)\n     fn visit_qpath(&mut self, qpath: &'tcx hir::QPath, id: ast::NodeId, span: Span) {\n         let def = match *qpath {\n             hir::QPath::Resolved(_, ref path) => match path.def {"}, {"sha": "a757ac92df5c1cd29f5613d382f6c29511c2b50c", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -17,7 +17,7 @@\n // `use` directives.\n //\n // Unused trait imports can't be checked until the method resolution. We save\n-// candidates here, and do the acutal check in librustc_typeck/check_unused.rs.\n+// candidates here, and do the actual check in librustc_typeck/check_unused.rs.\n \n use std::ops::{Deref, DerefMut};\n "}, {"sha": "d8e03552a6a6fd917d5f750f8fcbaac6f86eade1", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -1440,7 +1440,7 @@ impl<'a> Resolver<'a> {\n     /// Rustdoc uses this to resolve things in a recoverable way. ResolutionError<'a>\n     /// isn't something that can be returned because it can't be made to live that long,\n     /// and also it's a private type. Fortunately rustdoc doesn't need to know the error,\n-    /// just that an error occured.\n+    /// just that an error occurred.\n     pub fn resolve_str_path_error(&mut self, span: Span, path_str: &str, is_value: bool)\n         -> Result<hir::Path, ()> {\n         use std::iter;"}, {"sha": "438ab3a3513fcc2f24bf39bd7de31b22753ce867", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -186,7 +186,7 @@ impl<'a> Resolver<'a> {\n         }\n \n         let check_usable = |this: &mut Self, binding: &'a NameBinding<'a>| {\n-            // `extern crate` are always usable for backwards compatability, see issue #37020.\n+            // `extern crate` are always usable for backwards compatibility, see issue #37020.\n             let usable = this.is_accessible(binding.vis) || binding.is_extern_crate();\n             if usable { Ok(binding) } else { Err(Determined) }\n         };"}, {"sha": "ab354a30d41516f530466a5c07c3ce1d1d017139", "filename": "src/librustc_trans/back/lto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_trans%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_trans%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flto.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -84,7 +84,7 @@ impl LtoModuleTranslation {\n         }\n     }\n \n-    /// A \"guage\" of how costly it is to optimize this module, used to sort\n+    /// A \"gauge\" of how costly it is to optimize this module, used to sort\n     /// biggest modules first.\n     pub fn cost(&self) -> u64 {\n         match *self {\n@@ -726,7 +726,7 @@ impl ThinModule {\n         // which was basically a resurgence of #45511 after LLVM's bug 35212 was\n         // fixed.\n         //\n-        // This function below is a huge hack around tihs problem. The function\n+        // This function below is a huge hack around this problem. The function\n         // below is defined in `PassWrapper.cpp` and will basically \"merge\"\n         // all `DICompileUnit` instances in a module. Basically it'll take all\n         // the objects, rewrite all pointers of `DISubprogram` to point to the"}, {"sha": "d4e05a18e3a506cbdabd781d3e710c58b99b352c", "filename": "src/librustc_trans/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_trans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_trans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbuilder.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -1240,7 +1240,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// on), and `ptr` is nonzero-sized, then extracts the size of `ptr`\n     /// and the intrinsic for `lt` and passes them to `emit`, which is in\n     /// charge of generating code to call the passed intrinsic on whatever\n-    /// block of generated code is targetted for the intrinsic.\n+    /// block of generated code is targeted for the intrinsic.\n     ///\n     /// If LLVM lifetime intrinsic support is disabled (i.e.  optimizations\n     /// off) or `ptr` is zero-sized, then no-op (does not call `emit`)."}, {"sha": "34ac44cec025a3dd0af8ee2903affcedd5fe3b8f", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -844,7 +844,7 @@ fn cast_float_to_int(bx: &Builder,\n     // They are exactly equal to int_ty::{MIN,MAX} if float_ty has enough significand bits.\n     // Otherwise, int_ty::MAX must be rounded towards zero, as it is one less than a power of two.\n     // int_ty::MIN, however, is either zero or a negative power of two and is thus exactly\n-    // representable. Note that this only works if float_ty's exponent range is sufficently large.\n+    // representable. Note that this only works if float_ty's exponent range is sufficiently large.\n     // f16 or 256 bit integers would break this property. Right now the smallest float type is f32\n     // with exponents ranging up to 127, which is barely enough for i128::MIN = -2^127.\n     // On the other hand, f_max works even if int_ty::MAX is greater than float_ty::MAX. Because"}, {"sha": "9943a9bd398aa1d9d29323832cb2f70db8312dd9", "filename": "src/librustc_trans_utils/trans_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_trans_utils%2Ftrans_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustc_trans_utils%2Ftrans_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Ftrans_crate.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -151,7 +151,7 @@ impl MetadataLoader for NoLlvmMetadataLoader {\n             }\n         }\n \n-        Err(\"Couldnt find metadata section\".to_string())\n+        Err(\"Couldn't find metadata section\".to_string())\n     }\n \n     fn get_dylib_metadata("}, {"sha": "09d0a0f610b7bda4bb4525476e30d569bcdfc89e", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -2,7 +2,6 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustdoc\"\n version = \"0.0.0\"\n-build = \"build.rs\"\n \n [lib]\n name = \"rustdoc\"\n@@ -12,9 +11,4 @@ doctest = false\n \n [dependencies]\n pulldown-cmark = { version = \"0.1.0\", default-features = false }\n-html-diff = \"0.0.6\"\n tempdir = \"0.3\"\n-\n-[build-dependencies]\n-build_helper = { path = \"../build_helper\" }\n-cc = \"1.0.1\""}, {"sha": "276825bd31a75ed41778cf5e8465a45ccdbbb91c", "filename": "src/librustdoc/build.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1ad094d81c97b3d2dd8e980ccd1475a80647540d/src%2Flibrustdoc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad094d81c97b3d2dd8e980ccd1475a80647540d/src%2Flibrustdoc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fbuild.rs?ref=1ad094d81c97b3d2dd8e980ccd1475a80647540d", "patch": "@@ -1,32 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-extern crate build_helper;\n-extern crate cc;\n-\n-fn main() {\n-    let src_dir = std::path::Path::new(\"../rt/hoedown/src\");\n-    build_helper::rerun_if_changed_anything_in_dir(src_dir);\n-    let mut cfg = cc::Build::new();\n-    cfg.file(\"../rt/hoedown/src/autolink.c\")\n-       .file(\"../rt/hoedown/src/buffer.c\")\n-       .file(\"../rt/hoedown/src/document.c\")\n-       .file(\"../rt/hoedown/src/escape.c\")\n-       .file(\"../rt/hoedown/src/html.c\")\n-       .file(\"../rt/hoedown/src/html_blocks.c\")\n-       .file(\"../rt/hoedown/src/html_smartypants.c\")\n-       .file(\"../rt/hoedown/src/stack.c\")\n-       .file(\"../rt/hoedown/src/version.c\")\n-       .warnings(false)\n-       .include(src_dir)\n-       .warnings(false)\n-       .compile(\"hoedown\");\n-}\n-"}, {"sha": "7f51b8f68ae491a3db521a5fbe1c8dff05c8ed2c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -1050,7 +1050,7 @@ impl Clean<Attributes> for [ast::Attribute] {\n \n         if UnstableFeatures::from_environment().is_nightly_build() {\n             let dox = attrs.collapsed_doc_value().unwrap_or_else(String::new);\n-            for link in markdown_links(&dox, cx.render_type) {\n+            for link in markdown_links(&dox) {\n                 // bail early for real links\n                 if link.contains('/') {\n                     continue;"}, {"sha": "81babd803a5e933be72f484af926a8c3ad3d397e", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -36,7 +36,6 @@ use std::path::PathBuf;\n use visit_ast::RustdocVisitor;\n use clean;\n use clean::Clean;\n-use html::markdown::RenderType;\n use html::render::RenderInfo;\n \n pub use rustc::session::config::Input;\n@@ -59,9 +58,6 @@ pub struct DocContext<'a, 'tcx: 'a, 'rcx: 'a> {\n     pub renderinfo: RefCell<RenderInfo>,\n     /// Later on moved through `clean::Crate` into `html::render::CACHE_KEY`\n     pub external_traits: RefCell<FxHashMap<DefId, clean::Trait>>,\n-    /// Which markdown renderer to use when extracting links.\n-    pub render_type: RenderType,\n-\n     // The current set of type and lifetime substitutions,\n     // for expanding type aliases at the HIR level:\n \n@@ -111,8 +107,7 @@ pub fn run_core(search_paths: SearchPaths,\n                 triple: Option<String>,\n                 maybe_sysroot: Option<PathBuf>,\n                 allow_warnings: bool,\n-                force_unstable_if_unmarked: bool,\n-                render_type: RenderType) -> (clean::Crate, RenderInfo)\n+                force_unstable_if_unmarked: bool) -> (clean::Crate, RenderInfo)\n {\n     // Parse, resolve, and typecheck the given crate.\n \n@@ -242,7 +237,6 @@ pub fn run_core(search_paths: SearchPaths,\n             access_levels: RefCell::new(access_levels),\n             external_traits: Default::default(),\n             renderinfo: Default::default(),\n-            render_type,\n             ty_substs: Default::default(),\n             lt_substs: Default::default(),\n             mod_ids: Default::default(),"}, {"sha": "6c328a87208aa73c211502192d1ad7273899bb6d", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -11,7 +11,7 @@\n use std::fs;\n use std::path::Path;\n use std::str;\n-use html::markdown::{Markdown, RenderType};\n+use html::markdown::Markdown;\n \n #[derive(Clone)]\n pub struct ExternalHtml {\n@@ -28,7 +28,7 @@ pub struct ExternalHtml {\n \n impl ExternalHtml {\n     pub fn load(in_header: &[String], before_content: &[String], after_content: &[String],\n-                md_before_content: &[String], md_after_content: &[String], render: RenderType)\n+                md_before_content: &[String], md_after_content: &[String])\n             -> Option<ExternalHtml> {\n         load_external_files(in_header)\n             .and_then(|ih|\n@@ -37,15 +37,15 @@ impl ExternalHtml {\n             )\n             .and_then(|(ih, bc)|\n                 load_external_files(md_before_content)\n-                    .map(|m_bc| (ih, format!(\"{}{}\", bc, Markdown(&m_bc, &[], render))))\n+                    .map(|m_bc| (ih, format!(\"{}{}\", bc, Markdown(&m_bc, &[]))))\n             )\n             .and_then(|(ih, bc)|\n                 load_external_files(after_content)\n                     .map(|ac| (ih, bc, ac))\n             )\n             .and_then(|(ih, bc, ac)|\n                 load_external_files(md_after_content)\n-                    .map(|m_ac| (ih, bc, format!(\"{}{}\", ac, Markdown(&m_ac, &[], render))))\n+                    .map(|m_ac| (ih, bc, format!(\"{}{}\", ac, Markdown(&m_ac, &[]))))\n             )\n             .map(|(ih, bc, ac)|\n                 ExternalHtml {"}, {"sha": "2913ea6a78ec3a92be82d426309a0c84b9d83b77", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -25,8 +25,7 @@ use rustc::hir;\n use clean::{self, PrimitiveType};\n use core::DocAccessLevels;\n use html::item_type::ItemType;\n-use html::render;\n-use html::render::{cache, CURRENT_LOCATION_KEY};\n+use html::render::{self, cache, CURRENT_LOCATION_KEY};\n \n /// Helper to render an optional visibility with a space after it (if the\n /// visibility is preset)"}, {"sha": "fedd802ce557f06c457397959cb6cd769f47b2a9", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 60, "deletions": 689, "changes": 749, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -18,18 +18,15 @@\n //! ```\n //! #![feature(rustc_private)]\n //!\n-//! use rustdoc::html::markdown::{RenderType, Markdown};\n+//! use rustdoc::html::markdown::Markdown;\n //!\n //! let s = \"My *markdown* _text_\";\n-//! let html = format!(\"{}\", Markdown(s, RenderType::Pulldown));\n+//! let html = format!(\"{}\", Markdown(s));\n //! // ... something using html\n //! ```\n \n #![allow(non_camel_case_types)]\n \n-use libc;\n-use std::slice;\n-\n use std::cell::RefCell;\n use std::collections::{HashMap, VecDeque};\n use std::default::Default;\n@@ -41,29 +38,21 @@ use syntax::codemap::Span;\n use html::render::derive_id;\n use html::toc::TocBuilder;\n use html::highlight;\n-use html::escape::Escape;\n use test;\n \n use pulldown_cmark::{html, Event, Tag, Parser};\n use pulldown_cmark::{Options, OPTION_ENABLE_FOOTNOTES, OPTION_ENABLE_TABLES};\n \n-#[derive(PartialEq, Debug, Clone, Copy)]\n-pub enum RenderType {\n-    Hoedown,\n-    Pulldown,\n-}\n-\n /// A unit struct which has the `fmt::Display` trait implemented. When\n /// formatted, this struct will emit the HTML corresponding to the rendered\n /// version of the contained markdown string.\n /// The second parameter is a list of link replacements\n-// The third parameter is whether we need a shorter version or not.\n-pub struct Markdown<'a>(pub &'a str, pub &'a [(String, String)], pub RenderType);\n+pub struct Markdown<'a>(pub &'a str, pub &'a [(String, String)]);\n /// A unit struct like `Markdown`, that renders the markdown with a\n /// table of contents.\n-pub struct MarkdownWithToc<'a>(pub &'a str, pub RenderType);\n+pub struct MarkdownWithToc<'a>(pub &'a str);\n /// A unit struct like `Markdown`, that renders the markdown escaping HTML tags.\n-pub struct MarkdownHtml<'a>(pub &'a str, pub RenderType);\n+pub struct MarkdownHtml<'a>(pub &'a str);\n /// A unit struct like `Markdown`, that renders only the first paragraph.\n pub struct MarkdownSummaryLine<'a>(pub &'a str, pub &'a [(String, String)]);\n \n@@ -111,14 +100,6 @@ fn map_line(s: &str) -> Line {\n     }\n }\n \n-/// Returns a new string with all consecutive whitespace collapsed into\n-/// single spaces.\n-///\n-/// Any leading or trailing whitespace will be trimmed.\n-fn collapse_whitespace(s: &str) -> String {\n-    s.split_whitespace().collect::<Vec<_>>().join(\" \")\n-}\n-\n /// Convert chars from a title for an id.\n ///\n /// \"Hello, world!\" -> \"hello-world\"\n@@ -453,543 +434,6 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for Footnotes<'a, I> {\n     }\n }\n \n-const DEF_OUNIT: libc::size_t = 64;\n-const HOEDOWN_EXT_NO_INTRA_EMPHASIS: libc::c_uint = 1 << 11;\n-const HOEDOWN_EXT_TABLES: libc::c_uint = 1 << 0;\n-const HOEDOWN_EXT_FENCED_CODE: libc::c_uint = 1 << 1;\n-const HOEDOWN_EXT_AUTOLINK: libc::c_uint = 1 << 3;\n-const HOEDOWN_EXT_STRIKETHROUGH: libc::c_uint = 1 << 4;\n-const HOEDOWN_EXT_SUPERSCRIPT: libc::c_uint = 1 << 8;\n-const HOEDOWN_EXT_FOOTNOTES: libc::c_uint = 1 << 2;\n-const HOEDOWN_HTML_ESCAPE: libc::c_uint = 1 << 1;\n-\n-const HOEDOWN_EXTENSIONS: libc::c_uint =\n-    HOEDOWN_EXT_NO_INTRA_EMPHASIS | HOEDOWN_EXT_TABLES |\n-    HOEDOWN_EXT_FENCED_CODE | HOEDOWN_EXT_AUTOLINK |\n-    HOEDOWN_EXT_STRIKETHROUGH | HOEDOWN_EXT_SUPERSCRIPT |\n-    HOEDOWN_EXT_FOOTNOTES;\n-\n-enum hoedown_document {}\n-\n-type blockcodefn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n-                                 *const hoedown_buffer, *const hoedown_renderer_data,\n-                                 libc::size_t);\n-\n-type blockquotefn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n-                                  *const hoedown_renderer_data, libc::size_t);\n-\n-type headerfn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n-                              libc::c_int, *const hoedown_renderer_data,\n-                              libc::size_t);\n-\n-type blockhtmlfn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n-                                 *const hoedown_renderer_data, libc::size_t);\n-\n-type codespanfn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n-                                *const hoedown_renderer_data, libc::size_t) -> libc::c_int;\n-\n-type linkfn = extern \"C\" fn (*mut hoedown_buffer, *const hoedown_buffer,\n-                             *const hoedown_buffer, *const hoedown_buffer,\n-                             *const hoedown_renderer_data, libc::size_t) -> libc::c_int;\n-\n-type entityfn = extern \"C\" fn (*mut hoedown_buffer, *const hoedown_buffer,\n-                               *const hoedown_renderer_data, libc::size_t);\n-\n-type normaltextfn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n-                                  *const hoedown_renderer_data, libc::size_t);\n-\n-#[repr(C)]\n-struct hoedown_renderer_data {\n-    opaque: *mut libc::c_void,\n-}\n-\n-#[repr(C)]\n-struct hoedown_renderer {\n-    opaque: *mut libc::c_void,\n-\n-    blockcode: Option<blockcodefn>,\n-    blockquote: Option<blockquotefn>,\n-    header: Option<headerfn>,\n-\n-    other_block_level_callbacks: [libc::size_t; 11],\n-\n-    blockhtml: Option<blockhtmlfn>,\n-\n-    /* span level callbacks - NULL or return 0 prints the span verbatim */\n-    autolink: libc::size_t, // unused\n-    codespan: Option<codespanfn>,\n-    other_span_level_callbacks_1: [libc::size_t; 7],\n-    link: Option<linkfn>,\n-    other_span_level_callbacks_2: [libc::size_t; 6],\n-\n-    /* low level callbacks - NULL copies input directly into the output */\n-    entity: Option<entityfn>,\n-    normal_text: Option<normaltextfn>,\n-\n-    /* header and footer */\n-    other_callbacks: [libc::size_t; 2],\n-}\n-\n-#[repr(C)]\n-struct hoedown_html_renderer_state {\n-    opaque: *mut libc::c_void,\n-    toc_data: html_toc_data,\n-    flags: libc::c_uint,\n-    link_attributes: Option<extern \"C\" fn(*mut hoedown_buffer,\n-                                          *const hoedown_buffer,\n-                                          *const hoedown_renderer_data)>,\n-}\n-\n-#[repr(C)]\n-struct html_toc_data {\n-    header_count: libc::c_int,\n-    current_level: libc::c_int,\n-    level_offset: libc::c_int,\n-    nesting_level: libc::c_int,\n-}\n-\n-#[repr(C)]\n-struct hoedown_buffer {\n-    data: *const u8,\n-    size: libc::size_t,\n-    asize: libc::size_t,\n-    unit: libc::size_t,\n-}\n-\n-struct MyOpaque {\n-    dfltblk: extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n-                           *const hoedown_buffer, *const hoedown_renderer_data,\n-                           libc::size_t),\n-    toc_builder: Option<TocBuilder>,\n-    links_out: Option<Vec<String>>,\n-    links_replace: Vec<(String, String)>,\n-}\n-\n-extern {\n-    fn hoedown_html_renderer_new(render_flags: libc::c_uint,\n-                                 nesting_level: libc::c_int)\n-        -> *mut hoedown_renderer;\n-    fn hoedown_html_renderer_free(renderer: *mut hoedown_renderer);\n-\n-    fn hoedown_document_new(rndr: *const hoedown_renderer,\n-                            extensions: libc::c_uint,\n-                            max_nesting: libc::size_t) -> *mut hoedown_document;\n-    fn hoedown_document_render(doc: *mut hoedown_document,\n-                               ob: *mut hoedown_buffer,\n-                               document: *const u8,\n-                               doc_size: libc::size_t);\n-    fn hoedown_document_free(md: *mut hoedown_document);\n-\n-    fn hoedown_buffer_new(unit: libc::size_t) -> *mut hoedown_buffer;\n-    fn hoedown_buffer_free(b: *mut hoedown_buffer);\n-    fn hoedown_buffer_put(b: *mut hoedown_buffer, c: *const u8, len: libc::size_t);\n-}\n-\n-impl hoedown_buffer {\n-    fn as_bytes(&self) -> &[u8] {\n-        unsafe { slice::from_raw_parts(self.data, self.size as usize) }\n-    }\n-}\n-\n-extern fn hoedown_block(ob: *mut hoedown_buffer, orig_text: *const hoedown_buffer,\n-                        lang: *const hoedown_buffer, data: *const hoedown_renderer_data,\n-                        line: libc::size_t) {\n-    unsafe {\n-        if orig_text.is_null() { return }\n-\n-        let opaque = (*data).opaque as *mut hoedown_html_renderer_state;\n-        let my_opaque: &MyOpaque = &*((*opaque).opaque as *const MyOpaque);\n-        let text = (*orig_text).as_bytes();\n-        let origtext = str::from_utf8(text).unwrap();\n-        let origtext = origtext.trim_left();\n-        debug!(\"docblock: ==============\\n{:?}\\n=======\", text);\n-        let mut compile_fail = false;\n-        let mut ignore = false;\n-\n-        let rendered = if lang.is_null() || origtext.is_empty() {\n-            false\n-        } else {\n-            let rlang = (*lang).as_bytes();\n-            let rlang = str::from_utf8(rlang).unwrap();\n-            let parse_result = LangString::parse(rlang);\n-            compile_fail = parse_result.compile_fail;\n-            ignore = parse_result.ignore;\n-            if !parse_result.rust {\n-                (my_opaque.dfltblk)(ob, orig_text, lang,\n-                                    opaque as *const hoedown_renderer_data,\n-                                    line);\n-                true\n-            } else {\n-                false\n-            }\n-        };\n-\n-        let lines = origtext.lines().filter_map(|l| map_line(l).for_html());\n-        let text = lines.collect::<Vec<&str>>().join(\"\\n\");\n-        if rendered { return }\n-        PLAYGROUND.with(|play| {\n-            // insert newline to clearly separate it from the\n-            // previous block so we can shorten the html output\n-            let mut s = String::from(\"\\n\");\n-            let playground_button = play.borrow().as_ref().and_then(|&(ref krate, ref url)| {\n-                if url.is_empty() {\n-                    return None;\n-                }\n-                let test = origtext.lines()\n-                    .map(|l| map_line(l).for_code())\n-                    .collect::<Vec<&str>>().join(\"\\n\");\n-                let krate = krate.as_ref().map(|s| &**s);\n-                let (test, _) = test::make_test(&test, krate, false,\n-                                                &Default::default());\n-                let channel = if test.contains(\"#![feature(\") {\n-                    \"&amp;version=nightly\"\n-                } else {\n-                    \"\"\n-                };\n-                // These characters don't need to be escaped in a URI.\n-                // FIXME: use a library function for percent encoding.\n-                fn dont_escape(c: u8) -> bool {\n-                    (b'a' <= c && c <= b'z') ||\n-                    (b'A' <= c && c <= b'Z') ||\n-                    (b'0' <= c && c <= b'9') ||\n-                    c == b'-' || c == b'_' || c == b'.' ||\n-                    c == b'~' || c == b'!' || c == b'\\'' ||\n-                    c == b'(' || c == b')' || c == b'*'\n-                }\n-                let mut test_escaped = String::new();\n-                for b in test.bytes() {\n-                    if dont_escape(b) {\n-                        test_escaped.push(char::from(b));\n-                    } else {\n-                        write!(test_escaped, \"%{:02X}\", b).unwrap();\n-                    }\n-                }\n-                Some(format!(\n-                    r#\"<a class=\"test-arrow\" target=\"_blank\" href=\"{}?code={}{}\">Run</a>\"#,\n-                    url, test_escaped, channel\n-                ))\n-            });\n-            let tooltip = if ignore {\n-                Some((\"This example is not tested\", \"ignore\"))\n-            } else if compile_fail {\n-                Some((\"This example deliberately fails to compile\", \"compile_fail\"))\n-            } else {\n-                None\n-            };\n-            s.push_str(&highlight::render_with_highlighting(\n-                           &text,\n-                           Some(&format!(\"rust-example-rendered{}\",\n-                                         if ignore { \" ignore\" }\n-                                         else if compile_fail { \" compile_fail\" }\n-                                         else { \"\" })),\n-                           None,\n-                           playground_button.as_ref().map(String::as_str),\n-                           tooltip));\n-            hoedown_buffer_put(ob, s.as_ptr(), s.len());\n-        })\n-    }\n-}\n-\n-extern fn hoedown_header(ob: *mut hoedown_buffer, text: *const hoedown_buffer,\n-                         level: libc::c_int, data: *const hoedown_renderer_data,\n-                         _: libc::size_t) {\n-    // hoedown does this, we may as well too\n-    unsafe { hoedown_buffer_put(ob, \"\\n\".as_ptr(), 1); }\n-\n-    // Extract the text provided\n-    let s = if text.is_null() {\n-        \"\".to_owned()\n-    } else {\n-        let s = unsafe { (*text).as_bytes() };\n-        str::from_utf8(&s).unwrap().to_owned()\n-    };\n-\n-    // Discard '<em>', '<code>' tags and some escaped characters,\n-    // transform the contents of the header into a hyphenated string\n-    // without non-alphanumeric characters other than '-' and '_'.\n-    //\n-    // This is a terrible hack working around how hoedown gives us rendered\n-    // html for text rather than the raw text.\n-    let mut id = s.clone();\n-    let repl_sub = vec![\"<em>\", \"</em>\", \"<code>\", \"</code>\",\n-                        \"<strong>\", \"</strong>\",\n-                        \"&lt;\", \"&gt;\", \"&amp;\", \"&#39;\", \"&quot;\"];\n-    for sub in repl_sub {\n-        id = id.replace(sub, \"\");\n-    }\n-    let id = id.chars().filter_map(|c| {\n-        if c.is_alphanumeric() || c == '-' || c == '_' {\n-            if c.is_ascii() {\n-                Some(c.to_ascii_lowercase())\n-            } else {\n-                Some(c)\n-            }\n-        } else if c.is_whitespace() && c.is_ascii() {\n-            Some('-')\n-        } else {\n-            None\n-        }\n-    }).collect::<String>();\n-\n-    let opaque = unsafe { (*data).opaque as *mut hoedown_html_renderer_state };\n-    let opaque = unsafe { &mut *((*opaque).opaque as *mut MyOpaque) };\n-\n-    let id = derive_id(id);\n-\n-    let sec = opaque.toc_builder.as_mut().map_or(\"\".to_owned(), |builder| {\n-        format!(\"{} \", builder.push(level as u32, s.clone(), id.clone()))\n-    });\n-\n-    // Render the HTML\n-    let text = format!(\"<h{lvl} id='{id}' class='section-header'>\\\n-                       <a href='#{id}'>{sec}{}</a></h{lvl}>\",\n-                       s, lvl = level, id = id, sec = sec);\n-\n-    unsafe { hoedown_buffer_put(ob, text.as_ptr(), text.len()); }\n-}\n-\n-extern fn hoedown_codespan(\n-    ob: *mut hoedown_buffer,\n-    text: *const hoedown_buffer,\n-    _: *const hoedown_renderer_data,\n-    _: libc::size_t\n-) -> libc::c_int {\n-    let content = if text.is_null() {\n-        \"\".to_owned()\n-    } else {\n-        let bytes = unsafe { (*text).as_bytes() };\n-        let s = str::from_utf8(bytes).unwrap();\n-        collapse_whitespace(s)\n-    };\n-\n-    let content = format!(\"<code>{}</code>\", Escape(&content));\n-    unsafe {\n-        hoedown_buffer_put(ob, content.as_ptr(), content.len());\n-    }\n-    // Return anything except 0, which would mean \"also print the code span verbatim\".\n-    1\n-}\n-\n-pub fn render(w: &mut fmt::Formatter,\n-              s: &str,\n-              links: &[(String, String)],\n-              print_toc: bool,\n-              html_flags: libc::c_uint) -> fmt::Result {\n-    // copied from pulldown-cmark (MIT license, Google)\n-    // https://github.com/google/pulldown-cmark\n-    // this is temporary till we remove the hoedown renderer\n-    static HREF_SAFE: [u8; 128] = [\n-            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-            0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n-            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1,\n-            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n-            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1,\n-            0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n-            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,\n-        ];\n-\n-    static HEX_CHARS: &'static [u8] = b\"0123456789ABCDEF\";\n-\n-    fn escape_href(ob: &mut String, s: &str) {\n-        let mut mark = 0;\n-        for i in 0..s.len() {\n-            let c = s.as_bytes()[i];\n-            if c >= 0x80 || HREF_SAFE[c as usize] == 0 {\n-                // character needing escape\n-\n-                // write partial substring up to mark\n-                if mark < i {\n-                    ob.push_str(&s[mark..i]);\n-                }\n-                match c {\n-                    b'&' => {\n-                        ob.push_str(\"&amp;\");\n-                    },\n-                    b'\\'' => {\n-                        ob.push_str(\"&#x27;\");\n-                    },\n-                    _ => {\n-                        let mut buf = [0u8; 3];\n-                        buf[0] = b'%';\n-                        buf[1] = HEX_CHARS[((c as usize) >> 4) & 0xF];\n-                        buf[2] = HEX_CHARS[(c as usize) & 0xF];\n-                        ob.push_str(str::from_utf8(&buf).unwrap());\n-                    }\n-                }\n-                mark = i + 1;  // all escaped characters are ASCII\n-            }\n-        }\n-        ob.push_str(&s[mark..]);\n-    }\n-    // end code copied from pulldown-cmark\n-\n-    extern fn hoedown_link(\n-        ob: *mut hoedown_buffer,\n-        content: *const hoedown_buffer,\n-        link: *const hoedown_buffer,\n-        title: *const hoedown_buffer,\n-        data: *const hoedown_renderer_data,\n-        _line: libc::size_t\n-    ) -> libc::c_int {\n-        if link.is_null() {\n-            return 0;\n-        }\n-\n-        let opaque = unsafe { (*data).opaque as *mut hoedown_html_renderer_state };\n-        let opaque = unsafe { &mut *((*opaque).opaque as *mut MyOpaque) };\n-\n-        let link = {\n-            let s = unsafe { (*link).as_bytes() };\n-            str::from_utf8(s).unwrap().to_owned()\n-        };\n-\n-        let link = if let Some(&(_, ref new_target)) = opaque.links_replace\n-                                                             .iter()\n-                                                             .find(|t| &*t.0 == &*link) {\n-            new_target.to_owned()\n-        } else {\n-            link\n-        };\n-\n-        let content = unsafe {\n-            content.as_ref().map(|c| {\n-                let s = c.as_bytes();\n-                str::from_utf8(s).unwrap().to_owned()\n-            })\n-        };\n-\n-        let mut link_buf = String::new();\n-        escape_href(&mut link_buf, &link);\n-\n-        let title = unsafe {\n-            title.as_ref().map(|t| {\n-                let s = t.as_bytes();\n-                str::from_utf8(s).unwrap().to_owned()\n-            })\n-        };\n-\n-        let link_out = format!(\"<a href=\\\"{link}\\\"{title}>{content}</a>\",\n-                               link = link_buf,\n-                               title = title.map_or(String::new(),\n-                                                    |t| format!(\" title=\\\"{}\\\"\", Escape(&t))),\n-                               content = content.unwrap_or(String::new()));\n-\n-        unsafe { hoedown_buffer_put(ob, link_out.as_ptr(), link_out.len()); }\n-\n-        //return \"anything but 0\" to show we've written the link in\n-        1\n-    }\n-\n-    unsafe {\n-        let ob = hoedown_buffer_new(DEF_OUNIT);\n-        let renderer = hoedown_html_renderer_new(html_flags, 0);\n-        let mut opaque = MyOpaque {\n-            dfltblk: (*renderer).blockcode.unwrap(),\n-            toc_builder: if print_toc {Some(TocBuilder::new())} else {None},\n-            links_out: None,\n-            links_replace: links.to_vec(),\n-        };\n-        (*((*renderer).opaque as *mut hoedown_html_renderer_state)).opaque\n-                = &mut opaque as *mut _ as *mut libc::c_void;\n-        (*renderer).blockcode = Some(hoedown_block);\n-        (*renderer).header = Some(hoedown_header);\n-        (*renderer).codespan = Some(hoedown_codespan);\n-        (*renderer).link = Some(hoedown_link);\n-\n-        let document = hoedown_document_new(renderer, HOEDOWN_EXTENSIONS, 16);\n-        hoedown_document_render(document, ob, s.as_ptr(),\n-                                s.len() as libc::size_t);\n-        hoedown_document_free(document);\n-\n-        hoedown_html_renderer_free(renderer);\n-\n-        let mut ret = opaque.toc_builder.map_or(Ok(()), |builder| {\n-            write!(w, \"<nav id=\\\"TOC\\\">{}</nav>\", builder.into_toc())\n-        });\n-\n-        if ret.is_ok() {\n-            let buf = (*ob).as_bytes();\n-            ret = w.write_str(str::from_utf8(buf).unwrap());\n-        }\n-        hoedown_buffer_free(ob);\n-        ret\n-    }\n-}\n-\n-pub fn old_find_testable_code(doc: &str, tests: &mut ::test::Collector, position: Span) {\n-    extern fn block(_ob: *mut hoedown_buffer,\n-                    text: *const hoedown_buffer,\n-                    lang: *const hoedown_buffer,\n-                    data: *const hoedown_renderer_data,\n-                    line: libc::size_t) {\n-        unsafe {\n-            if text.is_null() { return }\n-            let block_info = if lang.is_null() {\n-                LangString::all_false()\n-            } else {\n-                let lang = (*lang).as_bytes();\n-                let s = str::from_utf8(lang).unwrap();\n-                LangString::parse(s)\n-            };\n-            if !block_info.rust { return }\n-            let text = (*text).as_bytes();\n-            let opaque = (*data).opaque as *mut hoedown_html_renderer_state;\n-            let tests = &mut *((*opaque).opaque as *mut ::test::Collector);\n-            let text = str::from_utf8(text).unwrap();\n-            let lines = text.lines().map(|l| map_line(l).for_code());\n-            let text = lines.collect::<Vec<&str>>().join(\"\\n\");\n-            let filename = tests.get_filename();\n-\n-            if tests.render_type == RenderType::Hoedown {\n-                let line = tests.get_line() + line;\n-                tests.add_test(text.to_owned(),\n-                               block_info.should_panic, block_info.no_run,\n-                               block_info.ignore, block_info.test_harness,\n-                               block_info.compile_fail, block_info.error_codes,\n-                               line, filename, block_info.allow_fail);\n-            } else {\n-                tests.add_old_test(text, filename);\n-            }\n-        }\n-    }\n-\n-    extern fn header(_ob: *mut hoedown_buffer,\n-                     text: *const hoedown_buffer,\n-                     level: libc::c_int, data: *const hoedown_renderer_data,\n-                     _: libc::size_t) {\n-        unsafe {\n-            let opaque = (*data).opaque as *mut hoedown_html_renderer_state;\n-            let tests = &mut *((*opaque).opaque as *mut ::test::Collector);\n-            if text.is_null() {\n-                tests.register_header(\"\", level as u32);\n-            } else {\n-                let text = (*text).as_bytes();\n-                let text = str::from_utf8(text).unwrap();\n-                tests.register_header(text, level as u32);\n-            }\n-        }\n-    }\n-\n-    tests.set_position(position);\n-    unsafe {\n-        let ob = hoedown_buffer_new(DEF_OUNIT);\n-        let renderer = hoedown_html_renderer_new(0, 0);\n-        (*renderer).blockcode = Some(block);\n-        (*renderer).header = Some(header);\n-        (*((*renderer).opaque as *mut hoedown_html_renderer_state)).opaque\n-                = tests as *mut _ as *mut libc::c_void;\n-\n-        let document = hoedown_document_new(renderer, HOEDOWN_EXTENSIONS, 16);\n-        hoedown_document_render(document, ob, doc.as_ptr(),\n-                                doc.len() as libc::size_t);\n-        hoedown_document_free(document);\n-\n-        hoedown_html_renderer_free(renderer);\n-        hoedown_buffer_free(ob);\n-    }\n-}\n-\n pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector, position: Span) {\n     tests.set_position(position);\n \n@@ -1139,88 +583,76 @@ impl LangString {\n \n impl<'a> fmt::Display for Markdown<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        let Markdown(md, links, render_type) = *self;\n+        let Markdown(md, links) = *self;\n \n         // This is actually common enough to special-case\n         if md.is_empty() { return Ok(()) }\n-        if render_type == RenderType::Hoedown {\n-            render(fmt, md, links, false, 0)\n-        } else {\n-            let mut opts = Options::empty();\n-            opts.insert(OPTION_ENABLE_TABLES);\n-            opts.insert(OPTION_ENABLE_FOOTNOTES);\n+        let mut opts = Options::empty();\n+        opts.insert(OPTION_ENABLE_TABLES);\n+        opts.insert(OPTION_ENABLE_FOOTNOTES);\n \n-            let p = Parser::new_ext(md, opts);\n+        let p = Parser::new_ext(md, opts);\n \n-            let mut s = String::with_capacity(md.len() * 3 / 2);\n+        let mut s = String::with_capacity(md.len() * 3 / 2);\n \n-            html::push_html(&mut s,\n-                            Footnotes::new(\n-                                CodeBlocks::new(\n-                                    LinkReplacer::new(\n-                                        HeadingLinks::new(p, None),\n-                                        links))));\n+        html::push_html(&mut s,\n+                        Footnotes::new(\n+                            CodeBlocks::new(\n+                                LinkReplacer::new(\n+                                    HeadingLinks::new(p, None),\n+                                    links))));\n \n-            fmt.write_str(&s)\n-        }\n+        fmt.write_str(&s)\n     }\n }\n \n impl<'a> fmt::Display for MarkdownWithToc<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        let MarkdownWithToc(md, render_type) = *self;\n+        let MarkdownWithToc(md) = *self;\n \n-        if render_type == RenderType::Hoedown {\n-            render(fmt, md, &[], true, 0)\n-        } else {\n-            let mut opts = Options::empty();\n-            opts.insert(OPTION_ENABLE_TABLES);\n-            opts.insert(OPTION_ENABLE_FOOTNOTES);\n+        let mut opts = Options::empty();\n+        opts.insert(OPTION_ENABLE_TABLES);\n+        opts.insert(OPTION_ENABLE_FOOTNOTES);\n \n-            let p = Parser::new_ext(md, opts);\n+        let p = Parser::new_ext(md, opts);\n \n-            let mut s = String::with_capacity(md.len() * 3 / 2);\n+        let mut s = String::with_capacity(md.len() * 3 / 2);\n \n-            let mut toc = TocBuilder::new();\n+        let mut toc = TocBuilder::new();\n \n-            html::push_html(&mut s,\n-                            Footnotes::new(CodeBlocks::new(HeadingLinks::new(p, Some(&mut toc)))));\n+        html::push_html(&mut s,\n+                        Footnotes::new(CodeBlocks::new(HeadingLinks::new(p, Some(&mut toc)))));\n \n-            write!(fmt, \"<nav id=\\\"TOC\\\">{}</nav>\", toc.into_toc())?;\n+        write!(fmt, \"<nav id=\\\"TOC\\\">{}</nav>\", toc.into_toc())?;\n \n-            fmt.write_str(&s)\n-        }\n+        fmt.write_str(&s)\n     }\n }\n \n impl<'a> fmt::Display for MarkdownHtml<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        let MarkdownHtml(md, render_type) = *self;\n+        let MarkdownHtml(md) = *self;\n \n         // This is actually common enough to special-case\n         if md.is_empty() { return Ok(()) }\n-        if render_type == RenderType::Hoedown {\n-            render(fmt, md, &[], false, HOEDOWN_HTML_ESCAPE)\n-        } else {\n-            let mut opts = Options::empty();\n-            opts.insert(OPTION_ENABLE_TABLES);\n-            opts.insert(OPTION_ENABLE_FOOTNOTES);\n+        let mut opts = Options::empty();\n+        opts.insert(OPTION_ENABLE_TABLES);\n+        opts.insert(OPTION_ENABLE_FOOTNOTES);\n \n-            let p = Parser::new_ext(md, opts);\n+        let p = Parser::new_ext(md, opts);\n \n-            // Treat inline HTML as plain text.\n-            let p = p.map(|event| match event {\n-                Event::Html(text) | Event::InlineHtml(text) => Event::Text(text),\n-                _ => event\n-            });\n+        // Treat inline HTML as plain text.\n+        let p = p.map(|event| match event {\n+            Event::Html(text) | Event::InlineHtml(text) => Event::Text(text),\n+            _ => event\n+        });\n \n-            let mut s = String::with_capacity(md.len() * 3 / 2);\n+        let mut s = String::with_capacity(md.len() * 3 / 2);\n \n-            html::push_html(&mut s,\n-                            Footnotes::new(CodeBlocks::new(HeadingLinks::new(p, None))));\n+        html::push_html(&mut s,\n+                        Footnotes::new(CodeBlocks::new(HeadingLinks::new(p, None))));\n \n-            fmt.write_str(&s)\n-        }\n+        fmt.write_str(&s)\n     }\n }\n \n@@ -1290,95 +722,34 @@ pub fn plain_summary_line(md: &str) -> String {\n     s\n }\n \n-pub fn markdown_links(md: &str, render_type: RenderType) -> Vec<String> {\n+pub fn markdown_links(md: &str) -> Vec<String> {\n     if md.is_empty() {\n         return vec![];\n     }\n \n-    match render_type {\n-        RenderType::Hoedown => {\n-            extern fn hoedown_link(\n-                _ob: *mut hoedown_buffer,\n-                _content: *const hoedown_buffer,\n-                link: *const hoedown_buffer,\n-                _title: *const hoedown_buffer,\n-                data: *const hoedown_renderer_data,\n-                _line: libc::size_t\n-            ) -> libc::c_int {\n-                if link.is_null() {\n-                    return 0;\n-                }\n-\n-                let opaque = unsafe { (*data).opaque as *mut hoedown_html_renderer_state };\n-                let opaque = unsafe { &mut *((*opaque).opaque as *mut MyOpaque) };\n-\n-                if let Some(ref mut links) = opaque.links_out {\n-                    let s = unsafe { (*link).as_bytes() };\n-                    let s = str::from_utf8(&s).unwrap().to_owned();\n-\n-                    debug!(\"found link: {}\", s);\n-\n-                    links.push(s);\n-                }\n-\n-                //returning 0 here means \"emit the span verbatim\", but we're not using the output\n-                //anyway so we don't really care\n-                0\n-            }\n-\n-            unsafe {\n-                let ob = hoedown_buffer_new(DEF_OUNIT);\n-                let renderer = hoedown_html_renderer_new(0, 0);\n-                let mut opaque = MyOpaque {\n-                    dfltblk: (*renderer).blockcode.unwrap(),\n-                    toc_builder: None,\n-                    links_out: Some(vec![]),\n-                    links_replace: vec![],\n-                };\n-                (*((*renderer).opaque as *mut hoedown_html_renderer_state)).opaque\n-                        = &mut opaque as *mut _ as *mut libc::c_void;\n-                (*renderer).header = Some(hoedown_header);\n-                (*renderer).codespan = Some(hoedown_codespan);\n-                (*renderer).link = Some(hoedown_link);\n+    let mut opts = Options::empty();\n+    opts.insert(OPTION_ENABLE_TABLES);\n+    opts.insert(OPTION_ENABLE_FOOTNOTES);\n \n-                let document = hoedown_document_new(renderer, HOEDOWN_EXTENSIONS, 16);\n-                hoedown_document_render(document, ob, md.as_ptr(),\n-                                        md.len() as libc::size_t);\n-                hoedown_document_free(document);\n+    let p = Parser::new_ext(md, opts);\n \n-                hoedown_html_renderer_free(renderer);\n-                hoedown_buffer_free(ob);\n+    let iter = Footnotes::new(HeadingLinks::new(p, None));\n+    let mut links = vec![];\n \n-                opaque.links_out.unwrap()\n-            }\n-        }\n-        RenderType::Pulldown => {\n-            let mut opts = Options::empty();\n-            opts.insert(OPTION_ENABLE_TABLES);\n-            opts.insert(OPTION_ENABLE_FOOTNOTES);\n-\n-            let p = Parser::new_ext(md, opts);\n-\n-            let iter = Footnotes::new(HeadingLinks::new(p, None));\n-            let mut links = vec![];\n-\n-            for ev in iter {\n-                if let Event::Start(Tag::Link(dest, _)) = ev {\n-                    debug!(\"found link: {}\", dest);\n-                    links.push(dest.into_owned());\n-                }\n-            }\n-\n-            links\n+    for ev in iter {\n+        if let Event::Start(Tag::Link(dest, _)) = ev {\n+            debug!(\"found link: {}\", dest);\n+            links.push(dest.into_owned());\n         }\n     }\n+\n+    links\n }\n \n #[cfg(test)]\n mod tests {\n     use super::{LangString, Markdown, MarkdownHtml};\n     use super::plain_summary_line;\n-    use super::RenderType;\n     use html::render::reset_ids;\n \n     #[test]\n@@ -1425,14 +796,14 @@ mod tests {\n     #[test]\n     fn issue_17736() {\n         let markdown = \"# title\";\n-        format!(\"{}\", Markdown(markdown, &[], RenderType::Pulldown));\n+        format!(\"{}\", Markdown(markdown, &[]));\n         reset_ids(true);\n     }\n \n     #[test]\n     fn test_header() {\n         fn t(input: &str, expect: &str) {\n-            let output = format!(\"{}\", Markdown(input, &[], RenderType::Pulldown));\n+            let output = format!(\"{}\", Markdown(input, &[]));\n             assert_eq!(output, expect, \"original: {}\", input);\n             reset_ids(true);\n         }\n@@ -1454,7 +825,7 @@ mod tests {\n     #[test]\n     fn test_header_ids_multiple_blocks() {\n         fn t(input: &str, expect: &str) {\n-            let output = format!(\"{}\", Markdown(input, &[], RenderType::Pulldown));\n+            let output = format!(\"{}\", Markdown(input, &[]));\n             assert_eq!(output, expect, \"original: {}\", input);\n         }\n \n@@ -1495,7 +866,7 @@ mod tests {\n     #[test]\n     fn test_markdown_html_escape() {\n         fn t(input: &str, expect: &str) {\n-            let output = format!(\"{}\", MarkdownHtml(input, RenderType::Pulldown));\n+            let output = format!(\"{}\", MarkdownHtml(input));\n             assert_eq!(output, expect, \"original: {}\", input);\n         }\n "}, {"sha": "d6025920e78b0d54a182ac0f8a37e44953c04230", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 18, "deletions": 218, "changes": 236, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -62,7 +62,7 @@ use rustc::hir;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::flock;\n \n-use clean::{self, AttributesExt, GetDefId, SelfTy, Mutability, Span};\n+use clean::{self, AttributesExt, GetDefId, SelfTy, Mutability};\n use doctree;\n use fold::DocFolder;\n use html::escape::Escape;\n@@ -71,11 +71,9 @@ use html::format::{TyParamBounds, WhereClause, href, AbiSpace};\n use html::format::{VisSpace, Method, UnsafetySpace, MutableSpace};\n use html::format::fmt_impl_for_trait_page;\n use html::item_type::ItemType;\n-use html::markdown::{self, Markdown, MarkdownHtml, MarkdownSummaryLine, RenderType};\n+use html::markdown::{self, Markdown, MarkdownHtml, MarkdownSummaryLine};\n use html::{highlight, layout};\n \n-use html_diff;\n-\n /// A pair of name and its optional document.\n pub type NameDoc = (String, Option<String>);\n \n@@ -99,7 +97,6 @@ pub struct Context {\n     /// publicly reused items to redirect to the right location.\n     pub render_redirect_pages: bool,\n     pub shared: Arc<SharedContext>,\n-    pub render_type: RenderType,\n }\n \n pub struct SharedContext {\n@@ -123,9 +120,6 @@ pub struct SharedContext {\n     /// The given user css file which allow to customize the generated\n     /// documentation theme.\n     pub css_file_extension: Option<PathBuf>,\n-    /// Warnings for the user if rendering would differ using different markdown\n-    /// parsers.\n-    pub markdown_warnings: RefCell<Vec<(Span, String, Vec<html_diff::Difference>)>>,\n     /// The directories that have already been created in this doc run. Used to reduce the number\n     /// of spurious `create_dir_all` calls.\n     pub created_dirs: RefCell<FxHashSet<PathBuf>>,\n@@ -426,23 +420,9 @@ impl ToJson for IndexItemFunctionType {\n     }\n }\n \n-// TLS keys used to carry information around during rendering.\n-\n thread_local!(static CACHE_KEY: RefCell<Arc<Cache>> = Default::default());\n-thread_local!(pub static CURRENT_LOCATION_KEY: RefCell<Vec<String>> =\n-                    RefCell::new(Vec::new()));\n-thread_local!(pub static USED_ID_MAP: RefCell<FxHashMap<String, usize>> =\n-                    RefCell::new(init_ids()));\n-\n-pub fn render_text<T, F: FnMut(RenderType) -> T>(mut render: F) -> (T, T) {\n-    // Save the state of USED_ID_MAP so it only gets updated once even\n-    // though we're rendering twice.\n-    let orig_used_id_map = USED_ID_MAP.with(|map| map.borrow().clone());\n-    let hoedown_output = render(RenderType::Hoedown);\n-    USED_ID_MAP.with(|map| *map.borrow_mut() = orig_used_id_map);\n-    let pulldown_output = render(RenderType::Pulldown);\n-    (hoedown_output, pulldown_output)\n-}\n+thread_local!(pub static CURRENT_LOCATION_KEY: RefCell<Vec<String>> = RefCell::new(Vec::new()));\n+thread_local!(pub static USED_ID_MAP: RefCell<FxHashMap<String, usize>> = RefCell::new(init_ids()));\n \n fn init_ids() -> FxHashMap<String, usize> {\n     [\n@@ -500,9 +480,7 @@ pub fn run(mut krate: clean::Crate,\n            passes: FxHashSet<String>,\n            css_file_extension: Option<PathBuf>,\n            renderinfo: RenderInfo,\n-           render_type: RenderType,\n            sort_modules_alphabetically: bool,\n-           deny_render_differences: bool,\n            themes: Vec<PathBuf>) -> Result<(), Error> {\n     let src_root = match krate.src {\n         FileName::Real(ref p) => match p.parent() {\n@@ -524,7 +502,6 @@ pub fn run(mut krate: clean::Crate,\n             krate: krate.name.clone(),\n         },\n         css_file_extension: css_file_extension.clone(),\n-        markdown_warnings: RefCell::new(vec![]),\n         created_dirs: RefCell::new(FxHashSet()),\n         sort_modules_alphabetically,\n         themes,\n@@ -572,7 +549,6 @@ pub fn run(mut krate: clean::Crate,\n         dst,\n         render_redirect_pages: false,\n         shared: Arc::new(scx),\n-        render_type,\n     };\n \n     // Crawl the crate to build various caches used for the output\n@@ -655,141 +631,8 @@ pub fn run(mut krate: clean::Crate,\n \n     write_shared(&cx, &krate, &*cache, index)?;\n \n-    let scx = cx.shared.clone();\n-\n     // And finally render the whole crate's documentation\n-    let result = cx.krate(krate);\n-\n-    let markdown_warnings = scx.markdown_warnings.borrow();\n-    if !markdown_warnings.is_empty() {\n-        let mut intro_msg = false;\n-        for &(ref span, ref text, ref diffs) in &*markdown_warnings {\n-            for d in diffs {\n-                render_difference(d, &mut intro_msg, span, text);\n-            }\n-        }\n-\n-        if deny_render_differences {\n-            println!(\"Aborting with {} rendering differences\", markdown_warnings.len());\n-            ::std::process::exit(1);\n-        }\n-    }\n-\n-    result\n-}\n-\n-// A short, single-line view of `s`.\n-fn concise_str(mut s: &str) -> String {\n-    if s.contains('\\n') {\n-        s = s.lines().next().expect(\"Impossible! We just found a newline\");\n-    }\n-    if s.len() > 70 {\n-        let mut lo = 50;\n-        let mut hi = s.len() - 20;\n-        while !s.is_char_boundary(lo) {\n-            lo -= 1;\n-        }\n-        while !s.is_char_boundary(hi) {\n-            hi += 1;\n-        }\n-        return format!(\"{} ... {}\", &s[..lo], &s[hi..]);\n-    }\n-    s.to_owned()\n-}\n-\n-// Returns short versions of s1 and s2, starting from where the strings differ.\n-fn concise_compared_strs(s1: &str, s2: &str) -> (String, String) {\n-    let s1 = s1.trim();\n-    let s2 = s2.trim();\n-    if !s1.contains('\\n') && !s2.contains('\\n') && s1.len() <= 70 && s2.len() <= 70 {\n-        return (s1.to_owned(), s2.to_owned());\n-    }\n-\n-    let mut start_byte = 0;\n-    for (c1, c2) in s1.chars().zip(s2.chars()) {\n-        if c1 != c2 {\n-            break;\n-        }\n-\n-        start_byte += c1.len_utf8();\n-    }\n-\n-    if start_byte == 0 {\n-        return (concise_str(s1), concise_str(s2));\n-    }\n-\n-    let s1 = &s1[start_byte..];\n-    let s2 = &s2[start_byte..];\n-    (format!(\"...{}\", concise_str(s1)), format!(\"...{}\", concise_str(s2)))\n-}\n-\n-fn print_message(msg: &str, intro_msg: &mut bool, span: &Span, text: &str) {\n-    if !*intro_msg {\n-        println!(\"WARNING: documentation for this crate may be rendered \\\n-                  differently using the new Pulldown renderer.\");\n-        println!(\"    See https://github.com/rust-lang/rust/issues/44229 for details.\");\n-        *intro_msg = true;\n-    }\n-    println!(\"WARNING: rendering difference in `{}`\", concise_str(text));\n-    println!(\"   --> {}:{}:{}\", span.filename, span.loline, span.locol);\n-    println!(\"{}\", msg);\n-}\n-\n-pub fn render_difference(diff: &html_diff::Difference,\n-                         intro_msg: &mut bool,\n-                         span: &Span,\n-                         text: &str) {\n-    match *diff {\n-        html_diff::Difference::NodeType { ref elem, ref opposite_elem } => {\n-            print_message(&format!(\"    {} Types differ: expected: `{}`, found: `{}`\",\n-                                   elem.path, elem.element_name, opposite_elem.element_name),\n-                          intro_msg, span, text);\n-        }\n-        html_diff::Difference::NodeName { ref elem, ref opposite_elem } => {\n-            print_message(&format!(\"    {} Tags differ: expected: `{}`, found: `{}`\",\n-                                   elem.path, elem.element_name, opposite_elem.element_name),\n-                          intro_msg, span, text);\n-        }\n-        html_diff::Difference::NodeAttributes { ref elem,\n-                                                ref elem_attributes,\n-                                                ref opposite_elem_attributes,\n-                                                .. } => {\n-            print_message(&format!(\"    {} Attributes differ in `{}`: expected: `{:?}`, \\\n-                                    found: `{:?}`\",\n-                                   elem.path, elem.element_name, elem_attributes,\n-                                   opposite_elem_attributes),\n-                          intro_msg, span, text);\n-        }\n-        html_diff::Difference::NodeText { ref elem, ref elem_text, ref opposite_elem_text, .. } => {\n-            if elem_text.split(\"\\n\")\n-                        .zip(opposite_elem_text.split(\"\\n\"))\n-                        .any(|(a, b)| a.trim() != b.trim()) {\n-                let (s1, s2) = concise_compared_strs(elem_text, opposite_elem_text);\n-                print_message(&format!(\"    {} Text differs:\\n        expected: `{}`\\n        \\\n-                                        found:    `{}`\",\n-                                       elem.path, s1, s2),\n-                              intro_msg, span, text);\n-            }\n-        }\n-        html_diff::Difference::NotPresent { ref elem, ref opposite_elem } => {\n-            if let Some(ref elem) = *elem {\n-                print_message(&format!(\"    {} One element is missing: expected: `{}`\",\n-                                       elem.path, elem.element_name),\n-                              intro_msg, span, text);\n-            } else if let Some(ref elem) = *opposite_elem {\n-                if elem.element_name.is_empty() {\n-                    print_message(&format!(\"    {} One element is missing: expected: `{}`\",\n-                                           elem.path, concise_str(&elem.element_content)),\n-                                  intro_msg, span, text);\n-                } else {\n-                    print_message(&format!(\"    {} Unexpected element `{}`: found: `{}`\",\n-                                           elem.path, elem.element_name,\n-                                           concise_str(&elem.element_content)),\n-                                  intro_msg, span, text);\n-                }\n-            }\n-        }\n-    }\n+    cx.krate(krate)\n }\n \n /// Build the search index from the collected metadata\n@@ -1929,56 +1772,25 @@ fn document(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item) -> fmt::Re\n     Ok(())\n }\n \n-/// Render md_text as markdown. Warns the user if there are difference in\n-/// rendering between Pulldown and Hoedown.\n+/// Render md_text as markdown.\n fn render_markdown(w: &mut fmt::Formatter,\n                    md_text: &str,\n                    links: Vec<(String, String)>,\n-                   span: Span,\n-                   render_type: RenderType,\n-                   prefix: &str,\n-                   scx: &SharedContext)\n+                   prefix: &str,)\n                    -> fmt::Result {\n-    let (hoedown_output, pulldown_output) =\n-        render_text(|ty| format!(\"{}\", Markdown(md_text, &links, ty)));\n-    let mut differences = html_diff::get_differences(&pulldown_output, &hoedown_output);\n-    differences.retain(|s| {\n-        match *s {\n-            html_diff::Difference::NodeText { ref elem_text,\n-                                              ref opposite_elem_text,\n-                                              .. }\n-                if elem_text.split_whitespace().eq(opposite_elem_text.split_whitespace()) => {\n-                    false\n-            }\n-            _ => true,\n-        }\n-    });\n-\n-    if !differences.is_empty() {\n-        scx.markdown_warnings.borrow_mut().push((span, md_text.to_owned(), differences));\n-    }\n-\n-    write!(w, \"<div class='docblock'>{}{}</div>\",\n-           prefix,\n-           if render_type == RenderType::Pulldown { pulldown_output } else { hoedown_output })\n+    write!(w, \"<div class='docblock'>{}{}</div>\", prefix, Markdown(md_text, &links))\n }\n \n fn document_short(w: &mut fmt::Formatter, item: &clean::Item, link: AssocItemLink,\n-                  cx: &Context, prefix: &str) -> fmt::Result {\n+                  prefix: &str) -> fmt::Result {\n     if let Some(s) = item.doc_value() {\n         let markdown = if s.contains('\\n') {\n             format!(\"{} [Read more]({})\",\n                     &plain_summary_line(Some(s)), naive_assoc_href(item, link))\n         } else {\n             format!(\"{}\", &plain_summary_line(Some(s)))\n         };\n-        render_markdown(w,\n-                        &markdown,\n-                        item.links(),\n-                        item.source.clone(),\n-                        cx.render_type,\n-                        prefix,\n-                        &cx.shared)?;\n+        render_markdown(w, &markdown, item.links(), prefix)?;\n     } else if !prefix.is_empty() {\n         write!(w, \"<div class='docblock'>{}</div>\", prefix)?;\n     }\n@@ -2004,13 +1816,7 @@ fn document_full(w: &mut fmt::Formatter, item: &clean::Item,\n                  cx: &Context, prefix: &str) -> fmt::Result {\n     if let Some(s) = cx.shared.maybe_collapsed_doc_value(item) {\n         debug!(\"Doc block: =====\\n{}\\n=====\", s);\n-        render_markdown(w,\n-                        &*s,\n-                        item.links(),\n-                        item.source.clone(),\n-                        cx.render_type,\n-                        prefix,\n-                        &cx.shared)?;\n+        render_markdown(w, &*s, item.links(), prefix)?;\n     } else if !prefix.is_empty() {\n         write!(w, \"<div class='docblock'>{}</div>\", prefix)?;\n     }\n@@ -2230,13 +2036,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                        </tr>\",\n                        name = *myitem.name.as_ref().unwrap(),\n                        stab_docs = stab_docs,\n-                       docs = if cx.render_type == RenderType::Hoedown {\n-                           format!(\"{}\",\n-                                   shorter(Some(&Markdown(doc_value, &myitem.links(),\n-                                                          RenderType::Hoedown).to_string())))\n-                       } else {\n-                           format!(\"{}\", MarkdownSummaryLine(doc_value, &myitem.links()))\n-                       },\n+                       docs = MarkdownSummaryLine(doc_value, &myitem.links()),\n                        class = myitem.type_(),\n                        stab = myitem.stability_class().unwrap_or(\"\".to_string()),\n                        unsafety_flag = unsafety_flag,\n@@ -2270,7 +2070,7 @@ fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Vec<S\n             };\n             let text = format!(\"Deprecated{}{}\",\n                                since,\n-                               MarkdownHtml(&deprecated_reason, cx.render_type));\n+                               MarkdownHtml(&deprecated_reason));\n             stability.push(format!(\"<div class='stab deprecated'>{}</div>\", text))\n         };\n \n@@ -2300,7 +2100,7 @@ fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Vec<S\n                                         This is a nightly-only experimental API. {}\\\n                                         </summary>{}\",\n                                        unstable_extra,\n-                                       MarkdownHtml(&stab.unstable_reason, cx.render_type));\n+                                       MarkdownHtml(&stab.unstable_reason));\n                     stability.push(format!(\"<div class='stab unstable'><details>{}</details></div>\",\n                                    text));\n                 }\n@@ -2320,7 +2120,7 @@ fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Vec<S\n             String::new()\n         };\n \n-        let text = format!(\"Deprecated{}{}\", since, MarkdownHtml(&note, cx.render_type));\n+        let text = format!(\"Deprecated{}{}\", since, MarkdownHtml(&note));\n         stability.push(format!(\"<div class='stab deprecated'>{}</div>\", text))\n     }\n \n@@ -3426,7 +3226,7 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n         write!(w, \"</h3>\\n\")?;\n         if let Some(ref dox) = cx.shared.maybe_collapsed_doc_value(&i.impl_item) {\n             write!(w, \"<div class='docblock'>{}</div>\",\n-                   Markdown(&*dox, &i.impl_item.links(), cx.render_type))?;\n+                   Markdown(&*dox, &i.impl_item.links()))?;\n         }\n     }\n \n@@ -3511,7 +3311,7 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                         } else if show_def_docs {\n                             // In case the item isn't documented,\n                             // provide short documentation from the trait.\n-                            document_short(w, it, link, cx, &prefix)?;\n+                            document_short(w, it, link, &prefix)?;\n                         }\n                     }\n                 } else {\n@@ -3523,7 +3323,7 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n             } else {\n                 document_stability(w, cx, item)?;\n                 if show_def_docs {\n-                    document_short(w, item, link, cx, &prefix)?;\n+                    document_short(w, item, link, &prefix)?;\n                 }\n             }\n         }"}, {"sha": "825558648e1f8516b581b2c246ea018f13174dfd", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 6, "deletions": 35, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -19,7 +19,6 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(fs_read_write)]\n-#![feature(libc)]\n #![feature(set_stdio)]\n #![feature(slice_patterns)]\n #![feature(test)]\n@@ -29,8 +28,6 @@\n extern crate arena;\n extern crate getopts;\n extern crate env_logger;\n-extern crate html_diff;\n-extern crate libc;\n extern crate rustc;\n extern crate rustc_data_structures;\n extern crate rustc_const_math;\n@@ -65,8 +62,7 @@ use std::sync::mpsc::channel;\n \n use externalfiles::ExternalHtml;\n use rustc::session::search_paths::SearchPaths;\n-use rustc::session::config::{ErrorOutputType, RustcOptGroup, nightly_options,\n-                             Externs};\n+use rustc::session::config::{ErrorOutputType, RustcOptGroup, nightly_options, Externs};\n \n #[macro_use]\n pub mod externalfiles;\n@@ -95,8 +91,6 @@ pub mod theme;\n \n use clean::AttributesExt;\n \n-use html::markdown::RenderType;\n-\n struct Output {\n     krate: clean::Crate,\n     renderinfo: html::render::RenderInfo,\n@@ -243,9 +237,6 @@ pub fn opts() -> Vec<RustcOptGroup> {\n                       or `#![doc(html_playground_url=...)]`\",\n                      \"URL\")\n         }),\n-        unstable(\"disable-commonmark\", |o| {\n-            o.optflag(\"\", \"disable-commonmark\", \"to disable commonmark doc rendering/testing\")\n-        }),\n         unstable(\"display-warnings\", |o| {\n             o.optflag(\"\", \"display-warnings\", \"to print code warnings when testing doc\")\n         }),\n@@ -259,10 +250,6 @@ pub fn opts() -> Vec<RustcOptGroup> {\n             o.optflag(\"\", \"sort-modules-by-appearance\", \"sort modules by where they appear in the \\\n                                                          program, rather than alphabetically\")\n         }),\n-        unstable(\"deny-render-differences\", |o| {\n-            o.optflag(\"\", \"deny-render-differences\", \"abort doc runs when markdown rendering \\\n-                                                      differences are found\")\n-        }),\n         unstable(\"themes\", |o| {\n             o.optmulti(\"\", \"themes\",\n                        \"additional themes which will be added to the generated docs\",\n@@ -383,12 +370,6 @@ pub fn main_args(args: &[String]) -> isize {\n     let css_file_extension = matches.opt_str(\"e\").map(|s| PathBuf::from(&s));\n     let cfgs = matches.opt_strs(\"cfg\");\n \n-    let render_type = if matches.opt_present(\"disable-commonmark\") {\n-        RenderType::Hoedown\n-    } else {\n-        RenderType::Pulldown\n-    };\n-\n     if let Some(ref p) = css_file_extension {\n         if !p.is_file() {\n             writeln!(\n@@ -425,8 +406,7 @@ pub fn main_args(args: &[String]) -> isize {\n             &matches.opt_strs(\"html-before-content\"),\n             &matches.opt_strs(\"html-after-content\"),\n             &matches.opt_strs(\"markdown-before-content\"),\n-            &matches.opt_strs(\"markdown-after-content\"),\n-            render_type) {\n+            &matches.opt_strs(\"markdown-after-content\")) {\n         Some(eh) => eh,\n         None => return 3,\n     };\n@@ -440,22 +420,20 @@ pub fn main_args(args: &[String]) -> isize {\n     match (should_test, markdown_input) {\n         (true, true) => {\n             return markdown::test(input, cfgs, libs, externs, test_args, maybe_sysroot,\n-                                  render_type, display_warnings, linker)\n+                                  display_warnings, linker)\n         }\n         (true, false) => {\n             return test::run(Path::new(input), cfgs, libs, externs, test_args, crate_name,\n-                             maybe_sysroot, render_type, display_warnings, linker)\n+                             maybe_sysroot, display_warnings, linker)\n         }\n         (false, true) => return markdown::render(Path::new(input),\n                                                  output.unwrap_or(PathBuf::from(\"doc\")),\n                                                  &matches, &external_html,\n-                                                 !matches.opt_present(\"markdown-no-toc\"),\n-                                                 render_type),\n+                                                 !matches.opt_present(\"markdown-no-toc\")),\n         (false, false) => {}\n     }\n \n     let output_format = matches.opt_str(\"w\");\n-    let deny_render_differences = matches.opt_present(\"deny-render-differences\");\n     let res = acquire_input(PathBuf::from(input), externs, &matches, move |out| {\n         let Output { krate, passes, renderinfo } = out;\n         info!(\"going to format\");\n@@ -466,9 +444,7 @@ pub fn main_args(args: &[String]) -> isize {\n                                   passes.into_iter().collect(),\n                                   css_file_extension,\n                                   renderinfo,\n-                                  render_type,\n                                   sort_modules_alphabetically,\n-                                  deny_render_differences,\n                                   themes)\n                     .expect(\"failed to generate documentation\");\n                 0\n@@ -559,11 +535,6 @@ where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n     let crate_name = matches.opt_str(\"crate-name\");\n     let crate_version = matches.opt_str(\"crate-version\");\n     let plugin_path = matches.opt_str(\"plugin-path\");\n-    let render_type = if matches.opt_present(\"disable-commonmark\") {\n-        RenderType::Hoedown\n-    } else {\n-        RenderType::Pulldown\n-    };\n \n     info!(\"starting to run rustc\");\n     let display_warnings = matches.opt_present(\"display-warnings\");\n@@ -578,7 +549,7 @@ where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n \n         let (mut krate, renderinfo) =\n             core::run_core(paths, cfgs, externs, Input::File(cratefile), triple, maybe_sysroot,\n-                           display_warnings, force_unstable_if_unmarked, render_type);\n+                           display_warnings, force_unstable_if_unmarked);\n \n         info!(\"finished with rustc\");\n "}, {"sha": "0f107457d2bf88815927dbc36de0bfc679da5948", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 11, "deletions": 51, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -17,20 +17,14 @@ use getopts;\n use testing;\n use rustc::session::search_paths::SearchPaths;\n use rustc::session::config::Externs;\n-use syntax::codemap::{DUMMY_SP, FileName};\n-\n-use clean::Span;\n+use syntax::codemap::DUMMY_SP;\n \n use externalfiles::{ExternalHtml, LoadStringError, load_string};\n \n-use html_diff;\n-\n-use html::render::{render_text, reset_ids};\n+use html::render::reset_ids;\n use html::escape::Escape;\n-use html::render::render_difference;\n use html::markdown;\n-use html::markdown::{Markdown, MarkdownWithToc, find_testable_code, old_find_testable_code};\n-use html::markdown::RenderType;\n+use html::markdown::{Markdown, MarkdownWithToc, find_testable_code};\n use test::{TestOptions, Collector};\n \n /// Separate any lines at the start of the file that begin with `# ` or `%`.\n@@ -55,12 +49,7 @@ fn extract_leading_metadata<'a>(s: &'a str) -> (Vec<&'a str>, &'a str) {\n /// Render `input` (e.g. \"foo.md\") into an HTML file in `output`\n /// (e.g. output = \"bar\" => \"bar/foo.html\").\n pub fn render(input: &Path, mut output: PathBuf, matches: &getopts::Matches,\n-              external_html: &ExternalHtml, include_toc: bool,\n-              render_type: RenderType) -> isize {\n-    // Span used for markdown hoedown/pulldown differences.\n-    let mut span = Span::empty();\n-    span.filename = FileName::Real(input.to_owned());\n-\n+              external_html: &ExternalHtml, include_toc: bool) -> isize {\n     output.push(input.file_stem().unwrap());\n     output.set_extension(\"html\");\n \n@@ -97,36 +86,12 @@ pub fn render(input: &Path, mut output: PathBuf, matches: &getopts::Matches,\n \n     reset_ids(false);\n \n-    let (hoedown_output, pulldown_output) = if include_toc {\n-        // Save the state of USED_ID_MAP so it only gets updated once even\n-        // though we're rendering twice.\n-        render_text(|ty| format!(\"{}\", MarkdownWithToc(text, ty)))\n+    let text = if include_toc {\n+        format!(\"{}\", MarkdownWithToc(text))\n     } else {\n-        // Save the state of USED_ID_MAP so it only gets updated once even\n-        // though we're rendering twice.\n-        render_text(|ty| format!(\"{}\", Markdown(text, &[], ty)))\n+        format!(\"{}\", Markdown(text, &[]))\n     };\n \n-    let mut differences = html_diff::get_differences(&pulldown_output, &hoedown_output);\n-    differences.retain(|s| {\n-        match *s {\n-            html_diff::Difference::NodeText { ref elem_text,\n-                                              ref opposite_elem_text,\n-                                              .. }\n-                if elem_text.split_whitespace().eq(opposite_elem_text.split_whitespace()) => {\n-                    false\n-            }\n-            _ => true,\n-        }\n-    });\n-\n-    if !differences.is_empty() {\n-        let mut intro_msg = false;\n-        for diff in differences {\n-            render_difference(&diff, &mut intro_msg, &span, text);\n-        }\n-    }\n-\n     let err = write!(\n         &mut out,\n         r#\"<!DOCTYPE html>\n@@ -158,7 +123,7 @@ pub fn render(input: &Path, mut output: PathBuf, matches: &getopts::Matches,\n         css = css,\n         in_header = external_html.in_header,\n         before_content = external_html.before_content,\n-        text = if render_type == RenderType::Pulldown { pulldown_output } else { hoedown_output },\n+        text = text,\n         after_content = external_html.after_content,\n     );\n \n@@ -174,7 +139,7 @@ pub fn render(input: &Path, mut output: PathBuf, matches: &getopts::Matches,\n /// Run any tests/code examples in the markdown file `input`.\n pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n             mut test_args: Vec<String>, maybe_sysroot: Option<PathBuf>,\n-            render_type: RenderType, display_warnings: bool, linker: Option<PathBuf>) -> isize {\n+            display_warnings: bool, linker: Option<PathBuf>) -> isize {\n     let input_str = match load_string(input) {\n         Ok(s) => s,\n         Err(LoadStringError::ReadFail) => return 1,\n@@ -186,13 +151,8 @@ pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n     let mut collector = Collector::new(input.to_owned(), cfgs, libs, externs,\n                                        true, opts, maybe_sysroot, None,\n                                        Some(PathBuf::from(input)),\n-                                       render_type, linker);\n-    if render_type == RenderType::Pulldown {\n-        old_find_testable_code(&input_str, &mut collector, DUMMY_SP);\n-        find_testable_code(&input_str, &mut collector, DUMMY_SP);\n-    } else {\n-        old_find_testable_code(&input_str, &mut collector, DUMMY_SP);\n-    }\n+                                       linker);\n+    find_testable_code(&input_str, &mut collector, DUMMY_SP);\n     test_args.insert(0, \"rustdoctest\".to_string());\n     testing::test_main(&test_args, collector.tests,\n                        testing::Options::new().display_output(display_warnings));"}, {"sha": "90b6746d91d863c360433a56d137e6be4c52b322", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 4, "deletions": 48, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::collections::HashMap;\n use std::env;\n use std::ffi::OsString;\n use std::io::prelude::*;\n@@ -41,7 +40,7 @@ use errors;\n use errors::emitter::ColorConfig;\n \n use clean::Attributes;\n-use html::markdown::{self, RenderType};\n+use html::markdown;\n \n #[derive(Clone, Default)]\n pub struct TestOptions {\n@@ -56,7 +55,6 @@ pub fn run(input_path: &Path,\n            mut test_args: Vec<String>,\n            crate_name: Option<String>,\n            maybe_sysroot: Option<PathBuf>,\n-           render_type: RenderType,\n            display_warnings: bool,\n            linker: Option<PathBuf>)\n            -> isize {\n@@ -118,7 +116,6 @@ pub fn run(input_path: &Path,\n                                        maybe_sysroot,\n                                        Some(codemap),\n                                        None,\n-                                       render_type,\n                                        linker);\n \n     {\n@@ -433,8 +430,6 @@ fn partition_source(s: &str) -> (String, String) {\n \n pub struct Collector {\n     pub tests: Vec<testing::TestDescAndFn>,\n-    // to be removed when hoedown will be definitely gone\n-    pub old_tests: HashMap<String, Vec<String>>,\n \n     // The name of the test displayed to the user, separated by `::`.\n     //\n@@ -468,19 +463,16 @@ pub struct Collector {\n     position: Span,\n     codemap: Option<Rc<CodeMap>>,\n     filename: Option<PathBuf>,\n-    // to be removed when hoedown will be removed as well\n-    pub render_type: RenderType,\n     linker: Option<PathBuf>,\n }\n \n impl Collector {\n     pub fn new(cratename: String, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n                use_headers: bool, opts: TestOptions, maybe_sysroot: Option<PathBuf>,\n                codemap: Option<Rc<CodeMap>>, filename: Option<PathBuf>,\n-               render_type: RenderType, linker: Option<PathBuf>) -> Collector {\n+               linker: Option<PathBuf>) -> Collector {\n         Collector {\n             tests: Vec::new(),\n-            old_tests: HashMap::new(),\n             names: Vec::new(),\n             cfgs,\n             libs,\n@@ -492,7 +484,6 @@ impl Collector {\n             position: DUMMY_SP,\n             codemap,\n             filename,\n-            render_type,\n             linker,\n         }\n     }\n@@ -501,39 +492,11 @@ impl Collector {\n         format!(\"{} - {} (line {})\", filename, self.names.join(\"::\"), line)\n     }\n \n-    // to be removed once hoedown is gone\n-    fn generate_name_beginning(&self, filename: &FileName) -> String {\n-        format!(\"{} - {} (line\", filename, self.names.join(\"::\"))\n-    }\n-\n-    pub fn add_old_test(&mut self, test: String, filename: FileName) {\n-        let name_beg = self.generate_name_beginning(&filename);\n-        let entry = self.old_tests.entry(name_beg)\n-                                  .or_insert(Vec::new());\n-        entry.push(test.trim().to_owned());\n-    }\n-\n     pub fn add_test(&mut self, test: String,\n                     should_panic: bool, no_run: bool, should_ignore: bool,\n                     as_test_harness: bool, compile_fail: bool, error_codes: Vec<String>,\n                     line: usize, filename: FileName, allow_fail: bool) {\n         let name = self.generate_name(line, &filename);\n-        // to be removed when hoedown is removed\n-        if self.render_type == RenderType::Pulldown {\n-            let name_beg = self.generate_name_beginning(&filename);\n-            let mut found = false;\n-            let test = test.trim().to_owned();\n-            if let Some(entry) = self.old_tests.get_mut(&name_beg) {\n-                found = entry.remove_item(&test).is_some();\n-            }\n-            if !found {\n-                eprintln!(\"WARNING: {} Code block is not currently run as a test, but will \\\n-                           in future versions of rustdoc. Please ensure this code block is \\\n-                           a runnable test, or use the `ignore` directive.\",\n-                          name);\n-                return\n-            }\n-        }\n         let cfgs = self.cfgs.clone();\n         let libs = self.libs.clone();\n         let externs = self.externs.clone();\n@@ -680,15 +643,8 @@ impl<'a, 'hir> HirCollector<'a, 'hir> {\n         // the collapse-docs pass won't combine sugared/raw doc attributes, or included files with\n         // anything else, this will combine them for us\n         if let Some(doc) = attrs.collapsed_doc_value() {\n-            if self.collector.render_type == RenderType::Pulldown {\n-                markdown::old_find_testable_code(&doc, self.collector,\n-                                                 attrs.span.unwrap_or(DUMMY_SP));\n-                markdown::find_testable_code(&doc, self.collector,\n-                                             attrs.span.unwrap_or(DUMMY_SP));\n-            } else {\n-                markdown::old_find_testable_code(&doc, self.collector,\n-                                                 attrs.span.unwrap_or(DUMMY_SP));\n-            }\n+            markdown::find_testable_code(&doc, self.collector,\n+                                         attrs.span.unwrap_or(DUMMY_SP));\n         }\n \n         nested(self);"}, {"sha": "292a78278ab0a7514d15e811bdf30b267e273b07", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -81,9 +81,18 @@ use time::SystemTime;\n /// # }\n /// ```\n ///\n+/// Note that, although read and write methods require a `&mut File`, because\n+/// of the interfaces for [`Read`] and [`Write`], the holder of a `&File` can\n+/// still modify the file, either through methods that take `&File` or by\n+/// retrieving the underlying OS object and modifying the file that way.\n+/// Additionally, many operating systems allow concurrent modification of files\n+/// by different processes. Avoid assuming that holding a `&File` means that the\n+/// file will not change.\n+///\n /// [`Seek`]: ../io/trait.Seek.html\n /// [`String`]: ../string/struct.String.html\n /// [`Read`]: ../io/trait.Read.html\n+/// [`Write`]: ../io/trait.Write.html\n /// [`BufReader<R>`]: ../io/struct.BufReader.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct File {\n@@ -459,6 +468,9 @@ impl File {\n     /// # Ok(())\n     /// # }\n     /// ```\n+    ///\n+    /// Note that this method alters the content of the underlying file, even\n+    /// though it takes `&self` rather than `&mut self`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn set_len(&self, size: u64) -> io::Result<()> {\n         self.inner.truncate(size)\n@@ -557,6 +569,9 @@ impl File {\n     /// # Ok(())\n     /// # }\n     /// ```\n+    ///\n+    /// Note that this method alters the permissions of the underlying file,\n+    /// even though it takes `&self` rather than `&mut self`.\n     #[stable(feature = \"set_permissions_atomic\", since = \"1.16.0\")]\n     pub fn set_permissions(&self, perm: Permissions) -> io::Result<()> {\n         self.inner.set_permissions(perm.0)"}, {"sha": "9250c1c437b2a639bd66a19d4623d86924d94dbf", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -293,7 +293,7 @@ impl<R: Seek> Seek for BufReader<R> {\n     /// where `n` minus the internal buffer length overflows an `i64`, two\n     /// seeks will be performed instead of one. If the second seek returns\n     /// `Err`, the underlying reader will be left at the same position it would\n-    /// have if you seeked to `SeekFrom::Current(0)`.\n+    /// have if you called `seek` with `SeekFrom::Current(0)`.\n     ///\n     /// [`seek_relative`]: #method.seek_relative\n     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {"}, {"sha": "263a2c13249b4488cf6ba833cf0d69ac1b77c4c4", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -262,7 +262,7 @@ impl TcpStream {\n     /// indefinitely. It is an error to pass the zero `Duration` to this\n     /// method.\n     ///\n-    /// # Note\n+    /// # Platform-specific behavior\n     ///\n     /// Platforms may return a different error code whenever a read times out as\n     /// a result of setting this option. For example Unix typically returns an\n@@ -293,7 +293,7 @@ impl TcpStream {\n     /// indefinitely. It is an error to pass the zero [`Duration`] to this\n     /// method.\n     ///\n-    /// # Note\n+    /// # Platform-specific behavior\n     ///\n     /// Platforms may return a different error code whenever a write times out\n     /// as a result of setting this option. For example Unix typically returns\n@@ -323,7 +323,7 @@ impl TcpStream {\n     ///\n     /// If the timeout is [`None`], then [`read`] calls will block indefinitely.\n     ///\n-    /// # Note\n+    /// # Platform-specific behavior\n     ///\n     /// Some platforms do not provide access to the current timeout.\n     ///\n@@ -349,7 +349,7 @@ impl TcpStream {\n     ///\n     /// If the timeout is [`None`], then [`write`] calls will block indefinitely.\n     ///\n-    /// # Note\n+    /// # Platform-specific behavior\n     ///\n     /// Some platforms do not provide access to the current timeout.\n     ///"}, {"sha": "5e19519b88fd5908785ad34115c138ae0ef5e5ac", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -231,7 +231,7 @@ impl UdpSocket {\n     /// indefinitely. It is an error to pass the zero [`Duration`] to this\n     /// method.\n     ///\n-    /// # Note\n+    /// # Platform-specific behavior\n     ///\n     /// Platforms may return a different error code whenever a read times out as\n     /// a result of setting this option. For example Unix typically returns an\n@@ -262,7 +262,7 @@ impl UdpSocket {\n     /// indefinitely. It is an error to pass the zero [`Duration`] to this\n     /// method.\n     ///\n-    /// # Note\n+    /// # Platform-specific behavior\n     ///\n     /// Platforms may return a different error code whenever a write times out\n     /// as a result of setting this option. For example Unix typically returns"}, {"sha": "f7fdedc0d2179fc347d82a46297d712f5c3acc3a", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -24,8 +24,8 @@ use sys_common::rwlock as sys;\n /// typically allows for read-only access (shared access).\n ///\n /// In comparison, a [`Mutex`] does not distinguish between readers or writers\n-/// that aquire the lock, therefore blocking any threads waiting for the lock to\n-/// become available. An `RwLock` will allow any number of readers to aquire the\n+/// that acquire the lock, therefore blocking any threads waiting for the lock to\n+/// become available. An `RwLock` will allow any number of readers to acquire the\n /// lock as long as a writer is not holding the lock.\n ///\n /// The priority policy of the lock is dependent on the underlying operating"}, {"sha": "1955f3ec9a28fc98f129e9341c0289ae948bedf8", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -136,7 +136,7 @@ pub fn __rust_begin_short_backtrace<F, T>(f: F) -> T\n     f()\n }\n \n-/// Controls how the backtrace should be formated.\n+/// Controls how the backtrace should be formatted.\n #[derive(Debug, Copy, Clone, Eq, PartialEq)]\n pub enum PrintFormat {\n     /// Show all the frames with absolute path for files."}, {"sha": "e74c40ae04b5d4ed55ad64921fa43db2f2c60fbe", "filename": "src/libstd/sys_common/poison.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibstd%2Fsys_common%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibstd%2Fsys_common%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fpoison.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -98,7 +98,7 @@ pub struct PoisonError<T> {\n }\n \n /// An enumeration of possible errors associated with a [`TryLockResult`] which\n-/// can occur while trying to aquire a lock, from the [`try_lock`] method on a\n+/// can occur while trying to acquire a lock, from the [`try_lock`] method on a\n /// [`Mutex`] or the [`try_read`] and [`try_write`] methods on an [`RwLock`].\n ///\n /// [`Mutex`]: struct.Mutex.html"}, {"sha": "ff121e2d7ee4e57edec3f1f467be4db462bcdf72", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -652,7 +652,7 @@ pub fn panicking() -> bool {\n /// The thread may sleep longer than the duration specified due to scheduling\n /// specifics or platform-dependent functionality.\n ///\n-/// # Platform behavior\n+/// # Platform-specific behavior\n ///\n /// On Unix platforms this function will not return early due to a\n /// signal being received or a spurious wakeup.\n@@ -676,7 +676,7 @@ pub fn sleep_ms(ms: u32) {\n /// The thread may sleep longer than the duration specified due to scheduling\n /// specifics or platform-dependent functionality.\n ///\n-/// # Platform behavior\n+/// # Platform-specific behavior\n ///\n /// On Unix platforms this function will not return early due to a\n /// signal being received or a spurious wakeup. Platforms which do not support\n@@ -837,7 +837,7 @@ pub fn park_timeout_ms(ms: u32) {\n ///\n /// See the [park documentation][park] for more details.\n ///\n-/// # Platform behavior\n+/// # Platform-specific behavior\n ///\n /// Platforms which do not support nanosecond precision for sleeping will have\n /// `dur` rounded up to the nearest granularity of time they can sleep for."}, {"sha": "8c1e5cf75867e28081072092903903b1cb53b278", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -918,7 +918,7 @@ pub struct Expr {\n }\n \n impl Expr {\n-    /// Wether this expression would be valid somewhere that expects a value, for example, an `if`\n+    /// Whether this expression would be valid somewhere that expects a value, for example, an `if`\n     /// condition.\n     pub fn returns(&self) -> bool {\n         if let ExprKind::Block(ref block) = self.node {"}, {"sha": "aa360ed1bf5bf12a25a25dabec2ee991e60c2d5e", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -114,7 +114,7 @@ impl<'a> StripUnconfigured<'a> {\n         }\n     }\n \n-    // Determine if a node with the given attributes should be included in this configuation.\n+    // Determine if a node with the given attributes should be included in this configuration.\n     pub fn in_cfg(&mut self, attrs: &[ast::Attribute]) -> bool {\n         attrs.iter().all(|attr| {\n             // When not compiling with --test we should not compile the #[test] functions"}, {"sha": "7915109ce3af8c45a03b9a78427745faf909d6ac", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -3912,7 +3912,7 @@ impl<'a> Parser<'a> {\n                                           \"use `=` if you meant to assign\",\n                                           \"=\".to_string());\n                 err.emit();\n-                // As this was parsed successfuly, continue as if the code has been fixed for the\n+                // As this was parsed successfully, continue as if the code has been fixed for the\n                 // rest of the file. It will still fail due to the emitted error, but we avoid\n                 // extra noise.\n                 init\n@@ -6571,7 +6571,7 @@ impl<'a> Parser<'a> {\n             return Ok(Some(macro_def));\n         }\n \n-        // Verify wether we have encountered a struct or method definition where the user forgot to\n+        // Verify whether we have encountered a struct or method definition where the user forgot to\n         // add the `struct` or `fn` keyword after writing `pub`: `pub S {}`\n         if visibility == Visibility::Public &&\n             self.check_ident() &&"}, {"sha": "da282f1bb7277b4d30fa1599ee29ad8eb4dd2a92", "filename": "src/rt/hoedown", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fhoedown?ref=1ad094d81c97b3d2dd8e980ccd1475a80647540d", "patch": "@@ -1 +0,0 @@\n-Subproject commit da282f1bb7277b4d30fa1599ee29ad8eb4dd2a92"}, {"sha": "b804bb2981ba6cdd4e12b13b2c643b7ae69c52be", "filename": "src/test/compile-fail/coerce-to-bang.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -14,7 +14,7 @@\n fn foo(x: usize, y: !, z: usize) { }\n \n fn call_foo_a() {\n-    // FIXME(#40800) -- accepted beacuse divergence happens **before**\n+    // FIXME(#40800) -- accepted because divergence happens **before**\n     // the coercion to `!`, but within same expression. Not clear that\n     // these are the rules we want.\n     foo(return, 22, 44);"}, {"sha": "4ef92981314fdde2ff432dff79ca8857b6fd4fce", "filename": "src/test/compile-fail/directory_ownership/macro_expanded_mod_helper/foo/bar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fcompile-fail%2Fdirectory_ownership%2Fmacro_expanded_mod_helper%2Ffoo%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fcompile-fail%2Fdirectory_ownership%2Fmacro_expanded_mod_helper%2Ffoo%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdirectory_ownership%2Fmacro_expanded_mod_helper%2Ffoo%2Fbar.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test not a test, auxillary\n+// ignore-test not a test, auxiliary"}, {"sha": "41a8c288e7cdb159dc26843dbe0d26c29e34a0f7", "filename": "src/test/compile-fail/directory_ownership/macro_expanded_mod_helper/foo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fcompile-fail%2Fdirectory_ownership%2Fmacro_expanded_mod_helper%2Ffoo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fcompile-fail%2Fdirectory_ownership%2Fmacro_expanded_mod_helper%2Ffoo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdirectory_ownership%2Fmacro_expanded_mod_helper%2Ffoo%2Fmod.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test not a test, auxillary\n+// ignore-test not a test, auxiliary\n \n mod_decl!(bar);"}, {"sha": "86df2382732b57cdebcb2ed9fac2a85253be530c", "filename": "src/test/compile-fail/hr-subtype.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fcompile-fail%2Fhr-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fcompile-fail%2Fhr-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhr-subtype.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -84,7 +84,7 @@ check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n                                     fn(Inv<'y>)) }\n \n // Somewhat surprisingly, a fn taking two distinct bound lifetimes and\n-// a fn taking one bound lifetime can be interchangable, but only if\n+// a fn taking one bound lifetime can be interchangeable, but only if\n // we are co- or contra-variant with respect to both lifetimes.\n //\n // The reason is:\n@@ -100,7 +100,7 @@ check! { bound_contra_a_contra_b_ret_co_a: (for<'a,'b> fn(Contra<'a>, Contra<'b>\n check! { bound_co_a_co_b_ret_contra_a: (for<'a,'b> fn(Co<'a>, Co<'b>) -> Contra<'a>,\n                                         for<'a>    fn(Co<'a>, Co<'a>) -> Contra<'a>) }\n \n-// If we make those lifetimes invariant, then the two types are not interchangable.\n+// If we make those lifetimes invariant, then the two types are not interchangeable.\n check! { bound_inv_a_b_vs_bound_inv_a: (for<'a,'b> fn(Inv<'a>, Inv<'b>),\n                                         for<'a>    fn(Inv<'a>, Inv<'a>)) }\n check! { bound_a_b_ret_a_vs_bound_a_ret_a: (for<'a,'b> fn(&'a u32, &'b u32) -> &'a u32,"}, {"sha": "3e29383d62cf8ae9ca684477866e49c28a1b40a5", "filename": "src/test/compile-fail/issue-20616-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fcompile-fail%2Fissue-20616-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fcompile-fail%2Fissue-20616-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-1.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // We need all these 9 issue-20616-N.rs files\n-// becase we can only catch one parsing error at a time\n+// because we can only catch one parsing error at a time\n \n \n "}, {"sha": "1ec7a74559a6e614959b2312eadd70ac67feeb64", "filename": "src/test/compile-fail/issue-20616-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fcompile-fail%2Fissue-20616-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fcompile-fail%2Fissue-20616-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-2.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // We need all these 9 issue-20616-N.rs files\n-// becase we can only catch one parsing error at a time\n+// because we can only catch one parsing error at a time\n \n \n "}, {"sha": "885fd246547312aba978d33de71275cea37dfc3b", "filename": "src/test/compile-fail/issue-20616-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fcompile-fail%2Fissue-20616-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fcompile-fail%2Fissue-20616-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-3.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // We need all these 9 issue-20616-N.rs files\n-// becase we can only catch one parsing error at a time\n+// because we can only catch one parsing error at a time\n \n \n "}, {"sha": "0dbe92fc1bcb35d830aa07c84f00de7497de627f", "filename": "src/test/compile-fail/issue-20616-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fcompile-fail%2Fissue-20616-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fcompile-fail%2Fissue-20616-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-4.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // We need all these 9 issue-20616-N.rs files\n-// becase we can only catch one parsing error at a time\n+// because we can only catch one parsing error at a time\n \n \n "}, {"sha": "794e5178f4b2ca3c0f345b33593c791535286664", "filename": "src/test/compile-fail/issue-20616-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fcompile-fail%2Fissue-20616-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fcompile-fail%2Fissue-20616-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-5.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // We need all these 9 issue-20616-N.rs files\n-// becase we can only catch one parsing error at a time\n+// because we can only catch one parsing error at a time\n \n \n "}, {"sha": "fe91751a4a06b853d0905007fa15de5e079057cb", "filename": "src/test/compile-fail/issue-20616-6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fcompile-fail%2Fissue-20616-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fcompile-fail%2Fissue-20616-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-6.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // We need all these 9 issue-20616-N.rs files\n-// becase we can only catch one parsing error at a time\n+// because we can only catch one parsing error at a time\n \n \n "}, {"sha": "184ad02710268c760c192dfd269f2b48a5b22a28", "filename": "src/test/compile-fail/issue-20616-7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fcompile-fail%2Fissue-20616-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fcompile-fail%2Fissue-20616-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-7.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // We need all these 9 issue-20616-N.rs files\n-// becase we can only catch one parsing error at a time\n+// because we can only catch one parsing error at a time\n \n \n "}, {"sha": "5cdec33e94b9282fc2ec0343b3807b220ba7b868", "filename": "src/test/compile-fail/issue-20616-8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fcompile-fail%2Fissue-20616-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fcompile-fail%2Fissue-20616-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-8.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // We need all these 9 issue-20616-N.rs files\n-// becase we can only catch one parsing error at a time\n+// because we can only catch one parsing error at a time\n \n \n "}, {"sha": "7995addb692cca3e1ae8bfa6bcf566545b905760", "filename": "src/test/compile-fail/issue-20616-9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fcompile-fail%2Fissue-20616-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fcompile-fail%2Fissue-20616-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-9.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // We need all these 9 issue-20616-N.rs files\n-// becase we can only catch one parsing error at a time\n+// because we can only catch one parsing error at a time\n \n \n "}, {"sha": "b2cc5cae69750e2da40bc84f9d8aa748abc786fb", "filename": "src/test/compile-fail/no_crate_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fcompile-fail%2Fno_crate_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fcompile-fail%2Fno_crate_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_crate_type.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// regresion test for issue 11256\n+// regression test for issue 11256\n #![crate_type]  //~ ERROR `crate_type` requires a value\n \n fn main() {"}, {"sha": "ad4932b9fb9454a9611791a4d516aab6a695451c", "filename": "src/test/mir-opt/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fmir-opt%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fmir-opt%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2FREADME.md?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -26,7 +26,7 @@ other non-matched lines before and after, but not between $expected_lines,\n should you want to skip lines, you must include an elision comment, of the form\n (as a regex) `//\\s*...\\s*`. The lines will be skipped lazily, that is, if there\n are two identical lines in the output that match the line after the elision\n-comment, the first one wil be matched.\n+comment, the first one will be matched.\n \n Examples:\n "}, {"sha": "17e6119f968aca0ea1778a096e35ee2c969743e1", "filename": "src/test/pretty/stmt_expr_attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -255,7 +255,7 @@ fn _11() {\n     while true { let _ = #[attr] break ; }\n     || #[attr] return;\n     let _ = #[attr] expr_mac!();\n-    /* FIXME: pp bug, loosing delimiter styles\n+    /* FIXME: pp bug, losing delimiter styles\n     let _ = #[attr] expr_mac![];\n     let _ = #[attr] expr_mac!{};\n     */"}, {"sha": "2ddf3aa5439f62d4b0d3be11924d705da4fa5a6e", "filename": "src/test/run-make/hotplug_codegen_backend/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Frun-make%2Fhotplug_codegen_backend%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Frun-make%2Fhotplug_codegen_backend%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fhotplug_codegen_backend%2FMakefile?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -6,4 +6,4 @@ all:\n \t\t-o $(TMPDIR)/the_backend.dylib\n \t$(RUSTC) some_crate.rs --crate-name some_crate --crate-type bin -o $(TMPDIR)/some_crate \\\n \t\t-Z codegen-backend=$(TMPDIR)/the_backend.dylib -Z unstable-options\n-\tgrep -x \"This has been \\\"compiled\\\" succesfully.\" $(TMPDIR)/some_crate\n+\tgrep -x \"This has been \\\"compiled\\\" successfully.\" $(TMPDIR)/some_crate"}, {"sha": "9e87268e6999da1ec81d5193fa093d19ab68776e", "filename": "src/test/run-make/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Frun-make%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Frun-make%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -69,7 +69,7 @@ impl TransCrate for TheBackend {\n             let output_name =\n                 out_filename(sess, crate_type, &outputs, &*crate_name.as_str());\n             let mut out_file = ::std::fs::File::create(output_name).unwrap();\n-            write!(out_file, \"This has been \\\"compiled\\\" succesfully.\").unwrap();\n+            write!(out_file, \"This has been \\\"compiled\\\" successfully.\").unwrap();\n         }\n         Ok(())\n     }"}, {"sha": "cfaf913216a5c68a3b10a8002c89ad7d7eef89a9", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/derive-reexport.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-reexport.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test not a test, auxillary\n+// ignore-test not a test, auxiliary\n \n #![feature(macro_reexport)]\n "}, {"sha": "d4463fed1a6747ab2d280bc13952b63af00fc840", "filename": "src/test/run-pass/issue-29746.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Frun-pass%2Fissue-29746.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Frun-pass%2Fissue-29746.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-29746.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -17,7 +17,7 @@ macro_rules! zip {\n     };\n \n     // Intermediate steps to build the zipped expression, the match pattern, and\n-    //  and the output tuple of the closure, using macro hygene to repeatedly\n+    //  and the output tuple of the closure, using macro hygiene to repeatedly\n     //  introduce new variables named 'x'.\n     ([$a:expr, $($rest:expr),*], $zip:expr, $pat:pat, [$($flat:expr),*]) => {\n         zip!([$($rest),*], $zip.zip($a), ($pat,x), [$($flat),*, x])"}, {"sha": "95890d2e1b47b0585f7801a64693911a1aabe62c", "filename": "src/test/run-pass/issue-32008.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Frun-pass%2Fissue-32008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Frun-pass%2Fissue-32008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-32008.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // Tests that binary operators allow subtyping on both the LHS and RHS,\n-// and as such do not introduce unnecesarily strict lifetime constraints.\n+// and as such do not introduce unnecessarily strict lifetime constraints.\n \n use std::ops::Add;\n "}, {"sha": "94b2a586ddfa04274043c62959d06d1d2b908fb5", "filename": "src/test/run-pass/rfc1857-drop-order.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Frun-pass%2Frfc1857-drop-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Frun-pass%2Frfc1857-drop-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc1857-drop-order.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -67,7 +67,7 @@ fn test_drop_tuple() {\n     panic::catch_unwind(|| {\n         (PushOnDrop::new(2, cloned.clone()),\n          PushOnDrop::new(1, cloned.clone()),\n-         panic!(\"this panic is catched :D\"));\n+         panic!(\"this panic is caught :D\"));\n     }).err().unwrap();\n     assert_eq!(*dropped_fields.borrow(), &[1, 2]);\n }\n@@ -99,7 +99,7 @@ fn test_drop_struct() {\n         TestStruct {\n             x: PushOnDrop::new(2, cloned.clone()),\n             y: PushOnDrop::new(1, cloned.clone()),\n-            z: panic!(\"this panic is catched :D\")\n+            z: panic!(\"this panic is caught :D\")\n         };\n     }).err().unwrap();\n     assert_eq!(*dropped_fields.borrow(), &[1, 2]);\n@@ -111,7 +111,7 @@ fn test_drop_struct() {\n         TestStruct {\n             y: PushOnDrop::new(2, cloned.clone()),\n             x: PushOnDrop::new(1, cloned.clone()),\n-            z: panic!(\"this panic is catched :D\")\n+            z: panic!(\"this panic is caught :D\")\n         };\n     }).err().unwrap();\n     assert_eq!(*dropped_fields.borrow(), &[1, 2]);\n@@ -122,7 +122,7 @@ fn test_drop_struct() {\n     panic::catch_unwind(|| {\n         TestTupleStruct(PushOnDrop::new(2, cloned.clone()),\n                         PushOnDrop::new(1, cloned.clone()),\n-                        panic!(\"this panic is catched :D\"));\n+                        panic!(\"this panic is caught :D\"));\n     }).err().unwrap();\n     assert_eq!(*dropped_fields.borrow(), &[1, 2]);\n }\n@@ -154,7 +154,7 @@ fn test_drop_enum() {\n         TestEnum::Struct {\n             x: PushOnDrop::new(2, cloned.clone()),\n             y: PushOnDrop::new(1, cloned.clone()),\n-            z: panic!(\"this panic is catched :D\")\n+            z: panic!(\"this panic is caught :D\")\n         };\n     }).err().unwrap();\n     assert_eq!(*dropped_fields.borrow(), &[1, 2]);\n@@ -166,7 +166,7 @@ fn test_drop_enum() {\n         TestEnum::Struct {\n             y: PushOnDrop::new(2, cloned.clone()),\n             x: PushOnDrop::new(1, cloned.clone()),\n-            z: panic!(\"this panic is catched :D\")\n+            z: panic!(\"this panic is caught :D\")\n         };\n     }).err().unwrap();\n     assert_eq!(*dropped_fields.borrow(), &[1, 2]);\n@@ -177,7 +177,7 @@ fn test_drop_enum() {\n     panic::catch_unwind(|| {\n         TestEnum::Tuple(PushOnDrop::new(2, cloned.clone()),\n                         PushOnDrop::new(1, cloned.clone()),\n-                        panic!(\"this panic is catched :D\"));\n+                        panic!(\"this panic is caught :D\"));\n     }).err().unwrap();\n     assert_eq!(*dropped_fields.borrow(), &[1, 2]);\n }\n@@ -207,7 +207,7 @@ fn test_drop_list() {\n         vec![\n             PushOnDrop::new(2, cloned.clone()),\n             PushOnDrop::new(1, cloned.clone()),\n-            panic!(\"this panic is catched :D\")\n+            panic!(\"this panic is caught :D\")\n         ];\n     }).err().unwrap();\n     assert_eq!(*dropped_fields.borrow(), &[1, 2]);\n@@ -219,7 +219,7 @@ fn test_drop_list() {\n         [\n             PushOnDrop::new(2, cloned.clone()),\n             PushOnDrop::new(1, cloned.clone()),\n-            panic!(\"this panic is catched :D\")\n+            panic!(\"this panic is caught :D\")\n         ];\n     }).err().unwrap();\n     assert_eq!(*dropped_fields.borrow(), &[1, 2]);"}, {"sha": "3c54921ac6e02409d3811f65650dacd5e20453e1", "filename": "src/test/run-pass/simd-target-feature-mixup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Frun-pass%2Fsimd-target-feature-mixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Frun-pass%2Fsimd-target-feature-mixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-target-feature-mixup.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -30,7 +30,7 @@ fn main() {\n \n         // We don't actually know if our computer has the requisite target features\n         // for the test below. Testing for that will get added to libstd later so\n-        // for now just asume sigill means this is a machine that can't run this test.\n+        // for now just assume sigill means this is a machine that can't run this test.\n         if is_sigill(status) {\n             println!(\"sigill with {}, assuming spurious\", level);\n             continue"}, {"sha": "1d055ccbeadefeed30e31cee8369181bb610ad1e", "filename": "src/test/rustdoc/impl-parts-crosscrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Frustdoc%2Fimpl-parts-crosscrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Frustdoc%2Fimpl-parts-crosscrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-parts-crosscrate.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -17,7 +17,7 @@ extern crate rustdoc_impl_parts_crosscrate;\n \n pub struct Bar<T> { t: T }\n \n-// The output file is html embeded in javascript, so the html tags\n+// The output file is html embedded in javascript, so the html tags\n // aren't stripped by the processing script and we can't check for the\n // full impl string.  Instead, just make sure something from each part\n // is mentioned."}, {"sha": "e10ff1a991705218d98a187ff638bbacd0c0869a", "filename": "src/test/rustdoc/link-title-escape.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Frustdoc%2Flink-title-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Frustdoc%2Flink-title-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Flink-title-escape.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z unstable-options --disable-commonmark\n-\n #![crate_name = \"foo\"]\n \n //! hello [foo]"}, {"sha": "411cdfb335b342dd16f7a0d0fbcb51f8a23895fb", "filename": "src/test/ui/explain.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fui%2Fexplain.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fui%2Fexplain.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplain.stdout?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -45,7 +45,7 @@ is a function pointer, which is not zero-sized.\n This pattern should be rewritten. There are a few possible ways to do this:\n \n - change the original fn declaration to match the expected signature,\n-  and do the cast in the fn body (the prefered option)\n+  and do the cast in the fn body (the preferred option)\n - cast the fn item fo a fn pointer before calling transmute, as shown here:\n \n     ```"}, {"sha": "21950402c8c41cedd3007d2368b4b28253a17cbc", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -509,7 +509,7 @@ mod reexport_test_harness_main {\n     //~^ WARN unused attribute\n }\n \n-// Cannnot feed \"2700\" to `#[macro_escape]` without signaling an error.\n+// Cannot feed \"2700\" to `#[macro_escape]` without signaling an error.\n #[macro_escape]\n //~^ WARN macro_escape is a deprecated synonym for macro_use\n mod macro_escape {"}, {"sha": "20a2cbfd3aa784b41d1dc9a569d85c5dd5d17d83", "filename": "src/test/ui/lifetime-errors/liveness-assign-imm-local-notes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fui%2Flifetime-errors%2Fliveness-assign-imm-local-notes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftest%2Fui%2Flifetime-errors%2Fliveness-assign-imm-local-notes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fliveness-assign-imm-local-notes.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // FIXME: Change to UI Test\n-// Check notes are placed on an assignment that can actually preceed the current assigmnent\n+// Check notes are placed on an assignment that can actually precede the current assigmnent\n // Don't emmit a first assignment for assignment in a loop.\n \n // compile-flags: -Zborrowck=compare"}, {"sha": "76f5f98358c9e360b579e1212ce3a0f579692c2c", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a046e9338fb0455c33b13e8fe28da78212dedc/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=27a046e9338fb0455c33b13e8fe28da78212dedc", "patch": "@@ -24,7 +24,7 @@ use std::path::PathBuf;\n \n use syntax::diagnostics::metadata::{get_metadata_dir, ErrorMetadataMap, ErrorMetadata};\n \n-use rustdoc::html::markdown::{Markdown, PLAYGROUND, RenderType};\n+use rustdoc::html::markdown::{Markdown, PLAYGROUND};\n use rustc_serialize::json;\n \n enum OutputFormat {\n@@ -100,7 +100,7 @@ impl Formatter for HTMLFormatter {\n \n         // Description rendered as markdown.\n         match info.description {\n-            Some(ref desc) => write!(output, \"{}\", Markdown(desc, &[], RenderType::Hoedown))?,\n+            Some(ref desc) => write!(output, \"{}\", Markdown(desc, &[]))?,\n             None => write!(output, \"<p>No description.</p>\\n\")?,\n         }\n "}]}