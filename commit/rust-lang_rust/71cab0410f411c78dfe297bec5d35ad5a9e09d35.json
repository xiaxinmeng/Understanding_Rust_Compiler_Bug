{"sha": "71cab0410f411c78dfe297bec5d35ad5a9e09d35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxY2FiMDQxMGY0MTFjNzhkZmUyOTdiZWM1ZDM1YWQ1YTllMDlkMzU=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-03-09T03:39:01Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-03-09T03:57:00Z"}, "message": "Add an option to not run rustdoc blocks\n\nThis is useful for code that would be expensive to run or has some kind\nof external dependency (e.g. a database or server).", "tree": {"sha": "5578d9280d3f1f2960de38b5847cb3cc6f704fa5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5578d9280d3f1f2960de38b5847cb3cc6f704fa5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71cab0410f411c78dfe297bec5d35ad5a9e09d35", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71cab0410f411c78dfe297bec5d35ad5a9e09d35", "html_url": "https://github.com/rust-lang/rust/commit/71cab0410f411c78dfe297bec5d35ad5a9e09d35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71cab0410f411c78dfe297bec5d35ad5a9e09d35/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "001705610505065ff50502390af933e0b264853a", "url": "https://api.github.com/repos/rust-lang/rust/commits/001705610505065ff50502390af933e0b264853a", "html_url": "https://github.com/rust-lang/rust/commit/001705610505065ff50502390af933e0b264853a"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "545cafd7f31d1959a13bd9e8ccee2b3edf27e0c3", "filename": "src/doc/rustdoc.md", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/71cab0410f411c78dfe297bec5d35ad5a9e09d35/src%2Fdoc%2Frustdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/71cab0410f411c78dfe297bec5d35ad5a9e09d35/src%2Fdoc%2Frustdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc.md?ref=71cab0410f411c78dfe297bec5d35ad5a9e09d35", "patch": "@@ -117,15 +117,24 @@ code block.\n     // This is a testable code block (4-space indent)\n ~~~\n \n-In addition to the `ignore` directive, you can specify that the test's execution\n-should fail with the `should_fail` directive.\n+You can specify that the test's execution should fail with the `should_fail`\n+directive.\n \n ~~~\n ```should_fail\n // This code block is expected to generate a failure when run\n ```\n ~~~\n \n+You can specify that the code block should be compiled but not run with the\n+`no_run` directive.\n+\n+~~~\n+```no_run\n+// This code will be compiled but not executed\n+```\n+~~~\n+\n Rustdoc also supplies some extra sugar for helping with some tedious\n documentation examples. If a line is prefixed with `# `, then the line\n will not show up in the HTML documentation, but it will be used when"}, {"sha": "19a28931a8a1fad906b49a1ee11fe5644dccec47", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/71cab0410f411c78dfe297bec5d35ad5a9e09d35/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71cab0410f411c78dfe297bec5d35ad5a9e09d35/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=71cab0410f411c78dfe297bec5d35ad5a9e09d35", "patch": "@@ -245,14 +245,15 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n     extern fn block(_ob: *buf, text: *buf, lang: *buf, opaque: *libc::c_void) {\n         unsafe {\n             if text.is_null() { return }\n-            let (shouldfail, ignore) = if lang.is_null() {\n-                (false, false)\n+            let (should_fail, no_run, ignore) = if lang.is_null() {\n+                (false, false, false)\n             } else {\n                 vec::raw::buf_as_slice((*lang).data,\n                                        (*lang).size as uint, |lang| {\n                     let s = str::from_utf8(lang).unwrap();\n-                    (s.contains(\"should_fail\"), s.contains(\"ignore\") ||\n-                                                s.contains(\"notrust\"))\n+                    (s.contains(\"should_fail\"),\n+                     s.contains(\"no_run\"),\n+                     s.contains(\"ignore\") || s.contains(\"notrust\"))\n                 })\n             };\n             if ignore { return }\n@@ -261,7 +262,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n                 let text = str::from_utf8(text).unwrap();\n                 let mut lines = text.lines().map(|l| stripped_filtered_line(l).unwrap_or(l));\n                 let text = lines.to_owned_vec().connect(\"\\n\");\n-                tests.add_test(text, shouldfail);\n+                tests.add_test(text, should_fail, no_run);\n             })\n         }\n     }"}, {"sha": "5edc24c606659281516207bccf064fc757b22748", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/71cab0410f411c78dfe297bec5d35ad5a9e09d35/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71cab0410f411c78dfe297bec5d35ad5a9e09d35/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=71cab0410f411c78dfe297bec5d35ad5a9e09d35", "patch": "@@ -98,7 +98,8 @@ pub fn run(input: &str, matches: &getopts::Matches) -> int {\n     0\n }\n \n-fn runtest(test: &str, cratename: &str, libs: HashSet<Path>, should_fail: bool) {\n+fn runtest(test: &str, cratename: &str, libs: HashSet<Path>, should_fail: bool,\n+           no_run: bool) {\n     let test = maketest(test, cratename);\n     let parsesess = parse::new_parse_sess();\n     let input = driver::StrInput(test);\n@@ -152,6 +153,8 @@ fn runtest(test: &str, cratename: &str, libs: HashSet<Path>, should_fail: bool)\n     let cfg = driver::build_configuration(sess);\n     driver::compile_input(sess, cfg, &input, &out, &None);\n \n+    if no_run { return }\n+\n     // Run the code!\n     let exe = outdir.path().join(\"rust_out\");\n     let out = Process::output(exe.as_str().unwrap(), []);\n@@ -203,7 +206,7 @@ pub struct Collector {\n }\n \n impl Collector {\n-    pub fn add_test(&mut self, test: &str, should_fail: bool) {\n+    pub fn add_test(&mut self, test: &str, should_fail: bool, no_run: bool) {\n         let test = test.to_owned();\n         let name = format!(\"{}_{}\", self.names.connect(\"::\"), self.cnt);\n         self.cnt += 1;\n@@ -218,7 +221,7 @@ impl Collector {\n                 should_fail: false, // compiler failures are test failures\n             },\n             testfn: testing::DynTestFn(proc() {\n-                runtest(test, cratename, libs, should_fail);\n+                runtest(test, cratename, libs, should_fail, no_run);\n             }),\n         });\n     }"}]}