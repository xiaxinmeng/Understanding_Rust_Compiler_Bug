{"sha": "7ba086c6db1617b17bce2de13eaa34acc366226b", "node_id": "C_kwDOAAsO6NoAKDdiYTA4NmM2ZGIxNjE3YjE3YmNlMmRlMTNlYWEzNGFjYzM2NjIyNmI", "commit": {"author": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2021-12-17T05:17:22Z"}, "committer": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2021-12-22T22:20:04Z"}, "message": "Add some JSDoc comments to rustdoc JS\n\nThis follows the Closure Compiler dialect of JSDoc, so we\ncan use it to do some basic type checking. We don't plan to\ncompile with Closure Compiler, just use it to check types. See\nhttps://github.com/google/closure-compiler/wiki/ for details.", "tree": {"sha": "01162136a08a487320ca9eb192c4a9684b1b2ad2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01162136a08a487320ca9eb192c4a9684b1b2ad2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ba086c6db1617b17bce2de13eaa34acc366226b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ba086c6db1617b17bce2de13eaa34acc366226b", "html_url": "https://github.com/rust-lang/rust/commit/7ba086c6db1617b17bce2de13eaa34acc366226b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ba086c6db1617b17bce2de13eaa34acc366226b/comments", "author": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e100ec5bc7cd768ec17d75448b29c9ab4a39272b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e100ec5bc7cd768ec17d75448b29c9ab4a39272b", "html_url": "https://github.com/rust-lang/rust/commit/e100ec5bc7cd768ec17d75448b29c9ab4a39272b"}], "stats": {"total": 200, "additions": 170, "deletions": 30}, "files": [{"sha": "1fd859ad7cf49cd9c5d1c2dbc85da7d3ff97fe7d", "filename": "src/librustdoc/html/static/js/README.md", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7ba086c6db1617b17bce2de13eaa34acc366226b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/7ba086c6db1617b17bce2de13eaa34acc366226b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2FREADME.md?ref=7ba086c6db1617b17bce2de13eaa34acc366226b", "patch": "@@ -0,0 +1,15 @@\n+# Rustdoc JS\n+\n+These JavaScript files are incorporated into the rustdoc binary at build time,\n+and are minified and written to the filesystem as part of the doc build process.\n+\n+We use the [Closure Compiler](https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler)\n+dialect of JSDoc to comment our code and annotate params and return types.\n+To run a check:\n+\n+    ./x.py doc library/std\n+    npm i -g google-closure-compiler\n+    google-closure-compiler -W VERBOSE \\\n+      build/<YOUR PLATFORM>/doc/{search-index*.js,crates*.js} \\\n+      src/librustdoc/html/static/js/{search.js,main.js,storage.js} \\\n+      --externs src/librustdoc/html/static/js/externs.js >/dev/null"}, {"sha": "629f90728d2f61cfaa952de308a3c613079a31af", "filename": "src/librustdoc/html/static/js/externs.js", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7ba086c6db1617b17bce2de13eaa34acc366226b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js", "raw_url": "https://github.com/rust-lang/rust/raw/7ba086c6db1617b17bce2de13eaa34acc366226b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js?ref=7ba086c6db1617b17bce2de13eaa34acc366226b", "patch": "@@ -0,0 +1,32 @@\n+// This file contains type definitions that are processed by the Closure Compiler but are\n+// not put into the JavaScript we include as part of the documentation. It is used for\n+// type checking. See README.md in this directory for more info.\n+\n+/* eslint-disable */\n+var searchState;\n+function initSearch(searchIndex){}\n+\n+/**\n+ * @typedef {{\n+ *   raw: string,\n+ *   query: string,\n+ *   type: string,\n+ *   id: string,\n+ * }}\n+ */\n+var ParsedQuery;\n+\n+/**\n+ * @typedef {{\n+ *    crate: string,\n+ *    desc: string,\n+ *    id: number,\n+ *    name: string,\n+ *    normalizedName: string,\n+ *    parent: (Object|null|undefined),\n+ *    path: string,\n+ *    ty: (Number|null|number),\n+ *    type: (Array<?>|null)\n+ * }}\n+ */\n+var Row;"}, {"sha": "f81f6d5d61fed658d7d551424b82b95a33a963b2", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ba086c6db1617b17bce2de13eaa34acc366226b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/7ba086c6db1617b17bce2de13eaa34acc366226b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=7ba086c6db1617b17bce2de13eaa34acc366226b", "patch": "@@ -420,6 +420,13 @@ function hideThemeButtonState() {\n         return document.getElementById(\"help\");\n     }\n \n+    /**\n+     * Show the help popup.\n+     *\n+     * @param {boolean} display    - Whether to show or hide the popup\n+     * @param {Event}   ev         - The event that triggered this call\n+     * @param {Element} [help]     - The help element if it already exists\n+     */\n     function displayHelp(display, ev, help) {\n         if (display) {\n             help = help ? help : getHelpElement(true);"}, {"sha": "cf320f7b4958a14a10eaf0d16c48ab3f20e73a77", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 100, "deletions": 30, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/7ba086c6db1617b17bce2de13eaa34acc366226b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/7ba086c6db1617b17bce2de13eaa34acc366226b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=7ba086c6db1617b17bce2de13eaa34acc366226b", "patch": "@@ -113,7 +113,15 @@ window.initSearch = function(rawSearchIndex) {\n     var INPUTS_DATA = 0;\n     var OUTPUT_DATA = 1;\n     var NO_TYPE_FILTER = -1;\n-    var currentResults, index, searchIndex;\n+    /**\n+     *  @type {Array<Row>}\n+     */\n+    var searchIndex;\n+    /**\n+     *  @type {Array<string>}\n+     */\n+    var searchWords;\n+    var currentResults;\n     var ALIASES = {};\n     var params = searchState.getQueryStringParams();\n \n@@ -126,12 +134,15 @@ window.initSearch = function(rawSearchIndex) {\n     }\n \n     /**\n-     * Executes the query and builds an index of results\n-     * @param  {[Object]} query      [The user query]\n-     * @param  {[type]} searchWords  [The list of search words to query\n-     *                                against]\n-     * @param  {[type]} filterCrates [Crate to search in if defined]\n-     * @return {[type]}              [A search index of results]\n+     * Executes the query and returns a list of results for each results tab.\n+     * @param  {Object}        query          - The user query\n+     * @param  {Array<string>} searchWords    - The list of search words to query against\n+     * @param  {string}        [filterCrates] - Crate to search in\n+     * @return {{\n+     *   in_args: Array<?>,\n+     *   returned: Array<?>,\n+     *   others: Array<?>\n+     * }}\n      */\n     function execQuery(query, searchWords, filterCrates) {\n         function itemTypeFromName(typename) {\n@@ -847,11 +858,11 @@ window.initSearch = function(rawSearchIndex) {\n      * This could be written functionally, but I wanted to minimise\n      * functions on stack.\n      *\n-     * @param  {[string]} name   [The name of the result]\n-     * @param  {[string]} path   [The path of the result]\n-     * @param  {[string]} keys   [The keys to be used ([\"file\", \"open\"])]\n-     * @param  {[object]} parent [The parent of the result]\n-     * @return {boolean}       [Whether the result is valid or not]\n+     * @param  {string} name   - The name of the result\n+     * @param  {string} path   - The path of the result\n+     * @param  {string} keys   - The keys to be used ([\"file\", \"open\"])\n+     * @param  {Object} parent - The parent of the result\n+     * @return {boolean}       - Whether the result is valid or not\n      */\n     function validateResult(name, path, keys, parent) {\n         for (var i = 0, len = keys.length; i < len; ++i) {\n@@ -872,8 +883,14 @@ window.initSearch = function(rawSearchIndex) {\n         return true;\n     }\n \n+    /**\n+     * Parse a string into a query object.\n+     *\n+     * @param {string} raw - The text that the user typed.\n+     * @returns {ParsedQuery}\n+     */\n     function getQuery(raw) {\n-        var matches, type, query;\n+        var matches, type = \"\", query;\n         query = raw;\n \n         matches = query.match(/^(fn|mod|struct|enum|trait|type|const|macro)\\s*:\\s*/i);\n@@ -974,6 +991,12 @@ window.initSearch = function(rawSearchIndex) {\n         return tmp;\n     }\n \n+    /**\n+     * Render a set of search results for a single tab.\n+     * @param {Array<?>}    array   - The search results for this tab\n+     * @param {ParsedQuery} query\n+     * @param {boolean}     display - True if this is the active tab\n+     */\n     function addTab(array, query, display) {\n         var extraClass = \"\";\n         if (display === true) {\n@@ -1083,7 +1106,7 @@ window.initSearch = function(rawSearchIndex) {\n \n         currentResults = query.id;\n \n-        var ret_others = addTab(results.others, query);\n+        var ret_others = addTab(results.others, query, true);\n         var ret_in_args = addTab(results.in_args, query, false);\n         var ret_returned = addTab(results.returned, query, false);\n \n@@ -1253,6 +1276,12 @@ window.initSearch = function(rawSearchIndex) {\n         return undefined;\n     }\n \n+    /**\n+     * Perform a search based on the current state of the search input element\n+     * and display the results.\n+     * @param {Event}   [e]       - The event that triggered this search, if any\n+     * @param {boolean} [forced]\n+     */\n     function search(e, forced) {\n         var params = searchState.getQueryStringParams();\n         var query = getQuery(searchState.input.value.trim());\n@@ -1287,11 +1316,14 @@ window.initSearch = function(rawSearchIndex) {\n         }\n \n         var filterCrates = getFilterCrates();\n-        showResults(execSearch(query, index, filterCrates), params.go_to_first);\n+        showResults(execSearch(query, searchWords, filterCrates), params[\"go_to_first\"]);\n     }\n \n     function buildIndex(rawSearchIndex) {\n         searchIndex = [];\n+        /**\n+         * @type {Array<string>}\n+         */\n         var searchWords = [];\n         var i, word;\n         var currentIndex = 0;\n@@ -1304,6 +1336,38 @@ window.initSearch = function(rawSearchIndex) {\n \n             var crateSize = 0;\n \n+            /**\n+             * The raw search data for a given crate. `n`, `t`, `d`, and `q`, `i`, and `f`\n+             * are arrays with the same length. n[i] contains the name of an item.\n+             * t[i] contains the type of that item (as a small integer that represents an\n+             * offset in `itemTypes`). d[i] contains the description of that item.\n+             *\n+             * q[i] contains the full path of the item, or an empty string indicating\n+             * \"same as q[i-1]\".\n+             *\n+             * i[i], f[i] are a mystery.\n+             *\n+             * `a` defines aliases with an Array of pairs: [name, offset], where `offset`\n+             * points into the n/t/d/q/i/f arrays.\n+             *\n+             * `doc` contains the description of the crate.\n+             *\n+             * `p` is a mystery and isn't the same length as n/t/d/q/i/f.\n+             *\n+             * @type {{\n+             *   doc: string,\n+             *   a: Object,\n+             *   n: Array<string>,\n+             *   t: Array<Number>,\n+             *   d: Array<string>,\n+             *   q: Array<string>,\n+             *   i: Array<Number>,\n+             *   f: Array<Array<?>>,\n+             *   p: Array<Object>,\n+             * }}\n+             */\n+            var crateCorpus = rawSearchIndex[crate];\n+\n             searchWords.push(crate);\n             // This object should have exactly the same set of fields as the \"row\"\n             // object defined below. Your JavaScript runtime will thank you.\n@@ -1313,7 +1377,7 @@ window.initSearch = function(rawSearchIndex) {\n                 ty: 1, // == ExternCrate\n                 name: crate,\n                 path: \"\",\n-                desc: rawSearchIndex[crate].doc,\n+                desc: crateCorpus.doc,\n                 parent: undefined,\n                 type: null,\n                 id: id,\n@@ -1324,23 +1388,23 @@ window.initSearch = function(rawSearchIndex) {\n             currentIndex += 1;\n \n             // an array of (Number) item types\n-            var itemTypes = rawSearchIndex[crate].t;\n+            var itemTypes = crateCorpus.t;\n             // an array of (String) item names\n-            var itemNames = rawSearchIndex[crate].n;\n+            var itemNames = crateCorpus.n;\n             // an array of (String) full paths (or empty string for previous path)\n-            var itemPaths = rawSearchIndex[crate].q;\n+            var itemPaths = crateCorpus.q;\n             // an array of (String) descriptions\n-            var itemDescs = rawSearchIndex[crate].d;\n+            var itemDescs = crateCorpus.d;\n             // an array of (Number) the parent path index + 1 to `paths`, or 0 if none\n-            var itemParentIdxs = rawSearchIndex[crate].i;\n+            var itemParentIdxs = crateCorpus.i;\n             // an array of (Object | null) the type of the function, if any\n-            var itemFunctionSearchTypes = rawSearchIndex[crate].f;\n+            var itemFunctionSearchTypes = crateCorpus.f;\n             // an array of [(Number) item type,\n             //              (String) name]\n-            var paths = rawSearchIndex[crate].p;\n+            var paths = crateCorpus.p;\n             // an array of [(String) alias name\n             //             [Number] index to items]\n-            var aliases = rawSearchIndex[crate].a;\n+            var aliases = crateCorpus.a;\n \n             // convert `rawPaths` entries into object form\n             var len = paths.length;\n@@ -1406,6 +1470,16 @@ window.initSearch = function(rawSearchIndex) {\n         return searchWords;\n     }\n \n+    /**\n+     * Callback for when the search form is submitted.\n+     * @param {Event} [e] - The event that triggered this call, if any\n+     */\n+    function onSearchSubmit(e) {\n+        e.preventDefault();\n+        searchState.clearInputTimeout();\n+        search();\n+    }\n+\n     function registerSearchEvents() {\n         var searchAfter500ms = function() {\n             searchState.clearInputTimeout();\n@@ -1421,11 +1495,7 @@ window.initSearch = function(rawSearchIndex) {\n         };\n         searchState.input.onkeyup = searchAfter500ms;\n         searchState.input.oninput = searchAfter500ms;\n-        document.getElementsByClassName(\"search-form\")[0].onsubmit = function(e) {\n-            e.preventDefault();\n-            searchState.clearInputTimeout();\n-            search();\n-        };\n+        document.getElementsByClassName(\"search-form\")[0].onsubmit = onSearchSubmit;\n         searchState.input.onchange = function(e) {\n             if (e.target !== document.activeElement) {\n                 // To prevent doing anything when it's from a blur event.\n@@ -1546,7 +1616,7 @@ window.initSearch = function(rawSearchIndex) {\n         };\n     }\n \n-    index = buildIndex(rawSearchIndex);\n+    searchWords = buildIndex(rawSearchIndex);\n     registerSearchEvents();\n     // If there's a search term in the URL, execute the search now.\n     if (searchState.getQueryStringParams().search) {"}, {"sha": "d8b3ba92dcba2d0f6a5ed89e044a2959a9cfa232", "filename": "src/librustdoc/html/static/js/storage.js", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7ba086c6db1617b17bce2de13eaa34acc366226b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/7ba086c6db1617b17bce2de13eaa34acc366226b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js?ref=7ba086c6db1617b17bce2de13eaa34acc366226b", "patch": "@@ -55,6 +55,12 @@ function removeClass(elem, className) {\n     elem.classList.remove(className);\n }\n \n+/**\n+ * Run a callback for every element of an Array.\n+ * @param {Array<?>}    arr        - The array to iterate over\n+ * @param {function(?)} func       - The callback\n+ * @param {boolean}     [reversed] - Whether to iterate in reverse\n+ */\n function onEach(arr, func, reversed) {\n     if (arr && arr.length > 0 && func) {\n         var length = arr.length;\n@@ -76,6 +82,16 @@ function onEach(arr, func, reversed) {\n     return false;\n }\n \n+/**\n+ * Turn an HTMLCollection or a NodeList into an Array, then run a callback\n+ * for every element. This is useful because iterating over an HTMLCollection\n+ * or a \"live\" NodeList while modifying it can be very slow.\n+ * https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection\n+ * https://developer.mozilla.org/en-US/docs/Web/API/NodeList\n+ * @param {NodeList<?>|HTMLCollection<?>} lazyArray  - An array to iterate over\n+ * @param {function(?)}                   func       - The callback\n+ * @param {boolean}                       [reversed] - Whether to iterate in reverse\n+ */\n function onEachLazy(lazyArray, func, reversed) {\n     return onEach(\n         Array.prototype.slice.call(lazyArray),"}]}