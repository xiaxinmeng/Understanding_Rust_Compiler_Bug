{"sha": "bb5e6c984de2fbabba37655551f4bab16fbd9e5e", "node_id": "C_kwDOAAsO6NoAKGJiNWU2Yzk4NGRlMmZiYWJiYTM3NjU1NTUxZjRiYWIxNmZiZDllNWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-22T04:27:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-22T04:27:10Z"}, "message": "Auto merge of #97265 - JohnTitor:rollup-kgthnjt, r=JohnTitor\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #97144 (Fix rusty grammar in `std::error::Reporter` docs)\n - #97225 (Fix `Display` for `cell::{Ref,RefMut}`)\n - #97228 (Omit stdarch workspace from rust-src)\n - #97236 (Recover when resolution did not resolve lifetimes.)\n - #97245 (Fix typo in futex RwLock::write_contended.)\n - #97259 (Fix typo in Mir phase docs)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "1c25b13e8a534319b4eb240c42676872b3d05595", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c25b13e8a534319b4eb240c42676872b3d05595"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb5e6c984de2fbabba37655551f4bab16fbd9e5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb5e6c984de2fbabba37655551f4bab16fbd9e5e", "html_url": "https://github.com/rust-lang/rust/commit/bb5e6c984de2fbabba37655551f4bab16fbd9e5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09ea21343a432a4c51b363d6f53bed694f81ea3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/09ea21343a432a4c51b363d6f53bed694f81ea3a", "html_url": "https://github.com/rust-lang/rust/commit/09ea21343a432a4c51b363d6f53bed694f81ea3a"}, {"sha": "97e1ab0005e728363ad5a12bfb5229ef1bc0f60b", "url": "https://api.github.com/repos/rust-lang/rust/commits/97e1ab0005e728363ad5a12bfb5229ef1bc0f60b", "html_url": "https://github.com/rust-lang/rust/commit/97e1ab0005e728363ad5a12bfb5229ef1bc0f60b"}], "stats": {"total": 130, "additions": 106, "deletions": 24}, "files": [{"sha": "2a7f534bdd9494ead32a10ab438816e8d57d5643", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=bb5e6c984de2fbabba37655551f4bab16fbd9e5e", "patch": "@@ -1168,15 +1168,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             TyKind::Ptr(ref mt) => hir::TyKind::Ptr(self.lower_mt(mt, itctx)),\n             TyKind::Rptr(ref region, ref mt) => {\n                 let region = region.unwrap_or_else(|| {\n-                    let Some(LifetimeRes::ElidedAnchor { start, end }) = self.resolver.get_lifetime_res(t.id) else {\n-                        panic!()\n+                    let id = if let Some(LifetimeRes::ElidedAnchor { start, end }) =\n+                        self.resolver.get_lifetime_res(t.id)\n+                    {\n+                        debug_assert_eq!(start.plus(1), end);\n+                        start\n+                    } else {\n+                        self.resolver.next_node_id()\n                     };\n-                    debug_assert_eq!(start.plus(1), end);\n                     let span = self.sess.source_map().next_point(t.span.shrink_to_lo());\n-                    Lifetime {\n-                        ident: Ident::new(kw::UnderscoreLifetime, span),\n-                        id: start,\n-                    }\n+                    Lifetime { ident: Ident::new(kw::UnderscoreLifetime, span), id }\n                 });\n                 let lifetime = self.lower_lifetime(&region);\n                 hir::TyKind::Rptr(lifetime, self.lower_mt(mt, itctx))\n@@ -1835,10 +1836,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_lifetime(&mut self, l: &Lifetime) -> hir::Lifetime {\n         let span = self.lower_span(l.ident.span);\n         let ident = self.lower_ident(l.ident);\n-        let res = self\n-            .resolver\n-            .get_lifetime_res(l.id)\n-            .unwrap_or_else(|| panic!(\"Missing resolution for lifetime {:?} at {:?}\", l, span));\n+        let res = self.resolver.get_lifetime_res(l.id).unwrap_or(LifetimeRes::Error);\n         self.new_named_lifetime_with_res(l.id, span, ident, res)\n     }\n "}, {"sha": "1eca22d3812cb7261f43b0826f55c5b0178f0d4e", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=bb5e6c984de2fbabba37655551f4bab16fbd9e5e", "patch": "@@ -189,7 +189,7 @@ pub enum MirPhase {\n     ///\n     /// Beginning with this phase, the following variants are disallowed:\n     /// * [`TerminatorKind::Yield`](terminator::TerminatorKind::Yield)\n-    /// * [`TerminatorKind::GeneratorDrop](terminator::TerminatorKind::GeneratorDrop)\n+    /// * [`TerminatorKind::GeneratorDrop`](terminator::TerminatorKind::GeneratorDrop)\n     GeneratorsLowered = 5,\n     Optimized = 6,\n }"}, {"sha": "9884b7f404e3d611fd2ca860344c442b566032ae", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=bb5e6c984de2fbabba37655551f4bab16fbd9e5e", "patch": "@@ -1487,7 +1487,7 @@ impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Ref<'b, U>> for Ref<'b,\n #[stable(feature = \"std_guard_impls\", since = \"1.20.0\")]\n impl<T: ?Sized + fmt::Display> fmt::Display for Ref<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        self.value.fmt(f)\n+        (**self).fmt(f)\n     }\n }\n \n@@ -1735,7 +1735,7 @@ impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<RefMut<'b, U>> for RefM\n #[stable(feature = \"std_guard_impls\", since = \"1.20.0\")]\n impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        self.value.fmt(f)\n+        (**self).fmt(f)\n     }\n }\n "}, {"sha": "7b77b2134ccd721a32f51c0574e0b7fb54b9dd10", "filename": "library/core/tests/cell.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/library%2Fcore%2Ftests%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/library%2Fcore%2Ftests%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fcell.rs?ref=bb5e6c984de2fbabba37655551f4bab16fbd9e5e", "patch": "@@ -73,11 +73,13 @@ fn ref_and_refmut_have_sensible_show() {\n     let refcell = RefCell::new(\"foo\");\n \n     let refcell_refmut = refcell.borrow_mut();\n-    assert!(format!(\"{refcell_refmut:?}\").contains(\"foo\"));\n+    assert_eq!(format!(\"{refcell_refmut}\"), \"foo\"); // Display\n+    assert!(format!(\"{refcell_refmut:?}\").contains(\"foo\")); // Debug\n     drop(refcell_refmut);\n \n     let refcell_ref = refcell.borrow();\n-    assert!(format!(\"{refcell_ref:?}\").contains(\"foo\"));\n+    assert_eq!(format!(\"{refcell_ref}\"), \"foo\"); // Display\n+    assert!(format!(\"{refcell_ref:?}\").contains(\"foo\")); // Debug\n     drop(refcell_ref);\n }\n "}, {"sha": "438304e1664cb1f56993a179d2e94260521d6677", "filename": "library/std/src/error.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=bb5e6c984de2fbabba37655551f4bab16fbd9e5e", "patch": "@@ -863,12 +863,12 @@ impl dyn Error + Send + Sync {\n     }\n }\n \n-/// An error reporter that print's an error and its sources.\n+/// An error reporter that prints an error and its sources.\n ///\n /// Report also exposes configuration options for formatting the error chain, either entirely on a\n /// single line, or in multi-line format with each cause in the error chain on a new line.\n ///\n-/// `Report` only requires that the wrapped error implements `Error`. It doesn't require that the\n+/// `Report` only requires that the wrapped error implement `Error`. It doesn't require that the\n /// wrapped error be `Send`, `Sync`, or `'static`.\n ///\n /// # Examples\n@@ -972,7 +972,7 @@ impl dyn Error + Send + Sync {\n ///\n /// ## Return from `main`\n ///\n-/// `Report` also implements `From` for all types that implement [`Error`], this when combined with\n+/// `Report` also implements `From` for all types that implement [`Error`]; this when combined with\n /// the `Debug` output means `Report` is an ideal starting place for formatting errors returned\n /// from `main`.\n ///\n@@ -1020,7 +1020,7 @@ impl dyn Error + Send + Sync {\n /// ```\n ///\n /// **Note**: `Report`s constructed via `?` and `From` will be configured to use the single line\n-/// output format, if you want to make sure your `Report`s are pretty printed and include backtrace\n+/// output format. If you want to make sure your `Report`s are pretty printed and include backtrace\n /// you will need to manually convert and enable those flags.\n ///\n /// ```should_panic"}, {"sha": "5ff1aba79747a44ac3b42cbb7cb98c5fed9876d7", "filename": "library/std/src/sys/unix/locks/futex_rwlock.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs?ref=bb5e6c984de2fbabba37655551f4bab16fbd9e5e", "patch": "@@ -208,9 +208,8 @@ impl RwLock {\n \n             // Don't go to sleep if the lock has become available,\n             // or if the writers waiting bit is no longer set.\n-            let s = self.state.load(Relaxed);\n-            if is_unlocked(state) || !has_writers_waiting(s) {\n-                state = s;\n+            state = self.state.load(Relaxed);\n+            if is_unlocked(state) || !has_writers_waiting(state) {\n                 continue;\n             }\n "}, {"sha": "0be11e3fb467e9b11691fe6a4cc0f74174d64691", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=bb5e6c984de2fbabba37655551f4bab16fbd9e5e", "patch": "@@ -814,7 +814,7 @@ impl Step for Src {\n                 \"library/backtrace/crates\",\n                 // these are 30MB combined and aren't necessary for building\n                 // the standard library.\n-                \"library/stdarch/crates/Cargo.toml\",\n+                \"library/stdarch/Cargo.toml\",\n                 \"library/stdarch/crates/stdarch-verify\",\n                 \"library/stdarch/crates/intrinsic-test\",\n             ],"}, {"sha": "6c82c29dd9d4871f69642d52dcecf9f3c10c1513", "filename": "src/test/ui/lifetimes/issue-97193.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/src%2Ftest%2Fui%2Flifetimes%2Fissue-97193.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/src%2Ftest%2Fui%2Flifetimes%2Fissue-97193.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-97193.rs?ref=bb5e6c984de2fbabba37655551f4bab16fbd9e5e", "patch": "@@ -0,0 +1,9 @@\n+extern \"C\" {\n+    fn a(&mut self) {\n+        //~^ ERROR incorrect function inside `extern` block\n+        //~| ERROR `self` parameter is only allowed in associated functions\n+        fn b(buf: &Self) {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "21be543ccf9ce519bae2c9da6df398af20f97f5c", "filename": "src/test/ui/lifetimes/issue-97193.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/src%2Ftest%2Fui%2Flifetimes%2Fissue-97193.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/src%2Ftest%2Fui%2Flifetimes%2Fissue-97193.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-97193.stderr?ref=bb5e6c984de2fbabba37655551f4bab16fbd9e5e", "patch": "@@ -0,0 +1,28 @@\n+error: incorrect function inside `extern` block\n+  --> $DIR/issue-97193.rs:2:8\n+   |\n+LL |   extern \"C\" {\n+   |   ---------- `extern` blocks define existing foreign functions and functions inside of them cannot have a body\n+LL |       fn a(&mut self) {\n+   |  ________^____________-\n+   | |        |\n+   | |        cannot have a body\n+LL | |\n+LL | |\n+LL | |         fn b(buf: &Self) {}\n+LL | |     }\n+   | |_____- help: remove the invalid body: `;`\n+   |\n+   = help: you might have meant to write a function accessible through FFI, which can be done by writing `extern fn` outside of the `extern` block\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n+\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/issue-97193.rs:2:10\n+   |\n+LL |     fn a(&mut self) {\n+   |          ^^^^^^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "accb4a9983071ee995d6527f1ec7d1a0136825e4", "filename": "src/test/ui/lifetimes/issue-97194.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/src%2Ftest%2Fui%2Flifetimes%2Fissue-97194.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/src%2Ftest%2Fui%2Flifetimes%2Fissue-97194.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-97194.rs?ref=bb5e6c984de2fbabba37655551f4bab16fbd9e5e", "patch": "@@ -0,0 +1,10 @@\n+extern \"C\" {\n+    fn bget(&self, index: [usize; Self::DIM]) -> bool {\n+        //~^ ERROR incorrect function inside `extern` block\n+        //~| ERROR `self` parameter is only allowed in associated functions\n+        //~| ERROR use of undeclared type `Self`\n+        type T<'a> = &'a str;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "15ad5aadf9fddc3967fec9b26afb3421aa61ee06", "filename": "src/test/ui/lifetimes/issue-97194.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/src%2Ftest%2Fui%2Flifetimes%2Fissue-97194.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/src%2Ftest%2Fui%2Flifetimes%2Fissue-97194.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-97194.stderr?ref=bb5e6c984de2fbabba37655551f4bab16fbd9e5e", "patch": "@@ -0,0 +1,36 @@\n+error: incorrect function inside `extern` block\n+  --> $DIR/issue-97194.rs:2:8\n+   |\n+LL |   extern \"C\" {\n+   |   ---------- `extern` blocks define existing foreign functions and functions inside of them cannot have a body\n+LL |       fn bget(&self, index: [usize; Self::DIM]) -> bool {\n+   |  ________^^^^___________________________________________-\n+   | |        |\n+   | |        cannot have a body\n+LL | |\n+LL | |\n+LL | |\n+LL | |         type T<'a> = &'a str;\n+LL | |     }\n+   | |_____- help: remove the invalid body: `;`\n+   |\n+   = help: you might have meant to write a function accessible through FFI, which can be done by writing `extern fn` outside of the `extern` block\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n+\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/issue-97194.rs:2:13\n+   |\n+LL |     fn bget(&self, index: [usize; Self::DIM]) -> bool {\n+   |             ^^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error[E0433]: failed to resolve: use of undeclared type `Self`\n+  --> $DIR/issue-97194.rs:2:35\n+   |\n+LL |     fn bget(&self, index: [usize; Self::DIM]) -> bool {\n+   |                                   ^^^^ use of undeclared type `Self`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0433`."}]}