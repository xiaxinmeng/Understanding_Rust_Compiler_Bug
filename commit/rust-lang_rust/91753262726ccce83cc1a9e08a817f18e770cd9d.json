{"sha": "91753262726ccce83cc1a9e08a817f18e770cd9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNzUzMjYyNzI2Y2NjZTgzY2MxYTllMDhhODE3ZjE4ZTc3MGNkOWQ=", "commit": {"author": {"name": "Tom Jakubowski", "email": "tom@crystae.net", "date": "2014-06-17T12:25:30Z"}, "committer": {"name": "Tom Jakubowski", "email": "tom@crystae.net", "date": "2014-06-17T23:38:19Z"}, "message": "emacs: Don't overwrite font lock for attributes\n\nThis addresses the font lock regression introduced by the earlier pull\nrequest #14818 - attributes are no longer be highligted inside of comments\nand strings.\n\nAlso add some font lock test infrastructure and some tests for attribute\nfont locking.", "tree": {"sha": "863ebf7bd06a181037ef25b3a1d19e4170dfa3de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/863ebf7bd06a181037ef25b3a1d19e4170dfa3de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91753262726ccce83cc1a9e08a817f18e770cd9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91753262726ccce83cc1a9e08a817f18e770cd9d", "html_url": "https://github.com/rust-lang/rust/commit/91753262726ccce83cc1a9e08a817f18e770cd9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91753262726ccce83cc1a9e08a817f18e770cd9d/comments", "author": {"login": "tomjakubowski", "id": 667901, "node_id": "MDQ6VXNlcjY2NzkwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/667901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomjakubowski", "html_url": "https://github.com/tomjakubowski", "followers_url": "https://api.github.com/users/tomjakubowski/followers", "following_url": "https://api.github.com/users/tomjakubowski/following{/other_user}", "gists_url": "https://api.github.com/users/tomjakubowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomjakubowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomjakubowski/subscriptions", "organizations_url": "https://api.github.com/users/tomjakubowski/orgs", "repos_url": "https://api.github.com/users/tomjakubowski/repos", "events_url": "https://api.github.com/users/tomjakubowski/events{/privacy}", "received_events_url": "https://api.github.com/users/tomjakubowski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tomjakubowski", "id": 667901, "node_id": "MDQ6VXNlcjY2NzkwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/667901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomjakubowski", "html_url": "https://github.com/tomjakubowski", "followers_url": "https://api.github.com/users/tomjakubowski/followers", "following_url": "https://api.github.com/users/tomjakubowski/following{/other_user}", "gists_url": "https://api.github.com/users/tomjakubowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomjakubowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomjakubowski/subscriptions", "organizations_url": "https://api.github.com/users/tomjakubowski/orgs", "repos_url": "https://api.github.com/users/tomjakubowski/repos", "events_url": "https://api.github.com/users/tomjakubowski/events{/privacy}", "received_events_url": "https://api.github.com/users/tomjakubowski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "feb294ca1125bda576552a71c11c44a820ef8b99", "url": "https://api.github.com/repos/rust-lang/rust/commits/feb294ca1125bda576552a71c11c44a820ef8b99", "html_url": "https://github.com/rust-lang/rust/commit/feb294ca1125bda576552a71c11c44a820ef8b99"}], "stats": {"total": 114, "additions": 87, "deletions": 27}, "files": [{"sha": "6a04352412323497228f3ea3e9b0e78838c85fa6", "filename": "src/etc/emacs/rust-mode-tests.el", "status": "modified", "additions": 86, "deletions": 26, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/91753262726ccce83cc1a9e08a817f18e770cd9d/src%2Fetc%2Femacs%2Frust-mode-tests.el", "raw_url": "https://github.com/rust-lang/rust/raw/91753262726ccce83cc1a9e08a817f18e770cd9d/src%2Fetc%2Femacs%2Frust-mode-tests.el", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Femacs%2Frust-mode-tests.el?ref=91753262726ccce83cc1a9e08a817f18e770cd9d", "patch": "@@ -12,7 +12,7 @@\n (defun rust-test-explain-bad-manip (original point-pos manip-func expected got)\n   (if (equal expected got)\n       nil\n-    (list \n+    (list\n      ;; The (goto-char) and (insert) business here is just for\n      ;; convenience--after an error, you can copy-paste that into emacs eval to\n      ;; insert the bare strings into a buffer\n@@ -66,13 +66,13 @@ Also, the result should be the same regardless of whether the code is at the beg\n                        do (rust-test-manip-code\n                            (concat padding-beginning unfilled padding-end)\n                            pos\n-                           (lambda () \n+                           (lambda ()\n                              (let ((fill-column rust-test-fill-column))\n                                (fill-paragraph)))\n                            (concat padding-beginning expected padding-end)))))))\n \n (ert-deftest fill-paragraph-top-level-multi-line-style-doc-comment-second-line ()\n-  (test-fill-paragraph \n+  (test-fill-paragraph\n    \"/**\n  * This is a very very very very very very very long string\n  */\"\n@@ -188,10 +188,10 @@ This is some more text.  Fee fie fo fum.  Humpty dumpty sat on a wall.\n \n (ert-deftest fill-paragraph-with-no-space-after-star-prefix ()\n   (test-fill-paragraph\n-   \"/** \n+   \"/**\n  *This is a very very very very very very very long string\n  */\"\n-   \"/** \n+   \"/**\n  *This is a very very very very\n  *very very very long string\n  */\"))\n@@ -226,7 +226,7 @@ fn bar() { }\"\n fn bar() { }\" 14 67))\n \n (defun test-auto-fill (initial position inserted expected)\n-  (rust-test-manip-code \n+  (rust-test-manip-code\n    initial\n    position\n    (lambda ()\n@@ -244,7 +244,7 @@ fn bar() { }\" 14 67))\n (ert-deftest auto-fill-multi-line-doc-comment ()\n   (test-auto-fill\n    \"/**\n- * \n+ *\n  */\"\n    8\n    \"This is a very very very very very very very long string\"\n@@ -317,7 +317,7 @@ fn foo() {\n     /*!\n      * this is a nested doc comment\n      */\n-    \n+\n     //! And so is this\n }\"))\n \n@@ -456,7 +456,7 @@ fn foo() {\n   (test-indent\n    \"\n fn foo() {\n-    let x = \n+    let x =\n         match blah {\n             Pattern |\n             Pattern2 => {\n@@ -473,7 +473,7 @@ fn foo() {\n   (test-indent\n    \"\n fn foo() {\n-    let x = \n+    let x =\n         foo(bar(|x| {\n             only_one_indent_here();\n         }));\n@@ -572,7 +572,7 @@ fn indenting_middle_of_line() {\n }\n \n fn indented_already() {\n-    \n+\n     // The previous line already has its spaces\n }\n \"\n@@ -654,91 +654,91 @@ All positions are position symbols found in `rust-test-positions-alist'.\"\n                          (rust-get-buffer-pos reg-end))))))\n \n (ert-deftest rust-beginning-of-defun-from-middle-of-fn ()\n-  (rust-test-motion \n+  (rust-test-motion\n    rust-test-motion-string\n    'middle-of-fn1\n    'start-of-fn1\n    #'beginning-of-defun))\n \n (ert-deftest rust-beginning-of-defun-from-end ()\n-  (rust-test-motion \n+  (rust-test-motion\n    rust-test-motion-string\n    'end-of-fn1\n    'start-of-fn1\n    #'beginning-of-defun))\n \n (ert-deftest rust-beginning-of-defun-before-open-brace ()\n-  (rust-test-motion \n+  (rust-test-motion\n    rust-test-motion-string\n    'start-of-fn1-middle-of-line\n    'start-of-fn1\n    #'beginning-of-defun))\n \n (ert-deftest rust-beginning-of-defun-between-fns ()\n-  (rust-test-motion \n+  (rust-test-motion\n    rust-test-motion-string\n    'between-fn1-fn2\n    'start-of-fn1\n    #'beginning-of-defun))\n \n (ert-deftest rust-beginning-of-defun-with-arg ()\n-  (rust-test-motion \n+  (rust-test-motion\n    rust-test-motion-string\n    'middle-of-fn2\n    'start-of-fn1\n    #'beginning-of-defun 2))\n \n (ert-deftest rust-beginning-of-defun-with-negative-arg ()\n-  (rust-test-motion \n+  (rust-test-motion\n    rust-test-motion-string\n    'middle-of-fn1\n    'beginning-of-fn3\n    #'beginning-of-defun -2))\n \n (ert-deftest rust-beginning-of-defun-pub-fn ()\n-  (rust-test-motion \n+  (rust-test-motion\n    rust-test-motion-string\n    'middle-of-fn3\n    'beginning-of-fn3\n    #'beginning-of-defun))\n \n (ert-deftest rust-end-of-defun-from-middle-of-fn ()\n-  (rust-test-motion \n+  (rust-test-motion\n    rust-test-motion-string\n    'middle-of-fn1\n    'between-fn1-fn2\n    #'end-of-defun))\n \n (ert-deftest rust-end-of-defun-from-beg ()\n-  (rust-test-motion \n+  (rust-test-motion\n    rust-test-motion-string\n    'start-of-fn1\n    'between-fn1-fn2\n    #'end-of-defun))\n \n (ert-deftest rust-end-of-defun-before-open-brace ()\n-  (rust-test-motion \n+  (rust-test-motion\n    rust-test-motion-string\n    'start-of-fn1-middle-of-line\n    'between-fn1-fn2\n    #'end-of-defun))\n \n (ert-deftest rust-end-of-defun-between-fns ()\n-  (rust-test-motion \n+  (rust-test-motion\n    rust-test-motion-string\n    'between-fn1-fn2\n    'after-end-of-fn2\n    #'end-of-defun))\n \n (ert-deftest rust-end-of-defun-with-arg ()\n-  (rust-test-motion \n+  (rust-test-motion\n    rust-test-motion-string\n    'middle-of-fn1\n    'after-end-of-fn2\n    #'end-of-defun 2))\n \n (ert-deftest rust-end-of-defun-with-negative-arg ()\n-  (rust-test-motion \n+  (rust-test-motion\n    rust-test-motion-string\n    'middle-of-fn3\n    'between-fn1-fn2\n@@ -752,14 +752,14 @@ All positions are position symbols found in `rust-test-positions-alist'.\"\n    #'mark-defun))\n \n (ert-deftest rust-mark-defun-from-end ()\n-  (rust-test-region \n+  (rust-test-region\n    rust-test-region-string\n    'end-of-fn1\n    'before-start-of-fn1 'between-fn1-fn2\n    #'mark-defun))\n \n (ert-deftest rust-mark-defun-start-of-defun ()\n-  (rust-test-region \n+  (rust-test-region\n    rust-test-region-string\n    'start-of-fn2\n    'between-fn1-fn2 'after-end-of-fn2\n@@ -834,3 +834,63 @@ All positions are position symbols found in `rust-test-positions-alist'.\"\n    'nonblank-line-indented-already-middle-start\n    'nonblank-line-indented-already-middle-target\n    #'indent-for-tab-command))\n+\n+(defun rust-test-fontify-string (str)\n+  (with-temp-buffer\n+    (rust-mode)\n+    (insert str)\n+    (font-lock-fontify-buffer)\n+    (buffer-string)))\n+\n+(defun rust-test-group-str-by-face (str)\n+  \"Fontify `STR' in rust-mode and group it by face, returning a\n+list of substrings of `STR' each followed by its face.\"\n+  (cl-loop with fontified = (rust-test-fontify-string str)\n+           for start = 0 then end\n+           while start\n+           for end   = (next-single-property-change start 'face fontified)\n+           for prop  = (get-text-property start 'face fontified)\n+           for text  = (substring-no-properties fontified start end)\n+           if prop\n+           append (list text prop)))\n+\n+(defun rust-test-font-lock (source face-groups)\n+  \"Test that `SOURCE' fontifies to the expected `FACE-GROUPS'\"\n+  (should (equal (rust-test-group-str-by-face source)\n+                 face-groups)))\n+\n+(ert-deftest font-lock-attribute-simple ()\n+  (rust-test-font-lock\n+   \"#[foo]\"\n+   '(\"#[foo]\" font-lock-preprocessor-face)))\n+\n+(ert-deftest font-lock-attribute-inner ()\n+  (rust-test-font-lock\n+   \"#![foo]\"\n+   '(\"#![foo]\" font-lock-preprocessor-face)))\n+\n+(ert-deftest font-lock-attribute-key-value ()\n+  (rust-test-font-lock\n+   \"#[foo = \\\"bar\\\"]\"\n+   '(\"#[foo = \" font-lock-preprocessor-face\n+     \"\\\"bar\\\"\" font-lock-string-face\n+     \"]\" font-lock-preprocessor-face)))\n+\n+(ert-deftest font-lock-attribute-around-comment ()\n+  (rust-test-font-lock\n+   \"#[foo /* bar */]\"\n+   '(\"#[foo \" font-lock-preprocessor-face\n+     \"/* \" font-lock-comment-delimiter-face\n+     \"bar */\" font-lock-comment-face\n+     \"]\" font-lock-preprocessor-face)))\n+\n+(ert-deftest font-lock-attribute-inside-string ()\n+  (rust-test-font-lock\n+   \"\\\"#[foo]\\\"\"\n+   '(\"\\\"#[foo]\\\"\" font-lock-string-face)))\n+\n+(ert-deftest font-lock-attribute-inside-comment ()\n+  (rust-test-font-lock\n+   \"/* #[foo] */\"\n+   '(\"/* \" font-lock-comment-delimiter-face\n+     \"#[foo] */\" font-lock-comment-face)))"}, {"sha": "beb2e6510fd72734bcfd91306776db2bbce5b568", "filename": "src/etc/emacs/rust-mode.el", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91753262726ccce83cc1a9e08a817f18e770cd9d/src%2Fetc%2Femacs%2Frust-mode.el", "raw_url": "https://github.com/rust-lang/rust/raw/91753262726ccce83cc1a9e08a817f18e770cd9d/src%2Fetc%2Femacs%2Frust-mode.el", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Femacs%2Frust-mode.el?ref=91753262726ccce83cc1a9e08a817f18e770cd9d", "patch": "@@ -214,7 +214,7 @@\n \n      ;; Attributes like `#[bar(baz)]` or `#![bar(baz)]` or `#[bar = \"baz\"]`\n      (,(rust-re-grab (concat \"#\\\\!?\\\\[\" rust-re-ident \"[^]]*\\\\]\"))\n-      1 font-lock-preprocessor-face t)\n+      1 font-lock-preprocessor-face keep)\n \n      ;; Syntax extension invocations like `foo!`, highlight including the !\n      (,(concat (rust-re-grab (concat rust-re-ident \"!\")) \"[({[:space:][]\")"}]}