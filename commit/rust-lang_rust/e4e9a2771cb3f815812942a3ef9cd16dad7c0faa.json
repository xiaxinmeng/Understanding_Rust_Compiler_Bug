{"sha": "e4e9a2771cb3f815812942a3ef9cd16dad7c0faa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZTlhMjc3MWNiM2Y4MTU4MTI5NDJhM2VmOWNkMTZkYWQ3YzBmYWE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-21T17:16:03Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-21T17:16:03Z"}, "message": "rollup merge of #21419: Toby-S/patch-1\n\nThis just corrects a couple of typos in doc comments, and changes some to conform to the Rust guidelines.", "tree": {"sha": "be5b7756deab870fe91bf9e3bb6a532cea3ca1a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be5b7756deab870fe91bf9e3bb6a532cea3ca1a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4e9a2771cb3f815812942a3ef9cd16dad7c0faa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4e9a2771cb3f815812942a3ef9cd16dad7c0faa", "html_url": "https://github.com/rust-lang/rust/commit/e4e9a2771cb3f815812942a3ef9cd16dad7c0faa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4e9a2771cb3f815812942a3ef9cd16dad7c0faa/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "229243c136ddeb653c6ad5bcb451a78fef9e7a99", "url": "https://api.github.com/repos/rust-lang/rust/commits/229243c136ddeb653c6ad5bcb451a78fef9e7a99", "html_url": "https://github.com/rust-lang/rust/commit/229243c136ddeb653c6ad5bcb451a78fef9e7a99"}, {"sha": "01d7b8c6698311b1c610ae98e37839895a440951", "url": "https://api.github.com/repos/rust-lang/rust/commits/01d7b8c6698311b1c610ae98e37839895a440951", "html_url": "https://github.com/rust-lang/rust/commit/01d7b8c6698311b1c610ae98e37839895a440951"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "ac071b05816307eae569ed80a487995e0bf43b77", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e4e9a2771cb3f815812942a3ef9cd16dad7c0faa/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e9a2771cb3f815812942a3ef9cd16dad7c0faa/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=e4e9a2771cb3f815812942a3ef9cd16dad7c0faa", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -76,7 +76,7 @@ impl DefaultResizePolicy {\n         // min_capacity(size) must be smaller than the internal capacity,\n         // so that the map is not resized:\n         // `min_capacity(usable_capacity(x)) <= x`.\n-        // The lef-hand side can only be smaller due to flooring by integer\n+        // The left-hand side can only be smaller due to flooring by integer\n         // division.\n         //\n         // This doesn't have to be checked for overflow since allocation size\n@@ -838,8 +838,8 @@ impl<K, V, S, H> HashMap<K, V, S>\n     /// map.insert(\"b\", 2);\n     /// map.insert(\"c\", 3);\n     ///\n-    /// for key in map.values() {\n-    ///     println!(\"{}\", key);\n+    /// for val in map.values() {\n+    ///     println!(\"{}\", val);\n     /// }\n     /// ```\n     #[stable]\n@@ -938,7 +938,7 @@ impl<K, V, S, H> HashMap<K, V, S>\n         search_entry_hashed(&mut self.table, hash, key)\n     }\n \n-    /// Return the number of elements in the map.\n+    /// Returns the number of elements in the map.\n     ///\n     /// # Example\n     ///\n@@ -953,7 +953,7 @@ impl<K, V, S, H> HashMap<K, V, S>\n     #[stable]\n     pub fn len(&self) -> uint { self.table.size() }\n \n-    /// Return true if the map contains no elements.\n+    /// Returns true if the map contains no elements.\n     ///\n     /// # Example\n     ///\n@@ -1274,7 +1274,7 @@ impl<K, V, S, H, Q: ?Sized> IndexMut<Q> for HashMap<K, V, S>\n     }\n }\n \n-/// HashMap iterator\n+/// HashMap iterator.\n #[stable]\n pub struct Iter<'a, K: 'a, V: 'a> {\n     inner: table::Iter<'a, K, V>\n@@ -1289,13 +1289,13 @@ impl<'a, K, V> Clone for Iter<'a, K, V> {\n     }\n }\n \n-/// HashMap mutable values iterator\n+/// HashMap mutable values iterator.\n #[stable]\n pub struct IterMut<'a, K: 'a, V: 'a> {\n     inner: table::IterMut<'a, K, V>\n }\n \n-/// HashMap move iterator\n+/// HashMap move iterator.\n #[stable]\n pub struct IntoIter<K, V> {\n     inner: iter::Map<\n@@ -1306,7 +1306,7 @@ pub struct IntoIter<K, V> {\n     >\n }\n \n-/// HashMap keys iterator\n+/// HashMap keys iterator.\n #[stable]\n pub struct Keys<'a, K: 'a, V: 'a> {\n     inner: Map<(&'a K, &'a V), &'a K, Iter<'a, K, V>, fn((&'a K, &'a V)) -> &'a K>\n@@ -1321,7 +1321,7 @@ impl<'a, K, V> Clone for Keys<'a, K, V> {\n     }\n }\n \n-/// HashMap values iterator\n+/// HashMap values iterator.\n #[stable]\n pub struct Values<'a, K: 'a, V: 'a> {\n     inner: Map<(&'a K, &'a V), &'a V, Iter<'a, K, V>, fn((&'a K, &'a V)) -> &'a V>\n@@ -1336,7 +1336,7 @@ impl<'a, K, V> Clone for Values<'a, K, V> {\n     }\n }\n \n-/// HashMap drain iterator\n+/// HashMap drain iterator.\n #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n pub struct Drain<'a, K: 'a, V: 'a> {\n     inner: iter::Map<\n@@ -1347,35 +1347,35 @@ pub struct Drain<'a, K: 'a, V: 'a> {\n     >\n }\n \n-/// A view into a single occupied location in a HashMap\n+/// A view into a single occupied location in a HashMap.\n #[unstable = \"precise API still being fleshed out\"]\n pub struct OccupiedEntry<'a, K: 'a, V: 'a> {\n     elem: FullBucket<K, V, &'a mut RawTable<K, V>>,\n }\n \n-/// A view into a single empty location in a HashMap\n+/// A view into a single empty location in a HashMap.\n #[unstable = \"precise API still being fleshed out\"]\n pub struct VacantEntry<'a, K: 'a, V: 'a> {\n     hash: SafeHash,\n     key: K,\n     elem: VacantEntryState<K, V, &'a mut RawTable<K, V>>,\n }\n \n-/// A view into a single location in a map, which may be vacant or occupied\n+/// A view into a single location in a map, which may be vacant or occupied.\n #[unstable = \"precise API still being fleshed out\"]\n pub enum Entry<'a, K: 'a, V: 'a> {\n-    /// An occupied Entry\n+    /// An occupied Entry.\n     Occupied(OccupiedEntry<'a, K, V>),\n-    /// A vacant Entry\n+    /// A vacant Entry.\n     Vacant(VacantEntry<'a, K, V>),\n }\n \n-/// Possible states of a VacantEntry\n+/// Possible states of a VacantEntry.\n enum VacantEntryState<K, V, M> {\n     /// The index is occupied, but the key to insert has precedence,\n-    /// and will kick the current one out on insertion\n+    /// and will kick the current one out on insertion.\n     NeqElem(FullBucket<K, V, M>, uint),\n-    /// The index is genuinely vacant\n+    /// The index is genuinely vacant.\n     NoElem(EmptyBucket<K, V, M>),\n }\n \n@@ -1453,7 +1453,7 @@ impl<'a, K, V> ExactSizeIterator for Drain<'a, K, V> {\n \n #[unstable = \"matches collection reform v2 specification, waiting for dust to settle\"]\n impl<'a, K, V> Entry<'a, K, V> {\n-    /// Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant\n+    /// Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant.\n     pub fn get(self) -> Result<&'a mut V, VacantEntry<'a, K, V>> {\n         match self {\n             Occupied(entry) => Ok(entry.into_mut()),\n@@ -1464,12 +1464,12 @@ impl<'a, K, V> Entry<'a, K, V> {\n \n #[unstable = \"matches collection reform v2 specification, waiting for dust to settle\"]\n impl<'a, K, V> OccupiedEntry<'a, K, V> {\n-    /// Gets a reference to the value in the entry\n+    /// Gets a reference to the value in the entry.\n     pub fn get(&self) -> &V {\n         self.elem.read().1\n     }\n \n-    /// Gets a mutable reference to the value in the entry\n+    /// Gets a mutable reference to the value in the entry.\n     pub fn get_mut(&mut self) -> &mut V {\n         self.elem.read_mut().1\n     }"}]}