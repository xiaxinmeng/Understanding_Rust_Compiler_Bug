{"sha": "61157b341eab1b555cb5bd099e030817e6d41ba1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMTU3YjM0MWVhYjFiNTU1Y2I1YmQwOTllMDMwODE3ZTZkNDFiYTE=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-05-15T01:48:32Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-05-15T01:48:32Z"}, "message": "Store Option<Region> as value for RegionVid", "tree": {"sha": "0cfae92736d08ca7f9b009394dba681b2241ca7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cfae92736d08ca7f9b009394dba681b2241ca7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61157b341eab1b555cb5bd099e030817e6d41ba1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61157b341eab1b555cb5bd099e030817e6d41ba1", "html_url": "https://github.com/rust-lang/rust/commit/61157b341eab1b555cb5bd099e030817e6d41ba1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61157b341eab1b555cb5bd099e030817e6d41ba1/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8c284ff2826e139fd77278af65a005a8b5b5bf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8c284ff2826e139fd77278af65a005a8b5b5bf3", "html_url": "https://github.com/rust-lang/rust/commit/e8c284ff2826e139fd77278af65a005a8b5b5bf3"}], "stats": {"total": 252, "additions": 170, "deletions": 82}, "files": [{"sha": "27ac817463f0e34a056d4e2f86e66f423153064f", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/61157b341eab1b555cb5bd099e030817e6d41ba1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61157b341eab1b555cb5bd099e030817e6d41ba1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=61157b341eab1b555cb5bd099e030817e6d41ba1", "patch": "@@ -304,6 +304,15 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n     }\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n+        let tcx = self.tcx();\n+        let r = self\n+            .infcx\n+            .unwrap()\n+            .inner\n+            .borrow_mut()\n+            .unwrap_region_constraints()\n+            .opportunistic_resolve_region(tcx, r);\n+\n         match *r {\n             ty::ReLateBound(index, ..) => {\n                 if index >= self.binder_index {\n@@ -313,22 +322,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n                 }\n             }\n \n-            ty::ReVar(vid) => {\n-                let resolved_vid = self\n-                    .infcx\n-                    .unwrap()\n-                    .inner\n-                    .borrow_mut()\n-                    .unwrap_region_constraints()\n-                    .opportunistic_resolve_var(vid);\n-                debug!(\n-                    \"canonical: region var found with vid {:?}, \\\n-                     opportunistically resolved to {:?}\",\n-                    vid, r\n-                );\n-                let r = self.tcx.reuse_or_mk_region(r, ty::ReVar(resolved_vid));\n-                self.canonicalize_region_mode.canonicalize_free_region(self, r)\n-            }\n+            ty::ReVar(_) => self.canonicalize_region_mode.canonicalize_free_region(self, r),\n \n             ty::ReStatic\n             | ty::ReEarlyBound(..)"}, {"sha": "dfbb82bd6576ce2f2e4a987e50fb1a05aefb6c73", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 36, "deletions": 16, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/61157b341eab1b555cb5bd099e030817e6d41ba1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61157b341eab1b555cb5bd099e030817e6d41ba1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=61157b341eab1b555cb5bd099e030817e6d41ba1", "patch": "@@ -11,9 +11,9 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::undo_log::UndoLogs;\n use rustc_data_structures::unify as ut;\n-use rustc_data_structures::unify::UnifyKey;\n use rustc_hir::def_id::DefId;\n use rustc_index::vec::IndexVec;\n+use rustc_middle::infer::unify_key::{RegionVidKey, UnifiedRegion};\n use rustc_middle::ty::ReStatic;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::ty::{ReLateBound, ReVar};\n@@ -47,13 +47,13 @@ pub struct RegionConstraintStorage<'tcx> {\n \n     /// When we add a R1 == R2 constriant, we currently add (a) edges\n     /// R1 <= R2 and R2 <= R1 and (b) we unify the two regions in this\n-    /// table. You can then call `opportunistic_resolve_var` early\n+    /// table. You can then call `opportunistic_resolve_region` early\n     /// which will map R1 and R2 to some common region (i.e., either\n     /// R1 or R2). This is important when fulfillment, dropck and other such\n     /// code is iterating to a fixed point, because otherwise we sometimes\n     /// would wind up with a fresh stream of region variables that have been\n     /// equated but appear distinct.\n-    pub(super) unification_table: ut::UnificationTableStorage<ty::RegionVid>,\n+    pub(super) unification_table: ut::UnificationTableStorage<RegionVidKey<'tcx>>,\n \n     /// a flag set to true when we perform any unifications; this is used\n     /// to micro-optimize `take_and_reset_data`\n@@ -406,8 +406,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         // `RegionConstraintData` contains the relationship here.\n         if *any_unifications {\n             *any_unifications = false;\n-            self.unification_table()\n-                .reset_unifications(|_| ());\n+            self.unification_table().reset_unifications(|_| UnifiedRegion(None));\n         }\n \n         data\n@@ -434,8 +433,8 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n     ) -> RegionVid {\n         let vid = self.var_infos.push(RegionVariableInfo { origin, universe });\n \n-        let u_vid = self.unification_table().new_key(());\n-        assert_eq!(vid, u_vid);\n+        let u_vid = self.unification_table().new_key(UnifiedRegion(None));\n+        assert_eq!(vid, u_vid.vid);\n         self.undo_log.push(AddVar(vid));\n         debug!(\"created new region variable {:?} in {:?} with origin {:?}\", vid, universe, origin);\n         vid\n@@ -497,10 +496,18 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n             self.make_subregion(origin.clone(), sub, sup);\n             self.make_subregion(origin, sup, sub);\n \n-            if let (ty::ReVar(sub), ty::ReVar(sup)) = (*sub, *sup) {\n-                debug!(\"make_eqregion: uniying {:?} with {:?}\", sub, sup);\n-                self.unification_table().union(sub, sup);\n-                self.any_unifications = true;\n+            match (sub, sup) {\n+                (&ty::ReVar(sub), &ty::ReVar(sup)) => {\n+                    debug!(\"make_eqregion: unifying {:?} with {:?}\", sub, sup);\n+                    self.unification_table().union(sub, sup);\n+                    self.any_unifications = true;\n+                }\n+                (&ty::ReVar(vid), value) | (value, &ty::ReVar(vid)) => {\n+                    debug!(\"make_eqregion: unifying {:?} with {:?}\", vid, value);\n+                    self.unification_table().union_value(vid, UnifiedRegion(Some(value)));\n+                    self.any_unifications = true;\n+                }\n+                (_, _) => {}\n             }\n         }\n     }\n@@ -616,8 +623,21 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         }\n     }\n \n-    pub fn opportunistic_resolve_var(&mut self, rid: RegionVid) -> ty::RegionVid {\n-        self.unification_table().find(rid)\n+    pub fn opportunistic_resolve_region(\n+        &mut self,\n+        tcx: TyCtxt<'tcx>,\n+        region: ty::Region<'tcx>,\n+    ) -> ty::Region<'tcx> {\n+        match region {\n+            ty::ReVar(rid) => {\n+                let unified_region = self.unification_table().probe_value(*rid);\n+                unified_region.0.unwrap_or_else(|| {\n+                    let root = self.unification_table().find(*rid).vid;\n+                    tcx.reuse_or_mk_region(region, ty::ReVar(root))\n+                })\n+            }\n+            _ => region,\n+        }\n     }\n \n     fn combine_map(&mut self, t: CombineMapType) -> &mut CombineMap<'tcx> {\n@@ -672,8 +692,8 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         &self,\n         value_count: usize,\n     ) -> (Range<RegionVid>, Vec<RegionVariableOrigin>) {\n-        let range = RegionVid::from_index(value_count as u32)\n-            ..RegionVid::from_index(self.unification_table.len() as u32);\n+        let range = RegionVid::from(value_count as u32)\n+            ..RegionVid::from(self.unification_table.len() as u32);\n         (\n             range.clone(),\n             (range.start.index()..range.end.index())\n@@ -695,7 +715,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n     }\n \n     #[inline]\n-    fn unification_table(&mut self) -> super::UnificationTable<'_, 'tcx, ty::RegionVid> {\n+    fn unification_table(&mut self) -> super::UnificationTable<'_, 'tcx, RegionVidKey<'tcx>> {\n         ut::UnificationTable::with_log(&mut self.storage.unification_table, self.undo_log)\n     }\n }"}, {"sha": "4eec65b3d961865b39f44a62858d8a4155771ce2", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/61157b341eab1b555cb5bd099e030817e6d41ba1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61157b341eab1b555cb5bd099e030817e6d41ba1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=61157b341eab1b555cb5bd099e030817e6d41ba1", "patch": "@@ -84,18 +84,12 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticRegionResolver<'a, 'tcx> {\n     }\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n-        match *r {\n-            ty::ReVar(rid) => {\n-                let resolved = self\n-                    .infcx\n-                    .inner\n-                    .borrow_mut()\n-                    .unwrap_region_constraints()\n-                    .opportunistic_resolve_var(rid);\n-                self.tcx().reuse_or_mk_region(r, ty::ReVar(resolved))\n-            }\n-            _ => r,\n-        }\n+        let tcx = self.tcx();\n+        self.infcx\n+            .inner\n+            .borrow_mut()\n+            .unwrap_region_constraints()\n+            .opportunistic_resolve_region(tcx, r)\n     }\n \n     fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {"}, {"sha": "5ad2519a93c5f04a256a414c17e8ca9cba99c1d0", "filename": "compiler/rustc_infer/src/infer/undo_log.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/61157b341eab1b555cb5bd099e030817e6d41ba1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61157b341eab1b555cb5bd099e030817e6d41ba1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs?ref=61157b341eab1b555cb5bd099e030817e6d41ba1", "patch": "@@ -3,6 +3,7 @@ use std::marker::PhantomData;\n use rustc_data_structures::snapshot_vec as sv;\n use rustc_data_structures::undo_log::{Rollback, UndoLogs};\n use rustc_data_structures::unify as ut;\n+use rustc_middle::infer::unify_key::RegionVidKey;\n use rustc_middle::ty;\n \n use crate::{\n@@ -22,7 +23,7 @@ pub(crate) enum UndoLog<'tcx> {\n     IntUnificationTable(sv::UndoLog<ut::Delegate<ty::IntVid>>),\n     FloatUnificationTable(sv::UndoLog<ut::Delegate<ty::FloatVid>>),\n     RegionConstraintCollector(region_constraints::UndoLog<'tcx>),\n-    RegionUnificationTable(sv::UndoLog<ut::Delegate<ty::RegionVid>>),\n+    RegionUnificationTable(sv::UndoLog<ut::Delegate<RegionVidKey<'tcx>>>),\n     ProjectionCache(traits::UndoLog<'tcx>),\n     PushRegionObligation,\n }\n@@ -55,7 +56,7 @@ impl_from! {\n \n     ConstUnificationTable(sv::UndoLog<ut::Delegate<ty::ConstVid<'tcx>>>),\n \n-    RegionUnificationTable(sv::UndoLog<ut::Delegate<ty::RegionVid>>),\n+    RegionUnificationTable(sv::UndoLog<ut::Delegate<RegionVidKey<'tcx>>>),\n     ProjectionCache(traits::UndoLog<'tcx>),\n }\n "}, {"sha": "2427b37f7419c7740a09cd50eef5c921126e3729", "filename": "compiler/rustc_middle/src/infer/unify_key.rs", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/61157b341eab1b555cb5bd099e030817e6d41ba1/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61157b341eab1b555cb5bd099e030817e6d41ba1/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs?ref=61157b341eab1b555cb5bd099e030817e6d41ba1", "patch": "@@ -16,37 +16,45 @@ pub trait ToType {\n }\n \n #[derive(PartialEq, Copy, Clone, Debug)]\n-pub struct RegionVidKey {\n-    /// The minimum region vid in the unification set. This is needed\n-    /// to have a canonical name for a type to prevent infinite\n-    /// recursion.\n-    pub min_vid: ty::RegionVid,\n-}\n-\n-impl UnifyValue for RegionVidKey {\n-    type Error = NoError;\n+pub struct UnifiedRegion<'tcx>(pub Option<ty::Region<'tcx>>);\n \n-    fn unify_values(value1: &Self, value2: &Self) -> Result<Self, NoError> {\n-        let min_vid = if value1.min_vid.index() < value2.min_vid.index() {\n-            value1.min_vid\n-        } else {\n-            value2.min_vid\n-        };\n+#[derive(PartialEq, Copy, Clone, Debug)]\n+pub struct RegionVidKey<'tcx> {\n+    pub vid: ty::RegionVid,\n+    pub phantom: PhantomData<UnifiedRegion<'tcx>>,\n+}\n \n-        Ok(RegionVidKey { min_vid })\n+impl<'tcx> From<ty::RegionVid> for RegionVidKey<'tcx> {\n+    fn from(vid: ty::RegionVid) -> Self {\n+        RegionVidKey { vid, phantom: PhantomData }\n     }\n }\n \n-impl UnifyKey for ty::RegionVid {\n-    type Value = ();\n+impl<'tcx> UnifyKey for RegionVidKey<'tcx> {\n+    type Value = UnifiedRegion<'tcx>;\n     fn index(&self) -> u32 {\n-        u32::from(*self)\n+        self.vid.as_u32()\n     }\n-    fn from_index(i: u32) -> ty::RegionVid {\n-        ty::RegionVid::from(i)\n+    fn from_index(i: u32) -> Self {\n+        RegionVidKey::from(ty::RegionVid::from_u32(i))\n     }\n     fn tag() -> &'static str {\n-        \"RegionVid\"\n+        \"RegionVidKey\"\n+    }\n+}\n+\n+impl<'tcx> UnifyValue for UnifiedRegion<'tcx> {\n+    type Error = NoError;\n+\n+    fn unify_values(value1: &Self, value2: &Self) -> Result<Self, NoError> {\n+        Ok(match (value1.0, value2.0) {\n+            (Some(_), Some(_)) => *value1,\n+\n+            (Some(_), _) => *value1,\n+            (_, Some(_)) => *value2,\n+\n+            (None, None) => *value1,\n+        })\n     }\n }\n "}, {"sha": "2cf868f5280d0a75b3f6c3c59f72b55c75b85927", "filename": "src/test/ui/associated-types/associated-types-eq-hr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61157b341eab1b555cb5bd099e030817e6d41ba1/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61157b341eab1b555cb5bd099e030817e6d41ba1/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs?ref=61157b341eab1b555cb5bd099e030817e6d41ba1", "patch": "@@ -102,6 +102,8 @@ pub fn call_tuple_two() {\n     tuple_two::<Tuple>();\n     //~^ ERROR implementation of `TheTrait` is not general enough\n     //~| ERROR implementation of `TheTrait` is not general enough\n+    //~| ERROR mismatched types\n+    //~| ERROR mismatched types\n }\n \n pub fn call_tuple_three() {"}, {"sha": "281c3cf0fad85e57757e48228bb174863e5c7e89", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/61157b341eab1b555cb5bd099e030817e6d41ba1/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61157b341eab1b555cb5bd099e030817e6d41ba1/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=61157b341eab1b555cb5bd099e030817e6d41ba1", "patch": "@@ -46,6 +46,34 @@ LL |     tuple_one::<Tuple>();\n    = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n    = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n+error[E0308]: mismatched types\n+  --> $DIR/associated-types-eq-hr.rs:102:5\n+   |\n+LL |     tuple_two::<Tuple>();\n+   |     ^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected reference `&'x isize`\n+              found reference `&'y isize`\n+note: the lifetime requirement is introduced here\n+  --> $DIR/associated-types-eq-hr.rs:66:53\n+   |\n+LL |     T: for<'x, 'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>,\n+   |                                                     ^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/associated-types-eq-hr.rs:102:5\n+   |\n+LL |     tuple_two::<Tuple>();\n+   |     ^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected reference `&'x isize`\n+              found reference `&'y isize`\n+note: the lifetime requirement is introduced here\n+  --> $DIR/associated-types-eq-hr.rs:66:53\n+   |\n+LL |     T: for<'x, 'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>,\n+   |                                                     ^^^^^^^^^^^^^\n+\n error: implementation of `TheTrait` is not general enough\n   --> $DIR/associated-types-eq-hr.rs:102:5\n    |\n@@ -65,14 +93,15 @@ LL |     tuple_two::<Tuple>();\n    = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n-  --> $DIR/associated-types-eq-hr.rs:112:5\n+  --> $DIR/associated-types-eq-hr.rs:114:5\n    |\n LL |     tuple_four::<Tuple>();\n    |     ^^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n    |\n    = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n    = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 9 previous errors\n \n-For more information about this error, try `rustc --explain E0271`.\n+Some errors have detailed explanations: E0271, E0308.\n+For more information about an error, try `rustc --explain E0271`."}, {"sha": "21feada38a8658f48e087d0f1e1f3c49007e452c", "filename": "src/test/ui/hrtb/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61157b341eab1b555cb5bd099e030817e6d41ba1/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61157b341eab1b555cb5bd099e030817e6d41ba1/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr?ref=61157b341eab1b555cb5bd099e030817e6d41ba1", "patch": "@@ -9,7 +9,7 @@ LL |     let v = Unit2.m(\n    = help: consider constraining the associated type `<_ as Ty<'_>>::V` to `Unit4`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n-error[E0271]: type mismatch resolving `<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39] as FnOnce<((&u8,),)>>::Output == Unit3`\n+error[E0271]: type mismatch resolving `<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39] as FnOnce<((&'r u8,),)>>::Output == Unit3`\n   --> $DIR/issue-62203-hrtb-ice.rs:38:19\n    |\n LL |     let v = Unit2.m("}, {"sha": "b74a141bade5cf8143a5457faa3a7e3e81b11957", "filename": "src/test/ui/rfc1623.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61157b341eab1b555cb5bd099e030817e6d41ba1/src%2Ftest%2Fui%2Frfc1623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61157b341eab1b555cb5bd099e030817e6d41ba1/src%2Ftest%2Fui%2Frfc1623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.rs?ref=61157b341eab1b555cb5bd099e030817e6d41ba1", "patch": "@@ -23,6 +23,10 @@ static SOME_STRUCT: &SomeStruct = &SomeStruct {\n     bar: &Bar { bools: &[true, true] },\n     f: &id,\n     //~^ ERROR implementation of `FnOnce` is not general enough\n+    //~^^ mismatched types\n+    //~^^^ mismatched types\n+    //~^^^^ mismatched types\n+    //~^^^^^ mismatched types\n };\n \n // very simple test for a 'static static with default lifetime"}, {"sha": "67af4e045bbc5000d725a9c1e033fb2ea0fc8005", "filename": "src/test/ui/rfc1623.stderr", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/61157b341eab1b555cb5bd099e030817e6d41ba1/src%2Ftest%2Fui%2Frfc1623.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61157b341eab1b555cb5bd099e030817e6d41ba1/src%2Ftest%2Fui%2Frfc1623.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.stderr?ref=61157b341eab1b555cb5bd099e030817e6d41ba1", "patch": "@@ -1,3 +1,39 @@\n+error[E0308]: mismatched types\n+  --> $DIR/rfc1623.rs:24:8\n+   |\n+LL |     f: &id,\n+   |        ^^^ one type is more general than the other\n+   |\n+   = note: expected reference `&'a Foo<'b>`\n+              found reference `&'a Foo<'b>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/rfc1623.rs:24:8\n+   |\n+LL |     f: &id,\n+   |        ^^^ one type is more general than the other\n+   |\n+   = note: expected reference `&'a Foo<'b>`\n+              found reference `&'a Foo<'b>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/rfc1623.rs:24:8\n+   |\n+LL |     f: &id,\n+   |        ^^^ one type is more general than the other\n+   |\n+   = note: expected reference `&'a Foo<'b>`\n+              found reference `&'a Foo<'b>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/rfc1623.rs:24:8\n+   |\n+LL |     f: &id,\n+   |        ^^^ one type is more general than the other\n+   |\n+   = note: expected reference `&'a Foo<'b>`\n+              found reference `&'a Foo<'b>`\n+\n error: implementation of `FnOnce` is not general enough\n   --> $DIR/rfc1623.rs:24:8\n    |\n@@ -7,5 +43,6 @@ LL |     f: &id,\n    = note: `fn(&'2 Foo<'_>) -> &'2 Foo<'_> {id::<&'2 Foo<'_>>}` must implement `FnOnce<(&'1 Foo<'b>,)>`, for any lifetime `'1`...\n    = note: ...but it actually implements `FnOnce<(&'2 Foo<'_>,)>`, for some specific lifetime `'2`\n \n-error: aborting due to previous error\n+error: aborting due to 5 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "e23dfa57cd0d4d0257751da5daa63807ae6e71d2", "filename": "src/test/ui/traits/inductive-overflow/lifetime.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61157b341eab1b555cb5bd099e030817e6d41ba1/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61157b341eab1b555cb5bd099e030817e6d41ba1/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs?ref=61157b341eab1b555cb5bd099e030817e6d41ba1", "patch": "@@ -26,6 +26,4 @@ fn main() {\n     // Should only be a few notes.\n     is_send::<X<C<'static>>>();\n     //~^ ERROR overflow evaluating\n-    //~^^ 2 redundant\n-    //~^^^ required because of\n }"}, {"sha": "c739788352532080bcdaf4e071be2353801aeb2b", "filename": "src/test/ui/traits/inductive-overflow/lifetime.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61157b341eab1b555cb5bd099e030817e6d41ba1/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61157b341eab1b555cb5bd099e030817e6d41ba1/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr?ref=61157b341eab1b555cb5bd099e030817e6d41ba1", "patch": "@@ -1,4 +1,4 @@\n-error[E0275]: overflow evaluating the requirement `Box<X<C<'_>>>: NotAuto`\n+error[E0275]: overflow evaluating the requirement `Box<X<C<'static>>>: NotAuto`\n   --> $DIR/lifetime.rs:27:5\n    |\n LL | fn is_send<S: NotAuto>() {}\n@@ -7,13 +7,11 @@ LL | fn is_send<S: NotAuto>() {}\n LL |     is_send::<X<C<'static>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: required because of the requirements on the impl of `NotAuto` for `X<C<'_>>`\n+note: required because of the requirements on the impl of `NotAuto` for `X<C<'static>>`\n   --> $DIR/lifetime.rs:19:12\n    |\n LL | impl<T: Y> NotAuto for X<T> where T::P: NotAuto {}\n    |            ^^^^^^^     ^^^^\n-   = note: 2 redundant requirements hidden\n-   = note: required because of the requirements on the impl of `NotAuto` for `X<C<'static>>`\n \n error: aborting due to previous error\n "}, {"sha": "959b637c850eb7ed1d52d9737a2cf7a102e68a17", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61157b341eab1b555cb5bd099e030817e6d41ba1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61157b341eab1b555cb5bd099e030817e6d41ba1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs?ref=61157b341eab1b555cb5bd099e030817e6d41ba1", "patch": "@@ -9,7 +9,7 @@ trait Bug {\n impl Bug for &() {\n     type Item = impl Bug; //~ ERROR `impl Trait` in type aliases is unstable\n     //~^ ERROR the trait bound `(): Bug` is not satisfied\n-    //~^^ ERROR could not find defining uses\n+    //~^^ ERROR the trait bound\n \n     const FUN: fn() -> Self::Item = || ();\n     //~^ ERROR type alias impl trait is not permitted here"}, {"sha": "6857d5264b65ed717bc5bdf1410d3941fe57588d", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/61157b341eab1b555cb5bd099e030817e6d41ba1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61157b341eab1b555cb5bd099e030817e6d41ba1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr?ref=61157b341eab1b555cb5bd099e030817e6d41ba1", "patch": "@@ -25,11 +25,14 @@ LL |     type Item = impl Bug;\n    = help: the following implementations were found:\n              <&() as Bug>\n \n-error: could not find defining uses\n+error[E0277]: the trait bound `(): Bug` is not satisfied\n   --> $DIR/issue-60371.rs:10:17\n    |\n LL |     type Item = impl Bug;\n-   |                 ^^^^^^^^\n+   |                 ^^^^^^^^ the trait `Bug` is not implemented for `()`\n+   |\n+   = help: the following implementations were found:\n+             <&() as Bug>\n \n error: aborting due to 4 previous errors\n "}]}