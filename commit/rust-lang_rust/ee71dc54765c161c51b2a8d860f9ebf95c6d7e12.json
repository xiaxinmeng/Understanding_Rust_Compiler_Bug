{"sha": "ee71dc54765c161c51b2a8d860f9ebf95c6d7e12", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNzFkYzU0NzY1YzE2MWM1MWIyYThkODYwZjllYmY5NWM2ZDdlMTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-09-30T23:56:28Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-11-01T17:08:24Z"}, "message": "Document sys_common and sys", "tree": {"sha": "62dadbc840eeb2d7576ea2e82a84067e59706eb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62dadbc840eeb2d7576ea2e82a84067e59706eb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee71dc54765c161c51b2a8d860f9ebf95c6d7e12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee71dc54765c161c51b2a8d860f9ebf95c6d7e12", "html_url": "https://github.com/rust-lang/rust/commit/ee71dc54765c161c51b2a8d860f9ebf95c6d7e12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee71dc54765c161c51b2a8d860f9ebf95c6d7e12/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca30691813836e1c6896e5ba5d4397eb717e7270", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca30691813836e1c6896e5ba5d4397eb717e7270", "html_url": "https://github.com/rust-lang/rust/commit/ca30691813836e1c6896e5ba5d4397eb717e7270"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "84f41a1c535c75655607739af4629efefc8fbe91", "filename": "src/libstd/sys/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ee71dc54765c161c51b2a8d860f9ebf95c6d7e12/src%2Flibstd%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee71dc54765c161c51b2a8d860f9ebf95c6d7e12/src%2Flibstd%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fmod.rs?ref=ee71dc54765c161c51b2a8d860f9ebf95c6d7e12", "patch": "@@ -8,6 +8,28 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+//! Platform-dependent platform abstraction\n+//!\n+//! The `std::sys` module is the abstracted interface through which\n+//! `std` talks to the underlying operating system. It has different\n+//! implementations for different operating system families, today\n+//! just Unix and Windows.\n+//!\n+//! The centralization of platform-specific code in this module is\n+//! enforced by the \"platform abstraction layer\" tidy script in\n+//! `tools/tidy/pal.rs`.\n+//!\n+//! This module is closely related to the platform-independent system\n+//! integration code in `std::sys_common`. See that module's\n+//! documentation for details.\n+//!\n+//! In the future it would be desirable for the indepedent\n+//! implementations of this module to be extracted to their own crates\n+//! that `std` can link to, thus enabling their implementation\n+//! out-of-tree via crate replacement. Though due to the complex\n+//! inter-dependencies within `std` that will be a challenging goal to\n+//! achieve.\n+\n pub use self::imp::*;\n \n #[cfg(unix)]"}, {"sha": "ac2b27844dc57fcf023c131b98578e2fb0a4282b", "filename": "src/libstd/sys_common/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ee71dc54765c161c51b2a8d860f9ebf95c6d7e12/src%2Flibstd%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee71dc54765c161c51b2a8d860f9ebf95c6d7e12/src%2Flibstd%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmod.rs?ref=ee71dc54765c161c51b2a8d860f9ebf95c6d7e12", "patch": "@@ -8,6 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+//! Platform-independent platform abstraction\n+//!\n+//! This is the platform-independent portion of the standard libraries\n+//! platform abstraction layer, whereas `std::sys` is the\n+//! platform-specific portion.\n+//!\n+//! The relationship between `std::sys_common`, `std::sys` and the\n+//! rest of `std` is complex, with dependencies going in all\n+//! directions: `std` depending on `sys_common`, `sys_common`\n+//! depending on `sys`, and `sys` depending on `sys_common` and `std`.\n+//! Ideally `sys_common` would be split into two and the dependencies\n+//! between them all would form a dag, facilitating the extraction of\n+//! `std::sys` from the standard library.\n+\n #![allow(missing_docs)]\n \n use sync::Once;"}]}