{"sha": "774fbdf40deb9b257dd6aa166096fed1eeac80c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NGZiZGY0MGRlYjliMjU3ZGQ2YWExNjYwOTZmZWQxZWVhYzgwYzI=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-07-27T03:33:45Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-07-27T03:33:45Z"}, "message": "keep backtraces if using the old build system", "tree": {"sha": "aa2e2de54b3f8ad792e1d10be390c51317286b21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa2e2de54b3f8ad792e1d10be390c51317286b21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/774fbdf40deb9b257dd6aa166096fed1eeac80c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/774fbdf40deb9b257dd6aa166096fed1eeac80c2", "html_url": "https://github.com/rust-lang/rust/commit/774fbdf40deb9b257dd6aa166096fed1eeac80c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/774fbdf40deb9b257dd6aa166096fed1eeac80c2/comments", "author": null, "committer": null, "parents": [{"sha": "d464422c0a15b88a7f5791652ce1f881959fcc44", "url": "https://api.github.com/repos/rust-lang/rust/commits/d464422c0a15b88a7f5791652ce1f881959fcc44", "html_url": "https://github.com/rust-lang/rust/commit/d464422c0a15b88a7f5791652ce1f881959fcc44"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "57a4c3df70a476eeeb680233db6ab390a4c95490", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/774fbdf40deb9b257dd6aa166096fed1eeac80c2/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774fbdf40deb9b257dd6aa166096fed1eeac80c2/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=774fbdf40deb9b257dd6aa166096fed1eeac80c2", "patch": "@@ -28,11 +28,7 @@ use intrinsics;\n use mem;\n use raw;\n use sys_common::rwlock::RWLock;\n-#[cfg(feature = \"backtrace\")]\n-use sync::atomic::{AtomicBool, Ordering};\n use sys::stdio::Stderr;\n-#[cfg(feature = \"backtrace\")]\n-use sys_common::backtrace;\n use sys_common::thread_info;\n use sys_common::util;\n use thread;\n@@ -73,8 +69,6 @@ enum Hook {\n \n static HOOK_LOCK: RWLock = RWLock::new();\n static mut HOOK: Hook = Hook::Default;\n-#[cfg(feature = \"backtrace\")]\n-static FIRST_PANIC: AtomicBool = AtomicBool::new(true);\n \n /// Registers a custom panic hook, replacing any that was previously registered.\n ///\n@@ -186,13 +180,17 @@ impl<'a> Location<'a> {\n }\n \n fn default_hook(info: &PanicInfo) {\n-    #[cfg(feature = \"backtrace\")]\n-    let panics = PANIC_COUNT.with(|c| c.get());\n+    #[cfg(any(not(cargobuild), feature = \"backtrace\"))]\n+    use sys_common::backtrace;\n \n     // If this is a double panic, make sure that we print a backtrace\n     // for this panic. Otherwise only print it if logging is enabled.\n-    #[cfg(feature = \"backtrace\")]\n-    let log_backtrace = panics >= 2 || backtrace::log_enabled();\n+    #[cfg(any(not(cargobuild), feature = \"backtrace\"))]\n+    let log_backtrace = {\n+        let panics = PANIC_COUNT.with(|c| c.get());\n+\n+        panics >= 2 || backtrace::log_enabled()\n+    };\n \n     let file = info.location.file;\n     let line = info.location.line;\n@@ -212,8 +210,12 @@ fn default_hook(info: &PanicInfo) {\n         let _ = writeln!(err, \"thread '{}' panicked at '{}', {}:{}\",\n                          name, msg, file, line);\n \n-        #[cfg(feature = \"backtrace\")]\n+        #[cfg(any(not(cargobuild), feature = \"backtrace\"))]\n         {\n+            use sync::atomic::{AtomicBool, Ordering};\n+\n+            static FIRST_PANIC: AtomicBool = AtomicBool::new(true);\n+\n             if log_backtrace {\n                 let _ = backtrace::write(err);\n             } else if FIRST_PANIC.compare_and_swap(true, false, Ordering::SeqCst) {"}, {"sha": "a1f3f477b3ab7dfa4f64eadac9847bc8568d4f92", "filename": "src/libstd/sys/common/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/774fbdf40deb9b257dd6aa166096fed1eeac80c2/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774fbdf40deb9b257dd6aa166096fed1eeac80c2/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs?ref=774fbdf40deb9b257dd6aa166096fed1eeac80c2", "patch": "@@ -28,7 +28,7 @@ macro_rules! rtassert {\n \n pub mod args;\n pub mod at_exit_imp;\n-#[cfg(feature = \"backtrace\")]\n+#[cfg(any(not(cargobuild), feature = \"backtrace\"))]\n pub mod backtrace;\n pub mod condvar;\n pub mod io;\n@@ -43,7 +43,7 @@ pub mod thread_local;\n pub mod util;\n pub mod wtf8;\n \n-#[cfg(feature = \"backtrace\")]\n+#[cfg(any(not(cargobuild), feature = \"backtrace\"))]\n #[cfg(any(all(unix, not(any(target_os = \"macos\", target_os = \"ios\", target_os = \"emscripten\"))),\n           all(windows, target_env = \"gnu\")))]\n pub mod gnu;"}, {"sha": "1c25c8f77c196f444489178e37a471c67cdb3947", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/774fbdf40deb9b257dd6aa166096fed1eeac80c2/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774fbdf40deb9b257dd6aa166096fed1eeac80c2/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=774fbdf40deb9b257dd6aa166096fed1eeac80c2", "patch": "@@ -30,7 +30,7 @@ use libc;\n pub mod weak;\n \n pub mod android;\n-#[cfg(feature = \"backtrace\")]\n+#[cfg(any(not(cargobuild), feature = \"backtrace\"))]\n pub mod backtrace;\n pub mod condvar;\n pub mod ext;"}]}