{"sha": "62187b12c202c1ada2569211da090d16950c3640", "node_id": "C_kwDOAAsO6NoAKDYyMTg3YjEyYzIwMmMxYWRhMjU2OTIxMWRhMDkwZDE2OTUwYzM2NDA", "commit": {"author": {"name": "miam-miam100", "email": "49870539+miam-miam100@users.noreply.github.com", "date": "2022-07-19T21:25:26Z"}, "committer": {"name": "miam-miam100", "email": "49870539+miam-miam100@users.noreply.github.com", "date": "2022-07-20T12:39:56Z"}, "message": "Add diagnostic width span when '0$' is used as width.", "tree": {"sha": "324e1cea27ed92d2aa2268e6024adcf3640922a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/324e1cea27ed92d2aa2268e6024adcf3640922a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62187b12c202c1ada2569211da090d16950c3640", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQR5DKPUXZIl5Aixb+MMNzAQGVP33QUCYtf3nAAKCRAMNzAQGVP3\n3ZyQAQDk1z/fu1xHIqcyWsO/dBs77TG1X3udiALBj1ExcELGZAEAuSQHu5Lb1b0z\n7rIkwXm2lK9n+yYdKxWSR+6Ki/hDCwA=\n=NJC9\n-----END PGP SIGNATURE-----", "payload": "tree 324e1cea27ed92d2aa2268e6024adcf3640922a2\nparent 29c5a028b0c92aa5da6a8eb6d6585a389fcf1035\nauthor miam-miam100 <49870539+miam-miam100@users.noreply.github.com> 1658265926 +0100\ncommitter miam-miam100 <49870539+miam-miam100@users.noreply.github.com> 1658320796 +0100\n\nAdd diagnostic width span when '0$' is used as width.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62187b12c202c1ada2569211da090d16950c3640", "html_url": "https://github.com/rust-lang/rust/commit/62187b12c202c1ada2569211da090d16950c3640", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62187b12c202c1ada2569211da090d16950c3640/comments", "author": {"login": "miam-miam100", "id": 49870539, "node_id": "MDQ6VXNlcjQ5ODcwNTM5", "avatar_url": "https://avatars.githubusercontent.com/u/49870539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miam-miam100", "html_url": "https://github.com/miam-miam100", "followers_url": "https://api.github.com/users/miam-miam100/followers", "following_url": "https://api.github.com/users/miam-miam100/following{/other_user}", "gists_url": "https://api.github.com/users/miam-miam100/gists{/gist_id}", "starred_url": "https://api.github.com/users/miam-miam100/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miam-miam100/subscriptions", "organizations_url": "https://api.github.com/users/miam-miam100/orgs", "repos_url": "https://api.github.com/users/miam-miam100/repos", "events_url": "https://api.github.com/users/miam-miam100/events{/privacy}", "received_events_url": "https://api.github.com/users/miam-miam100/received_events", "type": "User", "site_admin": false}, "committer": {"login": "miam-miam100", "id": 49870539, "node_id": "MDQ6VXNlcjQ5ODcwNTM5", "avatar_url": "https://avatars.githubusercontent.com/u/49870539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miam-miam100", "html_url": "https://github.com/miam-miam100", "followers_url": "https://api.github.com/users/miam-miam100/followers", "following_url": "https://api.github.com/users/miam-miam100/following{/other_user}", "gists_url": "https://api.github.com/users/miam-miam100/gists{/gist_id}", "starred_url": "https://api.github.com/users/miam-miam100/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miam-miam100/subscriptions", "organizations_url": "https://api.github.com/users/miam-miam100/orgs", "repos_url": "https://api.github.com/users/miam-miam100/repos", "events_url": "https://api.github.com/users/miam-miam100/events{/privacy}", "received_events_url": "https://api.github.com/users/miam-miam100/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29c5a028b0c92aa5da6a8eb6d6585a389fcf1035", "url": "https://api.github.com/repos/rust-lang/rust/commits/29c5a028b0c92aa5da6a8eb6d6585a389fcf1035", "html_url": "https://github.com/rust-lang/rust/commit/29c5a028b0c92aa5da6a8eb6d6585a389fcf1035"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "6e7553f5e496b16d4c62100b20651d1c435eeea7", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/62187b12c202c1ada2569211da090d16950c3640/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62187b12c202c1ada2569211da090d16950c3640/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=62187b12c202c1ada2569211da090d16950c3640", "patch": "@@ -572,9 +572,10 @@ impl<'a> Parser<'a> {\n             // '0' flag and then an ill-formatted format string with just a '$'\n             // and no count, but this is better if we instead interpret this as\n             // no '0' flag and '0$' as the width instead.\n-            if self.consume('$') {\n+            if let Some(end) = self.consume_pos('$') {\n                 spec.width = CountIsParam(0);\n                 havewidth = true;\n+                spec.width_span = Some(self.to_span_index(end - 1).to(self.to_span_index(end + 1)));\n             } else {\n                 spec.flags |= 1 << (FlagSignAwareZeroPad as u32);\n             }"}, {"sha": "9c305b4996a13f73fb03ba6af46018e4b88725c8", "filename": "compiler/rustc_parse_format/src/tests.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/62187b12c202c1ada2569211da090d16950c3640/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62187b12c202c1ada2569211da090d16950c3640/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs?ref=62187b12c202c1ada2569211da090d16950c3640", "patch": "@@ -178,6 +178,23 @@ fn format_counts() {\n             },\n         })],\n     );\n+    same(\n+        \"{1:0$.10x}\",\n+        &[NextArgument(Argument {\n+            position: ArgumentIs(1),\n+            format: FormatSpec {\n+                fill: None,\n+                align: AlignUnknown,\n+                flags: 0,\n+                precision: CountIs(10),\n+                width: CountIsParam(0),\n+                precision_span: None,\n+                width_span: Some(InnerSpan::new(4, 6)),\n+                ty: \"x\",\n+                ty_span: None,\n+            },\n+        })],\n+    );\n     same(\n         \"{:.*x}\",\n         &[NextArgument(Argument {"}]}