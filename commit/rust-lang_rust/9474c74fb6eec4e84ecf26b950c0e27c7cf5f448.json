{"sha": "9474c74fb6eec4e84ecf26b950c0e27c7cf5f448", "node_id": "C_kwDOAAsO6NoAKDk0NzRjNzRmYjZlZWM0ZTg0ZWNmMjZiOTUwYzBlMjdjN2NmNWY0NDg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-21T21:03:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-21T21:03:18Z"}, "message": "Rollup merge of #93109 - JakobDegen:arc-docs, r=m-ou-se\n\nImprove `Arc` and `Rc` documentation\n\nThis makes two changes (I can split the PR if necessary, but the changes are pretty small):\n 1. A bunch of trait implementations claimed to be zero cost; however, they use the `Arc<T>: From<Box<T>>` impl which is definitely not free, especially for large dynamically sized `T`.\n 2.  The code in deferred initialization examples unnecessarily used excessive amounts of `unsafe`. This has been reduced.", "tree": {"sha": "f2fe482fbfa3b345238e864dfdd2a30b6c819772", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2fe482fbfa3b345238e864dfdd2a30b6c819772"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9474c74fb6eec4e84ecf26b950c0e27c7cf5f448", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh6x+WCRBK7hj4Ov3rIwAA4DUIAEJoL2nnSREr8CrH4qLcP/09\n4opP5cuYTUrxK8vNGu3NTcgU2lHht1stniZjwkg+QAC42F0XZhh9EycLZCmqGScf\n/KbVxuH2jN9QQ6+sIjtfao6TJnguC6/hHJaFqmptgOgN6whR5J6dXIxkIN2tctLy\nkuV/U40j8RtP3JlnJ+eCp2JggCV+l+HFaxylWkRXuQZ7LlgbmFmmw+tQYZuC9ta6\n75HIZk/PM9USgGdFReMAnxf3ntqEo15VveBlIu34E1r8h49xeyJtrRYOaqedMOg9\nqfccBbt4Hp2jRbVk+S7hI9QcomKV/z9oyIOMVEuXddmS+wWlJ6lk7SEf5HQGuEY=\n=BtAD\n-----END PGP SIGNATURE-----\n", "payload": "tree f2fe482fbfa3b345238e864dfdd2a30b6c819772\nparent ab19d4a515366ab68b73af3f9a55db52d5542a06\nparent 4de76184aa7b8257d44b7a9abf5f140727c84b48\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642798998 +0100\ncommitter GitHub <noreply@github.com> 1642798998 +0100\n\nRollup merge of #93109 - JakobDegen:arc-docs, r=m-ou-se\n\nImprove `Arc` and `Rc` documentation\n\nThis makes two changes (I can split the PR if necessary, but the changes are pretty small):\n 1. A bunch of trait implementations claimed to be zero cost; however, they use the `Arc<T>: From<Box<T>>` impl which is definitely not free, especially for large dynamically sized `T`.\n 2.  The code in deferred initialization examples unnecessarily used excessive amounts of `unsafe`. This has been reduced.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9474c74fb6eec4e84ecf26b950c0e27c7cf5f448", "html_url": "https://github.com/rust-lang/rust/commit/9474c74fb6eec4e84ecf26b950c0e27c7cf5f448", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9474c74fb6eec4e84ecf26b950c0e27c7cf5f448/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab19d4a515366ab68b73af3f9a55db52d5542a06", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab19d4a515366ab68b73af3f9a55db52d5542a06", "html_url": "https://github.com/rust-lang/rust/commit/ab19d4a515366ab68b73af3f9a55db52d5542a06"}, {"sha": "4de76184aa7b8257d44b7a9abf5f140727c84b48", "url": "https://api.github.com/repos/rust-lang/rust/commits/4de76184aa7b8257d44b7a9abf5f140727c84b48", "html_url": "https://github.com/rust-lang/rust/commit/4de76184aa7b8257d44b7a9abf5f140727c84b48"}], "stats": {"total": 120, "additions": 55, "deletions": 65}, "files": [{"sha": "bf5fcfdcbf5fabf3edd97a79f375b90324ac5ff3", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 21, "deletions": 29, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9474c74fb6eec4e84ecf26b950c0e27c7cf5f448/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9474c74fb6eec4e84ecf26b950c0e27c7cf5f448/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=9474c74fb6eec4e84ecf26b950c0e27c7cf5f448", "patch": "@@ -451,12 +451,10 @@ impl<T> Rc<T> {\n     ///\n     /// let mut five = Rc::<u32>::new_uninit();\n     ///\n-    /// let five = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Rc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);\n+    /// // Deferred initialization:\n+    /// Rc::get_mut(&mut five).unwrap().write(5);\n     ///\n-    ///     five.assume_init()\n-    /// };\n+    /// let five = unsafe { five.assume_init() };\n     ///\n     /// assert_eq!(*five, 5)\n     /// ```\n@@ -543,12 +541,10 @@ impl<T> Rc<T> {\n     ///\n     /// let mut five = Rc::<u32>::try_new_uninit()?;\n     ///\n-    /// let five = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Rc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);\n+    /// // Deferred initialization:\n+    /// Rc::get_mut(&mut five).unwrap().write(5);\n     ///\n-    ///     five.assume_init()\n-    /// };\n+    /// let five = unsafe { five.assume_init() };\n     ///\n     /// assert_eq!(*five, 5);\n     /// # Ok::<(), std::alloc::AllocError>(())\n@@ -660,14 +656,13 @@ impl<T> Rc<[T]> {\n     ///\n     /// let mut values = Rc::<[u32]>::new_uninit_slice(3);\n     ///\n-    /// let values = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Rc::get_mut_unchecked(&mut values)[0].as_mut_ptr().write(1);\n-    ///     Rc::get_mut_unchecked(&mut values)[1].as_mut_ptr().write(2);\n-    ///     Rc::get_mut_unchecked(&mut values)[2].as_mut_ptr().write(3);\n+    /// // Deferred initialization:\n+    /// let data = Rc::get_mut(&mut values).unwrap();\n+    /// data[0].write(1);\n+    /// data[1].write(2);\n+    /// data[2].write(3);\n     ///\n-    ///     values.assume_init()\n-    /// };\n+    /// let values = unsafe { values.assume_init() };\n     ///\n     /// assert_eq!(*values, [1, 2, 3])\n     /// ```\n@@ -738,12 +733,10 @@ impl<T> Rc<mem::MaybeUninit<T>> {\n     ///\n     /// let mut five = Rc::<u32>::new_uninit();\n     ///\n-    /// let five = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Rc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);\n+    /// // Deferred initialization:\n+    /// Rc::get_mut(&mut five).unwrap().write(5);\n     ///\n-    ///     five.assume_init()\n-    /// };\n+    /// let five = unsafe { five.assume_init() };\n     ///\n     /// assert_eq!(*five, 5)\n     /// ```\n@@ -777,14 +770,13 @@ impl<T> Rc<[mem::MaybeUninit<T>]> {\n     ///\n     /// let mut values = Rc::<[u32]>::new_uninit_slice(3);\n     ///\n-    /// let values = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Rc::get_mut_unchecked(&mut values)[0].as_mut_ptr().write(1);\n-    ///     Rc::get_mut_unchecked(&mut values)[1].as_mut_ptr().write(2);\n-    ///     Rc::get_mut_unchecked(&mut values)[2].as_mut_ptr().write(3);\n+    /// // Deferred initialization:\n+    /// let data = Rc::get_mut(&mut values).unwrap();\n+    /// data[0].write(1);\n+    /// data[1].write(2);\n+    /// data[2].write(3);\n     ///\n-    ///     values.assume_init()\n-    /// };\n+    /// let values = unsafe { values.assume_init() };\n     ///\n     /// assert_eq!(*values, [1, 2, 3])\n     /// ```"}, {"sha": "ab8a44b2147431e745635cde38b93435b8be9dd2", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 21, "deletions": 29, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9474c74fb6eec4e84ecf26b950c0e27c7cf5f448/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9474c74fb6eec4e84ecf26b950c0e27c7cf5f448/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=9474c74fb6eec4e84ecf26b950c0e27c7cf5f448", "patch": "@@ -437,12 +437,10 @@ impl<T> Arc<T> {\n     ///\n     /// let mut five = Arc::<u32>::new_uninit();\n     ///\n-    /// let five = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Arc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);\n+    /// // Deferred initialization:\n+    /// Arc::get_mut(&mut five).unwrap().write(5);\n     ///\n-    ///     five.assume_init()\n-    /// };\n+    /// let five = unsafe { five.assume_init() };\n     ///\n     /// assert_eq!(*five, 5)\n     /// ```\n@@ -545,12 +543,10 @@ impl<T> Arc<T> {\n     ///\n     /// let mut five = Arc::<u32>::try_new_uninit()?;\n     ///\n-    /// let five = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Arc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);\n+    /// // Deferred initialization:\n+    /// Arc::get_mut(&mut five).unwrap().write(5);\n     ///\n-    ///     five.assume_init()\n-    /// };\n+    /// let five = unsafe { five.assume_init() };\n     ///\n     /// assert_eq!(*five, 5);\n     /// # Ok::<(), std::alloc::AllocError>(())\n@@ -652,14 +648,13 @@ impl<T> Arc<[T]> {\n     ///\n     /// let mut values = Arc::<[u32]>::new_uninit_slice(3);\n     ///\n-    /// let values = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Arc::get_mut_unchecked(&mut values)[0].as_mut_ptr().write(1);\n-    ///     Arc::get_mut_unchecked(&mut values)[1].as_mut_ptr().write(2);\n-    ///     Arc::get_mut_unchecked(&mut values)[2].as_mut_ptr().write(3);\n+    /// // Deferred initialization:\n+    /// let data = Arc::get_mut(&mut values).unwrap();\n+    /// data[0].write(1);\n+    /// data[1].write(2);\n+    /// data[2].write(3);\n     ///\n-    ///     values.assume_init()\n-    /// };\n+    /// let values = unsafe { values.assume_init() };\n     ///\n     /// assert_eq!(*values, [1, 2, 3])\n     /// ```\n@@ -730,12 +725,10 @@ impl<T> Arc<mem::MaybeUninit<T>> {\n     ///\n     /// let mut five = Arc::<u32>::new_uninit();\n     ///\n-    /// let five = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Arc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);\n+    /// // Deferred initialization:\n+    /// Arc::get_mut(&mut five).unwrap().write(5);\n     ///\n-    ///     five.assume_init()\n-    /// };\n+    /// let five = unsafe { five.assume_init() };\n     ///\n     /// assert_eq!(*five, 5)\n     /// ```\n@@ -770,14 +763,13 @@ impl<T> Arc<[mem::MaybeUninit<T>]> {\n     ///\n     /// let mut values = Arc::<[u32]>::new_uninit_slice(3);\n     ///\n-    /// let values = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Arc::get_mut_unchecked(&mut values)[0].as_mut_ptr().write(1);\n-    ///     Arc::get_mut_unchecked(&mut values)[1].as_mut_ptr().write(2);\n-    ///     Arc::get_mut_unchecked(&mut values)[2].as_mut_ptr().write(3);\n+    /// // Deferred initialization:\n+    /// let data = Arc::get_mut(&mut values).unwrap();\n+    /// data[0].write(1);\n+    /// data[1].write(2);\n+    /// data[2].write(3);\n     ///\n-    ///     values.assume_init()\n-    /// };\n+    /// let values = unsafe { values.assume_init() };\n     ///\n     /// assert_eq!(*values, [1, 2, 3])\n     /// ```"}, {"sha": "66fee2fe548374dbd02eaaf7d62fd5f5a7f34282", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9474c74fb6eec4e84ecf26b950c0e27c7cf5f448/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9474c74fb6eec4e84ecf26b950c0e27c7cf5f448/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=9474c74fb6eec4e84ecf26b950c0e27c7cf5f448", "patch": "@@ -973,7 +973,8 @@ impl<'a> From<&'a CString> for Cow<'a, CStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<CString> for Arc<CStr> {\n-    /// Converts a [`CString`] into an <code>[Arc]<[CStr]></code> without copying or allocating.\n+    /// Converts a [`CString`] into an <code>[Arc]<[CStr]></code> by moving the [`CString`]\n+    /// data into a new [`Arc`] buffer.\n     #[inline]\n     fn from(s: CString) -> Arc<CStr> {\n         let arc: Arc<[u8]> = Arc::from(s.into_inner());\n@@ -992,7 +993,8 @@ impl From<&CStr> for Arc<CStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<CString> for Rc<CStr> {\n-    /// Converts a [`CString`] into an <code>[Rc]<[CStr]></code> without copying or allocating.\n+    /// Converts a [`CString`] into an <code>[Rc]<[CStr]></code> by moving the [`CString`]\n+    /// data into a new [`Arc`] buffer.\n     #[inline]\n     fn from(s: CString) -> Rc<CStr> {\n         let rc: Rc<[u8]> = Rc::from(s.into_inner());"}, {"sha": "81f72e34d93889fdd1a4216abaa35af97a09e6e5", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9474c74fb6eec4e84ecf26b950c0e27c7cf5f448/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9474c74fb6eec4e84ecf26b950c0e27c7cf5f448/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=9474c74fb6eec4e84ecf26b950c0e27c7cf5f448", "patch": "@@ -989,7 +989,8 @@ impl Clone for Box<OsStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<OsString> for Arc<OsStr> {\n-    /// Converts an [`OsString`] into an <code>[Arc]<[OsStr]></code> without copying or allocating.\n+    /// Converts an [`OsString`] into an <code>[Arc]<[OsStr]></code> by moving the [`OsString`]\n+    /// data into a new [`Arc`] buffer.\n     #[inline]\n     fn from(s: OsString) -> Arc<OsStr> {\n         let arc = s.inner.into_arc();\n@@ -1008,7 +1009,8 @@ impl From<&OsStr> for Arc<OsStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<OsString> for Rc<OsStr> {\n-    /// Converts an [`OsString`] into an <code>[Rc]<[OsStr]></code> without copying or allocating.\n+    /// Converts an [`OsString`] into an <code>[Rc]<[OsStr]></code> by moving the [`OsString`]\n+    /// data into a new [`Rc`] buffer.\n     #[inline]\n     fn from(s: OsString) -> Rc<OsStr> {\n         let rc = s.inner.into_rc();"}, {"sha": "558333518f1d4bd68f31580c4e0dd779986d46dc", "filename": "library/std/src/path.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9474c74fb6eec4e84ecf26b950c0e27c7cf5f448/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9474c74fb6eec4e84ecf26b950c0e27c7cf5f448/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=9474c74fb6eec4e84ecf26b950c0e27c7cf5f448", "patch": "@@ -1766,7 +1766,8 @@ impl<'a> From<Cow<'a, Path>> for PathBuf {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<PathBuf> for Arc<Path> {\n-    /// Converts a [`PathBuf`] into an [`Arc`] by moving the [`PathBuf`] data into a new [`Arc`] buffer.\n+    /// Converts a [`PathBuf`] into an <code>[Arc]<[Path]></code> by moving the [`PathBuf`] data\n+    /// into a new [`Arc`] buffer.\n     #[inline]\n     fn from(s: PathBuf) -> Arc<Path> {\n         let arc: Arc<OsStr> = Arc::from(s.into_os_string());\n@@ -1786,7 +1787,8 @@ impl From<&Path> for Arc<Path> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<PathBuf> for Rc<Path> {\n-    /// Converts a [`PathBuf`] into an [`Rc`] by moving the [`PathBuf`] data into a new `Rc` buffer.\n+    /// Converts a [`PathBuf`] into an <code>[Rc]<[Path]></code> by moving the [`PathBuf`] data into\n+    /// a new [`Rc`] buffer.\n     #[inline]\n     fn from(s: PathBuf) -> Rc<Path> {\n         let rc: Rc<OsStr> = Rc::from(s.into_os_string());\n@@ -1796,7 +1798,7 @@ impl From<PathBuf> for Rc<Path> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<&Path> for Rc<Path> {\n-    /// Converts a [`Path`] into an [`Rc`] by copying the [`Path`] data into a new `Rc` buffer.\n+    /// Converts a [`Path`] into an [`Rc`] by copying the [`Path`] data into a new [`Rc`] buffer.\n     #[inline]\n     fn from(s: &Path) -> Rc<Path> {\n         let rc: Rc<OsStr> = Rc::from(s.as_os_str());"}]}