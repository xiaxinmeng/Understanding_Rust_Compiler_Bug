{"sha": "bfb01bbb263923106b33fdaa140a5fa464426162", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYjAxYmJiMjYzOTIzMTA2YjMzZmRhYTE0MGE1ZmE0NjQ0MjYxNjI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-23T03:54:53Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-25T20:41:40Z"}, "message": "Refactor away `AttrMetaMethods`.", "tree": {"sha": "8eb2504236468bde9b6c4c4d8ee75765b05bb246", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8eb2504236468bde9b6c4c4d8ee75765b05bb246"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfb01bbb263923106b33fdaa140a5fa464426162", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfb01bbb263923106b33fdaa140a5fa464426162", "html_url": "https://github.com/rust-lang/rust/commit/bfb01bbb263923106b33fdaa140a5fa464426162", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfb01bbb263923106b33fdaa140a5fa464426162/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e264828b27b30980f6a9c316e17dc44e6b9be09f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e264828b27b30980f6a9c316e17dc44e6b9be09f", "html_url": "https://github.com/rust-lang/rust/commit/e264828b27b30980f6a9c316e17dc44e6b9be09f"}], "stats": {"total": 208, "additions": 50, "deletions": 158}, "files": [{"sha": "21143f93a7da84011a128e852fb3d7b71e484857", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -11,7 +11,6 @@\n use session::Session;\n \n use syntax::ast;\n-use syntax::attr::AttrMetaMethods;\n use syntax::visit;\n use syntax::visit::Visitor;\n "}, {"sha": "c9211586143275c28a6c617499d9ab208883c375", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -38,7 +38,7 @@ use util::nodemap::FnvHashMap;\n use std::cmp;\n use std::default::Default as StdDefault;\n use std::mem;\n-use syntax::attr::{self, AttrMetaMethods};\n+use syntax::attr;\n use syntax::parse::token::InternedString;\n use syntax::ast;\n use syntax_pos::Span;"}, {"sha": "d1769d5cbc51bd90011c529b4ba845840014d704", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -30,7 +30,6 @@ use middle::weak_lang_items;\n use util::nodemap::FnvHashMap;\n \n use syntax::ast;\n-use syntax::attr::AttrMetaMethods;\n use syntax::parse::token::InternedString;\n use hir::intravisit::Visitor;\n use hir;"}, {"sha": "0764e817f4307be588e51c8da31f67864b288cf4", "filename": "src/librustc/middle/recursion_limit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -17,7 +17,6 @@\n \n use session::Session;\n use syntax::ast;\n-use syntax::attr::AttrMetaMethods;\n \n pub fn update_recursion_limit(sess: &Session, krate: &ast::Crate) {\n     for attr in &krate.attrs {"}, {"sha": "405202bc634e4bb0f745d5e9ff65cbd3ac013b4e", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -27,7 +27,7 @@ use syntax_pos::{Span, DUMMY_SP};\n use syntax::ast;\n use syntax::ast::{NodeId, Attribute};\n use syntax::feature_gate::{GateIssue, emit_feature_err, find_lang_feature_accepted_version};\n-use syntax::attr::{self, Stability, Deprecation, AttrMetaMethods};\n+use syntax::attr::{self, Stability, Deprecation};\n use util::nodemap::{DefIdMap, FnvHashSet, FnvHashMap};\n \n use hir;"}, {"sha": "7a1848f42d212017526e4973fb0d80af4a2bb6db", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -25,7 +25,6 @@ use middle::cstore;\n \n use syntax::ast::{self, IntTy, UintTy};\n use syntax::attr;\n-use syntax::attr::AttrMetaMethods;\n use syntax::parse;\n use syntax::parse::token::InternedString;\n use syntax::feature_gate::UnstableFeatures;\n@@ -1774,7 +1773,6 @@ mod tests {\n     use std::rc::Rc;\n     use super::{OutputType, OutputTypes, Externs, PanicStrategy};\n     use syntax::attr;\n-    use syntax::attr::AttrMetaMethods;\n \n     fn optgroups() -> Vec<OptGroup> {\n         super::rustc_optgroups().into_iter()"}, {"sha": "a09ce38c4bb1a7d5ed7cc3648313e2acdc918b45", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -37,7 +37,6 @@ use util::nodemap::{FnvHashMap, FnvHashSet};\n use std::cmp;\n use std::fmt;\n use syntax::ast;\n-use syntax::attr::AttrMetaMethods;\n use syntax_pos::Span;\n use errors::DiagnosticBuilder;\n "}, {"sha": "ded9867fa6f2af21ee9ca0caae113cc3fc54b01c", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -43,7 +43,7 @@ use std::rc::Rc;\n use std::slice;\n use std::vec::IntoIter;\n use syntax::ast::{self, CrateNum, Name, NodeId};\n-use syntax::attr::{self, AttrMetaMethods};\n+use syntax::attr;\n use syntax::parse::token::InternedString;\n use syntax_pos::{DUMMY_SP, Span};\n "}, {"sha": "a8993724e670630ca2a5fdbacc1fbb012116152a", "filename": "src/librustc_borrowck/borrowck/fragments.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -27,7 +27,6 @@ use rustc::middle::mem_categorization as mc;\n use std::mem;\n use std::rc::Rc;\n use syntax::ast;\n-use syntax::attr::AttrMetaMethods;\n use syntax_pos::{Span, DUMMY_SP};\n \n #[derive(PartialEq, Eq, PartialOrd, Ord)]"}, {"sha": "2d429aaab6a08d0d6b15f6f5be6d6ea7338bf28a", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -11,7 +11,6 @@\n use borrowck::BorrowckCtxt;\n \n use syntax::ast::{self, MetaItem};\n-use syntax::attr::AttrMetaMethods;\n use syntax::ptr::P;\n use syntax_pos::{Span, DUMMY_SP};\n \n@@ -127,8 +126,6 @@ fn do_dataflow<'a, 'tcx, BD>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              bd: BD) -> DataflowResults<BD>\n     where BD: BitDenotation<Idx=MovePathIndex, Ctxt=MoveDataParamEnv<'tcx>> + DataflowOperator\n {\n-    use syntax::attr::AttrMetaMethods;\n-\n     let name_found = |sess: &Session, attrs: &[ast::Attribute], name| -> Option<String> {\n         if let Some(item) = has_rustc_mir_with(attrs, name) {\n             if let Some(s) = item.value_str() {"}, {"sha": "343e9251e1db61f204f59966fe1fb799025a839d", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -42,7 +42,6 @@ use std::fmt;\n use std::mem;\n use std::rc::Rc;\n use syntax::ast;\n-use syntax::attr::AttrMetaMethods;\n use syntax_pos::{MultiSpan, Span};\n use errors::DiagnosticBuilder;\n "}, {"sha": "c6ab4578f0632c69d10661b96743fd9bdeb65963", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -49,7 +49,7 @@ use std::fs;\n use std::io::{self, Write};\n use std::path::{Path, PathBuf};\n use syntax::{ast, diagnostics, visit};\n-use syntax::attr::{self, AttrMetaMethods};\n+use syntax::attr;\n use syntax::parse::{self, PResult, token};\n use syntax::util::node_count::NodeCounter;\n use syntax;"}, {"sha": "efadf1ff488dfbee24919b4a0504c3246129d893", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -95,7 +95,6 @@ use std::thread;\n use rustc::session::early_error;\n \n use syntax::{ast, json};\n-use syntax::attr::AttrMetaMethods;\n use syntax::codemap::{CodeMap, FileLoader, RealFileLoader};\n use syntax::feature_gate::{GatedCfg, UnstableFeatures};\n use syntax::parse::{self, PResult};"}, {"sha": "8df8f5003711883aa5b906c1a3c25140ae84c058", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -56,7 +56,6 @@ use std::env;\n use std::fs::File;\n use std::io::Write;\n use syntax::ast;\n-use syntax::attr::AttrMetaMethods;\n use syntax::parse::token::InternedString;\n use syntax_pos::Span;\n "}, {"sha": "fda7ef207a3447a434a97edd5f85f7197fd0944a", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -32,7 +32,6 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::Visitor;\n use rustc_data_structures::fnv::FnvHashSet;\n use syntax::ast::{self, Attribute, NestedMetaItem};\n-use syntax::attr::AttrMetaMethods;\n use syntax::parse::token::InternedString;\n use rustc::ty::TyCtxt;\n "}, {"sha": "0e130c3bb66bfb823c88f127a214b54722f04a3c", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -14,7 +14,7 @@ use lint::{LateContext, LintContext, LintArray};\n use lint::{LintPass, LateLintPass};\n \n use syntax::ast;\n-use syntax::attr::{self, AttrMetaMethods};\n+use syntax::attr;\n use syntax_pos::Span;\n \n use rustc::hir::{self, PatKind};"}, {"sha": "a103386e2c9809c89c8853fda70d6d832540f476", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -44,7 +44,7 @@ use lint::{LintPass, LateLintPass};\n use std::collections::HashSet;\n \n use syntax::{ast};\n-use syntax::attr::{self, AttrMetaMethods};\n+use syntax::attr;\n use syntax_pos::{Span};\n \n use rustc::hir::{self, PatKind};\n@@ -1145,7 +1145,7 @@ impl LintPass for UnstableFeatures {\n \n impl LateLintPass for UnstableFeatures {\n     fn check_attribute(&mut self, ctx: &LateContext, attr: &ast::Attribute) {\n-        if attr::contains_name(&[attr.meta().clone()], \"feature\") {\n+        if attr.meta().check_name(\"feature\") {\n             if let Some(items) = attr.meta().meta_item_list() {\n                 for item in items {\n                     ctx.span_lint(UNSTABLE_FEATURES, item.span(), \"unstable feature\");"}, {"sha": "411daa0c12aee23e7c8c94338acce4930d6b8941", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -18,7 +18,7 @@ use lint::{LintPass, EarlyLintPass, LateLintPass};\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n \n use syntax::ast;\n-use syntax::attr::{self, AttrMetaMethods};\n+use syntax::attr;\n use syntax::feature_gate::{KNOWN_ATTRIBUTES, AttributeType};\n use syntax::ptr::P;\n use syntax_pos::Span;"}, {"sha": "7e1f3ea618c979f597a3f17128ad4aabfd565e74", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -35,7 +35,7 @@ use syntax::ast;\n use syntax::abi::Abi;\n use syntax::codemap;\n use syntax::parse;\n-use syntax::attr::{self, AttrMetaMethods};\n+use syntax::attr;\n use syntax::parse::token::InternedString;\n use syntax::visit;\n use syntax_pos::{self, Span, mk_sp, Pos};"}, {"sha": "25fedb10201a9101a3f2bb79bdba97748d7dbbc6", "filename": "src/librustc_metadata/macro_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_metadata%2Fmacro_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_metadata%2Fmacro_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fmacro_import.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -18,7 +18,7 @@ use rustc::session::Session;\n use std::collections::{HashSet, HashMap};\n use syntax::parse::token;\n use syntax::ast;\n-use syntax::attr::{self, AttrMetaMethods};\n+use syntax::attr;\n use syntax::ext;\n use syntax_pos::Span;\n "}, {"sha": "f65680b567c74d4f3c908403027c5c55159a67f0", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -32,7 +32,6 @@ use rustc::ty::{self, Ty, TyCtxt};\n use syntax::parse::token;\n use rustc::hir;\n use rustc_const_math::{ConstInt, ConstUsize};\n-use syntax::attr::AttrMetaMethods;\n \n #[derive(Copy, Clone)]\n pub struct Cx<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {"}, {"sha": "9e56397bc99e9ff6bb8031cd0d4f1f047cf0c4e4", "filename": "src/librustc_plugin/load.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_plugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_plugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fload.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -20,7 +20,6 @@ use std::env;\n use std::mem;\n use std::path::PathBuf;\n use syntax::ast;\n-use syntax::attr::{AttrMetaMethods};\n use syntax_pos::{Span, COMMAND_LINE_SP};\n \n /// Pointer to a registrar function."}, {"sha": "7fe6d2bbfe24eeb640555c2f2d81cc6862ddcd13", "filename": "src/librustc_trans/assert_module_sources.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_trans%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_trans%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fassert_module_sources.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -29,7 +29,6 @@\n \n use rustc::ty::TyCtxt;\n use syntax::ast;\n-use syntax::attr::AttrMetaMethods;\n use syntax::parse::token::InternedString;\n \n use {ModuleSource, ModuleTranslation};"}, {"sha": "b21785c27dae5e50967ec55912ece1c227af1118", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -42,7 +42,6 @@ use std::process::Command;\n use std::str;\n use flate;\n use syntax::ast;\n-use syntax::attr::AttrMetaMethods;\n use syntax_pos::Span;\n \n // RLIB LLVM-BYTECODE OBJECT LAYOUT"}, {"sha": "f231344f22f458857fd778872d75a34dc47b85cc", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -93,7 +93,6 @@ use std::rc::Rc;\n use std::str;\n use std::i32;\n use syntax_pos::{Span, DUMMY_SP};\n-use syntax::attr::AttrMetaMethods;\n use syntax::attr;\n use rustc::hir;\n use syntax::ast;"}, {"sha": "2b6e2a23261bdf21c073c45f6f7d047c22f05616", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -29,7 +29,7 @@ use rustc::hir;\n \n use std::ffi::{CStr, CString};\n use syntax::ast;\n-use syntax::attr::{self, AttrMetaMethods};\n+use syntax::attr;\n use syntax::parse::token;\n \n pub fn ptrcast(val: ValueRef, ty: Type) -> ValueRef {"}, {"sha": "25c30151ad45dbcac159cae4a97b0a49698a7a4a", "filename": "src/librustc_trans/symbol_names_test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_trans%2Fsymbol_names_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_trans%2Fsymbol_names_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsymbol_names_test.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -17,7 +17,6 @@\n use rustc::hir;\n use rustc::hir::intravisit::{self, Visitor};\n use syntax::ast;\n-use syntax::attr::AttrMetaMethods;\n \n use common::SharedCrateContext;\n use monomorphize::Instance;"}, {"sha": "619aafa799f3e3ecbe70b3488c3e7d3e643dbdb8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -113,7 +113,6 @@ use std::ops::Deref;\n use syntax::abi::Abi;\n use syntax::ast;\n use syntax::attr;\n-use syntax::attr::AttrMetaMethods;\n use syntax::codemap::{self, Spanned};\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::parse::token::{self, InternedString, keywords};"}, {"sha": "3a1e22f81b5c9dbd5433183bb0b71476f8de0b2e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 58, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -26,9 +26,8 @@ pub use self::Visibility::*;\n use syntax::abi::Abi;\n use syntax::ast;\n use syntax::attr;\n-use syntax::attr::AttrMetaMethods;\n use syntax::codemap::Spanned;\n-use syntax::parse::token::{self, InternedString, keywords};\n+use syntax::parse::token::keywords;\n use syntax::ptr::P;\n use syntax::print::pprust as syntax_pprust;\n use syntax_pos::{self, DUMMY_SP, Pos};\n@@ -541,62 +540,6 @@ impl Clean<Attribute> for ast::Attribute {\n     }\n }\n \n-// This is a rough approximation that gets us what we want.\n-impl Attribute {\n-    fn check_name(&self, name: &str) -> bool {\n-        self.name().map_or(false, |mi_name| &*mi_name == name)\n-    }\n-\n-    fn literal(&self) -> Option<&ast::Lit> { None }\n-\n-    fn is_literal(&self) -> bool {\n-      match *self {\n-        Literal(..) => true,\n-        _ => false,\n-      }\n-    }\n-\n-    fn meta_item(&self) -> Option<&P<ast::MetaItem>> { None }\n-\n-    fn name(&self) -> Option<InternedString> {\n-        match *self {\n-            Word(ref n) | List(ref n, _) | NameValue(ref n, _) => {\n-                Some(token::intern_and_get_ident(n))\n-            },\n-            _ => None\n-        }\n-    }\n-\n-    fn value_str(&self) -> Option<InternedString> {\n-        match *self {\n-            NameValue(_, ref v) => {\n-                Some(token::intern_and_get_ident(v))\n-            }\n-            _ => None,\n-        }\n-    }\n-\n-    fn word(&self) -> Option<&P<ast::MetaItem>> { None }\n-\n-    fn is_word(&self) -> bool {\n-      match *self {\n-        Word(_) => true,\n-        _ => false,\n-      }\n-    }\n-\n-    fn meta_item_list<'a>(&'a self) -> Option<&'a [ast::NestedMetaItem]> { None }\n-\n-    fn is_meta_item_list(&self) -> bool {\n-      match *self {\n-        List(..) => true,\n-        _ => false,\n-      }\n-    }\n-\n-    fn span(&self) -> syntax_pos::Span { unimplemented!() }\n-}\n-\n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n pub struct TyParam {\n     pub name: String,"}, {"sha": "1805da2385b67d017de4b988eefb605b07f772e9", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -140,7 +140,6 @@ pub fn run(input: &str,\n \n // Look for #![doc(test(no_crate_inject))], used by crates in the std facade\n fn scrape_test_config(krate: &::rustc::hir::Crate) -> TestOptions {\n-    use syntax::attr::AttrMetaMethods;\n     use syntax::print::pprust;\n \n     let mut opts = TestOptions {"}, {"sha": "e66d01e5c2db1329dd6c2ddb9513b44d4bb5ea9d", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -17,7 +17,6 @@ use std::mem;\n use syntax::abi;\n use syntax::ast;\n use syntax::attr;\n-use syntax::attr::AttrMetaMethods;\n use syntax_pos::Span;\n \n use rustc::hir::map as hir_map;"}, {"sha": "6060ff529f2155bbe01d47ae3275e2e2b525bfa2", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 34, "deletions": 58, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -160,72 +160,49 @@ impl NestedMetaItem {\n     }\n }\n \n-pub trait AttrMetaMethods {\n-    fn check_name(&self, name: &str) -> bool {\n-        name == &self.name()[..]\n-    }\n-\n-    /// Retrieve the name of the meta item, e.g. `foo` in `#[foo]`,\n-    /// `#[foo=\"bar\"]` and `#[foo(bar)]`\n-    fn name(&self) -> InternedString;\n-\n-    /// Gets the string value if self is a MetaItemKind::NameValue variant\n-    /// containing a string, otherwise None.\n-    fn value_str(&self) -> Option<InternedString>;\n-\n-    /// Gets a list of inner meta items from a list MetaItem type.\n-    fn meta_item_list(&self) -> Option<&[NestedMetaItem]>;\n-\n-    /// Indicates if the attribute is a Word.\n-    fn is_word(&self) -> bool;\n-\n-    /// Indicates if the attribute is a Value String.\n-    fn is_value_str(&self) -> bool {\n-        self.value_str().is_some()\n-    }\n-\n-    /// Indicates if the attribute is a Meta-Item List.\n-    fn is_meta_item_list(&self) -> bool {\n-        self.meta_item_list().is_some()\n-    }\n-\n-    fn span(&self) -> Span;\n-}\n-\n-impl AttrMetaMethods for Attribute {\n-    fn check_name(&self, name: &str) -> bool {\n+impl Attribute {\n+    pub fn check_name(&self, name: &str) -> bool {\n         let matches = name == &self.name()[..];\n         if matches {\n             mark_used(self);\n         }\n         matches\n     }\n \n-    fn name(&self) -> InternedString { self.meta().name() }\n+    pub fn name(&self) -> InternedString { self.meta().name() }\n \n-    fn value_str(&self) -> Option<InternedString> {\n+    pub fn value_str(&self) -> Option<InternedString> {\n         self.meta().value_str()\n     }\n \n-    fn meta_item_list(&self) -> Option<&[NestedMetaItem]> {\n+    pub fn meta_item_list(&self) -> Option<&[NestedMetaItem]> {\n         self.meta().meta_item_list()\n     }\n \n-    fn is_word(&self) -> bool { self.meta().is_word() }\n+    pub fn is_word(&self) -> bool { self.meta().is_word() }\n+\n+    pub fn span(&self) -> Span { self.meta().span }\n \n-    fn span(&self) -> Span { self.meta().span }\n+    pub fn is_meta_item_list(&self) -> bool {\n+        self.meta_item_list().is_some()\n+    }\n+\n+    /// Indicates if the attribute is a Value String.\n+    pub fn is_value_str(&self) -> bool {\n+        self.value_str().is_some()\n+    }\n }\n \n-impl AttrMetaMethods for MetaItem {\n-    fn name(&self) -> InternedString {\n+impl MetaItem {\n+    pub fn name(&self) -> InternedString {\n         match self.node {\n             MetaItemKind::Word(ref n) => (*n).clone(),\n             MetaItemKind::NameValue(ref n, _) => (*n).clone(),\n             MetaItemKind::List(ref n, _) => (*n).clone(),\n         }\n     }\n \n-    fn value_str(&self) -> Option<InternedString> {\n+    pub fn value_str(&self) -> Option<InternedString> {\n         match self.node {\n             MetaItemKind::NameValue(_, ref v) => {\n                 match v.node {\n@@ -237,34 +214,33 @@ impl AttrMetaMethods for MetaItem {\n         }\n     }\n \n-    fn meta_item_list(&self) -> Option<&[NestedMetaItem]> {\n+    pub fn meta_item_list(&self) -> Option<&[NestedMetaItem]> {\n         match self.node {\n             MetaItemKind::List(_, ref l) => Some(&l[..]),\n             _ => None\n         }\n     }\n \n-    fn is_word(&self) -> bool {\n+    pub fn is_word(&self) -> bool {\n         match self.node {\n             MetaItemKind::Word(_) => true,\n             _ => false,\n         }\n     }\n \n-    fn span(&self) -> Span { self.span }\n-}\n+    pub fn span(&self) -> Span { self.span }\n+\n+    pub fn check_name(&self, name: &str) -> bool {\n+        name == &self.name()[..]\n+    }\n \n-// Annoying, but required to get test_cfg to work\n-impl AttrMetaMethods for P<MetaItem> {\n-    fn name(&self) -> InternedString { (**self).name() }\n-    fn value_str(&self) -> Option<InternedString> { (**self).value_str() }\n-    fn meta_item_list(&self) -> Option<&[NestedMetaItem]> {\n-        (**self).meta_item_list()\n+    pub fn is_value_str(&self) -> bool {\n+        self.value_str().is_some()\n+    }\n+\n+    pub fn is_meta_item_list(&self) -> bool {\n+        self.meta_item_list().is_some()\n     }\n-    fn is_word(&self) -> bool { (**self).is_word() }\n-    fn is_value_str(&self) -> bool { (**self).is_value_str() }\n-    fn is_meta_item_list(&self) -> bool { (**self).is_meta_item_list() }\n-    fn span(&self) -> Span { (**self).span() }\n }\n \n impl Attribute {\n@@ -424,9 +400,9 @@ pub fn list_contains_name(items: &[NestedMetaItem], name: &str) -> bool {\n     })\n }\n \n-pub fn contains_name<AM: AttrMetaMethods>(metas: &[AM], name: &str) -> bool {\n+pub fn contains_name(attrs: &[Attribute], name: &str) -> bool {\n     debug!(\"attr::contains_name (name={})\", name);\n-    metas.iter().any(|item| {\n+    attrs.iter().any(|item| {\n         debug!(\"  testing: {}\", item.name());\n         item.check_name(name)\n     })"}, {"sha": "ff1ecd443717eb89fcad306d94946d98299ff0d0", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use attr::{AttrMetaMethods, HasAttrs};\n+use attr::HasAttrs;\n use feature_gate::{emit_feature_err, EXPLAIN_STMT_ATTR_SYNTAX, Features, get_features, GateIssue};\n use fold::Folder;\n use {fold, attr};"}, {"sha": "bc0f4de4471fbd484cd53bdffbaf5831a792044f", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -13,7 +13,6 @@ use ast::{MacStmtStyle, Stmt, StmtKind, ItemKind};\n use ast;\n use ext::hygiene::Mark;\n use attr::{self, HasAttrs};\n-use attr::AttrMetaMethods;\n use codemap::{dummy_spanned, ExpnInfo, NameAndSpan, MacroBang, MacroAttribute};\n use syntax_pos::{self, Span, ExpnId};\n use config::StripUnconfigured;"}, {"sha": "cd2705fb7d8e8534041af3c1fd75e74007ac3b11", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -27,7 +27,7 @@ use self::AttributeGate::*;\n \n use abi::Abi;\n use ast::{self, NodeId, PatKind};\n-use attr::{self, AttrMetaMethods};\n+use attr;\n use codemap::CodeMap;\n use syntax_pos::Span;\n use errors::Handler;"}, {"sha": "6f06dd14d8fc75c007a037304a079beed81da825", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -678,7 +678,7 @@ mod tests {\n     use codemap::Spanned;\n     use ast::{self, PatKind};\n     use abi::Abi;\n-    use attr::{first_attr_value_str_by_name, AttrMetaMethods};\n+    use attr::first_attr_value_str_by_name;\n     use parse;\n     use parse::parser::Parser;\n     use parse::token::{str_to_ident};"}, {"sha": "28f1016c51f36656c19165d546398125352ae56b", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -16,7 +16,6 @@ use ast::{SelfKind, RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n use ast::Attribute;\n use util::parser::AssocOp;\n use attr;\n-use attr::AttrMetaMethods;\n use codemap::{self, CodeMap};\n use syntax_pos::{self, BytePos};\n use errors;"}, {"sha": "e3e2457c471c004316cc138723bbe70799acd438", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -19,7 +19,7 @@ use std::iter;\n use std::slice;\n use std::mem;\n use std::vec;\n-use attr::{self, AttrMetaMethods};\n+use attr;\n use syntax_pos::{self, DUMMY_SP, NO_EXPANSION, Span, FileMap, BytePos};\n use std::rc::Rc;\n "}, {"sha": "0d69fc007997fce87e29d60b13a52c2c5ea8508a", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -194,7 +194,6 @@ use std::vec;\n use syntax::abi::Abi;\n use syntax::ast::{self, BinOpKind, EnumDef, Expr, Generics, Ident, PatKind, VariantData};\n use syntax::attr;\n-use syntax::attr::AttrMetaMethods;\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n use syntax::codemap::{self, respan};"}, {"sha": "81085122e875bf47ce8799d51e6478ac171f93aa", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb01bbb263923106b33fdaa140a5fa464426162/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=bfb01bbb263923106b33fdaa140a5fa464426162", "patch": "@@ -11,7 +11,6 @@\n //! The compiler code necessary to implement the `#[derive]` extensions.\n \n use syntax::ast::{self, MetaItem};\n-use syntax::attr::AttrMetaMethods;\n use syntax::ext::base::{Annotatable, ExtCtxt, SyntaxEnv};\n use syntax::ext::base::{MultiDecorator, MultiItemDecorator, MultiModifier};\n use syntax::ext::build::AstBuilder;"}]}