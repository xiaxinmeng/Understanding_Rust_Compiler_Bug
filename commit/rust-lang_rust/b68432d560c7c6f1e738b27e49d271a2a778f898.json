{"sha": "b68432d560c7c6f1e738b27e49d271a2a778f898", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ODQzMmQ1NjBjN2M2ZjFlNzM4YjI3ZTQ5ZDI3MWEyYTc3OGY4OTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-12T17:37:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-12T17:37:12Z"}, "message": "Auto merge of #51521 - Mark-Simulacrum:rollup, r=Mark-Simulacrum\n\nRollup of 3 pull requests\n\nSuccessful merges:\n\n - #51261 (Updated RELEASES.md for 1.27.0)\n - #51502 (Make parse_seq_to_end and parse_path public)\n - #51510 (Long diagnostic for E0538)\n\nFailed merges:", "tree": {"sha": "c5ebacbddbe0d328e88722a91f59fb9c5703b81b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5ebacbddbe0d328e88722a91f59fb9c5703b81b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b68432d560c7c6f1e738b27e49d271a2a778f898", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b68432d560c7c6f1e738b27e49d271a2a778f898", "html_url": "https://github.com/rust-lang/rust/commit/b68432d560c7c6f1e738b27e49d271a2a778f898", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b68432d560c7c6f1e738b27e49d271a2a778f898/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef8cb40c9c03fe60aac47c8736045231633dbdac", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef8cb40c9c03fe60aac47c8736045231633dbdac", "html_url": "https://github.com/rust-lang/rust/commit/ef8cb40c9c03fe60aac47c8736045231633dbdac"}, {"sha": "398e5708918f61a2de74c334d513ea642e930181", "url": "https://api.github.com/repos/rust-lang/rust/commits/398e5708918f61a2de74c334d513ea642e930181", "html_url": "https://github.com/rust-lang/rust/commit/398e5708918f61a2de74c334d513ea642e930181"}], "stats": {"total": 191, "additions": 188, "deletions": 3}, "files": [{"sha": "0fafe95d2c4b90d3ee8e20d1879c2749c5a038c8", "filename": "RELEASES.md", "status": "modified", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/b68432d560c7c6f1e738b27e49d271a2a778f898/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/b68432d560c7c6f1e738b27e49d271a2a778f898/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=b68432d560c7c6f1e738b27e49d271a2a778f898", "patch": "@@ -1,3 +1,157 @@\n+Version 1.27.0 (2018-06-21)\n+==========================\n+\n+Language\n+--------\n+- [Removed 'proc' from the reserved keywords list.][49699] This allows `proc` to\n+  be used as an identifer.\n+- [The dyn syntax is now available.][49968] This syntax is equivalent to the\n+  bare `Trait` syntax, and should make it clearer when being used in tandem with\n+  `impl Trait`. Since it is equivalent to the following syntax:\n+  `&Trait == &dyn Trait`, `&mut Trait == &mut dyn Trait`, and\n+  `Box<Trait> == Box<dyn Trait>`.\n+- [Attributes on generic parameters such as types and lifetimes are\n+  now stable.][48851] e.g.\n+  `fn foo<#[lifetime_attr] 'a, #[type_attr] T: 'a>() {}`\n+- [The `#[must_use]` attribute can now also be used on functions as well as\n+  types.][48925] It provides a lint that by default warns users when the\n+  value returned by a function has not been used.\n+\n+Compiler\n+--------\n+- [Added the `armv5te-unknown-linux-musl` target.][50423]\n+\n+Libraries\n+---------\n+- [SIMD (Single Instruction Multiple Data) on x86/x86_64 is now stable.][49664]\n+  This includes [`arch::x86`] & [`arch::x86_64`] modules which contain\n+  SIMD intrinsics, a new macro called `is_x86_feature_detected!`, the\n+  `#[target_feature(enable=\"\")]` attribute, and adding `target_feature = \"\"` to\n+  the `cfg` attribute.\n+- [A lot of methods for `[u8]`, `f32`, and `f64` previously only available in\n+  std are now available in core.][49896]\n+- [The generic `Rhs` type parameter on `ops::{Shl, ShlAssign, Shr}` now defaults\n+  to `Self`.][49630]\n+- [`std::str::replace` now has the `#[must_use]` attribute][50177] to clarify\n+  that the operation isn't done in place.\n+- [`Clone::clone`, `Iterator::collect`, and `ToOwned::to_owned` now have\n+  the `#[must_use]` attribute][49533] to warn about unused potentially\n+  expensive allocations.\n+\n+Stabilized APIs\n+---------------\n+- [`DoubleEndedIterator::rfind`]\n+- [`DoubleEndedIterator::rfold`]\n+- [`DoubleEndedIterator::try_rfold`]\n+- [`Duration::from_micros`]\n+- [`Duration::from_nanos`]\n+- [`Duration::subsec_micros`]\n+- [`Duration::subsec_millis`]\n+- [`HashMap::remove_entry`]\n+- [`Iterator::try_fold`]\n+- [`Iterator::try_for_each`]\n+- [`NonNull::cast`]\n+- [`Option::filter`]\n+- [`String::replace_range`]\n+- [`Take::set_limit`]\n+- [`hint::unreachable_unchecked`]\n+- [`os::unix::process::parent_id`]\n+- [`process::id`]\n+- [`ptr::swap_nonoverlapping`]\n+- [`slice::rsplit_mut`]\n+- [`slice::rsplit`]\n+- [`slice::swap_with_slice`]\n+\n+Cargo\n+-----\n+- [`cargo-metadata` now includes `authors`, `categories`, `keywords`,\n+  `readme`, and `repository` fields.][cargo/5386]\n+- [Added the `--target-dir` optional argument.][cargo/5393] This allows you to specify\n+  a different directory than `target` for placing compilation artifacts.\n+- [Cargo will be adding automatic target inference for binaries, benchmarks,\n+  examples, and tests in the Rust 2018 edition.][cargo/5335] If your project specifies\n+  specific targets e.g. using `[[bin]]` and have other binaries in locations\n+  where cargo would infer a binary, Cargo will produce a warning. You can\n+  disable this feature ahead of time by setting any of the following `autobins`,\n+  `autobenches`, `autoexamples`, `autotests` to false.\n+- [Cargo will now cache compiler information.][cargo/5359] This can be disabled by\n+  setting `CARGO_CACHE_RUSTC_INFO=0` in your environment.\n+\n+Misc\n+----\n+- [Added \u201cThe Rustc book\u201d into the official documentation.][49707]\n+  [\u201cThe Rustc book\u201d] documents and teaches how to use the rustc compiler.\n+- [All books available on `doc.rust-lang.org` are now searchable.][49623]\n+\n+Compatibility Notes\n+-------------------\n+- [Calling a `CharExt` or `StrExt` method directly on core will no longer\n+  work.][49896] e.g. `::core::prelude::v1::StrExt::is_empty(\"\")` will not\n+  compile, `\"\".is_empty()` will still compile.\n+- [`Debug` output on `atomic::{AtomicBool, AtomicIsize, AtomicPtr, AtomicUsize}`\n+  will only print the inner type.][48553] e.g.\n+  `print!(\"{:?}\", AtomicBool::new(true))` will print `true`\n+  not `AtomicBool(true)`.\n+- [`?` can no longer be a separator in macros.][49719] e.g. the following will\n+  no longer compile.\n+  ```rust\n+  macro_rules! barplus {\n+      ($(a)?+) => {}\n+  }\n+  ```\n+- [The maximum number for `repr(align(N))` is now 2\u00b2\u2079.][50378] Previously you\n+  could enter higher numbers but they were not supported by LLVM. Up to 512MB\n+  alignment should cover all use cases.\n+\n+[48553]: https://github.com/rust-lang/rust/pull/48553/\n+[48851]: https://github.com/rust-lang/rust/pull/48851/\n+[48925]: https://github.com/rust-lang/rust/pull/48925/\n+[49533]: https://github.com/rust-lang/rust/pull/49533/\n+[49623]: https://github.com/rust-lang/rust/pull/49623/\n+[49630]: https://github.com/rust-lang/rust/pull/49630/\n+[49664]: https://github.com/rust-lang/rust/pull/49664/\n+[49699]: https://github.com/rust-lang/rust/pull/49699/\n+[49707]: https://github.com/rust-lang/rust/pull/49707/\n+[49719]: https://github.com/rust-lang/rust/pull/49719/\n+[49896]: https://github.com/rust-lang/rust/pull/49896/\n+[49968]: https://github.com/rust-lang/rust/pull/49968/\n+[50177]: https://github.com/rust-lang/rust/pull/50177/\n+[50378]: https://github.com/rust-lang/rust/pull/50378/\n+[50398]: https://github.com/rust-lang/rust/pull/50398/\n+[50423]: https://github.com/rust-lang/rust/pull/50423/\n+[cargo/5203]: https://github.com/rust-lang/cargo/pull/5203/\n+[cargo/5335]: https://github.com/rust-lang/cargo/pull/5335/\n+[cargo/5359]: https://github.com/rust-lang/cargo/pull/5359/\n+[cargo/5386]: https://github.com/rust-lang/cargo/pull/5386/\n+[cargo/5393]: https://github.com/rust-lang/cargo/pull/5393/\n+[`DoubleEndedIterator::rfind`]: https://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html#method.rfind\n+[`DoubleEndedIterator::rfold`]: https://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html#method.rfold\n+[`DoubleEndedIterator::try_rfold`]: https://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html#method.try_rfold\n+[`Duration::from_micros`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.from_micros\n+[`Duration::from_nanos`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.from_nanos\n+[`Duration::subsec_micros`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.subsec_micros\n+[`Duration::subsec_millis`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.subsec_millis\n+[`HashMap::remove_entry`]: https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.remove_entry\n+[`Iterator::try_fold`]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.try_fold\n+[`Iterator::try_for_each`]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.try_for_each\n+[`NonNull::cast`]: https://doc.rust-lang.org/std/ptr/struct.NonNull.html#method.cast\n+[`Option::filter`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.filter\n+[`String::replace_range`]: https://doc.rust-lang.org/std/string/struct.String.html#method.replace_range\n+[`Take::set_limit`]: https://doc.rust-lang.org/std/io/struct.Take.html#method.set_limit\n+[`slice::rsplit_mut`]: https://doc.rust-lang.org/std/primitive.slice.html#method.rsplit_mut\n+[`slice::rsplit`]: https://doc.rust-lang.org/std/primitive.slice.html#method.rsplit\n+[`slice::swap_with_slice`]: https://doc.rust-lang.org/std/primitive.slice.html#method.swap_with_slice\n+[`arch::x86_64`]: https://doc.rust-lang.org/std/arch/x86_64/index.html\n+[`arch::x86`]: https://doc.rust-lang.org/std/arch/x86/index.html\n+[`fs::read`]:\n+[`fs::write`]:\n+[`hint::unreachable_unchecked`]: https://doc.rust-lang.org/std/hint/fn.unreachable_unchecked.html\n+[`os::unix::process::parent_id`]: https://doc.rust-lang.org/std/os/unix/process/fn.parent_id.html\n+[`ptr::swap_nonoverlapping`]: https://doc.rust-lang.org/std/ptr/fn.swap_nonoverlapping.html\n+[`process::id`]: https://doc.rust-lang.org/std/process/fn.id.html\n+[\u201cThe Rustc book\u201d]: https://doc.rust-lang.org/rustc\n+\n+\n Version 1.26.2 (2018-06-05)\n ==========================\n \n@@ -8,6 +162,7 @@ Compatibility Notes\n \n [51117]: https://github.com/rust-lang/rust/issues/51117\n \n+\n Version 1.26.1 (2018-05-29)\n ==========================\n \n@@ -17,6 +172,7 @@ Tools\n - [RLS now works on Windows][50646]\n - [Rustfmt stopped badly formatting text in some cases][rustfmt/2695]\n \n+\n Compatibility Notes\n --------\n "}, {"sha": "ab8317bfa027ea5b9b22fd04300985c8b92c47a2", "filename": "src/libsyntax/diagnostic_list.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b68432d560c7c6f1e738b27e49d271a2a778f898/src%2Flibsyntax%2Fdiagnostic_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b68432d560c7c6f1e738b27e49d271a2a778f898/src%2Flibsyntax%2Fdiagnostic_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic_list.rs?ref=b68432d560c7c6f1e738b27e49d271a2a778f898", "patch": "@@ -93,6 +93,36 @@ For more information about the cfg attribute, read:\n https://doc.rust-lang.org/reference.html#conditional-compilation\n \"##,\n \n+E0538: r##\"\n+Attribute contains same meta item more than once.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0538\n+#[deprecated(\n+    since=\"1.0.0\",\n+    note=\"First deprecation note.\",\n+    note=\"Second deprecation note.\" // error: multiple same meta item\n+)]\n+fn deprecated_function() {}\n+```\n+\n+Meta items are the key-value pairs inside of an attribute. Each key may only be\n+used once in each attribute.\n+\n+To fix the problem, remove all but one of the meta items with the same key.\n+\n+Example:\n+\n+```\n+#[deprecated(\n+    since=\"1.0.0\",\n+    note=\"First deprecation note.\"\n+)]\n+fn deprecated_function() {}\n+```\n+\"##,\n+\n E0541: r##\"\n An unknown meta item was used.\n \n@@ -347,7 +377,6 @@ and likely to change in the future.\n }\n \n register_diagnostics! {\n-    E0538, // multiple [same] items\n     E0539, // incorrect meta item\n     E0540, // multiple rustc_deprecated attributes\n     E0542, // missing 'since'"}, {"sha": "e1f920c16fd395f6d2b2f6960d26d05f15935fc6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b68432d560c7c6f1e738b27e49d271a2a778f898/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b68432d560c7c6f1e738b27e49d271a2a778f898/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b68432d560c7c6f1e738b27e49d271a2a778f898", "patch": "@@ -1022,7 +1022,7 @@ impl<'a> Parser<'a> {\n     /// Parse a sequence, including the closing delimiter. The function\n     /// f must consume tokens until reaching the next separator or\n     /// closing bracket.\n-    crate fn parse_seq_to_end<T, F>(&mut self,\n+    pub fn parse_seq_to_end<T, F>(&mut self,\n                                   ket: &token::Token,\n                                   sep: SeqSep,\n                                   f: F)\n@@ -1886,7 +1886,7 @@ impl<'a> Parser<'a> {\n     /// `a::b::C::<D>` (with disambiguator)\n     /// `Fn(Args)` (without disambiguator)\n     /// `Fn::(Args)` (with disambiguator)\n-    crate fn parse_path(&mut self, style: PathStyle) -> PResult<'a, ast::Path> {\n+    pub fn parse_path(&mut self, style: PathStyle) -> PResult<'a, ast::Path> {\n         self.parse_path_common(style, true)\n     }\n "}]}