{"sha": "9a5f7b1eae10482d5d314c14db25f5abd6533bbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNWY3YjFlYWUxMDQ4MmQ1ZDMxNGMxNGRiMjVmNWFiZDY1MzNiYmU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-15T22:22:54Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-15T22:28:48Z"}, "message": "Move const generic error from lowering to collect\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "b4b92079f6dd109c1f696d3586d663ef00b74b7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4b92079f6dd109c1f696d3586d663ef00b74b7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a5f7b1eae10482d5d314c14db25f5abd6533bbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a5f7b1eae10482d5d314c14db25f5abd6533bbe", "html_url": "https://github.com/rust-lang/rust/commit/9a5f7b1eae10482d5d314c14db25f5abd6533bbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a5f7b1eae10482d5d314c14db25f5abd6533bbe/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d44030d8ec6245edabdbe23a69be21bffb51eb11", "url": "https://api.github.com/repos/rust-lang/rust/commits/d44030d8ec6245edabdbe23a69be21bffb51eb11", "html_url": "https://github.com/rust-lang/rust/commit/d44030d8ec6245edabdbe23a69be21bffb51eb11"}], "stats": {"total": 44, "additions": 28, "deletions": 16}, "files": [{"sha": "52c3eb26d61805eaa6406b4d32b04bcb834f7218", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9a5f7b1eae10482d5d314c14db25f5abd6533bbe/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5f7b1eae10482d5d314c14db25f5abd6533bbe/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=9a5f7b1eae10482d5d314c14db25f5abd6533bbe", "patch": "@@ -36,7 +36,7 @@ use crate::hir::HirVec;\n use crate::hir::map::{DefKey, DefPathData, Definitions};\n use crate::hir::def_id::{DefId, DefIndex, DefIndexAddressSpace, CRATE_DEF_INDEX};\n use crate::hir::def::{Def, PathResolution, PerNS};\n-use crate::hir::GenericArg;\n+use crate::hir::{GenericArg, ConstArg};\n use crate::lint::builtin::{self, PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n                     ELIDED_LIFETIMES_IN_PATHS};\n use crate::middle::cstore::CrateStore;\n@@ -1172,13 +1172,10 @@ impl<'a> LoweringContext<'a> {\n             ast::GenericArg::Lifetime(lt) => GenericArg::Lifetime(self.lower_lifetime(&lt)),\n             ast::GenericArg::Type(ty) => GenericArg::Type(self.lower_ty_direct(&ty, itctx)),\n             ast::GenericArg::Const(ct) => {\n-                // FIXME(const_generics): const generics are not yet defined in the HIR.\n-                self.sess.struct_span_err(\n-                    ct.value.span,\n-                    \"const generics in any position are currently unsupported\",\n-                ).emit();\n-                self.sess.abort_if_errors();\n-                bug!();\n+                GenericArg::Const(ConstArg {\n+                    value: self.lower_anon_const(&ct),\n+                    span: ct.value.span,\n+                })\n             }\n         }\n     }\n@@ -2520,14 +2517,10 @@ impl<'a> LoweringContext<'a> {\n \n                 (hir::ParamName::Plain(ident), kind)\n             }\n-            GenericParamKind::Const { .. } => {\n-                // FIXME(const_generics): const generics are not yet defined in the HIR.\n-                self.sess.struct_span_err(\n-                    param.ident.span,\n-                    \"const generics in any position are currently unsupported\",\n-                ).emit();\n-                self.sess.abort_if_errors();\n-                bug!();\n+            GenericParamKind::Const { ref ty } => {\n+                (hir::ParamName::Plain(param.ident), hir::GenericParamKind::Const {\n+                    ty: self.lower_ty(&ty, ImplTraitContext::disallowed()),\n+                })\n             }\n         };\n "}, {"sha": "db508a5772689152d27338bf7dc422b0d2fbb88b", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9a5f7b1eae10482d5d314c14db25f5abd6533bbe/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5f7b1eae10482d5d314c14db25f5abd6533bbe/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=9a5f7b1eae10482d5d314c14db25f5abd6533bbe", "patch": "@@ -132,6 +132,10 @@ impl<'a, 'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'a, 'tcx> {\n                     self.tcx.type_of(def_id);\n                 }\n                 hir::GenericParamKind::Type { .. } => {}\n+                hir::GenericParamKind::Const { .. } => {\n+                    let def_id = self.tcx.hir().local_def_id(param.id);\n+                    self.tcx.type_of(def_id);\n+                }\n             }\n         }\n         intravisit::walk_generics(self, generics);\n@@ -1041,6 +1045,21 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty\n                     i += 1;\n                     Some(ty_param)\n                 }\n+                GenericParamKind::Const { .. } => {\n+                    if param.name.ident().name == keywords::SelfUpper.name() {\n+                        span_bug!(\n+                            param.span,\n+                            \"`Self` should not be the name of a regular parameter\",\n+                        );\n+                    }\n+\n+                    tcx.sess.struct_span_err(\n+                        param.span,\n+                        \"const generics in any position are currently unsupported\",\n+                    ).emit();\n+                    tcx.sess.abort_if_errors();\n+                    bug!();\n+                }\n                 _ => None,\n             }),\n     );"}]}