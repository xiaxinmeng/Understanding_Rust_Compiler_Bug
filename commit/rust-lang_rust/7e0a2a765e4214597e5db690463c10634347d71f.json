{"sha": "7e0a2a765e4214597e5db690463c10634347d71f", "node_id": "C_kwDOAAsO6NoAKDdlMGEyYTc2NWU0MjE0NTk3ZTVkYjY5MDQ2M2MxMDYzNDM0N2Q3MWY", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-02-27T11:07:38Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-02-27T11:07:38Z"}, "message": "Correctly generate links in the sidebar for impls", "tree": {"sha": "37c72b4647d824549438bc3cdedd87b689b7f81f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37c72b4647d824549438bc3cdedd87b689b7f81f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e0a2a765e4214597e5db690463c10634347d71f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e0a2a765e4214597e5db690463c10634347d71f", "html_url": "https://github.com/rust-lang/rust/commit/7e0a2a765e4214597e5db690463c10634347d71f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e0a2a765e4214597e5db690463c10634347d71f/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8967b0d52a2ba5f0c9da0da03e78ccba5534e4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8967b0d52a2ba5f0c9da0da03e78ccba5534e4a", "html_url": "https://github.com/rust-lang/rust/commit/b8967b0d52a2ba5f0c9da0da03e78ccba5534e4a"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "3c1737c5e3f5f72df730496e3269340e73034b01", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7e0a2a765e4214597e5db690463c10634347d71f/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0a2a765e4214597e5db690463c10634347d71f/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=7e0a2a765e4214597e5db690463c10634347d71f", "patch": "@@ -74,7 +74,7 @@ use crate::html::format::{\n     PrintWithSpace,\n };\n use crate::html::highlight;\n-use crate::html::markdown::{HeadingOffset, Markdown, MarkdownHtml, MarkdownSummaryLine};\n+use crate::html::markdown::{HeadingOffset, IdMap, Markdown, MarkdownHtml, MarkdownSummaryLine};\n use crate::html::sources;\n use crate::scrape_examples::{CallData, CallLocation};\n use crate::try_none;\n@@ -1950,8 +1950,10 @@ fn small_url_encode(s: String) -> String {\n fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n     let did = it.def_id.expect_def_id();\n     let cache = cx.cache();\n+\n     if let Some(v) = cache.impls.get(&did) {\n         let mut used_links = FxHashSet::default();\n+        let mut id_map = IdMap::new();\n \n         {\n             let used_links_bor = &mut used_links;\n@@ -1992,7 +1994,7 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n                 sidebar_deref_methods(cx, out, impl_, v, &mut derefs);\n             }\n \n-            let format_impls = |impls: Vec<&Impl>| {\n+            let format_impls = |impls: Vec<&Impl>, id_map: &mut IdMap| {\n                 let mut links = FxHashSet::default();\n \n                 let mut ret = impls\n@@ -2001,13 +2003,14 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n                         if let Some(ref i) = it.inner_impl().trait_ {\n                             let i_display = format!(\"{:#}\", i.print(cx));\n                             let out = Escape(&i_display);\n-                            let encoded = small_url_encode(format!(\"{:#}\", i.print(cx)));\n+                            let encoded =\n+                                id_map.derive(small_url_encode(format!(\"impl-{:#}\", i.print(cx))));\n                             let prefix = match it.inner_impl().polarity {\n                                 ty::ImplPolarity::Positive | ty::ImplPolarity::Reservation => \"\",\n                                 ty::ImplPolarity::Negative => \"!\",\n                             };\n                             let generated =\n-                                format!(\"<a href=\\\"#impl-{}\\\">{}{}</a>\", encoded, prefix, out);\n+                                format!(\"<a href=\\\"#{}\\\">{}{}</a>\", encoded, prefix, out);\n                             if links.insert(generated.clone()) { Some(generated) } else { None }\n                         } else {\n                             None\n@@ -2023,9 +2026,9 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n             let (blanket_impl, concrete): (Vec<&Impl>, Vec<&Impl>) =\n                 concrete.into_iter().partition::<Vec<_>, _>(|i| i.inner_impl().kind.is_blanket());\n \n-            let concrete_format = format_impls(concrete);\n-            let synthetic_format = format_impls(synthetic);\n-            let blanket_format = format_impls(blanket_impl);\n+            let concrete_format = format_impls(concrete, &mut id_map);\n+            let synthetic_format = format_impls(synthetic, &mut id_map);\n+            let blanket_format = format_impls(blanket_impl, &mut id_map);\n \n             if !concrete_format.is_empty() {\n                 print_sidebar_block("}]}