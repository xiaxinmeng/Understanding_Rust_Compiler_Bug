{"sha": "e4ef0e5df9a3aeee2b6af8b4c2a567e7d84cc4b1", "node_id": "C_kwDOAAsO6NoAKGU0ZWYwZTVkZjlhM2FlZWUyYjZhZjhiNGMyYTU2N2U3ZDg0Y2M0YjE", "commit": {"author": {"name": "Justin Mott", "email": "justinmmott@gmail.com", "date": "2022-10-21T17:28:59Z"}, "committer": {"name": "Justin Mott", "email": "justinmmott@gmail.com", "date": "2022-10-21T17:28:59Z"}, "message": "addressed https://github.com/rust-lang/rust-analyzer/issues/12536", "tree": {"sha": "daa500f1eb43ee7ce4cf286a7f1fac3d576d035d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/daa500f1eb43ee7ce4cf286a7f1fac3d576d035d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4ef0e5df9a3aeee2b6af8b4c2a567e7d84cc4b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4ef0e5df9a3aeee2b6af8b4c2a567e7d84cc4b1", "html_url": "https://github.com/rust-lang/rust/commit/e4ef0e5df9a3aeee2b6af8b4c2a567e7d84cc4b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4ef0e5df9a3aeee2b6af8b4c2a567e7d84cc4b1/comments", "author": {"login": "justinmmott", "id": 24257119, "node_id": "MDQ6VXNlcjI0MjU3MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/24257119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/justinmmott", "html_url": "https://github.com/justinmmott", "followers_url": "https://api.github.com/users/justinmmott/followers", "following_url": "https://api.github.com/users/justinmmott/following{/other_user}", "gists_url": "https://api.github.com/users/justinmmott/gists{/gist_id}", "starred_url": "https://api.github.com/users/justinmmott/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/justinmmott/subscriptions", "organizations_url": "https://api.github.com/users/justinmmott/orgs", "repos_url": "https://api.github.com/users/justinmmott/repos", "events_url": "https://api.github.com/users/justinmmott/events{/privacy}", "received_events_url": "https://api.github.com/users/justinmmott/received_events", "type": "User", "site_admin": false}, "committer": {"login": "justinmmott", "id": 24257119, "node_id": "MDQ6VXNlcjI0MjU3MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/24257119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/justinmmott", "html_url": "https://github.com/justinmmott", "followers_url": "https://api.github.com/users/justinmmott/followers", "following_url": "https://api.github.com/users/justinmmott/following{/other_user}", "gists_url": "https://api.github.com/users/justinmmott/gists{/gist_id}", "starred_url": "https://api.github.com/users/justinmmott/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/justinmmott/subscriptions", "organizations_url": "https://api.github.com/users/justinmmott/orgs", "repos_url": "https://api.github.com/users/justinmmott/repos", "events_url": "https://api.github.com/users/justinmmott/events{/privacy}", "received_events_url": "https://api.github.com/users/justinmmott/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ee23f4f0aebf344089bfc201f1dbf641534cf94", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ee23f4f0aebf344089bfc201f1dbf641534cf94", "html_url": "https://github.com/rust-lang/rust/commit/8ee23f4f0aebf344089bfc201f1dbf641534cf94"}], "stats": {"total": 86, "additions": 74, "deletions": 12}, "files": [{"sha": "c546ee45d964f98844006ed814559d3209c0cb0e", "filename": "crates/ide-assists/src/handlers/inline_call.rs", "status": "modified", "additions": 74, "deletions": 12, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/e4ef0e5df9a3aeee2b6af8b4c2a567e7d84cc4b1/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ef0e5df9a3aeee2b6af8b4c2a567e7d84cc4b1/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=e4ef0e5df9a3aeee2b6af8b4c2a567e7d84cc4b1", "patch": "@@ -1,3 +1,5 @@\n+use std::collections::BTreeSet;\n+\n use ast::make;\n use either::Either;\n use hir::{db::HirDatabase, PathResolution, Semantics, TypeInfo};\n@@ -373,8 +375,44 @@ fn inline(\n                 })\n         }\n     }\n+\n+    let mut func_let_vars: BTreeSet<String> = BTreeSet::new();\n+\n+    // grab all of the local variable declarations in the function\n+    for stmt in fn_body.statements() {\n+        if let Some(let_stmt) = ast::LetStmt::cast(stmt.syntax().to_owned()) {\n+            for has_token in let_stmt.syntax().children_with_tokens() {\n+                if let Some(node) = has_token.as_node() {\n+                    if let Some(ident_pat) = ast::IdentPat::cast(node.to_owned()) {\n+                        func_let_vars.insert(ident_pat.syntax().text().to_string());\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     // Inline parameter expressions or generate `let` statements depending on whether inlining works or not.\n     for ((pat, param_ty, _), usages, expr) in izip!(params, param_use_nodes, arguments).rev() {\n+        // izip confuses RA due to our lack of hygiene info currently losing us type info causing incorrect errors\n+        let usages: &[ast::PathExpr] = &*usages;\n+        let expr: &ast::Expr = expr;\n+\n+        let insert_let_stmt = || {\n+            let ty = sema.type_of_expr(expr).filter(TypeInfo::has_adjustment).and(param_ty.clone());\n+            if let Some(stmt_list) = body.stmt_list() {\n+                stmt_list.push_front(\n+                    make::let_stmt(pat.clone(), ty, Some(expr.clone())).clone_for_update().into(),\n+                )\n+            }\n+        };\n+\n+        // check if there is a local var in the function that conflicts with parameter\n+        // if it does then emit a let statement and continue\n+        if func_let_vars.contains(&expr.syntax().text().to_string()) {\n+            insert_let_stmt();\n+            continue;\n+        }\n+\n         let inline_direct = |usage, replacement: &ast::Expr| {\n             if let Some(field) = path_expr_as_record_field(usage) {\n                 cov_mark::hit!(inline_call_inline_direct_field);\n@@ -383,9 +421,7 @@ fn inline(\n                 ted::replace(usage.syntax(), &replacement.syntax().clone_for_update());\n             }\n         };\n-        // izip confuses RA due to our lack of hygiene info currently losing us type info causing incorrect errors\n-        let usages: &[ast::PathExpr] = &*usages;\n-        let expr: &ast::Expr = expr;\n+\n         match usages {\n             // inline single use closure arguments\n             [usage]\n@@ -408,18 +444,11 @@ fn inline(\n             }\n             // can't inline, emit a let statement\n             _ => {\n-                let ty =\n-                    sema.type_of_expr(expr).filter(TypeInfo::has_adjustment).and(param_ty.clone());\n-                if let Some(stmt_list) = body.stmt_list() {\n-                    stmt_list.push_front(\n-                        make::let_stmt(pat.clone(), ty, Some(expr.clone()))\n-                            .clone_for_update()\n-                            .into(),\n-                    )\n-                }\n+                insert_let_stmt();\n             }\n         }\n     }\n+\n     if let Some(generic_arg_list) = generic_arg_list.clone() {\n         if let Some((target, source)) = &sema.scope(node.syntax()).zip(sema.scope(fn_body.syntax()))\n         {\n@@ -1256,4 +1285,37 @@ impl A {\n \"#,\n         )\n     }\n+\n+    #[test]\n+    fn local_variable_shadowing_callers_argument() {\n+        check_assist(\n+            inline_call,\n+            r#\"\n+fn foo(bar: u32, baz: u32) -> u32 {\n+    let a = 1;\n+    bar * baz * a * 6\n+}\n+fn main() {\n+    let a = 7;\n+    let b = 1;\n+    let res = foo$0(a, b);\n+}\n+\"#,\n+            r#\"\n+fn foo(bar: u32, baz: u32) -> u32 {\n+    let a = 1;\n+    bar * baz * a * 6\n+}\n+fn main() {\n+    let a = 7;\n+    let b = 1;\n+    let res = {\n+        let bar = a;\n+        let a = 1;\n+        bar * b * a * 6\n+    };\n+}\n+\"#,\n+        );\n+    }\n }"}]}