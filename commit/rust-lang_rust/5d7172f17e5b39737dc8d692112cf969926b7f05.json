{"sha": "5d7172f17e5b39737dc8d692112cf969926b7f05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNzE3MmYxN2U1YjM5NzM3ZGM4ZDY5MjExMmNmOTY5OTI2YjdmMDU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-26T15:30:27Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-26T15:30:27Z"}, "message": "Simplify inner item lowering", "tree": {"sha": "33fa4a9946ee4700884cc129817851344df7f97e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33fa4a9946ee4700884cc129817851344df7f97e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d7172f17e5b39737dc8d692112cf969926b7f05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d7172f17e5b39737dc8d692112cf969926b7f05", "html_url": "https://github.com/rust-lang/rust/commit/5d7172f17e5b39737dc8d692112cf969926b7f05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d7172f17e5b39737dc8d692112cf969926b7f05/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f60b4f2a32190830215defe6cf81836f34d99c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f60b4f2a32190830215defe6cf81836f34d99c9", "html_url": "https://github.com/rust-lang/rust/commit/4f60b4f2a32190830215defe6cf81836f34d99c9"}], "stats": {"total": 91, "additions": 30, "deletions": 61}, "files": [{"sha": "2e433528d175e32831ad8dc6a917d21172449a5b", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 30, "deletions": 61, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/5d7172f17e5b39737dc8d692112cf969926b7f05/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d7172f17e5b39737dc8d692112cf969926b7f05/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=5d7172f17e5b39737dc8d692112cf969926b7f05", "patch": "@@ -5,7 +5,7 @@ use either::Either;\n use hir_expand::{\n     hygiene::Hygiene,\n     name::{name, AsName, Name},\n-    AstId, HirFileId, MacroDefId, MacroDefKind,\n+    HirFileId, MacroDefId, MacroDefKind,\n };\n use ra_arena::Arena;\n use ra_syntax::{\n@@ -27,7 +27,7 @@ use crate::{\n         LogicOp, MatchArm, Ordering, Pat, PatId, RecordFieldPat, RecordLitField, Statement,\n     },\n     item_scope::BuiltinShadowMode,\n-    item_tree::{FileItemTreeId, ItemTree, ItemTreeNode},\n+    item_tree::{ItemTree, ItemTreeId, ItemTreeNode},\n     path::{GenericArgs, Path},\n     type_ref::{Mutability, Rawness, TypeRef},\n     AdtId, ConstLoc, ContainerId, DefWithBodyId, EnumLoc, FunctionLoc, Intern, ModuleDefId,\n@@ -37,7 +37,7 @@ use crate::{\n use super::{ExprSource, PatSource};\n use ast::AstChildren;\n use rustc_hash::FxHashMap;\n-use std::sync::Arc;\n+use std::{any::type_name, sync::Arc};\n \n pub(crate) struct LowerCtx {\n     hygiene: Hygiene,\n@@ -561,17 +561,23 @@ impl ExprCollector<'_> {\n         }\n     }\n \n-    fn find_inner_item<S: ItemTreeNode>(&self, id: AstId<ast::ModuleItem>) -> FileItemTreeId<S> {\n+    fn find_inner_item<N: ItemTreeNode>(&self, ast: &N::Source) -> ItemTreeId<N> {\n+        let id = self.expander.ast_id(ast);\n         let tree = &self.item_trees[&id.file_id];\n \n         // FIXME: This probably breaks with `use` items, since they produce multiple item tree nodes\n \n         // Root file (non-macro).\n-        tree.all_inner_items()\n+        let item_tree_id = tree\n+            .all_inner_items()\n             .chain(tree.top_level_items().iter().copied())\n-            .filter_map(|mod_item| mod_item.downcast::<S>())\n-            .find(|tree_id| tree[*tree_id].ast_id().upcast() == id.value)\n-            .unwrap_or_else(|| panic!(\"couldn't find inner item for {:?}\", id))\n+            .filter_map(|mod_item| mod_item.downcast::<N>())\n+            .find(|tree_id| tree[*tree_id].ast_id().upcast() == id.value.upcast())\n+            .unwrap_or_else(|| {\n+                panic!(\"couldn't find inner {} item for {:?}\", type_name::<N>(), id)\n+            });\n+\n+        ItemTreeId::new(id.file_id, item_tree_id)\n     }\n \n     fn collect_expr_opt(&mut self, expr: Option<ast::Expr>) -> ExprId {\n@@ -611,82 +617,45 @@ impl ExprCollector<'_> {\n             .filter_map(|item| {\n                 let (def, name): (ModuleDefId, Option<ast::Name>) = match item {\n                     ast::ModuleItem::FnDef(def) => {\n-                        let ast_id = self.expander.ast_id(&def);\n-                        let id = self.find_inner_item(ast_id.map(|id| id.upcast()));\n+                        let id = self.find_inner_item(&def);\n                         (\n-                            FunctionLoc { container: container.into(), id: ast_id.with_value(id) }\n-                                .intern(self.db)\n-                                .into(),\n+                            FunctionLoc { container: container.into(), id }.intern(self.db).into(),\n                             def.name(),\n                         )\n                     }\n                     ast::ModuleItem::TypeAliasDef(def) => {\n-                        let ast_id = self.expander.ast_id(&def);\n-                        let id = self.find_inner_item(ast_id.map(|id| id.upcast()));\n+                        let id = self.find_inner_item(&def);\n                         (\n-                            TypeAliasLoc { container: container.into(), id: ast_id.with_value(id) }\n-                                .intern(self.db)\n-                                .into(),\n+                            TypeAliasLoc { container: container.into(), id }.intern(self.db).into(),\n                             def.name(),\n                         )\n                     }\n                     ast::ModuleItem::ConstDef(def) => {\n-                        let ast_id = self.expander.ast_id(&def);\n-                        let id = self.find_inner_item(ast_id.map(|id| id.upcast()));\n+                        let id = self.find_inner_item(&def);\n                         (\n-                            ConstLoc { container: container.into(), id: ast_id.with_value(id) }\n-                                .intern(self.db)\n-                                .into(),\n+                            ConstLoc { container: container.into(), id }.intern(self.db).into(),\n                             def.name(),\n                         )\n                     }\n                     ast::ModuleItem::StaticDef(def) => {\n-                        let ast_id = self.expander.ast_id(&def);\n-                        let id = self.find_inner_item(ast_id.map(|id| id.upcast()));\n-                        (\n-                            StaticLoc { container, id: ast_id.with_value(id) }\n-                                .intern(self.db)\n-                                .into(),\n-                            def.name(),\n-                        )\n+                        let id = self.find_inner_item(&def);\n+                        (StaticLoc { container, id }.intern(self.db).into(), def.name())\n                     }\n                     ast::ModuleItem::StructDef(def) => {\n-                        let ast_id = self.expander.ast_id(&def);\n-                        let id = self.find_inner_item(ast_id.map(|id| id.upcast()));\n-                        (\n-                            StructLoc { container, id: ast_id.with_value(id) }\n-                                .intern(self.db)\n-                                .into(),\n-                            def.name(),\n-                        )\n+                        let id = self.find_inner_item(&def);\n+                        (StructLoc { container, id }.intern(self.db).into(), def.name())\n                     }\n                     ast::ModuleItem::EnumDef(def) => {\n-                        let ast_id = self.expander.ast_id(&def);\n-                        let id = self.find_inner_item(ast_id.map(|id| id.upcast()));\n-                        (\n-                            EnumLoc { container, id: ast_id.with_value(id) }.intern(self.db).into(),\n-                            def.name(),\n-                        )\n+                        let id = self.find_inner_item(&def);\n+                        (EnumLoc { container, id }.intern(self.db).into(), def.name())\n                     }\n                     ast::ModuleItem::UnionDef(def) => {\n-                        let ast_id = self.expander.ast_id(&def);\n-                        let id = self.find_inner_item(ast_id.map(|id| id.upcast()));\n-                        (\n-                            UnionLoc { container, id: ast_id.with_value(id) }\n-                                .intern(self.db)\n-                                .into(),\n-                            def.name(),\n-                        )\n+                        let id = self.find_inner_item(&def);\n+                        (UnionLoc { container, id }.intern(self.db).into(), def.name())\n                     }\n                     ast::ModuleItem::TraitDef(def) => {\n-                        let ast_id = self.expander.ast_id(&def);\n-                        let id = self.find_inner_item(ast_id.map(|id| id.upcast()));\n-                        (\n-                            TraitLoc { container, id: ast_id.with_value(id) }\n-                                .intern(self.db)\n-                                .into(),\n-                            def.name(),\n-                        )\n+                        let id = self.find_inner_item(&def);\n+                        (TraitLoc { container, id }.intern(self.db).into(), def.name())\n                     }\n                     ast::ModuleItem::ExternBlock(_) => return None, // FIXME: collect from extern blocks\n                     ast::ModuleItem::ImplDef(_)"}]}