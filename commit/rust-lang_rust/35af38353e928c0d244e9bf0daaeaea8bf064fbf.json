{"sha": "35af38353e928c0d244e9bf0daaeaea8bf064fbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YWYzODM1M2U5MjhjMGQyNDRlOWJmMGRhYWVhZWE4YmYwNjRmYmY=", "commit": {"author": {"name": "jam1garner", "email": "8260240+jam1garner@users.noreply.github.com", "date": "2021-05-27T04:30:55Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-06-14T17:27:24Z"}, "message": "Add UI tests for `future_prelude_collision` lint", "tree": {"sha": "3a7a23f8b22890fb3fc527fc7f5d92b7da38c720", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a7a23f8b22890fb3fc527fc7f5d92b7da38c720"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35af38353e928c0d244e9bf0daaeaea8bf064fbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35af38353e928c0d244e9bf0daaeaea8bf064fbf", "html_url": "https://github.com/rust-lang/rust/commit/35af38353e928c0d244e9bf0daaeaea8bf064fbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35af38353e928c0d244e9bf0daaeaea8bf064fbf/comments", "author": {"login": "jam1garner", "id": 8260240, "node_id": "MDQ6VXNlcjgyNjAyNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8260240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jam1garner", "html_url": "https://github.com/jam1garner", "followers_url": "https://api.github.com/users/jam1garner/followers", "following_url": "https://api.github.com/users/jam1garner/following{/other_user}", "gists_url": "https://api.github.com/users/jam1garner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jam1garner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jam1garner/subscriptions", "organizations_url": "https://api.github.com/users/jam1garner/orgs", "repos_url": "https://api.github.com/users/jam1garner/repos", "events_url": "https://api.github.com/users/jam1garner/events{/privacy}", "received_events_url": "https://api.github.com/users/jam1garner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c341d5b9d7ebf0f2a2000de81fe236ae2f3445b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c341d5b9d7ebf0f2a2000de81fe236ae2f3445b0", "html_url": "https://github.com/rust-lang/rust/commit/c341d5b9d7ebf0f2a2000de81fe236ae2f3445b0"}], "stats": {"total": 144, "additions": 143, "deletions": 1}, "files": [{"sha": "1d9ee4595d10799846096d7a55606c28cb8d8a9a", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35af38353e928c0d244e9bf0daaeaea8bf064fbf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35af38353e928c0d244e9bf0daaeaea8bf064fbf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=35af38353e928c0d244e9bf0daaeaea8bf064fbf", "patch": "@@ -535,7 +535,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             let trait_name = tcx.def_path_str(pick.item.container.assert_trait());\n \n                             let mut lint = lint.build(&format!(\n-                                \"trait method `{}` will become ambiguous in Rust 2021\",\n+                                \"trait-associated function `{}` will become ambiguous in Rust 2021\",\n                                 method_name.name\n                             ));\n "}, {"sha": "06d0bb0153830e4bf382d0fa46fa1454d67ec502", "filename": "src/test/ui/lint/future-prelude-collision.fixed", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/35af38353e928c0d244e9bf0daaeaea8bf064fbf/src%2Ftest%2Fui%2Flint%2Ffuture-prelude-collision.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/35af38353e928c0d244e9bf0daaeaea8bf064fbf/src%2Ftest%2Fui%2Flint%2Ffuture-prelude-collision.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffuture-prelude-collision.fixed?ref=35af38353e928c0d244e9bf0daaeaea8bf064fbf", "patch": "@@ -0,0 +1,57 @@\n+// run-rustfix\n+// edition:2018\n+// check-pass\n+\n+trait TryIntoU32 {\n+    fn try_into(self) -> Result<u32, ()>;\n+}\n+\n+impl TryIntoU32 for u8 {\n+    fn try_into(self) -> Result<u32, ()> {\n+        Ok(self as u32)\n+    }\n+}\n+\n+trait TryFromU8: Sized {\n+    fn try_from(x: u8) -> Result<Self, ()>;\n+}\n+\n+impl TryFromU8 for u32 {\n+    fn try_from(x: u8) -> Result<Self, ()> {\n+        Ok(x as u32)\n+    }\n+}\n+\n+trait FromByteIterator {\n+    fn from_iter<T>(iter: T) -> Self\n+        where T: Iterator<Item = u8>;\n+}\n+\n+impl FromByteIterator for Vec<u8> {\n+    fn from_iter<T>(iter: T) -> Self\n+        where T: Iterator<Item = u8>\n+    {\n+        iter.collect()\n+    }\n+}\n+\n+fn main() {\n+    // test dot-call that will break in 2021 edition\n+    let _: u32 = TryIntoU32::try_into(3u8).unwrap();\n+    //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n+\n+    // test associated function call that will break in 2021 edition\n+    let _ = <u32 as TryFromU8>::try_from(3u8).unwrap();\n+    //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n+\n+    // test reverse turbofish too\n+    let _ = <Vec<u8> as FromByteIterator>::from_iter(vec![1u8, 2, 3, 4, 5, 6].into_iter());\n+    //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n+\n+    // negative testing lint (this line should *not* emit a warning)\n+    let _: u32 = TryFromU8::try_from(3u8).unwrap();\n+\n+    // test type omission\n+    let _: u32 = <_ as TryFromU8>::try_from(3u8).unwrap();\n+    //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n+}"}, {"sha": "61658ac2725da1f0803c45dbe58819d79a6df65b", "filename": "src/test/ui/lint/future-prelude-collision.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/35af38353e928c0d244e9bf0daaeaea8bf064fbf/src%2Ftest%2Fui%2Flint%2Ffuture-prelude-collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35af38353e928c0d244e9bf0daaeaea8bf064fbf/src%2Ftest%2Fui%2Flint%2Ffuture-prelude-collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffuture-prelude-collision.rs?ref=35af38353e928c0d244e9bf0daaeaea8bf064fbf", "patch": "@@ -0,0 +1,57 @@\n+// run-rustfix\n+// edition:2018\n+// check-pass\n+\n+trait TryIntoU32 {\n+    fn try_into(self) -> Result<u32, ()>;\n+}\n+\n+impl TryIntoU32 for u8 {\n+    fn try_into(self) -> Result<u32, ()> {\n+        Ok(self as u32)\n+    }\n+}\n+\n+trait TryFromU8: Sized {\n+    fn try_from(x: u8) -> Result<Self, ()>;\n+}\n+\n+impl TryFromU8 for u32 {\n+    fn try_from(x: u8) -> Result<Self, ()> {\n+        Ok(x as u32)\n+    }\n+}\n+\n+trait FromByteIterator {\n+    fn from_iter<T>(iter: T) -> Self\n+        where T: Iterator<Item = u8>;\n+}\n+\n+impl FromByteIterator for Vec<u8> {\n+    fn from_iter<T>(iter: T) -> Self\n+        where T: Iterator<Item = u8>\n+    {\n+        iter.collect()\n+    }\n+}\n+\n+fn main() {\n+    // test dot-call that will break in 2021 edition\n+    let _: u32 = 3u8.try_into().unwrap();\n+    //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n+\n+    // test associated function call that will break in 2021 edition\n+    let _ = u32::try_from(3u8).unwrap();\n+    //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n+\n+    // test reverse turbofish too\n+    let _ = <Vec<u8>>::from_iter(vec![1u8, 2, 3, 4, 5, 6].into_iter());\n+    //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n+\n+    // negative testing lint (this line should *not* emit a warning)\n+    let _: u32 = TryFromU8::try_from(3u8).unwrap();\n+\n+    // test type omission\n+    let _: u32 = <_>::try_from(3u8).unwrap();\n+    //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n+}"}, {"sha": "79f4f1412d2f05551fad0b9cd0dcce6b096b63e0", "filename": "src/test/ui/lint/future-prelude-collision.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/35af38353e928c0d244e9bf0daaeaea8bf064fbf/src%2Ftest%2Fui%2Flint%2Ffuture-prelude-collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35af38353e928c0d244e9bf0daaeaea8bf064fbf/src%2Ftest%2Fui%2Flint%2Ffuture-prelude-collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffuture-prelude-collision.stderr?ref=35af38353e928c0d244e9bf0daaeaea8bf064fbf", "patch": "@@ -0,0 +1,28 @@\n+warning: trait method `try_into` will become ambiguous in Rust 2021\n+  --> $DIR/future-prelude-collision.rs:40:18\n+   |\n+LL |     let _: u32 = 3u8.try_into().unwrap();\n+   |                  ^^^^^^^^^^^^^^ help: disambiguate the associated function: `TryIntoU32::try_into(3u8)`\n+   |\n+   = note: `#[warn(future_prelude_collision)]` on by default\n+\n+warning: trait-associated function `try_from` will become ambiguous in Rust 2021\n+  --> $DIR/future-prelude-collision.rs:44:13\n+   |\n+LL |     let _ = u32::try_from(3u8).unwrap();\n+   |             ^^^^^^^^^^^^^ help: disambiguate the associated function: `<u32 as TryFromU8>::try_from`\n+\n+warning: trait-associated function `from_iter` will become ambiguous in Rust 2021\n+  --> $DIR/future-prelude-collision.rs:48:13\n+   |\n+LL |     let _ = <Vec<u8>>::from_iter(vec![1u8, 2, 3, 4, 5, 6].into_iter());\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Vec<u8> as FromByteIterator>::from_iter`\n+\n+warning: trait-associated function `try_from` will become ambiguous in Rust 2021\n+  --> $DIR/future-prelude-collision.rs:55:18\n+   |\n+LL |     let _: u32 = <_>::try_from(3u8).unwrap();\n+   |                  ^^^^^^^^^^^^^ help: disambiguate the associated function: `<_ as TryFromU8>::try_from`\n+\n+warning: 4 warnings emitted\n+"}]}