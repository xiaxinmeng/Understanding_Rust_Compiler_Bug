{"sha": "6cf99fa54a51c728abf75f899f4f947673835268", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjZjk5ZmE1NGE1MWM3MjhhYmY3NWY4OTlmNGY5NDc2NzM4MzUyNjg=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-27T00:23:00Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-27T14:04:09Z"}, "message": "std: change fail_unless to assert_eq in json.rs", "tree": {"sha": "4058c5a9935fcdf6338ef4b68fd43532feeaa6a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4058c5a9935fcdf6338ef4b68fd43532feeaa6a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cf99fa54a51c728abf75f899f4f947673835268", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cf99fa54a51c728abf75f899f4f947673835268", "html_url": "https://github.com/rust-lang/rust/commit/6cf99fa54a51c728abf75f899f4f947673835268", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cf99fa54a51c728abf75f899f4f947673835268/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89fc95885fa01621031e678e59bae54472141d0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/89fc95885fa01621031e678e59bae54472141d0f", "html_url": "https://github.com/rust-lang/rust/commit/89fc95885fa01621031e678e59bae54472141d0f"}], "stats": {"total": 261, "additions": 128, "deletions": 133}, "files": [{"sha": "a715f2d90da9f55895eb947ae28d159533e5c3fc", "filename": "src/libstd/json.rs", "status": "modified", "additions": 128, "deletions": 133, "changes": 261, "blob_url": "https://github.com/rust-lang/rust/blob/6cf99fa54a51c728abf75f899f4f947673835268/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cf99fa54a51c728abf75f899f4f947673835268/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=6cf99fa54a51c728abf75f899f4f947673835268", "patch": "@@ -1214,45 +1214,47 @@ mod tests {\n \n     #[test]\n     fn test_write_null() {\n-        fail_unless!(to_str(&Null) == ~\"null\");\n+        assert_eq!(to_str(&Null), ~\"null\");\n     }\n \n     #[test]\n     fn test_write_number() {\n-        fail_unless!(to_str(&Number(3f)) == ~\"3\");\n-        fail_unless!(to_str(&Number(3.1f)) == ~\"3.1\");\n-        fail_unless!(to_str(&Number(-1.5f)) == ~\"-1.5\");\n-        fail_unless!(to_str(&Number(0.5f)) == ~\"0.5\");\n+        assert_eq!(to_str(&Number(3f)), ~\"3\");\n+        assert_eq!(to_str(&Number(3.1f)), ~\"3.1\");\n+        assert_eq!(to_str(&Number(-1.5f)), ~\"-1.5\");\n+        assert_eq!(to_str(&Number(0.5f)), ~\"0.5\");\n     }\n \n     #[test]\n     fn test_write_str() {\n-        fail_unless!(to_str(&String(~\"\")) == ~\"\\\"\\\"\");\n-        fail_unless!(to_str(&String(~\"foo\")) == ~\"\\\"foo\\\"\");\n+        assert_eq!(to_str(&String(~\"\")), ~\"\\\"\\\"\");\n+        assert_eq!(to_str(&String(~\"foo\")), ~\"\\\"foo\\\"\");\n     }\n \n     #[test]\n     fn test_write_bool() {\n-        fail_unless!(to_str(&Boolean(true)) == ~\"true\");\n-        fail_unless!(to_str(&Boolean(false)) == ~\"false\");\n+        assert_eq!(to_str(&Boolean(true)), ~\"true\");\n+        assert_eq!(to_str(&Boolean(false)), ~\"false\");\n     }\n \n     #[test]\n     fn test_write_list() {\n-        fail_unless!(to_str(&List(~[])) == ~\"[]\");\n-        fail_unless!(to_str(&List(~[Boolean(true)])) == ~\"[true]\");\n-        fail_unless!(to_str(&List(~[\n+        assert_eq!(to_str(&List(~[])), ~\"[]\");\n+        assert_eq!(to_str(&List(~[Boolean(true)])), ~\"[true]\");\n+        assert_eq!(to_str(&List(~[\n             Boolean(false),\n             Null,\n             List(~[String(~\"foo\\nbar\"), Number(3.5f)])\n-        ])) == ~\"[false,null,[\\\"foo\\\\nbar\\\",3.5]]\");\n+        ])), ~\"[false,null,[\\\"foo\\\\nbar\\\",3.5]]\");\n     }\n \n     #[test]\n     fn test_write_object() {\n-        fail_unless!(to_str(&mk_object(~[])) == ~\"{}\");\n-        fail_unless!(to_str(&mk_object(~[(~\"a\", Boolean(true))]))\n-            == ~\"{\\\"a\\\":true}\");\n+        assert_eq!(to_str(&mk_object(~[])), ~\"{}\");\n+        assert_eq!(\n+            to_str(&mk_object(~[(~\"a\", Boolean(true))])),\n+            ~\"{\\\"a\\\":true}\"\n+        );\n         let a = mk_object(~[\n             (~\"a\", Boolean(true)),\n             (~\"b\", List(~[\n@@ -1262,256 +1264,249 @@ mod tests {\n         ]);\n         // We can't compare the strings directly because the object fields be\n         // printed in a different order.\n-        let b = result::unwrap(from_str(to_str(&a)));\n-        fail_unless!(a == b);\n+        let b = from_str(to_str(&a)).unwrap();\n+        assert_eq!(a, b);\n     }\n \n     #[test]\n     fn test_write_enum () {\n-        let bw = @io::BytesWriter();\n-        let bww : @io::Writer = (bw as @io::Writer);\n-        let encoder = (@Encoder(bww) as @serialize::Encoder);\n-        do encoder.emit_enum(~\"animal\") {\n-            do encoder.emit_enum_variant (~\"frog\",37,1242) {\n-                // name of frog:\n-                do encoder.emit_enum_variant_arg (0) {\n-                    encoder.emit_owned_str(~\"Henry\")\n-                }\n-                // mass of frog in grams:\n-                do encoder.emit_enum_variant_arg (1) {\n-                    encoder.emit_int(349);\n+        let s = do io::with_str_writer |wr| {\n+            let encoder = &Encoder(wr) as &serialize::Encoder;\n+            do encoder.emit_enum(~\"animal\") {\n+                do encoder.emit_enum_variant(~\"frog\",37,1242) {\n+                    // name of frog:\n+                    do encoder.emit_enum_variant_arg(0) {\n+                        encoder.emit_owned_str(~\"Henry\")\n+                    }\n+                    // mass of frog in grams:\n+                    do encoder.emit_enum_variant_arg(1) {\n+                        encoder.emit_int(349);\n+                    }\n                 }\n             }\n-        }\n-        assert_eq!(str::from_bytes(bw.bytes), ~\"[\\\"frog\\\",[\\\"Henry\\\",349]]\");\n+        };\n+        assert_eq!(s, ~\"[\\\"frog\\\",[\\\"Henry\\\",349]]\");\n     }\n \n     #[test]\n-    fn test_write_some () {\n-        let bw = @io::BytesWriter();\n-        let bww : @io::Writer = (bw as @io::Writer);\n-        let encoder = (@Encoder(bww) as @serialize::Encoder);\n-        do encoder.emit_enum(~\"Option\") {\n-            do encoder.emit_enum_variant (~\"Some\",37,1242) {\n-                do encoder.emit_enum_variant_arg (0) {\n-                    encoder.emit_owned_str(~\"jodhpurs\")\n-                }\n-            }\n-        }\n-        assert_eq!(str::from_bytes(bw.bytes), ~\"\\\"jodhpurs\\\"\");\n+    fn test_write_some() {\n+        let value = Some(~\"jodhpurs\");\n+        let s = do io::with_str_writer |wr| {\n+            let encoder = Encoder(wr);\n+            value.encode(&encoder);\n+        };\n+        assert_eq!(s, ~\"\\\"jodhpurs\\\"\");\n     }\n \n     #[test]\n-    fn test_write_none () {\n-        let bw = @io::BytesWriter();\n-        let bww : @io::Writer = (bw as @io::Writer);\n-        let encoder = (@Encoder(bww) as @serialize::Encoder);\n-        do encoder.emit_enum(~\"Option\") {\n-            do encoder.emit_enum_variant (~\"None\",37,1242) {\n-            }\n-        }\n-        assert_eq!(str::from_bytes(bw.bytes), ~\"null\");\n+    fn test_write_none() {\n+        let value: Option<~str> = None;\n+        let s = do io::with_str_writer |wr| {\n+            let encoder = Encoder(wr);\n+            value.encode(&encoder);\n+        };\n+        assert_eq!(s, ~\"null\");\n     }\n \n     #[test]\n     fn test_trailing_characters() {\n-        fail_unless!(from_str(~\"nulla\") ==\n+        assert_eq!(from_str(~\"nulla\"),\n             Err(Error {line: 1u, col: 5u, msg: @~\"trailing characters\"}));\n-        fail_unless!(from_str(~\"truea\") ==\n+        assert_eq!(from_str(~\"truea\"),\n             Err(Error {line: 1u, col: 5u, msg: @~\"trailing characters\"}));\n-        fail_unless!(from_str(~\"falsea\") ==\n+        assert_eq!(from_str(~\"falsea\"),\n             Err(Error {line: 1u, col: 6u, msg: @~\"trailing characters\"}));\n-        fail_unless!(from_str(~\"1a\") ==\n+        assert_eq!(from_str(~\"1a\"),\n             Err(Error {line: 1u, col: 2u, msg: @~\"trailing characters\"}));\n-        fail_unless!(from_str(~\"[]a\") ==\n+        assert_eq!(from_str(~\"[]a\"),\n             Err(Error {line: 1u, col: 3u, msg: @~\"trailing characters\"}));\n-        fail_unless!(from_str(~\"{}a\") ==\n+        assert_eq!(from_str(~\"{}a\"),\n             Err(Error {line: 1u, col: 3u, msg: @~\"trailing characters\"}));\n     }\n \n     #[test]\n     fn test_read_identifiers() {\n-        fail_unless!(from_str(~\"n\") ==\n+        assert_eq!(from_str(~\"n\"),\n             Err(Error {line: 1u, col: 2u, msg: @~\"invalid syntax\"}));\n-        fail_unless!(from_str(~\"nul\") ==\n+        assert_eq!(from_str(~\"nul\"),\n             Err(Error {line: 1u, col: 4u, msg: @~\"invalid syntax\"}));\n \n-        fail_unless!(from_str(~\"t\") ==\n+        assert_eq!(from_str(~\"t\"),\n             Err(Error {line: 1u, col: 2u, msg: @~\"invalid syntax\"}));\n-        fail_unless!(from_str(~\"truz\") ==\n+        assert_eq!(from_str(~\"truz\"),\n             Err(Error {line: 1u, col: 4u, msg: @~\"invalid syntax\"}));\n \n-        fail_unless!(from_str(~\"f\") ==\n+        assert_eq!(from_str(~\"f\"),\n             Err(Error {line: 1u, col: 2u, msg: @~\"invalid syntax\"}));\n-        fail_unless!(from_str(~\"faz\") ==\n+        assert_eq!(from_str(~\"faz\"),\n             Err(Error {line: 1u, col: 3u, msg: @~\"invalid syntax\"}));\n \n-        fail_unless!(from_str(~\"null\") == Ok(Null));\n-        fail_unless!(from_str(~\"true\") == Ok(Boolean(true)));\n-        fail_unless!(from_str(~\"false\") == Ok(Boolean(false)));\n-        fail_unless!(from_str(~\" null \") == Ok(Null));\n-        fail_unless!(from_str(~\" true \") == Ok(Boolean(true)));\n-        fail_unless!(from_str(~\" false \") == Ok(Boolean(false)));\n+        assert_eq!(from_str(~\"null\"), Ok(Null));\n+        assert_eq!(from_str(~\"true\"), Ok(Boolean(true)));\n+        assert_eq!(from_str(~\"false\"), Ok(Boolean(false)));\n+        assert_eq!(from_str(~\" null \"), Ok(Null));\n+        assert_eq!(from_str(~\" true \"), Ok(Boolean(true)));\n+        assert_eq!(from_str(~\" false \"), Ok(Boolean(false)));\n     }\n \n     #[test]\n     fn test_read_number() {\n-        fail_unless!(from_str(~\"+\") ==\n+        assert_eq!(from_str(~\"+\"),\n             Err(Error {line: 1u, col: 1u, msg: @~\"invalid syntax\"}));\n-        fail_unless!(from_str(~\".\") ==\n+        assert_eq!(from_str(~\".\"),\n             Err(Error {line: 1u, col: 1u, msg: @~\"invalid syntax\"}));\n \n-        fail_unless!(from_str(~\"-\") ==\n+        assert_eq!(from_str(~\"-\"),\n             Err(Error {line: 1u, col: 2u, msg: @~\"invalid number\"}));\n-        fail_unless!(from_str(~\"00\") ==\n+        assert_eq!(from_str(~\"00\"),\n             Err(Error {line: 1u, col: 2u, msg: @~\"invalid number\"}));\n-        fail_unless!(from_str(~\"1.\") ==\n+        assert_eq!(from_str(~\"1.\"),\n             Err(Error {line: 1u, col: 3u, msg: @~\"invalid number\"}));\n-        fail_unless!(from_str(~\"1e\") ==\n+        assert_eq!(from_str(~\"1e\"),\n             Err(Error {line: 1u, col: 3u, msg: @~\"invalid number\"}));\n-        fail_unless!(from_str(~\"1e+\") ==\n+        assert_eq!(from_str(~\"1e+\"),\n             Err(Error {line: 1u, col: 4u, msg: @~\"invalid number\"}));\n \n-        fail_unless!(from_str(~\"3\") == Ok(Number(3f)));\n-        fail_unless!(from_str(~\"3.1\") == Ok(Number(3.1f)));\n-        fail_unless!(from_str(~\"-1.2\") == Ok(Number(-1.2f)));\n-        fail_unless!(from_str(~\"0.4\") == Ok(Number(0.4f)));\n-        fail_unless!(from_str(~\"0.4e5\") == Ok(Number(0.4e5f)));\n-        fail_unless!(from_str(~\"0.4e+15\") == Ok(Number(0.4e15f)));\n-        fail_unless!(from_str(~\"0.4e-01\") == Ok(Number(0.4e-01f)));\n-        fail_unless!(from_str(~\" 3 \") == Ok(Number(3f)));\n+        assert_eq!(from_str(~\"3\"), Ok(Number(3f)));\n+        assert_eq!(from_str(~\"3.1\"), Ok(Number(3.1f)));\n+        assert_eq!(from_str(~\"-1.2\"), Ok(Number(-1.2f)));\n+        assert_eq!(from_str(~\"0.4\"), Ok(Number(0.4f)));\n+        assert_eq!(from_str(~\"0.4e5\"), Ok(Number(0.4e5f)));\n+        assert_eq!(from_str(~\"0.4e+15\"), Ok(Number(0.4e15f)));\n+        assert_eq!(from_str(~\"0.4e-01\"), Ok(Number(0.4e-01f)));\n+        assert_eq!(from_str(~\" 3 \"), Ok(Number(3f)));\n     }\n \n     #[test]\n     fn test_read_str() {\n-        fail_unless!(from_str(~\"\\\"\") ==\n+        assert_eq!(from_str(~\"\\\"\"),\n             Err(Error {line: 1u, col: 2u, msg: @~\"EOF while parsing string\"\n         }));\n-        fail_unless!(from_str(~\"\\\"lol\") ==\n+        assert_eq!(from_str(~\"\\\"lol\"),\n             Err(Error {line: 1u, col: 5u, msg: @~\"EOF while parsing string\"\n         }));\n \n-        fail_unless!(from_str(~\"\\\"\\\"\") == Ok(String(~\"\")));\n-        fail_unless!(from_str(~\"\\\"foo\\\"\") == Ok(String(~\"foo\")));\n-        fail_unless!(from_str(~\"\\\"\\\\\\\"\\\"\") == Ok(String(~\"\\\"\")));\n-        fail_unless!(from_str(~\"\\\"\\\\b\\\"\") == Ok(String(~\"\\x08\")));\n-        fail_unless!(from_str(~\"\\\"\\\\n\\\"\") == Ok(String(~\"\\n\")));\n-        fail_unless!(from_str(~\"\\\"\\\\r\\\"\") == Ok(String(~\"\\r\")));\n-        fail_unless!(from_str(~\"\\\"\\\\t\\\"\") == Ok(String(~\"\\t\")));\n-        fail_unless!(from_str(~\" \\\"foo\\\" \") == Ok(String(~\"foo\")));\n+        assert_eq!(from_str(~\"\\\"\\\"\"), Ok(String(~\"\")));\n+        assert_eq!(from_str(~\"\\\"foo\\\"\"), Ok(String(~\"foo\")));\n+        assert_eq!(from_str(~\"\\\"\\\\\\\"\\\"\"), Ok(String(~\"\\\"\")));\n+        assert_eq!(from_str(~\"\\\"\\\\b\\\"\"), Ok(String(~\"\\x08\")));\n+        assert_eq!(from_str(~\"\\\"\\\\n\\\"\"), Ok(String(~\"\\n\")));\n+        assert_eq!(from_str(~\"\\\"\\\\r\\\"\"), Ok(String(~\"\\r\")));\n+        assert_eq!(from_str(~\"\\\"\\\\t\\\"\"), Ok(String(~\"\\t\")));\n+        assert_eq!(from_str(~\" \\\"foo\\\" \"), Ok(String(~\"foo\")));\n     }\n \n     #[test]\n     fn test_unicode_hex_escapes_in_str() {\n-        fail_unless!(from_str(~\"\\\"\\\\u12ab\\\"\") == Ok(String(~\"\\u12ab\")));\n-        fail_unless!(from_str(~\"\\\"\\\\uAB12\\\"\") == Ok(String(~\"\\uAB12\")));\n+        assert_eq!(from_str(~\"\\\"\\\\u12ab\\\"\"), Ok(String(~\"\\u12ab\")));\n+        assert_eq!(from_str(~\"\\\"\\\\uAB12\\\"\"), Ok(String(~\"\\uAB12\")));\n     }\n \n     #[test]\n     fn test_read_list() {\n-        fail_unless!(from_str(~\"[\") ==\n+        assert_eq!(from_str(~\"[\"),\n             Err(Error {line: 1u, col: 2u, msg: @~\"EOF while parsing value\"}));\n-        fail_unless!(from_str(~\"[1\") ==\n+        assert_eq!(from_str(~\"[1\"),\n             Err(Error {line: 1u, col: 3u, msg: @~\"EOF while parsing list\"}));\n-        fail_unless!(from_str(~\"[1,\") ==\n+        assert_eq!(from_str(~\"[1,\"),\n             Err(Error {line: 1u, col: 4u, msg: @~\"EOF while parsing value\"}));\n-        fail_unless!(from_str(~\"[1,]\") ==\n+        assert_eq!(from_str(~\"[1,]\"),\n             Err(Error {line: 1u, col: 4u, msg: @~\"invalid syntax\"}));\n-        fail_unless!(from_str(~\"[6 7]\") ==\n+        assert_eq!(from_str(~\"[6 7]\"),\n             Err(Error {line: 1u, col: 4u, msg: @~\"expected `,` or `]`\"}));\n \n-        fail_unless!(from_str(~\"[]\") == Ok(List(~[])));\n-        fail_unless!(from_str(~\"[ ]\") == Ok(List(~[])));\n-        fail_unless!(from_str(~\"[true]\") == Ok(List(~[Boolean(true)])));\n-        fail_unless!(from_str(~\"[ false ]\") == Ok(List(~[Boolean(false)])));\n-        fail_unless!(from_str(~\"[null]\") == Ok(List(~[Null])));\n-        fail_unless!(from_str(~\"[3, 1]\") ==\n+        assert_eq!(from_str(~\"[]\"), Ok(List(~[])));\n+        assert_eq!(from_str(~\"[ ]\"), Ok(List(~[])));\n+        assert_eq!(from_str(~\"[true]\"), Ok(List(~[Boolean(true)])));\n+        assert_eq!(from_str(~\"[ false ]\"), Ok(List(~[Boolean(false)])));\n+        assert_eq!(from_str(~\"[null]\"), Ok(List(~[Null])));\n+        assert_eq!(from_str(~\"[3, 1]\"),\n                      Ok(List(~[Number(3f), Number(1f)])));\n-        fail_unless!(from_str(~\"\\n[3, 2]\\n\") ==\n+        assert_eq!(from_str(~\"\\n[3, 2]\\n\"),\n                      Ok(List(~[Number(3f), Number(2f)])));\n-        fail_unless!(from_str(~\"[2, [4, 1]]\") ==\n+        assert_eq!(from_str(~\"[2, [4, 1]]\"),\n                Ok(List(~[Number(2f), List(~[Number(4f), Number(1f)])])));\n     }\n \n     #[test]\n     fn test_read_object() {\n-        fail_unless!(from_str(~\"{\") ==\n+        assert_eq!(from_str(~\"{\"),\n             Err(Error {\n                 line: 1u,\n                 col: 2u,\n                 msg: @~\"EOF while parsing object\"}));\n-        fail_unless!(from_str(~\"{ \") ==\n+        assert_eq!(from_str(~\"{ \"),\n             Err(Error {\n                 line: 1u,\n                 col: 3u,\n                 msg: @~\"EOF while parsing object\"}));\n-        fail_unless!(from_str(~\"{1\") ==\n+        assert_eq!(from_str(~\"{1\"),\n             Err(Error {\n                 line: 1u,\n                 col: 2u,\n                 msg: @~\"key must be a string\"}));\n-        fail_unless!(from_str(~\"{ \\\"a\\\"\") ==\n+        assert_eq!(from_str(~\"{ \\\"a\\\"\"),\n             Err(Error {\n                 line: 1u,\n                 col: 6u,\n                 msg: @~\"EOF while parsing object\"}));\n-        fail_unless!(from_str(~\"{\\\"a\\\"\") ==\n+        assert_eq!(from_str(~\"{\\\"a\\\"\"),\n             Err(Error {\n                 line: 1u,\n                 col: 5u,\n                 msg: @~\"EOF while parsing object\"}));\n-        fail_unless!(from_str(~\"{\\\"a\\\" \") ==\n+        assert_eq!(from_str(~\"{\\\"a\\\" \"),\n             Err(Error {\n                 line: 1u,\n                 col: 6u,\n                 msg: @~\"EOF while parsing object\"}));\n \n-        fail_unless!(from_str(~\"{\\\"a\\\" 1\") ==\n+        assert_eq!(from_str(~\"{\\\"a\\\" 1\"),\n             Err(Error {line: 1u, col: 6u, msg: @~\"expected `:`\"}));\n-        fail_unless!(from_str(~\"{\\\"a\\\":\") ==\n+        assert_eq!(from_str(~\"{\\\"a\\\":\"),\n             Err(Error {line: 1u, col: 6u, msg: @~\"EOF while parsing value\"}));\n-        fail_unless!(from_str(~\"{\\\"a\\\":1\") ==\n+        assert_eq!(from_str(~\"{\\\"a\\\":1\"),\n             Err(Error {\n                 line: 1u,\n                 col: 7u,\n                 msg: @~\"EOF while parsing object\"}));\n-        fail_unless!(from_str(~\"{\\\"a\\\":1 1\") ==\n+        assert_eq!(from_str(~\"{\\\"a\\\":1 1\"),\n             Err(Error {line: 1u, col: 8u, msg: @~\"expected `,` or `}`\"}));\n-        fail_unless!(from_str(~\"{\\\"a\\\":1,\") ==\n+        assert_eq!(from_str(~\"{\\\"a\\\":1,\"),\n             Err(Error {\n                 line: 1u,\n                 col: 8u,\n                 msg: @~\"EOF while parsing object\"}));\n \n-        fail_unless!(result::unwrap(from_str(~\"{}\")) == mk_object(~[]));\n-        fail_unless!(result::unwrap(from_str(~\"{\\\"a\\\": 3}\")) ==\n+        assert_eq!(result::unwrap(from_str(~\"{}\")), mk_object(~[]));\n+        assert_eq!(result::unwrap(from_str(~\"{\\\"a\\\": 3}\")),\n                   mk_object(~[(~\"a\", Number(3.0f))]));\n \n-        fail_unless!(result::unwrap(from_str(\n-                ~\"{ \\\"a\\\": null, \\\"b\\\" : true }\")) ==\n+        assert_eq!(result::unwrap(from_str(\n+                ~\"{ \\\"a\\\": null, \\\"b\\\" : true }\")),\n                   mk_object(~[\n                       (~\"a\", Null),\n                       (~\"b\", Boolean(true))]));\n-        fail_unless!(result::unwrap(\n-                      from_str(~\"\\n{ \\\"a\\\": null, \\\"b\\\" : true }\\n\")) ==\n+        assert_eq!(result::unwrap(\n+                      from_str(~\"\\n{ \\\"a\\\": null, \\\"b\\\" : true }\\n\")),\n                   mk_object(~[\n                       (~\"a\", Null),\n                       (~\"b\", Boolean(true))]));\n-        fail_unless!(result::unwrap(from_str(\n-                ~\"{\\\"a\\\" : 1.0 ,\\\"b\\\": [ true ]}\")) ==\n+        assert_eq!(result::unwrap(from_str(\n+                ~\"{\\\"a\\\" : 1.0 ,\\\"b\\\": [ true ]}\")),\n                   mk_object(~[\n                       (~\"a\", Number(1.0)),\n                       (~\"b\", List(~[Boolean(true)]))\n                   ]));\n-        fail_unless!(result::unwrap(from_str(\n+        assert_eq!(result::unwrap(from_str(\n                       ~\"{\" +\n                           ~\"\\\"a\\\": 1.0, \" +\n                           ~\"\\\"b\\\": [\" +\n                               ~\"true,\" +\n                               ~\"\\\"foo\\\\nbar\\\", \" +\n                               ~\"{ \\\"c\\\": {\\\"d\\\": null} } \" +\n                           ~\"]\" +\n-                      ~\"}\")) ==\n+                      ~\"}\")),\n                   mk_object(~[\n                       (~\"a\", Number(1.0f)),\n                       (~\"b\", List(~[\n@@ -1526,7 +1521,7 @@ mod tests {\n \n     #[test]\n     fn test_multiline_errors() {\n-        fail_unless!(from_str(~\"{\\n  \\\"foo\\\":\\n \\\"bar\\\"\") ==\n+        assert_eq!(from_str(~\"{\\n  \\\"foo\\\":\\n \\\"bar\\\"\"),\n             Err(Error {\n                 line: 3u,\n                 col: 8u,"}]}