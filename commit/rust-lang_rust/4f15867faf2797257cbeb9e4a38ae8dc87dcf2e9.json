{"sha": "4f15867faf2797257cbeb9e4a38ae8dc87dcf2e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMTU4NjdmYWYyNzk3MjU3Y2JlYjllNGEzOGFlOGRjODdkY2YyZTk=", "commit": {"author": {"name": "John Ericson", "email": "John.Ericson@Obsidian.Systems", "date": "2020-02-25T02:59:36Z"}, "committer": {"name": "John Ericson", "email": "John.Ericson@Obsidian.Systems", "date": "2020-02-25T02:59:36Z"}, "message": "bootstrap: Further centralize target defaulting logic.\n\nBackground: targets can be specied with or without config files;\nunneccessarily differences in the logic between those cases has caused\na) the bug I tried to fix in the previous commit, b) the bug I\nintroduced in the previous commit.\n\nThe solution is to make the code paths the same as much as possible.\n\n1. Targets are now not created from the `default` method. (I would both\nremove the impl if this was a public library, but just wrap it for\nconvience becaues it's not.) Instead, there is a `from_triple` method\nwhich does the defaulting.\n\n2. Besides the sanity checking, use the new method in the code reading\nconfig files. Now `no_std` is overriden iff set explicitly just like the\nother fields which are optional in the TOML AST type.\n\n3. In sanity checking, just populate the map for all targets no matter\nwhat. That way do don't duplicate logic trying to be clever and remember\nwhich targets have \"non standard\" overrides. Sanity checking is back to\njust sanity checking, and out of the game of trying to default too.", "tree": {"sha": "39cd38983d0345fe99fe3f26fc58939e11168e7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39cd38983d0345fe99fe3f26fc58939e11168e7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f15867faf2797257cbeb9e4a38ae8dc87dcf2e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f15867faf2797257cbeb9e4a38ae8dc87dcf2e9", "html_url": "https://github.com/rust-lang/rust/commit/4f15867faf2797257cbeb9e4a38ae8dc87dcf2e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f15867faf2797257cbeb9e4a38ae8dc87dcf2e9/comments", "author": {"login": "Ericson2314", "id": 1055245, "node_id": "MDQ6VXNlcjEwNTUyNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1055245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ericson2314", "html_url": "https://github.com/Ericson2314", "followers_url": "https://api.github.com/users/Ericson2314/followers", "following_url": "https://api.github.com/users/Ericson2314/following{/other_user}", "gists_url": "https://api.github.com/users/Ericson2314/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ericson2314/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ericson2314/subscriptions", "organizations_url": "https://api.github.com/users/Ericson2314/orgs", "repos_url": "https://api.github.com/users/Ericson2314/repos", "events_url": "https://api.github.com/users/Ericson2314/events{/privacy}", "received_events_url": "https://api.github.com/users/Ericson2314/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ericson2314", "id": 1055245, "node_id": "MDQ6VXNlcjEwNTUyNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1055245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ericson2314", "html_url": "https://github.com/Ericson2314", "followers_url": "https://api.github.com/users/Ericson2314/followers", "following_url": "https://api.github.com/users/Ericson2314/following{/other_user}", "gists_url": "https://api.github.com/users/Ericson2314/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ericson2314/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ericson2314/subscriptions", "organizations_url": "https://api.github.com/users/Ericson2314/orgs", "repos_url": "https://api.github.com/users/Ericson2314/repos", "events_url": "https://api.github.com/users/Ericson2314/events{/privacy}", "received_events_url": "https://api.github.com/users/Ericson2314/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03ca0e270613592f35ce654e2ef1e68cdfb154e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/03ca0e270613592f35ce654e2ef1e68cdfb154e3", "html_url": "https://github.com/rust-lang/rust/commit/03ca0e270613592f35ce654e2ef1e68cdfb154e3"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "746cddbabd6397469cf9292d9618eee52cf722a3", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4f15867faf2797257cbeb9e4a38ae8dc87dcf2e9/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f15867faf2797257cbeb9e4a38ae8dc87dcf2e9/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=4f15867faf2797257cbeb9e4a38ae8dc87dcf2e9", "patch": "@@ -177,6 +177,15 @@ pub struct Target {\n     pub no_std: bool,\n }\n \n+impl Target {\n+    pub fn from_triple(triple: &str) -> Self {\n+        let mut target: Self = Default::default();\n+        if triple.contains(\"-none-\") || triple.contains(\"nvptx\") {\n+            target.no_std = true;\n+        }\n+        target\n+    }\n+}\n /// Structure of the `config.toml` file that configuration is read from.\n ///\n /// This structure uses `Decodable` to automatically decode a TOML configuration\n@@ -596,7 +605,7 @@ impl Config {\n \n         if let Some(ref t) = toml.target {\n             for (triple, cfg) in t {\n-                let mut target = Target::default();\n+                let mut target = Target::from_triple(triple);\n \n                 if let Some(ref s) = cfg.llvm_config {\n                     target.llvm_config = Some(config.src.join(s));\n@@ -607,6 +616,9 @@ impl Config {\n                 if let Some(ref s) = cfg.android_ndk {\n                     target.ndk = Some(config.src.join(s));\n                 }\n+                if let Some(s) = cfg.no_std {\n+                    target.no_std = s;\n+                }\n                 target.cc = cfg.cc.clone().map(PathBuf::from);\n                 target.cxx = cfg.cxx.clone().map(PathBuf::from);\n                 target.ar = cfg.ar.clone().map(PathBuf::from);\n@@ -616,8 +628,6 @@ impl Config {\n                 target.musl_root = cfg.musl_root.clone().map(PathBuf::from);\n                 target.wasi_root = cfg.wasi_root.clone().map(PathBuf::from);\n                 target.qemu_rootfs = cfg.qemu_rootfs.clone().map(PathBuf::from);\n-                target.no_std =\n-                    cfg.no_std.unwrap_or(triple.contains(\"-none-\") || triple.contains(\"nvptx\"));\n \n                 config.target_config.insert(INTERNER.intern_string(triple.clone()), target);\n             }"}, {"sha": "530e74da8cac0d9b4703a39effd2c836e9b4aa1d", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f15867faf2797257cbeb9e4a38ae8dc87dcf2e9/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f15867faf2797257cbeb9e4a38ae8dc87dcf2e9/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=4f15867faf2797257cbeb9e4a38ae8dc87dcf2e9", "patch": "@@ -17,6 +17,7 @@ use std::process::Command;\n \n use build_helper::{output, t};\n \n+use crate::config::Target;\n use crate::Build;\n \n struct Finder {\n@@ -192,11 +193,9 @@ pub fn check(build: &mut Build) {\n             panic!(\"the iOS target is only supported on macOS\");\n         }\n \n-        if target.contains(\"-none-\") || target.contains(\"nvptx\") {\n-            if build.no_std(*target).is_none() {\n-                build.config.target_config.entry(target.clone()).or_default();\n-            }\n+        build.config.target_config.entry(target.clone()).or_insert(Target::from_triple(target));\n \n+        if target.contains(\"-none-\") || target.contains(\"nvptx\") {\n             if build.no_std(*target) == Some(false) {\n                 panic!(\"All the *-none-* and nvptx* targets are no-std targets\")\n             }"}]}