{"sha": "d25b61030e97c2bb95f7dece2c6cf3cf271b6fe6", "node_id": "C_kwDOAAsO6NoAKGQyNWI2MTAzMGU5N2MyYmI5NWY3ZGVjZTJjNmNmM2NmMjcxYjZmZTY", "commit": {"author": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-20T17:13:06Z"}, "committer": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-20T17:18:39Z"}, "message": "Add literal/ident conversion, tests pass", "tree": {"sha": "8d0ec1a7da785bf53703f76c6aaed109c79ebd74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d0ec1a7da785bf53703f76c6aaed109c79ebd74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d25b61030e97c2bb95f7dece2c6cf3cf271b6fe6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d25b61030e97c2bb95f7dece2c6cf3cf271b6fe6", "html_url": "https://github.com/rust-lang/rust/commit/d25b61030e97c2bb95f7dece2c6cf3cf271b6fe6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d25b61030e97c2bb95f7dece2c6cf3cf271b6fe6/comments", "author": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "191db9fed4df1ed72fde44bbc8e6f988478db9f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/191db9fed4df1ed72fde44bbc8e6f988478db9f5", "html_url": "https://github.com/rust-lang/rust/commit/191db9fed4df1ed72fde44bbc8e6f988478db9f5"}], "stats": {"total": 107, "additions": 71, "deletions": 36}, "files": [{"sha": "5d313b93083587e6227c9056128685e1c6360989", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d25b61030e97c2bb95f7dece2c6cf3cf271b6fe6/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d25b61030e97c2bb95f7dece2c6cf3cf271b6fe6/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d25b61030e97c2bb95f7dece2c6cf3cf271b6fe6", "patch": "@@ -1022,9 +1022,9 @@ dependencies = [\n \n [[package]]\n name = \"once_cell\"\n-version = \"1.12.0\"\n+version = \"1.13.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7709cef83f0c1f58f666e746a08b21e0085f7440fa6a29cc194d68aac97a4225\"\n+checksum = \"18a6dbe30758c9f83eb00cbea4ac95966305f5a7772f3f42ebfc7fc7eddbd8e1\"\n \n [[package]]\n name = \"oorandom\"\n@@ -1167,6 +1167,7 @@ dependencies = [\n  \"mbe\",\n  \"memmap2\",\n  \"object 0.29.0\",\n+ \"once_cell\",\n  \"paths\",\n  \"proc-macro-api\",\n  \"proc-macro-test\","}, {"sha": "06348afdede07e76a2da4c85e747ca8f18c884f5", "filename": "crates/proc-macro-srv/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d25b61030e97c2bb95f7dece2c6cf3cf271b6fe6/crates%2Fproc-macro-srv%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d25b61030e97c2bb95f7dece2c6cf3cf271b6fe6/crates%2Fproc-macro-srv%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2FCargo.toml?ref=d25b61030e97c2bb95f7dece2c6cf3cf271b6fe6", "patch": "@@ -24,6 +24,7 @@ tt = { path = \"../tt\", version = \"0.0.0\" }\n mbe = { path = \"../mbe\", version = \"0.0.0\" }\n paths = { path = \"../paths\", version = \"0.0.0\" }\n proc-macro-api = { path = \"../proc-macro-api\", version = \"0.0.0\" }\n+once_cell = \"1.13.0\"\n \n [dev-dependencies]\n expect-test = \"1.4.0\""}, {"sha": "55649ab8101df5e4581e9f669a44b30c819619ab", "filename": "crates/proc-macro-srv/src/abis/abi_sysroot/ra_server.rs", "status": "modified", "additions": 41, "deletions": 22, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/d25b61030e97c2bb95f7dece2c6cf3cf271b6fe6/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25b61030e97c2bb95f7dece2c6cf3cf271b6fe6/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs?ref=d25b61030e97c2bb95f7dece2c6cf3cf271b6fe6", "patch": "@@ -115,20 +115,29 @@ impl server::TokenStream for RustAnalyzer {\n                 Self::TokenStream::from_iter(vec![tree])\n             }\n \n-            bridge::TokenTree::Ident(_symbol) => {\n-                todo!(\"convert Ident bridge=>TokenStream\");\n-                // let IdentData(ident) = self.ident_interner.get(index).clone();\n-                // let ident: tt::Ident = ident;\n-                // let leaf = tt::Leaf::from(ident);\n-                // let tree = TokenTree::from(leaf);\n-                // Self::TokenStream::from_iter(vec![tree])\n+            bridge::TokenTree::Ident(ident) => {\n+                // FIXME: handle raw idents\n+                let text = SYMBOL_INTERNER.lock().unwrap().get(&ident.sym).clone();\n+                let ident: tt::Ident = tt::Ident { text, id: ident.span };\n+                let leaf = tt::Leaf::from(ident);\n+                let tree = TokenTree::from(leaf);\n+                Self::TokenStream::from_iter(vec![tree])\n             }\n \n-            bridge::TokenTree::Literal(_literal) => {\n-                todo!(\"convert Literal bridge=>TokenStream\");\n-                // let leaf = tt::Leaf::from(literal);\n-                // let tree = TokenTree::from(leaf);\n-                // Self::TokenStream::from_iter(vec![tree])\n+            bridge::TokenTree::Literal(literal) => {\n+                let symbol = SYMBOL_INTERNER.lock().unwrap().get(&literal.symbol).clone();\n+\n+                let text: tt::SmolStr = if let Some(suffix) = literal.suffix {\n+                    let suffix = SYMBOL_INTERNER.lock().unwrap().get(&suffix).clone();\n+                    format!(\"{symbol}{suffix}\").into()\n+                } else {\n+                    symbol\n+                };\n+\n+                let literal = tt::Literal { text, id: literal.span };\n+                let leaf = tt::Leaf::from(literal);\n+                let tree = TokenTree::from(leaf);\n+                Self::TokenStream::from_iter(vec![tree])\n             }\n \n             bridge::TokenTree::Punct(p) => {\n@@ -185,13 +194,23 @@ impl server::TokenStream for RustAnalyzer {\n         stream\n             .into_iter()\n             .map(|tree| match tree {\n-                tt::TokenTree::Leaf(tt::Leaf::Ident(_ident)) => {\n-                    todo!(\"convert Ident tt=>bridge\");\n-                    // bridge::TokenTree::Ident(Symbol(self.ident_interner.intern(&IdentData(ident))))\n+                tt::TokenTree::Leaf(tt::Leaf::Ident(ident)) => {\n+                    bridge::TokenTree::Ident(bridge::Ident {\n+                        sym: SYMBOL_INTERNER.lock().unwrap().intern(&ident.text),\n+                        // FIXME: handle raw idents\n+                        is_raw: false,\n+                        span: ident.id,\n+                    })\n                 }\n-                tt::TokenTree::Leaf(tt::Leaf::Literal(_lit)) => {\n-                    todo!(\"convert Literal tt=>bridge\");\n-                    // bridge::TokenTree::Literal(lit)\n+                tt::TokenTree::Leaf(tt::Leaf::Literal(lit)) => {\n+                    bridge::TokenTree::Literal(bridge::Literal {\n+                        // FIXME: handle literal kinds\n+                        kind: bridge::LitKind::Err,\n+                        symbol: SYMBOL_INTERNER.lock().unwrap().intern(&lit.text),\n+                        // FIXME: handle suffixes\n+                        suffix: None,\n+                        span: lit.id,\n+                    })\n                 }\n                 tt::TokenTree::Leaf(tt::Leaf::Punct(punct)) => {\n                     bridge::TokenTree::Punct(bridge::Punct {\n@@ -379,12 +398,12 @@ impl server::Server for RustAnalyzer {\n         }\n     }\n \n-    fn intern_symbol(_ident: &str) -> Self::Symbol {\n-        todo!(\"intern_symbol\")\n+    fn intern_symbol(ident: &str) -> Self::Symbol {\n+        SYMBOL_INTERNER.lock().unwrap().intern(&tt::SmolStr::from(ident))\n     }\n \n-    fn with_symbol_string(_symbol: &Self::Symbol, _f: impl FnOnce(&str)) {\n-        todo!(\"with_symbol_string\")\n+    fn with_symbol_string(symbol: &Self::Symbol, f: impl FnOnce(&str)) {\n+        f(SYMBOL_INTERNER.lock().unwrap().get(symbol).as_str())\n     }\n }\n "}, {"sha": "5bfc62a301b703b5d8c7d0e7affbfb6ee5d44635", "filename": "crates/proc-macro-srv/src/abis/abi_sysroot/ra_server/symbol.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d25b61030e97c2bb95f7dece2c6cf3cf271b6fe6/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25b61030e97c2bb95f7dece2c6cf3cf271b6fe6/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server%2Fsymbol.rs?ref=d25b61030e97c2bb95f7dece2c6cf3cf271b6fe6", "patch": "@@ -1,18 +1,21 @@\n-use std::collections::HashMap;\n+use once_cell::sync::Lazy;\n+use std::{collections::HashMap, sync::Mutex};\n use tt::SmolStr;\n \n-// Identifier for an interned symbol.\n+pub(super) static SYMBOL_INTERNER: Lazy<Mutex<SymbolInterner>> = Lazy::new(|| Default::default());\n+\n+// ID for an interned symbol.\n #[derive(Hash, Eq, PartialEq, Copy, Clone)]\n pub struct Symbol(u32);\n \n #[derive(Default)]\n-struct IdentInterner {\n+pub(super) struct SymbolInterner {\n     idents: HashMap<SmolStr, u32>,\n     ident_data: Vec<SmolStr>,\n }\n \n-impl IdentInterner {\n-    fn intern(&mut self, data: &str) -> Symbol {\n+impl SymbolInterner {\n+    pub(super) fn intern(&mut self, data: &str) -> Symbol {\n         if let Some(index) = self.idents.get(data) {\n             return Symbol(*index);\n         }\n@@ -24,12 +27,7 @@ impl IdentInterner {\n         Symbol(index)\n     }\n \n-    fn get(&self, index: u32) -> &SmolStr {\n-        &self.ident_data[index as usize]\n-    }\n-\n-    #[allow(unused)]\n-    fn get_mut(&mut self, index: u32) -> &mut SmolStr {\n-        self.ident_data.get_mut(index as usize).expect(\"Should be consistent\")\n+    pub(super) fn get(&self, index: &Symbol) -> &SmolStr {\n+        &self.ident_data[index.0 as usize]\n     }\n }"}, {"sha": "f1083a9284b3acbed05124e77c50917490fcdcd1", "filename": "crates/proc-macro-srv/src/abis/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d25b61030e97c2bb95f7dece2c6cf3cf271b6fe6/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25b61030e97c2bb95f7dece2c6cf3cf271b6fe6/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fmod.rs?ref=d25b61030e97c2bb95f7dece2c6cf3cf271b6fe6", "patch": "@@ -37,6 +37,8 @@ use super::dylib::LoadProcMacroDylibError;\n pub(crate) use abi_1_58::Abi as Abi_1_58;\n pub(crate) use abi_1_63::Abi as Abi_1_63;\n pub(crate) use abi_1_64::Abi as Abi_1_64;\n+#[cfg(feature = \"sysroot-abi\")]\n+pub(crate) use abi_sysroot::Abi as Abi_Sysroot;\n use libloading::Library;\n use proc_macro_api::{ProcMacroKind, RustCInfo};\n \n@@ -54,6 +56,8 @@ pub(crate) enum Abi {\n     Abi1_58(Abi_1_58),\n     Abi1_63(Abi_1_63),\n     Abi1_64(Abi_1_64),\n+    #[cfg(feature = \"sysroot-abi\")]\n+    AbiSysroot(Abi_Sysroot),\n }\n \n impl Abi {\n@@ -71,6 +75,14 @@ impl Abi {\n         symbol_name: String,\n         info: RustCInfo,\n     ) -> Result<Abi, LoadProcMacroDylibError> {\n+        // Gated behind an env var for now to avoid a change in behavior for\n+        // rustup-installed rust-analyzer\n+        #[cfg(feature = \"sysroot-abi\")]\n+        if std::env::var(\"PROC_MACRO_SRV_SYSROOT_ABI\").is_ok() {\n+            let inner = unsafe { Abi_Sysroot::from_lib(lib, symbol_name) }?;\n+            return Ok(Abi::AbiSysroot(inner));\n+        }\n+\n         // FIXME: this should use exclusive ranges when they're stable\n         // https://github.com/rust-lang/rust/issues/37854\n         match (info.version.0, info.version.1) {\n@@ -100,6 +112,8 @@ impl Abi {\n             Self::Abi1_58(abi) => abi.expand(macro_name, macro_body, attributes),\n             Self::Abi1_63(abi) => abi.expand(macro_name, macro_body, attributes),\n             Self::Abi1_64(abi) => abi.expand(macro_name, macro_body, attributes),\n+            #[cfg(feature = \"sysroot-abi\")]\n+            Self::AbiSysroot(abi) => abi.expand(macro_name, macro_body, attributes),\n         }\n     }\n \n@@ -108,6 +122,8 @@ impl Abi {\n             Self::Abi1_58(abi) => abi.list_macros(),\n             Self::Abi1_63(abi) => abi.list_macros(),\n             Self::Abi1_64(abi) => abi.list_macros(),\n+            #[cfg(feature = \"sysroot-abi\")]\n+            Self::AbiSysroot(abi) => abi.list_macros(),\n         }\n     }\n }"}]}