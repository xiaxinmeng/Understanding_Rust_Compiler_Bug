{"sha": "f81b8cfd8d8d90a1c843f9660420db203b7ae0f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MWI4Y2ZkOGQ4ZDkwYTFjODQzZjk2NjA0MjBkYjIwM2I3YWUwZjQ=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-12-07T02:39:33Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-12-07T23:53:34Z"}, "message": "Fixed more imports and variable names.", "tree": {"sha": "2b9fafd40fe323a8e99a7e433c4545d326e97ab1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b9fafd40fe323a8e99a7e433c4545d326e97ab1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f81b8cfd8d8d90a1c843f9660420db203b7ae0f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f81b8cfd8d8d90a1c843f9660420db203b7ae0f4", "html_url": "https://github.com/rust-lang/rust/commit/f81b8cfd8d8d90a1c843f9660420db203b7ae0f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f81b8cfd8d8d90a1c843f9660420db203b7ae0f4/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99c7130b091636040ca151f865f503ac079a077e", "url": "https://api.github.com/repos/rust-lang/rust/commits/99c7130b091636040ca151f865f503ac079a077e", "html_url": "https://github.com/rust-lang/rust/commit/99c7130b091636040ca151f865f503ac079a077e"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "43e7aee1b124ef45b2b46f6a22a1c4d2dada001e", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f81b8cfd8d8d90a1c843f9660420db203b7ae0f4/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81b8cfd8d8d90a1c843f9660420db203b7ae0f4/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=f81b8cfd8d8d90a1c843f9660420db203b7ae0f4", "patch": "@@ -20,7 +20,7 @@ use hir::HirVec;\n use lint;\n use middle::resolve_lifetime as rl;\n use namespace::Namespace;\n-use rustc::traits::{self, TraitRefExpansionInfoDignosticBuilder};\n+use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt, ToPredicate, TypeFoldable};\n use rustc::ty::{GenericParamDef, GenericParamDefKind};\n use rustc::ty::subst::{Kind, Subst, Substs};\n@@ -39,7 +39,6 @@ use util::nodemap::FxHashMap;\n \n use std::collections::BTreeSet;\n use std::iter;\n-use std::ops::Range;\n use std::slice;\n \n pub trait AstConv<'gcx, 'tcx> {"}, {"sha": "b76c9101eae02b66f7aa9f565d5af1a4605f0149", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f81b8cfd8d8d90a1c843f9660420db203b7ae0f4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81b8cfd8d8d90a1c843f9660420db203b7ae0f4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=f81b8cfd8d8d90a1c843f9660420db203b7ae0f4", "patch": "@@ -309,10 +309,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             \"no {} named `{}` found for type `{}` in the current scope\",\n                             item_kind,\n                             item_name,\n-                            ty_string\n+                            ty_str\n                         );\n                         if let Some(suggestion) = suggestion {\n-                            err.note(&format!(\"did you mean `{}::{}`?\", ty_string, suggestion));\n+                            err.note(&format!(\"did you mean `{}::{}`?\", ty_str, suggestion));\n                         }\n                         err\n                     }\n@@ -651,7 +651,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     fn type_derefs_to_local(&self,\n                             span: Span,\n                             rcvr_ty: Ty<'tcx>,\n-                            source: SelfSource) -> bool {\n+                            rcvr_expr: Option<&hir::Expr>) -> bool {\n         fn is_local(ty: Ty) -> bool {\n             match ty.sty {\n                 ty::Adt(def, _) => def.did.is_local(),"}]}