{"sha": "3a96d6b603b0a55fa14bb91d23c080725a257c04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhOTZkNmI2MDNiMGE1NWZhMTRiYjkxZDIzYzA4MDcyNWEyNTdjMDQ=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2019-01-27T12:33:56Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2019-01-27T12:33:56Z"}, "message": "rustup https://github.com/rust-lang/rust/pull/57907/\n\nfor file in `fd \\.rs$` ; do sed  -i  s/span_suggestion_with_applicability/span_suggestion/g $file ; done\n\nfor file in `fd \\.rs$` ; do sed  -i  s/span_suggestion_short_with_applicability/span_suggestion_short/g $file ; done\n\nfor file in `fd \\.rs$` ; do sed  -i  s/span_suggestions_with_applicability/span_suggestions/g $file ; done", "tree": {"sha": "5090675200191fbf86f4a3ad34d73e905c795ed1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5090675200191fbf86f4a3ad34d73e905c795ed1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a96d6b603b0a55fa14bb91d23c080725a257c04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a96d6b603b0a55fa14bb91d23c080725a257c04", "html_url": "https://github.com/rust-lang/rust/commit/3a96d6b603b0a55fa14bb91d23c080725a257c04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a96d6b603b0a55fa14bb91d23c080725a257c04/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9e0a7e3bd0619626ad03db4b641a368d3555bcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9e0a7e3bd0619626ad03db4b641a368d3555bcc", "html_url": "https://github.com/rust-lang/rust/commit/e9e0a7e3bd0619626ad03db4b641a368d3555bcc"}], "stats": {"total": 176, "additions": 88, "deletions": 88}, "files": [{"sha": "cc44b514ea77e178a694bcfe05c3e7318fc5ee08", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -83,7 +83,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                                         let r = &sugg::Sugg::hir(cx, rhs, \"..\");\n                                         let long =\n                                             format!(\"{} = {}\", snip_a, sugg::make_binop(higher::binop(op.node), a, r));\n-                                        db.span_suggestion_with_applicability(\n+                                        db.span_suggestion(\n                                             expr.span,\n                                             &format!(\n                                                 \"Did you mean {} = {} {} {} or {}? Consider replacing it with\",\n@@ -96,7 +96,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                                             format!(\"{} {}= {}\", snip_a, op.node.as_str(), snip_r),\n                                             Applicability::MachineApplicable,\n                                         );\n-                                        db.span_suggestion_with_applicability(\n+                                        db.span_suggestion(\n                                             expr.span,\n                                             \"or\",\n                                             long,\n@@ -183,7 +183,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                                     if let (Some(snip_a), Some(snip_r)) =\n                                         (snippet_opt(cx, assignee.span), snippet_opt(cx, rhs.span))\n                                     {\n-                                        db.span_suggestion_with_applicability(\n+                                        db.span_suggestion(\n                                             expr.span,\n                                             \"replace it with\",\n                                             format!(\"{} {}= {}\", snip_a, op.node.as_str(), snip_r),"}, {"sha": "89dbba56130aa39f0e05cd67910a92cd9713e1f9", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -273,7 +273,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n                                             \"useless lint attribute\",\n                                             |db| {\n                                                 sugg = sugg.replacen(\"#[\", \"#![\", 1);\n-                                                db.span_suggestion_with_applicability(\n+                                                db.span_suggestion(\n                                                     line_span,\n                                                     \"if you just forgot a `!`, use\",\n                                                     sugg,\n@@ -336,7 +336,7 @@ fn check_clippy_lint_names(cx: &LateContext<'_, '_>, items: &[NestedMetaItem]) {\n                                 // https://github.com/rust-lang/rust/pull/56992\n                                 CheckLintNameResult::NoLint(None) => (),\n                                 _ => {\n-                                    db.span_suggestion_with_applicability(\n+                                    db.span_suggestion(\n                                         lint.span,\n                                         \"lowercase the lint name\",\n                                         name_lower,"}, {"sha": "d4e3037619903c9701b53c92aaa90c08b800b42d", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -142,7 +142,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BitMask {\n                                    \"bit mask could be simplified with a call to `trailing_zeros`\",\n                                    |db| {\n                     let sugg = Sugg::hir(cx, left1, \"...\").maybe_par();\n-                    db.span_suggestion_with_applicability(\n+                    db.span_suggestion(\n                         e.span,\n                         \"try\",\n                         format!(\"{}.trailing_zeros() >= {}\", sugg, n.count_ones()),"}, {"sha": "6433e0d640d5dfe4d65bc2d46cecaf74d4668892", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -393,7 +393,7 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n                                     \"this expression can be optimized out by applying boolean operations to the \\\n                                      outer expression\",\n                                 );\n-                                db.span_suggestion_with_applicability(\n+                                db.span_suggestion(\n                                     e.span,\n                                     \"it would look like the following\",\n                                     suggest(self.cx, suggestion, &h2q.terminals).0,\n@@ -423,7 +423,7 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n                     e.span,\n                     \"this boolean expression can be simplified\",\n                     |db| {\n-                        db.span_suggestions_with_applicability(\n+                        db.span_suggestions(\n                             e.span,\n                             \"try\",\n                             suggestions.into_iter(),"}, {"sha": "9539b4d89f96434feb686b4236b308e8c913eccf", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -154,7 +154,7 @@ fn check_collapsible_no_if_let(cx: &EarlyContext<'_>, expr: &ast::Expr, check: &\n             span_lint_and_then(cx, COLLAPSIBLE_IF, expr.span, \"this if statement can be collapsed\", |db| {\n                 let lhs = Sugg::ast(cx, check, \"..\");\n                 let rhs = Sugg::ast(cx, check_inner, \"..\");\n-                db.span_suggestion_with_applicability(\n+                db.span_suggestion(\n                     expr.span,\n                     \"try\",\n                     format!("}, {"sha": "2684f45660e17920b8cfcaddfc31511ee0fa3065", "filename": "clippy_lints/src/const_static_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -66,7 +66,7 @@ impl StaticConst {\n                                     lifetime.ident.span,\n                                     \"Constants have by default a `'static` lifetime\",\n                                     |db| {\n-                                        db.span_suggestion_with_applicability(\n+                                        db.span_suggestion(\n                                             ty.span,\n                                             \"consider removing `'static`\",\n                                             sugg,"}, {"sha": "c704a635425dc5878773f65b293b4dfc27706f52", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -207,7 +207,7 @@ fn lint_match_arms(cx: &LateContext<'_, '_>, expr: &Expr) {\n                 |db| {\n                     db.span_note(i.body.span, \"same as this\");\n \n-                    // Note: this does not use `span_suggestion_with_applicability` on purpose:\n+                    // Note: this does not use `span_suggestion` on purpose:\n                     // there is no clean way\n                     // to remove the other arm. Building a span and suggest to replace it to \"\"\n                     // makes an even more confusing error message. Also in order not to make up a"}, {"sha": "3e0a6e11be6ecad35c2aaef944f7e1b12f004d85", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -149,7 +149,7 @@ impl<'a, 'tcx, 'b> Visitor<'tcx> for InsertVisitor<'a, 'tcx, 'b> {\n                                            snippet(self.cx, params[1].span, \"..\"),\n                                            snippet(self.cx, params[2].span, \"..\"));\n \n-                        db.span_suggestion_with_applicability(\n+                        db.span_suggestion(\n                             self.span,\n                             \"consider using\",\n                             help,\n@@ -161,7 +161,7 @@ impl<'a, 'tcx, 'b> Visitor<'tcx> for InsertVisitor<'a, 'tcx, 'b> {\n                                            snippet(self.cx, self.map.span, \"map\"),\n                                            snippet(self.cx, params[1].span, \"..\"));\n \n-                        db.span_suggestion_with_applicability(\n+                        db.span_suggestion(\n                             self.span,\n                             \"consider using\",\n                             help,"}, {"sha": "57291dd24eee7f33a090d746dec5ca03d809f24c", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -126,7 +126,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                         {\n                             span_lint_and_then(cx, OP_REF, e.span, \"needlessly taken reference of left operand\", |db| {\n                                 let lsnip = snippet(cx, l.span, \"...\").to_string();\n-                                db.span_suggestion_with_applicability(\n+                                db.span_suggestion(\n                                     left.span,\n                                     \"use the left value directly\",\n                                     lsnip,\n@@ -144,7 +144,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                                 \"needlessly taken reference of right operand\",\n                                 |db| {\n                                     let rsnip = snippet(cx, r.span, \"...\").to_string();\n-                                    db.span_suggestion_with_applicability(\n+                                    db.span_suggestion(\n                                         right.span,\n                                         \"use the right value directly\",\n                                         rsnip,\n@@ -163,7 +163,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                         {\n                             span_lint_and_then(cx, OP_REF, e.span, \"needlessly taken reference of left operand\", |db| {\n                                 let lsnip = snippet(cx, l.span, \"...\").to_string();\n-                                db.span_suggestion_with_applicability(\n+                                db.span_suggestion(\n                                     left.span,\n                                     \"use the left value directly\",\n                                     lsnip,\n@@ -181,7 +181,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                         {\n                             span_lint_and_then(cx, OP_REF, e.span, \"taken reference of right operand\", |db| {\n                                 let rsnip = snippet(cx, r.span, \"...\").to_string();\n-                                db.span_suggestion_with_applicability(\n+                                db.span_suggestion(\n                                     right.span,\n                                     \"use the right value directly\",\n                                     rsnip,"}, {"sha": "f0557154f903ac96581e94f04cc859c9a7a4ed6b", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -101,7 +101,7 @@ fn check_closure(cx: &LateContext<'_, '_>, expr: &Expr) {\n             }\n             span_lint_and_then(cx, REDUNDANT_CLOSURE, expr.span, \"redundant closure found\", |db| {\n                 if let Some(snippet) = snippet_opt(cx, caller.span) {\n-                    db.span_suggestion_with_applicability(\n+                    db.span_suggestion(\n                         expr.span,\n                         \"remove closure as shown\",\n                         snippet,"}, {"sha": "aaef5b39aeb8db3daee652f0059bf39b7f67b1ef", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -83,7 +83,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                             };\n \n                             span_lint_and_then(cx, USELESS_FORMAT, span, \"useless use of `format!`\", |db| {\n-                                db.span_suggestion_with_applicability(\n+                                db.span_suggestion(\n                                     expr.span,\n                                     message,\n                                     sugg,\n@@ -99,7 +99,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         if tup.is_empty() {\n                             let sugg = format!(\"{}.to_string()\", snippet(cx, expr.span, \"<expr>\").into_owned());\n                             span_lint_and_then(cx, USELESS_FORMAT, span, \"useless use of `format!`\", |db| {\n-                                db.span_suggestion_with_applicability(\n+                                db.span_suggestion(\n                                     span,\n                                     \"consider using .to_string()\",\n                                     sugg,"}, {"sha": "abe8a9d6856cdae0c1339b36fca5e922d2e11236", "filename": "clippy_lints/src/identity_conversion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_conversion.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -71,7 +71,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n                         let sugg = snippet_with_macro_callsite(cx, args[0].span, \"<expr>\").to_string();\n \n                         span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |db| {\n-                            db.span_suggestion_with_applicability(\n+                            db.span_suggestion(\n                                 e.span,\n                                 \"consider removing `.into()`\",\n                                 sugg,\n@@ -86,7 +86,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n                     if same_tys(cx, a, b) {\n                         let sugg = snippet(cx, args[0].span, \"<expr>\").into_owned();\n                         span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |db| {\n-                            db.span_suggestion_with_applicability(\n+                            db.span_suggestion(\n                                 e.span,\n                                 \"consider removing `.into_iter()`\",\n                                 sugg,\n@@ -108,7 +108,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n                                 let sugg_msg =\n                                     format!(\"consider removing `{}()`\", snippet(cx, path.span, \"From::from\"));\n                                 span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |db| {\n-                                    db.span_suggestion_with_applicability(\n+                                    db.span_suggestion(\n                                         e.span,\n                                         &sugg_msg,\n                                         sugg,"}, {"sha": "72d95a0763ae4cd93b76027f3dc5ff6745a2f946", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -39,7 +39,7 @@ impl Pass {\n     fn lint(cx: &LateContext<'_, '_>, outer_span: syntax_pos::Span, inner_span: syntax_pos::Span, msg: &str) {\n         span_lint_and_then(cx, IMPLICIT_RETURN, outer_span, \"missing return statement\", |db| {\n             if let Some(snippet) = snippet_opt(cx, inner_span) {\n-                db.span_suggestion_with_applicability(\n+                db.span_suggestion(\n                     outer_span,\n                     msg,\n                     format!(\"return {}\", snippet),"}, {"sha": "9b5938baf5f2018ef5b45afb7f45e8f2bd847bf4", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -162,7 +162,7 @@ impl IntPlusOne {\n             block.span,\n             \"Unnecessary `>= y + 1` or `x - 1 >=`\",\n             |db| {\n-                db.span_suggestion_with_applicability(\n+                db.span_suggestion(\n                     block.span,\n                     \"change `>= y + 1` to `> y` as shown\",\n                     recommendation,"}, {"sha": "59e036c715ef91e50e0461b2f2077b8d3cb0721d", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -100,7 +100,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeEnumVariant {\n                                     VariantData::Unit(_) => unreachable!(),\n                                 };\n                                 if let Some(snip) = snippet_opt(cx, span) {\n-                                    db.span_suggestion_with_applicability(\n+                                    db.span_suggestion(\n                                         span,\n                                         \"consider boxing the large fields to reduce the total size of the \\\n                                          enum\","}, {"sha": "f1aed79847f7d502eab9025aa00b0f6cdd561846", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -124,7 +124,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetIfSeq {\n                                        span,\n                                        \"`if _ { .. } else { .. }` is an expression\",\n                                        |db| {\n-                                           db.span_suggestion_with_applicability(\n+                                           db.span_suggestion(\n                                                 span,\n                                                 \"it is more idiomatic to write\",\n                                                 sug,"}, {"sha": "4d6cc75135ec346348d5f3552baf1af6ba11eae4", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -1304,7 +1304,7 @@ fn check_for_loop_reverse_range<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arg: &'tcx\n                         expr.span,\n                         \"this range is empty so this for loop will never run\",\n                         |db| {\n-                            db.span_suggestion_with_applicability(\n+                            db.span_suggestion(\n                                 arg.span,\n                                 \"consider using the following if you are attempting to iterate over this \\\n                                  range in reverse\",\n@@ -2408,7 +2408,7 @@ fn check_needless_collect<'a, 'tcx>(expr: &'tcx Expr, cx: &LateContext<'a, 'tcx>\n                 if method.ident.name == \"len\" {\n                     let span = shorten_needless_collect_span(expr);\n                     span_lint_and_then(cx, NEEDLESS_COLLECT, span, NEEDLESS_COLLECT_MSG, |db| {\n-                        db.span_suggestion_with_applicability(\n+                        db.span_suggestion(\n                             span,\n                             \"replace with\",\n                             \".count()\".to_string(),\n@@ -2419,7 +2419,7 @@ fn check_needless_collect<'a, 'tcx>(expr: &'tcx Expr, cx: &LateContext<'a, 'tcx>\n                 if method.ident.name == \"is_empty\" {\n                     let span = shorten_needless_collect_span(expr);\n                     span_lint_and_then(cx, NEEDLESS_COLLECT, span, NEEDLESS_COLLECT_MSG, |db| {\n-                        db.span_suggestion_with_applicability(\n+                        db.span_suggestion(\n                             span,\n                             \"replace with\",\n                             \".next().is_none()\".to_string(),\n@@ -2431,7 +2431,7 @@ fn check_needless_collect<'a, 'tcx>(expr: &'tcx Expr, cx: &LateContext<'a, 'tcx>\n                     let contains_arg = snippet(cx, args[1].span, \"??\");\n                     let span = shorten_needless_collect_span(expr);\n                     span_lint_and_then(cx, NEEDLESS_COLLECT, span, NEEDLESS_COLLECT_MSG, |db| {\n-                        db.span_suggestion_with_applicability(\n+                        db.span_suggestion(\n                             span,\n                             \"replace with\",\n                             format!("}, {"sha": "75e12cd9fd328ad1c3bf6234e0ee2643d640e6f7", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -216,7 +216,7 @@ fn lint_map_unit_fn(cx: &LateContext<'_, '_>, stmt: &hir::Stmt, expr: &hir::Expr\n         );\n \n         span_lint_and_then(cx, lint, expr.span, &msg, |db| {\n-            db.span_suggestion_with_applicability(stmt.span, \"try this\", suggestion, Applicability::Unspecified);\n+            db.span_suggestion(stmt.span, \"try this\", suggestion, Applicability::Unspecified);\n         });\n     } else if let Some((binding, closure_expr)) = unit_closure(cx, fn_arg) {\n         let msg = suggestion_msg(\"closure\", map_type);\n@@ -230,7 +230,7 @@ fn lint_map_unit_fn(cx: &LateContext<'_, '_>, stmt: &hir::Stmt, expr: &hir::Expr\n                     snippet(cx, var_arg.span, \"_\"),\n                     snippet(cx, reduced_expr_span, \"_\")\n                 );\n-                db.span_suggestion_with_applicability(\n+                db.span_suggestion(\n                     stmt.span,\n                     \"try this\",\n                     suggestion,\n@@ -243,7 +243,7 @@ fn lint_map_unit_fn(cx: &LateContext<'_, '_>, stmt: &hir::Stmt, expr: &hir::Expr\n                     snippet(cx, binding.pat.span, \"_\"),\n                     snippet(cx, var_arg.span, \"_\")\n                 );\n-                db.span_suggestion_with_applicability(stmt.span, \"try this\", suggestion, Applicability::Unspecified);\n+                db.span_suggestion(stmt.span, \"try this\", suggestion, Applicability::Unspecified);\n             }\n         });\n     }"}, {"sha": "b290980fc36151f0432351b473a706891fedbfd4", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -375,7 +375,7 @@ fn check_match_bool(cx: &LateContext<'_, '_>, ex: &Expr, arms: &[Arm], expr: &Ex\n                         };\n \n                         if let Some(sugg) = sugg {\n-                            db.span_suggestion_with_applicability(\n+                            db.span_suggestion(\n                                 expr.span,\n                                 \"consider using an if/else expression\",\n                                 sugg,"}, {"sha": "65e473698198f812065df3216ffc634d39a7f854", "filename": "clippy_lints/src/mem_discriminant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_discriminant.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -74,7 +74,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemDiscriminant {\n                             }\n \n                             let derefs: String = iter::repeat('*').take(derefs_needed).collect();\n-                            db.span_suggestion_with_applicability(\n+                            db.span_suggestion(\n                                 param.span,\n                                 \"try dereferencing\",\n                                 format!(\"{}{}\", derefs, snippet(cx, cur_expr.span, \"<param>\")),"}, {"sha": "20ffc1fd4068ea4b0c45855d92b420ebd5e8ada1", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -1313,13 +1313,13 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr, arg: &hir::Exp\n                         let refs: String = iter::repeat('&').take(n + 1).collect();\n                         let derefs: String = iter::repeat('*').take(n).collect();\n                         let explicit = format!(\"{}{}::clone({})\", refs, ty, snip);\n-                        db.span_suggestion_with_applicability(\n+                        db.span_suggestion(\n                             expr.span,\n                             \"try dereferencing it\",\n                             format!(\"{}({}{}).clone()\", refs, derefs, snip.deref()),\n                             Applicability::MaybeIncorrect,\n                         );\n-                        db.span_suggestion_with_applicability(\n+                        db.span_suggestion(\n                             expr.span,\n                             \"or try being explicit about what type to clone\",\n                             explicit,\n@@ -1379,7 +1379,7 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr, arg: &hir::Exp\n         }\n         span_lint_and_then(cx, CLONE_ON_COPY, expr.span, \"using `clone` on a `Copy` type\", |db| {\n             if let Some((text, snip)) = snip {\n-                db.span_suggestion_with_applicability(expr.span, text, snip, Applicability::Unspecified);\n+                db.span_suggestion(expr.span, text, snip, Applicability::Unspecified);\n             }\n         });\n     }\n@@ -1810,7 +1810,7 @@ fn lint_map_flatten<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr,\n         let func_snippet = snippet(cx, map_args[1].span, \"..\");\n         let hint = format!(\"{0}.flat_map({1})\", self_snippet, func_snippet);\n         span_lint_and_then(cx, MAP_FLATTEN, expr.span, msg, |db| {\n-            db.span_suggestion_with_applicability(\n+            db.span_suggestion(\n                 expr.span,\n                 \"try using flat_map instead\",\n                 hint,\n@@ -1897,7 +1897,7 @@ fn lint_map_or_none<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr,\n             let map_or_func_snippet = snippet(cx, map_or_args[2].span, \"..\");\n             let hint = format!(\"{0}.and_then({1})\", map_or_self_snippet, map_or_func_snippet);\n             span_lint_and_then(cx, OPTION_MAP_OR_NONE, expr.span, msg, |db| {\n-                db.span_suggestion_with_applicability(\n+                db.span_suggestion(\n                     expr.span,\n                     \"try using and_then instead\",\n                     hint,"}, {"sha": "c15fba76869ebd0a751e257e5e1e3f9feb48d865", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -302,7 +302,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         l.pat.span,\n                         \"`ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\",\n                         |db| {\n-                            db.span_suggestion_with_applicability(\n+                            db.span_suggestion(\n                                 s.span,\n                                 \"try\",\n                                 format!(\n@@ -330,7 +330,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     \"boolean short circuit operator in statement may be clearer using an explicit test\",\n                     |db| {\n                         let sugg = if binop.node == BinOpKind::Or { !sugg } else { sugg };\n-                        db.span_suggestion_with_applicability(\n+                        db.span_suggestion(\n                             s.span,\n                             \"replace it with\",\n                             format!(\n@@ -387,7 +387,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         let lhs = Sugg::hir(cx, left, \"..\");\n                         let rhs = Sugg::hir(cx, right, \"..\");\n \n-                        db.span_suggestion_with_applicability(\n+                        db.span_suggestion(\n                             expr.span,\n                             \"consider comparing them within some error\",\n                             format!(\"({}).abs() < error\", lhs - rhs),\n@@ -568,7 +568,7 @@ fn check_to_owned(cx: &LateContext<'_, '_>, expr: &Expr, other: &Expr) {\n                 snip.to_string()\n             };\n \n-            db.span_suggestion_with_applicability(\n+            db.span_suggestion(\n                 lint_span,\n                 \"try\",\n                 try_hint,"}, {"sha": "88acdbb168ab34795335333c2ec8590e6033e128", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -343,7 +343,7 @@ impl EarlyLintPass for MiscEarly {\n                                 |db| {\n                                     if decl.inputs.is_empty() {\n                                         let hint = snippet(cx, block.span, \"..\").into_owned();\n-                                        db.span_suggestion_with_applicability(\n+                                        db.span_suggestion(\n                                             expr.span,\n                                             \"Try doing something like: \",\n                                             hint,\n@@ -438,13 +438,13 @@ impl MiscEarly {\n                                         lit.span,\n                                         \"this is a decimal constant\",\n                                         |db| {\n-                        db.span_suggestion_with_applicability(\n+                        db.span_suggestion(\n                             lit.span,\n                             \"if you mean to use a decimal constant, remove the `0` to remove confusion\",\n                             src.trim_start_matches(|c| c == '_' || c == '0').to_string(),\n                             Applicability::MaybeIncorrect,\n                         );\n-                        db.span_suggestion_with_applicability(\n+                        db.span_suggestion(\n                             lit.span,\n                             \"if you mean to use an octal constant, use `0o`\",\n                             format!(\"0o{}\", src.trim_start_matches(|c| c == '_' || c == '0')),"}, {"sha": "206a1465a46f13c92d54f116d1a1829728618bd5", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -70,7 +70,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n                              by the compiler\",\n                             |db| {\n                                 if let Some(snippet) = snippet_opt(cx, inner.span) {\n-                                    db.span_suggestion_with_applicability(\n+                                    db.span_suggestion(\n                                         e.span,\n                                         \"change this to\",\n                                         snippet,\n@@ -103,7 +103,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n                     \"this pattern creates a reference to a reference\",\n                     |db| {\n                         if let Some(snippet) = snippet_opt(cx, name.span) {\n-                            db.span_suggestion_with_applicability(\n+                            db.span_suggestion(\n                                 pat.span,\n                                 \"change this to\",\n                                 snippet,"}, {"sha": "bf2857d92881451c710a57c109a2bc2da15e6a81", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -82,7 +82,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrowedRef {\n                                    \"this pattern takes a reference on something that is being de-referenced\",\n                                    |db| {\n                                        let hint = snippet(cx, spanned_name.span, \"..\").into_owned();\n-                                       db.span_suggestion_with_applicability(\n+                                       db.span_suggestion(\n                                            pat.span,\n                                            \"try removing the `&ref` part and just keep\",\n                                            hint,"}, {"sha": "73c0ed72d3b454fb7877651cac44d58623b96e38", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -237,15 +237,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                                 }).unwrap());\n                             then {\n                                 let slice_ty = format!(\"&[{}]\", snippet(cx, elem_ty.span, \"_\"));\n-                                db.span_suggestion_with_applicability(\n+                                db.span_suggestion(\n                                     input.span,\n                                     \"consider changing the type to\",\n                                     slice_ty,\n                                     Applicability::Unspecified,\n                                 );\n \n                                 for (span, suggestion) in clone_spans {\n-                                    db.span_suggestion_with_applicability(\n+                                    db.span_suggestion(\n                                         span,\n                                         &snippet_opt(cx, span)\n                                             .map_or(\n@@ -266,15 +266,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                         if match_type(cx, ty, &paths::STRING) {\n                             if let Some(clone_spans) =\n                                 get_spans(cx, Some(body.id()), idx, &[(\"clone\", \".to_string()\"), (\"as_str\", \"\")]) {\n-                                db.span_suggestion_with_applicability(\n+                                db.span_suggestion(\n                                     input.span,\n                                     \"consider changing the type to\",\n                                     \"&str\".to_string(),\n                                     Applicability::Unspecified,\n                                 );\n \n                                 for (span, suggestion) in clone_spans {\n-                                    db.span_suggestion_with_applicability(\n+                                    db.span_suggestion(\n                                         span,\n                                         &snippet_opt(cx, span)\n                                             .map_or("}, {"sha": "50d8b69ffae87ab34b07fc8d32ebab3c5aabec90", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -122,7 +122,7 @@ fn verify_ty_bound<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: ty::Ty<'tcx>, sourc\n         match source {\n             Source::Item { .. } => {\n                 let const_kw_span = span.from_inner_byte_pos(0, 5);\n-                db.span_suggestion_with_applicability(\n+                db.span_suggestion(\n                     const_kw_span,\n                     \"make this a static item\",\n                     \"static\".to_string(),"}, {"sha": "8f4ee74258adaf0b136d56c91a4de112c238015b", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -182,15 +182,15 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: NodeId, opt_body_id:\n                          with non-Vec-based slices.\",\n                         |db| {\n                             if let Some(ref snippet) = ty_snippet {\n-                                db.span_suggestion_with_applicability(\n+                                db.span_suggestion(\n                                     arg.span,\n                                     \"change this to\",\n                                     format!(\"&[{}]\", snippet),\n                                     Applicability::Unspecified,\n                                 );\n                             }\n                             for (clonespan, suggestion) in spans {\n-                                db.span_suggestion_with_applicability(\n+                                db.span_suggestion(\n                                     clonespan,\n                                     &snippet_opt(cx, clonespan).map_or(\"change the call to\".into(), |x| {\n                                         Cow::Owned(format!(\"change `{}` to\", x))\n@@ -210,14 +210,14 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: NodeId, opt_body_id:\n                         arg.span,\n                         \"writing `&String` instead of `&str` involves a new object where a slice will do.\",\n                         |db| {\n-                            db.span_suggestion_with_applicability(\n+                            db.span_suggestion(\n                                 arg.span,\n                                 \"change this to\",\n                                 \"&str\".into(),\n                                 Applicability::Unspecified,\n                             );\n                             for (clonespan, suggestion) in spans {\n-                                db.span_suggestion_short_with_applicability(\n+                                db.span_suggestion_short(\n                                     clonespan,\n                                     &snippet_opt(cx, clonespan).map_or(\"change the call to\".into(), |x| {\n                                         Cow::Owned(format!(\"change `{}` to\", x))\n@@ -250,7 +250,7 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: NodeId, opt_body_id:\n                                 arg.span,\n                                 \"using a reference to `Cow` is not recommended.\",\n                                 |db| {\n-                                    db.span_suggestion_with_applicability(\n+                                    db.span_suggestion(\n                                         arg.span,\n                                         \"change this to\",\n                                         \"&\".to_owned() + &r,"}, {"sha": "cab133943a34a1f3274a1ca5521d06ea380a4dc4", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -92,7 +92,7 @@ impl Pass {\n                         expr.span,\n                         \"this block may be rewritten with the `?` operator\",\n                         |db| {\n-                            db.span_suggestion_with_applicability(\n+                            db.span_suggestion(\n                                 expr.span,\n                                 \"replace_it_with\",\n                                 replacement_str,"}, {"sha": "acd2a3ebc65e1012c08edb02650e5a7fd7c6e945", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -166,14 +166,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         let end = Sugg::hir(cx, y, \"y\");\n                         if let Some(is_wrapped) = &snippet_opt(cx, expr.span) {\n                             if is_wrapped.starts_with('(') && is_wrapped.ends_with(')') {\n-                                db.span_suggestion_with_applicability(\n+                                db.span_suggestion(\n                                     expr.span,\n                                     \"use\",\n                                     format!(\"({}..={})\", start, end),\n                                     Applicability::MaybeIncorrect,\n                                 );\n                             } else {\n-                                db.span_suggestion_with_applicability(\n+                                db.span_suggestion(\n                                     expr.span,\n                                     \"use\",\n                                     format!(\"{}..={}\", start, end),\n@@ -199,7 +199,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     |db| {\n                         let start = start.map_or(String::new(), |x| Sugg::hir(cx, x, \"x\").to_string());\n                         let end = Sugg::hir(cx, y, \"y\");\n-                        db.span_suggestion_with_applicability(\n+                        db.span_suggestion(\n                             expr.span,\n                             \"use\",\n                             format!(\"{}..{}\", start, end),"}, {"sha": "7ac147c8ac17235cb01eef0fbc878df75e182f89", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -202,7 +202,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n                         );\n \n                         span_lint_node_and_then(cx, REDUNDANT_CLONE, node, sugg_span, \"redundant clone\", |db| {\n-                            db.span_suggestion_with_applicability(\n+                            db.span_suggestion(\n                                 sugg_span,\n                                 \"remove this\",\n                                 String::new(),"}, {"sha": "8f833a893dfcaf23bd0d8ef3553f58087197fe36", "filename": "clippy_lints/src/redundant_pattern_matching.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -98,7 +98,7 @@ fn find_sugg_for_if_let<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr,\n             &format!(\"redundant pattern matching, consider using `{}`\", good_method),\n             |db| {\n                 let span = expr.span.to(op.span);\n-                db.span_suggestion_with_applicability(\n+                db.span_suggestion(\n                     span,\n                     \"try this\",\n                     format!(\"if {}.{}\", snippet(cx, op.span, \"_\"), good_method),\n@@ -163,7 +163,7 @@ fn find_sugg_for_match<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, o\n                 &format!(\"redundant pattern matching, consider using `{}`\", good_method),\n                 |db| {\n                     let span = expr.span.to(op.span);\n-                    db.span_suggestion_with_applicability(\n+                    db.span_suggestion(\n                         span,\n                         \"try this\",\n                         format!(\"{}.{}\", snippet(cx, op.span, \"_\"), good_method),"}, {"sha": "71ef3e4bfa035696b7faac541ae3888c054b94c1", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -135,7 +135,7 @@ impl ReturnPass {\n         }\n         span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n             if let Some(snippet) = snippet_opt(cx, inner_span) {\n-                db.span_suggestion_with_applicability(\n+                db.span_suggestion(\n                     ret_span,\n                     \"remove `return` as shown\",\n                     snippet,\n@@ -211,7 +211,7 @@ impl EarlyLintPass for ReturnPass {\n                     (ty.span, Applicability::MaybeIncorrect)\n                 };\n                 span_lint_and_then(cx, UNUSED_UNIT, rspan, \"unneeded unit return type\", |db| {\n-                    db.span_suggestion_with_applicability(\n+                    db.span_suggestion(\n                         rspan,\n                         \"remove the `-> ()`\",\n                         String::new(),\n@@ -231,7 +231,7 @@ impl EarlyLintPass for ReturnPass {\n             then {\n                 let sp = expr.span;\n                 span_lint_and_then(cx, UNUSED_UNIT, sp, \"unneeded unit expression\", |db| {\n-                    db.span_suggestion_with_applicability(\n+                    db.span_suggestion(\n                         sp,\n                         \"remove the final `()`\",\n                         String::new(),\n@@ -247,7 +247,7 @@ impl EarlyLintPass for ReturnPass {\n             ast::ExprKind::Ret(Some(ref expr)) | ast::ExprKind::Break(_, Some(ref expr)) => {\n                 if is_unit_expr(expr) && !in_macro(expr.span) {\n                     span_lint_and_then(cx, UNUSED_UNIT, expr.span, \"unneeded `()`\", |db| {\n-                        db.span_suggestion_with_applicability(\n+                        db.span_suggestion(\n                             expr.span,\n                             \"remove the `()`\",\n                             String::new(),"}, {"sha": "4ce9ce3e2ff21096c31c2335e2fbd901246e7b37", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -179,7 +179,7 @@ impl Pass {\n         let len_expr = Sugg::hir(cx, vec_alloc.len_expr, \"len\");\n \n         span_lint_and_then(cx, lint, slow_fill.span, msg, |db| {\n-            db.span_suggestion_with_applicability(\n+            db.span_suggestion(\n                 vec_alloc.allocation_expr.span,\n                 \"consider replace allocation with\",\n                 format!(\"vec![0; {}]\", len_expr),"}, {"sha": "af7fd11c6e5805740a9002c7baa3bb0ff0373da5", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -142,7 +142,7 @@ fn check_manual_swap(cx: &LateContext<'_, '_>, block: &Block) {\n                                    &format!(\"this looks like you are swapping{} manually\", what),\n                                    |db| {\n                                        if !sugg.is_empty() {\n-                                           db.span_suggestion_with_applicability(\n+                                           db.span_suggestion(\n                                                span,\n                                                \"try\",\n                                                sugg,\n@@ -191,7 +191,7 @@ fn check_suspicious_swap(cx: &LateContext<'_, '_>, block: &Block) {\n                                    &format!(\"this looks like you are trying to swap{}\", what),\n                                    |db| {\n                                        if !what.is_empty() {\n-                                           db.span_suggestion_with_applicability(\n+                                           db.span_suggestion(\n                                                span,\n                                                \"try\",\n                                                format!("}, {"sha": "80bc29a3553a63e8bcd23ee4f9ab09340565aa0f", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -260,7 +260,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                             arg.as_ty(cx.tcx.mk_ptr(rty_and_mut)).as_ty(to_ty)\n                                         };\n \n-                                        db.span_suggestion_with_applicability(\n+                                        db.span_suggestion(\n                                             e.span,\n                                             \"try\",\n                                             sugg.to_string(),\n@@ -276,7 +276,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                 \"transmute from an integer to a pointer\",\n                                 |db| {\n                                     if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n-                                        db.span_suggestion_with_applicability(\n+                                        db.span_suggestion(\n                                             e.span,\n                                             \"try\",\n                                             arg.as_ty(&to_ty.to_string()).to_string(),\n@@ -335,7 +335,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                         arg.as_ty(&format!(\"{} {}\", cast, get_type_snippet(cx, qpath, to_ref_ty)))\n                                     };\n \n-                                    db.span_suggestion_with_applicability(\n+                                    db.span_suggestion(\n                                         e.span,\n                                         \"try\",\n                                         sugg::make_unop(deref, arg).to_string(),\n@@ -356,7 +356,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                         } else {\n                                             arg\n                                         };\n-                                        db.span_suggestion_with_applicability(\n+                                        db.span_suggestion(\n                                             e.span,\n                                             \"consider using\",\n                                             format!(\"std::char::from_u32({}).unwrap()\", arg.to_string()),\n@@ -383,7 +383,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                             e.span,\n                                             &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n                                             |db| {\n-                                                db.span_suggestion_with_applicability(\n+                                                db.span_suggestion(\n                                                     e.span,\n                                                     \"consider using\",\n                                                     format!(\n@@ -416,7 +416,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                                     } else {\n                                                         sugg_paren.addr_deref()\n                                                     };\n-                                                    db.span_suggestion_with_applicability(\n+                                                    db.span_suggestion(\n                                                         e.span,\n                                                         \"try\",\n                                                         sugg.to_string(),\n@@ -436,7 +436,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                 |db| {\n                                     if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n                                         let sugg = arg.as_ty(cx.tcx.mk_ptr(to_ty));\n-                                        db.span_suggestion_with_applicability(\n+                                        db.span_suggestion(\n                                             e.span,\n                                             \"try\",\n                                             sugg.to_string(),\n@@ -454,7 +454,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                     |db| {\n                                         let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n                                         let zero = sugg::Sugg::NonParen(Cow::from(\"0\"));\n-                                        db.span_suggestion_with_applicability(\n+                                        db.span_suggestion(\n                                             e.span,\n                                             \"consider using\",\n                                             sugg::make_binop(ast::BinOpKind::Ne, &arg, &zero).to_string(),\n@@ -478,7 +478,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                     } else {\n                                         arg\n                                     };\n-                                    db.span_suggestion_with_applicability(\n+                                    db.span_suggestion(\n                                         e.span,\n                                         \"consider using\",\n                                         format!(\"{}::from_bits({})\", to_ty, arg.to_string()),"}, {"sha": "af9b1599649dc21d49d906c3efb4fc3d48b86b9a", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -693,7 +693,7 @@ pub fn span_lint_and_sugg<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n     applicability: Applicability,\n ) {\n     span_lint_and_then(cx, lint, sp, msg, |db| {\n-        db.span_suggestion_with_applicability(sp, help, sugg, applicability);\n+        db.span_suggestion(sp, help, sugg, applicability);\n     });\n }\n "}, {"sha": "166470876c988fd718f9fccd0bb2950820feeb92", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a96d6b603b0a55fa14bb91d23c080725a257c04/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=3a96d6b603b0a55fa14bb91d23c080725a257c04", "patch": "@@ -547,7 +547,7 @@ impl<'a, 'b, 'c, T: LintContext<'c>> DiagnosticBuilderExt<'c, T> for rustc_error\n         if let Some(indent) = indentation(cx, item) {\n             let span = item.with_hi(item.lo());\n \n-            self.span_suggestion_with_applicability(span, msg, format!(\"{}\\n{}\", attr, indent), applicability);\n+            self.span_suggestion(span, msg, format!(\"{}\\n{}\", attr, indent), applicability);\n         }\n     }\n \n@@ -568,7 +568,7 @@ impl<'a, 'b, 'c, T: LintContext<'c>> DiagnosticBuilderExt<'c, T> for rustc_error\n                 })\n                 .collect::<String>();\n \n-            self.span_suggestion_with_applicability(span, msg, format!(\"{}\\n{}\", new_item, indent), applicability);\n+            self.span_suggestion(span, msg, format!(\"{}\\n{}\", new_item, indent), applicability);\n         }\n     }\n \n@@ -586,7 +586,7 @@ impl<'a, 'b, 'c, T: LintContext<'c>> DiagnosticBuilderExt<'c, T> for rustc_error\n             }\n         }\n \n-        self.span_suggestion_with_applicability(remove_span, msg, String::new(), applicability);\n+        self.span_suggestion(remove_span, msg, String::new(), applicability);\n     }\n }\n "}]}