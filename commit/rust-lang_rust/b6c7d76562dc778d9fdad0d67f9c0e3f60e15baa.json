{"sha": "b6c7d76562dc778d9fdad0d67f9c0e3f60e15baa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2YzdkNzY1NjJkYzc3OGQ5ZmRhZDBkNjdmOWMwZTNmNjBlMTViYWE=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2016-11-05T12:02:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-05T12:02:29Z"}, "message": "address nits", "tree": {"sha": "49a4aafed37e392e55042a3da1f303752a6ef1b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49a4aafed37e392e55042a3da1f303752a6ef1b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6c7d76562dc778d9fdad0d67f9c0e3f60e15baa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6c7d76562dc778d9fdad0d67f9c0e3f60e15baa", "html_url": "https://github.com/rust-lang/rust/commit/b6c7d76562dc778d9fdad0d67f9c0e3f60e15baa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6c7d76562dc778d9fdad0d67f9c0e3f60e15baa/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "392123552a028bd7e0592c7703f92a8de4872e5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/392123552a028bd7e0592c7703f92a8de4872e5f", "html_url": "https://github.com/rust-lang/rust/commit/392123552a028bd7e0592c7703f92a8de4872e5f"}], "stats": {"total": 7, "additions": 2, "deletions": 5}, "files": [{"sha": "4fe4ac72cbc06f50b2b48b9d058575b40016303b", "filename": "src/interpreter/terminator/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b6c7d76562dc778d9fdad0d67f9c0e3f60e15baa/src%2Finterpreter%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6c7d76562dc778d9fdad0d67f9c0e3f60e15baa/src%2Finterpreter%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fmod.rs?ref=b6c7d76562dc778d9fdad0d67f9c0e3f60e15baa", "patch": "@@ -686,11 +686,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         lval: Lvalue<'tcx>,\n         drop: &mut Vec<(DefId, Value, &'tcx Substs<'tcx>)>,\n     ) -> EvalResult<'tcx, ()> {\n-        // FIXME: some aggregates may be represented by PrimVal::Pair\n-        let (adt_ptr, extra) = match self.force_allocation(lval)? {\n-            Lvalue::Ptr { ptr, extra } => (ptr, extra),\n-            _ => bug!(\"force allocation must yield Lvalue::Ptr\"),\n-        };\n+        // FIXME: some aggregates may be represented by Value::ByValPair\n+        let (adt_ptr, extra) = match self.force_allocation(lval)?.to_ptr_and_extra();\n         // manual iteration, because we need to be careful about the last field if it is unsized\n         while let Some((field_ty, offset)) = fields.next() {\n             let ptr = adt_ptr.offset(offset.bytes() as isize);"}]}