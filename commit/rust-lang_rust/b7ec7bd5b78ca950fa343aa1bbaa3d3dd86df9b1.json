{"sha": "b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZWM3YmQ1Yjc4Y2E5NTBmYTM0M2FhMWJiYWEzZDNkZDg2ZGY5YjE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-06-02T04:07:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-02T04:07:27Z"}, "message": "Rollup merge of #72893 - RalfJung:unleash-tls, r=ecstatic-morse\n\ntest miri-unleash TLS accesses\n\nFinally gets rid of `IS_SUPPORTED_IN_MIRI`. :-)\n\nI also added a test for the new `asm!` while I am at it.\n\nr? @ecstatic-morse Cc @rust-lang/wg-const-eval", "tree": {"sha": "be3cc1f5d71eef69295c572f6b66c9eb3def256a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be3cc1f5d71eef69295c572f6b66c9eb3def256a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe1dB/CRBK7hj4Ov3rIwAAdHIIAHYuhwVgeA9Q5H+U143KFJCY\nx39zZU4rdhtG/w293QX5uDvgVuZz6Ey+UBTn/WfeuLEZcSBdLQKwsOal8KlZ8aJy\n2igTFCUAtSivu+jXIhDepBpkto3iUBXP/iG8t28jFbeQycuUIQxa8jW7JpB2V3Va\n0JgCUWk1FH/xIk1LA1+54RxZt/Z4YkgPdhh+NY8lTJimoe6WJZeJCcH+0GI/wruD\nxYJU85E2AV3zxBoeOKXhHNfmy0gQH4WNbEIlkMvLY8g6F9LhruyN7Xm4yovnaNyu\nPrldu0iq4/btv8mBeLVi/U2ZnIrngKyDYUOZePbgxhiWYUAAdnRF1O5nT/0VSes=\n=gmkm\n-----END PGP SIGNATURE-----\n", "payload": "tree be3cc1f5d71eef69295c572f6b66c9eb3def256a\nparent f38800724906ef7cf879a8b242f1df4f031a4217\nparent 4f30c6893700647a11db84818011603199dc248f\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1591070847 +0900\ncommitter GitHub <noreply@github.com> 1591070847 +0900\n\nRollup merge of #72893 - RalfJung:unleash-tls, r=ecstatic-morse\n\ntest miri-unleash TLS accesses\n\nFinally gets rid of `IS_SUPPORTED_IN_MIRI`. :-)\n\nI also added a test for the new `asm!` while I am at it.\n\nr? @ecstatic-morse Cc @rust-lang/wg-const-eval\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1", "html_url": "https://github.com/rust-lang/rust/commit/b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f38800724906ef7cf879a8b242f1df4f031a4217", "url": "https://api.github.com/repos/rust-lang/rust/commits/f38800724906ef7cf879a8b242f1df4f031a4217", "html_url": "https://github.com/rust-lang/rust/commit/f38800724906ef7cf879a8b242f1df4f031a4217"}, {"sha": "4f30c6893700647a11db84818011603199dc248f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f30c6893700647a11db84818011603199dc248f", "html_url": "https://github.com/rust-lang/rust/commit/4f30c6893700647a11db84818011603199dc248f"}], "stats": {"total": 73, "additions": 58, "deletions": 15}, "files": [{"sha": "1b3ede40f023a002b98182f4f07364035c1fecc0", "filename": "src/librustc_middle/mir/interpret/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs?ref=b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1", "patch": "@@ -523,12 +523,12 @@ impl fmt::Display for UnsupportedOpInfo {\n         match self {\n             Unsupported(ref msg) => write!(f, \"{}\", msg),\n             ReadForeignStatic(did) => {\n-                write!(f, \"cannot read from foreign (extern) static {:?}\", did)\n+                write!(f, \"cannot read from foreign (extern) static ({:?})\", did)\n             }\n             NoMirFor(did) => write!(f, \"no MIR body is available for {:?}\", did),\n             ReadPointerAsBytes => write!(f, \"unable to turn pointer into raw bytes\",),\n             ReadBytesAsPointer => write!(f, \"unable to turn bytes into a pointer\"),\n-            ThreadLocalStatic(did) => write!(f, \"accessing thread local static {:?}\", did),\n+            ThreadLocalStatic(did) => write!(f, \"cannot access thread local static ({:?})\", did),\n         }\n     }\n }"}, {"sha": "92bd740e27aa61dc839259d14ba0041e55ad3004", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1", "patch": "@@ -12,9 +12,6 @@ use super::ConstCx;\n \n /// An operation that is not *always* allowed in a const context.\n pub trait NonConstOp: std::fmt::Debug {\n-    /// Whether this operation can be evaluated by miri.\n-    const IS_SUPPORTED_IN_MIRI: bool = true;\n-\n     /// Returns the `Symbol` corresponding to the feature gate that would enable this operation,\n     /// or `None` if such a feature gate does not exist.\n     fn feature_gate() -> Option<Symbol> {\n@@ -356,8 +353,6 @@ impl NonConstOp for StaticAccess {\n #[derive(Debug)]\n pub struct ThreadLocalAccess;\n impl NonConstOp for ThreadLocalAccess {\n-    const IS_SUPPORTED_IN_MIRI: bool = false;\n-\n     fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n         struct_span_err!(\n             ccx.tcx.sess,"}, {"sha": "1137c813470be3412d6b2c339d5e5a7f6b1435af", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1", "patch": "@@ -244,11 +244,7 @@ impl Validator<'mir, 'tcx> {\n             return;\n         }\n \n-        // If an operation is supported in miri it can be turned on with\n-        // `-Zunleash-the-miri-inside-of-you`.\n-        let is_unleashable = O::IS_SUPPORTED_IN_MIRI;\n-\n-        if is_unleashable && self.tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you {\n+        if self.tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you {\n             self.tcx.sess.miri_unleashed_feature(span, O::feature_gate());\n             return;\n         }"}, {"sha": "aa9b3144f401befa15cd15fb4b7e4d274087385d", "filename": "src/test/ui/consts/miri_unleashed/inline_asm.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs?ref=b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1", "patch": "@@ -1,15 +1,22 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n // only-x86_64\n-#![feature(llvm_asm)]\n+#![feature(asm,llvm_asm)]\n #![allow(const_err)]\n \n fn main() {}\n \n // Make sure we catch executing inline assembly.\n-static TEST_BAD: () = {\n+static TEST_BAD1: () = {\n     unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n     //~^ ERROR could not evaluate static initializer\n     //~| NOTE inline assembly is not supported\n     //~| NOTE in this expansion of llvm_asm!\n     //~| NOTE in this expansion of llvm_asm!\n };\n+\n+// Make sure we catch executing inline assembly.\n+static TEST_BAD2: () = {\n+    unsafe { asm!(\"nop\"); }\n+    //~^ ERROR could not evaluate static initializer\n+    //~| NOTE inline assembly is not supported\n+};"}, {"sha": "d372b4a5d25c0a199804ab744bbff0aeedcc455d", "filename": "src/test/ui/consts/miri_unleashed/inline_asm.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr?ref=b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1", "patch": "@@ -6,15 +6,26 @@ LL |     unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n+error[E0080]: could not evaluate static initializer\n+  --> $DIR/inline_asm.rs:19:14\n+   |\n+LL |     unsafe { asm!(\"nop\"); }\n+   |              ^^^^^^^^^^^^ inline assembly is not supported\n+\n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n   --> $DIR/inline_asm.rs:10:14\n    |\n LL |     unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/inline_asm.rs:19:14\n+   |\n+LL |     unsafe { asm!(\"nop\"); }\n+   |              ^^^^^^^^^^^^\n    = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "ba86a554bbb68615043c8a9b5be888f9cdf0c3bb", "filename": "src/test/ui/consts/miri_unleashed/tls.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.rs?ref=b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1", "patch": "@@ -0,0 +1,17 @@\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n+#![feature(thread_local)]\n+#![allow(const_err)]\n+\n+use std::thread;\n+\n+#[thread_local]\n+static A: u8 = 0;\n+\n+// Make sure we catch accessing thread-local storage.\n+static TEST_BAD: () = {\n+    unsafe { let _val = A; }\n+    //~^ ERROR could not evaluate static initializer\n+    //~| NOTE cannot access thread local static\n+};\n+\n+fn main() {}"}, {"sha": "d3e87f319acdeecbff43f5255950bd57b6f5a6b9", "filename": "src/test/ui/consts/miri_unleashed/tls.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr?ref=b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1", "patch": "@@ -0,0 +1,17 @@\n+error[E0080]: could not evaluate static initializer\n+  --> $DIR/tls.rs:12:25\n+   |\n+LL |     unsafe { let _val = A; }\n+   |                         ^ cannot access thread local static (DefId(0:4 ~ tls[317d]::A[0]))\n+\n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/tls.rs:12:25\n+   |\n+LL |     unsafe { let _val = A; }\n+   |                         ^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0080`."}]}