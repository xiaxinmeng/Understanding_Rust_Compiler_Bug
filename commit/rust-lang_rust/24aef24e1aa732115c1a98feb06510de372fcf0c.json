{"sha": "24aef24e1aa732115c1a98feb06510de372fcf0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YWVmMjRlMWFhNzMyMTE1YzFhOThmZWIwNjUxMGRlMzcyZmNmMGM=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-09-15T08:05:45Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-09-20T17:08:05Z"}, "message": "rustc_metadata: split the Def description of a DefId from item_children.", "tree": {"sha": "8d0d0c1a25a5c14dff75f5bbc3a6dab6c5ca56f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d0d0c1a25a5c14dff75f5bbc3a6dab6c5ca56f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24aef24e1aa732115c1a98feb06510de372fcf0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24aef24e1aa732115c1a98feb06510de372fcf0c", "html_url": "https://github.com/rust-lang/rust/commit/24aef24e1aa732115c1a98feb06510de372fcf0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24aef24e1aa732115c1a98feb06510de372fcf0c/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adddfccf2b63f7969d80d459788e973b56168ec4", "url": "https://api.github.com/repos/rust-lang/rust/commits/adddfccf2b63f7969d80d459788e973b56168ec4", "html_url": "https://github.com/rust-lang/rust/commit/adddfccf2b63f7969d80d459788e973b56168ec4"}], "stats": {"total": 204, "additions": 95, "deletions": 109}, "files": [{"sha": "dbbd5eca4832ea569d1837c93a29cbf2a3a868c1", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/24aef24e1aa732115c1a98feb06510de372fcf0c/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aef24e1aa732115c1a98feb06510de372fcf0c/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=24aef24e1aa732115c1a98feb06510de372fcf0c", "patch": "@@ -96,13 +96,6 @@ pub enum InlinedItemRef<'a> {\n     ImplItem(DefId, &'a hir::ImplItem)\n }\n \n-#[derive(Copy, Clone)]\n-pub struct ChildItem {\n-    pub def: Def,\n-    pub name: ast::Name,\n-    pub vis: ty::Visibility,\n-}\n-\n #[derive(Copy, Clone, Debug)]\n pub struct ExternCrate {\n     /// def_id of an `extern crate` in the current crate that caused\n@@ -128,6 +121,7 @@ pub struct ExternCrate {\n /// can be accessed.\n pub trait CrateStore<'tcx> {\n     // item info\n+    fn describe_def(&self, def: DefId) -> Option<Def>;\n     fn stability(&self, def: DefId) -> Option<attr::Stability>;\n     fn deprecation(&self, def: DefId) -> Option<attr::Deprecation>;\n     fn visibility(&self, def: DefId) -> ty::Visibility;\n@@ -209,7 +203,7 @@ pub trait CrateStore<'tcx> {\n     fn relative_def_path(&self, def: DefId) -> Option<hir_map::DefPath>;\n     fn struct_ctor_def_id(&self, struct_def_id: DefId) -> Option<DefId>;\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>;\n-    fn item_children(&self, did: DefId) -> Vec<ChildItem>;\n+    fn item_children(&self, did: DefId) -> Vec<def::Export>;\n \n     // misc. metadata\n     fn maybe_get_item_ast<'a>(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n@@ -286,6 +280,7 @@ pub struct DummyCrateStore;\n #[allow(unused_variables)]\n impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     // item info\n+    fn describe_def(&self, def: DefId) -> Option<Def> { bug!(\"describe_def\") }\n     fn stability(&self, def: DefId) -> Option<attr::Stability> { bug!(\"stability\") }\n     fn deprecation(&self, def: DefId) -> Option<attr::Deprecation> { bug!(\"deprecation\") }\n     fn visibility(&self, def: DefId) -> ty::Visibility { bug!(\"visibility\") }\n@@ -386,7 +381,7 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     fn struct_ctor_def_id(&self, struct_def_id: DefId) -> Option<DefId>\n         { bug!(\"struct_ctor_def_id\") }\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name> { bug!(\"struct_field_names\") }\n-    fn item_children(&self, did: DefId) -> Vec<ChildItem> { bug!(\"item_children\") }\n+    fn item_children(&self, did: DefId) -> Vec<def::Export> { bug!(\"item_children\") }\n \n     // misc. metadata\n     fn maybe_get_item_ast<'a>(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)"}, {"sha": "8569dbcd50733519f43d1b5ede18d5a2f7e9d080", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/24aef24e1aa732115c1a98feb06510de372fcf0c/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aef24e1aa732115c1a98feb06510de372fcf0c/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=24aef24e1aa732115c1a98feb06510de372fcf0c", "patch": "@@ -13,9 +13,9 @@ use common;\n use encoder;\n use loader;\n \n-use rustc::middle::cstore::{InlinedItem, CrateStore, CrateSource, ChildItem, ExternCrate};\n+use rustc::middle::cstore::{InlinedItem, CrateStore, CrateSource, ExternCrate};\n use rustc::middle::cstore::{NativeLibraryKind, LinkMeta, LinkagePreference};\n-use rustc::hir::def;\n+use rustc::hir::def::{self, Def};\n use rustc::middle::lang_items;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX};\n@@ -37,6 +37,11 @@ use rustc_back::target::Target;\n use rustc::hir;\n \n impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n+    fn describe_def(&self, def: DefId) -> Option<Def> {\n+        self.dep_graph.read(DepNode::MetaData(def));\n+        self.get_crate_data(def.krate).get_def(def.index)\n+    }\n+\n     fn stability(&self, def: DefId) -> Option<attr::Stability> {\n         self.dep_graph.read(DepNode::MetaData(def));\n         self.get_crate_data(def.krate).get_stability(def.index)\n@@ -158,10 +163,8 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     fn impl_or_trait_items(&self, def_id: DefId) -> Vec<DefId> {\n         self.dep_graph.read(DepNode::MetaData(def_id));\n         let mut result = vec![];\n-        let get_crate_data = &mut |cnum| self.get_crate_data(cnum);\n         self.get_crate_data(def_id.krate)\n-            .each_child_of_item(def_id.index, get_crate_data,\n-                                &mut |def, _, _| result.push(def.def_id()));\n+            .each_child_of_item(def_id.index, |child| result.push(child.def_id));\n         result\n     }\n \n@@ -366,20 +369,12 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         self.get_crate_data(def.krate).get_struct_field_names(def.index)\n     }\n \n-    fn item_children(&self, def_id: DefId) -> Vec<ChildItem>\n+    fn item_children(&self, def_id: DefId) -> Vec<def::Export>\n     {\n         self.dep_graph.read(DepNode::MetaData(def_id));\n         let mut result = vec![];\n-        let get_crate_data = &mut |cnum| self.get_crate_data(cnum);\n         self.get_crate_data(def_id.krate)\n-            .each_child_of_item(def_id.index, get_crate_data,\n-                                &mut |def, name, vis| {\n-                result.push(ChildItem {\n-                    def: def,\n-                    name: name,\n-                    vis: vis\n-                });\n-            });\n+            .each_child_of_item(def_id.index, |child| result.push(child));\n         result\n     }\n \n@@ -567,7 +562,6 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         let mut visible_parent_map = self.visible_parent_map.borrow_mut();\n         if !visible_parent_map.is_empty() { return visible_parent_map; }\n \n-        use rustc::middle::cstore::ChildItem;\n         use std::collections::vec_deque::VecDeque;\n         use std::collections::hash_map::Entry;\n         for cnum in (1 .. self.next_crate_num().as_usize()).map(CrateNum::new) {\n@@ -580,12 +574,12 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n             }\n \n             let mut bfs_queue = &mut VecDeque::new();\n-            let mut add_child = |bfs_queue: &mut VecDeque<_>, child: ChildItem, parent: DefId| {\n-                let child = if child.vis == ty::Visibility::Public {\n-                    child.def.def_id()\n-                } else {\n+            let mut add_child = |bfs_queue: &mut VecDeque<_>, child: def::Export, parent: DefId| {\n+                let child = child.def_id;\n+\n+                if self.visibility(child) != ty::Visibility::Public {\n                     return;\n-                };\n+                }\n \n                 match visible_parent_map.entry(child) {\n                     Entry::Occupied(mut entry) => {"}, {"sha": "a34daba700091e19e15cb1bb2ba29f405d2263f0", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 30, "deletions": 32, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/24aef24e1aa732115c1a98feb06510de372fcf0c/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aef24e1aa732115c1a98feb06510de372fcf0c/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=24aef24e1aa732115c1a98feb06510de372fcf0c", "patch": "@@ -23,7 +23,7 @@ use rustc::hir;\n use rustc::hir::intravisit::IdRange;\n \n use rustc::middle::cstore::{InlinedItem, LinkagePreference};\n-use rustc::hir::def::Def;\n+use rustc::hir::def::{self, Def};\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n use rustc::middle::lang_items;\n use rustc::ty::{ImplContainer, TraitContainer};\n@@ -505,6 +505,10 @@ impl<'a, 'tcx> CrateMetadata {\n         self.maybe_get(doc, item_tag::ty).map(|dcx| dcx.typed(tcx).decode())\n     }\n \n+    pub fn get_def(&self, index: DefIndex) -> Option<Def> {\n+        self.item_family(self.entry(index)).to_def(self.local_def_id(index))\n+    }\n+\n     pub fn get_trait_def(&self,\n                          item_id: DefIndex,\n                          tcx: TyCtxt<'a, 'tcx, 'tcx>) -> ty::TraitDef<'tcx> {\n@@ -664,11 +668,8 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     /// Iterates over each child of the given item.\n-    pub fn each_child_of_item<F, G>(&self, id: DefIndex,\n-                                    mut get_crate_data: &mut G,\n-                                    mut callback: &mut F)\n-        where F: FnMut(Def, ast::Name, ty::Visibility),\n-              G: FnMut(CrateNum) -> Rc<CrateMetadata>,\n+    pub fn each_child_of_item<F>(&self, id: DefIndex, mut callback: F)\n+        where F: FnMut(def::Export)\n     {\n         // Find the item.\n         let item_doc = match self.maybe_entry(id) {\n@@ -682,15 +683,31 @@ impl<'a, 'tcx> CrateMetadata {\n         };\n \n         // Iterate over all children.\n-        for child_index in dcx.seq::<DefIndex>() {\n+        for child_index in dcx.seq() {\n             // Get the item.\n             if let Some(child) = self.maybe_entry(child_index) {\n                 // Hand off the item to the callback.\n-                let family = self.item_family(child);\n-                if let Family::ForeignMod = family {\n-                    self.each_child_of_item(child_index, get_crate_data, callback);\n-                } else if let Some(def) = family.to_def(self.local_def_id(child_index)) {\n-                    callback(def, self.item_name(child), self.item_visibility(child));\n+                match self.item_family(child) {\n+                    // FIXME(eddyb) Don't encode these in children.\n+                    Family::ForeignMod => {\n+                        for child_index in self.get(child, item_tag::children).seq() {\n+                            callback(def::Export {\n+                                def_id: self.local_def_id(child_index),\n+                                name: self.item_name(self.entry(child_index))\n+                            });\n+                        }\n+                        continue;\n+                    }\n+                    Family::Impl | Family::DefaultImpl => continue,\n+\n+                    _ => {}\n+                }\n+\n+                if let Some(name) = self.maybe_item_name(child) {\n+                    callback(def::Export {\n+                        def_id: self.local_def_id(child_index),\n+                        name: name\n+                    });\n                 }\n             }\n         }\n@@ -700,26 +717,7 @@ impl<'a, 'tcx> CrateMetadata {\n             _ => return\n         };\n         for exp in reexports {\n-            // This reexport may be in yet another crate.\n-            let crate_data = if exp.def_id.krate == self.cnum {\n-                None\n-            } else {\n-                Some(get_crate_data(exp.def_id.krate))\n-            };\n-            let crate_data = match crate_data {\n-                Some(ref cdata) => &**cdata,\n-                None => self\n-            };\n-\n-            // Get the item.\n-            if let Some(child) = crate_data.maybe_entry(exp.def_id.index) {\n-                // Hand off the item to the callback.\n-                if let Some(def) = self.item_family(child).to_def(exp.def_id) {\n-                    // These items have a public visibility because they're part of\n-                    // a public re-export.\n-                    callback(def, exp.name, ty::Visibility::Public);\n-                }\n-            }\n+            callback(exp);\n         }\n     }\n "}, {"sha": "e690e5198795cb44e7e9e770c4d94356585507ca", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24aef24e1aa732115c1a98feb06510de372fcf0c/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aef24e1aa732115c1a98feb06510de372fcf0c/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=24aef24e1aa732115c1a98feb06510de372fcf0c", "patch": "@@ -373,6 +373,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     fn encode_struct_ctor(&mut self, ctor_def_id: DefId) {\n         self.encode_def_key(ctor_def_id);\n         self.encode_family(Family::Struct);\n+        self.encode_visibility(ty::Visibility::Public);\n         self.encode_bounds_and_type_for_item(ctor_def_id);\n \n         self.encode_stability(ctor_def_id);"}, {"sha": "1714398f2fed08636473759235c6a0d2bffd3d3a", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/24aef24e1aa732115c1a98feb06510de372fcf0c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aef24e1aa732115c1a98feb06510de372fcf0c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=24aef24e1aa732115c1a98feb06510de372fcf0c", "patch": "@@ -21,7 +21,6 @@ use ParentLink::{ModuleParentLink, BlockParentLink};\n use Resolver;\n use {resolve_error, resolve_struct_error, ResolutionError};\n \n-use rustc::middle::cstore::ChildItem;\n use rustc::hir::def::*;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::hir::map::DefPathData;\n@@ -387,10 +386,22 @@ impl<'b> Resolver<'b> {\n     }\n \n     /// Builds the reduced graph for a single item in an external crate.\n-    fn build_reduced_graph_for_external_crate_def(&mut self, parent: Module<'b>, child: ChildItem) {\n-        let def = child.def;\n+    fn build_reduced_graph_for_external_crate_def(&mut self, parent: Module<'b>,\n+                                                  child: Export) {\n+        let def_id = child.def_id;\n         let name = child.name;\n-        let vis = if parent.is_trait() { ty::Visibility::Public } else { child.vis };\n+\n+        let def = if let Some(def) = self.session.cstore.describe_def(def_id) {\n+            def\n+        } else {\n+            return;\n+        };\n+\n+        let vis = if parent.is_trait() {\n+            ty::Visibility::Public\n+        } else {\n+            self.session.cstore.visibility(def_id)\n+        };\n \n         match def {\n             Def::Mod(_) | Def::Enum(..) => {\n@@ -416,7 +427,7 @@ impl<'b> Resolver<'b> {\n                        name);\n                 let _ = self.try_define(parent, name, ValueNS, (def, DUMMY_SP, vis));\n             }\n-            Def::Trait(def_id) => {\n+            Def::Trait(_) => {\n                 debug!(\"(building reduced graph for external crate) building type {}\", name);\n \n                 // If this is a trait, add all the trait item names to the trait\n@@ -443,7 +454,7 @@ impl<'b> Resolver<'b> {\n                 debug!(\"(building reduced graph for external crate) building type {}\", name);\n                 let _ = self.try_define(parent, name, TypeNS, (def, DUMMY_SP, vis));\n             }\n-            Def::Struct(def_id)\n+            Def::Struct(_)\n                 if self.session.cstore.def_key(def_id).disambiguated_data.data !=\n                    DefPathData::StructCtor\n                 => {\n@@ -459,7 +470,7 @@ impl<'b> Resolver<'b> {\n                 let fields = self.session.cstore.struct_field_names(def_id);\n                 self.structs.insert(def_id, fields);\n             }\n-            Def::Union(def_id) => {\n+            Def::Union(_) => {\n                 let _ = self.try_define(parent, name, TypeNS, (def, DUMMY_SP, vis));\n \n                 // Record the def ID and fields of this union."}, {"sha": "34bcd2ba046e91cbaaa967be0b26e5d3fb9e39b2", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/24aef24e1aa732115c1a98feb06510de372fcf0c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aef24e1aa732115c1a98feb06510de372fcf0c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=24aef24e1aa732115c1a98feb06510de372fcf0c", "patch": "@@ -451,27 +451,27 @@ pub fn all_traits<'a>(ccx: &'a CrateCtxt) -> AllTraits<'a> {\n         fn handle_external_def(ccx: &CrateCtxt,\n                                traits: &mut AllTraitsVec,\n                                external_mods: &mut FnvHashSet<DefId>,\n-                               def: Def) {\n-            match def {\n-                Def::Trait(did) => {\n-                    traits.push(TraitInfo::new(did));\n+                               def_id: DefId) {\n+            match ccx.tcx.sess.cstore.describe_def(def_id) {\n+                Some(Def::Trait(_)) => {\n+                    traits.push(TraitInfo::new(def_id));\n                 }\n-                Def::Mod(did) => {\n-                    if !external_mods.insert(did) {\n+                Some(Def::Mod(_)) => {\n+                    if !external_mods.insert(def_id) {\n                         return;\n                     }\n-                    for child in ccx.tcx.sess.cstore.item_children(did) {\n-                        handle_external_def(ccx, traits, external_mods, child.def)\n+                    for child in ccx.tcx.sess.cstore.item_children(def_id) {\n+                        handle_external_def(ccx, traits, external_mods, child.def_id)\n                     }\n                 }\n                 _ => {}\n             }\n         }\n         for cnum in ccx.tcx.sess.cstore.crates() {\n-            handle_external_def(ccx, &mut traits, &mut external_mods, Def::Mod(DefId {\n+            handle_external_def(ccx, &mut traits, &mut external_mods, DefId {\n                 krate: cnum,\n                 index: CRATE_DEF_INDEX\n-            }));\n+            });\n         }\n \n         *ccx.all_traits.borrow_mut() = Some(traits);"}, {"sha": "c4d6ff43eff08051cf2880519baa8d49cd1c6daf", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/24aef24e1aa732115c1a98feb06510de372fcf0c/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aef24e1aa732115c1a98feb06510de372fcf0c/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=24aef24e1aa732115c1a98feb06510de372fcf0c", "patch": "@@ -498,10 +498,12 @@ fn build_module<'a, 'tcx>(cx: &DocContext, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // visit each node at most once.\n         let mut visited = FnvHashSet();\n         for item in tcx.sess.cstore.item_children(did) {\n-            if item.vis == ty::Visibility::Public {\n-                if !visited.insert(item.def) { continue }\n-                if let Some(i) = try_inline_def(cx, tcx, item.def) {\n-                    items.extend(i)\n+            if tcx.sess.cstore.visibility(item.def_id) == ty::Visibility::Public {\n+                if !visited.insert(item.def_id) { continue }\n+                if let Some(def) = tcx.sess.cstore.describe_def(item.def_id) {\n+                    if let Some(i) = try_inline_def(cx, tcx, def) {\n+                        items.extend(i)\n+                    }\n                 }\n             }\n         }"}, {"sha": "9f208b7bed70cfbb1276ff726c776b309038d13d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24aef24e1aa732115c1a98feb06510de372fcf0c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aef24e1aa732115c1a98feb06510de372fcf0c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=24aef24e1aa732115c1a98feb06510de372fcf0c", "patch": "@@ -240,11 +240,7 @@ impl Clean<ExternalCrate> for CrateNum {\n         let root = DefId { krate: self.0, index: CRATE_DEF_INDEX };\n         cx.tcx_opt().map(|tcx| {\n             for item in tcx.sess.cstore.item_children(root) {\n-                let did = match item.def {\n-                    Def::Mod(did) => did,\n-                    _ => continue\n-                };\n-                let attrs = inline::load_attrs(cx, tcx, did);\n+                let attrs = inline::load_attrs(cx, tcx, item.def_id);\n                 PrimitiveType::find(&attrs).map(|prim| primitives.push(prim));\n             }\n         });"}, {"sha": "285b47fe60abf54290b11a5ddf90ba420c7db9c4", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/24aef24e1aa732115c1a98feb06510de372fcf0c/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aef24e1aa732115c1a98feb06510de372fcf0c/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=24aef24e1aa732115c1a98feb06510de372fcf0c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::middle::cstore::{CrateStore, ChildItem};\n+use rustc::middle::cstore::CrateStore;\n use rustc::middle::privacy::{AccessLevels, AccessLevel};\n use rustc::hir::def::Def;\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId};\n@@ -64,38 +64,27 @@ impl<'a, 'b, 'tcx> LibEmbargoVisitor<'a, 'b, 'tcx> {\n         }\n     }\n \n-    pub fn visit_mod(&mut self, did: DefId) {\n-        for item in self.cstore.item_children(did) {\n-            match item.def {\n-                Def::Mod(did) |\n-                Def::Trait(did) |\n-                Def::Struct(did) |\n-                Def::Union(did) |\n-                Def::Enum(did) |\n-                Def::TyAlias(did) |\n-                Def::Fn(did) |\n-                Def::Method(did) |\n-                Def::Static(did, _) |\n-                Def::Const(did) => self.visit_item(did, item),\n-                _ => {}\n-            }\n+    pub fn visit_mod(&mut self, def_id: DefId) {\n+        for item in self.cstore.item_children(def_id) {\n+            self.visit_item(item.def_id);\n         }\n     }\n \n-    fn visit_item(&mut self, did: DefId, item: ChildItem) {\n-        let inherited_item_level = if item.vis == Visibility::Public {\n+    fn visit_item(&mut self, def_id: DefId) {\n+        let vis = self.cstore.visibility(def_id);\n+        let inherited_item_level = if vis == Visibility::Public {\n             self.prev_level\n         } else {\n             None\n         };\n \n-        let item_level = self.update(did, inherited_item_level);\n+        let item_level = self.update(def_id, inherited_item_level);\n \n-        if let Def::Mod(did) = item.def {\n+        if let Some(Def::Mod(_)) = self.cstore.describe_def(def_id) {\n             let orig_level = self.prev_level;\n \n             self.prev_level = item_level;\n-            self.visit_mod(did);\n+            self.visit_mod(def_id);\n             self.prev_level = orig_level;\n         }\n     }"}]}