{"sha": "892df1db60c3c81c57899ef3712b43f63d971b25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MmRmMWRiNjBjM2M4MWM1Nzg5OWVmMzcxMmI0M2Y2M2Q5NzFiMjU=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2017-05-10T16:48:36Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2017-05-20T23:26:34Z"}, "message": "expose needs_drop under mem::", "tree": {"sha": "84723f8fcc70159da2a16dcc3a77ab4692f5b065", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84723f8fcc70159da2a16dcc3a77ab4692f5b065"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/892df1db60c3c81c57899ef3712b43f63d971b25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/892df1db60c3c81c57899ef3712b43f63d971b25", "html_url": "https://github.com/rust-lang/rust/commit/892df1db60c3c81c57899ef3712b43f63d971b25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/892df1db60c3c81c57899ef3712b43f63d971b25/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cda810970186cf01a8134db53b13f8177cc56ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cda810970186cf01a8134db53b13f8177cc56ab", "html_url": "https://github.com/rust-lang/rust/commit/1cda810970186cf01a8134db53b13f8177cc56ab"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "18428d378e3d24fde213900059110830111ccd7e", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/892df1db60c3c81c57899ef3712b43f63d971b25/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/892df1db60c3c81c57899ef3712b43f63d971b25/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=892df1db60c3c81c57899ef3712b43f63d971b25", "patch": "@@ -302,6 +302,58 @@ pub fn align_of_val<T: ?Sized>(val: &T) -> usize {\n     unsafe { intrinsics::min_align_of_val(val) }\n }\n \n+/// Returns whether dropping values of type `T` matters.\n+///\n+/// This is purely an optimization hint, and may be implemented conservatively.\n+/// For instance, always returning `true` would be a valid implementation of\n+/// this function.\n+///\n+/// Low level implementations of things like collections, which need to manually\n+/// drop their data, should use this function to avoid unnecessarily\n+/// trying to drop all their contents when they are destroyed. This might not\n+/// make a difference in release builds (where a loop that has no side-effects\n+/// is easily detected and eliminated), but is often a big win for debug builds.\n+///\n+/// Note that `ptr::drop_in_place` already performs this check, so if your workload\n+/// can be reduced to some small number of drop_in_place calls, using this is\n+/// unnecessary. In particular note that you can drop_in_place a slice, and that\n+/// will do a single needs_drop check for all the values.\n+///\n+/// Types like Vec therefore just `drop_in_place(&mut self[..])` without using\n+/// needs_drop explicitly. Types like HashMap, on the other hand, have to drop\n+/// values one at a time and should use this API.\n+///\n+///\n+/// # Examples\n+///\n+/// Here's an example of how a collection might make use of needs_drop:\n+///\n+/// ```ignore\n+/// #![feature(needs_drop)]\n+/// use std::{mem, ptr};\n+///\n+/// pub struct MyCollection<T> { /* ... */ }\n+///\n+/// impl<T> Drop for MyCollection<T> {\n+///     fn drop(&mut self) {\n+///         unsafe {\n+///             // drop the data\n+///             if mem::needs_drop::<T>() {\n+///                 for x in self.iter_mut() {\n+///                     ptr::drop_in_place(x);\n+///                 }\n+///             }\n+///             self.free_buffer();\n+///         }\n+///     }\n+/// }\n+/// ```\n+#[inline]\n+#[unstable(feature = \"needs_drop\", issue = \"41890\")]\n+pub fn needs_drop<T>() -> bool {\n+    unsafe { intrinsics::needs_drop::<T>() }\n+}\n+\n /// Creates a value whose bytes are all zero.\n ///\n /// This has the same effect as allocating space with"}]}