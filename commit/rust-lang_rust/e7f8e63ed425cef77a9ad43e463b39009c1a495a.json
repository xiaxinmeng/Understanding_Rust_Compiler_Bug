{"sha": "e7f8e63ed425cef77a9ad43e463b39009c1a495a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZjhlNjNlZDQyNWNlZjc3YTlhZDQzZTQ2M2IzOTAwOWMxYTQ5NWE=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2019-01-23T03:55:37Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2019-02-13T14:39:25Z"}, "message": "Convert old doc links to current edition\n\nUse footnote style to bypass the tidy check", "tree": {"sha": "5169884b24613e1704048cf150f8eb081a3ee505", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5169884b24613e1704048cf150f8eb081a3ee505"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7f8e63ed425cef77a9ad43e463b39009c1a495a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7f8e63ed425cef77a9ad43e463b39009c1a495a", "html_url": "https://github.com/rust-lang/rust/commit/e7f8e63ed425cef77a9ad43e463b39009c1a495a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7f8e63ed425cef77a9ad43e463b39009c1a495a/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bba352cad2117f56353d400f71e96eafa2e6bd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bba352cad2117f56353d400f71e96eafa2e6bd7", "html_url": "https://github.com/rust-lang/rust/commit/6bba352cad2117f56353d400f71e96eafa2e6bd7"}], "stats": {"total": 115, "additions": 65, "deletions": 50}, "files": [{"sha": "fd71d3e3c8e79e1030039dc17f587cda6018df3a", "filename": "src/doc/guide-error-handling.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Fdoc%2Fguide-error-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Fdoc%2Fguide-error-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-error-handling.md?ref=e7f8e63ed425cef77a9ad43e463b39009c1a495a", "patch": "@@ -1,4 +1,4 @@\n % Error Handling in Rust\n \n This content has moved into\n-[the Rust Programming Language book](book/error-handling.html).\n+[the Rust Programming Language book](book/ch09-00-error-handling.html)."}, {"sha": "767dafc5baf9208e3927680947fe3da83c493201", "filename": "src/doc/guide-ownership.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Fdoc%2Fguide-ownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Fdoc%2Fguide-ownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-ownership.md?ref=e7f8e63ed425cef77a9ad43e463b39009c1a495a", "patch": "@@ -1,4 +1,4 @@\n % The (old) Rust Ownership Guide\n \n This content has moved into\n-[the Rust Programming Language book](book/ownership.html).\n+[the Rust Programming Language book](book/ch04-00-understanding-ownership.html)."}, {"sha": "bafdb2fe0bbc3790867d1e8a117226f033c298ae", "filename": "src/doc/guide-pointers.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Fdoc%2Fguide-pointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Fdoc%2Fguide-pointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-pointers.md?ref=e7f8e63ed425cef77a9ad43e463b39009c1a495a", "patch": "@@ -2,6 +2,6 @@\n \n This content has been removed, with no direct replacement. Rust only\n has two built-in pointer types now,\n-[references](book/references-and-borrowing.html) and [raw\n+[references](book/ch04-02-references-and-borrowing.html) and [raw\n pointers](book/raw-pointers.html). Older Rusts had many more pointer\n types, they\u2019re gone now."}, {"sha": "28d9fb48b73e74485f6a8b930428a7fbb6db81ef", "filename": "src/doc/guide-testing.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Fdoc%2Fguide-testing.md", "raw_url": "https://github.com/rust-lang/rust/raw/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Fdoc%2Fguide-testing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-testing.md?ref=e7f8e63ed425cef77a9ad43e463b39009c1a495a", "patch": "@@ -1,4 +1,4 @@\n % The (old) Rust Testing Guide\n \n This content has moved into\n-[the Rust Programming Language book](book/testing.html).\n+[the Rust Programming Language book](book/ch11-00-testing.html)."}, {"sha": "b24a442131e2b499772bd7ef33dc764a01b92193", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=e7f8e63ed425cef77a9ad43e463b39009c1a495a", "patch": "@@ -113,9 +113,6 @@ pub const fn identity<T>(x: T) -> T { x }\n /// - Use `Borrow` when the goal is related to writing code that is agnostic to\n ///   the type of borrow and whether it is a reference or value\n ///\n-/// See [the book][book] for a more detailed comparison.\n-///\n-/// [book]: ../../book/first-edition/borrow-and-asref.html\n /// [`Borrow`]: ../../std/borrow/trait.Borrow.html\n ///\n /// **Note: this trait must not fail**. If the conversion can fail, use a\n@@ -348,7 +345,7 @@ pub trait Into<T>: Sized {\n /// [`String`]: ../../std/string/struct.String.html\n /// [`Into<U>`]: trait.Into.html\n /// [`from`]: trait.From.html#tymethod.from\n-/// [book]: ../../book/first-edition/error-handling.html\n+/// [book]: ../../book/ch09-00-error-handling.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait From<T>: Sized {\n     /// Performs the conversion."}, {"sha": "a92131ce84fffa2b2f4dfc2a31648ed3b72bc6f4", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=e7f8e63ed425cef77a9ad43e463b39009c1a495a", "patch": "@@ -78,7 +78,7 @@ impl<T: ?Sized> !Send for *mut T { }\n ///                         // be made into an object\n /// ```\n ///\n-/// [trait object]: ../../book/first-edition/trait-objects.html\n+/// [trait object]: ../../book/ch17-02-trait-objects.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"sized\"]\n #[rustc_on_unimplemented(\n@@ -518,7 +518,7 @@ macro_rules! impls{\n /// types. We track the Rust type using a phantom type parameter on\n /// the struct `ExternalResource` which wraps a handle.\n ///\n-/// [FFI]: ../../book/first-edition/ffi.html\n+/// [FFI]: ../../book/ch19-01-unsafe-rust.html#using-extern-functions-to-call-external-code\n ///\n /// ```\n /// # #![allow(dead_code)]"}, {"sha": "810a1f2fb4a143ba94288e338a464fff0d7ad9b9", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=e7f8e63ed425cef77a9ad43e463b39009c1a495a", "patch": "@@ -298,7 +298,7 @@ pub const fn size_of<T>() -> usize {\n /// then `size_of_val` can be used to get the dynamically-known size.\n ///\n /// [slice]: ../../std/primitive.slice.html\n-/// [trait object]: ../../book/first-edition/trait-objects.html\n+/// [trait object]: ../../book/ch17-02-trait-objects.html\n ///\n /// # Examples\n ///"}, {"sha": "5533dc2c4b1004e41adb21201640ffe03ac7775b", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=e7f8e63ed425cef77a9ad43e463b39009c1a495a", "patch": "@@ -5,7 +5,9 @@\n //! function-like macros `#[proc_macro]`, macro attributes `#[proc_macro_attribute]` and\n //! custom derive attributes`#[proc_macro_derive]`.\n //!\n-//! See [the book](../book/first-edition/procedural-macros.html) for more.\n+//! See [the book] for more.\n+//!\n+//! [the book]: ../book/ch19-06-macros.html#procedural-macros-for-generating-code-from-attributes\n \n #![stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n #![deny(missing_docs)]"}, {"sha": "de647771f9e75812de8dd9d71e374207419203d9", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=e7f8e63ed425cef77a9ad43e463b39009c1a495a", "patch": "@@ -1,3 +1,4 @@\n+// ignore-tidy-linelength\n #![allow(non_snake_case)]\n \n // Error messages for EXXXX errors.\n@@ -406,7 +407,7 @@ fn baz<'a>(x: &'a str, y: &str) -> &str { }\n Lifetime elision in implementation headers was part of the lifetime elision\n RFC. It is, however, [currently unimplemented][iss15872].\n \n-[book-le]: https://doc.rust-lang.org/nightly/book/first-edition/lifetimes.html#lifetime-elision\n+[book-le]: https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-elision\n [iss15872]: https://github.com/rust-lang/rust/issues/15872\n \"##,\n \n@@ -642,7 +643,9 @@ attributes:\n #![no_std]\n ```\n \n-See also https://doc.rust-lang.org/book/first-edition/no-stdlib.html\n+See also the [unstable book][1].\n+\n+[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n \"##,\n \n E0214: r##\"\n@@ -1680,7 +1683,7 @@ fn main() {\n ```\n \n To understand better how closures work in Rust, read:\n-https://doc.rust-lang.org/book/first-edition/closures.html\n+https://doc.rust-lang.org/book/ch13-01-closures.html\n \"##,\n \n E0580: r##\""}, {"sha": "a38601d11f1c15f1039ffa99fec2d63880b4a4e7", "filename": "src/librustc_metadata/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Flibrustc_metadata%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Flibrustc_metadata%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdiagnostics.rs?ref=e7f8e63ed425cef77a9ad43e463b39009c1a495a", "patch": "@@ -35,7 +35,7 @@ extern {}\n ```\n \n See more:\n-https://doc.rust-lang.org/book/first-edition/conditional-compilation.html\n+https://doc.rust-lang.org/reference/attributes.html#conditional-compilation\n \"##,\n \n E0458: r##\""}, {"sha": "7f793134a925842f1994f8e733b6bfac9b244422", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=e7f8e63ed425cef77a9ad43e463b39009c1a495a", "patch": "@@ -690,7 +690,7 @@ fn main() {\n }\n ```\n \n-See also https://doc.rust-lang.org/book/first-edition/unsafe.html\n+See also https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n \"##,\n \n E0373: r##\"\n@@ -873,7 +873,7 @@ that at most one writer or multiple readers can access the data at any one time.\n If you wish to learn more about ownership in Rust, start with the chapter in the\n Book:\n \n-https://doc.rust-lang.org/book/first-edition/ownership.html\n+https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\n \"##,\n \n E0383: r##\"\n@@ -1207,7 +1207,7 @@ let mut a = &mut i;\n \n Please note that in rust, you can either have many immutable references, or one\n mutable reference. Take a look at\n-https://doc.rust-lang.org/stable/book/references-and-borrowing.html for more\n+https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html for more\n information. Example:\n \n \n@@ -1374,7 +1374,7 @@ fn foo(a: &mut i32) {\n ```\n \n For more information on the rust ownership system, take a look at\n-https://doc.rust-lang.org/stable/book/references-and-borrowing.html.\n+https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html.\n \"##,\n \n E0503: r##\"\n@@ -1430,7 +1430,7 @@ fn main() {\n ```\n \n You can find more information about borrowing in the rust-book:\n-http://doc.rust-lang.org/stable/book/references-and-borrowing.html\n+http://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html\n \"##,\n \n E0504: r##\"\n@@ -1614,7 +1614,7 @@ fn main() {\n ```\n \n You can find more information about borrowing in the rust-book:\n-http://doc.rust-lang.org/stable/book/references-and-borrowing.html\n+http://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html\n \"##,\n \n E0506: r##\"\n@@ -1825,7 +1825,7 @@ mem::replace(&mut borrowed.knight, TheDarkKnight).nothing_is_true(); // ok!\n ```\n \n You can find more information about borrowing in the rust-book:\n-http://doc.rust-lang.org/book/first-edition/references-and-borrowing.html\n+http://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html\n \"##,\n \n E0508: r##\""}, {"sha": "0a7a523ca9e1553cbc6d4d282f12c8443abcac8b", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 34, "deletions": 21, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=e7f8e63ed425cef77a9ad43e463b39009c1a495a", "patch": "@@ -1,3 +1,4 @@\n+// ignore-tidy-linelength\n #![allow(non_snake_case)]\n \n register_long_diagnostics! {\n@@ -1543,7 +1544,9 @@ fn f<T>() {}\n \n It is not possible to declare type parameters on a function that has the `start`\n attribute. Such a function must have the following type signature (for more\n-information: http://doc.rust-lang.org/stable/book/first-edition/no-stdlib.html):\n+information, view [the unstable book][1]):\n+\n+[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n \n ```\n # let _:\n@@ -2917,10 +2920,11 @@ impl Baz for Bar { } // Note: This is OK\n \n E0374: r##\"\n A struct without a field containing an unsized type cannot implement\n-`CoerceUnsized`. An\n-[unsized type](https://doc.rust-lang.org/book/first-edition/unsized-types.html)\n-is any type that the compiler doesn't know the length or alignment of at\n-compile time. Any struct containing an unsized type is also unsized.\n+`CoerceUnsized`. An [unsized type][1] is any type that the compiler\n+doesn't know the length or alignment of at compile time. Any struct\n+containing an unsized type is also unsized.\n+\n+[1]: https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait\n \n Example of erroneous code:\n \n@@ -2977,9 +2981,9 @@ A struct with more than one field containing an unsized type cannot implement\n `CoerceUnsized`. This only occurs when you are trying to coerce one of the\n types in your struct to another type in the struct. In this case we try to\n impl `CoerceUnsized` from `T` to `U` which are both types that the struct\n-takes. An [unsized type] is any type that the compiler doesn't know the length\n-or alignment of at compile time. Any struct containing an unsized type is also\n-unsized.\n+takes. An [unsized type][1] is any type that the compiler doesn't know the\n+length or alignment of at compile time. Any struct containing an unsized type\n+is also unsized.\n \n Example of erroneous code:\n \n@@ -3024,19 +3028,20 @@ fn coerce_foo<T: CoerceUnsized<U>, U>(t: T) -> Foo<U> {\n }\n ```\n \n-[unsized type]: https://doc.rust-lang.org/book/first-edition/unsized-types.html\n+[1]: https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait\n \"##,\n \n E0376: r##\"\n The type you are trying to impl `CoerceUnsized` for is not a struct.\n `CoerceUnsized` can only be implemented for a struct. Unsized types are\n already able to be coerced without an implementation of `CoerceUnsized`\n whereas a struct containing an unsized type needs to know the unsized type\n-field it's containing is able to be coerced. An\n-[unsized type](https://doc.rust-lang.org/book/first-edition/unsized-types.html)\n+field it's containing is able to be coerced. An [unsized type][1]\n is any type that the compiler doesn't know the length or alignment of at\n compile time. Any struct containing an unsized type is also unsized.\n \n+[1]: https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait\n+\n Example of erroneous code:\n \n ```compile_fail,E0376\n@@ -3882,8 +3887,10 @@ let c = 86u8 as char; // ok!\n assert_eq!(c, 'V');\n ```\n \n-For more information about casts, take a look at The Book:\n-https://doc.rust-lang.org/book/first-edition/casting-between-types.html\n+For more information about casts, take a look at the Type cast section in\n+[The Reference Book][1].\n+\n+[1]: https://doc.rust-lang.org/reference/expressions/operator-expr.html#type-cast-expressions\n \"##,\n \n E0605: r##\"\n@@ -3911,8 +3918,10 @@ let v = 0 as *const u8;\n v as *const i8; // ok!\n ```\n \n-For more information about casts, take a look at The Book:\n-https://doc.rust-lang.org/book/first-edition/casting-between-types.html\n+For more information about casts, take a look at the Type cast section in\n+[The Reference Book][1].\n+\n+[1]: https://doc.rust-lang.org/reference/expressions/operator-expr.html#type-cast-expressions\n \"##,\n \n E0606: r##\"\n@@ -3933,8 +3942,10 @@ let x = &0u8;\n let y: u32 = *x as u32; // We dereference it first and then cast it.\n ```\n \n-For more information about casts, take a look at The Book:\n-https://doc.rust-lang.org/book/first-edition/casting-between-types.html\n+For more information about casts, take a look at the Type cast section in\n+[The Reference Book][1].\n+\n+[1]: https://doc.rust-lang.org/reference/expressions/operator-expr.html#type-cast-expressions\n \"##,\n \n E0607: r##\"\n@@ -3960,8 +3971,10 @@ pointer holds is their size.\n \n To fix this error, don't try to cast directly between thin and fat pointers.\n \n-For more information about casts, take a look at The Book:\n-https://doc.rust-lang.org/book/first-edition/casting-between-types.html\n+For more information about casts, take a look at the Type cast section in\n+[The Reference Book][1].\n+\n+[1]: https://doc.rust-lang.org/reference/expressions/operator-expr.html#type-cast-expressions\n \"##,\n \n E0609: r##\"\n@@ -4019,8 +4032,8 @@ println!(\"x: {}, y: {}\", variable.x, variable.y);\n ```\n \n For more information about primitives and structs, take a look at The Book:\n-https://doc.rust-lang.org/book/first-edition/primitive-types.html\n-https://doc.rust-lang.org/book/first-edition/structs.html\n+https://doc.rust-lang.org/book/ch03-02-data-types.html\n+https://doc.rust-lang.org/book/ch05-00-structs.html\n \"##,\n \n E0614: r##\""}, {"sha": "dea13c0e8361168965df8cb66ea70e9ec4cdafee", "filename": "src/librustc_typeck/structured_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Flibrustc_typeck%2Fstructured_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Flibrustc_typeck%2Fstructured_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fstructured_errors.rs?ref=e7f8e63ed425cef77a9ad43e463b39009c1a495a", "patch": "@@ -137,7 +137,7 @@ To fix this error, don't try to cast directly between thin and fat\n pointers.\n \n For more information about casts, take a look at The Book:\n-https://doc.rust-lang.org/book/first-edition/casting-between-types.html\");\n+https://doc.rust-lang.org/reference/expressions/operator-expr.html#type-cast-expressions\");\n         err\n     }\n }"}, {"sha": "551e982a3c68566397967b4122bd60829c3bc17e", "filename": "src/libstd/prelude/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Flibstd%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Flibstd%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fmod.rs?ref=e7f8e63ed425cef77a9ad43e463b39009c1a495a", "patch": "@@ -129,10 +129,10 @@\n //! [`std::string`]: ../string/index.html\n //! [`std::vec`]: ../vec/index.html\n //! [`to_owned`]: ../borrow/trait.ToOwned.html#tymethod.to_owned\n-//! [book-closures]: ../../book/first-edition/closures.html\n-//! [book-dtor]: ../../book/first-edition/drop.html\n-//! [book-enums]: ../../book/first-edition/enums.html\n-//! [book-iter]: ../../book/first-edition/iterators.html\n+//! [book-closures]: ../../book/ch13-01-closures.html\n+//! [book-dtor]: ../../book/ch15-03-drop.html\n+//! [book-enums]: ../../book/ch06-01-defining-an-enum.html\n+//! [book-iter]: ../../book/ch13-02-iterators.html\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "d93f8b495d565365a18ec96b0077ad75b24756f6", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f8e63ed425cef77a9ad43e463b39009c1a495a/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=e7f8e63ed425cef77a9ad43e463b39009c1a495a", "patch": "@@ -6,7 +6,7 @@\n //! benchmarks themselves) should be done via the `#[test]` and\n //! `#[bench]` attributes.\n //!\n-//! See the [Testing Chapter](../book/first-edition/testing.html) of the book for more details.\n+//! See the [Testing Chapter](../book/ch11-00-testing.html) of the book for more details.\n \n // Currently, not much of this is meant for users. It is intended to\n // support the simplest interface possible for representing and"}]}