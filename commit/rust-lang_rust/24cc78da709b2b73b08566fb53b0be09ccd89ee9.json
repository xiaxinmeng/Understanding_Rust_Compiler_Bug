{"sha": "24cc78da709b2b73b08566fb53b0be09ccd89ee9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0Y2M3OGRhNzA5YjJiNzNiMDg1NjZmYjUzYjBiZTA5Y2NkODllZTk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-29T00:08:32Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-30T18:20:10Z"}, "message": "Add draft 0.10 release notes", "tree": {"sha": "026e7c5d14eada81422f86c0f5c4493d1d093a3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/026e7c5d14eada81422f86c0f5c4493d1d093a3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24cc78da709b2b73b08566fb53b0be09ccd89ee9", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24cc78da709b2b73b08566fb53b0be09ccd89ee9", "html_url": "https://github.com/rust-lang/rust/commit/24cc78da709b2b73b08566fb53b0be09ccd89ee9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24cc78da709b2b73b08566fb53b0be09ccd89ee9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "940bfb2ce0c08de32d02d8a1ee3844db70e497d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/940bfb2ce0c08de32d02d8a1ee3844db70e497d9", "html_url": "https://github.com/rust-lang/rust/commit/940bfb2ce0c08de32d02d8a1ee3844db70e497d9"}], "stats": {"total": 158, "additions": 158, "deletions": 0}, "files": [{"sha": "fd5b06c9422551af886160a7e8d7163f413c15fe", "filename": "RELEASES.txt", "status": "modified", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/24cc78da709b2b73b08566fb53b0be09ccd89ee9/RELEASES.txt", "raw_url": "https://github.com/rust-lang/rust/raw/24cc78da709b2b73b08566fb53b0be09ccd89ee9/RELEASES.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.txt?ref=24cc78da709b2b73b08566fb53b0be09ccd89ee9", "patch": "@@ -1,3 +1,161 @@\n+Version 0.10 (April 2014)\n+-------------------------\n+\n+  * ~1500 changes, numerous bugfixes\n+\n+  * Language\n+    * A new RFC process is now in place for modifying the language.\n+    * Patterns with `@`-pointers have been removed from the language.\n+    * Patterns with unique vectors have been removed from the language.\n+    * `@str` has been removed from the language.\n+    * `@[T]` has been removed from the language.\n+    * `@self` has been removed from the language.\n+    * `@Trait` has been removed from the language.\n+    * Headers on `~` allocations which contain `@` boxes inside the type for\n+      reference counting have been removed.\n+    * The semantics around the lifetimes of temporary expressions have changed,\n+      see #3511 and #11585 for more information.\n+    * Cross-crate syntax extensions are now possible, but feature gated. See\n+      #11151 for more information. This includes both `macro_rules!` macros as\n+      well as syntax extensions such as `format!`.\n+    * New lint modes have been added, and older ones have been turned on to be\n+      warn-by-default.\n+      * Unnecessary parentheses\n+      * Uppercase statics\n+      * Camel Case types\n+      * Uppercase variables\n+      * Publicly visible private types\n+    * Unsafe functions can no longer be coerced to closures.\n+    * Various obscure macros such as `log_syntax!` are now behind feature gates.\n+    * The #[simd] attribute is now behind a feature gate.\n+    * Visibility is no longer allowed on `extern crate` statements, and\n+      unnecessary visibility (`priv`) is no longer allowed on `use` statements.\n+    * Trailing commas are now allowed in argument lists and tuple patterns.\n+    * The `do` keyword has been removed, it is now a reserved keyword.\n+    * Default type parameters have been implemented, but are feature gated.\n+    * Borrowed variables through captures in closures are now considered soundly.\n+    * `extern mod` is now `extern crate`\n+    * The `Freeze` trait has been removed.\n+    * The `Share` trait has been added for types that can be shared among\n+      threads.\n+    * Labels in macros are now hygienic.\n+    * Expresson/statement macro invocations can be delimited with `{}` now.\n+    * Treatment of types allowed in `static mut` locations has been tweaked.\n+    * The `*` and `.` operators are now overloadable through the `Deref` and\n+      `DerefMut` traits.\n+    * `~Trait` and `proc` no longer have `Send` bounds by default.\n+    * Partial type hints are now supported with the `_` type marker.\n+    * An `Unsafe` type was introduced for interior mutability. It is now\n+      considered undefined to transmute from `&T` to `&mut T` without using the\n+      `Unsafe` type.\n+    * The #[linkage] attribute was implemented for extern statics/functions.\n+    * The inner attribute syntax has changed from `#[foo];` to `#![foo]`.\n+    * `Pod` was renamed to `Copy`.\n+\n+  * Libraries\n+    * The `libextra` library has been removed. It has now been decomposed into\n+      component libraries with smaller and more focused nuggets of\n+      functionality. The full list of libraries can be found on the\n+      documentation index page.\n+    * std: `std::condition` has been removed. All I/O errors are now propagated\n+      through the `Result` type. In order to assist with error handling, a\n+      `try!` macro for unwrapping errors with an early return and an lint for\n+      unused results has been added. See #12039 for more information.\n+    * std: The `vec` module has been renamed to `slice`.\n+    * std: A new vector type, `Vec<T>`, has been added in preparation for DST.\n+      This will become the only growable vector in the future.\n+    * std: `std::io` now has more public-reexports. Types such as `BufferedReader`\n+      are now found at `std::io::BufferedReader` instead of\n+      `std::io::buffered::BufferedReader`.\n+    * std: `print` and `println` are no longer in the prelude, the `print!` and\n+      `println!` macros are intended to be used instead.\n+    * std: `Rc` now has a `Weak` pointer for breaking cycles, and it no longer\n+      attempts to statically prevent cycles.\n+    * std: The standard distribution is adopting the policy of pushing failure\n+      to the user rather than failing in libraries. Many functions (such as\n+      `slice::last()`) now return `Option<T>` instead of `T` + failing.\n+    * std: `fmt::Default` has been renamed to `fmt::Show`, and it now has a new\n+      deriving mode: `#[deriving(Show)]`.\n+    * std: `ToStr` is now implemented for all types implementing `Show`.\n+    * std: The formatting trait methods now take `&self` instead of `&T`\n+    * std: The `invert()` method on iterators has been renamed to `rev()`\n+    * std: `std::num` has seen a reduction in the genericity of its traits,\n+      consolidating functionality into a few core traits.\n+    * std: Backtraces are now printed on task failure if the environment\n+      variable `RUST_BACKTRACE` is present.\n+    * std: Naming conventions for iterators have been standardized. More details\n+      can be found on the wiki's style guide.\n+    * std: `eof()` has been removed from the `Reader` trait. Specific types may\n+      still implement the function.\n+    * std: Networking types are now cloneable to allow simultaneous reads/writes.\n+    * std: `assert_approx_eq!` has been removed\n+    * std: The `e` and `E` formatting specifiers for floats have been added to\n+      print them in exponential notation.\n+    * std: The `Times` trait has been removed\n+    * std: Indications of variance and opting out of builtin bounds is done\n+      through marker types in `std::kinds::marker` now\n+    * std: `hash` has been rewritten, `IterBytes` has been removed, and\n+      `#[deriving(Hash)]` is now possible.\n+    * std: `SharedChan` has been removed, `Sender` is now cloneable.\n+    * std: `Chan` and `Port` were renamed to `Sender` and `Receiver`.\n+    * std: `Chan::new` is now `channel()`.\n+    * std: A new synchronous channel type has been implemented.\n+    * std: A `select!` macro is now provided for selecting over `Receiver`s.\n+    * std: `hashmap` and `trie` have been moved to `libcollections`\n+    * std: `run` has been rolled into `io::process`\n+    * std: `assert_eq!` now uses `{}` instead of `{:?}`\n+    * std: The equality and comparison traits have seen some reorganization.\n+    * std: `rand` has moved to `librand`.\n+    * std: `to_{lower,upper}case` has been implemented for `char`.\n+    * std: Logging has been moved to `liblog`.\n+    * collections: `HashMap` has been rewritten for higher performance and less\n+      memory usage.\n+    * native: The default runtime is now `libnative`. If `libgreen` is desired,\n+      it can be booted manually. The runtime guide has more information and\n+      examples.\n+    * native: All I/O functionality except signals has been implemented.\n+    * green: Task spawning with `libgreen` has been optimized with stack caching\n+      and various trimming of code.\n+    * green: Tasks spawned by `libgreen` now have an unmapped guard page.\n+    * sync: The `extra::sync` module has been updated to modern rust (and moved\n+      to the `sync` library), tweaking and improving various interfaces while\n+      dropping redundant functionality.\n+    * sync: A new `Barrier` type has been added to the `sync` library.\n+    * sync: An efficient mutex for native and green tasks has been implemented.\n+    * serialize: The `base64` module has seen some improvement. It treats\n+      newlines better, has non-string error values, and has seen general\n+      cleanup.\n+    * fourcc: A `fourcc!` macro was introduced\n+    * hexfloat: A `hexfloat!` macro was implemented for specifying floats via a\n+      hexadecimal literal.\n+\n+  * Tooling\n+    * `rustpkg` has been deprecated and removed from the main repository. Its\n+      replacement, `cargo`, is under development.\n+    * Nightly builds of rust are now available (INSERT URL HERE)\n+    * The memory usage of rustc has been improved many times throughout this\n+      release cycle.\n+    * The build process supports disabling rpath support for the rustc binary\n+      itself.\n+    * Code generation has improved in some cases, giving more information to the\n+      LLVM optimization passes to enable more extensive optimizations.\n+    * Debuginfo compatibility with lldb on OSX has been restored.\n+    * The master branch is now gated on an android bot, making building for\n+      android much more reliable.\n+    * Output flags have been centralized into one `--emit` flag.\n+    * Crate type flags have been centralized into one `--crate-type` flag.\n+    * Codegen flags have been consolidated behind a `-C` flag.\n+    * `rustdoc` now implements syntax highlighting and rendering markdown files.\n+    * `rustdoc --test` now tests all code blocks by default.\n+    * `rustdoc` now shows documented macros.\n+    * `rustdoc` inlines documentation for reexported types.\n+    * `rustdoc` search works across crates now.\n+    * Linking against outdated crates now has improved error messages.\n+    * Error messages with lifetimes will often suggest how to annotate the\n+      function to fix the error.\n+    * Many more types are documented in the standard library, and new guides\n+      were written.\n+\n Version 0.9 (January 2014)\n --------------------------\n "}]}