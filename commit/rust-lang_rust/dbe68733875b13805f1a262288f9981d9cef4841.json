{"sha": "dbe68733875b13805f1a262288f9981d9cef4841", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZTY4NzMzODc1YjEzODA1ZjFhMjYyMjg4Zjk5ODFkOWNlZjQ4NDE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-03T02:32:50Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-05T06:33:09Z"}, "message": "resolve: test consistent or-patterns being allowed.", "tree": {"sha": "ca5f5409b6731d1734544c2e56ec9ee1d79d94ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca5f5409b6731d1734544c2e56ec9ee1d79d94ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbe68733875b13805f1a262288f9981d9cef4841", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbe68733875b13805f1a262288f9981d9cef4841", "html_url": "https://github.com/rust-lang/rust/commit/dbe68733875b13805f1a262288f9981d9cef4841", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbe68733875b13805f1a262288f9981d9cef4841/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa7a02b02966d464bb06560c581f92355825fc56", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa7a02b02966d464bb06560c581f92355825fc56", "html_url": "https://github.com/rust-lang/rust/commit/aa7a02b02966d464bb06560c581f92355825fc56"}], "stats": {"total": 170, "additions": 132, "deletions": 38}, "files": [{"sha": "3ebf59c643735f9dd6570dc56b208d8690f2c31d", "filename": "src/test/ui/or-patterns/already-bound-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbe68733875b13805f1a262288f9981d9cef4841/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe68733875b13805f1a262288f9981d9cef4841/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.rs?ref=dbe68733875b13805f1a262288f9981d9cef4841", "patch": "@@ -1,8 +1,8 @@\n // This test ensures that the \"already bound identifier in a product pattern\"\n // correctly accounts for or-patterns.\n \n-#![allow(warnings)]\n #![feature(or_patterns)]\n+//~^ WARN the feature `or_patterns` is incomplete\n \n enum E<T> { A(T, T), B(T) }\n "}, {"sha": "360699a8739384661db650427a08400aea2f9d8c", "filename": "src/test/ui/or-patterns/already-bound-name.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbe68733875b13805f1a262288f9981d9cef4841/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbe68733875b13805f1a262288f9981d9cef4841/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.stderr?ref=dbe68733875b13805f1a262288f9981d9cef4841", "patch": "@@ -82,6 +82,14 @@ error[E0416]: identifier `a` is bound more than once in the same pattern\n LL |     let B(A(a, _) | B(a)) | A(A(a, _) | B(a), A(a, _) | B(a)) = B(B(1));\n    |                                                           ^ used in a pattern more than once\n \n+warning: the feature `or_patterns` is incomplete and may cause the compiler to crash\n+  --> $DIR/already-bound-name.rs:4:12\n+   |\n+LL | #![feature(or_patterns)]\n+   |            ^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n error[E0308]: mismatched types\n   --> $DIR/already-bound-name.rs:33:31\n    |"}, {"sha": "0eb539dca4cba86540957d90630c98df19d92b9a", "filename": "src/test/ui/or-patterns/consistent-bindings.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/dbe68733875b13805f1a262288f9981d9cef4841/src%2Ftest%2Fui%2For-patterns%2Fconsistent-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe68733875b13805f1a262288f9981d9cef4841/src%2Ftest%2Fui%2For-patterns%2Fconsistent-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fconsistent-bindings.rs?ref=dbe68733875b13805f1a262288f9981d9cef4841", "patch": "@@ -0,0 +1,46 @@\n+// Check that or-patterns with consistent bindings across arms are allowed.\n+\n+// edition:2018\n+\n+#![feature(or_patterns)]\n+//~^ WARN the feature `or_patterns` is incomplete\n+\n+fn main() {\n+    // One level:\n+    let Ok(a) | Err(a) = Ok(0);\n+    let Ok(ref a) | Err(ref a) = Ok(0);\n+    let Ok(ref mut a) | Err(ref mut a) = Ok(0);\n+\n+    // Two levels:\n+    enum Tri<S, T, U> { V1(S), V2(T), V3(U) }\n+    use Tri::*;\n+\n+    let Ok((V1(a) | V2(a) | V3(a), b)) | Err(Ok((a, b)) | Err((a, b)))\n+        : Result<_, Result<_, _>>\n+        = Ok((V1(1), 1));\n+\n+    let Ok((V1(a) | V2(a) | V3(a), ref b)) | Err(Ok((a, ref b)) | Err((a, ref b)))\n+        : Result<_, Result<_, _>>\n+        = Ok((V1(1), 1));\n+\n+    // Three levels:\n+    let (\n+            a,\n+            Err((ref mut b, ref c, d)) |\n+            Ok((\n+                Ok(\n+                    V1((ref c, d)) |\n+                    V2((d, ref c)) |\n+                    V3((ref c, Ok((_, d)) | Err((d, _))))\n+                ) |\n+                Err((ref c, d)),\n+                ref mut b\n+            ))\n+        ) =\n+        (1, Ok((Ok(V3((1, Ok((1, 1))))), 1)));\n+\n+    // FIXME(or_patterns; Centril | dlrobertson): remove this line below and\n+    // change this test to check-pass once MIR can handle or-patterns with bindings.\n+    let () = 0;\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "7f5e670c257ce1673d60e04b7d7d7f63ef2376db", "filename": "src/test/ui/or-patterns/consistent-bindings.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dbe68733875b13805f1a262288f9981d9cef4841/src%2Ftest%2Fui%2For-patterns%2Fconsistent-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbe68733875b13805f1a262288f9981d9cef4841/src%2Ftest%2Fui%2For-patterns%2Fconsistent-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fconsistent-bindings.stderr?ref=dbe68733875b13805f1a262288f9981d9cef4841", "patch": "@@ -0,0 +1,20 @@\n+warning: the feature `or_patterns` is incomplete and may cause the compiler to crash\n+  --> $DIR/consistent-bindings.rs:5:12\n+   |\n+LL | #![feature(or_patterns)]\n+   |            ^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0308]: mismatched types\n+  --> $DIR/consistent-bindings.rs:44:9\n+   |\n+LL |     let () = 0;\n+   |         ^^ expected integer, found ()\n+   |\n+   = note: expected type `{integer}`\n+              found type `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "44836893ea2b2b19b2054d16254eda01eec53a26", "filename": "src/test/ui/or-patterns/inconsistent-modes.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe68733875b13805f1a262288f9981d9cef4841/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe68733875b13805f1a262288f9981d9cef4841/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.rs?ref=dbe68733875b13805f1a262288f9981d9cef4841", "patch": "@@ -1,7 +1,9 @@\n // This test ensures that or patterns require binding mode consistency across arms.\n \n #![feature(or_patterns)]\n-#![allow(incomplete_features, non_camel_case_types)]\n+//~^ WARN the feature `or_patterns` is incomplete\n+\n+#![allow(non_camel_case_types)]\n fn main() {\n     // One level:\n     let Ok(a) | Err(ref a): Result<&u8, u8> = Ok(&0);"}, {"sha": "0a36ed5548e5b7f6e3a04d5a4960fa5944ce938e", "filename": "src/test/ui/or-patterns/inconsistent-modes.stderr", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dbe68733875b13805f1a262288f9981d9cef4841/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbe68733875b13805f1a262288f9981d9cef4841/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr?ref=dbe68733875b13805f1a262288f9981d9cef4841", "patch": "@@ -1,55 +1,63 @@\n error[E0409]: variable `a` is bound in inconsistent ways within the same match arm\n-  --> $DIR/inconsistent-modes.rs:7:25\n+  --> $DIR/inconsistent-modes.rs:9:25\n    |\n LL |     let Ok(a) | Err(ref a): Result<&u8, u8> = Ok(&0);\n    |            -            ^ bound in different ways\n    |            |\n    |            first binding\n \n error[E0409]: variable `a` is bound in inconsistent ways within the same match arm\n-  --> $DIR/inconsistent-modes.rs:9:29\n+  --> $DIR/inconsistent-modes.rs:11:29\n    |\n LL |     let Ok(ref mut a) | Err(a): Result<u8, &mut u8> = Ok(0);\n    |                    -        ^ bound in different ways\n    |                    |\n    |                    first binding\n \n error[E0409]: variable `a` is bound in inconsistent ways within the same match arm\n-  --> $DIR/inconsistent-modes.rs:11:33\n+  --> $DIR/inconsistent-modes.rs:13:33\n    |\n LL |     let Ok(ref a) | Err(ref mut a): Result<&u8, &mut u8> = Ok(&0);\n    |                - first binding  ^ bound in different ways\n \n error[E0409]: variable `a` is bound in inconsistent ways within the same match arm\n-  --> $DIR/inconsistent-modes.rs:14:39\n+  --> $DIR/inconsistent-modes.rs:16:39\n    |\n LL |     let Ok((ref a, b)) | Err((ref mut a, ref b)) = Ok((0, &0));\n    |                 - first binding       ^ bound in different ways\n \n error[E0409]: variable `b` is bound in inconsistent ways within the same match arm\n-  --> $DIR/inconsistent-modes.rs:14:46\n+  --> $DIR/inconsistent-modes.rs:16:46\n    |\n LL |     let Ok((ref a, b)) | Err((ref mut a, ref b)) = Ok((0, &0));\n    |                    - first binding           ^ bound in different ways\n \n error[E0409]: variable `a` is bound in inconsistent ways within the same match arm\n-  --> $DIR/inconsistent-modes.rs:20:38\n+  --> $DIR/inconsistent-modes.rs:22:38\n    |\n LL |     let Ok(Ok(a) | Err(a)) | Err(ref a) = Err(0);\n    |                        -             ^ bound in different ways\n    |                        |\n    |                        first binding\n \n error[E0409]: variable `a` is bound in inconsistent ways within the same match arm\n-  --> $DIR/inconsistent-modes.rs:24:34\n+  --> $DIR/inconsistent-modes.rs:26:34\n    |\n LL |     let Ok([ Ok((Ok(ref a) | Err(a),)) | Err(a) ]) | Err(a) = Err(&1);\n    |                         -        ^ bound in different ways\n    |                         |\n    |                         first binding\n \n+warning: the feature `or_patterns` is incomplete and may cause the compiler to crash\n+  --> $DIR/inconsistent-modes.rs:3:12\n+   |\n+LL | #![feature(or_patterns)]\n+   |            ^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n error[E0308]: mismatched types\n-  --> $DIR/inconsistent-modes.rs:11:25\n+  --> $DIR/inconsistent-modes.rs:13:25\n    |\n LL |     let Ok(ref a) | Err(ref mut a): Result<&u8, &mut u8> = Ok(&0);\n    |                         ^^^^^^^^^ types differ in mutability\n@@ -58,7 +66,7 @@ LL |     let Ok(ref a) | Err(ref mut a): Result<&u8, &mut u8> = Ok(&0);\n               found type `&mut &mut u8`\n \n error[E0308]: mismatched types\n-  --> $DIR/inconsistent-modes.rs:14:31\n+  --> $DIR/inconsistent-modes.rs:16:31\n    |\n LL |     let Ok((ref a, b)) | Err((ref mut a, ref b)) = Ok((0, &0));\n    |                               ^^^^^^^^^ types differ in mutability"}, {"sha": "b065028e7a5a4521011c90a84d95b4d469301d9c", "filename": "src/test/ui/or-patterns/missing-bindings.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe68733875b13805f1a262288f9981d9cef4841/src%2Ftest%2Fui%2For-patterns%2Fmissing-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe68733875b13805f1a262288f9981d9cef4841/src%2Ftest%2Fui%2For-patterns%2Fmissing-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fmissing-bindings.rs?ref=dbe68733875b13805f1a262288f9981d9cef4841", "patch": "@@ -3,7 +3,9 @@\n // edition:2018\n \n #![feature(or_patterns)]\n-#![allow(incomplete_features, non_camel_case_types)]\n+//~^ WARN the feature `or_patterns` is incomplete\n+\n+#![allow(non_camel_case_types)]\n \n fn main() {}\n "}, {"sha": "c73af7a42eec0c8a11030beaa1bade5476dd49a3", "filename": "src/test/ui/or-patterns/missing-bindings.stderr", "status": "modified", "additions": 34, "deletions": 26, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/dbe68733875b13805f1a262288f9981d9cef4841/src%2Ftest%2Fui%2For-patterns%2Fmissing-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbe68733875b13805f1a262288f9981d9cef4841/src%2Ftest%2Fui%2For-patterns%2Fmissing-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fmissing-bindings.stderr?ref=dbe68733875b13805f1a262288f9981d9cef4841", "patch": "@@ -1,5 +1,5 @@\n error[E0408]: variable `beta` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:20:9\n+  --> $DIR/missing-bindings.rs:22:9\n    |\n LL |     let alpha | beta | charlie = alpha;\n    |         ^^^^^   ----   ^^^^^^^ pattern doesn't bind `beta`\n@@ -8,167 +8,167 @@ LL |     let alpha | beta | charlie = alpha;\n    |         pattern doesn't bind `beta`\n \n error[E0408]: variable `beta` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:22:14\n+  --> $DIR/missing-bindings.rs:24:14\n    |\n LL |         Some(alpha | beta) => {}\n    |              ^^^^^   ---- variable not in all patterns\n    |              |\n    |              pattern doesn't bind `beta`\n \n error[E0408]: variable `a` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:34:19\n+  --> $DIR/missing-bindings.rs:36:19\n    |\n LL |     let A(a, _) | _ = X;\n    |           -       ^ pattern doesn't bind `a`\n    |           |\n    |           variable not in all patterns\n \n error[E0408]: variable `a` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:35:9\n+  --> $DIR/missing-bindings.rs:37:9\n    |\n LL |     let _ | B(a) = X;\n    |         ^     - variable not in all patterns\n    |         |\n    |         pattern doesn't bind `a`\n \n error[E0408]: variable `a` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:36:9\n+  --> $DIR/missing-bindings.rs:38:9\n    |\n LL |     let A(..) | B(a) = X;\n    |         ^^^^^     - variable not in all patterns\n    |         |\n    |         pattern doesn't bind `a`\n \n error[E0408]: variable `a` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:37:19\n+  --> $DIR/missing-bindings.rs:39:19\n    |\n LL |     let A(a, _) | B(_) = X;\n    |           -       ^^^^ pattern doesn't bind `a`\n    |           |\n    |           variable not in all patterns\n \n error[E0408]: variable `a` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:38:19\n+  --> $DIR/missing-bindings.rs:40:19\n    |\n LL |     let A(_, a) | B(_) = X;\n    |              -    ^^^^ pattern doesn't bind `a`\n    |              |\n    |              variable not in all patterns\n \n error[E0408]: variable `b` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:39:19\n+  --> $DIR/missing-bindings.rs:41:19\n    |\n LL |     let A(a, b) | B(a) = X;\n    |              -    ^^^^ pattern doesn't bind `b`\n    |              |\n    |              variable not in all patterns\n \n error[E0408]: variable `a` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:43:9\n+  --> $DIR/missing-bindings.rs:45:9\n    |\n LL |     let A(A(..) | B(_), _) | B(a) = Y;\n    |         ^^^^^^^^^^^^^^^^^^     - variable not in all patterns\n    |         |\n    |         pattern doesn't bind `a`\n \n error[E0408]: variable `a` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:44:11\n+  --> $DIR/missing-bindings.rs:46:11\n    |\n LL |     let A(A(..) | B(a), _) | B(A(a, _) | B(a)) = Y;\n    |           ^^^^^     - variable not in all patterns\n    |           |\n    |           pattern doesn't bind `a`\n \n error[E0408]: variable `a` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:46:21\n+  --> $DIR/missing-bindings.rs:48:21\n    |\n LL |     let A(A(a, b) | B(c), d) | B(e) = Y;\n    |             -       ^^^^ pattern doesn't bind `a`\n    |             |\n    |             variable not in all patterns\n \n error[E0408]: variable `b` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:46:21\n+  --> $DIR/missing-bindings.rs:48:21\n    |\n LL |     let A(A(a, b) | B(c), d) | B(e) = Y;\n    |                -    ^^^^ pattern doesn't bind `b`\n    |                |\n    |                variable not in all patterns\n \n error[E0408]: variable `c` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:46:11\n+  --> $DIR/missing-bindings.rs:48:11\n    |\n LL |     let A(A(a, b) | B(c), d) | B(e) = Y;\n    |           ^^^^^^^     - variable not in all patterns\n    |           |\n    |           pattern doesn't bind `c`\n \n error[E0408]: variable `a` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:46:32\n+  --> $DIR/missing-bindings.rs:48:32\n    |\n LL |     let A(A(a, b) | B(c), d) | B(e) = Y;\n    |             -                  ^^^^ pattern doesn't bind `a`\n    |             |\n    |             variable not in all patterns\n \n error[E0408]: variable `b` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:46:32\n+  --> $DIR/missing-bindings.rs:48:32\n    |\n LL |     let A(A(a, b) | B(c), d) | B(e) = Y;\n    |                -               ^^^^ pattern doesn't bind `b`\n    |                |\n    |                variable not in all patterns\n \n error[E0408]: variable `c` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:46:32\n+  --> $DIR/missing-bindings.rs:48:32\n    |\n LL |     let A(A(a, b) | B(c), d) | B(e) = Y;\n    |                       -        ^^^^ pattern doesn't bind `c`\n    |                       |\n    |                       variable not in all patterns\n \n error[E0408]: variable `d` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:46:32\n+  --> $DIR/missing-bindings.rs:48:32\n    |\n LL |     let A(A(a, b) | B(c), d) | B(e) = Y;\n    |                           -    ^^^^ pattern doesn't bind `d`\n    |                           |\n    |                           variable not in all patterns\n \n error[E0408]: variable `e` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:46:9\n+  --> $DIR/missing-bindings.rs:48:9\n    |\n LL |     let A(A(a, b) | B(c), d) | B(e) = Y;\n    |         ^^^^^^^^^^^^^^^^^^^^     - variable not in all patterns\n    |         |\n    |         pattern doesn't bind `e`\n \n error[E0408]: variable `a` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:62:29\n+  --> $DIR/missing-bindings.rs:64:29\n    |\n LL |                     Ok(a) | Err(_),\n    |                        -    ^^^^^^ pattern doesn't bind `a`\n    |                        |\n    |                        variable not in all patterns\n \n error[E0408]: variable `a` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:70:21\n+  --> $DIR/missing-bindings.rs:72:21\n    |\n LL |                     A(_, a) |\n    |                          - variable not in all patterns\n LL |                     B(b),\n    |                     ^^^^ pattern doesn't bind `a`\n \n error[E0408]: variable `b` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:69:21\n+  --> $DIR/missing-bindings.rs:71:21\n    |\n LL |                     A(_, a) |\n    |                     ^^^^^^^ pattern doesn't bind `b`\n LL |                     B(b),\n    |                       - variable not in all patterns\n \n error[E0408]: variable `a` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:73:17\n+  --> $DIR/missing-bindings.rs:75:17\n    |\n LL |                     A(_, a) |\n    |                          - variable not in all patterns\n@@ -177,7 +177,7 @@ LL |                 B(_)\n    |                 ^^^^ pattern doesn't bind `a`\n \n error[E0408]: variable `b` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:73:17\n+  --> $DIR/missing-bindings.rs:75:17\n    |\n LL |                     B(b),\n    |                       - variable not in all patterns\n@@ -186,7 +186,7 @@ LL |                 B(_)\n    |                 ^^^^ pattern doesn't bind `b`\n \n error[E0408]: variable `a` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:77:13\n+  --> $DIR/missing-bindings.rs:79:13\n    |\n LL |                 B(Ok(a) | Err(a))\n    |                               - variable not in all patterns\n@@ -198,7 +198,7 @@ LL |             V3(c),\n    |             ^^^^^ pattern doesn't bind `a`\n \n error[E0408]: variable `b` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:58:13\n+  --> $DIR/missing-bindings.rs:60:13\n    |\n LL | /             V1(\n LL | |\n@@ -216,7 +216,7 @@ LL |               V3(c),\n    |               ^^^^^ pattern doesn't bind `b`\n \n error[E0408]: variable `c` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:58:13\n+  --> $DIR/missing-bindings.rs:60:13\n    |\n LL | /             V1(\n LL | |\n@@ -237,6 +237,14 @@ LL | |             ) |\n LL |               V3(c),\n    |                  - variable not in all patterns\n \n+warning: the feature `or_patterns` is incomplete and may cause the compiler to crash\n+  --> $DIR/missing-bindings.rs:5:12\n+   |\n+LL | #![feature(or_patterns)]\n+   |            ^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n error: aborting due to 26 previous errors\n \n For more information about this error, try `rustc --explain E0408`."}]}