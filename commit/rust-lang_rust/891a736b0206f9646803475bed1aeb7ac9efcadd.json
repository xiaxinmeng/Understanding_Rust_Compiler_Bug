{"sha": "891a736b0206f9646803475bed1aeb7ac9efcadd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MWE3MzZiMDIwNmY5NjQ2ODAzNDc1YmVkMWFlYjdhYzllZmNhZGQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-09T23:50:54Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-28T04:53:38Z"}, "message": "Test parsing and recovery of all sorts of range patterns.", "tree": {"sha": "0c6b0aa9b69989d247d3faae751c90a0a78356af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c6b0aa9b69989d247d3faae751c90a0a78356af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/891a736b0206f9646803475bed1aeb7ac9efcadd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/891a736b0206f9646803475bed1aeb7ac9efcadd", "html_url": "https://github.com/rust-lang/rust/commit/891a736b0206f9646803475bed1aeb7ac9efcadd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/891a736b0206f9646803475bed1aeb7ac9efcadd/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6c8234f9f7495310a37c2e1dadc951d268143da", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6c8234f9f7495310a37c2e1dadc951d268143da", "html_url": "https://github.com/rust-lang/rust/commit/f6c8234f9f7495310a37c2e1dadc951d268143da"}], "stats": {"total": 949, "additions": 949, "deletions": 0}, "files": [{"sha": "ffec50c4e831462abe3ffeda484b5f7b41bee717", "filename": "src/test/ui/parser/recover-range-pats.rs", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/891a736b0206f9646803475bed1aeb7ac9efcadd/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/891a736b0206f9646803475bed1aeb7ac9efcadd/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs?ref=891a736b0206f9646803475bed1aeb7ac9efcadd", "patch": "@@ -0,0 +1,159 @@\n+// Here we test all kinds of range patterns in terms of parsing / recovery.\n+// We want to ensure that:\n+// 1. Things parse as they should.\n+// 2. Or at least we have parser recovery if they don't.\n+\n+#![feature(exclusive_range_pattern)]\n+#![deny(ellipsis_inclusive_range_patterns)]\n+\n+fn main() {}\n+\n+const X: u8 = 0;\n+const Y: u8 = 3;\n+\n+fn exclusive_from_to() {\n+    if let 0..3 = 0 {} // OK.\n+    if let 0..Y = 0 {} // OK.\n+    if let X..3 = 0 {} // OK.\n+    if let X..Y = 0 {} // OK.\n+    if let true..Y = 0 {} //~ ERROR only char and numeric types\n+    if let X..true = 0 {} //~ ERROR only char and numeric types\n+    if let .0..Y = 0 {} //~ ERROR mismatched types\n+    //~^ ERROR float literals must have an integer part\n+    if let X.. .0 = 0 {} //~ ERROR mismatched types\n+    //~^ ERROR float literals must have an integer part\n+}\n+\n+fn inclusive_from_to() {\n+    if let 0..=3 = 0 {} // OK.\n+    if let 0..=Y = 0 {} // OK.\n+    if let X..=3 = 0 {} // OK.\n+    if let X..=Y = 0 {} // OK.\n+    if let true..=Y = 0 {} //~ ERROR only char and numeric types\n+    if let X..=true = 0 {} //~ ERROR only char and numeric types\n+    if let .0..=Y = 0 {} //~ ERROR mismatched types\n+    //~^ ERROR float literals must have an integer part\n+    if let X..=.0 = 0 {} //~ ERROR mismatched types\n+    //~^ ERROR float literals must have an integer part\n+}\n+\n+fn inclusive2_from_to() {\n+    if let 0...3 = 0 {} //~ ERROR `...` range patterns are deprecated\n+    if let 0...Y = 0 {} //~ ERROR `...` range patterns are deprecated\n+    if let X...3 = 0 {} //~ ERROR `...` range patterns are deprecated\n+    if let X...Y = 0 {} //~ ERROR `...` range patterns are deprecated\n+    if let true...Y = 0 {} //~ ERROR only char and numeric types\n+    //~^ ERROR `...` range patterns are deprecated\n+    if let X...true = 0 {} //~ ERROR only char and numeric types\n+    //~^ ERROR `...` range patterns are deprecated\n+    if let .0...Y = 0 {} //~ ERROR mismatched types\n+    //~^ ERROR float literals must have an integer part\n+    //~| ERROR `...` range patterns are deprecated\n+    if let X... .0 = 0 {} //~ ERROR mismatched types\n+    //~^ ERROR float literals must have an integer part\n+    //~| ERROR `...` range patterns are deprecated\n+}\n+\n+fn exclusive_from() {\n+    if let 0.. = 0 {} //~ ERROR only char and numeric types\n+    //~^ ERROR arbitrary expressions aren't allowed in patterns\n+    //~| ERROR `X..` range patterns are not supported\n+    if let X.. = 0 {} //~ ERROR only char and numeric types\n+    //~^ ERROR arbitrary expressions aren't allowed in patterns\n+    //~| ERROR `X..` range patterns are not supported\n+    if let true.. = 0 {} //~ ERROR only char and numeric types\n+    //~^ ERROR arbitrary expressions aren't allowed in patterns\n+    //~| ERROR `X..` range patterns are not supported\n+    if let .0.. = 0 {} //~ ERROR only char and numeric types\n+    //~^ ERROR arbitrary expressions aren't allowed in patterns\n+    //~| ERROR `X..` range patterns are not supported\n+    //~| ERROR float literals must have an integer part\n+}\n+\n+fn inclusive_from() {\n+    if let 0..= = 0 {} //~ ERROR only char and numeric types\n+    //~^ ERROR arbitrary expressions aren't allowed in patterns\n+    //~| ERROR `X..=` range patterns are not supported\n+    if let X..= = 0 {} //~ ERROR only char and numeric types\n+    //~^ ERROR arbitrary expressions aren't allowed in patterns\n+    //~| ERROR `X..=` range patterns are not supported\n+    if let true..= = 0 {} //~ ERROR only char and numeric types\n+    //~^ ERROR arbitrary expressions aren't allowed in patterns\n+    //~| ERROR `X..=` range patterns are not supported\n+    if let .0..= = 0 {} //~ ERROR only char and numeric types\n+    //~^ ERROR arbitrary expressions aren't allowed in patterns\n+    //~| ERROR `X..=` range patterns are not supported\n+    //~| ERROR float literals must have an integer part\n+}\n+\n+fn inclusive2_from() {\n+    if let 0... = 0 {} //~ ERROR only char and numeric types\n+    //~^ ERROR arbitrary expressions aren't allowed in patterns\n+    //~| ERROR `X...` range patterns are not supported\n+    //~| ERROR `...` range patterns are deprecated\n+    if let X... = 0 {} //~ ERROR only char and numeric types\n+    //~^ ERROR arbitrary expressions aren't allowed in patterns\n+    //~| ERROR `X...` range patterns are not supported\n+    //~| ERROR `...` range patterns are deprecated\n+    if let true... = 0 {} //~ ERROR only char and numeric types\n+    //~^ ERROR arbitrary expressions aren't allowed in patterns\n+    //~| ERROR `X...` range patterns are not supported\n+    //~| ERROR `...` range patterns are deprecated\n+    if let .0... = 0 {} //~ ERROR only char and numeric types\n+    //~^ ERROR arbitrary expressions aren't allowed in patterns\n+    //~| ERROR `X...` range patterns are not supported\n+    //~| ERROR float literals must have an integer part\n+    //~| ERROR `...` range patterns are deprecated\n+}\n+\n+fn exclusive_to() {\n+    if let ..0 = 0 {} //~ ERROR only char and numeric types\n+    //~^ ERROR arbitrary expressions aren't allowed in patterns\n+    //~| ERROR `..X` range patterns are not supported\n+    if let ..Y = 0 {} //~ ERROR only char and numeric types\n+    //~^ ERROR arbitrary expressions aren't allowed in patterns\n+    //~| ERROR `..X` range patterns are not supported\n+    if let ..true = 0 {} //~ ERROR only char and numeric types\n+    //~^ ERROR arbitrary expressions aren't allowed in patterns\n+    //~| ERROR `..X` range patterns are not supported\n+    if let .. .0 = 0 {} //~ ERROR only char and numeric types\n+    //~^ ERROR arbitrary expressions aren't allowed in patterns\n+    //~| ERROR `..X` range patterns are not supported\n+    //~| ERROR float literals must have an integer part\n+}\n+\n+fn inclusive_to() {\n+    if let ..=3 = 0 {} //~ ERROR only char and numeric types\n+    //~^ ERROR arbitrary expressions aren't allowed in patterns\n+    //~| ERROR `..=X` range patterns are not supported\n+    if let ..=Y = 0 {} //~ ERROR only char and numeric types\n+    //~^ ERROR arbitrary expressions aren't allowed in patterns\n+    //~| ERROR `..=X` range patterns are not supported\n+    if let ..=true = 0 {} //~ ERROR only char and numeric types\n+    //~^ ERROR arbitrary expressions aren't allowed in patterns\n+    //~| ERROR `..=X` range patterns are not supported\n+    if let ..=.0 = 0 {} //~ ERROR only char and numeric types\n+    //~^ ERROR arbitrary expressions aren't allowed in patterns\n+    //~| ERROR `..=X` range patterns are not supported\n+    //~| ERROR float literals must have an integer part\n+}\n+\n+fn inclusive2_to() {\n+    if let ...3 = 0 {} //~ ERROR only char and numeric types\n+    //~^ ERROR arbitrary expressions aren't allowed in patterns\n+    //~| ERROR `...X` range patterns are not supported\n+    //~| ERROR `...` range patterns are deprecated\n+    if let ...Y = 0 {} //~ ERROR only char and numeric types\n+    //~^ ERROR arbitrary expressions aren't allowed in patterns\n+    //~| ERROR `...X` range patterns are not supported\n+    //~| ERROR `...` range patterns are deprecated\n+    if let ...true = 0 {} //~ ERROR only char and numeric types\n+    //~^ ERROR arbitrary expressions aren't allowed in patterns\n+    //~| ERROR `...X` range patterns are not supported\n+    //~| ERROR `...` range patterns are deprecated\n+    if let ....3 = 0 {} //~ ERROR only char and numeric types\n+    //~^ ERROR arbitrary expressions aren't allowed in patterns\n+    //~| ERROR `...X` range patterns are not supported\n+    //~| ERROR float literals must have an integer part\n+    //~| ERROR `...` range patterns are deprecated\n+}"}, {"sha": "a4d321fae8d30e2ff4e059d0813cb9e1af814513", "filename": "src/test/ui/parser/recover-range-pats.stderr", "status": "added", "additions": 790, "deletions": 0, "changes": 790, "blob_url": "https://github.com/rust-lang/rust/blob/891a736b0206f9646803475bed1aeb7ac9efcadd/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/891a736b0206f9646803475bed1aeb7ac9efcadd/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr?ref=891a736b0206f9646803475bed1aeb7ac9efcadd", "patch": "@@ -0,0 +1,790 @@\n+error: float literals must have an integer part\n+  --> $DIR/recover-range-pats.rs:21:12\n+   |\n+LL |     if let .0..Y = 0 {}\n+   |            ^^ help: must have an integer part: `0.0`\n+\n+error: float literals must have an integer part\n+  --> $DIR/recover-range-pats.rs:23:16\n+   |\n+LL |     if let X.. .0 = 0 {}\n+   |                ^^ help: must have an integer part: `0.0`\n+\n+error: float literals must have an integer part\n+  --> $DIR/recover-range-pats.rs:34:12\n+   |\n+LL |     if let .0..=Y = 0 {}\n+   |            ^^ help: must have an integer part: `0.0`\n+\n+error: float literals must have an integer part\n+  --> $DIR/recover-range-pats.rs:36:16\n+   |\n+LL |     if let X..=.0 = 0 {}\n+   |                ^^ help: must have an integer part: `0.0`\n+\n+error: float literals must have an integer part\n+  --> $DIR/recover-range-pats.rs:49:12\n+   |\n+LL |     if let .0...Y = 0 {}\n+   |            ^^ help: must have an integer part: `0.0`\n+\n+error: float literals must have an integer part\n+  --> $DIR/recover-range-pats.rs:52:17\n+   |\n+LL |     if let X... .0 = 0 {}\n+   |                 ^^ help: must have an integer part: `0.0`\n+\n+error: `X..` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:58:12\n+   |\n+LL |     if let 0.. = 0 {}\n+   |            ^^^ help: try using the maximum value for the type: `0..MAX`\n+\n+error: `X..` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:61:12\n+   |\n+LL |     if let X.. = 0 {}\n+   |            ^^^ help: try using the maximum value for the type: `X..MAX`\n+\n+error: `X..` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:64:12\n+   |\n+LL |     if let true.. = 0 {}\n+   |            ^^^^^^ help: try using the maximum value for the type: `true..MAX`\n+\n+error: float literals must have an integer part\n+  --> $DIR/recover-range-pats.rs:67:12\n+   |\n+LL |     if let .0.. = 0 {}\n+   |            ^^ help: must have an integer part: `0.0`\n+\n+error: `X..` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:67:12\n+   |\n+LL |     if let .0.. = 0 {}\n+   |            ^^^^ help: try using the maximum value for the type: `0.0..MAX`\n+\n+error: `X..=` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:74:12\n+   |\n+LL |     if let 0..= = 0 {}\n+   |            ^^^^ help: try using the maximum value for the type: `0..=MAX`\n+\n+error: `X..=` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:77:12\n+   |\n+LL |     if let X..= = 0 {}\n+   |            ^^^^ help: try using the maximum value for the type: `X..=MAX`\n+\n+error: `X..=` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:80:12\n+   |\n+LL |     if let true..= = 0 {}\n+   |            ^^^^^^^ help: try using the maximum value for the type: `true..=MAX`\n+\n+error: float literals must have an integer part\n+  --> $DIR/recover-range-pats.rs:83:12\n+   |\n+LL |     if let .0..= = 0 {}\n+   |            ^^ help: must have an integer part: `0.0`\n+\n+error: `X..=` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:83:12\n+   |\n+LL |     if let .0..= = 0 {}\n+   |            ^^^^^ help: try using the maximum value for the type: `0.0..=MAX`\n+\n+error: `X...` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:90:12\n+   |\n+LL |     if let 0... = 0 {}\n+   |            ^^^^ help: try using the maximum value for the type: `0...MAX`\n+\n+error: `X...` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:94:12\n+   |\n+LL |     if let X... = 0 {}\n+   |            ^^^^ help: try using the maximum value for the type: `X...MAX`\n+\n+error: `X...` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:98:12\n+   |\n+LL |     if let true... = 0 {}\n+   |            ^^^^^^^ help: try using the maximum value for the type: `true...MAX`\n+\n+error: float literals must have an integer part\n+  --> $DIR/recover-range-pats.rs:102:12\n+   |\n+LL |     if let .0... = 0 {}\n+   |            ^^ help: must have an integer part: `0.0`\n+\n+error: `X...` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:102:12\n+   |\n+LL |     if let .0... = 0 {}\n+   |            ^^^^^ help: try using the maximum value for the type: `0.0...MAX`\n+\n+error: `..X` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:110:12\n+   |\n+LL |     if let ..0 = 0 {}\n+   |            ^^^ help: try using the minimum value for the type: `MIN..0`\n+\n+error: `..X` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:113:12\n+   |\n+LL |     if let ..Y = 0 {}\n+   |            ^^^ help: try using the minimum value for the type: `MIN..Y`\n+\n+error: `..X` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:116:12\n+   |\n+LL |     if let ..true = 0 {}\n+   |            ^^^^^^ help: try using the minimum value for the type: `MIN..true`\n+\n+error: float literals must have an integer part\n+  --> $DIR/recover-range-pats.rs:119:15\n+   |\n+LL |     if let .. .0 = 0 {}\n+   |               ^^ help: must have an integer part: `0.0`\n+\n+error: `..X` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:119:12\n+   |\n+LL |     if let .. .0 = 0 {}\n+   |            ^^^^^ help: try using the minimum value for the type: `MIN..0.0`\n+\n+error: `..=X` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:126:12\n+   |\n+LL |     if let ..=3 = 0 {}\n+   |            ^^^^ help: try using the minimum value for the type: `MIN..=3`\n+\n+error: `..=X` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:129:12\n+   |\n+LL |     if let ..=Y = 0 {}\n+   |            ^^^^ help: try using the minimum value for the type: `MIN..=Y`\n+\n+error: `..=X` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:132:12\n+   |\n+LL |     if let ..=true = 0 {}\n+   |            ^^^^^^^ help: try using the minimum value for the type: `MIN..=true`\n+\n+error: float literals must have an integer part\n+  --> $DIR/recover-range-pats.rs:135:15\n+   |\n+LL |     if let ..=.0 = 0 {}\n+   |               ^^ help: must have an integer part: `0.0`\n+\n+error: `..=X` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:135:12\n+   |\n+LL |     if let ..=.0 = 0 {}\n+   |            ^^^^^ help: try using the minimum value for the type: `MIN..=0.0`\n+\n+error: `...X` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:142:12\n+   |\n+LL |     if let ...3 = 0 {}\n+   |            ^^^^ help: try using the minimum value for the type: `MIN...3`\n+\n+error: `...X` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:146:12\n+   |\n+LL |     if let ...Y = 0 {}\n+   |            ^^^^ help: try using the minimum value for the type: `MIN...Y`\n+\n+error: `...X` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:150:12\n+   |\n+LL |     if let ...true = 0 {}\n+   |            ^^^^^^^ help: try using the minimum value for the type: `MIN...true`\n+\n+error: float literals must have an integer part\n+  --> $DIR/recover-range-pats.rs:154:15\n+   |\n+LL |     if let ....3 = 0 {}\n+   |               ^^ help: must have an integer part: `0.3`\n+\n+error: `...X` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:154:12\n+   |\n+LL |     if let ....3 = 0 {}\n+   |            ^^^^^ help: try using the minimum value for the type: `MIN...0.3`\n+\n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/recover-range-pats.rs:58:12\n+   |\n+LL |     if let 0.. = 0 {}\n+   |            ^^^\n+\n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/recover-range-pats.rs:61:12\n+   |\n+LL |     if let X.. = 0 {}\n+   |            ^^^\n+\n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/recover-range-pats.rs:64:12\n+   |\n+LL |     if let true.. = 0 {}\n+   |            ^^^^^^\n+\n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/recover-range-pats.rs:67:12\n+   |\n+LL |     if let .0.. = 0 {}\n+   |            ^^^^\n+\n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/recover-range-pats.rs:74:12\n+   |\n+LL |     if let 0..= = 0 {}\n+   |            ^^^^\n+\n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/recover-range-pats.rs:77:12\n+   |\n+LL |     if let X..= = 0 {}\n+   |            ^^^^\n+\n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/recover-range-pats.rs:80:12\n+   |\n+LL |     if let true..= = 0 {}\n+   |            ^^^^^^^\n+\n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/recover-range-pats.rs:83:12\n+   |\n+LL |     if let .0..= = 0 {}\n+   |            ^^^^^\n+\n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/recover-range-pats.rs:90:12\n+   |\n+LL |     if let 0... = 0 {}\n+   |            ^^^^\n+\n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/recover-range-pats.rs:94:12\n+   |\n+LL |     if let X... = 0 {}\n+   |            ^^^^\n+\n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/recover-range-pats.rs:98:12\n+   |\n+LL |     if let true... = 0 {}\n+   |            ^^^^^^^\n+\n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/recover-range-pats.rs:102:12\n+   |\n+LL |     if let .0... = 0 {}\n+   |            ^^^^^\n+\n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/recover-range-pats.rs:110:12\n+   |\n+LL |     if let ..0 = 0 {}\n+   |            ^^^\n+\n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/recover-range-pats.rs:113:12\n+   |\n+LL |     if let ..Y = 0 {}\n+   |            ^^^\n+\n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/recover-range-pats.rs:116:12\n+   |\n+LL |     if let ..true = 0 {}\n+   |            ^^^^^^\n+\n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/recover-range-pats.rs:119:12\n+   |\n+LL |     if let .. .0 = 0 {}\n+   |            ^^^^^\n+\n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/recover-range-pats.rs:126:12\n+   |\n+LL |     if let ..=3 = 0 {}\n+   |            ^^^^\n+\n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/recover-range-pats.rs:129:12\n+   |\n+LL |     if let ..=Y = 0 {}\n+   |            ^^^^\n+\n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/recover-range-pats.rs:132:12\n+   |\n+LL |     if let ..=true = 0 {}\n+   |            ^^^^^^^\n+\n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/recover-range-pats.rs:135:12\n+   |\n+LL |     if let ..=.0 = 0 {}\n+   |            ^^^^^\n+\n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/recover-range-pats.rs:142:12\n+   |\n+LL |     if let ...3 = 0 {}\n+   |            ^^^^\n+\n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/recover-range-pats.rs:146:12\n+   |\n+LL |     if let ...Y = 0 {}\n+   |            ^^^^\n+\n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/recover-range-pats.rs:150:12\n+   |\n+LL |     if let ...true = 0 {}\n+   |            ^^^^^^^\n+\n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/recover-range-pats.rs:154:12\n+   |\n+LL |     if let ....3 = 0 {}\n+   |            ^^^^^\n+\n+error: `...` range patterns are deprecated\n+  --> $DIR/recover-range-pats.rs:41:13\n+   |\n+LL |     if let 0...3 = 0 {}\n+   |             ^^^ help: use `..=` for an inclusive range\n+   |\n+note: lint level defined here\n+  --> $DIR/recover-range-pats.rs:7:9\n+   |\n+LL | #![deny(ellipsis_inclusive_range_patterns)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `...` range patterns are deprecated\n+  --> $DIR/recover-range-pats.rs:42:13\n+   |\n+LL |     if let 0...Y = 0 {}\n+   |             ^^^ help: use `..=` for an inclusive range\n+\n+error: `...` range patterns are deprecated\n+  --> $DIR/recover-range-pats.rs:43:13\n+   |\n+LL |     if let X...3 = 0 {}\n+   |             ^^^ help: use `..=` for an inclusive range\n+\n+error: `...` range patterns are deprecated\n+  --> $DIR/recover-range-pats.rs:44:13\n+   |\n+LL |     if let X...Y = 0 {}\n+   |             ^^^ help: use `..=` for an inclusive range\n+\n+error: `...` range patterns are deprecated\n+  --> $DIR/recover-range-pats.rs:45:16\n+   |\n+LL |     if let true...Y = 0 {}\n+   |                ^^^ help: use `..=` for an inclusive range\n+\n+error: `...` range patterns are deprecated\n+  --> $DIR/recover-range-pats.rs:47:13\n+   |\n+LL |     if let X...true = 0 {}\n+   |             ^^^ help: use `..=` for an inclusive range\n+\n+error: `...` range patterns are deprecated\n+  --> $DIR/recover-range-pats.rs:49:14\n+   |\n+LL |     if let .0...Y = 0 {}\n+   |              ^^^ help: use `..=` for an inclusive range\n+\n+error: `...` range patterns are deprecated\n+  --> $DIR/recover-range-pats.rs:52:13\n+   |\n+LL |     if let X... .0 = 0 {}\n+   |             ^^^ help: use `..=` for an inclusive range\n+\n+error: `...` range patterns are deprecated\n+  --> $DIR/recover-range-pats.rs:90:13\n+   |\n+LL |     if let 0... = 0 {}\n+   |             ^^^ help: use `..=` for an inclusive range\n+\n+error: `...` range patterns are deprecated\n+  --> $DIR/recover-range-pats.rs:94:13\n+   |\n+LL |     if let X... = 0 {}\n+   |             ^^^ help: use `..=` for an inclusive range\n+\n+error: `...` range patterns are deprecated\n+  --> $DIR/recover-range-pats.rs:98:16\n+   |\n+LL |     if let true... = 0 {}\n+   |                ^^^ help: use `..=` for an inclusive range\n+\n+error: `...` range patterns are deprecated\n+  --> $DIR/recover-range-pats.rs:102:14\n+   |\n+LL |     if let .0... = 0 {}\n+   |              ^^^ help: use `..=` for an inclusive range\n+\n+error: `...` range patterns are deprecated\n+  --> $DIR/recover-range-pats.rs:142:12\n+   |\n+LL |     if let ...3 = 0 {}\n+   |            ^^^ help: use `..=` for an inclusive range\n+\n+error: `...` range patterns are deprecated\n+  --> $DIR/recover-range-pats.rs:146:12\n+   |\n+LL |     if let ...Y = 0 {}\n+   |            ^^^ help: use `..=` for an inclusive range\n+\n+error: `...` range patterns are deprecated\n+  --> $DIR/recover-range-pats.rs:150:12\n+   |\n+LL |     if let ...true = 0 {}\n+   |            ^^^ help: use `..=` for an inclusive range\n+\n+error: `...` range patterns are deprecated\n+  --> $DIR/recover-range-pats.rs:154:12\n+   |\n+LL |     if let ....3 = 0 {}\n+   |            ^^^ help: use `..=` for an inclusive range\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:19:12\n+   |\n+LL |     if let true..Y = 0 {}\n+   |            ^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: bool\n+   = note: end type: u8\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:20:15\n+   |\n+LL |     if let X..true = 0 {}\n+   |               ^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: u8\n+   = note: end type: bool\n+\n+error[E0308]: mismatched types\n+  --> $DIR/recover-range-pats.rs:21:12\n+   |\n+LL |     if let .0..Y = 0 {}\n+   |            ^^^^^ expected integer, found floating-point number\n+   |\n+   = note: expected type `{integer}`\n+              found type `{float}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/recover-range-pats.rs:23:12\n+   |\n+LL |     if let X.. .0 = 0 {}\n+   |            ^^^^^^ expected integer, found floating-point number\n+   |\n+   = note: expected type `u8`\n+              found type `{float}`\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:32:12\n+   |\n+LL |     if let true..=Y = 0 {}\n+   |            ^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: bool\n+   = note: end type: u8\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:33:16\n+   |\n+LL |     if let X..=true = 0 {}\n+   |                ^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: u8\n+   = note: end type: bool\n+\n+error[E0308]: mismatched types\n+  --> $DIR/recover-range-pats.rs:34:12\n+   |\n+LL |     if let .0..=Y = 0 {}\n+   |            ^^^^^^ expected integer, found floating-point number\n+   |\n+   = note: expected type `{integer}`\n+              found type `{float}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/recover-range-pats.rs:36:12\n+   |\n+LL |     if let X..=.0 = 0 {}\n+   |            ^^^^^^ expected integer, found floating-point number\n+   |\n+   = note: expected type `u8`\n+              found type `{float}`\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:45:12\n+   |\n+LL |     if let true...Y = 0 {}\n+   |            ^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: bool\n+   = note: end type: u8\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:47:16\n+   |\n+LL |     if let X...true = 0 {}\n+   |                ^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: u8\n+   = note: end type: bool\n+\n+error[E0308]: mismatched types\n+  --> $DIR/recover-range-pats.rs:49:12\n+   |\n+LL |     if let .0...Y = 0 {}\n+   |            ^^^^^^ expected integer, found floating-point number\n+   |\n+   = note: expected type `{integer}`\n+              found type `{float}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/recover-range-pats.rs:52:12\n+   |\n+LL |     if let X... .0 = 0 {}\n+   |            ^^^^^^^ expected integer, found floating-point number\n+   |\n+   = note: expected type `u8`\n+              found type `{float}`\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:58:12\n+   |\n+LL |     if let 0.. = 0 {}\n+   |            ^^^ ranges require char or numeric types\n+   |\n+   = note: start type: {integer}\n+   = note: end type: [type error]\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:61:12\n+   |\n+LL |     if let X.. = 0 {}\n+   |            ^^^ ranges require char or numeric types\n+   |\n+   = note: start type: u8\n+   = note: end type: [type error]\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:64:12\n+   |\n+LL |     if let true.. = 0 {}\n+   |            ^^^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: bool\n+   = note: end type: [type error]\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:67:12\n+   |\n+LL |     if let .0.. = 0 {}\n+   |            ^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: {float}\n+   = note: end type: [type error]\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:74:12\n+   |\n+LL |     if let 0..= = 0 {}\n+   |            ^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: {integer}\n+   = note: end type: [type error]\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:77:12\n+   |\n+LL |     if let X..= = 0 {}\n+   |            ^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: u8\n+   = note: end type: [type error]\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:80:12\n+   |\n+LL |     if let true..= = 0 {}\n+   |            ^^^^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: bool\n+   = note: end type: [type error]\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:83:12\n+   |\n+LL |     if let .0..= = 0 {}\n+   |            ^^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: {float}\n+   = note: end type: [type error]\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:90:12\n+   |\n+LL |     if let 0... = 0 {}\n+   |            ^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: {integer}\n+   = note: end type: [type error]\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:94:12\n+   |\n+LL |     if let X... = 0 {}\n+   |            ^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: u8\n+   = note: end type: [type error]\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:98:12\n+   |\n+LL |     if let true... = 0 {}\n+   |            ^^^^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: bool\n+   = note: end type: [type error]\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:102:12\n+   |\n+LL |     if let .0... = 0 {}\n+   |            ^^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: {float}\n+   = note: end type: [type error]\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:110:12\n+   |\n+LL |     if let ..0 = 0 {}\n+   |            ^^^ ranges require char or numeric types\n+   |\n+   = note: start type: [type error]\n+   = note: end type: {integer}\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:113:12\n+   |\n+LL |     if let ..Y = 0 {}\n+   |            ^^^ ranges require char or numeric types\n+   |\n+   = note: start type: [type error]\n+   = note: end type: u8\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:116:12\n+   |\n+LL |     if let ..true = 0 {}\n+   |            ^^^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: [type error]\n+   = note: end type: bool\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:119:12\n+   |\n+LL |     if let .. .0 = 0 {}\n+   |            ^^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: [type error]\n+   = note: end type: {float}\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:126:12\n+   |\n+LL |     if let ..=3 = 0 {}\n+   |            ^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: [type error]\n+   = note: end type: {integer}\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:129:12\n+   |\n+LL |     if let ..=Y = 0 {}\n+   |            ^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: [type error]\n+   = note: end type: u8\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:132:12\n+   |\n+LL |     if let ..=true = 0 {}\n+   |            ^^^^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: [type error]\n+   = note: end type: bool\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:135:12\n+   |\n+LL |     if let ..=.0 = 0 {}\n+   |            ^^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: [type error]\n+   = note: end type: {float}\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:142:12\n+   |\n+LL |     if let ...3 = 0 {}\n+   |            ^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: [type error]\n+   = note: end type: {integer}\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:146:12\n+   |\n+LL |     if let ...Y = 0 {}\n+   |            ^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: [type error]\n+   = note: end type: u8\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:150:12\n+   |\n+LL |     if let ...true = 0 {}\n+   |            ^^^^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: [type error]\n+   = note: end type: bool\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/recover-range-pats.rs:154:12\n+   |\n+LL |     if let ....3 = 0 {}\n+   |            ^^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: [type error]\n+   = note: end type: {float}\n+\n+error: aborting due to 112 previous errors\n+\n+Some errors have detailed explanations: E0029, E0308.\n+For more information about an error, try `rustc --explain E0029`."}]}