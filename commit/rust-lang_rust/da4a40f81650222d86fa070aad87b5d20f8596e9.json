{"sha": "da4a40f81650222d86fa070aad87b5d20f8596e9", "node_id": "C_kwDOAAsO6NoAKGRhNGE0MGY4MTY1MDIyMmQ4NmZhMDcwYWFkODdiNWQyMGY4NTk2ZTk", "commit": {"author": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-10-25T00:27:27Z"}, "committer": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-11-07T09:35:25Z"}, "message": "Remove copy of current const prop tests and add a few new tests", "tree": {"sha": "44219710224634bc18b6c26d235715145b3d8e4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44219710224634bc18b6c26d235715145b3d8e4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da4a40f81650222d86fa070aad87b5d20f8596e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da4a40f81650222d86fa070aad87b5d20f8596e9", "html_url": "https://github.com/rust-lang/rust/commit/da4a40f81650222d86fa070aad87b5d20f8596e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da4a40f81650222d86fa070aad87b5d20f8596e9/comments", "author": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f82a9f89e3c0388442835df632b56ccea08a971", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f82a9f89e3c0388442835df632b56ccea08a971", "html_url": "https://github.com/rust-lang/rust/commit/1f82a9f89e3c0388442835df632b56ccea08a971"}], "stats": {"total": 2753, "additions": 253, "deletions": 2500}, "files": [{"sha": "8c99fc95eb1d86b893785fa2a16bb2007a430464", "filename": "src/test/mir-opt/dataflow-const-prop/checked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.rs?ref=da4a40f81650222d86fa070aad87b5d20f8596e9", "patch": "@@ -1,5 +1,5 @@\n // unit-test: DataflowConstProp\n-// compile-flags: -C overflow-checks=on\n+// compile-flags: -Zunsound-mir-opts -Coverflow-checks=on\n \n // EMIT_MIR checked.main.DataflowConstProp.diff\n #[allow(arithmetic_overflow)]"}, {"sha": "bf4557ed3d92c18f586b0a58a34bb73b2b2ced3a", "filename": "src/test/mir-opt/dataflow-const-prop/inherit_overflow.main.DataflowConstProp.diff", "status": "renamed", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.diff?ref=da4a40f81650222d86fa070aad87b5d20f8596e9", "patch": "@@ -2,13 +2,13 @@\n + // MIR for `main` after DataflowConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inherit_overflow_checks_use.rs:+0:11: +0:11\n-      let mut _1: u8;                      // in scope 0 at $DIR/inherit_overflow_checks_use.rs:+3:13: +3:47\n-      let mut _2: u8;                      // in scope 0 at $DIR/inherit_overflow_checks_use.rs:+3:13: +3:47\n-      let mut _3: u8;                      // in scope 0 at $DIR/inherit_overflow_checks_use.rs:+3:13: +3:47\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inherit_overflow.rs:+0:11: +0:11\n+      let mut _1: u8;                      // in scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+      let mut _2: u8;                      // in scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+      let mut _3: u8;                      // in scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n       scope 1 {\n       }\n-      scope 2 (inlined <u8 as Add>::add) { // at $DIR/inherit_overflow_checks_use.rs:7:13: 7:47\n+      scope 2 (inlined <u8 as Add>::add) { // at $DIR/inherit_overflow.rs:7:13: 7:47\n           debug self => _2;                // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n           debug other => _3;               // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n           let mut _4: u8;                  // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n@@ -17,11 +17,11 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inherit_overflow_checks_use.rs:+3:13: +3:47\n-          StorageLive(_2);                 // scope 0 at $DIR/inherit_overflow_checks_use.rs:+3:13: +3:47\n-          _2 = const u8::MAX;              // scope 0 at $DIR/inherit_overflow_checks_use.rs:+3:13: +3:47\n-          StorageLive(_3);                 // scope 0 at $DIR/inherit_overflow_checks_use.rs:+3:13: +3:47\n-          _3 = const 1_u8;                 // scope 0 at $DIR/inherit_overflow_checks_use.rs:+3:13: +3:47\n+          StorageLive(_1);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+          StorageLive(_2);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+          _2 = const u8::MAX;              // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+          StorageLive(_3);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+          _3 = const 1_u8;                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n           StorageLive(_4);                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n           _4 = const u8::MAX;              // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n           StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n@@ -35,11 +35,11 @@\n +         _1 = const 0_u8;                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n           StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n           StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          StorageDead(_3);                 // scope 0 at $DIR/inherit_overflow_checks_use.rs:+3:13: +3:47\n-          StorageDead(_2);                 // scope 0 at $DIR/inherit_overflow_checks_use.rs:+3:13: +3:47\n-          StorageDead(_1);                 // scope 0 at $DIR/inherit_overflow_checks_use.rs:+3:47: +3:48\n-          nop;                             // scope 0 at $DIR/inherit_overflow_checks_use.rs:+0:11: +4:2\n-          return;                          // scope 0 at $DIR/inherit_overflow_checks_use.rs:+4:2: +4:2\n+          StorageDead(_3);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+          StorageDead(_2);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+          StorageDead(_1);                 // scope 0 at $DIR/inherit_overflow.rs:+3:47: +3:48\n+          nop;                             // scope 0 at $DIR/inherit_overflow.rs:+0:11: +4:2\n+          return;                          // scope 0 at $DIR/inherit_overflow.rs:+4:2: +4:2\n       }\n   }\n   ", "previous_filename": "src/test/mir-opt/dataflow-const-prop/inherit_overflow_checks_use.main.DataflowConstProp.diff"}, {"sha": "3f6329dfd1d1698f0386bef366688fd71163be80", "filename": "src/test/mir-opt/dataflow-const-prop/inherit_overflow.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.rs?ref=da4a40f81650222d86fa070aad87b5d20f8596e9", "patch": "@@ -1,6 +1,6 @@\n-// compile-flags: -C overflow-checks=off\n+// compile-flags: -Coverflow-checks=off -Zunsound-mir-opts\n \n-// EMIT_MIR inherit_overflow_checks_use.main.DataflowConstProp.diff\n+// EMIT_MIR inherit_overflow.main.DataflowConstProp.diff\n fn main() {\n     // After inlining, this will contain a `CheckedBinaryOp`. The overflow\n     // must be ignored by the constant propagation to avoid triggering a panic.", "previous_filename": "src/test/mir-opt/dataflow-const-prop/inherit_overflow_checks_use.rs"}, {"sha": "2829d32c905c8faf98d3de2b4ae5434592aa37d1", "filename": "src/test/mir-opt/dataflow-const-prop/issue_81605.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fissue_81605.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fissue_81605.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fissue_81605.rs?ref=da4a40f81650222d86fa070aad87b5d20f8596e9", "patch": "@@ -1,4 +1,5 @@\n // unit-test: DataflowConstProp\n+// compile-flags: -Zunsound-mir-opts\n \n // EMIT_MIR issue_81605.f.DataflowConstProp.diff\n fn f() -> usize {"}, {"sha": "8c35b5ca4203aa584fcce27f2cef762e5ebff02f", "filename": "src/test/mir-opt/dataflow-const-prop/previous/aggregate.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Faggregate.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Faggregate.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Faggregate.main.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,32 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/aggregate.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n-      let mut _2: i32;                     // in scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n-      let mut _3: (i32, i32, i32);         // in scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n-      scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/aggregate.rs:+1:9: +1:10\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n-          StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n-          Deinit(_3);                      // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n-          (_3.0: i32) = const 0_i32;       // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n-          (_3.1: i32) = const 1_i32;       // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n-          (_3.2: i32) = const 2_i32;       // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n--         _2 = (_3.1: i32);                // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n--         _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/aggregate.rs:+1:13: +1:28\n-+         _2 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n-+         _1 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+1:13: +1:28\n-          StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:+1:27: +1:28\n-          StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:+1:28: +1:29\n-          _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/aggregate.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/aggregate.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "bdfa922cf5cafe74964188eff9bf0ee98b60d8d8", "filename": "src/test/mir-opt/dataflow-const-prop/previous/aggregate.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Faggregate.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,7 +0,0 @@\n-// unit-test: DataflowConstProp\n-// compile-flags: -O\n-\n-// EMIT_MIR aggregate.main.DataflowConstProp.diff\n-fn main() {\n-    let x = (0, 1, 2).1 + 0;\n-}"}, {"sha": "00eb9d0e2006a0844942ec12be242b07eb14be6f", "filename": "src/test/mir-opt/dataflow-const-prop/previous/array_index.main.DataflowConstProp.32bit.diff", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Farray_index.main.DataflowConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Farray_index.main.DataflowConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Farray_index.main.DataflowConstProp.32bit.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,37 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/array_index.rs:+0:11: +0:11\n-      let _1: u32;                         // in scope 0 at $DIR/array_index.rs:+1:9: +1:10\n-      let mut _2: [u32; 4];                // in scope 0 at $DIR/array_index.rs:+1:18: +1:30\n-      let _3: usize;                       // in scope 0 at $DIR/array_index.rs:+1:31: +1:32\n-      let mut _4: usize;                   // in scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-      let mut _5: bool;                    // in scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-      scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/array_index.rs:+1:9: +1:10\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/array_index.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/array_index.rs:+1:18: +1:30\n-          _2 = [const 0_u32, const 1_u32, const 2_u32, const 3_u32]; // scope 0 at $DIR/array_index.rs:+1:18: +1:30\n-          StorageLive(_3);                 // scope 0 at $DIR/array_index.rs:+1:31: +1:32\n-          _3 = const 2_usize;              // scope 0 at $DIR/array_index.rs:+1:31: +1:32\n-          _4 = Len(_2);                    // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n--         _5 = Lt(_3, _4);                 // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n--         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-+         _5 = Lt(const 2_usize, _4);      // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-+         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, const 2_usize) -> bb1; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-      }\n-  \n-      bb1: {\n-          _1 = _2[_3];                     // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-          StorageDead(_3);                 // scope 0 at $DIR/array_index.rs:+1:33: +1:34\n-          StorageDead(_2);                 // scope 0 at $DIR/array_index.rs:+1:33: +1:34\n-          _0 = const ();                   // scope 0 at $DIR/array_index.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/array_index.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/array_index.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "00eb9d0e2006a0844942ec12be242b07eb14be6f", "filename": "src/test/mir-opt/dataflow-const-prop/previous/array_index.main.DataflowConstProp.64bit.diff", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Farray_index.main.DataflowConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Farray_index.main.DataflowConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Farray_index.main.DataflowConstProp.64bit.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,37 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/array_index.rs:+0:11: +0:11\n-      let _1: u32;                         // in scope 0 at $DIR/array_index.rs:+1:9: +1:10\n-      let mut _2: [u32; 4];                // in scope 0 at $DIR/array_index.rs:+1:18: +1:30\n-      let _3: usize;                       // in scope 0 at $DIR/array_index.rs:+1:31: +1:32\n-      let mut _4: usize;                   // in scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-      let mut _5: bool;                    // in scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-      scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/array_index.rs:+1:9: +1:10\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/array_index.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/array_index.rs:+1:18: +1:30\n-          _2 = [const 0_u32, const 1_u32, const 2_u32, const 3_u32]; // scope 0 at $DIR/array_index.rs:+1:18: +1:30\n-          StorageLive(_3);                 // scope 0 at $DIR/array_index.rs:+1:31: +1:32\n-          _3 = const 2_usize;              // scope 0 at $DIR/array_index.rs:+1:31: +1:32\n-          _4 = Len(_2);                    // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n--         _5 = Lt(_3, _4);                 // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n--         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-+         _5 = Lt(const 2_usize, _4);      // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-+         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, const 2_usize) -> bb1; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-      }\n-  \n-      bb1: {\n-          _1 = _2[_3];                     // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-          StorageDead(_3);                 // scope 0 at $DIR/array_index.rs:+1:33: +1:34\n-          StorageDead(_2);                 // scope 0 at $DIR/array_index.rs:+1:33: +1:34\n-          _0 = const ();                   // scope 0 at $DIR/array_index.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/array_index.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/array_index.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "3cd7ddf20a7da11bd9a33a0bde9ae58ea514dc2b", "filename": "src/test/mir-opt/dataflow-const-prop/previous/array_index.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Farray_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Farray_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Farray_index.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,7 +0,0 @@\n-// unit-test: DataflowConstProp\n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n-\n-// EMIT_MIR array_index.main.DataflowConstProp.diff\n-fn main() {\n-    let x: u32 = [0, 1, 2, 3][2];\n-}"}, {"sha": "1744b7b976afdbbc698dfb3545a4502c559b0970", "filename": "src/test/mir-opt/dataflow-const-prop/previous/bad_op_div_by_zero.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_div_by_zero.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_div_by_zero.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_div_by_zero.main.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,54 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_div_by_zero.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/bad_op_div_by_zero.rs:+1:9: +1:10\n-      let mut _3: i32;                     // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n-      let mut _4: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-      let mut _5: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-      let mut _6: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-      let mut _7: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-      scope 1 {\n-          debug y => _1;                   // in scope 1 at $DIR/bad_op_div_by_zero.rs:+1:9: +1:10\n-          let _2: i32;                     // in scope 1 at $DIR/bad_op_div_by_zero.rs:+2:9: +2:11\n-          scope 2 {\n-              debug _z => _2;              // in scope 2 at $DIR/bad_op_div_by_zero.rs:+2:9: +2:11\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/bad_op_div_by_zero.rs:+1:9: +1:10\n-          _1 = const 0_i32;                // scope 0 at $DIR/bad_op_div_by_zero.rs:+1:13: +1:14\n-          StorageLive(_2);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:9: +2:11\n-          StorageLive(_3);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n--         _3 = _1;                         // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n--         _4 = Eq(_3, const 0_i32);        // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n--         assert(!move _4, \"attempt to divide `{}` by zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-+         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n-+         _4 = const true;                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-+         assert(!const true, \"attempt to divide `{}` by zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-      }\n-  \n-      bb1: {\n--         _5 = Eq(_3, const -1_i32);       // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n--         _6 = Eq(const 1_i32, const i32::MIN); // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n--         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n--         assert(!move _7, \"attempt to compute `{} / {}`, which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-+         _5 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-+         _6 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-+         _7 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-+         assert(!const false, \"attempt to compute `{} / {}`, which would overflow\", const 1_i32, const 0_i32) -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-      }\n-  \n-      bb2: {\n--         _2 = Div(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-+         _2 = Div(const 1_i32, const 0_i32); // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-          StorageDead(_3);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n-          _0 = const ();                   // scope 0 at $DIR/bad_op_div_by_zero.rs:+0:11: +3:2\n-          StorageDead(_2);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+3:1: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/bad_op_div_by_zero.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/bad_op_div_by_zero.rs:+3:2: +3:2\n-      }\n-  }\n-  "}, {"sha": "ddf195b2c8a9fc78505344a93607dba55a68a74e", "filename": "src/test/mir-opt/dataflow-const-prop/previous/bad_op_div_by_zero.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_div_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_div_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_div_by_zero.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,7 +0,0 @@\n-// unit-test: DataflowConstProp\n-// EMIT_MIR bad_op_div_by_zero.main.DataflowConstProp.diff\n-#[allow(unconditional_panic)]\n-fn main() {\n-    let y = 0;\n-    let _z = 1 / y;\n-}"}, {"sha": "cc8dea75c9cb9c58d77240e997d2ba11e7bfb476", "filename": "src/test/mir-opt/dataflow-const-prop/previous/bad_op_mod_by_zero.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_mod_by_zero.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_mod_by_zero.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_mod_by_zero.main.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,54 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_mod_by_zero.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:9: +1:10\n-      let mut _3: i32;                     // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n-      let mut _4: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-      let mut _5: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-      let mut _6: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-      let mut _7: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-      scope 1 {\n-          debug y => _1;                   // in scope 1 at $DIR/bad_op_mod_by_zero.rs:+1:9: +1:10\n-          let _2: i32;                     // in scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:9: +2:11\n-          scope 2 {\n-              debug _z => _2;              // in scope 2 at $DIR/bad_op_mod_by_zero.rs:+2:9: +2:11\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:9: +1:10\n-          _1 = const 0_i32;                // scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:13: +1:14\n-          StorageLive(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:9: +2:11\n-          StorageLive(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n--         _3 = _1;                         // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n--         _4 = Eq(_3, const 0_i32);        // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n--         assert(!move _4, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n-+         _4 = const true;                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         assert(!const true, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-      }\n-  \n-      bb1: {\n--         _5 = Eq(_3, const -1_i32);       // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n--         _6 = Eq(const 1_i32, const i32::MIN); // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n--         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n--         assert(!move _7, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         _5 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         _6 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         _7 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         assert(!const false, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, const 0_i32) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-      }\n-  \n-      bb2: {\n--         _2 = Rem(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         _2 = Rem(const 1_i32, const 0_i32); // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-          StorageDead(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n-          _0 = const ();                   // scope 0 at $DIR/bad_op_mod_by_zero.rs:+0:11: +3:2\n-          StorageDead(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+3:1: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/bad_op_mod_by_zero.rs:+3:2: +3:2\n-      }\n-  }\n-  "}, {"sha": "ad30a5b6242ed88f7858a62f53e6a40a01fc5ec6", "filename": "src/test/mir-opt/dataflow-const-prop/previous/bad_op_mod_by_zero.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_mod_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_mod_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_mod_by_zero.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,7 +0,0 @@\n-// unit-test: DataflowConstProp\n-// EMIT_MIR bad_op_mod_by_zero.main.DataflowConstProp.diff\n-#[allow(unconditional_panic)]\n-fn main() {\n-    let y = 0;\n-    let _z = 1 % y;\n-}"}, {"sha": "ce1524af7653122b92ef2b7c9c01f1691492739e", "filename": "src/test/mir-opt/dataflow-const-prop/previous/bad_op_unsafe_oob_for_slices.main.DataflowConstProp.32bit.diff", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.32bit.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,56 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+0:11: +0:11\n-      let _1: *const [i32];                // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n-      let mut _2: *const [i32; 3];         // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-      let _3: &[i32; 3];                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-      let _4: [i32; 3];                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:26: +1:35\n-      let _6: usize;                       // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-      let mut _7: usize;                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-      let mut _8: bool;                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-      let mut _9: &[i32; 3];               // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-      scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n-          scope 2 {\n-              let _5: i32;                 // in scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n-              scope 3 {\n-                  debug _b => _5;          // in scope 3 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n-              }\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _9 = const _;                    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-                                           // mir::Constant\n-                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:6:25: 6:35\n-                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _3 = &(*_9);                     // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          StorageDead(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:34: +1:35\n-          StorageDead(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:35: +1:36\n-          StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n-          StorageLive(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-          _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-          _7 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n--         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n--         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         _8 = Lt(const 3_usize, _7);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-      }\n-  \n-      bb1: {\n-          _5 = (*_1)[_6];                  // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-          StorageDead(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:25: +3:26\n-          _0 = const ();                   // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+2:5: +4:6\n-          StorageDead(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+4:5: +4:6\n-          StorageDead(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:2: +5:2\n-      }\n-  }\n-  "}, {"sha": "ce1524af7653122b92ef2b7c9c01f1691492739e", "filename": "src/test/mir-opt/dataflow-const-prop/previous/bad_op_unsafe_oob_for_slices.main.DataflowConstProp.64bit.diff", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.64bit.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,56 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+0:11: +0:11\n-      let _1: *const [i32];                // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n-      let mut _2: *const [i32; 3];         // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-      let _3: &[i32; 3];                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-      let _4: [i32; 3];                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:26: +1:35\n-      let _6: usize;                       // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-      let mut _7: usize;                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-      let mut _8: bool;                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-      let mut _9: &[i32; 3];               // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-      scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n-          scope 2 {\n-              let _5: i32;                 // in scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n-              scope 3 {\n-                  debug _b => _5;          // in scope 3 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n-              }\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _9 = const _;                    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-                                           // mir::Constant\n-                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:6:25: 6:35\n-                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _3 = &(*_9);                     // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          StorageDead(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:34: +1:35\n-          StorageDead(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:35: +1:36\n-          StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n-          StorageLive(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-          _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-          _7 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n--         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n--         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         _8 = Lt(const 3_usize, _7);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-      }\n-  \n-      bb1: {\n-          _5 = (*_1)[_6];                  // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-          StorageDead(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:25: +3:26\n-          _0 = const ();                   // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+2:5: +4:6\n-          StorageDead(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+4:5: +4:6\n-          StorageDead(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:2: +5:2\n-      }\n-  }\n-  "}, {"sha": "c97257e6d8fa2112795c40c6a1cbec6b4871bf5e", "filename": "src/test/mir-opt/dataflow-const-prop/previous/bad_op_unsafe_oob_for_slices.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,10 +0,0 @@\n-// unit-test: DataflowConstProp\n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n-// EMIT_MIR bad_op_unsafe_oob_for_slices.main.DataflowConstProp.diff\n-#[allow(unconditional_panic)]\n-fn main() {\n-    let a: *const [_] = &[1, 2, 3];\n-    unsafe {\n-        let _b = (*a)[3];\n-    }\n-}"}, {"sha": "578f9830cf221a649597232fe9b45644cd3b2d4e", "filename": "src/test/mir-opt/dataflow-const-prop/previous/boolean_identities.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboolean_identities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboolean_identities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboolean_identities.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,11 +0,0 @@\n-// unit-test: DataflowConstProp\n-// compile-flags: -O -Zmir-opt-level=4\n-\n-// EMIT_MIR boolean_identities.test.DataflowConstProp.diff\n-pub fn test(x: bool, y: bool) -> bool {\n-    (y | true) & (x & false)\n-}\n-\n-fn main() {\n-    test(true, false);\n-}"}, {"sha": "307324d5768d8584f66f95b22e1dc5024759df58", "filename": "src/test/mir-opt/dataflow-const-prop/previous/boolean_identities.test.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboolean_identities.test.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboolean_identities.test.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboolean_identities.test.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,30 +0,0 @@\n-- // MIR for `test` before DataflowConstProp\n-+ // MIR for `test` after DataflowConstProp\n-  \n-  fn test(_1: bool, _2: bool) -> bool {\n-      debug x => _1;                       // in scope 0 at $DIR/boolean_identities.rs:+0:13: +0:14\n-      debug y => _2;                       // in scope 0 at $DIR/boolean_identities.rs:+0:22: +0:23\n-      let mut _0: bool;                    // return place in scope 0 at $DIR/boolean_identities.rs:+0:34: +0:38\n-      let mut _3: bool;                    // in scope 0 at $DIR/boolean_identities.rs:+1:5: +1:15\n-      let mut _4: bool;                    // in scope 0 at $DIR/boolean_identities.rs:+1:6: +1:7\n-      let mut _5: bool;                    // in scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n-      let mut _6: bool;                    // in scope 0 at $DIR/boolean_identities.rs:+1:19: +1:20\n-  \n-      bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:15\n-          StorageLive(_4);                 // scope 0 at $DIR/boolean_identities.rs:+1:6: +1:7\n-          _4 = _2;                         // scope 0 at $DIR/boolean_identities.rs:+1:6: +1:7\n-          _3 = const true;                 // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:15\n-          StorageDead(_4);                 // scope 0 at $DIR/boolean_identities.rs:+1:14: +1:15\n-          StorageLive(_5);                 // scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n-          StorageLive(_6);                 // scope 0 at $DIR/boolean_identities.rs:+1:19: +1:20\n-          _6 = _1;                         // scope 0 at $DIR/boolean_identities.rs:+1:19: +1:20\n-          _5 = const false;                // scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n-          StorageDead(_6);                 // scope 0 at $DIR/boolean_identities.rs:+1:28: +1:29\n-          _0 = const false;                // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:29\n-          StorageDead(_5);                 // scope 0 at $DIR/boolean_identities.rs:+1:28: +1:29\n-          StorageDead(_3);                 // scope 0 at $DIR/boolean_identities.rs:+1:28: +1:29\n-          return;                          // scope 0 at $DIR/boolean_identities.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "501108a7abcf860fe0e32f5f12cebe9592960021", "filename": "src/test/mir-opt/dataflow-const-prop/previous/boxes.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboxes.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboxes.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboxes.main.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,58 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/boxes.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/boxes.rs:+1:9: +1:10\n-      let mut _2: i32;                     // in scope 0 at $DIR/boxes.rs:+1:13: +1:22\n-      let mut _3: std::boxed::Box<i32>;    // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n-      let mut _4: usize;                   // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n-      let mut _5: usize;                   // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n-      let mut _6: *mut u8;                 // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n-      let mut _7: std::boxed::Box<i32>;    // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n-      let mut _8: *const i32;              // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n-      let mut _9: *const i32;              // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n-      scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/boxes.rs:+1:9: +1:10\n-      }\n-      scope 2 {\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/boxes.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/boxes.rs:+1:13: +1:22\n-          StorageLive(_3);                 // scope 0 at $DIR/boxes.rs:+1:14: +1:22\n-          _4 = SizeOf(i32);                // scope 2 at $DIR/boxes.rs:+1:14: +1:22\n-          _5 = AlignOf(i32);               // scope 2 at $DIR/boxes.rs:+1:14: +1:22\n-          _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at $DIR/boxes.rs:+1:14: +1:22\n-                                           // mir::Constant\n-                                           // + span: $DIR/boxes.rs:13:14: 13:22\n-                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n-      }\n-  \n-      bb1: {\n-          StorageLive(_7);                 // scope 0 at $DIR/boxes.rs:+1:14: +1:22\n-          _7 = ShallowInitBox(move _6, i32); // scope 0 at $DIR/boxes.rs:+1:14: +1:22\n-          _8 = (((_7.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at $DIR/boxes.rs:+1:19: +1:21\n-          (*_8) = const 42_i32;            // scope 0 at $DIR/boxes.rs:+1:19: +1:21\n-          _3 = move _7;                    // scope 0 at $DIR/boxes.rs:+1:14: +1:22\n-          StorageDead(_7);                 // scope 0 at $DIR/boxes.rs:+1:21: +1:22\n-          _9 = (((_3.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at $DIR/boxes.rs:+1:13: +1:22\n-          _2 = (*_9);                      // scope 0 at $DIR/boxes.rs:+1:13: +1:22\n-          _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/boxes.rs:+1:13: +1:26\n-          StorageDead(_2);                 // scope 0 at $DIR/boxes.rs:+1:25: +1:26\n-          drop(_3) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/boxes.rs:+1:26: +1:27\n-      }\n-  \n-      bb2: {\n-          StorageDead(_3);                 // scope 0 at $DIR/boxes.rs:+1:26: +1:27\n-          _0 = const ();                   // scope 0 at $DIR/boxes.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/boxes.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/boxes.rs:+2:2: +2:2\n-      }\n-  \n-      bb3 (cleanup): {\n-          resume;                          // scope 0 at $DIR/boxes.rs:+0:1: +2:2\n-      }\n-  }\n-  "}, {"sha": "8b0c13c2eb6f576494bb775a8c7197c3755e4603", "filename": "src/test/mir-opt/dataflow-const-prop/previous/boxes.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboxes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboxes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboxes.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,14 +0,0 @@\n-// unit-test: DataflowConstProp\n-// compile-flags: -O\n-// ignore-emscripten compiled with panic=abort by default\n-// ignore-wasm32\n-// ignore-wasm64\n-\n-#![feature(box_syntax)]\n-\n-// Note: this test verifies that we, in fact, do not const prop `box`\n-\n-// EMIT_MIR boxes.main.DataflowConstProp.diff\n-fn main() {\n-    let x = *(box 42) + 0;\n-}"}, {"sha": "3fd9fb5331b07acb8b9f9cad447d09f51bed189c", "filename": "src/test/mir-opt/dataflow-const-prop/previous/cast.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcast.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcast.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcast.main.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,28 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/cast.rs:+0:11: +0:11\n-      let _1: u32;                         // in scope 0 at $DIR/cast.rs:+1:9: +1:10\n-      scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/cast.rs:+1:9: +1:10\n-          let _2: u8;                      // in scope 1 at $DIR/cast.rs:+3:9: +3:10\n-          scope 2 {\n-              debug y => _2;               // in scope 2 at $DIR/cast.rs:+3:9: +3:10\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/cast.rs:+1:9: +1:10\n--         _1 = const 42_u8 as u32 (IntToInt); // scope 0 at $DIR/cast.rs:+1:13: +1:24\n-+         _1 = const 42_u32;               // scope 0 at $DIR/cast.rs:+1:13: +1:24\n-          StorageLive(_2);                 // scope 1 at $DIR/cast.rs:+3:9: +3:10\n--         _2 = const 42_u32 as u8 (IntToInt); // scope 1 at $DIR/cast.rs:+3:13: +3:24\n-+         _2 = const 42_u8;                // scope 1 at $DIR/cast.rs:+3:13: +3:24\n-          _0 = const ();                   // scope 0 at $DIR/cast.rs:+0:11: +4:2\n-          StorageDead(_2);                 // scope 1 at $DIR/cast.rs:+4:1: +4:2\n-          StorageDead(_1);                 // scope 0 at $DIR/cast.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/cast.rs:+4:2: +4:2\n-      }\n-  }\n-  "}, {"sha": "25cc1839ff01939c3153fa3094140ca748e4e0d1", "filename": "src/test/mir-opt/dataflow-const-prop/previous/cast.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcast.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,8 +0,0 @@\n-// unit-test: DataflowConstProp\n-// EMIT_MIR cast.main.DataflowConstProp.diff\n-\n-fn main() {\n-    let x = 42u8 as u32;\n-\n-    let y = 42u32 as u8;\n-}"}, {"sha": "5371e049664c37412830dbacd9857f690447fa6c", "filename": "src/test/mir-opt/dataflow-const-prop/previous/checked_add.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fchecked_add.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fchecked_add.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fchecked_add.main.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,27 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/checked_add.rs:+0:11: +0:11\n-      let _1: u32;                         // in scope 0 at $DIR/checked_add.rs:+1:9: +1:10\n-      let mut _2: (u32, bool);             // in scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n-      scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/checked_add.rs:+1:9: +1:10\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/checked_add.rs:+1:9: +1:10\n-          _2 = CheckedAdd(const 1_u32, const 1_u32); // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n--         assert(!move (_2.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 1_u32, const 1_u32) -> bb1; // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n-+         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 1_u32, const 1_u32) -> bb1; // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n-      }\n-  \n-      bb1: {\n--         _1 = move (_2.0: u32);           // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n-+         _1 = const 2_u32;                // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n-          _0 = const ();                   // scope 0 at $DIR/checked_add.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/checked_add.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/checked_add.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "e7cb047098989b4f24fbd9438232ea3c259cf664", "filename": "src/test/mir-opt/dataflow-const-prop/previous/checked_add.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fchecked_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fchecked_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fchecked_add.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,7 +0,0 @@\n-// unit-test: DataflowConstProp\n-// compile-flags: -C overflow-checks=on\n-\n-// EMIT_MIR checked_add.main.DataflowConstProp.diff\n-fn main() {\n-    let x: u32 = 1 + 1;\n-}"}, {"sha": "38a5eecb8e8f0c6ca693055190fae73848e0fb06", "filename": "src/test/mir-opt/dataflow-const-prop/previous/const_prop_fails_gracefully.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fconst_prop_fails_gracefully.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fconst_prop_fails_gracefully.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fconst_prop_fails_gracefully.main.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,44 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/const_prop_fails_gracefully.rs:+0:11: +0:11\n-      let _1: usize;                       // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:9: +2:10\n-      let mut _2: *const i32;              // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:30\n-      let _3: &i32;                        // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n-      let _4: ();                          // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+3:5: +3:12\n-      let mut _5: usize;                   // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+3:10: +3:11\n-      scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/const_prop_fails_gracefully.rs:+2:9: +2:10\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:9: +2:10\n-          StorageLive(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:30\n-          StorageLive(_3);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n-          _3 = const _;                    // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n-                                           // mir::Constant\n-                                           // + span: $DIR/const_prop_fails_gracefully.rs:8:13: 8:16\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(FOO, [], None) }\n-          _2 = &raw const (*_3);           // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n-          _1 = move _2 as usize (PointerExposeAddress); // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:39\n-          StorageDead(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:38: +2:39\n-          StorageDead(_3);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:39: +2:40\n-          StorageLive(_4);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:5: +3:12\n-          StorageLive(_5);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:10: +3:11\n-          _5 = _1;                         // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:10: +3:11\n-          _4 = read(move _5) -> bb1;       // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:5: +3:12\n-                                           // mir::Constant\n-                                           // + span: $DIR/const_prop_fails_gracefully.rs:9:5: 9:9\n-                                           // + literal: Const { ty: fn(usize) {read}, val: Value(<ZST>) }\n-      }\n-  \n-      bb1: {\n-          StorageDead(_5);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:11: +3:12\n-          StorageDead(_4);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:12: +3:13\n-          _0 = const ();                   // scope 0 at $DIR/const_prop_fails_gracefully.rs:+0:11: +4:2\n-          StorageDead(_1);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/const_prop_fails_gracefully.rs:+4:2: +4:2\n-      }\n-  }\n-  "}, {"sha": "59b2f9caf2eaf0025d461bb748cc1de83a679655", "filename": "src/test/mir-opt/dataflow-const-prop/previous/const_prop_fails_gracefully.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fconst_prop_fails_gracefully.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fconst_prop_fails_gracefully.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fconst_prop_fails_gracefully.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,10 +0,0 @@\n-// unit-test: DataflowConstProp\n-#[inline(never)]\n-fn read(_: usize) {}\n-\n-// EMIT_MIR const_prop_fails_gracefully.main.DataflowConstProp.diff\n-fn main() {\n-    const FOO: &i32 = &1;\n-    let x = FOO as *const i32 as usize;\n-    read(x);\n-}"}, {"sha": "e1269628d2f1a1aded008a387c34e184a977a55d", "filename": "src/test/mir-opt/dataflow-const-prop/previous/control-flow-simplification.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcontrol-flow-simplification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcontrol-flow-simplification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcontrol-flow-simplification.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,21 +0,0 @@\n-// unit-test: DataflowConstProp\n-// compile-flags: -Zmir-opt-level=1\n-\n-trait NeedsDrop: Sized {\n-    const NEEDS: bool = std::mem::needs_drop::<Self>();\n-}\n-\n-impl<This> NeedsDrop for This {}\n-\n-// EMIT_MIR control_flow_simplification.hello.DataflowConstProp.diff\n-// EMIT_MIR control_flow_simplification.hello.PreCodegen.before.mir\n-fn hello<T>() {\n-    if <bool>::NEEDS {\n-        panic!()\n-    }\n-}\n-\n-pub fn main() {\n-    hello::<()>();\n-    hello::<Vec<()>>();\n-}"}, {"sha": "d990c3b07e5180f3f5a4aea6de2a3c071f8d3573", "filename": "src/test/mir-opt/dataflow-const-prop/previous/control_flow_simplification.hello.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcontrol_flow_simplification.hello.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcontrol_flow_simplification.hello.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcontrol_flow_simplification.hello.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,32 +0,0 @@\n-- // MIR for `hello` before DataflowConstProp\n-+ // MIR for `hello` after DataflowConstProp\n-  \n-  fn hello() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/control-flow-simplification.rs:+0:15: +0:15\n-      let mut _1: bool;                    // in scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n-      let mut _2: !;                       // in scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n-          _1 = const _;                    // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n-          switchInt(const false) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n-      }\n-  \n-      bb1: {\n-          StorageLive(_2);                 // scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n-          _2 = begin_panic::<&str>(const \"explicit panic\"); // scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n-      }\n-  \n-      bb2: {\n-          nop;                             // scope 0 at $DIR/control-flow-simplification.rs:+3:6: +3:6\n-          StorageDead(_1);                 // scope 0 at $DIR/control-flow-simplification.rs:+3:5: +3:6\n-          return;                          // scope 0 at $DIR/control-flow-simplification.rs:+4:2: +4:2\n-      }\n-  }\n-  "}, {"sha": "442ae80776172f7e84c7ff6b54946b92e469a54d", "filename": "src/test/mir-opt/dataflow-const-prop/previous/control_flow_simplification.hello.PreCodegen.before.mir", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcontrol_flow_simplification.hello.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcontrol_flow_simplification.hello.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcontrol_flow_simplification.hello.PreCodegen.before.mir?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,9 +0,0 @@\n-// MIR for `hello` before PreCodegen\n-\n-fn hello() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/control-flow-simplification.rs:+0:15: +0:15\n-\n-    bb0: {\n-        return;                          // scope 0 at $DIR/control-flow-simplification.rs:+4:2: +4:2\n-    }\n-}"}, {"sha": "f98270b3ff04d3cc635e3e8873df35a6300e2326", "filename": "src/test/mir-opt/dataflow-const-prop/previous/discriminant.main.DataflowConstProp.32bit.diff", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fdiscriminant.main.DataflowConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fdiscriminant.main.DataflowConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fdiscriminant.main.DataflowConstProp.32bit.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,50 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/discriminant.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/discriminant.rs:+1:9: +1:10\n-      let mut _2: i32;                     // in scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n-      let mut _3: std::option::Option<bool>; // in scope 0 at $DIR/discriminant.rs:+1:34: +1:44\n-      let mut _4: isize;                   // in scope 0 at $DIR/discriminant.rs:+1:21: +1:31\n-      scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/discriminant.rs:+1:9: +1:10\n-      }\n-      scope 2 {\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n-          StorageLive(_3);                 // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n-          Deinit(_3);                      // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n-          ((_3 as Some).0: bool) = const true; // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n-          discriminant(_3) = 1;            // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n-          _4 = discriminant(_3);           // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n-          switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n-      }\n-  \n-      bb1: {\n-          switchInt(((_3 as Some).0: bool)) -> [false: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n-      }\n-  \n-      bb2: {\n-          _2 = const 42_i32;               // scope 2 at $DIR/discriminant.rs:+1:47: +1:49\n-          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n-      }\n-  \n-      bb3: {\n-          _2 = const 10_i32;               // scope 0 at $DIR/discriminant.rs:+1:59: +1:61\n-          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n-      }\n-  \n-      bb4: {\n-          _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/discriminant.rs:+1:13: +1:68\n-          StorageDead(_2);                 // scope 0 at $DIR/discriminant.rs:+1:67: +1:68\n-          StorageDead(_3);                 // scope 0 at $DIR/discriminant.rs:+1:68: +1:69\n-          _0 = const ();                   // scope 0 at $DIR/discriminant.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/discriminant.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/discriminant.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "f98270b3ff04d3cc635e3e8873df35a6300e2326", "filename": "src/test/mir-opt/dataflow-const-prop/previous/discriminant.main.DataflowConstProp.64bit.diff", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fdiscriminant.main.DataflowConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fdiscriminant.main.DataflowConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fdiscriminant.main.DataflowConstProp.64bit.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,50 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/discriminant.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/discriminant.rs:+1:9: +1:10\n-      let mut _2: i32;                     // in scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n-      let mut _3: std::option::Option<bool>; // in scope 0 at $DIR/discriminant.rs:+1:34: +1:44\n-      let mut _4: isize;                   // in scope 0 at $DIR/discriminant.rs:+1:21: +1:31\n-      scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/discriminant.rs:+1:9: +1:10\n-      }\n-      scope 2 {\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n-          StorageLive(_3);                 // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n-          Deinit(_3);                      // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n-          ((_3 as Some).0: bool) = const true; // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n-          discriminant(_3) = 1;            // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n-          _4 = discriminant(_3);           // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n-          switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n-      }\n-  \n-      bb1: {\n-          switchInt(((_3 as Some).0: bool)) -> [false: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n-      }\n-  \n-      bb2: {\n-          _2 = const 42_i32;               // scope 2 at $DIR/discriminant.rs:+1:47: +1:49\n-          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n-      }\n-  \n-      bb3: {\n-          _2 = const 10_i32;               // scope 0 at $DIR/discriminant.rs:+1:59: +1:61\n-          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n-      }\n-  \n-      bb4: {\n-          _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/discriminant.rs:+1:13: +1:68\n-          StorageDead(_2);                 // scope 0 at $DIR/discriminant.rs:+1:67: +1:68\n-          StorageDead(_3);                 // scope 0 at $DIR/discriminant.rs:+1:68: +1:69\n-          _0 = const ();                   // scope 0 at $DIR/discriminant.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/discriminant.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/discriminant.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "5399bc2599778154392473fe71348f67f0e4fae6", "filename": "src/test/mir-opt/dataflow-const-prop/previous/discriminant.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fdiscriminant.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,13 +0,0 @@\n-// unit-test: DataflowConstProp\n-// compile-flags: -O\n-\n-// FIXME(wesleywiser): Ideally, we could const-prop away all of this and just be left with\n-// `let x = 42` but that doesn't work because const-prop doesn't support `Operand::Indirect`\n-// and `InterpCx::eval_place()` always forces an allocation which creates the `Indirect`.\n-// Fixing either of those will allow us to const-prop this away.\n-\n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n-// EMIT_MIR discriminant.main.DataflowConstProp.diff\n-fn main() {\n-    let x = (if let Some(true) = Some(true) { 42 } else { 10 }) + 0;\n-}"}, {"sha": "80deb02c77f56ed489a4066fad3abe512e5b2ed6", "filename": "src/test/mir-opt/dataflow-const-prop/previous/indirect.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Findirect.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Findirect.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Findirect.main.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,33 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/indirect.rs:+0:11: +0:11\n-      let _1: u8;                          // in scope 0 at $DIR/indirect.rs:+1:9: +1:10\n-      let mut _2: u8;                      // in scope 0 at $DIR/indirect.rs:+1:13: +1:25\n-      let mut _3: (u8, bool);              // in scope 0 at $DIR/indirect.rs:+1:13: +1:29\n-      scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/indirect.rs:+1:9: +1:10\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/indirect.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/indirect.rs:+1:13: +1:25\n--         _2 = const 2_u32 as u8 (IntToInt); // scope 0 at $DIR/indirect.rs:+1:13: +1:25\n--         _3 = CheckedAdd(_2, const 1_u8); // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n--         assert(!move (_3.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _2, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n-+         _2 = const 2_u8;                 // scope 0 at $DIR/indirect.rs:+1:13: +1:25\n-+         _3 = CheckedAdd(const 2_u8, const 1_u8); // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n-+         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u8, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n-      }\n-  \n-      bb1: {\n--         _1 = move (_3.0: u8);            // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n-+         _1 = const 3_u8;                 // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n-          StorageDead(_2);                 // scope 0 at $DIR/indirect.rs:+1:28: +1:29\n-          _0 = const ();                   // scope 0 at $DIR/indirect.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/indirect.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/indirect.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "d8d79d29b8a417a40c74884e945909ee5e40d30c", "filename": "src/test/mir-opt/dataflow-const-prop/previous/indirect.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Findirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Findirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Findirect.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,7 +0,0 @@\n-// unit-test: DataflowConstProp\n-// compile-flags: -C overflow-checks=on\n-\n-// EMIT_MIR indirect.main.DataflowConstProp.diff\n-fn main() {\n-    let x = (2u32 as u8) + 1;\n-}"}, {"sha": "9cf6c1f989cd896d0e50ade6ce711058f0d5a01c", "filename": "src/test/mir-opt/dataflow-const-prop/previous/invalid_constant.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Finvalid_constant.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Finvalid_constant.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Finvalid_constant.main.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,74 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/invalid_constant.rs:+0:11: +0:11\n-      let _1: char;                        // in scope 0 at $DIR/invalid_constant.rs:+6:9: +6:22\n-      let mut _2: main::InvalidChar;       // in scope 0 at $DIR/invalid_constant.rs:+6:34: +6:63\n-      let mut _4: E;                       // in scope 0 at $DIR/invalid_constant.rs:+13:25: +13:59\n-      let mut _5: main::InvalidTag;        // in scope 0 at $DIR/invalid_constant.rs:+13:34: +13:55\n-      let mut _7: Empty;                   // in scope 0 at $DIR/invalid_constant.rs:+20:35: +20:73\n-      let mut _8: main::NoVariants;        // in scope 0 at $DIR/invalid_constant.rs:+20:44: +20:65\n-      scope 1 {\n-          debug _invalid_char => _1;       // in scope 1 at $DIR/invalid_constant.rs:+6:9: +6:22\n-          let _3: [E; 1];                  // in scope 1 at $DIR/invalid_constant.rs:+13:9: +13:21\n-          scope 3 {\n-              debug _invalid_tag => _3;    // in scope 3 at $DIR/invalid_constant.rs:+13:9: +13:21\n-              let _6: [Empty; 1];          // in scope 3 at $DIR/invalid_constant.rs:+20:9: +20:31\n-              scope 5 {\n-                  debug _enum_without_variants => _6; // in scope 5 at $DIR/invalid_constant.rs:+20:9: +20:31\n-                  let _9: main::Str<\"\ufffd\ufffd\ufffd\">; // in scope 5 at $DIR/invalid_constant.rs:+24:9: +24:22\n-                  scope 7 {\n-                      debug _non_utf8_str => _9; // in scope 7 at $DIR/invalid_constant.rs:+24:9: +24:22\n-                  }\n-              }\n-              scope 6 {\n-              }\n-          }\n-          scope 4 {\n-          }\n-      }\n-      scope 2 {\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/invalid_constant.rs:+6:9: +6:22\n-          StorageLive(_2);                 // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:63\n-          Deinit(_2);                      // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:63\n-          (_2.0: u32) = const 1114113_u32; // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:63\n-          _1 = const {transmute(0x00110001): char}; // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:67\n-          StorageDead(_2);                 // scope 0 at $DIR/invalid_constant.rs:+6:69: +6:70\n-          StorageLive(_3);                 // scope 1 at $DIR/invalid_constant.rs:+13:9: +13:21\n-          StorageLive(_4);                 // scope 1 at $DIR/invalid_constant.rs:+13:25: +13:59\n-          StorageLive(_5);                 // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:55\n-          Deinit(_5);                      // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:55\n-          (_5.0: u32) = const 4_u32;       // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:55\n-          _4 = const Scalar(0x00000004): E; // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:57\n-                                           // mir::Constant\n-                                           // + span: $DIR/invalid_constant.rs:32:34: 32:57\n-                                           // + literal: Const { ty: E, val: Value(Scalar(0x00000004)) }\n-          _3 = [const Scalar(0x00000004): E]; // scope 1 at $DIR/invalid_constant.rs:+13:24: +13:60\n-                                           // mir::Constant\n-                                           // + span: $DIR/invalid_constant.rs:32:24: 32:60\n-                                           // + literal: Const { ty: E, val: Value(Scalar(0x00000004)) }\n-          StorageDead(_4);                 // scope 1 at $DIR/invalid_constant.rs:+13:59: +13:60\n-          StorageDead(_5);                 // scope 1 at $DIR/invalid_constant.rs:+13:60: +13:61\n-          StorageLive(_6);                 // scope 3 at $DIR/invalid_constant.rs:+20:9: +20:31\n-          StorageLive(_7);                 // scope 3 at $DIR/invalid_constant.rs:+20:35: +20:73\n-          StorageLive(_8);                 // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:65\n-          Deinit(_8);                      // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:65\n-          (_8.0: u32) = const 0_u32;       // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:65\n-          nop;                             // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:71\n-          nop;                             // scope 3 at $DIR/invalid_constant.rs:+20:34: +20:74\n-          StorageDead(_7);                 // scope 3 at $DIR/invalid_constant.rs:+20:73: +20:74\n-          StorageDead(_8);                 // scope 3 at $DIR/invalid_constant.rs:+20:74: +20:75\n-          StorageLive(_9);                 // scope 5 at $DIR/invalid_constant.rs:+24:9: +24:22\n-          nop;                             // scope 0 at $DIR/invalid_constant.rs:+0:11: +25:2\n-          StorageDead(_9);                 // scope 5 at $DIR/invalid_constant.rs:+25:1: +25:2\n-          StorageDead(_6);                 // scope 3 at $DIR/invalid_constant.rs:+25:1: +25:2\n-          StorageDead(_3);                 // scope 1 at $DIR/invalid_constant.rs:+25:1: +25:2\n-          StorageDead(_1);                 // scope 0 at $DIR/invalid_constant.rs:+25:1: +25:2\n-          return;                          // scope 0 at $DIR/invalid_constant.rs:+25:2: +25:2\n-      }\n-  }\n-  "}, {"sha": "296fdcf0bc43c1e79b702b43f46361acf882d45d", "filename": "src/test/mir-opt/dataflow-const-prop/previous/invalid_constant.rs", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Finvalid_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Finvalid_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Finvalid_constant.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,44 +0,0 @@\n-// Verify that we can pretty print invalid constants.\n-\n-#![feature(adt_const_params)]\n-#![feature(inline_const)]\n-#![allow(incomplete_features)]\n-\n-#[derive(Copy, Clone)]\n-#[repr(u32)]\n-enum E {\n-    A,\n-    B,\n-    C,\n-}\n-\n-#[derive(Copy, Clone)]\n-enum Empty {}\n-\n-// EMIT_MIR invalid_constant.main.DataflowConstProp.diff\n-fn main() {\n-    // An invalid char.\n-    union InvalidChar {\n-        int: u32,\n-        chr: char,\n-    }\n-    let _invalid_char = unsafe { InvalidChar { int: 0x110001 }.chr };\n-\n-    // An enum with an invalid tag. Regression test for #93688.\n-    union InvalidTag {\n-        int: u32,\n-        e: E,\n-    }\n-    let _invalid_tag = [unsafe { InvalidTag { int: 4 }.e }];\n-\n-    // An enum without variants. Regression test for #94073.\n-    union NoVariants {\n-        int: u32,\n-        empty: Empty,\n-    }\n-    let _enum_without_variants = [unsafe { NoVariants { int: 0 }.empty }];\n-\n-    // A non-UTF-8 string slice. Regression test for #75763 and #78520.\n-    struct Str<const S: &'static str>;\n-    let _non_utf8_str: Str<{ unsafe { std::mem::transmute::<&[u8], &str>(&[0xC0, 0xC1, 0xF5]) } }>;\n-}"}, {"sha": "39f0ace71347e81a744ae3131dfb5f719880496f", "filename": "src/test/mir-opt/dataflow-const-prop/previous/issue-66971.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fissue-66971.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fissue-66971.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fissue-66971.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,18 +0,0 @@\n-// unit-test: DataflowConstProp\n-// compile-flags: -Z mir-opt-level=3\n-\n-// Due to a bug in propagating scalar pairs the assertion below used to fail. In the expected\n-// outputs below, after DataflowConstProp this is how _2 would look like with the bug:\n-//\n-//     _2 = (const Scalar(0x00) : (), const 0u8);\n-//\n-// Which has the wrong type.\n-\n-fn encode(this: ((), u8, u8)) {\n-    assert!(this.2 == 0);\n-}\n-\n-// EMIT_MIR issue_66971.main.DataflowConstProp.diff\n-fn main() {\n-    encode(((), 0, 0));\n-}"}, {"sha": "6d8b482a543ef3ce91622e87a6b0f9fcd4c83ca6", "filename": "src/test/mir-opt/dataflow-const-prop/previous/issue-67019.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fissue-67019.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fissue-67019.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fissue-67019.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,13 +0,0 @@\n-// unit-test: DataflowConstProp\n-// compile-flags: -Z mir-opt-level=3\n-\n-// This used to ICE in const-prop\n-\n-fn test(this: ((u8, u8),)) {\n-    assert!((this.0).0 == 1);\n-}\n-\n-// EMIT_MIR issue_67019.main.DataflowConstProp.diff\n-fn main() {\n-    test(((1, 2),));\n-}"}, {"sha": "62e94755f12837237b7ad2216364db81ad30c8d1", "filename": "src/test/mir-opt/dataflow-const-prop/previous/issue_66971.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fissue_66971.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fissue_66971.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fissue_66971.main.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,33 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/issue-66971.rs:+0:11: +0:11\n-      let _1: ();                          // in scope 0 at $DIR/issue-66971.rs:+1:5: +1:23\n-      let mut _2: ((), u8, u8);            // in scope 0 at $DIR/issue-66971.rs:+1:12: +1:22\n-      let mut _3: ();                      // in scope 0 at $DIR/issue-66971.rs:+1:13: +1:15\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/issue-66971.rs:+1:5: +1:23\n-          StorageLive(_2);                 // scope 0 at $DIR/issue-66971.rs:+1:12: +1:22\n-          StorageLive(_3);                 // scope 0 at $DIR/issue-66971.rs:+1:13: +1:15\n-          nop;                             // scope 0 at $DIR/issue-66971.rs:+1:13: +1:15\n-          Deinit(_2);                      // scope 0 at $DIR/issue-66971.rs:+1:12: +1:22\n-          nop;                             // scope 0 at $DIR/issue-66971.rs:+1:12: +1:22\n-          (_2.1: u8) = const 0_u8;         // scope 0 at $DIR/issue-66971.rs:+1:12: +1:22\n-          (_2.2: u8) = const 0_u8;         // scope 0 at $DIR/issue-66971.rs:+1:12: +1:22\n-          StorageDead(_3);                 // scope 0 at $DIR/issue-66971.rs:+1:21: +1:22\n-          _1 = encode(move _2) -> bb1;     // scope 0 at $DIR/issue-66971.rs:+1:5: +1:23\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue-66971.rs:17:5: 17:11\n-                                           // + literal: Const { ty: fn(((), u8, u8)) {encode}, val: Value(<ZST>) }\n-      }\n-  \n-      bb1: {\n-          StorageDead(_2);                 // scope 0 at $DIR/issue-66971.rs:+1:22: +1:23\n-          StorageDead(_1);                 // scope 0 at $DIR/issue-66971.rs:+1:23: +1:24\n-          nop;                             // scope 0 at $DIR/issue-66971.rs:+0:11: +2:2\n-          return;                          // scope 0 at $DIR/issue-66971.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "ddbbb11397229970777d8581d91582c6b84c3b10", "filename": "src/test/mir-opt/dataflow-const-prop/previous/issue_67019.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fissue_67019.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fissue_67019.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fissue_67019.main.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,33 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/issue-67019.rs:+0:11: +0:11\n-      let _1: ();                          // in scope 0 at $DIR/issue-67019.rs:+1:5: +1:20\n-      let mut _2: ((u8, u8),);             // in scope 0 at $DIR/issue-67019.rs:+1:10: +1:19\n-      let mut _3: (u8, u8);                // in scope 0 at $DIR/issue-67019.rs:+1:11: +1:17\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/issue-67019.rs:+1:5: +1:20\n-          StorageLive(_2);                 // scope 0 at $DIR/issue-67019.rs:+1:10: +1:19\n-          StorageLive(_3);                 // scope 0 at $DIR/issue-67019.rs:+1:11: +1:17\n-          Deinit(_3);                      // scope 0 at $DIR/issue-67019.rs:+1:11: +1:17\n-          (_3.0: u8) = const 1_u8;         // scope 0 at $DIR/issue-67019.rs:+1:11: +1:17\n-          (_3.1: u8) = const 2_u8;         // scope 0 at $DIR/issue-67019.rs:+1:11: +1:17\n-          Deinit(_2);                      // scope 0 at $DIR/issue-67019.rs:+1:10: +1:19\n-          (_2.0: (u8, u8)) = const (1_u8, 2_u8); // scope 0 at $DIR/issue-67019.rs:+1:10: +1:19\n-          StorageDead(_3);                 // scope 0 at $DIR/issue-67019.rs:+1:18: +1:19\n-          _1 = test(move _2) -> bb1;       // scope 0 at $DIR/issue-67019.rs:+1:5: +1:20\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue-67019.rs:12:5: 12:9\n-                                           // + literal: Const { ty: fn(((u8, u8),)) {test}, val: Value(<ZST>) }\n-      }\n-  \n-      bb1: {\n-          StorageDead(_2);                 // scope 0 at $DIR/issue-67019.rs:+1:19: +1:20\n-          StorageDead(_1);                 // scope 0 at $DIR/issue-67019.rs:+1:20: +1:21\n-          nop;                             // scope 0 at $DIR/issue-67019.rs:+0:11: +2:2\n-          return;                          // scope 0 at $DIR/issue-67019.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "487b2b74371d83bdbe2597a55813188fd248a6ca", "filename": "src/test/mir-opt/dataflow-const-prop/previous/large_array_index.main.DataflowConstProp.32bit.diff", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Flarge_array_index.main.DataflowConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Flarge_array_index.main.DataflowConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Flarge_array_index.main.DataflowConstProp.32bit.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,35 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/large_array_index.rs:+0:11: +0:11\n-      let _1: u8;                          // in scope 0 at $DIR/large_array_index.rs:+2:9: +2:10\n-      let mut _2: [u8; 5000];              // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n-      let _3: usize;                       // in scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n-      let mut _4: usize;                   // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-      let mut _5: bool;                    // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-      scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/large_array_index.rs:+2:9: +2:10\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/large_array_index.rs:+2:9: +2:10\n-          StorageLive(_2);                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n-          _2 = [const 0_u8; 5000];         // scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n-          StorageLive(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n-          _3 = const 2_usize;              // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n-          _4 = const 5000_usize;           // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-          _5 = const true;                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-          assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 5000_usize, const 2_usize) -> bb1; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-      }\n-  \n-      bb1: {\n-          _1 = _2[_3];                     // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-          StorageDead(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:32: +2:33\n-          StorageDead(_2);                 // scope 0 at $DIR/large_array_index.rs:+2:32: +2:33\n-          nop;                             // scope 0 at $DIR/large_array_index.rs:+0:11: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/large_array_index.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/large_array_index.rs:+3:2: +3:2\n-      }\n-  }\n-  "}, {"sha": "487b2b74371d83bdbe2597a55813188fd248a6ca", "filename": "src/test/mir-opt/dataflow-const-prop/previous/large_array_index.main.DataflowConstProp.64bit.diff", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Flarge_array_index.main.DataflowConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Flarge_array_index.main.DataflowConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Flarge_array_index.main.DataflowConstProp.64bit.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,35 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/large_array_index.rs:+0:11: +0:11\n-      let _1: u8;                          // in scope 0 at $DIR/large_array_index.rs:+2:9: +2:10\n-      let mut _2: [u8; 5000];              // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n-      let _3: usize;                       // in scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n-      let mut _4: usize;                   // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-      let mut _5: bool;                    // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-      scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/large_array_index.rs:+2:9: +2:10\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/large_array_index.rs:+2:9: +2:10\n-          StorageLive(_2);                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n-          _2 = [const 0_u8; 5000];         // scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n-          StorageLive(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n-          _3 = const 2_usize;              // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n-          _4 = const 5000_usize;           // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-          _5 = const true;                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-          assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 5000_usize, const 2_usize) -> bb1; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-      }\n-  \n-      bb1: {\n-          _1 = _2[_3];                     // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-          StorageDead(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:32: +2:33\n-          StorageDead(_2);                 // scope 0 at $DIR/large_array_index.rs:+2:32: +2:33\n-          nop;                             // scope 0 at $DIR/large_array_index.rs:+0:11: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/large_array_index.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/large_array_index.rs:+3:2: +3:2\n-      }\n-  }\n-  "}, {"sha": "a1002401f57b651843ea39365350c61875aeaab5", "filename": "src/test/mir-opt/dataflow-const-prop/previous/large_array_index.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Flarge_array_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Flarge_array_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Flarge_array_index.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,7 +0,0 @@\n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n-\n-// EMIT_MIR large_array_index.main.DataflowConstProp.diff\n-fn main() {\n-    // check that we don't propagate this, because it's too large\n-    let x: u8 = [0_u8; 5000][2];\n-}"}, {"sha": "a6f156fe052eeb01000e16de49a3fe9c3200ff78", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mult_by_zero.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmult_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmult_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmult_by_zero.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,10 +0,0 @@\n-// unit-test: DataflowConstProp\n-\n-// EMIT_MIR mult_by_zero.test.DataflowConstProp.diff\n-fn test(x: i32) -> i32 {\n-    x * 0\n-}\n-\n-fn main() {\n-    test(10);\n-}"}, {"sha": "c225b35e19239156f79384a4a701d7e79ce197ec", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mult_by_zero.test.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmult_by_zero.test.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmult_by_zero.test.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmult_by_zero.test.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,17 +0,0 @@\n-- // MIR for `test` before DataflowConstProp\n-+ // MIR for `test` after DataflowConstProp\n-  \n-  fn test(_1: i32) -> i32 {\n-      debug x => _1;                       // in scope 0 at $DIR/mult_by_zero.rs:+0:9: +0:10\n-      let mut _0: i32;                     // return place in scope 0 at $DIR/mult_by_zero.rs:+0:20: +0:23\n-      let mut _2: i32;                     // in scope 0 at $DIR/mult_by_zero.rs:+1:5: +1:6\n-  \n-      bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/mult_by_zero.rs:+1:5: +1:6\n-          _2 = _1;                         // scope 0 at $DIR/mult_by_zero.rs:+1:5: +1:6\n-          _0 = Mul(move _2, const 0_i32);  // scope 0 at $DIR/mult_by_zero.rs:+1:5: +1:10\n-          StorageDead(_2);                 // scope 0 at $DIR/mult_by_zero.rs:+1:9: +1:10\n-          return;                          // scope 0 at $DIR/mult_by_zero.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "098440dbe2f1ef97a6e1086af3e51f188649abff", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable.main.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,28 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable.rs:+0:11: +0:11\n-      let mut _1: i32;                     // in scope 0 at $DIR/mutable_variable.rs:+1:9: +1:14\n-      scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/mutable_variable.rs:+1:9: +1:14\n-          let _2: i32;                     // in scope 1 at $DIR/mutable_variable.rs:+3:9: +3:10\n-          scope 2 {\n-              debug y => _2;               // in scope 2 at $DIR/mutable_variable.rs:+3:9: +3:10\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable.rs:+1:9: +1:14\n-          _1 = const 42_i32;               // scope 0 at $DIR/mutable_variable.rs:+1:17: +1:19\n-          _1 = const 99_i32;               // scope 1 at $DIR/mutable_variable.rs:+2:5: +2:11\n-          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable.rs:+3:9: +3:10\n--         _2 = _1;                         // scope 1 at $DIR/mutable_variable.rs:+3:13: +3:14\n-+         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable.rs:+3:13: +3:14\n-          _0 = const ();                   // scope 0 at $DIR/mutable_variable.rs:+0:11: +4:2\n-          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable.rs:+4:1: +4:2\n-          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/mutable_variable.rs:+4:2: +4:2\n-      }\n-  }\n-  "}, {"sha": "680bcd7fc703bbe755264b890e27eda068d00558", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,8 +0,0 @@\n-// unit-test: DataflowConstProp\n-\n-// EMIT_MIR mutable_variable.main.DataflowConstProp.diff\n-fn main() {\n-    let mut x = 42;\n-    x = 99;\n-    let y = x;\n-}"}, {"sha": "1180dffdbadbf3903717674b9a22f02796ba3724", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_aggregate.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate.main.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,29 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_aggregate.rs:+0:11: +0:11\n-      let mut _1: (i32, i32);              // in scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n-      scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n-          let _2: (i32, i32);              // in scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n-          scope 2 {\n-              debug y => _2;               // in scope 2 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n-          Deinit(_1);                      // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n-          (_1.0: i32) = const 42_i32;      // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n-          (_1.1: i32) = const 43_i32;      // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n-          (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate.rs:+2:5: +2:13\n-          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n-          _2 = _1;                         // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n-          _0 = const ();                   // scope 0 at $DIR/mutable_variable_aggregate.rs:+0:11: +4:2\n-          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:+4:1: +4:2\n-          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/mutable_variable_aggregate.rs:+4:2: +4:2\n-      }\n-  }\n-  "}, {"sha": "255236049f988e32a864bcbed196b14a4256d50b", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_aggregate.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,8 +0,0 @@\n-// unit-test: DataflowConstProp\n-\n-// EMIT_MIR mutable_variable_aggregate.main.DataflowConstProp.diff\n-fn main() {\n-    let mut x = (42, 43);\n-    x.1 = 99;\n-    let y = x;\n-}"}, {"sha": "f2788547800734507fac80b010aa15b514e1f8d9", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_aggregate_mut_ref.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_mut_ref.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_mut_ref.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_mut_ref.main.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,36 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+0:11: +0:11\n-      let mut _1: (i32, i32);              // in scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+1:9: +1:14\n-      scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+1:9: +1:14\n-          let _2: &mut (i32, i32);         // in scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:9: +2:10\n-          scope 2 {\n-              debug z => _2;               // in scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:9: +2:10\n-              let _3: (i32, i32);          // in scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n-              scope 3 {\n-                  debug y => _3;           // in scope 3 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n-              }\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+1:9: +1:14\n-          Deinit(_1);                      // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+1:17: +1:25\n-          (_1.0: i32) = const 42_i32;      // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+1:17: +1:25\n-          (_1.1: i32) = const 43_i32;      // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+1:17: +1:25\n-          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:9: +2:10\n-          _2 = &mut _1;                    // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:13: +2:19\n-          ((*_2).1: i32) = const 99_i32;   // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+3:5: +3:13\n-          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n-          _3 = _1;                         // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:13: +4:14\n-          _0 = const ();                   // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+0:11: +5:2\n-          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n-          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n-          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:2: +5:2\n-      }\n-  }\n-  "}, {"sha": "54b898b4ee5c5cac491d92f91343a5f95131a12d", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_aggregate_mut_ref.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_mut_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_mut_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_mut_ref.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,9 +0,0 @@\n-// unit-test: DataflowConstProp\n-\n-// EMIT_MIR mutable_variable_aggregate_mut_ref.main.DataflowConstProp.diff\n-fn main() {\n-    let mut x = (42, 43);\n-    let z = &mut x;\n-    z.1 = 99;\n-    let y = x;\n-}"}, {"sha": "1f8e283f33a563be049afe33ba4516a787a68890", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_aggregate_partial_read.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_partial_read.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_partial_read.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_partial_read.main.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,35 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+0:11: +0:11\n-      let mut _1: (i32, i32);              // in scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:9: +1:14\n-      scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:9: +1:14\n-          let _2: i32;                     // in scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:9: +4:10\n-          scope 2 {\n-              debug y => _2;               // in scope 2 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:9: +4:10\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:9: +1:14\n-          _1 = foo() -> bb1;               // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:29: +1:34\n-                                           // mir::Constant\n-                                           // + span: $DIR/mutable_variable_aggregate_partial_read.rs:5:29: 5:32\n-                                           // + literal: Const { ty: fn() -> (i32, i32) {foo}, val: Value(<ZST>) }\n-      }\n-  \n-      bb1: {\n-          (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+2:5: +2:13\n-          (_1.0: i32) = const 42_i32;      // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+3:5: +3:13\n-          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:9: +4:10\n--         _2 = (_1.1: i32);                // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:13: +4:16\n-+         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:13: +4:16\n-          _0 = const ();                   // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+0:11: +5:2\n-          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:1: +5:2\n-          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:2: +5:2\n-      }\n-  }\n-  "}, {"sha": "0439a52081998b905b54f72fe34f465e78e05a2c", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_aggregate_partial_read.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_partial_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_partial_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_partial_read.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,14 +0,0 @@\n-// unit-test: DataflowConstProp\n-\n-// EMIT_MIR mutable_variable_aggregate_partial_read.main.DataflowConstProp.diff\n-fn main() {\n-    let mut x: (i32, i32) = foo();\n-    x.1 = 99;\n-    x.0 = 42;\n-    let y = x.1;\n-}\n-\n-#[inline(never)]\n-fn foo() -> (i32, i32) {\n-    unimplemented!()\n-}"}, {"sha": "9363e6b9aa1cea266384595a999094dfc4ed3256", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_no_prop.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_no_prop.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_no_prop.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_no_prop.main.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,48 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_no_prop.rs:+0:11: +0:11\n-      let mut _1: u32;                     // in scope 0 at $DIR/mutable_variable_no_prop.rs:+1:9: +1:14\n-      let _2: ();                          // in scope 0 at $DIR/mutable_variable_no_prop.rs:+2:5: +4:6\n-      let mut _3: u32;                     // in scope 0 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n-      let mut _4: *mut u32;                // in scope 0 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n-      scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_no_prop.rs:+1:9: +1:14\n-          let _5: u32;                     // in scope 1 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n-          scope 2 {\n-          }\n-          scope 3 {\n-              debug y => _5;               // in scope 3 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_no_prop.rs:+1:9: +1:14\n-          _1 = const 42_u32;               // scope 0 at $DIR/mutable_variable_no_prop.rs:+1:17: +1:19\n-          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+2:5: +4:6\n-          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n-          StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n-          _4 = const {alloc1: *mut u32};   // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n-                                           // mir::Constant\n-                                           // + span: $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n-                                           // + literal: Const { ty: *mut u32, val: Value(Scalar(alloc1)) }\n-          _3 = (*_4);                      // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n-          _1 = move _3;                    // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:9: +3:19\n-          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:18: +3:19\n-          StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:19: +3:20\n-          _2 = const ();                   // scope 2 at $DIR/mutable_variable_no_prop.rs:+2:5: +4:6\n-          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+4:5: +4:6\n-          StorageLive(_5);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n-          _5 = _1;                         // scope 1 at $DIR/mutable_variable_no_prop.rs:+5:13: +5:14\n-          _0 = const ();                   // scope 0 at $DIR/mutable_variable_no_prop.rs:+0:11: +6:2\n-          StorageDead(_5);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+6:1: +6:2\n-          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_no_prop.rs:+6:1: +6:2\n-          return;                          // scope 0 at $DIR/mutable_variable_no_prop.rs:+6:2: +6:2\n-      }\n-  }\n-  \n-  alloc1 (static: STATIC, size: 4, align: 4) {\n-      2a 00 00 00                                     \u2502 *...\n-  }\n-  "}, {"sha": "e4edf1475f2bf09c6c98d5a1ce0264eda034f361", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_no_prop.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_no_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_no_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_no_prop.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,12 +0,0 @@\n-// unit-test: DataflowConstProp\n-\n-static mut STATIC: u32 = 42;\n-\n-// EMIT_MIR mutable_variable_no_prop.main.DataflowConstProp.diff\n-fn main() {\n-    let mut x = 42;\n-    unsafe {\n-        x = STATIC;\n-    }\n-    let y = x;\n-}"}, {"sha": "8d31d5533da2a04cf341640849c8a69f98e1b3bb", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_unprop_assign.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_unprop_assign.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_unprop_assign.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_unprop_assign.main.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,54 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n-      let mut _3: i32;                     // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-      scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n-          let mut _2: (i32, i32);          // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n-          scope 2 {\n-              debug x => _2;               // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n-              let _4: i32;                 // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n-              scope 3 {\n-                  debug y => _4;           // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n-                  let _5: i32;             // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n-                  scope 4 {\n-                      debug z => _5;       // in scope 4 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n-                  }\n-              }\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n-          _1 = foo() -> bb1;               // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:13: +1:18\n-                                           // mir::Constant\n-                                           // + span: $DIR/mutable_variable_unprop_assign.rs:5:13: 5:16\n-                                           // + literal: Const { ty: fn() -> i32 {foo}, val: Value(<ZST>) }\n-      }\n-  \n-      bb1: {\n-          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n-          Deinit(_2);                      // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n-          (_2.0: i32) = const 1_i32;       // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n-          (_2.1: i32) = const 2_i32;       // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n-          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          _3 = _1;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          (_2.1: i32) = move _3;           // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:5: +3:12\n-          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n-          _4 = (_2.1: i32);                // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:13: +4:16\n-          StorageLive(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n--         _5 = (_2.0: i32);                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n-+         _5 = const 1_i32;                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n-          _0 = const ();                   // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+0:11: +6:2\n-          StorageDead(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n-          StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n-          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n-          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n-          return;                          // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+6:2: +6:2\n-      }\n-  }\n-  "}, {"sha": "942e96fee444223fe2550838104acf439b6332b8", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_unprop_assign.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_unprop_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_unprop_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_unprop_assign.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,15 +0,0 @@\n-// unit-test: DataflowConstProp\n-\n-// EMIT_MIR mutable_variable_unprop_assign.main.DataflowConstProp.diff\n-fn main() {\n-    let a = foo();\n-    let mut x: (i32, i32) = (1, 2);\n-    x.1 = a;\n-    let y = x.1;\n-    let z = x.0; // this could theoretically be allowed, but we can't handle it right now\n-}\n-\n-#[inline(never)]\n-fn foo() -> i32 {\n-    unimplemented!()\n-}"}, {"sha": "3b77cb6e543c2bf35b16dd924fca9190c2476491", "filename": "src/test/mir-opt/dataflow-const-prop/previous/optimizes_into_variable.main.DataflowConstProp.32bit.diff", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.DataflowConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.DataflowConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.DataflowConstProp.32bit.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,61 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n-      let mut _2: (i32, bool);             // in scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n-      let mut _4: [i32; 6];                // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:31\n-      let _5: usize;                       // in scope 0 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n-      let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n-      let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n-      let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:37\n-      scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n-          let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n-          scope 2 {\n-              debug y => _3;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n-              let _8: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-              scope 3 {\n-                  debug z => _8;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-              }\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n-          _2 = const (4_i32, false);       // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n-          assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n-      }\n-  \n-      bb1: {\n-          _1 = const 4_i32;                // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n-          StorageLive(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n-          StorageLive(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:31\n-          _4 = [const 0_i32, const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32]; // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:31\n-          StorageLive(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n-          _5 = const 3_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n-          _6 = const 6_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n-          _7 = const true;                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n-          assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 6_usize, const 3_usize) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n-      }\n-  \n-      bb2: {\n-          _3 = const 3_i32;                // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n-          StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n-          StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n-          StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-          StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:37\n-          Deinit(_9);                      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:37\n-          (_9.0: u32) = const 12_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:37\n-          (_9.1: u32) = const 42_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:37\n-          _8 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:39\n-          StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:39: +3:40\n-          nop;                             // scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +4:2\n-          StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n-          StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n-          StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2\n-      }\n-  }\n-  "}, {"sha": "3b77cb6e543c2bf35b16dd924fca9190c2476491", "filename": "src/test/mir-opt/dataflow-const-prop/previous/optimizes_into_variable.main.DataflowConstProp.64bit.diff", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.DataflowConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.DataflowConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.DataflowConstProp.64bit.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,61 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n-      let mut _2: (i32, bool);             // in scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n-      let mut _4: [i32; 6];                // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:31\n-      let _5: usize;                       // in scope 0 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n-      let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n-      let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n-      let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:37\n-      scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n-          let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n-          scope 2 {\n-              debug y => _3;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n-              let _8: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-              scope 3 {\n-                  debug z => _8;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-              }\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n-          _2 = const (4_i32, false);       // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n-          assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n-      }\n-  \n-      bb1: {\n-          _1 = const 4_i32;                // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n-          StorageLive(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n-          StorageLive(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:31\n-          _4 = [const 0_i32, const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32]; // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:31\n-          StorageLive(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n-          _5 = const 3_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n-          _6 = const 6_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n-          _7 = const true;                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n-          assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 6_usize, const 3_usize) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n-      }\n-  \n-      bb2: {\n-          _3 = const 3_i32;                // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n-          StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n-          StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n-          StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-          StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:37\n-          Deinit(_9);                      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:37\n-          (_9.0: u32) = const 12_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:37\n-          (_9.1: u32) = const 42_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:37\n-          _8 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:39\n-          StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:39: +3:40\n-          nop;                             // scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +4:2\n-          StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n-          StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n-          StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2\n-      }\n-  }\n-  "}, {"sha": "75cea8ad2cebf53475877761cdf1043e4ed2d643", "filename": "src/test/mir-opt/dataflow-const-prop/previous/optimizes_into_variable.main.SimplifyLocals.after.32bit.mir", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.SimplifyLocals.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.SimplifyLocals.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.SimplifyLocals.after.32bit.mir?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,27 +0,0 @@\n-// MIR for `main` after SimplifyLocals\n-\n-fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +0:11\n-    let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n-    scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n-        let _2: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n-        scope 2 {\n-            debug y => _2;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n-            let _3: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-            scope 3 {\n-                debug z => _3;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-            }\n-        }\n-    }\n-\n-    bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n-        StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n-        StorageLive(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-        StorageDead(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n-        StorageDead(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n-        StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n-        return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2\n-    }\n-}"}, {"sha": "75cea8ad2cebf53475877761cdf1043e4ed2d643", "filename": "src/test/mir-opt/dataflow-const-prop/previous/optimizes_into_variable.main.SimplifyLocals.after.64bit.mir", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.SimplifyLocals.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.SimplifyLocals.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.SimplifyLocals.after.64bit.mir?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,27 +0,0 @@\n-// MIR for `main` after SimplifyLocals\n-\n-fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +0:11\n-    let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n-    scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n-        let _2: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n-        scope 2 {\n-            debug y => _2;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n-            let _3: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-            scope 3 {\n-                debug z => _3;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-            }\n-        }\n-    }\n-\n-    bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n-        StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n-        StorageLive(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-        StorageDead(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n-        StorageDead(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n-        StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n-        return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2\n-    }\n-}"}, {"sha": "189a080dbef783550e4af71079c39055760b31d2", "filename": "src/test/mir-opt/dataflow-const-prop/previous/optimizes_into_variable.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,16 +0,0 @@\n-// unit-test\n-// compile-flags: -C overflow-checks=on\n-\n-struct Point {\n-    x: u32,\n-    y: u32,\n-}\n-\n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n-// EMIT_MIR optimizes_into_variable.main.DataflowConstProp.diff\n-// EMIT_MIR optimizes_into_variable.main.SimplifyLocals.after.mir\n-fn main() {\n-    let x = 2 + 2;\n-    let y = [0, 1, 2, 3, 4, 5][3];\n-    let z = (Point { x: 12, y: 42 }).y;\n-}"}, {"sha": "a48ba5bf2e1bb7e0a7ac157710a4c10b30e62054", "filename": "src/test/mir-opt/dataflow-const-prop/previous/read_immutable_static.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fread_immutable_static.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fread_immutable_static.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fread_immutable_static.main.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,45 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/read_immutable_static.rs:+0:11: +0:11\n-      let _1: u8;                          // in scope 0 at $DIR/read_immutable_static.rs:+1:9: +1:10\n-      let mut _2: u8;                      // in scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n-      let mut _3: &u8;                     // in scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n-      let mut _4: u8;                      // in scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n-      let mut _5: &u8;                     // in scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n-      scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/read_immutable_static.rs:+1:9: +1:10\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/read_immutable_static.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n-          StorageLive(_3);                 // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n-          _3 = const {alloc1: &u8};        // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n-                                           // mir::Constant\n-                                           // + span: $DIR/read_immutable_static.rs:7:13: 7:16\n-                                           // + literal: Const { ty: &u8, val: Value(Scalar(alloc1)) }\n-          _2 = (*_3);                      // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n-          StorageLive(_4);                 // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n-          StorageLive(_5);                 // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n-          _5 = const {alloc1: &u8};        // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n-                                           // mir::Constant\n-                                           // + span: $DIR/read_immutable_static.rs:7:19: 7:22\n-                                           // + literal: Const { ty: &u8, val: Value(Scalar(alloc1)) }\n-          _4 = (*_5);                      // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n-          _1 = Add(move _2, move _4);      // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:22\n-          StorageDead(_4);                 // scope 0 at $DIR/read_immutable_static.rs:+1:21: +1:22\n-          StorageDead(_2);                 // scope 0 at $DIR/read_immutable_static.rs:+1:21: +1:22\n-          StorageDead(_5);                 // scope 0 at $DIR/read_immutable_static.rs:+1:22: +1:23\n-          StorageDead(_3);                 // scope 0 at $DIR/read_immutable_static.rs:+1:22: +1:23\n-          _0 = const ();                   // scope 0 at $DIR/read_immutable_static.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/read_immutable_static.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/read_immutable_static.rs:+2:2: +2:2\n-      }\n-  }\n-  \n-  alloc1 (static: FOO, size: 1, align: 1) {\n-      02                                              \u2502 .\n-  }\n-  "}, {"sha": "6324b4a9c545bdc0fc789e3f29ab8ec616faebc0", "filename": "src/test/mir-opt/dataflow-const-prop/previous/read_immutable_static.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fread_immutable_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fread_immutable_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fread_immutable_static.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,8 +0,0 @@\n-// unit-test: DataflowConstProp\n-\n-static FOO: u8 = 2;\n-\n-// EMIT_MIR read_immutable_static.main.DataflowConstProp.diff\n-fn main() {\n-    let x = FOO + FOO;\n-}"}, {"sha": "018178ab624e319cc794c3d81c9d88874324b2b0", "filename": "src/test/mir-opt/dataflow-const-prop/previous/ref_deref.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.main.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,26 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/ref_deref.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n-      let mut _2: &i32;                    // in scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n-      let _3: i32;                         // in scope 0 at $DIR/ref_deref.rs:+1:8: +1:9\n-      let mut _4: &i32;                    // in scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n-          _4 = const _;                    // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n-                                           // mir::Constant\n-                                           // + span: $DIR/ref_deref.rs:6:6: 6:10\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n-          _2 = &(*_4);                     // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n-          _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n-          StorageDead(_2);                 // scope 0 at $DIR/ref_deref.rs:+1:10: +1:11\n-          StorageDead(_1);                 // scope 0 at $DIR/ref_deref.rs:+1:10: +1:11\n-          _0 = const ();                   // scope 0 at $DIR/ref_deref.rs:+0:11: +2:2\n-          return;                          // scope 0 at $DIR/ref_deref.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "015ec4d078c10cc1d9da5bc035cf4134d127af0f", "filename": "src/test/mir-opt/dataflow-const-prop/previous/ref_deref.main.PromoteTemps.diff", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.main.PromoteTemps.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,30 +0,0 @@\n-- // MIR for `main` before PromoteTemps\n-+ // MIR for `main` after PromoteTemps\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/ref_deref.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n-      let mut _2: &i32;                    // in scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n-      let _3: i32;                         // in scope 0 at $DIR/ref_deref.rs:+1:8: +1:9\n-+     let mut _4: &i32;                    // in scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n--         StorageLive(_3);                 // scope 0 at $DIR/ref_deref.rs:+1:8: +1:9\n--         _3 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:+1:8: +1:9\n--         _2 = &_3;                        // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n-+         _4 = const _;                    // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/ref_deref.rs:6:6: 6:10\n-+                                          // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n-+         _2 = &(*_4);                     // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n-          _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n--         StorageDead(_3);                 // scope 0 at $DIR/ref_deref.rs:+1:10: +1:11\n-          StorageDead(_2);                 // scope 0 at $DIR/ref_deref.rs:+1:10: +1:11\n-          StorageDead(_1);                 // scope 0 at $DIR/ref_deref.rs:+1:10: +1:11\n-          _0 = const ();                   // scope 0 at $DIR/ref_deref.rs:+0:11: +2:2\n-          return;                          // scope 0 at $DIR/ref_deref.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "b3ec2383b913cc1e22ca18da821af0dea4b2a856", "filename": "src/test/mir-opt/dataflow-const-prop/previous/ref_deref.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,7 +0,0 @@\n-// unit-test: DataflowConstProp\n-// EMIT_MIR ref_deref.main.PromoteTemps.diff\n-// EMIT_MIR ref_deref.main.DataflowConstProp.diff\n-\n-fn main() {\n-    *(&4);\n-}"}, {"sha": "f16d2fcafb8fa79818e881bcb9947e1d2038fb48", "filename": "src/test/mir-opt/dataflow-const-prop/previous/ref_deref_project.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.main.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,26 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/ref_deref_project.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/ref_deref_project.rs:+1:5: +1:17\n-      let mut _2: &i32;                    // in scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n-      let _3: (i32, i32);                  // in scope 0 at $DIR/ref_deref_project.rs:+1:8: +1:14\n-      let mut _4: &(i32, i32);             // in scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/ref_deref_project.rs:+1:5: +1:17\n-          StorageLive(_2);                 // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n-          _4 = const _;                    // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n-                                           // mir::Constant\n-                                           // + span: $DIR/ref_deref_project.rs:6:6: 6:17\n-                                           // + literal: Const { ty: &(i32, i32), val: Unevaluated(main, [], Some(promoted[0])) }\n-          _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n-          _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:+1:5: +1:17\n-          StorageDead(_2);                 // scope 0 at $DIR/ref_deref_project.rs:+1:17: +1:18\n-          StorageDead(_1);                 // scope 0 at $DIR/ref_deref_project.rs:+1:17: +1:18\n-          _0 = const ();                   // scope 0 at $DIR/ref_deref_project.rs:+0:11: +2:2\n-          return;                          // scope 0 at $DIR/ref_deref_project.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "cd0616e65baf847974e037b19474cf8f47439f98", "filename": "src/test/mir-opt/dataflow-const-prop/previous/ref_deref_project.main.PromoteTemps.diff", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.main.PromoteTemps.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,30 +0,0 @@\n-- // MIR for `main` before PromoteTemps\n-+ // MIR for `main` after PromoteTemps\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/ref_deref_project.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/ref_deref_project.rs:+1:5: +1:17\n-      let mut _2: &i32;                    // in scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n-      let _3: (i32, i32);                  // in scope 0 at $DIR/ref_deref_project.rs:+1:8: +1:14\n-+     let mut _4: &(i32, i32);             // in scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/ref_deref_project.rs:+1:5: +1:17\n-          StorageLive(_2);                 // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n--         StorageLive(_3);                 // scope 0 at $DIR/ref_deref_project.rs:+1:8: +1:14\n--         _3 = (const 4_i32, const 5_i32); // scope 0 at $DIR/ref_deref_project.rs:+1:8: +1:14\n--         _2 = &(_3.1: i32);               // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n-+         _4 = const _;                    // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/ref_deref_project.rs:6:6: 6:17\n-+                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(main, [], Some(promoted[0])) }\n-+         _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n-          _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:+1:5: +1:17\n--         StorageDead(_3);                 // scope 0 at $DIR/ref_deref_project.rs:+1:17: +1:18\n-          StorageDead(_2);                 // scope 0 at $DIR/ref_deref_project.rs:+1:17: +1:18\n-          StorageDead(_1);                 // scope 0 at $DIR/ref_deref_project.rs:+1:17: +1:18\n-          _0 = const ();                   // scope 0 at $DIR/ref_deref_project.rs:+0:11: +2:2\n-          return;                          // scope 0 at $DIR/ref_deref_project.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "65175917e13b8ae00037299dcad9152fc1389b56", "filename": "src/test/mir-opt/dataflow-const-prop/previous/ref_deref_project.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,7 +0,0 @@\n-// unit-test: DataflowConstProp\n-// EMIT_MIR ref_deref_project.main.PromoteTemps.diff\n-// EMIT_MIR ref_deref_project.main.DataflowConstProp.diff\n-\n-fn main() {\n-    *(&(4, 5).1); // This does not currently propagate (#67862)\n-}"}, {"sha": "6822f353b05bd1d0fd7aa4cd3a175ed536c30875", "filename": "src/test/mir-opt/dataflow-const-prop/previous/reify_fn_ptr.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freify_fn_ptr.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freify_fn_ptr.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freify_fn_ptr.main.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,29 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/reify_fn_ptr.rs:+0:11: +0:11\n-      let mut _1: *const fn();             // in scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:41\n-      let mut _2: usize;                   // in scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:26\n-      let mut _3: fn();                    // in scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:17\n-      scope 1 {\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:41\n-          StorageLive(_2);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:26\n-          StorageLive(_3);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:17\n-          _3 = main as fn() (Pointer(ReifyFnPointer)); // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:17\n-                                           // mir::Constant\n-                                           // + span: $DIR/reify_fn_ptr.rs:5:13: 5:17\n-                                           // + literal: Const { ty: fn() {main}, val: Value(<ZST>) }\n-          _2 = move _3 as usize (PointerExposeAddress); // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:26\n-          StorageDead(_3);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:25: +1:26\n-          _1 = move _2 as *const fn() (PointerFromExposedAddress); // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:41\n-          StorageDead(_2);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:40: +1:41\n-          StorageDead(_1);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:41: +1:42\n-          _0 = const ();                   // scope 0 at $DIR/reify_fn_ptr.rs:+0:11: +2:2\n-          return;                          // scope 0 at $DIR/reify_fn_ptr.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "c69680d36e2b5d07722aad8055b9519db9d1684a", "filename": "src/test/mir-opt/dataflow-const-prop/previous/reify_fn_ptr.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freify_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freify_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freify_fn_ptr.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,6 +0,0 @@\n-// unit-test: DataflowConstProp\n-// EMIT_MIR reify_fn_ptr.main.DataflowConstProp.diff\n-\n-fn main() {\n-    let _ = main as usize as *const fn();\n-}"}, {"sha": "4e3de9df468e012d6c1a57e3887aa150b1e343db", "filename": "src/test/mir-opt/dataflow-const-prop/previous/repeat.main.DataflowConstProp.32bit.diff", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.main.DataflowConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.main.DataflowConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.main.DataflowConstProp.32bit.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,41 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/repeat.rs:+0:11: +0:11\n-      let _1: u32;                         // in scope 0 at $DIR/repeat.rs:+1:9: +1:10\n-      let mut _2: u32;                     // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-      let mut _3: [u32; 8];                // in scope 0 at $DIR/repeat.rs:+1:18: +1:25\n-      let _4: usize;                       // in scope 0 at $DIR/repeat.rs:+1:26: +1:27\n-      let mut _5: usize;                   // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-      let mut _6: bool;                    // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-      scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/repeat.rs:+1:9: +1:10\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/repeat.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-          StorageLive(_3);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:25\n-          _3 = [const 42_u32; 8];          // scope 0 at $DIR/repeat.rs:+1:18: +1:25\n-          StorageLive(_4);                 // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n-          _4 = const 2_usize;              // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n-          _5 = Len(_3);                    // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n--         _6 = Lt(_4, _5);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n--         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-+         _6 = Lt(const 2_usize, _5);      // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-+         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, const 2_usize) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-      }\n-  \n-      bb1: {\n-          _2 = _3[_4];                     // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-          _1 = Add(move _2, const 0_u32);  // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n-          StorageDead(_2);                 // scope 0 at $DIR/repeat.rs:+1:31: +1:32\n-          StorageDead(_4);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n-          StorageDead(_3);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n-          _0 = const ();                   // scope 0 at $DIR/repeat.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/repeat.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/repeat.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "4e3de9df468e012d6c1a57e3887aa150b1e343db", "filename": "src/test/mir-opt/dataflow-const-prop/previous/repeat.main.DataflowConstProp.64bit.diff", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.main.DataflowConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.main.DataflowConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.main.DataflowConstProp.64bit.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,41 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/repeat.rs:+0:11: +0:11\n-      let _1: u32;                         // in scope 0 at $DIR/repeat.rs:+1:9: +1:10\n-      let mut _2: u32;                     // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-      let mut _3: [u32; 8];                // in scope 0 at $DIR/repeat.rs:+1:18: +1:25\n-      let _4: usize;                       // in scope 0 at $DIR/repeat.rs:+1:26: +1:27\n-      let mut _5: usize;                   // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-      let mut _6: bool;                    // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-      scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/repeat.rs:+1:9: +1:10\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/repeat.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-          StorageLive(_3);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:25\n-          _3 = [const 42_u32; 8];          // scope 0 at $DIR/repeat.rs:+1:18: +1:25\n-          StorageLive(_4);                 // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n-          _4 = const 2_usize;              // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n-          _5 = Len(_3);                    // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n--         _6 = Lt(_4, _5);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n--         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-+         _6 = Lt(const 2_usize, _5);      // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-+         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, const 2_usize) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-      }\n-  \n-      bb1: {\n-          _2 = _3[_4];                     // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-          _1 = Add(move _2, const 0_u32);  // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n-          StorageDead(_2);                 // scope 0 at $DIR/repeat.rs:+1:31: +1:32\n-          StorageDead(_4);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n-          StorageDead(_3);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n-          _0 = const ();                   // scope 0 at $DIR/repeat.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/repeat.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/repeat.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "df5284d11dadfc83425352c23d7011537e366b45", "filename": "src/test/mir-opt/dataflow-const-prop/previous/repeat.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,7 +0,0 @@\n-// unit-test: DataflowConstProp\n-\n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n-// EMIT_MIR repeat.main.DataflowConstProp.diff\n-fn main() {\n-    let x: u32 = [42; 8][2] + 0;\n-}"}, {"sha": "07cdba28e042fae8f8acfe9a98e128560917a18d", "filename": "src/test/mir-opt/dataflow-const-prop/previous/return_place.add.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.add.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.add.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.add.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,20 +0,0 @@\n-- // MIR for `add` before DataflowConstProp\n-+ // MIR for `add` after DataflowConstProp\n-  \n-  fn add() -> u32 {\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/return_place.rs:+0:13: +0:16\n-      let mut _1: (u32, bool);             // in scope 0 at $DIR/return_place.rs:+1:5: +1:10\n-  \n-      bb0: {\n-          _1 = CheckedAdd(const 2_u32, const 2_u32); // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n--         assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n-+         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n-      }\n-  \n-      bb1: {\n--         _0 = move (_1.0: u32);           // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n-+         _0 = const 4_u32;                // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n-          return;                          // scope 0 at $DIR/return_place.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "4f5ea6320f16a8e2c284c53f0ff30100164c21d6", "filename": "src/test/mir-opt/dataflow-const-prop/previous/return_place.add.PreCodegen.before.mir", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.add.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.add.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.add.PreCodegen.before.mir?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,16 +0,0 @@\n-// MIR for `add` before PreCodegen\n-\n-fn add() -> u32 {\n-    let mut _0: u32;                     // return place in scope 0 at $DIR/return_place.rs:+0:13: +0:16\n-    let mut _1: (u32, bool);             // in scope 0 at $DIR/return_place.rs:+1:5: +1:10\n-\n-    bb0: {\n-        _1 = CheckedAdd(const 2_u32, const 2_u32); // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n-        assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n-    }\n-\n-    bb1: {\n-        _0 = const 4_u32;                // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n-        return;                          // scope 0 at $DIR/return_place.rs:+2:2: +2:2\n-    }\n-}"}, {"sha": "26365cc5db2dc751e0c9a48a54c68ab8bcfe5765", "filename": "src/test/mir-opt/dataflow-const-prop/previous/return_place.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,12 +0,0 @@\n-// unit-test: DataflowConstProp\n-// compile-flags: -C overflow-checks=on\n-\n-// EMIT_MIR return_place.add.DataflowConstProp.diff\n-// EMIT_MIR return_place.add.PreCodegen.before.mir\n-fn add() -> u32 {\n-    2 + 2\n-}\n-\n-fn main() {\n-    add();\n-}"}, {"sha": "a0212aea5dd8a45304fa93ce7cbde64307d44e68", "filename": "src/test/mir-opt/dataflow-const-prop/previous/scalar_literal_propagation.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fscalar_literal_propagation.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fscalar_literal_propagation.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fscalar_literal_propagation.main.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,35 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/scalar_literal_propagation.rs:+0:11: +0:11\n-      let _1: u32;                         // in scope 0 at $DIR/scalar_literal_propagation.rs:+1:9: +1:10\n-      let _2: ();                          // in scope 0 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n-      let mut _3: u32;                     // in scope 0 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n-      scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/scalar_literal_propagation.rs:+1:9: +1:10\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/scalar_literal_propagation.rs:+1:9: +1:10\n-          _1 = const 1_u32;                // scope 0 at $DIR/scalar_literal_propagation.rs:+1:13: +1:14\n-          StorageLive(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n-          StorageLive(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n--         _3 = _1;                         // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n--         _2 = consume(move _3) -> bb1;    // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n-+         _3 = const 1_u32;                // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n-+         _2 = consume(const 1_u32) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n-                                           // mir::Constant\n-                                           // + span: $DIR/scalar_literal_propagation.rs:5:5: 5:12\n-                                           // + literal: Const { ty: fn(u32) {consume}, val: Value(<ZST>) }\n-      }\n-  \n-      bb1: {\n-          StorageDead(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:14: +2:15\n-          StorageDead(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:15: +2:16\n-          _0 = const ();                   // scope 0 at $DIR/scalar_literal_propagation.rs:+0:11: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/scalar_literal_propagation.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/scalar_literal_propagation.rs:+3:2: +3:2\n-      }\n-  }\n-  "}, {"sha": "d26cb30c0764580db6351e58e4d53ee3e57afa9d", "filename": "src/test/mir-opt/dataflow-const-prop/previous/scalar_literal_propagation.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fscalar_literal_propagation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fscalar_literal_propagation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fscalar_literal_propagation.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,9 +0,0 @@\n-// unit-test: DataflowConstProp\n-// EMIT_MIR scalar_literal_propagation.main.DataflowConstProp.diff\n-fn main() {\n-    let x = 1;\n-    consume(x);\n-}\n-\n-#[inline(never)]\n-fn consume(_: u32) {}"}, {"sha": "e39afae5aa6260b06768e356d9eed2ad5ac3735c", "filename": "src/test/mir-opt/dataflow-const-prop/previous/slice_len.main.DataflowConstProp.32bit.diff", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.32bit.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,48 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/slice_len.rs:+0:11: +0:11\n-      let _1: u32;                         // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-      let mut _2: &[u32];                  // in scope 0 at $DIR/slice_len.rs:+1:5: +1:30\n-      let mut _3: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-      let _4: &[u32; 3];                   // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-      let _5: [u32; 3];                    // in scope 0 at $DIR/slice_len.rs:+1:7: +1:19\n-      let _6: usize;                       // in scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n-      let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-      let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-      let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-          StorageLive(_2);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:30\n-          StorageLive(_3);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _9 = const _;                    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-                                           // mir::Constant\n-                                           // + span: $DIR/slice_len.rs:6:6: 6:19\n-                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _4 = &(*_9);                     // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _3 = &(*_4);                     // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:+1:18: +1:19\n-          StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n-          _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n-          _7 = Len((*_2));                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n--         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n--         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-+         _8 = Lt(const 1_usize, _7);      // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-+         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-      }\n-  \n-      bb1: {\n-          _1 = (*_2)[_6];                  // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-          StorageDead(_6);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n-          StorageDead(_4);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n-          StorageDead(_2);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n-          StorageDead(_1);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n-          _0 = const ();                   // scope 0 at $DIR/slice_len.rs:+0:11: +2:2\n-          return;                          // scope 0 at $DIR/slice_len.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "e39afae5aa6260b06768e356d9eed2ad5ac3735c", "filename": "src/test/mir-opt/dataflow-const-prop/previous/slice_len.main.DataflowConstProp.64bit.diff", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.64bit.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,48 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/slice_len.rs:+0:11: +0:11\n-      let _1: u32;                         // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-      let mut _2: &[u32];                  // in scope 0 at $DIR/slice_len.rs:+1:5: +1:30\n-      let mut _3: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-      let _4: &[u32; 3];                   // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-      let _5: [u32; 3];                    // in scope 0 at $DIR/slice_len.rs:+1:7: +1:19\n-      let _6: usize;                       // in scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n-      let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-      let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-      let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-          StorageLive(_2);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:30\n-          StorageLive(_3);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _9 = const _;                    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-                                           // mir::Constant\n-                                           // + span: $DIR/slice_len.rs:6:6: 6:19\n-                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _4 = &(*_9);                     // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _3 = &(*_4);                     // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:+1:18: +1:19\n-          StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n-          _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n-          _7 = Len((*_2));                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n--         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n--         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-+         _8 = Lt(const 1_usize, _7);      // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-+         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-      }\n-  \n-      bb1: {\n-          _1 = (*_2)[_6];                  // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-          StorageDead(_6);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n-          StorageDead(_4);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n-          StorageDead(_2);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n-          StorageDead(_1);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n-          _0 = const ();                   // scope 0 at $DIR/slice_len.rs:+0:11: +2:2\n-          return;                          // scope 0 at $DIR/slice_len.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "b22d33795ef106f0cb9ad7565317c93bf81d7c1d", "filename": "src/test/mir-opt/dataflow-const-prop/previous/slice_len.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,7 +0,0 @@\n-// unit-test: DataflowConstProp\n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n-\n-// EMIT_MIR slice_len.main.DataflowConstProp.diff\n-fn main() {\n-    (&[1u32, 2, 3] as &[u32])[1];\n-}"}, {"sha": "b2f98061d22943749ef5ce07e6530ed7cdec46a6", "filename": "src/test/mir-opt/dataflow-const-prop/previous/switch_int.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fswitch_int.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fswitch_int.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fswitch_int.main.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,33 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/switch_int.rs:+0:11: +0:11\n-      let mut _1: i32;                     // in scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n-          _1 = const 1_i32;                // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n-          switchInt(const 1_i32) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n-      }\n-  \n-      bb1: {\n-          _0 = foo(const -1_i32) -> bb3;   // scope 0 at $DIR/switch_int.rs:+3:14: +3:21\n-                                           // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:9:14: 9:17\n-                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n-      }\n-  \n-      bb2: {\n-          _0 = foo(const 0_i32) -> bb3;    // scope 0 at $DIR/switch_int.rs:+2:14: +2:20\n-                                           // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:8:14: 8:17\n-                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n-      }\n-  \n-      bb3: {\n-          StorageDead(_1);                 // scope 0 at $DIR/switch_int.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/switch_int.rs:+5:2: +5:2\n-      }\n-  }\n-  "}, {"sha": "74f9eafe42061cd0724e94a550eef3aa487dea20", "filename": "src/test/mir-opt/dataflow-const-prop/previous/switch_int.main.SimplifyConstCondition-after-const-prop.diff", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,34 +0,0 @@\n-- // MIR for `main` before SimplifyConstCondition-after-const-prop\n-+ // MIR for `main` after SimplifyConstCondition-after-const-prop\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/switch_int.rs:+0:11: +0:11\n-      let mut _1: i32;                     // in scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n-          _1 = const 1_i32;                // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n--         switchInt(const 1_i32) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n-+         goto -> bb2;                     // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n-      }\n-  \n-      bb1: {\n-          _0 = foo(const -1_i32) -> bb3;   // scope 0 at $DIR/switch_int.rs:+3:14: +3:21\n-                                           // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:9:14: 9:17\n-                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n-      }\n-  \n-      bb2: {\n-          _0 = foo(const 0_i32) -> bb3;    // scope 0 at $DIR/switch_int.rs:+2:14: +2:20\n-                                           // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:8:14: 8:17\n-                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n-      }\n-  \n-      bb3: {\n-          StorageDead(_1);                 // scope 0 at $DIR/switch_int.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/switch_int.rs:+5:2: +5:2\n-      }\n-  }\n-  "}, {"sha": "eec51c5c48c25885c75d6b6ce5d4e0c20bb897de", "filename": "src/test/mir-opt/dataflow-const-prop/previous/switch_int.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fswitch_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fswitch_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fswitch_int.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,11 +0,0 @@\n-#[inline(never)]\n-fn foo(_: i32) {}\n-\n-// EMIT_MIR switch_int.main.DataflowConstProp.diff\n-// EMIT_MIR switch_int.main.SimplifyConstCondition-after-const-prop.diff\n-fn main() {\n-    match 1 {\n-        1 => foo(0),\n-        _ => foo(-1),\n-    }\n-}"}, {"sha": "3a1b5f374f0ff093b05ce8a921bac139933c14b6", "filename": "src/test/mir-opt/dataflow-const-prop/previous/tuple_literal_propagation.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Ftuple_literal_propagation.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Ftuple_literal_propagation.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Ftuple_literal_propagation.main.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,35 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/tuple_literal_propagation.rs:+0:11: +0:11\n-      let _1: (u32, u32);                  // in scope 0 at $DIR/tuple_literal_propagation.rs:+1:9: +1:10\n-      let _2: ();                          // in scope 0 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n-      let mut _3: (u32, u32);              // in scope 0 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n-      scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/tuple_literal_propagation.rs:+1:9: +1:10\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/tuple_literal_propagation.rs:+1:9: +1:10\n-          Deinit(_1);                      // scope 0 at $DIR/tuple_literal_propagation.rs:+1:13: +1:19\n-          (_1.0: u32) = const 1_u32;       // scope 0 at $DIR/tuple_literal_propagation.rs:+1:13: +1:19\n-          (_1.1: u32) = const 2_u32;       // scope 0 at $DIR/tuple_literal_propagation.rs:+1:13: +1:19\n-          StorageLive(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n-          StorageLive(_3);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n-          _3 = _1;                         // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n-          _2 = consume(move _3) -> bb1;    // scope 1 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n-                                           // mir::Constant\n-                                           // + span: $DIR/tuple_literal_propagation.rs:6:5: 6:12\n-                                           // + literal: Const { ty: fn((u32, u32)) {consume}, val: Value(<ZST>) }\n-      }\n-  \n-      bb1: {\n-          StorageDead(_3);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:14: +3:15\n-          StorageDead(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:15: +3:16\n-          _0 = const ();                   // scope 0 at $DIR/tuple_literal_propagation.rs:+0:11: +4:2\n-          StorageDead(_1);                 // scope 0 at $DIR/tuple_literal_propagation.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/tuple_literal_propagation.rs:+4:2: +4:2\n-      }\n-  }\n-  "}, {"sha": "737f39673a3c85a2fd19c6f8d1a4019c2f8e952e", "filename": "src/test/mir-opt/dataflow-const-prop/previous/tuple_literal_propagation.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Ftuple_literal_propagation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Ftuple_literal_propagation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Ftuple_literal_propagation.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,10 +0,0 @@\n-// unit-test: DataflowConstProp\n-// EMIT_MIR tuple_literal_propagation.main.DataflowConstProp.diff\n-fn main() {\n-    let x = (1, 2);\n-\n-    consume(x);\n-}\n-\n-#[inline(never)]\n-fn consume(_: (u32, u32)) {}"}, {"sha": "177736d62cd905075d1d0cc7bfa5fa8a17cf4bad", "filename": "src/test/mir-opt/dataflow-const-prop/promoted.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fpromoted.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fpromoted.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fpromoted.main.DataflowConstProp.diff?ref=da4a40f81650222d86fa070aad87b5d20f8596e9", "patch": "@@ -16,7 +16,7 @@\n           StorageLive(_2);                 // scope 0 at $DIR/promoted.rs:+2:14: +2:17\n           _4 = const _;                    // scope 0 at $DIR/promoted.rs:+2:14: +2:17\n                                            // mir::Constant\n-                                           // + span: $DIR/promoted.rs:6:14: 6:17\n+                                           // + span: $DIR/promoted.rs:7:14: 7:17\n                                            // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n           _2 = &(*_4);                     // scope 0 at $DIR/promoted.rs:+2:14: +2:17\n           _1 = (*_2);                      // scope 0 at $DIR/promoted.rs:+2:13: +2:17"}, {"sha": "e5ca2f5b6072f7176670a0669cf2cc25e8773d3e", "filename": "src/test/mir-opt/dataflow-const-prop/promoted.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fpromoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fpromoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fpromoted.rs?ref=da4a40f81650222d86fa070aad87b5d20f8596e9", "patch": "@@ -1,4 +1,5 @@\n // unit-test: DataflowConstProp\n+// compile-flags: -Zunsound-mir-opts\n \n // EMIT_MIR promoted.main.DataflowConstProp.diff\n fn main() {"}, {"sha": "c344de76b6a3278932386458646075e50e9f094d", "filename": "src/test/mir-opt/dataflow-const-prop/recursive.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 132, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Frecursive.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Frecursive.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Frecursive.main.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,132 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/recursive.rs:+0:11: +0:11\n-      let _1: S<'_>;                       // in scope 0 at $DIR/recursive.rs:+2:9: +2:10\n-      let mut _3: &S<'_>;                  // in scope 0 at $DIR/recursive.rs:+3:20: +3:22\n-      let _4: &S<'_>;                      // in scope 0 at $DIR/recursive.rs:+3:20: +3:22\n-      let mut _6: &S<'_>;                  // in scope 0 at $DIR/recursive.rs:+4:20: +4:22\n-      let _7: &S<'_>;                      // in scope 0 at $DIR/recursive.rs:+4:20: +4:22\n-      let mut _9: isize;                   // in scope 0 at $DIR/recursive.rs:+6:9: +6:18\n-      let mut _11: isize;                  // in scope 0 at $DIR/recursive.rs:+7:13: +7:22\n-      let mut _13: isize;                  // in scope 0 at $DIR/recursive.rs:+8:17: +8:28\n-      let mut _15: !;                      // in scope 0 at $DIR/recursive.rs:+9:22: +9:43\n-      let mut _16: !;                      // in scope 0 at $DIR/recursive.rs:+11:18: +11:39\n-      let mut _17: !;                      // in scope 0 at $DIR/recursive.rs:+13:14: +13:35\n-      let mut _18: &S<'_>;                 // in scope 0 at $DIR/recursive.rs:+7:20: +7:21\n-      let mut _19: &S<'_>;                 // in scope 0 at $DIR/recursive.rs:+7:20: +7:21\n-      scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/recursive.rs:+2:9: +2:10\n-          let _2: S<'_>;                   // in scope 1 at $DIR/recursive.rs:+3:9: +3:10\n-          scope 2 {\n-              debug b => _2;               // in scope 2 at $DIR/recursive.rs:+3:9: +3:10\n-              let _5: S<'_>;               // in scope 2 at $DIR/recursive.rs:+4:9: +4:10\n-              scope 3 {\n-                  debug c => _5;           // in scope 3 at $DIR/recursive.rs:+4:9: +4:10\n-                  let _8: u32;             // in scope 3 at $DIR/recursive.rs:+5:9: +5:10\n-                  let _10: &S<'_>;         // in scope 3 at $DIR/recursive.rs:+6:16: +6:17\n-                  scope 4 {\n-                      debug d => _8;       // in scope 4 at $DIR/recursive.rs:+5:9: +5:10\n-                  }\n-                  scope 5 {\n-                      debug b => _10;      // in scope 5 at $DIR/recursive.rs:+6:16: +6:17\n-                      let _12: &&S<'_>;    // in scope 5 at $DIR/recursive.rs:+7:20: +7:21\n-                      scope 6 {\n-                          debug a => _12;  // in scope 6 at $DIR/recursive.rs:+7:20: +7:21\n-                          let _14: &u32;   // in scope 6 at $DIR/recursive.rs:+8:24: +8:27\n-                          scope 7 {\n-                              debug num => _14; // in scope 7 at $DIR/recursive.rs:+8:24: +8:27\n-                          }\n-                      }\n-                  }\n-              }\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/recursive.rs:+2:9: +2:10\n-          Deinit(_1);                      // scope 0 at $DIR/recursive.rs:+2:13: +2:22\n-          ((_1 as Num).0: u32) = const 0_u32; // scope 0 at $DIR/recursive.rs:+2:13: +2:22\n-          discriminant(_1) = 1;            // scope 0 at $DIR/recursive.rs:+2:13: +2:22\n-          StorageLive(_2);                 // scope 1 at $DIR/recursive.rs:+3:9: +3:10\n-          StorageLive(_3);                 // scope 1 at $DIR/recursive.rs:+3:20: +3:22\n-          StorageLive(_4);                 // scope 1 at $DIR/recursive.rs:+3:20: +3:22\n-          _4 = &_1;                        // scope 1 at $DIR/recursive.rs:+3:20: +3:22\n-          _3 = &(*_4);                     // scope 1 at $DIR/recursive.rs:+3:20: +3:22\n-          Deinit(_2);                      // scope 1 at $DIR/recursive.rs:+3:13: +3:23\n-          ((_2 as Rec).0: &S<'_>) = move _3; // scope 1 at $DIR/recursive.rs:+3:13: +3:23\n-          discriminant(_2) = 0;            // scope 1 at $DIR/recursive.rs:+3:13: +3:23\n-          StorageDead(_3);                 // scope 1 at $DIR/recursive.rs:+3:22: +3:23\n-          StorageDead(_4);                 // scope 1 at $DIR/recursive.rs:+3:23: +3:24\n-          StorageLive(_5);                 // scope 2 at $DIR/recursive.rs:+4:9: +4:10\n-          StorageLive(_6);                 // scope 2 at $DIR/recursive.rs:+4:20: +4:22\n-          StorageLive(_7);                 // scope 2 at $DIR/recursive.rs:+4:20: +4:22\n-          _7 = &_2;                        // scope 2 at $DIR/recursive.rs:+4:20: +4:22\n-          _6 = &(*_7);                     // scope 2 at $DIR/recursive.rs:+4:20: +4:22\n-          Deinit(_5);                      // scope 2 at $DIR/recursive.rs:+4:13: +4:23\n-          ((_5 as Rec).0: &S<'_>) = move _6; // scope 2 at $DIR/recursive.rs:+4:13: +4:23\n-          discriminant(_5) = 0;            // scope 2 at $DIR/recursive.rs:+4:13: +4:23\n-          StorageDead(_6);                 // scope 2 at $DIR/recursive.rs:+4:22: +4:23\n-          StorageDead(_7);                 // scope 2 at $DIR/recursive.rs:+4:23: +4:24\n-          StorageLive(_8);                 // scope 3 at $DIR/recursive.rs:+5:9: +5:10\n-          _9 = discriminant(_5);           // scope 3 at $DIR/recursive.rs:+5:19: +5:20\n-          switchInt(move _9) -> [0_isize: bb2, otherwise: bb1]; // scope 3 at $DIR/recursive.rs:+5:13: +5:20\n-      }\n-  \n-      bb1: {\n-          StorageLive(_17);                // scope 3 at $DIR/recursive.rs:+13:14: +13:35\n-          _17 = exit(const 0_i32);         // scope 3 at $DIR/recursive.rs:+13:14: +13:35\n-                                           // mir::Constant\n-                                           // + span: $DIR/recursive.rs:22:14: 22:32\n-                                           // + literal: Const { ty: fn(i32) -> ! {exit}, val: Value(<ZST>) }\n-      }\n-  \n-      bb2: {\n-          StorageLive(_10);                // scope 3 at $DIR/recursive.rs:+6:16: +6:17\n-          _10 = ((_5 as Rec).0: &S<'_>);   // scope 3 at $DIR/recursive.rs:+6:16: +6:17\n-          _11 = discriminant((*_10));      // scope 5 at $DIR/recursive.rs:+6:28: +6:29\n-          switchInt(move _11) -> [0_isize: bb4, otherwise: bb3]; // scope 5 at $DIR/recursive.rs:+6:22: +6:29\n-      }\n-  \n-      bb3: {\n-          StorageLive(_16);                // scope 5 at $DIR/recursive.rs:+11:18: +11:39\n-          _16 = exit(const 0_i32);         // scope 5 at $DIR/recursive.rs:+11:18: +11:39\n-                                           // mir::Constant\n-                                           // + span: $DIR/recursive.rs:20:18: 20:36\n-                                           // + literal: Const { ty: fn(i32) -> ! {exit}, val: Value(<ZST>) }\n-      }\n-  \n-      bb4: {\n-          StorageLive(_12);                // scope 5 at $DIR/recursive.rs:+7:20: +7:21\n-          _12 = &(((*_10) as Rec).0: &S<'_>); // scope 5 at $DIR/recursive.rs:+7:20: +7:21\n-          _18 = deref_copy (*_12);         // scope 6 at $DIR/recursive.rs:+7:32: +7:33\n-          _13 = discriminant((*_18));      // scope 6 at $DIR/recursive.rs:+7:32: +7:33\n-          switchInt(move _13) -> [1_isize: bb6, otherwise: bb5]; // scope 6 at $DIR/recursive.rs:+7:26: +7:33\n-      }\n-  \n-      bb5: {\n-          StorageLive(_15);                // scope 6 at $DIR/recursive.rs:+9:22: +9:43\n-          _15 = exit(const 0_i32);         // scope 6 at $DIR/recursive.rs:+9:22: +9:43\n-                                           // mir::Constant\n-                                           // + span: $DIR/recursive.rs:18:22: 18:40\n-                                           // + literal: Const { ty: fn(i32) -> ! {exit}, val: Value(<ZST>) }\n-      }\n-  \n-      bb6: {\n-          StorageLive(_14);                // scope 6 at $DIR/recursive.rs:+8:24: +8:27\n-          _19 = deref_copy (*_12);         // scope 6 at $DIR/recursive.rs:+8:24: +8:27\n-          _14 = &(((*_19) as Num).0: u32); // scope 6 at $DIR/recursive.rs:+8:24: +8:27\n-          _8 = (*_14);                     // scope 7 at $DIR/recursive.rs:+8:32: +8:36\n-          StorageDead(_14);                // scope 6 at $DIR/recursive.rs:+8:35: +8:36\n-          StorageDead(_12);                // scope 5 at $DIR/recursive.rs:+10:13: +10:14\n-          StorageDead(_10);                // scope 3 at $DIR/recursive.rs:+12:9: +12:10\n-          _0 = const ();                   // scope 0 at $DIR/recursive.rs:+0:11: +15:2\n-          StorageDead(_8);                 // scope 3 at $DIR/recursive.rs:+15:1: +15:2\n-          StorageDead(_5);                 // scope 2 at $DIR/recursive.rs:+15:1: +15:2\n-          StorageDead(_2);                 // scope 1 at $DIR/recursive.rs:+15:1: +15:2\n-          StorageDead(_1);                 // scope 0 at $DIR/recursive.rs:+15:1: +15:2\n-          return;                          // scope 0 at $DIR/recursive.rs:+15:2: +15:2\n-      }\n-  }\n-  "}, {"sha": "d7ca182b9fcfa42717900c854c2672b6884f55f2", "filename": "src/test/mir-opt/dataflow-const-prop/recursive.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Frecursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Frecursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Frecursive.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,24 +0,0 @@\n-// unit-test: DataflowConstProp\n-\n-enum S<'a> {\n-    Rec(&'a S<'a>),\n-    Num(u32),\n-}\n-\n-// EMIT_MIR recursive.main.DataflowConstProp.diff\n-fn main() {\n-    // FIXME: This currently does not work, because downcasts are rejected.\n-    let a = S::Num(0);\n-    let b = S::Rec(&a);\n-    let c = S::Rec(&b);\n-    let d = match c {\n-        S::Rec(b) => match b {\n-            S::Rec(a) => match a {\n-                S::Num(num) => *num,\n-                _ => std::process::exit(0),\n-            },\n-            _ => std::process::exit(0),\n-        },\n-        _ => std::process::exit(0),\n-    };\n-}"}, {"sha": "746082eee531afeb3131764321388aba1de682a7", "filename": "src/test/mir-opt/dataflow-const-prop/ref_mut.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_mut.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_mut.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_mut.main.DataflowConstProp.diff?ref=da4a40f81650222d86fa070aad87b5d20f8596e9", "patch": "@@ -54,7 +54,7 @@\n           StorageLive(_8);                 // scope 6 at $DIR/ref_mut.rs:+9:10: +9:12\n           _11 = const _;                   // scope 6 at $DIR/ref_mut.rs:+9:10: +9:12\n                                            // mir::Constant\n-                                           // + span: $DIR/ref_mut.rs:13:10: 13:12\n+                                           // + span: $DIR/ref_mut.rs:14:10: 14:12\n                                            // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n           _8 = &(*_11);                    // scope 6 at $DIR/ref_mut.rs:+9:10: +9:12\n           _7 = &(*_8);                     // scope 6 at $DIR/ref_mut.rs:+9:10: +9:12"}, {"sha": "57283439516906b4323094600f0653a4f1145693", "filename": "src/test/mir-opt/dataflow-const-prop/ref_mut.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_mut.rs?ref=da4a40f81650222d86fa070aad87b5d20f8596e9", "patch": "@@ -1,4 +1,5 @@\n // unit-test: DataflowConstProp\n+// compile-flags: -Zunsound-mir-opts\n \n // EMIT_MIR ref_mut.main.DataflowConstProp.diff\n fn main() {"}, {"sha": "dd1242d7cac02234e154cbfbb37eedfe9cc20f7b", "filename": "src/test/mir-opt/dataflow-const-prop/self_assign.main.DataflowConstProp.diff", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fself_assign.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fself_assign.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fself_assign.main.DataflowConstProp.diff?ref=da4a40f81650222d86fa070aad87b5d20f8596e9", "patch": "@@ -0,0 +1,52 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/self_assign.rs:+0:11: +0:11\n+      let mut _1: i32;                     // in scope 0 at $DIR/self_assign.rs:+1:9: +1:14\n+      let mut _2: i32;                     // in scope 0 at $DIR/self_assign.rs:+2:9: +2:10\n+      let mut _3: i32;                     // in scope 0 at $DIR/self_assign.rs:+3:9: +3:10\n+      let mut _5: &i32;                    // in scope 0 at $DIR/self_assign.rs:+6:9: +6:10\n+      let mut _6: i32;                     // in scope 0 at $DIR/self_assign.rs:+7:9: +7:11\n+      scope 1 {\n+          debug a => _1;                   // in scope 1 at $DIR/self_assign.rs:+1:9: +1:14\n+          let mut _4: &i32;                // in scope 1 at $DIR/self_assign.rs:+5:9: +5:14\n+          scope 2 {\n+              debug b => _4;               // in scope 2 at $DIR/self_assign.rs:+5:9: +5:14\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/self_assign.rs:+1:9: +1:14\n+          _1 = const 0_i32;                // scope 0 at $DIR/self_assign.rs:+1:17: +1:18\n+          StorageLive(_2);                 // scope 1 at $DIR/self_assign.rs:+2:9: +2:10\n+-         _2 = _1;                         // scope 1 at $DIR/self_assign.rs:+2:9: +2:10\n+-         _1 = Add(move _2, const 1_i32);  // scope 1 at $DIR/self_assign.rs:+2:5: +2:14\n++         _2 = const 0_i32;                // scope 1 at $DIR/self_assign.rs:+2:9: +2:10\n++         _1 = const 1_i32;                // scope 1 at $DIR/self_assign.rs:+2:5: +2:14\n+          StorageDead(_2);                 // scope 1 at $DIR/self_assign.rs:+2:13: +2:14\n+          StorageLive(_3);                 // scope 1 at $DIR/self_assign.rs:+3:9: +3:10\n+-         _3 = _1;                         // scope 1 at $DIR/self_assign.rs:+3:9: +3:10\n+-         _1 = move _3;                    // scope 1 at $DIR/self_assign.rs:+3:5: +3:10\n++         _3 = const 1_i32;                // scope 1 at $DIR/self_assign.rs:+3:9: +3:10\n++         _1 = const 1_i32;                // scope 1 at $DIR/self_assign.rs:+3:5: +3:10\n+          StorageDead(_3);                 // scope 1 at $DIR/self_assign.rs:+3:9: +3:10\n+          StorageLive(_4);                 // scope 1 at $DIR/self_assign.rs:+5:9: +5:14\n+          _4 = &_1;                        // scope 1 at $DIR/self_assign.rs:+5:17: +5:19\n+          StorageLive(_5);                 // scope 2 at $DIR/self_assign.rs:+6:9: +6:10\n+          _5 = _4;                         // scope 2 at $DIR/self_assign.rs:+6:9: +6:10\n+          _4 = move _5;                    // scope 2 at $DIR/self_assign.rs:+6:5: +6:10\n+          StorageDead(_5);                 // scope 2 at $DIR/self_assign.rs:+6:9: +6:10\n+          StorageLive(_6);                 // scope 2 at $DIR/self_assign.rs:+7:9: +7:11\n+-         _6 = (*_4);                      // scope 2 at $DIR/self_assign.rs:+7:9: +7:11\n+-         _1 = move _6;                    // scope 2 at $DIR/self_assign.rs:+7:5: +7:11\n++         _6 = const 1_i32;                // scope 2 at $DIR/self_assign.rs:+7:9: +7:11\n++         _1 = const 1_i32;                // scope 2 at $DIR/self_assign.rs:+7:5: +7:11\n+          StorageDead(_6);                 // scope 2 at $DIR/self_assign.rs:+7:10: +7:11\n+          _0 = const ();                   // scope 0 at $DIR/self_assign.rs:+0:11: +8:2\n+          StorageDead(_4);                 // scope 1 at $DIR/self_assign.rs:+8:1: +8:2\n+          StorageDead(_1);                 // scope 0 at $DIR/self_assign.rs:+8:1: +8:2\n+          return;                          // scope 0 at $DIR/self_assign.rs:+8:2: +8:2\n+      }\n+  }\n+  "}, {"sha": "e8a62a839604336a08f90da8e052f2bd5e21e601", "filename": "src/test/mir-opt/dataflow-const-prop/self_assign.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fself_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fself_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fself_assign.rs?ref=da4a40f81650222d86fa070aad87b5d20f8596e9", "patch": "@@ -0,0 +1,13 @@\n+// unit-test: DataflowConstProp\n+// compile-flags: -Zunsound-mir-opts\n+\n+// EMIT_MIR self_assign.main.DataflowConstProp.diff\n+fn main() {\n+    let mut a = 0;\n+    a = a + 1;\n+    a = a;\n+\n+    let mut b = &a;\n+    b = b;\n+    a = *b;\n+}"}, {"sha": "c09e4061ededf488536ce86555cdb4a519818185", "filename": "src/test/mir-opt/dataflow-const-prop/self_assign_add.main.DataflowConstProp.diff", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fself_assign_add.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fself_assign_add.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fself_assign_add.main.DataflowConstProp.diff?ref=da4a40f81650222d86fa070aad87b5d20f8596e9", "patch": "@@ -0,0 +1,23 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/self_assign_add.rs:+0:11: +0:11\n+      let mut _1: i32;                     // in scope 0 at $DIR/self_assign_add.rs:+1:9: +1:14\n+      scope 1 {\n+          debug a => _1;                   // in scope 1 at $DIR/self_assign_add.rs:+1:9: +1:14\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/self_assign_add.rs:+1:9: +1:14\n+          _1 = const 0_i32;                // scope 0 at $DIR/self_assign_add.rs:+1:17: +1:18\n+-         _1 = Add(_1, const 1_i32);       // scope 1 at $DIR/self_assign_add.rs:+2:5: +2:11\n+-         _1 = Add(_1, const 1_i32);       // scope 1 at $DIR/self_assign_add.rs:+3:5: +3:11\n++         _1 = const 1_i32;                // scope 1 at $DIR/self_assign_add.rs:+2:5: +2:11\n++         _1 = const 2_i32;                // scope 1 at $DIR/self_assign_add.rs:+3:5: +3:11\n+          _0 = const ();                   // scope 0 at $DIR/self_assign_add.rs:+0:11: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/self_assign_add.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/self_assign_add.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "be2a4f04f62885f2a9459fd8b0de0f5f31fc1295", "filename": "src/test/mir-opt/dataflow-const-prop/self_assign_add.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fself_assign_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fself_assign_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fself_assign_add.rs?ref=da4a40f81650222d86fa070aad87b5d20f8596e9", "patch": "@@ -0,0 +1,9 @@\n+// unit-test: DataflowConstProp\n+// compile-flags: -Zunsound-mir-opts\n+\n+// EMIT_MIR self_assign_add.main.DataflowConstProp.diff\n+fn main() {\n+    let mut a = 0;\n+    a += 1;\n+    a += 1;\n+}"}, {"sha": "2d0d70b6a742879a4f81868e6ca0e72e448409cb", "filename": "src/test/mir-opt/dataflow-const-prop/static_ref.main.DataflowConstProp.diff", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fstatic_ref.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fstatic_ref.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fstatic_ref.main.DataflowConstProp.diff?ref=da4a40f81650222d86fa070aad87b5d20f8596e9", "patch": "@@ -3,47 +3,47 @@\n   \n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/static_ref.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/static_ref.rs:+2:9: +2:10\n-      let mut _3: &i32;                    // in scope 0 at $DIR/static_ref.rs:+4:9: +4:11\n-      let _4: &i32;                        // in scope 0 at $DIR/static_ref.rs:+4:9: +4:11\n-      let _5: &i32;                        // in scope 0 at $DIR/static_ref.rs:+4:10: +4:11\n+      let _1: i32;                         // in scope 0 at $DIR/static_ref.rs:+3:9: +3:10\n+      let mut _3: &i32;                    // in scope 0 at $DIR/static_ref.rs:+5:9: +5:11\n+      let _4: &i32;                        // in scope 0 at $DIR/static_ref.rs:+5:9: +5:11\n+      let _5: &i32;                        // in scope 0 at $DIR/static_ref.rs:+5:10: +5:11\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/static_ref.rs:+2:9: +2:10\n-          let mut _2: &i32;                // in scope 1 at $DIR/static_ref.rs:+3:9: +3:14\n+          debug x => _1;                   // in scope 1 at $DIR/static_ref.rs:+3:9: +3:10\n+          let mut _2: &i32;                // in scope 1 at $DIR/static_ref.rs:+4:9: +4:14\n           scope 2 {\n-              debug r => _2;               // in scope 2 at $DIR/static_ref.rs:+3:9: +3:14\n-              let _6: i32;                 // in scope 2 at $DIR/static_ref.rs:+5:9: +5:10\n+              debug r => _2;               // in scope 2 at $DIR/static_ref.rs:+4:9: +4:14\n+              let _6: i32;                 // in scope 2 at $DIR/static_ref.rs:+6:9: +6:10\n               scope 3 {\n-                  debug y => _6;           // in scope 3 at $DIR/static_ref.rs:+5:9: +5:10\n+                  debug y => _6;           // in scope 3 at $DIR/static_ref.rs:+6:9: +6:10\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/static_ref.rs:+2:9: +2:10\n-          _1 = const 0_i32;                // scope 0 at $DIR/static_ref.rs:+2:13: +2:14\n-          StorageLive(_2);                 // scope 1 at $DIR/static_ref.rs:+3:9: +3:14\n-          _2 = &_1;                        // scope 1 at $DIR/static_ref.rs:+3:17: +3:19\n-          StorageLive(_3);                 // scope 2 at $DIR/static_ref.rs:+4:9: +4:11\n-          StorageLive(_4);                 // scope 2 at $DIR/static_ref.rs:+4:9: +4:11\n-          StorageLive(_5);                 // scope 2 at $DIR/static_ref.rs:+4:10: +4:11\n-          _5 = const {alloc1: &i32};       // scope 2 at $DIR/static_ref.rs:+4:10: +4:11\n+          StorageLive(_1);                 // scope 0 at $DIR/static_ref.rs:+3:9: +3:10\n+          _1 = const 0_i32;                // scope 0 at $DIR/static_ref.rs:+3:13: +3:14\n+          StorageLive(_2);                 // scope 1 at $DIR/static_ref.rs:+4:9: +4:14\n+          _2 = &_1;                        // scope 1 at $DIR/static_ref.rs:+4:17: +4:19\n+          StorageLive(_3);                 // scope 2 at $DIR/static_ref.rs:+5:9: +5:11\n+          StorageLive(_4);                 // scope 2 at $DIR/static_ref.rs:+5:9: +5:11\n+          StorageLive(_5);                 // scope 2 at $DIR/static_ref.rs:+5:10: +5:11\n+          _5 = const {alloc1: &i32};       // scope 2 at $DIR/static_ref.rs:+5:10: +5:11\n                                            // mir::Constant\n-                                           // + span: $DIR/static_ref.rs:8:10: 8:11\n+                                           // + span: $DIR/static_ref.rs:10:10: 10:11\n                                            // + literal: Const { ty: &i32, val: Value(Scalar(alloc1)) }\n-          _4 = &(*_5);                     // scope 2 at $DIR/static_ref.rs:+4:9: +4:11\n-          _3 = &(*_4);                     // scope 2 at $DIR/static_ref.rs:+4:9: +4:11\n-          _2 = move _3;                    // scope 2 at $DIR/static_ref.rs:+4:5: +4:11\n-          StorageDead(_3);                 // scope 2 at $DIR/static_ref.rs:+4:10: +4:11\n-          StorageDead(_5);                 // scope 2 at $DIR/static_ref.rs:+4:11: +4:12\n-          StorageDead(_4);                 // scope 2 at $DIR/static_ref.rs:+4:11: +4:12\n-          StorageLive(_6);                 // scope 2 at $DIR/static_ref.rs:+5:9: +5:10\n-          _6 = (*_2);                      // scope 2 at $DIR/static_ref.rs:+5:13: +5:15\n-          _0 = const ();                   // scope 0 at $DIR/static_ref.rs:+0:11: +6:2\n-          StorageDead(_6);                 // scope 2 at $DIR/static_ref.rs:+6:1: +6:2\n-          StorageDead(_2);                 // scope 1 at $DIR/static_ref.rs:+6:1: +6:2\n-          StorageDead(_1);                 // scope 0 at $DIR/static_ref.rs:+6:1: +6:2\n-          return;                          // scope 0 at $DIR/static_ref.rs:+6:2: +6:2\n+          _4 = &(*_5);                     // scope 2 at $DIR/static_ref.rs:+5:9: +5:11\n+          _3 = &(*_4);                     // scope 2 at $DIR/static_ref.rs:+5:9: +5:11\n+          _2 = move _3;                    // scope 2 at $DIR/static_ref.rs:+5:5: +5:11\n+          StorageDead(_3);                 // scope 2 at $DIR/static_ref.rs:+5:10: +5:11\n+          StorageDead(_5);                 // scope 2 at $DIR/static_ref.rs:+5:11: +5:12\n+          StorageDead(_4);                 // scope 2 at $DIR/static_ref.rs:+5:11: +5:12\n+          StorageLive(_6);                 // scope 2 at $DIR/static_ref.rs:+6:9: +6:10\n+          _6 = (*_2);                      // scope 2 at $DIR/static_ref.rs:+6:13: +6:15\n+          _0 = const ();                   // scope 0 at $DIR/static_ref.rs:+0:11: +7:2\n+          StorageDead(_6);                 // scope 2 at $DIR/static_ref.rs:+7:1: +7:2\n+          StorageDead(_2);                 // scope 1 at $DIR/static_ref.rs:+7:1: +7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/static_ref.rs:+7:1: +7:2\n+          return;                          // scope 0 at $DIR/static_ref.rs:+7:2: +7:2\n       }\n   }\n   "}, {"sha": "90f20ae51ceb974d92ed26a34a53e02a013235fa", "filename": "src/test/mir-opt/dataflow-const-prop/static_ref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fstatic_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fstatic_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fstatic_ref.rs?ref=da4a40f81650222d86fa070aad87b5d20f8596e9", "patch": "@@ -1,7 +1,9 @@\n // unit-test: DataflowConstProp\n+// compile-flags: -Zunsound-mir-opts\n \n // EMIT_MIR static_ref.main.DataflowConstProp.diff\n fn main() {\n+    // Currently, this will not propagate.\n     static P: i32 = 5;\n     let x = 0;\n     let mut r = &x;"}, {"sha": "d1b8895901eaac9bcb14e4ae6b15be024488dac8", "filename": "src/test/mir-opt/dataflow-const-prop/terminator.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.main.DataflowConstProp.diff?ref=da4a40f81650222d86fa070aad87b5d20f8596e9", "patch": "@@ -25,7 +25,7 @@\n -         _2 = foo(move _3) -> bb1;        // scope 1 at $DIR/terminator.rs:+2:5: +2:15\n +         _2 = foo(const 2_i32) -> bb1;    // scope 1 at $DIR/terminator.rs:+2:5: +2:15\n                                            // mir::Constant\n-                                           // + span: $DIR/terminator.rs:8:5: 8:8\n+                                           // + span: $DIR/terminator.rs:9:5: 9:8\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "7d8bb58f684eba8e6a5693786fbbf61e10194255", "filename": "src/test/mir-opt/dataflow-const-prop/terminator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.rs?ref=da4a40f81650222d86fa070aad87b5d20f8596e9", "patch": "@@ -1,4 +1,5 @@\n // unit-test: DataflowConstProp\n+// compile-flags: -Zunsound-mir-opts\n \n fn foo(n: i32) {}\n "}, {"sha": "7fb1c8b7cafb638a0902b0197cecbe06dd747eb3", "filename": "src/test/mir-opt/dataflow-const-prop/tuple.main.DataflowConstProp.diff", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Ftuple.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Ftuple.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Ftuple.main.DataflowConstProp.diff?ref=da4a40f81650222d86fa070aad87b5d20f8596e9", "patch": "@@ -0,0 +1,86 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/tuple.rs:+0:11: +0:11\n+      let mut _1: (i32, i32);              // in scope 0 at $DIR/tuple.rs:+1:9: +1:14\n+      let mut _4: i32;                     // in scope 0 at $DIR/tuple.rs:+3:13: +3:22\n+      let mut _5: i32;                     // in scope 0 at $DIR/tuple.rs:+3:13: +3:16\n+      let mut _6: i32;                     // in scope 0 at $DIR/tuple.rs:+3:19: +3:22\n+      let mut _7: &(i32, i32);             // in scope 0 at $DIR/tuple.rs:+5:9: +5:11\n+      let _8: &(i32, i32);                 // in scope 0 at $DIR/tuple.rs:+5:9: +5:11\n+      let mut _10: i32;                    // in scope 0 at $DIR/tuple.rs:+6:13: +6:22\n+      let mut _11: i32;                    // in scope 0 at $DIR/tuple.rs:+6:13: +6:16\n+      let mut _12: i32;                    // in scope 0 at $DIR/tuple.rs:+6:19: +6:22\n+      scope 1 {\n+          debug a => _1;                   // in scope 1 at $DIR/tuple.rs:+1:9: +1:14\n+          let mut _2: &(i32, i32);         // in scope 1 at $DIR/tuple.rs:+2:9: +2:14\n+          scope 2 {\n+              debug b => _2;               // in scope 2 at $DIR/tuple.rs:+2:9: +2:14\n+              let _3: i32;                 // in scope 2 at $DIR/tuple.rs:+3:9: +3:10\n+              scope 3 {\n+                  debug c => _3;           // in scope 3 at $DIR/tuple.rs:+3:9: +3:10\n+                  let _9: i32;             // in scope 3 at $DIR/tuple.rs:+6:9: +6:10\n+                  scope 4 {\n+                      debug d => _9;       // in scope 4 at $DIR/tuple.rs:+6:9: +6:10\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/tuple.rs:+1:9: +1:14\n+          Deinit(_1);                      // scope 0 at $DIR/tuple.rs:+1:17: +1:23\n+          (_1.0: i32) = const 1_i32;       // scope 0 at $DIR/tuple.rs:+1:17: +1:23\n+          (_1.1: i32) = const 2_i32;       // scope 0 at $DIR/tuple.rs:+1:17: +1:23\n+          StorageLive(_2);                 // scope 1 at $DIR/tuple.rs:+2:9: +2:14\n+          _2 = &_1;                        // scope 1 at $DIR/tuple.rs:+2:17: +2:19\n+          StorageLive(_3);                 // scope 2 at $DIR/tuple.rs:+3:9: +3:10\n+          StorageLive(_4);                 // scope 2 at $DIR/tuple.rs:+3:13: +3:22\n+          StorageLive(_5);                 // scope 2 at $DIR/tuple.rs:+3:13: +3:16\n+-         _5 = (_1.0: i32);                // scope 2 at $DIR/tuple.rs:+3:13: +3:16\n++         _5 = const 1_i32;                // scope 2 at $DIR/tuple.rs:+3:13: +3:16\n+          StorageLive(_6);                 // scope 2 at $DIR/tuple.rs:+3:19: +3:22\n+-         _6 = ((*_2).1: i32);             // scope 2 at $DIR/tuple.rs:+3:19: +3:22\n+-         _4 = Add(move _5, move _6);      // scope 2 at $DIR/tuple.rs:+3:13: +3:22\n++         _6 = const 2_i32;                // scope 2 at $DIR/tuple.rs:+3:19: +3:22\n++         _4 = const 3_i32;                // scope 2 at $DIR/tuple.rs:+3:13: +3:22\n+          StorageDead(_6);                 // scope 2 at $DIR/tuple.rs:+3:21: +3:22\n+          StorageDead(_5);                 // scope 2 at $DIR/tuple.rs:+3:21: +3:22\n+-         _3 = Add(move _4, const 3_i32);  // scope 2 at $DIR/tuple.rs:+3:13: +3:26\n++         _3 = const 6_i32;                // scope 2 at $DIR/tuple.rs:+3:13: +3:26\n+          StorageDead(_4);                 // scope 2 at $DIR/tuple.rs:+3:25: +3:26\n+          Deinit(_1);                      // scope 3 at $DIR/tuple.rs:+4:5: +4:15\n+          (_1.0: i32) = const 2_i32;       // scope 3 at $DIR/tuple.rs:+4:5: +4:15\n+          (_1.1: i32) = const 3_i32;       // scope 3 at $DIR/tuple.rs:+4:5: +4:15\n+          StorageLive(_7);                 // scope 3 at $DIR/tuple.rs:+5:9: +5:11\n+          StorageLive(_8);                 // scope 3 at $DIR/tuple.rs:+5:9: +5:11\n+          _8 = &_1;                        // scope 3 at $DIR/tuple.rs:+5:9: +5:11\n+          _7 = &(*_8);                     // scope 3 at $DIR/tuple.rs:+5:9: +5:11\n+          _2 = move _7;                    // scope 3 at $DIR/tuple.rs:+5:5: +5:11\n+          StorageDead(_7);                 // scope 3 at $DIR/tuple.rs:+5:10: +5:11\n+          StorageDead(_8);                 // scope 3 at $DIR/tuple.rs:+5:11: +5:12\n+          StorageLive(_9);                 // scope 3 at $DIR/tuple.rs:+6:9: +6:10\n+          StorageLive(_10);                // scope 3 at $DIR/tuple.rs:+6:13: +6:22\n+          StorageLive(_11);                // scope 3 at $DIR/tuple.rs:+6:13: +6:16\n+-         _11 = (_1.0: i32);               // scope 3 at $DIR/tuple.rs:+6:13: +6:16\n++         _11 = const 2_i32;               // scope 3 at $DIR/tuple.rs:+6:13: +6:16\n+          StorageLive(_12);                // scope 3 at $DIR/tuple.rs:+6:19: +6:22\n+-         _12 = ((*_2).1: i32);            // scope 3 at $DIR/tuple.rs:+6:19: +6:22\n+-         _10 = Add(move _11, move _12);   // scope 3 at $DIR/tuple.rs:+6:13: +6:22\n++         _12 = const 3_i32;               // scope 3 at $DIR/tuple.rs:+6:19: +6:22\n++         _10 = const 5_i32;               // scope 3 at $DIR/tuple.rs:+6:13: +6:22\n+          StorageDead(_12);                // scope 3 at $DIR/tuple.rs:+6:21: +6:22\n+          StorageDead(_11);                // scope 3 at $DIR/tuple.rs:+6:21: +6:22\n+-         _9 = Add(move _10, const 4_i32); // scope 3 at $DIR/tuple.rs:+6:13: +6:26\n++         _9 = const 9_i32;                // scope 3 at $DIR/tuple.rs:+6:13: +6:26\n+          StorageDead(_10);                // scope 3 at $DIR/tuple.rs:+6:25: +6:26\n+          _0 = const ();                   // scope 0 at $DIR/tuple.rs:+0:11: +7:2\n+          StorageDead(_9);                 // scope 3 at $DIR/tuple.rs:+7:1: +7:2\n+          StorageDead(_3);                 // scope 2 at $DIR/tuple.rs:+7:1: +7:2\n+          StorageDead(_2);                 // scope 1 at $DIR/tuple.rs:+7:1: +7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/tuple.rs:+7:1: +7:2\n+          return;                          // scope 0 at $DIR/tuple.rs:+7:2: +7:2\n+      }\n+  }\n+  "}, {"sha": "dfc49fe857ab0891517fbb6ae14d0ed9ab823135", "filename": "src/test/mir-opt/dataflow-const-prop/tuple.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da4a40f81650222d86fa070aad87b5d20f8596e9/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Ftuple.rs?ref=da4a40f81650222d86fa070aad87b5d20f8596e9", "patch": "@@ -0,0 +1,12 @@\n+// unit-test: DataflowConstProp\n+// compile-flags: -Zunsound-mir-opts\n+\n+// EMIT_MIR tuple.main.DataflowConstProp.diff\n+fn main() {\n+    let mut a = (1, 2);\n+    let mut b = &a;\n+    let c = a.0 + b.1 + 3;\n+    a = (2, 3);\n+    b = &a;\n+    let d = a.0 + b.1 + 4;\n+}"}, {"sha": "684c661fc1185f9478d8387cc6e4f666acb5af18", "filename": "src/test/mir-opt/dataflow-const-prop/unnamed.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Funnamed.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Funnamed.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Funnamed.main.DataflowConstProp.diff?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,38 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/unnamed.rs:+0:11: +0:11\n-      let mut _1: i32;                     // in scope 0 at $DIR/unnamed.rs:+1:9: +1:14\n-      let mut _2: i32;                     // in scope 0 at $DIR/unnamed.rs:+3:10: +3:11\n-      let mut _3: &i32;                    // in scope 0 at $DIR/unnamed.rs:+3:10: +3:11\n-      scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/unnamed.rs:+1:9: +1:14\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/unnamed.rs:+1:9: +1:14\n-          _1 = const 0_i32;                // scope 0 at $DIR/unnamed.rs:+1:17: +1:18\n--         _1 = Add(_1, const 1_i32);       // scope 1 at $DIR/unnamed.rs:+2:5: +2:11\n-+         _1 = const 1_i32;                // scope 1 at $DIR/unnamed.rs:+2:5: +2:11\n-          StorageLive(_2);                 // scope 1 at $DIR/unnamed.rs:+3:10: +3:11\n-          StorageLive(_3);                 // scope 1 at $DIR/unnamed.rs:+3:10: +3:11\n-          _3 = const {alloc1: &i32};       // scope 1 at $DIR/unnamed.rs:+3:10: +3:11\n-                                           // mir::Constant\n-                                           // + span: $DIR/unnamed.rs:9:10: 9:11\n-                                           // + literal: Const { ty: &i32, val: Value(Scalar(alloc1)) }\n-          _2 = (*_3);                      // scope 1 at $DIR/unnamed.rs:+3:10: +3:11\n--         _1 = Add(_1, move _2);           // scope 1 at $DIR/unnamed.rs:+3:5: +3:11\n-+         _1 = Add(const 1_i32, move _2);  // scope 1 at $DIR/unnamed.rs:+3:5: +3:11\n-          StorageDead(_2);                 // scope 1 at $DIR/unnamed.rs:+3:10: +3:11\n-          StorageDead(_3);                 // scope 1 at $DIR/unnamed.rs:+3:11: +3:12\n-          _0 = const ();                   // scope 0 at $DIR/unnamed.rs:+0:11: +4:2\n-          StorageDead(_1);                 // scope 0 at $DIR/unnamed.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/unnamed.rs:+4:2: +4:2\n-      }\n-  }\n-  \n-  alloc1 (static: g, size: 4, align: 4) {\n-      02 00 00 00                                     \u2502 ....\n-  }\n-  "}, {"sha": "91f5a9e1c12d1b652921c23ffcbedd36aa7aa219", "filename": "src/test/mir-opt/dataflow-const-prop/unnamed.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Funnamed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f82a9f89e3c0388442835df632b56ccea08a971/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Funnamed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Funnamed.rs?ref=1f82a9f89e3c0388442835df632b56ccea08a971", "patch": "@@ -1,10 +0,0 @@\n-// unit-test: DataflowConstProp\n-\n-static g: i32 = 2;\n-\n-// EMIT_MIR unnamed.main.DataflowConstProp.diff\n-fn main() {\n-    let mut a = 0;\n-    a += 1;\n-    a += g;\n-}"}]}