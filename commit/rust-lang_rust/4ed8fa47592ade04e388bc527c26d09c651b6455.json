{"sha": "4ed8fa47592ade04e388bc527c26d09c651b6455", "node_id": "C_kwDOAAsO6NoAKDRlZDhmYTQ3NTkyYWRlMDRlMzg4YmM1MjdjMjZkMDljNjUxYjY0NTU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-22T15:04:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-22T15:04:16Z"}, "message": "Rollup merge of #100872 - JanBeh:PR_vec_default_alloc_doc, r=fee1-dead\n\nAdd guarantee that Vec::default() does not alloc\n\nCurrently `Vec::new()` is guaranteed to not allocate until elements are pushed onto the `Vec`, but such a guarantee is missing for `Vec`'s implementation of `Default::default`.\n\nThis adds such a guarantee for `Vec::default()` to the API reference.\n\nSee also [this discussion on URLO](https://users.rust-lang.org/t/guarantee-that-vec-default-does-not-allocate/79903).", "tree": {"sha": "98d9c646995d871fd4c68aa8e4ad564c50e5e3a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98d9c646995d871fd4c68aa8e4ad564c50e5e3a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ed8fa47592ade04e388bc527c26d09c651b6455", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjA5rwCRBK7hj4Ov3rIwAAtPEIABNGJOkuq06cI7xuNxJ83Itd\nZ7OsWn5ziShY5N3lW9J0d0sVF9SXlISOVk6f4WRVVbitg0/l6lKFXqECt3cneIqN\nD6xHbmGBqMa5/T1yQeR01/HVRbeqQUeH/4x98eIkFIqUaoU5/fnpS7yWxh4QbhTo\nMBQh1Y/oGbIvjWnloS/bPonsr0LdkPj8/Csy2fwOkcC6qx5UZROTdutcxtkWRElT\nifdA5Z8ABOniMdIs3OKPLlUEfZHhz0Jd4wQhQj8+qTBVgiDzMhVF8Ep6YZtIUdxO\nOpc/WWbac39NNDMOF46hSSy79goFfoT624tXGOL+Z1FDahn6SzMFCjBDDSuLgS0=\n=U+8A\n-----END PGP SIGNATURE-----\n", "payload": "tree 98d9c646995d871fd4c68aa8e4ad564c50e5e3a0\nparent 58d23737a6d77c88af6b9b600058877910db1bff\nparent 0227b71865b982a309a0f8992e33042a4d23ae0d\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1661180656 +0530\ncommitter GitHub <noreply@github.com> 1661180656 +0530\n\nRollup merge of #100872 - JanBeh:PR_vec_default_alloc_doc, r=fee1-dead\n\nAdd guarantee that Vec::default() does not alloc\n\nCurrently `Vec::new()` is guaranteed to not allocate until elements are pushed onto the `Vec`, but such a guarantee is missing for `Vec`'s implementation of `Default::default`.\n\nThis adds such a guarantee for `Vec::default()` to the API reference.\n\nSee also [this discussion on URLO](https://users.rust-lang.org/t/guarantee-that-vec-default-does-not-allocate/79903).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ed8fa47592ade04e388bc527c26d09c651b6455", "html_url": "https://github.com/rust-lang/rust/commit/4ed8fa47592ade04e388bc527c26d09c651b6455", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ed8fa47592ade04e388bc527c26d09c651b6455/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58d23737a6d77c88af6b9b600058877910db1bff", "url": "https://api.github.com/repos/rust-lang/rust/commits/58d23737a6d77c88af6b9b600058877910db1bff", "html_url": "https://github.com/rust-lang/rust/commit/58d23737a6d77c88af6b9b600058877910db1bff"}, {"sha": "0227b71865b982a309a0f8992e33042a4d23ae0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0227b71865b982a309a0f8992e33042a4d23ae0d", "html_url": "https://github.com/rust-lang/rust/commit/0227b71865b982a309a0f8992e33042a4d23ae0d"}], "stats": {"total": 2, "additions": 2, "deletions": 0}, "files": [{"sha": "2c786fd511eada2e8a1f96cb708b1e62e7f2a51d", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ed8fa47592ade04e388bc527c26d09c651b6455/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed8fa47592ade04e388bc527c26d09c651b6455/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=4ed8fa47592ade04e388bc527c26d09c651b6455", "patch": "@@ -2928,6 +2928,8 @@ unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {\n #[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n impl<T> const Default for Vec<T> {\n     /// Creates an empty `Vec<T>`.\n+    ///\n+    /// The vector will not allocate until elements are pushed onto it.\n     fn default() -> Vec<T> {\n         Vec::new()\n     }"}]}