{"sha": "cbcc7dd182b9bf67d664508b82284c5539ef8819", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiY2M3ZGQxODJiOWJmNjdkNjY0NTA4YjgyMjg0YzU1MzllZjg4MTk=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-27T22:51:21Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-09T21:05:37Z"}, "message": "Give built-in macros stable addresses in the standard library", "tree": {"sha": "380086210f82747225b911eb6cc0598b767d0285", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/380086210f82747225b911eb6cc0598b767d0285"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbcc7dd182b9bf67d664508b82284c5539ef8819", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbcc7dd182b9bf67d664508b82284c5539ef8819", "html_url": "https://github.com/rust-lang/rust/commit/cbcc7dd182b9bf67d664508b82284c5539ef8819", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbcc7dd182b9bf67d664508b82284c5539ef8819/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "534b42394d743511db1335d5ed08d507ab7c6e73", "url": "https://api.github.com/repos/rust-lang/rust/commits/534b42394d743511db1335d5ed08d507ab7c6e73", "html_url": "https://github.com/rust-lang/rust/commit/534b42394d743511db1335d5ed08d507ab7c6e73"}], "stats": {"total": 528, "additions": 364, "deletions": 164}, "files": [{"sha": "0c99356390bdae251df33ee78f031d06e332c4b6", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=cbcc7dd182b9bf67d664508b82284c5539ef8819", "patch": "@@ -133,6 +133,14 @@ pub trait Clone : Sized {\n     }\n }\n \n+/// Derive macro generating an impl of the trait `Clone`.\n+#[cfg(not(bootstrap))]\n+#[rustc_builtin_macro]\n+#[rustc_macro_transparency = \"semitransparent\"]\n+#[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n+#[allow_internal_unstable(core_intrinsics, derive_clone_copy)]\n+pub macro Clone($item:item) { /* compiler built-in */ }\n+\n // FIXME(aburka): these structs are used solely by #[derive] to\n // assert that every component of a type implements Clone or Copy.\n //"}, {"sha": "38a52d97da21286440ee1d8e396f814ecda95de2", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=cbcc7dd182b9bf67d664508b82284c5539ef8819", "patch": "@@ -200,6 +200,14 @@ pub trait PartialEq<Rhs: ?Sized = Self> {\n     fn ne(&self, other: &Rhs) -> bool { !self.eq(other) }\n }\n \n+/// Derive macro generating an impl of the trait `PartialEq`.\n+#[cfg(not(bootstrap))]\n+#[rustc_builtin_macro]\n+#[rustc_macro_transparency = \"semitransparent\"]\n+#[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n+#[allow_internal_unstable(core_intrinsics)]\n+pub macro PartialEq($item:item) { /* compiler built-in */ }\n+\n /// Trait for equality comparisons which are [equivalence relations](\n /// https://en.wikipedia.org/wiki/Equivalence_relation).\n ///\n@@ -256,6 +264,14 @@ pub trait Eq: PartialEq<Self> {\n     fn assert_receiver_is_total_eq(&self) {}\n }\n \n+/// Derive macro generating an impl of the trait `Eq`.\n+#[cfg(not(bootstrap))]\n+#[rustc_builtin_macro]\n+#[rustc_macro_transparency = \"semitransparent\"]\n+#[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n+#[allow_internal_unstable(core_intrinsics, derive_eq)]\n+pub macro Eq($item:item) { /* compiler built-in */ }\n+\n // FIXME: this struct is used solely by #[derive] to\n // assert that every component of a type implements Eq.\n //\n@@ -600,6 +616,14 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     }\n }\n \n+/// Derive macro generating an impl of the trait `Ord`.\n+#[cfg(not(bootstrap))]\n+#[rustc_builtin_macro]\n+#[rustc_macro_transparency = \"semitransparent\"]\n+#[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n+#[allow_internal_unstable(core_intrinsics)]\n+pub macro Ord($item:item) { /* compiler built-in */ }\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Eq for Ordering {}\n \n@@ -842,6 +866,14 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     }\n }\n \n+/// Derive macro generating an impl of the trait `PartialOrd`.\n+#[cfg(not(bootstrap))]\n+#[rustc_builtin_macro]\n+#[rustc_macro_transparency = \"semitransparent\"]\n+#[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n+#[allow_internal_unstable(core_intrinsics)]\n+pub macro PartialOrd($item:item) { /* compiler built-in */ }\n+\n /// Compares and returns the minimum of two values.\n ///\n /// Returns the first argument if the comparison determines them to be equal."}, {"sha": "8d95e9de15849347f9d7fffe901afaf70a86187e", "filename": "src/libcore/default.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=cbcc7dd182b9bf67d664508b82284c5539ef8819", "patch": "@@ -115,6 +115,14 @@ pub trait Default: Sized {\n     fn default() -> Self;\n }\n \n+/// Derive macro generating an impl of the trait `Default`.\n+#[cfg(not(bootstrap))]\n+#[rustc_builtin_macro]\n+#[rustc_macro_transparency = \"semitransparent\"]\n+#[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n+#[allow_internal_unstable(core_intrinsics)]\n+pub macro Default($item:item) { /* compiler built-in */ }\n+\n macro_rules! default_impl {\n     ($t:ty, $v:expr, $doc:tt) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "0ea01d4b84a2c8d922ee4a6ae636224387a206f4", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=cbcc7dd182b9bf67d664508b82284c5539ef8819", "patch": "@@ -545,6 +545,21 @@ pub trait Debug {\n     fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n }\n \n+// Separate module to reexport the macro `Debug` from prelude without the trait `Debug`.\n+#[cfg(not(bootstrap))]\n+pub(crate) mod macros {\n+    /// Derive macro generating an impl of the trait `Debug`.\n+    #[rustc_builtin_macro]\n+    #[rustc_macro_transparency = \"semitransparent\"]\n+    #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n+    #[allow_internal_unstable(core_intrinsics)]\n+    pub macro Debug($item:item) { /* compiler built-in */ }\n+}\n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n+#[doc(inline)]\n+pub use macros::Debug;\n+\n /// Format trait for an empty format, `{}`.\n ///\n /// `Display` is similar to [`Debug`][debug], but `Display` is for user-facing"}, {"sha": "c4cbf40a93a151a6ff21108043c583d1d0603c20", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=cbcc7dd182b9bf67d664508b82284c5539ef8819", "patch": "@@ -198,6 +198,21 @@ pub trait Hash {\n     }\n }\n \n+// Separate module to reexport the macro `Hash` from prelude without the trait `Hash`.\n+#[cfg(not(bootstrap))]\n+pub(crate) mod macros {\n+    /// Derive macro generating an impl of the trait `Hash`.\n+    #[rustc_builtin_macro]\n+    #[rustc_macro_transparency = \"semitransparent\"]\n+    #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n+    #[allow_internal_unstable(core_intrinsics)]\n+    pub macro Hash($item:item) { /* compiler built-in */ }\n+}\n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n+#[doc(inline)]\n+pub use macros::Hash;\n+\n /// A trait for hashing an arbitrary stream of bytes.\n ///\n /// Instances of `Hasher` usually represent state that is changed while hashing"}, {"sha": "f9dc53874acb1a415445ddbf8fb46d3be57acce9", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 63, "deletions": 122, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=cbcc7dd182b9bf67d664508b82284c5539ef8819", "patch": "@@ -714,9 +714,9 @@ pub(crate) mod builtin {\n     /// [`panic!`]: ../std/macro.panic.html\n     #[stable(feature = \"compile_error_macro\", since = \"1.20.0\")]\n     #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    pub macro compile_error {\n-        ($msg:expr) => ({ /* compiler built-in */ }),\n+    #[macro_export]\n+    macro_rules! compile_error {\n+        ($msg:expr) => ({ /* compiler built-in */ });\n         ($msg:expr,) => ({ /* compiler built-in */ })\n     }\n \n@@ -768,8 +768,10 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[allow_internal_unstable(fmt_internals)]\n     #[rustc_builtin_macro]\n-    pub macro format_args {\n-        ($fmt:expr) => ({ /* compiler built-in */ }),\n+    #[macro_export]\n+    #[rustc_macro_transparency = \"opaque\"]\n+    macro_rules! format_args {\n+        ($fmt:expr) => ({ /* compiler built-in */ });\n         ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ })\n     }\n \n@@ -779,8 +781,10 @@ pub(crate) mod builtin {\n                          language use and is subject to change\")]\n     #[allow_internal_unstable(fmt_internals)]\n     #[rustc_builtin_macro]\n-    pub macro format_args_nl {\n-        ($fmt:expr) => ({ /* compiler built-in */ }),\n+    #[macro_export]\n+    #[rustc_macro_transparency = \"opaque\"]\n+    macro_rules! format_args_nl {\n+        ($fmt:expr) => ({ /* compiler built-in */ });\n         ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ })\n     }\n \n@@ -817,9 +821,9 @@ pub(crate) mod builtin {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    pub macro env {\n-        ($name:expr) => ({ /* compiler built-in */ }),\n+    #[macro_export]\n+    macro_rules! env {\n+        ($name:expr) => ({ /* compiler built-in */ });\n         ($name:expr,) => ({ /* compiler built-in */ })\n     }\n \n@@ -844,9 +848,9 @@ pub(crate) mod builtin {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    pub macro option_env {\n-        ($name:expr) => ({ /* compiler built-in */ }),\n+    #[macro_export]\n+    macro_rules! option_env {\n+        ($name:expr) => ({ /* compiler built-in */ });\n         ($name:expr,) => ({ /* compiler built-in */ })\n     }\n \n@@ -877,9 +881,9 @@ pub(crate) mod builtin {\n     #[unstable(feature = \"concat_idents\", issue = \"29599\",\n                reason = \"`concat_idents` is not stable enough for use and is subject to change\")]\n     #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    pub macro concat_idents {\n-        ($($e:ident),+) => ({ /* compiler built-in */ }),\n+    #[macro_export]\n+    macro_rules! concat_idents {\n+        ($($e:ident),+) => ({ /* compiler built-in */ });\n         ($($e:ident,)+) => ({ /* compiler built-in */ })\n     }\n \n@@ -900,9 +904,9 @@ pub(crate) mod builtin {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    pub macro concat {\n-        ($($e:expr),*) => ({ /* compiler built-in */ }),\n+    #[macro_export]\n+    macro_rules! concat {\n+        ($($e:expr),*) => ({ /* compiler built-in */ });\n         ($($e:expr,)*) => ({ /* compiler built-in */ })\n     }\n \n@@ -929,8 +933,8 @@ pub(crate) mod builtin {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    pub macro line() { /* compiler built-in */ }\n+    #[macro_export]\n+    macro_rules! line { () => { /* compiler built-in */ } }\n \n     /// Expands to the column number at which it was invoked.\n     ///\n@@ -955,15 +959,15 @@ pub(crate) mod builtin {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    pub macro column() { /* compiler built-in */ }\n+    #[macro_export]\n+    macro_rules! column { () => { /* compiler built-in */ } }\n \n     /// Same as `column`, but less likely to be shadowed.\n     #[unstable(feature = \"__rust_unstable_column\", issue = \"0\",\n                reason = \"internal implementation detail of the `panic` macro\")]\n     #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    pub macro __rust_unstable_column() { /* compiler built-in */ }\n+    #[macro_export]\n+    macro_rules! __rust_unstable_column { () => { /* compiler built-in */ } }\n \n     /// Expands to the file name in which it was invoked.\n     ///\n@@ -987,8 +991,8 @@ pub(crate) mod builtin {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    pub macro file() { /* compiler built-in */ }\n+    #[macro_export]\n+    macro_rules! file { () => { /* compiler built-in */ } }\n \n     /// Stringifies its arguments.\n     ///\n@@ -1007,8 +1011,8 @@ pub(crate) mod builtin {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    pub macro stringify($($t:tt)*) { /* compiler built-in */ }\n+    #[macro_export]\n+    macro_rules! stringify { ($($t:tt)*) => { /* compiler built-in */ } }\n \n     /// Includes a utf8-encoded file as a string.\n     ///\n@@ -1042,9 +1046,9 @@ pub(crate) mod builtin {\n     /// Compiling 'main.rs' and running the resulting binary will print \"adi\u00f3s\".\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    pub macro include_str {\n-        ($file:expr) => ({ /* compiler built-in */ }),\n+    #[macro_export]\n+    macro_rules! include_str {\n+        ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ })\n     }\n \n@@ -1080,9 +1084,9 @@ pub(crate) mod builtin {\n     /// Compiling 'main.rs' and running the resulting binary will print \"adi\u00f3s\".\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    pub macro include_bytes {\n-        ($file:expr) => ({ /* compiler built-in */ }),\n+    #[macro_export]\n+    macro_rules! include_bytes {\n+        ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ })\n     }\n \n@@ -1105,8 +1109,8 @@ pub(crate) mod builtin {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    pub macro module_path() { /* compiler built-in */ }\n+    #[macro_export]\n+    macro_rules! module_path { () => { /* compiler built-in */ } }\n \n     /// Evaluates boolean combinations of configuration flags at compile-time.\n     ///\n@@ -1130,8 +1134,8 @@ pub(crate) mod builtin {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    pub macro cfg($($cfg:tt)*) { /* compiler built-in */ }\n+    #[macro_export]\n+    macro_rules! cfg { ($($cfg:tt)*) => { /* compiler built-in */ } }\n \n     /// Parses a file as an expression or an item according to the context.\n     ///\n@@ -1174,9 +1178,9 @@ pub(crate) mod builtin {\n     /// \"\ud83d\ude48\ud83d\ude4a\ud83d\ude49\ud83d\ude48\ud83d\ude4a\ud83d\ude49\".\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    pub macro include {\n-        ($file:expr) => ({ /* compiler built-in */ }),\n+    #[macro_export]\n+    macro_rules! include {\n+        ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ })\n     }\n \n@@ -1227,45 +1231,45 @@ pub(crate) mod builtin {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    pub macro assert {\n-        ($cond:expr) => ({ /* compiler built-in */ }),\n-        ($cond:expr,) => ({ /* compiler built-in */ }),\n+    #[macro_export]\n+    macro_rules! assert {\n+        ($cond:expr) => ({ /* compiler built-in */ });\n+        ($cond:expr,) => ({ /* compiler built-in */ });\n         ($cond:expr, $($arg:tt)+) => ({ /* compiler built-in */ })\n     }\n \n     /// Inline assembly.\n     #[unstable(feature = \"asm\", issue = \"29722\",\n                reason = \"inline assembly is not stable enough for use and is subject to change\")]\n     #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    pub macro asm(\"assembly template\"\n-                  : $(\"output\"(operand),)*\n-                  : $(\"input\"(operand),)*\n-                  : $(\"clobbers\",)*\n-                  : $(\"options\",)*) { /* compiler built-in */ }\n+    #[macro_export]\n+    macro_rules! asm { (\"assembly template\"\n+                        : $(\"output\"(operand),)*\n+                        : $(\"input\"(operand),)*\n+                        : $(\"clobbers\",)*\n+                        : $(\"options\",)*) => { /* compiler built-in */ } }\n \n     /// Module-level inline assembly.\n     #[unstable(feature = \"global_asm\", issue = \"35119\",\n                reason = \"`global_asm!` is not stable enough for use and is subject to change\")]\n     #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    pub macro global_asm(\"assembly\") { /* compiler built-in */ }\n+    #[macro_export]\n+    macro_rules! global_asm { (\"assembly\") => { /* compiler built-in */ } }\n \n     /// Prints passed tokens into the standard output.\n     #[unstable(feature = \"log_syntax\", issue = \"29598\",\n                reason = \"`log_syntax!` is not stable enough for use and is subject to change\")]\n     #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    pub macro log_syntax($($arg:tt)*) { /* compiler built-in */ }\n+    #[macro_export]\n+    macro_rules! log_syntax { ($($arg:tt)*) => { /* compiler built-in */ } }\n \n     /// Enables or disables tracing functionality used for debugging other macros.\n     #[unstable(feature = \"trace_macros\", issue = \"29598\",\n                reason = \"`trace_macros` is not stable enough for use and is subject to change\")]\n     #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    pub macro trace_macros {\n-        (true) => ({ /* compiler built-in */ }),\n+    #[macro_export]\n+    macro_rules! trace_macros {\n+        (true) => ({ /* compiler built-in */ });\n         (false) => ({ /* compiler built-in */ })\n     }\n \n@@ -1299,69 +1303,6 @@ pub(crate) mod builtin {\n     #[rustc_macro_transparency = \"semitransparent\"]\n     pub macro global_allocator($item:item) { /* compiler built-in */ }\n \n-    /// Derive macro generating an impl of the trait `Clone`.\n-    #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[allow_internal_unstable(core_intrinsics, derive_clone_copy)]\n-    pub macro Clone($item:item) { /* compiler built-in */ }\n-\n-    /// Derive macro generating an impl of the trait `Copy`.\n-    #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[allow_internal_unstable(core_intrinsics, derive_clone_copy)]\n-    pub macro Copy($item:item) { /* compiler built-in */ }\n-\n-    /// Derive macro generating an impl of the trait `Debug`.\n-    #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[allow_internal_unstable(core_intrinsics)]\n-    pub macro Debug($item:item) { /* compiler built-in */ }\n-\n-    /// Derive macro generating an impl of the trait `Default`.\n-    #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[allow_internal_unstable(core_intrinsics)]\n-    pub macro Default($item:item) { /* compiler built-in */ }\n-\n-    /// Derive macro generating an impl of the trait `Eq`.\n-    #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[allow_internal_unstable(core_intrinsics, derive_eq)]\n-    pub macro Eq($item:item) { /* compiler built-in */ }\n-\n-    /// Derive macro generating an impl of the trait `Hash`.\n-    #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[allow_internal_unstable(core_intrinsics)]\n-    pub macro Hash($item:item) { /* compiler built-in */ }\n-\n-    /// Derive macro generating an impl of the trait `Ord`.\n-    #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[allow_internal_unstable(core_intrinsics)]\n-    pub macro Ord($item:item) { /* compiler built-in */ }\n-\n-    /// Derive macro generating an impl of the trait `PartialEq`.\n-    #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[allow_internal_unstable(core_intrinsics)]\n-    pub macro PartialEq($item:item) { /* compiler built-in */ }\n-\n-    /// Derive macro generating an impl of the trait `PartialOrd`.\n-    #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[allow_internal_unstable(core_intrinsics)]\n-    pub macro PartialOrd($item:item) { /* compiler built-in */ }\n-\n     /// Unstable implementation detail of the `rustc` compiler, do not use.\n     #[rustc_builtin_macro]\n     #[rustc_macro_transparency = \"semitransparent\"]"}, {"sha": "78a273611650c3be6774649b815d3e28bf91a895", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=cbcc7dd182b9bf67d664508b82284c5539ef8819", "patch": "@@ -288,6 +288,14 @@ pub trait Copy : Clone {\n     // Empty.\n }\n \n+/// Derive macro generating an impl of the trait `Copy`.\n+#[cfg(not(bootstrap))]\n+#[rustc_builtin_macro]\n+#[rustc_macro_transparency = \"semitransparent\"]\n+#[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n+#[allow_internal_unstable(core_intrinsics, derive_clone_copy)]\n+pub macro Copy($item:item) { /* compiler built-in */ }\n+\n /// Types for which it is safe to share references between threads.\n ///\n /// This trait is automatically implemented when the compiler determines"}, {"sha": "84cf85f339c99bc30e44767d6a9380fc87a923da", "filename": "src/libcore/prelude/v1.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Flibcore%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Flibcore%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude%2Fv1.rs?ref=cbcc7dd182b9bf67d664508b82284c5539ef8819", "patch": "@@ -48,24 +48,20 @@ pub use crate::result::Result::{self, Ok, Err};\n // Re-exported built-in macros\n #[cfg(not(bootstrap))]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n-#[allow(deprecated)]\n #[doc(no_inline)]\n-pub use crate::macros::builtin::{\n-    Clone,\n-    Copy,\n-    Debug,\n-    Default,\n-    Eq,\n-    Hash,\n-    Ord,\n-    PartialEq,\n-    PartialOrd,\n-    RustcDecodable,\n-    RustcEncodable,\n+pub use crate::fmt::macros::Debug;\n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n+#[doc(no_inline)]\n+pub use crate::hash::macros::Hash;\n+\n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n+#[doc(no_inline)]\n+pub use crate::{\n     __rust_unstable_column,\n     asm,\n     assert,\n-    bench,\n     cfg,\n     column,\n     compile_error,\n@@ -75,7 +71,6 @@ pub use crate::macros::builtin::{\n     file,\n     format_args,\n     format_args_nl,\n-    global_allocator,\n     global_asm,\n     include,\n     include_bytes,\n@@ -85,7 +80,18 @@ pub use crate::macros::builtin::{\n     module_path,\n     option_env,\n     stringify,\n+    trace_macros,\n+};\n+\n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n+#[allow(deprecated)]\n+#[doc(no_inline)]\n+pub use crate::macros::builtin::{\n+    RustcDecodable,\n+    RustcEncodable,\n+    bench,\n+    global_allocator,\n     test,\n     test_case,\n-    trace_macros,\n };"}, {"sha": "e03626fb7f565e8ef55c55c28db8145359ba53ad", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=cbcc7dd182b9bf67d664508b82284c5539ef8819", "patch": "@@ -326,16 +326,6 @@ use prelude::v1::*;\n // Access to Bencher, etc.\n #[cfg(test)] extern crate test;\n \n-// Re-export a few macros from core\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::{assert_eq, assert_ne, debug_assert, debug_assert_eq, debug_assert_ne};\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::{unreachable, unimplemented, write, writeln, todo};\n-// FIXME: change this to `#[allow(deprecated)]` when we update nightly compiler.\n-#[allow(deprecated_in_future)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::r#try;\n-\n #[allow(unused_imports)] // macros from `alloc` are not used on all platforms\n #[macro_use]\n extern crate alloc as alloc_crate;\n@@ -520,33 +510,52 @@ mod std_detect;\n #[cfg(not(test))]\n pub use std_detect::detect;\n \n-// Document built-in macros in the crate root for consistency with libcore and existing tradition.\n-// FIXME: Attribute and derive macros are not reexported because rustdoc renders them\n-// as reexports rather than as macros, and that's not what we want.\n-#[cfg(rustdoc)]\n+// Re-export macros defined in libcore.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated_in_future)]\n+pub use core::{\n+    // Stable\n+    assert_eq,\n+    assert_ne,\n+    debug_assert_eq,\n+    debug_assert_ne,\n+    debug_assert,\n+    r#try,\n+    unimplemented,\n+    unreachable,\n+    write,\n+    writeln,\n+    // Unstable\n+    todo,\n+};\n+\n+// Re-export built-in macros defined through libcore.\n+#[cfg(not(bootstrap))]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n-pub use crate::prelude::v1::{\n-    __rust_unstable_column,\n-    asm,\n+pub use core::{\n+    // Stable\n     assert,\n     cfg,\n     column,\n     compile_error,\n     concat,\n-    concat_idents,\n     env,\n     file,\n     format_args,\n-    format_args_nl,\n-    global_asm,\n     include,\n     include_bytes,\n     include_str,\n     line,\n-    log_syntax,\n     module_path,\n     option_env,\n     stringify,\n+    // Unstable\n+    __rust_unstable_column,\n+    asm,\n+    concat_idents,\n+    format_args_nl,\n+    global_asm,\n+    log_syntax,\n     trace_macros,\n };\n "}, {"sha": "67470f854cedfcf572d11d3c8a2a9d7e581d196e", "filename": "src/test/ui/imports/issue-53512.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Ftest%2Fui%2Fimports%2Fissue-53512.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Ftest%2Fui%2Fimports%2Fissue-53512.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-53512.rs?ref=cbcc7dd182b9bf67d664508b82284c5539ef8819", "patch": "@@ -1,6 +1,7 @@\n // Macro from prelude is shadowed by non-existent import recovered as `Res::Err`.\n \n-use std::assert; //~ ERROR unresolved import `std::assert`\n+mod m {}\n+use m::assert; //~ ERROR unresolved import `m::assert`\n \n fn main() {\n     assert!(true);"}, {"sha": "05fe111b38bc6b7db5418cae5d027a2219daa0bd", "filename": "src/test/ui/imports/issue-53512.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Ftest%2Fui%2Fimports%2Fissue-53512.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Ftest%2Fui%2Fimports%2Fissue-53512.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-53512.stderr?ref=cbcc7dd182b9bf67d664508b82284c5539ef8819", "patch": "@@ -1,8 +1,8 @@\n-error[E0432]: unresolved import `std::assert`\n-  --> $DIR/issue-53512.rs:3:5\n+error[E0432]: unresolved import `m::assert`\n+  --> $DIR/issue-53512.rs:4:5\n    |\n-LL | use std::assert;\n-   |     ^^^^^^^^^^^ no `assert` in the root\n+LL | use m::assert;\n+   |     ^^^^^^^^^ no `assert` in `m`\n \n error: aborting due to previous error\n "}, {"sha": "ac82f343acc022de1be663c4237ec1636b2288cc", "filename": "src/test/ui/macros/builtin-prelude-no-accidents.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Ftest%2Fui%2Fmacros%2Fbuiltin-prelude-no-accidents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Ftest%2Fui%2Fmacros%2Fbuiltin-prelude-no-accidents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fbuiltin-prelude-no-accidents.rs?ref=cbcc7dd182b9bf67d664508b82284c5539ef8819", "patch": "@@ -0,0 +1,8 @@\n+// Names of public modules in libstd and libcore don't accidentally get into prelude\n+// because macros with the same names are in prelude.\n+\n+fn main() {\n+    env::current_dir; //~ ERROR use of undeclared type or module `env`\n+    type A = panic::PanicInfo; //~ ERROR use of undeclared type or module `panic`\n+    type B = vec::Vec<u8>; //~ ERROR use of undeclared type or module `vec`\n+}"}, {"sha": "914e906df58b3d41188361def1c3bd00fc8d81bb", "filename": "src/test/ui/macros/builtin-prelude-no-accidents.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Ftest%2Fui%2Fmacros%2Fbuiltin-prelude-no-accidents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Ftest%2Fui%2Fmacros%2Fbuiltin-prelude-no-accidents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fbuiltin-prelude-no-accidents.stderr?ref=cbcc7dd182b9bf67d664508b82284c5539ef8819", "patch": "@@ -0,0 +1,21 @@\n+error[E0433]: failed to resolve: use of undeclared type or module `env`\n+  --> $DIR/builtin-prelude-no-accidents.rs:5:5\n+   |\n+LL |     env::current_dir;\n+   |     ^^^ use of undeclared type or module `env`\n+\n+error[E0433]: failed to resolve: use of undeclared type or module `panic`\n+  --> $DIR/builtin-prelude-no-accidents.rs:6:14\n+   |\n+LL |     type A = panic::PanicInfo;\n+   |              ^^^^^ use of undeclared type or module `panic`\n+\n+error[E0433]: failed to resolve: use of undeclared type or module `vec`\n+  --> $DIR/builtin-prelude-no-accidents.rs:7:14\n+   |\n+LL |     type B = vec::Vec<u8>;\n+   |              ^^^ use of undeclared type or module `vec`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "33de3d5184b1fa20073abe15e269e9038b2bef61", "filename": "src/test/ui/macros/builtin-std-paths-fail.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Ftest%2Fui%2Fmacros%2Fbuiltin-std-paths-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Ftest%2Fui%2Fmacros%2Fbuiltin-std-paths-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fbuiltin-std-paths-fail.rs?ref=cbcc7dd182b9bf67d664508b82284c5539ef8819", "patch": "@@ -0,0 +1,21 @@\n+#[derive(\n+    core::RustcDecodable, //~ ERROR could not find `RustcDecodable` in `core`\n+    core::RustcDecodable, //~ ERROR could not find `RustcDecodable` in `core`\n+)]\n+#[core::bench] //~ ERROR could not find `bench` in `core`\n+#[core::global_allocator] //~ ERROR could not find `global_allocator` in `core`\n+#[core::test_case] //~ ERROR could not find `test_case` in `core`\n+#[core::test] //~ ERROR could not find `test` in `core`\n+struct Core;\n+\n+#[derive(\n+    std::RustcDecodable, //~ ERROR could not find `RustcDecodable` in `std`\n+    std::RustcDecodable, //~ ERROR could not find `RustcDecodable` in `std`\n+)]\n+#[std::bench] //~ ERROR could not find `bench` in `std`\n+#[std::global_allocator] //~ ERROR could not find `global_allocator` in `std`\n+#[std::test_case] //~ ERROR could not find `test_case` in `std`\n+#[std::test] //~ ERROR could not find `test` in `std`\n+struct Std;\n+\n+fn main() {}"}, {"sha": "6de689076b8490a99d3b8beb09c8d93dbd6442df", "filename": "src/test/ui/macros/builtin-std-paths-fail.stderr", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Ftest%2Fui%2Fmacros%2Fbuiltin-std-paths-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Ftest%2Fui%2Fmacros%2Fbuiltin-std-paths-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fbuiltin-std-paths-fail.stderr?ref=cbcc7dd182b9bf67d664508b82284c5539ef8819", "patch": "@@ -0,0 +1,75 @@\n+error[E0433]: failed to resolve: could not find `bench` in `core`\n+  --> $DIR/builtin-std-paths-fail.rs:5:9\n+   |\n+LL | #[core::bench]\n+   |         ^^^^^ could not find `bench` in `core`\n+\n+error[E0433]: failed to resolve: could not find `global_allocator` in `core`\n+  --> $DIR/builtin-std-paths-fail.rs:6:9\n+   |\n+LL | #[core::global_allocator]\n+   |         ^^^^^^^^^^^^^^^^ could not find `global_allocator` in `core`\n+\n+error[E0433]: failed to resolve: could not find `test_case` in `core`\n+  --> $DIR/builtin-std-paths-fail.rs:7:9\n+   |\n+LL | #[core::test_case]\n+   |         ^^^^^^^^^ could not find `test_case` in `core`\n+\n+error[E0433]: failed to resolve: could not find `test` in `core`\n+  --> $DIR/builtin-std-paths-fail.rs:8:9\n+   |\n+LL | #[core::test]\n+   |         ^^^^ could not find `test` in `core`\n+\n+error[E0433]: failed to resolve: could not find `RustcDecodable` in `core`\n+  --> $DIR/builtin-std-paths-fail.rs:2:11\n+   |\n+LL |     core::RustcDecodable,\n+   |           ^^^^^^^^^^^^^^ could not find `RustcDecodable` in `core`\n+\n+error[E0433]: failed to resolve: could not find `RustcDecodable` in `core`\n+  --> $DIR/builtin-std-paths-fail.rs:3:11\n+   |\n+LL |     core::RustcDecodable,\n+   |           ^^^^^^^^^^^^^^ could not find `RustcDecodable` in `core`\n+\n+error[E0433]: failed to resolve: could not find `bench` in `std`\n+  --> $DIR/builtin-std-paths-fail.rs:15:8\n+   |\n+LL | #[std::bench]\n+   |        ^^^^^ could not find `bench` in `std`\n+\n+error[E0433]: failed to resolve: could not find `global_allocator` in `std`\n+  --> $DIR/builtin-std-paths-fail.rs:16:8\n+   |\n+LL | #[std::global_allocator]\n+   |        ^^^^^^^^^^^^^^^^ could not find `global_allocator` in `std`\n+\n+error[E0433]: failed to resolve: could not find `test_case` in `std`\n+  --> $DIR/builtin-std-paths-fail.rs:17:8\n+   |\n+LL | #[std::test_case]\n+   |        ^^^^^^^^^ could not find `test_case` in `std`\n+\n+error[E0433]: failed to resolve: could not find `test` in `std`\n+  --> $DIR/builtin-std-paths-fail.rs:18:8\n+   |\n+LL | #[std::test]\n+   |        ^^^^ could not find `test` in `std`\n+\n+error[E0433]: failed to resolve: could not find `RustcDecodable` in `std`\n+  --> $DIR/builtin-std-paths-fail.rs:12:10\n+   |\n+LL |     std::RustcDecodable,\n+   |          ^^^^^^^^^^^^^^ could not find `RustcDecodable` in `std`\n+\n+error[E0433]: failed to resolve: could not find `RustcDecodable` in `std`\n+  --> $DIR/builtin-std-paths-fail.rs:13:10\n+   |\n+LL |     std::RustcDecodable,\n+   |          ^^^^^^^^^^^^^^ could not find `RustcDecodable` in `std`\n+\n+error: aborting due to 12 previous errors\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "2083f9ba3dc34105edd05f548b9ef2dcc3565d25", "filename": "src/test/ui/macros/builtin-std-paths.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Ftest%2Fui%2Fmacros%2Fbuiltin-std-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbcc7dd182b9bf67d664508b82284c5539ef8819/src%2Ftest%2Fui%2Fmacros%2Fbuiltin-std-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fbuiltin-std-paths.rs?ref=cbcc7dd182b9bf67d664508b82284c5539ef8819", "patch": "@@ -0,0 +1,32 @@\n+// check-pass\n+\n+#[derive(\n+    core::clone::Clone,\n+    core::marker::Copy,\n+    core::fmt::Debug,\n+    core::default::Default,\n+    core::cmp::Eq,\n+    core::hash::Hash,\n+    core::cmp::Ord,\n+    core::cmp::PartialEq,\n+    core::cmp::PartialOrd,\n+)]\n+struct Core;\n+\n+#[derive(\n+    std::clone::Clone,\n+    std::marker::Copy,\n+    std::fmt::Debug,\n+    std::default::Default,\n+    std::cmp::Eq,\n+    std::hash::Hash,\n+    std::cmp::Ord,\n+    std::cmp::PartialEq,\n+    std::cmp::PartialOrd,\n+)]\n+struct Std;\n+\n+fn main() {\n+    core::column!();\n+    std::column!();\n+}"}]}