{"sha": "f8c4d99df67d411d5f7b48823bc082d81cdfaa37", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YzRkOTlkZjY3ZDQxMWQ1ZjdiNDg4MjNiYzA4MmQ4MWNkZmFhMzc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-07-18T01:04:10Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-07-22T21:16:52Z"}, "message": "std: Remove weak_task API. Unused", "tree": {"sha": "853eb012aaee34825b4d88d79b241e87811529c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/853eb012aaee34825b4d88d79b241e87811529c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8c4d99df67d411d5f7b48823bc082d81cdfaa37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8c4d99df67d411d5f7b48823bc082d81cdfaa37", "html_url": "https://github.com/rust-lang/rust/commit/f8c4d99df67d411d5f7b48823bc082d81cdfaa37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8c4d99df67d411d5f7b48823bc082d81cdfaa37/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a637db2aa18f0dc18616c7837de1e60972f20112", "url": "https://api.github.com/repos/rust-lang/rust/commits/a637db2aa18f0dc18616c7837de1e60972f20112", "html_url": "https://github.com/rust-lang/rust/commit/a637db2aa18f0dc18616c7837de1e60972f20112"}], "stats": {"total": 226, "additions": 0, "deletions": 226}, "files": [{"sha": "c7e88b7e161225e68e970965e386630f723d36b2", "filename": "src/libstd/unstable/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8c4d99df67d411d5f7b48823bc082d81cdfaa37/src%2Flibstd%2Funstable%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8c4d99df67d411d5f7b48823bc082d81cdfaa37/src%2Flibstd%2Funstable%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fmod.rs?ref=f8c4d99df67d411d5f7b48823bc082d81cdfaa37", "patch": "@@ -22,7 +22,6 @@ pub mod dynamic_lib;\n \n pub mod global;\n pub mod finally;\n-pub mod weak_task;\n pub mod intrinsics;\n pub mod simd;\n pub mod extfmt;"}, {"sha": "f5dfa1feb9b1346922e9cfa49eaacc498676ed44", "filename": "src/libstd/unstable/weak_task.rs", "status": "removed", "additions": 0, "deletions": 211, "changes": 211, "blob_url": "https://github.com/rust-lang/rust/blob/a637db2aa18f0dc18616c7837de1e60972f20112/src%2Flibstd%2Funstable%2Fweak_task.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a637db2aa18f0dc18616c7837de1e60972f20112/src%2Flibstd%2Funstable%2Fweak_task.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fweak_task.rs?ref=a637db2aa18f0dc18616c7837de1e60972f20112", "patch": "@@ -1,211 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/*!\n-Weak tasks\n-\n-Weak tasks are a runtime feature for building global services that\n-do not keep the runtime alive. Normally the runtime exits when all\n-tasks exits, but if a task is weak then the runtime may exit while\n-it is running, sending a notification to the task that the runtime\n-is trying to shut down.\n-*/\n-\n-use cell::Cell;\n-use comm::{GenericSmartChan, stream};\n-use comm::{Port, Chan, SharedChan, GenericChan, GenericPort};\n-use hashmap::HashMap;\n-use option::{Some, None};\n-use unstable::at_exit::at_exit;\n-use unstable::finally::Finally;\n-use unstable::global::global_data_clone_create;\n-use task::rt::{task_id, get_task_id};\n-use task::task;\n-\n-#[cfg(test)] use task::spawn;\n-\n-type ShutdownMsg = ();\n-\n-// FIXME #4729: This could be a PortOne but I've experienced bugginess\n-// with oneshot pipes and try_send\n-pub unsafe fn weaken_task(f: &fn(Port<ShutdownMsg>)) {\n-    let service = global_data_clone_create(global_data_key,\n-                                           create_global_service);\n-    let (shutdown_port, shutdown_chan) = stream::<ShutdownMsg>();\n-    let shutdown_port = Cell::new(shutdown_port);\n-    let task = get_task_id();\n-    // Expect the weak task service to be alive\n-    assert!(service.try_send(RegisterWeakTask(task, shutdown_chan)));\n-    rust_dec_kernel_live_count();\n-    do (|| {\n-        f(shutdown_port.take())\n-    }).finally || {\n-        rust_inc_kernel_live_count();\n-        // Service my have already exited\n-        service.send(UnregisterWeakTask(task));\n-    }\n-}\n-\n-type WeakTaskService = SharedChan<ServiceMsg>;\n-type TaskHandle = task_id;\n-\n-fn global_data_key(_v: WeakTaskService) { }\n-\n-enum ServiceMsg {\n-    RegisterWeakTask(TaskHandle, Chan<ShutdownMsg>),\n-    UnregisterWeakTask(TaskHandle),\n-    Shutdown\n-}\n-\n-fn create_global_service() -> ~WeakTaskService {\n-\n-    debug!(\"creating global weak task service\");\n-    let (port, chan) = stream::<ServiceMsg>();\n-    let port = Cell::new(port);\n-    let chan = SharedChan::new(chan);\n-    let chan_clone = chan.clone();\n-\n-    let mut task = task();\n-    task.unlinked();\n-    do task.spawn {\n-        debug!(\"running global weak task service\");\n-        let port = Cell::new(port.take());\n-        do (|| {\n-            let port = port.take();\n-            // The weak task service is itself a weak task\n-            debug!(\"weakening the weak service task\");\n-            unsafe { rust_dec_kernel_live_count(); }\n-            run_weak_task_service(port);\n-        }).finally {\n-            debug!(\"unweakening the weak service task\");\n-            unsafe { rust_inc_kernel_live_count(); }\n-        }\n-    }\n-\n-    do at_exit {\n-        debug!(\"shutting down weak task service\");\n-        chan.send(Shutdown);\n-    }\n-\n-    return ~chan_clone;\n-}\n-\n-fn run_weak_task_service(port: Port<ServiceMsg>) {\n-\n-    let mut shutdown_map = HashMap::new();\n-\n-    loop {\n-        match port.recv() {\n-            RegisterWeakTask(task, shutdown_chan) => {\n-                let previously_unregistered =\n-                    shutdown_map.insert(task, shutdown_chan);\n-                assert!(previously_unregistered);\n-            }\n-            UnregisterWeakTask(task) => {\n-                match shutdown_map.pop(&task) {\n-                    Some(shutdown_chan) => {\n-                        // Oneshot pipes must send, even though\n-                        // nobody will receive this\n-                        shutdown_chan.send(());\n-                    }\n-                    None => fail!()\n-                }\n-            }\n-            Shutdown => break\n-        }\n-    }\n-\n-    for shutdown_map.consume().advance |(_, shutdown_chan)| {\n-        // Weak task may have already exited\n-        shutdown_chan.send(());\n-    }\n-}\n-\n-extern {\n-    unsafe fn rust_inc_kernel_live_count();\n-    unsafe fn rust_dec_kernel_live_count();\n-}\n-\n-#[test]\n-fn test_simple() {\n-    let (port, chan) = stream();\n-    do spawn {\n-        unsafe {\n-            do weaken_task |_signal| {\n-            }\n-        }\n-        chan.send(());\n-    }\n-    port.recv();\n-}\n-\n-#[test]\n-fn test_weak_weak() {\n-    let (port, chan) = stream();\n-    do spawn {\n-        unsafe {\n-            do weaken_task |_signal| {\n-            }\n-            do weaken_task |_signal| {\n-            }\n-        }\n-        chan.send(());\n-    }\n-    port.recv();\n-}\n-\n-#[test]\n-fn test_wait_for_signal() {\n-    do spawn {\n-        unsafe {\n-            do weaken_task |signal| {\n-                signal.recv();\n-            }\n-        }\n-    }\n-}\n-\n-#[test]\n-fn test_wait_for_signal_many() {\n-    use uint;\n-    for uint::range(0, 100) |_| {\n-        do spawn {\n-            unsafe {\n-                do weaken_task |signal| {\n-                    signal.recv();\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-#[test]\n-fn test_select_stream_and_oneshot() {\n-    use comm::select2i;\n-    use either::{Left, Right};\n-\n-    let (port, chan) = stream();\n-    let port = Cell::new(port);\n-    let (waitport, waitchan) = stream();\n-    do spawn {\n-        unsafe {\n-            do weaken_task |mut signal| {\n-                let mut port = port.take();\n-                match select2i(&mut port, &mut signal) {\n-                    Left(*) => (),\n-                    Right(*) => fail!()\n-                }\n-            }\n-        }\n-        waitchan.send(());\n-    }\n-    chan.send(());\n-    waitport.recv();\n-}"}, {"sha": "863e0a3a99e17d9049db0f4affdeb004a6cdd781", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8c4d99df67d411d5f7b48823bc082d81cdfaa37/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f8c4d99df67d411d5f7b48823bc082d81cdfaa37/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=f8c4d99df67d411d5f7b48823bc082d81cdfaa37", "patch": "@@ -769,18 +769,6 @@ rust_get_global_data_ptr() {\n     return &task->kernel->global_data;\n }\n \n-extern \"C\" void\n-rust_inc_kernel_live_count() {\n-    rust_task *task = rust_get_current_task();\n-    task->kernel->inc_live_count();\n-}\n-\n-extern \"C\" void\n-rust_dec_kernel_live_count() {\n-    rust_task *task = rust_get_current_task();\n-    task->kernel->dec_live_count();\n-}\n-\n #ifndef _WIN32\n #include <sys/types.h>\n #include <dirent.h>"}, {"sha": "215673be1203ed27116bd2784f4a20d71bf6ffa3", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8c4d99df67d411d5f7b48823bc082d81cdfaa37/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/f8c4d99df67d411d5f7b48823bc082d81cdfaa37/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=f8c4d99df67d411d5f7b48823bc082d81cdfaa37", "patch": "@@ -216,8 +216,6 @@ rust_raw_thread_start\n rust_raw_thread_join_delete\n rust_register_exit_function\n rust_get_global_data_ptr\n-rust_inc_kernel_live_count\n-rust_dec_kernel_live_count\n rust_get_rt_tls_key\n swap_registers\n rust_readdir"}]}