{"sha": "90f6267dea73b06f56549ea79d2ab283cb93cc1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZjYyNjdkZWE3M2IwNmY1NjU0OWVhNzlkMmFiMjgzY2I5M2NjMWM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-07T16:00:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-07T16:00:19Z"}, "message": "Rollup merge of #68889 - Zoxc:hir-krate, r=eddyb\n\nMove the `hir().krate()` method to a query and remove the `Krate` dep node\n\nr? @eddyb cc @michaelwoerister", "tree": {"sha": "4110f6223839a9c78d6a60cecc3c3e2b5176a0cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4110f6223839a9c78d6a60cecc3c3e2b5176a0cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90f6267dea73b06f56549ea79d2ab283cb93cc1c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJePYmUCRBK7hj4Ov3rIwAAdHIIAHfGIG02+7c67JjLCnWQzJBF\nAvrSPkHQISQ6waQaf3p33S+LSpactBLqiuCx9HDcDDdYBvsS9CxKrTNUoEDR0OJx\nM8FBg03SHwPnc7bTb+YvBZmObzGkGDKBkXxf5+awjgAdVzAxqxLr5DB6y/A4nrdF\nX+LVEfvrdu7MMWa1aBV47KQ0Md67iIeVNnQ5YRqzhypwbo1mWvTJO20cjmKuTdNa\nYrPs3muVuel+ztIKTKNgrZ+WWxsdpJQ5ii82KGUVvBZg4yi7hl+1+UUFwO0VWxB1\n0h9kV5FCS9Z7IbBpCLp8Fuki+u5anSzSvRDEdShxvVTJr41+lo+2rpW/LE0WIzQ=\n=hBjE\n-----END PGP SIGNATURE-----\n", "payload": "tree 4110f6223839a9c78d6a60cecc3c3e2b5176a0cd\nparent f9ebad33a280a813b924d4e01482eeb98a0d8aa7\nparent a575495accfe46384df0332be6d9c0a3fb151cbe\nauthor Dylan DPC <dylan.dpc@gmail.com> 1581091219 +0100\ncommitter GitHub <noreply@github.com> 1581091219 +0100\n\nRollup merge of #68889 - Zoxc:hir-krate, r=eddyb\n\nMove the `hir().krate()` method to a query and remove the `Krate` dep node\n\nr? @eddyb cc @michaelwoerister\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90f6267dea73b06f56549ea79d2ab283cb93cc1c", "html_url": "https://github.com/rust-lang/rust/commit/90f6267dea73b06f56549ea79d2ab283cb93cc1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90f6267dea73b06f56549ea79d2ab283cb93cc1c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9ebad33a280a813b924d4e01482eeb98a0d8aa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9ebad33a280a813b924d4e01482eeb98a0d8aa7", "html_url": "https://github.com/rust-lang/rust/commit/f9ebad33a280a813b924d4e01482eeb98a0d8aa7"}, {"sha": "a575495accfe46384df0332be6d9c0a3fb151cbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/a575495accfe46384df0332be6d9c0a3fb151cbe", "html_url": "https://github.com/rust-lang/rust/commit/a575495accfe46384df0332be6d9c0a3fb151cbe"}], "stats": {"total": 302, "additions": 146, "deletions": 156}, "files": [{"sha": "dd242686d26f202aa82c7cf7027b09f73e1d946f", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=90f6267dea73b06f56549ea79d2ab283cb93cc1c", "patch": "@@ -127,7 +127,7 @@ macro_rules! arena_types {\n             [] tys: rustc::ty::TyS<$tcx>,\n \n             // HIR types\n-            [few] hir_forest: rustc::hir::map::Forest<$tcx>,\n+            [few] hir_krate: rustc_hir::Crate<$tcx>,\n             [] arm: rustc_hir::Arm<$tcx>,\n             [] attribute: syntax::ast::Attribute,\n             [] block: rustc_hir::Block<$tcx>,"}, {"sha": "29b94986a5f3a00b6effa877341231b78011b645", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=90f6267dea73b06f56549ea79d2ab283cb93cc1c", "patch": "@@ -35,7 +35,7 @@\n //! \"infer\" some properties for each kind of `DepNode`:\n //!\n //! * Whether a `DepNode` of a given kind has any parameters at all. Some\n-//!   `DepNode`s, like `Krate`, represent global concepts with only one value.\n+//!   `DepNode`s, like `AllLocalTraitImpls`, represent global concepts with only one value.\n //! * Whether it is possible, in principle, to reconstruct a query key from a\n //!   given `DepNode`. Many `DepKind`s only require a single `DefId` parameter,\n //!   in which case it is possible to map the node's fingerprint back to the\n@@ -400,19 +400,6 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     // We use this for most things when incr. comp. is turned off.\n     [] Null,\n \n-    // Represents the `Krate` as a whole (the `hir::Krate` value) (as\n-    // distinct from the krate module). This is basically a hash of\n-    // the entire krate, so if you read from `Krate` (e.g., by calling\n-    // `tcx.hir().krate()`), we will have to assume that any change\n-    // means that you need to be recompiled. This is because the\n-    // `Krate` value gives you access to all other items. To avoid\n-    // this fate, do not call `tcx.hir().krate()`; instead, prefer\n-    // wrappers like `tcx.visit_all_items_in_krate()`.  If there is no\n-    // suitable wrapper, you can use `tcx.dep_graph.ignore()` to gain\n-    // access to the krate, but you must remember to add suitable\n-    // edges yourself for the individual items that you read.\n-    [eval_always] Krate,\n-\n     // Represents the body of a function or method. The def-id is that of the\n     // function/method.\n     [eval_always] HirBody(DefId),"}, {"sha": "4c922654e02d57bd7ca836a5d4d780eb15806e87", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=90f6267dea73b06f56549ea79d2ab283cb93cc1c", "patch": "@@ -223,12 +223,9 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             (commandline_args_hash, crate_disambiguator.to_fingerprint()),\n         );\n \n-        let (_, crate_hash) = input_dep_node_and_hash(\n-            self.dep_graph,\n-            &mut self.hcx,\n-            DepNode::new_no_params(DepKind::Krate),\n-            crate_hash_input,\n-        );\n+        let mut stable_hasher = StableHasher::new();\n+        crate_hash_input.hash_stable(&mut self.hcx, &mut stable_hasher);\n+        let crate_hash: Fingerprint = stable_hasher.finish();\n \n         let svh = Svh::new(crate_hash.to_smaller_hash());\n         (self.map, svh)"}, {"sha": "c721faafbecaf408ea04765882477834001be719", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=90f6267dea73b06f56549ea79d2ab283cb93cc1c", "patch": "@@ -12,7 +12,7 @@ pub fn check_crate(hir_map: &Map<'_>) {\n \n     let errors = Lock::new(Vec::new());\n \n-    par_iter(&hir_map.krate().modules).for_each(|(module_id, _)| {\n+    par_iter(&hir_map.krate.modules).for_each(|(module_id, _)| {\n         let local_def_id = hir_map.local_def_id(*module_id);\n         hir_map.visit_item_likes_in_module(\n             local_def_id,"}, {"sha": "1645420892a7531c7eebb061f989c4f66f06d0a9", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 31, "deletions": 67, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=90f6267dea73b06f56549ea79d2ab283cb93cc1c", "patch": "@@ -129,30 +129,6 @@ impl<'hir> Entry<'hir> {\n     }\n }\n \n-/// Stores a crate and any number of inlined items from other crates.\n-pub struct Forest<'hir> {\n-    krate: Crate<'hir>,\n-    pub dep_graph: DepGraph,\n-}\n-\n-impl Forest<'hir> {\n-    pub fn new(krate: Crate<'hir>, dep_graph: &DepGraph) -> Forest<'hir> {\n-        Forest { krate, dep_graph: dep_graph.clone() }\n-    }\n-\n-    pub fn krate(&self) -> &Crate<'hir> {\n-        self.dep_graph.read(DepNode::new_no_params(DepKind::Krate));\n-        &self.krate\n-    }\n-\n-    /// This is used internally in the dependency tracking system.\n-    /// Use the `krate` method to ensure your dependency on the\n-    /// crate is tracked.\n-    pub fn untracked_krate(&self) -> &Crate<'hir> {\n-        &self.krate\n-    }\n-}\n-\n /// This type is effectively a `HashMap<HirId, Entry<'hir>>`,\n /// but it is implemented as 2 layers of arrays.\n /// - first we have `A = IndexVec<DefIndex, B>` mapping `DefIndex`s to an inner value\n@@ -162,11 +138,8 @@ pub(super) type HirEntryMap<'hir> = IndexVec<DefIndex, IndexVec<ItemLocalId, Opt\n /// Represents a mapping from `NodeId`s to AST elements and their parent `NodeId`s.\n #[derive(Clone)]\n pub struct Map<'hir> {\n-    /// The backing storage for all the AST nodes.\n-    pub forest: &'hir Forest<'hir>,\n+    krate: &'hir Crate<'hir>,\n \n-    /// Same as the dep_graph in forest, just available with one fewer\n-    /// deref. This is a gratuitous micro-optimization.\n     pub dep_graph: DepGraph,\n \n     /// The SVH of the local crate.\n@@ -217,6 +190,13 @@ impl<'hir> Iterator for ParentHirIterator<'_, 'hir> {\n }\n \n impl<'hir> Map<'hir> {\n+    /// This is used internally in the dependency tracking system.\n+    /// Use the `krate` method to ensure your dependency on the\n+    /// crate is tracked.\n+    pub fn untracked_krate(&self) -> &Crate<'hir> {\n+        &self.krate\n+    }\n+\n     #[inline]\n     fn lookup(&self, id: HirId) -> Option<&Entry<'hir>> {\n         let local_map = self.map.get(id.owner)?;\n@@ -401,40 +381,36 @@ impl<'hir> Map<'hir> {\n         self.lookup(id).cloned()\n     }\n \n-    pub fn krate(&self) -> &'hir Crate<'hir> {\n-        self.forest.krate()\n-    }\n-\n     pub fn item(&self, id: HirId) -> &'hir Item<'hir> {\n         self.read(id);\n \n-        // N.B., intentionally bypass `self.forest.krate()` so that we\n+        // N.B., intentionally bypass `self.krate()` so that we\n         // do not trigger a read of the whole krate here\n-        self.forest.krate.item(id)\n+        self.krate.item(id)\n     }\n \n     pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {\n         self.read(id.hir_id);\n \n-        // N.B., intentionally bypass `self.forest.krate()` so that we\n+        // N.B., intentionally bypass `self.krate()` so that we\n         // do not trigger a read of the whole krate here\n-        self.forest.krate.trait_item(id)\n+        self.krate.trait_item(id)\n     }\n \n     pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {\n         self.read(id.hir_id);\n \n-        // N.B., intentionally bypass `self.forest.krate()` so that we\n+        // N.B., intentionally bypass `self.krate()` so that we\n         // do not trigger a read of the whole krate here\n-        self.forest.krate.impl_item(id)\n+        self.krate.impl_item(id)\n     }\n \n     pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {\n         self.read(id.hir_id);\n \n-        // N.B., intentionally bypass `self.forest.krate()` so that we\n+        // N.B., intentionally bypass `self.krate()` so that we\n         // do not trigger a read of the whole krate here\n-        self.forest.krate.body(id)\n+        self.krate.body(id)\n     }\n \n     pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {\n@@ -530,9 +506,9 @@ impl<'hir> Map<'hir> {\n     pub fn trait_impls(&self, trait_did: DefId) -> &'hir [HirId] {\n         self.dep_graph.read(DepNode::new_no_params(DepKind::AllLocalTraitImpls));\n \n-        // N.B., intentionally bypass `self.forest.krate()` so that we\n+        // N.B., intentionally bypass `self.krate()` so that we\n         // do not trigger a read of the whole krate here\n-        self.forest.krate.trait_impls.get(&trait_did).map_or(&[], |xs| &xs[..])\n+        self.krate.trait_impls.get(&trait_did).map_or(&[], |xs| &xs[..])\n     }\n \n     /// Gets the attributes on the crate. This is preferable to\n@@ -542,15 +518,15 @@ impl<'hir> Map<'hir> {\n         let def_path_hash = self.definitions.def_path_hash(CRATE_DEF_INDEX);\n \n         self.dep_graph.read(def_path_hash.to_dep_node(DepKind::Hir));\n-        &self.forest.krate.attrs\n+        &self.krate.attrs\n     }\n \n     pub fn get_module(&self, module: DefId) -> (&'hir Mod<'hir>, Span, HirId) {\n         let hir_id = self.as_local_hir_id(module).unwrap();\n         self.read(hir_id);\n         match self.find_entry(hir_id).unwrap().node {\n             Node::Item(&Item { span, kind: ItemKind::Mod(ref m), .. }) => (m, span, hir_id),\n-            Node::Crate => (&self.forest.krate.module, self.forest.krate.span, hir_id),\n+            Node::Crate => (&self.krate.module, self.krate.span, hir_id),\n             node => panic!(\"not a module: {:?}\", node),\n         }\n     }\n@@ -567,7 +543,7 @@ impl<'hir> Map<'hir> {\n         // in the expect_* calls the loops below\n         self.read(hir_id);\n \n-        let module = &self.forest.krate.modules[&hir_id];\n+        let module = &self.krate.modules[&hir_id];\n \n         for id in &module.items {\n             visitor.visit_item(self.expect_item(*id));\n@@ -984,7 +960,7 @@ impl<'hir> Map<'hir> {\n             // Unit/tuple structs/variants take the attributes straight from\n             // the struct/variant definition.\n             Some(Node::Ctor(..)) => return self.attrs(self.get_parent_item(id)),\n-            Some(Node::Crate) => Some(&self.forest.krate.attrs[..]),\n+            Some(Node::Crate) => Some(&self.krate.attrs[..]),\n             _ => None,\n         };\n         attrs.unwrap_or(&[])\n@@ -1063,7 +1039,7 @@ impl<'hir> Map<'hir> {\n             Some(Node::Visibility(v)) => bug!(\"unexpected Visibility {:?}\", v),\n             Some(Node::Local(local)) => local.span,\n             Some(Node::MacroDef(macro_def)) => macro_def.span,\n-            Some(Node::Crate) => self.forest.krate.span,\n+            Some(Node::Crate) => self.krate.span,\n             None => bug!(\"hir::map::Map::span: id not in map: {:?}\", hir_id),\n         }\n     }\n@@ -1231,7 +1207,8 @@ impl Named for ImplItem<'_> {\n pub fn map_crate<'hir>(\n     sess: &rustc_session::Session,\n     cstore: &CrateStoreDyn,\n-    forest: &'hir Forest<'hir>,\n+    krate: &'hir Crate<'hir>,\n+    dep_graph: DepGraph,\n     definitions: Definitions,\n ) -> Map<'hir> {\n     let _prof_timer = sess.prof.generic_activity(\"build_hir_map\");\n@@ -1244,31 +1221,18 @@ pub fn map_crate<'hir>(\n         .collect();\n \n     let (map, crate_hash) = {\n-        let hcx = crate::ich::StableHashingContext::new(sess, &forest.krate, &definitions, cstore);\n-\n-        let mut collector = NodeCollector::root(\n-            sess,\n-            &forest.krate,\n-            &forest.dep_graph,\n-            &definitions,\n-            &hir_to_node_id,\n-            hcx,\n-        );\n-        intravisit::walk_crate(&mut collector, &forest.krate);\n+        let hcx = crate::ich::StableHashingContext::new(sess, krate, &definitions, cstore);\n+\n+        let mut collector =\n+            NodeCollector::root(sess, krate, &dep_graph, &definitions, &hir_to_node_id, hcx);\n+        intravisit::walk_crate(&mut collector, krate);\n \n         let crate_disambiguator = sess.local_crate_disambiguator();\n         let cmdline_args = sess.opts.dep_tracking_hash();\n         collector.finalize_and_compute_crate_hash(crate_disambiguator, cstore, cmdline_args)\n     };\n \n-    let map = Map {\n-        forest,\n-        dep_graph: forest.dep_graph.clone(),\n-        crate_hash,\n-        map,\n-        hir_to_node_id,\n-        definitions,\n-    };\n+    let map = Map { krate, dep_graph, crate_hash, map, hir_to_node_id, definitions };\n \n     sess.time(\"validate_HIR_map\", || {\n         hir_id_validator::check_crate(&map);"}, {"sha": "2e7e8fdd724916614e618c59b7cf8711f1414cda", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=90f6267dea73b06f56549ea79d2ab283cb93cc1c", "patch": "@@ -7,7 +7,48 @@ pub mod exports;\n pub mod map;\n \n use crate::ty::query::Providers;\n+use crate::ty::TyCtxt;\n+use rustc_hir::def_id::LOCAL_CRATE;\n+use rustc_hir::print;\n+use rustc_hir::Crate;\n+use std::ops::Deref;\n+\n+/// A wrapper type which allows you to access HIR.\n+#[derive(Clone)]\n+pub struct Hir<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    map: &'tcx map::Map<'tcx>,\n+}\n+\n+impl<'tcx> Hir<'tcx> {\n+    pub fn krate(&self) -> &'tcx Crate<'tcx> {\n+        self.tcx.hir_crate(LOCAL_CRATE)\n+    }\n+}\n+\n+impl<'tcx> Deref for Hir<'tcx> {\n+    type Target = &'tcx map::Map<'tcx>;\n+\n+    #[inline(always)]\n+    fn deref(&self) -> &Self::Target {\n+        &self.map\n+    }\n+}\n+\n+impl<'hir> print::PpAnn for Hir<'hir> {\n+    fn nested(&self, state: &mut print::State<'_>, nested: print::Nested) {\n+        self.map.nested(state, nested)\n+    }\n+}\n+\n+impl<'tcx> TyCtxt<'tcx> {\n+    #[inline(always)]\n+    pub fn hir(self) -> Hir<'tcx> {\n+        Hir { tcx: self, map: &self.hir_map }\n+    }\n+}\n \n pub fn provide(providers: &mut Providers<'_>) {\n+    providers.hir_crate = |tcx, _| tcx.hir_map.untracked_krate();\n     map::provide(providers);\n }"}, {"sha": "d1bccb961c48bbd3ebf6f5cf012a26829f672fd6", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=90f6267dea73b06f56549ea79d2ab283cb93cc1c", "patch": "@@ -43,6 +43,18 @@ rustc_queries! {\n     }\n \n     Other {\n+        // Represents crate as a whole (as distinct from the top-level crate module).\n+        // If you call `hir_crate` (e.g., indirectly by calling `tcx.hir().krate()`),\n+        // we will have to assume that any change means that you need to be recompiled.\n+        // This is because the `hir_crate` query gives you access to all other items.\n+        // To avoid this fate, do not call `tcx.hir().krate()`; instead,\n+        // prefer wrappers like `tcx.visit_all_items_in_krate()`.\n+        query hir_crate(key: CrateNum) -> &'tcx Crate<'tcx> {\n+            eval_always\n+            no_hash\n+            desc { \"get the crate HIR\" }\n+        }\n+\n         /// Records the type of every item.\n         query type_of(key: DefId) -> Ty<'tcx> {\n             cache_on_disk_if { key.is_local() }"}, {"sha": "8386058f72ac7e692e57de3e350ad3d6aa7b63fd", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=90f6267dea73b06f56549ea79d2ab283cb93cc1c", "patch": "@@ -966,7 +966,8 @@ pub struct GlobalCtxt<'tcx> {\n     /// Export map produced by name resolution.\n     export_map: FxHashMap<DefId, Vec<Export<hir::HirId>>>,\n \n-    hir_map: hir_map::Map<'tcx>,\n+    /// This should usually be accessed with the `tcx.hir()` method.\n+    pub(crate) hir_map: hir_map::Map<'tcx>,\n \n     /// A map from `DefPathHash` -> `DefId`. Includes `DefId`s from the local crate\n     /// as well as all upstream crates. Only populated in incremental mode.\n@@ -1019,11 +1020,6 @@ pub struct GlobalCtxt<'tcx> {\n }\n \n impl<'tcx> TyCtxt<'tcx> {\n-    #[inline(always)]\n-    pub fn hir(self) -> &'tcx hir_map::Map<'tcx> {\n-        &self.hir_map\n-    }\n-\n     pub fn alloc_steal_mir(self, mir: BodyAndCache<'tcx>) -> &'tcx Steal<BodyAndCache<'tcx>> {\n         self.arena.alloc(Steal::new(mir))\n     }\n@@ -1328,7 +1324,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline(always)]\n     pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {\n-        let krate = self.gcx.hir_map.forest.untracked_krate();\n+        let krate = self.gcx.hir_map.untracked_krate();\n \n         StableHashingContext::new(self.sess, krate, self.hir().definitions(), &*self.cstore)\n     }"}, {"sha": "e7b95af103cc939e2b45c51adabb547835ce99c4", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=90f6267dea73b06f56549ea79d2ab283cb93cc1c", "patch": "@@ -45,7 +45,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, DefIndex};\n-use rustc_hir::{HirIdSet, ItemLocalId, TraitCandidate};\n+use rustc_hir::{Crate, HirIdSet, ItemLocalId, TraitCandidate};\n use rustc_index::vec::IndexVec;\n use rustc_target::spec::PanicStrategy;\n "}, {"sha": "6d9fff351e9b80d5bb21d4e3a963498fa5352cd6", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=90f6267dea73b06f56549ea79d2ab283cb93cc1c", "patch": "@@ -1177,7 +1177,6 @@ pub fn force_from_dep_node(tcx: TyCtxt<'_>, dep_node: &DepNode) -> bool {\n         // These are inputs that are expected to be pre-allocated and that\n         // should therefore always be red or green already.\n         DepKind::AllLocalTraitImpls |\n-        DepKind::Krate |\n         DepKind::CrateMetadata |\n         DepKind::HirBody |\n         DepKind::Hir |"}, {"sha": "d4f014904994102a7d30f06754104628b6fe08c9", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=90f6267dea73b06f56549ea79d2ab283cb93cc1c", "patch": "@@ -69,19 +69,19 @@ where\n     match *ppmode {\n         PpmNormal => {\n             let annotation = NoAnn { sess: tcx.sess, tcx: Some(tcx) };\n-            f(&annotation, tcx.hir().forest.krate())\n+            f(&annotation, tcx.hir().krate())\n         }\n \n         PpmIdentified => {\n             let annotation = IdentifiedAnnotation { sess: tcx.sess, tcx: Some(tcx) };\n-            f(&annotation, tcx.hir().forest.krate())\n+            f(&annotation, tcx.hir().krate())\n         }\n         PpmTyped => {\n             abort_on_err(tcx.analysis(LOCAL_CRATE), tcx.sess);\n \n             let empty_tables = ty::TypeckTables::empty(None);\n             let annotation = TypedAnnotation { tcx, tables: Cell::new(&empty_tables) };\n-            tcx.dep_graph.with_ignore(|| f(&annotation, tcx.hir().forest.krate()))\n+            tcx.dep_graph.with_ignore(|| f(&annotation, tcx.hir().krate()))\n         }\n         _ => panic!(\"Should use call_with_pp_support\"),\n     }\n@@ -143,7 +143,7 @@ impl<'hir> HirPrinterSupport<'hir> for NoAnn<'hir> {\n     }\n \n     fn hir_map<'a>(&'a self) -> Option<&'a hir_map::Map<'hir>> {\n-        self.tcx.map(|tcx| tcx.hir())\n+        self.tcx.map(|tcx| *tcx.hir())\n     }\n \n     fn pp_ann<'a>(&'a self) -> &'a dyn pprust_hir::PpAnn {\n@@ -155,7 +155,7 @@ impl<'hir> pprust::PpAnn for NoAnn<'hir> {}\n impl<'hir> pprust_hir::PpAnn for NoAnn<'hir> {\n     fn nested(&self, state: &mut pprust_hir::State<'_>, nested: pprust_hir::Nested) {\n         if let Some(tcx) = self.tcx {\n-            pprust_hir::PpAnn::nested(tcx.hir(), state, nested)\n+            pprust_hir::PpAnn::nested(*tcx.hir(), state, nested)\n         }\n     }\n }\n@@ -217,7 +217,7 @@ impl<'hir> HirPrinterSupport<'hir> for IdentifiedAnnotation<'hir> {\n     }\n \n     fn hir_map<'a>(&'a self) -> Option<&'a hir_map::Map<'hir>> {\n-        self.tcx.map(|tcx| tcx.hir())\n+        self.tcx.map(|tcx| *tcx.hir())\n     }\n \n     fn pp_ann<'a>(&'a self) -> &'a dyn pprust_hir::PpAnn {\n@@ -228,7 +228,7 @@ impl<'hir> HirPrinterSupport<'hir> for IdentifiedAnnotation<'hir> {\n impl<'hir> pprust_hir::PpAnn for IdentifiedAnnotation<'hir> {\n     fn nested(&self, state: &mut pprust_hir::State<'_>, nested: pprust_hir::Nested) {\n         if let Some(ref tcx) = self.tcx {\n-            pprust_hir::PpAnn::nested(tcx.hir(), state, nested)\n+            pprust_hir::PpAnn::nested(*tcx.hir(), state, nested)\n         }\n     }\n     fn pre(&self, s: &mut pprust_hir::State<'_>, node: pprust_hir::AnnNode<'_>) {\n@@ -334,7 +334,7 @@ impl<'a, 'tcx> pprust_hir::PpAnn for TypedAnnotation<'a, 'tcx> {\n         if let pprust_hir::Nested::Body(id) = nested {\n             self.tables.set(self.tcx.body_tables(id));\n         }\n-        pprust_hir::PpAnn::nested(self.tcx.hir(), state, nested);\n+        pprust_hir::PpAnn::nested(*self.tcx.hir(), state, nested);\n         self.tables.set(old_tables);\n     }\n     fn pre(&self, s: &mut pprust_hir::State<'_>, node: pprust_hir::AnnNode<'_>) {"}, {"sha": "6224c4654d695df818e05ad25ec31082bc3e9e62", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=90f6267dea73b06f56549ea79d2ab283cb93cc1c", "patch": "@@ -25,6 +25,7 @@ use rustc_data_structures::{box_region_allow_access, declare_box_region_type, pa\n use rustc_errors::PResult;\n use rustc_expand::base::ExtCtxt;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n+use rustc_hir::Crate;\n use rustc_lint::LintStore;\n use rustc_mir as mir;\n use rustc_mir_build as mir_build;\n@@ -422,7 +423,7 @@ pub fn lower_to_hir<'res, 'tcx>(\n     dep_graph: &'res DepGraph,\n     krate: &'res ast::Crate,\n     arena: &'tcx Arena<'tcx>,\n-) -> Result<map::Forest<'tcx>> {\n+) -> Crate<'tcx> {\n     // Lower AST to HIR.\n     let hir_crate = rustc_ast_lowering::lower_crate(\n         sess,\n@@ -437,8 +438,6 @@ pub fn lower_to_hir<'res, 'tcx>(\n         hir_stats::print_hir_stats(&hir_crate);\n     }\n \n-    let hir_forest = map::Forest::new(hir_crate, &dep_graph);\n-\n     sess.time(\"early_lint_checks\", || {\n         rustc_lint::check_ast_crate(\n             sess,\n@@ -455,7 +454,7 @@ pub fn lower_to_hir<'res, 'tcx>(\n         rustc_span::hygiene::clear_syntax_context_map();\n     }\n \n-    Ok(hir_forest)\n+    hir_crate\n }\n \n // Returns all the paths that correspond to generated files.\n@@ -705,7 +704,8 @@ impl<'tcx> QueryContext<'tcx> {\n pub fn create_global_ctxt<'tcx>(\n     compiler: &'tcx Compiler,\n     lint_store: Lrc<LintStore>,\n-    hir_forest: &'tcx map::Forest<'tcx>,\n+    krate: &'tcx Crate<'tcx>,\n+    dep_graph: DepGraph,\n     mut resolver_outputs: ResolverOutputs,\n     outputs: OutputFilenames,\n     crate_name: &str,\n@@ -716,7 +716,7 @@ pub fn create_global_ctxt<'tcx>(\n     let defs = mem::take(&mut resolver_outputs.definitions);\n \n     // Construct the HIR map.\n-    let hir_map = map::map_crate(sess, &*resolver_outputs.cstore, &hir_forest, defs);\n+    let hir_map = map::map_crate(sess, &*resolver_outputs.cstore, krate, dep_graph, defs);\n \n     let query_result_on_disk_cache = rustc_incremental::load_query_result_cache(sess);\n "}, {"sha": "720d162ac819e439e3ece957dd6df9031faf527c", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=90f6267dea73b06f56549ea79d2ab283cb93cc1c", "patch": "@@ -3,7 +3,6 @@ use crate::passes::{self, BoxedResolver, QueryContext};\n \n use rustc::arena::Arena;\n use rustc::dep_graph::DepGraph;\n-use rustc::hir::map;\n use rustc::session::config::{OutputFilenames, OutputType};\n use rustc::session::Session;\n use rustc::ty::steal::Steal;\n@@ -12,6 +11,7 @@ use rustc::util::common::ErrorReported;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::sync::{Lrc, Once, WorkerLocal};\n use rustc_hir::def_id::LOCAL_CRATE;\n+use rustc_hir::Crate;\n use rustc_incremental::DepGraphFuture;\n use rustc_lint::LintStore;\n use std::any::Any;\n@@ -74,7 +74,7 @@ pub struct Queries<'tcx> {\n     register_plugins: Query<(ast::Crate, Lrc<LintStore>)>,\n     expansion: Query<(ast::Crate, Steal<Rc<RefCell<BoxedResolver>>>, Lrc<LintStore>)>,\n     dep_graph: Query<DepGraph>,\n-    lower_to_hir: Query<(&'tcx map::Forest<'tcx>, Steal<ResolverOutputs>)>,\n+    lower_to_hir: Query<(&'tcx Crate<'tcx>, Steal<ResolverOutputs>)>,\n     prepare_outputs: Query<OutputFilenames>,\n     global_ctxt: Query<QueryContext<'tcx>>,\n     ongoing_codegen: Query<Box<dyn Any>>,\n@@ -207,24 +207,22 @@ impl<'tcx> Queries<'tcx> {\n         })\n     }\n \n-    pub fn lower_to_hir(\n-        &'tcx self,\n-    ) -> Result<&Query<(&'tcx map::Forest<'tcx>, Steal<ResolverOutputs>)>> {\n+    pub fn lower_to_hir(&'tcx self) -> Result<&Query<(&'tcx Crate<'tcx>, Steal<ResolverOutputs>)>> {\n         self.lower_to_hir.compute(|| {\n             let expansion_result = self.expansion()?;\n             let peeked = expansion_result.peek();\n             let krate = &peeked.0;\n             let resolver = peeked.1.steal();\n             let lint_store = &peeked.2;\n             let hir = resolver.borrow_mut().access(|resolver| {\n-                passes::lower_to_hir(\n+                Ok(passes::lower_to_hir(\n                     self.session(),\n                     lint_store,\n                     resolver,\n                     &*self.dep_graph()?.peek(),\n                     &krate,\n                     &self.arena,\n-                )\n+                ))\n             })?;\n             let hir = self.arena.alloc(hir);\n             Ok((hir, Steal::new(BoxedResolver::to_resolver_outputs(resolver))))\n@@ -253,12 +251,14 @@ impl<'tcx> Queries<'tcx> {\n             let outputs = self.prepare_outputs()?.peek().clone();\n             let lint_store = self.expansion()?.peek().2.clone();\n             let hir = self.lower_to_hir()?.peek();\n-            let (ref hir_forest, ref resolver_outputs) = &*hir;\n+            let dep_graph = self.dep_graph()?.peek().clone();\n+            let (ref krate, ref resolver_outputs) = &*hir;\n             let _timer = self.session().timer(\"create_global_ctxt\");\n             Ok(passes::create_global_ctxt(\n                 self.compiler,\n                 lint_store,\n-                hir_forest,\n+                krate,\n+                dep_graph,\n                 resolver_outputs.steal(),\n                 outputs,\n                 &crate_name,"}, {"sha": "4133047af78fed193724f18fffb5a40667a33b96", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=90f6267dea73b06f56549ea79d2ab283cb93cc1c", "patch": "@@ -796,7 +796,7 @@ impl EncodeContext<'tcx> {\n         record!(self.per_def.kind[def_id] <- match trait_item.kind {\n             ty::AssocKind::Const => {\n                 let rendered =\n-                    hir::print::to_string(self.tcx.hir(), |s| s.print_trait_item(ast_item));\n+                    hir::print::to_string(&self.tcx.hir(), |s| s.print_trait_item(ast_item));\n                 let rendered_const = self.lazy(RenderedConst(rendered));\n \n                 EntryKind::AssocConst(\n@@ -1009,7 +1009,7 @@ impl EncodeContext<'tcx> {\n \n     fn encode_rendered_const_for_body(&mut self, body_id: hir::BodyId) -> Lazy<RenderedConst> {\n         let body = self.tcx.hir().body(body_id);\n-        let rendered = hir::print::to_string(self.tcx.hir(), |s| s.print_expr(&body.value));\n+        let rendered = hir::print::to_string(&self.tcx.hir(), |s| s.print_expr(&body.value));\n         let rendered_const = &RenderedConst(rendered);\n         self.lazy(rendered_const)\n     }"}, {"sha": "b178110f4f954104881f2a5fcd0b22e884aa618a", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=90f6267dea73b06f56549ea79d2ab283cb93cc1c", "patch": "@@ -8,6 +8,7 @@\n //! through, but errors for structured control flow in a `const` should be emitted here.\n \n use rustc::hir::map::Map;\n+use rustc::hir::Hir;\n use rustc::session::config::nightly_options;\n use rustc::session::parse::feature_err;\n use rustc::ty::query::Providers;\n@@ -74,7 +75,7 @@ enum ConstKind {\n }\n \n impl ConstKind {\n-    fn for_body(body: &hir::Body<'_>, hir_map: &Map<'_>) -> Option<Self> {\n+    fn for_body(body: &hir::Body<'_>, hir_map: Hir<'_>) -> Option<Self> {\n         let is_const_fn = |id| hir_map.fn_sig_by_hir_id(id).unwrap().header.is_const();\n \n         let owner = hir_map.body_owner(body.id());"}, {"sha": "ebd93e9ab85b813db0ca9c3249ef68f9ab261a79", "filename": "src/librustc_passes/entry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=90f6267dea73b06f56549ea79d2ab283cb93cc1c", "patch": "@@ -1,4 +1,4 @@\n-use rustc::hir::map as hir_map;\n+use rustc::hir::Hir;\n use rustc::session::config::EntryFnType;\n use rustc::session::{config, Session};\n use rustc::ty::query::Providers;\n@@ -15,7 +15,7 @@ use syntax::entry::EntryPointType;\n struct EntryContext<'a, 'tcx> {\n     session: &'a Session,\n \n-    map: &'a hir_map::Map<'tcx>,\n+    map: Hir<'tcx>,\n \n     /// The top-level function called `main`.\n     main_fn: Option<(HirId, Span)>,"}, {"sha": "87522d28d1e80fab52e2c292ddce4a36518d647d", "filename": "src/librustc_resolve/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc_resolve%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc_resolve%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flifetimes.rs?ref=90f6267dea73b06f56549ea79d2ab283cb93cc1c", "patch": "@@ -612,7 +612,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                                 let parent_id = self.tcx.hir().get_parent_node(hir_id);\n                                 let parent_impl_id = hir::ImplItemId { hir_id: parent_id };\n                                 let parent_trait_id = hir::TraitItemId { hir_id: parent_id };\n-                                let krate = self.tcx.hir().forest.krate();\n+                                let krate = self.tcx.hir().krate();\n \n                                 if !(krate.items.contains_key(&parent_id)\n                                     || krate.impl_items.contains_key(&parent_impl_id)"}, {"sha": "7e5d27d93b3cb2bfcc6bb87d20ef6196ce29eee7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=90f6267dea73b06f56549ea79d2ab283cb93cc1c", "patch": "@@ -2598,7 +2598,7 @@ fn report_unexpected_variant_res(tcx: TyCtxt<'_>, res: Res, span: Span, qpath: &\n         E0533,\n         \"expected unit struct, unit variant or constant, found {} `{}`\",\n         res.descr(),\n-        hir::print::to_string(tcx.hir(), |s| s.print_qpath(qpath, false))\n+        hir::print::to_string(&tcx.hir(), |s| s.print_qpath(qpath, false))\n     )\n     .emit();\n }"}, {"sha": "47baae68608963eea32a097bf3522cee8a0a5968", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=90f6267dea73b06f56549ea79d2ab283cb93cc1c", "patch": "@@ -693,7 +693,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let msg = format!(\n                 \"expected tuple struct or tuple variant, found {} `{}`\",\n                 res.descr(),\n-                hir::print::to_string(tcx.hir(), |s| s.print_qpath(qpath, false)),\n+                hir::print::to_string(&tcx.hir(), |s| s.print_qpath(qpath, false)),\n             );\n             let mut err = struct_span_err!(tcx.sess, pat.span, E0164, \"{}\", msg);\n             match (res, &pat.kind) {"}, {"sha": "0c7dfa1417a97812266a7bc5101bdee20b49b5cf", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=90f6267dea73b06f56549ea79d2ab283cb93cc1c", "patch": "@@ -87,7 +87,7 @@ pub fn run(options: Options) -> i32 {\n         compiler.enter(|queries| {\n             let lower_to_hir = queries.lower_to_hir()?;\n \n-            let mut opts = scrape_test_config(lower_to_hir.peek().0.krate());\n+            let mut opts = scrape_test_config(lower_to_hir.peek().0);\n             opts.display_warnings |= options.display_warnings;\n             let enable_per_target_ignores = options.enable_per_target_ignores;\n             let mut collector = Collector::new(\n@@ -107,7 +107,7 @@ pub fn run(options: Options) -> i32 {\n                 let mut hir_collector = HirCollector {\n                     sess: compiler.session(),\n                     collector: &mut collector,\n-                    map: tcx.hir(),\n+                    map: *tcx.hir(),\n                     codes: ErrorCodes::from(\n                         compiler.session().opts.unstable_features.is_nightly_build(),\n                     ),"}, {"sha": "6e06e67b6682db41050e410695c07b8304f00f8d", "filename": "src/test/incremental/crate_hash_reorder.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Ftest%2Fincremental%2Fcrate_hash_reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Ftest%2Fincremental%2Fcrate_hash_reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fcrate_hash_reorder.rs?ref=90f6267dea73b06f56549ea79d2ab283cb93cc1c", "patch": "@@ -7,11 +7,9 @@\n \n // Check that reordering otherwise identical items is not considered a\n // change at all.\n-#[rustc_clean(label=\"Krate\", cfg=\"rpass2\")]\n-\n+#[rustc_clean(label = \"hir_crate\", cfg = \"rpass2\")]\n // But removing an item, naturally, is.\n-#[rustc_dirty(label=\"Krate\", cfg=\"rpass3\")]\n-\n+#[rustc_dirty(label = \"hir_crate\", cfg = \"rpass3\")]\n #[cfg(rpass1)]\n pub struct X {\n     pub x: u32,\n@@ -26,4 +24,4 @@ pub struct X {\n     pub x: u32,\n }\n \n-pub fn main() { }\n+pub fn main() {}"}, {"sha": "20d4d4200bc1eefa008d49ee77352cd904152cfe", "filename": "src/test/incremental/issue-38222.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Ftest%2Fincremental%2Fissue-38222.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Ftest%2Fincremental%2Fissue-38222.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-38222.rs?ref=90f6267dea73b06f56549ea79d2ab283cb93cc1c", "patch": "@@ -1,18 +1,14 @@\n-// Test that debuginfo does not introduce a dependency edge to the Krate\n+// Test that debuginfo does not introduce a dependency edge to the hir_crate\n // dep-node.\n \n // revisions:rpass1 rpass2\n // compile-flags: -Z query-dep-graph\n \n-\n #![feature(rustc_attrs)]\n-\n-\n-#![rustc_partition_reused(module=\"issue_38222-mod1\", cfg=\"rpass2\")]\n-\n-// If codegen had added a dependency edge to the Krate dep-node, nothing would\n+#![rustc_partition_reused(module = \"issue_38222-mod1\", cfg = \"rpass2\")]\n+// If codegen had added a dependency edge to the hir_crate dep-node, nothing would\n // be re-used, so checking that this module was re-used is sufficient.\n-#![rustc_partition_reused(module=\"issue_38222\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module = \"issue_38222\", cfg = \"rpass2\")]\n \n //[rpass1] compile-flags: -C debuginfo=1\n //[rpass2] compile-flags: -C debuginfo=1"}, {"sha": "2c04e110525a653d15f903ab526fc98617d4ddf1", "filename": "src/test/incremental/krate-inherent.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Ftest%2Fincremental%2Fkrate-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Ftest%2Fincremental%2Fkrate-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fkrate-inherent.rs?ref=90f6267dea73b06f56549ea79d2ab283cb93cc1c", "patch": "@@ -4,20 +4,20 @@\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n-#![rustc_partition_reused(module=\"krate_inherent-x\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module = \"krate_inherent-x\", cfg = \"cfail2\")]\n #![crate_type = \"rlib\"]\n \n pub mod x {\n     pub struct Foo;\n     impl Foo {\n-        pub fn foo(&self) { }\n+        pub fn foo(&self) {}\n     }\n \n     pub fn method() {\n         let x: Foo = Foo;\n-        x.foo(); // inherent methods used to add an edge from Krate\n+        x.foo(); // inherent methods used to add an edge from hir_crate\n     }\n }\n \n #[cfg(cfail1)]\n-pub fn bar() { } // remove this unrelated fn in cfail2, which should not affect `x::method`\n+pub fn bar() {} // remove this unrelated fn in cfail2, which should not affect `x::method`"}, {"sha": "6b1db74a37c66f43a33e84ff0df9c8cb7dc4d3f4", "filename": "src/test/incremental/krate-inlined.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Ftest%2Fincremental%2Fkrate-inlined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Ftest%2Fincremental%2Fkrate-inlined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fkrate-inlined.rs?ref=90f6267dea73b06f56549ea79d2ab283cb93cc1c", "patch": "@@ -1,13 +1,13 @@\n // Regr. test that using HIR inlined from another krate does *not* add\n-// a dependency from the local Krate node. We can't easily test that\n+// a dependency from the local hir_crate node. We can't easily test that\n // directly anymore, so now we test that we get reuse.\n \n // revisions: rpass1 rpass2\n // compile-flags: -Z query-dep-graph\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n-#![rustc_partition_reused(module=\"krate_inlined-x\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module = \"krate_inlined-x\", cfg = \"rpass2\")]\n \n fn main() {\n     x::method();"}, {"sha": "927ea5597783a5f716399e9ef318e2a2feb057f0", "filename": "src/test/ui/dep-graph/dep-graph-variance-alias.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-variance-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-variance-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-variance-alias.rs?ref=90f6267dea73b06f56549ea79d2ab283cb93cc1c", "patch": "@@ -6,17 +6,16 @@\n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n-\n-fn main() { }\n+#![rustc_if_this_changed(hir_crate)]\n+fn main() {}\n \n struct Foo<T> {\n-    f: T\n+    f: T,\n }\n \n-#[rustc_if_this_changed(Krate)]\n type TypeAlias<T> = Foo<T>;\n \n #[rustc_then_this_would_need(variances_of)] //~ ERROR OK\n struct Use<T> {\n-    x: TypeAlias<T>\n+    x: TypeAlias<T>,\n }"}, {"sha": "2422cb9bb2f52ed93695bd62f1a8f2c388299e30", "filename": "src/test/ui/dep-graph/dep-graph-variance-alias.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-variance-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90f6267dea73b06f56549ea79d2ab283cb93cc1c/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-variance-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-variance-alias.stderr?ref=90f6267dea73b06f56549ea79d2ab283cb93cc1c", "patch": "@@ -1,5 +1,5 @@\n error: OK\n-  --> $DIR/dep-graph-variance-alias.rs:19:1\n+  --> $DIR/dep-graph-variance-alias.rs:18:1\n    |\n LL | #[rustc_then_this_would_need(variances_of)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}