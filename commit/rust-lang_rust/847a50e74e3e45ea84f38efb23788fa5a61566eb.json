{"sha": "847a50e74e3e45ea84f38efb23788fa5a61566eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0N2E1MGU3NGUzZTQ1ZWE4NGYzOGVmYjIzNzg4ZmE1YTYxNTY2ZWI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-31T12:42:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-31T12:42:31Z"}, "message": "Merge #5620\n\n5620: Finalize Types grammar r=matklad a=matklad\n\nNote that `for` type is rust-analyzer's own invention.\nBoth the reference and syn allow `for` only for fnptr types, and we\nallow them everywhere. This needs to be checked with respect to type\nbounds grammar...\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "0988b331b556d8d6a0e58e9c2b2a513e0ceb8d59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0988b331b556d8d6a0e58e9c2b2a513e0ceb8d59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/847a50e74e3e45ea84f38efb23788fa5a61566eb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfJBG3CRBK7hj4Ov3rIwAAdHIIAEjrI10iu/nGaqblhxnkvAy3\ntYyQhA2UznSoPGbU1xky02/Gm6zqtC8wN1O12Xv+2wS3rYXcUriFsUmLssHf60xn\nKg+IjWL3PiBSjI8A5RMtxzTWt2S8BPsKfczzEXuBcvNa8gA3b7r1xjTTg23SArXs\njHJG84FPNatY60dYctw4s5oUq+FpoFHNPcUQtrOs3+jAN9JDQn93VC/fEExuNe8X\nftYj7yi033iMXpchi8n+whbT1YB+PmG859xDnMPTZzyw6/wDRUFEcWQbP4hHGxTn\nGIpirhv4VDtjbi+dGMyOohto/EaCBeekNR+JFhOjJ1ddUOMS+3sz+SevYLfnLRo=\n=AEM8\n-----END PGP SIGNATURE-----\n", "payload": "tree 0988b331b556d8d6a0e58e9c2b2a513e0ceb8d59\nparent eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec\nparent a6527ed92cb7a1156b8a118f5790d8c5fd69ab41\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1596199351 +0000\ncommitter GitHub <noreply@github.com> 1596199351 +0000\n\nMerge #5620\n\n5620: Finalize Types grammar r=matklad a=matklad\n\nNote that `for` type is rust-analyzer's own invention.\nBoth the reference and syn allow `for` only for fnptr types, and we\nallow them everywhere. This needs to be checked with respect to type\nbounds grammar...\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/847a50e74e3e45ea84f38efb23788fa5a61566eb", "html_url": "https://github.com/rust-lang/rust/commit/847a50e74e3e45ea84f38efb23788fa5a61566eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/847a50e74e3e45ea84f38efb23788fa5a61566eb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec", "html_url": "https://github.com/rust-lang/rust/commit/eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec"}, {"sha": "a6527ed92cb7a1156b8a118f5790d8c5fd69ab41", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6527ed92cb7a1156b8a118f5790d8c5fd69ab41", "html_url": "https://github.com/rust-lang/rust/commit/a6527ed92cb7a1156b8a118f5790d8c5fd69ab41"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "fe6619d9f4d6470ad3b28ea677018e9c72d29e4c", "filename": "crates/ra_hir_def/src/type_ref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/847a50e74e3e45ea84f38efb23788fa5a61566eb/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/847a50e74e3e45ea84f38efb23788fa5a61566eb/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs?ref=847a50e74e3e45ea84f38efb23788fa5a61566eb", "patch": "@@ -1,6 +1,5 @@\n //! HIR for references to types. Paths in these are not yet resolved. They can\n //! be directly created from an ast::TypeRef, without further queries.\n-\n use ra_syntax::ast::{self};\n \n use crate::{body::LowerCtx, path::Path};"}, {"sha": "afa37f22798e2bb0aea95340763a63852aa79b3e", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/847a50e74e3e45ea84f38efb23788fa5a61566eb/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/847a50e74e3e45ea84f38efb23788fa5a61566eb/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=847a50e74e3e45ea84f38efb23788fa5a61566eb", "patch": "@@ -605,8 +605,10 @@ pub struct FnPointerType {\n     pub(crate) syntax: SyntaxNode,\n }\n impl FnPointerType {\n-    pub fn abi(&self) -> Option<Abi> { support::child(&self.syntax) }\n+    pub fn const_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![const]) }\n+    pub fn async_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![async]) }\n     pub fn unsafe_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![unsafe]) }\n+    pub fn abi(&self) -> Option<Abi> { support::child(&self.syntax) }\n     pub fn fn_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![fn]) }\n     pub fn param_list(&self) -> Option<ParamList> { support::child(&self.syntax) }\n     pub fn ret_type(&self) -> Option<RetType> { support::child(&self.syntax) }"}, {"sha": "4015e3890dd3c983f4235e860be91a65ce3e6c2d", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/847a50e74e3e45ea84f38efb23788fa5a61566eb/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/847a50e74e3e45ea84f38efb23788fa5a61566eb/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=847a50e74e3e45ea84f38efb23788fa5a61566eb", "patch": "@@ -231,7 +231,7 @@ InferType =\n    '_'\n \n FnPointerType =\n-   Abi 'unsafe'? 'fn' ParamList RetType?\n+   'const'? 'async'? 'unsafe'? Abi? 'fn' ParamList RetType?\n \n ForType =\n    'for' GenericParamList Type"}]}