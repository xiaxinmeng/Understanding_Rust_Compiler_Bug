{"sha": "08c840205ea477d4f76216abac45be6a4ce9fa4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4Yzg0MDIwNWVhNDc3ZDRmNzYyMTZhYmFjNDViZTZhNGNlOWZhNGI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-09T00:21:58Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-11T16:36:00Z"}, "message": "librustc: Lint the old `drop` destructor notation off", "tree": {"sha": "7c5b611ac00f1054d51fd657d7fb7d143291fce2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c5b611ac00f1054d51fd657d7fb7d143291fce2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08c840205ea477d4f76216abac45be6a4ce9fa4b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08c840205ea477d4f76216abac45be6a4ce9fa4b", "html_url": "https://github.com/rust-lang/rust/commit/08c840205ea477d4f76216abac45be6a4ce9fa4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08c840205ea477d4f76216abac45be6a4ce9fa4b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7353568cd8d079fd4d9f928bc49a228276e86d19", "url": "https://api.github.com/repos/rust-lang/rust/commits/7353568cd8d079fd4d9f928bc49a228276e86d19", "html_url": "https://github.com/rust-lang/rust/commit/7353568cd8d079fd4d9f928bc49a228276e86d19"}], "stats": {"total": 132, "additions": 51, "deletions": 81}, "files": [{"sha": "e559af62e360c88829b957a2a990600c57d99ec2", "filename": "doc/rust.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/08c840205ea477d4f76216abac45be6a4ce9fa4b/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/08c840205ea477d4f76216abac45be6a4ce9fa4b/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=08c840205ea477d4f76216abac45be6a4ce9fa4b", "patch": "@@ -889,10 +889,10 @@ declared, in an angle-bracket-enclosed, comma-separated list following\n the function name.\n \n ~~~~ {.xfail-test}\n-fn iter<T>(seq: &[T], f: fn(T)) {\n+fn iter<T>(seq: &[T], f: &fn(T)) {\n     for seq.each |elt| { f(elt); }\n }\n-fn map<T, U>(seq: &[T], f: fn(T) -> U) -> ~[U] {\n+fn map<T, U>(seq: &[T], f: &fn(T) -> U) -> ~[U] {\n     let mut acc = ~[];\n     for seq.each |elt| { acc.push(f(elt)); }\n     acc\n@@ -1198,7 +1198,7 @@ These appear after the trait name, using the same syntax used in [generic functi\n trait Seq<T> {\n    fn len() -> uint;\n    fn elt_at(n: uint) -> T;\n-   fn iter(fn(T));\n+   fn iter(&fn(T));\n }\n ~~~~\n \n@@ -2074,7 +2074,7 @@ and moving values from the environment into the lambda expression's captured env\n An example of a lambda expression:\n \n ~~~~\n-fn ten_times(f: fn(int)) {\n+fn ten_times(f: &fn(int)) {\n     let mut i = 0;\n     while i < 10 {\n         f(i);\n@@ -2177,7 +2177,7 @@ If the `expr` is a [field expression](#field-expressions), it is parsed as thoug\n In this example, both calls to `f` are equivalent:\n \n ~~~~\n-# fn f(f: fn(int)) { }\n+# fn f(f: &fn(int)) { }\n # fn g(i: int) { }\n \n f(|j| g(j));\n@@ -2755,7 +2755,7 @@ and the cast expression in `main`.\n Within the body of an item that has type parameter declarations, the names of its type parameters are types:\n \n ~~~~~~~\n-fn map<A: Copy, B: Copy>(f: fn(A) -> B, xs: &[A]) -> ~[B] {\n+fn map<A: Copy, B: Copy>(f: &fn(A) -> B, xs: &[A]) -> ~[B] {\n    if xs.len() == 0 { return ~[]; }\n    let first: B = f(xs[0]);\n    let rest: ~[B] = map(f, xs.slice(1, xs.len()));"}, {"sha": "e4775e1b11b4d5e14386676522e3b9255c661fb1", "filename": "doc/tutorial.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/08c840205ea477d4f76216abac45be6a4ce9fa4b/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/08c840205ea477d4f76216abac45be6a4ce9fa4b/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=08c840205ea477d4f76216abac45be6a4ce9fa4b", "patch": "@@ -1361,7 +1361,7 @@ the enclosing scope.\n \n ~~~~\n # use println = core::io::println;\n-fn call_closure_with_ten(b: fn(int)) { b(10); }\n+fn call_closure_with_ten(b: &fn(int)) { b(10); }\n \n let captured_var = 20;\n let closure = |arg| println(fmt!(\"captured_var=%d, arg=%d\", captured_var, arg));\n@@ -1447,7 +1447,7 @@ should almost always declare the type of that argument as `fn()`. That way,\n callers may pass any kind of closure.\n \n ~~~~\n-fn call_twice(f: fn()) { f(); f(); }\n+fn call_twice(f: &fn()) { f(); f(); }\n let closure = || { \"I'm a closure, and it doesn't matter what type I am\"; };\n fn function() { \"I'm a normal function\"; }\n call_twice(closure);\n@@ -1467,7 +1467,7 @@ Consider this function that iterates over a vector of\n integers, passing in a pointer to each integer in the vector:\n \n ~~~~\n-fn each(v: &[int], op: fn(v: &int)) {\n+fn each(v: &[int], op: &fn(v: &int)) {\n    let mut n = 0;\n    while n < v.len() {\n        op(&v[n]);\n@@ -1488,7 +1488,7 @@ argument, we can write it in a way that has a pleasant, block-like\n structure.\n \n ~~~~\n-# fn each(v: &[int], op: fn(v: &int)) { }\n+# fn each(v: &[int], op: &fn(v: &int)) { }\n # fn do_some_work(i: &int) { }\n each([1, 2, 3], |n| {\n     do_some_work(n);\n@@ -1499,7 +1499,7 @@ This is such a useful pattern that Rust has a special form of function\n call that can be written more like a built-in control structure:\n \n ~~~~\n-# fn each(v: &[int], op: fn(v: &int)) { }\n+# fn each(v: &[int], op: &fn(v: &int)) { }\n # fn do_some_work(i: &int) { }\n do each([1, 2, 3]) |n| {\n     do_some_work(n);\n@@ -1546,7 +1546,7 @@ Consider again our `each` function, this time improved to\n break early when the iteratee returns `false`:\n \n ~~~~\n-fn each(v: &[int], op: fn(v: &int) -> bool) {\n+fn each(v: &[int], op: &fn(v: &int) -> bool) {\n    let mut n = 0;\n    while n < v.len() {\n        if !op(&v[n]) {\n@@ -1770,7 +1770,7 @@ vector consisting of the result of applying `function` to each element\n of `vector`:\n \n ~~~~\n-fn map<T, U>(vector: &[T], function: fn(v: &T) -> U) -> ~[U] {\n+fn map<T, U>(vector: &[T], function: &fn(v: &T) -> U) -> ~[U] {\n     let mut accumulator = ~[];\n     for vec::each(vector) |element| {\n         accumulator.push(function(element));\n@@ -1969,12 +1969,12 @@ types might look like the following:\n ~~~~\n trait Seq<T> {\n     fn len(&self) -> uint;\n-    fn iter(&self, b: fn(v: &T));\n+    fn iter(&self, b: &fn(v: &T));\n }\n \n impl<T> Seq<T> for ~[T] {\n     fn len(&self) -> uint { vec::len(*self) }\n-    fn iter(&self, b: fn(v: &T)) {\n+    fn iter(&self, b: &fn(v: &T)) {\n         for vec::each(*self) |elt| { b(elt); }\n     }\n }"}, {"sha": "db1dc1e28aa92379793dc5e8ae9da9cf63dd65a5", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08c840205ea477d4f76216abac45be6a4ce9fa4b/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/08c840205ea477d4f76216abac45be6a4ce9fa4b/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=08c840205ea477d4f76216abac45be6a4ce9fa4b", "patch": "@@ -52,6 +52,7 @@ Implicitly, all crates behave as if they included the following prologue:\n #[deny(non_camel_case_types)];\n #[allow(deprecated_mutable_fields)];\n #[deny(deprecated_self)];\n+#[allow(deprecated_drop)];\n \n // On Linux, link to the runtime with -lrt.\n #[cfg(target_os = \"linux\")]"}, {"sha": "93f0557028eae61797d80fa58c8517e50b857274", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/08c840205ea477d4f76216abac45be6a4ce9fa4b/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c840205ea477d4f76216abac45be6a4ce9fa4b/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=08c840205ea477d4f76216abac45be6a4ce9fa4b", "patch": "@@ -77,6 +77,7 @@ pub enum lint {\n     default_methods,\n     deprecated_self,\n     deprecated_mutable_fields,\n+    deprecated_drop,\n \n     managed_heap_memory,\n     owned_heap_memory,\n@@ -251,6 +252,13 @@ pub fn get_lint_dict() -> LintDict {\n             default: deny\n         }),\n \n+        (@~\"deprecated_drop\",\n+         @LintSpec {\n+            lint: deprecated_drop,\n+            desc: \"deprecated \\\"drop\\\" notation for the destructor\",\n+            default: deny\n+        }),\n+\n         /* FIXME(#3266)--make liveness warnings lintable\n         (@~\"unused_variable\",\n          @LintSpec {\n@@ -483,6 +491,7 @@ fn check_item(i: @ast::item, cx: ty::ctxt) {\n     check_item_default_methods(cx, i);\n     check_item_deprecated_self(cx, i);\n     check_item_deprecated_mutable_fields(cx, i);\n+    check_item_deprecated_drop(cx, i);\n }\n \n // Take a visitor, and modify it so that it will not proceed past subitems.\n@@ -720,6 +729,26 @@ fn check_item_deprecated_mutable_fields(cx: ty::ctxt, item: @ast::item) {\n     }\n }\n \n+fn check_item_deprecated_drop(cx: ty::ctxt, item: @ast::item) {\n+    match item.node {\n+        ast::item_struct(struct_def, _) => {\n+            match struct_def.dtor {\n+                None => {}\n+                Some(ref dtor) => {\n+                    cx.sess.span_lint(deprecated_drop,\n+                                      item.id,\n+                                      item.id,\n+                                      dtor.span,\n+                                      ~\"`drop` notation for destructors is \\\n+                                        deprecated; implement the `Drop` \\\n+                                        trait instead\");\n+                }\n+            }\n+        }\n+        _ => {}\n+    }\n+}\n+\n fn check_item_ctypes(cx: ty::ctxt, it: @ast::item) {\n \n     fn check_foreign_fn(cx: ty::ctxt, fn_id: ast::node_id,"}, {"sha": "49899fdeec415e79154d70ae7efe576ffa6d8f05", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/08c840205ea477d4f76216abac45be6a4ce9fa4b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c840205ea477d4f76216abac45be6a4ce9fa4b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=08c840205ea477d4f76216abac45be6a4ce9fa4b", "patch": "@@ -612,36 +612,11 @@ pub fn print_item(s: @ps, &&item: @ast::item) {\n pub fn print_enum_def(s: @ps, enum_definition: ast::enum_def,\n                       generics: &ast::Generics, ident: ast::ident,\n                       span: codemap::span, visibility: ast::visibility) {\n-    let mut newtype =\n-        vec::len(enum_definition.variants) == 1u &&\n-        ident == enum_definition.variants[0].node.name;\n-    if newtype {\n-        match enum_definition.variants[0].node.kind {\n-            ast::tuple_variant_kind(ref args) if args.len() == 1 => {}\n-            _ => newtype = false\n-        }\n-    }\n-    if newtype {\n-        ibox(s, indent_unit);\n-        word_space(s, visibility_qualified(visibility, ~\"enum\"));\n-    } else {\n-        head(s, visibility_qualified(visibility, ~\"enum\"));\n-    }\n-\n+    head(s, visibility_qualified(visibility, ~\"enum\"));\n     print_ident(s, ident);\n     print_generics(s, generics);\n     space(s.s);\n-    if newtype {\n-        word_space(s, ~\"=\");\n-        match /*bad*/ copy enum_definition.variants[0].node.kind {\n-            ast::tuple_variant_kind(args) => print_type(s, args[0].ty),\n-            _ => fail!(~\"newtype syntax with struct?\")\n-        }\n-        word(s.s, ~\";\");\n-        end(s);\n-    } else {\n-        print_variants(s, enum_definition.variants, span);\n-    }\n+    print_variants(s, enum_definition.variants, span);\n }\n \n pub fn print_variants(s: @ps,"}, {"sha": "0ebf0218efe6d1c2788427239462507992cdadc7", "filename": "src/test/compile-fail/issue-2063.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08c840205ea477d4f76216abac45be6a4ce9fa4b/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c840205ea477d4f76216abac45be6a4ce9fa4b/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs?ref=08c840205ea477d4f76216abac45be6a4ce9fa4b", "patch": "@@ -1,3 +1,5 @@\n+// xfail-test\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "8afaf8995c291f0ace90aa6c2b12d424f2e0d333", "filename": "src/test/compile-fail/issue-2718-a.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08c840205ea477d4f76216abac45be6a4ce9fa4b/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c840205ea477d4f76216abac45be6a4ce9fa4b/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs?ref=08c840205ea477d4f76216abac45be6a4ce9fa4b", "patch": "@@ -1,3 +1,5 @@\n+// xfail-test\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "9921389da6674c069095a5306082da5570148115", "filename": "src/test/run-pass/coherence-copy-bound.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7353568cd8d079fd4d9f928bc49a228276e86d19/src%2Ftest%2Frun-pass%2Fcoherence-copy-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7353568cd8d079fd4d9f928bc49a228276e86d19/src%2Ftest%2Frun-pass%2Fcoherence-copy-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-copy-bound.rs?ref=7353568cd8d079fd4d9f928bc49a228276e86d19", "patch": "@@ -1,13 +0,0 @@\n-trait X {}\n-\n-impl<A:Copy> X for A {}\n-\n-struct S {\n-    x: int,\n-    drop {}\n-}\n-\n-impl X for S {}\n-\n-pub fn main(){}\n-"}, {"sha": "3d2fd649f156226cf2093dd37fc983b07576f292", "filename": "src/test/run-pass/operator-overloading-explicit-self.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7353568cd8d079fd4d9f928bc49a228276e86d19/src%2Ftest%2Frun-pass%2Foperator-overloading-explicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7353568cd8d079fd4d9f928bc49a228276e86d19/src%2Ftest%2Frun-pass%2Foperator-overloading-explicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading-explicit-self.rs?ref=7353568cd8d079fd4d9f928bc49a228276e86d19", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-struct S {\n-    x: int\n-}\n-\n-pub impl S {\n-    pure fn add(&self, other: &S) -> S {\n-        S { x: self.x + other.x }\n-    }\n-}\n-\n-pub fn main() {\n-    let mut s = S { x: 1 };\n-    s += S { x: 2 };\n-    fail_unless!(s.x == 3);\n-}\n-"}]}