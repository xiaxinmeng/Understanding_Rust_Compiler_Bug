{"sha": "ded0a9e15fdbed1110a26712b91b8ef40588bf09", "node_id": "C_kwDOAAsO6NoAKGRlZDBhOWUxNWZkYmVkMTExMGEyNjcxMmI5MWI4ZWY0MDU4OGJmMDk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-05T13:10:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-05T13:10:35Z"}, "message": "Rollup merge of #111068 - Urgau:check-cfg-improvements, r=petrochenkov\n\nImprove check-cfg implementation\n\nThis PR makes multiple improvements into the implementation of check-cfg, it is a prerequisite to a follow-up PR that will introduce a simpler and more explicit syntax.\n\nThe 2 main area of improvements are:\n 1. Internal representation of expected values:\n    - now uses `FxHashSet<Option<Symbol>>` instead of `FxHashSet<Symbol>`, it made the no value expected case only possible when no values where in the `HashSet` which is now represented as `None` (same as cfg represent-it).\n    - a enum with `Some` and `Any` makes it now clear if some values are expected or not, necessary for `feature` and `target_feature`.\n 2. Diagnostics: Improve the diagnostics in multiple case and fix case where a missing value could have had a new name suggestion instead of the value diagnostic; and some drive by improvements\n\nI highly recommend reviewing commit by commit.\n\nr? `@petrochenkov`", "tree": {"sha": "9f5fb64fb1fbfa056948532c7514e3cf3591fbfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f5fb64fb1fbfa056948532c7514e3cf3591fbfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ded0a9e15fdbed1110a26712b91b8ef40588bf09", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkVQBLCRBK7hj4Ov3rIwAAa10IAEy60wu90g4Czb9Aemura6CE\nNK/nQjLLSzsX1qLpG6GOjHE4++5eO5Xqc8zQmrXJeP397pXMJUk2XG8lMYJnBStv\ngW8iYPZtJmTV98UijrY82DX5sVOjinJ+sun4DUesflucyr7ZCYx5xGSleW9FkvUE\nXO74VWz6u2vGZ+fG59Gq4EOwVaD/jUaAKrfKN3ylV5LXNlJ8Qdqfw4rBfOq4+Zcz\nKDc8EbfIoFjsd20tsZO0nu1KFQ10TA0oWHrZgfwSR5Irhe+qxajVXjzanisWJoEq\n+0jB1E3Kg3mdXxaKTn9SmN2ncWNgSCI/TagEp7sTjvf3JJQAKwK1Q+DkzOuRxwk=\n=yXv8\n-----END PGP SIGNATURE-----\n", "payload": "tree 9f5fb64fb1fbfa056948532c7514e3cf3591fbfe\nparent 65702bfd6bfb8616e182ddd19d0520ce7e35314a\nparent 53647845b917fac2a1565c72f2046f6bbad341d6\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1683292235 +0530\ncommitter GitHub <noreply@github.com> 1683292235 +0530\n\nRollup merge of #111068 - Urgau:check-cfg-improvements, r=petrochenkov\n\nImprove check-cfg implementation\n\nThis PR makes multiple improvements into the implementation of check-cfg, it is a prerequisite to a follow-up PR that will introduce a simpler and more explicit syntax.\n\nThe 2 main area of improvements are:\n 1. Internal representation of expected values:\n    - now uses `FxHashSet<Option<Symbol>>` instead of `FxHashSet<Symbol>`, it made the no value expected case only possible when no values where in the `HashSet` which is now represented as `None` (same as cfg represent-it).\n    - a enum with `Some` and `Any` makes it now clear if some values are expected or not, necessary for `feature` and `target_feature`.\n 2. Diagnostics: Improve the diagnostics in multiple case and fix case where a missing value could have had a new name suggestion instead of the value diagnostic; and some drive by improvements\n\nI highly recommend reviewing commit by commit.\n\nr? `@petrochenkov`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ded0a9e15fdbed1110a26712b91b8ef40588bf09", "html_url": "https://github.com/rust-lang/rust/commit/ded0a9e15fdbed1110a26712b91b8ef40588bf09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ded0a9e15fdbed1110a26712b91b8ef40588bf09/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65702bfd6bfb8616e182ddd19d0520ce7e35314a", "url": "https://api.github.com/repos/rust-lang/rust/commits/65702bfd6bfb8616e182ddd19d0520ce7e35314a", "html_url": "https://github.com/rust-lang/rust/commit/65702bfd6bfb8616e182ddd19d0520ce7e35314a"}, {"sha": "53647845b917fac2a1565c72f2046f6bbad341d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/53647845b917fac2a1565c72f2046f6bbad341d6", "html_url": "https://github.com/rust-lang/rust/commit/53647845b917fac2a1565c72f2046f6bbad341d6"}], "stats": {"total": 656, "additions": 420, "deletions": 236}, "files": [{"sha": "2a3092d3c7b348fb1c834cf0382e9e721d01d761", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ded0a9e15fdbed1110a26712b91b8ef40588bf09/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded0a9e15fdbed1110a26712b91b8ef40588bf09/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=ded0a9e15fdbed1110a26712b91b8ef40588bf09", "patch": "@@ -5,6 +5,7 @@ use rustc_ast::{Attribute, LitKind, MetaItem, MetaItemKind, MetaItemLit, NestedM\n use rustc_ast_pretty::pprust;\n use rustc_feature::{find_gated_cfg, is_builtin_attr_name, Features, GatedCfg};\n use rustc_macros::HashStable_Generic;\n+use rustc_session::config::ExpectedValues;\n use rustc_session::lint::builtin::UNEXPECTED_CFGS;\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::parse::{feature_err, ParseSess};\n@@ -581,32 +582,32 @@ pub fn cfg_matches(\n ) -> bool {\n     eval_condition(cfg, sess, features, &mut |cfg| {\n         try_gate_cfg(cfg.name, cfg.span, sess, features);\n-        if let Some(names_valid) = &sess.check_config.names_valid {\n-            if !names_valid.contains(&cfg.name) {\n+        match sess.check_config.expecteds.get(&cfg.name) {\n+            Some(ExpectedValues::Some(values)) if !values.contains(&cfg.value) => {\n                 sess.buffer_lint_with_diagnostic(\n                     UNEXPECTED_CFGS,\n                     cfg.span,\n                     lint_node_id,\n-                    \"unexpected `cfg` condition name\",\n-                    BuiltinLintDiagnostics::UnexpectedCfg((cfg.name, cfg.name_span), None),\n+                    \"unexpected `cfg` condition value\",\n+                    BuiltinLintDiagnostics::UnexpectedCfgValue(\n+                        (cfg.name, cfg.name_span),\n+                        cfg.value.map(|v| (v, cfg.value_span.unwrap())),\n+                    ),\n                 );\n             }\n-        }\n-        if let Some(value) = cfg.value {\n-            if let Some(values) = &sess.check_config.values_valid.get(&cfg.name) {\n-                if !values.contains(&value) {\n-                    sess.buffer_lint_with_diagnostic(\n-                        UNEXPECTED_CFGS,\n-                        cfg.span,\n-                        lint_node_id,\n-                        \"unexpected `cfg` condition value\",\n-                        BuiltinLintDiagnostics::UnexpectedCfg(\n-                            (cfg.name, cfg.name_span),\n-                            cfg.value_span.map(|vs| (value, vs)),\n-                        ),\n-                    );\n-                }\n+            None if sess.check_config.exhaustive_names => {\n+                sess.buffer_lint_with_diagnostic(\n+                    UNEXPECTED_CFGS,\n+                    cfg.span,\n+                    lint_node_id,\n+                    \"unexpected `cfg` condition name\",\n+                    BuiltinLintDiagnostics::UnexpectedCfgName(\n+                        (cfg.name, cfg.name_span),\n+                        cfg.value.map(|v| (v, cfg.value_span.unwrap())),\n+                    ),\n+                );\n             }\n+            _ => { /* not unexpected */ }\n         }\n         sess.config.contains(&(cfg.name, cfg.value))\n     })"}, {"sha": "9d9f4ee13f402dc9c6374b8ca20cbd6b65e86204", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 48, "deletions": 28, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/ded0a9e15fdbed1110a26712b91b8ef40588bf09/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded0a9e15fdbed1110a26712b91b8ef40588bf09/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=ded0a9e15fdbed1110a26712b91b8ef40588bf09", "patch": "@@ -9,11 +9,12 @@ use rustc_data_structures::OnDrop;\n use rustc_errors::registry::Registry;\n use rustc_errors::{ErrorGuaranteed, Handler};\n use rustc_lint::LintStore;\n-use rustc_middle::ty;\n+use rustc_middle::{bug, ty};\n use rustc_parse::maybe_new_parser_from_source_str;\n use rustc_query_impl::QueryCtxt;\n use rustc_query_system::query::print_query_stack;\n-use rustc_session::config::{self, CheckCfg, ErrorOutputType, Input, OutputFilenames};\n+use rustc_session::config::{self, ErrorOutputType, Input, OutputFilenames};\n+use rustc_session::config::{CheckCfg, ExpectedValues};\n use rustc_session::lint;\n use rustc_session::parse::{CrateConfig, ParseSess};\n use rustc_session::Session;\n@@ -121,9 +122,9 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String\n /// Converts strings provided as `--check-cfg [specs]` into a `CheckCfg`.\n pub fn parse_check_cfg(specs: Vec<String>) -> CheckCfg {\n     rustc_span::create_default_session_if_not_set_then(move |_| {\n-        let mut cfg = CheckCfg::default();\n+        let mut check_cfg = CheckCfg::default();\n \n-        'specs: for s in specs {\n+        for s in specs {\n             let sess = ParseSess::with_silent_emitter(Some(format!(\n                 \"this error occurred on the command line: `--check-cfg={s}`\"\n             )));\n@@ -137,76 +138,95 @@ pub fn parse_check_cfg(specs: Vec<String>) -> CheckCfg {\n                             concat!(\"invalid `--check-cfg` argument: `{}` (\", $reason, \")\"),\n                             s\n                         ),\n-                    );\n+                    )\n                 };\n             }\n \n+            let expected_error = || {\n+                error!(\n+                    \"expected `names(name1, name2, ... nameN)` or \\\n+                        `values(name, \\\"value1\\\", \\\"value2\\\", ... \\\"valueN\\\")`\"\n+                )\n+            };\n+\n             match maybe_new_parser_from_source_str(&sess, filename, s.to_string()) {\n                 Ok(mut parser) => match parser.parse_meta_item() {\n                     Ok(meta_item) if parser.token == token::Eof => {\n                         if let Some(args) = meta_item.meta_item_list() {\n                             if meta_item.has_name(sym::names) {\n-                                let names_valid =\n-                                    cfg.names_valid.get_or_insert_with(|| FxHashSet::default());\n+                                check_cfg.exhaustive_names = true;\n                                 for arg in args {\n                                     if arg.is_word() && arg.ident().is_some() {\n                                         let ident = arg.ident().expect(\"multi-segment cfg key\");\n-                                        names_valid.insert(ident.name.to_string());\n+                                        check_cfg\n+                                            .expecteds\n+                                            .entry(ident.name.to_string())\n+                                            .or_insert(ExpectedValues::Any);\n                                     } else {\n                                         error!(\"`names()` arguments must be simple identifiers\");\n                                     }\n                                 }\n-                                continue 'specs;\n                             } else if meta_item.has_name(sym::values) {\n                                 if let Some((name, values)) = args.split_first() {\n                                     if name.is_word() && name.ident().is_some() {\n                                         let ident = name.ident().expect(\"multi-segment cfg key\");\n-                                        let ident_values = cfg\n-                                            .values_valid\n+                                        let expected_values = check_cfg\n+                                            .expecteds\n                                             .entry(ident.name.to_string())\n-                                            .or_insert_with(|| FxHashSet::default());\n+                                            .or_insert_with(|| {\n+                                                ExpectedValues::Some(FxHashSet::default())\n+                                            });\n+\n+                                        let ExpectedValues::Some(expected_values) = expected_values else {\n+                                            bug!(\"shoudn't be possible\")\n+                                        };\n \n                                         for val in values {\n                                             if let Some(LitKind::Str(s, _)) =\n                                                 val.lit().map(|lit| &lit.kind)\n                                             {\n-                                                ident_values.insert(s.to_string());\n+                                                expected_values.insert(Some(s.to_string()));\n                                             } else {\n                                                 error!(\n                                                     \"`values()` arguments must be string literals\"\n                                                 );\n                                             }\n                                         }\n \n-                                        continue 'specs;\n+                                        if values.is_empty() {\n+                                            expected_values.insert(None);\n+                                        }\n                                     } else {\n                                         error!(\n                                             \"`values()` first argument must be a simple identifier\"\n                                         );\n                                     }\n                                 } else if args.is_empty() {\n-                                    cfg.well_known_values = true;\n-                                    continue 'specs;\n+                                    check_cfg.exhaustive_values = true;\n+                                } else {\n+                                    expected_error();\n                                 }\n+                            } else {\n+                                expected_error();\n                             }\n+                        } else {\n+                            expected_error();\n                         }\n                     }\n-                    Ok(..) => {}\n-                    Err(err) => err.cancel(),\n+                    Ok(..) => expected_error(),\n+                    Err(err) => {\n+                        err.cancel();\n+                        expected_error();\n+                    }\n                 },\n-                Err(errs) => drop(errs),\n+                Err(errs) => {\n+                    drop(errs);\n+                    expected_error();\n+                }\n             }\n-\n-            error!(\n-                \"expected `names(name1, name2, ... nameN)` or \\\n-                `values(name, \\\"value1\\\", \\\"value2\\\", ... \\\"valueN\\\")`\"\n-            );\n         }\n \n-        if let Some(names_valid) = &mut cfg.names_valid {\n-            names_valid.extend(cfg.values_valid.keys().cloned());\n-        }\n-        cfg\n+        check_cfg\n     })\n }\n "}, {"sha": "010526988506d2c721f36d6993586e687d6dbb65", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ded0a9e15fdbed1110a26712b91b8ef40588bf09/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded0a9e15fdbed1110a26712b91b8ef40588bf09/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=ded0a9e15fdbed1110a26712b91b8ef40588bf09", "patch": "@@ -63,6 +63,7 @@ use rustc_middle::ty::layout::{LayoutError, LayoutOf};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, Instance, Ty, TyCtxt, VariantDef};\n+use rustc_session::config::ExpectedValues;\n use rustc_session::lint::{BuiltinLintDiagnostics, FutureIncompatibilityReason};\n use rustc_span::edition::Edition;\n use rustc_span::source_map::Spanned;\n@@ -3306,16 +3307,15 @@ impl EarlyLintPass for UnexpectedCfgs {\n         let cfg = &cx.sess().parse_sess.config;\n         let check_cfg = &cx.sess().parse_sess.check_config;\n         for &(name, value) in cfg {\n-            if let Some(names_valid) = &check_cfg.names_valid && !names_valid.contains(&name){\n-                cx.emit_lint(UNEXPECTED_CFGS, BuiltinUnexpectedCliConfigName {\n-                    name,\n-                });\n-            }\n-            if let Some(value) = value && let Some(values) = check_cfg.values_valid.get(&name) && !values.contains(&value) {\n-                cx.emit_lint(\n-                    UNEXPECTED_CFGS,\n-                    BuiltinUnexpectedCliConfigValue { name, value },\n-                );\n+            match check_cfg.expecteds.get(&name) {\n+                Some(ExpectedValues::Some(values)) if !values.contains(&value) => {\n+                    let value = value.unwrap_or(kw::Empty);\n+                    cx.emit_lint(UNEXPECTED_CFGS, BuiltinUnexpectedCliConfigValue { name, value });\n+                }\n+                None if check_cfg.exhaustive_names => {\n+                    cx.emit_lint(UNEXPECTED_CFGS, BuiltinUnexpectedCliConfigName { name });\n+                }\n+                _ => { /* expected */ }\n             }\n         }\n     }"}, {"sha": "53d7cf74cde53db24caf9e5dd05b71b97eae28f3", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 54, "deletions": 16, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/ded0a9e15fdbed1110a26712b91b8ef40588bf09/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded0a9e15fdbed1110a26712b91b8ef40588bf09/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=ded0a9e15fdbed1110a26712b91b8ef40588bf09", "patch": "@@ -36,6 +36,7 @@ use rustc_middle::middle::stability;\n use rustc_middle::ty::layout::{LayoutError, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, print::Printer, subst::GenericArg, RegisteredTools, Ty, TyCtxt};\n+use rustc_session::config::ExpectedValues;\n use rustc_session::lint::{BuiltinLintDiagnostics, LintExpectationId};\n use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintBuffer, LintId};\n use rustc_session::Session;\n@@ -768,22 +769,52 @@ pub trait LintContext: Sized {\n                     db.help(help);\n                     db.note(\"see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\");\n                 },\n-                BuiltinLintDiagnostics::UnexpectedCfg((name, name_span), None) => {\n-                    let Some(names_valid) = &sess.parse_sess.check_config.names_valid else {\n-                        bug!(\"it shouldn't be possible to have a diagnostic on a name if name checking is not enabled\");\n-                    };\n-                    let possibilities: Vec<Symbol> = names_valid.iter().map(|s| *s).collect();\n+                BuiltinLintDiagnostics::UnexpectedCfgName((name, name_span), value) => {\n+                    let possibilities: Vec<Symbol> = sess.parse_sess.check_config.expecteds.keys().map(|s| *s).collect();\n \n                     // Suggest the most probable if we found one\n                     if let Some(best_match) = find_best_match_for_name(&possibilities, name, None) {\n-                        db.span_suggestion(name_span, \"did you mean\", best_match, Applicability::MaybeIncorrect);\n+                        if let Some(ExpectedValues::Some(best_match_values)) =\n+                            sess.parse_sess.check_config.expecteds.get(&best_match) {\n+                            let mut possibilities = best_match_values.iter()\n+                                .flatten()\n+                                .map(Symbol::as_str)\n+                                .collect::<Vec<_>>();\n+                            possibilities.sort();\n+\n+                            if let Some((value, value_span)) = value {\n+                                if best_match_values.contains(&Some(value)) {\n+                                    db.span_suggestion(name_span, \"there is a config with a similar name and value\", best_match, Applicability::MaybeIncorrect);\n+                                } else if best_match_values.contains(&None) {\n+                                    db.span_suggestion(name_span.to(value_span), \"there is a config with a similar name and no value\", best_match, Applicability::MaybeIncorrect);\n+                                } else if let Some(first_value) = possibilities.first() {\n+                                    db.span_suggestion(name_span.to(value_span), \"there is a config with a similar name and different values\", format!(\"{best_match} = \\\"{first_value}\\\"\"), Applicability::MaybeIncorrect);\n+                                } else {\n+                                    db.span_suggestion(name_span.to(value_span), \"there is a config with a similar name and different values\", best_match, Applicability::MaybeIncorrect);\n+                                };\n+                            } else {\n+                                db.span_suggestion(name_span, \"there is a config with a similar name\", best_match, Applicability::MaybeIncorrect);\n+                            }\n+\n+                            if !possibilities.is_empty() {\n+                                let possibilities = possibilities.join(\"`, `\");\n+                                db.help(format!(\"expected values for `{best_match}` are: `{possibilities}`\"));\n+                            }\n+                        } else {\n+                            db.span_suggestion(name_span, \"there is a config with a similar name\", best_match, Applicability::MaybeIncorrect);\n+                        }\n                     }\n                 },\n-                BuiltinLintDiagnostics::UnexpectedCfg((name, name_span), Some((value, value_span))) => {\n-                    let Some(values) = &sess.parse_sess.check_config.values_valid.get(&name) else {\n+                BuiltinLintDiagnostics::UnexpectedCfgValue((name, name_span), value) => {\n+                    let Some(ExpectedValues::Some(values)) = &sess.parse_sess.check_config.expecteds.get(&name) else {\n                         bug!(\"it shouldn't be possible to have a diagnostic on a value whose name is not in values\");\n                     };\n-                    let possibilities: Vec<Symbol> = values.iter().map(|&s| s).collect();\n+                    let mut have_none_possibility = false;\n+                    let possibilities: Vec<Symbol> = values.iter()\n+                        .inspect(|a| have_none_possibility |= a.is_none())\n+                        .copied()\n+                        .flatten()\n+                        .collect();\n \n                     // Show the full list if all possible values for a given name, but don't do it\n                     // for names as the possibilities could be very long\n@@ -792,17 +823,24 @@ pub trait LintContext: Sized {\n                             let mut possibilities = possibilities.iter().map(Symbol::as_str).collect::<Vec<_>>();\n                             possibilities.sort();\n \n-                            let possibilities = possibilities.join(\", \");\n-                            db.note(format!(\"expected values for `{name}` are: {possibilities}\"));\n+                            let possibilities = possibilities.join(\"`, `\");\n+                            let none = if have_none_possibility { \"(none), \" } else { \"\" };\n+\n+                            db.note(format!(\"expected values for `{name}` are: {none}`{possibilities}`\"));\n                         }\n \n-                        // Suggest the most probable if we found one\n-                        if let Some(best_match) = find_best_match_for_name(&possibilities, value, None) {\n-                            db.span_suggestion(value_span, \"did you mean\", format!(\"\\\"{best_match}\\\"\"), Applicability::MaybeIncorrect);\n+                        if let Some((value, value_span)) = value {\n+                            // Suggest the most probable if we found one\n+                            if let Some(best_match) = find_best_match_for_name(&possibilities, value, None) {\n+                                db.span_suggestion(value_span, \"there is a expected value with a similar name\", format!(\"\\\"{best_match}\\\"\"), Applicability::MaybeIncorrect);\n+\n+                            }\n+                        } else if let &[first_possibility] = &possibilities[..] {\n+                            db.span_suggestion(name_span.shrink_to_hi(), \"specify a config value\", format!(\" = \\\"{first_possibility}\\\"\"), Applicability::MaybeIncorrect);\n                         }\n-                    } else {\n+                    } else if have_none_possibility {\n                         db.note(format!(\"no expected value for `{name}`\"));\n-                        if name != sym::feature {\n+                        if let Some((_value, value_span)) = value {\n                             db.span_suggestion(name_span.shrink_to_hi().to(value_span), \"remove the value\", \"\", Applicability::MaybeIncorrect);\n                         }\n                     }"}, {"sha": "e27e322db88581a27bb1b917804510ed43877b5c", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ded0a9e15fdbed1110a26712b91b8ef40588bf09/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded0a9e15fdbed1110a26712b91b8ef40588bf09/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=ded0a9e15fdbed1110a26712b91b8ef40588bf09", "patch": "@@ -496,7 +496,8 @@ pub enum BuiltinLintDiagnostics {\n     BreakWithLabelAndLoop(Span),\n     NamedAsmLabel(String),\n     UnicodeTextFlow(Span, String),\n-    UnexpectedCfg((Symbol, Span), Option<(Symbol, Span)>),\n+    UnexpectedCfgName((Symbol, Span), Option<(Symbol, Span)>),\n+    UnexpectedCfgValue((Symbol, Span), Option<(Symbol, Span)>),\n     DeprecatedWhereclauseLocation(Span, String),\n     SingleUseLifetime {\n         /// Span of the parameter which declares this lifetime."}, {"sha": "18917120256e0f643b9736d539ca2e14192da00c", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 125, "deletions": 108, "changes": 233, "blob_url": "https://github.com/rust-lang/rust/blob/ded0a9e15fdbed1110a26712b91b8ef40588bf09/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded0a9e15fdbed1110a26712b91b8ef40588bf09/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=ded0a9e15fdbed1110a26712b91b8ef40588bf09", "patch": "@@ -1064,37 +1064,76 @@ pub fn to_crate_config(cfg: FxHashSet<(String, Option<String>)>) -> CrateConfig\n \n /// The parsed `--check-cfg` options\n pub struct CheckCfg<T = String> {\n-    /// The set of all `names()`, if None no name checking is performed\n-    pub names_valid: Option<FxHashSet<T>>,\n+    /// Is well known names activated\n+    pub exhaustive_names: bool,\n     /// Is well known values activated\n-    pub well_known_values: bool,\n-    /// The set of all `values()`\n-    pub values_valid: FxHashMap<T, FxHashSet<T>>,\n+    pub exhaustive_values: bool,\n+    /// All the expected values for a config name\n+    pub expecteds: FxHashMap<T, ExpectedValues<T>>,\n }\n \n impl<T> Default for CheckCfg<T> {\n     fn default() -> Self {\n         CheckCfg {\n-            names_valid: Default::default(),\n-            values_valid: Default::default(),\n-            well_known_values: false,\n+            exhaustive_names: false,\n+            exhaustive_values: false,\n+            expecteds: FxHashMap::default(),\n         }\n     }\n }\n \n impl<T> CheckCfg<T> {\n-    fn map_data<O: Eq + Hash>(&self, f: impl Fn(&T) -> O) -> CheckCfg<O> {\n+    fn map_data<O: Eq + Hash>(self, f: impl Fn(T) -> O) -> CheckCfg<O> {\n         CheckCfg {\n-            names_valid: self\n-                .names_valid\n-                .as_ref()\n-                .map(|names_valid| names_valid.iter().map(|a| f(a)).collect()),\n-            values_valid: self\n-                .values_valid\n-                .iter()\n-                .map(|(a, b)| (f(a), b.iter().map(|b| f(b)).collect()))\n+            exhaustive_names: self.exhaustive_names,\n+            exhaustive_values: self.exhaustive_values,\n+            expecteds: self\n+                .expecteds\n+                .into_iter()\n+                .map(|(name, values)| {\n+                    (\n+                        f(name),\n+                        match values {\n+                            ExpectedValues::Some(values) => ExpectedValues::Some(\n+                                values.into_iter().map(|b| b.map(|b| f(b))).collect(),\n+                            ),\n+                            ExpectedValues::Any => ExpectedValues::Any,\n+                        },\n+                    )\n+                })\n                 .collect(),\n-            well_known_values: self.well_known_values,\n+        }\n+    }\n+}\n+\n+pub enum ExpectedValues<T> {\n+    Some(FxHashSet<Option<T>>),\n+    Any,\n+}\n+\n+impl<T: Eq + Hash> ExpectedValues<T> {\n+    fn insert(&mut self, value: T) -> bool {\n+        match self {\n+            ExpectedValues::Some(expecteds) => expecteds.insert(Some(value)),\n+            ExpectedValues::Any => false,\n+        }\n+    }\n+}\n+\n+impl<T: Eq + Hash> Extend<T> for ExpectedValues<T> {\n+    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {\n+        match self {\n+            ExpectedValues::Some(expecteds) => expecteds.extend(iter.into_iter().map(Some)),\n+            ExpectedValues::Any => {}\n+        }\n+    }\n+}\n+\n+impl<'a, T: Eq + Hash + Copy + 'a> Extend<&'a T> for ExpectedValues<T> {\n+    fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {\n+        match self {\n+            ExpectedValues::Some(expecteds) => expecteds.extend(iter.into_iter().map(|a| Some(*a))),\n+            ExpectedValues::Any => {}\n         }\n     }\n }\n@@ -1103,58 +1142,27 @@ impl<T> CheckCfg<T> {\n /// `rustc_interface::interface::Config` accepts this in the compiler configuration,\n /// but the symbol interner is not yet set up then, so we must convert it later.\n pub fn to_crate_check_config(cfg: CheckCfg) -> CrateCheckConfig {\n-    cfg.map_data(|s| Symbol::intern(s))\n+    cfg.map_data(|s| Symbol::intern(&s))\n }\n \n impl CrateCheckConfig {\n-    /// Fills a `CrateCheckConfig` with well-known configuration names.\n-    fn fill_well_known_names(&mut self) {\n-        // NOTE: This should be kept in sync with `default_configuration` and\n-        // `fill_well_known_values`\n-        const WELL_KNOWN_NAMES: &[Symbol] = &[\n-            // rustc\n-            sym::unix,\n-            sym::windows,\n-            sym::target_os,\n-            sym::target_family,\n-            sym::target_arch,\n-            sym::target_endian,\n-            sym::target_pointer_width,\n-            sym::target_env,\n-            sym::target_abi,\n-            sym::target_vendor,\n-            sym::target_thread_local,\n-            sym::target_has_atomic_load_store,\n-            sym::target_has_atomic,\n-            sym::target_has_atomic_equal_alignment,\n-            sym::target_feature,\n-            sym::panic,\n-            sym::sanitize,\n-            sym::debug_assertions,\n-            sym::proc_macro,\n-            sym::test,\n-            sym::feature,\n-            // rustdoc\n-            sym::doc,\n-            sym::doctest,\n-            // miri\n-            sym::miri,\n-        ];\n-\n-        // We only insert well-known names if `names()` was activated\n-        if let Some(names_valid) = &mut self.names_valid {\n-            names_valid.extend(WELL_KNOWN_NAMES);\n-        }\n-    }\n-\n-    /// Fills a `CrateCheckConfig` with well-known configuration values.\n-    fn fill_well_known_values(&mut self, current_target: &Target) {\n-        if !self.well_known_values {\n+    pub fn fill_well_known(&mut self, current_target: &Target) {\n+        if !self.exhaustive_values && !self.exhaustive_names {\n             return;\n         }\n \n-        // NOTE: This should be kept in sync with `default_configuration` and\n-        // `fill_well_known_names`\n+        let no_values = || {\n+            let mut values = FxHashSet::default();\n+            values.insert(None);\n+            ExpectedValues::Some(values)\n+        };\n+\n+        let empty_values = || {\n+            let values = FxHashSet::default();\n+            ExpectedValues::Some(values)\n+        };\n+\n+        // NOTE: This should be kept in sync with `default_configuration`\n \n         let panic_values = &PanicStrategy::all();\n \n@@ -1174,6 +1182,9 @@ impl CrateCheckConfig {\n         // Unknown possible values:\n         //  - `feature`\n         //  - `target_feature`\n+        for name in [sym::feature, sym::target_feature] {\n+            self.expecteds.entry(name).or_insert(ExpectedValues::Any);\n+        }\n \n         // No-values\n         for name in [\n@@ -1187,20 +1198,23 @@ impl CrateCheckConfig {\n             sym::debug_assertions,\n             sym::target_thread_local,\n         ] {\n-            self.values_valid.entry(name).or_default();\n+            self.expecteds.entry(name).or_insert_with(no_values);\n         }\n \n         // Pre-defined values\n-        self.values_valid.entry(sym::panic).or_default().extend(panic_values);\n-        self.values_valid.entry(sym::sanitize).or_default().extend(sanitize_values);\n-        self.values_valid.entry(sym::target_has_atomic).or_default().extend(atomic_values);\n-        self.values_valid\n+        self.expecteds.entry(sym::panic).or_insert_with(empty_values).extend(panic_values);\n+        self.expecteds.entry(sym::sanitize).or_insert_with(empty_values).extend(sanitize_values);\n+        self.expecteds\n+            .entry(sym::target_has_atomic)\n+            .or_insert_with(no_values)\n+            .extend(atomic_values);\n+        self.expecteds\n             .entry(sym::target_has_atomic_load_store)\n-            .or_default()\n+            .or_insert_with(no_values)\n             .extend(atomic_values);\n-        self.values_valid\n+        self.expecteds\n             .entry(sym::target_has_atomic_equal_alignment)\n-            .or_default()\n+            .or_insert_with(no_values)\n             .extend(atomic_values);\n \n         // Target specific values\n@@ -1218,47 +1232,50 @@ impl CrateCheckConfig {\n \n             // Initialize (if not already initialized)\n             for &e in VALUES {\n-                self.values_valid.entry(e).or_default();\n+                let entry = self.expecteds.entry(e);\n+                if !self.exhaustive_values {\n+                    entry.or_insert(ExpectedValues::Any);\n+                } else {\n+                    entry.or_insert_with(empty_values);\n+                }\n             }\n \n-            // Get all values map at once otherwise it would be costly.\n-            // (8 values * 220 targets ~= 1760 times, at the time of writing this comment).\n-            let [\n-                values_target_os,\n-                values_target_family,\n-                values_target_arch,\n-                values_target_endian,\n-                values_target_env,\n-                values_target_abi,\n-                values_target_vendor,\n-                values_target_pointer_width,\n-            ] = self\n-                .values_valid\n-                .get_many_mut(VALUES)\n-                .expect(\"unable to get all the check-cfg values buckets\");\n-\n-            for target in TARGETS\n-                .iter()\n-                .map(|target| Target::expect_builtin(&TargetTriple::from_triple(target)))\n-                .chain(iter::once(current_target.clone()))\n-            {\n-                values_target_os.insert(Symbol::intern(&target.options.os));\n-                values_target_family\n-                    .extend(target.options.families.iter().map(|family| Symbol::intern(family)));\n-                values_target_arch.insert(Symbol::intern(&target.arch));\n-                values_target_endian.insert(Symbol::intern(target.options.endian.as_str()));\n-                values_target_env.insert(Symbol::intern(&target.options.env));\n-                values_target_abi.insert(Symbol::intern(&target.options.abi));\n-                values_target_vendor.insert(Symbol::intern(&target.options.vendor));\n-                values_target_pointer_width.insert(sym::integer(target.pointer_width));\n+            if self.exhaustive_values {\n+                // Get all values map at once otherwise it would be costly.\n+                // (8 values * 220 targets ~= 1760 times, at the time of writing this comment).\n+                let [\n+                    values_target_os,\n+                    values_target_family,\n+                    values_target_arch,\n+                    values_target_endian,\n+                    values_target_env,\n+                    values_target_abi,\n+                    values_target_vendor,\n+                    values_target_pointer_width,\n+                ] = self\n+                    .expecteds\n+                    .get_many_mut(VALUES)\n+                    .expect(\"unable to get all the check-cfg values buckets\");\n+\n+                for target in TARGETS\n+                    .iter()\n+                    .map(|target| Target::expect_builtin(&TargetTriple::from_triple(target)))\n+                    .chain(iter::once(current_target.clone()))\n+                {\n+                    values_target_os.insert(Symbol::intern(&target.options.os));\n+                    values_target_family.extend(\n+                        target.options.families.iter().map(|family| Symbol::intern(family)),\n+                    );\n+                    values_target_arch.insert(Symbol::intern(&target.arch));\n+                    values_target_endian.insert(Symbol::intern(target.options.endian.as_str()));\n+                    values_target_env.insert(Symbol::intern(&target.options.env));\n+                    values_target_abi.insert(Symbol::intern(&target.options.abi));\n+                    values_target_vendor.insert(Symbol::intern(&target.options.vendor));\n+                    values_target_pointer_width.insert(sym::integer(target.pointer_width));\n+                }\n             }\n         }\n     }\n-\n-    pub fn fill_well_known(&mut self, current_target: &Target) {\n-        self.fill_well_known_names();\n-        self.fill_well_known_values(current_target);\n-    }\n }\n \n pub fn build_configuration(sess: &Session, mut user_cfg: CrateConfig) -> CrateConfig {"}, {"sha": "03fb6f96fb5f984b900469ba968bc7132bd7c225", "filename": "tests/rustdoc-ui/check-cfg/check-cfg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ded0a9e15fdbed1110a26712b91b8ef40588bf09/tests%2Frustdoc-ui%2Fcheck-cfg%2Fcheck-cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded0a9e15fdbed1110a26712b91b8ef40588bf09/tests%2Frustdoc-ui%2Fcheck-cfg%2Fcheck-cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fcheck-cfg%2Fcheck-cfg.stderr?ref=ded0a9e15fdbed1110a26712b91b8ef40588bf09", "patch": "@@ -2,7 +2,7 @@ warning: unexpected `cfg` condition name\n   --> $DIR/check-cfg.rs:5:7\n    |\n LL | #[cfg(uniz)]\n-   |       ^^^^ help: did you mean: `unix`\n+   |       ^^^^ help: there is a config with a similar name: `unix`\n    |\n    = note: `#[warn(unexpected_cfgs)]` on by default\n "}, {"sha": "f84543c20725470973bd3432dabd48b5fc008c6e", "filename": "tests/rustdoc-ui/doctest/check-cfg-test.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ded0a9e15fdbed1110a26712b91b8ef40588bf09/tests%2Frustdoc-ui%2Fdoctest%2Fcheck-cfg-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded0a9e15fdbed1110a26712b91b8ef40588bf09/tests%2Frustdoc-ui%2Fdoctest%2Fcheck-cfg-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fcheck-cfg-test.stderr?ref=ded0a9e15fdbed1110a26712b91b8ef40588bf09", "patch": "@@ -4,7 +4,7 @@ warning: unexpected `cfg` condition value\n LL | #[cfg(feature = \"invalid\")]\n    |       ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: expected values for `feature` are: test\n+   = note: expected values for `feature` are: `test`\n    = note: `#[warn(unexpected_cfgs)]` on by default\n \n warning: 1 warning emitted"}, {"sha": "70a967c0e5f6490d038816c97ae2527dbf0ad0aa", "filename": "tests/ui/check-cfg/compact-values.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ded0a9e15fdbed1110a26712b91b8ef40588bf09/tests%2Fui%2Fcheck-cfg%2Fcompact-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded0a9e15fdbed1110a26712b91b8ef40588bf09/tests%2Fui%2Fcheck-cfg%2Fcompact-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcheck-cfg%2Fcompact-values.stderr?ref=ded0a9e15fdbed1110a26712b91b8ef40588bf09", "patch": "@@ -4,7 +4,7 @@ warning: unexpected `cfg` condition value\n LL | #[cfg(target(os = \"linux\", arch = \"X\"))]\n    |                            ^^^^^^^^^^\n    |\n-   = note: expected values for `target_arch` are: aarch64, arm, avr, bpf, hexagon, loongarch64, m68k, mips, mips64, msp430, nvptx64, powerpc, powerpc64, riscv32, riscv64, s390x, sparc, sparc64, wasm32, wasm64, x86, x86_64\n+   = note: expected values for `target_arch` are: `aarch64`, `arm`, `avr`, `bpf`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips64`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`\n    = note: `#[warn(unexpected_cfgs)]` on by default\n \n warning: 1 warning emitted"}, {"sha": "49e127d079a79ef72cb41701beae76905c45bb2f", "filename": "tests/ui/check-cfg/diagnotics.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ded0a9e15fdbed1110a26712b91b8ef40588bf09/tests%2Fui%2Fcheck-cfg%2Fdiagnotics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded0a9e15fdbed1110a26712b91b8ef40588bf09/tests%2Fui%2Fcheck-cfg%2Fdiagnotics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcheck-cfg%2Fdiagnotics.rs?ref=ded0a9e15fdbed1110a26712b91b8ef40588bf09", "patch": "@@ -0,0 +1,31 @@\n+// check-pass\n+// compile-flags: --check-cfg=names() --check-cfg=values(feature,\"foo\") --check-cfg=values(no_values) -Z unstable-options\n+\n+#[cfg(featur)]\n+//~^ WARNING unexpected `cfg` condition name\n+fn feature() {}\n+\n+#[cfg(featur = \"foo\")]\n+//~^ WARNING unexpected `cfg` condition name\n+fn feature() {}\n+\n+#[cfg(featur = \"fo\")]\n+//~^ WARNING unexpected `cfg` condition name\n+fn feature() {}\n+\n+#[cfg(feature = \"foo\")]\n+fn feature() {}\n+\n+#[cfg(no_value)]\n+//~^ WARNING unexpected `cfg` condition name\n+fn no_values() {}\n+\n+#[cfg(no_value = \"foo\")]\n+//~^ WARNING unexpected `cfg` condition name\n+fn no_values() {}\n+\n+#[cfg(no_values = \"bar\")]\n+//~^ WARNING unexpected `cfg` condition value\n+fn no_values() {}\n+\n+fn main() {}"}, {"sha": "8b9fef09d09ecc97ffd82a7ec2c8ba7dce38a325", "filename": "tests/ui/check-cfg/diagnotics.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ded0a9e15fdbed1110a26712b91b8ef40588bf09/tests%2Fui%2Fcheck-cfg%2Fdiagnotics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded0a9e15fdbed1110a26712b91b8ef40588bf09/tests%2Fui%2Fcheck-cfg%2Fdiagnotics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcheck-cfg%2Fdiagnotics.stderr?ref=ded0a9e15fdbed1110a26712b91b8ef40588bf09", "patch": "@@ -0,0 +1,62 @@\n+warning: unexpected `cfg` condition name\n+  --> $DIR/diagnotics.rs:4:7\n+   |\n+LL | #[cfg(featur)]\n+   |       ^^^^^^ help: there is a config with a similar name: `feature`\n+   |\n+   = help: expected values for `feature` are: `foo`\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n+\n+warning: unexpected `cfg` condition name\n+  --> $DIR/diagnotics.rs:8:7\n+   |\n+LL | #[cfg(featur = \"foo\")]\n+   |       ^^^^^^^^^^^^^^\n+   |\n+   = help: expected values for `feature` are: `foo`\n+help: there is a config with a similar name and value\n+   |\n+LL | #[cfg(feature = \"foo\")]\n+   |       ~~~~~~~\n+\n+warning: unexpected `cfg` condition name\n+  --> $DIR/diagnotics.rs:12:7\n+   |\n+LL | #[cfg(featur = \"fo\")]\n+   |       ^^^^^^^^^^^^^\n+   |\n+   = help: expected values for `feature` are: `foo`\n+help: there is a config with a similar name and different values\n+   |\n+LL | #[cfg(feature = \"foo\")]\n+   |       ~~~~~~~~~~~~~~~\n+\n+warning: unexpected `cfg` condition name\n+  --> $DIR/diagnotics.rs:19:7\n+   |\n+LL | #[cfg(no_value)]\n+   |       ^^^^^^^^ help: there is a config with a similar name: `no_values`\n+\n+warning: unexpected `cfg` condition name\n+  --> $DIR/diagnotics.rs:23:7\n+   |\n+LL | #[cfg(no_value = \"foo\")]\n+   |       ^^^^^^^^^^^^^^^^\n+   |\n+help: there is a config with a similar name and no value\n+   |\n+LL | #[cfg(no_values)]\n+   |       ~~~~~~~~~\n+\n+warning: unexpected `cfg` condition value\n+  --> $DIR/diagnotics.rs:27:7\n+   |\n+LL | #[cfg(no_values = \"bar\")]\n+   |       ^^^^^^^^^--------\n+   |                |\n+   |                help: remove the value\n+   |\n+   = note: no expected value for `no_values`\n+\n+warning: 6 warnings emitted\n+"}, {"sha": "ed09f8cb66d2995fff481930aeec82dcb18ad71a", "filename": "tests/ui/check-cfg/invalid-cfg-name.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ded0a9e15fdbed1110a26712b91b8ef40588bf09/tests%2Fui%2Fcheck-cfg%2Finvalid-cfg-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded0a9e15fdbed1110a26712b91b8ef40588bf09/tests%2Fui%2Fcheck-cfg%2Finvalid-cfg-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcheck-cfg%2Finvalid-cfg-name.stderr?ref=ded0a9e15fdbed1110a26712b91b8ef40588bf09", "patch": "@@ -2,7 +2,7 @@ warning: unexpected `cfg` condition name\n   --> $DIR/invalid-cfg-name.rs:7:7\n    |\n LL | #[cfg(widnows)]\n-   |       ^^^^^^^ help: did you mean: `windows`\n+   |       ^^^^^^^ help: there is a config with a similar name: `windows`\n    |\n    = note: `#[warn(unexpected_cfgs)]` on by default\n "}, {"sha": "776d264a7adcb949f04b6d9a9fddb8debeff5514", "filename": "tests/ui/check-cfg/invalid-cfg-value.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ded0a9e15fdbed1110a26712b91b8ef40588bf09/tests%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded0a9e15fdbed1110a26712b91b8ef40588bf09/tests%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr?ref=ded0a9e15fdbed1110a26712b91b8ef40588bf09", "patch": "@@ -4,9 +4,9 @@ warning: unexpected `cfg` condition value\n LL | #[cfg(feature = \"sedre\")]\n    |       ^^^^^^^^^^-------\n    |                 |\n-   |                 help: did you mean: `\"serde\"`\n+   |                 help: there is a expected value with a similar name: `\"serde\"`\n    |\n-   = note: expected values for `feature` are: full, serde\n+   = note: expected values for `feature` are: `full`, `serde`\n    = note: `#[warn(unexpected_cfgs)]` on by default\n \n warning: unexpected `cfg` condition value\n@@ -15,7 +15,7 @@ warning: unexpected `cfg` condition value\n LL | #[cfg(feature = \"rand\")]\n    |       ^^^^^^^^^^^^^^^^\n    |\n-   = note: expected values for `feature` are: full, serde\n+   = note: expected values for `feature` are: `full`, `serde`\n \n warning: unexpected condition value `rand` for condition name `feature`\n    |"}, {"sha": "9adf5c46e43fe8a4d069e01577d2c0ad21dcf645", "filename": "tests/ui/check-cfg/mix.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ded0a9e15fdbed1110a26712b91b8ef40588bf09/tests%2Fui%2Fcheck-cfg%2Fmix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded0a9e15fdbed1110a26712b91b8ef40588bf09/tests%2Fui%2Fcheck-cfg%2Fmix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcheck-cfg%2Fmix.rs?ref=ded0a9e15fdbed1110a26712b91b8ef40588bf09", "patch": "@@ -12,6 +12,10 @@ fn do_windows_stuff() {}\n //~^ WARNING unexpected `cfg` condition name\n fn do_windows_stuff() {}\n \n+#[cfg(feature)]\n+//~^ WARNING unexpected `cfg` condition value\n+fn no_feature() {}\n+\n #[cfg(feature = \"foo\")]\n fn use_foo() {}\n "}, {"sha": "07c514aed5242f603aa0894677ea2da67c877496", "filename": "tests/ui/check-cfg/mix.stderr", "status": "modified", "additions": 45, "deletions": 37, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/ded0a9e15fdbed1110a26712b91b8ef40588bf09/tests%2Fui%2Fcheck-cfg%2Fmix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded0a9e15fdbed1110a26712b91b8ef40588bf09/tests%2Fui%2Fcheck-cfg%2Fmix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcheck-cfg%2Fmix.stderr?ref=ded0a9e15fdbed1110a26712b91b8ef40588bf09", "patch": "@@ -2,28 +2,36 @@ warning: unexpected `cfg` condition name\n   --> $DIR/mix.rs:11:7\n    |\n LL | #[cfg(widnows)]\n-   |       ^^^^^^^ help: did you mean: `windows`\n+   |       ^^^^^^^ help: there is a config with a similar name: `windows`\n    |\n    = note: `#[warn(unexpected_cfgs)]` on by default\n \n warning: unexpected `cfg` condition value\n-  --> $DIR/mix.rs:18:7\n+  --> $DIR/mix.rs:15:7\n+   |\n+LL | #[cfg(feature)]\n+   |       ^^^^^^^- help: specify a config value: `= \"foo\"`\n+   |\n+   = note: expected values for `feature` are: `foo`\n+\n+warning: unexpected `cfg` condition value\n+  --> $DIR/mix.rs:22:7\n    |\n LL | #[cfg(feature = \"bar\")]\n    |       ^^^^^^^^^^^^^^^\n    |\n-   = note: expected values for `feature` are: foo\n+   = note: expected values for `feature` are: `foo`\n \n warning: unexpected `cfg` condition value\n-  --> $DIR/mix.rs:22:7\n+  --> $DIR/mix.rs:26:7\n    |\n LL | #[cfg(feature = \"zebra\")]\n    |       ^^^^^^^^^^^^^^^^^\n    |\n-   = note: expected values for `feature` are: foo\n+   = note: expected values for `feature` are: `foo`\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:26:12\n+  --> $DIR/mix.rs:30:12\n    |\n LL | #[cfg_attr(uu, test)]\n    |            ^^\n@@ -37,146 +45,146 @@ warning: unexpected `unknown_name` as condition name\n    = help: was set with `--cfg` but isn't in the `--check-cfg` expected names\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:35:10\n+  --> $DIR/mix.rs:39:10\n    |\n LL |     cfg!(widnows);\n-   |          ^^^^^^^ help: did you mean: `windows`\n+   |          ^^^^^^^ help: there is a config with a similar name: `windows`\n \n warning: unexpected `cfg` condition value\n-  --> $DIR/mix.rs:38:10\n+  --> $DIR/mix.rs:42:10\n    |\n LL |     cfg!(feature = \"bar\");\n    |          ^^^^^^^^^^^^^^^\n    |\n-   = note: expected values for `feature` are: foo\n+   = note: expected values for `feature` are: `foo`\n \n warning: unexpected `cfg` condition value\n-  --> $DIR/mix.rs:40:10\n+  --> $DIR/mix.rs:44:10\n    |\n LL |     cfg!(feature = \"zebra\");\n    |          ^^^^^^^^^^^^^^^^^\n    |\n-   = note: expected values for `feature` are: foo\n+   = note: expected values for `feature` are: `foo`\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:42:10\n+  --> $DIR/mix.rs:46:10\n    |\n LL |     cfg!(xxx = \"foo\");\n    |          ^^^^^^^^^^^\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:44:10\n+  --> $DIR/mix.rs:48:10\n    |\n LL |     cfg!(xxx);\n    |          ^^^\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:46:14\n+  --> $DIR/mix.rs:50:14\n    |\n LL |     cfg!(any(xxx, windows));\n    |              ^^^\n \n warning: unexpected `cfg` condition value\n-  --> $DIR/mix.rs:48:14\n+  --> $DIR/mix.rs:52:14\n    |\n LL |     cfg!(any(feature = \"bad\", windows));\n    |              ^^^^^^^^^^^^^^^\n    |\n-   = note: expected values for `feature` are: foo\n+   = note: expected values for `feature` are: `foo`\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:50:23\n+  --> $DIR/mix.rs:54:23\n    |\n LL |     cfg!(any(windows, xxx));\n    |                       ^^^\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:52:20\n+  --> $DIR/mix.rs:56:20\n    |\n LL |     cfg!(all(unix, xxx));\n    |                    ^^^\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:54:14\n+  --> $DIR/mix.rs:58:14\n    |\n LL |     cfg!(all(aa, bb));\n    |              ^^\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:54:18\n+  --> $DIR/mix.rs:58:18\n    |\n LL |     cfg!(all(aa, bb));\n    |                  ^^\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:57:14\n+  --> $DIR/mix.rs:61:14\n    |\n LL |     cfg!(any(aa, bb));\n    |              ^^\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:57:18\n+  --> $DIR/mix.rs:61:18\n    |\n LL |     cfg!(any(aa, bb));\n    |                  ^^\n \n warning: unexpected `cfg` condition value\n-  --> $DIR/mix.rs:60:20\n+  --> $DIR/mix.rs:64:20\n    |\n LL |     cfg!(any(unix, feature = \"zebra\"));\n    |                    ^^^^^^^^^^^^^^^^^\n    |\n-   = note: expected values for `feature` are: foo\n+   = note: expected values for `feature` are: `foo`\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:62:14\n+  --> $DIR/mix.rs:66:14\n    |\n LL |     cfg!(any(xxx, feature = \"zebra\"));\n    |              ^^^\n \n warning: unexpected `cfg` condition value\n-  --> $DIR/mix.rs:62:19\n+  --> $DIR/mix.rs:66:19\n    |\n LL |     cfg!(any(xxx, feature = \"zebra\"));\n    |                   ^^^^^^^^^^^^^^^^^\n    |\n-   = note: expected values for `feature` are: foo\n+   = note: expected values for `feature` are: `foo`\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:65:14\n+  --> $DIR/mix.rs:69:14\n    |\n LL |     cfg!(any(xxx, unix, xxx));\n    |              ^^^\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:65:25\n+  --> $DIR/mix.rs:69:25\n    |\n LL |     cfg!(any(xxx, unix, xxx));\n    |                         ^^^\n \n warning: unexpected `cfg` condition value\n-  --> $DIR/mix.rs:68:14\n+  --> $DIR/mix.rs:72:14\n    |\n LL |     cfg!(all(feature = \"zebra\", feature = \"zebra\", feature = \"zebra\"));\n    |              ^^^^^^^^^^^^^^^^^\n    |\n-   = note: expected values for `feature` are: foo\n+   = note: expected values for `feature` are: `foo`\n \n warning: unexpected `cfg` condition value\n-  --> $DIR/mix.rs:68:33\n+  --> $DIR/mix.rs:72:33\n    |\n LL |     cfg!(all(feature = \"zebra\", feature = \"zebra\", feature = \"zebra\"));\n    |                                 ^^^^^^^^^^^^^^^^^\n    |\n-   = note: expected values for `feature` are: foo\n+   = note: expected values for `feature` are: `foo`\n \n warning: unexpected `cfg` condition value\n-  --> $DIR/mix.rs:68:52\n+  --> $DIR/mix.rs:72:52\n    |\n LL |     cfg!(all(feature = \"zebra\", feature = \"zebra\", feature = \"zebra\"));\n    |                                                    ^^^^^^^^^^^^^^^^^\n    |\n-   = note: expected values for `feature` are: foo\n+   = note: expected values for `feature` are: `foo`\n \n-warning: 27 warnings emitted\n+warning: 28 warnings emitted\n "}, {"sha": "ffa87dc58f20393d42aa1801884c5754834bd798", "filename": "tests/ui/check-cfg/no-values.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ded0a9e15fdbed1110a26712b91b8ef40588bf09/tests%2Fui%2Fcheck-cfg%2Fno-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded0a9e15fdbed1110a26712b91b8ef40588bf09/tests%2Fui%2Fcheck-cfg%2Fno-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcheck-cfg%2Fno-values.stderr?ref=ded0a9e15fdbed1110a26712b91b8ef40588bf09", "patch": "@@ -2,7 +2,9 @@ warning: unexpected `cfg` condition value\n   --> $DIR/no-values.rs:6:7\n    |\n LL | #[cfg(feature = \"foo\")]\n-   |       ^^^^^^^^^^^^^^^\n+   |       ^^^^^^^--------\n+   |              |\n+   |              help: remove the value\n    |\n    = note: no expected value for `feature`\n    = note: `#[warn(unexpected_cfgs)]` on by default"}, {"sha": "eb81535e3edb054af30f42d22470a4f117de906e", "filename": "tests/ui/check-cfg/values-target-json.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ded0a9e15fdbed1110a26712b91b8ef40588bf09/tests%2Fui%2Fcheck-cfg%2Fvalues-target-json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded0a9e15fdbed1110a26712b91b8ef40588bf09/tests%2Fui%2Fcheck-cfg%2Fvalues-target-json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcheck-cfg%2Fvalues-target-json.stderr?ref=ded0a9e15fdbed1110a26712b91b8ef40588bf09", "patch": "@@ -4,9 +4,9 @@ warning: unexpected `cfg` condition value\n LL | #[cfg(target_os = \"linuz\")]\n    |       ^^^^^^^^^^^^-------\n    |                   |\n-   |                   help: did you mean: `\"linux\"`\n+   |                   help: there is a expected value with a similar name: `\"linux\"`\n    |\n-   = note: expected values for `target_os` are: aix, android, cuda, dragonfly, emscripten, ericos, espidf, freebsd, fuchsia, haiku, hermit, horizon, illumos, ios, l4re, linux, macos, netbsd, none, nto, openbsd, psp, redox, solaris, solid_asp3, tvos, uefi, unknown, vita, vxworks, wasi, watchos, windows, xous\n+   = note: expected values for `target_os` are: `aix`, `android`, `cuda`, `dragonfly`, `emscripten`, `ericos`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `illumos`, `ios`, `l4re`, `linux`, `macos`, `netbsd`, `none`, `nto`, `openbsd`, `psp`, `redox`, `solaris`, `solid_asp3`, `tvos`, `uefi`, `unknown`, `vita`, `vxworks`, `wasi`, `watchos`, `windows`, `xous`\n    = note: `#[warn(unexpected_cfgs)]` on by default\n \n warning: 1 warning emitted"}, {"sha": "34c5d6172d94d68887accf9ebb59c820a9b057a3", "filename": "tests/ui/check-cfg/well-known-names.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ded0a9e15fdbed1110a26712b91b8ef40588bf09/tests%2Fui%2Fcheck-cfg%2Fwell-known-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded0a9e15fdbed1110a26712b91b8ef40588bf09/tests%2Fui%2Fcheck-cfg%2Fwell-known-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcheck-cfg%2Fwell-known-names.stderr?ref=ded0a9e15fdbed1110a26712b91b8ef40588bf09", "patch": "@@ -4,7 +4,7 @@ warning: unexpected `cfg` condition name\n LL | #[cfg(target_oz = \"linux\")]\n    |       ---------^^^^^^^^^^\n    |       |\n-   |       help: did you mean: `target_os`\n+   |       help: there is a config with a similar name: `target_os`\n    |\n    = note: `#[warn(unexpected_cfgs)]` on by default\n \n@@ -14,13 +14,13 @@ warning: unexpected `cfg` condition name\n LL | #[cfg(features = \"foo\")]\n    |       --------^^^^^^^^\n    |       |\n-   |       help: did you mean: `feature`\n+   |       help: there is a config with a similar name: `feature`\n \n warning: unexpected `cfg` condition name\n   --> $DIR/well-known-names.rs:20:7\n    |\n LL | #[cfg(uniw)]\n-   |       ^^^^ help: did you mean: `unix`\n+   |       ^^^^ help: there is a config with a similar name: `unix`\n \n warning: 3 warnings emitted\n "}, {"sha": "2d18cb82e037a25cd28497d9568efc5007d28432", "filename": "tests/ui/check-cfg/well-known-values.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ded0a9e15fdbed1110a26712b91b8ef40588bf09/tests%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded0a9e15fdbed1110a26712b91b8ef40588bf09/tests%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr?ref=ded0a9e15fdbed1110a26712b91b8ef40588bf09", "patch": "@@ -4,9 +4,9 @@ warning: unexpected `cfg` condition value\n LL | #[cfg(target_os = \"linuz\")]\n    |       ^^^^^^^^^^^^-------\n    |                   |\n-   |                   help: did you mean: `\"linux\"`\n+   |                   help: there is a expected value with a similar name: `\"linux\"`\n    |\n-   = note: expected values for `target_os` are: aix, android, cuda, dragonfly, emscripten, espidf, freebsd, fuchsia, haiku, hermit, horizon, illumos, ios, l4re, linux, macos, netbsd, none, nto, openbsd, psp, redox, solaris, solid_asp3, tvos, uefi, unknown, vita, vxworks, wasi, watchos, windows, xous\n+   = note: expected values for `target_os` are: `aix`, `android`, `cuda`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `illumos`, `ios`, `l4re`, `linux`, `macos`, `netbsd`, `none`, `nto`, `openbsd`, `psp`, `redox`, `solaris`, `solid_asp3`, `tvos`, `uefi`, `unknown`, `vita`, `vxworks`, `wasi`, `watchos`, `windows`, `xous`\n    = note: `#[warn(unexpected_cfgs)]` on by default\n \n warning: unexpected `cfg` condition value\n@@ -15,9 +15,9 @@ warning: unexpected `cfg` condition value\n LL | #[cfg(target_has_atomic = \"0\")]\n    |       ^^^^^^^^^^^^^^^^^^^^---\n    |                           |\n-   |                           help: did you mean: `\"8\"`\n+   |                           help: there is a expected value with a similar name: `\"8\"`\n    |\n-   = note: expected values for `target_has_atomic` are: 128, 16, 32, 64, 8, ptr\n+   = note: expected values for `target_has_atomic` are: (none), `128`, `16`, `32`, `64`, `8`, `ptr`\n \n warning: unexpected `cfg` condition value\n   --> $DIR/well-known-values.rs:21:7"}]}