{"sha": "2cdeb7363a85081803fca184bb603b8e6a61def3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZGViNzM2M2E4NTA4MTgwM2ZjYTE4NGJiNjAzYjhlNmE2MWRlZjM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-31T12:53:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-31T12:53:51Z"}, "message": "Merge #3786\n\n3786: When adding match arm, don't let the floating comma r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "59d1a0da950bdf4fb33f48871ccf7c8d0fc3561b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59d1a0da950bdf4fb33f48871ccf7c8d0fc3561b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cdeb7363a85081803fca184bb603b8e6a61def3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJegz1fCRBK7hj4Ov3rIwAAdHIIALBjFnwRUz7kF05u/ECNFjJu\nTjCIMrCoQ7dxdg3pCFEHGIAdKAqzX0yIiE/MJ8nnNAHEae+n+ftEY/u6RW3RPBtT\n5fUeNQobbLjv+d44MiA4KqqM0MyTZd2/qE6aZKIsTGNrUVOT1ruaeXC1/LAEFFHb\nB/cjYY+R5sFsTJm7EN2Z2blhC000S791gaIeXHiL7XbPzsVaTNhp8OX3YWU8RIYs\n7plncI5W4CgDb8r9F/oow2QiGELya/zgSPp5I21oNrjPOAzE6HRkQCFazgmW/dag\nIu9DMyWtQcaiZAfwTKonnWna/kntbI7KjZmMU6I51atdnHc5rhEmDhMe5Ie9CJk=\n=lHfe\n-----END PGP SIGNATURE-----\n", "payload": "tree 59d1a0da950bdf4fb33f48871ccf7c8d0fc3561b\nparent d63bb8565e129f51fadf6a036683b1eedefb78dd\nparent 2fe6e23138d990a852a59d9680847cb6718565bb\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1585659231 +0000\ncommitter GitHub <noreply@github.com> 1585659231 +0000\n\nMerge #3786\n\n3786: When adding match arm, don't let the floating comma r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cdeb7363a85081803fca184bb603b8e6a61def3", "html_url": "https://github.com/rust-lang/rust/commit/2cdeb7363a85081803fca184bb603b8e6a61def3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cdeb7363a85081803fca184bb603b8e6a61def3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d63bb8565e129f51fadf6a036683b1eedefb78dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d63bb8565e129f51fadf6a036683b1eedefb78dd", "html_url": "https://github.com/rust-lang/rust/commit/d63bb8565e129f51fadf6a036683b1eedefb78dd"}, {"sha": "2fe6e23138d990a852a59d9680847cb6718565bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fe6e23138d990a852a59d9680847cb6718565bb", "html_url": "https://github.com/rust-lang/rust/commit/2fe6e23138d990a852a59d9680847cb6718565bb"}], "stats": {"total": 59, "additions": 45, "deletions": 14}, "files": [{"sha": "8d1af99336f0f181916882a0b94f246e846eff82", "filename": "crates/ra_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2cdeb7363a85081803fca184bb603b8e6a61def3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdeb7363a85081803fca184bb603b8e6a61def3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=2cdeb7363a85081803fca184bb603b8e6a61def3", "patch": "@@ -1,15 +1,11 @@\n-//! FIXME: write short doc here\n-\n use std::iter;\n \n use hir::{Adt, HasSource, ModuleDef, Semantics};\n use itertools::Itertools;\n use ra_ide_db::RootDatabase;\n+use ra_syntax::ast::{self, make, AstNode, MatchArm, NameOwner, Pat};\n \n use crate::{Assist, AssistCtx, AssistId};\n-use ra_syntax::ast::{self, make, AstNode, NameOwner};\n-\n-use ast::{MatchArm, Pat};\n \n // Assist: fill_match_arms\n //\n@@ -717,4 +713,28 @@ mod tests {\n             \"#,\n         );\n     }\n+\n+    #[test]\n+    fn fill_match_arms_placeholder() {\n+        check_assist(\n+            fill_match_arms,\n+            r#\"\n+            enum A { One, Two, }\n+            fn foo(a: A) {\n+                match a<|> {\n+                    _ => (),\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            enum A { One, Two, }\n+            fn foo(a: A) {\n+                match <|>a {\n+                    A::One => {}\n+                    A::Two => {}\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n }"}, {"sha": "b69cae234cf2e0f5e01e5e7392770eb88a43ead7", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2cdeb7363a85081803fca184bb603b8e6a61def3/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdeb7363a85081803fca184bb603b8e6a61def3/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=2cdeb7363a85081803fca184bb603b8e6a61def3", "patch": "@@ -369,21 +369,32 @@ impl ast::MatchArmList {\n \n     #[must_use]\n     pub fn remove_placeholder(&self) -> ast::MatchArmList {\n-        let placeholder = self.arms().find(|arm| {\n-            if let Some(ast::Pat::PlaceholderPat(_)) = arm.pat() {\n-                return true;\n-            }\n-            false\n-        });\n+        let placeholder =\n+            self.arms().find(|arm| matches!(arm.pat(), Some(ast::Pat::PlaceholderPat(_))));\n         if let Some(placeholder) = placeholder {\n-            let s: SyntaxElement = placeholder.syntax().clone().into();\n-            let e = s.clone();\n-            self.replace_children(s..=e, &mut iter::empty())\n+            self.remove_arm(&placeholder)\n         } else {\n             self.clone()\n         }\n     }\n \n+    #[must_use]\n+    fn remove_arm(&self, arm: &ast::MatchArm) -> ast::MatchArmList {\n+        let start = arm.syntax().clone();\n+        let end = if let Some(comma) = start\n+            .siblings_with_tokens(Direction::Next)\n+            .skip(1)\n+            .skip_while(|it| it.kind().is_trivia())\n+            .next()\n+            .filter(|it| it.kind() == T![,])\n+        {\n+            comma\n+        } else {\n+            start.clone().into()\n+        };\n+        self.replace_children(start.into()..=end, None)\n+    }\n+\n     #[must_use]\n     pub fn append_arm(&self, item: ast::MatchArm) -> ast::MatchArmList {\n         let r_curly = match self.syntax().children_with_tokens().find(|it| it.kind() == T!['}']) {"}]}