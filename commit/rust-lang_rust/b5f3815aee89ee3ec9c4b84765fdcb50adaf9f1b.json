{"sha": "b5f3815aee89ee3ec9c4b84765fdcb50adaf9f1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZjM4MTVhZWU4OWVlM2VjOWM0Yjg0NzY1ZmRjYjUwYWRhZjlmMWI=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-04-06T15:37:41Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-04-06T18:42:27Z"}, "message": "Small grammar fixes", "tree": {"sha": "6745b206f6d21dd9c975d5841e019ad0f14ca0fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6745b206f6d21dd9c975d5841e019ad0f14ca0fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5f3815aee89ee3ec9c4b84765fdcb50adaf9f1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5f3815aee89ee3ec9c4b84765fdcb50adaf9f1b", "html_url": "https://github.com/rust-lang/rust/commit/b5f3815aee89ee3ec9c4b84765fdcb50adaf9f1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5f3815aee89ee3ec9c4b84765fdcb50adaf9f1b/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5bedf8d6d448e6455bebf6b79f906b560ca20f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5bedf8d6d448e6455bebf6b79f906b560ca20f6", "html_url": "https://github.com/rust-lang/rust/commit/d5bedf8d6d448e6455bebf6b79f906b560ca20f6"}], "stats": {"total": 43, "additions": 22, "deletions": 21}, "files": [{"sha": "8a12381ab7c8e251bd7456d0682113dbae18c480", "filename": "docs/dev/architecture.md", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b5f3815aee89ee3ec9c4b84765fdcb50adaf9f1b/docs%2Fdev%2Farchitecture.md", "raw_url": "https://github.com/rust-lang/rust/raw/b5f3815aee89ee3ec9c4b84765fdcb50adaf9f1b/docs%2Fdev%2Farchitecture.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Farchitecture.md?ref=b5f3815aee89ee3ec9c4b84765fdcb50adaf9f1b", "patch": "@@ -42,7 +42,7 @@ The underlying engine makes sure that model is computed lazily (on-demand) and c\n ## Entry Points\n \n `crates/rust-analyzer/src/bin/main.rs` contains the main function which spawns LSP.\n-This is *the* entry point, but it front-loads a lot of complexity, so its fine to just skim through it.\n+This is *the* entry point, but it front-loads a lot of complexity, so it's fine to just skim through it.\n \n `crates/rust-analyzer/src/handlers.rs` implements all LSP requests and is a great place to start if you are already familiar with LSP.\n \n@@ -67,7 +67,7 @@ They are handled by Rust code in the xtask directory.\n \n VS Code plugin.\n \n-### `libs/`\n+### `lib/`\n \n rust-analyzer independent libraries which we publish to crates.io.\n It's not heavily utilized at the moment.\n@@ -139,7 +139,8 @@ If an AST method returns an `Option`, it *can* be `None` at runtime, even if thi\n ### `crates/base_db`\n \n We use the [salsa](https://github.com/salsa-rs/salsa) crate for incremental and on-demand computation.\n-Roughly, you can think of salsa as a key-value store, but it can also compute derived values using specified functions. The `base_db` crate provides basic infrastructure for interacting with salsa.\n+Roughly, you can think of salsa as a key-value store, but it can also compute derived values using specified functions. \n+The `base_db` crate provides basic infrastructure for interacting with salsa.\n Crucially, it defines most of the \"input\" queries: facts supplied by the client of the analyzer.\n Reading the docs of the `base_db::input` module should be useful: everything else is strictly derived from those inputs.\n \n@@ -221,7 +222,7 @@ Internally, `ide` is split across several crates. `ide_assists`, `ide_completion\n The `ide` contains a public API/fa\u00e7ade, as well as implementation for a plethora of smaller features.\n \n **Architecture Invariant:** `ide` crate strives to provide a _perfect_ API.\n-Although at the moment it has only one consumer, the LSP server, LSP *does not* influence it's API design.\n+Although at the moment it has only one consumer, the LSP server, LSP *does not* influence its API design.\n Instead, we keep in mind a hypothetical _ideal_ client -- an IDE tailored specifically for rust, every nook and cranny of which is packed with Rust-specific goodies.\n \n ### `crates/rust-analyzer`\n@@ -307,7 +308,7 @@ This sections talks about the things which are everywhere and nowhere in particu\n \n ### Code generation\n \n-Some of the components of this repository are generated through automatic processes.\n+Some ]components in this repository are generated through automatic processes.\n Generated code is updated automatically on `cargo test`.\n Generated code is generally committed to the git repository.\n "}, {"sha": "a46121bb2ed15fbd4a91a78588ebdddeafbf6d01", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b5f3815aee89ee3ec9c4b84765fdcb50adaf9f1b/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/b5f3815aee89ee3ec9c4b84765fdcb50adaf9f1b/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=b5f3815aee89ee3ec9c4b84765fdcb50adaf9f1b", "patch": "@@ -51,8 +51,8 @@ interface SnippetTextEdit extends TextEdit {\n \n ```typescript\n export interface TextDocumentEdit {\n-\ttextDocument: OptionalVersionedTextDocumentIdentifier;\n-\tedits: (TextEdit | SnippetTextEdit)[];\n+    textDocument: OptionalVersionedTextDocumentIdentifier;\n+    edits: (TextEdit | SnippetTextEdit)[];\n }\n ```\n \n@@ -145,9 +145,9 @@ mod foo;\n ### Unresolved Question\n \n * An alternative would be to use a more general \"gotoSuper\" request, which would work for super methods, super classes and super modules.\n-  This is the approach IntelliJ Rust is takeing.\n+  This is the approach IntelliJ Rust is taking.\n   However, experience shows that super module (which generally has a feeling of navigation between files) should be separate.\n-  If you want super module, but the cursor happens to be inside an overriden function, the behavior with single \"gotoSuper\" request is surprising.\n+  If you want super module, but the cursor happens to be inside an overridden function, the behavior with single \"gotoSuper\" request is surprising.\n \n ## Join Lines\n \n@@ -193,7 +193,7 @@ fn main() {\n ### Unresolved Question\n \n * What is the position of the cursor after `joinLines`?\n-  Currently this is left to editor's discretion, but it might be useful to specify on the server via snippets.\n+  Currently, this is left to editor's discretion, but it might be useful to specify on the server via snippets.\n   However, it then becomes unclear how it works with multi cursor.\n \n ## On Enter\n@@ -330,7 +330,7 @@ Moreover, it would be cool if editors didn't need to implement even basic langua\n \n ### Unresolved Question\n \n-* Should we return a a nested brace structure, to allow paredit-like actions of jump *out* of the current brace pair?\n+* Should we return a nested brace structure, to allow paredit-like actions of jump *out* of the current brace pair?\n   This is how `SelectionRange` request works.\n * Alternatively, should we perhaps flag certain `SelectionRange`s as being brace pairs?\n \n@@ -511,7 +511,7 @@ Expands macro call at a given position.\n This request is sent from client to server to render \"inlay hints\" -- virtual text inserted into editor to show things like inferred types.\n Generally, the client should re-query inlay hints after every modification.\n Note that we plan to move this request to `experimental/inlayHints`, as it is not really Rust-specific, but the current API is not necessary the right one.\n-Upstream issue: https://github.com/microsoft/language-server-protocol/issues/956\n+Upstream issues: https://github.com/microsoft/language-server-protocol/issues/956 , https://github.com/rust-analyzer/rust-analyzer/issues/2797\n \n **Request:**\n "}, {"sha": "468dedff20db9a33e2a12e66132cfb1c68ee74a0", "filename": "docs/dev/style.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b5f3815aee89ee3ec9c4b84765fdcb50adaf9f1b/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/b5f3815aee89ee3ec9c4b84765fdcb50adaf9f1b/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=b5f3815aee89ee3ec9c4b84765fdcb50adaf9f1b", "patch": "@@ -53,9 +53,9 @@ https://www.tedinski.com/2018/02/06/system-boundaries.html\n ## Crates.io Dependencies\n \n We try to be very conservative with usage of crates.io dependencies.\n-Don't use small \"helper\" crates (exception: `itertools` is allowed).\n+Don't use small \"helper\" crates (exception: `itertools` and `either` are allowed).\n If there's some general reusable bit of code you need, consider adding it to the `stdx` crate.\n-A useful exercise is to read Cargo.lock and see if some of the *transitive* dependencies do not make sense for rust-analyzer.\n+A useful exercise is to read Cargo.lock and see if some *transitive* dependencies do not make sense for rust-analyzer.\n \n **Rationale:** keep compile times low, create ecosystem pressure for faster compiles, reduce the number of things which might break.\n \n@@ -330,7 +330,7 @@ When implementing `do_thing`, it might be very useful to create a context object\n \n ```rust\n pub fn do_thing(arg1: Arg1, arg2: Arg2) -> Res {\n-    let mut ctx = Ctx { arg1, arg2 }\n+    let mut ctx = Ctx { arg1, arg2 };\n     ctx.run()\n }\n \n@@ -586,7 +586,7 @@ use super::{}\n \n **Rationale:** consistency.\n Reading order is important for new contributors.\n-Grouping by crate allows to spot unwanted dependencies easier.\n+Grouping by crate allows spotting unwanted dependencies easier.\n \n ## Import Style\n \n@@ -779,7 +779,7 @@ assert!(x < y);\n assert!(x > 0);\n \n // BAD\n-assert!(x >= lo && x <= hi>);\n+assert!(x >= lo && x <= hi);\n assert!(r1 < l2 || l1 > r2);\n assert!(y > x);\n assert!(0 > x);"}, {"sha": "f7a0c09fc1ed51d2ab59feb42a83cca7f3ae8cfb", "filename": "docs/dev/syntax.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b5f3815aee89ee3ec9c4b84765fdcb50adaf9f1b/docs%2Fdev%2Fsyntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/b5f3815aee89ee3ec9c4b84765fdcb50adaf9f1b/docs%2Fdev%2Fsyntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fsyntax.md?ref=b5f3815aee89ee3ec9c4b84765fdcb50adaf9f1b", "patch": "@@ -145,7 +145,7 @@ Another alternative (used by swift and roslyn) is to explicitly divide the set o\n \n ```rust\n struct Token {\n-    kind: NonTriviaTokenKind\n+    kind: NonTriviaTokenKind,\n     text: String,\n     leading_trivia: Vec<TriviaToken>,\n     trailing_trivia: Vec<TriviaToken>,\n@@ -240,7 +240,7 @@ impl SyntaxNode {\n             let child_offset = offset;\n             offset += green_child.text_len;\n             Arc::new(SyntaxData {\n-                offset: child_offset;\n+                offset: child_offset,\n                 parent: Some(Arc::clone(self)),\n                 green: Arc::clone(green_child),\n             })\n@@ -249,7 +249,7 @@ impl SyntaxNode {\n }\n \n impl PartialEq for SyntaxNode {\n-    fn eq(&self, other: &SyntaxNode) {\n+    fn eq(&self, other: &SyntaxNode) -> bool {\n         self.offset == other.offset\n             && Arc::ptr_eq(&self.green, &other.green)\n     }\n@@ -273,7 +273,7 @@ This is OK because trees traversals mostly (always, in case of rust-analyzer) ru\n The other thread can restore the `SyntaxNode` by traversing from the root green node and looking for a node with specified range.\n You can also use the similar trick to store a `SyntaxNode`.\n That is, a data structure that holds a `(GreenNode, Range<usize>)` will be `Sync`.\n-However rust-analyzer goes even further.\n+However, rust-analyzer goes even further.\n It treats trees as semi-transient and instead of storing a `GreenNode`, it generally stores just the id of the file from which the tree originated: `(FileId, Range<usize>)`.\n The `SyntaxNode` is the restored by reparsing the file and traversing it from root.\n With this trick, rust-analyzer holds only a small amount of trees in memory at the same time, which reduces memory usage."}]}