{"sha": "8a5057af2e19bea374600669fee49af1ccf89d08", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNTA1N2FmMmUxOWJlYTM3NDYwMDY2OWZlZTQ5YWYxY2NmODlkMDg=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-12-17T07:44:29Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-12-30T20:02:21Z"}, "message": "std::iter: Add partition and unzip methods to iterators", "tree": {"sha": "81c2be7c645ee0fa98cfed1fcadd20011504d2e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81c2be7c645ee0fa98cfed1fcadd20011504d2e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a5057af2e19bea374600669fee49af1ccf89d08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a5057af2e19bea374600669fee49af1ccf89d08", "html_url": "https://github.com/rust-lang/rust/commit/8a5057af2e19bea374600669fee49af1ccf89d08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a5057af2e19bea374600669fee49af1ccf89d08/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84f5ad8679c7fc454473ffbf389030f3e5fee379", "url": "https://api.github.com/repos/rust-lang/rust/commits/84f5ad8679c7fc454473ffbf389030f3e5fee379", "html_url": "https://github.com/rust-lang/rust/commit/84f5ad8679c7fc454473ffbf389030f3e5fee379"}], "stats": {"total": 95, "additions": 78, "deletions": 17}, "files": [{"sha": "028d2ce1cbbb793c796bd2c58e8a185ed3a83c84", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 76, "deletions": 15, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/8a5057af2e19bea374600669fee49af1ccf89d08/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5057af2e19bea374600669fee49af1ccf89d08/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=8a5057af2e19bea374600669fee49af1ccf89d08", "patch": "@@ -59,6 +59,7 @@ pub use self::MinMaxResult::*;\n use clone::Clone;\n use cmp;\n use cmp::Ord;\n+use default::Default;\n use mem;\n use num::{ToPrimitive, Int};\n use ops::{Add, Deref, FnMut};\n@@ -68,20 +69,6 @@ use uint;\n \n #[deprecated = \"renamed to Extend\"] pub use self::Extend as Extendable;\n \n-/// Conversion from an `Iterator`\n-#[unstable = \"may be replaced by a more general conversion trait\"]\n-pub trait FromIterator<A> {\n-    /// Build a container with elements from an external iterator.\n-    fn from_iter<T: Iterator<A>>(iterator: T) -> Self;\n-}\n-\n-/// A type growable from an `Iterator` implementation\n-#[unstable = \"just renamed as part of collections reform\"]\n-pub trait Extend<A> {\n-    /// Extend a container with the elements yielded by an arbitrary iterator\n-    fn extend<T: Iterator<A>>(&mut self, iterator: T);\n-}\n-\n /// An interface for dealing with \"external iterators\". These types of iterators\n /// can be resumed at any time as all state is stored internally as opposed to\n /// being located on the call stack.\n@@ -106,6 +93,20 @@ pub trait Iterator<A> {\n     fn size_hint(&self) -> (uint, Option<uint>) { (0, None) }\n }\n \n+/// Conversion from an `Iterator`\n+#[unstable = \"may be replaced by a more general conversion trait\"]\n+pub trait FromIterator<A> {\n+    /// Build a container with elements from an external iterator.\n+    fn from_iter<T: Iterator<A>>(iterator: T) -> Self;\n+}\n+\n+/// A type growable from an `Iterator` implementation\n+#[unstable = \"just renamed as part of collections reform\"]\n+pub trait Extend<A> {\n+    /// Extend a container with the elements yielded by an arbitrary iterator\n+    fn extend<T: Iterator<A>>(&mut self, iterator: T);\n+}\n+\n #[unstable = \"new convention for extension traits\"]\n /// An extension trait providing numerous methods applicable to all iterators.\n pub trait IteratorExt<A>: Iterator<A> {\n@@ -223,7 +224,6 @@ pub trait IteratorExt<A>: Iterator<A> {\n         Enumerate{iter: self, count: 0}\n     }\n \n-\n     /// Creates an iterator that has a `.peek()` method\n     /// that returns an optional reference to the next element.\n     ///\n@@ -471,6 +471,35 @@ pub trait IteratorExt<A>: Iterator<A> {\n         FromIterator::from_iter(self)\n     }\n \n+    /// Loops through the entire iterator, collecting all of the elements into\n+    /// one of two containers, depending on a predicate. The elements of the\n+    /// first container satisfy the predicate, while the elements of the second\n+    /// do not.\n+    ///\n+    /// ```\n+    /// let vec = vec![1i, 2i, 3i, 4i];\n+    /// let (even, odd): (Vec<int>, Vec<Int>) = vec.into_iter().partition(|&n| n % 2 == 0);\n+    /// assert_eq!(even, vec![2, 4]);\n+    /// assert_eq!(odd, vec![1, 3]);\n+    /// ```\n+    #[unstable = \"recently added as part of collections reform\"]\n+    fn partition<B, F>(mut self, mut f: F) -> (B, B) where\n+        B: Default + Extend<A>, F: FnMut(&A) -> bool\n+    {\n+        let mut left: B = Default::default();\n+        let mut right: B = Default::default();\n+\n+        for x in self {\n+            if f(&x) {\n+                left.extend(Some(x).into_iter())\n+            } else {\n+                right.extend(Some(x).into_iter())\n+            }\n+        }\n+\n+        (left, right)\n+    }\n+\n     /// Loops through `n` iterations, returning the `n`th element of the\n     /// iterator.\n     ///\n@@ -661,6 +690,38 @@ pub trait IteratorExt<A>: Iterator<A> {\n #[unstable = \"trait is unstable\"]\n impl<A, I> IteratorExt<A> for I where I: Iterator<A> {}\n \n+/// Extention trait for iterators of pairs.\n+pub trait IteratorPairExt<A, B>: Iterator<(A, B)> {\n+    /// Converts an iterator of pairs into a pair of containers.\n+    ///\n+    /// Loops through the entire iterator, collecting the first component of\n+    /// each item into one new container, and the second component into another.\n+    fn unzip<FromA, FromB>(mut self) -> (FromA, FromB) where\n+        FromA: FromIterator<A> + Extend<A>, FromB: FromIterator<B> + Extend<B>\n+    {\n+        struct SizeHint<A>(uint, Option<uint>);\n+        impl<A> Iterator<A> for SizeHint<A> {\n+            fn next(&mut self) -> Option<A> { None }\n+            fn size_hint(&self) -> (uint, Option<uint>) {\n+                (self.0, self.1)\n+            }\n+        }\n+\n+        let (lo, hi) = self.size_hint();\n+        let mut ts: FromA = FromIterator::from_iter(SizeHint(lo, hi));\n+        let mut us: FromB = FromIterator::from_iter(SizeHint(lo, hi));\n+\n+        for (t, u) in self {\n+            ts.extend(Some(t).into_iter());\n+            us.extend(Some(u).into_iter());\n+        }\n+\n+        (ts, us)\n+    }\n+}\n+\n+impl<A, B, I> IteratorPairExt<A, B> for I where I: Iterator<(A, B)> {}\n+\n /// A range iterator able to yield elements from both ends\n ///\n /// A `DoubleEndedIterator` can be thought of as a deque in that `next()` and `next_back()` exhaust"}, {"sha": "cecb49381538035f4c309205994f5e193e082129", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a5057af2e19bea374600669fee49af1ccf89d08/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5057af2e19bea374600669fee49af1ccf89d08/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=8a5057af2e19bea374600669fee49af1ccf89d08", "patch": "@@ -52,7 +52,7 @@ pub use cmp::{Ordering, Equiv};\n pub use cmp::Ordering::{Less, Equal, Greater};\n pub use iter::{FromIterator, Extend, IteratorExt};\n pub use iter::{Iterator, DoubleEndedIterator, DoubleEndedIteratorExt, RandomAccessIterator};\n-pub use iter::{IteratorCloneExt, CloneIteratorExt};\n+pub use iter::{IteratorCloneExt, CloneIteratorExt, IteratorPairExt};\n pub use iter::{IteratorOrdExt, MutableDoubleEndedIterator, ExactSizeIterator};\n pub use num::{ToPrimitive, FromPrimitive};\n pub use option::Option;"}, {"sha": "11eb569e5b53a3bd2e6a9a92f27402c4a3f8a12b", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a5057af2e19bea374600669fee49af1ccf89d08/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5057af2e19bea374600669fee49af1ccf89d08/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=8a5057af2e19bea374600669fee49af1ccf89d08", "patch": "@@ -66,7 +66,7 @@\n #[doc(no_inline)] pub use iter::{FromIterator, Extend, ExactSizeIterator};\n #[doc(no_inline)] pub use iter::{Iterator, IteratorExt, DoubleEndedIterator};\n #[doc(no_inline)] pub use iter::{DoubleEndedIteratorExt, CloneIteratorExt};\n-#[doc(no_inline)] pub use iter::{RandomAccessIterator, IteratorCloneExt};\n+#[doc(no_inline)] pub use iter::{RandomAccessIterator, IteratorCloneExt, IteratorPairExt};\n #[doc(no_inline)] pub use iter::{IteratorOrdExt, MutableDoubleEndedIterator};\n #[doc(no_inline)] pub use num::{ToPrimitive, FromPrimitive};\n #[doc(no_inline)] pub use boxed::Box;"}]}