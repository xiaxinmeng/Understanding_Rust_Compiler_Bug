{"sha": "4fc900deb121539a5311059e1ebb83ef73b190df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYzkwMGRlYjEyMTUzOWE1MzExMDU5ZTFlYmI4M2VmNzNiMTkwZGY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-22T09:57:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-22T10:13:51Z"}, "message": "Move TypeAlias to hir_def", "tree": {"sha": "3dab5ec4164b9af8d9f921648ce495f8cd607986", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dab5ec4164b9af8d9f921648ce495f8cd607986"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fc900deb121539a5311059e1ebb83ef73b190df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fc900deb121539a5311059e1ebb83ef73b190df", "html_url": "https://github.com/rust-lang/rust/commit/4fc900deb121539a5311059e1ebb83ef73b190df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fc900deb121539a5311059e1ebb83ef73b190df/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d59bf33b9e1c20d6ef3fd9b72f3cf4730172b5a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d59bf33b9e1c20d6ef3fd9b72f3cf4730172b5a8", "html_url": "https://github.com/rust-lang/rust/commit/d59bf33b9e1c20d6ef3fd9b72f3cf4730172b5a8"}], "stats": {"total": 36, "additions": 16, "deletions": 20}, "files": [{"sha": "72c9b466f7dbca462f890580518ce4a34683da0c", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fc900deb121539a5311059e1ebb83ef73b190df/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc900deb121539a5311059e1ebb83ef73b190df/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=4fc900deb121539a5311059e1ebb83ef73b190df", "patch": "@@ -937,15 +937,15 @@ impl TypeAlias {\n     }\n \n     pub fn type_ref(self, db: &impl DefDatabase) -> Option<TypeRef> {\n-        db.type_alias_data(self).type_ref.clone()\n+        db.type_alias_data(self.id).type_ref.clone()\n     }\n \n     pub fn ty(self, db: &impl HirDatabase) -> Ty {\n         db.type_for_def(self.into(), Namespace::Types)\n     }\n \n     pub fn name(self, db: &impl DefDatabase) -> Name {\n-        db.type_alias_data(self).name.clone()\n+        db.type_alias_data(self.id).name.clone()\n     }\n }\n "}, {"sha": "6898743317865b6f9c3496e22f32747925d458b7", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fc900deb121539a5311059e1ebb83ef73b190df/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc900deb121539a5311059e1ebb83ef73b190df/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=4fc900deb121539a5311059e1ebb83ef73b190df", "patch": "@@ -16,16 +16,15 @@ use crate::{\n         CallableDef, FnSig, GenericPredicate, InferenceResult, Namespace, Substs, Ty, TypableDef,\n         TypeCtor,\n     },\n-    type_alias::TypeAliasData,\n     Const, ConstData, Crate, DefWithBody, FnData, Function, GenericDef, ImplBlock, Module, Static,\n-    StructField, Trait, TypeAlias,\n+    StructField, Trait,\n };\n \n pub use hir_def::db::{\n     BodyQuery, BodyWithSourceMapQuery, CrateDefMapQuery, DefDatabase2, DefDatabase2Storage,\n     EnumDataQuery, ExprScopesQuery, GenericParamsQuery, ImplDataQuery, InternDatabase,\n     InternDatabaseStorage, RawItemsQuery, RawItemsWithSourceMapQuery, StructDataQuery,\n-    TraitDataQuery,\n+    TraitDataQuery, TypeAliasDataQuery,\n };\n pub use hir_expand::db::{\n     AstDatabase, AstDatabaseStorage, AstIdMapQuery, MacroArgQuery, MacroDefQuery, MacroExpandQuery,\n@@ -39,9 +38,6 @@ pub trait DefDatabase: HirDebugDatabase + DefDatabase2 {\n     #[salsa::invoke(FnData::fn_data_query)]\n     fn fn_data(&self, func: Function) -> Arc<FnData>;\n \n-    #[salsa::invoke(TypeAliasData::type_alias_data_query)]\n-    fn type_alias_data(&self, typ: TypeAlias) -> Arc<TypeAliasData>;\n-\n     #[salsa::invoke(ConstData::const_data_query)]\n     fn const_data(&self, konst: Const) -> Arc<ConstData>;\n "}, {"sha": "8e532c36c69ead22d5f6385adef293169089d33b", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fc900deb121539a5311059e1ebb83ef73b190df/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc900deb121539a5311059e1ebb83ef73b190df/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=4fc900deb121539a5311059e1ebb83ef73b190df", "patch": "@@ -32,7 +32,6 @@ pub mod db;\n pub mod source_binder;\n \n mod ids;\n-mod type_alias;\n mod ty;\n mod impl_block;\n mod expr;"}, {"sha": "5bbdaa4b20ad28049afafb85847c049138e723be", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fc900deb121539a5311059e1ebb83ef73b190df/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc900deb121539a5311059e1ebb83ef73b190df/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=4fc900deb121539a5311059e1ebb83ef73b190df", "patch": "@@ -15,7 +15,8 @@ use crate::{\n         CrateDefMap,\n     },\n     traits::TraitData,\n-    DefWithBodyId, EnumId, GenericDefId, ImplId, ItemLoc, StructOrUnionId, TraitId,\n+    type_alias::TypeAliasData,\n+    DefWithBodyId, EnumId, GenericDefId, ImplId, ItemLoc, StructOrUnionId, TraitId, TypeAliasId,\n };\n \n #[salsa::query_group(InternDatabaseStorage)]\n@@ -64,6 +65,9 @@ pub trait DefDatabase2: InternDatabase + AstDatabase {\n     #[salsa::invoke(TraitData::trait_data_query)]\n     fn trait_data(&self, e: TraitId) -> Arc<TraitData>;\n \n+    #[salsa::invoke(TypeAliasData::type_alias_data_query)]\n+    fn type_alias_data(&self, e: TypeAliasId) -> Arc<TypeAliasData>;\n+\n     #[salsa::invoke(Body::body_with_source_map_query)]\n     fn body_with_source_map(&self, def: DefWithBodyId) -> (Arc<Body>, Arc<BodySourceMap>);\n "}, {"sha": "26814446296f78298adc927fed8bfba3bf3ed729", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fc900deb121539a5311059e1ebb83ef73b190df/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc900deb121539a5311059e1ebb83ef73b190df/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=4fc900deb121539a5311059e1ebb83ef73b190df", "patch": "@@ -20,6 +20,7 @@ pub mod body;\n pub mod generics;\n pub mod traits;\n pub mod resolver;\n+pub mod type_alias;\n \n #[cfg(test)]\n mod test_db;"}, {"sha": "c0b49aa7cc7e69ade47e86ae334ff53db87ade35", "filename": "crates/ra_hir_def/src/type_alias.rs", "status": "renamed", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4fc900deb121539a5311059e1ebb83ef73b190df/crates%2Fra_hir_def%2Fsrc%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc900deb121539a5311059e1ebb83ef73b190df/crates%2Fra_hir_def%2Fsrc%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftype_alias.rs?ref=4fc900deb121539a5311059e1ebb83ef73b190df", "patch": "@@ -2,28 +2,24 @@\n \n use std::sync::Arc;\n \n-use hir_def::type_ref::TypeRef;\n use hir_expand::name::{AsName, Name};\n \n use ra_syntax::ast::NameOwner;\n \n-use crate::{\n-    db::{AstDatabase, DefDatabase},\n-    HasSource, TypeAlias,\n-};\n+use crate::{db::DefDatabase2, type_ref::TypeRef, HasSource, Lookup, TypeAliasId};\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct TypeAliasData {\n-    pub(crate) name: Name,\n-    pub(crate) type_ref: Option<TypeRef>,\n+    pub name: Name,\n+    pub type_ref: Option<TypeRef>,\n }\n \n impl TypeAliasData {\n     pub(crate) fn type_alias_data_query(\n-        db: &(impl DefDatabase + AstDatabase),\n-        typ: TypeAlias,\n+        db: &impl DefDatabase2,\n+        typ: TypeAliasId,\n     ) -> Arc<TypeAliasData> {\n-        let node = typ.source(db).value;\n+        let node = typ.lookup(db).source(db).value;\n         let name = node.name().map_or_else(Name::missing, |n| n.as_name());\n         let type_ref = node.type_ref().map(TypeRef::from_ast);\n         Arc::new(TypeAliasData { name, type_ref })", "previous_filename": "crates/ra_hir/src/type_alias.rs"}]}