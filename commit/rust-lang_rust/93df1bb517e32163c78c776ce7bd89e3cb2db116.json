{"sha": "93df1bb517e32163c78c776ce7bd89e3cb2db116", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZGYxYmI1MTdlMzIxNjNjNzhjNzc2Y2U3YmQ4OWUzY2IyZGIxMTY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-25T14:57:54Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-25T14:57:54Z"}, "message": "Fix rebase", "tree": {"sha": "c133efc6eca4684d0839bc92ab72f2dc8b8a41e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c133efc6eca4684d0839bc92ab72f2dc8b8a41e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93df1bb517e32163c78c776ce7bd89e3cb2db116", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93df1bb517e32163c78c776ce7bd89e3cb2db116", "html_url": "https://github.com/rust-lang/rust/commit/93df1bb517e32163c78c776ce7bd89e3cb2db116", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93df1bb517e32163c78c776ce7bd89e3cb2db116/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd5adc51fb6989435d39b3f4d484430c6714d762", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd5adc51fb6989435d39b3f4d484430c6714d762", "html_url": "https://github.com/rust-lang/rust/commit/bd5adc51fb6989435d39b3f4d484430c6714d762"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "c1782f53f0d2fb79ca570ce25a74069a544e8df4", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93df1bb517e32163c78c776ce7bd89e3cb2db116/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93df1bb517e32163c78c776ce7bd89e3cb2db116/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=93df1bb517e32163c78c776ce7bd89e3cb2db116", "patch": "@@ -1604,7 +1604,7 @@ impl<'a, 'tcx> ShallowResolver<'a, 'tcx> {\n     // are extremely hot.\n     #[inline(always)]\n     pub fn shallow_resolve_changed(&mut self, typ: Ty<'tcx>) -> bool {\n-        match typ.sty {\n+        match typ.kind {\n             ty::Infer(ty::TyVar(v)) => {\n                 use self::type_variable::TypeVariableValue;\n "}, {"sha": "0683940af985e32173b8d055c3d6c3fb3a7dcf91", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93df1bb517e32163c78c776ce7bd89e3cb2db116/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93df1bb517e32163c78c776ce7bd89e3cb2db116/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=93df1bb517e32163c78c776ce7bd89e3cb2db116", "patch": "@@ -1463,7 +1463,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             ty::Predicate::Trait(ref data) => {\n                 let trait_ref = data.to_poly_trait_ref();\n                 let self_ty = trait_ref.self_ty();\n-                debug!(\"self_ty {:?} {:?} trait_ref {:?}\", self_ty, self_ty.sty, trait_ref);\n+                debug!(\"self_ty {:?} {:?} trait_ref {:?}\", self_ty, self_ty.kind, trait_ref);\n \n                 if predicate.references_error() {\n                     return;"}, {"sha": "d12039de3136e67daa463e0d6c8a2242d743026f", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93df1bb517e32163c78c776ce7bd89e3cb2db116/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93df1bb517e32163c78c776ce7bd89e3cb2db116/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=93df1bb517e32163c78c776ce7bd89e3cb2db116", "patch": "@@ -373,9 +373,9 @@ impl Trait for X {\n                 debug!(\n                     \"note_and_explain_type_err expected={:?} ({:?}) found={:?} ({:?})\",\n                     values.expected,\n-                    values.expected.sty,\n+                    values.expected.kind,\n                     values.found,\n-                    values.found.sty,\n+                    values.found.kind,\n                 );\n             },\n             CyclicTy(ty) => {"}, {"sha": "ca238867421aba7d8c5e4602f0f30425215898ce", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93df1bb517e32163c78c776ce7bd89e3cb2db116/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93df1bb517e32163c78c776ce7bd89e3cb2db116/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=93df1bb517e32163c78c776ce7bd89e3cb2db116", "patch": "@@ -608,7 +608,7 @@ pub fn const_eval_provider<'tcx>(\n     // Catch such calls and evaluate them instead of trying to load a constant's MIR.\n     if let ty::InstanceDef::Intrinsic(def_id) = key.value.instance.def {\n         let ty = key.value.instance.ty(tcx);\n-        let substs = match ty.sty {\n+        let substs = match ty.kind {\n             ty::FnDef(_, substs) => substs,\n             _ => bug!(\"intrinsic with type {:?}\", ty),\n         };"}, {"sha": "550ea0bf2da5ffbf5ef38258b10d64c50b261cb3", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93df1bb517e32163c78c776ce7bd89e3cb2db116/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93df1bb517e32163c78c776ce7bd89e3cb2db116/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=93df1bb517e32163c78c776ce7bd89e3cb2db116", "patch": "@@ -718,10 +718,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // More generally, the expected type wants a tuple variant with one field of an\n         // N-arity-tuple, e.g., `V_i((p_0, .., p_N))`. Meanwhile, the user supplied a pattern\n         // with the subpatterns directly in the tuple variant pattern, e.g., `V_i(p_0, .., p_N)`.\n-        let missing_parenthesis = match expected.sty {\n+        let missing_parenthesis = match expected.kind {\n             ty::Adt(_, substs) if fields.len() == 1 => {\n                 let field_ty = fields[0].ty(self.tcx, substs);\n-                match field_ty.sty {\n+                match field_ty.kind {\n                     ty::Tuple(_) => field_ty.tuple_fields().count() == subpats.len(),\n                     _ => false,\n                 }"}]}