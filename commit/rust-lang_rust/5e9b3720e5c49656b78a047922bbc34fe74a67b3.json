{"sha": "5e9b3720e5c49656b78a047922bbc34fe74a67b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlOWIzNzIwZTVjNDk2NTZiNzhhMDQ3OTIyYmJjMzRmZTc0YTY3YjM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-07T19:46:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-07T19:46:06Z"}, "message": "Rollup merge of #70733 - yoshuawuyts:arc-increment-refcount, r=Mark-Simulacrum\n\nAdd Arc::{incr,decr}_strong_count\n\nThis adds two `unsafe` methods to `Arc`: `incr_strong_count` and `decr_strong_count`. A suggestion to add methods to change the strong count in `Arc` came up in during review in https://github.com/rust-lang/rust/pull/68700#discussion_r396169064, and from asking a few people this seemed like generally useful to have.\n\nReferences:\n- [Motivation from #68700](https://github.com/rust-lang/rust/pull/68700#discussion_r396169064)\n- [Real world example in an executor](https://docs.rs/extreme/666.666.666666/src/extreme/lib.rs.html#13)", "tree": {"sha": "ef2d032fd29a4102f02e5c9e4dc841e191b38b74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef2d032fd29a4102f02e5c9e4dc841e191b38b74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e9b3720e5c49656b78a047922bbc34fe74a67b3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJetGWACRBK7hj4Ov3rIwAAdHIIAKOHFtqbDFiF40HHDKDCTLSg\nk22TS7H73cb1PvAfkGKKwRvrhkD9bwVNOmVTIk+ieigrbs7BxwJH1ugaNBFeZaiB\nqauNhSXk091ZFbhhRyGZGmGygxzd7vvQI4yD+I+vIuJoYpGvQv3AXSSZ3TZaRE6L\nT8j0g09NasRlbwDjhOsmxhuxjPe44Vh0uQhGsXOr6cGgYSFT7k7iPrpfB30nzV0j\nTShqRHVI4GIeMpuw0ndcjCCpvoeHw0hLAawcBojtbtnQ21DBSQZ1FiY78FXf6dlk\nC4L0lvaSatrxTn7yrnJfxJ+xa3wb475m11ILCDnLtU82WScfD0FuVdi/XyQPuNg=\n=qQlv\n-----END PGP SIGNATURE-----\n", "payload": "tree ef2d032fd29a4102f02e5c9e4dc841e191b38b74\nparent a08c47310c7d49cbdc5d7afb38408ba519967ecd\nparent b04599ff8405d476a05b83839c67e9aea3c640cb\nauthor Dylan DPC <dylan.dpc@gmail.com> 1588880766 +0200\ncommitter GitHub <noreply@github.com> 1588880766 +0200\n\nRollup merge of #70733 - yoshuawuyts:arc-increment-refcount, r=Mark-Simulacrum\n\nAdd Arc::{incr,decr}_strong_count\n\nThis adds two `unsafe` methods to `Arc`: `incr_strong_count` and `decr_strong_count`. A suggestion to add methods to change the strong count in `Arc` came up in during review in https://github.com/rust-lang/rust/pull/68700#discussion_r396169064, and from asking a few people this seemed like generally useful to have.\n\nReferences:\n- [Motivation from #68700](https://github.com/rust-lang/rust/pull/68700#discussion_r396169064)\n- [Real world example in an executor](https://docs.rs/extreme/666.666.666666/src/extreme/lib.rs.html#13)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e9b3720e5c49656b78a047922bbc34fe74a67b3", "html_url": "https://github.com/rust-lang/rust/commit/5e9b3720e5c49656b78a047922bbc34fe74a67b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e9b3720e5c49656b78a047922bbc34fe74a67b3/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a08c47310c7d49cbdc5d7afb38408ba519967ecd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a08c47310c7d49cbdc5d7afb38408ba519967ecd", "html_url": "https://github.com/rust-lang/rust/commit/a08c47310c7d49cbdc5d7afb38408ba519967ecd"}, {"sha": "b04599ff8405d476a05b83839c67e9aea3c640cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b04599ff8405d476a05b83839c67e9aea3c640cb", "html_url": "https://github.com/rust-lang/rust/commit/b04599ff8405d476a05b83839c67e9aea3c640cb"}], "stats": {"total": 85, "additions": 80, "deletions": 5}, "files": [{"sha": "19d289c87fd9f2839b810bb0c74f95a269599425", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/5e9b3720e5c49656b78a047922bbc34fe74a67b3/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e9b3720e5c49656b78a047922bbc34fe74a67b3/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=5e9b3720e5c49656b78a047922bbc34fe74a67b3", "patch": "@@ -776,6 +776,79 @@ impl<T: ?Sized> Arc<T> {\n         this.inner().strong.load(SeqCst)\n     }\n \n+    /// Increments the strong reference count on the `Arc<T>` associated with the\n+    /// provided pointer by one.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The pointer must have been obtained through `Arc::into_raw`, and the\n+    /// associated `Arc` instance must be valid (i.e. the strong count must be at\n+    /// least 1) for the duration of this method.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(arc_mutate_strong_count)]\n+    ///\n+    /// use std::sync::Arc;\n+    ///\n+    /// let five = Arc::new(5);\n+    ///\n+    /// unsafe {\n+    ///     let ptr = Arc::into_raw(five);\n+    ///     Arc::incr_strong_count(ptr);\n+    ///\n+    ///     // This assertion is deterministic because we haven't shared\n+    ///     // the `Arc` between threads.\n+    ///     let five = Arc::from_raw(ptr);\n+    ///     assert_eq!(2, Arc::strong_count(&five));\n+    /// }\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"arc_mutate_strong_count\", issue = \"71983\")]\n+    pub unsafe fn incr_strong_count(ptr: *const T) {\n+        // Retain Arc, but don't touch refcount by wrapping in ManuallyDrop\n+        let arc = mem::ManuallyDrop::new(Arc::<T>::from_raw(ptr));\n+        // Now increase refcount, but don't drop new refcount either\n+        let _arc_clone: mem::ManuallyDrop<_> = arc.clone();\n+    }\n+\n+    /// Decrements the strong reference count on the `Arc<T>` associated with the\n+    /// provided pointer by one.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The pointer must have been obtained through `Arc::into_raw`, and the\n+    /// associated `Arc` instance must be valid (i.e. the strong count must be at\n+    /// least 1) when invoking this method. This method can be used to release the final\n+    /// `Arc` and backing storage, but **should not** be called after the final `Arc` has been\n+    /// released.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(arc_mutate_strong_count)]\n+    ///\n+    /// use std::sync::Arc;\n+    ///\n+    /// let five = Arc::new(5);\n+    ///\n+    /// unsafe {\n+    ///     let ptr = Arc::into_raw(five);\n+    ///     Arc::decr_strong_count(ptr);\n+    ///\n+    ///     // This assertion is deterministic because we haven't shared\n+    ///     // the `Arc` between threads.\n+    ///     let five = Arc::from_raw(ptr);\n+    ///     assert_eq!(0, Arc::strong_count(&five));\n+    /// }\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"arc_mutate_strong_count\", issue = \"71983\")]\n+    pub unsafe fn decr_strong_count(ptr: *const T) {\n+        mem::drop(Arc::from_raw(ptr));\n+    }\n+\n     #[inline]\n     fn inner(&self) -> &ArcInner<T> {\n         // This unsafety is ok because while this arc is alive we're guaranteed"}, {"sha": "745444a152e1b737ba4b399ee3970e424430f9fe", "filename": "src/liballoc/task.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e9b3720e5c49656b78a047922bbc34fe74a67b3/src%2Fliballoc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e9b3720e5c49656b78a047922bbc34fe74a67b3/src%2Fliballoc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftask.rs?ref=5e9b3720e5c49656b78a047922bbc34fe74a67b3", "patch": "@@ -1,6 +1,6 @@\n #![unstable(feature = \"wake_trait\", issue = \"69912\")]\n //! Types and Traits for working with asynchronous tasks.\n-use core::mem::{self, ManuallyDrop};\n+use core::mem::ManuallyDrop;\n use core::task::{RawWaker, RawWakerVTable, Waker};\n \n use crate::sync::Arc;\n@@ -60,9 +60,11 @@ impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for RawWaker {\n fn raw_waker<W: Wake + Send + Sync + 'static>(waker: Arc<W>) -> RawWaker {\n     // Increment the reference count of the arc to clone it.\n     unsafe fn clone_waker<W: Wake + Send + Sync + 'static>(waker: *const ()) -> RawWaker {\n-        let waker: Arc<W> = Arc::from_raw(waker as *const W);\n-        mem::forget(Arc::clone(&waker));\n-        raw_waker(waker)\n+        Arc::incr_strong_count(waker as *const W);\n+        RawWaker::new(\n+            waker as *const (),\n+            &RawWakerVTable::new(clone_waker::<W>, wake::<W>, wake_by_ref::<W>, drop_waker::<W>),\n+        )\n     }\n \n     // Wake by value, moving the Arc into the Wake::wake function\n@@ -79,7 +81,7 @@ fn raw_waker<W: Wake + Send + Sync + 'static>(waker: Arc<W>) -> RawWaker {\n \n     // Decrement the reference count of the Arc on drop\n     unsafe fn drop_waker<W: Wake + Send + Sync + 'static>(waker: *const ()) {\n-        mem::drop(Arc::from_raw(waker as *const W));\n+        Arc::decr_strong_count(waker as *const W);\n     }\n \n     RawWaker::new("}]}