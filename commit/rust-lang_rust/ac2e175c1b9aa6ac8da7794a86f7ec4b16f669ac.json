{"sha": "ac2e175c1b9aa6ac8da7794a86f7ec4b16f669ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMmUxNzVjMWI5YWE2YWM4ZGE3Nzk0YTg2ZjdlYzRiMTZmNjY5YWM=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-05-23T14:34:09Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-05-23T14:36:10Z"}, "message": "Rustup to *1.10.0-nightly (476fe6eef 2016-05-21)*", "tree": {"sha": "84f2c08e66a2ad3e70b9b47cdaf68d101dcafb04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84f2c08e66a2ad3e70b9b47cdaf68d101dcafb04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac2e175c1b9aa6ac8da7794a86f7ec4b16f669ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXQxVbAAoJEF5CfHlMukXongcQALwOu0wS5VeBItjoddJfb1YZ\ntA262YEkk3KoSLqfCTYeWbWB0Ne1eS3MaltZd8FklRXBhCzQDJmpzE6iiSvSqYXj\nbJvQTCZi8BPi5sWbWZEPxzKfc4WlxuDcfy4Zq5k3qm5cdy3b+W7lOd8jSgZp+Gax\nlRLpe+crpts6s4RgDjEMar3TmeHWHt1ivRspCzgBSMchRvP/dqBH3XyktPsQgtD6\nx97LF9i5u8yoKUciG/0RiP7zEyvayqe/zU21x1lmcy0ioWh3KjttIfd3md6FOPZd\nhR+jqBL2YpNDPUELajmGHGPpdQgnHBTEDdrOnoOcUKeyeTQRUM8K2n673DJUutKs\n5c797srHKGRQ17VCgruCT7KypktCKGlDXQ/QEI1jtr6RupoJ3DQXYDvWSf1Fu7so\nQsOj57Sw3y+TX0oI7uU7M758gXeN+X9JFdw8fEQo5enrHOo38cawECWGGhmAPPev\nTkW1cOxMCeuhaArm63I6aaemdpFNbiuf6+XiaWqRNyuMZy2ZI07+Y+FLK4fuonIR\nCdA396nXqc1SUU++raBLCUEfdT+pODSzYTFn24pdj7kQWh/eGSzTqrYPw07UgjF1\n1WpOOWhoPIr15Mf5FyKeXfF9dDx0zEWGjwzLHfcqcj/J4DFJVwroEimO8DL1HaPg\n/zsFt4AAHro90+F51jtP\n=We9G\n-----END PGP SIGNATURE-----", "payload": "tree 84f2c08e66a2ad3e70b9b47cdaf68d101dcafb04\nparent 6dd608e53e52d91d01677bc5f0a2eead4757e406\nauthor mcarton <cartonmartin+git@gmail.com> 1464014049 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1464014170 +0200\n\nRustup to *1.10.0-nightly (476fe6eef 2016-05-21)*\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac2e175c1b9aa6ac8da7794a86f7ec4b16f669ac", "html_url": "https://github.com/rust-lang/rust/commit/ac2e175c1b9aa6ac8da7794a86f7ec4b16f669ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac2e175c1b9aa6ac8da7794a86f7ec4b16f669ac/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dd608e53e52d91d01677bc5f0a2eead4757e406", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dd608e53e52d91d01677bc5f0a2eead4757e406", "html_url": "https://github.com/rust-lang/rust/commit/6dd608e53e52d91d01677bc5f0a2eead4757e406"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "2a0d36a80b3cf0f0a6ca24f47aa73a21d03b6425", "filename": "src/shadow.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ac2e175c1b9aa6ac8da7794a86f7ec4b16f669ac/src%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac2e175c1b9aa6ac8da7794a86f7ec4b16f669ac/src%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshadow.rs?ref=ac2e175c1b9aa6ac8da7794a86f7ec4b16f669ac", "patch": "@@ -208,15 +208,16 @@ fn lint_shadow<T>(cx: &LateContext, name: Name, span: Span, pattern_span: Span,\n             let db = span_lint(cx,\n                                SHADOW_SAME,\n                                span,\n-                               &format!(\"{} is shadowed by itself in {}\",\n+                               &format!(\"`{}` is shadowed by itself in `{}`\",\n                                         snippet(cx, pattern_span, \"_\"),\n                                         snippet(cx, expr.span, \"..\")));\n+\n             note_orig(cx, db, SHADOW_SAME, prev_span);\n         } else if contains_self(name, expr) {\n             let db = span_note_and_lint(cx,\n                                         SHADOW_REUSE,\n                                         pattern_span,\n-                                        &format!(\"{} is shadowed by {} which reuses the original value\",\n+                                        &format!(\"`{}` is shadowed by `{}` which reuses the original value\",\n                                                  snippet(cx, pattern_span, \"_\"),\n                                                  snippet(cx, expr.span, \"..\")),\n                                         expr.span,\n@@ -226,7 +227,7 @@ fn lint_shadow<T>(cx: &LateContext, name: Name, span: Span, pattern_span: Span,\n             let db = span_note_and_lint(cx,\n                                         SHADOW_UNRELATED,\n                                         pattern_span,\n-                                        &format!(\"{} is shadowed by {}\",\n+                                        &format!(\"`{}` is shadowed by `{}`\",\n                                                  snippet(cx, pattern_span, \"_\"),\n                                                  snippet(cx, expr.span, \"..\")),\n                                         expr.span,"}, {"sha": "f6e4a9a31e054c4c369577b503e7f88158ebf063", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac2e175c1b9aa6ac8da7794a86f7ec4b16f669ac/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac2e175c1b9aa6ac8da7794a86f7ec4b16f669ac/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=ac2e175c1b9aa6ac8da7794a86f7ec4b16f669ac", "patch": "@@ -493,10 +493,8 @@ fn single_char_pattern() {\n fn temporary_cstring() {\n     use std::ffi::CString;\n \n-    ( // extra parenthesis to better test spans\n+    CString::new(\"foo\").unwrap().as_ptr();\n     //~^ ERROR you are getting the inner pointer of a temporary `CString`\n     //~| NOTE that pointer will be invalid outside this expression\n-        CString::new(\"foo\").unwrap()\n-        //~^ HELP assign the `CString` to a variable to extend its lifetime\n-    ).as_ptr();\n+    //~| HELP assign the `CString` to a variable to extend its lifetime\n }"}, {"sha": "1cfcff74a44c091b33851f2dee10782838f38019", "filename": "tests/compile-fail/shadow.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ac2e175c1b9aa6ac8da7794a86f7ec4b16f669ac/tests%2Fcompile-fail%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac2e175c1b9aa6ac8da7794a86f7ec4b16f669ac/tests%2Fcompile-fail%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fshadow.rs?ref=ac2e175c1b9aa6ac8da7794a86f7ec4b16f669ac", "patch": "@@ -10,15 +10,15 @@ fn first(x: (isize, isize)) -> isize { x.0 }\n \n fn main() {\n     let mut x = 1;\n-    let x = &mut x; //~ERROR x is shadowed by itself in &mut x\n-    let x = { x }; //~ERROR x is shadowed by itself in { x }\n-    let x = (&*x); //~ERROR x is shadowed by itself in &*x\n-    let x = { *x + 1 }; //~ERROR x is shadowed by { *x + 1 } which reuses\n-    let x = id(x); //~ERROR x is shadowed by id(x) which reuses\n-    let x = (1, x); //~ERROR x is shadowed by (1, x) which reuses\n-    let x = first(x); //~ERROR x is shadowed by first(x) which reuses\n+    let x = &mut x; //~ERROR `x` is shadowed by itself in `&mut x`\n+    let x = { x }; //~ERROR `x` is shadowed by itself in `{ x }`\n+    let x = (&*x); //~ERROR `x` is shadowed by itself in `(&*x)`\n+    let x = { *x + 1 }; //~ERROR `x` is shadowed by `{ *x + 1 }` which reuses\n+    let x = id(x); //~ERROR `x` is shadowed by `id(x)` which reuses\n+    let x = (1, x); //~ERROR `x` is shadowed by `(1, x)` which reuses\n+    let x = first(x); //~ERROR `x` is shadowed by `first(x)` which reuses\n     let y = 1;\n-    let x = y; //~ERROR x is shadowed by y\n+    let x = y; //~ERROR `x` is shadowed by `y`\n \n     let o = Some(1u8);\n "}]}