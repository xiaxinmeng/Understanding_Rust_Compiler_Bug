{"sha": "b07ae1c4d5232abcb89151eb64d81631d11a5d14", "node_id": "C_kwDOAAsO6NoAKGIwN2FlMWM0ZDUyMzJhYmNiODkxNTFlYjY0ZDgxNjMxZDExYTVkMTQ", "commit": {"author": {"name": "Xuanwo", "email": "github@xuanwo.io", "date": "2021-12-29T06:02:20Z"}, "committer": {"name": "Xuanwo", "email": "github@xuanwo.io", "date": "2021-12-29T06:02:20Z"}, "message": "Address comments\n\nSigned-off-by: Xuanwo <github@xuanwo.io>", "tree": {"sha": "99f64c4926e2be3cc98f27208abbba9425ee4d95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99f64c4926e2be3cc98f27208abbba9425ee4d95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b07ae1c4d5232abcb89151eb64d81631d11a5d14", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQQxsjGJMURYQAE8nJHEI7T6a0jpRQUCYcv58gAKCRDEI7T6a0jp\nRbhhAQCUiSlC9zwm5Ky/xjoD9yQ2lsZduhXp6tCNhRRS9hPs0wEAwZ780I3v1CRk\nXdn+GdNfbkZ0n1lps4ZTUlVP/8Tihg0=\n=V6jv\n-----END PGP SIGNATURE-----", "payload": "tree 99f64c4926e2be3cc98f27208abbba9425ee4d95\nparent 9166428be18f5348b2c6cb5301986d29e5a0af9c\nauthor Xuanwo <github@xuanwo.io> 1640757740 +0800\ncommitter Xuanwo <github@xuanwo.io> 1640757740 +0800\n\nAddress comments\n\nSigned-off-by: Xuanwo <github@xuanwo.io>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b07ae1c4d5232abcb89151eb64d81631d11a5d14", "html_url": "https://github.com/rust-lang/rust/commit/b07ae1c4d5232abcb89151eb64d81631d11a5d14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b07ae1c4d5232abcb89151eb64d81631d11a5d14/comments", "author": {"login": "Xuanwo", "id": 5351546, "node_id": "MDQ6VXNlcjUzNTE1NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/5351546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xuanwo", "html_url": "https://github.com/Xuanwo", "followers_url": "https://api.github.com/users/Xuanwo/followers", "following_url": "https://api.github.com/users/Xuanwo/following{/other_user}", "gists_url": "https://api.github.com/users/Xuanwo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xuanwo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xuanwo/subscriptions", "organizations_url": "https://api.github.com/users/Xuanwo/orgs", "repos_url": "https://api.github.com/users/Xuanwo/repos", "events_url": "https://api.github.com/users/Xuanwo/events{/privacy}", "received_events_url": "https://api.github.com/users/Xuanwo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xuanwo", "id": 5351546, "node_id": "MDQ6VXNlcjUzNTE1NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/5351546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xuanwo", "html_url": "https://github.com/Xuanwo", "followers_url": "https://api.github.com/users/Xuanwo/followers", "following_url": "https://api.github.com/users/Xuanwo/following{/other_user}", "gists_url": "https://api.github.com/users/Xuanwo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xuanwo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xuanwo/subscriptions", "organizations_url": "https://api.github.com/users/Xuanwo/orgs", "repos_url": "https://api.github.com/users/Xuanwo/repos", "events_url": "https://api.github.com/users/Xuanwo/events{/privacy}", "received_events_url": "https://api.github.com/users/Xuanwo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9166428be18f5348b2c6cb5301986d29e5a0af9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9166428be18f5348b2c6cb5301986d29e5a0af9c", "html_url": "https://github.com/rust-lang/rust/commit/9166428be18f5348b2c6cb5301986d29e5a0af9c"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "b3ad3fe8c2c7e25db2bcbb4bc549afdcbadb742c", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b07ae1c4d5232abcb89151eb64d81631d11a5d14/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07ae1c4d5232abcb89151eb64d81631d11a5d14/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=b07ae1c4d5232abcb89151eb64d81631d11a5d14", "patch": "@@ -266,7 +266,7 @@ impl OsString {\n         self.inner.reserve(additional)\n     }\n \n-    /// Tries to reserve capacity for at least `additional` more elements to be inserted\n+    /// Tries to reserve capacity for at least `additional` more length units\n     /// in the given `OsString`. The string may reserve more space to avoid\n     /// frequent reallocations. After calling `try_reserve`, capacity will be\n     /// greater than or equal to `self.len() + additional`. Does nothing if\n@@ -288,7 +288,7 @@ impl OsString {\n     ///     let mut s = OsString::new();\n     ///\n     ///     // Pre-reserve the memory, exiting if we can't\n-    ///     s.try_reserve(data.len())?;\n+    ///     s.try_reserve(OsString::from(data).len())?;\n     ///\n     ///     // Now we know this can't OOM in the middle of our complex work\n     ///     s.push(data);\n@@ -329,12 +329,12 @@ impl OsString {\n     }\n \n     /// Tries to reserve the minimum capacity for exactly `additional`\n-    /// elements to be inserted in the given `OsString`. After calling\n+    /// more length units in the given `OsString`. After calling\n     /// `try_reserve_exact`, capacity will be greater than or equal to\n     /// `self.len() + additional` if it returns `Ok(())`.\n     /// Does nothing if the capacity is already sufficient.\n     ///\n-    /// Note that the allocator may give the collection more space than it\n+    /// Note that the allocator may give the `OsString` more space than it\n     /// requests. Therefore, capacity can not be relied upon to be precisely\n     /// minimal. Prefer [`try_reserve`] if future insertions are expected.\n     ///\n@@ -353,10 +353,10 @@ impl OsString {\n     /// use std::collections::TryReserveError;\n     ///\n     /// fn find_max_slow(data: &str) -> Result<OsString, TryReserveError> {\n-    ///     let mut s = OsString::from(data);\n+    ///     let mut s = OsString::new();\n     ///\n     ///     // Pre-reserve the memory, exiting if we can't\n-    ///     s.try_reserve_exact(data.len())?;\n+    ///     s.try_reserve_exact(OsString::from(data).len())?;\n     ///\n     ///     // Now we know this can't OOM in the middle of our complex work\n     ///     s.push(data);"}, {"sha": "7a6e6246357d1d726162237e59db7faf05a079f5", "filename": "library/std/src/sys_common/wtf8.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b07ae1c4d5232abcb89151eb64d81631d11a5d14/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07ae1c4d5232abcb89151eb64d81631d11a5d14/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs?ref=b07ae1c4d5232abcb89151eb64d81631d11a5d14", "patch": "@@ -232,8 +232,8 @@ impl Wtf8Buf {\n         self.bytes.reserve(additional)\n     }\n \n-    /// Tries to reserve capacity for at least `additional` more elements to be inserted\n-    /// in the given `Wtf8Buf`. The collection may reserve more space to avoid\n+    /// Tries to reserve capacity for at least `additional` more length units\n+    /// in the given `Wtf8Buf`. The `Wtf8Buf` may reserve more space to avoid\n     /// frequent reallocations. After calling `try_reserve`, capacity will be\n     /// greater than or equal to `self.len() + additional`. Does nothing if\n     /// capacity is already sufficient.\n@@ -253,12 +253,12 @@ impl Wtf8Buf {\n     }\n \n     /// Tries to reserve the minimum capacity for exactly `additional`\n-    /// elements to be inserted in the given `Wtf8Buf`. After calling\n+    /// length units in the given `Wtf8Buf`. After calling\n     /// `try_reserve_exact`, capacity will be greater than or equal to\n     /// `self.len() + additional` if it returns `Ok(())`.\n     /// Does nothing if the capacity is already sufficient.\n     ///\n-    /// Note that the allocator may give the collection more space than it\n+    /// Note that the allocator may give the `Wtf8Buf` more space than it\n     /// requests. Therefore, capacity can not be relied upon to be precisely\n     /// minimal. Prefer [`try_reserve`] if future insertions are expected.\n     ///"}]}