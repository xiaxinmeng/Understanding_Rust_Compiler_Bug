{"sha": "2c04c1a188124402e85d78bc78c4e07bf87014d0", "node_id": "C_kwDOAAsO6NoAKDJjMDRjMWExODgxMjQ0MDJlODVkNzhiYzc4YzRlMDdiZjg3MDE0ZDA", "commit": {"author": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-09-14T09:58:41Z"}, "committer": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-10-02T13:03:48Z"}, "message": "[`manual_assert`]: Preserve comments in the suggestion", "tree": {"sha": "60b699dee47f19586807ad8b00b6736fd9657d35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60b699dee47f19586807ad8b00b6736fd9657d35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c04c1a188124402e85d78bc78c4e07bf87014d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c04c1a188124402e85d78bc78c4e07bf87014d0", "html_url": "https://github.com/rust-lang/rust/commit/2c04c1a188124402e85d78bc78c4e07bf87014d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c04c1a188124402e85d78bc78c4e07bf87014d0/comments", "author": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d837b58f7b534ef78f2144b79ad71f21148df1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d837b58f7b534ef78f2144b79ad71f21148df1b", "html_url": "https://github.com/rust-lang/rust/commit/5d837b58f7b534ef78f2144b79ad71f21148df1b"}], "stats": {"total": 288, "additions": 237, "deletions": 51}, "files": [{"sha": "9934c06e72388cab8a9317579c99a39c42bd83ed", "filename": "clippy_lints/src/manual_assert.rs", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2c04c1a188124402e85d78bc78c4e07bf87014d0/clippy_lints%2Fsrc%2Fmanual_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c04c1a188124402e85d78bc78c4e07bf87014d0/clippy_lints%2Fsrc%2Fmanual_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_assert.rs?ref=2c04c1a188124402e85d78bc78c4e07bf87014d0", "patch": "@@ -1,9 +1,10 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n+use crate::rustc_lint::LintContext;\n+use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::macros::{root_macro_call, FormatArgsExpn};\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{peel_blocks_with_stmt, sugg};\n+use clippy_utils::{peel_blocks_with_stmt, span_extract_comment, sugg};\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, UnOp};\n+use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n@@ -50,20 +51,33 @@ impl<'tcx> LateLintPass<'tcx> for ManualAssert {\n                 let mut applicability = Applicability::MachineApplicable;\n                 let format_args_snip = snippet_with_applicability(cx, format_args.inputs_span(), \"..\", &mut applicability);\n                 let cond = cond.peel_drop_temps();\n-                let (cond, not) = match cond.kind {\n-                    ExprKind::Unary(UnOp::Not, e) => (e, \"\"),\n-                    _ => (cond, \"!\"),\n-                };\n-                let cond_sugg = sugg::Sugg::hir_with_applicability(cx, cond, \"..\", &mut applicability).maybe_par();\n-                let sugg = format!(\"assert!({not}{cond_sugg}, {format_args_snip});\");\n-                span_lint_and_sugg(\n+                let mut comments = span_extract_comment(cx.sess().source_map(), expr.span);\n+                if !comments.is_empty() {\n+                    comments += \"\\n\";\n+                }\n+                // we need to negate the <cond> expression because `assert!` panics when <cond> is `false`, wherease original pattern panicked when evaluating to `true`\n+                let cond_sugg = !sugg::Sugg::hir_with_applicability(cx, cond, \"..\", &mut applicability);\n+                let sugg = format!(\"assert!({cond_sugg}, {format_args_snip});\");\n+                // we show to the user the suggestion without the comments, but when applicating the fix, include the comments in the block\n+                span_lint_and_then(\n                     cx,\n                     MANUAL_ASSERT,\n                     expr.span,\n                     \"only a `panic!` in `if`-then statement\",\n-                    \"try\",\n-                    sugg,\n-                    Applicability::MachineApplicable,\n+                    |diag| {\n+                        // comments can be noisy, do not show them to the user\n+                        diag.tool_only_span_suggestion(\n+                                    expr.span.shrink_to_lo(),\n+                                    \"add comments back\",\n+                                    comments,\n+                                    applicability);\n+                        diag.span_suggestion(\n+                                    expr.span,\n+                                    \"try instead\",\n+                                    sugg,\n+                                    applicability);\n+                                     }\n+\n                 );\n             }\n         }"}, {"sha": "d67ceaec0358aed13ccd0aeb6384ec919e5792f9", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2c04c1a188124402e85d78bc78c4e07bf87014d0/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c04c1a188124402e85d78bc78c4e07bf87014d0/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=2c04c1a188124402e85d78bc78c4e07bf87014d0", "patch": "@@ -2295,6 +2295,29 @@ pub fn span_contains_comment(sm: &SourceMap, span: Span) -> bool {\n     });\n }\n \n+/// Return all the comments a given span contains\n+/// Comments are returned wrapped with their relevant delimiters\n+pub fn span_extract_comment(sm: &SourceMap, span: Span) -> String {\n+    let snippet = sm.span_to_snippet(span).unwrap_or_default();\n+    let mut comments_buf: Vec<String> = Vec::new();\n+    let mut index: usize = 0;\n+\n+    for token in tokenize(&snippet) {\n+        let token_range = index..(index + token.len as usize);\n+        index += token.len as usize;\n+        match token.kind {\n+            TokenKind::BlockComment { .. } | TokenKind::LineComment { .. } => {\n+                if let Some(comment) = snippet.get(token_range) {\n+                    comments_buf.push(comment.to_string());\n+                }\n+            },\n+            _ => (),\n+        }\n+    }\n+\n+    comments_buf.join(\"\\n\")\n+}\n+\n macro_rules! op_utils {\n     ($($name:ident $assign:ident)*) => {\n         /// Binary operation traits like `LangItem::Add`"}, {"sha": "b5ccc07e49e2583ddbf62168427cd4325f63a0c4", "filename": "tests/ui/manual_assert.edition2018.fixed", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2c04c1a188124402e85d78bc78c4e07bf87014d0/tests%2Fui%2Fmanual_assert.edition2018.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2c04c1a188124402e85d78bc78c4e07bf87014d0/tests%2Fui%2Fmanual_assert.edition2018.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2018.fixed?ref=2c04c1a188124402e85d78bc78c4e07bf87014d0", "patch": "@@ -5,6 +5,7 @@\n \n #![warn(clippy::manual_assert)]\n #![allow(clippy::nonminimal_bool)]\n+#![allow(dead_code)]\n \n macro_rules! one {\n     () => {\n@@ -27,8 +28,8 @@ fn main() {\n     {\n         panic!(\"qaqaq{:?}\", a);\n     }\n-    assert!(a.is_empty(), \"qaqaq{:?}\", a);\n-    assert!(a.is_empty(), \"qwqwq\");\n+    assert!(!(!a.is_empty()), \"qaqaq{:?}\", a);\n+    assert!(!(!a.is_empty()), \"qwqwq\");\n     if a.len() == 3 {\n         println!(\"qwq\");\n         println!(\"qwq\");\n@@ -50,3 +51,14 @@ fn main() {\n     assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");\n     assert!(!a.is_empty(), \"with expansion {}\", one!());\n }\n+\n+fn issue7730() {\n+    // Suggestion should preserve comment\n+    // comment\n+/* this is a\n+        multiline\n+        comment */\n+/// Doc comment\n+// comment after `panic!`\n+assert!(!true, \"panic with comment\");\n+}"}, {"sha": "df22e0114be042dc039c6cec3241cf8008f27d2f", "filename": "tests/ui/manual_assert.edition2018.stderr", "status": "modified", "additions": 73, "deletions": 17, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/2c04c1a188124402e85d78bc78c4e07bf87014d0/tests%2Fui%2Fmanual_assert.edition2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c04c1a188124402e85d78bc78c4e07bf87014d0/tests%2Fui%2Fmanual_assert.edition2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2018.stderr?ref=2c04c1a188124402e85d78bc78c4e07bf87014d0", "patch": "@@ -1,68 +1,124 @@\n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:30:5\n+  --> $DIR/manual_assert.rs:31:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qaqaq{:?}\", a);\n LL | |     }\n-   | |_____^ help: try: `assert!(a.is_empty(), \"qaqaq{:?}\", a);`\n+   | |_____^\n    |\n    = note: `-D clippy::manual-assert` implied by `-D warnings`\n+help: try instead\n+   |\n+LL |     assert!(!(!a.is_empty()), \"qaqaq{:?}\", a);\n+   |\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:33:5\n+  --> $DIR/manual_assert.rs:34:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qwqwq\");\n LL | |     }\n-   | |_____^ help: try: `assert!(a.is_empty(), \"qwqwq\");`\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!(!a.is_empty()), \"qwqwq\");\n+   |\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:50:5\n+  --> $DIR/manual_assert.rs:51:5\n    |\n LL | /     if b.is_empty() {\n LL | |         panic!(\"panic1\");\n LL | |     }\n-   | |_____^ help: try: `assert!(!b.is_empty(), \"panic1\");`\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!b.is_empty(), \"panic1\");\n+   |\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:53:5\n+  --> $DIR/manual_assert.rs:54:5\n    |\n LL | /     if b.is_empty() && a.is_empty() {\n LL | |         panic!(\"panic2\");\n LL | |     }\n-   | |_____^ help: try: `assert!(!(b.is_empty() && a.is_empty()), \"panic2\");`\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!(b.is_empty() && a.is_empty()), \"panic2\");\n+   |\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:56:5\n+  --> $DIR/manual_assert.rs:57:5\n    |\n LL | /     if a.is_empty() && !b.is_empty() {\n LL | |         panic!(\"panic3\");\n LL | |     }\n-   | |_____^ help: try: `assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");`\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");\n+   |\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:59:5\n+  --> $DIR/manual_assert.rs:60:5\n    |\n LL | /     if b.is_empty() || a.is_empty() {\n LL | |         panic!(\"panic4\");\n LL | |     }\n-   | |_____^ help: try: `assert!(!(b.is_empty() || a.is_empty()), \"panic4\");`\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!(b.is_empty() || a.is_empty()), \"panic4\");\n+   |\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:62:5\n+  --> $DIR/manual_assert.rs:63:5\n    |\n LL | /     if a.is_empty() || !b.is_empty() {\n LL | |         panic!(\"panic5\");\n LL | |     }\n-   | |_____^ help: try: `assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");`\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");\n+   |\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:65:5\n+  --> $DIR/manual_assert.rs:66:5\n    |\n LL | /     if a.is_empty() {\n LL | |         panic!(\"with expansion {}\", one!())\n LL | |     }\n-   | |_____^ help: try: `assert!(!a.is_empty(), \"with expansion {}\", one!());`\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!a.is_empty(), \"with expansion {}\", one!());\n+   |\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:73:5\n+   |\n+LL | /     if true {\n+LL | |         // comment\n+LL | |         /* this is a\n+LL | |         multiline\n+...  |\n+LL | |         panic!(\"panic with comment\") // comment after `panic!`\n+LL | |     }\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!true, \"panic with comment\");\n+   |\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "b5ccc07e49e2583ddbf62168427cd4325f63a0c4", "filename": "tests/ui/manual_assert.edition2021.fixed", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2c04c1a188124402e85d78bc78c4e07bf87014d0/tests%2Fui%2Fmanual_assert.edition2021.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2c04c1a188124402e85d78bc78c4e07bf87014d0/tests%2Fui%2Fmanual_assert.edition2021.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2021.fixed?ref=2c04c1a188124402e85d78bc78c4e07bf87014d0", "patch": "@@ -5,6 +5,7 @@\n \n #![warn(clippy::manual_assert)]\n #![allow(clippy::nonminimal_bool)]\n+#![allow(dead_code)]\n \n macro_rules! one {\n     () => {\n@@ -27,8 +28,8 @@ fn main() {\n     {\n         panic!(\"qaqaq{:?}\", a);\n     }\n-    assert!(a.is_empty(), \"qaqaq{:?}\", a);\n-    assert!(a.is_empty(), \"qwqwq\");\n+    assert!(!(!a.is_empty()), \"qaqaq{:?}\", a);\n+    assert!(!(!a.is_empty()), \"qwqwq\");\n     if a.len() == 3 {\n         println!(\"qwq\");\n         println!(\"qwq\");\n@@ -50,3 +51,14 @@ fn main() {\n     assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");\n     assert!(!a.is_empty(), \"with expansion {}\", one!());\n }\n+\n+fn issue7730() {\n+    // Suggestion should preserve comment\n+    // comment\n+/* this is a\n+        multiline\n+        comment */\n+/// Doc comment\n+// comment after `panic!`\n+assert!(!true, \"panic with comment\");\n+}"}, {"sha": "df22e0114be042dc039c6cec3241cf8008f27d2f", "filename": "tests/ui/manual_assert.edition2021.stderr", "status": "modified", "additions": 73, "deletions": 17, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/2c04c1a188124402e85d78bc78c4e07bf87014d0/tests%2Fui%2Fmanual_assert.edition2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c04c1a188124402e85d78bc78c4e07bf87014d0/tests%2Fui%2Fmanual_assert.edition2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2021.stderr?ref=2c04c1a188124402e85d78bc78c4e07bf87014d0", "patch": "@@ -1,68 +1,124 @@\n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:30:5\n+  --> $DIR/manual_assert.rs:31:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qaqaq{:?}\", a);\n LL | |     }\n-   | |_____^ help: try: `assert!(a.is_empty(), \"qaqaq{:?}\", a);`\n+   | |_____^\n    |\n    = note: `-D clippy::manual-assert` implied by `-D warnings`\n+help: try instead\n+   |\n+LL |     assert!(!(!a.is_empty()), \"qaqaq{:?}\", a);\n+   |\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:33:5\n+  --> $DIR/manual_assert.rs:34:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qwqwq\");\n LL | |     }\n-   | |_____^ help: try: `assert!(a.is_empty(), \"qwqwq\");`\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!(!a.is_empty()), \"qwqwq\");\n+   |\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:50:5\n+  --> $DIR/manual_assert.rs:51:5\n    |\n LL | /     if b.is_empty() {\n LL | |         panic!(\"panic1\");\n LL | |     }\n-   | |_____^ help: try: `assert!(!b.is_empty(), \"panic1\");`\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!b.is_empty(), \"panic1\");\n+   |\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:53:5\n+  --> $DIR/manual_assert.rs:54:5\n    |\n LL | /     if b.is_empty() && a.is_empty() {\n LL | |         panic!(\"panic2\");\n LL | |     }\n-   | |_____^ help: try: `assert!(!(b.is_empty() && a.is_empty()), \"panic2\");`\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!(b.is_empty() && a.is_empty()), \"panic2\");\n+   |\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:56:5\n+  --> $DIR/manual_assert.rs:57:5\n    |\n LL | /     if a.is_empty() && !b.is_empty() {\n LL | |         panic!(\"panic3\");\n LL | |     }\n-   | |_____^ help: try: `assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");`\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");\n+   |\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:59:5\n+  --> $DIR/manual_assert.rs:60:5\n    |\n LL | /     if b.is_empty() || a.is_empty() {\n LL | |         panic!(\"panic4\");\n LL | |     }\n-   | |_____^ help: try: `assert!(!(b.is_empty() || a.is_empty()), \"panic4\");`\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!(b.is_empty() || a.is_empty()), \"panic4\");\n+   |\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:62:5\n+  --> $DIR/manual_assert.rs:63:5\n    |\n LL | /     if a.is_empty() || !b.is_empty() {\n LL | |         panic!(\"panic5\");\n LL | |     }\n-   | |_____^ help: try: `assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");`\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");\n+   |\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:65:5\n+  --> $DIR/manual_assert.rs:66:5\n    |\n LL | /     if a.is_empty() {\n LL | |         panic!(\"with expansion {}\", one!())\n LL | |     }\n-   | |_____^ help: try: `assert!(!a.is_empty(), \"with expansion {}\", one!());`\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!a.is_empty(), \"with expansion {}\", one!());\n+   |\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:73:5\n+   |\n+LL | /     if true {\n+LL | |         // comment\n+LL | |         /* this is a\n+LL | |         multiline\n+...  |\n+LL | |         panic!(\"panic with comment\") // comment after `panic!`\n+LL | |     }\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!true, \"panic with comment\");\n+   |\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "e9dd81a758a8ef54ba65f30d2a6d95cdf0c33609", "filename": "tests/ui/manual_assert.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2c04c1a188124402e85d78bc78c4e07bf87014d0/tests%2Fui%2Fmanual_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c04c1a188124402e85d78bc78c4e07bf87014d0/tests%2Fui%2Fmanual_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.rs?ref=2c04c1a188124402e85d78bc78c4e07bf87014d0", "patch": "@@ -5,6 +5,7 @@\n \n #![warn(clippy::manual_assert)]\n #![allow(clippy::nonminimal_bool)]\n+#![allow(dead_code)]\n \n macro_rules! one {\n     () => {\n@@ -66,3 +67,15 @@ fn main() {\n         panic!(\"with expansion {}\", one!())\n     }\n }\n+\n+fn issue7730() {\n+    // Suggestion should preserve comment\n+    if true {\n+        // comment\n+        /* this is a\n+        multiline\n+        comment */\n+        /// Doc comment\n+        panic!(\"panic with comment\") // comment after `panic!`\n+    }\n+}"}]}