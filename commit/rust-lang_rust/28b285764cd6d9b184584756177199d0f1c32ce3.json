{"sha": "28b285764cd6d9b184584756177199d0f1c32ce3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4YjI4NTc2NGNkNmQ5YjE4NDU4NDc1NjE3NzE5OWQwZjFjMzJjZTM=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-04-23T23:47:47Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-04-28T16:49:20Z"}, "message": "comments, helper function for tests, more informative error message", "tree": {"sha": "148a73d40d20814a333da557ba60cac3dae5bcf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/148a73d40d20814a333da557ba60cac3dae5bcf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28b285764cd6d9b184584756177199d0f1c32ce3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28b285764cd6d9b184584756177199d0f1c32ce3", "html_url": "https://github.com/rust-lang/rust/commit/28b285764cd6d9b184584756177199d0f1c32ce3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28b285764cd6d9b184584756177199d0f1c32ce3/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50a7f5483b4f474d7469ea7709aed8e370eab5ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/50a7f5483b4f474d7469ea7709aed8e370eab5ba", "html_url": "https://github.com/rust-lang/rust/commit/50a7f5483b4f474d7469ea7709aed8e370eab5ba"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "9381358e161d446a5d797355b9ec398c42d26f27", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/28b285764cd6d9b184584756177199d0f1c32ce3/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28b285764cd6d9b184584756177199d0f1c32ce3/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=28b285764cd6d9b184584756177199d0f1c32ce3", "patch": "@@ -354,6 +354,7 @@ mod test {\n     use core::option::None;\n     use core::int;\n     use core::num::NumCast;\n+    use core::path::Path;\n     use codemap::{dummy_sp, CodeMap, span, BytePos, spanned};\n     use opt_vec;\n     use ast;\n@@ -546,6 +547,10 @@ mod test {\n \n     }\n \n+    fn parser_done(p: Parser){\n+        assert_eq!(*p.token,token::EOF);\n+    }\n+\n     #[test] fn parse_ident_pat () {\n         let parser = string_to_parser(@~\"b\");\n         assert_eq!(parser.parse_pat(false),\n@@ -560,7 +565,7 @@ mod test {\n                                                   None // no idea\n                                                  ),\n                              span: sp(0,1)});\n-        assert_eq!(*parser.token,token::EOF);\n+        parser_done(parser);\n     }\n \n     #[test] fn parse_arg () {"}, {"sha": "c843698a1dc73173757645ba937a7193c6efa327", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/28b285764cd6d9b184584756177199d0f1c32ce3/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28b285764cd6d9b184584756177199d0f1c32ce3/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=28b285764cd6d9b184584756177199d0f1c32ce3", "patch": "@@ -1056,6 +1056,9 @@ pub impl Parser {\n         }\n     }\n \n+    // matches lifetimes = ( lifetime ) | ( lifetime , lifetimes )\n+    // actually, it matches the empty one too, but putting that in there\n+    // messes up the grammar....\n     fn parse_lifetimes(&self) -> OptVec<ast::Lifetime> {\n         /*!\n          *\n@@ -1081,7 +1084,8 @@ pub impl Parser {\n                 token::GT => { return res; }\n                 token::BINOP(token::SHR) => { return res; }\n                 _ => {\n-                    self.fatal(~\"expected `,` or `>` after lifetime name\");\n+                    self.fatal(fmt!(\"expected `,` or `>` after lifetime name, got: %?\",\n+                                    *self.token));\n                 }\n             }\n         }\n@@ -2741,6 +2745,11 @@ pub impl Parser {\n         if self.eat_keyword(&~\"once\") { ast::Once } else { ast::Many }\n     }\n \n+    // matches optbounds = ( ( : ( boundseq )? )? )\n+    // where   boundseq  = ( bound + boundseq ) | bound\n+    // and     bound     = ( 'static ) | ty\n+    // you might want to insist on the boundseq having seen the colon, but\n+    // that's not currently in place.\n     fn parse_optional_ty_param_bounds(&self) -> @OptVec<TyParamBound> {\n         if !self.eat(&token::COLON) {\n             return @opt_vec::Empty;\n@@ -2801,6 +2810,7 @@ pub impl Parser {\n         return @result;\n     }\n \n+    // matches typaram = IDENT optbounds\n     fn parse_ty_param(&self) -> TyParam {\n         let ident = self.parse_ident();\n         let bounds = self.parse_optional_ty_param_bounds();"}]}