{"sha": "252773af8ba86a644ccf3ff0b0cc06cc3857c7ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1Mjc3M2FmOGJhODZhNjQ0Y2NmM2ZmMGIwY2MwNmNjMzg1N2M3ZWM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-30T00:28:39Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-10T20:02:18Z"}, "message": "Deduplicate logic", "tree": {"sha": "19b2eab8cd3b184d975172ada964caadf8ed7e87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19b2eab8cd3b184d975172ada964caadf8ed7e87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec", "html_url": "https://github.com/rust-lang/rust/commit/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12af2561e9936add8fab4b96ff206b00a5877efe", "url": "https://api.github.com/repos/rust-lang/rust/commits/12af2561e9936add8fab4b96ff206b00a5877efe", "html_url": "https://github.com/rust-lang/rust/commit/12af2561e9936add8fab4b96ff206b00a5877efe"}], "stats": {"total": 199, "additions": 121, "deletions": 78}, "files": [{"sha": "c9d57706d55ea3064701966cad9747dedcce2390", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=252773af8ba86a644ccf3ff0b0cc06cc3857c7ec", "patch": "@@ -70,6 +70,7 @@ use std::{cmp, fmt};\n mod note;\n \n mod need_type_info;\n+pub use need_type_info::TypeAnnotationNeeded;\n \n pub mod nice_region_error;\n "}, {"sha": "98134915b45d9a34d1263ec8cb638c0d909fa823", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=252773af8ba86a644ccf3ff0b0cc06cc3857c7ec", "patch": "@@ -151,6 +151,25 @@ fn closure_args(fn_sig: &ty::PolyFnSig<'_>) -> String {\n         .unwrap_or_default()\n }\n \n+pub enum TypeAnnotationNeeded {\n+    E0282,\n+    E0283,\n+    E0284,\n+}\n+\n+impl Into<errors::DiagnosticId> for TypeAnnotationNeeded {\n+    fn into(self) -> errors::DiagnosticId {\n+        syntax::diagnostic_used!(E0282);\n+        syntax::diagnostic_used!(E0283);\n+        syntax::diagnostic_used!(E0284);\n+        errors::DiagnosticId::Error(match self {\n+            Self::E0282 => \"E0282\".to_string(),\n+            Self::E0283 => \"E0283\".to_string(),\n+            Self::E0284 => \"E0284\".to_string(),\n+        })\n+    }\n+}\n+\n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn extract_type_name(\n         &self,\n@@ -181,7 +200,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         body_id: Option<hir::BodyId>,\n         span: Span,\n         ty: Ty<'tcx>,\n-        is_projection: bool,\n+        error_code: TypeAnnotationNeeded,\n     ) -> DiagnosticBuilder<'tcx> {\n         let ty = self.resolve_vars_if_possible(&ty);\n         let (name, name_sp) = self.extract_type_name(&ty, None);\n@@ -217,7 +236,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             // 3 |     let _ = x.sum() as f64;\n             //   |               ^^^ cannot infer type for `S`\n             span\n-        } else if let Some(ExprKind::MethodCall(_, call_span, _)) = local_visitor.found_method_call {\n+        } else if let Some(\n+            ExprKind::MethodCall(_, call_span, _),\n+        ) = local_visitor.found_method_call {\n             // Point at the call instead of the whole expression:\n             // error[E0284]: type annotations needed\n             //  --> file.rs:2:5\n@@ -268,11 +289,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         //   |         consider giving `b` the explicit type `std::result::Result<i32, E>`, where\n         //   |         the type parameter `E` is specified\n         // ```\n-        let mut err = if is_projection {\n-            struct_span_err!(self.tcx.sess, err_span, E0284, \"type annotations needed{}\", ty_msg)\n-        } else {\n-            struct_span_err!(self.tcx.sess, err_span, E0282, \"type annotations needed{}\", ty_msg)\n-        };\n+        let error_code = error_code.into();\n+        let mut err = self.tcx.sess.struct_span_err_with_code(\n+            err_span,\n+            &format!(\"type annotations needed{}\", ty_msg),\n+            error_code,\n+        );\n \n         let suffix = match local_visitor.found_ty {\n             Some(ty::TyS { kind: ty::Closure(def_id, substs), .. }) => {"}, {"sha": "6b9e413be133c519fc3fdaa3fa1b43b1910bfe3d", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 32, "deletions": 40, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=252773af8ba86a644ccf3ff0b0cc06cc3857c7ec", "patch": "@@ -22,6 +22,7 @@ use crate::hir;\n use crate::hir::Node;\n use crate::hir::def_id::DefId;\n use crate::infer::{self, InferCtxt};\n+use crate::infer::error_reporting::TypeAnnotationNeeded::*;\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::session::DiagnosticMessageId;\n use crate::ty::{self, AdtKind, DefIdTree, ToPredicate, ToPolyTraitRef, Ty, TyCtxt, TypeFoldable};\n@@ -1951,7 +1952,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             return;\n         }\n \n-        match predicate {\n+        let mut err = match predicate {\n             ty::Predicate::Trait(ref data) => {\n                 let trait_ref = data.to_poly_trait_ref();\n                 let self_ty = trait_ref.self_ty();\n@@ -1985,73 +1986,64 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 // avoid inundating the user with unnecessary errors, but we now\n                 // check upstream for type errors and dont add the obligations to\n                 // begin with in those cases.\n-                if\n-                    self.tcx.lang_items().sized_trait()\n+                if self.tcx.lang_items().sized_trait()\n                     .map_or(false, |sized_id| sized_id == trait_ref.def_id())\n                 {\n-                    self.need_type_info_err(body_id, span, self_ty, false).emit();\n-                } else {\n-                    let mut err = struct_span_err!(\n-                        self.tcx.sess,\n-                        span,\n-                        E0283,\n-                        \"type annotations needed: cannot resolve `{}`\",\n-                        predicate,\n-                    );\n-                    self.note_obligation_cause(&mut err, obligation);\n-                    err.emit();\n+                    self.need_type_info_err(body_id, span, self_ty, E0282).emit();\n+                    return;\n                 }\n+                let mut err = self.need_type_info_err(body_id, span, self_ty, E0283);\n+                err.note(&format!(\"cannot resolve `{}`\", predicate));\n+                err\n             }\n \n             ty::Predicate::WellFormed(ty) => {\n                 // Same hacky approach as above to avoid deluging user\n                 // with error messages.\n-                if !ty.references_error() && !self.tcx.sess.has_errors() {\n-                    let mut err = self.need_type_info_err(body_id, span, ty, false);\n-                    self.note_obligation_cause(&mut err, obligation);\n-                    err.emit();\n+                if ty.references_error() || self.tcx.sess.has_errors() {\n+                    return;\n                 }\n+                self.need_type_info_err(body_id, span, ty, E0282)\n             }\n \n             ty::Predicate::Subtype(ref data) => {\n                 if data.references_error() || self.tcx.sess.has_errors() {\n                     // no need to overload user in such cases\n-                } else {\n-                    let &SubtypePredicate { a_is_expected: _, a, b } = data.skip_binder();\n-                    // both must be type variables, or the other would've been instantiated\n-                    assert!(a.is_ty_var() && b.is_ty_var());\n-                    let mut err = self.need_type_info_err(body_id, span, a, false);\n-                    self.note_obligation_cause(&mut err, obligation);\n-                    err.emit();\n+                    return\n                 }\n+                let &SubtypePredicate { a_is_expected: _, a, b } = data.skip_binder();\n+                // both must be type variables, or the other would've been instantiated\n+                assert!(a.is_ty_var() && b.is_ty_var());\n+                self.need_type_info_err(body_id, span, a, E0282)\n             }\n             ty::Predicate::Projection(ref data) => {\n                 let trait_ref = data.to_poly_trait_ref(self.tcx);\n                 let self_ty = trait_ref.self_ty();\n                 if predicate.references_error() {\n                     return;\n                 }\n-                let mut err = self.need_type_info_err(body_id, span, self_ty, true);\n+                let mut err = self.need_type_info_err(body_id, span, self_ty, E0284);\n                 err.note(&format!(\"cannot resolve `{}`\", predicate));\n-                self.note_obligation_cause(&mut err, obligation);\n-                err.emit();\n+                err\n             }\n \n             _ => {\n-                if !self.tcx.sess.has_errors() {\n-                    let mut err = struct_span_err!(\n-                        self.tcx.sess,\n-                        span,\n-                        E0284,\n-                        \"type annotations needed: cannot resolve `{}`\",\n-                        predicate,\n-                    );\n-                    err.span_label(span, &format!(\"cannot resolve `{}`\", predicate));\n-                    self.note_obligation_cause(&mut err, obligation);\n-                    err.emit();\n+                if self.tcx.sess.has_errors() {\n+                    return;\n                 }\n+                let mut err = struct_span_err!(\n+                    self.tcx.sess,\n+                    span,\n+                    E0284,\n+                    \"type annotations needed: cannot resolve `{}`\",\n+                    predicate,\n+                );\n+                err.span_label(span, &format!(\"cannot resolve `{}`\", predicate));\n+                err\n             }\n-        }\n+        };\n+        self.note_obligation_cause(&mut err, obligation);\n+        err.emit();\n     }\n \n     /// Returns `true` if the trait predicate may apply for *some* assignment"}, {"sha": "43e7bbcf0c0dcf5a63ae2972dca215862ebbbf96", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=252773af8ba86a644ccf3ff0b0cc06cc3857c7ec", "patch": "@@ -103,6 +103,7 @@ use rustc_index::vec::Idx;\n use rustc_target::spec::abi::Abi;\n use rustc::infer::opaque_types::OpaqueTypeDecl;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n+use rustc::infer::error_reporting::TypeAnnotationNeeded::E0282;\n use rustc::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc::middle::region;\n use rustc::mir::interpret::{ConstValue, GlobalId};\n@@ -5359,7 +5360,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty\n         } else {\n             if !self.is_tainted_by_errors() {\n-                self.need_type_info_err((**self).body_id, sp, ty, false)\n+                self.need_type_info_err((**self).body_id, sp, ty, E0282)\n                     .note(\"type must be known at this point\")\n                     .emit();\n             }"}, {"sha": "35f25b322e053fa3cf11cabecce552d51c793683", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=252773af8ba86a644ccf3ff0b0cc06cc3857c7ec", "patch": "@@ -8,6 +8,7 @@ use rustc::hir;\n use rustc::hir::def_id::{DefId, DefIndex};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::infer::InferCtxt;\n+use rustc::infer::error_reporting::TypeAnnotationNeeded::E0282;\n use rustc::ty::adjustment::{Adjust, Adjustment, PointerCast};\n use rustc::ty::fold::{TypeFoldable, TypeFolder};\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -717,7 +718,7 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n     fn report_error(&self, t: Ty<'tcx>) {\n         if !self.tcx.sess.has_errors() {\n             self.infcx\n-                .need_type_info_err(Some(self.body.id()), self.span.to_span(self.tcx), t, false)\n+                .need_type_info_err(Some(self.body.id()), self.span.to_span(self.tcx), t, E0282)\n                 .emit();\n         }\n     }"}, {"sha": "f9f663af5e2655bce0d3f39d8880e299e11654f9", "filename": "src/test/ui/associated-const/issue-63496.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Fassociated-const%2Fissue-63496.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Fassociated-const%2Fissue-63496.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fissue-63496.rs?ref=252773af8ba86a644ccf3ff0b0cc06cc3857c7ec", "patch": "@@ -2,8 +2,8 @@ trait A {\n     const C: usize;\n \n     fn f() -> ([u8; A::C], [u8; A::C]);\n-    //~^ ERROR: type annotations needed: cannot resolve\n-    //~| ERROR: type annotations needed: cannot resolve\n+    //~^ ERROR: type annotations needed\n+    //~| ERROR: type annotations needed\n }\n \n fn main() {}"}, {"sha": "23916a3ba440c0919623229701881fea5b416ece", "filename": "src/test/ui/associated-const/issue-63496.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Fassociated-const%2Fissue-63496.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Fassociated-const%2Fissue-63496.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fissue-63496.stderr?ref=252773af8ba86a644ccf3ff0b0cc06cc3857c7ec", "patch": "@@ -1,20 +1,24 @@\n-error[E0283]: type annotations needed: cannot resolve `_: A`\n+error[E0283]: type annotations needed\n   --> $DIR/issue-63496.rs:4:21\n    |\n LL |     const C: usize;\n    |     --------------- required by `A::C`\n LL | \n LL |     fn f() -> ([u8; A::C], [u8; A::C]);\n-   |                     ^^^^\n+   |                     ^^^^ cannot infer type\n+   |\n+   = note: cannot resolve `_: A`\n \n-error[E0283]: type annotations needed: cannot resolve `_: A`\n+error[E0283]: type annotations needed\n   --> $DIR/issue-63496.rs:4:33\n    |\n LL |     const C: usize;\n    |     --------------- required by `A::C`\n LL | \n LL |     fn f() -> ([u8; A::C], [u8; A::C]);\n-   |                                 ^^^^\n+   |                                 ^^^^ cannot infer type\n+   |\n+   = note: cannot resolve `_: A`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9c825d593d3e499ef64f9460c2c25d67b613121c", "filename": "src/test/ui/associated-item/issue-48027.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr?ref=252773af8ba86a644ccf3ff0b0cc06cc3857c7ec", "patch": "@@ -7,13 +7,15 @@ LL |     const X: usize;\n LL | impl dyn Bar {}\n    |      ^^^^^^^ the trait `Bar` cannot be made into an object\n \n-error[E0283]: type annotations needed: cannot resolve `_: Bar`\n+error[E0283]: type annotations needed\n   --> $DIR/issue-48027.rs:3:32\n    |\n LL |     const X: usize;\n    |     --------------- required by `Bar::X`\n LL |     fn return_n(&self) -> [u8; Bar::X];\n-   |                                ^^^^^^\n+   |                                ^^^^^^ cannot infer type\n+   |\n+   = note: cannot resolve `_: Bar`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ae5b7c3ae8f67a3e462d9a5e7ec6e0b48b7eb3fc", "filename": "src/test/ui/error-codes/E0283.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr?ref=252773af8ba86a644ccf3ff0b0cc06cc3857c7ec", "patch": "@@ -1,11 +1,13 @@\n-error[E0283]: type annotations needed: cannot resolve `_: Generator`\n+error[E0283]: type annotations needed\n   --> $DIR/E0283.rs:18:21\n    |\n LL |     fn create() -> u32;\n    |     ------------------- required by `Generator::create`\n ...\n LL |     let cont: u32 = Generator::create();\n-   |                     ^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^^^^^^^^^^^^^ cannot infer type\n+   |\n+   = note: cannot resolve `_: Generator`\n \n error: aborting due to previous error\n "}, {"sha": "4002c1eac2e2ad9fb923bd9a65745f458278901a", "filename": "src/test/ui/issues/issue-21974.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr?ref=252773af8ba86a644ccf3ff0b0cc06cc3857c7ec", "patch": "@@ -1,4 +1,4 @@\n-error[E0283]: type annotations needed: cannot resolve `&'a T: Foo`\n+error[E0283]: type annotations needed\n   --> $DIR/issue-21974.rs:10:1\n    |\n LL |   trait Foo {\n@@ -11,7 +11,9 @@ LL | | {\n LL | |     x.foo();\n LL | |     y.foo();\n LL | | }\n-   | |_^\n+   | |_^ cannot infer type for `&'a T`\n+   |\n+   = note: cannot resolve `&'a T: Foo`\n \n error: aborting due to previous error\n "}, {"sha": "22bf513afe89129dd5719c7700da3c2327c0a449", "filename": "src/test/ui/issues/issue-24424.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Fissues%2Fissue-24424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Fissues%2Fissue-24424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24424.rs?ref=252773af8ba86a644ccf3ff0b0cc06cc3857c7ec", "patch": "@@ -2,6 +2,6 @@ trait Trait1<'l0, T0> {}\n trait Trait0<'l0>  {}\n \n impl <'l0, 'l1, T0> Trait1<'l0, T0> for bool where T0 : Trait0<'l0>, T0 : Trait0<'l1> {}\n-//~^ ERROR type annotations needed: cannot resolve `T0: Trait0<'l0>`\n+//~^ ERROR type annotations needed\n \n fn main() {}"}, {"sha": "87214f56a1b4194a0ce77a4b25108cfe421bb335", "filename": "src/test/ui/issues/issue-24424.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr?ref=252773af8ba86a644ccf3ff0b0cc06cc3857c7ec", "patch": "@@ -1,11 +1,13 @@\n-error[E0283]: type annotations needed: cannot resolve `T0: Trait0<'l0>`\n+error[E0283]: type annotations needed\n   --> $DIR/issue-24424.rs:4:1\n    |\n LL | trait Trait0<'l0>  {}\n    | ----------------- required by `Trait0`\n LL | \n LL | impl <'l0, 'l1, T0> Trait1<'l0, T0> for bool where T0 : Trait0<'l0>, T0 : Trait0<'l1> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for `T0`\n+   |\n+   = note: cannot resolve `T0: Trait0<'l0>`\n \n error: aborting due to previous error\n "}, {"sha": "271bc526033d412c97a9ce07602ec94200a41321", "filename": "src/test/ui/issues/issue-29147.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Fissues%2Fissue-29147.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Fissues%2Fissue-29147.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29147.rs?ref=252773af8ba86a644ccf3ff0b0cc06cc3857c7ec", "patch": "@@ -18,5 +18,5 @@ impl Foo for S5<u32> { fn xxx(&self) {} }\n impl Foo for S5<u64> { fn xxx(&self) {} }\n \n fn main() {\n-    let _ = <S5<_>>::xxx; //~ ERROR cannot resolve `S5<_>: Foo`\n+    let _ = <S5<_>>::xxx; //~ ERROR type annotations needed\n }"}, {"sha": "4de6a7c85146da99226d699d8665357fd5df0cc8", "filename": "src/test/ui/issues/issue-29147.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr?ref=252773af8ba86a644ccf3ff0b0cc06cc3857c7ec", "patch": "@@ -1,11 +1,13 @@\n-error[E0283]: type annotations needed: cannot resolve `S5<_>: Foo`\n+error[E0283]: type annotations needed\n   --> $DIR/issue-29147.rs:21:13\n    |\n LL | trait Foo { fn xxx(&self); }\n    |             -------------- required by `Foo::xxx`\n ...\n LL |     let _ = <S5<_>>::xxx;\n-   |             ^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^ cannot infer type for `S5<_>`\n+   |\n+   = note: cannot resolve `S5<_>: Foo`\n \n error: aborting due to previous error\n "}, {"sha": "d99a5772e8a4c7c64098118338b18729b8f0edce", "filename": "src/test/ui/issues/issue-54954.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr?ref=252773af8ba86a644ccf3ff0b0cc06cc3857c7ec", "patch": "@@ -4,14 +4,16 @@ error[E0379]: trait fns cannot be declared const\n LL |     const fn const_val<T: Sized>() -> usize {\n    |     ^^^^^ trait fns cannot be const\n \n-error[E0283]: type annotations needed: cannot resolve `_: Tt`\n+error[E0283]: type annotations needed\n   --> $DIR/issue-54954.rs:3:24\n    |\n LL | const ARR_LEN: usize = Tt::const_val::<[i8; 123]>();\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type\n ...\n LL |     const fn const_val<T: Sized>() -> usize {\n    |              --------- - required by this bound in `Tt::const_val`\n+   |\n+   = note: cannot resolve `_: Tt`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-54954.rs:13:15"}, {"sha": "e4b9b3b53a69e1d897bd891b08d23035825b3d8d", "filename": "src/test/ui/issues/issue-58022.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Fissues%2Fissue-58022.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Fissues%2Fissue-58022.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58022.rs?ref=252773af8ba86a644ccf3ff0b0cc06cc3857c7ec", "patch": "@@ -2,7 +2,7 @@ pub trait Foo: Sized {\n     const SIZE: usize;\n \n     fn new(slice: &[u8; Foo::SIZE]) -> Self;\n-    //~^ ERROR: type annotations needed: cannot resolve `_: Foo`\n+    //~^ ERROR: type annotations needed\n }\n \n pub struct Bar<T: ?Sized>(T);"}, {"sha": "ef0d66d7ad6d122437262c25e0d8902ba486a8fe", "filename": "src/test/ui/issues/issue-58022.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr?ref=252773af8ba86a644ccf3ff0b0cc06cc3857c7ec", "patch": "@@ -4,14 +4,16 @@ error[E0423]: expected function, tuple struct or tuple variant, found trait `Foo\n LL |         Foo(Box::new(*slice))\n    |         ^^^ not a function, tuple struct or tuple variant\n \n-error[E0283]: type annotations needed: cannot resolve `_: Foo`\n+error[E0283]: type annotations needed\n   --> $DIR/issue-58022.rs:4:25\n    |\n LL |     const SIZE: usize;\n    |     ------------------ required by `Foo::SIZE`\n LL | \n LL |     fn new(slice: &[u8; Foo::SIZE]) -> Self;\n-   |                         ^^^^^^^^^\n+   |                         ^^^^^^^^^ cannot infer type\n+   |\n+   = note: cannot resolve `_: Foo`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f9718dac3547d79ac4538dc96c96e6f607a3c90a", "filename": "src/test/ui/traits/trait-static-method-generic-inference.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Ftraits%2Ftrait-static-method-generic-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Ftraits%2Ftrait-static-method-generic-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-static-method-generic-inference.stderr?ref=252773af8ba86a644ccf3ff0b0cc06cc3857c7ec", "patch": "@@ -1,11 +1,13 @@\n-error[E0283]: type annotations needed: cannot resolve `_: base::HasNew<base::Foo>`\n+error[E0283]: type annotations needed\n   --> $DIR/trait-static-method-generic-inference.rs:24:25\n    |\n LL |         fn new() -> T;\n    |         -------------- required by `base::HasNew::new`\n ...\n LL |     let _f: base::Foo = base::HasNew::new();\n-   |                         ^^^^^^^^^^^^^^^^^\n+   |                         ^^^^^^^^^^^^^^^^^ cannot infer type\n+   |\n+   = note: cannot resolve `_: base::HasNew<base::Foo>`\n \n error: aborting due to previous error\n "}, {"sha": "a420515be496d2545fa99d85a91ebe8e68673324", "filename": "src/test/ui/type/type-annotation-needed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.rs?ref=252773af8ba86a644ccf3ff0b0cc06cc3857c7ec", "patch": "@@ -5,4 +5,6 @@ fn foo<T: Into<String>>(x: i32) {}\n fn main() {\n     foo(42);\n     //~^ ERROR type annotations needed\n+    //~| NOTE cannot infer type\n+    //~| NOTE cannot resolve\n }"}, {"sha": "f30bbf6b7db5bda0320653be40836dce9d2463b4", "filename": "src/test/ui/type/type-annotation-needed.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr?ref=252773af8ba86a644ccf3ff0b0cc06cc3857c7ec", "patch": "@@ -1,11 +1,13 @@\n-error[E0283]: type annotations needed: cannot resolve `_: std::convert::Into<std::string::String>`\n+error[E0283]: type annotations needed\n   --> $DIR/type-annotation-needed.rs:6:5\n    |\n LL | fn foo<T: Into<String>>(x: i32) {}\n    |    ---    ------------ required by this bound in `foo`\n ...\n LL |     foo(42);\n-   |     ^^^\n+   |     ^^^ cannot infer type for `T`\n+   |\n+   = note: cannot resolve `_: std::convert::Into<std::string::String>`\n \n error: aborting due to previous error\n "}, {"sha": "f2bfd9ba54103767ca3686859f2f0a94cbf6660f", "filename": "src/test/ui/type/type-check/issue-40294.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr?ref=252773af8ba86a644ccf3ff0b0cc06cc3857c7ec", "patch": "@@ -1,4 +1,4 @@\n-error[E0283]: type annotations needed: cannot resolve `&'a T: Foo`\n+error[E0283]: type annotations needed\n   --> $DIR/issue-40294.rs:5:1\n    |\n LL |   trait Foo: Sized {\n@@ -11,7 +11,9 @@ LL | | {\n LL | |     x.foo();\n LL | |     y.foo();\n LL | | }\n-   | |_^\n+   | |_^ cannot infer type for `&'a T`\n+   |\n+   = note: cannot resolve `&'a T: Foo`\n \n error: aborting due to previous error\n "}]}