{"sha": "d31352961c30a123f2ccdb07d843d23943cf0bc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMTM1Mjk2MWMzMGExMjNmMmNjZGIwN2Q4NDNkMjM5NDNjZjBiYzQ=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-09-01T07:23:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-01T07:23:31Z"}, "message": "Rollup merge of #88551 - inquisitivecrystal:unsafe_cell_raw_get, r=m-ou-se\n\nStabilize `UnsafeCell::raw_get()`\n\nThis PR stabilizes the associated function `UnsafeCell::raw_get()`. The FCP has [already completed](https://github.com/rust-lang/rust/issues/66358#issuecomment-899095068). While there was some discussion about the naming after the close of the FCP, it looks like people have agreed on this name. Still, it would probably be best if a `libs-api` member had a look at this and stated whether more discussion is needed.\n\nWhile I was at it, I added some tests for `UnsafeCell`, because there were barely any.\n\nCloses #66358.", "tree": {"sha": "03e6fbef94561226bddc8055465b0908d00a529b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03e6fbef94561226bddc8055465b0908d00a529b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d31352961c30a123f2ccdb07d843d23943cf0bc4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhLypzCRBK7hj4Ov3rIwAAQX8IAEmpixk8oJAWOP3sjF45UnJr\nuzMC7aP097ZFDP3BSuULwzugeavURhlxYfwXr262EQwl/0kZlnLPovpUB4ifS7ts\nWUT4DfS/6oqQcO3zi5yXUm5PzbVSq/x2Sw9uYTUBtJgxB+nNwu7TJ52UvE1C5YAZ\nosxueJIr7LLWSr1QMiPQ6MV/1Bs8WkUqN8GNnW8u/ZN1FoYhju27GPqdOvNUAMoT\n/x5fF7E0URltCfFoFo7Vbq//K2qYoF9JE/weSTIOj4ylkq9oI3IxpM6U7w2SQ06K\nKepaJYxP3FyhueNzMK9KkbcVwretMVTR0XE07SlULFdsfhMwjQyeDDGEUMbvq/w=\n=MKjK\n-----END PGP SIGNATURE-----\n", "payload": "tree 03e6fbef94561226bddc8055465b0908d00a529b\nparent f436b6d0a714cca5629f49a547622955da09afd9\nparent 227e004d3fda91b72eef2b5e064dcbf3647dc68e\nauthor Mara Bos <m-ou.se@m-ou.se> 1630481011 +0200\ncommitter GitHub <noreply@github.com> 1630481011 +0200\n\nRollup merge of #88551 - inquisitivecrystal:unsafe_cell_raw_get, r=m-ou-se\n\nStabilize `UnsafeCell::raw_get()`\n\nThis PR stabilizes the associated function `UnsafeCell::raw_get()`. The FCP has [already completed](https://github.com/rust-lang/rust/issues/66358#issuecomment-899095068). While there was some discussion about the naming after the close of the FCP, it looks like people have agreed on this name. Still, it would probably be best if a `libs-api` member had a look at this and stated whether more discussion is needed.\n\nWhile I was at it, I added some tests for `UnsafeCell`, because there were barely any.\n\nCloses #66358.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d31352961c30a123f2ccdb07d843d23943cf0bc4", "html_url": "https://github.com/rust-lang/rust/commit/d31352961c30a123f2ccdb07d843d23943cf0bc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d31352961c30a123f2ccdb07d843d23943cf0bc4/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f436b6d0a714cca5629f49a547622955da09afd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f436b6d0a714cca5629f49a547622955da09afd9", "html_url": "https://github.com/rust-lang/rust/commit/f436b6d0a714cca5629f49a547622955da09afd9"}, {"sha": "227e004d3fda91b72eef2b5e064dcbf3647dc68e", "url": "https://api.github.com/repos/rust-lang/rust/commits/227e004d3fda91b72eef2b5e064dcbf3647dc68e", "html_url": "https://github.com/rust-lang/rust/commit/227e004d3fda91b72eef2b5e064dcbf3647dc68e"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "2adf6a549e6417b94349752487b39f76257fa727", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d31352961c30a123f2ccdb07d843d23943cf0bc4/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31352961c30a123f2ccdb07d843d23943cf0bc4/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=d31352961c30a123f2ccdb07d843d23943cf0bc4", "patch": "@@ -1921,7 +1921,7 @@ impl<T: ?Sized> UnsafeCell<T> {\n     }\n \n     /// Gets a mutable pointer to the wrapped value.\n-    /// The difference to [`get`] is that this function accepts a raw pointer,\n+    /// The difference from [`get`] is that this function accepts a raw pointer,\n     /// which is useful to avoid the creation of temporary references.\n     ///\n     /// The result can be cast to a pointer of any kind.\n@@ -1937,7 +1937,6 @@ impl<T: ?Sized> UnsafeCell<T> {\n     /// calling `get` would require creating a reference to uninitialized data:\n     ///\n     /// ```\n-    /// #![feature(unsafe_cell_raw_get)]\n     /// use std::cell::UnsafeCell;\n     /// use std::mem::MaybeUninit;\n     ///\n@@ -1948,7 +1947,7 @@ impl<T: ?Sized> UnsafeCell<T> {\n     /// assert_eq!(uc.into_inner(), 5);\n     /// ```\n     #[inline(always)]\n-    #[unstable(feature = \"unsafe_cell_raw_get\", issue = \"66358\")]\n+    #[stable(feature = \"unsafe_cell_raw_get\", since = \"1.56.0\")]\n     pub const fn raw_get(this: *const Self) -> *mut T {\n         // We can just cast the pointer from `UnsafeCell<T>` to `T` because of\n         // #[repr(transparent)]. This exploits libstd's special status, there is"}, {"sha": "85a006c5d5bef7ebca5a4146ae651a1f5891b298", "filename": "library/core/tests/cell.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d31352961c30a123f2ccdb07d843d23943cf0bc4/library%2Fcore%2Ftests%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31352961c30a123f2ccdb07d843d23943cf0bc4/library%2Fcore%2Ftests%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fcell.rs?ref=d31352961c30a123f2ccdb07d843d23943cf0bc4", "patch": "@@ -2,6 +2,38 @@ use core::cell::*;\n use core::default::Default;\n use std::mem::drop;\n \n+#[test]\n+fn smoketest_unsafe_cell() {\n+    let mut x = UnsafeCell::new(10);\n+    let ref_mut = &mut x;\n+    unsafe {\n+        // The asserts are repeated in order to ensure that `get()`\n+        // is non-mutating.\n+        assert_eq!(*ref_mut.get(), 10);\n+        assert_eq!(*ref_mut.get(), 10);\n+        *ref_mut.get_mut() += 5;\n+        assert_eq!(*ref_mut.get(), 15);\n+        assert_eq!(*ref_mut.get(), 15);\n+        assert_eq!(x.into_inner(), 15);\n+    }\n+}\n+\n+#[test]\n+fn unsafe_cell_raw_get() {\n+    let x = UnsafeCell::new(10);\n+    let ptr = &x as *const UnsafeCell<i32>;\n+    unsafe {\n+        // The asserts are repeated in order to ensure that `raw_get()`\n+        // is non-mutating.\n+        assert_eq!(*UnsafeCell::raw_get(ptr), 10);\n+        assert_eq!(*UnsafeCell::raw_get(ptr), 10);\n+        *UnsafeCell::raw_get(ptr) += 5;\n+        assert_eq!(*UnsafeCell::raw_get(ptr), 15);\n+        assert_eq!(*UnsafeCell::raw_get(ptr), 15);\n+        assert_eq!(x.into_inner(), 15);\n+    }\n+}\n+\n #[test]\n fn smoketest_cell() {\n     let x = Cell::new(10);"}, {"sha": "43c7ec5fad33a70a9cfdd13b797835d00eaee98f", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d31352961c30a123f2ccdb07d843d23943cf0bc4/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31352961c30a123f2ccdb07d843d23943cf0bc4/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=d31352961c30a123f2ccdb07d843d23943cf0bc4", "patch": "@@ -331,7 +331,6 @@\n #![feature(try_reserve)]\n #![feature(try_reserve_kind)]\n #![feature(unboxed_closures)]\n-#![feature(unsafe_cell_raw_get)]\n #![feature(unwrap_infallible)]\n #![feature(vec_into_raw_parts)]\n #![feature(vec_spare_capacity)]"}]}