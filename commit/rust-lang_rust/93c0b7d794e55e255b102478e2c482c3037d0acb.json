{"sha": "93c0b7d794e55e255b102478e2c482c3037d0acb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzYzBiN2Q3OTRlNTVlMjU1YjEwMjQ3OGUyYzQ4MmMzMDM3ZDBhY2I=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-08T16:28:01Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-08T16:28:35Z"}, "message": "resolve 2018 style modules", "tree": {"sha": "434c04f1170115f317c28443b007775fdb3d82e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/434c04f1170115f317c28443b007775fdb3d82e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93c0b7d794e55e255b102478e2c482c3037d0acb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93c0b7d794e55e255b102478e2c482c3037d0acb", "html_url": "https://github.com/rust-lang/rust/commit/93c0b7d794e55e255b102478e2c482c3037d0acb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93c0b7d794e55e255b102478e2c482c3037d0acb/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e096867ada7c298dd9dc533880424c4d9b62cd34", "url": "https://api.github.com/repos/rust-lang/rust/commits/e096867ada7c298dd9dc533880424c4d9b62cd34", "html_url": "https://github.com/rust-lang/rust/commit/e096867ada7c298dd9dc533880424c4d9b62cd34"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "9f144e1396f38860b1627fe0d6e66bae7686c1f1", "filename": "crates/ra_hir/src/module/imp.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/93c0b7d794e55e255b102478e2c482c3037d0acb/crates%2Fra_hir%2Fsrc%2Fmodule%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93c0b7d794e55e255b102478e2c482c3037d0acb/crates%2Fra_hir%2Fsrc%2Fmodule%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule%2Fimp.rs?ref=93c0b7d794e55e255b102478e2c482c3037d0acb", "patch": "@@ -164,26 +164,26 @@ fn resolve_submodule(\n \n     let file_mod = RelativePathBuf::from(format!(\"../{}.rs\", name));\n     let dir_mod = RelativePathBuf::from(format!(\"../{}/mod.rs\", name));\n-    let points_to: Vec<FileId>;\n-    let problem: Option<Problem>;\n-    if is_dir_owner {\n-        points_to = [&file_mod, &dir_mod]\n-            .iter()\n-            .filter_map(|path| file_resolver.resolve(file_id, path))\n-            .collect();\n-        problem = if points_to.is_empty() {\n-            Some(Problem::UnresolvedModule {\n-                candidate: file_mod,\n-            })\n-        } else {\n-            None\n-        }\n+    let file_dir_mod = RelativePathBuf::from(format!(\"../{}/{}.rs\", mod_name, name));\n+    let tmp1;\n+    let tmp2;\n+    let candidates = if is_dir_owner {\n+        tmp1 = [&file_mod, &dir_mod];\n+        tmp1.iter()\n     } else {\n-        points_to = Vec::new();\n-        problem = Some(Problem::NotDirOwner {\n-            move_to: RelativePathBuf::from(format!(\"../{}/mod.rs\", mod_name)),\n-            candidate: file_mod,\n-        });\n-    }\n+        tmp2 = [&file_dir_mod];\n+        tmp2.iter()\n+    };\n+\n+    let points_to = candidates\n+        .filter_map(|path| file_resolver.resolve(file_id, path))\n+        .collect::<Vec<_>>();\n+    let problem = if points_to.is_empty() {\n+        Some(Problem::UnresolvedModule {\n+            candidate: if is_dir_owner { file_mod } else { file_dir_mod },\n+        })\n+    } else {\n+        None\n+    };\n     (points_to, problem)\n }"}]}