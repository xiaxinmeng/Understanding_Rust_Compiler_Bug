{"sha": "5e02151318ddd431aea6d58e23948246c1446044", "node_id": "C_kwDOAAsO6NoAKDVlMDIxNTEzMThkZGQ0MzFhZWE2ZDU4ZTIzOTQ4MjQ2YzE0NDYwNDQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-17T22:29:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-17T22:29:31Z"}, "message": "Auto merge of #89499 - Mark-Simulacrum:with-llvm-13, r=nikic\n\nSplit out LLVM PGO step and use clang 13 to compile LLVM\n\nWe're seeing a PGO version mismatch error in CI logs:\n\n    LLVM Profile Error: Runtime and instrumentation version mismatch : expected 5, but get 7\n\nwhich is likely due to the version bumped here differing from that used by\nrustc.\n\nThis PR fixes this by splitting out the PGO step for LLVM into a separate phase of the pgo.sh script, which nets no change to performance (see [these results](https://perf.rust-lang.org/compare.html?start=c34ac8747ca96d09cb08b8f5adddead826e77c06&end=e272c2af45f40c74dab83948235903ffbe3ad57f)). Then, it follows that up with an upgrade to LLVM/clang version 13 as our bootstrap compiler, which yields the performance improvements for this PR -- around 5%. This depends on the first step here, because otherwise we end up somehow clobbering or otherwise hurting our ability to effectively collect performance data, yielding reductions in performance for a subset of benchmarks -- it is not clear what the cause here was precisely, but the split only costs ~10 minutes and seems worthwhile.", "tree": {"sha": "e9fcb11ec84636b922fec5a652d376a4d8e7d96e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9fcb11ec84636b922fec5a652d376a4d8e7d96e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e02151318ddd431aea6d58e23948246c1446044", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e02151318ddd431aea6d58e23948246c1446044", "html_url": "https://github.com/rust-lang/rust/commit/5e02151318ddd431aea6d58e23948246c1446044", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e02151318ddd431aea6d58e23948246c1446044/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f12ac87296ac61ec002e0243e7ad5a50364da35", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f12ac87296ac61ec002e0243e7ad5a50364da35", "html_url": "https://github.com/rust-lang/rust/commit/1f12ac87296ac61ec002e0243e7ad5a50364da35"}, {"sha": "86608f1796c9335b103b596df53bef03f7fcc303", "url": "https://api.github.com/repos/rust-lang/rust/commits/86608f1796c9335b103b596df53bef03f7fcc303", "html_url": "https://github.com/rust-lang/rust/commit/86608f1796c9335b103b596df53bef03f7fcc303"}], "stats": {"total": 40, "additions": 31, "deletions": 9}, "files": [{"sha": "562be752f846d5971d2c03f8472d2d3fa63b1390", "filename": "src/ci/docker/host-x86_64/dist-x86_64-linux/build-clang.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e02151318ddd431aea6d58e23948246c1446044/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2Fbuild-clang.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5e02151318ddd431aea6d58e23948246c1446044/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2Fbuild-clang.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2Fbuild-clang.sh?ref=5e02151318ddd431aea6d58e23948246c1446044", "patch": "@@ -4,7 +4,7 @@ set -ex\n \n source shared.sh\n \n-LLVM=llvmorg-12.0.1\n+LLVM=llvmorg-13.0.0\n \n mkdir llvm-project\n cd llvm-project"}, {"sha": "29ef13a60fbc431d08c4ea71a81d71b149cbf45b", "filename": "src/ci/pgo.sh", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5e02151318ddd431aea6d58e23948246c1446044/src%2Fci%2Fpgo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5e02151318ddd431aea6d58e23948246c1446044/src%2Fci%2Fpgo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fpgo.sh?ref=5e02151318ddd431aea6d58e23948246c1446044", "patch": "@@ -4,9 +4,13 @@ set -euxo pipefail\n \n rm -rf /tmp/rustc-pgo\n \n+# We collect LLVM profiling information and rustc profiling information in\n+# separate phases. This increases build time -- though not by a huge amount --\n+# but prevents any problems from arising due to different profiling runtimes\n+# being simultaneously linked in.\n+\n python3 ../x.py build --target=$PGO_HOST --host=$PGO_HOST \\\n     --stage 2 library/std \\\n-    --rust-profile-generate=/tmp/rustc-pgo \\\n     --llvm-profile-generate\n \n # Profile libcore compilation in opt-level=0 and opt-level=3\n@@ -15,6 +19,29 @@ RUSTC_BOOTSTRAP=1 ./build/$PGO_HOST/stage2/bin/rustc --edition=2018 \\\n RUSTC_BOOTSTRAP=1 ./build/$PGO_HOST/stage2/bin/rustc --edition=2018 \\\n     --crate-type=lib -Copt-level=3 ../library/core/src/lib.rs\n \n+# Merge the profile data we gathered for LLVM\n+# Note that this uses the profdata from the clang we used to build LLVM,\n+# which likely has a different version than our in-tree clang.\n+/rustroot/bin/llvm-profdata \\\n+    merge -o /tmp/llvm-pgo.profdata ./build/$PGO_HOST/llvm/build/profiles\n+\n+# Rustbuild currently doesn't support rebuilding LLVM when PGO options\n+# change (or any other llvm-related options); so just clear out the relevant\n+# directories ourselves.\n+rm -r ./build/$PGO_HOST/llvm ./build/$PGO_HOST/lld\n+\n+# Okay, LLVM profiling is done, switch to rustc PGO.\n+\n+python3 ../x.py build --target=$PGO_HOST --host=$PGO_HOST \\\n+    --stage 2 library/std \\\n+    --rust-profile-generate=/tmp/rustc-pgo\n+\n+# Profile libcore compilation in opt-level=0 and opt-level=3\n+RUSTC_BOOTSTRAP=1 ./build/$PGO_HOST/stage2/bin/rustc --edition=2018 \\\n+    --crate-type=lib ../library/core/src/lib.rs\n+RUSTC_BOOTSTRAP=1 ./build/$PGO_HOST/stage2/bin/rustc --edition=2018 \\\n+    --crate-type=lib -Copt-level=3 ../library/core/src/lib.rs\n+\n cp -r /tmp/rustc-perf ./\n chown -R $(whoami): ./rustc-perf\n cd rustc-perf\n@@ -46,18 +73,13 @@ cd /checkout/obj\n ./build/$PGO_HOST/llvm/bin/llvm-profdata \\\n     merge -o /tmp/rustc-pgo.profdata /tmp/rustc-pgo\n \n-# Merge the profile data we gathered for LLVM\n-# Note that this uses the profdata from the clang we used to build LLVM,\n-# which likely has a different version than our in-tree clang.\n-/rustroot/bin/llvm-profdata \\\n-    merge -o /tmp/llvm-pgo.profdata ./build/$PGO_HOST/llvm/build/profiles\n-\n # Rustbuild currently doesn't support rebuilding LLVM when PGO options\n # change (or any other llvm-related options); so just clear out the relevant\n # directories ourselves.\n rm -r ./build/$PGO_HOST/llvm ./build/$PGO_HOST/lld\n \n-# This produces the actual final set of artifacts.\n+# This produces the actual final set of artifacts, using both the LLVM and rustc\n+# collected profiling data.\n $@ \\\n     --rust-profile-use=/tmp/rustc-pgo.profdata \\\n     --llvm-profile-use=/tmp/llvm-pgo.profdata"}]}