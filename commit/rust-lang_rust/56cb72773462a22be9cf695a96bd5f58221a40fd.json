{"sha": "56cb72773462a22be9cf695a96bd5f58221a40fd", "node_id": "C_kwDOAAsO6NoAKDU2Y2I3Mjc3MzQ2MmEyMmJlOWNmNjk1YTk2YmQ1ZjU4MjIxYTQwZmQ", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-27T11:36:10Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-27T11:36:10Z"}, "message": "Sync from rust 18890f05f6cea40fd25bb4bb9aa6f7372b69f641", "tree": {"sha": "fda3e0f86553906376ea818d06973a66c7be8f44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fda3e0f86553906376ea818d06973a66c7be8f44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56cb72773462a22be9cf695a96bd5f58221a40fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56cb72773462a22be9cf695a96bd5f58221a40fd", "html_url": "https://github.com/rust-lang/rust/commit/56cb72773462a22be9cf695a96bd5f58221a40fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56cb72773462a22be9cf695a96bd5f58221a40fd/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "598f0909568a51de8a2d1148f55a644fd8dffad0", "url": "https://api.github.com/repos/rust-lang/rust/commits/598f0909568a51de8a2d1148f55a644fd8dffad0", "html_url": "https://github.com/rust-lang/rust/commit/598f0909568a51de8a2d1148f55a644fd8dffad0"}, {"sha": "02d5f7fa4d693824d097f5f99f6a56f835f11d47", "url": "https://api.github.com/repos/rust-lang/rust/commits/02d5f7fa4d693824d097f5f99f6a56f835f11d47", "html_url": "https://github.com/rust-lang/rust/commit/02d5f7fa4d693824d097f5f99f6a56f835f11d47"}], "stats": {"total": 265, "additions": 260, "deletions": 5}, "files": [{"sha": "50249ea1bdb493e08815b1f81c373c4a1d4937db", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56cb72773462a22be9cf695a96bd5f58221a40fd/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/56cb72773462a22be9cf695a96bd5f58221a40fd/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=56cb72773462a22be9cf695a96bd5f58221a40fd", "patch": "@@ -333,7 +333,6 @@ dependencies = [\n  \"cranelift-frontend\",\n  \"cranelift-jit\",\n  \"cranelift-module\",\n- \"cranelift-native\",\n  \"cranelift-object\",\n  \"gimli\",\n  \"indexmap\","}, {"sha": "34117c2886febae43ecebb4f93cc498b2555ed58", "filename": "Cargo.toml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56cb72773462a22be9cf695a96bd5f58221a40fd/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/56cb72773462a22be9cf695a96bd5f58221a40fd/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=56cb72773462a22be9cf695a96bd5f58221a40fd", "patch": "@@ -18,7 +18,9 @@ crate-type = [\"dylib\"]\n cranelift-codegen = { version = \"0.92\", features = [\"unwind\", \"all-arch\"] }\n cranelift-frontend = { version = \"0.92\" }\n cranelift-module = { version = \"0.92\" }\n-cranelift-native = { version = \"0.92\" }\n+# NOTE vendored as src/cranelift_native.rs\n+# FIXME revert back to the external crate with Cranelift 0.93\n+#cranelift-native = { version = \"0.92\" }\n cranelift-jit = { version = \"0.92\", optional = true }\n cranelift-object = { version = \"0.92\" }\n target-lexicon = \"0.12.0\""}, {"sha": "f41af3a9e636631949be8a616b799a3dfc6644c8", "filename": "src/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56cb72773462a22be9cf695a96bd5f58221a40fd/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56cb72773462a22be9cf695a96bd5f58221a40fd/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=56cb72773462a22be9cf695a96bd5f58221a40fd", "patch": "@@ -35,7 +35,8 @@ pub(crate) fn scalar_to_clif_type(tcx: TyCtxt<'_>, scalar: Scalar) -> Type {\n         },\n         Primitive::F32 => types::F32,\n         Primitive::F64 => types::F64,\n-        Primitive::Pointer => pointer_ty(tcx),\n+        // FIXME(erikdesjardins): handle non-default addrspace ptr sizes\n+        Primitive::Pointer(_) => pointer_ty(tcx),\n     }\n }\n "}, {"sha": "6c4efca442448a700d77e946edb926ab02e8ced9", "filename": "src/cranelift_native.rs", "status": "added", "additions": 248, "deletions": 0, "changes": 248, "blob_url": "https://github.com/rust-lang/rust/blob/56cb72773462a22be9cf695a96bd5f58221a40fd/src%2Fcranelift_native.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56cb72773462a22be9cf695a96bd5f58221a40fd/src%2Fcranelift_native.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcranelift_native.rs?ref=56cb72773462a22be9cf695a96bd5f58221a40fd", "patch": "@@ -0,0 +1,248 @@\n+// Vendored from https://github.com/bytecodealliance/wasmtime/blob/b58a197d33f044193c3d608010f5e6ec394ac07e/cranelift/native/src/lib.rs\n+// which is licensed as\n+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n+// unlike rustc_codegen_cranelift itself. Also applies a small change to remove #![cfg_attr] that\n+// rust's CI complains about and to fix formatting to match rustc.\n+// FIXME revert back to the external crate with Cranelift 0.93\n+#![allow(warnings)]\n+\n+//! Performs autodetection of the host for the purposes of running\n+//! Cranelift to generate code to run on the same machine.\n+\n+#![deny(missing_docs, trivial_numeric_casts, unused_extern_crates, unstable_features)]\n+#![warn(unused_import_braces)]\n+\n+use cranelift_codegen::isa;\n+use target_lexicon::Triple;\n+\n+/// Return an `isa` builder configured for the current host\n+/// machine, or `Err(())` if the host machine is not supported\n+/// in the current configuration.\n+pub fn builder() -> Result<isa::Builder, &'static str> {\n+    builder_with_options(true)\n+}\n+\n+/// Return an `isa` builder configured for the current host\n+/// machine, or `Err(())` if the host machine is not supported\n+/// in the current configuration.\n+///\n+/// Selects the given backend variant specifically; this is\n+/// useful when more than oen backend exists for a given target\n+/// (e.g., on x86-64).\n+pub fn builder_with_options(infer_native_flags: bool) -> Result<isa::Builder, &'static str> {\n+    let mut isa_builder = isa::lookup(Triple::host()).map_err(|err| match err {\n+        isa::LookupError::SupportDisabled => \"support for architecture disabled at compile time\",\n+        isa::LookupError::Unsupported => \"unsupported architecture\",\n+    })?;\n+\n+    #[cfg(target_arch = \"x86_64\")]\n+    {\n+        use cranelift_codegen::settings::Configurable;\n+\n+        if !std::is_x86_feature_detected!(\"sse2\") {\n+            return Err(\"x86 support requires SSE2\");\n+        }\n+\n+        if !infer_native_flags {\n+            return Ok(isa_builder);\n+        }\n+\n+        // These are temporarily enabled by default (see #3810 for\n+        // more) so that a default-constructed `Flags` can work with\n+        // default Wasmtime features. Otherwise, the user must\n+        // explicitly use native flags or turn these on when on x86-64\n+        // platforms to avoid a configuration panic. In order for the\n+        // \"enable if detected\" logic below to work, we must turn them\n+        // *off* (differing from the default) and then re-enable below\n+        // if present.\n+        isa_builder.set(\"has_sse3\", \"false\").unwrap();\n+        isa_builder.set(\"has_ssse3\", \"false\").unwrap();\n+        isa_builder.set(\"has_sse41\", \"false\").unwrap();\n+        isa_builder.set(\"has_sse42\", \"false\").unwrap();\n+\n+        if std::is_x86_feature_detected!(\"sse3\") {\n+            isa_builder.enable(\"has_sse3\").unwrap();\n+        }\n+        if std::is_x86_feature_detected!(\"ssse3\") {\n+            isa_builder.enable(\"has_ssse3\").unwrap();\n+        }\n+        if std::is_x86_feature_detected!(\"sse4.1\") {\n+            isa_builder.enable(\"has_sse41\").unwrap();\n+        }\n+        if std::is_x86_feature_detected!(\"sse4.2\") {\n+            isa_builder.enable(\"has_sse42\").unwrap();\n+        }\n+        if std::is_x86_feature_detected!(\"popcnt\") {\n+            isa_builder.enable(\"has_popcnt\").unwrap();\n+        }\n+        if std::is_x86_feature_detected!(\"avx\") {\n+            isa_builder.enable(\"has_avx\").unwrap();\n+        }\n+        if std::is_x86_feature_detected!(\"avx2\") {\n+            isa_builder.enable(\"has_avx2\").unwrap();\n+        }\n+        if std::is_x86_feature_detected!(\"fma\") {\n+            isa_builder.enable(\"has_fma\").unwrap();\n+        }\n+        if std::is_x86_feature_detected!(\"bmi1\") {\n+            isa_builder.enable(\"has_bmi1\").unwrap();\n+        }\n+        if std::is_x86_feature_detected!(\"bmi2\") {\n+            isa_builder.enable(\"has_bmi2\").unwrap();\n+        }\n+        if std::is_x86_feature_detected!(\"avx512bitalg\") {\n+            isa_builder.enable(\"has_avx512bitalg\").unwrap();\n+        }\n+        if std::is_x86_feature_detected!(\"avx512dq\") {\n+            isa_builder.enable(\"has_avx512dq\").unwrap();\n+        }\n+        if std::is_x86_feature_detected!(\"avx512f\") {\n+            isa_builder.enable(\"has_avx512f\").unwrap();\n+        }\n+        if std::is_x86_feature_detected!(\"avx512vl\") {\n+            isa_builder.enable(\"has_avx512vl\").unwrap();\n+        }\n+        if std::is_x86_feature_detected!(\"avx512vbmi\") {\n+            isa_builder.enable(\"has_avx512vbmi\").unwrap();\n+        }\n+        if std::is_x86_feature_detected!(\"lzcnt\") {\n+            isa_builder.enable(\"has_lzcnt\").unwrap();\n+        }\n+    }\n+\n+    #[cfg(target_arch = \"aarch64\")]\n+    {\n+        use cranelift_codegen::settings::Configurable;\n+\n+        if !infer_native_flags {\n+            return Ok(isa_builder);\n+        }\n+\n+        if std::arch::is_aarch64_feature_detected!(\"lse\") {\n+            isa_builder.enable(\"has_lse\").unwrap();\n+        }\n+\n+        if std::arch::is_aarch64_feature_detected!(\"paca\") {\n+            isa_builder.enable(\"has_pauth\").unwrap();\n+        }\n+\n+        if cfg!(target_os = \"macos\") {\n+            // Pointer authentication is always available on Apple Silicon.\n+            isa_builder.enable(\"sign_return_address\").unwrap();\n+            // macOS enforces the use of the B key for return addresses.\n+            isa_builder.enable(\"sign_return_address_with_bkey\").unwrap();\n+        }\n+    }\n+\n+    // There is no is_s390x_feature_detected macro yet, so for now\n+    // we use getauxval from the libc crate directly.\n+    #[cfg(all(target_arch = \"s390x\", target_os = \"linux\"))]\n+    {\n+        use cranelift_codegen::settings::Configurable;\n+\n+        if !infer_native_flags {\n+            return Ok(isa_builder);\n+        }\n+\n+        let v = unsafe { libc::getauxval(libc::AT_HWCAP) };\n+        const HWCAP_S390X_VXRS_EXT2: libc::c_ulong = 32768;\n+        if (v & HWCAP_S390X_VXRS_EXT2) != 0 {\n+            isa_builder.enable(\"has_vxrs_ext2\").unwrap();\n+            // There is no separate HWCAP bit for mie2, so assume\n+            // that any machine with vxrs_ext2 also has mie2.\n+            isa_builder.enable(\"has_mie2\").unwrap();\n+        }\n+    }\n+\n+    // `is_riscv_feature_detected` is nightly only for now, use\n+    // getauxval from the libc crate directly as a temporary measure.\n+    #[cfg(all(target_arch = \"riscv64\", target_os = \"linux\"))]\n+    {\n+        use cranelift_codegen::settings::Configurable;\n+\n+        if !infer_native_flags {\n+            return Ok(isa_builder);\n+        }\n+\n+        let v = unsafe { libc::getauxval(libc::AT_HWCAP) };\n+\n+        const HWCAP_RISCV_EXT_A: libc::c_ulong = 1 << (b'a' - b'a');\n+        const HWCAP_RISCV_EXT_C: libc::c_ulong = 1 << (b'c' - b'a');\n+        const HWCAP_RISCV_EXT_D: libc::c_ulong = 1 << (b'd' - b'a');\n+        const HWCAP_RISCV_EXT_F: libc::c_ulong = 1 << (b'f' - b'a');\n+        const HWCAP_RISCV_EXT_M: libc::c_ulong = 1 << (b'm' - b'a');\n+        const HWCAP_RISCV_EXT_V: libc::c_ulong = 1 << (b'v' - b'a');\n+\n+        if (v & HWCAP_RISCV_EXT_A) != 0 {\n+            isa_builder.enable(\"has_a\").unwrap();\n+        }\n+\n+        if (v & HWCAP_RISCV_EXT_C) != 0 {\n+            isa_builder.enable(\"has_c\").unwrap();\n+        }\n+\n+        if (v & HWCAP_RISCV_EXT_D) != 0 {\n+            isa_builder.enable(\"has_d\").unwrap();\n+        }\n+\n+        if (v & HWCAP_RISCV_EXT_F) != 0 {\n+            isa_builder.enable(\"has_f\").unwrap();\n+\n+            // TODO: There doesn't seem to be a bit associated with this extension\n+            // rust enables it with the `f` extension:\n+            // https://github.com/rust-lang/stdarch/blob/790411f93c4b5eada3c23abb4c9a063fb0b24d99/crates/std_detect/src/detect/os/linux/riscv.rs#L43\n+            isa_builder.enable(\"has_zicsr\").unwrap();\n+        }\n+\n+        if (v & HWCAP_RISCV_EXT_M) != 0 {\n+            isa_builder.enable(\"has_m\").unwrap();\n+        }\n+\n+        if (v & HWCAP_RISCV_EXT_V) != 0 {\n+            isa_builder.enable(\"has_v\").unwrap();\n+        }\n+\n+        // TODO: ZiFencei does not have a bit associated with it\n+        // TODO: Zbkb does not have a bit associated with it\n+    }\n+\n+    // squelch warnings about unused mut/variables on some platforms.\n+    drop(&mut isa_builder);\n+    drop(infer_native_flags);\n+\n+    Ok(isa_builder)\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::builder;\n+    use cranelift_codegen::isa::CallConv;\n+    use cranelift_codegen::settings;\n+\n+    #[test]\n+    fn test() {\n+        if let Ok(isa_builder) = builder() {\n+            let flag_builder = settings::builder();\n+            let isa = isa_builder.finish(settings::Flags::new(flag_builder)).unwrap();\n+\n+            if cfg!(all(target_os = \"macos\", target_arch = \"aarch64\")) {\n+                assert_eq!(isa.default_call_conv(), CallConv::AppleAarch64);\n+            } else if cfg!(any(unix, target_os = \"nebulet\")) {\n+                assert_eq!(isa.default_call_conv(), CallConv::SystemV);\n+            } else if cfg!(windows) {\n+                assert_eq!(isa.default_call_conv(), CallConv::WindowsFastcall);\n+            }\n+\n+            if cfg!(target_pointer_width = \"64\") {\n+                assert_eq!(isa.pointer_bits(), 64);\n+            } else if cfg!(target_pointer_width = \"32\") {\n+                assert_eq!(isa.pointer_bits(), 32);\n+            } else if cfg!(target_pointer_width = \"16\") {\n+                assert_eq!(isa.pointer_bits(), 16);\n+            }\n+        }\n+    }\n+}\n+\n+/// Version number of this crate.\n+pub const VERSION: &str = env!(\"CARGO_PKG_VERSION\");"}, {"sha": "d561cf139b6c9bca3ac97f0d985f006383916322", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/56cb72773462a22be9cf695a96bd5f58221a40fd/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56cb72773462a22be9cf695a96bd5f58221a40fd/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=56cb72773462a22be9cf695a96bd5f58221a40fd", "patch": "@@ -21,6 +21,7 @@ mod simd;\n pub(crate) use cpuid::codegen_cpuid_call;\n pub(crate) use llvm::codegen_llvm_intrinsic_call;\n \n+use rustc_middle::ty::layout::HasParamEnv;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -658,7 +659,9 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 return;\n             }\n \n-            if intrinsic == sym::assert_zero_valid && !fx.tcx.permits_zero_init(layout) {\n+            if intrinsic == sym::assert_zero_valid\n+                && !fx.tcx.permits_zero_init(fx.param_env().and(layout))\n+            {\n                 with_no_trimmed_paths!({\n                     crate::base::codegen_panic_nounwind(\n                         fx,\n@@ -673,7 +676,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             }\n \n             if intrinsic == sym::assert_mem_uninitialized_valid\n-                && !fx.tcx.permits_uninit_init(layout)\n+                && !fx.tcx.permits_uninit_init(fx.param_env().and(layout))\n             {\n                 with_no_trimmed_paths!({\n                     crate::base::codegen_panic_nounwind("}, {"sha": "d3868730557b7e1e4da40a9f684e78be375dcd49", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56cb72773462a22be9cf695a96bd5f58221a40fd/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56cb72773462a22be9cf695a96bd5f58221a40fd/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=56cb72773462a22be9cf695a96bd5f58221a40fd", "patch": "@@ -57,6 +57,8 @@ mod compiler_builtins;\n mod concurrency_limiter;\n mod config;\n mod constant;\n+// FIXME revert back to the external crate with Cranelift 0.93\n+mod cranelift_native;\n mod debuginfo;\n mod discriminant;\n mod driver;"}]}