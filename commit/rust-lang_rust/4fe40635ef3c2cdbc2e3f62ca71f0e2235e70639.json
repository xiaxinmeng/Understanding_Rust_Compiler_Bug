{"sha": "4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZTQwNjM1ZWYzYzJjZGJjMmUzZjYyY2E3MWYwZTIyMzVlNzA2Mzk=", "commit": {"author": {"name": "Sebastian Malton", "email": "sebastian@malton.name", "date": "2018-06-04T03:31:49Z"}, "committer": {"name": "Jake Goulding", "email": "jake.goulding@gmail.com", "date": "2018-06-05T14:19:21Z"}, "message": "Implementation of RFC 2086 - Allow Irrefutable Let patterns", "tree": {"sha": "94089961baf76e9fd6ad1ce82c65de281bc74c52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94089961baf76e9fd6ad1ce82c65de281bc74c52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639", "html_url": "https://github.com/rust-lang/rust/commit/4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639/comments", "author": {"login": "Nokel81", "id": 8225332, "node_id": "MDQ6VXNlcjgyMjUzMzI=", "avatar_url": "https://avatars.githubusercontent.com/u/8225332?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nokel81", "html_url": "https://github.com/Nokel81", "followers_url": "https://api.github.com/users/Nokel81/followers", "following_url": "https://api.github.com/users/Nokel81/following{/other_user}", "gists_url": "https://api.github.com/users/Nokel81/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nokel81/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nokel81/subscriptions", "organizations_url": "https://api.github.com/users/Nokel81/orgs", "repos_url": "https://api.github.com/users/Nokel81/repos", "events_url": "https://api.github.com/users/Nokel81/events{/privacy}", "received_events_url": "https://api.github.com/users/Nokel81/received_events", "type": "User", "site_admin": false}, "committer": {"login": "shepmaster", "id": 174509, "node_id": "MDQ6VXNlcjE3NDUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/174509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shepmaster", "html_url": "https://github.com/shepmaster", "followers_url": "https://api.github.com/users/shepmaster/followers", "following_url": "https://api.github.com/users/shepmaster/following{/other_user}", "gists_url": "https://api.github.com/users/shepmaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/shepmaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shepmaster/subscriptions", "organizations_url": "https://api.github.com/users/shepmaster/orgs", "repos_url": "https://api.github.com/users/shepmaster/repos", "events_url": "https://api.github.com/users/shepmaster/events{/privacy}", "received_events_url": "https://api.github.com/users/shepmaster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4122885e0f99b3f28e65c122cde48de5bfc8231a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4122885e0f99b3f28e65c122cde48de5bfc8231a", "html_url": "https://github.com/rust-lang/rust/commit/4122885e0f99b3f28e65c122cde48de5bfc8231a"}], "stats": {"total": 161, "additions": 139, "deletions": 22}, "files": [{"sha": "13681c96811f9cb83427ca2738ede29cd094ee0f", "filename": "src/doc/unstable-book/src/language-features/irrefutable-let-pattern.md", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Firrefutable-let-pattern.md", "raw_url": "https://github.com/rust-lang/rust/raw/4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Firrefutable-let-pattern.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Firrefutable-let-pattern.md?ref=4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639", "patch": "@@ -0,0 +1,23 @@\n+# `irrefutable_let_pattern`\n+\n+The tracking issue for this feature is: [#44495]\n+\n+[#44495]: https://github.com/rust-lang/rust/issues/44495\n+\n+------------------------\n+\n+This feature changes the way that the irrefutable pattern is handled\n+in the `if let` and `while let` forms. The old way was to always error\n+but now with a tag the error-by-default lint can be switched off.\n+\n+```rust\n+#![feature(irrefutable_let_pattern)]\n+\n+fn main() {\n+    #[allow(irrefutable_let_pattern)]\n+    if let _ = 5 {}\n+\n+    #[allow(irrefutable_let_pattern)]\n+    while let _ = 5 {}\n+}\n+```"}, {"sha": "d42567c6678c9f70066802a16e2a05191f1e6cbf", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639", "patch": "@@ -273,6 +273,12 @@ declare_lint! {\n     \"detects name collision with an existing but unstable method\"\n }\n \n+declare_lint! {\n+    pub IRREFUTABLE_LET_PATTERNS,\n+    Deny,\n+    \"detects irrefutable patterns in if-let and while-let statements\"\n+}\n+\n declare_lint! {\n     pub UNUSED_LABELS,\n     Allow,\n@@ -336,6 +342,7 @@ impl LintPass for HardwiredLints {\n             BARE_TRAIT_OBJECTS,\n             ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,\n             UNSTABLE_NAME_COLLISIONS,\n+            IRREFUTABLE_LET_PATTERNS,\n             DUPLICATE_ASSOCIATED_TYPE_BINDINGS,\n         )\n     }"}, {"sha": "d5d69bf7f2b4baa405b3dca9b41f088dfa80be46", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 35, "deletions": 22, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639", "patch": "@@ -369,43 +369,56 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                 NotUseful => {\n                     match source {\n                         hir::MatchSource::IfLetDesugar { .. } => {\n-                            if printed_if_let_err {\n-                                // we already printed an irrefutable if-let pattern error.\n-                                // We don't want two, that's just confusing.\n+                            if cx.tcx.features().irrefutable_let_pattern {\n+                                cx.tcx.lint_node(\n+                                    lint::builtin::IRREFUTABLE_LET_PATTERNS,\n+                                    hir_pat.id, pat.span,\n+                                    \"irrefutable if-let pattern\");\n                             } else {\n-                                // find the first arm pattern so we can use its span\n-                                let &(ref first_arm_pats, _) = &arms[0];\n-                                let first_pat = &first_arm_pats[0];\n-                                let span = first_pat.0.span;\n-                                struct_span_err!(cx.tcx.sess, span, E0162,\n-                                                \"irrefutable if-let pattern\")\n-                                    .span_label(span, \"irrefutable pattern\")\n-                                    .emit();\n-                                printed_if_let_err = true;\n+                                if printed_if_let_err {\n+                                    // we already printed an irrefutable if-let pattern error.\n+                                    // We don't want two, that's just confusing.\n+                                } else {\n+                                    // find the first arm pattern so we can use its span\n+                                    let &(ref first_arm_pats, _) = &arms[0];\n+                                    let first_pat = &first_arm_pats[0];\n+                                    let span = first_pat.0.span;\n+                                    struct_span_err!(cx.tcx.sess, span, E0162,\n+                                                    \"irrefutable if-let pattern\")\n+                                        .span_label(span, \"irrefutable pattern\")\n+                                        .emit();\n+                                    printed_if_let_err = true;\n+                                }\n                             }\n                         },\n \n                         hir::MatchSource::WhileLetDesugar => {\n-                            // find the first arm pattern so we can use its span\n-                            let &(ref first_arm_pats, _) = &arms[0];\n-                            let first_pat = &first_arm_pats[0];\n-                            let span = first_pat.0.span;\n-\n                             // check which arm we're on.\n                             match arm_index {\n                                 // The arm with the user-specified pattern.\n                                 0 => {\n                                     cx.tcx.lint_node(\n-                                            lint::builtin::UNREACHABLE_PATTERNS,\n+                                        lint::builtin::UNREACHABLE_PATTERNS,\n                                         hir_pat.id, pat.span,\n                                         \"unreachable pattern\");\n                                 },\n                                 // The arm with the wildcard pattern.\n                                 1 => {\n-                                    struct_span_err!(cx.tcx.sess, span, E0165,\n-                                                     \"irrefutable while-let pattern\")\n-                                        .span_label(span, \"irrefutable pattern\")\n-                                        .emit();\n+                                    if cx.tcx.features().irrefutable_let_pattern {\n+                                        cx.tcx.lint_node(\n+                                            lint::builtin::IRREFUTABLE_LET_PATTERNS,\n+                                            hir_pat.id, pat.span,\n+                                            \"irrefutable while-let pattern\");\n+                                    } else {\n+                                        // find the first arm pattern so we can use its span\n+                                        let &(ref first_arm_pats, _) = &arms[0];\n+                                        let first_pat = &first_arm_pats[0];\n+                                        let span = first_pat.0.span;\n+                                        struct_span_err!(cx.tcx.sess, span, E0165,\n+                                                         \"irrefutable while-let pattern\")\n+                                            .span_label(span, \"irrefutable pattern\")\n+                                            .emit();\n+                                    }\n                                 },\n                                 _ => bug!(),\n                             }"}, {"sha": "f08a404a02a56efe983cbf2db6906316345ba611", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639", "patch": "@@ -467,6 +467,9 @@ declare_features! (\n     // Scoped attributes\n     (active, tool_attributes, \"1.25.0\", Some(44690), None),\n \n+    // allow irrefutable patterns in if-let and while-let statements (RFC 2086)\n+    (active, irrefutable_let_pattern, \"1.27.0\", Some(44495), None),\n+\n     // Allows use of the :literal macro fragment specifier (RFC 1576)\n     (active, macro_literal_matcher, \"1.27.0\", Some(35625), None),\n "}, {"sha": "1facb6b152af34a2db8036af080ca1ec4f2d5ca8", "filename": "src/test/compile-fail/feature-gate-without_gate_irrefutable_pattern.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639/src%2Ftest%2Fcompile-fail%2Ffeature-gate-without_gate_irrefutable_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639/src%2Ftest%2Fcompile-fail%2Ffeature-gate-without_gate_irrefutable_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-without_gate_irrefutable_pattern.rs?ref=4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639", "patch": "@@ -0,0 +1,17 @@\n+// gate-test-irrefutable_let_pattern\n+\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    #[allow(irrefutable_let_pattern)]\n+    if let _ = 5 {}\n+    //~^ ERROR 15:12: 15:13: irrefutable if-let pattern [E0162]\n+}"}, {"sha": "71dcbf329c7702fb39a0e53d8540a8f5c2f6a2c4", "filename": "src/test/compile-fail/should-fail-no_gate_irrefutable_if_let_pattern.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639/src%2Ftest%2Fcompile-fail%2Fshould-fail-no_gate_irrefutable_if_let_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639/src%2Ftest%2Fcompile-fail%2Fshould-fail-no_gate_irrefutable_if_let_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fshould-fail-no_gate_irrefutable_if_let_pattern.rs?ref=4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// should-fail-irrefutable_let_pattern\n+fn main() {\n+    if let _ = 5 {}\n+    //~^ ERROR irrefutable if-let pattern [E0162]\n+}"}, {"sha": "2f9b7f0628d7d408aa5b64c50f06f4a8fb573cd4", "filename": "src/test/compile-fail/should-fail-with_gate_irrefutable_pattern_deny.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639/src%2Ftest%2Fcompile-fail%2Fshould-fail-with_gate_irrefutable_pattern_deny.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639/src%2Ftest%2Fcompile-fail%2Fshould-fail-with_gate_irrefutable_pattern_deny.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fshould-fail-with_gate_irrefutable_pattern_deny.rs?ref=4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(irrefutable_let_pattern)]\n+\n+// should-fail-irrefutable_let_pattern_with_gate\n+fn main() {\n+    if let _ = 5 {}\n+    //~^ ERROR irrefutable if-let pattern [irrefutable_let_pattern]\n+}"}, {"sha": "3a4f226dfe653d91ab756d02fc26af6a5198f71b", "filename": "src/test/run-pass/allow_irrefutable_let_patterns.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639/src%2Ftest%2Frun-pass%2Fallow_irrefutable_let_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639/src%2Ftest%2Frun-pass%2Fallow_irrefutable_let_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fallow_irrefutable_let_patterns.rs?ref=4fe40635ef3c2cdbc2e3f62ca71f0e2235e70639", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(irrefutable_let_pattern)]\n+\n+// must-compile-successfully-irrefutable_let_pattern_with_gate\n+fn main() {\n+    #[allow(irrefutable_let_pattern)]\n+    if let _ = 5 {}\n+\n+    #[allow(irrefutable_let_pattern)]\n+    while let _ = 5 {\n+        break;\n+    }\n+}"}]}