{"sha": "aaac69f78e6a9f0ee52b41969d81f4bb79da6418", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhYWM2OWY3OGU2YTlmMGVlNTJiNDE5NjlkODFmNGJiNzlkYTY0MTg=", "commit": {"author": {"name": "Maxwell Powlison", "email": "bobdavelisafrank@protonmail.com", "date": "2018-03-16T07:41:53Z"}, "committer": {"name": "Maxwell Powlison", "email": "bobdavelisafrank@protonmail.com", "date": "2018-03-16T07:41:53Z"}, "message": "Fix Issue #48345, is_file, is_dir, and is_symlink note mutual exclusion\n\nThe methods on the structures `fs::FileType` and `fs::Metadata` of (respectively) `is_file`, `is_dir`, and\n`is_symlink` had some ambiguity in documentation, where it was not noted whether files will pass those tests\nexclusively or not. It is now written that the tests are mutually exclusive.\n\nFixes #48345.", "tree": {"sha": "3d34eeed6149a2b909f4b75baa8518e691666eda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d34eeed6149a2b909f4b75baa8518e691666eda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaac69f78e6a9f0ee52b41969d81f4bb79da6418", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaac69f78e6a9f0ee52b41969d81f4bb79da6418", "html_url": "https://github.com/rust-lang/rust/commit/aaac69f78e6a9f0ee52b41969d81f4bb79da6418", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaac69f78e6a9f0ee52b41969d81f4bb79da6418/comments", "author": null, "committer": null, "parents": [{"sha": "a7170b0412d1baa4e30cb31d1ea326617021f086", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7170b0412d1baa4e30cb31d1ea326617021f086", "html_url": "https://github.com/rust-lang/rust/commit/a7170b0412d1baa4e30cb31d1ea326617021f086"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "5caa703ee97e39e39de31cebd90b6b3b6ebad7a8", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/aaac69f78e6a9f0ee52b41969d81f4bb79da6418/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaac69f78e6a9f0ee52b41969d81f4bb79da6418/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=aaac69f78e6a9f0ee52b41969d81f4bb79da6418", "patch": "@@ -906,7 +906,13 @@ impl Metadata {\n         FileType(self.0.file_type())\n     }\n \n-    /// Returns whether this metadata is for a directory.\n+    /// Returns whether this metadata is for a directory. The\n+    /// result is mutually exclusive to the result of\n+    /// [`is_file`], and will be false for symlink metadata\n+    /// obtained from [`symlink_metadata`].\n+    ///\n+    /// [`is_file`]: struct.Metadata.html#method.is_file\n+    /// [`symlink_metadata`]: fn.symlink_metadata.html\n     ///\n     /// # Examples\n     ///\n@@ -923,7 +929,13 @@ impl Metadata {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_dir(&self) -> bool { self.file_type().is_dir() }\n \n-    /// Returns whether this metadata is for a regular file.\n+    /// Returns whether this metadata is for a regular file. The\n+    /// result is mutually exclusive to the result of\n+    /// [`is_dir`], and will be false for symlink metadata\n+    /// obtained from [`symlink_metadata`].\n+    ///\n+    /// [`is_dir`]: struct.Metadata.html#method.is_dir\n+    /// [`symlink_metadata`]: fn.symlink_metadata.html\n     ///\n     /// # Examples\n     ///\n@@ -1148,7 +1160,13 @@ impl Permissions {\n }\n \n impl FileType {\n-    /// Test whether this file type represents a directory.\n+    /// Test whether this file type represents a directory. The\n+    /// result is mutually exclusive to the results of\n+    /// [`is_file`] and [`is_symlink`]; only zero or one of these\n+    /// tests may pass.\n+    ///\n+    /// [`is_file`]: struct.FileType.html#method.is_file\n+    /// [`is_symlink`]: struct.FileType.html#method.is_symlink\n     ///\n     /// # Examples\n     ///\n@@ -1167,6 +1185,12 @@ impl FileType {\n     pub fn is_dir(&self) -> bool { self.0.is_dir() }\n \n     /// Test whether this file type represents a regular file.\n+    /// The result is  mutually exclusive to the results of\n+    /// [`is_dir`] and [`is_symlink`]; only zero or one of these\n+    /// tests may pass.\n+    ///\n+    /// [`is_dir`]: struct.FileType.html#method.is_dir\n+    /// [`is_symlink`]: struct.FileType.html#method.is_symlink\n     ///\n     /// # Examples\n     ///\n@@ -1185,6 +1209,9 @@ impl FileType {\n     pub fn is_file(&self) -> bool { self.0.is_file() }\n \n     /// Test whether this file type represents a symbolic link.\n+    /// The result is mutually exclusive to the results of\n+    /// [`is_dir`] and [`is_file`]; only zero or one of these\n+    /// tests may pass.\n     ///\n     /// The underlying [`Metadata`] struct needs to be retrieved\n     /// with the [`fs::symlink_metadata`] function and not the\n@@ -1195,6 +1222,8 @@ impl FileType {\n     /// [`Metadata`]: struct.Metadata.html\n     /// [`fs::metadata`]: fn.metadata.html\n     /// [`fs::symlink_metadata`]: fn.symlink_metadata.html\n+    /// [`is_dir`]: struct.FileType.html#method.is_dir\n+    /// [`is_file`]: struct.FileType.html#method.is_file\n     /// [`is_symlink`]: struct.FileType.html#method.is_symlink\n     ///\n     /// # Examples"}]}