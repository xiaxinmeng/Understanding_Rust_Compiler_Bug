{"sha": "2f23e171cb51b0f8b3658d0149217bde8e730059", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMjNlMTcxY2I1MWIwZjhiMzY1OGQwMTQ5MjE3YmRlOGU3MzAwNTk=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-10-02T20:52:18Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-10-03T09:03:48Z"}, "message": "use the correct subtyping order in a test\n\nalso, ensure that callers are checked.", "tree": {"sha": "88114b386ae9d2ae90ed3f745abdc3862aa6ee79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88114b386ae9d2ae90ed3f745abdc3862aa6ee79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f23e171cb51b0f8b3658d0149217bde8e730059", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f23e171cb51b0f8b3658d0149217bde8e730059", "html_url": "https://github.com/rust-lang/rust/commit/2f23e171cb51b0f8b3658d0149217bde8e730059", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f23e171cb51b0f8b3658d0149217bde8e730059/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce70207250cf4397211939153826d6959f1133fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce70207250cf4397211939153826d6959f1133fa", "html_url": "https://github.com/rust-lang/rust/commit/ce70207250cf4397211939153826d6959f1133fa"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "6c6522fe658d23ec0053b575e32db7f33026a993", "filename": "src/test/compile-fail/wf-static-method.rs", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2f23e171cb51b0f8b3658d0149217bde8e730059/src%2Ftest%2Fcompile-fail%2Fwf-static-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f23e171cb51b0f8b3658d0149217bde8e730059/src%2Ftest%2Fcompile-fail%2Fwf-static-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-static-method.rs?ref=2f23e171cb51b0f8b3658d0149217bde8e730059", "patch": "@@ -8,30 +8,57 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// check that static methods don't get to assume `Self` is well-formed\n+// check that static methods don't get to assume their trait-ref\n+// is well-formed.\n+// FIXME(#27579): this is just a bug. However, our checking with\n+// static inherent methods isn't quite working - need to\n+// fix that before removing the check.\n \n-trait Foo<'a, 'b>: Sized {\n+trait Foo<'a, 'b, T>: Sized {\n     fn make_me() -> Self { loop {} }\n-    fn static_evil(u: &'a u32) -> &'b u32;\n+    fn static_evil(u: &'b u32) -> &'a u32;\n }\n \n struct Evil<'a, 'b: 'a>(Option<&'a &'b ()>);\n \n-impl<'a, 'b> Foo<'a, 'b> for Evil<'a, 'b> {\n-    fn make_me() -> Self { Evil(None) }\n-    fn static_evil(u: &'a u32) -> &'b u32 {\n+impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n+    fn make_me() -> Self { }\n+    fn static_evil(u: &'b u32) -> &'a u32 {\n         u //~ ERROR cannot infer an appropriate lifetime\n     }\n }\n \n struct IndirectEvil<'a, 'b: 'a>(Option<&'a &'b ()>);\n \n-impl<'a, 'b> Foo<'a, 'b> for IndirectEvil<'a, 'b> {\n+impl<'a, 'b> Foo<'a, 'b, ()> for IndirectEvil<'a, 'b> {\n     fn make_me() -> Self { IndirectEvil(None) }\n-    fn static_evil(u: &'a u32) -> &'b u32 {\n+    fn static_evil(u: &'b u32) -> &'a u32 {\n         let me = Self::make_me(); //~ ERROR lifetime bound not satisfied\n         loop {} // (`me` could be used for the lifetime transmute).\n     }\n }\n \n+impl<'a, 'b> Evil<'a, 'b> {\n+    fn inherent_evil(u: &'b u32) -> &'a u32 {\n+        u //~ ERROR cannot infer an appropriate lifetime\n+    }\n+}\n+\n+// while static methods don't get to *assume* this, we still\n+// *check* that they hold.\n+\n+fn evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n+    <()>::static_evil(b) //~ ERROR cannot infer an appropriate lifetime\n+}\n+\n+fn indirect_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n+    <IndirectEvil>::static_evil(b)\n+    //~^ ERROR cannot infer an appropriate lifetime\n+}\n+\n+fn inherent_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n+    <Evil>::inherent_evil(b) // bug? shouldn't this be an error\n+}\n+\n+\n fn main() {}"}]}