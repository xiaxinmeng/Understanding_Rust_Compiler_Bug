{"sha": "c326a779dd5edf1bdeec207723da928cc2d4aec8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMjZhNzc5ZGQ1ZWRmMWJkZWVjMjA3NzIzZGE5MjhjYzJkNGFlYzg=", "commit": {"author": {"name": "Laura Peskin", "email": "laura.peskin@gmail.com", "date": "2017-09-24T19:40:10Z"}, "committer": {"name": "Laura Peskin", "email": "laura.peskin@gmail.com", "date": "2017-09-24T19:40:17Z"}, "message": "use def_id of function in check_for_mutation", "tree": {"sha": "31757c4208980799c985f8c6fc54819554c07f5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31757c4208980799c985f8c6fc54819554c07f5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c326a779dd5edf1bdeec207723da928cc2d4aec8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c326a779dd5edf1bdeec207723da928cc2d4aec8", "html_url": "https://github.com/rust-lang/rust/commit/c326a779dd5edf1bdeec207723da928cc2d4aec8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c326a779dd5edf1bdeec207723da928cc2d4aec8/comments", "author": {"login": "lpesk", "id": 7589231, "node_id": "MDQ6VXNlcjc1ODkyMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/7589231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lpesk", "html_url": "https://github.com/lpesk", "followers_url": "https://api.github.com/users/lpesk/followers", "following_url": "https://api.github.com/users/lpesk/following{/other_user}", "gists_url": "https://api.github.com/users/lpesk/gists{/gist_id}", "starred_url": "https://api.github.com/users/lpesk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lpesk/subscriptions", "organizations_url": "https://api.github.com/users/lpesk/orgs", "repos_url": "https://api.github.com/users/lpesk/repos", "events_url": "https://api.github.com/users/lpesk/events{/privacy}", "received_events_url": "https://api.github.com/users/lpesk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lpesk", "id": 7589231, "node_id": "MDQ6VXNlcjc1ODkyMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/7589231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lpesk", "html_url": "https://github.com/lpesk", "followers_url": "https://api.github.com/users/lpesk/followers", "following_url": "https://api.github.com/users/lpesk/following{/other_user}", "gists_url": "https://api.github.com/users/lpesk/gists{/gist_id}", "starred_url": "https://api.github.com/users/lpesk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lpesk/subscriptions", "organizations_url": "https://api.github.com/users/lpesk/orgs", "repos_url": "https://api.github.com/users/lpesk/repos", "events_url": "https://api.github.com/users/lpesk/events{/privacy}", "received_events_url": "https://api.github.com/users/lpesk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a17150a0683129e6f781958fb55836994ed6ce4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a17150a0683129e6f781958fb55836994ed6ce4", "html_url": "https://github.com/rust-lang/rust/commit/9a17150a0683129e6f781958fb55836994ed6ce4"}], "stats": {"total": 39, "additions": 13, "deletions": 26}, "files": [{"sha": "f8c3e7b4cbdfcb7ef472a6dd78c7bbf5569bf89d", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c326a779dd5edf1bdeec207723da928cc2d4aec8/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c326a779dd5edf1bdeec207723da928cc2d4aec8/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=c326a779dd5edf1bdeec207723da928cc2d4aec8", "patch": "@@ -2,6 +2,7 @@ use itertools::Itertools;\n use reexport::*;\n use rustc::hir::*;\n use rustc::hir::def::Def;\n+use rustc::hir::def_id; \n use rustc::hir::intravisit::{walk_block, walk_decl, walk_expr, walk_pat, walk_stmt, NestedVisitorMap, Visitor};\n use rustc::hir::map::Node::{NodeBlock, NodeExpr, NodeStmt};\n use rustc::lint::*;\n@@ -619,7 +620,7 @@ fn check_for_loop<'a, 'tcx>(\n     check_for_loop_arg(cx, pat, arg, expr);\n     check_for_loop_explicit_counter(cx, arg, body, expr);\n     check_for_loop_over_map_kv(cx, pat, arg, body, expr);\n-    check_for_mut_range_bound(cx, arg, body, expr);\n+    check_for_mut_range_bound(cx, arg, body);\n     detect_manual_memcpy(cx, pat, arg, body, expr);\n }\n \n@@ -1309,15 +1310,14 @@ fn check_for_loop_over_map_kv<'a, 'tcx>(\n     }\n }\n \n-struct MutateDelegate<'a, 'tcx: 'a> {\n-    cx: &'a LateContext<'a, 'tcx>,\n+struct MutateDelegate {\n     node_id_low: Option<NodeId>,\n     node_id_high: Option<NodeId>,\n     span_low: Option<Span>,\n     span_high: Option<Span>,\n }\n \n-impl<'a, 'tcx> Delegate<'tcx> for MutateDelegate<'a, 'tcx> {\n+impl<'tcx> Delegate<'tcx> for MutateDelegate {\n     fn consume(&mut self, _: NodeId, _: Span, _: cmt<'tcx>, _: ConsumeMode) {\n     }\n   \n@@ -1345,14 +1345,14 @@ impl<'a, 'tcx> Delegate<'tcx> for MutateDelegate<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> MutateDelegate<'a, 'tcx> {\n+impl<'tcx> MutateDelegate {\n     fn mutation_span(&self) -> (Option<Span>, Option<Span>) {\n         (self.span_low, self.span_high)\n     }\n }\n \n-fn check_for_mut_range_bound(cx: &LateContext, arg: &Expr, body: &Expr,  expr: &Expr) {\n-    if let Some(higher::Range { start: Some(start), end: Some(end), limits }) = higher::range(arg) {\n+fn check_for_mut_range_bound(cx: &LateContext, arg: &Expr, body: &Expr) {\n+    if let Some(higher::Range { start: Some(start), end: Some(end), .. }) = higher::range(arg) {\n         let mut_ids = vec![check_for_mutability(cx, start), check_for_mutability(cx, end)];\n         if mut_ids[0].is_some() || mut_ids[1].is_some() {\n             let (span_low, span_high) = check_for_mutation(cx, body, mut_ids);\n@@ -1371,7 +1371,7 @@ fn mut_warn_with_span(cx: &LateContext, span: Option<Span>) {\n fn check_for_mutability(cx: &LateContext, bound: &Expr) -> Option<NodeId> {\n     if_let_chain! {[\n         let ExprPath(ref qpath) = bound.node,\n-        let QPath::Resolved(None, ref path) = *qpath,\n+        let QPath::Resolved(None, _) = *qpath,\n     ], {\n         let def = cx.tables.qpath_def(qpath, bound.hir_id);\n         match def {\n@@ -1394,24 +1394,11 @@ fn check_for_mutability(cx: &LateContext, bound: &Expr) -> Option<NodeId> {\n }\n \n fn check_for_mutation(cx: &LateContext, body: &Expr, bound_ids: Vec<Option<NodeId>>) -> (Option<Span>, Option<Span>) {\n-    let mut delegate = MutateDelegate { cx: cx, node_id_low: bound_ids[0], node_id_high: bound_ids[1], span_low: None, span_high: None };\n-    if let Some(id) = get_id_if_some(&bound_ids) {\n-        let def_id = cx.tcx.hir.local_def_id(id);\n-        let region_scope_tree = &cx.tcx.region_scope_tree(def_id);\n-        ExprUseVisitor::new(&mut delegate, cx.tcx, cx.param_env, region_scope_tree, cx.tables).walk_expr(body);\n-        return delegate.mutation_span();\n-    } else {\n-        return (None, None);\n-    }\n-}\n-\n-fn get_id_if_some(bound_ids: &Vec<Option<NodeId>>) -> Option<NodeId> {\n-    for id in bound_ids.into_iter() {\n-        if id.is_some() {\n-            return *id;\n-        }\n-    }\n-    return None;\n+    let mut delegate = MutateDelegate { node_id_low: bound_ids[0], node_id_high: bound_ids[1], span_low: None, span_high: None };\n+    let def_id = def_id::DefId::local(body.hir_id.owner);\n+    let region_scope_tree = &cx.tcx.region_scope_tree(def_id);\n+    ExprUseVisitor::new(&mut delegate, cx.tcx, cx.param_env, region_scope_tree, cx.tables).walk_expr(body);\n+    return delegate.mutation_span();\n }\n \n /// Return true if the pattern is a `PatWild` or an ident prefixed with `'_'`."}]}