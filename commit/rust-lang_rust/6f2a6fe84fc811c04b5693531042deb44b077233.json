{"sha": "6f2a6fe84fc811c04b5693531042deb44b077233", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMmE2ZmU4NGZjODExYzA0YjU2OTM1MzEwNDJkZWI0NGIwNzcyMzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-26T15:12:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-26T15:12:50Z"}, "message": "Auto merge of #6977 - flip1995:or_patterns_msrv, r=llogiq\n\nAdd MSRV options to `unnested_or_patterns`\n\nchangelog: [`unnested_or_patterns`] can now be configured with the `msrv` config/attribute.\n\nFixes #6953", "tree": {"sha": "140c88e035d3002d54a141996978b2fb9155da80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/140c88e035d3002d54a141996978b2fb9155da80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f2a6fe84fc811c04b5693531042deb44b077233", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f2a6fe84fc811c04b5693531042deb44b077233", "html_url": "https://github.com/rust-lang/rust/commit/6f2a6fe84fc811c04b5693531042deb44b077233", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f2a6fe84fc811c04b5693531042deb44b077233/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63aca96e9143bb03cc6f657aade80fdedc02e015", "url": "https://api.github.com/repos/rust-lang/rust/commits/63aca96e9143bb03cc6f657aade80fdedc02e015", "html_url": "https://github.com/rust-lang/rust/commit/63aca96e9143bb03cc6f657aade80fdedc02e015"}, {"sha": "5279b5948cf5acfb4787cbbe1dc4c568cd1cbfdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5279b5948cf5acfb4787cbbe1dc4c568cd1cbfdb", "html_url": "https://github.com/rust-lang/rust/commit/5279b5948cf5acfb4787cbbe1dc4c568cd1cbfdb"}], "stats": {"total": 120, "additions": 84, "deletions": 36}, "files": [{"sha": "f013613119cf198e48a21f9fbe4722ea0df81861", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f2a6fe84fc811c04b5693531042deb44b077233/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2a6fe84fc811c04b5693531042deb44b077233/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=6f2a6fe84fc811c04b5693531042deb44b077233", "patch": "@@ -1079,6 +1079,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || box missing_const_for_fn::MissingConstForFn::new(msrv));\n     store.register_late_pass(move || box needless_question_mark::NeedlessQuestionMark::new(msrv));\n     store.register_late_pass(move || box casts::Casts::new(msrv));\n+    store.register_early_pass(move || box unnested_or_patterns::UnnestedOrPatterns::new(msrv));\n \n     store.register_late_pass(|| box size_of_in_element_count::SizeOfInElementCount);\n     store.register_late_pass(|| box map_clone::MapClone);\n@@ -1254,7 +1255,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(move || box non_expressive_names::NonExpressiveNames {\n         single_char_binding_names_threshold,\n     });\n-    store.register_early_pass(|| box unnested_or_patterns::UnnestedOrPatterns);\n     store.register_late_pass(|| box macro_use::MacroUseImports::default());\n     store.register_late_pass(|| box map_identity::MapIdentity);\n     store.register_late_pass(|| box pattern_type_mismatch::PatternTypeMismatch);"}, {"sha": "9376a2cf66a90b1bd497498906e2e7111ccf2671", "filename": "clippy_lints/src/unnested_or_patterns.rs", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6f2a6fe84fc811c04b5693531042deb44b077233/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2a6fe84fc811c04b5693531042deb44b077233/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnested_or_patterns.rs?ref=6f2a6fe84fc811c04b5693531042deb44b077233", "patch": "@@ -1,15 +1,19 @@\n #![allow(clippy::wildcard_imports, clippy::enum_glob_use)]\n \n-use clippy_utils::ast_utils::{eq_field_pat, eq_id, eq_pat, eq_path};\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::over;\n+use clippy_utils::{\n+    ast_utils::{eq_field_pat, eq_id, eq_pat, eq_path},\n+    meets_msrv,\n+};\n use rustc_ast::mut_visit::*;\n use rustc_ast::ptr::P;\n use rustc_ast::{self as ast, Pat, PatKind, PatKind::*, DUMMY_NODE_ID};\n use rustc_ast_pretty::pprust;\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::DUMMY_SP;\n \n use std::cell::Cell;\n@@ -50,26 +54,50 @@ declare_clippy_lint! {\n     \"unnested or-patterns, e.g., `Foo(Bar) | Foo(Baz) instead of `Foo(Bar | Baz)`\"\n }\n \n-declare_lint_pass!(UnnestedOrPatterns => [UNNESTED_OR_PATTERNS]);\n+const UNNESTED_OR_PATTERNS_MSRV: RustcVersion = RustcVersion::new(1, 53, 0);\n+\n+#[derive(Clone, Copy)]\n+pub struct UnnestedOrPatterns {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl UnnestedOrPatterns {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+\n+impl_lint_pass!(UnnestedOrPatterns => [UNNESTED_OR_PATTERNS]);\n \n impl EarlyLintPass for UnnestedOrPatterns {\n     fn check_arm(&mut self, cx: &EarlyContext<'_>, a: &ast::Arm) {\n-        lint_unnested_or_patterns(cx, &a.pat);\n+        if meets_msrv(self.msrv.as_ref(), &UNNESTED_OR_PATTERNS_MSRV) {\n+            lint_unnested_or_patterns(cx, &a.pat);\n+        }\n     }\n \n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n-        if let ast::ExprKind::Let(pat, _) = &e.kind {\n-            lint_unnested_or_patterns(cx, pat);\n+        if meets_msrv(self.msrv.as_ref(), &UNNESTED_OR_PATTERNS_MSRV) {\n+            if let ast::ExprKind::Let(pat, _) = &e.kind {\n+                lint_unnested_or_patterns(cx, pat);\n+            }\n         }\n     }\n \n     fn check_param(&mut self, cx: &EarlyContext<'_>, p: &ast::Param) {\n-        lint_unnested_or_patterns(cx, &p.pat);\n+        if meets_msrv(self.msrv.as_ref(), &UNNESTED_OR_PATTERNS_MSRV) {\n+            lint_unnested_or_patterns(cx, &p.pat);\n+        }\n     }\n \n     fn check_local(&mut self, cx: &EarlyContext<'_>, l: &ast::Local) {\n-        lint_unnested_or_patterns(cx, &l.pat);\n+        if meets_msrv(self.msrv.as_ref(), &UNNESTED_OR_PATTERNS_MSRV) {\n+            lint_unnested_or_patterns(cx, &l.pat);\n+        }\n     }\n+\n+    extract_msrv_attr!(EarlyContext);\n }\n \n fn lint_unnested_or_patterns(cx: &EarlyContext<'_>, pat: &Pat) {"}, {"sha": "b372f5b0e72357fffa1cfbc798c2f765d4e90d56", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f2a6fe84fc811c04b5693531042deb44b077233/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2a6fe84fc811c04b5693531042deb44b077233/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=6f2a6fe84fc811c04b5693531042deb44b077233", "patch": "@@ -106,7 +106,7 @@ macro_rules! define_Conf {\n \n pub use self::helpers::Conf;\n define_Conf! {\n-    /// Lint: REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN. The minimum rust version that the project supports\n+    /// Lint: REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS. The minimum rust version that the project supports\n     (msrv, \"msrv\": Option<String>, None),\n     /// Lint: BLACKLISTED_NAME. The list of blacklisted names to lint about. NB: `bar` is not here since it has legitimate uses\n     (blacklisted_names, \"blacklisted_names\": Vec<String>, [\"foo\", \"baz\", \"quux\"].iter().map(ToString::to_string).collect()),"}, {"sha": "ceb45a2c3134177c9824a33add63e38c1178a6ea", "filename": "doc/adding_lints.md", "status": "modified", "additions": 36, "deletions": 22, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/6f2a6fe84fc811c04b5693531042deb44b077233/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/6f2a6fe84fc811c04b5693531042deb44b077233/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=6f2a6fe84fc811c04b5693531042deb44b077233", "patch": "@@ -388,18 +388,19 @@ pass.\n [`FnKind::Fn`]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/visit/enum.FnKind.html#variant.Fn\n [ident]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/symbol/struct.Ident.html\n \n-## Specifying the lint's minimum supported Rust version (msrv)\n+## Specifying the lint's minimum supported Rust version (MSRV)\n \n-Projects supporting older versions of Rust would need to disable a lint if it targets features\n-present in later versions. Support for this can be added by specifying an msrv in your lint like so,\n+Projects supporting older versions of Rust would need to disable a lint if it\n+targets features present in later versions. Support for this can be added by\n+specifying an MSRV in your lint like so,\n \n ```rust\n const MANUAL_STRIP_MSRV: RustcVersion = RustcVersion::new(1, 45, 0);\n ```\n \n-The project's msrv will also have to be an attribute in the lint so you'll have to add a struct\n-and constructor for your lint. The project's msrv needs to be passed when the lint is registered\n-in `lib.rs`\n+The project's MSRV will also have to be an attribute in the lint so you'll have\n+to add a struct and constructor for your lint. The project's MSRV needs to be\n+passed when the lint is registered in `lib.rs`\n \n ```rust\n pub struct ManualStrip {\n@@ -414,18 +415,19 @@ impl ManualStrip {\n }\n ```\n \n-The project's msrv can then be matched against the lint's msrv in the LintPass using the `meets_msrv` utility\n-function.\n+The project's MSRV can then be matched against the lint's `msrv` in the LintPass\n+using the `meets_msrv` utility function.\n \n ``` rust\n if !meets_msrv(self.msrv.as_ref(), &MANUAL_STRIP_MSRV) {\n     return;\n }\n ```\n \n-The project's msrv can also be specified as an inner attribute, which overrides the value from\n-`clippy.toml`. This can be accounted for using the `extract_msrv_attr!(LintContext)` macro and passing\n-LateContext/EarlyContext.\n+The project's MSRV can also be specified as an inner attribute, which overrides\n+the value from `clippy.toml`. This can be accounted for using the\n+`extract_msrv_attr!(LintContext)` macro and passing\n+`LateContext`/`EarlyContext`.\n \n ```rust\n impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n@@ -436,8 +438,20 @@ impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n }\n ```\n \n-Once the msrv is added to the lint, a relevant test case should be added to `tests/ui/min_rust_version_attr.rs`\n-which verifies that the lint isn't emitted if the project's msrv is lower.\n+Once the `msrv` is added to the lint, a relevant test case should be added to\n+`tests/ui/min_rust_version_attr.rs` which verifies that the lint isn't emitted\n+if the project's MSRV is lower.\n+\n+As a last step, the lint should be added to the lint documentation. This is done\n+in `clippy_lints/src/utils/conf.rs`:\n+\n+```rust\n+define_Conf! {\n+    /// Lint: LIST, OF, LINTS, <THE_NEWLY_ADDED_LINT>. The minimum rust version that the project supports\n+    (msrv, \"msrv\": Option<String>, None),\n+    ...\n+}\n+```\n \n ## Author lint\n \n@@ -533,9 +547,9 @@ Before submitting your PR make sure you followed all of the basic requirements:\n \n ## Adding configuration to a lint\n \n-Clippy supports the configuration of lints values using a `clippy.toml` file in the workspace \n+Clippy supports the configuration of lints values using a `clippy.toml` file in the workspace\n directory. Adding a configuration to a lint can be useful for thresholds or to constrain some\n-behavior that can be seen as a false positive for some users. Adding a configuration is done \n+behavior that can be seen as a false positive for some users. Adding a configuration is done\n in the following steps:\n \n 1. Adding a new configuration entry to [clippy_utils::conf](/clippy_utils/src/conf.rs)\n@@ -544,10 +558,10 @@ in the following steps:\n     /// Lint: LINT_NAME. <The configuration field doc comment>\n     (configuration_ident, \"configuration_value\": Type, DefaultValue),\n     ```\n-    The configuration value and identifier should usually be the same. The doc comment will be \n+    The configuration value and identifier should usually be the same. The doc comment will be\n     automatically added to the lint documentation.\n 2. Adding the configuration value to the lint impl struct:\n-    1. This first requires the definition of a lint impl struct. Lint impl structs are usually \n+    1. This first requires the definition of a lint impl struct. Lint impl structs are usually\n         generated with the `declare_lint_pass!` macro. This struct needs to be defined manually\n         to add some kind of metadata to it:\n         ```rust\n@@ -564,7 +578,7 @@ in the following steps:\n             LINT_NAME\n         ]);\n         ```\n-    \n+\n     2. Next add the configuration value and a corresponding creation method like this:\n         ```rust\n         #[derive(Copy, Clone)]\n@@ -584,7 +598,7 @@ in the following steps:\n         ```\n 3. Passing the configuration value to the lint impl struct:\n \n-    First find the struct construction in the [clippy_lints lib file](/clippy_lints/src/lib.rs). \n+    First find the struct construction in the [clippy_lints lib file](/clippy_lints/src/lib.rs).\n     The configuration value is now cloned or copied into a local value that is then passed to the\n     impl struct like this:\n     ```rust\n@@ -601,9 +615,9 @@ in the following steps:\n \n 4. Adding tests:\n     1. The default configured value can be tested like any normal lint in [`tests/ui`](/tests/ui).\n-    2. The configuration itself will be tested separately in [`tests/ui-toml`](/tests/ui-toml). \n-        Simply add a new subfolder with a fitting name. This folder contains a `clippy.toml` file \n-        with the configuration value and a rust file that should be linted by Clippy. The test can \n+    2. The configuration itself will be tested separately in [`tests/ui-toml`](/tests/ui-toml).\n+        Simply add a new subfolder with a fitting name. This folder contains a `clippy.toml` file\n+        with the configuration value and a rust file that should be linted by Clippy. The test can\n         otherwise be written as usual.\n \n ## Cheatsheet"}, {"sha": "49ace1ca128c121c25e9f02664f63c29f5128ea9", "filename": "tests/ui/min_rust_version_attr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f2a6fe84fc811c04b5693531042deb44b077233/tests%2Fui%2Fmin_rust_version_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2a6fe84fc811c04b5693531042deb44b077233/tests%2Fui%2Fmin_rust_version_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.rs?ref=6f2a6fe84fc811c04b5693531042deb44b077233", "patch": "@@ -123,6 +123,11 @@ fn missing_const_for_fn() -> i32 {\n     1\n }\n \n+fn unnest_or_patterns() {\n+    struct TS(u8, u8);\n+    if let TS(0, x) | TS(1, x) = TS(0, 0) {}\n+}\n+\n fn main() {\n     filter_map_next();\n     checked_conversion();\n@@ -138,6 +143,7 @@ fn main() {\n     replace_with_default();\n     map_unwrap_or();\n     missing_const_for_fn();\n+    unnest_or_patterns();\n }\n \n mod meets_msrv {"}, {"sha": "8d3575c2da83b4e322029080e8fb694ded856b93", "filename": "tests/ui/min_rust_version_attr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f2a6fe84fc811c04b5693531042deb44b077233/tests%2Fui%2Fmin_rust_version_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f2a6fe84fc811c04b5693531042deb44b077233/tests%2Fui%2Fmin_rust_version_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.stderr?ref=6f2a6fe84fc811c04b5693531042deb44b077233", "patch": "@@ -1,12 +1,12 @@\n error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:150:24\n+  --> $DIR/min_rust_version_attr.rs:156:24\n    |\n LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n    |                        ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::manual-strip` implied by `-D warnings`\n note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:149:9\n+  --> $DIR/min_rust_version_attr.rs:155:9\n    |\n LL |         if s.starts_with(\"hello, \") {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,13 +17,13 @@ LL |             assert_eq!(<stripped>.to_uppercase(), \"WORLD!\");\n    |\n \n error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:162:24\n+  --> $DIR/min_rust_version_attr.rs:168:24\n    |\n LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n    |                        ^^^^^^^^^^^^^^^^^^^^\n    |\n note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:161:9\n+  --> $DIR/min_rust_version_attr.rs:167:9\n    |\n LL |         if s.starts_with(\"hello, \") {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}