{"sha": "71da1c21ebc79f19e749344c8b4e2c13f533872e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZGExYzIxZWJjNzlmMTllNzQ5MzQ0YzhiNGUyYzEzZjUzMzg3MmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-24T12:38:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-24T12:38:11Z"}, "message": "Auto merge of #46116 - oli-obk:json_ui, r=nikomatsakis\n\nCheck //~ERROR comments in ui tests\n\nr? @nikomatsakis\n\ncc #44844 @Phlosioneer @estebank @petrochenkov\n\nthis depends on https://github.com/rust-lang/rust/pull/46052 getting merged first (the commits are included in here)\n\nThe relevant changes of this PR are c2f0af7 and 979269b", "tree": {"sha": "dc135ce6161978161d4c7003b8bca5f3a84b8269", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc135ce6161978161d4c7003b8bca5f3a84b8269"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71da1c21ebc79f19e749344c8b4e2c13f533872e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71da1c21ebc79f19e749344c8b4e2c13f533872e", "html_url": "https://github.com/rust-lang/rust/commit/71da1c21ebc79f19e749344c8b4e2c13f533872e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71da1c21ebc79f19e749344c8b4e2c13f533872e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85d50ce1c72dc577fad26a81acea390c60bb48c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/85d50ce1c72dc577fad26a81acea390c60bb48c2", "html_url": "https://github.com/rust-lang/rust/commit/85d50ce1c72dc577fad26a81acea390c60bb48c2"}, {"sha": "8937d6a6cfb011d9e1fe6b4a426913dbbf9fd584", "url": "https://api.github.com/repos/rust-lang/rust/commits/8937d6a6cfb011d9e1fe6b4a426913dbbf9fd584", "html_url": "https://github.com/rust-lang/rust/commit/8937d6a6cfb011d9e1fe6b4a426913dbbf9fd584"}], "stats": {"total": 4341, "additions": 2220, "deletions": 2121}, "files": [{"sha": "642153c08f651e1f7541e951fcf0dd6f8336e3d4", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -355,12 +355,15 @@ impl Session {\n \n     /// Analogous to calling methods on the given `DiagnosticBuilder`, but\n     /// deduplicates on lint ID, span (if any), and message for this `Session`\n-    /// if we're not outputting in JSON mode.\n     fn diag_once<'a, 'b>(&'a self,\n                          diag_builder: &'b mut DiagnosticBuilder<'a>,\n                          method: DiagnosticBuilderMethod,\n                          lint: &'static lint::Lint, message: &str, span: Option<Span>) {\n-        let mut do_method = || {\n+\n+        let lint_id = DiagnosticMessageId::LintId(lint::LintId::of(lint));\n+        let id_span_message = (lint_id, span, message.to_owned());\n+        let fresh = self.one_time_diagnostics.borrow_mut().insert(id_span_message);\n+        if fresh {\n             match method {\n                 DiagnosticBuilderMethod::Note => {\n                     diag_builder.note(message);\n@@ -369,22 +372,6 @@ impl Session {\n                     diag_builder.span_note(span.expect(\"span_note expects a span\"), message);\n                 }\n             }\n-        };\n-\n-        match self.opts.error_format {\n-            // when outputting JSON for tool consumption, the tool might want\n-            // the duplicates\n-            config::ErrorOutputType::Json(_) => {\n-                do_method()\n-            },\n-            _ => {\n-                let lint_id = DiagnosticMessageId::LintId(lint::LintId::of(lint));\n-                let id_span_message = (lint_id, span, message.to_owned());\n-                let fresh = self.one_time_diagnostics.borrow_mut().insert(id_span_message);\n-                if fresh {\n-                    do_method()\n-                }\n-            }\n         }\n     }\n "}, {"sha": "8701ca0178fc98e7a1c499c46b15a977121eaeb4", "filename": "src/test/compile-fail/issue-31221.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fcompile-fail%2Fissue-31221.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fcompile-fail%2Fissue-31221.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-31221.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -13,8 +13,6 @@\n #![allow(non_snake_case)]\n #![deny(unreachable_patterns)]\n //~^ NOTE lint level defined here\n-//~^^ NOTE lint level defined here\n-//~^^^ NOTE lint level defined here\n \n #[derive(Clone, Copy)]\n enum Enum {"}, {"sha": "29d7c6caec468fca53d322857bcc68957021c7f6", "filename": "src/test/compile-fail/lint-output-format-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fcompile-fail%2Flint-output-format-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fcompile-fail%2Flint-output-format-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-output-format-2.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -25,6 +25,5 @@ use lint_output_format::{foo, bar};\n fn main() { //~ ERROR: compilation successful\n     let _x = foo();\n     //~^ WARNING use of deprecated item 'lint_output_format::foo': text\n-    //~| NOTE #[warn(deprecated)] on by default\n     let _y = bar();\n }"}, {"sha": "bee5a2c45be6d4177a482f11aba8676f29da224c", "filename": "src/test/compile-fail/lint-unconditional-recursion.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fcompile-fail%2Flint-unconditional-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fcompile-fail%2Flint-unconditional-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unconditional-recursion.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -10,19 +10,7 @@\n \n #![deny(unconditional_recursion)]\n //~^ NOTE lint level defined here\n-//~| NOTE lint level defined here\n-//~| NOTE lint level defined here\n-//~| NOTE lint level defined here\n-//~| NOTE lint level defined here\n-//~| NOTE lint level defined here\n-//~| NOTE lint level defined here\n-//~| NOTE lint level defined here\n-//~| NOTE lint level defined here\n-//~| NOTE lint level defined here\n-//~| NOTE lint level defined here\n-//~| NOTE lint level defined here\n-//~| NOTE lint level defined here\n-//~| NOTE lint level defined here\n+\n #![allow(dead_code)]\n fn foo() { //~ ERROR function cannot return without recurring\n     foo(); //~ NOTE recursive call site"}, {"sha": "4fd87632067331ac95e8cb1600b4940fc296e0da", "filename": "src/test/ui-fulldeps/custom-derive/issue-36935.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fissue-36935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fissue-36935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fissue-36935.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -15,7 +15,7 @@\n \n #[macro_use] extern crate plugin;\n \n-#[derive(Foo, Bar)]\n+#[derive(Foo, Bar)] //~ ERROR proc-macro derive panicked\n struct Baz {\n     a: i32,\n     b: i32,"}, {"sha": "55848c6553cca74c78dd1047e07ba1f7b65929fc", "filename": "src/test/ui-fulldeps/custom-derive/issue-36935.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fissue-36935.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fissue-36935.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fissue-36935.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error: proc-macro derive panicked\n   --> $DIR/issue-36935.rs:18:15\n    |\n-18 | #[derive(Foo, Bar)]\n+18 | #[derive(Foo, Bar)] //~ ERROR proc-macro derive panicked\n    |               ^^^\n    |\n    = help: message: lolnope"}, {"sha": "de798e2cf0baa9e81550019ac335b778cedd9a16", "filename": "src/test/ui-fulldeps/issue-44953/issue-44953.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui-fulldeps%2Fissue-44953%2Fissue-44953.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui-fulldeps%2Fissue-44953%2Fissue-44953.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-44953%2Fissue-44953.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -13,7 +13,7 @@\n #![feature(proc_macro)]\n #![allow(unused_macros)]\n \n-#[macro_use] extern crate log;\n+#[macro_use] extern crate log; //~ ERROR use of unstable library feature\n \n pub fn main() {\n     info!(\"This is a log message.\");"}, {"sha": "4493ec14024c0407269ead1512a1c51d53125e14", "filename": "src/test/ui-fulldeps/issue-44953/issue-44953.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui-fulldeps%2Fissue-44953%2Fissue-44953.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui-fulldeps%2Fissue-44953%2Fissue-44953.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-44953%2Fissue-44953.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error: use of unstable library feature 'rustc_private': this crate is being loaded from the sysroot, an unstable location; did you mean to load this crate from crates.io via `Cargo.toml` instead? (see issue #27812)\n   --> $DIR/issue-44953.rs:16:14\n    |\n-16 | #[macro_use] extern crate log;\n+16 | #[macro_use] extern crate log; //~ ERROR use of unstable library feature\n    |              ^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(rustc_private)] to the crate attributes to enable"}, {"sha": "ef2d160529068b76899f850a7d5083961adda5f3", "filename": "src/test/ui-fulldeps/proc-macro/three-equals.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fthree-equals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fthree-equals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fthree-equals.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -22,17 +22,17 @@ fn main() {\n     three_equals!(===);\n \n     // Need exactly three equals.\n-    three_equals!(==);\n+    three_equals!(==); //~ ERROR found 2 equal signs, need exactly 3\n \n     // Need exactly three equals.\n-    three_equals!(=====);\n+    three_equals!(=====); //~ ERROR expected EOF\n \n     // Only equals accepted.\n-    three_equals!(abc);\n+    three_equals!(abc); //~ ERROR expected `=`\n \n     // Only equals accepted.\n-    three_equals!(!!);\n+    three_equals!(!!); //~ ERROR expected `=`\n \n     // Only three characters expected.\n-    three_equals!(===a);\n+    three_equals!(===a); //~ ERROR expected EOF\n }"}, {"sha": "0ffaf16107872f37652ef8435e01c05ab54a7958", "filename": "src/test/ui-fulldeps/proc-macro/three-equals.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fthree-equals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fthree-equals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fthree-equals.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,46 +1,46 @@\n error: found 2 equal signs, need exactly 3\n   --> $DIR/three-equals.rs:25:5\n    |\n-25 |     three_equals!(==);\n+25 |     three_equals!(==); //~ ERROR found 2 equal signs, need exactly 3\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: input must be: `===`\n \n error: expected EOF, found `=`.\n   --> $DIR/three-equals.rs:28:21\n    |\n-28 |     three_equals!(=====);\n+28 |     three_equals!(=====); //~ ERROR expected EOF\n    |                     ^^\n    |\n note: last good input was here\n   --> $DIR/three-equals.rs:28:21\n    |\n-28 |     three_equals!(=====);\n+28 |     three_equals!(=====); //~ ERROR expected EOF\n    |                     ^^\n    = help: input must be: `===`\n \n error: expected `=`, found `abc`.\n   --> $DIR/three-equals.rs:31:19\n    |\n-31 |     three_equals!(abc);\n+31 |     three_equals!(abc); //~ ERROR expected `=`\n    |                   ^^^\n \n error: expected `=`, found `!`.\n   --> $DIR/three-equals.rs:34:19\n    |\n-34 |     three_equals!(!!);\n+34 |     three_equals!(!!); //~ ERROR expected `=`\n    |                   ^\n \n error: expected EOF, found `a`.\n   --> $DIR/three-equals.rs:37:22\n    |\n-37 |     three_equals!(===a);\n+37 |     three_equals!(===a); //~ ERROR expected EOF\n    |                      ^\n    |\n note: last good input was here\n   --> $DIR/three-equals.rs:37:21\n    |\n-37 |     three_equals!(===a);\n+37 |     three_equals!(===a); //~ ERROR expected EOF\n    |                     ^\n    = help: input must be: `===`\n "}, {"sha": "ae94a7f13e23e9ab2bad13b21a409c3542ccd6db", "filename": "src/test/ui-fulldeps/resolve-error.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui-fulldeps%2Fresolve-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui-fulldeps%2Fresolve-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fresolve-error.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -35,29 +35,39 @@ macro_rules! attr_proc_mac {\n }\n \n #[derive(FooWithLongNan)]\n+//~^ ERROR cannot find\n struct Foo;\n \n #[attr_proc_macra]\n+//~^ ERROR cannot find\n struct Bar;\n \n #[FooWithLongNan]\n+//~^ ERROR cannot find\n struct Asdf;\n \n #[derive(Dlone)]\n+//~^ ERROR cannot find\n struct A;\n \n #[derive(Dlona)]\n+//~^ ERROR cannot find\n struct B;\n \n #[derive(attr_proc_macra)]\n+//~^ ERROR cannot find\n struct C;\n \n fn main() {\n     FooWithLongNama!();\n+    //~^ ERROR cannot find\n \n     attr_proc_macra!();\n+    //~^ ERROR cannot find\n \n     Dlona!();\n+    //~^ ERROR cannot find\n \n     bang_proc_macrp!();\n+    //~^ ERROR cannot find\n }"}, {"sha": "be7ebae70adf525795515163320a9ceefa358634", "filename": "src/test/ui-fulldeps/resolve-error.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui-fulldeps%2Fresolve-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui-fulldeps%2Fresolve-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fresolve-error.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -5,57 +5,57 @@ error: cannot find derive macro `FooWithLongNan` in this scope\n    |          ^^^^^^^^^^^^^^ help: try: `FooWithLongName`\n \n error: cannot find attribute macro `attr_proc_macra` in this scope\n-  --> $DIR/resolve-error.rs:40:3\n+  --> $DIR/resolve-error.rs:41:3\n    |\n-40 | #[attr_proc_macra]\n+41 | #[attr_proc_macra]\n    |   ^^^^^^^^^^^^^^^ help: try: `attr_proc_macro`\n \n error: cannot find attribute macro `FooWithLongNan` in this scope\n-  --> $DIR/resolve-error.rs:43:3\n+  --> $DIR/resolve-error.rs:45:3\n    |\n-43 | #[FooWithLongNan]\n+45 | #[FooWithLongNan]\n    |   ^^^^^^^^^^^^^^\n \n error: cannot find derive macro `Dlone` in this scope\n-  --> $DIR/resolve-error.rs:46:10\n+  --> $DIR/resolve-error.rs:49:10\n    |\n-46 | #[derive(Dlone)]\n+49 | #[derive(Dlone)]\n    |          ^^^^^ help: try: `Clone`\n \n error: cannot find derive macro `Dlona` in this scope\n-  --> $DIR/resolve-error.rs:49:10\n+  --> $DIR/resolve-error.rs:53:10\n    |\n-49 | #[derive(Dlona)]\n+53 | #[derive(Dlona)]\n    |          ^^^^^ help: try: `Clona`\n \n error: cannot find derive macro `attr_proc_macra` in this scope\n-  --> $DIR/resolve-error.rs:52:10\n+  --> $DIR/resolve-error.rs:57:10\n    |\n-52 | #[derive(attr_proc_macra)]\n+57 | #[derive(attr_proc_macra)]\n    |          ^^^^^^^^^^^^^^^\n \n error: cannot find macro `FooWithLongNama!` in this scope\n-  --> $DIR/resolve-error.rs:56:5\n+  --> $DIR/resolve-error.rs:62:5\n    |\n-56 |     FooWithLongNama!();\n+62 |     FooWithLongNama!();\n    |     ^^^^^^^^^^^^^^^ help: you could try the macro: `FooWithLongNam!`\n \n error: cannot find macro `attr_proc_macra!` in this scope\n-  --> $DIR/resolve-error.rs:58:5\n+  --> $DIR/resolve-error.rs:65:5\n    |\n-58 |     attr_proc_macra!();\n+65 |     attr_proc_macra!();\n    |     ^^^^^^^^^^^^^^^ help: you could try the macro: `attr_proc_mac!`\n \n error: cannot find macro `Dlona!` in this scope\n-  --> $DIR/resolve-error.rs:60:5\n+  --> $DIR/resolve-error.rs:68:5\n    |\n-60 |     Dlona!();\n+68 |     Dlona!();\n    |     ^^^^^\n \n error: cannot find macro `bang_proc_macrp!` in this scope\n-  --> $DIR/resolve-error.rs:62:5\n+  --> $DIR/resolve-error.rs:71:5\n    |\n-62 |     bang_proc_macrp!();\n+71 |     bang_proc_macrp!();\n    |     ^^^^^^^^^^^^^^^ help: you could try the macro: `bang_proc_macro!`\n \n error: aborting due to 10 previous errors"}, {"sha": "295e3d1a73521ad50198b650f80d7f584b26f459", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -9,17 +9,17 @@\n // except according to those terms.\n \n fn main() {\n-    f1(|_: (), _: ()| {});\n-    f2(|_: (), _: ()| {});\n-    f3(|_: (), _: ()| {});\n-    f4(|_: (), _: ()| {});\n-    f5(|_: (), _: ()| {});\n-    g1(|_: (), _: ()| {});\n-    g2(|_: (), _: ()| {});\n-    g3(|_: (), _: ()| {});\n-    g4(|_: (), _: ()| {});\n-    h1(|_: (), _: (), _: (), _: ()| {});\n-    h2(|_: (), _: (), _: (), _: ()| {});\n+    f1(|_: (), _: ()| {}); //~ ERROR type mismatch\n+    f2(|_: (), _: ()| {}); //~ ERROR type mismatch\n+    f3(|_: (), _: ()| {}); //~ ERROR type mismatch\n+    f4(|_: (), _: ()| {}); //~ ERROR type mismatch\n+    f5(|_: (), _: ()| {}); //~ ERROR type mismatch\n+    g1(|_: (), _: ()| {}); //~ ERROR type mismatch\n+    g2(|_: (), _: ()| {}); //~ ERROR type mismatch\n+    g3(|_: (), _: ()| {}); //~ ERROR type mismatch\n+    g4(|_: (), _: ()| {}); //~ ERROR type mismatch\n+    h1(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n+    h2(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n }\n \n // Basic"}, {"sha": "6f684f13e6f6691959f648052cb0b8ca51939111", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n    |\n-12 |     f1(|_: (), _: ()| {});\n+12 |     f1(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ ----------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r, 's> fn(&'r (), &'s ()) -> _`\n@@ -11,7 +11,7 @@ error[E0631]: type mismatch in closure arguments\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:13:5\n    |\n-13 |     f2(|_: (), _: ()| {});\n+13 |     f2(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ ----------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'a, 'r> fn(&'a (), &'r ()) -> _`\n@@ -21,7 +21,7 @@ error[E0631]: type mismatch in closure arguments\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:14:5\n    |\n-14 |     f3(|_: (), _: ()| {});\n+14 |     f3(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ ----------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&(), &'r ()) -> _`\n@@ -31,7 +31,7 @@ error[E0631]: type mismatch in closure arguments\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:15:5\n    |\n-15 |     f4(|_: (), _: ()| {});\n+15 |     f4(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ ----------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'s, 'r> fn(&'s (), &'r ()) -> _`\n@@ -41,7 +41,7 @@ error[E0631]: type mismatch in closure arguments\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:16:5\n    |\n-16 |     f5(|_: (), _: ()| {});\n+16 |     f5(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ ----------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), &'r ()) -> _`\n@@ -51,7 +51,7 @@ error[E0631]: type mismatch in closure arguments\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:17:5\n    |\n-17 |     g1(|_: (), _: ()| {});\n+17 |     g1(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ ----------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), std::boxed::Box<for<'s> std::ops::Fn(&'s ()) + 'static>) -> _`\n@@ -61,7 +61,7 @@ error[E0631]: type mismatch in closure arguments\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:18:5\n    |\n-18 |     g2(|_: (), _: ()| {});\n+18 |     g2(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ ----------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), for<'s> fn(&'s ())) -> _`\n@@ -71,7 +71,7 @@ error[E0631]: type mismatch in closure arguments\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:19:5\n    |\n-19 |     g3(|_: (), _: ()| {});\n+19 |     g3(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ ----------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'s> fn(&'s (), std::boxed::Box<for<'r> std::ops::Fn(&'r ()) + 'static>) -> _`\n@@ -81,7 +81,7 @@ error[E0631]: type mismatch in closure arguments\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:20:5\n    |\n-20 |     g4(|_: (), _: ()| {});\n+20 |     g4(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ ----------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'s> fn(&'s (), for<'r> fn(&'r ())) -> _`\n@@ -91,7 +91,7 @@ error[E0631]: type mismatch in closure arguments\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:21:5\n    |\n-21 |     h1(|_: (), _: (), _: (), _: ()| {});\n+21 |     h1(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ ------------------------------- found signature of `fn((), (), (), ()) -> _`\n    |     |\n    |     expected signature of `for<'r, 's> fn(&'r (), std::boxed::Box<for<'t0> std::ops::Fn(&'t0 ()) + 'static>, &'s (), for<'t0, 't1> fn(&'t0 (), &'t1 ())) -> _`\n@@ -101,7 +101,7 @@ error[E0631]: type mismatch in closure arguments\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:22:5\n    |\n-22 |     h2(|_: (), _: (), _: (), _: ()| {});\n+22 |     h2(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ ------------------------------- found signature of `fn((), (), (), ()) -> _`\n    |     |\n    |     expected signature of `for<'r, 't0> fn(&'r (), std::boxed::Box<for<'s> std::ops::Fn(&'s ()) + 'static>, &'t0 (), for<'s, 't1> fn(&'s (), &'t1 ())) -> _`"}, {"sha": "255eb771694cc53138ab65411e8f774dd52ca3a1", "filename": "src/test/ui/block-result/issue-11714.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -11,7 +11,7 @@\n fn blah() -> i32 { //~ ERROR mismatched types\n     1\n \n-    ; //~ HELP consider removing this semicolon:\n+    ; //~ HELP consider removing this semicolon\n }\n \n fn main() { }"}, {"sha": "4daf40e6172f62df4dd71e18fe5cbaff401cde34", "filename": "src/test/ui/block-result/issue-11714.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -5,7 +5,7 @@ error[E0308]: mismatched types\n    |  __________________^\n 12 | |     1\n 13 | |\n-14 | |     ; //~ HELP consider removing this semicolon:\n+14 | |     ; //~ HELP consider removing this semicolon\n    | |     - help: consider removing this semicolon\n 15 | | }\n    | |_^ expected i32, found ()"}, {"sha": "31a363a6b863d523b0c8c379af42221627c5acf9", "filename": "src/test/ui/block-result/issue-3563.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fblock-result%2Fissue-3563.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fblock-result%2Fissue-3563.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-3563.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -12,7 +12,6 @@ trait A {\n     fn a(&self) {\n         || self.b()\n         //~^ ERROR no method named `b` found for type `&Self` in the current scope\n-        //~| ERROR mismatched types\n     }\n }\n fn main() {}"}, {"sha": "3cf76365c77b1079da97ac643413c20618a58309", "filename": "src/test/ui/block-result/unexpected-return-on-unit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -16,7 +16,7 @@ fn foo() -> usize {\n }\n \n fn bar() {\n-    foo()\n+    foo() //~ ERROR mismatched types\n }\n \n fn main() {"}, {"sha": "3881bb4625801c5bb2930052380886ac45f464d8", "filename": "src/test/ui/block-result/unexpected-return-on-unit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,14 +1,14 @@\n error[E0308]: mismatched types\n   --> $DIR/unexpected-return-on-unit.rs:19:5\n    |\n-19 |     foo()\n+19 |     foo() //~ ERROR mismatched types\n    |     ^^^^^ expected (), found usize\n    |\n    = note: expected type `()`\n               found type `usize`\n help: try adding a semicolon\n    |\n-19 |     foo();\n+19 |     foo(); //~ ERROR mismatched types\n    |          ^\n help: try adding a return type\n    |"}, {"sha": "6d7a84ebc93a47496517933af57ab37e98d0b995", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -22,6 +22,7 @@ fn a() {\n     let mut x = 3;\n     let c1 = to_fn_mut(|| x = 4);\n     let c2 = to_fn_mut(|| x = 5); //~ ERROR cannot borrow `x` as mutable more than once\n+    //~| ERROR cannot borrow `x` as mutable more than once\n }\n \n fn set(x: &mut isize) {\n@@ -32,19 +33,22 @@ fn b() {\n     let mut x = 3;\n     let c1 = to_fn_mut(|| set(&mut x));\n     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+    //~| ERROR cannot borrow `x` as mutable more than once\n }\n \n fn c() {\n     let mut x = 3;\n     let c1 = to_fn_mut(|| x = 5);\n     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+    //~| ERROR cannot borrow `x` as mutable more than once\n }\n \n fn d() {\n     let mut x = 3;\n     let c1 = to_fn_mut(|| x = 5);\n     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nested closure)\n     //~^ ERROR cannot borrow `x` as mutable more than once\n+    //~| ERROR cannot borrow `x` as mutable more than once\n }\n \n fn g() {\n@@ -56,6 +60,7 @@ fn g() {\n     let c1 = to_fn_mut(|| set(&mut *x.f));\n     let c2 = to_fn_mut(|| set(&mut *x.f));\n     //~^ ERROR cannot borrow `x` as mutable more than once\n+    //~| ERROR cannot borrow `x` as mutable more than once\n }\n \n fn main() {"}, {"sha": "0ec744f4a0781c9df10bc93d50bed2bf5982ec2f", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut.stderr", "status": "modified", "additions": 44, "deletions": 38, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -9,65 +9,68 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n    |                        ^^ - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-25 | }\n+25 |     //~| ERROR cannot borrow `x` as mutable more than once\n+26 | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n-  --> $DIR/borrowck-closures-two-mut.rs:34:24\n+  --> $DIR/borrowck-closures-two-mut.rs:35:24\n    |\n-33 |     let c1 = to_fn_mut(|| set(&mut x));\n+34 |     let c1 = to_fn_mut(|| set(&mut x));\n    |                        --          - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-34 |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+35 |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n    |                        ^^          - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-35 | }\n+36 |     //~| ERROR cannot borrow `x` as mutable more than once\n+37 | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n-  --> $DIR/borrowck-closures-two-mut.rs:40:24\n+  --> $DIR/borrowck-closures-two-mut.rs:42:24\n    |\n-39 |     let c1 = to_fn_mut(|| x = 5);\n+41 |     let c1 = to_fn_mut(|| x = 5);\n    |                        -- - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-40 |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+42 |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n    |                        ^^          - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-41 | }\n+43 |     //~| ERROR cannot borrow `x` as mutable more than once\n+44 | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n-  --> $DIR/borrowck-closures-two-mut.rs:46:24\n+  --> $DIR/borrowck-closures-two-mut.rs:49:24\n    |\n-45 |     let c1 = to_fn_mut(|| x = 5);\n+48 |     let c1 = to_fn_mut(|| x = 5);\n    |                        -- - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-46 |     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nested closure)\n+49 |     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nested closure)\n    |                        ^^                                  - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-47 |     //~^ ERROR cannot borrow `x` as mutable more than once\n-48 | }\n+...\n+52 | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n-  --> $DIR/borrowck-closures-two-mut.rs:57:24\n+  --> $DIR/borrowck-closures-two-mut.rs:61:24\n    |\n-56 |     let c1 = to_fn_mut(|| set(&mut *x.f));\n+60 |     let c1 = to_fn_mut(|| set(&mut *x.f));\n    |                        --           - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-57 |     let c2 = to_fn_mut(|| set(&mut *x.f));\n+61 |     let c2 = to_fn_mut(|| set(&mut *x.f));\n    |                        ^^           - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-58 |     //~^ ERROR cannot borrow `x` as mutable more than once\n-59 | }\n+...\n+64 | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n@@ -81,65 +84,68 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n    |                        ^^ - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-25 | }\n+25 |     //~| ERROR cannot borrow `x` as mutable more than once\n+26 | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n-  --> $DIR/borrowck-closures-two-mut.rs:34:24\n+  --> $DIR/borrowck-closures-two-mut.rs:35:24\n    |\n-33 |     let c1 = to_fn_mut(|| set(&mut x));\n+34 |     let c1 = to_fn_mut(|| set(&mut x));\n    |                        --          - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-34 |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+35 |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n    |                        ^^          - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-35 | }\n+36 |     //~| ERROR cannot borrow `x` as mutable more than once\n+37 | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n-  --> $DIR/borrowck-closures-two-mut.rs:40:24\n+  --> $DIR/borrowck-closures-two-mut.rs:42:24\n    |\n-39 |     let c1 = to_fn_mut(|| x = 5);\n+41 |     let c1 = to_fn_mut(|| x = 5);\n    |                        -- - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-40 |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+42 |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n    |                        ^^          - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-41 | }\n+43 |     //~| ERROR cannot borrow `x` as mutable more than once\n+44 | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n-  --> $DIR/borrowck-closures-two-mut.rs:46:24\n+  --> $DIR/borrowck-closures-two-mut.rs:49:24\n    |\n-45 |     let c1 = to_fn_mut(|| x = 5);\n+48 |     let c1 = to_fn_mut(|| x = 5);\n    |                        -- - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-46 |     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nested closure)\n+49 |     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nested closure)\n    |                        ^^                                  - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-47 |     //~^ ERROR cannot borrow `x` as mutable more than once\n-48 | }\n+...\n+52 | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n-  --> $DIR/borrowck-closures-two-mut.rs:57:24\n+  --> $DIR/borrowck-closures-two-mut.rs:61:24\n    |\n-56 |     let c1 = to_fn_mut(|| set(&mut *x.f));\n+60 |     let c1 = to_fn_mut(|| set(&mut *x.f));\n    |                        --           - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-57 |     let c2 = to_fn_mut(|| set(&mut *x.f));\n+61 |     let c2 = to_fn_mut(|| set(&mut *x.f));\n    |                        ^^           - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-58 |     //~^ ERROR cannot borrow `x` as mutable more than once\n-59 | }\n+...\n+64 | }\n    | - first borrow ends here\n \n error: aborting due to 10 previous errors"}, {"sha": "b30234811acb279a6b63f1223438a770b1c9ece4", "filename": "src/test/ui/borrowck/borrowck-in-static.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -11,8 +11,9 @@\n // check that borrowck looks inside consts/statics\n \n static FN : &'static (Fn() -> (Box<Fn()->Box<i32>>) + Sync) = &|| {\n-    let x = Box::new(0); //~ NOTE moved\n+    let x = Box::new(0); //~ NOTE captured outer variable\n     Box::new(|| x) //~ ERROR cannot move out of captured outer variable\n+    //~^ NOTE cannot move out of captured outer variable\n };\n \n fn main() {"}, {"sha": "92ca36e117e602325343dd2e6a0d267b952107d2", "filename": "src/test/ui/borrowck/borrowck-in-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of captured outer variable in an `Fn` closure\n   --> $DIR/borrowck-in-static.rs:15:17\n    |\n-14 |     let x = Box::new(0); //~ NOTE moved\n+14 |     let x = Box::new(0); //~ NOTE captured outer variable\n    |         - captured outer variable\n 15 |     Box::new(|| x) //~ ERROR cannot move out of captured outer variable\n    |                 ^ cannot move out of captured outer variable in an `Fn` closure"}, {"sha": "e72eb7f03a67945065c6cb9389282de425063f43", "filename": "src/test/ui/borrowck/borrowck-reinit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -15,5 +15,6 @@ fn main() {\n     let _u = x; // error shouldn't note this move\n     x = Box::new(1);\n     drop(x);\n-    let _ = (1,x);\n+    let _ = (1,x); //~ ERROR use of moved value: `x` (Ast)\n+    //~^ ERROR use of moved value: `x` (Mir)\n }"}, {"sha": "12511030579a241f9d42103f5c44195d281cd590", "filename": "src/test/ui/borrowck/borrowck-reinit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `x` (Ast)\n    |\n 17 |     drop(x);\n    |          - value moved here\n-18 |     let _ = (1,x);\n+18 |     let _ = (1,x); //~ ERROR use of moved value: `x` (Ast)\n    |                ^ value used here after move\n    |\n    = note: move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n@@ -13,7 +13,7 @@ error[E0382]: use of moved value: `x` (Mir)\n    |\n 17 |     drop(x);\n    |          - value moved here\n-18 |     let _ = (1,x);\n+18 |     let _ = (1,x); //~ ERROR use of moved value: `x` (Ast)\n    |                ^ value use here after move\n \n error: aborting due to 2 previous errors"}, {"sha": "31b50d8e531c0f16234cc7a717d4563868e01826", "filename": "src/test/ui/borrowck/mut-borrow-in-loop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -17,20 +17,20 @@ struct FuncWrapper<'a, T : 'a> {\n impl<'a, T : 'a> FuncWrapper<'a, T> {\n     fn in_loop(self, arg : &'a mut T) {\n         loop {\n-            (self.func)(arg)\n+            (self.func)(arg) //~ ERROR cannot borrow\n         }\n     }\n \n     fn in_while(self, arg : &'a mut T) {\n         while true {\n-            (self.func)(arg)\n+            (self.func)(arg) //~ ERROR cannot borrow\n         }\n     }\n \n     fn in_for(self, arg : &'a mut T) {\n         let v : Vec<()> = vec![];\n         for _ in v.iter() {\n-            (self.func)(arg)\n+            (self.func)(arg) //~ ERROR cannot borrow\n         }\n     }\n }"}, {"sha": "2b614561d8268ffc98cd6a231869907970cbd806", "filename": "src/test/ui/borrowck/mut-borrow-in-loop.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n   --> $DIR/mut-borrow-in-loop.rs:20:25\n    |\n-20 |             (self.func)(arg)\n+20 |             (self.func)(arg) //~ ERROR cannot borrow\n    |                         ^^^ mutable borrow starts here in previous iteration of loop\n 21 |         }\n 22 |     }\n@@ -10,7 +10,7 @@ error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n   --> $DIR/mut-borrow-in-loop.rs:26:25\n    |\n-26 |             (self.func)(arg)\n+26 |             (self.func)(arg) //~ ERROR cannot borrow\n    |                         ^^^ mutable borrow starts here in previous iteration of loop\n 27 |         }\n 28 |     }\n@@ -19,7 +19,7 @@ error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n   --> $DIR/mut-borrow-in-loop.rs:33:25\n    |\n-33 |             (self.func)(arg)\n+33 |             (self.func)(arg) //~ ERROR cannot borrow\n    |                         ^^^ mutable borrow starts here in previous iteration of loop\n 34 |         }\n 35 |     }"}, {"sha": "a1ab41bab337d83b648cedf8f551198d79faa6d2", "filename": "src/test/ui/borrowck/mut-borrow-outside-loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -14,13 +14,13 @@ fn main() {\n     let mut void = ();\n \n     let first = &mut void;\n-    let second = &mut void;\n+    let second = &mut void; //~ ERROR cannot borrow\n \n     loop {\n         let mut inner_void = ();\n \n         let inner_first = &mut inner_void;\n-        let inner_second = &mut inner_void;\n+        let inner_second = &mut inner_void; //~ ERROR cannot borrow\n     }\n }\n "}, {"sha": "716edd21982e98b5c86c9ded0ea430a37dced579", "filename": "src/test/ui/borrowck/mut-borrow-outside-loop.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `void` as mutable more than once at a time\n    |\n 16 |     let first = &mut void;\n    |                      ---- first mutable borrow occurs here\n-17 |     let second = &mut void;\n+17 |     let second = &mut void; //~ ERROR cannot borrow\n    |                       ^^^^ second mutable borrow occurs here\n ...\n 25 | }\n@@ -14,7 +14,7 @@ error[E0499]: cannot borrow `inner_void` as mutable more than once at a time\n    |\n 22 |         let inner_first = &mut inner_void;\n    |                                ---------- first mutable borrow occurs here\n-23 |         let inner_second = &mut inner_void;\n+23 |         let inner_second = &mut inner_void; //~ ERROR cannot borrow\n    |                                 ^^^^^^^^^^ second mutable borrow occurs here\n 24 |     }\n    |     - first borrow ends here"}, {"sha": "788d68caa524e471a69e854aed92b37290644137", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -16,9 +16,10 @@ fn call<F>(f: F) where F : Fn() {\n }\n \n fn main() {\n-    let y = vec![format!(\"World\")];  //~ NOTE moved\n+    let y = vec![format!(\"World\")];  //~ NOTE captured outer variable\n     call(|| {\n         y.into_iter();\n         //~^ ERROR cannot move out of captured outer variable in an `Fn` closure\n+        //~| NOTE cannot move out of\n     });\n }"}, {"sha": "895ce1ba318030bf19421ecc3e849f6e35836d8e", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of captured outer variable in an `Fn` closure\n   --> $DIR/unboxed-closures-move-upvar-from-non-once-ref-closure.rs:21:9\n    |\n-19 |     let y = vec![format!(\"World\")];  //~ NOTE moved\n+19 |     let y = vec![format!(\"World\")];  //~ NOTE captured outer variable\n    |         - captured outer variable\n 20 |     call(|| {\n 21 |         y.into_iter();"}, {"sha": "010b5a1b1067e9cb41bc36422787ef7d655e944f", "filename": "src/test/ui/cast-to-unsized-trait-object-suggestion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcast-to-unsized-trait-object-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcast-to-unsized-trait-object-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast-to-unsized-trait-object-suggestion.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn main() {\n-    &1 as Send;\n-    Box::new(1) as Send;\n+    &1 as Send; //~ ERROR cast to unsized\n+    Box::new(1) as Send; //~ ERROR cast to unsized\n }"}, {"sha": "55d41848b17a9a80f932278de793dd0dbfc1917f", "filename": "src/test/ui/cast-to-unsized-trait-object-suggestion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcast-to-unsized-trait-object-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcast-to-unsized-trait-object-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast-to-unsized-trait-object-suggestion.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,15 +1,15 @@\n error[E0620]: cast to unsized type: `&{integer}` as `std::marker::Send`\n   --> $DIR/cast-to-unsized-trait-object-suggestion.rs:12:5\n    |\n-12 |     &1 as Send;\n+12 |     &1 as Send; //~ ERROR cast to unsized\n    |     ^^^^^^----\n    |           |\n    |           help: try casting to a reference instead: `&Send`\n \n error[E0620]: cast to unsized type: `std::boxed::Box<{integer}>` as `std::marker::Send`\n   --> $DIR/cast-to-unsized-trait-object-suggestion.rs:13:5\n    |\n-13 |     Box::new(1) as Send;\n+13 |     Box::new(1) as Send; //~ ERROR cast to unsized\n    |     ^^^^^^^^^^^^^^^----\n    |                    |\n    |                    help: try casting to a `Box` instead: `Box<Send>`"}, {"sha": "d52718b7bf41f1d6aadf9370c5d90d023d993ca5", "filename": "src/test/ui/check_match/issue-35609.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcheck_match%2Fissue-35609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcheck_match%2Fissue-35609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck_match%2Fissue-35609.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -17,36 +17,36 @@ struct S(Enum, ());\n struct Sd { x: Enum, y: () }\n \n fn main() {\n-    match (A, ()) {\n+    match (A, ()) { //~ ERROR non-exhaustive\n         (A, _) => {}\n     }\n \n-    match (A, A) {\n+    match (A, A) { //~ ERROR non-exhaustive\n         (_, A) => {}\n     }\n \n-    match ((A, ()), ()) {\n+    match ((A, ()), ()) { //~ ERROR non-exhaustive\n         ((A, ()), _) => {}\n     }\n \n-    match ((A, ()), A) {\n+    match ((A, ()), A) { //~ ERROR non-exhaustive\n         ((A, ()), _) => {}\n     }\n \n-    match ((A, ()), ()) {\n+    match ((A, ()), ()) { //~ ERROR non-exhaustive\n         ((A, _), _) => {}\n     }\n \n \n-    match S(A, ()) {\n+    match S(A, ()) { //~ ERROR non-exhaustive\n         S(A, _) => {}\n     }\n \n-    match (Sd { x: A, y: () }) {\n+    match (Sd { x: A, y: () }) { //~ ERROR non-exhaustive\n         Sd { x: A, y: _ } => {}\n     }\n \n-    match Some(A) {\n+    match Some(A) { //~ ERROR non-exhaustive\n         Some(A) => (),\n         None => ()\n     }"}, {"sha": "1fc1d05636e91ec3a6019d8fcf9eb9d7411aa96f", "filename": "src/test/ui/check_match/issue-35609.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcheck_match%2Fissue-35609.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcheck_match%2Fissue-35609.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck_match%2Fissue-35609.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,49 +1,49 @@\n error[E0004]: non-exhaustive patterns: `(B, _)`, `(C, _)`, `(D, _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:20:11\n    |\n-20 |     match (A, ()) {\n+20 |     match (A, ()) { //~ ERROR non-exhaustive\n    |           ^^^^^^^ patterns `(B, _)`, `(C, _)`, `(D, _)` and 2 more not covered\n \n error[E0004]: non-exhaustive patterns: `(_, B)`, `(_, C)`, `(_, D)` and 2 more not covered\n   --> $DIR/issue-35609.rs:24:11\n    |\n-24 |     match (A, A) {\n+24 |     match (A, A) { //~ ERROR non-exhaustive\n    |           ^^^^^^ patterns `(_, B)`, `(_, C)`, `(_, D)` and 2 more not covered\n \n error[E0004]: non-exhaustive patterns: `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:28:11\n    |\n-28 |     match ((A, ()), ()) {\n+28 |     match ((A, ()), ()) { //~ ERROR non-exhaustive\n    |           ^^^^^^^^^^^^^ patterns `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n \n error[E0004]: non-exhaustive patterns: `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:32:11\n    |\n-32 |     match ((A, ()), A) {\n+32 |     match ((A, ()), A) { //~ ERROR non-exhaustive\n    |           ^^^^^^^^^^^^ patterns `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n \n error[E0004]: non-exhaustive patterns: `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:36:11\n    |\n-36 |     match ((A, ()), ()) {\n+36 |     match ((A, ()), ()) { //~ ERROR non-exhaustive\n    |           ^^^^^^^^^^^^^ patterns `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n \n error[E0004]: non-exhaustive patterns: `S(B, _)`, `S(C, _)`, `S(D, _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:41:11\n    |\n-41 |     match S(A, ()) {\n+41 |     match S(A, ()) { //~ ERROR non-exhaustive\n    |           ^^^^^^^^ patterns `S(B, _)`, `S(C, _)`, `S(D, _)` and 2 more not covered\n \n error[E0004]: non-exhaustive patterns: `Sd { x: B, .. }`, `Sd { x: C, .. }`, `Sd { x: D, .. }` and 2 more not covered\n   --> $DIR/issue-35609.rs:45:11\n    |\n-45 |     match (Sd { x: A, y: () }) {\n+45 |     match (Sd { x: A, y: () }) { //~ ERROR non-exhaustive\n    |           ^^^^^^^^^^^^^^^^^^^^ patterns `Sd { x: B, .. }`, `Sd { x: C, .. }`, `Sd { x: D, .. }` and 2 more not covered\n \n error[E0004]: non-exhaustive patterns: `Some(B)`, `Some(C)`, `Some(D)` and 2 more not covered\n   --> $DIR/issue-35609.rs:49:11\n    |\n-49 |     match Some(A) {\n+49 |     match Some(A) { //~ ERROR non-exhaustive\n    |           ^^^^^^^ patterns `Some(B)`, `Some(C)`, `Some(D)` and 2 more not covered\n \n error: aborting due to 8 previous errors"}, {"sha": "3b179a475e794e71ebc4d23989ae5b12e57cffb4", "filename": "src/test/ui/closure_context/issue-26046-fn-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -11,7 +11,7 @@\n fn foo() -> Box<Fn()> {\n     let num = 5;\n \n-    let closure = || {\n+    let closure = || { //~ ERROR expected a closure that\n         num += 1;\n     };\n "}, {"sha": "82c83da4daec78ac7ff2220a113d2f3575bad740", "filename": "src/test/ui/closure_context/issue-26046-fn-mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0525]: expected a closure that implements the `Fn` trait, but this closure only implements `FnMut`\n   --> $DIR/issue-26046-fn-mut.rs:14:19\n    |\n-14 |       let closure = || {\n+14 |       let closure = || { //~ ERROR expected a closure that\n    |  ___________________^\n 15 | |         num += 1;\n 16 | |     };"}, {"sha": "cf15985ee83ea4bb6cc67db7e6be74632d532526", "filename": "src/test/ui/closure_context/issue-26046-fn-once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -11,7 +11,7 @@\n fn get_closure() -> Box<Fn() -> Vec<u8>> {\n     let vec = vec![1u8, 2u8];\n \n-    let closure = move || {\n+    let closure = move || { //~ ERROR expected a closure\n         vec\n     };\n "}, {"sha": "0bc84872dde5f38ba3a7c9542bf258150639468b", "filename": "src/test/ui/closure_context/issue-26046-fn-once.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0525]: expected a closure that implements the `Fn` trait, but this closure only implements `FnOnce`\n   --> $DIR/issue-26046-fn-once.rs:14:19\n    |\n-14 |       let closure = move || {\n+14 |       let closure = move || { //~ ERROR expected a closure\n    |  ___________________^\n 15 | |         vec\n 16 | |     };"}, {"sha": "276c6a941b299ad3319f74a8c52fa1dd3d981ff1", "filename": "src/test/ui/closure_context/issue-42065.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -14,12 +14,13 @@ fn main() {\n     let dict: HashMap<i32, i32> = HashMap::new();\n     let debug_dump_dict = || {\n         for (key, value) in dict {\n+            //~^ NOTE closure cannot be invoked more than once\n             println!(\"{:?} - {:?}\", key, value);\n         }\n     };\n     debug_dump_dict();\n+    //~^ NOTE: value moved here\n     debug_dump_dict();\n     //~^ ERROR use of moved value: `debug_dump_dict`\n-    //~| NOTE closure cannot be invoked more than once because it moves the\n-    //~| variable `dict` out of its environment\n+    //~| NOTE value used here after move\n }"}, {"sha": "b31322f6d168d6868295449693c80c0ccabbac4c", "filename": "src/test/ui/closure_context/issue-42065.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,9 +1,10 @@\n error[E0382]: use of moved value: `debug_dump_dict`\n-  --> $DIR/issue-42065.rs:21:5\n+  --> $DIR/issue-42065.rs:23:5\n    |\n-20 |     debug_dump_dict();\n-   |     --------------- value moved here\n 21 |     debug_dump_dict();\n+   |     --------------- value moved here\n+22 |     //~^ NOTE: value moved here\n+23 |     debug_dump_dict();\n    |     ^^^^^^^^^^^^^^^ value used here after move\n    |\n note: closure cannot be invoked more than once because it moves the variable `dict` out of its environment"}, {"sha": "532d173011d7feb7249bfeebc7e8b0357f33862c", "filename": "src/test/ui/codemap_tests/coherence-overlapping-inherent-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -11,6 +11,6 @@\n #![allow(dead_code)]\n \n trait C {}\n-impl C { fn f() {} }\n+impl C { fn f() {} } //~ ERROR duplicate\n impl C { fn f() {} }\n fn main() { }"}, {"sha": "a7d52301476c9244013fa5c5d98d84c90aeec887", "filename": "src/test/ui/codemap_tests/coherence-overlapping-inherent-impl-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0592]: duplicate definitions with name `f`\n   --> $DIR/coherence-overlapping-inherent-impl-trait.rs:14:10\n    |\n-14 | impl C { fn f() {} }\n+14 | impl C { fn f() {} } //~ ERROR duplicate\n    |          ^^^^^^^^^ duplicate definitions for `f`\n 15 | impl C { fn f() {} }\n    |          --------- other definition for `f`"}, {"sha": "8e0395e3c503317078c27676e9f114c9bb813a8c", "filename": "src/test/ui/codemap_tests/empty_span.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -14,5 +14,5 @@ fn main() {\n \n     impl !Sync for Foo {}\n \n-    unsafe impl Send for &'static Foo { }\n+    unsafe impl Send for &'static Foo { } //~ ERROR cross-crate traits with a default impl\n }"}, {"sha": "3474803b00dd16ec0978e15f8cd8f9400356712b", "filename": "src/test/ui/codemap_tests/empty_span.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `&'static main::Foo`\n   --> $DIR/empty_span.rs:17:5\n    |\n-17 |     unsafe impl Send for &'static Foo { }\n+17 |     unsafe impl Send for &'static Foo { } //~ ERROR cross-crate traits with a default impl\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "cf593eab85329c99d5d94c043c80bc8aecca1157", "filename": "src/test/ui/codemap_tests/huge_multispan_highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -97,5 +97,5 @@ fn main() {\n \n \n \n-    let y = &mut x;\n+    let y = &mut x; //~ ERROR cannot borrow\n }"}, {"sha": "bc333bde93c6bce6564a15115d02689e98d36c3b", "filename": "src/test/ui/codemap_tests/huge_multispan_highlight.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow immutable local variable `x` as mutable\n 12  |     let x = \"foo\";\n     |         - consider changing this to `mut x`\n ...\n-100 |     let y = &mut x;\n+100 |     let y = &mut x; //~ ERROR cannot borrow\n     |                  ^ cannot borrow mutably\n \n error: aborting due to previous error"}, {"sha": "75581d3892719f6728e3ae5a36abdfa1d9512dc0", "filename": "src/test/ui/codemap_tests/issue-11715.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -97,5 +97,5 @@\n fn main() {\n     let mut x = \"foo\";\n     let y = &mut x;\n-    let z = &mut x;\n+    let z = &mut x; //~ ERROR cannot borrow\n }"}, {"sha": "bd8ffba00d44b65c1854a324d9b0879fa46be792", "filename": "src/test/ui/codemap_tests/issue-11715.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n     |\n 99  |     let y = &mut x;\n     |                  - first mutable borrow occurs here\n-100 |     let z = &mut x;\n+100 |     let z = &mut x; //~ ERROR cannot borrow\n     |                  ^ second mutable borrow occurs here\n 101 | }\n     | - first borrow ends here"}, {"sha": "3fb35dd26acab5ab487d031bd218180d804050e2", "filename": "src/test/ui/codemap_tests/one_line.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     let mut v = vec![Some(\"foo\"), Some(\"bar\")];\n-    v.push(v.pop().unwrap());\n+    v.push(v.pop().unwrap()); //~ ERROR cannot borrow\n }"}, {"sha": "cfe3d527136a34728485ed475e50184927d5dc8c", "filename": "src/test/ui/codemap_tests/one_line.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0499]: cannot borrow `v` as mutable more than once at a time\n   --> $DIR/one_line.rs:13:12\n    |\n-13 |     v.push(v.pop().unwrap());\n+13 |     v.push(v.pop().unwrap()); //~ ERROR cannot borrow\n    |     -      ^               - first borrow ends here\n    |     |      |\n    |     |      second mutable borrow occurs here"}, {"sha": "18e77ddfd2c5b450e48af1c11bf98657c0214da4", "filename": "src/test/ui/codemap_tests/overlapping_inherent_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_inherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_inherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_inherent_impls.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -16,7 +16,7 @@\n struct Foo;\n \n impl Foo {\n-    fn id() {}\n+    fn id() {} //~ ERROR duplicate definitions\n }\n \n impl Foo {\n@@ -26,7 +26,7 @@ impl Foo {\n struct Bar<T>(T);\n \n impl<T> Bar<T> {\n-    fn bar(&self) {}\n+    fn bar(&self) {} //~ ERROR duplicate definitions\n }\n \n impl Bar<u32> {\n@@ -36,7 +36,7 @@ impl Bar<u32> {\n struct Baz<T>(T);\n \n impl<T: Copy> Baz<T> {\n-    fn baz(&self) {}\n+    fn baz(&self) {} //~ ERROR duplicate definitions\n }\n \n impl<T> Baz<Vec<T>> {"}, {"sha": "0ccdd207651760b5f32c0d776d8be2bdaf0031d0", "filename": "src/test/ui/codemap_tests/overlapping_inherent_impls.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_inherent_impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_inherent_impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_inherent_impls.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0592]: duplicate definitions with name `id`\n   --> $DIR/overlapping_inherent_impls.rs:19:5\n    |\n-19 |     fn id() {}\n+19 |     fn id() {} //~ ERROR duplicate definitions\n    |     ^^^^^^^^^^ duplicate definitions for `id`\n ...\n 23 |     fn id() {}\n@@ -10,7 +10,7 @@ error[E0592]: duplicate definitions with name `id`\n error[E0592]: duplicate definitions with name `bar`\n   --> $DIR/overlapping_inherent_impls.rs:29:5\n    |\n-29 |     fn bar(&self) {}\n+29 |     fn bar(&self) {} //~ ERROR duplicate definitions\n    |     ^^^^^^^^^^^^^^^^ duplicate definitions for `bar`\n ...\n 33 |     fn bar(&self) {}\n@@ -19,7 +19,7 @@ error[E0592]: duplicate definitions with name `bar`\n error[E0592]: duplicate definitions with name `baz`\n   --> $DIR/overlapping_inherent_impls.rs:39:5\n    |\n-39 |     fn baz(&self) {}\n+39 |     fn baz(&self) {} //~ ERROR duplicate definitions\n    |     ^^^^^^^^^^^^^^^^ duplicate definitions for `baz`\n ...\n 43 |     fn baz(&self) {}"}, {"sha": "467e90bd5a51b178986f1b95e1641f45d057a286", "filename": "src/test/ui/codemap_tests/overlapping_spans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -18,6 +18,6 @@ impl Drop for S {\n \n fn main() {\n     match (S {f:\"foo\".to_string()}) {\n-        S {f:_s} => {}\n+        S {f:_s} => {} //~ ERROR cannot move out\n     }\n }"}, {"sha": "dc801b20dfb9d7acf4e9b18ae728310dff248223", "filename": "src/test/ui/codemap_tests/overlapping_spans.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n   --> $DIR/overlapping_spans.rs:21:9\n    |\n-21 |         S {f:_s} => {}\n+21 |         S {f:_s} => {} //~ ERROR cannot move out\n    |         ^^^^^--^\n    |         |    |\n    |         |    hint: to prevent move, use `ref _s` or `ref mut _s`"}, {"sha": "b8dedb0daf5f0485a9a65c8f975a3f586a9c4196", "filename": "src/test/ui/codemap_tests/tab.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -11,9 +11,9 @@\n // ignore-tidy-tab\n \n fn main() {\n-\tbar;\n+\tbar; //~ ERROR cannot find value `bar`\n }\n \n fn foo() {\n-\t\"bar\t\t\tboo\"\n+\t\"bar\t\t\tboo\" //~ ERROR mismatched types\n }"}, {"sha": "41ab60f017f611ce0a57211878c2c06249735fb0", "filename": "src/test/ui/codemap_tests/tab.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,15 +1,15 @@\n error[E0425]: cannot find value `bar` in this scope\n   --> $DIR/tab.rs:14:2\n    |\n-14 |  bar;\n+14 |  bar; //~ ERROR cannot find value `bar`\n    |  ^^^ not found in this scope\n \n error[E0308]: mismatched types\n   --> $DIR/tab.rs:18:2\n    |\n 17 | fn foo() {\n    |          - help: try adding a return type: `-> &'static str `\n-18 |  \"bar   boo\"\n+18 |  \"bar   boo\" //~ ERROR mismatched types\n    |  ^^^^^^^^^^^ expected (), found reference\n    |\n    = note: expected type `()`"}, {"sha": "b759a4abcae2147a5e51d85d6ba517716a0c9d93", "filename": "src/test/ui/codemap_tests/tab_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_2.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -11,5 +11,5 @@\n // ignore-tidy-tab\n \n fn main() {\n-\t\t\t\t\"\"\";\n+\t\t\t\t\"\"\"; //~ ERROR unterminated double quote\n }"}, {"sha": "7f6b55e7eb8eacdb6b4c304e92d18d761779c3a3", "filename": "src/test/ui/codemap_tests/tab_2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_2.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error: unterminated double quote string\n   --> $DIR/tab_2.rs:14:7\n    |\n-14 |       \"\"\";\n+14 |       \"\"\"; //~ ERROR unterminated double quote\n    |  _______^\n 15 | | }\n    | |__^"}, {"sha": "ea235ed71a9e6d063d63d402358d65484513341f", "filename": "src/test/ui/codemap_tests/tab_3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -14,6 +14,6 @@ fn main() {\n \tlet some_vec = vec![\"hi\"];\n \tsome_vec.into_iter();\n \t{\n-\t\tprintln!(\"{:?}\", some_vec);\n+\t\tprintln!(\"{:?}\", some_vec); //~ ERROR use of moved\n \t}\n }"}, {"sha": "278e590a36d13a9766ba2a03ae10c8bcb5fea80b", "filename": "src/test/ui/codemap_tests/tab_3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -4,7 +4,7 @@ error[E0382]: use of moved value: `some_vec`\n 15 |  some_vec.into_iter();\n    |  -------- value moved here\n 16 |  {\n-17 |   println!(\"{:?}\", some_vec);\n+17 |   println!(\"{:?}\", some_vec); //~ ERROR use of moved\n    |                    ^^^^^^^^ value used here after move\n    |\n    = note: move occurs because `some_vec` has type `std::vec::Vec<&str>`, which does not implement the `Copy` trait"}, {"sha": "4c99ee67598bc16c194005a421537b2093e8482e", "filename": "src/test/ui/codemap_tests/two_files.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -12,6 +12,6 @@ include!(\"two_files_data.rs\");\n \n struct Baz { }\n \n-impl Bar for Baz { }\n+impl Bar for Baz { } //~ ERROR expected trait, found type alias\n \n fn main() { }"}, {"sha": "c0cfeef194da6ba89e818489999bf24619bc60fa", "filename": "src/test/ui/codemap_tests/two_files.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0404]: expected trait, found type alias `Bar`\n   --> $DIR/two_files.rs:15:6\n    |\n-15 | impl Bar for Baz { }\n+15 | impl Bar for Baz { } //~ ERROR expected trait, found type alias\n    |      ^^^ type aliases cannot be used for traits\n \n error: cannot continue compilation due to previous error"}, {"sha": "ac22906a62330da551c014967265651e44f3de46", "filename": "src/test/ui/codemap_tests/unicode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {}\n+extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {} //~ ERROR invalid ABI\n \n fn main() { }"}, {"sha": "4f3c79410df9c0fecea99331c8e4ffc94eab7d82", "filename": "src/test/ui/codemap_tests/unicode.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error: invalid ABI: expected one of [cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, Rust, C, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted], found `\u8def\u6feb\u72fc\u00e1\u0301\u0301`\n   --> $DIR/unicode.rs:11:8\n    |\n-11 | extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {}\n+11 | extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {} //~ ERROR invalid ABI\n    |        ^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "c01b0b286afcaf37a4202ec4925fe06d29236d38", "filename": "src/test/ui/codemap_tests/unicode_2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_2.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -11,7 +11,7 @@\n #![feature(non_ascii_idents)]\n \n fn main() {\n-    let _ = (\"a\u0310e\u0301o\u0308\u0332\", 0u7);\n-    let _ = (\"\uc544\u3042\", 1i42);\n-    let _ = a\u0310e\u0301;\n+    let _ = (\"a\u0310e\u0301o\u0308\u0332\", 0u7); //~ ERROR invalid width\n+    let _ = (\"\uc544\u3042\", 1i42); //~ ERROR invalid width\n+    let _ = a\u0310e\u0301; //~ ERROR cannot find\n }"}, {"sha": "9ffd08ca06f830dba02fc68cabbf8df14294d187", "filename": "src/test/ui/codemap_tests/unicode_2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_2.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,23 +1,23 @@\n error: invalid width `7` for integer literal\n   --> $DIR/unicode_2.rs:14:25\n    |\n-14 |     let _ = (\"a\u0310e\u0301o\u0308\u0332\", 0u7);\n+14 |     let _ = (\"a\u0310e\u0301o\u0308\u0332\", 0u7); //~ ERROR invalid width\n    |                     ^^^\n    |\n    = help: valid widths are 8, 16, 32, 64 and 128\n \n error: invalid width `42` for integer literal\n   --> $DIR/unicode_2.rs:15:20\n    |\n-15 |     let _ = (\"\uc544\u3042\", 1i42);\n+15 |     let _ = (\"\uc544\u3042\", 1i42); //~ ERROR invalid width\n    |                      ^^^^\n    |\n    = help: valid widths are 8, 16, 32, 64 and 128\n \n error[E0425]: cannot find value `a\u0310e\u0301` in this scope\n   --> $DIR/unicode_2.rs:16:13\n    |\n-16 |     let _ = a\u0310e\u0301;\n+16 |     let _ = a\u0310e\u0301; //~ ERROR cannot find\n    |             ^^ not found in this scope\n \n error: aborting due to 3 previous errors"}, {"sha": "b235a0f21360cb5d58bf25e52b600227a620a459", "filename": "src/test/ui/coercion-missing-tail-expected-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -10,11 +10,11 @@\n \n // #41425 -- error message \"mismatched types\" has wrong types\n \n-fn plus_one(x: i32) -> i32 {\n+fn plus_one(x: i32) -> i32 { //~ ERROR mismatched types\n     x + 1;\n }\n \n-fn foo() -> Result<u8, u64> {\n+fn foo() -> Result<u8, u64> { //~ ERROR mismatched types\n     Ok(1);\n }\n "}, {"sha": "93f57216ca063b05bf1b934cf430329380791f43", "filename": "src/test/ui/coercion-missing-tail-expected-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/coercion-missing-tail-expected-type.rs:13:28\n    |\n-13 |   fn plus_one(x: i32) -> i32 {\n+13 |   fn plus_one(x: i32) -> i32 { //~ ERROR mismatched types\n    |  ____________________________^\n 14 | |     x + 1;\n    | |          - help: consider removing this semicolon\n@@ -14,7 +14,7 @@ error[E0308]: mismatched types\n error[E0308]: mismatched types\n   --> $DIR/coercion-missing-tail-expected-type.rs:17:29\n    |\n-17 |   fn foo() -> Result<u8, u64> {\n+17 |   fn foo() -> Result<u8, u64> { //~ ERROR mismatched types\n    |  _____________________________^\n 18 | |     Ok(1);\n    | |          - help: consider removing this semicolon"}, {"sha": "ac631c2e45e590c3931dd925aad2cc86c8869e4b", "filename": "src/test/ui/command-line-diagnostics.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcommand-line-diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcommand-line-diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand-line-diagnostics.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test checks the output format without the intermediate json representation\n+// compile-flags: --error-format=human\n+\n+pub fn main() {\n+    let x = 42;\n+    x = 43;\n+}"}, {"sha": "48ca45914c65d3ca440c2e4614b2b9854146ff0c", "filename": "src/test/ui/command-line-diagnostics.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcommand-line-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcommand-line-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand-line-diagnostics.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -0,0 +1,10 @@\n+error[E0384]: cannot assign twice to immutable variable `x`\n+  --> $DIR/command-line-diagnostics.rs:16:5\n+   |\n+15 |     let x = 42;\n+   |         - first assignment to `x`\n+16 |     x = 43;\n+   |     ^^^^^^ cannot assign twice to immutable variable\n+\n+error: aborting due to previous error\n+"}, {"sha": "9befa1ba60eed8fd3f62ffa522874b51718157dd", "filename": "src/test/ui/compare-method/region-extra.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -16,7 +16,7 @@ trait Master<'a, 'b> {\n }\n \n impl<'a, 'b> Master<'a, 'b> for () {\n-    fn foo() where 'a: 'b { }\n+    fn foo() where 'a: 'b { } //~ ERROR impl has stricter\n }\n \n fn main() {"}, {"sha": "d46376b4a42b71afa8471dca4edab8f26da21dfd", "filename": "src/test/ui/compare-method/region-extra.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -4,7 +4,7 @@ error[E0276]: impl has stricter requirements than trait\n 15 |     fn foo();\n    |     --------- definition of `foo` from trait\n ...\n-19 |     fn foo() where 'a: 'b { }\n+19 |     fn foo() where 'a: 'b { } //~ ERROR impl has stricter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `'a: 'b`\n \n error: aborting due to previous error"}, {"sha": "31ab6cb7fc42c30c17a69aa27e7684d77e4fc83b", "filename": "src/test/ui/compare-method/region-unrelated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -17,7 +17,7 @@ trait Master<'a, T: ?Sized, U> {\n // `U: 'a` does not imply `V: 'a`\n impl<'a, U, V> Master<'a, U, V> for () {\n     fn foo() where V: 'a { }\n-    //~^ ERROR parameter type `V` may not live long enough\n+    //~^ ERROR impl has stricter requirements than trait\n }\n \n fn main() {"}, {"sha": "85ab2a00521645ded9cc456184b2bfbc30cc4def", "filename": "src/test/ui/const-eval/issue-43197.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -15,7 +15,9 @@ const fn foo(x: u32) -> u32 {\n }\n \n fn main() {\n-    const X: u32 = 0-1;\n-    const Y: u32 = foo(0-1);\n+    const X: u32 = 0-1; //~ ERROR constant evaluation error\n+    //~^ WARN constant evaluation error\n+    const Y: u32 = foo(0-1); //~ ERROR constant evaluation error\n+    //~^ WARN constant evaluation error\n     println!(\"{} {}\", X, Y);\n }"}, {"sha": "82baab620ffab3167ed509263fc3f737db8ec4da", "filename": "src/test/ui/const-eval/issue-43197.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,27 +1,27 @@\n warning: constant evaluation error: attempt to subtract with overflow\n   --> $DIR/issue-43197.rs:18:20\n    |\n-18 |     const X: u32 = 0-1;\n+18 |     const X: u32 = 0-1; //~ ERROR constant evaluation error\n    |                    ^^^\n    |\n    = note: #[warn(const_err)] on by default\n \n warning: constant evaluation error: attempt to subtract with overflow\n-  --> $DIR/issue-43197.rs:19:20\n+  --> $DIR/issue-43197.rs:20:20\n    |\n-19 |     const Y: u32 = foo(0-1);\n+20 |     const Y: u32 = foo(0-1); //~ ERROR constant evaluation error\n    |                    ^^^^^^^^\n \n error[E0080]: constant evaluation error\n   --> $DIR/issue-43197.rs:18:20\n    |\n-18 |     const X: u32 = 0-1;\n+18 |     const X: u32 = 0-1; //~ ERROR constant evaluation error\n    |                    ^^^ attempt to subtract with overflow\n \n error[E0080]: constant evaluation error\n-  --> $DIR/issue-43197.rs:19:24\n+  --> $DIR/issue-43197.rs:20:24\n    |\n-19 |     const Y: u32 = foo(0-1);\n+20 |     const Y: u32 = foo(0-1); //~ ERROR constant evaluation error\n    |                        ^^^ attempt to subtract with overflow\n \n error: aborting due to 2 previous errors"}, {"sha": "24d4457f01d70439637a2bf74e08a7e61cfabd15", "filename": "src/test/ui/const-expr-addr-operator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fconst-expr-addr-operator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fconst-expr-addr-operator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-expr-addr-operator.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -12,9 +12,9 @@\n \n pub fn main() {\n     // Constant of generic type (int)\n-    const X: &'static u32 = &22;\n+    const X: &'static u32 = &22; //~ ERROR constant evaluation error\n     assert_eq!(0, match &22 {\n         X => 0,\n         _ => 1,\n     });\n-}\n\\ No newline at end of file\n+}"}, {"sha": "f6587c703bd7ff560165d451c3340658da874c14", "filename": "src/test/ui/const-expr-addr-operator.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fconst-expr-addr-operator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fconst-expr-addr-operator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-expr-addr-operator.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0080]: constant evaluation error\n   --> $DIR/const-expr-addr-operator.rs:15:29\n    |\n-15 |     const X: &'static u32 = &22;\n+15 |     const X: &'static u32 = &22; //~ ERROR constant evaluation error\n    |                             ^^^ unimplemented constant expression: address operator\n    |\n note: for pattern here"}, {"sha": "85640087a9d48a8ee75efd8daedf155cda41c9c2", "filename": "src/test/ui/cross-crate-macro-backtrace/main.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -8,10 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// error-pattern: in format string\n+\n // aux-build:extern_macro_crate.rs\n #[macro_use(myprintln, myprint)]\n extern crate extern_macro_crate;\n \n fn main() {\n-    myprintln!(\"{}\"); //~ ERROR in this macro\n+    myprintln!(\"{}\");\n }"}, {"sha": "3644c0468d6ef895085990fe63e351cb914e5dfe", "filename": "src/test/ui/cross-crate-macro-backtrace/main.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/main.rs:16:5\n+  --> $DIR/main.rs:18:5\n    |\n-16 |     myprintln!(\"{}\"); //~ ERROR in this macro\n+18 |     myprintln!(\"{}\");\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)"}, {"sha": "04ba4ab905eb1fb8980f046cbae83a7d9ce26c05", "filename": "src/test/ui/deref-suggestion.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fderef-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fderef-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-suggestion.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -9,26 +9,26 @@\n // except according to those terms.\n \n macro_rules! borrow {\n-    ($x:expr) => { &$x }\n+    ($x:expr) => { &$x } //~ ERROR mismatched types\n }\n \n fn foo(_: String) {}\n \n fn foo2(s: &String) {\n-    foo(s);\n+    foo(s); //~ ERROR mismatched types\n }\n \n fn foo3(_: u32) {}\n fn foo4(u: &u32) {\n-    foo3(u);\n+    foo3(u); //~ ERROR mismatched types\n }\n \n fn main() {\n     let s = String::new();\n     let r_s = &s;\n     foo2(r_s);\n-    foo(&\"aaa\".to_owned());\n-    foo(&mut \"aaa\".to_owned());\n+    foo(&\"aaa\".to_owned()); //~ ERROR mismatched types\n+    foo(&mut \"aaa\".to_owned()); //~ ERROR mismatched types\n     foo3(borrow!(0));\n     foo4(&0);\n }"}, {"sha": "6c418cf4bfbed63ba8a353ecb257bf7fece2a662", "filename": "src/test/ui/deref-suggestion.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-suggestion.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:18:9\n    |\n-18 |     foo(s);\n+18 |     foo(s); //~ ERROR mismatched types\n    |         ^ expected struct `std::string::String`, found reference\n    |\n    = note: expected type `std::string::String`\n@@ -16,7 +16,7 @@ error[E0308]: mismatched types\n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:23:10\n    |\n-23 |     foo3(u);\n+23 |     foo3(u); //~ ERROR mismatched types\n    |          ^ expected u32, found &u32\n    |\n    = note: expected type `u32`\n@@ -26,7 +26,7 @@ error[E0308]: mismatched types\n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:30:9\n    |\n-30 |     foo(&\"aaa\".to_owned());\n+30 |     foo(&\"aaa\".to_owned()); //~ ERROR mismatched types\n    |         ^^^^^^^^^^^^^^^^^ expected struct `std::string::String`, found reference\n    |\n    = note: expected type `std::string::String`\n@@ -36,7 +36,7 @@ error[E0308]: mismatched types\n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:31:9\n    |\n-31 |     foo(&mut \"aaa\".to_owned());\n+31 |     foo(&mut \"aaa\".to_owned()); //~ ERROR mismatched types\n    |         ^^^^^^^^^^^^^^^^^^^^^ expected struct `std::string::String`, found mutable reference\n    |\n    = note: expected type `std::string::String`\n@@ -46,7 +46,7 @@ error[E0308]: mismatched types\n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:12:20\n    |\n-12 |     ($x:expr) => { &$x }\n+12 |     ($x:expr) => { &$x } //~ ERROR mismatched types\n    |                    ^^^ expected u32, found &{integer}\n ...\n 32 |     foo3(borrow!(0));"}, {"sha": "21cdb38fdb11886c5da8188cf421fb8ea6c9c519", "filename": "src/test/ui/did_you_mean/E0178.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -11,10 +11,10 @@\n trait Foo {}\n \n struct Bar<'a> {\n-    w: &'a Foo + Copy,\n-    x: &'a Foo + 'a,\n-    y: &'a mut Foo + 'a,\n-    z: fn() -> Foo + 'a,\n+    w: &'a Foo + Copy, //~ ERROR expected a path\n+    x: &'a Foo + 'a, //~ ERROR expected a path\n+    y: &'a mut Foo + 'a, //~ ERROR expected a path\n+    z: fn() -> Foo + 'a, //~ ERROR expected a path\n }\n \n fn main() {"}, {"sha": "4fe8849feef11c42170395dcacd8ec4ce95174ee", "filename": "src/test/ui/did_you_mean/E0178.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,25 +1,25 @@\n error[E0178]: expected a path on the left-hand side of `+`, not `&'a Foo`\n   --> $DIR/E0178.rs:14:8\n    |\n-14 |     w: &'a Foo + Copy,\n+14 |     w: &'a Foo + Copy, //~ ERROR expected a path\n    |        ^^^^^^^^^^^^^^ help: try adding parentheses: `&'a (Foo + Copy)`\n \n error[E0178]: expected a path on the left-hand side of `+`, not `&'a Foo`\n   --> $DIR/E0178.rs:15:8\n    |\n-15 |     x: &'a Foo + 'a,\n+15 |     x: &'a Foo + 'a, //~ ERROR expected a path\n    |        ^^^^^^^^^^^^ help: try adding parentheses: `&'a (Foo + 'a)`\n \n error[E0178]: expected a path on the left-hand side of `+`, not `&'a mut Foo`\n   --> $DIR/E0178.rs:16:8\n    |\n-16 |     y: &'a mut Foo + 'a,\n+16 |     y: &'a mut Foo + 'a, //~ ERROR expected a path\n    |        ^^^^^^^^^^^^^^^^ help: try adding parentheses: `&'a mut (Foo + 'a)`\n \n error[E0178]: expected a path on the left-hand side of `+`, not `fn() -> Foo`\n   --> $DIR/E0178.rs:17:8\n    |\n-17 |     z: fn() -> Foo + 'a,\n+17 |     z: fn() -> Foo + 'a, //~ ERROR expected a path\n    |        ^^^^^^^^^^^^^^^^ perhaps you forgot parentheses?\n \n error: aborting due to 4 previous errors"}, {"sha": "076b61b179061eccfef56136070b0bc63170f8ce", "filename": "src/test/ui/did_you_mean/issue-21659-show-relevant-trait-impls-1.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -33,7 +33,4 @@ fn main() {\n \n     f1.foo(1usize);\n     //~^ error: the trait bound `Bar: Foo<usize>` is not satisfied\n-    //~| help: the following implementations were found:\n-    //~| help:   <Bar as Foo<i32>>\n-    //~| help:   <Bar as Foo<u8>>\n }"}, {"sha": "6beff6ba2a100b0dc0086c47088e70b4d6e83568", "filename": "src/test/ui/did_you_mean/issue-21659-show-relevant-trait-impls-2.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -37,10 +37,4 @@ fn main() {\n \n     f1.foo(1usize);\n     //~^ error: the trait bound `Bar: Foo<usize>` is not satisfied\n-    //~| help: the following implementations were found:\n-    //~| help:   <Bar as Foo<i8>>\n-    //~| help:   <Bar as Foo<i16>>\n-    //~| help:   <Bar as Foo<i32>>\n-    //~| help:   <Bar as Foo<u8>>\n-    //~| help: and 2 others\n }"}, {"sha": "1b31e064337e25bd27ed968a63d964830860ea84", "filename": "src/test/ui/did_you_mean/issue-31424.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -14,13 +14,13 @@ struct Struct;\n \n impl Struct {\n     fn foo(&mut self) {\n-        (&mut self).bar();\n+        (&mut self).bar(); //~ ERROR cannot borrow\n     }\n \n     // In this case we could keep the suggestion, but to distinguish the\n     // two cases is pretty hard. It's an obscure case anyway.\n     fn bar(self: &mut Self) {\n-        (&mut self).bar();\n+        (&mut self).bar(); //~ ERROR cannot borrow\n     }\n }\n "}, {"sha": "cd96d28ac98cb90d9a72cc3a2532277db708ef7a", "filename": "src/test/ui/did_you_mean/issue-31424.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0596]: cannot borrow immutable argument `self` as mutable\n   --> $DIR/issue-31424.rs:17:15\n    |\n-17 |         (&mut self).bar();\n+17 |         (&mut self).bar(); //~ ERROR cannot borrow\n    |               ^^^^\n    |               |\n    |               cannot reborrow mutably\n@@ -12,7 +12,7 @@ error[E0596]: cannot borrow immutable argument `self` as mutable\n    |\n 22 |     fn bar(self: &mut Self) {\n    |            --------------- consider changing this to `mut self: &mut Self`\n-23 |         (&mut self).bar();\n+23 |         (&mut self).bar(); //~ ERROR cannot borrow\n    |               ^^^^ cannot borrow mutably\n \n error: aborting due to 2 previous errors"}, {"sha": "9dfb38abd049fc5dbbe589c86de38d25e309dafd", "filename": "src/test/ui/did_you_mean/issue-34126.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -13,7 +13,7 @@ struct Z { }\n impl Z {\n     fn run(&self, z: &mut Z) { }\n     fn start(&mut self) {\n-        self.run(&mut self);\n+        self.run(&mut self); //~ ERROR cannot borrow\n     }\n }\n "}, {"sha": "a4921046c783331d6c72474228b1b8f3e7fdbbb0", "filename": "src/test/ui/did_you_mean/issue-34126.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0596]: cannot borrow immutable argument `self` as mutable\n   --> $DIR/issue-34126.rs:16:23\n    |\n-16 |         self.run(&mut self);\n+16 |         self.run(&mut self); //~ ERROR cannot borrow\n    |                       ^^^^\n    |                       |\n    |                       cannot reborrow mutably"}, {"sha": "a426c0f48ccec3c08e71c847a30a140234fed861", "filename": "src/test/ui/did_you_mean/issue-34337.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -13,5 +13,5 @@ fn get(key: &mut String) { }\n fn main() {\n     let mut v: Vec<String> = Vec::new();\n     let ref mut key = v[0];\n-    get(&mut key);\n+    get(&mut key); //~ ERROR cannot borrow\n }"}, {"sha": "a53d3d7277aa3dae4afa01efe8e15e64b3244525", "filename": "src/test/ui/did_you_mean/issue-34337.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0596]: cannot borrow immutable local variable `key` as mutable\n   --> $DIR/issue-34337.rs:16:14\n    |\n-16 |     get(&mut key);\n+16 |     get(&mut key); //~ ERROR cannot borrow\n    |              ^^^\n    |              |\n    |              cannot reborrow mutably"}, {"sha": "867b47cf99e1eea70f2d23c2b1132e6b1a488ac3", "filename": "src/test/ui/did_you_mean/issue-35937.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -14,7 +14,7 @@ struct Foo {\n \n fn main() {\n     let f = Foo { v: Vec::new() };\n-    f.v.push(\"cat\".to_string());\n+    f.v.push(\"cat\".to_string()); //~ ERROR cannot borrow\n }\n \n \n@@ -23,9 +23,9 @@ struct S {\n }\n fn foo() {\n     let s = S { x: 42 };\n-    s.x += 1;\n+    s.x += 1; //~ ERROR cannot assign\n }\n \n fn bar(s: S) {\n-    s.x += 1;\n+    s.x += 1; //~ ERROR cannot assign\n }"}, {"sha": "ec44755cb7c95a7663a5b984d6c11b21b520788e", "filename": "src/test/ui/did_you_mean/issue-35937.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,23 +3,23 @@ error[E0596]: cannot borrow immutable field `f.v` as mutable\n    |\n 16 |     let f = Foo { v: Vec::new() };\n    |         - consider changing this to `mut f`\n-17 |     f.v.push(\"cat\".to_string());\n+17 |     f.v.push(\"cat\".to_string()); //~ ERROR cannot borrow\n    |     ^^^ cannot mutably borrow immutable field\n \n error[E0594]: cannot assign to immutable field `s.x`\n   --> $DIR/issue-35937.rs:26:5\n    |\n 25 |     let s = S { x: 42 };\n    |         - consider changing this to `mut s`\n-26 |     s.x += 1;\n+26 |     s.x += 1; //~ ERROR cannot assign\n    |     ^^^^^^^^ cannot mutably borrow immutable field\n \n error[E0594]: cannot assign to immutable field `s.x`\n   --> $DIR/issue-35937.rs:30:5\n    |\n 29 | fn bar(s: S) {\n    |        - consider changing this to `mut s`\n-30 |     s.x += 1;\n+30 |     s.x += 1; //~ ERROR cannot assign\n    |     ^^^^^^^^ cannot mutably borrow immutable field\n \n error: aborting due to 3 previous errors"}, {"sha": "6e641ff025ce3f3ad24baa997e1db8375c375d88", "filename": "src/test/ui/did_you_mean/issue-36798.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -14,5 +14,5 @@ struct Foo {\n \n fn main() {\n     let f = Foo { bar: 22 };\n-    f.baz;\n+    f.baz; //~ ERROR no field\n }"}, {"sha": "73319d567bd763465d4734ac5d08d4f90f51924a", "filename": "src/test/ui/did_you_mean/issue-36798.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0609]: no field `baz` on type `Foo`\n   --> $DIR/issue-36798.rs:17:7\n    |\n-17 |     f.baz;\n+17 |     f.baz; //~ ERROR no field\n    |       ^^^ did you mean `bar`?\n \n error: aborting due to previous error"}, {"sha": "ec54a8d2b4390e8cd24450d50b9cf4761f1524fb", "filename": "src/test/ui/did_you_mean/issue-36798_unknown_field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -14,5 +14,5 @@ struct Foo {\n \n fn main() {\n     let f = Foo { bar: 22 };\n-    f.zz;\n+    f.zz; //~ ERROR no field\n }"}, {"sha": "f17672b234fc66653112951917e4193fa82be14f", "filename": "src/test/ui/did_you_mean/issue-36798_unknown_field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0609]: no field `zz` on type `Foo`\n   --> $DIR/issue-36798_unknown_field.rs:17:7\n    |\n-17 |     f.zz;\n+17 |     f.zz; //~ ERROR no field\n    |       ^^ unknown field\n    |\n    = note: available fields are: `bar`"}, {"sha": "8a1a7ce0c320b33ad9b96eb99bd2ef50825c5632", "filename": "src/test/ui/did_you_mean/issue-37139.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -19,7 +19,7 @@ fn main() {\n     let mut x = TestEnum::Item(10);\n     match x {\n         TestEnum::Item(ref mut x) => {\n-            test(&mut x);\n+            test(&mut x); //~ ERROR cannot borrow immutable\n         }\n     }\n }"}, {"sha": "65de724616d109dc7da296479ccadc8b08a14c2e", "filename": "src/test/ui/did_you_mean/issue-37139.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0596]: cannot borrow immutable local variable `x` as mutable\n   --> $DIR/issue-37139.rs:22:23\n    |\n-22 |             test(&mut x);\n+22 |             test(&mut x); //~ ERROR cannot borrow immutable\n    |                       ^\n    |                       |\n    |                       cannot reborrow mutably"}, {"sha": "c9c1c5d141d6a9b6184d4032007a276363af7f90", "filename": "src/test/ui/did_you_mean/issue-38054-do-not-show-unresolved-names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38054-do-not-show-unresolved-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38054-do-not-show-unresolved-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38054-do-not-show-unresolved-names.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use Foo;\n+use Foo; //~ ERROR unresolved\n \n-use Foo1;\n+use Foo1; //~ ERROR unresolved\n \n fn main() {}"}, {"sha": "c58958c7f5e3fbc5706670af091f2d989e1b6fbb", "filename": "src/test/ui/did_you_mean/issue-38054-do-not-show-unresolved-names.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38054-do-not-show-unresolved-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38054-do-not-show-unresolved-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38054-do-not-show-unresolved-names.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,13 +1,13 @@\n error[E0432]: unresolved import `Foo`\n   --> $DIR/issue-38054-do-not-show-unresolved-names.rs:11:5\n    |\n-11 | use Foo;\n+11 | use Foo; //~ ERROR unresolved\n    |     ^^^ no `Foo` in the root\n \n error[E0432]: unresolved import `Foo1`\n   --> $DIR/issue-38054-do-not-show-unresolved-names.rs:13:5\n    |\n-13 | use Foo1;\n+13 | use Foo1; //~ ERROR unresolved\n    |     ^^^^ no `Foo1` in the root\n \n error: aborting due to 2 previous errors"}, {"sha": "a7ce7406566b3ad5bc4c301a35f3ef0804824c48", "filename": "src/test/ui/did_you_mean/issue-38147-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -24,7 +24,7 @@ struct Foo<'a> {\n \n impl<'a> Foo<'a> {\n     fn f(&self) {\n-        self.s.push('x');\n+        self.s.push('x'); //~ ERROR cannot borrow data mutably\n     }\n }\n "}, {"sha": "6a262b3102638bc1d89c2037800be2213ec91b05", "filename": "src/test/ui/did_you_mean/issue-38147-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,7 +3,7 @@ error[E0389]: cannot borrow data mutably in a `&` reference\n    |\n 26 |     fn f(&self) {\n    |          ----- use `&mut self` here to make mutable\n-27 |         self.s.push('x');\n+27 |         self.s.push('x'); //~ ERROR cannot borrow data mutably\n    |         ^^^^^^ assignment into an immutable reference\n \n error: aborting due to previous error"}, {"sha": "cc6be98bcf8a70005b578e7b679a6133ecffd2fb", "filename": "src/test/ui/did_you_mean/issue-38147-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -14,7 +14,7 @@ struct Bar<'a> {\n \n impl<'a> Bar<'a> {\n     fn f(&mut self) {\n-        self.s.push('x');\n+        self.s.push('x'); //~ ERROR cannot borrow immutable borrowed\n     }\n }\n "}, {"sha": "b09ecf9057c0b1c85439e8428c7e2fc4313ca35f", "filename": "src/test/ui/did_you_mean/issue-38147-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow immutable borrowed content `*self.s` as mutable\n 12 |     s: &'a String\n    |        ---------- use `&'a mut String` here to make mutable\n ...\n-17 |         self.s.push('x');\n+17 |         self.s.push('x'); //~ ERROR cannot borrow immutable borrowed\n    |         ^^^^^^ cannot borrow as mutable\n \n error: aborting due to previous error"}, {"sha": "42b29100517223ccac48bc8426d69b0c8de0c0bc", "filename": "src/test/ui/did_you_mean/issue-38147-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -14,7 +14,7 @@ struct Qux<'a> {\n \n impl<'a> Qux<'a> {\n     fn f(&self) {\n-        self.s.push('x');\n+        self.s.push('x'); //~ ERROR cannot borrow immutable borrowed\n     }\n }\n "}, {"sha": "ca721f133a44b0edc17fed9b8d225ea6b4f1fefa", "filename": "src/test/ui/did_you_mean/issue-38147-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow immutable borrowed content `*self.s` as mutable\n 12 |     s: &'a String\n    |        ---------- use `&'a mut String` here to make mutable\n ...\n-17 |         self.s.push('x');\n+17 |         self.s.push('x'); //~ ERROR cannot borrow immutable borrowed\n    |         ^^^^^^ cannot borrow as mutable\n \n error: aborting due to previous error"}, {"sha": "49a8f2b6ff69125a86edfeb79e30071591cb2111", "filename": "src/test/ui/did_you_mean/issue-38147-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -13,7 +13,7 @@ struct Foo<'a> {\n }\n \n fn f(x: usize, f: &Foo) {\n-    f.s.push('x');\n+    f.s.push('x'); //~ ERROR cannot borrow data mutably\n }\n \n fn main() {}"}, {"sha": "33bf2e1160c9016a91b3dfce50c446bd3fe93580", "filename": "src/test/ui/did_you_mean/issue-38147-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,7 +3,7 @@ error[E0389]: cannot borrow data mutably in a `&` reference\n    |\n 15 | fn f(x: usize, f: &Foo) {\n    |                   ---- use `&mut Foo` here to make mutable\n-16 |     f.s.push('x');\n+16 |     f.s.push('x'); //~ ERROR cannot borrow data mutably\n    |     ^^^ assignment into an immutable reference\n \n error: aborting due to previous error"}, {"sha": "7cd7768078a0c5be92fd4f8ade36fae1145a38aa", "filename": "src/test/ui/did_you_mean/issue-39544.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -18,42 +18,42 @@ pub struct Z {\n \n fn main() {\n     let z = Z { x: X::Y };\n-    let _ = &mut z.x;\n+    let _ = &mut z.x; //~ ERROR cannot borrow\n }\n \n impl Z {\n     fn foo<'z>(&'z self) {\n-        let _ = &mut self.x;\n+        let _ = &mut self.x; //~ ERROR cannot borrow\n     }\n \n     fn foo1(&self, other: &Z) {\n-        let _ = &mut self.x;\n-        let _ = &mut other.x;\n+        let _ = &mut self.x; //~ ERROR cannot borrow\n+        let _ = &mut other.x; //~ ERROR cannot borrow\n     }\n \n     fn foo2<'a>(&'a self, other: &Z) {\n-        let _ = &mut self.x;\n-        let _ = &mut other.x;\n+        let _ = &mut self.x; //~ ERROR cannot borrow\n+        let _ = &mut other.x; //~ ERROR cannot borrow\n     }\n \n     fn foo3<'a>(self: &'a Self, other: &Z) {\n-        let _ = &mut self.x;\n-        let _ = &mut other.x;\n+        let _ = &mut self.x; //~ ERROR cannot borrow\n+        let _ = &mut other.x; //~ ERROR cannot borrow\n     }\n \n     fn foo4(other: &Z) {\n-        let _ = &mut other.x;\n+        let _ = &mut other.x; //~ ERROR cannot borrow\n     }\n \n }\n \n pub fn with_arg(z: Z, w: &Z) {\n-    let _ = &mut z.x;\n-    let _ = &mut w.x;\n+    let _ = &mut z.x; //~ ERROR cannot borrow\n+    let _ = &mut w.x; //~ ERROR cannot borrow\n }\n \n pub fn with_tuple() {\n     let mut y = 0;\n     let x = (&y,);\n-    *x.0 = 1;\n+    *x.0 = 1; //~ ERROR cannot assign to immutable borrowed content\n }"}, {"sha": "1fcb05374f681a919b041e0775dc33750b068f6c", "filename": "src/test/ui/did_you_mean/issue-39544.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,97 +3,97 @@ error[E0596]: cannot borrow immutable field `z.x` as mutable\n    |\n 20 |     let z = Z { x: X::Y };\n    |         - consider changing this to `mut z`\n-21 |     let _ = &mut z.x;\n+21 |     let _ = &mut z.x; //~ ERROR cannot borrow\n    |                  ^^^ cannot mutably borrow immutable field\n \n error[E0596]: cannot borrow immutable field `self.x` as mutable\n   --> $DIR/issue-39544.rs:26:22\n    |\n 25 |     fn foo<'z>(&'z self) {\n    |                -------- use `&'z mut self` here to make mutable\n-26 |         let _ = &mut self.x;\n+26 |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                      ^^^^^^ cannot mutably borrow immutable field\n \n error[E0596]: cannot borrow immutable field `self.x` as mutable\n   --> $DIR/issue-39544.rs:30:22\n    |\n 29 |     fn foo1(&self, other: &Z) {\n    |             ----- use `&mut self` here to make mutable\n-30 |         let _ = &mut self.x;\n+30 |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                      ^^^^^^ cannot mutably borrow immutable field\n \n error[E0596]: cannot borrow immutable field `other.x` as mutable\n   --> $DIR/issue-39544.rs:31:22\n    |\n 29 |     fn foo1(&self, other: &Z) {\n    |                           -- use `&mut Z` here to make mutable\n-30 |         let _ = &mut self.x;\n-31 |         let _ = &mut other.x;\n+30 |         let _ = &mut self.x; //~ ERROR cannot borrow\n+31 |         let _ = &mut other.x; //~ ERROR cannot borrow\n    |                      ^^^^^^^ cannot mutably borrow immutable field\n \n error[E0596]: cannot borrow immutable field `self.x` as mutable\n   --> $DIR/issue-39544.rs:35:22\n    |\n 34 |     fn foo2<'a>(&'a self, other: &Z) {\n    |                 -------- use `&'a mut self` here to make mutable\n-35 |         let _ = &mut self.x;\n+35 |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                      ^^^^^^ cannot mutably borrow immutable field\n \n error[E0596]: cannot borrow immutable field `other.x` as mutable\n   --> $DIR/issue-39544.rs:36:22\n    |\n 34 |     fn foo2<'a>(&'a self, other: &Z) {\n    |                                  -- use `&mut Z` here to make mutable\n-35 |         let _ = &mut self.x;\n-36 |         let _ = &mut other.x;\n+35 |         let _ = &mut self.x; //~ ERROR cannot borrow\n+36 |         let _ = &mut other.x; //~ ERROR cannot borrow\n    |                      ^^^^^^^ cannot mutably borrow immutable field\n \n error[E0596]: cannot borrow immutable field `self.x` as mutable\n   --> $DIR/issue-39544.rs:40:22\n    |\n 39 |     fn foo3<'a>(self: &'a Self, other: &Z) {\n    |                       -------- use `&'a mut Self` here to make mutable\n-40 |         let _ = &mut self.x;\n+40 |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                      ^^^^^^ cannot mutably borrow immutable field\n \n error[E0596]: cannot borrow immutable field `other.x` as mutable\n   --> $DIR/issue-39544.rs:41:22\n    |\n 39 |     fn foo3<'a>(self: &'a Self, other: &Z) {\n    |                                        -- use `&mut Z` here to make mutable\n-40 |         let _ = &mut self.x;\n-41 |         let _ = &mut other.x;\n+40 |         let _ = &mut self.x; //~ ERROR cannot borrow\n+41 |         let _ = &mut other.x; //~ ERROR cannot borrow\n    |                      ^^^^^^^ cannot mutably borrow immutable field\n \n error[E0596]: cannot borrow immutable field `other.x` as mutable\n   --> $DIR/issue-39544.rs:45:22\n    |\n 44 |     fn foo4(other: &Z) {\n    |                    -- use `&mut Z` here to make mutable\n-45 |         let _ = &mut other.x;\n+45 |         let _ = &mut other.x; //~ ERROR cannot borrow\n    |                      ^^^^^^^ cannot mutably borrow immutable field\n \n error[E0596]: cannot borrow immutable field `z.x` as mutable\n   --> $DIR/issue-39544.rs:51:18\n    |\n 50 | pub fn with_arg(z: Z, w: &Z) {\n    |                 - consider changing this to `mut z`\n-51 |     let _ = &mut z.x;\n+51 |     let _ = &mut z.x; //~ ERROR cannot borrow\n    |                  ^^^ cannot mutably borrow immutable field\n \n error[E0596]: cannot borrow immutable field `w.x` as mutable\n   --> $DIR/issue-39544.rs:52:18\n    |\n 50 | pub fn with_arg(z: Z, w: &Z) {\n    |                          -- use `&mut Z` here to make mutable\n-51 |     let _ = &mut z.x;\n-52 |     let _ = &mut w.x;\n+51 |     let _ = &mut z.x; //~ ERROR cannot borrow\n+52 |     let _ = &mut w.x; //~ ERROR cannot borrow\n    |                  ^^^ cannot mutably borrow immutable field\n \n error[E0594]: cannot assign to immutable borrowed content `*x.0`\n   --> $DIR/issue-39544.rs:58:5\n    |\n-58 |     *x.0 = 1;\n+58 |     *x.0 = 1; //~ ERROR cannot assign to immutable borrowed content\n    |     ^^^^^^^^ cannot borrow as mutable\n \n error: aborting due to 12 previous errors"}, {"sha": "660aedc3596edcd77d88e120fa1be26f4437321e", "filename": "src/test/ui/did_you_mean/issue-39802-show-5-trait-impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -31,7 +31,7 @@ impl Foo<bool> for bool {}\n impl Foo<i8> for bool {}\n \n fn main() {\n-    Foo::<i32>::bar(&1i8);\n-    Foo::<i32>::bar(&1u8);\n-    Foo::<i32>::bar(&true);\n+    Foo::<i32>::bar(&1i8); //~ ERROR is not satisfied\n+    Foo::<i32>::bar(&1u8); //~ ERROR is not satisfied\n+    Foo::<i32>::bar(&true); //~ ERROR is not satisfied\n }"}, {"sha": "d5c4add34b526392761133bf7ec1f9fcaa879669", "filename": "src/test/ui/did_you_mean/issue-39802-show-5-trait-impls.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: the trait bound `i8: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:34:5\n    |\n-34 |     Foo::<i32>::bar(&1i8);\n+34 |     Foo::<i32>::bar(&1i8); //~ ERROR is not satisfied\n    |     ^^^^^^^^^^^^^^^ the trait `Foo<i32>` is not implemented for `i8`\n    |\n    = help: the following implementations were found:\n@@ -15,7 +15,7 @@ error[E0277]: the trait bound `i8: Foo<i32>` is not satisfied\n error[E0277]: the trait bound `u8: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:35:5\n    |\n-35 |     Foo::<i32>::bar(&1u8);\n+35 |     Foo::<i32>::bar(&1u8); //~ ERROR is not satisfied\n    |     ^^^^^^^^^^^^^^^ the trait `Foo<i32>` is not implemented for `u8`\n    |\n    = help: the following implementations were found:\n@@ -28,7 +28,7 @@ error[E0277]: the trait bound `u8: Foo<i32>` is not satisfied\n error[E0277]: the trait bound `bool: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:36:5\n    |\n-36 |     Foo::<i32>::bar(&true);\n+36 |     Foo::<i32>::bar(&true); //~ ERROR is not satisfied\n    |     ^^^^^^^^^^^^^^^ the trait `Foo<i32>` is not implemented for `bool`\n    |\n    = help: the following implementations were found:"}, {"sha": "62316b96db03fc0820d3309b32a91d50d18f729c", "filename": "src/test/ui/did_you_mean/issue-40006.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -8,22 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-impl X {\n+impl X { //~ ERROR cannot be made into an object\n+//~^ ERROR missing\n     Y\n }\n \n struct S;\n \n-trait X {\n+trait X { //~ ERROR missing\n     X() {}\n-    fn xxx() { ### }\n-    L = M;\n-    Z = { 2 + 3 };\n-    ::Y ();\n+    fn xxx() { ### } //~ ERROR missing\n+    //~^ ERROR expected\n+    L = M; //~ ERROR missing\n+    Z = { 2 + 3 }; //~ ERROR expected one of\n+    ::Y (); //~ ERROR expected one of\n }\n \n impl S {\n-    pub hello_method(&self) {\n+    pub hello_method(&self) { //~ ERROR missing\n         println!(\"Hello\");\n     }\n }"}, {"sha": "8fadb4ff6b682452f22991317f17f68b471310f4", "filename": "src/test/ui/did_you_mean/issue-40006.stderr", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,65 +1,67 @@\n error: missing `fn`, `type`, or `const` for impl-item declaration\n   --> $DIR/issue-40006.rs:11:9\n    |\n-11 |   impl X {\n+11 |   impl X { //~ ERROR cannot be made into an object\n    |  _________^\n-12 | |     Y\n+12 | | //~^ ERROR missing\n+13 | |     Y\n    | |____^ missing `fn`, `type`, or `const`\n \n error: missing `fn`, `type`, or `const` for trait-item declaration\n-  --> $DIR/issue-40006.rs:17:10\n+  --> $DIR/issue-40006.rs:18:10\n    |\n-17 |   trait X {\n+18 |   trait X { //~ ERROR missing\n    |  __________^\n-18 | |     X() {}\n+19 | |     X() {}\n    | |____^ missing `fn`, `type`, or `const`\n \n error: expected `[`, found `#`\n-  --> $DIR/issue-40006.rs:19:17\n+  --> $DIR/issue-40006.rs:20:17\n    |\n-19 |     fn xxx() { ### }\n+20 |     fn xxx() { ### } //~ ERROR missing\n    |                 ^\n \n error: missing `fn`, `type`, or `const` for trait-item declaration\n-  --> $DIR/issue-40006.rs:19:21\n+  --> $DIR/issue-40006.rs:20:21\n    |\n-19 |       fn xxx() { ### }\n+20 |       fn xxx() { ### } //~ ERROR missing\n    |  _____________________^\n-20 | |     L = M;\n+21 | |     //~^ ERROR expected\n+22 | |     L = M; //~ ERROR missing\n    | |____^ missing `fn`, `type`, or `const`\n \n error: missing `fn`, `type`, or `const` for trait-item declaration\n-  --> $DIR/issue-40006.rs:20:11\n+  --> $DIR/issue-40006.rs:22:11\n    |\n-20 |       L = M;\n+22 |       L = M; //~ ERROR missing\n    |  ___________^\n-21 | |     Z = { 2 + 3 };\n+23 | |     Z = { 2 + 3 }; //~ ERROR expected one of\n    | |____^ missing `fn`, `type`, or `const`\n \n error: expected one of `const`, `extern`, `fn`, `type`, `unsafe`, or `}`, found `;`\n-  --> $DIR/issue-40006.rs:21:18\n+  --> $DIR/issue-40006.rs:23:18\n    |\n-21 |     Z = { 2 + 3 };\n+23 |     Z = { 2 + 3 }; //~ ERROR expected one of\n    |                  ^ expected one of `const`, `extern`, `fn`, `type`, `unsafe`, or `}` here\n \n error: expected one of `!` or `::`, found `(`\n-  --> $DIR/issue-40006.rs:22:9\n+  --> $DIR/issue-40006.rs:24:9\n    |\n-22 |     ::Y ();\n+24 |     ::Y (); //~ ERROR expected one of\n    |        -^ unexpected token\n    |        |\n    |        expected one of `!` or `::` here\n \n error: missing `fn`, `type`, or `const` for impl-item declaration\n-  --> $DIR/issue-40006.rs:26:8\n+  --> $DIR/issue-40006.rs:28:8\n    |\n-26 |     pub hello_method(&self) {\n+28 |     pub hello_method(&self) { //~ ERROR missing\n    |        ^ missing `fn`, `type`, or `const`\n \n error[E0038]: the trait `X` cannot be made into an object\n   --> $DIR/issue-40006.rs:11:6\n    |\n-11 | impl X {\n+11 | impl X { //~ ERROR cannot be made into an object\n    |      ^ the trait `X` cannot be made into an object\n    |\n    = note: method `xxx` has no receiver"}, {"sha": "eb62dc54084949d3a2043237d79033351480e1e7", "filename": "src/test/ui/did_you_mean/issue-40396.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -9,15 +9,16 @@\n // except according to those terms.\n \n fn foo() {\n-    println!(\"{:?}\", (0..13).collect<Vec<i32>>());\n+    println!(\"{:?}\", (0..13).collect<Vec<i32>>()); //~ ERROR chained comparison\n }\n \n fn bar() {\n-    println!(\"{:?}\", Vec<i32>::new());\n+    println!(\"{:?}\", Vec<i32>::new()); //~ ERROR chained comparison\n }\n \n fn qux() {\n-    println!(\"{:?}\", (0..13).collect<Vec<i32>());\n+    println!(\"{:?}\", (0..13).collect<Vec<i32>()); //~ ERROR chained comparison\n+    //~^ ERROR chained comparison\n }\n \n fn main() {}"}, {"sha": "8f4118b3ff05a5835862bd0fe3b543125e49b398", "filename": "src/test/ui/did_you_mean/issue-40396.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error: chained comparison operators require parentheses\n   --> $DIR/issue-40396.rs:12:37\n    |\n-12 |     println!(\"{:?}\", (0..13).collect<Vec<i32>>());\n+12 |     println!(\"{:?}\", (0..13).collect<Vec<i32>>()); //~ ERROR chained comparison\n    |                                     ^^^^^^^^\n    |\n    = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n@@ -10,7 +10,7 @@ error: chained comparison operators require parentheses\n error: chained comparison operators require parentheses\n   --> $DIR/issue-40396.rs:16:25\n    |\n-16 |     println!(\"{:?}\", Vec<i32>::new());\n+16 |     println!(\"{:?}\", Vec<i32>::new()); //~ ERROR chained comparison\n    |                         ^^^^^^^\n    |\n    = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n@@ -19,7 +19,7 @@ error: chained comparison operators require parentheses\n error: chained comparison operators require parentheses\n   --> $DIR/issue-40396.rs:20:37\n    |\n-20 |     println!(\"{:?}\", (0..13).collect<Vec<i32>());\n+20 |     println!(\"{:?}\", (0..13).collect<Vec<i32>()); //~ ERROR chained comparison\n    |                                     ^^^^^^^^\n    |\n    = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n@@ -28,7 +28,7 @@ error: chained comparison operators require parentheses\n error: chained comparison operators require parentheses\n   --> $DIR/issue-40396.rs:20:41\n    |\n-20 |     println!(\"{:?}\", (0..13).collect<Vec<i32>());\n+20 |     println!(\"{:?}\", (0..13).collect<Vec<i32>()); //~ ERROR chained comparison\n    |                                         ^^^^^^\n    |\n    = help: use `::<...>` instead of `<...>` if you meant to specify type arguments"}, {"sha": "3b48cef19021b4ce91b19870e6d780ab9d2053f1", "filename": "src/test/ui/did_you_mean/issue-40823.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     let mut buf = &[1, 2, 3, 4];\n-    buf.iter_mut();\n+    buf.iter_mut(); //~ ERROR cannot borrow immutable borrowed content\n }"}, {"sha": "0b71fc1d306a2675e72d5cf123b4df1e5b4d39f4", "filename": "src/test/ui/did_you_mean/issue-40823.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0596]: cannot borrow immutable borrowed content `*buf` as mutable\n   --> $DIR/issue-40823.rs:13:5\n    |\n-13 |     buf.iter_mut();\n+13 |     buf.iter_mut(); //~ ERROR cannot borrow immutable borrowed content\n    |     ^^^ cannot borrow as mutable\n \n error: aborting due to previous error"}, {"sha": "98c909e212fddb4fc57d7ebff9f0877d4b497b47", "filename": "src/test/ui/did_you_mean/issue-41679.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let x = ~1;\n+    let x = ~1; //~ ERROR can not be used as a unary operator\n }"}, {"sha": "f1ccb3e6e141c125c3a427a910eb47fbf8c29c38", "filename": "src/test/ui/did_you_mean/issue-41679.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error: `~` can not be used as a unary operator\n   --> $DIR/issue-41679.rs:12:13\n    |\n-12 |     let x = ~1;\n+12 |     let x = ~1; //~ ERROR can not be used as a unary operator\n    |             ^ did you mean `!`?\n    |\n    = help: use `!` instead of `~` if you meant to perform bitwise negation"}, {"sha": "ad5bedcefc2dd103a9db02c7e3d536c2717d2180", "filename": "src/test/ui/did_you_mean/issue-42599_available_fields_note.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -24,10 +24,12 @@ mod submodule {\n     impl Demo {\n         fn new_with_secret_two() -> Self {\n             Self { secret_integer: 2, inocently_mispellable: () }\n+            //~^ ERROR no field\n         }\n \n         fn new_with_secret_three() -> Self {\n             Self { secret_integer: 3, egregiously_nonexistent_field: () }\n+            //~^ ERROR no field\n         }\n     }\n \n@@ -38,6 +40,8 @@ fn main() {\n \n     let demo = Demo::default();\n     let innocent_field_misaccess = demo.inocently_mispellable;\n+    //~^ ERROR no field\n     // note shouldn't suggest private fields\n     let egregious_field_misaccess = demo.egregiously_nonexistent_field;\n+    //~^ ERROR no field\n }"}, {"sha": "d5dcef638471e20737271e4f61341094f9dde7dd", "filename": "src/test/ui/did_you_mean/issue-42599_available_fields_note.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -5,23 +5,23 @@ error[E0560]: struct `submodule::Demo` has no field named `inocently_mispellable\n    |                                       ^^^^^^^^^^^^^^^^^^^^^^ field does not exist - did you mean `innocently_misspellable`?\n \n error[E0560]: struct `submodule::Demo` has no field named `egregiously_nonexistent_field`\n-  --> $DIR/issue-42599_available_fields_note.rs:30:39\n+  --> $DIR/issue-42599_available_fields_note.rs:31:39\n    |\n-30 |             Self { secret_integer: 3, egregiously_nonexistent_field: () }\n+31 |             Self { secret_integer: 3, egregiously_nonexistent_field: () }\n    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `submodule::Demo` does not have this field\n    |\n    = note: available fields are: `favorite_integer`, `secret_integer`, `innocently_misspellable`, `another_field`, `yet_another_field` ... and 2 others\n \n error[E0609]: no field `inocently_mispellable` on type `submodule::Demo`\n-  --> $DIR/issue-42599_available_fields_note.rs:40:41\n+  --> $DIR/issue-42599_available_fields_note.rs:42:41\n    |\n-40 |     let innocent_field_misaccess = demo.inocently_mispellable;\n+42 |     let innocent_field_misaccess = demo.inocently_mispellable;\n    |                                         ^^^^^^^^^^^^^^^^^^^^^ did you mean `innocently_misspellable`?\n \n error[E0609]: no field `egregiously_nonexistent_field` on type `submodule::Demo`\n-  --> $DIR/issue-42599_available_fields_note.rs:42:42\n+  --> $DIR/issue-42599_available_fields_note.rs:45:42\n    |\n-42 |     let egregious_field_misaccess = demo.egregiously_nonexistent_field;\n+45 |     let egregious_field_misaccess = demo.egregiously_nonexistent_field;\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field\n    |\n    = note: available fields are: `favorite_integer`, `innocently_misspellable`"}, {"sha": "ff4bb428d5f5f73794d55b3bd6444b8bd551bea1", "filename": "src/test/ui/did_you_mean/issue-42764.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -19,4 +19,5 @@ fn this_function_expects_a_double_option<T>(d: DoubleOption<T>) {}\n fn main() {\n     let n: usize = 42;\n     this_function_expects_a_double_option(n);\n+    //~^ ERROR mismatched types\n }"}, {"sha": "7b877523e35cc37d73170ece35c8d27c956a10e7", "filename": "src/test/ui/did_you_mean/issue-43871-enum-instead-of-variant.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -11,15 +11,15 @@\n enum Example { Ex(String), NotEx }\n \n fn result_test() {\n-    let x = Option(1);\n+    let x = Option(1); //~ ERROR expected function, found enum\n \n-    if let Option(_) = x {\n+    if let Option(_) = x { //~ ERROR expected tuple struct/variant, found enum\n         println!(\"It is OK.\");\n     }\n \n     let y = Example::Ex(String::from(\"test\"));\n \n-    if let Example(_) = y {\n+    if let Example(_) = y { //~ ERROR expected tuple struct/variant, found enum\n         println!(\"It is OK.\");\n     }\n }"}, {"sha": "5390e541fb7140bcf1b446cd96db556503e2a60c", "filename": "src/test/ui/did_you_mean/issue-43871-enum-instead-of-variant.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0423]: expected function, found enum `Option`\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:14:13\n    |\n-14 |     let x = Option(1);\n+14 |     let x = Option(1); //~ ERROR expected function, found enum\n    |             ^^^^^^\n    |\n    = note: did you mean to use one of the following variants?\n@@ -11,7 +11,7 @@ error[E0423]: expected function, found enum `Option`\n error[E0532]: expected tuple struct/variant, found enum `Option`\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:16:12\n    |\n-16 |     if let Option(_) = x {\n+16 |     if let Option(_) = x { //~ ERROR expected tuple struct/variant, found enum\n    |            ^^^^^^\n    |\n    = note: did you mean to use one of the following variants?\n@@ -21,7 +21,7 @@ error[E0532]: expected tuple struct/variant, found enum `Option`\n error[E0532]: expected tuple struct/variant, found enum `Example`\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:22:12\n    |\n-22 |     if let Example(_) = y {\n+22 |     if let Example(_) = y { //~ ERROR expected tuple struct/variant, found enum\n    |            ^^^^^^^\n    |\n    = note: did you mean to use one of the following variants?"}, {"sha": "2d27f167a03a49042040157eddb58e59c5d2b3c4", "filename": "src/test/ui/did_you_mean/recursion_limit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -41,5 +41,5 @@ enum N { N(usize) }\n fn is_send<T:Send>() { }\n \n fn main() {\n-    is_send::<A>();\n+    is_send::<A>(); //~ ERROR overflow evaluating the requirement\n }"}, {"sha": "7fac604ba49d735955ab7f85fca125e6cf1eaf78", "filename": "src/test/ui/did_you_mean/recursion_limit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0275]: overflow evaluating the requirement `K: std::marker::Send`\n   --> $DIR/recursion_limit.rs:44:5\n    |\n-44 |     is_send::<A>();\n+44 |     is_send::<A>(); //~ ERROR overflow evaluating the requirement\n    |     ^^^^^^^^^^^^\n    |\n    = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate"}, {"sha": "3e261ec636c0801f3b6ff90fa37aef80d5af84d3", "filename": "src/test/ui/did_you_mean/recursion_limit_deref.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+//~^^^^^^^^^^ ERROR reached the recursion limit\n+\n // Test that the recursion limit can be changed and that the compiler\n // suggests a fix. In this case, we have a long chain of Deref impls\n // which will cause an overflow during the autoderef loop.\n@@ -57,6 +59,7 @@ link!(K, Bottom);\n \n fn main() {\n     let t = Top::new();\n-    let x: &Bottom = &t;\n+    let x: &Bottom = &t; //~ ERROR mismatched types\n+    //~^ error recursion limit\n }\n "}, {"sha": "951b0b10580609649035ba3ef29c5ae2b07fec9d", "filename": "src/test/ui/did_you_mean/recursion_limit_deref.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0055]: reached the recursion limit while auto-dereferencing I\n-  --> $DIR/recursion_limit_deref.rs:60:22\n+  --> $DIR/recursion_limit_deref.rs:62:22\n    |\n-60 |     let x: &Bottom = &t;\n+62 |     let x: &Bottom = &t; //~ ERROR mismatched types\n    |                      ^^ deref recursion limit reached\n    |\n    = help: consider adding a `#[recursion_limit=\"20\"]` attribute to your crate\n@@ -11,9 +11,9 @@ error[E0055]: reached the recursion limit while auto-dereferencing I\n   = help: consider adding a `#[recursion_limit=\"20\"]` attribute to your crate\n \n error[E0308]: mismatched types\n-  --> $DIR/recursion_limit_deref.rs:60:22\n+  --> $DIR/recursion_limit_deref.rs:62:22\n    |\n-60 |     let x: &Bottom = &t;\n+62 |     let x: &Bottom = &t; //~ ERROR mismatched types\n    |                      ^^ expected struct `Bottom`, found struct `Top`\n    |\n    = note: expected type `&Bottom`"}, {"sha": "16d07f369907b5a4eeb267a38ff64c9745fa32cd", "filename": "src/test/ui/did_you_mean/recursion_limit_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -17,7 +17,7 @@\n \n macro_rules! recurse {\n     () => { };\n-    ($t:tt $($tail:tt)*) => { recurse!($($tail)*) };\n+    ($t:tt $($tail:tt)*) => { recurse!($($tail)*) }; //~ ERROR recursion limit\n }\n \n fn main() {"}, {"sha": "24e223c797b21edbc0b59768dad333f26c4bd674", "filename": "src/test/ui/did_you_mean/recursion_limit_macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error: recursion limit reached while expanding the macro `recurse`\n   --> $DIR/recursion_limit_macro.rs:20:31\n    |\n-20 |     ($t:tt $($tail:tt)*) => { recurse!($($tail)*) };\n+20 |     ($t:tt $($tail:tt)*) => { recurse!($($tail)*) }; //~ ERROR recursion limit\n    |                               ^^^^^^^^^^^^^^^^^^^\n ...\n 24 |     recurse!(0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9);"}, {"sha": "76bc971e115f7744c8c8709e962c201157d8ae62", "filename": "src/test/ui/did_you_mean/trait-object-reference-without-parens-suggestion.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let _: &Copy + 'static;\n-    let _: &'static Copy + 'static;\n+    let _: &Copy + 'static; //~ ERROR expected a path\n+    //~^ ERROR cannot be made into an object\n+    let _: &'static Copy + 'static; //~ ERROR expected a path\n }"}, {"sha": "325a19eee140b6b12065e548d2d9c5a6abea6c28", "filename": "src/test/ui/did_you_mean/trait-object-reference-without-parens-suggestion.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,19 +1,19 @@\n error[E0178]: expected a path on the left-hand side of `+`, not `&Copy`\n   --> $DIR/trait-object-reference-without-parens-suggestion.rs:12:12\n    |\n-12 |     let _: &Copy + 'static;\n+12 |     let _: &Copy + 'static; //~ ERROR expected a path\n    |            ^^^^^^^^^^^^^^^ help: try adding parentheses: `&(Copy + 'static)`\n \n error[E0178]: expected a path on the left-hand side of `+`, not `&'static Copy`\n-  --> $DIR/trait-object-reference-without-parens-suggestion.rs:13:12\n+  --> $DIR/trait-object-reference-without-parens-suggestion.rs:14:12\n    |\n-13 |     let _: &'static Copy + 'static;\n+14 |     let _: &'static Copy + 'static; //~ ERROR expected a path\n    |            ^^^^^^^^^^^^^^^^^^^^^^^ help: try adding parentheses: `&'static (Copy + 'static)`\n \n error[E0038]: the trait `std::marker::Copy` cannot be made into an object\n   --> $DIR/trait-object-reference-without-parens-suggestion.rs:12:12\n    |\n-12 |     let _: &Copy + 'static;\n+12 |     let _: &Copy + 'static; //~ ERROR expected a path\n    |            ^^^^^ the trait `std::marker::Copy` cannot be made into an object\n    |\n    = note: the trait cannot require that `Self : Sized`"}, {"sha": "f76c2251f8c707fd35fc34cbac534b066101bd59", "filename": "src/test/ui/dropck/dropck-eyepatch-extern-crate.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -36,20 +36,23 @@ fn main() {\n     dt = Dt(\"dt\", &c_long);\n     dr = Dr(\"dr\", &c_long);\n     // Error: destructor order imprecisely modelled\n-    dt = Dt(\"dt\", &c); //~ ERROR `c` does not live long enough\n-    dr = Dr(\"dr\", &c); //~ ERROR `c` does not live long enough\n+    dt = Dt(\"dt\", &c);\n+    dr = Dr(\"dr\", &c);\n \n     // No error: Drop impl asserts .1 (A and &'a _) are not accessed\n     pt = Pt(\"pt\", &c, &c_long);\n     pr = Pr(\"pr\", &c, &c_long);\n \n     // Error: Drop impl's assertion does not apply to `B` nor `&'b _`\n-    pt = Pt(\"pt\", &c_long, &c); //~ ERROR `c` does not live long enough\n-    pr = Pr(\"pr\", &c_long, &c); //~ ERROR `c` does not live long enough\n+    pt = Pt(\"pt\", &c_long, &c);\n+    pr = Pr(\"pr\", &c_long, &c);\n \n     // No error: St and Sr have no destructor.\n     st = St(\"st\", &c);\n     sr = Sr(\"sr\", &c);\n \n     println!(\"{:?}\", (dt.0, dr.0, pt.0, pr.0, st.0, sr.0));\n-}\n+}//~ ERROR `c` does not live long enough\n+//~^ ERROR `c` does not live long enough\n+//~| ERROR `c` does not live long enough\n+//~| ERROR `c` does not live long enough"}, {"sha": "43d5294c93a05e2901248b3f2c04a4f8dad8039c", "filename": "src/test/ui/dropck/dropck-eyepatch-extern-crate.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,43 +1,43 @@\n error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch-extern-crate.rs:55:1\n    |\n-39 |     dt = Dt(\"dt\", &c); //~ ERROR `c` does not live long enough\n+39 |     dt = Dt(\"dt\", &c);\n    |                    - borrow occurs here\n ...\n-55 | }\n+55 | }//~ ERROR `c` does not live long enough\n    | ^ `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch-extern-crate.rs:55:1\n    |\n-40 |     dr = Dr(\"dr\", &c); //~ ERROR `c` does not live long enough\n+40 |     dr = Dr(\"dr\", &c);\n    |                    - borrow occurs here\n ...\n-55 | }\n+55 | }//~ ERROR `c` does not live long enough\n    | ^ `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch-extern-crate.rs:55:1\n    |\n-47 |     pt = Pt(\"pt\", &c_long, &c); //~ ERROR `c` does not live long enough\n+47 |     pt = Pt(\"pt\", &c_long, &c);\n    |                             - borrow occurs here\n ...\n-55 | }\n+55 | }//~ ERROR `c` does not live long enough\n    | ^ `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch-extern-crate.rs:55:1\n    |\n-48 |     pr = Pr(\"pr\", &c_long, &c); //~ ERROR `c` does not live long enough\n+48 |     pr = Pr(\"pr\", &c_long, &c);\n    |                             - borrow occurs here\n ...\n-55 | }\n+55 | }//~ ERROR `c` does not live long enough\n    | ^ `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created"}, {"sha": "95ee45a6117c761593113bfb16cbd5cf4d226805", "filename": "src/test/ui/dropck/dropck-eyepatch-reorder.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -54,20 +54,24 @@ fn main() {\n     dt = Dt(\"dt\", &c_long);\n     dr = Dr(\"dr\", &c_long);\n     // Error: destructor order imprecisely modelled\n-    dt = Dt(\"dt\", &c); //~ ERROR `c` does not live long enough\n-    dr = Dr(\"dr\", &c); //~ ERROR `c` does not live long enough\n+    dt = Dt(\"dt\", &c);\n+    dr = Dr(\"dr\", &c);\n \n     // No error: Drop impl asserts .1 (A and &'a _) are not accessed\n     pt = Pt(\"pt\", &c, &c_long);\n     pr = Pr(\"pr\", &c, &c_long);\n \n     // Error: Drop impl's assertion does not apply to `B` nor `&'b _`\n-    pt = Pt(\"pt\", &c_long, &c); //~ ERROR `c` does not live long enough\n-    pr = Pr(\"pr\", &c_long, &c); //~ ERROR `c` does not live long enough\n+    pt = Pt(\"pt\", &c_long, &c);\n+    pr = Pr(\"pr\", &c_long, &c);\n \n     // No error: St and Sr have no destructor.\n     st = St(\"st\", &c);\n     sr = Sr(\"sr\", &c);\n \n     println!(\"{:?}\", (dt.0, dr.0, pt.0, pr.0, st.0, sr.0));\n }\n+//~^ ERROR `c` does not live long enough\n+//~| ERROR `c` does not live long enough\n+//~| ERROR `c` does not live long enough\n+//~| ERROR `c` does not live long enough"}, {"sha": "1ca456c7ba38b5578152ee7afbb057d0a1430fff", "filename": "src/test/ui/dropck/dropck-eyepatch-reorder.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch-reorder.rs:73:1\n    |\n-57 |     dt = Dt(\"dt\", &c); //~ ERROR `c` does not live long enough\n+57 |     dt = Dt(\"dt\", &c);\n    |                    - borrow occurs here\n ...\n 73 | }\n@@ -12,7 +12,7 @@ error[E0597]: `c` does not live long enough\n error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch-reorder.rs:73:1\n    |\n-58 |     dr = Dr(\"dr\", &c); //~ ERROR `c` does not live long enough\n+58 |     dr = Dr(\"dr\", &c);\n    |                    - borrow occurs here\n ...\n 73 | }\n@@ -23,7 +23,7 @@ error[E0597]: `c` does not live long enough\n error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch-reorder.rs:73:1\n    |\n-65 |     pt = Pt(\"pt\", &c_long, &c); //~ ERROR `c` does not live long enough\n+65 |     pt = Pt(\"pt\", &c_long, &c);\n    |                             - borrow occurs here\n ...\n 73 | }\n@@ -34,7 +34,7 @@ error[E0597]: `c` does not live long enough\n error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch-reorder.rs:73:1\n    |\n-66 |     pr = Pr(\"pr\", &c_long, &c); //~ ERROR `c` does not live long enough\n+66 |     pr = Pr(\"pr\", &c_long, &c);\n    |                             - borrow occurs here\n ...\n 73 | }"}, {"sha": "de94954e9218b3b7d82733e9b3201b205e08aa30", "filename": "src/test/ui/dropck/dropck-eyepatch.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -77,20 +77,24 @@ fn main() {\n     dt = Dt(\"dt\", &c_long);\n     dr = Dr(\"dr\", &c_long);\n     // Error: destructor order imprecisely modelled\n-    dt = Dt(\"dt\", &c); //~ ERROR `c` does not live long enough\n-    dr = Dr(\"dr\", &c); //~ ERROR `c` does not live long enough\n+    dt = Dt(\"dt\", &c);\n+    dr = Dr(\"dr\", &c);\n \n     // No error: Drop impl asserts .1 (A and &'a _) are not accessed\n     pt = Pt(\"pt\", &c, &c_long);\n     pr = Pr(\"pr\", &c, &c_long);\n \n     // Error: Drop impl's assertion does not apply to `B` nor `&'b _`\n-    pt = Pt(\"pt\", &c_long, &c); //~ ERROR `c` does not live long enough\n-    pr = Pr(\"pr\", &c_long, &c); //~ ERROR `c` does not live long enough\n+    pt = Pt(\"pt\", &c_long, &c);\n+    pr = Pr(\"pr\", &c_long, &c);\n \n     // No error: St and Sr have no destructor.\n     st = St(\"st\", &c);\n     sr = Sr(\"sr\", &c);\n \n     println!(\"{:?}\", (dt.0, dr.0, pt.0, pr.0, st.0, sr.0));\n }\n+//~^ ERROR `c` does not live long enough\n+//~| ERROR `c` does not live long enough\n+//~| ERROR `c` does not live long enough\n+//~| ERROR `c` does not live long enough"}, {"sha": "d41ff3741197652fb8049e52328e80b1c9b71e5b", "filename": "src/test/ui/dropck/dropck-eyepatch.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch.rs:96:1\n    |\n-80 |     dt = Dt(\"dt\", &c); //~ ERROR `c` does not live long enough\n+80 |     dt = Dt(\"dt\", &c);\n    |                    - borrow occurs here\n ...\n 96 | }\n@@ -12,7 +12,7 @@ error[E0597]: `c` does not live long enough\n error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch.rs:96:1\n    |\n-81 |     dr = Dr(\"dr\", &c); //~ ERROR `c` does not live long enough\n+81 |     dr = Dr(\"dr\", &c);\n    |                    - borrow occurs here\n ...\n 96 | }\n@@ -23,7 +23,7 @@ error[E0597]: `c` does not live long enough\n error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch.rs:96:1\n    |\n-88 |     pt = Pt(\"pt\", &c_long, &c); //~ ERROR `c` does not live long enough\n+88 |     pt = Pt(\"pt\", &c_long, &c);\n    |                             - borrow occurs here\n ...\n 96 | }\n@@ -34,7 +34,7 @@ error[E0597]: `c` does not live long enough\n error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch.rs:96:1\n    |\n-89 |     pr = Pr(\"pr\", &c_long, &c); //~ ERROR `c` does not live long enough\n+89 |     pr = Pr(\"pr\", &c_long, &c);\n    |                             - borrow occurs here\n ...\n 96 | }"}, {"sha": "b8b30a2841421ab972a7e6900f91c37fb3dd5ee9", "filename": "src/test/ui/e0119/complex-impl.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fe0119%2Fcomplex-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fe0119%2Fcomplex-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fcomplex-impl.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -16,6 +16,7 @@ use complex_impl_support::{External, M};\n \n struct Q;\n \n-impl<R> External for (Q, R) {}\n+impl<R> External for (Q, R) {} //~ ERROR must be used\n+//~^ ERROR conflicting implementations of trait\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "e4f8020145c65d296d7b49d622fc59f0d601732e", "filename": "src/test/ui/e0119/complex-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fe0119%2Fcomplex-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fe0119%2Fcomplex-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fcomplex-impl.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0119]: conflicting implementations of trait `complex_impl_support::External` for type `(Q, complex_impl_support::M<'_, '_, '_, std::boxed::Box<_>, _, _>)`:\n   --> $DIR/complex-impl.rs:19:1\n    |\n-19 | impl<R> External for (Q, R) {}\n+19 | impl<R> External for (Q, R) {} //~ ERROR must be used\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `complex_impl_support`:\n@@ -11,7 +11,7 @@ error[E0119]: conflicting implementations of trait `complex_impl_support::Extern\n error[E0210]: type parameter `R` must be used as the type parameter for some local type (e.g. `MyStruct<T>`); only traits defined in the current crate can be implemented for a type parameter\n   --> $DIR/complex-impl.rs:19:1\n    |\n-19 | impl<R> External for (Q, R) {}\n+19 | impl<R> External for (Q, R) {} //~ ERROR must be used\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "ed9033ad53d565f0314f1d714004c60226a7da02", "filename": "src/test/ui/e0119/conflict-with-std.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -14,25 +14,25 @@ use std::marker::PhantomData;\n use std::convert::{TryFrom, AsRef};\n \n struct Q;\n-impl AsRef<Q> for Box<Q> {\n+impl AsRef<Q> for Box<Q> { //~ ERROR conflicting implementations\n     fn as_ref(&self) -> &Q {\n         &**self\n     }\n }\n \n struct S;\n-impl From<S> for S {\n+impl From<S> for S { //~ ERROR conflicting implementations\n     fn from(s: S) -> S {\n         s\n     }\n }\n \n struct X;\n-impl TryFrom<X> for X {\n+impl TryFrom<X> for X { //~ ERROR conflicting implementations\n     type Error = ();\n     fn try_from(u: X) -> Result<X, ()> {\n         Ok(u)\n     }\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "21f2dd05b4d797b7ef28cbf73b0b49fd6de5b847", "filename": "src/test/ui/e0119/conflict-with-std.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0119]: conflicting implementations of trait `std::convert::AsRef<Q>` for type `std::boxed::Box<Q>`:\n   --> $DIR/conflict-with-std.rs:17:1\n    |\n-17 | / impl AsRef<Q> for Box<Q> {\n+17 | / impl AsRef<Q> for Box<Q> { //~ ERROR conflicting implementations\n 18 | |     fn as_ref(&self) -> &Q {\n 19 | |         &**self\n 20 | |     }\n@@ -15,7 +15,7 @@ error[E0119]: conflicting implementations of trait `std::convert::AsRef<Q>` for\n error[E0119]: conflicting implementations of trait `std::convert::From<S>` for type `S`:\n   --> $DIR/conflict-with-std.rs:24:1\n    |\n-24 | / impl From<S> for S {\n+24 | / impl From<S> for S { //~ ERROR conflicting implementations\n 25 | |     fn from(s: S) -> S {\n 26 | |         s\n 27 | |     }\n@@ -28,7 +28,7 @@ error[E0119]: conflicting implementations of trait `std::convert::From<S>` for t\n error[E0119]: conflicting implementations of trait `std::convert::TryFrom<X>` for type `X`:\n   --> $DIR/conflict-with-std.rs:31:1\n    |\n-31 | / impl TryFrom<X> for X {\n+31 | / impl TryFrom<X> for X { //~ ERROR conflicting implementations\n 32 | |     type Error = ();\n 33 | |     fn try_from(u: X) -> Result<X, ()> {\n 34 | |         Ok(u)"}, {"sha": "c6d03a4cfc0a76fd98bc9cad01bfc41d321afa3f", "filename": "src/test/ui/e0119/issue-23563.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fe0119%2Fissue-23563.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fe0119%2Fissue-23563.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fissue-23563.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -20,7 +20,7 @@ use a::LolTo;\n \n struct LocalType<T>(Option<T>);\n \n-impl<'a, T> LolFrom<&'a [T]> for LocalType<T> {\n+impl<'a, T> LolFrom<&'a [T]> for LocalType<T> { //~ ERROR conflicting implementations of trait\n     fn from(_: &'a [T]) -> LocalType<T> { LocalType(None) }\n }\n \n@@ -36,4 +36,4 @@ impl LolTo<LocalType<u8>> for [u8] {\n     }\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "9dddf193063fbbe8966a1dff62d6733d6dd0fcbb", "filename": "src/test/ui/e0119/issue-23563.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fe0119%2Fissue-23563.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fe0119%2Fissue-23563.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fissue-23563.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0119]: conflicting implementations of trait `a::LolFrom<&[_]>` for type `LocalType<_>`:\n   --> $DIR/issue-23563.rs:23:1\n    |\n-23 | / impl<'a, T> LolFrom<&'a [T]> for LocalType<T> {\n+23 | / impl<'a, T> LolFrom<&'a [T]> for LocalType<T> { //~ ERROR conflicting implementations of trait\n 24 | |     fn from(_: &'a [T]) -> LocalType<T> { LocalType(None) }\n 25 | | }\n    | |_^"}, {"sha": "98953153faf96fbca7034837d8a159018d99e21d", "filename": "src/test/ui/e0119/issue-27403.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fe0119%2Fissue-27403.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fe0119%2Fissue-27403.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fissue-27403.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -12,10 +12,10 @@ pub struct GenX<S> {\n     inner: S,\n }\n \n-impl<S> Into<S> for GenX<S> {\n+impl<S> Into<S> for GenX<S> { //~ ERROR conflicting implementations\n     fn into(self) -> S {\n         self.inner\n     }\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "68d7235f6aaee63c90a97f6d50e222abe434905a", "filename": "src/test/ui/e0119/issue-27403.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fe0119%2Fissue-27403.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fe0119%2Fissue-27403.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fissue-27403.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0119]: conflicting implementations of trait `std::convert::Into<_>` for type `GenX<_>`:\n   --> $DIR/issue-27403.rs:15:1\n    |\n-15 | / impl<S> Into<S> for GenX<S> {\n+15 | / impl<S> Into<S> for GenX<S> { //~ ERROR conflicting implementations\n 16 | |     fn into(self) -> S {\n 17 | |         self.inner\n 18 | |     }"}, {"sha": "8a52464ff50a43cf3207dff1d4033848ec83d542", "filename": "src/test/ui/e0119/issue-28981.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -12,6 +12,7 @@ use std::ops::Deref;\n \n struct Foo;\n \n-impl<Foo> Deref for Foo { }\n+impl<Foo> Deref for Foo { } //~ ERROR must be used\n+//~^ ERROR conflicting implementations\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "aac9f7ae964a4bbda5746023d4a19cc7984fe455", "filename": "src/test/ui/e0119/issue-28981.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0119]: conflicting implementations of trait `std::ops::Deref` for type `&_`:\n   --> $DIR/issue-28981.rs:15:1\n    |\n-15 | impl<Foo> Deref for Foo { }\n+15 | impl<Foo> Deref for Foo { } //~ ERROR must be used\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `core`:\n@@ -11,7 +11,7 @@ error[E0119]: conflicting implementations of trait `std::ops::Deref` for type `&\n error[E0210]: type parameter `Foo` must be used as the type parameter for some local type (e.g. `MyStruct<T>`); only traits defined in the current crate can be implemented for a type parameter\n   --> $DIR/issue-28981.rs:15:1\n    |\n-15 | impl<Foo> Deref for Foo { }\n+15 | impl<Foo> Deref for Foo { } //~ ERROR must be used\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "933cdb3cd533d34f185cc09dedbf9ec70dab1b5f", "filename": "src/test/ui/e0119/so-37347311.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fe0119%2Fso-37347311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fe0119%2Fso-37347311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fso-37347311.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -18,10 +18,10 @@ enum MyError<S: Storage> {\n     StorageProblem(S::Error),\n }\n \n-impl<S: Storage> From<S::Error> for MyError<S> {\n+impl<S: Storage> From<S::Error> for MyError<S> { //~ ERROR conflicting implementations\n     fn from(error: S::Error) -> MyError<S> {\n         MyError::StorageProblem(error)\n     }\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "351c0e1bbb626bcf54768d63e19b86c529760721", "filename": "src/test/ui/e0119/so-37347311.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fe0119%2Fso-37347311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fe0119%2Fso-37347311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fso-37347311.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0119]: conflicting implementations of trait `std::convert::From<MyError<_>>` for type `MyError<_>`:\n   --> $DIR/so-37347311.rs:21:1\n    |\n-21 | / impl<S: Storage> From<S::Error> for MyError<S> {\n+21 | / impl<S: Storage> From<S::Error> for MyError<S> { //~ ERROR conflicting implementations\n 22 | |     fn from(error: S::Error) -> MyError<S> {\n 23 | |         MyError::StorageProblem(error)\n 24 | |     }"}, {"sha": "3f13fd2e4913ab7385020320eb96245a7c8d46a1", "filename": "src/test/ui/fmt/send-sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -15,6 +15,6 @@ fn main() {\n     // `Cell` is not `Sync`, so `&Cell` is neither `Sync` nor `Send`,\n     // `std::fmt::Arguments` used to forget this...\n     let c = std::cell::Cell::new(42);\n-    send(format_args!(\"{:?}\", c));\n-    sync(format_args!(\"{:?}\", c));\n+    send(format_args!(\"{:?}\", c)); //~ ERROR Sync` is not satisfied\n+    sync(format_args!(\"{:?}\", c)); //~ ERROR Sync` is not satisfied\n }"}, {"sha": "9e0e563c35f6581c0e35b82307e86467cb2c3876", "filename": "src/test/ui/fmt/send-sync.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: the trait bound `*mut std::ops::Fn() + 'static: std::marker::Sync` is not satisfied in `[std::fmt::ArgumentV1<'_>]`\n   --> $DIR/send-sync.rs:18:5\n    |\n-18 |     send(format_args!(\"{:?}\", c));\n+18 |     send(format_args!(\"{:?}\", c)); //~ ERROR Sync` is not satisfied\n    |     ^^^^ `*mut std::ops::Fn() + 'static` cannot be shared between threads safely\n    |\n    = help: within `[std::fmt::ArgumentV1<'_>]`, the trait `std::marker::Sync` is not implemented for `*mut std::ops::Fn() + 'static`\n@@ -17,7 +17,7 @@ error[E0277]: the trait bound `*mut std::ops::Fn() + 'static: std::marker::Sync`\n error[E0277]: the trait bound `*mut std::ops::Fn() + 'static: std::marker::Sync` is not satisfied in `std::fmt::Arguments<'_>`\n   --> $DIR/send-sync.rs:19:5\n    |\n-19 |     sync(format_args!(\"{:?}\", c));\n+19 |     sync(format_args!(\"{:?}\", c)); //~ ERROR Sync` is not satisfied\n    |     ^^^^ `*mut std::ops::Fn() + 'static` cannot be shared between threads safely\n    |\n    = help: within `std::fmt::Arguments<'_>`, the trait `std::marker::Sync` is not implemented for `*mut std::ops::Fn() + 'static`"}, {"sha": "299106bd552f2e37ae87354389ce745aeae718a7", "filename": "src/test/ui/generator/ref-escapes-but-not-over-yield.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -21,8 +21,8 @@ fn foo(x: &i32) {\n     let mut b = move || {\n         yield();\n         let b = 5;\n-        a = &b; //~ ERROR\n-    };\n+        a = &b;\n+    }; //~ ERROR\n }\n \n fn main() { }"}, {"sha": "7310e54925ff89b435acc6c48a8f291c145c9568", "filename": "src/test/ui/generator/ref-escapes-but-not-over-yield.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,9 +1,9 @@\n error[E0597]: `b` does not live long enough\n   --> $DIR/ref-escapes-but-not-over-yield.rs:25:5\n    |\n-24 |         a = &b; //~ ERROR\n+24 |         a = &b;\n    |              - borrow occurs here\n-25 |     };\n+25 |     }; //~ ERROR\n    |     ^ `b` dropped here while still borrowed\n 26 | }\n    | - borrowed value needs to live until here"}, {"sha": "504f3e8739f240d4b7a23caa86633fec6fc9bc8c", "filename": "src/test/ui/generator/yield-while-local-borrowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -19,7 +19,7 @@ fn borrow_local_inline() {\n     // (This error occurs because the region shows up in the type of\n     // `b` and gets extended by region inference.)\n     let mut b = move || {\n-        let a = &3; //~ ERROR\n+        let a = &3;\n         yield();\n         println!(\"{}\", a);\n     };"}, {"sha": "36df4f0eb4d46f7cc25792807680fa6c622dd3cc", "filename": "src/test/ui/impl-trait/equality.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -32,7 +32,7 @@ fn sum_to(n: u32) -> impl Foo {\n         0\n     } else {\n         n + sum_to(n - 1)\n-        //~^ ERROR no implementation for `u32 + impl Foo`\n+        //~^ ERROR the trait bound `u32: std::ops::Add<impl Foo>` is not satisfied\n     }\n }\n "}, {"sha": "9120cdab598617103057221b84495c6ecaff3e62", "filename": "src/test/ui/impl-trait/issue-21659-show-relevant-trait-impls-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-21659-show-relevant-trait-impls-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-21659-show-relevant-trait-impls-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-21659-show-relevant-trait-impls-3.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -30,5 +30,4 @@ fn main() {\n     f1.foo(1usize);\n     //~^ error: method named `foo` found for type `Bar` in the current scope\n     //~| help: items from traits can only be used if the trait is implemented and in scope\n-    //~| help: candidate #1: `Foo`\n }"}, {"sha": "15ddadf4c513d8c41201dee8a4453719ee2cfd0d", "filename": "src/test/ui/impl-trait/method-suggestion-no-duplication.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -18,8 +18,5 @@ fn foo<F>(f: F) where F: FnMut(Foo) {}\n fn main() {\n     foo(|s| s.is_empty());\n     //~^ ERROR no method named `is_empty` found\n-    //~^^ HELP #1: `std::iter::ExactSizeIterator`\n-    //~^^^ HELP #2: `core::slice::SliceExt`\n-    //~^^^^ HELP #3: `core::str::StrExt`\n-    //~^^^^^ HELP items from traits can only be used if the trait is implemented and in scope; the following traits define an item `is_empty`, perhaps you need to implement one of them:\n+    //~| HELP items from traits can only be used if the trait is implemented and in scope\n }"}, {"sha": "d9866772bdd37edf3555071691c7478611167dfc", "filename": "src/test/ui/impl-trait/no-method-suggested-traits.rs", "status": "modified", "additions": 26, "deletions": 51, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -11,7 +11,12 @@\n // aux-build:no_method_suggested_traits.rs\n extern crate no_method_suggested_traits;\n \n-struct Foo;\n+struct Foo; //~ HELP perhaps add a `use` for it\n+//~^ HELP perhaps add a `use` for it\n+//~| HELP perhaps add a `use` for it\n+//~| HELP perhaps add a `use` for it\n+//~| HELP perhaps add a `use` for one of them\n+//~| HELP perhaps add a `use` for one of them\n enum Bar { X }\n \n mod foo {\n@@ -31,95 +36,65 @@ fn main() {\n \n \n     1u32.method();\n-    //~^ HELP following traits are implemented but not in scope, perhaps add a `use` for one of them\n-    //~| ERROR no method named\n-    //~| HELP `use foo::Bar;`\n-    //~| HELP `use no_method_suggested_traits::foo::PubPub;`\n+    //~^ ERROR no method named\n+    //~|items from traits can only be used if the trait is in scope\n     std::rc::Rc::new(&mut Box::new(&1u32)).method();\n-    //~^ HELP following traits are implemented but not in scope, perhaps add a `use` for one of them\n-    //~| ERROR no method named\n-    //~| HELP `use foo::Bar;`\n-    //~| HELP `use no_method_suggested_traits::foo::PubPub;`\n+    //~^items from traits can only be used if the trait is in scope\n+    //~| ERROR no method named `method` found for type\n \n     'a'.method();\n     //~^ ERROR no method named\n-    //~| HELP the following trait is implemented but not in scope, perhaps add a `use` for it:\n-    //~| HELP `use foo::Bar;`\n+    //~| HELP items from traits can only be used if the trait is in scope\n     std::rc::Rc::new(&mut Box::new(&'a')).method();\n     //~^ ERROR no method named\n-    //~| HELP the following trait is implemented but not in scope, perhaps add a `use` for it:\n-    //~| HELP `use foo::Bar;`\n+    //~| HELP items from traits can only be used if the trait is in scope\n \n     1i32.method();\n     //~^ ERROR no method named\n-    //~| HELP the following trait is implemented but not in scope, perhaps add a `use` for it:\n-    //~| HELP `use no_method_suggested_traits::foo::PubPub;`\n+    //~| HELP items from traits can only be used if the trait is in scope\n     std::rc::Rc::new(&mut Box::new(&1i32)).method();\n     //~^ ERROR no method named\n-    //~| HELP the following trait is implemented but not in scope, perhaps add a `use` for it:\n-    //~| HELP `use no_method_suggested_traits::foo::PubPub;`\n+    //~| HELP items from traits can only be used if the trait is in scope\n \n     Foo.method();\n     //~^ ERROR no method named\n-    //~| HELP following traits define an item `method`, perhaps you need to implement one of them\n-    //~| HELP `foo::Bar`\n-    //~| HELP `no_method_suggested_traits::foo::PubPub`\n-    //~| HELP `no_method_suggested_traits::Reexported`\n-    //~| HELP `no_method_suggested_traits::bar::PubPriv`\n-    //~| HELP `no_method_suggested_traits::qux::PrivPub`\n-    //~| HELP `no_method_suggested_traits::quz::PrivPriv`\n+    //~| HELP items from traits can only be used if the trait is implemented and in scope\n     std::rc::Rc::new(&mut Box::new(&Foo)).method();\n     //~^ ERROR no method named\n-    //~| HELP following traits define an item `method`, perhaps you need to implement one of them\n-    //~| HELP `foo::Bar`\n-    //~| HELP `no_method_suggested_traits::foo::PubPub`\n-    //~| HELP `no_method_suggested_traits::Reexported`\n-    //~| HELP `no_method_suggested_traits::bar::PubPriv`\n-    //~| HELP `no_method_suggested_traits::qux::PrivPub`\n-    //~| HELP `no_method_suggested_traits::quz::PrivPriv`\n+    //~| HELP items from traits can only be used if the trait is implemented and in scope\n \n     1u64.method2();\n     //~^ ERROR no method named\n-    //~| HELP the following trait defines an item `method2`, perhaps you need to implement it\n-    //~| HELP `foo::Bar`\n+    //~| HELP items from traits can only be used if the trait is implemented and in scope\n     std::rc::Rc::new(&mut Box::new(&1u64)).method2();\n     //~^ ERROR no method named\n-    //~| HELP the following trait defines an item `method2`, perhaps you need to implement it\n-    //~| HELP `foo::Bar`\n+    //~| HELP items from traits can only be used if the trait is implemented and in scope\n \n     no_method_suggested_traits::Foo.method2();\n     //~^ ERROR no method named\n-    //~| HELP following trait defines an item `method2`, perhaps you need to implement it\n-    //~| HELP `foo::Bar`\n+    //~| HELP items from traits can only be used if the trait is implemented and in scope\n     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).method2();\n     //~^ ERROR no method named\n-    //~| HELP following trait defines an item `method2`, perhaps you need to implement it\n-    //~| HELP `foo::Bar`\n+    //~| HELP items from traits can only be used if the trait is implemented and in scope\n     no_method_suggested_traits::Bar::X.method2();\n     //~^ ERROR no method named\n-    //~| HELP following trait defines an item `method2`, perhaps you need to implement it\n-    //~| HELP `foo::Bar`\n+    //~| HELP items from traits can only be used if the trait is implemented and in scope\n     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Bar::X)).method2();\n     //~^ ERROR no method named\n-    //~| HELP following trait defines an item `method2`, perhaps you need to implement it\n-    //~| HELP `foo::Bar`\n+    //~| HELP items from traits can only be used if the trait is implemented and in scope\n \n     Foo.method3();\n     //~^ ERROR no method named\n-    //~| HELP following trait defines an item `method3`, perhaps you need to implement it\n-    //~| HELP `no_method_suggested_traits::foo::PubPub`\n+    //~| HELP items from traits can only be used if the trait is implemented and in scope\n     std::rc::Rc::new(&mut Box::new(&Foo)).method3();\n     //~^ ERROR no method named\n-    //~| HELP following trait defines an item `method3`, perhaps you need to implement it\n-    //~| HELP `no_method_suggested_traits::foo::PubPub`\n+    //~| HELP items from traits can only be used if the trait is implemented and in scope\n     Bar::X.method3();\n     //~^ ERROR no method named\n-    //~| HELP following trait defines an item `method3`, perhaps you need to implement it\n-    //~| HELP `no_method_suggested_traits::foo::PubPub`\n+    //~| HELP items from traits can only be used if the trait is implemented and in scope\n     std::rc::Rc::new(&mut Box::new(&Bar::X)).method3();\n     //~^ ERROR no method named\n-    //~| HELP following trait defines an item `method3`, perhaps you need to implement it\n-    //~| HELP `no_method_suggested_traits::foo::PubPub`\n+    //~| HELP items from traits can only be used if the trait is implemented and in scope\n \n     // should have no help:\n     1_usize.method3(); //~ ERROR no method named"}, {"sha": "2d519c11b948ef9a3400affeb881a8ff7224dbcb", "filename": "src/test/ui/impl-trait/no-method-suggested-traits.stderr", "status": "modified", "additions": 81, "deletions": 81, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0599]: no method named `method` found for type `u32` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:33:10\n+  --> $DIR/no-method-suggested-traits.rs:38:10\n    |\n-33 |     1u32.method();\n+38 |     1u32.method();\n    |          ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope\n@@ -17,9 +17,9 @@ help: the following traits are implemented but not in scope, perhaps add a `use`\n    |\n \n error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::boxed::Box<&u32>>` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:38:44\n+  --> $DIR/no-method-suggested-traits.rs:41:44\n    |\n-38 |     std::rc::Rc::new(&mut Box::new(&1u32)).method();\n+41 |     std::rc::Rc::new(&mut Box::new(&1u32)).method();\n    |                                            ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope\n@@ -35,9 +35,9 @@ help: the following traits are implemented but not in scope, perhaps add a `use`\n    |\n \n error[E0599]: no method named `method` found for type `char` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:44:9\n+  --> $DIR/no-method-suggested-traits.rs:45:9\n    |\n-44 |     'a'.method();\n+45 |     'a'.method();\n    |         ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope\n@@ -59,9 +59,9 @@ help: the following trait is implemented but not in scope, perhaps add a `use` f\n    |\n \n error[E0599]: no method named `method` found for type `i32` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:53:10\n+  --> $DIR/no-method-suggested-traits.rs:52:10\n    |\n-53 |     1i32.method();\n+52 |     1i32.method();\n    |          ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope\n@@ -71,9 +71,9 @@ help: the following trait is implemented but not in scope, perhaps add a `use` f\n    |\n \n error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::boxed::Box<&i32>>` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:57:44\n+  --> $DIR/no-method-suggested-traits.rs:55:44\n    |\n-57 |     std::rc::Rc::new(&mut Box::new(&1i32)).method();\n+55 |     std::rc::Rc::new(&mut Box::new(&1i32)).method();\n    |                                            ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope\n@@ -83,12 +83,12 @@ help: the following trait is implemented but not in scope, perhaps add a `use` f\n    |\n \n error[E0599]: no method named `method` found for type `Foo` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:62:9\n+  --> $DIR/no-method-suggested-traits.rs:59:9\n    |\n-14 | struct Foo;\n+14 | struct Foo; //~ HELP perhaps add a `use` for it\n    | ----------- method `method` not found for this\n ...\n-62 |     Foo.method();\n+59 |     Foo.method();\n    |         ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n@@ -101,9 +101,9 @@ error[E0599]: no method named `method` found for type `Foo` in the current scope\n            candidate #6: `no_method_suggested_traits::Reexported`\n \n error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::boxed::Box<&Foo>>` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:71:43\n+  --> $DIR/no-method-suggested-traits.rs:62:43\n    |\n-71 |     std::rc::Rc::new(&mut Box::new(&Foo)).method();\n+62 |     std::rc::Rc::new(&mut Box::new(&Foo)).method();\n    |                                           ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n@@ -116,145 +116,145 @@ error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::box\n            candidate #6: `no_method_suggested_traits::Reexported`\n \n error[E0599]: no method named `method2` found for type `u64` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:81:10\n+  --> $DIR/no-method-suggested-traits.rs:66:10\n    |\n-81 |     1u64.method2();\n+66 |     1u64.method2();\n    |          ^^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `method2`, perhaps you need to implement it:\n            candidate #1: `foo::Bar`\n \n error[E0599]: no method named `method2` found for type `std::rc::Rc<&mut std::boxed::Box<&u64>>` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:85:44\n+  --> $DIR/no-method-suggested-traits.rs:69:44\n    |\n-85 |     std::rc::Rc::new(&mut Box::new(&1u64)).method2();\n+69 |     std::rc::Rc::new(&mut Box::new(&1u64)).method2();\n    |                                            ^^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `method2`, perhaps you need to implement it:\n            candidate #1: `foo::Bar`\n \n error[E0599]: no method named `method2` found for type `no_method_suggested_traits::Foo` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:90:37\n+  --> $DIR/no-method-suggested-traits.rs:73:37\n    |\n-90 |     no_method_suggested_traits::Foo.method2();\n+73 |     no_method_suggested_traits::Foo.method2();\n    |                                     ^^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `method2`, perhaps you need to implement it:\n            candidate #1: `foo::Bar`\n \n error[E0599]: no method named `method2` found for type `std::rc::Rc<&mut std::boxed::Box<&no_method_suggested_traits::Foo>>` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:94:71\n+  --> $DIR/no-method-suggested-traits.rs:76:71\n    |\n-94 |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).method2();\n+76 |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).method2();\n    |                                                                       ^^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `method2`, perhaps you need to implement it:\n            candidate #1: `foo::Bar`\n \n error[E0599]: no method named `method2` found for type `no_method_suggested_traits::Bar` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:98:40\n+  --> $DIR/no-method-suggested-traits.rs:79:40\n    |\n-98 |     no_method_suggested_traits::Bar::X.method2();\n+79 |     no_method_suggested_traits::Bar::X.method2();\n    |                                        ^^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `method2`, perhaps you need to implement it:\n            candidate #1: `foo::Bar`\n \n error[E0599]: no method named `method2` found for type `std::rc::Rc<&mut std::boxed::Box<&no_method_suggested_traits::Bar>>` in the current scope\n-   --> $DIR/no-method-suggested-traits.rs:102:74\n-    |\n-102 |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Bar::X)).method2();\n-    |                                                                          ^^^^^^^\n-    |\n-    = help: items from traits can only be used if the trait is implemented and in scope\n-    = note: the following trait defines an item `method2`, perhaps you need to implement it:\n-            candidate #1: `foo::Bar`\n+  --> $DIR/no-method-suggested-traits.rs:82:74\n+   |\n+82 |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Bar::X)).method2();\n+   |                                                                          ^^^^^^^\n+   |\n+   = help: items from traits can only be used if the trait is implemented and in scope\n+   = note: the following trait defines an item `method2`, perhaps you need to implement it:\n+           candidate #1: `foo::Bar`\n \n error[E0599]: no method named `method3` found for type `Foo` in the current scope\n-   --> $DIR/no-method-suggested-traits.rs:107:9\n-    |\n-14  | struct Foo;\n-    | ----------- method `method3` not found for this\n+  --> $DIR/no-method-suggested-traits.rs:86:9\n+   |\n+14 | struct Foo; //~ HELP perhaps add a `use` for it\n+   | ----------- method `method3` not found for this\n ...\n-107 |     Foo.method3();\n-    |         ^^^^^^^\n-    |\n-    = help: items from traits can only be used if the trait is implemented and in scope\n-    = note: the following trait defines an item `method3`, perhaps you need to implement it:\n-            candidate #1: `no_method_suggested_traits::foo::PubPub`\n+86 |     Foo.method3();\n+   |         ^^^^^^^\n+   |\n+   = help: items from traits can only be used if the trait is implemented and in scope\n+   = note: the following trait defines an item `method3`, perhaps you need to implement it:\n+           candidate #1: `no_method_suggested_traits::foo::PubPub`\n \n error[E0599]: no method named `method3` found for type `std::rc::Rc<&mut std::boxed::Box<&Foo>>` in the current scope\n-   --> $DIR/no-method-suggested-traits.rs:111:43\n-    |\n-111 |     std::rc::Rc::new(&mut Box::new(&Foo)).method3();\n-    |                                           ^^^^^^^\n-    |\n-    = help: items from traits can only be used if the trait is implemented and in scope\n-    = note: the following trait defines an item `method3`, perhaps you need to implement it:\n-            candidate #1: `no_method_suggested_traits::foo::PubPub`\n+  --> $DIR/no-method-suggested-traits.rs:89:43\n+   |\n+89 |     std::rc::Rc::new(&mut Box::new(&Foo)).method3();\n+   |                                           ^^^^^^^\n+   |\n+   = help: items from traits can only be used if the trait is implemented and in scope\n+   = note: the following trait defines an item `method3`, perhaps you need to implement it:\n+           candidate #1: `no_method_suggested_traits::foo::PubPub`\n \n error[E0599]: no method named `method3` found for type `Bar` in the current scope\n-   --> $DIR/no-method-suggested-traits.rs:115:12\n-    |\n-15  | enum Bar { X }\n-    | -------- method `method3` not found for this\n+  --> $DIR/no-method-suggested-traits.rs:92:12\n+   |\n+20 | enum Bar { X }\n+   | -------- method `method3` not found for this\n ...\n-115 |     Bar::X.method3();\n-    |            ^^^^^^^\n-    |\n-    = help: items from traits can only be used if the trait is implemented and in scope\n-    = note: the following trait defines an item `method3`, perhaps you need to implement it:\n-            candidate #1: `no_method_suggested_traits::foo::PubPub`\n+92 |     Bar::X.method3();\n+   |            ^^^^^^^\n+   |\n+   = help: items from traits can only be used if the trait is implemented and in scope\n+   = note: the following trait defines an item `method3`, perhaps you need to implement it:\n+           candidate #1: `no_method_suggested_traits::foo::PubPub`\n \n error[E0599]: no method named `method3` found for type `std::rc::Rc<&mut std::boxed::Box<&Bar>>` in the current scope\n-   --> $DIR/no-method-suggested-traits.rs:119:46\n-    |\n-119 |     std::rc::Rc::new(&mut Box::new(&Bar::X)).method3();\n-    |                                              ^^^^^^^\n-    |\n-    = help: items from traits can only be used if the trait is implemented and in scope\n-    = note: the following trait defines an item `method3`, perhaps you need to implement it:\n-            candidate #1: `no_method_suggested_traits::foo::PubPub`\n+  --> $DIR/no-method-suggested-traits.rs:95:46\n+   |\n+95 |     std::rc::Rc::new(&mut Box::new(&Bar::X)).method3();\n+   |                                              ^^^^^^^\n+   |\n+   = help: items from traits can only be used if the trait is implemented and in scope\n+   = note: the following trait defines an item `method3`, perhaps you need to implement it:\n+           candidate #1: `no_method_suggested_traits::foo::PubPub`\n \n error[E0599]: no method named `method3` found for type `usize` in the current scope\n-   --> $DIR/no-method-suggested-traits.rs:125:13\n+   --> $DIR/no-method-suggested-traits.rs:100:13\n     |\n-125 |     1_usize.method3(); //~ ERROR no method named\n+100 |     1_usize.method3(); //~ ERROR no method named\n     |             ^^^^^^^\n \n error[E0599]: no method named `method3` found for type `std::rc::Rc<&mut std::boxed::Box<&usize>>` in the current scope\n-   --> $DIR/no-method-suggested-traits.rs:126:47\n+   --> $DIR/no-method-suggested-traits.rs:101:47\n     |\n-126 |     std::rc::Rc::new(&mut Box::new(&1_usize)).method3(); //~ ERROR no method named\n+101 |     std::rc::Rc::new(&mut Box::new(&1_usize)).method3(); //~ ERROR no method named\n     |                                               ^^^^^^^\n \n error[E0599]: no method named `method3` found for type `no_method_suggested_traits::Foo` in the current scope\n-   --> $DIR/no-method-suggested-traits.rs:127:37\n+   --> $DIR/no-method-suggested-traits.rs:102:37\n     |\n-127 |     no_method_suggested_traits::Foo.method3();  //~ ERROR no method named\n+102 |     no_method_suggested_traits::Foo.method3();  //~ ERROR no method named\n     |                                     ^^^^^^^\n \n error[E0599]: no method named `method3` found for type `std::rc::Rc<&mut std::boxed::Box<&no_method_suggested_traits::Foo>>` in the current scope\n-   --> $DIR/no-method-suggested-traits.rs:128:71\n+   --> $DIR/no-method-suggested-traits.rs:103:71\n     |\n-128 |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).method3();\n+103 |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).method3();\n     |                                                                       ^^^^^^^\n \n error[E0599]: no method named `method3` found for type `no_method_suggested_traits::Bar` in the current scope\n-   --> $DIR/no-method-suggested-traits.rs:130:40\n+   --> $DIR/no-method-suggested-traits.rs:105:40\n     |\n-130 |     no_method_suggested_traits::Bar::X.method3();  //~ ERROR no method named\n+105 |     no_method_suggested_traits::Bar::X.method3();  //~ ERROR no method named\n     |                                        ^^^^^^^\n \n error[E0599]: no method named `method3` found for type `std::rc::Rc<&mut std::boxed::Box<&no_method_suggested_traits::Bar>>` in the current scope\n-   --> $DIR/no-method-suggested-traits.rs:131:74\n+   --> $DIR/no-method-suggested-traits.rs:106:74\n     |\n-131 |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Bar::X)).method3();\n+106 |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Bar::X)).method3();\n     |                                                                          ^^^^^^^\n \n error: aborting due to 24 previous errors"}, {"sha": "7eefa5c600617f2f9e5f2ceee38c42feadcf74fb", "filename": "src/test/ui/impl-trait/trait_type.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -15,16 +15,20 @@ struct MyType4;\n \n impl std::fmt::Display for MyType {\n    fn fmt(&self, x: &str) -> () { }\n+   //~^ ERROR method `fmt` has an incompatible type\n }\n \n impl std::fmt::Display for MyType2 {\n    fn fmt(&self) -> () { }\n+   //~^ ERROR method `fmt` has 1 parameter\n }\n \n impl std::fmt::Display for MyType3 {\n    fn fmt() -> () { }\n+   //~^ ERROR method `fmt` has a `&self` declaration in the trait\n }\n \n impl std::fmt::Display for MyType4 {}\n+//~^ ERROR not all trait items\n \n fn main() {}"}, {"sha": "42e1dcdb1c42ab0400b7341a11718300c69d96e8", "filename": "src/test/ui/impl-trait/trait_type.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -8,25 +8,25 @@ error[E0053]: method `fmt` has an incompatible type for trait\n               found type `fn(&MyType, &str)`\n \n error[E0050]: method `fmt` has 1 parameter but the declaration in trait `std::fmt::Display::fmt` has 2\n-  --> $DIR/trait_type.rs:21:11\n+  --> $DIR/trait_type.rs:22:11\n    |\n-21 |    fn fmt(&self) -> () { }\n+22 |    fn fmt(&self) -> () { }\n    |           ^^^^^ expected 2 parameters, found 1\n    |\n    = note: `fmt` from trait: `fn(&Self, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n \n error[E0186]: method `fmt` has a `&self` declaration in the trait, but not in the impl\n-  --> $DIR/trait_type.rs:25:4\n+  --> $DIR/trait_type.rs:27:4\n    |\n-25 |    fn fmt() -> () { }\n+27 |    fn fmt() -> () { }\n    |    ^^^^^^^^^^^^^^^^^^ expected `&self` in impl\n    |\n    = note: `fmt` from trait: `fn(&Self, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n \n error[E0046]: not all trait items implemented, missing: `fmt`\n-  --> $DIR/trait_type.rs:28:1\n+  --> $DIR/trait_type.rs:31:1\n    |\n-28 | impl std::fmt::Display for MyType4 {}\n+31 | impl std::fmt::Display for MyType4 {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `fmt` in implementation\n    |\n    = note: `fmt` from trait: `fn(&Self, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`"}, {"sha": "00fc22ff0d853b2c867f9a27f8ed5cf2eb4300d7", "filename": "src/test/ui/impl-trait/universal-mismatched-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -13,7 +13,7 @@\n use std::fmt::Debug;\n \n fn foo(x: impl Debug) -> String {\n-    x\n+    x //~ ERROR mismatched types\n }\n \n fn main() { }"}, {"sha": "b4dd6c8446c599e03804c4983e725ccae7f2d9f0", "filename": "src/test/ui/impl-trait/universal-mismatched-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n 15 | fn foo(x: impl Debug) -> String {\n    |                          ------ expected `std::string::String` because of return type\n-16 |     x\n+16 |     x //~ ERROR mismatched types\n    |     ^ expected struct `std::string::String`, found type parameter\n    |\n    = note: expected type `std::string::String`"}, {"sha": "9a4847b56062a5b78c4f10a84050ef22985285ed", "filename": "src/test/ui/impl-trait/universal-two-impl-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -14,7 +14,7 @@ use std::fmt::Debug;\n \n fn foo(x: impl Debug, y: impl Debug) -> String {\n     let mut a = x;\n-    a = y;\n+    a = y; //~ ERROR mismatched\n     format!(\"{:?}\", a)\n }\n "}, {"sha": "9903e26bbbd0b0267a4f2b6e88302eacfe7f467f", "filename": "src/test/ui/impl-trait/universal-two-impl-traits.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/universal-two-impl-traits.rs:17:9\n    |\n-17 |     a = y;\n+17 |     a = y; //~ ERROR mismatched\n    |         ^ expected type parameter, found a different type parameter\n    |\n    = note: expected type `impl Debug` (type parameter)"}, {"sha": "36d9f615c5f57d5f55d7e810995b87f6db480759", "filename": "src/test/ui/impl-trait/universal_wrong_bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal_wrong_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal_wrong_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal_wrong_bounds.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -15,11 +15,11 @@ use std::fmt::Display;\n fn foo(f: impl Display + Clone) -> String {\n     wants_debug(f);\n     wants_display(f);\n-    wants_clone(f);\n+    wants_clone(f); //~ ERROR cannot find\n }\n \n-fn wants_debug(g: impl Debug) { }\n-fn wants_display(g: impl Debug) { }\n+fn wants_debug(g: impl Debug) { } //~ ERROR cannot find\n+fn wants_display(g: impl Debug) { } //~ ERROR cannot find\n fn wants_cone(g: impl Clone) { }\n \n fn main() {"}, {"sha": "b457e025c29ff96238497ab78ff950d91657d25e", "filename": "src/test/ui/impl-trait/universal_wrong_bounds.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal_wrong_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal_wrong_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal_wrong_bounds.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,13 +1,13 @@\n error[E0425]: cannot find function `wants_clone` in this scope\n   --> $DIR/universal_wrong_bounds.rs:18:5\n    |\n-18 |     wants_clone(f);\n+18 |     wants_clone(f); //~ ERROR cannot find\n    |     ^^^^^^^^^^^ did you mean `wants_cone`?\n \n error[E0405]: cannot find trait `Debug` in this scope\n   --> $DIR/universal_wrong_bounds.rs:21:24\n    |\n-21 | fn wants_debug(g: impl Debug) { }\n+21 | fn wants_debug(g: impl Debug) { } //~ ERROR cannot find\n    |                        ^^^^^ not found in this scope\n help: possible candidate is found in another module, you can import it into scope\n    |\n@@ -17,7 +17,7 @@ help: possible candidate is found in another module, you can import it into scop\n error[E0405]: cannot find trait `Debug` in this scope\n   --> $DIR/universal_wrong_bounds.rs:22:26\n    |\n-22 | fn wants_display(g: impl Debug) { }\n+22 | fn wants_display(g: impl Debug) { } //~ ERROR cannot find\n    |                          ^^^^^ not found in this scope\n help: possible candidate is found in another module, you can import it into scope\n    |"}, {"sha": "4eddebb15e120b173e5cab69692205e8941a7e47", "filename": "src/test/ui/in-band-lifetimes/E0687.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0687.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -11,16 +11,16 @@\n #![allow(warnings)]\n #![feature(in_band_lifetimes)]\n \n-fn foo(x: fn(&'a u32)) {}\n+fn foo(x: fn(&'a u32)) {} //~ ERROR must be explicitly\n \n-fn bar(x: &Fn(&'a u32)) {}\n+fn bar(x: &Fn(&'a u32)) {} //~ ERROR must be explicitly\n \n-fn baz(x: fn(&'a u32), y: &'a u32) {}\n+fn baz(x: fn(&'a u32), y: &'a u32) {} //~ ERROR must be explicitly\n \n struct Foo<'a> { x: &'a u32 }\n \n impl Foo<'a> {\n-    fn bar(&self, x: fn(&'a u32)) {}\n+    fn bar(&self, x: fn(&'a u32)) {} //~ ERROR must be explicitly\n }\n \n fn main() {}"}, {"sha": "42714f21685f9fa6c85b3a08e2f04c6e3a3e0992", "filename": "src/test/ui/in-band-lifetimes/E0687.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0687.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0687.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0687.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,25 +1,25 @@\n error[E0687]: lifetimes used in `fn` or `Fn` syntax must be explicitly declared using `<...>` binders\n   --> $DIR/E0687.rs:14:15\n    |\n-14 | fn foo(x: fn(&'a u32)) {}\n+14 | fn foo(x: fn(&'a u32)) {} //~ ERROR must be explicitly\n    |               ^^ in-band lifetime definition\n \n error[E0687]: lifetimes used in `fn` or `Fn` syntax must be explicitly declared using `<...>` binders\n   --> $DIR/E0687.rs:16:16\n    |\n-16 | fn bar(x: &Fn(&'a u32)) {}\n+16 | fn bar(x: &Fn(&'a u32)) {} //~ ERROR must be explicitly\n    |                ^^ in-band lifetime definition\n \n error[E0687]: lifetimes used in `fn` or `Fn` syntax must be explicitly declared using `<...>` binders\n   --> $DIR/E0687.rs:18:15\n    |\n-18 | fn baz(x: fn(&'a u32), y: &'a u32) {}\n+18 | fn baz(x: fn(&'a u32), y: &'a u32) {} //~ ERROR must be explicitly\n    |               ^^ in-band lifetime definition\n \n error[E0687]: lifetimes used in `fn` or `Fn` syntax must be explicitly declared using `<...>` binders\n   --> $DIR/E0687.rs:23:26\n    |\n-23 |     fn bar(&self, x: fn(&'a u32)) {}\n+23 |     fn bar(&self, x: fn(&'a u32)) {} //~ ERROR must be explicitly\n    |                          ^^ in-band lifetime definition\n \n error: aborting due to 4 previous errors"}, {"sha": "ac67558772007105b4391b622805c7b250b4626a", "filename": "src/test/ui/in-band-lifetimes/E0687_where.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0687_where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0687_where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0687_where.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -11,8 +11,8 @@\n #![allow(warnings)]\n #![feature(in_band_lifetimes, universal_impl_trait)]\n \n-fn bar<F>(x: &F) where F: Fn(&'a u32) {}\n+fn bar<F>(x: &F) where F: Fn(&'a u32) {} //~ ERROR must be explicitly\n \n-fn baz(x: &impl Fn(&'a u32)) {}\n+fn baz(x: &impl Fn(&'a u32)) {} //~ ERROR must be explicitly\n \n fn main() {}"}, {"sha": "a9913f6b644649727c6086d20595724372768de2", "filename": "src/test/ui/in-band-lifetimes/E0687_where.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0687_where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0687_where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0687_where.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,13 +1,13 @@\n error[E0687]: lifetimes used in `fn` or `Fn` syntax must be explicitly declared using `<...>` binders\n   --> $DIR/E0687_where.rs:14:31\n    |\n-14 | fn bar<F>(x: &F) where F: Fn(&'a u32) {}\n+14 | fn bar<F>(x: &F) where F: Fn(&'a u32) {} //~ ERROR must be explicitly\n    |                               ^^ in-band lifetime definition\n \n error[E0687]: lifetimes used in `fn` or `Fn` syntax must be explicitly declared using `<...>` binders\n   --> $DIR/E0687_where.rs:16:21\n    |\n-16 | fn baz(x: &impl Fn(&'a u32)) {}\n+16 | fn baz(x: &impl Fn(&'a u32)) {} //~ ERROR must be explicitly\n    |                     ^^ in-band lifetime definition\n \n error: aborting due to 2 previous errors"}, {"sha": "29b954e9a83602017e1092bccd57aa834ace0da0", "filename": "src/test/ui/in-band-lifetimes/E0688.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0688.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0688.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0688.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -11,15 +11,15 @@\n #![allow(warnings)]\n #![feature(in_band_lifetimes)]\n \n-fn foo<'a>(x: &'a u32, y: &'b u32) {}\n+fn foo<'a>(x: &'a u32, y: &'b u32) {} //~ ERROR cannot mix\n \n struct Foo<'a> { x: &'a u32 }\n \n impl Foo<'a> {\n-    fn bar<'b>(x: &'a u32, y: &'b u32, z: &'c u32) {}\n+    fn bar<'b>(x: &'a u32, y: &'b u32, z: &'c u32) {} //~ ERROR cannot mix\n }\n \n-impl<'b> Foo<'a> {\n+impl<'b> Foo<'a> { //~ ERROR cannot mix\n     fn baz() {}\n }\n "}, {"sha": "c33b088f0faab802d0aeed831d1d44eff2b231bd", "filename": "src/test/ui/in-band-lifetimes/E0688.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0688.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0688.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0688.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,23 +1,23 @@\n error[E0688]: cannot mix in-band and explicit lifetime definitions\n   --> $DIR/E0688.rs:14:28\n    |\n-14 | fn foo<'a>(x: &'a u32, y: &'b u32) {}\n+14 | fn foo<'a>(x: &'a u32, y: &'b u32) {} //~ ERROR cannot mix\n    |        --                  ^^ in-band lifetime definition here\n    |        |\n    |        explicit lifetime definition here\n \n error[E0688]: cannot mix in-band and explicit lifetime definitions\n   --> $DIR/E0688.rs:19:44\n    |\n-19 |     fn bar<'b>(x: &'a u32, y: &'b u32, z: &'c u32) {}\n+19 |     fn bar<'b>(x: &'a u32, y: &'b u32, z: &'c u32) {} //~ ERROR cannot mix\n    |            --                              ^^ in-band lifetime definition here\n    |            |\n    |            explicit lifetime definition here\n \n error[E0688]: cannot mix in-band and explicit lifetime definitions\n   --> $DIR/E0688.rs:22:14\n    |\n-22 | impl<'b> Foo<'a> {\n+22 | impl<'b> Foo<'a> { //~ ERROR cannot mix\n    |      --      ^^ in-band lifetime definition here\n    |      |\n    |      explicit lifetime definition here"}, {"sha": "80bc56c0f441c083f9da406c500013bc52b1751e", "filename": "src/test/ui/in-band-lifetimes/mismatched.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -11,8 +11,8 @@\n #![allow(warnings)]\n #![feature(in_band_lifetimes)]\n \n-fn foo(x: &'a u32, y: &u32) -> &'a u32 { y }\n+fn foo(x: &'a u32, y: &u32) -> &'a u32 { y } //~ ERROR explicit lifetime required\n \n-fn foo2(x: &'a u32, y: &'b u32) -> &'a u32 { y }\n+fn foo2(x: &'a u32, y: &'b u32) -> &'a u32 { y } //~ ERROR lifetime mismatch\n \n fn main() {}"}, {"sha": "0c1231e01de6ebfbf8639f08fec6acad699ad000", "filename": "src/test/ui/in-band-lifetimes/mismatched.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,15 +1,15 @@\n error[E0621]: explicit lifetime required in the type of `y`\n   --> $DIR/mismatched.rs:14:42\n    |\n-14 | fn foo(x: &'a u32, y: &u32) -> &'a u32 { y }\n+14 | fn foo(x: &'a u32, y: &u32) -> &'a u32 { y } //~ ERROR explicit lifetime required\n    |                    -                     ^ lifetime `'a` required\n    |                    |\n    |                    consider changing the type of `y` to `&'a u32`\n \n error[E0623]: lifetime mismatch\n   --> $DIR/mismatched.rs:16:46\n    |\n-16 | fn foo2(x: &'a u32, y: &'b u32) -> &'a u32 { y }\n+16 | fn foo2(x: &'a u32, y: &'b u32) -> &'a u32 { y } //~ ERROR lifetime mismatch\n    |                        -------     -------   ^ ...but data from `y` is returned here\n    |                        |\n    |                        this parameter and the return type are declared with different lifetimes..."}, {"sha": "bc175803ebda7dcb3e1eeb464d0221924b4fc7c1", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -13,7 +13,7 @@\n \n trait Get {\n     fn baz(&self, x: &'a u32, y: &u32) -> &'a u32 {\n-        y\n+        y //~ ERROR explicit lifetime required\n     }\n }\n "}, {"sha": "58ff1694fb74c7914efb2e3435c3bec2e9841001", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,7 +3,7 @@ error[E0621]: explicit lifetime required in the type of `y`\n    |\n 15 |     fn baz(&self, x: &'a u32, y: &u32) -> &'a u32 {\n    |                               - consider changing the type of `y` to `&'a u32`\n-16 |         y\n+16 |         y //~ ERROR explicit lifetime required\n    |         ^ lifetime `'a` required\n \n error: aborting due to previous error"}, {"sha": "52641059b1fa85256513b19260950c46306099c0", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -16,7 +16,7 @@ trait Get {\n }\n \n impl Get for i32 {\n-    fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n+    fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR cannot infer\n         x\n     }\n }"}, {"sha": "e96f7181a6daeb80aa2d6774227e74fb786f013d", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,36 +1,36 @@\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter 'a in generic type due to conflicting requirements\n   --> $DIR/mismatched_trait_impl.rs:19:5\n    |\n-19 | /     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n+19 | /     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR cannot infer\n 20 | |         x\n 21 | |     }\n    | |_____^\n    |\n note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the method body at 19:5...\n   --> $DIR/mismatched_trait_impl.rs:19:5\n    |\n-19 | /     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n+19 | /     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR cannot infer\n 20 | |         x\n 21 | |     }\n    | |_____^\n note: ...so that method type is compatible with trait (expected fn(&i32, &'a u32, &u32) -> &'a u32, found fn(&i32, &u32, &u32) -> &u32)\n   --> $DIR/mismatched_trait_impl.rs:19:5\n    |\n-19 | /     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n+19 | /     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR cannot infer\n 20 | |         x\n 21 | |     }\n    | |_____^\n note: but, the lifetime must be valid for the lifetime 'a as defined on the method body at 19:5...\n   --> $DIR/mismatched_trait_impl.rs:19:5\n    |\n-19 | /     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n+19 | /     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR cannot infer\n 20 | |         x\n 21 | |     }\n    | |_____^\n note: ...so that method type is compatible with trait (expected fn(&i32, &'a u32, &u32) -> &'a u32, found fn(&i32, &u32, &u32) -> &u32)\n   --> $DIR/mismatched_trait_impl.rs:19:5\n    |\n-19 | /     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n+19 | /     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR cannot infer\n 20 | |         x\n 21 | |     }\n    | |_____^"}, {"sha": "08ce13d0bccd12f31c12958af791273a5702c0a0", "filename": "src/test/ui/in-band-lifetimes/mut_while_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmut_while_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmut_while_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmut_while_borrow.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -16,6 +16,6 @@ fn foo(x: &'a u32) -> &'a u32 { x }\n fn main() {\n     let mut p = 3;\n     let r = foo(&p);\n-    p += 1;\n+    p += 1; //~ ERROR cannot assign to `p` because it is borrowed\n     println!(\"{}\", r);\n }"}, {"sha": "14f9098c6c2f693345e539de268d9394fb08f499", "filename": "src/test/ui/in-band-lifetimes/mut_while_borrow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmut_while_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmut_while_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmut_while_borrow.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,7 +3,7 @@ error[E0506]: cannot assign to `p` because it is borrowed\n    |\n 18 |     let r = foo(&p);\n    |                  - borrow of `p` occurs here\n-19 |     p += 1;\n+19 |     p += 1; //~ ERROR cannot assign to `p` because it is borrowed\n    |     ^^^^^^ assignment to borrowed `p` occurs here\n \n error: aborting due to previous error"}, {"sha": "0d3e6ba644e632c7166038c795b923174a2df9f5", "filename": "src/test/ui/in-band-lifetimes/no_in_band_in_struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_in_band_in_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_in_band_in_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_in_band_in_struct.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -12,11 +12,11 @@\n #![feature(in_band_lifetimes)]\n \n struct Foo {\n-    x: &'test u32,\n+    x: &'test u32, //~ ERROR undeclared lifetime\n }\n \n enum Bar {\n-    Baz(&'test u32),\n+    Baz(&'test u32), //~ ERROR undeclared lifetime\n }\n \n fn main() {}"}, {"sha": "a8df6dbca0a11a8df15fb662ced05e298c44ffcd", "filename": "src/test/ui/in-band-lifetimes/no_in_band_in_struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_in_band_in_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_in_band_in_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_in_band_in_struct.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,13 +1,13 @@\n error[E0261]: use of undeclared lifetime name `'test`\n   --> $DIR/no_in_band_in_struct.rs:15:9\n    |\n-15 |     x: &'test u32,\n+15 |     x: &'test u32, //~ ERROR undeclared lifetime\n    |         ^^^^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'test`\n   --> $DIR/no_in_band_in_struct.rs:19:10\n    |\n-19 |     Baz(&'test u32),\n+19 |     Baz(&'test u32), //~ ERROR undeclared lifetime\n    |          ^^^^^ undeclared lifetime\n \n error: aborting due to 2 previous errors"}, {"sha": "eaa082a35da59ffc89f764fd7a07ac22c6cc7b60", "filename": "src/test/ui/in-band-lifetimes/no_introducing_in_band_in_locals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_introducing_in_band_in_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_introducing_in_band_in_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_introducing_in_band_in_locals.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -12,12 +12,12 @@\n #![feature(in_band_lifetimes)]\n \n fn foo(x: &u32) {\n-    let y: &'test u32 = x;\n+    let y: &'test u32 = x; //~ ERROR use of undeclared lifetime\n }\n \n fn foo2(x: &u32) {}\n fn bar() {\n-    let y: fn(&'test u32) = foo2;\n+    let y: fn(&'test u32) = foo2; //~ ERROR use of undeclared lifetime\n }\n \n fn main() {}"}, {"sha": "e2340dbba23e19bf0dcfe8a66b00864d30237cf8", "filename": "src/test/ui/in-band-lifetimes/no_introducing_in_band_in_locals.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_introducing_in_band_in_locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_introducing_in_band_in_locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_introducing_in_band_in_locals.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,13 +1,13 @@\n error[E0261]: use of undeclared lifetime name `'test`\n   --> $DIR/no_introducing_in_band_in_locals.rs:15:13\n    |\n-15 |     let y: &'test u32 = x;\n+15 |     let y: &'test u32 = x; //~ ERROR use of undeclared lifetime\n    |             ^^^^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'test`\n   --> $DIR/no_introducing_in_band_in_locals.rs:20:16\n    |\n-20 |     let y: fn(&'test u32) = foo2;\n+20 |     let y: fn(&'test u32) = foo2; //~ ERROR use of undeclared lifetime\n    |                ^^^^^ undeclared lifetime\n \n error: aborting due to 2 previous errors"}, {"sha": "b6438f01af5f351ca4135562873b6f66545329d4", "filename": "src/test/ui/in-band-lifetimes/shadow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fshadow.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -14,8 +14,8 @@\n struct Foo<T>(T);\n \n impl Foo<&'s u8> {\n-    fn bar<'s>(&self, x: &'s u8) {}\n-    fn baz(x: for<'s> fn(&'s u32)) {}\n+    fn bar<'s>(&self, x: &'s u8) {} //~ ERROR shadows a lifetime name\n+    fn baz(x: for<'s> fn(&'s u32)) {} //~ ERROR shadows a lifetime name\n }\n \n fn main() {}"}, {"sha": "49b82fa495a056389b5b38176f1b7061e1842484", "filename": "src/test/ui/in-band-lifetimes/shadow.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fshadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fshadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fshadow.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,16 +3,16 @@ error[E0496]: lifetime name `'s` shadows a lifetime name that is already in scop\n    |\n 16 | impl Foo<&'s u8> {\n    |           -- first declared here\n-17 |     fn bar<'s>(&self, x: &'s u8) {}\n+17 |     fn bar<'s>(&self, x: &'s u8) {} //~ ERROR shadows a lifetime name\n    |            ^^ lifetime 's already in scope\n \n error[E0496]: lifetime name `'s` shadows a lifetime name that is already in scope\n   --> $DIR/shadow.rs:18:19\n    |\n 16 | impl Foo<&'s u8> {\n    |           -- first declared here\n-17 |     fn bar<'s>(&self, x: &'s u8) {}\n-18 |     fn baz(x: for<'s> fn(&'s u32)) {}\n+17 |     fn bar<'s>(&self, x: &'s u8) {} //~ ERROR shadows a lifetime name\n+18 |     fn baz(x: for<'s> fn(&'s u32)) {} //~ ERROR shadows a lifetime name\n    |                   ^^ lifetime 's already in scope\n \n error: aborting due to 2 previous errors"}, {"sha": "a772d1f90cc0b5050ad4f4bab5c6bb2cad20695f", "filename": "src/test/ui/interior-mutability/interior-mutability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -12,5 +12,5 @@ use std::cell::Cell;\n use std::panic::catch_unwind;\n fn main() {\n     let mut x = Cell::new(22);\n-    catch_unwind(|| { x.set(23); });\n+    catch_unwind(|| { x.set(23); }); //~ ERROR the trait bound\n }"}, {"sha": "f4beb44b82dc7408c6db36891f8467063e2bb68d", "filename": "src/test/ui/interior-mutability/interior-mutability.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: the trait bound `std::cell::UnsafeCell<i32>: std::panic::RefUnwindSafe` is not satisfied in `std::cell::Cell<i32>`\n   --> $DIR/interior-mutability.rs:15:5\n    |\n-15 |     catch_unwind(|| { x.set(23); });\n+15 |     catch_unwind(|| { x.set(23); }); //~ ERROR the trait bound\n    |     ^^^^^^^^^^^^ the type std::cell::UnsafeCell<i32> may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `std::cell::Cell<i32>`, the trait `std::panic::RefUnwindSafe` is not implemented for `std::cell::UnsafeCell<i32>`"}, {"sha": "c44465b221cdc79c9b845a63eb87d804e48e7252", "filename": "src/test/ui/issue-13483.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-13483.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-13483.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-13483.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -10,14 +10,14 @@\n \n fn main() {\n     if true {\n-    } else if {\n+    } else if { //~ ERROR missing condition\n     } else {\n     }\n }\n \n fn foo() {\n     if true {\n-    } else if {\n+    } else if { //~ ERROR missing condition\n     }\n     bar();\n }"}, {"sha": "344e179695369eceb41dc63152848fd8d805e454", "filename": "src/test/ui/issue-13483.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-13483.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-13483.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-13483.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,13 +1,13 @@\n error: missing condition for `if` statemement\n   --> $DIR/issue-13483.rs:13:14\n    |\n-13 |     } else if {\n+13 |     } else if { //~ ERROR missing condition\n    |              ^ expected if condition here\n \n error: missing condition for `if` statemement\n   --> $DIR/issue-13483.rs:20:14\n    |\n-20 |     } else if {\n+20 |     } else if { //~ ERROR missing condition\n    |              ^ expected if condition here\n \n error: aborting due to 2 previous errors"}, {"sha": "f787e43dbdf5758688a781a1b980d980496641c0", "filename": "src/test/ui/issue-22644.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-22644.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-22644.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22644.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -13,17 +13,19 @@ fn main() {\n     let long_name : usize = 0;\n \n     println!(\"{}\", a as usize > long_name);\n-    println!(\"{}\", a as usize < long_name);\n+    println!(\"{}\", a as usize < long_name); //~ ERROR `<` is interpreted as a start of generic\n     println!(\"{}{}\", a as usize < long_name, long_name);\n-    println!(\"{}\", a as usize < 4);\n+    //~^ ERROR `<` is interpreted as a start of generic\n+    println!(\"{}\", a as usize < 4); //~ ERROR `<` is interpreted as a start of generic\n     println!(\"{}\", a: usize > long_name);\n     println!(\"{}{}\", a: usize < long_name, long_name);\n-    println!(\"{}\", a: usize < 4);\n+    //~^ ERROR `<` is interpreted as a start of generic\n+    println!(\"{}\", a: usize < 4); //~ ERROR `<` is interpreted as a start of generic\n \n     println!(\"{}\", a\n                    as\n                    usize\n-                   <\n+                   < //~ ERROR `<` is interpreted as a start of generic\n                    4);\n     println!(\"{}\", a\n \n@@ -32,10 +34,10 @@ fn main() {\n \n \n                    usize\n-                   <\n+                   < //~ ERROR `<` is interpreted as a start of generic\n                    5);\n \n-    println!(\"{}\", a as usize << long_name);\n+    println!(\"{}\", a as usize << long_name); //~ ERROR `<` is interpreted as a start of generic\n \n-    println!(\"{}\", a: &mut 4);\n+    println!(\"{}\", a: &mut 4); //~ ERROR expected type, found `4`\n }"}, {"sha": "91107fbe35610acd72887fc8e64b92f0f5b7ebef", "filename": "src/test/ui/issue-22644.stderr", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-22644.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-22644.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22644.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n   --> $DIR/issue-22644.rs:16:31\n    |\n-16 |     println!(\"{}\", a as usize < long_name);\n+16 |     println!(\"{}\", a as usize < long_name); //~ ERROR `<` is interpreted as a start of generic\n    |                    ---------- ^ --------- interpreted as generic arguments\n    |                    |          |\n    |                    |          not interpreted as comparison\n@@ -17,75 +17,75 @@ error: `<` is interpreted as a start of generic arguments for `usize`, not a com\n    |                      help: try comparing the casted value: `(a as usize)`\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n-  --> $DIR/issue-22644.rs:18:31\n+  --> $DIR/issue-22644.rs:19:31\n    |\n-18 |     println!(\"{}\", a as usize < 4);\n+19 |     println!(\"{}\", a as usize < 4); //~ ERROR `<` is interpreted as a start of generic\n    |                    ---------- ^ - interpreted as generic arguments\n    |                    |          |\n    |                    |          not interpreted as comparison\n    |                    help: try comparing the casted value: `(a as usize)`\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n-  --> $DIR/issue-22644.rs:20:31\n+  --> $DIR/issue-22644.rs:21:31\n    |\n-20 |     println!(\"{}{}\", a: usize < long_name, long_name);\n+21 |     println!(\"{}{}\", a: usize < long_name, long_name);\n    |                      -------- ^ -------------------- interpreted as generic arguments\n    |                      |        |\n    |                      |        not interpreted as comparison\n    |                      help: try comparing the casted value: `(a: usize)`\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n-  --> $DIR/issue-22644.rs:21:29\n+  --> $DIR/issue-22644.rs:23:29\n    |\n-21 |     println!(\"{}\", a: usize < 4);\n+23 |     println!(\"{}\", a: usize < 4); //~ ERROR `<` is interpreted as a start of generic\n    |                    -------- ^ - interpreted as generic arguments\n    |                    |        |\n    |                    |        not interpreted as comparison\n    |                    help: try comparing the casted value: `(a: usize)`\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n-  --> $DIR/issue-22644.rs:26:20\n+  --> $DIR/issue-22644.rs:28:20\n    |\n-26 |                    <\n+28 |                    < //~ ERROR `<` is interpreted as a start of generic\n    |                    ^ not interpreted as comparison\n-27 |                    4);\n+29 |                    4);\n    |                    - interpreted as generic arguments\n help: try comparing the casted value\n    |\n-23 |     println!(\"{}\", (a\n-24 |                    as\n-25 |                    usize)\n+25 |     println!(\"{}\", (a\n+26 |                    as\n+27 |                    usize)\n    |\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n-  --> $DIR/issue-22644.rs:35:20\n+  --> $DIR/issue-22644.rs:37:20\n    |\n-35 |                    <\n+37 |                    < //~ ERROR `<` is interpreted as a start of generic\n    |                    ^ not interpreted as comparison\n-36 |                    5);\n+38 |                    5);\n    |                    - interpreted as generic arguments\n help: try comparing the casted value\n    |\n-28 |     println!(\"{}\", (a\n-29 | \n-30 | \n-31 |                    as\n+30 |     println!(\"{}\", (a\n+31 | \n 32 | \n-33 | \n+33 |                    as\n+34 | \n+35 | \n  ...\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a shift\n-  --> $DIR/issue-22644.rs:38:31\n+  --> $DIR/issue-22644.rs:40:31\n    |\n-38 |     println!(\"{}\", a as usize << long_name);\n+40 |     println!(\"{}\", a as usize << long_name); //~ ERROR `<` is interpreted as a start of generic\n    |                    ---------- ^^ --------- interpreted as generic arguments\n    |                    |          |\n    |                    |          not interpreted as shift\n    |                    help: try shifting the casted value: `(a as usize)`\n \n error: expected type, found `4`\n-  --> $DIR/issue-22644.rs:40:28\n+  --> $DIR/issue-22644.rs:42:28\n    |\n-40 |     println!(\"{}\", a: &mut 4);\n+42 |     println!(\"{}\", a: &mut 4); //~ ERROR expected type, found `4`\n    |                            ^ expecting a type here because of type ascription\n "}, {"sha": "0589618a82faf45b6568e748b671a377b81169b1", "filename": "src/test/ui/issue-33525.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-33525.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-33525.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-33525.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    a;\n-    \"\".lorem;\n-    \"\".ipsum;\n+    a; //~ ERROR cannot find value `a`\n+    \"\".lorem; //~ ERROR no field\n+    \"\".ipsum; //~ ERROR no field\n }"}, {"sha": "4909340fa4c352e40c0e79e15d761c3329ff9da7", "filename": "src/test/ui/issue-33525.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-33525.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-33525.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-33525.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,19 +1,19 @@\n error[E0425]: cannot find value `a` in this scope\n   --> $DIR/issue-33525.rs:12:5\n    |\n-12 |     a;\n+12 |     a; //~ ERROR cannot find value `a`\n    |     ^ not found in this scope\n \n error[E0609]: no field `lorem` on type `&'static str`\n   --> $DIR/issue-33525.rs:13:8\n    |\n-13 |     \"\".lorem;\n+13 |     \"\".lorem; //~ ERROR no field\n    |        ^^^^^\n \n error[E0609]: no field `ipsum` on type `&'static str`\n   --> $DIR/issue-33525.rs:14:8\n    |\n-14 |     \"\".ipsum;\n+14 |     \"\".ipsum; //~ ERROR no field\n    |        ^^^^^\n \n error: aborting due to 3 previous errors"}, {"sha": "21c169c663828f5381bad4da60270480252b9d7b", "filename": "src/test/ui/issue-33941.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-33941.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-33941.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-33941.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -11,5 +11,6 @@\n use std::collections::HashMap;\n \n fn main() {\n-    for _ in HashMap::new().iter().cloned() {}\n+    for _ in HashMap::new().iter().cloned() {} //~ ERROR type mismatch\n+    //~^ ERROR type mismatch\n }"}, {"sha": "953e6fe77d716c26e97575a31fe318c1af7d7091", "filename": "src/test/ui/issue-33941.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-33941.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _, _> as std::iter::Iterator>::Item == &_`\n   --> $DIR/issue-33941.rs:14:36\n    |\n-14 |     for _ in HashMap::new().iter().cloned() {}\n+14 |     for _ in HashMap::new().iter().cloned() {} //~ ERROR type mismatch\n    |                                    ^^^^^^ expected tuple, found reference\n    |\n    = note: expected type `(&_, &_)`\n@@ -10,7 +10,7 @@ error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _,\n error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _, _> as std::iter::Iterator>::Item == &_`\n   --> $DIR/issue-33941.rs:14:5\n    |\n-14 |     for _ in HashMap::new().iter().cloned() {}\n+14 |     for _ in HashMap::new().iter().cloned() {} //~ ERROR type mismatch\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected tuple, found reference\n    |\n    = note: expected type `(&_, &_)`"}, {"sha": "4616f25bdfb868a59a8bba8f1120fc01c2981052", "filename": "src/test/ui/issue-35241.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-35241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-35241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35241.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -10,6 +10,6 @@\n \n struct Foo(u32);\n \n-fn test() -> Foo { Foo }\n+fn test() -> Foo { Foo } //~ ERROR mismatched types\n \n fn main() {}"}, {"sha": "25cef7388977d2aff5bc839ed442ac34f106a3d7", "filename": "src/test/ui/issue-35241.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-35241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-35241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35241.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-35241.rs:13:20\n    |\n-13 | fn test() -> Foo { Foo }\n+13 | fn test() -> Foo { Foo } //~ ERROR mismatched types\n    |              ---   ^^^\n    |              |     |\n    |              |     expected struct `Foo`, found fn item"}, {"sha": "ee9d1324cdbb7e3b88208111122a5f4761dce46e", "filename": "src/test/ui/issue-35675.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-35675.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-35675.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35675.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -12,14 +12,13 @@\n enum Fruit { //~ HELP possible candidate is found in another module, you can import it into scope\n     //~^ HELP possible candidate is found in another module, you can import it into scope\n     Apple(i64),\n-    //~^ HELP there is an enum variant `Fruit::Apple`, did you mean to use `Fruit`?\n-    //~| HELP there is an enum variant `Fruit::Apple`, did you mean to use `Fruit`?\n     Orange(i64),\n }\n \n fn should_return_fruit() -> Apple {\n     //~^ ERROR cannot find type `Apple` in this scope\n     //~| NOTE not found in this scope\n+    //~| HELP you can try using the variant's enum\n     Apple(5)\n     //~^ ERROR cannot find function `Apple` in this scope\n     //~| NOTE not found in this scope\n@@ -28,6 +27,7 @@ fn should_return_fruit() -> Apple {\n fn should_return_fruit_too() -> Fruit::Apple {\n     //~^ ERROR expected type, found variant `Fruit::Apple`\n     //~| NOTE not a type\n+    //~| HELP you can try using the variant's enum\n     Apple(5)\n     //~^ ERROR cannot find function `Apple` in this scope\n     //~| NOTE not found in this scope\n@@ -44,6 +44,7 @@ fn foo() -> Ok {\n fn bar() -> Variant3 {\n     //~^ ERROR cannot find type `Variant3` in this scope\n     //~| NOTE not found in this scope\n+    //~| HELP you can try using the variant's enum\n }\n \n fn qux() -> Some {\n@@ -61,7 +62,6 @@ mod x {\n         Variant1,\n         Variant2(),\n         Variant3(usize),\n-        //~^ HELP there is an enum variant `x::Enum::Variant3`, did you mean to use `x::Enum`?\n         Variant4 {},\n     }\n }"}, {"sha": "550e094dc51bb5f44b7e7f1ef9b339c1a91c9c27", "filename": "src/test/ui/issue-35675.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-35675.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-35675.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35675.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,26 +1,26 @@\n error[E0412]: cannot find type `Apple` in this scope\n-  --> $DIR/issue-35675.rs:20:29\n+  --> $DIR/issue-35675.rs:18:29\n    |\n-20 | fn should_return_fruit() -> Apple {\n+18 | fn should_return_fruit() -> Apple {\n    |                             ^^^^^\n    |                             |\n    |                             not found in this scope\n    |                             help: you can try using the variant's enum: `Fruit`\n \n error[E0425]: cannot find function `Apple` in this scope\n-  --> $DIR/issue-35675.rs:23:5\n+  --> $DIR/issue-35675.rs:22:5\n    |\n-23 |     Apple(5)\n+22 |     Apple(5)\n    |     ^^^^^ not found in this scope\n help: possible candidate is found in another module, you can import it into scope\n    |\n 12 | use Fruit::Apple;\n    |\n \n error[E0573]: expected type, found variant `Fruit::Apple`\n-  --> $DIR/issue-35675.rs:28:33\n+  --> $DIR/issue-35675.rs:27:33\n    |\n-28 | fn should_return_fruit_too() -> Fruit::Apple {\n+27 | fn should_return_fruit_too() -> Fruit::Apple {\n    |                                 ^^^^^^^^^^^^\n    |                                 |\n    |                                 not a type\n@@ -55,9 +55,9 @@ error[E0412]: cannot find type `Variant3` in this scope\n    |             help: you can try using the variant's enum: `x::Enum`\n \n error[E0573]: expected type, found variant `Some`\n-  --> $DIR/issue-35675.rs:49:13\n+  --> $DIR/issue-35675.rs:50:13\n    |\n-49 | fn qux() -> Some {\n+50 | fn qux() -> Some {\n    |             ^^^^ not a type\n    |\n    = help: there is an enum variant `std::prelude::v1::Option::Some`, try using `std::prelude::v1::Option`?"}, {"sha": "d45b0c5a0416c279fcb2dc72cc87ca4b148c706b", "filename": "src/test/ui/issue-35976.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-35976.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-35976.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35976.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -23,7 +23,6 @@ mod private {\n fn bar(arg: Box<private::Future>) {\n     arg.wait();\n     //~^ ERROR the `wait` method cannot be invoked on a trait object\n-    //~| another candidate was found in the following trait, perhaps add a `use` for it:\n }\n \n fn main() {"}, {"sha": "fa4361e42aa5b908ca9e903d6ff2a15bde7116a7", "filename": "src/test/ui/issue-36400.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-36400.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-36400.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-36400.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -12,5 +12,5 @@ fn f(x: &mut u32) {}\n \n fn main() {\n     let x = Box::new(3);\n-    f(&mut *x);\n+    f(&mut *x); //~ ERROR cannot borrow immutable\n }"}, {"sha": "84e6855e23b461214983423135080a405cc31f0b", "filename": "src/test/ui/issue-36400.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-36400.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-36400.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-36400.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow immutable `Box` content `*x` as mutable\n    |\n 14 |     let x = Box::new(3);\n    |         - consider changing this to `mut x`\n-15 |     f(&mut *x);\n+15 |     f(&mut *x); //~ ERROR cannot borrow immutable\n    |            ^^ cannot borrow as mutable\n \n error: aborting due to previous error"}, {"sha": "1e05bdb0c608660c4952bb757debb741f42c29f4", "filename": "src/test/ui/issue-37311-type-length-limit/issue-37311.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-37311-type-length-limit%2Fissue-37311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-37311-type-length-limit%2Fissue-37311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-37311-type-length-limit%2Fissue-37311.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -20,7 +20,7 @@ trait Foo {\n \n impl<T> Foo for T {\n     #[allow(unconditional_recursion)]\n-    fn recurse(&self) {\n+    fn recurse(&self) { //~ ERROR reached the type-length limit\n         (self, self).recurse();\n     }\n }"}, {"sha": "fe173867da1096baa9bea5d233a9440e398d1990", "filename": "src/test/ui/issue-37311-type-length-limit/issue-37311.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-37311-type-length-limit%2Fissue-37311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-37311-type-length-limit%2Fissue-37311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-37311-type-length-limit%2Fissue-37311.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error: reached the type-length limit while instantiating `<T as Foo><(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(), &()), &(&()...`\n   --> $DIR/issue-37311.rs:23:5\n    |\n-23 | /     fn recurse(&self) {\n+23 | /     fn recurse(&self) { //~ ERROR reached the type-length limit\n 24 | |         (self, self).recurse();\n 25 | |     }\n    | |_____^"}, {"sha": "f2de2030bd1964d3958959d5ffd9ccdadfb03440", "filename": "src/test/ui/issue-40402-ref-hints/issue-40402-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -16,5 +16,5 @@ struct Foo {\n fn main() {\n     let mut f = Foo { v: Vec::new() };\n     f.v.push(\"hello\".to_string());\n-    let e = f.v[0];\n+    let e = f.v[0]; //~ ERROR cannot move out of indexed content\n }"}, {"sha": "173a60b0f0885e8f5ab55599c8b0a3d4a8218daf", "filename": "src/test/ui/issue-40402-ref-hints/issue-40402-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of indexed content\n   --> $DIR/issue-40402-1.rs:19:13\n    |\n-19 |     let e = f.v[0];\n+19 |     let e = f.v[0]; //~ ERROR cannot move out of indexed content\n    |             ^^^^^^\n    |             |\n    |             cannot move out of indexed content"}, {"sha": "894923605c02474bb39e686e81619bf09c00957d", "filename": "src/test/ui/issue-40402-ref-hints/issue-40402-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-2.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -12,5 +12,5 @@\n // are nested within a pattern\n fn main() {\n     let x = vec![(String::new(), String::new())];\n-    let (a, b) = x[0];\n+    let (a, b) = x[0]; //~ ERROR cannot move out of indexed content\n }"}, {"sha": "7b992e376dc749cfbbcb2225d05935997f1db5d9", "filename": "src/test/ui/issue-40402-ref-hints/issue-40402-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-2.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of indexed content\n   --> $DIR/issue-40402-2.rs:15:18\n    |\n-15 |     let (a, b) = x[0];\n+15 |     let (a, b) = x[0]; //~ ERROR cannot move out of indexed content\n    |          -  -    ^^^^ cannot move out of indexed content\n    |          |  |\n    |          |  ...and here (use `ref b` or `ref mut b`)"}, {"sha": "10dc177c7e95da3a6f5b881c7187bd4c529ce659", "filename": "src/test/ui/issue-40782.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-40782.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-40782.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40782.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    for i 0..2 {\n+    for i 0..2 { //~ ERROR missing `in`\n     }\n }\n "}, {"sha": "543233e0cc6208edb7e15cc5d4b659d640b0d973", "filename": "src/test/ui/issue-40782.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-40782.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-40782.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40782.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error: missing `in` in `for` loop\n   --> $DIR/issue-40782.rs:12:10\n    |\n-12 |     for i 0..2 {\n+12 |     for i 0..2 { //~ ERROR missing `in`\n    |          ^ help: try adding `in` here\n \n error: aborting due to previous error"}, {"sha": "f35eee186a2a5a4cb26a6a12793fcf71ce77e3a2", "filename": "src/test/ui/issue-42106.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-42106.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-42106.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42106.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -10,7 +10,7 @@\n \n fn do_something<T>(collection: &mut Vec<T>) {\n     let _a = &collection;\n-    collection.swap(1, 2);\n+    collection.swap(1, 2); //~ ERROR also borrowed as immutable\n }\n \n fn main() {}"}, {"sha": "0f96377c062a8323004e48f7f3d9049c3025a297", "filename": "src/test/ui/issue-42106.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-42106.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-42106.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42106.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `*collection` as mutable because `collection` is als\n    |\n 12 |     let _a = &collection;\n    |               ---------- immutable borrow occurs here\n-13 |     collection.swap(1, 2);\n+13 |     collection.swap(1, 2); //~ ERROR also borrowed as immutable\n    |     ^^^^^^^^^^ mutable borrow occurs here\n 14 | }\n    | - immutable borrow ends here"}, {"sha": "6fa2c69bf66968739fe85a4eaa25feae45bebbc3", "filename": "src/test/ui/issue-42954.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-42954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-42954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42954.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -10,7 +10,7 @@\n \n macro_rules! is_plainly_printable {\n     ($i: ident) => {\n-        $i as u32 < 0\n+        $i as u32 < 0 //~ `<` is interpreted as a start of generic arguments\n     };\n }\n "}, {"sha": "d0fc410c474a4c85f9817dd4311abe538b8ed43a", "filename": "src/test/ui/issue-42954.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-42954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-42954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42954.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error: `<` is interpreted as a start of generic arguments for `u32`, not a comparison\n   --> $DIR/issue-42954.rs:13:19\n    |\n-13 |         $i as u32 < 0\n+13 |         $i as u32 < 0 //~ `<` is interpreted as a start of generic arguments\n    |         --------- ^ - interpreted as generic arguments\n    |         |         |\n    |         |         not interpreted as comparison"}, {"sha": "97b82dc58dcfcfe90b7adaf92eed3a09cc121e9e", "filename": "src/test/ui/issue-44023.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-44023.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-44023.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-44023.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -12,5 +12,5 @@\n \n pub fn main () {}\n \n-fn \u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8 ( ) -> isize {\n+fn \u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8 ( ) -> isize { //~ ERROR mismatched types\n }"}, {"sha": "fc6363dc921a2e19b18987b7fe15714165892235", "filename": "src/test/ui/issue-44023.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-44023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-44023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-44023.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-44023.rs:15:42\n    |\n-15 |   fn \u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8 ( ) -> isize {\n+15 |   fn \u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8 ( ) -> isize { //~ ERROR mismatched types\n    |  __________________________________________^\n 16 | | }\n    | |_^ expected isize, found ()"}, {"sha": "356a7be0b419ea627578bea3f3dd9c300fefeba7", "filename": "src/test/ui/issue-44078.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-44078.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-44078.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-44078.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    \"\ud83d\ude0a\"\";\n+    \"\ud83d\ude0a\"\"; //~ ERROR unterminated double quote\n }"}, {"sha": "49e461bd18d18993bc6390f968a21d9802d12a4d", "filename": "src/test/ui/issue-44078.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-44078.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-44078.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-44078.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error: unterminated double quote string\n   --> $DIR/issue-44078.rs:12:8\n    |\n-12 |       \"\ud83d\ude0a\"\";\n+12 |       \"\ud83d\ude0a\"\"; //~ ERROR unterminated double quote\n    |  _________^\n 13 | | }\n    | |__^"}, {"sha": "8e99caff4efa2040789f398671ad7d5ec41f0780", "filename": "src/test/ui/issue-44406.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-44406.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-44406.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-44406.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -15,5 +15,6 @@ macro_rules! foo {\n }\n \n fn main() {\n-    foo!(true);\n+    foo!(true); //~ ERROR expected type, found keyword\n+    //~^ ERROR expected identifier, found keyword\n }"}, {"sha": "2e71b001d7ac0402109da26aefb258a2ac89de20", "filename": "src/test/ui/issue-44406.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-44406.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-44406.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-44406.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error: expected identifier, found keyword `true`\n   --> $DIR/issue-44406.rs:18:10\n    |\n-18 |     foo!(true);\n+18 |     foo!(true); //~ ERROR expected type, found keyword\n    |          ^^^^\n \n error: expected type, found keyword `true`\n@@ -10,7 +10,7 @@ error: expected type, found keyword `true`\n 13 |         bar(baz: $rest)\n    |                - help: did you mean to use `;` here?\n ...\n-18 |     foo!(true);\n+18 |     foo!(true); //~ ERROR expected type, found keyword\n    |          ^^^^ expecting a type here because of type ascription\n \n error: aborting due to 2 previous errors"}, {"sha": "2fce8d723d39c6f04f5157b8c2929cffbeed032c", "filename": "src/test/ui/issue-45107-unnecessary-unsafe-in-closure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-45107-unnecessary-unsafe-in-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-45107-unnecessary-unsafe-in-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45107-unnecessary-unsafe-in-closure.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -14,13 +14,13 @@ fn main() {\n \n     unsafe {\n         let f = |v: &mut Vec<_>| {\n-            unsafe {\n+            unsafe { //~ ERROR unnecessary `unsafe`\n                 v.set_len(24);\n-                |w: &mut Vec<u32>| { unsafe {\n+                |w: &mut Vec<u32>| { unsafe { //~ ERROR unnecessary `unsafe`\n                     w.set_len(32);\n                 } };\n             }\n-            |x: &mut Vec<u32>| { unsafe {\n+            |x: &mut Vec<u32>| { unsafe { //~ ERROR unnecessary `unsafe`\n                 x.set_len(40);\n             } };\n         };"}, {"sha": "abd875c48083d5f4964b889798f73355b958c977", "filename": "src/test/ui/issue-45107-unnecessary-unsafe-in-closure.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-45107-unnecessary-unsafe-in-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-45107-unnecessary-unsafe-in-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45107-unnecessary-unsafe-in-closure.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,9 +1,9 @@\n error: unnecessary `unsafe` block\n   --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:17:13\n    |\n-17 | /             unsafe {\n+17 | /             unsafe { //~ ERROR unnecessary `unsafe`\n 18 | |                 v.set_len(24);\n-19 | |                 |w: &mut Vec<u32>| { unsafe {\n+19 | |                 |w: &mut Vec<u32>| { unsafe { //~ ERROR unnecessary `unsafe`\n 20 | |                     w.set_len(32);\n 21 | |                 } };\n 22 | |             }\n@@ -19,7 +19,7 @@ note: because it's nested under this `unsafe` block\n    |\n 15 | /     unsafe {\n 16 | |         let f = |v: &mut Vec<_>| {\n-17 | |             unsafe {\n+17 | |             unsafe { //~ ERROR unnecessary `unsafe`\n 18 | |                 v.set_len(24);\n ...  |\n 29 | |         f(&mut v);\n@@ -29,7 +29,7 @@ note: because it's nested under this `unsafe` block\n error: unnecessary `unsafe` block\n   --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:19:38\n    |\n-19 |                   |w: &mut Vec<u32>| { unsafe {\n+19 |                   |w: &mut Vec<u32>| { unsafe { //~ ERROR unnecessary `unsafe`\n    |  ______________________________________^\n 20 | |                     w.set_len(32);\n 21 | |                 } };\n@@ -40,7 +40,7 @@ note: because it's nested under this `unsafe` block\n    |\n 15 | /     unsafe {\n 16 | |         let f = |v: &mut Vec<_>| {\n-17 | |             unsafe {\n+17 | |             unsafe { //~ ERROR unnecessary `unsafe`\n 18 | |                 v.set_len(24);\n ...  |\n 29 | |         f(&mut v);\n@@ -50,7 +50,7 @@ note: because it's nested under this `unsafe` block\n error: unnecessary `unsafe` block\n   --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:23:34\n    |\n-23 |               |x: &mut Vec<u32>| { unsafe {\n+23 |               |x: &mut Vec<u32>| { unsafe { //~ ERROR unnecessary `unsafe`\n    |  __________________________________^\n 24 | |                 x.set_len(40);\n 25 | |             } };\n@@ -61,7 +61,7 @@ note: because it's nested under this `unsafe` block\n    |\n 15 | /     unsafe {\n 16 | |         let f = |v: &mut Vec<_>| {\n-17 | |             unsafe {\n+17 | |             unsafe { //~ ERROR unnecessary `unsafe`\n 18 | |                 v.set_len(24);\n ...  |\n 29 | |         f(&mut v);"}, {"sha": "965747cfa05ca17dcf932b999d8c4789bf8d91e3", "filename": "src/test/ui/issue-45296.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-45296.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-45296.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45296.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -11,5 +11,5 @@\n fn main() {\n     let unused = ();\n \n-    #![allow(unused_variables)]\n+    #![allow(unused_variables)] //~ ERROR not permitted in this context\n }"}, {"sha": "45a80750de71678e48f5052feb839578a0ae510f", "filename": "src/test/ui/issue-45296.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-45296.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-45296.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45296.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error: an inner attribute is not permitted in this context\n   --> $DIR/issue-45296.rs:14:7\n    |\n-14 |     #![allow(unused_variables)]\n+14 |     #![allow(unused_variables)] //~ ERROR not permitted in this context\n    |       ^\n    |\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them."}, {"sha": "d733c8e6de26fe0dc80a9e0bc868e91b26fb72d5", "filename": "src/test/ui/issue-45730.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-45730.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-45730.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45730.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -10,10 +10,10 @@\n \n use std::fmt;\n fn main() {\n-    let x: *const _ = 0 as _;\n+    let x: *const _ = 0 as _; //~ ERROR cannot cast\n \n-    let x: *const _ = 0 as *const _;\n+    let x: *const _ = 0 as *const _; //~ ERROR cannot cast\n     let y: Option<*const fmt::Debug> = Some(x) as _;\n \n-    let x = 0 as *const i32 as *const _ as *mut _;\n+    let x = 0 as *const i32 as *const _ as *mut _; //~ ERROR cannot cast\n }"}, {"sha": "94d39239117add7754d7b5826ae4c48c16572edd", "filename": "src/test/ui/issue-45730.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-45730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Fissue-45730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45730.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0641]: cannot cast to a pointer of an unknown kind\n   --> $DIR/issue-45730.rs:13:23\n    |\n-13 |     let x: *const _ = 0 as _;\n+13 |     let x: *const _ = 0 as _; //~ ERROR cannot cast\n    |                       ^^^^^-\n    |                            |\n    |                            help: consider giving more type information\n@@ -11,7 +11,7 @@ error[E0641]: cannot cast to a pointer of an unknown kind\n error[E0641]: cannot cast to a pointer of an unknown kind\n   --> $DIR/issue-45730.rs:15:23\n    |\n-15 |     let x: *const _ = 0 as *const _;\n+15 |     let x: *const _ = 0 as *const _; //~ ERROR cannot cast\n    |                       ^^^^^--------\n    |                            |\n    |                            help: consider giving more type information\n@@ -21,7 +21,7 @@ error[E0641]: cannot cast to a pointer of an unknown kind\n error[E0641]: cannot cast to a pointer of an unknown kind\n   --> $DIR/issue-45730.rs:18:13\n    |\n-18 |     let x = 0 as *const i32 as *const _ as *mut _;\n+18 |     let x = 0 as *const i32 as *const _ as *mut _; //~ ERROR cannot cast\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------\n    |                                            |\n    |                                            help: consider giving more type information"}, {"sha": "5ded42e7c972cacf4d68d331786b73f984a775cf", "filename": "src/test/ui/lifetime-errors/42701_one_named_and_one_anonymous.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2F42701_one_named_and_one_anonymous.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2F42701_one_named_and_one_anonymous.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2F42701_one_named_and_one_anonymous.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -17,7 +17,7 @@ fn foo2<'a>(a: &'a Foo, x: &i32) -> &'a i32 {\n         let p: &i32 = &a.field;\n         &*p\n     } else {\n-        &*x\n+        &*x //~ ERROR explicit lifetime\n     }\n }\n "}, {"sha": "9bfa72c2f36ceb7f8a5df90ca4ea30eb1abacd30", "filename": "src/test/ui/lifetime-errors/42701_one_named_and_one_anonymous.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2F42701_one_named_and_one_anonymous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2F42701_one_named_and_one_anonymous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2F42701_one_named_and_one_anonymous.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -4,7 +4,7 @@ error[E0621]: explicit lifetime required in the type of `x`\n 15 | fn foo2<'a>(a: &'a Foo, x: &i32) -> &'a i32 {\n    |                         - consider changing the type of `x` to `&'a i32`\n ...\n-20 |         &*x\n+20 |         &*x //~ ERROR explicit lifetime\n    |         ^^^ lifetime `'a` required\n \n error: aborting due to previous error"}, {"sha": "1705767834fb2f3ff06960cb05cd685e3b564f0e", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-early-bound-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -18,7 +18,7 @@ impl<'a> Foo<'a> {\n         match *self {\n             Foo::Bar(s) => {\n                 if s == \"test\" {\n-                    other\n+                    other //~ ERROR explicit lifetime\n                 } else {\n                     self.clone()\n                 }"}, {"sha": "4c5e37b8f10fbaa41340b53e261952ccd4e1ccc8", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-early-bound-in-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -4,7 +4,7 @@ error[E0621]: explicit lifetime required in the type of `other`\n 17 |     fn bar(&self, other: Foo) -> Foo<'a> {\n    |                   ----- consider changing the type of `other` to `Foo<'a>`\n ...\n-21 |                     other\n+21 |                     other //~ ERROR explicit lifetime\n    |                     ^^^^^ lifetime `'a` required\n \n error: aborting due to previous error"}, {"sha": "964f2f1c003ecc013ed5f629a7df18a0db543b05", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n-    if x > y { x } else { y }\n+    if x > y { x } else { y } //~ ERROR explicit lifetime\n }\n \n fn main() { }"}, {"sha": "457e347faaa4dfdfd6b5711a0a7e38730c674349", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,7 +3,7 @@ error[E0621]: explicit lifetime required in the type of `x`\n    |\n 11 | fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n    |            - consider changing the type of `x` to `&'a i32`\n-12 |     if x > y { x } else { y }\n+12 |     if x > y { x } else { y } //~ ERROR explicit lifetime\n    |                ^ lifetime `'a` required\n \n error: aborting due to previous error"}, {"sha": "96d5c5bb16100eecf0e5d70e45dd76f21f0c6f41", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn foo<'a>((x, y): (&'a i32, &i32)) -> &'a i32 {\n-    if x > y { x } else { y }\n+    if x > y { x } else { y } //~ ERROR explicit lifetime\n }\n \n fn main () { }"}, {"sha": "8c3592379ef12a482f570b3c307c8467245bf450", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,7 +3,7 @@ error[E0621]: explicit lifetime required in parameter type\n    |\n 11 | fn foo<'a>((x, y): (&'a i32, &i32)) -> &'a i32 {\n    |            ------ consider changing type to `(&'a i32, &'a i32)`\n-12 |     if x > y { x } else { y }\n+12 |     if x > y { x } else { y } //~ ERROR explicit lifetime\n    |                           ^ lifetime `'a` required\n \n error: aborting due to previous error"}, {"sha": "5cf52fe79f0145924f77e81b46cfbcaa32d44bee", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -11,7 +11,7 @@\n trait Foo {\n \n fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n-   if x > y { x } else { y }\n+   if x > y { x } else { y } //~ ERROR explicit lifetime\n    }\n }\n "}, {"sha": "d5d1d16a4245f367bd183b02bbdb1f48d4454571", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,7 +3,7 @@ error[E0621]: explicit lifetime required in the type of `x`\n    |\n 13 | fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n    |            - consider changing the type of `x` to `&'a i32`\n-14 |    if x > y { x } else { y }\n+14 |    if x > y { x } else { y } //~ ERROR explicit lifetime\n    |               ^ lifetime `'a` required\n \n error: aborting due to previous error"}, {"sha": "3727ddf91298e466049d1d26b09c59c24578c54a", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -15,7 +15,7 @@ struct Foo {\n impl Foo {\n   fn foo<'a>(&'a self, x: &i32) -> &i32 {\n \n-    if true { &self.field } else { x }\n+    if true { &self.field } else { x } //~ ERROR explicit lifetime\n \n   }\n "}, {"sha": "23b9c0cf2506f9312a99293f9ef5a032bbb94a68", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -4,7 +4,7 @@ error[E0621]: explicit lifetime required in the type of `x`\n 16 |   fn foo<'a>(&'a self, x: &i32) -> &i32 {\n    |                        - consider changing the type of `x` to `&'a i32`\n 17 | \n-18 |     if true { &self.field } else { x }\n+18 |     if true { &self.field } else { x } //~ ERROR explicit lifetime\n    |                                    ^ lifetime `'a` required\n \n error: aborting due to previous error"}, {"sha": "cec73d79ec21b7b65b5257272b791bf05e5e8867", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -18,7 +18,7 @@ impl Foo for () {\n \n     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n \n-        if x > y { x } else { y }\n+        if x > y { x } else { y } //~ ERROR lifetime mismatch\n \n     }\n "}, {"sha": "f418e1c01f2ae5b28f41791edef9d3693217c9aa", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -6,7 +6,7 @@ error[E0623]: lifetime mismatch\n    |                   |\n    |                   this parameter and the return type are declared with different lifetimes...\n 20 | \n-21 |         if x > y { x } else { y }\n+21 |         if x > y { x } else { y } //~ ERROR lifetime mismatch\n    |                    ^ ...but data from `x` is returned here\n \n error: aborting due to previous error"}, {"sha": "5ee2663317e96a2603d9743bc92619dcd51dccdd", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32 {\n-    if x > y { x } else { y }\n+    if x > y { x } else { y } //~ ERROR explicit lifetime\n }\n \n fn main() { }"}, {"sha": "b28f102cd5ac1624879e69c2dd2383d4e7f58fea", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,7 +3,7 @@ error[E0621]: explicit lifetime required in the type of `y`\n    |\n 11 | fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32 {\n    |                        - consider changing the type of `y` to `&'a i32`\n-12 |     if x > y { x } else { y }\n+12 |     if x > y { x } else { y } //~ ERROR explicit lifetime\n    |                           ^ lifetime `'a` required\n \n error: aborting due to previous error"}, {"sha": "4d57c61ba9e2e5574290ae4cf448565c04ddbba4", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -15,7 +15,7 @@ struct Foo {\n impl Foo {\n   fn foo<'a>(&self, x: &'a i32) -> &i32 {\n \n-    x\n+    x //~ ERROR lifetime mismatch\n \n   }\n "}, {"sha": "d26cb6be709b1fcf3179d572cb558c3c08db79d0", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -6,7 +6,7 @@ error[E0623]: lifetime mismatch\n    |                        |\n    |                        this parameter and the return type are declared with different lifetimes...\n 17 | \n-18 |     x\n+18 |     x //~ ERROR lifetime mismatch\n    |     ^ ...but data from `x` is returned here\n \n error: aborting due to previous error"}, {"sha": "a6ccf4a53d1558efd83a42f2f24dfbf1939b594c", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-self-is-anon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -15,7 +15,7 @@ struct Foo {\n impl Foo {\n     fn foo<'a>(&self, x: &'a Foo) -> &'a Foo {\n \n-        if true { x } else { self }\n+        if true { x } else { self } //~ ERROR lifetime mismatch\n \n     }\n }"}, {"sha": "0430e4c2715075e1b3585e4bc1078baa6a37c2b1", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-self-is-anon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -6,7 +6,7 @@ error[E0623]: lifetime mismatch\n    |                |\n    |                this parameter and the return type are declared with different lifetimes...\n 17 | \n-18 |         if true { x } else { self }\n+18 |         if true { x } else { self } //~ ERROR lifetime mismatch\n    |                              ^^^^ ...but data from `self` is returned here\n \n error: aborting due to previous error"}, {"sha": "7f5b23728fd31c3e5f3ded518b6038cb18f1761f", "filename": "src/test/ui/lifetime-errors/ex1b-return-no-names-if-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1b-return-no-names-if-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1b-return-no-names-if-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1b-return-no-names-if-else.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(x: &i32, y: &i32) -> &i32 {\n+fn foo(x: &i32, y: &i32) -> &i32 { //~ ERROR missing lifetime\n     if x > y { x } else { y }\n }\n "}, {"sha": "7cd5ca65981b7c88a76603afa9b93878a1bdc50c", "filename": "src/test/ui/lifetime-errors/ex1b-return-no-names-if-else.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -1,7 +1,7 @@\n error[E0106]: missing lifetime specifier\n   --> $DIR/ex1b-return-no-names-if-else.rs:11:29\n    |\n-11 | fn foo(x: &i32, y: &i32) -> &i32 {\n+11 | fn foo(x: &i32, y: &i32) -> &i32 { //~ ERROR missing lifetime\n    |                             ^ expected lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`"}, {"sha": "f35a7555d708bc56606f9c7ad2d2fce4738ea361", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -13,7 +13,7 @@ struct Ref<'a, T: 'a> {\n }\n \n fn foo<'a>(x: Ref<i32>, y: &mut Vec<Ref<'a, i32>>) {\n-    y.push(x);\n+    y.push(x); //~ ERROR explicit lifetime\n }\n \n fn main() { }"}, {"sha": "7abc093512b46e2955b01dc19e5ec2775f996786", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,7 +3,7 @@ error[E0621]: explicit lifetime required in the type of `x`\n    |\n 15 | fn foo<'a>(x: Ref<i32>, y: &mut Vec<Ref<'a, i32>>) {\n    |            - consider changing the type of `x` to `Ref<'a, i32>`\n-16 |     y.push(x);\n+16 |     y.push(x); //~ ERROR explicit lifetime\n    |            ^ lifetime `'a` required\n \n error: aborting due to previous error"}, {"sha": "18a720f345d7f39511e8020129141efa9fb31358", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name-early-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -14,7 +14,7 @@ fn baz<'a, 'b, T>(x: &mut Vec<&'a T>, y: &T)\n     where i32: Foo<'a>,\n           u32: Foo<'b>\n {\n-    x.push(y);\n+    x.push(y); //~ ERROR explicit lifetime required\n }\n fn main() {\n let x = baz;"}, {"sha": "ca522596fbff8d7e328743110330902e444e7fdf", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name-early-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -4,7 +4,7 @@ error[E0621]: explicit lifetime required in the type of `y`\n 13 | fn baz<'a, 'b, T>(x: &mut Vec<&'a T>, y: &T)\n    |                                       - consider changing the type of `y` to `&'a T`\n ...\n-17 |     x.push(y);\n+17 |     x.push(y); //~ ERROR explicit lifetime required\n    |            ^ lifetime `'a` required\n \n error: aborting due to previous error"}, {"sha": "1834395bd3b822623fa33e2ea62172c21a0d903e", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -13,7 +13,7 @@ struct Ref<'a, T: 'a> {\n }\n \n fn foo<'a>(x: &mut Vec<Ref<'a, i32>>, y: Ref<i32>) {\n-    x.push(y);\n+    x.push(y); //~ ERROR explicit lifetime\n }\n \n fn main() { }"}, {"sha": "5d8f2c1decb2cad43a01e810a95054841cb6775e", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,7 +3,7 @@ error[E0621]: explicit lifetime required in the type of `y`\n    |\n 15 | fn foo<'a>(x: &mut Vec<Ref<'a, i32>>, y: Ref<i32>) {\n    |                                       - consider changing the type of `y` to `Ref<'a, i32>`\n-16 |     x.push(y);\n+16 |     x.push(y); //~ ERROR explicit lifetime\n    |            ^ lifetime `'a` required\n \n error: aborting due to previous error"}, {"sha": "6cf626adf82e369db06b6893240fd666cf0c6581", "filename": "src/test/ui/lifetime-errors/ex2b-push-no-existing-names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex2b-push-no-existing-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex2b-push-no-existing-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2b-push-no-existing-names.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -13,7 +13,7 @@ struct Ref<'a, T: 'a> {\n }\n \n fn foo(x: &mut Vec<Ref<i32>>, y: Ref<i32>) {\n-    x.push(y);\n+    x.push(y); //~ ERROR lifetime mismatch\n }\n \n fn main() { }"}, {"sha": "69ff29db3570a4250aa4706f833d2936f8dddac0", "filename": "src/test/ui/lifetime-errors/ex2b-push-no-existing-names.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex2b-push-no-existing-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex2b-push-no-existing-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2b-push-no-existing-names.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,7 +3,7 @@ error[E0623]: lifetime mismatch\n    |\n 15 | fn foo(x: &mut Vec<Ref<i32>>, y: Ref<i32>) {\n    |                    --------      -------- these two types are declared with different lifetimes...\n-16 |     x.push(y);\n+16 |     x.push(y); //~ ERROR lifetime mismatch\n    |            ^ ...but data from `y` flows into `x` here\n \n error: aborting due to previous error"}, {"sha": "36bd1c32286e1553e646767d09d6b5b24a1e9676", "filename": "src/test/ui/lifetime-errors/ex2c-push-inference-variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex2c-push-inference-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex2c-push-inference-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2c-push-inference-variable.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -14,7 +14,7 @@ struct Ref<'a, T: 'a> {\n \n fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n     let z = Ref { data: y.data };\n-    x.push(z);\n+    x.push(z); //~ ERROR lifetime mismatch\n }\n \n fn main() { }"}, {"sha": "dacb0708b05804a3e0ddc597ae7440bca0bcf0d1", "filename": "src/test/ui/lifetime-errors/ex2c-push-inference-variable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex2c-push-inference-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex2c-push-inference-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2c-push-inference-variable.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -4,7 +4,7 @@ error[E0623]: lifetime mismatch\n 15 | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n    |                                   ------------      ------------ these two types are declared with different lifetimes...\n 16 |     let z = Ref { data: y.data };\n-17 |     x.push(z);\n+17 |     x.push(z); //~ ERROR lifetime mismatch\n    |            ^ ...but data from `y` flows into `x` here\n \n error: aborting due to previous error"}, {"sha": "96316819e937f60f6f01beefd423bd397019b131", "filename": "src/test/ui/lifetime-errors/ex2d-push-inference-variable-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex2d-push-inference-variable-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex2d-push-inference-variable-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2d-push-inference-variable-2.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -13,7 +13,7 @@ struct Ref<'a, T: 'a> {\n }\n \n fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n-    let a: &mut Vec<Ref<i32>> = x;\n+    let a: &mut Vec<Ref<i32>> = x; //~ ERROR lifetime mismatch\n     let b = Ref { data: y.data };\n     a.push(b);\n }"}, {"sha": "e30355891ee78f6f6436aa681ed3ce5b707aa163", "filename": "src/test/ui/lifetime-errors/ex2d-push-inference-variable-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex2d-push-inference-variable-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex2d-push-inference-variable-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2d-push-inference-variable-2.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,7 +3,7 @@ error[E0623]: lifetime mismatch\n    |\n 15 | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n    |                                   ------------      ------------ these two types are declared with different lifetimes...\n-16 |     let a: &mut Vec<Ref<i32>> = x;\n+16 |     let a: &mut Vec<Ref<i32>> = x; //~ ERROR lifetime mismatch\n    |                                 ^ ...but data from `y` flows into `x` here\n \n error: aborting due to previous error"}, {"sha": "9352ebc77f5b2b0e033d7174513f6bd31e5ca931", "filename": "src/test/ui/lifetime-errors/ex2e-push-inference-variable-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex2e-push-inference-variable-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex2e-push-inference-variable-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2e-push-inference-variable-3.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -13,7 +13,7 @@ struct Ref<'a, T: 'a> {\n }\n \n fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n-    let a: &mut Vec<Ref<i32>> = x;\n+    let a: &mut Vec<Ref<i32>> = x; //~ ERROR lifetime mismatch\n     let b = Ref { data: y.data };\n     Vec::push(a, b);\n }"}, {"sha": "841555c1fcb38c098911c6633ded9839796a73ce", "filename": "src/test/ui/lifetime-errors/ex2e-push-inference-variable-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex2e-push-inference-variable-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex2e-push-inference-variable-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2e-push-inference-variable-3.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,7 +3,7 @@ error[E0623]: lifetime mismatch\n    |\n 15 | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n    |                                   ------------      ------------ these two types are declared with different lifetimes...\n-16 |     let a: &mut Vec<Ref<i32>> = x;\n+16 |     let a: &mut Vec<Ref<i32>> = x; //~ ERROR lifetime mismatch\n    |                                 ^ ...but data from `y` flows into `x` here\n \n error: aborting due to previous error"}, {"sha": "5d490824d02f934af47ee8d5492c3730ce39fabc", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn foo((v, w): (&u8, &u8), x: &u8) {\n-    v = x;\n+    v = x; //~ ERROR lifetime mismatch\n }\n \n fn main() { }"}, {"sha": "5e1a4593ae459919062b35bddfa74104cc2d8d45", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,7 +3,7 @@ error[E0623]: lifetime mismatch\n    |\n 11 | fn foo((v, w): (&u8, &u8), x: &u8) {\n    |                 ---           --- these two types are declared with different lifetimes...\n-12 |     v = x;\n+12 |     v = x; //~ ERROR lifetime mismatch\n    |         ^ ...but data from `x` flows here\n \n error: aborting due to previous error"}, {"sha": "fe6b40c05a603172f33c527ec103058c2815aee1", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-3.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-3.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n-    z.push((x,y));\n+    z.push((x,y)); //~ ERROR lifetime mismatch\n+    //~^ ERROR lifetime mismatch\n }\n \n fn main() { }"}, {"sha": "b5b90c077d064453bac9dfcfca426e313161e54a", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-3.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,15 +3,15 @@ error[E0623]: lifetime mismatch\n    |\n 11 | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n    |                     ---                 --- these two types are declared with different lifetimes...\n-12 |     z.push((x,y));\n+12 |     z.push((x,y)); //~ ERROR lifetime mismatch\n    |             ^ ...but data flows into `z` here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ex3-both-anon-regions-3.rs:12:15\n    |\n 11 | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n    |                         ---                  --- these two types are declared with different lifetimes...\n-12 |     z.push((x,y));\n+12 |     z.push((x,y)); //~ ERROR lifetime mismatch\n    |               ^ ...but data flows into `z` here\n \n error: aborting due to 2 previous errors"}, {"sha": "f16120ddc22a02a226cddcb0e56bb2ea6bee6784", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -13,7 +13,7 @@ struct Ref<'a, 'b> {\n }\n \n fn foo(mut x: Ref, y: Ref) {\n-    x.b = y.b;\n+    x.b = y.b; //~ ERROR lifetime mismatch\n }\n \n fn main() {}"}, {"sha": "e7317e63ab4727d849190339723d8382d8302dc1", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,7 +3,7 @@ error[E0623]: lifetime mismatch\n    |\n 15 | fn foo(mut x: Ref, y: Ref) {\n    |               ---     --- these two types are declared with different lifetimes...\n-16 |     x.b = y.b;\n+16 |     x.b = y.b; //~ ERROR lifetime mismatch\n    |           ^^^ ...but data from `y` flows into `x` here\n \n error: aborting due to previous error"}, {"sha": "78e6dc2d3e75fe6e86955944bf950c5cc7088208", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -13,7 +13,7 @@ struct Ref<'a, 'b> {\n }\n \n fn foo(mut x: Ref) {\n-    x.a = x.b;\n+    x.a = x.b; //~ ERROR lifetime mismatch\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "71eef13a67db75945c341db018fa9e94b89145b5", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -5,7 +5,7 @@ error[E0623]: lifetime mismatch\n    |               ---\n    |               |\n    |               this type is declared with multiple lifetimes...\n-16 |     x.a = x.b;\n+16 |     x.a = x.b; //~ ERROR lifetime mismatch\n    |           ^^^ ...but data with one lifetime flows into the other here\n \n error: aborting due to previous error"}, {"sha": "78e6dc2d3e75fe6e86955944bf950c5cc7088208", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -13,7 +13,7 @@ struct Ref<'a, 'b> {\n }\n \n fn foo(mut x: Ref) {\n-    x.a = x.b;\n+    x.a = x.b; //~ ERROR lifetime mismatch\n }\n \n fn main() {}"}, {"sha": "61b59b8f121c1ef077c1c51cf3bffc5a9ddeb115", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -5,7 +5,7 @@ error[E0623]: lifetime mismatch\n    |               ---\n    |               |\n    |               this type is declared with multiple lifetimes...\n-16 |     x.a = x.b;\n+16 |     x.a = x.b; //~ ERROR lifetime mismatch\n    |           ^^^ ...but data with one lifetime flows into the other here\n \n error: aborting due to previous error"}, {"sha": "ffec0e8d5bbb604dca2e2394179b8a3b9b772c48", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-earlybound-regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -15,7 +15,7 @@ fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>)\n     where &'a (): Sized,\n           &'b u32: Sized\n {\n-    x.push(y);\n+    x.push(y); //~ ERROR lifetime mismatch\n }\n \n fn main() {}"}, {"sha": "0b1b01d86b8ea4481a74185de44f1e723b402503", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-earlybound-regions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -4,7 +4,7 @@ error[E0623]: lifetime mismatch\n 14 | fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>)\n    |                           -------      ------- these two types are declared with different lifetimes...\n ...\n-18 |     x.push(y);\n+18 |     x.push(y); //~ ERROR lifetime mismatch\n    |            ^ ...but data from `y` flows into `x` here\n \n error: aborting due to previous error"}, {"sha": "16d18f309516c1fcb5833077159df8288f8a6af6", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-latebound-regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -12,7 +12,7 @@ struct Ref<'a> {\n }\n \n fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>) {\n-    x.push(y);\n+    x.push(y); //~ ERROR lifetime mismatch\n }\n \n fn main() {}"}, {"sha": "36885b7e076e4ee661c82c8ca25437c63e474b7b", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-latebound-regions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,7 +3,7 @@ error[E0623]: lifetime mismatch\n    |\n 14 | fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>) {\n    |                           -------      ------- these two types are declared with different lifetimes...\n-15 |     x.push(y);\n+15 |     x.push(y); //~ ERROR lifetime mismatch\n    |            ^ ...but data from `y` flows into `x` here\n \n error: aborting due to previous error"}, {"sha": "3b90b3474a140ad3fdf8da910cd75aa4c3f64935", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -12,7 +12,7 @@ struct Ref<'a> {\n }\n \n fn foo(mut x: Vec<Ref>, y: Ref) {\n-    x.push(y);\n+    x.push(y); //~ ERROR lifetime mismatch\n }\n \n fn main() {}"}, {"sha": "961b8e310fe1640b4d0bc293f0bfac4c8321e474", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,7 +3,7 @@ error[E0623]: lifetime mismatch\n    |\n 14 | fn foo(mut x: Vec<Ref>, y: Ref) {\n    |                   ---      --- these two types are declared with different lifetimes...\n-15 |     x.push(y);\n+15 |     x.push(y); //~ ERROR lifetime mismatch\n    |            ^ ...but data from `y` flows into `x` here\n \n error: aborting due to previous error"}, {"sha": "966b4f0b6c3291eddec7f8bb0a9547508e8cf5d7", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-latebound-regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn foo<'a,'b>(x: &mut Vec<&'a u8>, y: &'b u8) {\n-    x.push(y);\n+    x.push(y); //~ ERROR lifetime mismatch\n }\n \n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}, {"sha": "b70d26a99d7328b19bfb7a2d652d6b6c50e2a4da", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-latebound-regions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,7 +3,7 @@ error[E0623]: lifetime mismatch\n    |\n 11 | fn foo<'a,'b>(x: &mut Vec<&'a u8>, y: &'b u8) {\n    |                           ------      ------ these two types are declared with different lifetimes...\n-12 |     x.push(y);\n+12 |     x.push(y); //~ ERROR lifetime mismatch\n    |            ^ ...but data from `y` flows into `x` here\n \n error: aborting due to previous error"}, {"sha": "055c3f804685a02d56db22989e5dc929dc478304", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-one-is-struct-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -11,7 +11,7 @@\n struct Ref<'a, 'b> { a: &'a u32, b: &'b u32 }\n \n fn foo(mut x: Ref, y: &u32) {\n-    y = x.b;\n+    y = x.b; //~ ERROR lifetime mismatch\n }\n \n fn main() { }"}, {"sha": "7a5037130636906dc17ebee59c89da9634be0cfd", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-one-is-struct-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -5,7 +5,7 @@ error[E0623]: lifetime mismatch\n    |               ---     ----\n    |               |\n    |               these two types are declared with different lifetimes...\n-14 |     y = x.b;\n+14 |     y = x.b; //~ ERROR lifetime mismatch\n    |         ^^^ ...but data from `x` flows into `y` here\n \n error: aborting due to previous error"}, {"sha": "474da4a7d1613d2b93a4dd1cec4870fab98d9e72", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-one-is-struct-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -11,7 +11,7 @@\n struct Ref<'a, 'b> { a: &'a u32, b: &'b u32 }\n \n fn foo(mut y: Ref, x: &u32) {\n-    y.b = x;\n+    y.b = x; //~ ERROR lifetime mismatch\n }\n \n fn main() { }"}, {"sha": "66155bec0bb9a8933ea0e107017abc71597a4507", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-one-is-struct-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,7 +3,7 @@ error[E0623]: lifetime mismatch\n    |\n 13 | fn foo(mut y: Ref, x: &u32) {\n    |               ---     ---- these two types are declared with different lifetimes...\n-14 |     y.b = x;\n+14 |     y.b = x; //~ ERROR lifetime mismatch\n    |           ^ ...but data from `x` flows into `y` here\n \n error: aborting due to previous error"}, {"sha": "474da4a7d1613d2b93a4dd1cec4870fab98d9e72", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-one-is-struct-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -11,7 +11,7 @@\n struct Ref<'a, 'b> { a: &'a u32, b: &'b u32 }\n \n fn foo(mut y: Ref, x: &u32) {\n-    y.b = x;\n+    y.b = x; //~ ERROR lifetime mismatch\n }\n \n fn main() { }"}, {"sha": "d47cffbc6222fb4de47cfb6852612fa84a8b5193", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-one-is-struct-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,7 +3,7 @@ error[E0623]: lifetime mismatch\n    |\n 13 | fn foo(mut y: Ref, x: &u32) {\n    |               ---     ---- these two types are declared with different lifetimes...\n-14 |     y.b = x;\n+14 |     y.b = x; //~ ERROR lifetime mismatch\n    |           ^ ...but data from `x` flows into `y` here\n \n error: aborting due to previous error"}, {"sha": "1ffaec7ba00d3cb79d889dc03670ed5428d7e488", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-one-is-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -14,7 +14,7 @@ struct Ref<'a, 'b> {\n }\n \n fn foo(mut x: Ref, y: &u32) {\n-    x.b = y;\n+    x.b = y; //~ ERROR lifetime mismatch\n }\n \n fn main() {}"}, {"sha": "43c85e43e77388dac0fd608c1db0c33bb6a60fe7", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-one-is-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,7 +3,7 @@ error[E0623]: lifetime mismatch\n    |\n 16 | fn foo(mut x: Ref, y: &u32) {\n    |               ---     ---- these two types are declared with different lifetimes...\n-17 |     x.b = y;\n+17 |     x.b = y; //~ ERROR lifetime mismatch\n    |           ^ ...but data from `y` flows into `x` here\n \n error: aborting due to previous error"}, {"sha": "97af35980105d1a9b6fd66b0db393139090d303c", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-return-type-is-anon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -14,7 +14,7 @@ struct Foo {\n \n impl Foo {\n   fn foo<'a>(&self, x: &i32) -> &i32 {\n-    x\n+    x //~ ERROR lifetime mismatch\n   }\n }\n "}, {"sha": "73927f0c1d31f159f015f223e47c198d17759e94", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-return-type-is-anon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -5,7 +5,7 @@ error[E0623]: lifetime mismatch\n    |                        ----     ----\n    |                        |\n    |                        this parameter and the return type are declared with different lifetimes...\n-17 |     x\n+17 |     x //~ ERROR lifetime mismatch\n    |     ^ ...but data from `x` is returned here\n \n error: aborting due to previous error"}, {"sha": "e6f4f0966ca62975499391d1caa56c96528a8647", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-self-is-anon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -14,7 +14,7 @@ struct Foo {\n \n impl Foo {\n     fn foo<'a>(&self, x: &Foo) -> &Foo {\n-        if true { x } else { self }\n+        if true { x } else { self } //~ ERROR lifetime mismatch\n     }\n }\n "}, {"sha": "edb7ce2d6e9f7919ed0346543068b1d74b125f8c", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-self-is-anon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -5,7 +5,7 @@ error[E0623]: lifetime mismatch\n    |                          ----     ----\n    |                          |\n    |                          this parameter and the return type are declared with different lifetimes...\n-17 |         if true { x } else { self }\n+17 |         if true { x } else { self } //~ ERROR lifetime mismatch\n    |                   ^ ...but data from `x` is returned here\n \n error: aborting due to previous error"}, {"sha": "db53acf5afcebbf51a099fb02cbf6812becaf5e8", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-using-fn-items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.rs?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n fn foo(x:fn(&u8, &u8), y: Vec<&u8>, z: &u8) {\n-  y.push(z);\n+  y.push(z); //~ ERROR lifetime mismatch\n }\n \n fn main() { }"}, {"sha": "065b669e6929b456cdc4646762547f5117859569", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-using-fn-items.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71da1c21ebc79f19e749344c8b4e2c13f533872e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.stderr?ref=71da1c21ebc79f19e749344c8b4e2c13f533872e", "patch": "@@ -3,7 +3,7 @@ error[E0623]: lifetime mismatch\n    |\n 10 | fn foo(x:fn(&u8, &u8), y: Vec<&u8>, z: &u8) {\n    |                               ---      --- these two types are declared with different lifetimes...\n-11 |   y.push(z);\n+11 |   y.push(z); //~ ERROR lifetime mismatch\n    |          ^ ...but data from `z` flows into `y` here\n \n error: aborting due to previous error"}]}