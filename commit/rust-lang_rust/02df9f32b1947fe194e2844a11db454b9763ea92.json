{"sha": "02df9f32b1947fe194e2844a11db454b9763ea92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyZGY5ZjMyYjE5NDdmZTE5NGUyODQ0YTExZGI0NTRiOTc2M2VhOTI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-04-30T19:37:17Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-01T23:30:14Z"}, "message": "Remove idempotent lowering test", "tree": {"sha": "d1da79e2fd5d5fecbff18b958315473c9420e007", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1da79e2fd5d5fecbff18b958315473c9420e007"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02df9f32b1947fe194e2844a11db454b9763ea92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02df9f32b1947fe194e2844a11db454b9763ea92", "html_url": "https://github.com/rust-lang/rust/commit/02df9f32b1947fe194e2844a11db454b9763ea92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02df9f32b1947fe194e2844a11db454b9763ea92/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0649942a46d29a4782b4bfcce1c6fe006ad63dc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0649942a46d29a4782b4bfcce1c6fe006ad63dc6", "html_url": "https://github.com/rust-lang/rust/commit/0649942a46d29a4782b4bfcce1c6fe006ad63dc6"}], "stats": {"total": 114, "additions": 0, "deletions": 114}, "files": [{"sha": "6d6186fb9379556014ac48f457a0601bac463972", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 0, "deletions": 114, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/02df9f32b1947fe194e2844a11db454b9763ea92/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02df9f32b1947fe194e2844a11db454b9763ea92/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=02df9f32b1947fe194e2844a11db454b9763ea92", "patch": "@@ -2116,117 +2116,3 @@ fn signal_block_expr(lctx: &LoweringContext,\n                }),\n                attrs)\n }\n-\n-\n-\n-#[cfg(test)]\n-mod test {\n-    use super::*;\n-    use syntax::ast::{self, NodeId, NodeIdAssigner};\n-    use syntax::{parse, codemap};\n-    use syntax::fold::Folder;\n-    use std::cell::Cell;\n-\n-    struct MockAssigner {\n-        next_id: Cell<NodeId>,\n-    }\n-\n-    impl MockAssigner {\n-        fn new() -> MockAssigner {\n-            MockAssigner { next_id: Cell::new(0) }\n-        }\n-    }\n-\n-    trait FakeExtCtxt {\n-        fn call_site(&self) -> codemap::Span;\n-        fn cfg(&self) -> ast::CrateConfig;\n-        fn ident_of(&self, st: &str) -> ast::Ident;\n-        fn name_of(&self, st: &str) -> ast::Name;\n-        fn parse_sess(&self) -> &parse::ParseSess;\n-    }\n-\n-    impl FakeExtCtxt for parse::ParseSess {\n-        fn call_site(&self) -> codemap::Span {\n-            codemap::Span {\n-                lo: codemap::BytePos(0),\n-                hi: codemap::BytePos(0),\n-                expn_id: codemap::NO_EXPANSION,\n-            }\n-        }\n-        fn cfg(&self) -> ast::CrateConfig {\n-            Vec::new()\n-        }\n-        fn ident_of(&self, st: &str) -> ast::Ident {\n-            parse::token::str_to_ident(st)\n-        }\n-        fn name_of(&self, st: &str) -> ast::Name {\n-            parse::token::intern(st)\n-        }\n-        fn parse_sess(&self) -> &parse::ParseSess {\n-            self\n-        }\n-    }\n-\n-    impl NodeIdAssigner for MockAssigner {\n-        fn next_node_id(&self) -> NodeId {\n-            let result = self.next_id.get();\n-            self.next_id.set(result + 1);\n-            result\n-        }\n-\n-        fn peek_node_id(&self) -> NodeId {\n-            self.next_id.get()\n-        }\n-    }\n-\n-    impl Folder for MockAssigner {\n-        fn new_id(&mut self, old_id: NodeId) -> NodeId {\n-            assert_eq!(old_id, ast::DUMMY_NODE_ID);\n-            self.next_node_id()\n-        }\n-    }\n-\n-    #[test]\n-    fn test_preserves_ids() {\n-        let cx = parse::ParseSess::new();\n-        let mut assigner = MockAssigner::new();\n-\n-        let ast_if_let = quote_expr!(&cx,\n-                                     if let Some(foo) = baz {\n-                                         bar(foo);\n-                                     });\n-        let ast_if_let = assigner.fold_expr(ast_if_let);\n-        let ast_while_let = quote_expr!(&cx,\n-                                        while let Some(foo) = baz {\n-                                            bar(foo);\n-                                        });\n-        let ast_while_let = assigner.fold_expr(ast_while_let);\n-        let ast_for = quote_expr!(&cx,\n-                                  for i in 0..10 {\n-                                      for j in 0..10 {\n-                                          foo(i, j);\n-                                      }\n-                                  });\n-        let ast_for = assigner.fold_expr(ast_for);\n-        let ast_in = quote_expr!(&cx, in HEAP { foo() });\n-        let ast_in = assigner.fold_expr(ast_in);\n-\n-        let lctx = LoweringContext::testing_context(&assigner);\n-\n-        let hir1 = lower_expr(&lctx, &ast_if_let);\n-        let hir2 = lower_expr(&lctx, &ast_if_let);\n-        assert!(hir1 == hir2);\n-\n-        let hir1 = lower_expr(&lctx, &ast_while_let);\n-        let hir2 = lower_expr(&lctx, &ast_while_let);\n-        assert!(hir1 == hir2);\n-\n-        let hir1 = lower_expr(&lctx, &ast_for);\n-        let hir2 = lower_expr(&lctx, &ast_for);\n-        assert!(hir1 == hir2);\n-\n-        let hir1 = lower_expr(&lctx, &ast_in);\n-        let hir2 = lower_expr(&lctx, &ast_in);\n-        assert!(hir1 == hir2);\n-    }\n-}"}]}