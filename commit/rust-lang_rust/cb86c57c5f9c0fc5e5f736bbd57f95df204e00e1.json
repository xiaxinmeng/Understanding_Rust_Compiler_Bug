{"sha": "cb86c57c5f9c0fc5e5f736bbd57f95df204e00e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiODZjNTdjNWY5YzBmYzVlNWY3MzZiYmQ1N2Y5NWRmMjA0ZTAwZTE=", "commit": {"author": {"name": "sinkuu", "email": "sinkuupump@gmail.com", "date": "2017-02-21T10:03:50Z"}, "committer": {"name": "sinkuu", "email": "sinkuupump@gmail.com", "date": "2017-02-21T10:03:50Z"}, "message": "Integrate suggestion spans", "tree": {"sha": "cb2eaf0c2fd5afe6f8cb013413abf035e9965aac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb2eaf0c2fd5afe6f8cb013413abf035e9965aac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb86c57c5f9c0fc5e5f736bbd57f95df204e00e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb86c57c5f9c0fc5e5f736bbd57f95df204e00e1", "html_url": "https://github.com/rust-lang/rust/commit/cb86c57c5f9c0fc5e5f736bbd57f95df204e00e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb86c57c5f9c0fc5e5f736bbd57f95df204e00e1/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3516d45d7c03bbecb67a468bf06fa217484b6ecd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3516d45d7c03bbecb67a468bf06fa217484b6ecd", "html_url": "https://github.com/rust-lang/rust/commit/3516d45d7c03bbecb67a468bf06fa217484b6ecd"}], "stats": {"total": 23, "additions": 10, "deletions": 13}, "files": [{"sha": "bc5ecd653c1e8779738a0454611eb483c6adf7d8", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cb86c57c5f9c0fc5e5f736bbd57f95df204e00e1/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb86c57c5f9c0fc5e5f736bbd57f95df204e00e1/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=cb86c57c5f9c0fc5e5f736bbd57f95df204e00e1", "patch": "@@ -132,27 +132,25 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                         db.span_suggestion(input.span,\n                                         &format!(\"consider changing the type to `{}`\", slice_ty),\n                                         slice_ty);\n-                        return;\n+                        return; // `Vec` and `String` cannot be destructured - no need for `*` suggestion\n                     }}\n \n                     if match_type(cx, ty, &paths::STRING) {\n                         db.span_suggestion(input.span,\n                                            \"consider changing the type to `&str`\",\n                                            \"&str\".to_string());\n-                    } else {\n-                        db.span_suggestion(input.span,\n-                                           \"consider taking a reference instead\",\n-                                           format!(\"&{}\", snippet(cx, input.span, \"_\")));\n+                        return;\n                     }\n \n-                    // Suggests adding `*` to dereference the added reference if needed.\n-                    if let Some(spans) = spans_need_deref.get(&defid) {\n-                        let mut spans: Vec<_> = spans.iter().cloned()\n-                            .map(|span| (span, format!(\"*{}\", snippet(cx, span, \"<expr>\"))))\n-                            .collect();\n+                    let mut spans = vec![(input.span, format!(\"&{}\", snippet(cx, input.span, \"_\")))];\n+\n+                    // Suggests adding `*` to dereference the added reference.\n+                    if let Some(deref_span) = spans_need_deref.get(&defid) {\n+                        spans.extend(deref_span.iter().cloned()\n+                                     .map(|span| (span, format!(\"*{}\", snippet(cx, span, \"<expr>\")))));\n                         spans.sort_by_key(|&(span, _)| span);\n-                        multispan_sugg(db, \"...and dereference it here\".to_string(), spans);\n                     }\n+                    multispan_sugg(db, \"consider taking a reference instead\".to_string(), spans);\n                 };\n \n                 span_lint_and_then(cx,"}, {"sha": "88a424a9696ae10b0a4b5878e76065c28a8e6d8a", "filename": "tests/ui/needless_pass_by_value.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb86c57c5f9c0fc5e5f736bbd57f95df204e00e1/tests%2Fui%2Fneedless_pass_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb86c57c5f9c0fc5e5f736bbd57f95df204e00e1/tests%2Fui%2Fneedless_pass_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.stderr?ref=cb86c57c5f9c0fc5e5f736bbd57f95df204e00e1", "patch": "@@ -47,7 +47,6 @@ error: this argument is passed by value, but not consumed in the function body\n    |\n help: consider taking a reference instead\n    | fn test_match(x: &Option<Option<String>>, y: Option<Option<String>>) {\n-help: ...and dereference it here\n    |     match *x {\n \n error: this argument is passed by value, but not consumed in the function body\n@@ -67,7 +66,7 @@ error: this argument is passed by value, but not consumed in the function body\n    |\n help: consider taking a reference instead\n    | fn test_destructure(x: Wrapper, y: &Wrapper, z: Wrapper) {\n-help: ...and dereference it here\n+   |     let Wrapper(s) = z; // moved\n    |     let Wrapper(ref t) = *y; // not moved\n    |     let Wrapper(_) = *y; // still not moved\n "}]}