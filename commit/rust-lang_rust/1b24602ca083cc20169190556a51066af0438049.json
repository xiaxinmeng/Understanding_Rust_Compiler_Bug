{"sha": "1b24602ca083cc20169190556a51066af0438049", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMjQ2MDJjYTA4M2NjMjAxNjkxOTA1NTZhNTEwNjZhZjA0MzgwNDk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-10T23:27:04Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-19T08:29:30Z"}, "message": "Extract leak check into a distinct subroutine.", "tree": {"sha": "2503a4e9a97ef9faa02824c0851a10f6a2ea6153", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2503a4e9a97ef9faa02824c0851a10f6a2ea6153"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b24602ca083cc20169190556a51066af0438049", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b24602ca083cc20169190556a51066af0438049", "html_url": "https://github.com/rust-lang/rust/commit/1b24602ca083cc20169190556a51066af0438049", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b24602ca083cc20169190556a51066af0438049/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "885f7ee12ec568ea2c3094407f8b1a94628b3853", "url": "https://api.github.com/repos/rust-lang/rust/commits/885f7ee12ec568ea2c3094407f8b1a94628b3853", "html_url": "https://github.com/rust-lang/rust/commit/885f7ee12ec568ea2c3094407f8b1a94628b3853"}], "stats": {"total": 50, "additions": 32, "deletions": 18}, "files": [{"sha": "ef8c2f414acf44221029d0ac38ce3c3897228230", "filename": "src/librustc/middle/infer/higher_ranked/mod.rs", "status": "modified", "additions": 32, "deletions": 18, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1b24602ca083cc20169190556a51066af0438049/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b24602ca083cc20169190556a51066af0438049/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=1b24602ca083cc20169190556a51066af0438049", "patch": "@@ -84,30 +84,17 @@ impl<'tcx,C> HigherRankedRelations<'tcx> for C\n \n             // Presuming type comparison succeeds, we need to check\n             // that the skolemized regions do not \"leak\".\n-            let new_vars = self.infcx().region_vars_confined_to_snapshot(snapshot);\n-            for (&skol_br, &skol) in skol_map.iter() {\n-                let tainted = self.infcx().tainted_regions(snapshot, skol);\n-                for tainted_region in tainted.iter() {\n-                    // Each skolemized should only be relatable to itself\n-                    // or new variables:\n-                    match *tainted_region {\n-                        ty::ReInfer(ty::ReVar(ref vid)) => {\n-                            if new_vars.iter().any(|x| x == vid) { continue; }\n-                        }\n-                        _ => {\n-                            if *tainted_region == skol { continue; }\n-                        }\n-                    };\n-\n-                    // A is not as polymorphic as B:\n+            match leak_check(self.infcx(), &skol_map, snapshot) {\n+                Ok(()) => { }\n+                Err((skol_br, tainted_region)) => {\n                     if self.a_is_expected() {\n                         debug!(\"Not as polymorphic!\");\n                         return Err(ty::terr_regions_insufficiently_polymorphic(skol_br,\n-                                                                               *tainted_region));\n+                                                                               tainted_region));\n                     } else {\n                         debug!(\"Overly polymorphic!\");\n                         return Err(ty::terr_regions_overly_polymorphic(skol_br,\n-                                                                       *tainted_region));\n+                                                                       tainted_region));\n                     }\n                 }\n             }\n@@ -548,3 +535,30 @@ fn skolemize_regions<'a,'tcx,HR>(infcx: &InferCtxt<'a,'tcx>,\n         skol\n     })\n }\n+\n+fn leak_check<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,\n+                       skol_map: &FnvHashMap<ty::BoundRegion,ty::Region>,\n+                       snapshot: &CombinedSnapshot)\n+                       -> Result<(),(ty::BoundRegion,ty::Region)>\n+{\n+    let new_vars = infcx.region_vars_confined_to_snapshot(snapshot);\n+    for (&skol_br, &skol) in skol_map.iter() {\n+        let tainted = infcx.tainted_regions(snapshot, skol);\n+        for &tainted_region in tainted.iter() {\n+            // Each skolemized should only be relatable to itself\n+            // or new variables:\n+            match tainted_region {\n+                ty::ReInfer(ty::ReVar(vid)) => {\n+                    if new_vars.iter().any(|&x| x == vid) { continue; }\n+                }\n+                _ => {\n+                    if tainted_region == skol { continue; }\n+                }\n+            };\n+\n+            // A is not as polymorphic as B:\n+            return Err((skol_br, tainted_region));\n+        }\n+    }\n+    Ok(())\n+}"}]}