{"sha": "cbac7815fe49c8ed9c6ff2564670b186d5b3d9db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiYWM3ODE1ZmU0OWM4ZWQ5YzZmZjI1NjQ2NzBiMTg2ZDViM2Q5ZGI=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-07-13T17:27:22Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-08-01T15:27:57Z"}, "message": "More questionmarks in doctests", "tree": {"sha": "677df70ad97b4bfe693e79f3c9a637c8b7d70288", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/677df70ad97b4bfe693e79f3c9a637c8b7d70288"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbac7815fe49c8ed9c6ff2564670b186d5b3d9db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbac7815fe49c8ed9c6ff2564670b186d5b3d9db", "html_url": "https://github.com/rust-lang/rust/commit/cbac7815fe49c8ed9c6ff2564670b186d5b3d9db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbac7815fe49c8ed9c6ff2564670b186d5b3d9db/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec30876f30082a7b32876bd78a8da01f11dcde1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec30876f30082a7b32876bd78a8da01f11dcde1e", "html_url": "https://github.com/rust-lang/rust/commit/ec30876f30082a7b32876bd78a8da01f11dcde1e"}], "stats": {"total": 43, "additions": 27, "deletions": 16}, "files": [{"sha": "ed8ef8df37ce345b206d8ede635430524c94578e", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/cbac7815fe49c8ed9c6ff2564670b186d5b3d9db/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbac7815fe49c8ed9c6ff2564670b186d5b3d9db/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=cbac7815fe49c8ed9c6ff2564670b186d5b3d9db", "patch": "@@ -353,11 +353,15 @@ macro_rules! r#try {\n /// use std::fmt::Write as FmtWrite;\n /// use std::io::Write as IoWrite;\n ///\n-/// let mut s = String::new();\n-/// let mut v = Vec::new();\n-/// write!(&mut s, \"{} {}\", \"abc\", 123).unwrap(); // uses fmt::Write::write_fmt\n-/// write!(&mut v, \"s = {:?}\", s).unwrap(); // uses io::Write::write_fmt\n-/// assert_eq!(v, b\"s = \\\"abc 123\\\"\");\n+/// fn main() -> Result<(), Box<dyn std::error::Error>> {\n+///     let mut s = String::new();\n+///     let mut v = Vec::new();\n+///\n+///     write!(&mut s, \"{} {}\", \"abc\", 123)?; // uses fmt::Write::write_fmt\n+///     write!(&mut v, \"s = {:?}\", s)?; // uses io::Write::write_fmt\n+///     assert_eq!(v, b\"s = \\\"abc 123\\\"\");\n+///     Ok(())\n+/// }\n /// ```\n ///\n /// Note: This macro can be used in `no_std` setups as well.\n@@ -399,14 +403,17 @@ macro_rules! write {\n /// # Examples\n ///\n /// ```\n-/// use std::io::Write;\n+/// use std::io::{Write, Result};\n ///\n-/// let mut w = Vec::new();\n-/// writeln!(&mut w).unwrap();\n-/// writeln!(&mut w, \"test\").unwrap();\n-/// writeln!(&mut w, \"formatted {}\", \"arguments\").unwrap();\n+/// fn main() -> Result<()> {\n+///     let mut w = Vec::new();\n+///     writeln!(&mut w)?;\n+///     writeln!(&mut w, \"test\")?;\n+///     writeln!(&mut w, \"formatted {}\", \"arguments\")?;\n ///\n-/// assert_eq!(&w[..], \"\\ntest\\nformatted arguments\\n\".as_bytes());\n+///     assert_eq!(&w[..], \"\\ntest\\nformatted arguments\\n\".as_bytes());\n+///     Ok(())\n+/// }\n /// ```\n ///\n /// A module can import both `std::fmt::Write` and `std::io::Write` and call `write!` on objects\n@@ -417,11 +424,15 @@ macro_rules! write {\n /// use std::fmt::Write as FmtWrite;\n /// use std::io::Write as IoWrite;\n ///\n-/// let mut s = String::new();\n-/// let mut v = Vec::new();\n-/// writeln!(&mut s, \"{} {}\", \"abc\", 123).unwrap(); // uses fmt::Write::write_fmt\n-/// writeln!(&mut v, \"s = {:?}\", s).unwrap(); // uses io::Write::write_fmt\n-/// assert_eq!(v, b\"s = \\\"abc 123\\\\n\\\"\\n\");\n+/// fn main() -> Result<(), Box<dyn std::error::Error>> {\n+///     let mut s = String::new();\n+///     let mut v = Vec::new();\n+///\n+///     writeln!(&mut s, \"{} {}\", \"abc\", 123)?; // uses fmt::Write::write_fmt\n+///     writeln!(&mut v, \"s = {:?}\", s)?; // uses io::Write::write_fmt\n+///     assert_eq!(v, b\"s = \\\"abc 123\\\\n\\\"\\n\");\n+///     Ok(())\n+/// }\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}