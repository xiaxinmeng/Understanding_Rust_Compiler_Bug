{"sha": "e94ef5cc769db15492e2d004e88a2114b307e33a", "node_id": "C_kwDOAAsO6NoAKGU5NGVmNWNjNzY5ZGIxNTQ5MmUyZDAwNGU4OGEyMTE0YjMwN2UzM2E", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-07-26T22:28:20Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-07-26T22:33:13Z"}, "message": "rustdoc: remove Clean trait impls for ty::OutlivesPredicate", "tree": {"sha": "653e8e093a1db606d75311be3d6ff62c21311176", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/653e8e093a1db606d75311be3d6ff62c21311176"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e94ef5cc769db15492e2d004e88a2114b307e33a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e94ef5cc769db15492e2d004e88a2114b307e33a", "html_url": "https://github.com/rust-lang/rust/commit/e94ef5cc769db15492e2d004e88a2114b307e33a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e94ef5cc769db15492e2d004e88a2114b307e33a/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "791beb7a5c7b36a61d9820943c9566425ec91377", "url": "https://api.github.com/repos/rust-lang/rust/commits/791beb7a5c7b36a61d9820943c9566425ec91377", "html_url": "https://github.com/rust-lang/rust/commit/791beb7a5c7b36a61d9820943c9566425ec91377"}], "stats": {"total": 56, "additions": 27, "deletions": 29}, "files": [{"sha": "2ee59663ec34442270b47310b97baeb526092883", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 27, "deletions": 29, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e94ef5cc769db15492e2d004e88a2114b307e33a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94ef5cc769db15492e2d004e88a2114b307e33a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e94ef5cc769db15492e2d004e88a2114b307e33a", "patch": "@@ -328,8 +328,8 @@ impl<'tcx> Clean<'tcx, Option<WherePredicate>> for ty::Predicate<'tcx> {\n         let bound_predicate = self.kind();\n         match bound_predicate.skip_binder() {\n             ty::PredicateKind::Trait(pred) => bound_predicate.rebind(pred).clean(cx),\n-            ty::PredicateKind::RegionOutlives(pred) => pred.clean(cx),\n-            ty::PredicateKind::TypeOutlives(pred) => pred.clean(cx),\n+            ty::PredicateKind::RegionOutlives(pred) => clean_region_outlives_predicate(pred, cx),\n+            ty::PredicateKind::TypeOutlives(pred) => clean_type_outlives_predicate(pred, cx),\n             ty::PredicateKind::Projection(pred) => Some(clean_projection_predicate(pred, cx)),\n             ty::PredicateKind::ConstEvaluatable(..) => None,\n             ty::PredicateKind::WellFormed(..) => None,\n@@ -362,39 +362,37 @@ impl<'tcx> Clean<'tcx, Option<WherePredicate>> for ty::PolyTraitPredicate<'tcx>\n     }\n }\n \n-impl<'tcx> Clean<'tcx, Option<WherePredicate>>\n-    for ty::OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>\n-{\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Option<WherePredicate> {\n-        let ty::OutlivesPredicate(a, b) = self;\n-\n-        if a.is_empty() && b.is_empty() {\n-            return None;\n-        }\n+fn clean_region_outlives_predicate<'tcx>(\n+    pred: ty::OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>,\n+    cx: &mut DocContext<'tcx>,\n+) -> Option<WherePredicate> {\n+    let ty::OutlivesPredicate(a, b) = pred;\n \n-        Some(WherePredicate::RegionPredicate {\n-            lifetime: a.clean(cx).expect(\"failed to clean lifetime\"),\n-            bounds: vec![GenericBound::Outlives(b.clean(cx).expect(\"failed to clean bounds\"))],\n-        })\n+    if a.is_empty() && b.is_empty() {\n+        return None;\n     }\n-}\n \n-impl<'tcx> Clean<'tcx, Option<WherePredicate>>\n-    for ty::OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>\n-{\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Option<WherePredicate> {\n-        let ty::OutlivesPredicate(ty, lt) = self;\n+    Some(WherePredicate::RegionPredicate {\n+        lifetime: a.clean(cx).expect(\"failed to clean lifetime\"),\n+        bounds: vec![GenericBound::Outlives(b.clean(cx).expect(\"failed to clean bounds\"))],\n+    })\n+}\n \n-        if lt.is_empty() {\n-            return None;\n-        }\n+fn clean_type_outlives_predicate<'tcx>(\n+    pred: ty::OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>,\n+    cx: &mut DocContext<'tcx>,\n+) -> Option<WherePredicate> {\n+    let ty::OutlivesPredicate(ty, lt) = pred;\n \n-        Some(WherePredicate::BoundPredicate {\n-            ty: clean_middle_ty(*ty, cx, None),\n-            bounds: vec![GenericBound::Outlives(lt.clean(cx).expect(\"failed to clean lifetimes\"))],\n-            bound_params: Vec::new(),\n-        })\n+    if lt.is_empty() {\n+        return None;\n     }\n+\n+    Some(WherePredicate::BoundPredicate {\n+        ty: clean_middle_ty(ty, cx, None),\n+        bounds: vec![GenericBound::Outlives(lt.clean(cx).expect(\"failed to clean lifetimes\"))],\n+        bound_params: Vec::new(),\n+    })\n }\n \n impl<'tcx> Clean<'tcx, Term> for ty::Term<'tcx> {"}]}