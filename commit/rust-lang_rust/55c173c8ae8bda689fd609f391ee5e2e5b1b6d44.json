{"sha": "55c173c8ae8bda689fd609f391ee5e2e5b1b6d44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YzE3M2M4YWU4YmRhNjg5ZmQ2MDlmMzkxZWU1ZTJlNWIxYjZkNDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-25T23:23:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-25T23:23:09Z"}, "message": "Auto merge of #57367 - petrochenkov:unrestab, r=Centril\n\nStabilize `unrestricted_attribute_tokens`\n\nIn accordance with a plan described in https://internals.rust-lang.org/t/unrestricted-attribute-tokens-feature-status/8561/3.\n\nDelimited non-macro non-builtin attributes now support the same syntax as macro attributes:\n```\nPATH\nPATH `(` TOKEN_STREAM `)`\nPATH `[` TOKEN_STREAM `]`\nPATH `{` TOKEN_STREAM `}`\n```\nSuch attributes mostly serve as inert proc macro helpers or tool attributes.\nTo some extent these attributes are de-facto stable due to a hole in feature gate checking (feature gating is done too late - after macro expansion.)\nSo if macro *removes* such helper attributes during expansion (and it must remove them, unless it's a derive macro), then the code will work on stable.\n\nKey-value non-macro non-builtin attributes are now restricted to bare minimum required to support what we support on stable - unsuffixed literals (https://github.com/rust-lang/rust/issues/34981).\n```\nPATH `=` LITERAL\n```\n(Key-value macro attributes are not supported at all right now.)\nCrater run in https://github.com/rust-lang/rust/pull/57321 found no regressions for this change.\nThere are multiple possible ways to extend key-value attributes (https://github.com/rust-lang/rust/pull/57321#issuecomment-451574065), but I'd expect an RFC for that and it's not a pressing enough issue to block stabilization of delimited attributes.\n\nBuilt-in attributes are still restricted to the \"classic\" meta-item syntax, nothing changes here.\nhttps://github.com/rust-lang/rust/pull/57321 goes further and adds some additional restrictions (more consistent input checking) to built-in attributes.\n\nCloses https://github.com/rust-lang/rust/issues/55208", "tree": {"sha": "5ca60dab865a318838d231b43402536ebbb46954", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ca60dab865a318838d231b43402536ebbb46954"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44", "html_url": "https://github.com/rust-lang/rust/commit/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00aae71f503b1ab592f48de47dd30912f3858748", "url": "https://api.github.com/repos/rust-lang/rust/commits/00aae71f503b1ab592f48de47dd30912f3858748", "html_url": "https://github.com/rust-lang/rust/commit/00aae71f503b1ab592f48de47dd30912f3858748"}, {"sha": "eccc19996b1e6a38568544e0be3cfe971caa12eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/eccc19996b1e6a38568544e0be3cfe971caa12eb", "html_url": "https://github.com/rust-lang/rust/commit/eccc19996b1e6a38568544e0be3cfe971caa12eb"}], "stats": {"total": 195, "additions": 108, "deletions": 87}, "files": [{"sha": "63688e70c45cb5dcc8a65d7a2fd8bf983b09184c", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=55c173c8ae8bda689fd609f391ee5e2e5b1b6d44", "patch": "@@ -123,7 +123,6 @@\n #![feature(abi_unadjusted)]\n #![feature(adx_target_feature)]\n #![feature(maybe_uninit, maybe_uninit_slice, maybe_uninit_array)]\n-#![feature(unrestricted_attribute_tokens)]\n #![feature(external_doc)]\n \n #[prelude_import]"}, {"sha": "cc1953e69d4ca107fc833f3a6acb1e73e9527a6e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=55c173c8ae8bda689fd609f391ee5e2e5b1b6d44", "patch": "@@ -21,8 +21,9 @@ use crate::early_buffered_lints::BufferedEarlyLintId;\n use crate::source_map::Spanned;\n use crate::edition::{ALL_EDITIONS, Edition};\n use crate::visit::{self, FnKind, Visitor};\n-use crate::parse::ParseSess;\n+use crate::parse::{token, ParseSess};\n use crate::symbol::Symbol;\n+use crate::tokenstream::TokenTree;\n \n use errors::{DiagnosticBuilder, Handler};\n use rustc_data_structures::fx::FxHashMap;\n@@ -431,9 +432,6 @@ declare_features! (\n     // Added for testing E0705; perma-unstable.\n     (active, test_2018_feature, \"1.31.0\", Some(0), Some(Edition::Edition2018)),\n \n-    // support for arbitrary delimited token streams in non-macro attributes\n-    (active, unrestricted_attribute_tokens, \"1.30.0\", Some(55208), None),\n-\n     // Allows unsized rvalues at arguments and parameters.\n     (active, unsized_locals, \"1.30.0\", Some(48055), None),\n \n@@ -700,6 +698,8 @@ declare_features! (\n     (accepted, cfg_target_vendor, \"1.33.0\", Some(29718), None),\n     // `extern crate self as foo;` puts local crate root into extern prelude under name `foo`.\n     (accepted, extern_crate_self, \"1.34.0\", Some(56409), None),\n+    // support for arbitrary delimited token streams in non-macro attributes\n+    (accepted, unrestricted_attribute_tokens, \"1.34.0\", Some(55208), None),\n );\n \n // If you change this, please modify `src/doc/unstable-book` as well. You must\n@@ -1660,13 +1660,9 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n         match BUILTIN_ATTRIBUTES.iter().find(|(name, ..)| attr.path == name) {\n             Some(&(name, _, template, _)) => self.check_builtin_attribute(attr, name, template),\n-            None => if !self.context.features.unrestricted_attribute_tokens {\n-                // Unfortunately, `parse_meta` cannot be called speculatively\n-                // because it can report errors by itself, so we have to call it\n-                // only if the feature is disabled.\n-                if let Err(mut err) = attr.parse_meta(self.context.parse_sess) {\n-                    err.help(\"try enabling `#![feature(unrestricted_attribute_tokens)]`\").emit()\n-                }\n+            None => if let Some(TokenTree::Token(_, token::Eq)) = attr.tokens.trees().next() {\n+                // All key-value attributes are restricted to meta-item syntax.\n+                attr.parse_meta(self.context.parse_sess).map_err(|mut err| err.emit()).ok();\n             }\n         }\n     }"}, {"sha": "e7937f57002f3f8cfd4efd61f663c0ce0f805f5f", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=55c173c8ae8bda689fd609f391ee5e2e5b1b6d44", "patch": "@@ -158,11 +158,21 @@ impl<'a> Parser<'a> {\n                    self.parse_token_tree().into()\n             } else if self.eat(&token::Eq) {\n                 let eq = TokenTree::Token(self.prev_span, token::Eq);\n-                let tree = match self.token {\n-                    token::CloseDelim(_) | token::Eof => self.unexpected()?,\n-                    _ => self.parse_token_tree(),\n+                let mut is_interpolated_expr = false;\n+                if let token::Interpolated(nt) = &self.token {\n+                    if let token::NtExpr(..) = **nt {\n+                        is_interpolated_expr = true;\n+                    }\n+                }\n+                let tokens = if is_interpolated_expr {\n+                    // We need to accept arbitrary interpolated expressions to continue\n+                    // supporting things like `doc = $expr` that work on stable.\n+                    // Non-literal interpolated expressions are rejected after expansion.\n+                    self.parse_token_tree().into()\n+                } else {\n+                    self.parse_unsuffixed_lit()?.tokens()\n                 };\n-                TokenStream::new(vec![eq.into(), tree.into()])\n+                TokenStream::from_streams(vec![eq.into(), tokens])\n             } else {\n                 TokenStream::empty()\n             };"}, {"sha": "4ce308d015c00284589b467376fe3c3ce9737a61", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=55c173c8ae8bda689fd609f391ee5e2e5b1b6d44", "patch": "@@ -254,7 +254,7 @@ impl TokenStream {\n         }\n     }\n \n-    fn from_streams(mut streams: Vec<TokenStream>) -> TokenStream {\n+    pub(crate) fn from_streams(mut streams: Vec<TokenStream>) -> TokenStream {\n         match streams.len() {\n             0 => TokenStream::empty(),\n             1 => streams.pop().unwrap(),"}, {"sha": "da67534364b65148e676605efaa53d26637bdeae", "filename": "src/test/run-pass/proc-macro/derive-b.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Frun-pass%2Fproc-macro%2Fderive-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Frun-pass%2Fproc-macro%2Fderive-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fderive-b.rs?ref=55c173c8ae8bda689fd609f391ee5e2e5b1b6d44", "patch": "@@ -1,7 +1,5 @@\n // aux-build:derive-b.rs\n \n-#![feature(unrestricted_attribute_tokens)]\n-\n extern crate derive_b;\n \n #[derive(Debug, PartialEq, derive_b::B, Eq, Copy, Clone)]"}, {"sha": "6aacb9d572aea670dcefebda3d0e89fb11125e25", "filename": "src/test/ui/attr-eq-token-tree.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fattr-eq-token-tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fattr-eq-token-tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-eq-token-tree.rs?ref=55c173c8ae8bda689fd609f391ee5e2e5b1b6d44", "patch": "@@ -1,6 +1,4 @@\n-// compile-pass\n+#![feature(custom_attribute)]\n \n-#![feature(custom_attribute, unrestricted_attribute_tokens)]\n-\n-#[my_attr = !] // OK under feature gate\n+#[my_attr = !] //~ ERROR unexpected token: `!`\n fn main() {}"}, {"sha": "57d6a4e0f16a27d07b3a6aca3d6a6038785f4767", "filename": "src/test/ui/attr-eq-token-tree.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fattr-eq-token-tree.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fattr-eq-token-tree.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-eq-token-tree.stderr?ref=55c173c8ae8bda689fd609f391ee5e2e5b1b6d44", "patch": "@@ -0,0 +1,8 @@\n+error: unexpected token: `!`\n+  --> $DIR/attr-eq-token-tree.rs:3:11\n+   |\n+LL | #[my_attr = !] //~ ERROR unexpected token: `!`\n+   |           ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "181c8592c547bce9e406c6dfab815471d3671dc3", "filename": "src/test/ui/feature-gates/feature-gate-unrestricted-attribute-tokens.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/00aae71f503b1ab592f48de47dd30912f3858748/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unrestricted-attribute-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00aae71f503b1ab592f48de47dd30912f3858748/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unrestricted-attribute-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unrestricted-attribute-tokens.rs?ref=00aae71f503b1ab592f48de47dd30912f3858748", "patch": "@@ -1,7 +0,0 @@\n-#![feature(custom_attribute)]\n-\n-#[my_attr(a b c d)]\n-//~^ ERROR expected one of `(`, `)`, `,`, `::`, or `=`, found `b`\n-//~| ERROR expected one of `(`, `)`, `,`, `::`, or `=`, found `c`\n-//~| ERROR expected one of `(`, `)`, `,`, `::`, or `=`, found `d`\n-fn main() {}"}, {"sha": "1ddf2ff6d640bb11baa813f30aa96dd8a506cb5c", "filename": "src/test/ui/feature-gates/feature-gate-unrestricted-attribute-tokens.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/00aae71f503b1ab592f48de47dd30912f3858748/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unrestricted-attribute-tokens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00aae71f503b1ab592f48de47dd30912f3858748/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unrestricted-attribute-tokens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unrestricted-attribute-tokens.stderr?ref=00aae71f503b1ab592f48de47dd30912f3858748", "patch": "@@ -1,20 +0,0 @@\n-error: expected one of `(`, `)`, `,`, `::`, or `=`, found `b`\n-  --> $DIR/feature-gate-unrestricted-attribute-tokens.rs:3:13\n-   |\n-LL | #[my_attr(a b c d)]\n-   |             ^ expected one of `(`, `)`, `,`, `::`, or `=` here\n-\n-error: expected one of `(`, `)`, `,`, `::`, or `=`, found `c`\n-  --> $DIR/feature-gate-unrestricted-attribute-tokens.rs:3:15\n-   |\n-LL | #[my_attr(a b c d)]\n-   |               ^ expected one of `(`, `)`, `,`, `::`, or `=` here\n-\n-error: expected one of `(`, `)`, `,`, `::`, or `=`, found `d`\n-  --> $DIR/feature-gate-unrestricted-attribute-tokens.rs:3:17\n-   |\n-LL | #[my_attr(a b c d)]\n-   |                 ^ expected one of `(`, `)`, `,`, `::`, or `=` here\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "f580dfa8e34ed2ff055295d38ffc09aa45c57feb", "filename": "src/test/ui/macros/macro-attribute.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fmacros%2Fmacro-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fmacros%2Fmacro-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-attribute.rs?ref=55c173c8ae8bda689fd609f391ee5e2e5b1b6d44", "patch": "@@ -1,4 +1,2 @@\n-#![feature(unrestricted_attribute_tokens)]\n-\n-#[doc = $not_there] //~ ERROR expected `]`, found `not_there`\n+#[doc = $not_there] //~ ERROR unexpected token: `$`\n fn main() { }"}, {"sha": "7314e483348935c251b22bcd00cfab4b5e71cc73", "filename": "src/test/ui/macros/macro-attribute.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fmacros%2Fmacro-attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fmacros%2Fmacro-attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-attribute.stderr?ref=55c173c8ae8bda689fd609f391ee5e2e5b1b6d44", "patch": "@@ -1,8 +1,8 @@\n-error: expected `]`, found `not_there`\n-  --> $DIR/macro-attribute.rs:3:10\n+error: unexpected token: `$`\n+  --> $DIR/macro-attribute.rs:1:7\n    |\n-LL | #[doc = $not_there] //~ ERROR expected `]`, found `not_there`\n-   |          ^^^^^^^^^ expected `]`\n+LL | #[doc = $not_there] //~ ERROR unexpected token: `$`\n+   |       ^\n \n error: aborting due to previous error\n "}, {"sha": "e452435968baca28a15b1c4ec1e705da02c8a4cc", "filename": "src/test/ui/malformed/malformed-interpolated.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.rs?ref=55c173c8ae8bda689fd609f391ee5e2e5b1b6d44", "patch": "@@ -0,0 +1,18 @@\n+#![feature(custom_attribute)]\n+\n+macro_rules! check {\n+    ($expr: expr) => (\n+        #[my_attr = $expr] //~ ERROR suffixed literals are not allowed in attributes\n+                           //~| ERROR unexpected token: `-0`\n+                           //~| ERROR unexpected token: `0 + 0`\n+        use main as _;\n+    );\n+}\n+\n+check!(\"0\"); // OK\n+check!(0); // OK\n+check!(0u8); // ERROR, see above\n+check!(-0); // ERROR, see above\n+check!(0 + 0); // ERROR, see above\n+\n+fn main() {}"}, {"sha": "24aa590c4d903408b0675cb704f9eadb4279cace", "filename": "src/test/ui/malformed/malformed-interpolated.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.stderr?ref=55c173c8ae8bda689fd609f391ee5e2e5b1b6d44", "patch": "@@ -0,0 +1,31 @@\n+error: suffixed literals are not allowed in attributes\n+  --> $DIR/malformed-interpolated.rs:5:21\n+   |\n+LL |         #[my_attr = $expr] //~ ERROR suffixed literals are not allowed in attributes\n+   |                     ^^^^^\n+...\n+LL | check!(0u8); // ERROR, see above\n+   | ------------ in this macro invocation\n+   |\n+   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+\n+error: unexpected token: `-0`\n+  --> $DIR/malformed-interpolated.rs:5:19\n+   |\n+LL |         #[my_attr = $expr] //~ ERROR suffixed literals are not allowed in attributes\n+   |                   ^\n+...\n+LL | check!(-0); // ERROR, see above\n+   | ----------- in this macro invocation\n+\n+error: unexpected token: `0 + 0`\n+  --> $DIR/malformed-interpolated.rs:5:19\n+   |\n+LL |         #[my_attr = $expr] //~ ERROR suffixed literals are not allowed in attributes\n+   |                   ^\n+...\n+LL | check!(0 + 0); // ERROR, see above\n+   | -------------- in this macro invocation\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "f8bcec78650e87c6d129c2d7098b26bacf63b8de", "filename": "src/test/ui/marker_trait_attr/marker-attribute-with-values.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-with-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-with-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-with-values.rs?ref=55c173c8ae8bda689fd609f391ee5e2e5b1b6d44", "patch": "@@ -1,5 +1,4 @@\n #![feature(marker_trait_attr)]\n-#![feature(unrestricted_attribute_tokens)]\n \n #[marker(always)]\n trait Marker1 {}\n@@ -9,8 +8,8 @@ trait Marker1 {}\n trait Marker2 {}\n //~^^ ERROR attribute must be of the form\n \n-#[marker(key = value)]\n+#[marker(key = \"value\")]\n trait Marker3 {}\n-//~^^ ERROR expected unsuffixed literal or identifier, found value\n+//~^^ ERROR attribute must be of the form `#[marker]`\n \n fn main() {}"}, {"sha": "2b31dcb4760a01ff44eef8579d859bc744171d80", "filename": "src/test/ui/marker_trait_attr/marker-attribute-with-values.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-with-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-with-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-with-values.stderr?ref=55c173c8ae8bda689fd609f391ee5e2e5b1b6d44", "patch": "@@ -1,20 +1,20 @@\n error: attribute must be of the form `#[marker]`\n-  --> $DIR/marker-attribute-with-values.rs:4:1\n+  --> $DIR/marker-attribute-with-values.rs:3:1\n    |\n LL | #[marker(always)]\n    | ^^^^^^^^^^^^^^^^^\n \n error: attribute must be of the form `#[marker]`\n-  --> $DIR/marker-attribute-with-values.rs:8:1\n+  --> $DIR/marker-attribute-with-values.rs:7:1\n    |\n LL | #[marker(\"never\")]\n    | ^^^^^^^^^^^^^^^^^^\n \n-error: expected unsuffixed literal or identifier, found value\n-  --> $DIR/marker-attribute-with-values.rs:12:10\n+error: attribute must be of the form `#[marker]`\n+  --> $DIR/marker-attribute-with-values.rs:11:1\n    |\n-LL | #[marker(key = value)]\n-   |          ^^^\n+LL | #[marker(key = \"value\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "36e566b5aa41a10b3192595b384090e4b7e252d7", "filename": "src/test/ui/parser/attr-bad-meta-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fparser%2Fattr-bad-meta-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fparser%2Fattr-bad-meta-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-bad-meta-2.stderr?ref=55c173c8ae8bda689fd609f391ee5e2e5b1b6d44", "patch": "@@ -1,8 +1,8 @@\n error: unexpected token: `]`\n-  --> $DIR/attr-bad-meta-2.rs:1:9\n+  --> $DIR/attr-bad-meta-2.rs:1:8\n    |\n LL | #[path =] //~ ERROR unexpected token: `]`\n-   |         ^ unexpected token after this\n+   |        ^\n \n error: aborting due to previous error\n "}, {"sha": "8001977f5a39f69fe97103dc6558ba0868dade81", "filename": "src/test/ui/parser/attr-bad-meta.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fparser%2Fattr-bad-meta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fparser%2Fattr-bad-meta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-bad-meta.rs?ref=55c173c8ae8bda689fd609f391ee5e2e5b1b6d44", "patch": "@@ -1,4 +1,2 @@\n-#![feature(unrestricted_attribute_tokens)]\n-\n #[path*] //~ ERROR expected one of `(`, `::`, `=`, `[`, `]`, or `{`, found `*`\n mod m {}"}, {"sha": "693da95017d2e5f540a7ce38ef6aebe1cdbc7aca", "filename": "src/test/ui/parser/attr-bad-meta.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fparser%2Fattr-bad-meta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fparser%2Fattr-bad-meta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-bad-meta.stderr?ref=55c173c8ae8bda689fd609f391ee5e2e5b1b6d44", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `(`, `::`, `=`, `[`, `]`, or `{`, found `*`\n-  --> $DIR/attr-bad-meta.rs:3:7\n+  --> $DIR/attr-bad-meta.rs:1:7\n    |\n LL | #[path*] //~ ERROR expected one of `(`, `::`, `=`, `[`, `]`, or `{`, found `*`\n    |       ^ expected one of `(`, `::`, `=`, `[`, `]`, or `{` here"}, {"sha": "062053453ee42760684a576f8d15e568752fa407", "filename": "src/test/ui/proc-macro/proc-macro-attributes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-attributes.rs?ref=55c173c8ae8bda689fd609f391ee5e2e5b1b6d44", "patch": "@@ -8,7 +8,6 @@ extern crate derive_b;\n #[B(D)] //~ ERROR `B` is ambiguous\n #[B(E = \"foo\")] //~ ERROR `B` is ambiguous\n #[B(arbitrary tokens)] //~ ERROR `B` is ambiguous\n-                       //~^ ERROR expected one of `(`, `)`, `,`, `::`, or `=`, found `tokens`\n #[derive(B)]\n struct B;\n "}, {"sha": "a5ec787ac67e6cf95a95307582eb9857eeb823f9", "filename": "src/test/ui/proc-macro/proc-macro-attributes.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-attributes.stderr?ref=55c173c8ae8bda689fd609f391ee5e2e5b1b6d44", "patch": "@@ -13,7 +13,7 @@ LL | #[B] //~ ERROR `B` is ambiguous\n    |   ^ ambiguous name\n    |\n note: `B` could refer to the derive helper attribute defined here\n-  --> $DIR/proc-macro-attributes.rs:12:10\n+  --> $DIR/proc-macro-attributes.rs:11:10\n    |\n LL | #[derive(B)]\n    |          ^\n@@ -30,7 +30,7 @@ LL | #[B(D)] //~ ERROR `B` is ambiguous\n    |   ^ ambiguous name\n    |\n note: `B` could refer to the derive helper attribute defined here\n-  --> $DIR/proc-macro-attributes.rs:12:10\n+  --> $DIR/proc-macro-attributes.rs:11:10\n    |\n LL | #[derive(B)]\n    |          ^\n@@ -47,7 +47,7 @@ LL | #[B(E = \"foo\")] //~ ERROR `B` is ambiguous\n    |   ^ ambiguous name\n    |\n note: `B` could refer to the derive helper attribute defined here\n-  --> $DIR/proc-macro-attributes.rs:12:10\n+  --> $DIR/proc-macro-attributes.rs:11:10\n    |\n LL | #[derive(B)]\n    |          ^\n@@ -64,7 +64,7 @@ LL | #[B(arbitrary tokens)] //~ ERROR `B` is ambiguous\n    |   ^ ambiguous name\n    |\n note: `B` could refer to the derive helper attribute defined here\n-  --> $DIR/proc-macro-attributes.rs:12:10\n+  --> $DIR/proc-macro-attributes.rs:11:10\n    |\n LL | #[derive(B)]\n    |          ^\n@@ -74,13 +74,7 @@ note: `B` could also refer to the derive macro imported here\n LL | #[macro_use]\n    | ^^^^^^^^^^^^\n \n-error: expected one of `(`, `)`, `,`, `::`, or `=`, found `tokens`\n-  --> $DIR/proc-macro-attributes.rs:10:15\n-   |\n-LL | #[B(arbitrary tokens)] //~ ERROR `B` is ambiguous\n-   |               ^^^^^^ expected one of `(`, `)`, `,`, `::`, or `=` here\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors occurred: E0658, E0659.\n For more information about an error, try `rustc --explain E0658`."}, {"sha": "af6bfa08aaa942816d021297a60dc1ae334c9ebe", "filename": "src/test/ui/proc-macro/proc-macro-gates.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.rs?ref=55c173c8ae8bda689fd609f391ee5e2e5b1b6d44", "patch": "@@ -19,7 +19,7 @@ mod _test2_inner {\n           //~| ERROR: non-builtin inner attributes are unstable\n }\n \n-#[a = y] //~ ERROR: must only be followed by a delimiter token\n+#[a = \"y\"] //~ ERROR: must only be followed by a delimiter token\n fn _test3() {}\n \n fn attrs() {"}, {"sha": "abfcf09bfaf6c54ab31adea54b1a636d0f074630", "filename": "src/test/ui/proc-macro/proc-macro-gates.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.stderr?ref=55c173c8ae8bda689fd609f391ee5e2e5b1b6d44", "patch": "@@ -33,8 +33,8 @@ LL |     #![a] //~ ERROR: custom attributes cannot be applied to modules\n error: custom attribute invocations must be of the form #[foo] or #[foo(..)], the macro name must only be followed by a delimiter token\n   --> $DIR/proc-macro-gates.rs:22:1\n    |\n-LL | #[a = y] //~ ERROR: must only be followed by a delimiter token\n-   | ^^^^^^^^\n+LL | #[a = \"y\"] //~ ERROR: must only be followed by a delimiter token\n+   | ^^^^^^^^^^\n \n error[E0658]: custom attributes cannot be applied to statements (see issue #54727)\n   --> $DIR/proc-macro-gates.rs:31:5"}, {"sha": "4798f7b396cd6fda36c58d38aeff5381053f251c", "filename": "src/test/ui/unrestricted-attribute-tokens.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Funrestricted-attribute-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c173c8ae8bda689fd609f391ee5e2e5b1b6d44/src%2Ftest%2Fui%2Funrestricted-attribute-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funrestricted-attribute-tokens.rs?ref=55c173c8ae8bda689fd609f391ee5e2e5b1b6d44", "patch": "@@ -1,6 +1,8 @@\n // compile-pass\n \n-#![feature(custom_attribute, unrestricted_attribute_tokens)]\n+#![feature(custom_attribute)]\n \n #[my_attr(a b c d)]\n+#[my_attr[a b c d]]\n+#[my_attr{a b c d}]\n fn main() {}"}]}