{"sha": "b5dffe97654e00aefe4feda0dd4114f0939ab8b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZGZmZTk3NjU0ZTAwYWVmZTRmZWRhMGRkNDExNGYwOTM5YWI4YjA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-10-10T17:07:13Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-10-10T17:07:13Z"}, "message": "Rustfmt", "tree": {"sha": "b9247cfa93b2d0129ecc22555350c3bae8c64c36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9247cfa93b2d0129ecc22555350c3bae8c64c36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5dffe97654e00aefe4feda0dd4114f0939ab8b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5dffe97654e00aefe4feda0dd4114f0939ab8b0", "html_url": "https://github.com/rust-lang/rust/commit/b5dffe97654e00aefe4feda0dd4114f0939ab8b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5dffe97654e00aefe4feda0dd4114f0939ab8b0/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4177e804e9d2f312152803a909b271befc5cfb28", "url": "https://api.github.com/repos/rust-lang/rust/commits/4177e804e9d2f312152803a909b271befc5cfb28", "html_url": "https://github.com/rust-lang/rust/commit/4177e804e9d2f312152803a909b271befc5cfb28"}], "stats": {"total": 121, "additions": 70, "deletions": 51}, "files": [{"sha": "aa84ff32c3db9cbe48f03711441d18c5a1257e7f", "filename": "src/abi.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b5dffe97654e00aefe4feda0dd4114f0939ab8b0/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5dffe97654e00aefe4feda0dd4114f0939ab8b0/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=b5dffe97654e00aefe4feda0dd4114f0939ab8b0", "patch": "@@ -242,7 +242,8 @@ impl<'a, 'tcx: 'a, B: Backend + 'a> FunctionCx<'a, 'tcx, B> {\n                     self.cton_type(arg.layout().ty).unwrap(),\n                     arg.load_value(self),\n                 )\n-            }).unzip();\n+            })\n+            .unzip();\n         let return_layout = self.layout_of(return_ty);\n         let return_ty = if let ty::Tuple(tup) = return_ty.sty {\n             if !tup.is_empty() {\n@@ -325,7 +326,8 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(\n                     arg_ty,\n                 )\n             }\n-        }).collect::<Vec<(Local, ArgKind, Ty)>>();\n+        })\n+        .collect::<Vec<(Local, ArgKind, Ty)>>();\n \n     fx.bcx.switch_to_block(start_ebb);\n \n@@ -550,7 +552,8 @@ pub fn codegen_call_inner<'a, 'tcx: 'a>(\n             };\n \n             args.get(0).map(|arg| adjust_arg_for_abi(fx, sig, *arg))\n-        }.into_iter()\n+        }\n+        .into_iter()\n     };\n \n     let call_args: Vec<Value> = return_ptr\n@@ -560,7 +563,8 @@ pub fn codegen_call_inner<'a, 'tcx: 'a>(\n             args.into_iter()\n                 .skip(1)\n                 .map(|arg| adjust_arg_for_abi(fx, sig, arg)),\n-        ).collect::<Vec<_>>();\n+        )\n+        .collect::<Vec<_>>();\n \n     let sig = fx.bcx.import_signature(cton_sig_from_fn_ty(fx.tcx, fn_ty));\n     let call_inst = if let Some(func_ref) = func_ref {"}, {"sha": "c8b4697bec9b15981d8f91d8492cf4ec6e83da80", "filename": "src/analyze.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b5dffe97654e00aefe4feda0dd4114f0939ab8b0/src%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5dffe97654e00aefe4feda0dd4114f0939ab8b0/src%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fanalyze.rs?ref=b5dffe97654e00aefe4feda0dd4114f0939ab8b0", "patch": "@@ -26,12 +26,10 @@ pub fn analyze<'a, 'tcx: 'a>(fx: &FunctionCx<'a, 'tcx, impl Backend>) -> HashMap\n     for bb in fx.mir.basic_blocks().iter() {\n         for stmt in bb.statements.iter() {\n             match &stmt.kind {\n-                Assign(_, rval) => {\n-                    match &**rval {\n-                        Rvalue::Ref(_, _, place) => analyze_non_ssa_place(&mut flag_map, place),\n-                        _ => {}\n-                    }\n-                }\n+                Assign(_, rval) => match &**rval {\n+                    Rvalue::Ref(_, _, place) => analyze_non_ssa_place(&mut flag_map, place),\n+                    _ => {}\n+                },\n                 _ => {}\n             }\n         }"}, {"sha": "bbc090d503b4c520a415f10780fb45c4ad075027", "filename": "src/base.rs", "status": "modified", "additions": 34, "deletions": 29, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/b5dffe97654e00aefe4feda0dd4114f0939ab8b0/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5dffe97654e00aefe4feda0dd4114f0939ab8b0/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=b5dffe97654e00aefe4feda0dd4114f0939ab8b0", "patch": "@@ -32,7 +32,8 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(\n                             tcx,\n                             Some(inst.def_id()),\n                             &mut mir,\n-                        ).unwrap();\n+                        )\n+                        .unwrap();\n                         String::from_utf8(mir.into_inner()).unwrap()\n                     }\n                     InstanceDef::Item(_)\n@@ -120,7 +121,8 @@ fn trans_fn<'a, 'tcx: 'a>(\n     if cfg!(debug_assertions) {\n         ::cranelift::codegen::write::decorate_function(&mut writer, &mut cton, &func, None)\n             .unwrap();\n-        let clif_file_name = concat!(env!(\"CARGO_MANIFEST_DIR\"), \"/target/out/clif/\").to_string() + &tcx.symbol_name(instance).as_str();\n+        let clif_file_name = concat!(env!(\"CARGO_MANIFEST_DIR\"), \"/target/out/clif/\").to_string()\n+            + &tcx.symbol_name(instance).as_str();\n         ::std::fs::write(clif_file_name, cton.as_bytes()).unwrap();\n     }\n \n@@ -290,27 +292,27 @@ fn codegen_fn_content<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>)\n                         &args1[..]\n                     };*/\n                     let (drop_fn, fn_ty) = match ty.sty {\n-                        ty::Dynamic(..) => {\n-                            let fn_ty = drop_fn.ty(bx.cx.tcx);\n-                            let sig = common::ty_fn_sig(bx.cx, fn_ty);\n-                            let sig = bx.tcx().normalize_erasing_late_bound_regions(\n-                                ty::ParamEnv::reveal_all(),\n-                                &sig,\n-                            );\n-                            let fn_ty = FnType::new_vtable(bx.cx, sig, &[]);\n-                            let vtable = args[1];\n-                            args = &args[..1];\n-                            (meth::DESTRUCTOR.get_fn(&bx, vtable, &fn_ty), fn_ty)\n-                        }\n-                        _ => {\n-                            let value = place.to_cvalue(fx);\n-                            (callee::get_fn(bx.cx, drop_fn),\n-                            FnType::of_instance(bx.cx, &drop_fn))\n-                        }\n+                    ty::Dynamic(..) => {\n+                    let fn_ty = drop_fn.ty(bx.cx.tcx);\n+                    let sig = common::ty_fn_sig(bx.cx, fn_ty);\n+                    let sig = bx.tcx().normalize_erasing_late_bound_regions(\n+                    ty::ParamEnv::reveal_all(),\n+                    &sig,\n+                    );\n+                    let fn_ty = FnType::new_vtable(bx.cx, sig, &[]);\n+                    let vtable = args[1];\n+                    args = &args[..1];\n+                    (meth::DESTRUCTOR.get_fn(&bx, vtable, &fn_ty), fn_ty)\n+                    }\n+                    _ => {\n+                    let value = place.to_cvalue(fx);\n+                    (callee::get_fn(bx.cx, drop_fn),\n+                    FnType::of_instance(bx.cx, &drop_fn))\n+                    }\n                     };\n                     do_call(self, bx, fn_ty, drop_fn, args,\n-                            Some((ReturnDest::Nothing, target)),\n-                            unwind);*/\n+                    Some((ReturnDest::Nothing, target)),\n+                    unwind);*/\n                 }\n \n                 let target_ebb = fx.get_ebb(*target);\n@@ -592,13 +594,14 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                     let usize_layout = fx.layout_of(fx.tcx.types.usize);\n                     let len = match place.layout().ty.sty {\n                         ty::Array(_elem_ty, len) => {\n-                            let len = crate::constant::force_eval_const(fx, len).unwrap_usize(fx.tcx) as i64;\n+                            let len = crate::constant::force_eval_const(fx, len)\n+                                .unwrap_usize(fx.tcx) as i64;\n                             fx.bcx.ins().iconst(fx.module.pointer_type(), len)\n-                        },\n+                        }\n                         ty::Slice(_elem_ty) => match place {\n                             CPlace::Addr(_, size, _) => size.unwrap(),\n                             CPlace::Var(_, _) => unreachable!(),\n-                        }\n+                        },\n                         _ => bug!(\"Rvalue::Len({:?})\", place),\n                     };\n                     lval.write_cvalue(fx, CValue::ByVal(len, usize_layout));\n@@ -897,11 +900,13 @@ pub fn trans_checked_int_binop<'a, 'tcx: 'a>(\n         BinOp::Sub => fx.bcx.ins().isub(lhs, rhs),\n         BinOp::Mul => fx.bcx.ins().imul(lhs, rhs),\n         BinOp::Shl => fx.bcx.ins().ishl(lhs, rhs),\n-        BinOp::Shr => if !signed {\n-            fx.bcx.ins().ushr(lhs, rhs)\n-        } else {\n-            fx.bcx.ins().sshr(lhs, rhs)\n-        },\n+        BinOp::Shr => {\n+            if !signed {\n+                fx.bcx.ins().ushr(lhs, rhs)\n+            } else {\n+                fx.bcx.ins().sshr(lhs, rhs)\n+            }\n+        }\n         _ => bug!(\n             \"binop {:?} on checked int/uint lhs: {:?} rhs: {:?}\",\n             bin_op,"}, {"sha": "dbfc27d609ed824b38a87d55c719fb5e38a997af", "filename": "src/common.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5dffe97654e00aefe4feda0dd4114f0939ab8b0/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5dffe97654e00aefe4feda0dd4114f0939ab8b0/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=b5dffe97654e00aefe4feda0dd4114f0939ab8b0", "patch": "@@ -131,7 +131,8 @@ impl<'tcx> CValue<'tcx> {\n                     size: layout.size.bytes() as u32,\n                     offset: None,\n                 });\n-                let addr = fx.bcx\n+                let addr = fx\n+                    .bcx\n                     .ins()\n                     .stack_addr(fx.module.pointer_type(), stack_slot, 0);\n                 fx.bcx.ins().store(MemFlags::new(), value, addr, 0);\n@@ -635,7 +636,8 @@ impl<'a, 'tcx: 'a, B: Backend + 'a> fmt::Debug for FunctionCx<'a, 'tcx, B> {\n             &mut clif,\n             &self.bcx.func,\n             None,\n-        ).unwrap();\n+        )\n+        .unwrap();\n         writeln!(f, \"\\n{}\", clif)\n     }\n }"}, {"sha": "11e6d932ad02ce4ad18026f23c2b6a53b9f58b78", "filename": "src/constant.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5dffe97654e00aefe4feda0dd4114f0939ab8b0/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5dffe97654e00aefe4feda0dd4114f0939ab8b0/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=b5dffe97654e00aefe4feda0dd4114f0939ab8b0", "patch": "@@ -52,7 +52,8 @@ pub fn trans_promoted<'a, 'tcx: 'a>(\n         .const_eval(ParamEnv::reveal_all().and(GlobalId {\n             instance: fx.instance,\n             promoted: Some(promoted),\n-        })).unwrap();\n+        }))\n+        .unwrap();\n \n     let const_ = force_eval_const(fx, const_);\n     trans_const_place(fx, const_)"}, {"sha": "86f4f2e70b1363f0edeec2363f3c7dc7966bab48", "filename": "src/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5dffe97654e00aefe4feda0dd4114f0939ab8b0/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5dffe97654e00aefe4feda0dd4114f0939ab8b0/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=b5dffe97654e00aefe4feda0dd4114f0939ab8b0", "patch": "@@ -1,4 +1,3 @@\n-\n use crate::prelude::*;\n \n macro_rules! intrinsic_pat {"}, {"sha": "e030d5371d36958fee153bc3b6cc4b89f12cf56b", "filename": "src/lib.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b5dffe97654e00aefe4feda0dd4114f0939ab8b0/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5dffe97654e00aefe4feda0dd4114f0939ab8b0/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b5dffe97654e00aefe4feda0dd4114f0939ab8b0", "patch": "@@ -237,7 +237,8 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                     \"some_file.o\".to_string(),\n                     FaerieTrapCollection::Disabled,\n                     FaerieBuilder::default_libcall_names(),\n-                ).unwrap(),\n+                )\n+                .unwrap(),\n             );\n             assert_eq!(pointer_ty(tcx), faerie_module.pointer_type());\n \n@@ -282,7 +283,8 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                     writable: false,\n                 },\n                 metadata.clone(),\n-            ).unwrap();\n+            )\n+            .unwrap();\n \n         for &crate_type in sess.opts.crate_types.iter() {\n             match crate_type {\n@@ -303,14 +305,16 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                                 metadata.len() as u64,\n                             ),\n                             ::std::io::Cursor::new(metadata.clone()),\n-                        ).unwrap();\n+                        )\n+                        .unwrap();\n                     if should_codegen(sess) {\n                         let obj = artifact.emit().unwrap();\n                         builder\n                             .append(\n                                 &ar::Header::new(b\"data.o\".to_vec(), obj.len() as u64),\n                                 ::std::io::Cursor::new(obj),\n-                            ).unwrap();\n+                            )\n+                            .unwrap();\n                     }\n                 }\n                 _ => sess.fatal(&format!(\"Unsupported crate type: {:?}\", crate_type)),\n@@ -332,7 +336,10 @@ fn codegen_mono_items<'a, 'tcx: 'a>(\n     let mut ccx = ConstantCx::default();\n \n     let mut log = if cfg!(debug_assertions) {\n-        Some(::std::fs::File::create(concat!(env!(\"CARGO_MANIFEST_DIR\"), \"/target/out/log.txt\")).unwrap())\n+        Some(\n+            ::std::fs::File::create(concat!(env!(\"CARGO_MANIFEST_DIR\"), \"/target/out/log.txt\"))\n+                .unwrap(),\n+        )\n     } else {\n         None\n     };\n@@ -455,7 +462,8 @@ fn maybe_create_entry_wrapper<'a, 'tcx: 'a>(\n                     ParamEnv::reveal_all(),\n                     start_def_id,\n                     tcx.intern_substs(&[main_ret_ty.into()]),\n-                ).unwrap();\n+                )\n+                .unwrap();\n \n                 let (start_name, start_sig) = get_function_name_and_sig(tcx, start_instance);\n                 let start_func_id = m"}, {"sha": "5fb1e8a8355172eea7ba1488da9a52e1691ecde4", "filename": "src/vtable.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5dffe97654e00aefe4feda0dd4114f0939ab8b0/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5dffe97654e00aefe4feda0dd4114f0939ab8b0/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=b5dffe97654e00aefe4feda0dd4114f0939ab8b0", "patch": "@@ -122,7 +122,8 @@ fn build_vtable<'a, 'tcx: 'a>(\n             &format!(\"vtable.{:?}.for.{:?}\", trait_ref, ty),\n             Linkage::Local,\n             false,\n-        ).unwrap();\n+        )\n+        .unwrap();\n     fx.module.define_data(data_id, &data_ctx).unwrap();\n     data_id\n }\n@@ -140,5 +141,6 @@ fn write_usize(tcx: TyCtxt, buf: &mut [u8], idx: usize, num: u64) {\n     match tcx.data_layout.endian {\n         layout::Endian::Little => target.write_uint::<LittleEndian>(num, usize_size),\n         layout::Endian::Big => target.write_uint::<BigEndian>(num, usize_size),\n-    }.unwrap()\n+    }\n+    .unwrap()\n }"}]}