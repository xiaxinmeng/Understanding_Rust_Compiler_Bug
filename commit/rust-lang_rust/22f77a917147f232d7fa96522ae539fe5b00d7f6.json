{"sha": "22f77a917147f232d7fa96522ae539fe5b00d7f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZjc3YTkxNzE0N2YyMzJkN2ZhOTY1MjJhZTUzOWZlNWIwMGQ3ZjY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-07-18T14:16:19Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-07-18T14:21:40Z"}, "message": "Run base::internalize_symbols() even for single-codegen-unit crates.\n\nThe initial linkage-assignment (especially for closures) is a conservative one that makes some symbols more visible than they need to be. While this is not a correctness problem, it does force the LLVM inliner to be more conservative too, which results in poor performance. Once translation is based solely on MIR, it will be easier to also make the initial linkage assignment a better fitting one. Until then `internalize_symbols()` does a good job of preventing most performance regressions.", "tree": {"sha": "e22f92f816a4f74c4e74031d86dacb9c8ba6a955", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e22f92f816a4f74c4e74031d86dacb9c8ba6a955"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22f77a917147f232d7fa96522ae539fe5b00d7f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22f77a917147f232d7fa96522ae539fe5b00d7f6", "html_url": "https://github.com/rust-lang/rust/commit/22f77a917147f232d7fa96522ae539fe5b00d7f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22f77a917147f232d7fa96522ae539fe5b00d7f6/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f441bca4993450e4a2f63bac382f9ebc4be274d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f441bca4993450e4a2f63bac382f9ebc4be274d1", "html_url": "https://github.com/rust-lang/rust/commit/f441bca4993450e4a2f63bac382f9ebc4be274d1"}], "stats": {"total": 36, "additions": 15, "deletions": 21}, "files": [{"sha": "c8b9fea15ba8b0e12cb4c3557411deddb8f3b056", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/22f77a917147f232d7fa96522ae539fe5b00d7f6/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f77a917147f232d7fa96522ae539fe5b00d7f6/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=22f77a917147f232d7fa96522ae539fe5b00d7f6", "patch": "@@ -2270,12 +2270,9 @@ fn internalize_symbols(cx: &CrateContextList, reachable: &HashSet<&str>) {\n                 let is_decl = llvm::LLVMIsDeclaration(val) != 0;\n \n                 if is_decl || is_available_externally {\n-                    let name = CStr::from_ptr(llvm::LLVMGetValueName(val))\n-                        .to_bytes()\n-                        .to_vec();\n+                    let name = CStr::from_ptr(llvm::LLVMGetValueName(val));\n                     declared.insert(name);\n                 }\n-\n             }\n         }\n \n@@ -2286,21 +2283,21 @@ fn internalize_symbols(cx: &CrateContextList, reachable: &HashSet<&str>) {\n             for val in iter_globals(ccx.llmod()).chain(iter_functions(ccx.llmod())) {\n                 let linkage = llvm::LLVMGetLinkage(val);\n \n-                let is_external = linkage == llvm::ExternalLinkage as c_uint;\n-                let is_weak_odr = linkage == llvm::WeakODRLinkage as c_uint;\n-                let is_decl = llvm::LLVMIsDeclaration(val) != 0;\n-\n-                // We only care about external definitions.\n-                if (is_external || is_weak_odr) && !is_decl {\n+                let is_externally_visible = (linkage == llvm::ExternalLinkage as c_uint) ||\n+                                            (linkage == llvm::LinkOnceODRLinkage as c_uint) ||\n+                                            (linkage == llvm::WeakODRLinkage as c_uint);\n+                let is_definition = llvm::LLVMIsDeclaration(val) != 0;\n \n-                    let name = CStr::from_ptr(llvm::LLVMGetValueName(val))\n-                                .to_bytes()\n-                                .to_vec();\n+                // If this is a definition (as opposed to just a declaration)\n+                // and externally visible, check if we can internalize it\n+                if is_definition && is_externally_visible {\n+                    let name_cstr = CStr::from_ptr(llvm::LLVMGetValueName(val));\n+                    let name_str = name_cstr.to_str().unwrap();\n \n-                    let is_declared = declared.contains(&name);\n-                    let reachable = reachable.contains(str::from_utf8(&name).unwrap());\n+                    let is_referenced_somewhere = declared.contains(&name_cstr);\n+                    let is_reachable = reachable.contains(name_str);\n \n-                    if !is_declared && !reachable {\n+                    if !is_referenced_somewhere && !is_reachable {\n                         llvm::SetLinkage(val, llvm::InternalLinkage);\n                         llvm::SetDLLStorageClass(val, llvm::DefaultStorageClass);\n                         llvm::UnsetComdat(val);\n@@ -2488,7 +2485,6 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // Run the translation item collector and partition the collected items into\n     // codegen units.\n     let (codegen_units, symbol_map) = collect_and_partition_translation_items(&shared_ccx);\n-    let codegen_unit_count = codegen_units.len();\n \n     let symbol_map = Rc::new(symbol_map);\n \n@@ -2620,10 +2616,8 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }));\n     }\n \n-    if codegen_unit_count > 1 {\n-        internalize_symbols(&crate_context_list,\n-                            &reachable_symbols.iter().map(|x| &x[..]).collect());\n-    }\n+    internalize_symbols(&crate_context_list,\n+                        &reachable_symbols.iter().map(|x| &x[..]).collect());\n \n     if sess.target.target.options.is_like_msvc &&\n        sess.crate_types.borrow().iter().any(|ct| *ct == config::CrateTypeRlib) {"}]}