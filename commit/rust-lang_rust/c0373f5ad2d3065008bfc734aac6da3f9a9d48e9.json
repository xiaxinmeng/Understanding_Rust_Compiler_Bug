{"sha": "c0373f5ad2d3065008bfc734aac6da3f9a9d48e9", "node_id": "C_kwDOAAsO6NoAKGMwMzczZjVhZDJkMzA2NTAwOGJmYzczNGFhYzZkYTNmOWE5ZDQ4ZTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-18T00:20:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-18T00:20:52Z"}, "message": "Auto merge of #108112 - nnethercote:clarify-iterator-interners, r=oli-obk,compiler-errors\n\nClarify iterator interners\n\nI found the iterator interners very confusing. This PR clarifies things.\n\nr? `@compiler-errors`", "tree": {"sha": "10257b01b559de6868bcdf54f3e6b40e6e27bf71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10257b01b559de6868bcdf54f3e6b40e6e27bf71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0373f5ad2d3065008bfc734aac6da3f9a9d48e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0373f5ad2d3065008bfc734aac6da3f9a9d48e9", "html_url": "https://github.com/rust-lang/rust/commit/c0373f5ad2d3065008bfc734aac6da3f9a9d48e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0373f5ad2d3065008bfc734aac6da3f9a9d48e9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a66a6816b6344af9bd44fac39da589984087723", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a66a6816b6344af9bd44fac39da589984087723", "html_url": "https://github.com/rust-lang/rust/commit/8a66a6816b6344af9bd44fac39da589984087723"}, {"sha": "a3837c6bd8476828f92a71366f422f9833ef65a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3837c6bd8476828f92a71366f422f9833ef65a7", "html_url": "https://github.com/rust-lang/rust/commit/a3837c6bd8476828f92a71366f422f9833ef65a7"}], "stats": {"total": 6, "additions": 2, "deletions": 4}, "files": [{"sha": "8ddbacc3d7ad4bb7ce2a76edd3e00404746b5034", "filename": "clippy_lints/src/methods/needless_collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0373f5ad2d3065008bfc734aac6da3f9a9d48e9/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0373f5ad2d3065008bfc734aac6da3f9a9d48e9/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs?ref=c0373f5ad2d3065008bfc734aac6da3f9a9d48e9", "patch": "@@ -173,7 +173,7 @@ fn is_contains_sig(cx: &LateContext<'_>, call_id: HirId, iter_expr: &Expr<'_>) -\n         && let Some(iter_item) = cx.tcx\n             .associated_items(iter_trait)\n             .find_by_name_and_kind(cx.tcx, Ident::with_dummy_span(Symbol::intern(\"Item\")), AssocKind::Type, iter_trait)\n-        && let substs = cx.tcx.mk_substs([GenericArg::from(typeck.expr_ty_adjusted(iter_expr))].into_iter())\n+        && let substs = cx.tcx.intern_substs(&[GenericArg::from(typeck.expr_ty_adjusted(iter_expr))])\n         && let proj_ty = cx.tcx.mk_projection(iter_item.def_id, substs)\n         && let Ok(item_ty) = cx.tcx.try_normalize_erasing_regions(cx.param_env, proj_ty)\n     {"}, {"sha": "398329e455bfaad443fbbd01bda5bf397657681d", "filename": "clippy_lints/src/redundant_slicing.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0373f5ad2d3065008bfc734aac6da3f9a9d48e9/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0373f5ad2d3065008bfc734aac6da3f9a9d48e9/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_slicing.rs?ref=c0373f5ad2d3065008bfc734aac6da3f9a9d48e9", "patch": "@@ -11,8 +11,6 @@ use rustc_middle::ty::adjustment::{Adjust, AutoBorrow, AutoBorrowMutability};\n use rustc_middle::ty::subst::GenericArg;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use std::iter;\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for redundant slicing expressions which use the full range, and\n@@ -136,7 +134,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantSlicing {\n                 } else if let Some(target_id) = cx.tcx.lang_items().deref_target() {\n                     if let Ok(deref_ty) = cx.tcx.try_normalize_erasing_regions(\n                         cx.param_env,\n-                        cx.tcx.mk_projection(target_id, cx.tcx.mk_substs(iter::once(GenericArg::from(indexed_ty)))),\n+                        cx.tcx.mk_projection(target_id, cx.tcx.intern_substs(&[GenericArg::from(indexed_ty)])),\n                     ) {\n                         if deref_ty == expr_ty {\n                             let snip = snippet_with_context(cx, indexed.span, ctxt, \"..\", &mut app).0;"}]}