{"sha": "b7e0ca993d0d1d15ed211ceec53ee4ffe526cb16", "node_id": "C_kwDOAAsO6NoAKGI3ZTBjYTk5M2QwZDFkMTVlZDIxMWNlZWM1M2VlNGZmZTUyNmNiMTY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-28T21:34:04Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-28T21:34:59Z"}, "message": "Shift vars for default RPITIT methods correctly", "tree": {"sha": "f9942e95ca65d9eba37f5f06be2506d48a966674", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9942e95ca65d9eba37f5f06be2506d48a966674"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7e0ca993d0d1d15ed211ceec53ee4ffe526cb16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e0ca993d0d1d15ed211ceec53ee4ffe526cb16", "html_url": "https://github.com/rust-lang/rust/commit/b7e0ca993d0d1d15ed211ceec53ee4ffe526cb16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7e0ca993d0d1d15ed211ceec53ee4ffe526cb16/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31f858d9a511f24fedb8ed997b28304fec809630", "url": "https://api.github.com/repos/rust-lang/rust/commits/31f858d9a511f24fedb8ed997b28304fec809630", "html_url": "https://github.com/rust-lang/rust/commit/31f858d9a511f24fedb8ed997b28304fec809630"}], "stats": {"total": 50, "additions": 49, "deletions": 1}, "files": [{"sha": "70c9de91fbfef62a4d50b04cb488dd07a833005c", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b7e0ca993d0d1d15ed211ceec53ee4ffe526cb16/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e0ca993d0d1d15ed211ceec53ee4ffe526cb16/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=b7e0ca993d0d1d15ed211ceec53ee4ffe526cb16", "patch": "@@ -142,12 +142,14 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n         && tcx.associated_item(def_id).container == ty::AssocItemContainer::TraitContainer\n     {\n         let sig = tcx.fn_sig(def_id).subst_identity();\n-        sig.visit_with(&mut ImplTraitInTraitFinder {\n+        // We accounted for the binder of the fn sig, so skip the binder.\n+        sig.skip_binder().visit_with(&mut ImplTraitInTraitFinder {\n             tcx,\n             fn_def_id: def_id,\n             bound_vars: sig.bound_vars(),\n             predicates: &mut predicates,\n             seen: FxHashSet::default(),\n+            depth: ty::INNERMOST,\n         });\n     }\n \n@@ -244,15 +246,36 @@ struct ImplTraitInTraitFinder<'a, 'tcx> {\n     fn_def_id: DefId,\n     bound_vars: &'tcx ty::List<ty::BoundVariableKind>,\n     seen: FxHashSet<DefId>,\n+    depth: ty::DebruijnIndex,\n }\n \n impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ImplTraitInTraitFinder<'_, 'tcx> {\n+    fn visit_binder<T: TypeVisitable<TyCtxt<'tcx>>>(\n+        &mut self,\n+        binder: &ty::Binder<'tcx, T>,\n+    ) -> std::ops::ControlFlow<Self::BreakTy> {\n+        self.depth.shift_in(1);\n+        let binder = binder.super_visit_with(self);\n+        self.depth.shift_out(1);\n+        binder\n+    }\n+\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> std::ops::ControlFlow<Self::BreakTy> {\n         if let ty::Alias(ty::Projection, alias_ty) = *ty.kind()\n             && self.tcx.def_kind(alias_ty.def_id) == DefKind::ImplTraitPlaceholder\n             && self.tcx.impl_trait_in_trait_parent(alias_ty.def_id) == self.fn_def_id\n             && self.seen.insert(alias_ty.def_id)\n         {\n+            // We have entered some binders as we've walked into the\n+            // bounds of the RPITIT. Shift these binders back out when\n+            // constructing the top-level projection predicate.\n+            let alias_ty = self.tcx.fold_regions(alias_ty, |re, _| {\n+                if let ty::ReLateBound(index, bv) = re.kind() {\n+                    self.tcx.mk_re_late_bound(index.shifted_out_to_binder(self.depth), bv)\n+                } else {\n+                    re\n+                }\n+            });\n             self.predicates.push(\n                 ty::Binder::bind_with_vars(\n                     ty::ProjectionPredicate {"}, {"sha": "5cf90c5d93c24da7f00de5e0bf54167239791870", "filename": "tests/ui/impl-trait/in-trait/default-method-binder-shifting.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b7e0ca993d0d1d15ed211ceec53ee4ffe526cb16/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e0ca993d0d1d15ed211ceec53ee4ffe526cb16/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.rs?ref=b7e0ca993d0d1d15ed211ceec53ee4ffe526cb16", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+\n+#![feature(return_position_impl_trait_in_trait)]\n+//~^ WARN the feature `return_position_impl_trait_in_trait` is incomplete\n+\n+trait Trait {\n+    type Type;\n+\n+    // Check that we're adjusting bound vars correctly when installing the default\n+    // method projection assumptions.\n+    fn method(&self) -> impl Trait<Type = impl Sized + '_>;\n+}\n+\n+fn main() {}"}, {"sha": "7c7ebcdb7e717d79f847dc0165615ec6d97b8722", "filename": "tests/ui/impl-trait/in-trait/default-method-binder-shifting.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b7e0ca993d0d1d15ed211ceec53ee4ffe526cb16/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7e0ca993d0d1d15ed211ceec53ee4ffe526cb16/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.stderr?ref=b7e0ca993d0d1d15ed211ceec53ee4ffe526cb16", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/default-method-binder-shifting.rs:3:12\n+   |\n+LL | #![feature(return_position_impl_trait_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}]}