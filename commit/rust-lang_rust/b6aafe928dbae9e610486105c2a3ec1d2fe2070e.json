{"sha": "b6aafe928dbae9e610486105c2a3ec1d2fe2070e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2YWFmZTkyOGRiYWU5ZTYxMDQ4NjEwNWMyYTNlYzFkMmZlMjA3MGU=", "commit": {"author": {"name": "gareth", "email": "gareth@gareth-N56VM.(none)", "date": "2012-12-27T19:54:34Z"}, "committer": {"name": "gareth", "email": "gareth@gareth-N56VM.(none)", "date": "2012-12-29T11:15:54Z"}, "message": "When an import fails to resolve, make the error message say\nwhich import it actually was. This makes debugging imports\nlike: use aa::{x, y, z} easier (for issue #2914).", "tree": {"sha": "7de1ed008ccaa5c7eeef5c7ab8b9cac5235b30d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7de1ed008ccaa5c7eeef5c7ab8b9cac5235b30d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6aafe928dbae9e610486105c2a3ec1d2fe2070e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6aafe928dbae9e610486105c2a3ec1d2fe2070e", "html_url": "https://github.com/rust-lang/rust/commit/b6aafe928dbae9e610486105c2a3ec1d2fe2070e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6aafe928dbae9e610486105c2a3ec1d2fe2070e/comments", "author": null, "committer": null, "parents": [{"sha": "5245aceba9fd94110de35ed7b75a30822b401d79", "url": "https://api.github.com/repos/rust-lang/rust/commits/5245aceba9fd94110de35ed7b75a30822b401d79", "html_url": "https://github.com/rust-lang/rust/commit/5245aceba9fd94110de35ed7b75a30822b401d79"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "cdc41bc9da6ea128afed4c9ca4488806b998874e", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b6aafe928dbae9e610486105c2a3ec1d2fe2070e/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6aafe928dbae9e610486105c2a3ec1d2fe2070e/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=b6aafe928dbae9e610486105c2a3ec1d2fe2070e", "patch": "@@ -2086,8 +2086,11 @@ impl Resolver {\n             match self.resolve_import_for_module(module_, import_directive) {\n                 Failed => {\n                     // We presumably emitted an error. Continue.\n-                    self.session.span_err(import_directive.span,\n-                                          ~\"failed to resolve import\");\n+                    let idents = import_directive.module_path.get();\n+                    let msg = fmt!(\"failed to resolve import: %s\",\n+                                   self.import_path_to_str(idents,\n+                                   *import_directive.subclass));\n+                    self.session.span_err(import_directive.span, msg);\n                 }\n                 Indeterminate => {\n                     // Bail out. We'll come around next time.\n@@ -2117,6 +2120,26 @@ impl Resolver {\n         // XXX: Shouldn't copy here. We need string builder functionality.\n         return result;\n     }\n+    \n+    fn import_directive_subclass_to_str(subclass: ImportDirectiveSubclass)\n+                                                                     -> ~str {\n+        match subclass {\n+            SingleImport(_target, source, _ns) => self.session.str_of(source),\n+            GlobImport => ~\"*\"\n+        }\n+    }\n+    \n+    fn import_path_to_str(idents: ~[ident], subclass: ImportDirectiveSubclass)\n+                                                                     -> ~str {\n+        if idents.is_empty() {\n+            self.import_directive_subclass_to_str(subclass)\n+        } else {\n+            fmt!(\"%s::%s\",\n+                 self.idents_to_str(idents),\n+                 self.import_directive_subclass_to_str(subclass))\n+        }\n+    }\n+    \n     /**\n      * Attempts to resolve the given import. The return value indicates\n      * failure if we're certain the name does not exist, indeterminate if we"}]}