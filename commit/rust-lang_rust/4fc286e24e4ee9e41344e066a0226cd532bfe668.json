{"sha": "4fc286e24e4ee9e41344e066a0226cd532bfe668", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYzI4NmUyNGU0ZWU5ZTQxMzQ0ZTA2NmEwMjI2Y2Q1MzJiZmU2Njg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-16T21:01:12Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-16T21:03:07Z"}, "message": "rustc: Parse interior vector types in which the base type is a path properly", "tree": {"sha": "77670311c8ad661b20be024d47dbb721768d0263", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77670311c8ad661b20be024d47dbb721768d0263"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fc286e24e4ee9e41344e066a0226cd532bfe668", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fc286e24e4ee9e41344e066a0226cd532bfe668", "html_url": "https://github.com/rust-lang/rust/commit/4fc286e24e4ee9e41344e066a0226cd532bfe668", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fc286e24e4ee9e41344e066a0226cd532bfe668/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9210afc8a5360ac859d21a8db6e0ef9b0ba7debb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9210afc8a5360ac859d21a8db6e0ef9b0ba7debb", "html_url": "https://github.com/rust-lang/rust/commit/9210afc8a5360ac859d21a8db6e0ef9b0ba7debb"}], "stats": {"total": 50, "additions": 36, "deletions": 14}, "files": [{"sha": "01cff9d81aac20f158a06bd47a1151446b128b9d", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/4fc286e24e4ee9e41344e066a0226cd532bfe668/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc286e24e4ee9e41344e066a0226cd532bfe668/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=4fc286e24e4ee9e41344e066a0226cd532bfe668", "patch": "@@ -423,6 +423,26 @@ fn parse_ty_postfix(@ast::ty orig_t, &parser p) -> @ast::ty {\n             mut = ast::imm;\n         }\n \n+        if (mut == ast::imm && p.peek() != token::RBRACKET) {\n+            // This is explicit type parameter instantiation.\n+            auto seq = parse_seq_to_end(token::RBRACKET, some(token::COMMA),\n+                                        parse_ty, p);\n+            alt (orig_t.node) {\n+                case (ast::ty_path(?pth, ?ann)) {\n+                    auto hi = p.get_hi_pos();\n+                    ret @spanned(lo, hi,\n+                                 ast::ty_path(spanned(lo, hi,\n+                                              rec(idents=pth.node.idents,\n+                                                  types=seq)),\n+                                              ann));\n+                }\n+                case (_) {\n+                    p.err(\"type parameter instantiation only allowed for \" +\n+                          \"paths\");\n+                }\n+            }\n+        }\n+\n         expect(p, token::RBRACKET);\n         auto hi = p.get_hi_pos();\n         auto t = ast::ty_ivec(rec(ty=orig_t, mut=mut));\n@@ -634,16 +654,6 @@ fn is_ident(token::token t) -> bool {\n     ret false;\n }\n \n-fn parse_ty_args(&parser p, uint hi) -> util::common::spanned[vec[@ast::ty]] {\n-    if (p.peek() == token::LBRACKET) {\n-        ret parse_seq(token::LBRACKET, token::RBRACKET, some(token::COMMA),\n-                      parse_ty, p);\n-    }\n-    let vec[@ast::ty] v = [];\n-    auto pos = p.get_lo_pos();\n-    ret spanned(hi, hi, v);\n-}\n-\n fn parse_path(&parser p) -> ast::path {\n     auto lo = p.get_lo_pos();\n     auto hi = lo;\n@@ -659,8 +669,20 @@ fn parse_path(&parser p) -> ast::path {\n             case (_) { break; }\n         }\n     }\n-    auto tys = parse_ty_args(p, hi);\n-    ret spanned(lo, tys.span.hi, rec(idents=ids, types=tys.node));\n+    hi = p.get_hi_pos();\n+    ret spanned(lo, hi, rec(idents=ids, types=[]));\n+}\n+\n+fn parse_path_and_ty_param_substs(&parser p) -> ast::path {\n+    auto lo = p.get_lo_pos();\n+    auto path = parse_path(p);\n+    if (p.peek() == token::LBRACKET) {\n+        auto seq = parse_seq(token::LBRACKET, token::RBRACKET,\n+                             some(token::COMMA), parse_ty, p);\n+        auto hi = p.get_hi_pos();\n+        path = spanned(lo, hi, rec(idents=path.node.idents, types=seq.node));\n+    }\n+    ret path;\n }\n \n fn parse_mutability(&parser p) -> ast::mutability {\n@@ -919,7 +941,7 @@ fn parse_bottom_expr(&parser p) -> @ast::expr {\n     } else if (is_ident(p.peek()) && !is_word(p, \"true\") &&\n                    !is_word(p, \"false\")) {\n         check_bad_word(p);\n-        auto pth = parse_path(p);\n+        auto pth = parse_path_and_ty_param_substs(p);\n         hi = pth.span.hi;\n         ex = ast::expr_path(pth, p.get_ann());\n     } else {\n@@ -1396,7 +1418,7 @@ fn parse_pat(&parser p) -> @ast::pat {\n                 hi = lit.span.hi;\n                 pat = ast::pat_lit(@lit, p.get_ann());\n             } else {\n-                auto tag_path = parse_path(p);\n+                auto tag_path = parse_path_and_ty_param_substs(p);\n                 hi = tag_path.span.hi;\n                 let vec[@ast::pat] args;\n                 alt (p.peek()) {"}]}