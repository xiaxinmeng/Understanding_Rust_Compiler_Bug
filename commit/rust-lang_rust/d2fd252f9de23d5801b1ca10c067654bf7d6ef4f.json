{"sha": "d2fd252f9de23d5801b1ca10c067654bf7d6ef4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyZmQyNTJmOWRlMjNkNTgwMWIxY2ExMGMwNjc2NTRiZjdkNmVmNGY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-29T13:06:23Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-29T13:06:23Z"}, "message": "Simplify fixture parsing", "tree": {"sha": "20af3ef139e40eb0b506e41abfb316485205284a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20af3ef139e40eb0b506e41abfb316485205284a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2fd252f9de23d5801b1ca10c067654bf7d6ef4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2fd252f9de23d5801b1ca10c067654bf7d6ef4f", "html_url": "https://github.com/rust-lang/rust/commit/d2fd252f9de23d5801b1ca10c067654bf7d6ef4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2fd252f9de23d5801b1ca10c067654bf7d6ef4f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cc0a8652870402db3b072cab030ba28d6b96b39", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cc0a8652870402db3b072cab030ba28d6b96b39", "html_url": "https://github.com/rust-lang/rust/commit/7cc0a8652870402db3b072cab030ba28d6b96b39"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "5666445aa578f5843ca7385d178ad2435bc307fd", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d2fd252f9de23d5801b1ca10c067654bf7d6ef4f/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2fd252f9de23d5801b1ca10c067654bf7d6ef4f/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=d2fd252f9de23d5801b1ca10c067654bf7d6ef4f", "patch": "@@ -176,7 +176,7 @@ pub fn parse_fixture(fixture: &str) -> Vec<FixtureEntry> {\n         .next()\n         .expect(\"empty fixture\");\n \n-    let lines = fixture\n+    let mut lines = fixture\n         .split('\\n') // don't use `.lines` to not drop `\\r\\n`\n         .filter_map(|line| {\n             if line.len() >= margin {\n@@ -189,29 +189,28 @@ pub fn parse_fixture(fixture: &str) -> Vec<FixtureEntry> {\n         });\n \n     let mut res = Vec::new();\n-    let mut buf = String::new();\n-    let mut meta: Option<&str> = None;\n-\n-    macro_rules! flush {\n-        () => {\n-            if let Some(meta) = meta {\n-                res.push(FixtureEntry { meta: meta.to_string(), text: buf.clone() });\n-                buf.clear();\n+    let mut meta = None;\n+    loop {\n+        let mut next_meta = None;\n+        let mut text = String::new();\n+        for line in lines.by_ref() {\n+            if line.starts_with(\"//-\") {\n+                next_meta = Some(line[\"//-\".len()..].trim().to_string());\n+                break;\n             }\n-        };\n-    };\n+            text.push_str(line);\n+            text.push('\\n');\n+        }\n \n-    for line in lines {\n-        if line.starts_with(\"//-\") {\n-            flush!();\n-            buf.clear();\n-            meta = Some(line[\"//-\".len()..].trim());\n-            continue;\n+        if let Some(meta) = meta {\n+            res.push(FixtureEntry { meta, text });\n+        }\n+        meta = next_meta;\n+        if meta.is_none() {\n+            break;\n         }\n-        buf.push_str(line);\n-        buf.push('\\n');\n     }\n-    flush!();\n+\n     res\n }\n "}]}