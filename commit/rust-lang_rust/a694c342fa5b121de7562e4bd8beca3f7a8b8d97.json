{"sha": "a694c342fa5b121de7562e4bd8beca3f7a8b8d97", "node_id": "C_kwDOAAsO6NoAKGE2OTRjMzQyZmE1YjEyMWRlNzU2MmU0YmQ4YmVjYTNmN2E4YjhkOTc", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-12-21T15:01:17Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-12-21T19:23:43Z"}, "message": "Fix tests not using appropriate target data", "tree": {"sha": "0ef00040f2a7f12da79bdbf36a0cab8094d6f084", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ef00040f2a7f12da79bdbf36a0cab8094d6f084"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a694c342fa5b121de7562e4bd8beca3f7a8b8d97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a694c342fa5b121de7562e4bd8beca3f7a8b8d97", "html_url": "https://github.com/rust-lang/rust/commit/a694c342fa5b121de7562e4bd8beca3f7a8b8d97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a694c342fa5b121de7562e4bd8beca3f7a8b8d97/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33591cd3f47b14961ed07a99ac23deece704243c", "url": "https://api.github.com/repos/rust-lang/rust/commits/33591cd3f47b14961ed07a99ac23deece704243c", "html_url": "https://github.com/rust-lang/rust/commit/33591cd3f47b14961ed07a99ac23deece704243c"}], "stats": {"total": 166, "additions": 111, "deletions": 55}, "files": [{"sha": "83286cf6b777da294c30911bb81bcabc83d06b03", "filename": "crates/base-db/src/fixture.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a694c342fa5b121de7562e4bd8beca3f7a8b8d97/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a694c342fa5b121de7562e4bd8beca3f7a8b8d97/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Ffixture.rs?ref=a694c342fa5b121de7562e4bd8beca3f7a8b8d97", "patch": "@@ -162,7 +162,7 @@ impl ChangeFixture {\n                     Ok(Vec::new()),\n                     false,\n                     origin,\n-                    None,\n+                    meta.target_data_layout.as_deref().map(Arc::from),\n                 );\n                 let prev = crates.insert(crate_name.clone(), crate_id);\n                 assert!(prev.is_none());\n@@ -212,6 +212,8 @@ impl ChangeFixture {\n                     .unwrap();\n             }\n         }\n+        let target_layout =\n+            crate_graph.iter().next().and_then(|it| crate_graph[it].target_layout.clone());\n \n         if let Some(mini_core) = mini_core {\n             let core_file = file_id;\n@@ -236,7 +238,7 @@ impl ChangeFixture {\n                 Ok(Vec::new()),\n                 false,\n                 CrateOrigin::Lang(LangCrateOrigin::Core),\n-                None,\n+                target_layout.clone(),\n             );\n \n             for krate in all_crates {\n@@ -274,7 +276,7 @@ impl ChangeFixture {\n                 Ok(proc_macro),\n                 true,\n                 CrateOrigin::CratesIo { repo: None, name: None },\n-                None,\n+                target_layout,\n             );\n \n             for krate in all_crates {\n@@ -395,6 +397,7 @@ struct FileMeta {\n     edition: Edition,\n     env: Env,\n     introduce_new_source_root: Option<SourceRootKind>,\n+    target_data_layout: Option<String>,\n }\n \n fn parse_crate(crate_str: String) -> (String, CrateOrigin, Option<String>) {\n@@ -438,6 +441,7 @@ impl From<Fixture> for FileMeta {\n                 \"library\" => SourceRootKind::Library,\n                 invalid => panic!(\"invalid source root kind '{}'\", invalid),\n             }),\n+            target_data_layout: f.target_data_layout,\n         }\n     }\n }"}, {"sha": "ba821235f3f3bec623efe5359c933e97ae267583", "filename": "crates/hir-ty/src/layout/tests.rs", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a694c342fa5b121de7562e4bd8beca3f7a8b8d97/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a694c342fa5b121de7562e4bd8beca3f7a8b8d97/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs?ref=a694c342fa5b121de7562e4bd8beca3f7a8b8d97", "patch": "@@ -9,8 +9,22 @@ use crate::{test_db::TestDB, Interner, Substitution};\n \n use super::layout_of_ty;\n \n-fn eval_goal(ra_fixture: &str) -> Result<Layout, LayoutError> {\n-    let (db, file_id) = TestDB::with_single_file(ra_fixture);\n+fn eval_goal(ra_fixture: &str, minicore: &str) -> Result<Layout, LayoutError> {\n+    // using unstable cargo features failed, fall back to using plain rustc\n+    let mut cmd = std::process::Command::new(\"rustc\");\n+    cmd.args(&[\"-Z\", \"unstable-options\", \"--print\", \"target-spec-json\"])\n+        .env(\"RUSTC_BOOTSTRAP\", \"1\");\n+    let output = cmd.output().unwrap();\n+    assert!(output.status.success(), \"{}\", output.status);\n+    let stdout = String::from_utf8(output.stdout).unwrap();\n+    let target_data_layout =\n+        stdout.split_once(r#\"\"data-layout\": \"\"#).unwrap().1.split_once('\"').unwrap().0.to_owned();\n+\n+    let ra_fixture = format!(\n+        \"{minicore}//- /main.rs crate:test target_data_layout:{target_data_layout}\\n{ra_fixture}\",\n+    );\n+\n+    let (db, file_id) = TestDB::with_single_file(&ra_fixture);\n     let module_id = db.module_for_file(file_id);\n     let def_map = module_id.def_map(&db);\n     let scope = &def_map[module_id.local_id].scope;\n@@ -20,15 +34,11 @@ fn eval_goal(ra_fixture: &str) -> Result<Layout, LayoutError> {\n         .find_map(|x| match x {\n             hir_def::ModuleDefId::AdtId(x) => {\n                 let name = match x {\n-                    hir_def::AdtId::StructId(x) => db.struct_data(x).name.to_string(),\n-                    hir_def::AdtId::UnionId(x) => db.union_data(x).name.to_string(),\n-                    hir_def::AdtId::EnumId(x) => db.enum_data(x).name.to_string(),\n+                    hir_def::AdtId::StructId(x) => db.struct_data(x).name.to_smol_str(),\n+                    hir_def::AdtId::UnionId(x) => db.union_data(x).name.to_smol_str(),\n+                    hir_def::AdtId::EnumId(x) => db.enum_data(x).name.to_smol_str(),\n                 };\n-                if name == \"Goal\" {\n-                    Some(x)\n-                } else {\n-                    None\n-                }\n+                (name == \"Goal\").then(|| x)\n             }\n             _ => None,\n         })\n@@ -38,15 +48,15 @@ fn eval_goal(ra_fixture: &str) -> Result<Layout, LayoutError> {\n }\n \n #[track_caller]\n-fn check_size_and_align(ra_fixture: &str, size: u64, align: u64) {\n-    let l = eval_goal(ra_fixture).unwrap();\n+fn check_size_and_align(ra_fixture: &str, minicore: &str, size: u64, align: u64) {\n+    let l = eval_goal(ra_fixture, minicore).unwrap();\n     assert_eq!(l.size.bytes(), size);\n     assert_eq!(l.align.abi.bytes(), align);\n }\n \n #[track_caller]\n fn check_fail(ra_fixture: &str, e: LayoutError) {\n-    let r = eval_goal(ra_fixture);\n+    let r = eval_goal(ra_fixture, \"\");\n     assert_eq!(r, Err(e));\n }\n \n@@ -56,7 +66,8 @@ macro_rules! size_and_align {\n             #[allow(dead_code)]\n             $($t)*\n             check_size_and_align(\n-                &format!(\"//- minicore: {}\\n{}\", stringify!($($x),*), stringify!($($t)*)),\n+                stringify!($($t)*),\n+                &format!(\"//- minicore: {}\\n\", stringify!($($x),*)),\n                 ::std::mem::size_of::<Goal>() as u64,\n                 ::std::mem::align_of::<Goal>() as u64,\n             );\n@@ -68,6 +79,7 @@ macro_rules! size_and_align {\n             $($t)*\n             check_size_and_align(\n                 stringify!($($t)*),\n+                \"\",\n                 ::std::mem::size_of::<Goal>() as u64,\n                 ::std::mem::align_of::<Goal>() as u64,\n             );"}, {"sha": "835f2b3dd031caf9986ea0be35cbb27961903c8b", "filename": "crates/project-model/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a694c342fa5b121de7562e4bd8beca3f7a8b8d97/crates%2Fproject-model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a694c342fa5b121de7562e4bd8beca3f7a8b8d97/crates%2Fproject-model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Flib.rs?ref=a694c342fa5b121de7562e4bd8beca3f7a8b8d97", "patch": "@@ -25,6 +25,7 @@ mod sysroot;\n mod workspace;\n mod rustc_cfg;\n mod build_scripts;\n+mod target_data_layout;\n \n #[cfg(test)]\n mod tests;"}, {"sha": "b9d7d2338c39ca02f2438f1e5e7d65022579ce88", "filename": "crates/project-model/src/target_data_layout.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a694c342fa5b121de7562e4bd8beca3f7a8b8d97/crates%2Fproject-model%2Fsrc%2Ftarget_data_layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a694c342fa5b121de7562e4bd8beca3f7a8b8d97/crates%2Fproject-model%2Fsrc%2Ftarget_data_layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftarget_data_layout.rs?ref=a694c342fa5b121de7562e4bd8beca3f7a8b8d97", "patch": "@@ -0,0 +1,40 @@\n+//! Runs `rustc --print target-spec-json` to get the target_data_layout.\n+use std::process::Command;\n+\n+use rustc_hash::FxHashMap;\n+\n+use crate::{utf8_stdout, ManifestPath};\n+\n+pub(super) fn get(\n+    cargo_toml: Option<&ManifestPath>,\n+    target: Option<&str>,\n+    extra_env: &FxHashMap<String, String>,\n+) -> Option<String> {\n+    let output = (|| {\n+        if let Some(cargo_toml) = cargo_toml {\n+            let mut cmd = Command::new(toolchain::rustc());\n+            cmd.envs(extra_env);\n+            cmd.current_dir(cargo_toml.parent())\n+                .args(&[\"-Z\", \"unstable-options\", \"rustc\", \"--print\", \"target-spec-json\"])\n+                .env(\"RUSTC_BOOTSTRAP\", \"1\");\n+            if let Some(target) = target {\n+                cmd.args(&[\"--target\", target]);\n+            }\n+            match utf8_stdout(cmd) {\n+                Ok(it) => return Ok(it),\n+                Err(e) => tracing::debug!(\"{e:?}: falling back to querying rustc for cfgs\"),\n+            }\n+        }\n+        // using unstable cargo features failed, fall back to using plain rustc\n+        let mut cmd = Command::new(toolchain::rustc());\n+        cmd.envs(extra_env)\n+            .args(&[\"-Z\", \"unstable-options\", \"rustc\", \"--print\", \"target-spec-json\"])\n+            .env(\"RUSTC_BOOTSTRAP\", \"1\");\n+        if let Some(target) = target {\n+            cmd.args(&[\"--target\", target]);\n+        }\n+        utf8_stdout(cmd)\n+    })()\n+    .ok()?;\n+    Some(output.split_once(r#\"\"data-layout\": \"\"#)?.1.split_once('\"')?.0.to_owned())\n+}"}, {"sha": "adb106e97931464c3762ce9ca4a73ef004bb9246", "filename": "crates/project-model/src/tests.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a694c342fa5b121de7562e4bd8beca3f7a8b8d97/crates%2Fproject-model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a694c342fa5b121de7562e4bd8beca3f7a8b8d97/crates%2Fproject-model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftests.rs?ref=a694c342fa5b121de7562e4bd8beca3f7a8b8d97", "patch": "@@ -151,6 +151,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 \"debug_assertions\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -220,6 +221,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 \"debug_assertions\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -298,6 +300,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 \"debug_assertions\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -376,6 +379,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 \"debug_assertions\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -463,6 +467,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 \"feature=use_std\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -548,6 +553,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 \"test\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -619,6 +625,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 \"test\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -699,6 +706,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 \"test\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -779,6 +787,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 \"test\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -866,6 +875,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 \"feature=use_std\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -942,6 +952,7 @@ fn cargo_hello_world_project_model() {\n                                 \"test\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -1013,6 +1024,7 @@ fn cargo_hello_world_project_model() {\n                                 \"test\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -1093,6 +1105,7 @@ fn cargo_hello_world_project_model() {\n                                 \"test\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -1173,6 +1186,7 @@ fn cargo_hello_world_project_model() {\n                                 \"test\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -1260,6 +1274,7 @@ fn cargo_hello_world_project_model() {\n                                 \"feature=use_std\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -1328,6 +1343,7 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1372,6 +1388,7 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1406,6 +1423,7 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1440,6 +1458,7 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1474,6 +1493,7 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1518,6 +1538,7 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1552,6 +1573,7 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1659,6 +1681,7 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1693,6 +1716,7 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1727,6 +1751,7 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1761,6 +1786,7 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {},\n                         },"}, {"sha": "52ac3b6dc02840576b4ca4eda45399fd6f8802b0", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 7, "deletions": 38, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a694c342fa5b121de7562e4bd8beca3f7a8b8d97/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a694c342fa5b121de7562e4bd8beca3f7a8b8d97/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=a694c342fa5b121de7562e4bd8beca3f7a8b8d97", "patch": "@@ -21,8 +21,8 @@ use crate::{\n     cfg_flag::CfgFlag,\n     rustc_cfg,\n     sysroot::SysrootCrate,\n-    utf8_stdout, CargoConfig, CargoWorkspace, InvocationStrategy, ManifestPath, Package,\n-    ProjectJson, ProjectManifest, Sysroot, TargetKind, WorkspaceBuildScripts,\n+    target_data_layout, utf8_stdout, CargoConfig, CargoWorkspace, InvocationStrategy, ManifestPath,\n+    Package, ProjectJson, ProjectManifest, Sysroot, TargetKind, WorkspaceBuildScripts,\n };\n \n /// A set of cfg-overrides per crate.\n@@ -143,40 +143,6 @@ impl fmt::Debug for ProjectWorkspace {\n     }\n }\n \n-fn data_layout(\n-    cargo_toml: Option<&ManifestPath>,\n-    target: Option<&str>,\n-    extra_env: &FxHashMap<String, String>,\n-) -> Option<String> {\n-    let output = (|| {\n-        if let Some(cargo_toml) = cargo_toml {\n-            let mut cmd = Command::new(toolchain::rustc());\n-            cmd.envs(extra_env);\n-            cmd.current_dir(cargo_toml.parent())\n-                .args(&[\"-Z\", \"unstable-options\", \"rustc\", \"--print\", \"target-spec-json\"])\n-                .env(\"RUSTC_BOOTSTRAP\", \"1\");\n-            if let Some(target) = target {\n-                cmd.args(&[\"--target\", target]);\n-            }\n-            match utf8_stdout(cmd) {\n-                Ok(it) => return Ok(it),\n-                Err(e) => tracing::debug!(\"{e:?}: falling back to querying rustc for cfgs\"),\n-            }\n-        }\n-        // using unstable cargo features failed, fall back to using plain rustc\n-        let mut cmd = Command::new(toolchain::rustc());\n-        cmd.envs(extra_env)\n-            .args(&[\"-Z\", \"unstable-options\", \"rustc\", \"--print\", \"target-spec-json\"])\n-            .env(\"RUSTC_BOOTSTRAP\", \"1\");\n-        if let Some(target) = target {\n-            cmd.args(&[\"--target\", target]);\n-        }\n-        utf8_stdout(cmd)\n-    })()\n-    .ok()?;\n-    Some(output.split_once(r#\"\"data-layout\": \"#)?.1.trim_matches('\"').to_owned())\n-}\n-\n impl ProjectWorkspace {\n     pub fn load(\n         manifest: ProjectManifest,\n@@ -278,8 +244,11 @@ impl ProjectWorkspace {\n                     rustc_cfg::get(Some(&cargo_toml), config.target.as_deref(), &config.extra_env);\n \n                 let cfg_overrides = config.cfg_overrides();\n-                let data_layout =\n-                    data_layout(Some(&cargo_toml), config.target.as_deref(), &config.extra_env);\n+                let data_layout = target_data_layout::get(\n+                    Some(&cargo_toml),\n+                    config.target.as_deref(),\n+                    &config.extra_env,\n+                );\n                 ProjectWorkspace::Cargo {\n                     cargo,\n                     build_scripts: WorkspaceBuildScripts::default(),"}, {"sha": "73e72c18809b59702f7fdd074f70fca6b278c80f", "filename": "crates/test-utils/src/fixture.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a694c342fa5b121de7562e4bd8beca3f7a8b8d97/crates%2Ftest-utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a694c342fa5b121de7562e4bd8beca3f7a8b8d97/crates%2Ftest-utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Ffixture.rs?ref=a694c342fa5b121de7562e4bd8beca3f7a8b8d97", "patch": "@@ -78,6 +78,7 @@ pub struct Fixture {\n     pub edition: Option<String>,\n     pub env: FxHashMap<String, String>,\n     pub introduce_new_source_root: Option<String>,\n+    pub target_data_layout: Option<String>,\n }\n \n pub struct MiniCore {\n@@ -181,6 +182,7 @@ impl Fixture {\n         let mut cfg_key_values = Vec::new();\n         let mut env = FxHashMap::default();\n         let mut introduce_new_source_root = None;\n+        let mut target_data_layout = None;\n         for component in components[1..].iter() {\n             let (key, value) = component\n                 .split_once(':')\n@@ -213,6 +215,7 @@ impl Fixture {\n                     }\n                 }\n                 \"new_source_root\" => introduce_new_source_root = Some(value.to_string()),\n+                \"target_data_layout\" => target_data_layout = Some(value.to_string()),\n                 _ => panic!(\"bad component: {:?}\", component),\n             }\n         }\n@@ -237,6 +240,7 @@ impl Fixture {\n             edition,\n             env,\n             introduce_new_source_root,\n+            target_data_layout,\n         }\n     }\n }"}]}