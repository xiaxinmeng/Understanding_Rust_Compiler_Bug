{"sha": "b95852b93c8a7b70f9238b0bbd787de68c9241bd", "node_id": "C_kwDOAAsO6NoAKGI5NTg1MmI5M2M4YTdiNzBmOTIzOGIwYmJkNzg3ZGU2OGM5MjQxYmQ", "commit": {"author": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2023-04-11T23:38:00Z"}, "committer": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2023-04-21T09:14:03Z"}, "message": "test improvements", "tree": {"sha": "11b851c29acb42f4cfa3017ff4a97a4d50dcb5d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11b851c29acb42f4cfa3017ff4a97a4d50dcb5d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b95852b93c8a7b70f9238b0bbd787de68c9241bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b95852b93c8a7b70f9238b0bbd787de68c9241bd", "html_url": "https://github.com/rust-lang/rust/commit/b95852b93c8a7b70f9238b0bbd787de68c9241bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b95852b93c8a7b70f9238b0bbd787de68c9241bd/comments", "author": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61f23e0003af417f0103ffe01718a3198ef9451e", "url": "https://api.github.com/repos/rust-lang/rust/commits/61f23e0003af417f0103ffe01718a3198ef9451e", "html_url": "https://github.com/rust-lang/rust/commit/61f23e0003af417f0103ffe01718a3198ef9451e"}], "stats": {"total": 171, "additions": 147, "deletions": 24}, "files": [{"sha": "e72771b61f8ba1962bce70ca95c4ff34cfa3d2c0", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b95852b93c8a7b70f9238b0bbd787de68c9241bd/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b95852b93c8a7b70f9238b0bbd787de68c9241bd/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=b95852b93c8a7b70f9238b0bbd787de68c9241bd", "patch": "@@ -2048,7 +2048,11 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n             }\n             UnaryOp(ref op, ref a) => write!(fmt, \"{:?}({:?})\", op, a),\n             Discriminant(ref place) => write!(fmt, \"discriminant({:?})\", place),\n-            NullaryOp(ref op, ref t) => write!(fmt, \"{:?}({:?})\", op, t),\n+            NullaryOp(ref op, ref t) => match op {\n+                NullOp::SizeOf => write!(fmt, \"SizeOf({:?})\", t),\n+                NullOp::AlignOf => write!(fmt, \"AlignOf({:?})\", t),\n+                NullOp::OffsetOf(fields) => write!(fmt, \"OffsetOf({:?}, {:?})\", t, fields),\n+            },\n             ThreadLocalRef(did) => ty::tls::with(|tcx| {\n                 let muta = tcx.static_mutability(did).unwrap().prefix_str();\n                 write!(fmt, \"&/*tls*/ {}{}\", muta, tcx.def_path_str(did))"}, {"sha": "2351406ddd252fe9e9a9f46ea1d55e7773a0d78f", "filename": "library/core/tests/mem.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b95852b93c8a7b70f9238b0bbd787de68c9241bd/library%2Fcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b95852b93c8a7b70f9238b0bbd787de68c9241bd/library%2Fcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmem.rs?ref=b95852b93c8a7b70f9238b0bbd787de68c9241bd", "patch": "@@ -438,3 +438,24 @@ fn offset_of_dst() {\n     assert_eq!(offset_of!(Foo, x), 0);\n     assert_eq!(offset_of!(Foo, y), 2);\n }\n+\n+#[test]\n+#[cfg(not(bootstrap))]\n+fn offset_of_addr() {\n+    #[repr(C)]\n+    struct Foo {\n+        x: u8,\n+        y: u16,\n+        z: Bar,\n+    }\n+\n+    #[repr(C)]\n+    struct Bar(u8, u8);\n+\n+    let base = Foo { x: 0, y: 0, z: Bar(0, 0) };\n+\n+    assert_eq!(ptr::addr_of!(base).addr() + offset_of!(Foo, x), ptr::addr_of!(base.x).addr());\n+    assert_eq!(ptr::addr_of!(base).addr() + offset_of!(Foo, y), ptr::addr_of!(base.y).addr());\n+    assert_eq!(ptr::addr_of!(base).addr() + offset_of!(Foo, z.0), ptr::addr_of!(base.z.0).addr());\n+    assert_eq!(ptr::addr_of!(base).addr() + offset_of!(Foo, z.1), ptr::addr_of!(base.z.1).addr());\n+}"}, {"sha": "4e2f1b39d2b160b3c46a1d43634f5f3dcb693b99", "filename": "tests/mir-opt/const_prop/offset_of.concrete.ConstProp.diff", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b95852b93c8a7b70f9238b0bbd787de68c9241bd/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.concrete.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b95852b93c8a7b70f9238b0bbd787de68c9241bd/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.concrete.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.concrete.ConstProp.diff?ref=b95852b93c8a7b70f9238b0bbd787de68c9241bd", "patch": "@@ -1,8 +1,8 @@\n-- // MIR for `main` before ConstProp\n-+ // MIR for `main` after ConstProp\n+- // MIR for `concrete` before ConstProp\n++ // MIR for `concrete` after ConstProp\n   \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/offset_of.rs:+0:11: +0:11\n+  fn concrete() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/offset_of.rs:+0:15: +0:15\n       let _1: usize;                       // in scope 0 at $DIR/offset_of.rs:+1:9: +1:10\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/offset_of.rs:+1:9: +1:10\n@@ -22,17 +22,17 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/offset_of.rs:+1:9: +1:10\n--         _1 = OffsetOf([0])(Foo);         // scope 0 at $DIR/offset_of.rs:+1:13: +1:31\n-+         _1 = const 0_usize;              // scope 0 at $DIR/offset_of.rs:+1:13: +1:31\n+-         _1 = OffsetOf(Alpha, [0]);       // scope 0 at $DIR/offset_of.rs:+1:13: +1:33\n++         _1 = const 4_usize;              // scope 0 at $DIR/offset_of.rs:+1:13: +1:33\n           StorageLive(_2);                 // scope 1 at $DIR/offset_of.rs:+2:9: +2:10\n--         _2 = OffsetOf([1])(Foo);         // scope 1 at $DIR/offset_of.rs:+2:13: +2:31\n-+         _2 = const 2_usize;              // scope 1 at $DIR/offset_of.rs:+2:13: +2:31\n+-         _2 = OffsetOf(Alpha, [1]);       // scope 1 at $DIR/offset_of.rs:+2:13: +2:33\n++         _2 = const 0_usize;              // scope 1 at $DIR/offset_of.rs:+2:13: +2:33\n           StorageLive(_3);                 // scope 2 at $DIR/offset_of.rs:+3:9: +3:11\n--         _3 = OffsetOf([2, 0])(Foo);      // scope 2 at $DIR/offset_of.rs:+3:14: +3:34\n-+         _3 = const 4_usize;              // scope 2 at $DIR/offset_of.rs:+3:14: +3:34\n+-         _3 = OffsetOf(Alpha, [2, 0]);    // scope 2 at $DIR/offset_of.rs:+3:14: +3:36\n++         _3 = const 2_usize;              // scope 2 at $DIR/offset_of.rs:+3:14: +3:36\n           StorageLive(_4);                 // scope 3 at $DIR/offset_of.rs:+4:9: +4:11\n--         _4 = OffsetOf([2, 1])(Foo);      // scope 3 at $DIR/offset_of.rs:+4:14: +4:34\n-+         _4 = const 5_usize;              // scope 3 at $DIR/offset_of.rs:+4:14: +4:34\n+-         _4 = OffsetOf(Alpha, [2, 1]);    // scope 3 at $DIR/offset_of.rs:+4:14: +4:36\n++         _4 = const 3_usize;              // scope 3 at $DIR/offset_of.rs:+4:14: +4:36\n           StorageDead(_4);                 // scope 3 at $DIR/offset_of.rs:+5:1: +5:2\n           StorageDead(_3);                 // scope 2 at $DIR/offset_of.rs:+5:1: +5:2\n           StorageDead(_2);                 // scope 1 at $DIR/offset_of.rs:+5:1: +5:2", "previous_filename": "tests/mir-opt/const_prop/offset_of.main.ConstProp.diff"}, {"sha": "5c6cb47089e82201d089e77162ddc93f5166d54d", "filename": "tests/mir-opt/const_prop/offset_of.generic.ConstProp.diff", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b95852b93c8a7b70f9238b0bbd787de68c9241bd/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.generic.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b95852b93c8a7b70f9238b0bbd787de68c9241bd/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.generic.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.generic.ConstProp.diff?ref=b95852b93c8a7b70f9238b0bbd787de68c9241bd", "patch": "@@ -0,0 +1,39 @@\n+- // MIR for `generic` before ConstProp\n++ // MIR for `generic` after ConstProp\n+  \n+  fn generic() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/offset_of.rs:+0:17: +0:17\n+      let _1: usize;                       // in scope 0 at $DIR/offset_of.rs:+1:9: +1:11\n+      scope 1 {\n+          debug gx => _1;                  // in scope 1 at $DIR/offset_of.rs:+1:9: +1:11\n+          let _2: usize;                   // in scope 1 at $DIR/offset_of.rs:+2:9: +2:11\n+          scope 2 {\n+              debug gy => _2;              // in scope 2 at $DIR/offset_of.rs:+2:9: +2:11\n+              let _3: usize;               // in scope 2 at $DIR/offset_of.rs:+3:9: +3:11\n+              scope 3 {\n+                  debug dx => _3;          // in scope 3 at $DIR/offset_of.rs:+3:9: +3:11\n+                  let _4: usize;           // in scope 3 at $DIR/offset_of.rs:+4:9: +4:11\n+                  scope 4 {\n+                      debug dy => _4;      // in scope 4 at $DIR/offset_of.rs:+4:9: +4:11\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/offset_of.rs:+1:9: +1:11\n+          _1 = OffsetOf(Gamma<T>, [0]);    // scope 0 at $DIR/offset_of.rs:+1:14: +1:37\n+          StorageLive(_2);                 // scope 1 at $DIR/offset_of.rs:+2:9: +2:11\n+          _2 = OffsetOf(Gamma<T>, [1]);    // scope 1 at $DIR/offset_of.rs:+2:14: +2:37\n+          StorageLive(_3);                 // scope 2 at $DIR/offset_of.rs:+3:9: +3:11\n+          _3 = OffsetOf(Delta<T>, [1]);    // scope 2 at $DIR/offset_of.rs:+3:14: +3:37\n+          StorageLive(_4);                 // scope 3 at $DIR/offset_of.rs:+4:9: +4:11\n+          _4 = OffsetOf(Delta<T>, [2]);    // scope 3 at $DIR/offset_of.rs:+4:14: +4:37\n+          StorageDead(_4);                 // scope 3 at $DIR/offset_of.rs:+5:1: +5:2\n+          StorageDead(_3);                 // scope 2 at $DIR/offset_of.rs:+5:1: +5:2\n+          StorageDead(_2);                 // scope 1 at $DIR/offset_of.rs:+5:1: +5:2\n+          StorageDead(_1);                 // scope 0 at $DIR/offset_of.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/offset_of.rs:+5:2: +5:2\n+      }\n+  }\n+  "}, {"sha": "eabdf848079862c70d0f9d29f2f37f40fe6967bd", "filename": "tests/mir-opt/const_prop/offset_of.rs", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b95852b93c8a7b70f9238b0bbd787de68c9241bd/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b95852b93c8a7b70f9238b0bbd787de68c9241bd/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.rs?ref=b95852b93c8a7b70f9238b0bbd787de68c9241bd", "patch": "@@ -1,25 +1,49 @@\n // unit-test\n // compile-flags: -O\n \n-// EMIT_MIR offset_of.main.ConstProp.diff\n-\n #![feature(offset_of)]\n \n+use std::marker::PhantomData;\n use std::mem::offset_of;\n \n-#[repr(C)]\n-struct Foo {\n+struct Alpha {\n+    x: u8,\n+    y: u16,\n+    z: Beta,\n+}\n+\n+struct Beta(u8, u8);\n+\n+struct Gamma<T> {\n     x: u8,\n     y: u16,\n-    z: Bar,\n+    _t: T,\n }\n \n #[repr(C)]\n-struct Bar(u8, u8);\n+struct Delta<T> {\n+    _phantom: PhantomData<T>,\n+    x: u8,\n+    y: u16,\n+}\n+\n+// EMIT_MIR offset_of.concrete.ConstProp.diff\n+fn concrete() {\n+    let x = offset_of!(Alpha, x);\n+    let y = offset_of!(Alpha, y);\n+    let z0 = offset_of!(Alpha, z.0);\n+    let z1 = offset_of!(Alpha, z.1);\n+}\n+\n+// EMIT_MIR offset_of.generic.ConstProp.diff\n+fn generic<T>() {\n+    let gx = offset_of!(Gamma<T>, x);\n+    let gy = offset_of!(Gamma<T>, y);\n+    let dx = offset_of!(Delta<T>, x);\n+    let dy = offset_of!(Delta<T>, y);\n+}\n \n fn main() {\n-    let x = offset_of!(Foo, x);\n-    let y = offset_of!(Foo, y);\n-    let z0 = offset_of!(Foo, z.0);\n-    let z1 = offset_of!(Foo, z.1);\n+    concrete();\n+    generic::<()>();\n }"}, {"sha": "da91de3862fc83c164b7dbd26c47bd183f176bf9", "filename": "tests/ui/liveness/liveness-offset-of.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b95852b93c8a7b70f9238b0bbd787de68c9241bd/tests%2Fui%2Fliveness%2Fliveness-offset-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b95852b93c8a7b70f9238b0bbd787de68c9241bd/tests%2Fui%2Fliveness%2Fliveness-offset-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliveness%2Fliveness-offset-of.rs?ref=b95852b93c8a7b70f9238b0bbd787de68c9241bd", "patch": "@@ -19,8 +19,26 @@ struct Gamma {\n     b: (),\n }\n \n+struct Delta {\n+    a: (),\n+    b: (), //~ ERROR field `b` is never read\n+}\n+\n+trait Trait {\n+    type Assoc;\n+}\n+impl Trait for () {\n+    type Assoc = Delta;\n+}\n+\n+struct Project<T: Trait> {\n+    a: u8, //~ ERROR field `a` is never read\n+    b: <T as Trait>::Assoc,\n+}\n+\n fn main() {\n     offset_of!(Alpha, a);\n     offset_of!(Alpha, c.b);\n     offset_of!((Gamma,), 0.b);\n+    offset_of!(Project::<()>, b.a);\n }"}, {"sha": "afc4c590eebbd229fa4fb992b0681bfadfbecccc", "filename": "tests/ui/liveness/liveness-offset-of.stderr", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b95852b93c8a7b70f9238b0bbd787de68c9241bd/tests%2Fui%2Fliveness%2Fliveness-offset-of.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b95852b93c8a7b70f9238b0bbd787de68c9241bd/tests%2Fui%2Fliveness%2Fliveness-offset-of.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliveness%2Fliveness-offset-of.stderr?ref=b95852b93c8a7b70f9238b0bbd787de68c9241bd", "patch": "@@ -29,5 +29,22 @@ LL | struct Gamma {\n LL |     a: (),\n    |     ^\n \n-error: aborting due to 3 previous errors\n+error: field `b` is never read\n+  --> $DIR/liveness-offset-of.rs:24:5\n+   |\n+LL | struct Delta {\n+   |        ----- field in this struct\n+LL |     a: (),\n+LL |     b: (),\n+   |     ^\n+\n+error: field `a` is never read\n+  --> $DIR/liveness-offset-of.rs:35:5\n+   |\n+LL | struct Project<T: Trait> {\n+   |        ------- field in this struct\n+LL |     a: u8,\n+   |     ^\n+\n+error: aborting due to 5 previous errors\n "}]}