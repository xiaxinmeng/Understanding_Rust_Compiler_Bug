{"sha": "7acaa73377e9ed8b337a66c968286e6581dc7b24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhY2FhNzMzNzdlOWVkOGIzMzdhNjZjOTY4Mjg2ZTY1ODFkYzdiMjQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T23:51:39Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:32Z"}, "message": "librustc: De-`@mut` `ScopeInfo::cleanup_paths`", "tree": {"sha": "309a7174b1c4a02723de78a3ffed8cd932ad6d65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/309a7174b1c4a02723de78a3ffed8cd932ad6d65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7acaa73377e9ed8b337a66c968286e6581dc7b24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7acaa73377e9ed8b337a66c968286e6581dc7b24", "html_url": "https://github.com/rust-lang/rust/commit/7acaa73377e9ed8b337a66c968286e6581dc7b24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7acaa73377e9ed8b337a66c968286e6581dc7b24/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89a85e45c5e29f4b465b01ac0afa3986b19ababf", "url": "https://api.github.com/repos/rust-lang/rust/commits/89a85e45c5e29f4b465b01ac0afa3986b19ababf", "html_url": "https://github.com/rust-lang/rust/commit/89a85e45c5e29f4b465b01ac0afa3986b19ababf"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "f576d1cc97a563a662300dfb78803db2f90a0d3c", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7acaa73377e9ed8b337a66c968286e6581dc7b24/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acaa73377e9ed8b337a66c968286e6581dc7b24/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=7acaa73377e9ed8b337a66c968286e6581dc7b24", "patch": "@@ -1223,7 +1223,7 @@ pub fn simple_block_scope(parent: Option<@mut ScopeInfo>,\n         loop_break: None,\n         loop_label: None,\n         cleanups: RefCell::new(~[]),\n-        cleanup_paths: ~[],\n+        cleanup_paths: RefCell::new(~[]),\n         landing_pad: None,\n         node_info: node_info,\n     }\n@@ -1253,7 +1253,7 @@ pub fn loop_scope_block(bcx: @Block,\n         loop_break: Some(loop_break),\n         loop_label: loop_label,\n         cleanups: RefCell::new(~[]),\n-        cleanup_paths: ~[],\n+        cleanup_paths: RefCell::new(~[]),\n         landing_pad: None,\n         node_info: opt_node_info,\n     }), bcx.is_lpad, n, opt_node_info);\n@@ -1333,7 +1333,12 @@ pub fn cleanup_and_leave(bcx: @Block,\n                         let mut skip = 0;\n                         let mut dest = None;\n                         {\n-                            let r = (*inf).cleanup_paths.rev_iter().find(|cp| cp.target == leave);\n+                            let cleanup_paths = inf.cleanup_paths.borrow();\n+                            let r = cleanup_paths.get()\n+                                                 .rev_iter()\n+                                                 .find(|cp| {\n+                                cp.target == leave\n+                            });\n                             for cp in r.iter() {\n                                 let cleanups = inf.cleanups.borrow();\n                                 if cp.size == cleanups.get().len() {\n@@ -1348,7 +1353,9 @@ pub fn cleanup_and_leave(bcx: @Block,\n                         let sub_cx = sub_block(bcx, \"cleanup\");\n                         Br(bcx, sub_cx.llbb);\n                         let cleanups = inf.cleanups.borrow();\n-                        inf.cleanup_paths.push(cleanup_path {\n+                        let mut cleanup_paths = inf.cleanup_paths\n+                                                   .borrow_mut();\n+                        cleanup_paths.get().push(cleanup_path {\n                             target: leave,\n                             size: cleanups.get().len(),\n                             dest: sub_cx.llbb"}, {"sha": "9940bdac8d87d6ae93765db651601bf6d03b60b3", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7acaa73377e9ed8b337a66c968286e6581dc7b24/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acaa73377e9ed8b337a66c968286e6581dc7b24/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=7acaa73377e9ed8b337a66c968286e6581dc7b24", "patch": "@@ -432,8 +432,15 @@ pub struct cleanup_path {\n \n pub fn shrink_scope_clean(scope_info: &mut ScopeInfo, size: uint) {\n     scope_info.landing_pad = None;\n-    scope_info.cleanup_paths = scope_info.cleanup_paths.iter()\n-            .take_while(|&cu| cu.size <= size).map(|&x|x).collect();\n+    let new_cleanup_paths = {\n+        let cleanup_paths = scope_info.cleanup_paths.borrow();\n+        cleanup_paths.get()\n+                     .iter()\n+                     .take_while(|&cu| cu.size <= size)\n+                     .map(|&x| x)\n+                     .collect()\n+    };\n+    scope_info.cleanup_paths.set(new_cleanup_paths)\n }\n \n pub fn grow_scope_clean(scope_info: &mut ScopeInfo) {\n@@ -625,7 +632,7 @@ pub struct ScopeInfo {\n     cleanups: RefCell<~[cleanup]>,\n     // Existing cleanup paths that may be reused, indexed by destination and\n     // cleared when the set of cleanups changes.\n-    cleanup_paths: ~[cleanup_path],\n+    cleanup_paths: RefCell<~[cleanup_path]>,\n     // Unwinding landing pad. Also cleared when cleanups change.\n     landing_pad: Option<BasicBlockRef>,\n     // info about the AST node this scope originated from, if any"}]}