{"sha": "dd906ef7ec33240af1a17dee4ac933f363c987b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkOTA2ZWY3ZWMzMzI0MGFmMWExN2RlZTRhYzkzM2YzNjNjOTg3YjA=", "commit": {"author": {"name": "alexey zabelin", "email": "zabelin.alex@gmail.com", "date": "2017-04-25T22:28:08Z"}, "committer": {"name": "alexey zabelin", "email": "zabelin.alex@gmail.com", "date": "2017-04-25T22:28:08Z"}, "message": "Fix error message for mismatched types\n\nThis addresses #41425 by implementing the changes mentioned in the\nfollowing comment:\nhttps://github.com/rust-lang/rust/issues/41425#issuecomment-296754508", "tree": {"sha": "da85ae6143684203b69ad1f41690d1f1e58ce14c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da85ae6143684203b69ad1f41690d1f1e58ce14c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd906ef7ec33240af1a17dee4ac933f363c987b0", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEyGBf8fbcGdY6ClTCOhaZhUeDJOkFAlj/zikACgkQOhaZhUeD\nJOmMzwf+JhNACMAB3WQRlSH3t7y69rU7ntqsdKDD/RcFYJJrsW/J8uryrjYid3d/\nwHstvTIg+7NkSBAeQD3UPLG0hKia8D1csWP3MRVpP3cxP/IVtXcuszjmuIxG7hZ1\nGItGYHuDkD+d/zFLmC6Be7fqDOBwBPlIpoayHLoyOAc1Imjkz5a0wsmW4/93aYjF\nkvV5MlUpjFjwm3ji/9zpaM+JcMBZMMZw2du4pbbtlCLW8SuOl8wmPfvhhFMMRxVa\nHklVvRgIrxCvW4Q51bP0j7NfJkCZW6D0CnUH2GHaWjFBYzqqkXn9rC9Z/76bqXGH\nZbEzwFc0eFY1j6F8F0iHMvKoa+wcKw==\n=+1R4\n-----END PGP SIGNATURE-----", "payload": "tree da85ae6143684203b69ad1f41690d1f1e58ce14c\nparent 63c77214c1d38789652b465694b254205d1886e0\nauthor alexey zabelin <zabelin.alex@gmail.com> 1493159288 -0400\ncommitter alexey zabelin <zabelin.alex@gmail.com> 1493159288 -0400\n\nFix error message for mismatched types\n\nThis addresses #41425 by implementing the changes mentioned in the\nfollowing comment:\nhttps://github.com/rust-lang/rust/issues/41425#issuecomment-296754508\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd906ef7ec33240af1a17dee4ac933f363c987b0", "html_url": "https://github.com/rust-lang/rust/commit/dd906ef7ec33240af1a17dee4ac933f363c987b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd906ef7ec33240af1a17dee4ac933f363c987b0/comments", "author": {"login": "alexeyzab", "id": 5606260, "node_id": "MDQ6VXNlcjU2MDYyNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5606260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexeyzab", "html_url": "https://github.com/alexeyzab", "followers_url": "https://api.github.com/users/alexeyzab/followers", "following_url": "https://api.github.com/users/alexeyzab/following{/other_user}", "gists_url": "https://api.github.com/users/alexeyzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexeyzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexeyzab/subscriptions", "organizations_url": "https://api.github.com/users/alexeyzab/orgs", "repos_url": "https://api.github.com/users/alexeyzab/repos", "events_url": "https://api.github.com/users/alexeyzab/events{/privacy}", "received_events_url": "https://api.github.com/users/alexeyzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexeyzab", "id": 5606260, "node_id": "MDQ6VXNlcjU2MDYyNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5606260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexeyzab", "html_url": "https://github.com/alexeyzab", "followers_url": "https://api.github.com/users/alexeyzab/followers", "following_url": "https://api.github.com/users/alexeyzab/following{/other_user}", "gists_url": "https://api.github.com/users/alexeyzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexeyzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexeyzab/subscriptions", "organizations_url": "https://api.github.com/users/alexeyzab/orgs", "repos_url": "https://api.github.com/users/alexeyzab/repos", "events_url": "https://api.github.com/users/alexeyzab/events{/privacy}", "received_events_url": "https://api.github.com/users/alexeyzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63c77214c1d38789652b465694b254205d1886e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/63c77214c1d38789652b465694b254205d1886e0", "html_url": "https://github.com/rust-lang/rust/commit/63c77214c1d38789652b465694b254205d1886e0"}], "stats": {"total": 68, "additions": 54, "deletions": 14}, "files": [{"sha": "ac10dfd36e25dba5034f9795e807d7e8e5991fc0", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd906ef7ec33240af1a17dee4ac933f363c987b0/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd906ef7ec33240af1a17dee4ac933f363c987b0/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=dd906ef7ec33240af1a17dee4ac933f363c987b0", "patch": "@@ -498,7 +498,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             if is_if_let_fallback {\n                 let cause = self.cause(expr.span, ObligationCauseCode::IfExpressionWithNoElse);\n                 assert!(arm_ty.is_nil());\n-                coercion.coerce_forced_unit(self, &cause, &mut |_| ());\n+                coercion.coerce_forced_unit(self, &cause, &mut |_| (), true);\n             } else {\n                 let cause = self.cause(expr.span, ObligationCauseCode::MatchExpressionArm {\n                     arm_span: arm.body.span,"}, {"sha": "5baa8fdb9a0c267cda205c513f14ee88e5e55018", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dd906ef7ec33240af1a17dee4ac933f363c987b0/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd906ef7ec33240af1a17dee4ac933f363c987b0/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=dd906ef7ec33240af1a17dee4ac933f363c987b0", "patch": "@@ -1001,7 +1001,7 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n                       expression_ty: Ty<'tcx>,\n                       expression_diverges: Diverges)\n     {\n-        self.coerce_inner(fcx, cause, Some(expression), expression_ty, expression_diverges, None)\n+        self.coerce_inner(fcx, cause, Some(expression), expression_ty, expression_diverges, None, false)\n     }\n \n     /// Indicates that one of the inputs is a \"forced unit\". This\n@@ -1019,14 +1019,16 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n     pub fn coerce_forced_unit<'a>(&mut self,\n                                   fcx: &FnCtxt<'a, 'gcx, 'tcx>,\n                                   cause: &ObligationCause<'tcx>,\n-                                  augment_error: &mut FnMut(&mut DiagnosticBuilder))\n+                                  augment_error: &mut FnMut(&mut DiagnosticBuilder),\n+                                  label_unit_as_expected: bool)\n     {\n         self.coerce_inner(fcx,\n                           cause,\n                           None,\n                           fcx.tcx.mk_nil(),\n                           Diverges::Maybe,\n-                          Some(augment_error))\n+                          Some(augment_error),\n+                          label_unit_as_expected)\n     }\n \n     /// The inner coercion \"engine\". If `expression` is `None`, this\n@@ -1038,7 +1040,8 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n                         expression: Option<&'gcx hir::Expr>,\n                         mut expression_ty: Ty<'tcx>,\n                         expression_diverges: Diverges,\n-                        augment_error: Option<&mut FnMut(&mut DiagnosticBuilder)>)\n+                        augment_error: Option<&mut FnMut(&mut DiagnosticBuilder)>,\n+                        label_expression_as_expected: bool)\n     {\n         // Incorporate whatever type inference information we have\n         // until now; in principle we might also want to process\n@@ -1119,11 +1122,7 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n                 }\n             }\n             Err(err) => {\n-                let (expected, found) = if expression.is_none() {\n-                    // In the case where this is a \"forced unit\", like\n-                    // `break`, we want to call the `()` \"expected\"\n-                    // since it is implied by the syntax.\n-                    assert!(expression_ty.is_nil());\n+                let (expected, found) = if label_expression_as_expected {\n                     (expression_ty, self.final_ty.unwrap_or(self.expected_ty))\n                 } else {\n                     // Otherwise, the \"expected\" type for error"}, {"sha": "c64e27692be8dfd8658dd8768a4da52f7e01d97a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dd906ef7ec33240af1a17dee4ac933f363c987b0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd906ef7ec33240af1a17dee4ac933f363c987b0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=dd906ef7ec33240af1a17dee4ac933f363c987b0", "patch": "@@ -2785,7 +2785,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             self.diverges.set(cond_diverges | then_diverges & else_diverges);\n         } else {\n             let else_cause = self.cause(sp, ObligationCauseCode::IfExpressionWithNoElse);\n-            coerce.coerce_forced_unit(self, &else_cause, &mut |_| ());\n+            coerce.coerce_forced_unit(self, &else_cause, &mut |_| (), true);\n \n             // If the condition is false we can't diverge.\n             self.diverges.set(cond_diverges);\n@@ -3502,7 +3502,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                           coerce.coerce(self, &cause, e, e_ty, e_diverges);\n                       } else {\n                           assert!(e_ty.is_nil());\n-                          coerce.coerce_forced_unit(self, &cause, &mut |_| ());\n+                          coerce.coerce_forced_unit(self, &cause, &mut |_| (), true);\n                       }\n                   } else {\n                       // If `ctxt.coerce` is `None`, we can just ignore\n@@ -3537,7 +3537,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             } else {\n                 let mut coercion = self.ret_coercion.as_ref().unwrap().borrow_mut();\n                 let cause = self.cause(expr.span, ObligationCauseCode::ReturnNoExpression);\n-                coercion.coerce_forced_unit(self, &cause, &mut |_| ());\n+                coercion.coerce_forced_unit(self, &cause, &mut |_| (), true);\n             }\n             tcx.types.never\n           }\n@@ -4077,14 +4077,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // expression (assuming there are no other breaks,\n                 // this implies that the type of the block will be\n                 // `!`).\n+                //\n+                // #41425 -- label the implicit `()` as being the \"found type\" here, rather than the \"expected type\".\n                 if !self.diverges.get().always() {\n                     coerce.coerce_forced_unit(self, &self.misc(blk.span), &mut |err| {\n                         if let Some(expected_ty) = expected.only_has_type(self) {\n                             self.consider_hint_about_removing_semicolon(blk,\n                                                                         expected_ty,\n                                                                         err);\n                         }\n-                    });\n+                    }, false);\n                 }\n             }\n         });"}, {"sha": "489ad817ea8b1e0a957fefb23029be0133393a5c", "filename": "src/test/ui/coercion-missing-tail-expected-type.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dd906ef7ec33240af1a17dee4ac933f363c987b0/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd906ef7ec33240af1a17dee4ac933f363c987b0/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.rs?ref=dd906ef7ec33240af1a17dee4ac933f363c987b0", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// #41425 -- error message \"mismatched types\" has wrong types\n+\n+fn plus_one(x: i32) -> i32 {\n+    x + 1;\n+}\n+\n+fn main() {\n+    let x = plus_one(5);\n+    println!(\"X = {}\", x);\n+}"}, {"sha": "43222e36ec57e7daf0085802098491aff828a4d2", "filename": "src/test/ui/coercion-missing-tail-expected-type.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dd906ef7ec33240af1a17dee4ac933f363c987b0/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd906ef7ec33240af1a17dee4ac933f363c987b0/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.stderr?ref=dd906ef7ec33240af1a17dee4ac933f363c987b0", "patch": "@@ -0,0 +1,19 @@\n+error[E0308]: mismatched types\n+  --> $DIR/coercion-missing-tail-expected-type.rs:13:28\n+   |\n+13 |   fn plus_one(x: i32) -> i32 {\n+   |  ____________________________^\n+14 | |     x + 1;\n+15 | | }\n+   | |_^ expected (), found i32\n+   |\n+   = note: expected type `i32`\n+              found type `()`\n+help: consider removing this semicolon:\n+  --> $DIR/coercion-missing-tail-expected-type.rs:14:10\n+   |\n+14 |     x + 1;\n+   |          ^\n+\n+error: aborting due to previous error\n+"}]}