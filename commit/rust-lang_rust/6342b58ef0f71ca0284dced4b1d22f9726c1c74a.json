{"sha": "6342b58ef0f71ca0284dced4b1d22f9726c1c74a", "node_id": "C_kwDOAAsO6NoAKDYzNDJiNThlZjBmNzFjYTAyODRkY2VkNGIxZDIyZjk3MjZjMWM3NGE", "commit": {"author": {"name": "Aaron Kofsky", "email": "aaronko@umich.edu", "date": "2022-06-05T02:27:32Z"}, "committer": {"name": "Aaron Kofsky", "email": "aaronko@umich.edu", "date": "2022-06-05T02:27:32Z"}, "message": "Use diagnostic items instead of hard coded paths for `let_underscore_lock`\n\nUsing diagnostic items avoids having to update the paths if the guard\ntypes ever get moved around for some reason. Additionally, it also greatly\nsimplifies the `is_sync_lock` check.", "tree": {"sha": "de665f93801a79abbf08ac31ffdc2bea59790c1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de665f93801a79abbf08ac31ffdc2bea59790c1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6342b58ef0f71ca0284dced4b1d22f9726c1c74a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6342b58ef0f71ca0284dced4b1d22f9726c1c74a", "html_url": "https://github.com/rust-lang/rust/commit/6342b58ef0f71ca0284dced4b1d22f9726c1c74a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6342b58ef0f71ca0284dced4b1d22f9726c1c74a/comments", "author": {"login": "a2aaron", "id": 15718048, "node_id": "MDQ6VXNlcjE1NzE4MDQ4", "avatar_url": "https://avatars.githubusercontent.com/u/15718048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a2aaron", "html_url": "https://github.com/a2aaron", "followers_url": "https://api.github.com/users/a2aaron/followers", "following_url": "https://api.github.com/users/a2aaron/following{/other_user}", "gists_url": "https://api.github.com/users/a2aaron/gists{/gist_id}", "starred_url": "https://api.github.com/users/a2aaron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a2aaron/subscriptions", "organizations_url": "https://api.github.com/users/a2aaron/orgs", "repos_url": "https://api.github.com/users/a2aaron/repos", "events_url": "https://api.github.com/users/a2aaron/events{/privacy}", "received_events_url": "https://api.github.com/users/a2aaron/received_events", "type": "User", "site_admin": false}, "committer": {"login": "a2aaron", "id": 15718048, "node_id": "MDQ6VXNlcjE1NzE4MDQ4", "avatar_url": "https://avatars.githubusercontent.com/u/15718048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a2aaron", "html_url": "https://github.com/a2aaron", "followers_url": "https://api.github.com/users/a2aaron/followers", "following_url": "https://api.github.com/users/a2aaron/following{/other_user}", "gists_url": "https://api.github.com/users/a2aaron/gists{/gist_id}", "starred_url": "https://api.github.com/users/a2aaron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a2aaron/subscriptions", "organizations_url": "https://api.github.com/users/a2aaron/orgs", "repos_url": "https://api.github.com/users/a2aaron/repos", "events_url": "https://api.github.com/users/a2aaron/events{/privacy}", "received_events_url": "https://api.github.com/users/a2aaron/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6b66784aca8564557485d902968ff7523cf30ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6b66784aca8564557485d902968ff7523cf30ca", "html_url": "https://github.com/rust-lang/rust/commit/e6b66784aca8564557485d902968ff7523cf30ca"}], "stats": {"total": 34, "additions": 14, "deletions": 20}, "files": [{"sha": "2ad09312d9d56e593fc40e7e807b8affb30e85cf", "filename": "compiler/rustc_lint/src/let_underscore.rs", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6342b58ef0f71ca0284dced4b1d22f9726c1c74a/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6342b58ef0f71ca0284dced4b1d22f9726c1c74a/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs?ref=6342b58ef0f71ca0284dced4b1d22f9726c1c74a", "patch": "@@ -3,7 +3,7 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_middle::{\n     lint::LintDiagnosticBuilder,\n-    ty::{self, subst::GenericArgKind, Ty},\n+    ty::{self, Ty},\n };\n use rustc_span::Symbol;\n \n@@ -114,12 +114,10 @@ declare_lint! {\n \n declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_DROP, LET_UNDERSCORE_LOCK, LET_UNDERSCORE_MUST_USE]);\n \n-const SYNC_GUARD_PATHS: [&[&str]; 5] = [\n-    &[\"std\", \"sync\", \"mutex\", \"MutexGuard\"],\n-    &[\"std\", \"sync\", \"rwlock\", \"RwLockReadGuard\"],\n-    &[\"std\", \"sync\", \"rwlock\", \"RwLockWriteGuard\"],\n-    &[\"parking_lot\", \"raw_mutex\", \"RawMutex\"],\n-    &[\"parking_lot\", \"raw_rwlock\", \"RawRwLock\"],\n+const SYNC_GUARD_SYMBOLS: [Symbol; 3] = [\n+    rustc_span::sym::MutexGuard,\n+    rustc_span::sym::RwLockReadGuard,\n+    rustc_span::sym::RwLockWriteGuard,\n ];\n \n impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n@@ -134,19 +132,12 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n             if !init_ty.needs_drop(cx.tcx, cx.param_env) {\n                 return;\n             }\n-            let is_sync_lock = init_ty.walk().any(|inner| match inner.unpack() {\n-                GenericArgKind::Type(inner_ty) => {\n-                    SYNC_GUARD_PATHS.iter().any(|guard_path| match inner_ty.kind() {\n-                        ty::Adt(adt, _) => {\n-                            let ty_path = cx.get_def_path(adt.did());\n-                            guard_path.iter().map(|x| Symbol::intern(x)).eq(ty_path.iter().copied())\n-                        }\n-                        _ => false,\n-                    })\n-                }\n-\n-                GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n-            });\n+            let is_sync_lock = match init_ty.kind() {\n+                ty::Adt(adt, _) => SYNC_GUARD_SYMBOLS\n+                    .iter()\n+                    .any(|guard_symbol| cx.tcx.is_diagnostic_item(*guard_symbol, adt.did())),\n+                _ => false,\n+            };\n             let is_must_use_ty = is_must_use_ty(cx, cx.typeck_results().expr_ty(init));\n             let is_must_use_func_call = is_must_use_func_call(cx, init);\n "}, {"sha": "bc9f5c910df54cf2361ca991b1f1193a74c2b35f", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6342b58ef0f71ca0284dced4b1d22f9726c1c74a/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6342b58ef0f71ca0284dced4b1d22f9726c1c74a/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=6342b58ef0f71ca0284dced4b1d22f9726c1c74a", "patch": "@@ -213,6 +213,7 @@ symbols! {\n         LinkedList,\n         LintPass,\n         Mutex,\n+        MutexGuard,\n         N,\n         None,\n         Ok,\n@@ -250,6 +251,8 @@ symbols! {\n         Right,\n         RustcDecodable,\n         RustcEncodable,\n+        RwLockReadGuard,\n+        RwLockWriteGuard,\n         Send,\n         SeqCst,\n         SliceIndex,"}]}