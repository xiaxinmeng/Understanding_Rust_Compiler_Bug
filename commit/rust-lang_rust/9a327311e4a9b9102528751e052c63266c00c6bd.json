{"sha": "9a327311e4a9b9102528751e052c63266c00c6bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMzI3MzExZTRhOWI5MTAyNTI4NzUxZTA1MmM2MzI2NmMwMGM2YmQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-30T15:20:43Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-30T15:20:43Z"}, "message": "Implement basic Documentation source to syntax range mapping", "tree": {"sha": "6cddc362ef8237570c0ce1f8fef73d9dcc9eec8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cddc362ef8237570c0ce1f8fef73d9dcc9eec8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a327311e4a9b9102528751e052c63266c00c6bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a327311e4a9b9102528751e052c63266c00c6bd", "html_url": "https://github.com/rust-lang/rust/commit/9a327311e4a9b9102528751e052c63266c00c6bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a327311e4a9b9102528751e052c63266c00c6bd/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9df78ec4a4e41ca94b25f292aba90e266f104f02", "url": "https://api.github.com/repos/rust-lang/rust/commits/9df78ec4a4e41ca94b25f292aba90e266f104f02", "html_url": "https://github.com/rust-lang/rust/commit/9df78ec4a4e41ca94b25f292aba90e266f104f02"}], "stats": {"total": 185, "additions": 149, "deletions": 36}, "files": [{"sha": "7791402c96ab80376ac2131245b27b4c2ad40984", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 107, "deletions": 2, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/9a327311e4a9b9102528751e052c63266c00c6bd/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a327311e4a9b9102528751e052c63266c00c6bd/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=9a327311e4a9b9102528751e052c63266c00c6bd", "patch": "@@ -1,6 +1,10 @@\n //! A higher level attributes based on TokenTree, with also some shortcuts.\n \n-use std::{ops, sync::Arc};\n+use std::{\n+    cmp::Ordering,\n+    ops::{self, Range},\n+    sync::Arc,\n+};\n \n use base_db::CrateId;\n use cfg::{CfgExpr, CfgOptions};\n@@ -12,7 +16,7 @@ use mbe::ast_to_token_tree;\n use smallvec::{smallvec, SmallVec};\n use syntax::{\n     ast::{self, AstNode, AttrsOwner},\n-    match_ast, AstToken, SmolStr, SyntaxNode,\n+    match_ast, AstToken, SmolStr, SyntaxNode, TextRange, TextSize,\n };\n use tt::Subtree;\n \n@@ -451,6 +455,54 @@ impl AttrsWithOwner {\n                 .collect(),\n         }\n     }\n+\n+    pub fn docs_with_rangemap(\n+        &self,\n+        db: &dyn DefDatabase,\n+    ) -> Option<(Documentation, DocsRangeMap)> {\n+        // FIXME: code duplication in `docs` above\n+        let docs = self.by_key(\"doc\").attrs().flat_map(|attr| match attr.input.as_ref()? {\n+            AttrInput::Literal(s) => Some((s, attr.index)),\n+            AttrInput::TokenTree(_) => None,\n+        });\n+        let indent = docs\n+            .clone()\n+            .flat_map(|(s, _)| s.lines())\n+            .filter(|line| !line.chars().all(|c| c.is_whitespace()))\n+            .map(|line| line.chars().take_while(|c| c.is_whitespace()).count())\n+            .min()\n+            .unwrap_or(0);\n+        let mut buf = String::new();\n+        let mut mapping = Vec::new();\n+        for (doc, idx) in docs {\n+            // str::lines doesn't yield anything for the empty string\n+            if !doc.is_empty() {\n+                for line in doc.split('\\n') {\n+                    let line = line.trim_end();\n+                    let (offset, line) = match line.char_indices().nth(indent) {\n+                        Some((offset, _)) => (offset, &line[offset..]),\n+                        None => (0, line),\n+                    };\n+                    let buf_offset = buf.len();\n+                    buf.push_str(line);\n+                    mapping.push((\n+                        Range { start: buf_offset, end: buf.len() },\n+                        idx,\n+                        Range { start: offset, end: line.len() },\n+                    ));\n+                    buf.push('\\n');\n+                }\n+            } else {\n+                buf.push('\\n');\n+            }\n+        }\n+        buf.pop();\n+        if buf.is_empty() {\n+            None\n+        } else {\n+            Some((Documentation(buf), DocsRangeMap { mapping, source: self.source_map(db).attrs }))\n+        }\n+    }\n }\n \n fn inner_attributes(\n@@ -507,6 +559,59 @@ impl AttrSourceMap {\n     }\n }\n \n+/// A struct to map text ranges from [`Documentation`] back to TextRanges in the syntax tree.\n+pub struct DocsRangeMap {\n+    source: Vec<InFile<Either<ast::Attr, ast::Comment>>>,\n+    // (docstring-line-range, attr_index, attr-string-range)\n+    // a mapping from the text range of a line of the [`Documentation`] to the attribute index and\n+    // the original (untrimmed) syntax doc line\n+    mapping: Vec<(Range<usize>, u32, Range<usize>)>,\n+}\n+\n+impl DocsRangeMap {\n+    pub fn map(&self, range: Range<usize>) -> Option<InFile<TextRange>> {\n+        let found = self\n+            .mapping\n+            .binary_search_by(|(probe, ..)| {\n+                if probe.contains(&range.start) {\n+                    Ordering::Equal\n+                } else {\n+                    probe.start.cmp(&range.end)\n+                }\n+            })\n+            .ok()?;\n+        let (line_docs_range, idx, original_line_src_range) = self.mapping[found].clone();\n+        if range.end > line_docs_range.end {\n+            return None;\n+        }\n+\n+        let relative_range = Range {\n+            start: range.start - line_docs_range.start,\n+            end: range.end - line_docs_range.start,\n+        };\n+        let range_len = TextSize::from((range.end - range.start) as u32);\n+\n+        let &InFile { file_id, value: ref source } = &self.source[idx as usize];\n+        match source {\n+            Either::Left(_) => None, // FIXME, figure out a nice way to handle doc attributes here\n+            // as well as for whats done in syntax highlight doc injection\n+            Either::Right(comment) => {\n+                let text_range = comment.syntax().text_range();\n+                let range = TextRange::at(\n+                    text_range.start()\n+                        + TextSize::from(\n+                            (comment.prefix().len()\n+                                + original_line_src_range.start\n+                                + relative_range.start) as u32,\n+                        ),\n+                    text_range.len().min(range_len),\n+                );\n+                Some(InFile { file_id, value: range })\n+            }\n+        }\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct Attr {\n     index: u32,"}, {"sha": "1951c599f2291b46becef391836447268a02679a", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a327311e4a9b9102528751e052c63266c00c6bd/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a327311e4a9b9102528751e052c63266c00c6bd/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=9a327311e4a9b9102528751e052c63266c00c6bd", "patch": "@@ -32,6 +32,7 @@ pub(crate) fn goto_definition(\n     let parent = token.parent()?;\n     if let Some(comment) = ast::Comment::cast(token) {\n         let docs = doc_owner_to_def(&sema, &parent)?.docs(db)?;\n+\n         let (_, link, ns) = extract_positioned_link_from_comment(position.offset, &comment, docs)?;\n         let def = doc_owner_to_def(&sema, &parent)?;\n         let nav = resolve_doc_path_for_def(db, def, &link, ns)?.try_to_nav(db)?;"}, {"sha": "504783f31572b921ae33b9a487dd01505a06530d", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 23, "deletions": 32, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/9a327311e4a9b9102528751e052c63266c00c6bd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a327311e4a9b9102528751e052c63266c00c6bd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=9a327311e4a9b9102528751e052c63266c00c6bd", "patch": "@@ -1,6 +1,6 @@\n //! \"Recursive\" Syntax highlighting for code in doctests and fixtures.\n \n-use std::{mem, ops::Range};\n+use std::mem;\n \n use either::Either;\n use hir::{HasAttrs, InFile, Semantics};\n@@ -139,8 +139,28 @@ pub(super) fn doc_comment(\n     // Replace the original, line-spanning comment ranges by new, only comment-prefix\n     // spanning comment ranges.\n     let mut new_comments = Vec::new();\n-    let mut intra_doc_links = Vec::new();\n     let mut string;\n+\n+    if let Some((docs, doc_mapping)) = attributes.docs_with_rangemap(sema.db) {\n+        extract_definitions_from_markdown(docs.as_str())\n+            .into_iter()\n+            .filter_map(|(range, link, ns)| {\n+                let def = resolve_doc_path_for_def(sema.db, def, &link, ns)?;\n+                let InFile { file_id, value: range } = doc_mapping.map(range)?;\n+                (file_id == node.file_id).then(|| (range, def))\n+            })\n+            .for_each(|(range, def)| {\n+                hl.add(HlRange {\n+                    range,\n+                    highlight: module_def_to_hl_tag(def)\n+                        | HlMod::Documentation\n+                        | HlMod::Injected\n+                        | HlMod::IntraDocLink,\n+                    binding_hash: None,\n+                })\n+            });\n+    }\n+\n     for attr in attributes.by_key(\"doc\").attrs() {\n         let InFile { file_id, value: src } = attrs_source_map.source_of(&attr);\n         if file_id != node.file_id {\n@@ -186,25 +206,7 @@ pub(super) fn doc_comment(\n                     is_doctest = is_codeblock && is_rust;\n                     continue;\n                 }\n-                None if !is_doctest => {\n-                    intra_doc_links.extend(\n-                        extract_definitions_from_markdown(line)\n-                            .into_iter()\n-                            .filter_map(|(range, link, ns)| {\n-                                Some(range).zip(resolve_doc_path_for_def(sema.db, def, &link, ns))\n-                            })\n-                            .map(|(Range { start, end }, def)| {\n-                                (\n-                                    def,\n-                                    TextRange::at(\n-                                        prev_range_start + TextSize::from(start as u32),\n-                                        TextSize::from((end - start) as u32),\n-                                    ),\n-                                )\n-                            }),\n-                    );\n-                    continue;\n-                }\n+                None if !is_doctest => continue,\n                 None => (),\n             }\n \n@@ -223,17 +225,6 @@ pub(super) fn doc_comment(\n         }\n     }\n \n-    for (def, range) in intra_doc_links {\n-        hl.add(HlRange {\n-            range,\n-            highlight: module_def_to_hl_tag(def)\n-                | HlMod::Documentation\n-                | HlMod::Injected\n-                | HlMod::IntraDocLink,\n-            binding_hash: None,\n-        });\n-    }\n-\n     if new_comments.is_empty() {\n         return; // no need to run an analysis on an empty file\n     }"}, {"sha": "b6d1cac4ea90aa0af07ba17d6dbbd2f99848b4ec", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a327311e4a9b9102528751e052c63266c00c6bd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/9a327311e4a9b9102528751e052c63266c00c6bd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=9a327311e4a9b9102528751e052c63266c00c6bd", "patch": "@@ -100,10 +100,18 @@\n <span class=\"brace\">}</span>\n \n <span class=\"comment documentation\">/// </span><span class=\"struct documentation intra_doc_link injected\">[`Foo`](Foo)</span><span class=\"comment documentation\"> is a struct</span>\n-<span class=\"comment documentation\">/// </span><span class=\"function documentation intra_doc_link injected\">[`all_the_links`](all_the_links)</span><span class=\"comment documentation\"> is this function</span>\n+<span class=\"comment documentation\">/// This function is &gt; </span><span class=\"function documentation intra_doc_link injected\">[`all_the_links`](all_the_links)</span><span class=\"comment documentation\"> &lt;</span>\n <span class=\"comment documentation\">/// [`noop`](noop) is a macro below</span>\n+<span class=\"comment documentation\">/// </span><span class=\"struct documentation intra_doc_link injected\">[`Item`]</span><span class=\"comment documentation\"> is a struct in the module </span><span class=\"module documentation intra_doc_link injected\">[`module`]</span>\n+<span class=\"comment documentation\">///</span>\n+<span class=\"comment documentation\">/// [`Item`]: module::Item</span>\n+<span class=\"comment documentation\">/// [mix_and_match]: ThisShouldntResolve</span>\n <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">all_the_links</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n+<span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration\">module</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"struct declaration\">Item</span><span class=\"semicolon\">;</span>\n+<span class=\"brace\">}</span>\n+\n <span class=\"comment documentation\">/// ```</span>\n <span class=\"comment documentation\">/// </span><span class=\"macro injected\">noop!</span><span class=\"parenthesis injected\">(</span><span class=\"numeric_literal injected\">1</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n <span class=\"comment documentation\">/// ```</span>"}, {"sha": "1b02857ecb93a2c39d0097df2ff517bd50bbb27f", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a327311e4a9b9102528751e052c63266c00c6bd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a327311e4a9b9102528751e052c63266c00c6bd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=9a327311e4a9b9102528751e052c63266c00c6bd", "patch": "@@ -544,10 +544,18 @@ impl Foo {\n }\n \n /// [`Foo`](Foo) is a struct\n-/// [`all_the_links`](all_the_links) is this function\n+/// This function is > [`all_the_links`](all_the_links) <\n /// [`noop`](noop) is a macro below\n+/// [`Item`] is a struct in the module [`module`]\n+///\n+/// [`Item`]: module::Item\n+/// [mix_and_match]: ThisShouldntResolve\n pub fn all_the_links() {}\n \n+pub mod module {\n+    pub struct Item;\n+}\n+\n /// ```\n /// noop!(1);\n /// ```"}]}