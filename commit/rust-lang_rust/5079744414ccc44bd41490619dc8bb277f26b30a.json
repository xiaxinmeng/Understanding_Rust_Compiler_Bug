{"sha": "5079744414ccc44bd41490619dc8bb277f26b30a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNzk3NDQ0MTRjY2M0NGJkNDE0OTA2MTlkYzhiYjI3N2YyNmIzMGE=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-23T02:04:50Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-05-20T13:55:56Z"}, "message": "Remove `PrimitiveType::as_str`", "tree": {"sha": "d945d76f813c87fc576ac511c5455d954a69e59f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d945d76f813c87fc576ac511c5455d954a69e59f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5079744414ccc44bd41490619dc8bb277f26b30a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5079744414ccc44bd41490619dc8bb277f26b30a", "html_url": "https://github.com/rust-lang/rust/commit/5079744414ccc44bd41490619dc8bb277f26b30a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5079744414ccc44bd41490619dc8bb277f26b30a/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "132211bce500096330b893e939968f6b2fd5cfb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/132211bce500096330b893e939968f6b2fd5cfb0", "html_url": "https://github.com/rust-lang/rust/commit/132211bce500096330b893e939968f6b2fd5cfb0"}], "stats": {"total": 51, "additions": 10, "deletions": 41}, "files": [{"sha": "859e525627aba56d49c2d4bdd704d5df5de315a2", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5079744414ccc44bd41490619dc8bb277f26b30a/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5079744414ccc44bd41490619dc8bb277f26b30a/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=5079744414ccc44bd41490619dc8bb277f26b30a", "patch": "@@ -1767,37 +1767,6 @@ impl PrimitiveType {\n         }\n     }\n \n-    crate fn as_str(&self) -> &'static str {\n-        use self::PrimitiveType::*;\n-        match *self {\n-            Isize => \"isize\",\n-            I8 => \"i8\",\n-            I16 => \"i16\",\n-            I32 => \"i32\",\n-            I64 => \"i64\",\n-            I128 => \"i128\",\n-            Usize => \"usize\",\n-            U8 => \"u8\",\n-            U16 => \"u16\",\n-            U32 => \"u32\",\n-            U64 => \"u64\",\n-            U128 => \"u128\",\n-            F32 => \"f32\",\n-            F64 => \"f64\",\n-            Str => \"str\",\n-            Bool => \"bool\",\n-            Char => \"char\",\n-            Array => \"array\",\n-            Slice => \"slice\",\n-            Tuple => \"tuple\",\n-            Unit => \"unit\",\n-            RawPointer => \"pointer\",\n-            Reference => \"reference\",\n-            Fn => \"fn\",\n-            Never => \"never\",\n-        }\n-    }\n-\n     crate fn impls(&self, tcx: TyCtxt<'_>) -> &'static ArrayVec<DefId, 4> {\n         Self::all_impls(tcx).get(self).expect(\"missing impl for primitive type\")\n     }"}, {"sha": "8448b07d0be6b39e294fbaa9d8191eacdc8ea74c", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5079744414ccc44bd41490619dc8bb277f26b30a/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5079744414ccc44bd41490619dc8bb277f26b30a/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=5079744414ccc44bd41490619dc8bb277f26b30a", "patch": "@@ -574,7 +574,7 @@ fn primitive_link(\n                     f,\n                     \"<a class=\\\"primitive\\\" href=\\\"{}primitive.{}.html\\\">\",\n                     \"../\".repeat(len),\n-                    prim.as_str()\n+                    prim.as_sym()\n                 )?;\n                 needs_termination = true;\n             }\n@@ -603,7 +603,7 @@ fn primitive_link(\n                         f,\n                         \"<a class=\\\"primitive\\\" href=\\\"{}/primitive.{}.html\\\">\",\n                         loc.join(\"/\"),\n-                        prim.as_str()\n+                        prim.as_sym()\n                     )?;\n                     needs_termination = true;\n                 }\n@@ -677,7 +677,7 @@ fn fmt_type<'cx>(\n             fmt::Display::fmt(&tybounds(param_names, cx), f)\n         }\n         clean::Infer => write!(f, \"_\"),\n-        clean::Primitive(prim) => primitive_link(f, prim, prim.as_str(), cx),\n+        clean::Primitive(prim) => primitive_link(f, prim, &*prim.as_sym().as_str(), cx),\n         clean::BareFunction(ref decl) => {\n             if f.alternate() {\n                 write!("}, {"sha": "e0c0e241497b1f7eed084abc0e30a719110e2e9f", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5079744414ccc44bd41490619dc8bb277f26b30a/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5079744414ccc44bd41490619dc8bb277f26b30a/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=5079744414ccc44bd41490619dc8bb277f26b30a", "patch": "@@ -379,7 +379,7 @@ impl FromWithTcx<clean::Type> for Type {\n                     .unwrap_or_default(),\n             },\n             Generic(s) => Type::Generic(s.to_string()),\n-            Primitive(p) => Type::Primitive(p.as_str().to_string()),\n+            Primitive(p) => Type::Primitive(p.as_sym().to_string()),\n             BareFunction(f) => Type::FunctionPointer(Box::new((*f).into_tcx(tcx))),\n             Tuple(t) => Type::Tuple(t.into_iter().map(|x| x.into_tcx(tcx)).collect()),\n             Slice(t) => Type::Slice(Box::new((*t).into_tcx(tcx))),"}, {"sha": "e6e6497902c26da1774abf8dc15f2b466f0e15fb", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5079744414ccc44bd41490619dc8bb277f26b30a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5079744414ccc44bd41490619dc8bb277f26b30a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=5079744414ccc44bd41490619dc8bb277f26b30a", "patch": "@@ -91,10 +91,10 @@ impl Res {\n         }\n     }\n \n-    fn name(self, tcx: TyCtxt<'_>) -> String {\n+    fn name(self, tcx: TyCtxt<'_>) -> Symbol {\n         match self {\n-            Res::Def(_, id) => tcx.item_name(id).to_string(),\n-            Res::Primitive(prim) => prim.as_str().to_string(),\n+            Res::Def(_, id) => tcx.item_name(id),\n+            Res::Primitive(prim) => prim.as_sym(),\n         }\n     }\n \n@@ -388,7 +388,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                         ty::AssocKind::Const => \"associatedconstant\",\n                         ty::AssocKind::Type => \"associatedtype\",\n                     };\n-                    let fragment = format!(\"{}#{}.{}\", prim_ty.as_str(), out, item_name);\n+                    let fragment = format!(\"{}#{}.{}\", prim_ty.as_sym(), out, item_name);\n                     (Res::Primitive(prim_ty), fragment, Some((kind.as_def_kind(), item.def_id)))\n                 })\n         })\n@@ -481,7 +481,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                             AnchorFailure::RustdocAnchorConflict(res),\n                         ));\n                     }\n-                    return Ok((res, Some(ty.as_str().to_owned())));\n+                    return Ok((res, Some(ty.as_sym().to_string())));\n                 }\n                 _ => return Ok((res, extra_fragment.clone())),\n             }\n@@ -1148,7 +1148,7 @@ impl LinkCollector<'_, '_> {\n                         return None;\n                     }\n                     res = prim;\n-                    fragment = Some(prim.name(self.cx.tcx));\n+                    fragment = Some(prim.name(self.cx.tcx).to_string());\n                 } else {\n                     // `[char]` when a `char` module is in scope\n                     let candidates = vec![res, prim];"}]}