{"sha": "5a4e53487faa94f3ccb966abf278d7ab5e22711a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNGU1MzQ4N2ZhYTk0ZjNjY2I5NjZhYmYyNzhkN2FiNWUyMjcxMWE=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-04T23:07:54Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-04T23:08:07Z"}, "message": "Heavily rework lint infrastructure. Split it into two passes: one that builds the table and one that does the checks. Build the table early and make session know about it fo reasy use.", "tree": {"sha": "bab4e770e2ccd21f784ab92d3e22f7b1f06dbbfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bab4e770e2ccd21f784ab92d3e22f7b1f06dbbfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a4e53487faa94f3ccb966abf278d7ab5e22711a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a4e53487faa94f3ccb966abf278d7ab5e22711a", "html_url": "https://github.com/rust-lang/rust/commit/5a4e53487faa94f3ccb966abf278d7ab5e22711a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a4e53487faa94f3ccb966abf278d7ab5e22711a/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d0e7cd272136f12f8c07cafe57df408d37ada6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d0e7cd272136f12f8c07cafe57df408d37ada6f", "html_url": "https://github.com/rust-lang/rust/commit/2d0e7cd272136f12f8c07cafe57df408d37ada6f"}], "stats": {"total": 241, "additions": 131, "deletions": 110}, "files": [{"sha": "6d4f48595d2511ebfe6e6f0702416a13892adfc1", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5a4e53487faa94f3ccb966abf278d7ab5e22711a/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4e53487faa94f3ccb966abf278d7ab5e22711a/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=5a4e53487faa94f3ccb966abf278d7ab5e22711a", "patch": "@@ -157,6 +157,9 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n         time(time_passes, \"core injection\",\n              bind front::core_inject::maybe_inject_libcore_ref(sess, crate));\n \n+    time(time_passes, \"building warning settings table\",\n+         bind lint::build_settings_crate(sess, crate));\n+\n     let ast_map =\n         time(time_passes, \"ast indexing\",\n              bind syntax::ast_map::map_crate(sess.diagnostic(), *crate));\n@@ -204,10 +207,8 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n              bind middle::alias::check_crate(ty_cx, crate));\n     time(time_passes, \"kind checking\",\n          bind kind::check_crate(ty_cx, method_map, last_use_map, crate));\n-\n-    let _warning_settings =\n-        time(time_passes, \"lint checking\",\n-             bind lint::check_crate(ty_cx, crate, sess.opts.lint_opts));\n+    time(time_passes, \"lint checking\",\n+         bind lint::check_crate(ty_cx, crate));\n \n     if upto == cu_no_trans { ret {crate: crate, tcx: some(ty_cx)}; }\n     let outputs = option::get(outputs);\n@@ -528,6 +529,7 @@ fn build_session_(\n         sopts.maybe_sysroot,\n         sopts.target_triple,\n         sopts.addl_lib_search_paths);\n+    let warning_settings = lint::mk_warning_settings();\n     @{targ_cfg: target_cfg,\n       opts: sopts,\n       cstore: cstore,\n@@ -544,7 +546,8 @@ fn build_session_(\n       span_diagnostic: span_diagnostic_handler,\n       filesearch: filesearch,\n       mut building_library: false,\n-      working_dir: os::getcwd()}\n+      working_dir: os::getcwd(),\n+      warning_settings: warning_settings}\n }\n \n fn parse_pretty(sess: session, &&name: str) -> pp_mode {"}, {"sha": "97e2d0ec4db730d7b589363da1dcf38d68f5eb57", "filename": "src/rustc/driver/session.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5a4e53487faa94f3ccb966abf278d7ab5e22711a/src%2Frustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4e53487faa94f3ccb966abf278d7ab5e22711a/src%2Frustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fsession.rs?ref=5a4e53487faa94f3ccb966abf278d7ab5e22711a", "patch": "@@ -9,6 +9,7 @@ import back::target_strs;\n import back::link;\n import middle::lint;\n \n+\n enum os { os_win32, os_macos, os_linux, os_freebsd, }\n \n enum arch { arch_x86, arch_x86_64, arch_arm, }\n@@ -82,7 +83,8 @@ type session = @{targ_cfg: @config,\n                  span_diagnostic: diagnostic::span_handler,\n                  filesearch: filesearch::filesearch,\n                  mut building_library: bool,\n-                 working_dir: str};\n+                 working_dir: str,\n+                 warning_settings: lint::warning_settings};\n \n impl session for session {\n     fn span_fatal(sp: span, msg: str) -> ! {\n@@ -127,6 +129,21 @@ impl session for session {\n     fn unimpl(msg: str) -> ! {\n         self.span_diagnostic.handler().unimpl(msg)\n     }\n+    fn span_lint_level(level: lint::level,\n+                       sp: span, msg: str) {\n+        alt level {\n+          lint::ignore { }\n+          lint::warn { self.span_warn(sp, msg); }\n+          lint::error { self.span_err(sp, msg); }\n+        }\n+    }\n+    fn span_lint(lint_mode: lint::lint,\n+                 expr_id: ast::node_id, item_id: ast::node_id,\n+                 span: span, msg: str) {\n+        let level = lint::get_warning_settings_level(\n+            self.warning_settings, lint_mode, expr_id, item_id);\n+        self.span_lint_level(level, span, msg);\n+    }\n     fn next_node_id() -> ast::node_id {\n         ret syntax::parse::next_node_id(self.parse_sess);\n     }"}, {"sha": "dc31c75733e77b1f8664c76365e753fca6261bae", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 105, "deletions": 104, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/5a4e53487faa94f3ccb966abf278d7ab5e22711a/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4e53487faa94f3ccb966abf278d7ab5e22711a/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=5a4e53487faa94f3ccb966abf278d7ab5e22711a", "patch": "@@ -1,3 +1,4 @@\n+import driver::session;\n import driver::session::session;\n import middle::ty;\n import syntax::{ast, visit};\n@@ -10,8 +11,9 @@ import syntax::print::pprust::expr_to_str;\n \n export lint, ctypes, unused_imports;\n export level, ignore, warn, error;\n-export lookup_lint, lint_dict, get_lint_dict, check_crate;\n-export warning_settings, warning_methods;\n+export lookup_lint, lint_dict, get_lint_dict, get_warning_settings_level;\n+export check_crate, build_settings_crate, mk_warning_settings;\n+export warning_settings;\n \n #[doc=\"\n \n@@ -29,6 +31,10 @@ omitted. If we start allowing warn attributes on expressions, we will start\n having entries for expressions that do not share their enclosing items\n settings.\n \n+This module then, exports two passes: one that populates the warning settings\n+table in the session and is run early in the compile process, and one that\n+does a variety of lint checks, and is run late in the compile process.\n+\n \"]\n \n enum lint {\n@@ -115,39 +121,28 @@ type warning_settings = {\n     settings_map: lint_mode_map\n };\n \n+fn mk_warning_settings() -> warning_settings {\n+    {default_settings: std::smallintmap::mk(),\n+     settings_map: int_hash()}\n+}\n+\n fn get_warning_level(modes: lint_modes, lint: lint) -> level {\n     alt modes.find(lint as uint) {\n       some(c) { c }\n       none { ignore }\n     }\n }\n \n-fn span_lint(tcx: ty::ctxt, level: level, span: span, msg: str) {\n-    alt level {\n-      ignore { }\n-      warn { tcx.sess.span_warn(span, msg); }\n-      error { tcx.sess.span_err(span, msg); }\n+fn get_warning_settings_level(settings: warning_settings,\n+                              lint_mode: lint,\n+                              _expr_id: ast::node_id,\n+                              item_id: ast::node_id) -> level {\n+    alt settings.settings_map.find(item_id) {\n+      some(modes) { get_warning_level(modes, lint_mode) }\n+      none { get_warning_level(settings.default_settings, lint_mode) }\n     }\n }\n \n-impl warning_methods for warning_settings {\n-    fn get_level(lint_mode: lint,\n-                 _expr_id: ast::node_id, item_id: ast::node_id) -> level {\n-        alt self.settings_map.find(item_id) {\n-          some(modes) { get_warning_level(modes, lint_mode) }\n-          none { get_warning_level(self.default_settings, lint_mode) }\n-        }\n-    }\n-\n-    fn span_lint(tcx: ty::ctxt, lint_mode: lint,\n-                 expr_id: ast::node_id, item_id: ast::node_id,\n-                 span: span, msg: str) {\n-        let level = self.get_level(lint_mode, expr_id, item_id);\n-        span_lint(tcx, level, span, msg);\n-    }\n-\n-}\n-\n // This is kind of unfortunate. It should be somewhere else, or we should use\n // a persistent data structure...\n fn clone_lint_modes(modes: lint_modes) -> lint_modes {\n@@ -157,8 +152,7 @@ fn clone_lint_modes(modes: lint_modes) -> lint_modes {\n type ctxt = {dict: lint_dict,\n              curr: lint_modes,\n              is_default: bool,\n-             lint_mode_map: lint_mode_map,\n-             tcx: ty::ctxt};\n+             sess: session};\n \n \n impl methods for ctxt {\n@@ -175,7 +169,7 @@ impl methods for ctxt {\n     }\n \n     fn span_lint(level: level, span: span, msg: str) {\n-        span_lint(self.tcx, level, span, msg);\n+        self.sess.span_lint_level(level, span, msg);\n     }\n \n     #[doc=\"\n@@ -213,16 +207,16 @@ impl methods for ctxt {\n                         }\n                       }\n                       _ {\n-                        self.tcx.sess.span_err(\n+                        self.sess.span_err(\n                             meta.span,\n                             \"malformed warning attribute\");\n                       }\n                     }\n                 }\n               }\n               _ {\n-                self.tcx.sess.span_err(meta.span,\n-                                       \"malformed warning attribute\");\n+                self.sess.span_err(meta.span,\n+                                   \"malformed warning attribute\");\n               }\n             }\n         }\n@@ -249,25 +243,56 @@ fn lookup_lint(dict: lint_dict, s: str)\n      })\n }\n \n-fn check_item(i: @ast::item, &&cx: ctxt, v: visit::vt<ctxt>) {\n+fn build_settings_item(i: @ast::item, &&cx: ctxt, v: visit::vt<ctxt>) {\n     cx.with_warn_attrs(i.attrs) {|cx|\n-        for cx.curr.each {|lint, level|\n-            alt int_to_lint(lint as int) {\n-              ctypes { check_item_ctypes(cx, level, i); }\n-              unused_imports { check_item_unused_imports(cx, level, i); }\n-              while_true { check_item_while_true(cx, level, i); }\n-              path_statement { check_item_path_statement(cx, level, i); }\n-              old_vecs { check_item_old_vecs(cx, level, i); }\n-              unrecognized_warning { /* this is checked elsewhere */ }\n-            }\n-        }\n         if !cx.is_default {\n-            cx.lint_mode_map.insert(i.id, cx.curr);\n+            cx.sess.warning_settings.settings_map.insert(i.id, cx.curr);\n         }\n         visit::visit_item(i, cx, v);\n     }\n }\n \n+fn build_settings_crate(sess: session::session, crate: @ast::crate) {\n+\n+    let cx = {dict: get_lint_dict(),\n+              curr: std::smallintmap::mk(),\n+              is_default: true,\n+              sess: sess};\n+\n+    // Install defaults.\n+    for cx.dict.each {|_k, spec| cx.set_level(spec.lint, spec.default); }\n+\n+    // Install command-line options, overriding defaults.\n+    for sess.opts.lint_opts.each {|pair|\n+        let (lint,level) = pair;\n+        cx.set_level(lint, level);\n+    }\n+\n+    cx.with_warn_attrs(crate.node.attrs) {|cx|\n+        // Copy out the default settings\n+        for cx.curr.each {|k, v|\n+            sess.warning_settings.default_settings.insert(k, v);\n+        }\n+\n+        let cx = {is_default: true with cx};\n+\n+        let visit = visit::mk_vt(@{\n+            visit_item: build_settings_item\n+            with *visit::default_visitor()\n+        });\n+        visit::visit_crate(*crate, cx, visit);\n+    }\n+\n+    sess.abort_if_errors();\n+}\n+\n+fn check_item(i: @ast::item, cx: ty::ctxt) {\n+    check_item_ctypes(cx, i);\n+    check_item_while_true(cx, i);\n+    check_item_path_statement(cx, i);\n+    check_item_old_vecs(cx, i);\n+}\n+\n // Take a visitor, and modify it so that it will not proceed past subitems.\n // This is used to make the simple visitors used for the lint passes\n // not traverse into subitems, since that is handled by the outer\n@@ -276,16 +301,17 @@ fn item_stopping_visitor<E>(v: visit::vt<E>) -> visit::vt<E> {\n     visit::mk_vt(@{visit_item: {|_i, _e, _v| } with **v})\n }\n \n-fn check_item_while_true(cx: ctxt, level: level, it: @ast::item) {\n+fn check_item_while_true(cx: ty::ctxt, it: @ast::item) {\n     let visit = item_stopping_visitor(visit::mk_simple_visitor(@{\n         visit_expr: fn@(e: @ast::expr) {\n            alt e.node {\n              ast::expr_while(cond, _) {\n                 alt cond.node {\n                     ast::expr_lit(@{node: ast::lit_bool(true),_}) {\n-                            cx.span_lint(\n-                              level, e.span,\n-                              \"denote infinite loops with loop { ... }\");\n+                            cx.sess.span_lint(\n+                                while_true, it.id, e.id,\n+                                e.span,\n+                                \"denote infinite loops with loop { ... }\");\n                     }\n                     _ {}\n                 }\n@@ -298,28 +324,26 @@ fn check_item_while_true(cx: ctxt, level: level, it: @ast::item) {\n     visit::visit_item(it, (), visit);\n }\n \n-fn check_item_unused_imports(_cx: ctxt, _level: level, _it: @ast::item) {\n-    // FIXME: Don't know how to check this in lint yet, it's currently being\n-    // done over in resolve. When resolve is rewritten, do it here instead.\n-}\n-\n-fn check_item_ctypes(cx: ctxt, level: level, it: @ast::item) {\n+fn check_item_ctypes(cx: ty::ctxt, it: @ast::item) {\n \n-    fn check_native_fn(cx: ctxt, level: level, decl: ast::fn_decl) {\n+    fn check_native_fn(cx: ty::ctxt, fn_id: ast::node_id,\n+                       decl: ast::fn_decl) {\n         let tys = vec::map(decl.inputs) {|a| a.ty };\n         for vec::each(tys + [decl.output]) {|ty|\n             alt ty.node {\n               ast::ty_path(_, id) {\n-                alt cx.tcx.def_map.get(id) {\n+                alt cx.def_map.get(id) {\n                   ast::def_prim_ty(ast::ty_int(ast::ty_i)) {\n-                    cx.span_lint(\n-                        level, ty.span,\n+                    cx.sess.span_lint(\n+                        ctypes, fn_id, id,\n+                        ty.span,\n                         \"found rust type `int` in native module, while \\\n                          libc::c_int or libc::c_long should be used\");\n                   }\n                   ast::def_prim_ty(ast::ty_uint(ast::ty_u)) {\n-                    cx.span_lint(\n-                        level, ty.span,\n+                    cx.sess.span_lint(\n+                        ctypes, fn_id, id,\n+                        ty.span,\n                         \"found rust type `uint` in native module, while \\\n                          libc::c_uint or libc::c_ulong should be used\");\n                   }\n@@ -337,7 +361,7 @@ fn check_item_ctypes(cx: ctxt, level: level, it: @ast::item) {\n         for nmod.items.each {|ni|\n             alt ni.node {\n               ast::native_item_fn(decl, tps) {\n-                check_native_fn(cx, level, decl);\n+                check_native_fn(cx, it.id, decl);\n               }\n             }\n         }\n@@ -346,15 +370,16 @@ fn check_item_ctypes(cx: ctxt, level: level, it: @ast::item) {\n     }\n }\n \n-fn check_item_path_statement(cx: ctxt, level: level, it: @ast::item) {\n+fn check_item_path_statement(cx: ty::ctxt, it: @ast::item) {\n     let visit = item_stopping_visitor(visit::mk_simple_visitor(@{\n         visit_stmt: fn@(s: @ast::stmt) {\n             alt s.node {\n-              ast::stmt_semi(@{id: _,\n+              ast::stmt_semi(@{id: id,\n                                node: ast::expr_path(@path),\n                                span: _}, _) {\n-                cx.span_lint(\n-                    level, s.span,\n+                cx.sess.span_lint(\n+                    path_statement, it.id, id,\n+                    s.span,\n                     \"path statement with no effect\");\n               }\n               _ {}\n@@ -365,7 +390,7 @@ fn check_item_path_statement(cx: ctxt, level: level, it: @ast::item) {\n     visit::visit_item(it, (), visit);\n }\n \n-fn check_item_old_vecs(cx: ctxt, level: level, it: @ast::item) {\n+fn check_item_old_vecs(cx: ty::ctxt, it: @ast::item) {\n     let uses_vstore = int_hash();\n \n     let visit = item_stopping_visitor(visit::mk_simple_visitor(@{\n@@ -375,7 +400,9 @@ fn check_item_old_vecs(cx: ctxt, level: level, it: @ast::item) {\n               ast::expr_vec(_, _) |\n               ast::expr_lit(@{node: ast::lit_str(_), span:_})\n               if ! uses_vstore.contains_key(e.id) {\n-                cx.span_lint(level, e.span, \"deprecated vec/str expr\");\n+                cx.sess.span_lint(\n+                    old_vecs, it.id, e.id,\n+                    e.span, \"deprecated vec/str expr\");\n               }\n               ast::expr_vstore(@inner, _) {\n                 uses_vstore.insert(inner.id, true);\n@@ -388,13 +415,17 @@ fn check_item_old_vecs(cx: ctxt, level: level, it: @ast::item) {\n             alt t.node {\n               ast::ty_vec(_)\n               if ! uses_vstore.contains_key(t.id) {\n-                cx.span_lint(level, t.span, \"deprecated vec type\");\n+                cx.sess.span_lint(\n+                    old_vecs, it.id, t.id,\n+                    t.span, \"deprecated vec type\");\n               }\n \n               ast::ty_path(@{span: _, global: _, idents: ids,\n                              rp: none, types: _}, _)\n               if ids == [\"str\"] && (! uses_vstore.contains_key(t.id)) {\n-                cx.span_lint(level, t.span, \"deprecated str type\");\n+                cx.sess.span_lint(\n+                    old_vecs, it.id, t.id,\n+                    t.span, \"deprecated str type\");\n               }\n \n               ast::ty_vstore(inner, _) {\n@@ -409,45 +440,15 @@ fn check_item_old_vecs(cx: ctxt, level: level, it: @ast::item) {\n     visit::visit_item(it, (), visit);\n }\n \n+fn check_crate(tcx: ty::ctxt, crate: @ast::crate) {\n \n-fn check_crate(tcx: ty::ctxt, crate: @ast::crate,\n-               lint_opts: [(lint, level)]) -> warning_settings {\n-\n-    fn hash_lint(&&lint: lint) -> uint { lint as uint }\n-    fn eq_lint(&&a: lint, &&b: lint) -> bool { a == b }\n-\n-    let cx = {dict: get_lint_dict(),\n-              curr: std::smallintmap::mk(),\n-              is_default: true,\n-              lint_mode_map: int_hash(),\n-              tcx: tcx};\n-\n-    let mut default_settings = cx.curr; // dummy value\n-\n-    // Install defaults.\n-    for cx.dict.each {|_k, spec| cx.set_level(spec.lint, spec.default); }\n-\n-    // Install command-line options, overriding defaults.\n-    for lint_opts.each {|pair|\n-        let (lint,level) = pair;\n-        cx.set_level(lint, level);\n-    }\n-\n-    cx.with_warn_attrs(crate.node.attrs) {|cx|\n-        default_settings = cx.curr;\n-        let cx = {is_default: true with cx};\n-\n-        let visit = visit::mk_vt(@{\n-            visit_item: check_item\n-            with *visit::default_visitor()\n-        });\n-        visit::visit_crate(*crate, cx, visit);\n-    }\n+    let v = visit::mk_simple_visitor(@{\n+        visit_item: fn@(it: @ast::item) { check_item(it, tcx); }\n+        with *visit::default_simple_visitor()\n+    });\n+    visit::visit_crate(*crate, (), v);\n \n     tcx.sess.abort_if_errors();\n-\n-    ret {default_settings: default_settings,\n-         settings_map: cx.lint_mode_map};\n }\n \n //"}]}