{"sha": "a2bdb3bb94936c45b68f91b4ffd938dd3df5f8c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyYmRiM2JiOTQ5MzZjNDViNjhmOTFiNGZmZDkzOGRkM2RmNWY4YzE=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-08-04T14:50:38Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-08-04T20:12:23Z"}, "message": "Shim 'libc::getrandom' in addition to 'libc::syscall(libc::SYS_getrandom)'", "tree": {"sha": "030ce5a01b96c5d79db539b62610c3067d581a36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/030ce5a01b96c5d79db539b62610c3067d581a36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2bdb3bb94936c45b68f91b4ffd938dd3df5f8c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl1HPCcACgkQtAh+UQ6Y\nsWS2IA//e1MhfcP2i4Lo5/K6ZN2xD3fD8YsGSpsg6umLv0SLXv8cgL7+rwMpY/pZ\ngbTtUGZFejPsLjpHwpWtXl9/AgloYbfFh8LGO6p+PSp0bV5rkmhTm7hTVkuHktxz\nZCP4eH7Xe0mvFpqn7xa/vOa6rN0BYTGiolMgfwS7SEka8+XSR6ADH/r+9Bq5H1pK\nrfzv4Ed4LZ7UhKFyCdHo2fc6DnR/dXW4XzgJVK7opxoBOiM7OEeJ3sTP1bYO0SQk\nJ5wty2XK2FkxcyXFU4WgpDflt8NkMXq05II7dbEwcEw4JKHmH25PdAfZnhvTfr55\noNs9L7SUfSCfPRKqTK/UBk+V1YtpB/U3KGmw3uKEVrIdEyFT/mugDZ7KmfYi5WTw\nJEs23uHgslafngV87Y9YbKrhoncLQR/usf77tXZiDCYgwDM5hqmaj6VogpF55Rd8\ncKrFf3xHwpeu11lUHXBBEzmTNhJIy/8CD6JKCIxUHoWRPyiE/JOwfGmkxkrMrGiG\nZ3fA+4sA4JtsM4iBfCoVOBuDb4MHm5xOZkBe+HPAMK+W++G7NTklpMdmUew3P5En\nqPbsIEWNfgMKlz24FhZ1SN/3QkXfnuY5vODvLpfBVNHX/VLt7yzRO/HKgx5mB/Fy\nyPrmbCrGhsE65SqAPM/oiHRgodBV1d/F3YXxtrHwe3yfCnHk38k=\n=9ugf\n-----END PGP SIGNATURE-----", "payload": "tree 030ce5a01b96c5d79db539b62610c3067d581a36\nparent bc82f8329829d7efbade879839b5846bfc877a4f\nauthor Aaron Hill <aa1ronham@gmail.com> 1564930238 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1564949543 -0400\n\nShim 'libc::getrandom' in addition to 'libc::syscall(libc::SYS_getrandom)'\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2bdb3bb94936c45b68f91b4ffd938dd3df5f8c1", "html_url": "https://github.com/rust-lang/rust/commit/a2bdb3bb94936c45b68f91b4ffd938dd3df5f8c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2bdb3bb94936c45b68f91b4ffd938dd3df5f8c1/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc82f8329829d7efbade879839b5846bfc877a4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc82f8329829d7efbade879839b5846bfc877a4f", "html_url": "https://github.com/rust-lang/rust/commit/bc82f8329829d7efbade879839b5846bfc877a4f"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "6ae99c9bc15cd935fac6f34c030319ada25f9644", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a2bdb3bb94936c45b68f91b4ffd938dd3df5f8c1/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2bdb3bb94936c45b68f91b4ffd938dd3df5f8c1/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=a2bdb3bb94936c45b68f91b4ffd938dd3df5f8c1", "patch": "@@ -293,22 +293,20 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // is called if a `HashMap` is created the regular way (e.g. HashMap<K, V>).\n                 match this.read_scalar(args[0])?.to_usize(this)? {\n                     id if id == sys_getrandom => {\n-                        let ptr = this.read_scalar(args[1])?.not_undef()?;\n-                        let len = this.read_scalar(args[2])?.to_usize(this)?;\n-\n-                        // The only supported flags are GRND_RANDOM and GRND_NONBLOCK,\n-                        // neither of which have any effect on our current PRNG\n-                        let _flags = this.read_scalar(args[3])?.to_i32()?;\n-\n-                        this.gen_random(ptr, len as usize)?;\n-                        this.write_scalar(Scalar::from_uint(len, dest.layout.size), dest)?;\n+                        // The first argument is the syscall id,\n+                        // so skip over it\n+                        linux_getrandom(this, &args[1..], dest)?;\n                     }\n                     id => {\n                         throw_unsup_format!(\"miri does not support syscall ID {}\", id)\n                     }\n                 }\n             }\n \n+            \"getrandom\" => {\n+                linux_getrandom(this, args, dest)?;\n+            }\n+\n             \"dlsym\" => {\n                 let _handle = this.read_scalar(args[0])?;\n                 let symbol = this.read_scalar(args[1])?.not_undef()?;\n@@ -969,3 +967,20 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         return Ok(None);\n     }\n }\n+\n+// Shims the linux 'getrandom()' syscall\n+fn linux_getrandom<'mir, 'tcx>(this: &mut MiriEvalContext<'mir, 'tcx>,\n+                               args: &[OpTy<'tcx, Tag>],\n+                               dest: PlaceTy<'tcx, Tag>) -> InterpResult<'tcx> {\n+    let ptr = this.read_scalar(args[0])?.not_undef()?;\n+    let len = this.read_scalar(args[1])?.to_usize(this)?;\n+\n+\n+    // The only supported flags are GRND_RANDOM and GRND_NONBLOCK,\n+    // neither of which have any effect on our current PRNG\n+    let _flags = this.read_scalar(args[2])?.to_i32()?;\n+\n+    this.gen_random(ptr, len as usize)?;\n+    this.write_scalar(Scalar::from_uint(len, dest.layout.size), dest)?;\n+    Ok(())\n+}"}]}