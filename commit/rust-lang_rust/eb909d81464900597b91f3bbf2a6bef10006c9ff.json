{"sha": "eb909d81464900597b91f3bbf2a6bef10006c9ff", "node_id": "C_kwDOAAsO6NoAKGViOTA5ZDgxNDY0OTAwNTk3YjkxZjNiYmYyYTZiZWYxMDAwNmM5ZmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-23T06:28:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-23T06:28:41Z"}, "message": "Auto merge of #108386 - matthiaskrgr:rollup-nojivk9, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #108063 (Ban associated type bounds in bad positions)\n - #108208 (Correctly handle aggregates in DataflowConstProp)\n - #108218 (Windows: Quote more batch file arguments)\n - #108349 (rustdoc: Prevent duplicated imports)\n - #108350 (Use associated type bounds in some places in the compiler)\n - #108358 (Add git config command to `.git-blame-ignore-revs`)\n - #108373 (hir-analysis: make where-clause-on-main diagnostic translatable)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "0c8555bbcf96bf156ab5d1a265f10fd94a447825", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c8555bbcf96bf156ab5d1a265f10fd94a447825"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb909d81464900597b91f3bbf2a6bef10006c9ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb909d81464900597b91f3bbf2a6bef10006c9ff", "html_url": "https://github.com/rust-lang/rust/commit/eb909d81464900597b91f3bbf2a6bef10006c9ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb909d81464900597b91f3bbf2a6bef10006c9ff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b1dbf728add722d4db894b9b986ec24e1cdb0a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b1dbf728add722d4db894b9b986ec24e1cdb0a1", "html_url": "https://github.com/rust-lang/rust/commit/8b1dbf728add722d4db894b9b986ec24e1cdb0a1"}, {"sha": "60014e48485b686c3d273e2cfa7dd8f1f01a9607", "url": "https://api.github.com/repos/rust-lang/rust/commits/60014e48485b686c3d273e2cfa7dd8f1f01a9607", "html_url": "https://github.com/rust-lang/rust/commit/60014e48485b686c3d273e2cfa7dd8f1f01a9607"}], "stats": {"total": 806, "additions": 455, "deletions": 351}, "files": [{"sha": "353bfcb6ac1aef3c1519f2a340bdd2fcb54f8552", "filename": ".git-blame-ignore-revs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/.git-blame-ignore-revs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/.git-blame-ignore-revs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.git-blame-ignore-revs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -1,3 +1,5 @@\n+# Use `git config blame.ignorerevsfile .git-blame-ignore-revs` to make `git blame` ignore the following commits.\n+\n # format the world\n a06baa56b95674fc626b3c3fd680d6a65357fe60\n # format libcore"}, {"sha": "a2837deafdec4f38a16b61392228b709684edacd", "filename": "compiler/rustc_ast_lowering/locales/en-US.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_ast_lowering%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_ast_lowering%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Flocales%2Fen-US.ftl?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -19,6 +19,9 @@ ast_lowering_remove_parentheses = remove these parentheses\n ast_lowering_misplaced_impl_trait =\n     `impl Trait` only allowed in function and inherent method return types, not in {$position}\n \n+ast_lowering_misplaced_assoc_ty_binding =\n+    associated type bounds are only allowed in where clauses and function signatures, not in {$position}\n+\n ast_lowering_rustc_box_attribute_error =\n     #[rustc_box] requires precisely one argument and no other attributes are allowed\n "}, {"sha": "def74c2adeee944c36975b02f6b699202044f170", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -79,6 +79,14 @@ pub struct MisplacedImplTrait<'a> {\n     pub position: DiagnosticArgFromDisplay<'a>,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(ast_lowering_misplaced_assoc_ty_binding)]\n+pub struct MisplacedAssocTyBinding<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub position: DiagnosticArgFromDisplay<'a>,\n+}\n+\n #[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering_rustc_box_attribute_error)]\n pub struct RustcBoxAttributeError {"}, {"sha": "c5b144e68dc7e2cf4ee64c7f4a1728695dcecccd", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 73, "deletions": 62, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -288,31 +288,31 @@ enum ImplTraitPosition {\n impl std::fmt::Display for ImplTraitPosition {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         let name = match self {\n-            ImplTraitPosition::Path => \"path\",\n-            ImplTraitPosition::Variable => \"variable binding\",\n-            ImplTraitPosition::Trait => \"trait\",\n-            ImplTraitPosition::AsyncBlock => \"async block\",\n-            ImplTraitPosition::Bound => \"bound\",\n-            ImplTraitPosition::Generic => \"generic\",\n-            ImplTraitPosition::ExternFnParam => \"`extern fn` param\",\n-            ImplTraitPosition::ClosureParam => \"closure param\",\n-            ImplTraitPosition::PointerParam => \"`fn` pointer param\",\n-            ImplTraitPosition::FnTraitParam => \"`Fn` trait param\",\n-            ImplTraitPosition::TraitParam => \"trait method param\",\n-            ImplTraitPosition::ImplParam => \"`impl` method param\",\n-            ImplTraitPosition::ExternFnReturn => \"`extern fn` return\",\n-            ImplTraitPosition::ClosureReturn => \"closure return\",\n-            ImplTraitPosition::PointerReturn => \"`fn` pointer return\",\n-            ImplTraitPosition::FnTraitReturn => \"`Fn` trait return\",\n-            ImplTraitPosition::TraitReturn => \"trait method return\",\n-            ImplTraitPosition::ImplReturn => \"`impl` method return\",\n-            ImplTraitPosition::GenericDefault => \"generic parameter default\",\n-            ImplTraitPosition::ConstTy => \"const type\",\n-            ImplTraitPosition::StaticTy => \"static type\",\n-            ImplTraitPosition::AssocTy => \"associated type\",\n-            ImplTraitPosition::FieldTy => \"field type\",\n-            ImplTraitPosition::Cast => \"cast type\",\n-            ImplTraitPosition::ImplSelf => \"impl header\",\n+            ImplTraitPosition::Path => \"paths\",\n+            ImplTraitPosition::Variable => \"variable bindings\",\n+            ImplTraitPosition::Trait => \"traits\",\n+            ImplTraitPosition::AsyncBlock => \"async blocks\",\n+            ImplTraitPosition::Bound => \"bounds\",\n+            ImplTraitPosition::Generic => \"generics\",\n+            ImplTraitPosition::ExternFnParam => \"`extern fn` params\",\n+            ImplTraitPosition::ClosureParam => \"closure params\",\n+            ImplTraitPosition::PointerParam => \"`fn` pointer params\",\n+            ImplTraitPosition::FnTraitParam => \"`Fn` trait params\",\n+            ImplTraitPosition::TraitParam => \"trait method params\",\n+            ImplTraitPosition::ImplParam => \"`impl` method params\",\n+            ImplTraitPosition::ExternFnReturn => \"`extern fn` return types\",\n+            ImplTraitPosition::ClosureReturn => \"closure return types\",\n+            ImplTraitPosition::PointerReturn => \"`fn` pointer return types\",\n+            ImplTraitPosition::FnTraitReturn => \"`Fn` trait return types\",\n+            ImplTraitPosition::TraitReturn => \"trait method return types\",\n+            ImplTraitPosition::ImplReturn => \"`impl` method return types\",\n+            ImplTraitPosition::GenericDefault => \"generic parameter defaults\",\n+            ImplTraitPosition::ConstTy => \"const types\",\n+            ImplTraitPosition::StaticTy => \"static types\",\n+            ImplTraitPosition::AssocTy => \"associated types\",\n+            ImplTraitPosition::FieldTy => \"field types\",\n+            ImplTraitPosition::Cast => \"cast types\",\n+            ImplTraitPosition::ImplSelf => \"impl headers\",\n         };\n \n         write!(f, \"{name}\")\n@@ -1002,8 +1002,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         } else {\n             self.arena.alloc(hir::GenericArgs::none())\n         };\n-        let itctx_tait = &ImplTraitContext::TypeAliasesOpaqueTy;\n-\n         let kind = match &constraint.kind {\n             AssocConstraintKind::Equality { term } => {\n                 let term = match term {\n@@ -1013,8 +1011,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 hir::TypeBindingKind::Equality { term }\n             }\n             AssocConstraintKind::Bound { bounds } => {\n+                enum DesugarKind<'a> {\n+                    ImplTrait,\n+                    Error(&'a ImplTraitPosition),\n+                    Bound,\n+                }\n+\n                 // Piggy-back on the `impl Trait` context to figure out the correct behavior.\n-                let (desugar_to_impl_trait, itctx) = match itctx {\n+                let desugar_kind = match itctx {\n                     // We are in the return position:\n                     //\n                     //     fn foo() -> impl Iterator<Item: Debug>\n@@ -1023,7 +1027,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     //\n                     //     fn foo() -> impl Iterator<Item = impl Debug>\n                     ImplTraitContext::ReturnPositionOpaqueTy { .. }\n-                    | ImplTraitContext::TypeAliasesOpaqueTy { .. } => (true, itctx),\n+                    | ImplTraitContext::TypeAliasesOpaqueTy { .. } => DesugarKind::ImplTrait,\n \n                     // We are in the argument position, but within a dyn type:\n                     //\n@@ -1032,15 +1036,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     // so desugar to\n                     //\n                     //     fn foo(x: dyn Iterator<Item = impl Debug>)\n-                    ImplTraitContext::Universal if self.is_in_dyn_type => (true, itctx),\n+                    ImplTraitContext::Universal if self.is_in_dyn_type => DesugarKind::ImplTrait,\n \n-                    // In `type Foo = dyn Iterator<Item: Debug>` we desugar to\n-                    // `type Foo = dyn Iterator<Item = impl Debug>` but we have to override the\n-                    // \"impl trait context\" to permit `impl Debug` in this position (it desugars\n-                    // then to an opaque type).\n-                    //\n-                    // FIXME: this is only needed until `impl Trait` is allowed in type aliases.\n-                    ImplTraitContext::Disallowed(_) if self.is_in_dyn_type => (true, itctx_tait),\n+                    ImplTraitContext::Disallowed(position) if self.is_in_dyn_type => {\n+                        DesugarKind::Error(position)\n+                    }\n \n                     // We are in the parameter position, but not within a dyn type:\n                     //\n@@ -1049,35 +1049,46 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     // so we leave it as is and this gets expanded in astconv to a bound like\n                     // `<T as Iterator>::Item: Debug` where `T` is the type parameter for the\n                     // `impl Iterator`.\n-                    _ => (false, itctx),\n+                    _ => DesugarKind::Bound,\n                 };\n \n-                if desugar_to_impl_trait {\n-                    // Desugar `AssocTy: Bounds` into `AssocTy = impl Bounds`. We do this by\n-                    // constructing the HIR for `impl bounds...` and then lowering that.\n-\n-                    let impl_trait_node_id = self.next_node_id();\n-\n-                    self.with_dyn_type_scope(false, |this| {\n-                        let node_id = this.next_node_id();\n-                        let ty = this.lower_ty(\n-                            &Ty {\n-                                id: node_id,\n-                                kind: TyKind::ImplTrait(impl_trait_node_id, bounds.clone()),\n-                                span: this.lower_span(constraint.span),\n-                                tokens: None,\n-                            },\n-                            itctx,\n-                        );\n+                match desugar_kind {\n+                    DesugarKind::ImplTrait => {\n+                        // Desugar `AssocTy: Bounds` into `AssocTy = impl Bounds`. We do this by\n+                        // constructing the HIR for `impl bounds...` and then lowering that.\n \n-                        hir::TypeBindingKind::Equality { term: ty.into() }\n-                    })\n-                } else {\n-                    // Desugar `AssocTy: Bounds` into a type binding where the\n-                    // later desugars into a trait predicate.\n-                    let bounds = self.lower_param_bounds(bounds, itctx);\n+                        let impl_trait_node_id = self.next_node_id();\n \n-                    hir::TypeBindingKind::Constraint { bounds }\n+                        self.with_dyn_type_scope(false, |this| {\n+                            let node_id = this.next_node_id();\n+                            let ty = this.lower_ty(\n+                                &Ty {\n+                                    id: node_id,\n+                                    kind: TyKind::ImplTrait(impl_trait_node_id, bounds.clone()),\n+                                    span: this.lower_span(constraint.span),\n+                                    tokens: None,\n+                                },\n+                                itctx,\n+                            );\n+\n+                            hir::TypeBindingKind::Equality { term: ty.into() }\n+                        })\n+                    }\n+                    DesugarKind::Bound => {\n+                        // Desugar `AssocTy: Bounds` into a type binding where the\n+                        // later desugars into a trait predicate.\n+                        let bounds = self.lower_param_bounds(bounds, itctx);\n+\n+                        hir::TypeBindingKind::Constraint { bounds }\n+                    }\n+                    DesugarKind::Error(position) => {\n+                        self.tcx.sess.emit_err(errors::MisplacedAssocTyBinding {\n+                            span: constraint.span,\n+                            position: DiagnosticArgFromDisplay(position),\n+                        });\n+                        let err_ty = &*self.arena.alloc(self.ty(constraint.span, hir::TyKind::Err));\n+                        hir::TypeBindingKind::Equality { term: err_ty.into() }\n+                    }\n                 }\n             }\n         };"}, {"sha": "128e7255c61e4dfd1fedf43b149918b5e236b18c", "filename": "compiler/rustc_ast_passes/locales/en-US.ftl", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_ast_passes%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_ast_passes%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Flocales%2Fen-US.ftl?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -11,9 +11,6 @@ ast_passes_forbidden_let_stable =\n ast_passes_deprecated_where_clause_location =\n     where clause not allowed here\n \n-ast_passes_forbidden_assoc_constraint =\n-    associated type bounds are not allowed within structs, enums, or unions\n-\n ast_passes_keyword_lifetime =\n     lifetimes cannot use keyword names\n "}, {"sha": "ee861e873550bb56b34b5be13c4f5f954778d594", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 32, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -71,10 +71,6 @@ struct AstValidator<'a> {\n     /// or `Foo::Bar<impl Trait>`\n     is_impl_trait_banned: bool,\n \n-    /// Used to ban associated type bounds (i.e., `Type<AssocType: Bounds>`) in\n-    /// certain positions.\n-    is_assoc_ty_bound_banned: bool,\n-\n     /// See [ForbiddenLetReason]\n     forbidden_let_reason: Option<ForbiddenLetReason>,\n \n@@ -180,30 +176,12 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn with_banned_assoc_ty_bound(&mut self, f: impl FnOnce(&mut Self)) {\n-        let old = mem::replace(&mut self.is_assoc_ty_bound_banned, true);\n-        f(self);\n-        self.is_assoc_ty_bound_banned = old;\n-    }\n-\n     fn with_impl_trait(&mut self, outer: Option<Span>, f: impl FnOnce(&mut Self)) {\n         let old = mem::replace(&mut self.outer_impl_trait, outer);\n         f(self);\n         self.outer_impl_trait = old;\n     }\n \n-    fn visit_assoc_constraint_from_generic_args(&mut self, constraint: &'a AssocConstraint) {\n-        match constraint.kind {\n-            AssocConstraintKind::Equality { .. } => {}\n-            AssocConstraintKind::Bound { .. } => {\n-                if self.is_assoc_ty_bound_banned {\n-                    self.session.emit_err(ForbiddenAssocConstraint { span: constraint.span });\n-                }\n-            }\n-        }\n-        self.visit_assoc_constraint(constraint);\n-    }\n-\n     // Mirrors `visit::walk_ty`, but tracks relevant state.\n     fn walk_ty(&mut self, t: &'a Ty) {\n         match &t.kind {\n@@ -1248,7 +1226,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         // are allowed to contain nested `impl Trait`.\n                         AngleBracketedArg::Constraint(constraint) => {\n                             self.with_impl_trait(None, |this| {\n-                                this.visit_assoc_constraint_from_generic_args(constraint);\n+                                this.visit_assoc_constraint(constraint);\n                             });\n                         }\n                     }\n@@ -1373,14 +1351,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         visit::walk_param_bound(self, bound)\n     }\n \n-    fn visit_variant_data(&mut self, s: &'a VariantData) {\n-        self.with_banned_assoc_ty_bound(|this| visit::walk_struct_def(this, s))\n-    }\n-\n-    fn visit_enum_def(&mut self, enum_definition: &'a EnumDef) {\n-        self.with_banned_assoc_ty_bound(|this| visit::walk_enum_def(this, enum_definition))\n-    }\n-\n     fn visit_fn(&mut self, fk: FnKind<'a>, span: Span, id: NodeId) {\n         // Only associated `fn`s can have `self` parameters.\n         let self_semantic = match fk.ctxt() {\n@@ -1709,7 +1679,6 @@ pub fn check_crate(session: &Session, krate: &Crate, lints: &mut LintBuffer) ->\n         outer_impl_trait: None,\n         disallow_tilde_const: None,\n         is_impl_trait_banned: false,\n-        is_assoc_ty_bound_banned: false,\n         forbidden_let_reason: Some(ForbiddenLetReason::GenericForbidden),\n         lint_buffer: lints,\n     };"}, {"sha": "f304f5a1956b81c8f81ad02370b62517821efa82", "filename": "compiler/rustc_ast_passes/src/errors.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -23,13 +23,6 @@ pub struct ForbiddenLetStable {\n     pub span: Span,\n }\n \n-#[derive(Diagnostic)]\n-#[diag(ast_passes_forbidden_assoc_constraint)]\n-pub struct ForbiddenAssocConstraint {\n-    #[primary_span]\n-    pub span: Span,\n-}\n-\n #[derive(Diagnostic)]\n #[diag(ast_passes_keyword_lifetime)]\n pub struct KeywordLifetime {"}, {"sha": "18d7bde60d789236afa45cee8b3c12a158a722f5", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -1,6 +1,7 @@\n //! This query borrow-checks the MIR to (further) ensure it is not broken.\n \n #![allow(rustc::potential_query_instability)]\n+#![feature(associated_type_bounds)]\n #![feature(box_patterns)]\n #![feature(let_chains)]\n #![feature(min_specialization)]"}, {"sha": "b27d5d20532135d845a43e830a8d52c01ed3a3bf", "filename": "compiler/rustc_borrowck/src/type_check/canonical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -117,7 +117,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n     pub(super) fn prove_predicates(\n         &mut self,\n-        predicates: impl IntoIterator<Item = impl ToPredicate<'tcx> + std::fmt::Debug>,\n+        predicates: impl IntoIterator<Item: ToPredicate<'tcx> + std::fmt::Debug>,\n         locations: Locations,\n         category: ConstraintCategory<'tcx>,\n     ) {"}, {"sha": "7e3a31f335558d2dc1db5634f0491ff7d49f1ed2", "filename": "compiler/rustc_hir_analysis/locales/en-US.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -127,5 +127,8 @@ hir_analysis_auto_deref_reached_recursion_limit = reached the recursion limit wh\n     .label = deref recursion limit reached\n     .help = consider increasing the recursion limit by adding a `#![recursion_limit = \"{$suggested_limit}\"]` attribute to your crate (`{$crate_name}`)\n \n+hir_analysis_where_clause_on_main = `main` function is not allowed to have a `where` clause\n+    .label = `main` cannot have a `where` clause\n+\n hir_analysis_track_caller_on_main = `main` function is not allowed to be `#[track_caller]`\n     .label = `main` function is not allowed to be `#[track_caller]`"}, {"sha": "d0fb7aff30eaa67df8beb2b9daf2ece5fa4360be", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -316,6 +316,15 @@ pub struct AutoDerefReachedRecursionLimit<'a> {\n     pub crate_name: Symbol,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_where_clause_on_main, code = \"E0646\")]\n+pub(crate) struct WhereClauseOnMain {\n+    #[primary_span]\n+    pub span: Span,\n+    #[label]\n+    pub generics_span: Option<Span>,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(hir_analysis_track_caller_on_main)]\n pub(crate) struct TrackCallerOnMain {"}, {"sha": "9a43ca685e3f3b8aae037c767985ea96228e0d2b", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -271,16 +271,10 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n     } else if !main_fn_predicates.predicates.is_empty() {\n         // generics may bring in implicit predicates, so we skip this check if generics is present.\n         let generics_where_clauses_span = main_fn_where_clauses_span(tcx, main_def_id);\n-        let mut diag = struct_span_err!(\n-            tcx.sess,\n-            generics_where_clauses_span.unwrap_or(main_span),\n-            E0646,\n-            \"`main` function is not allowed to have a `where` clause\"\n-        );\n-        if let Some(generics_where_clauses_span) = generics_where_clauses_span {\n-            diag.span_label(generics_where_clauses_span, \"`main` cannot have a `where` clause\");\n-        }\n-        diag.emit();\n+        tcx.sess.emit_err(errors::WhereClauseOnMain {\n+            span: generics_where_clauses_span.unwrap_or(main_span),\n+            generics_span: generics_where_clauses_span,\n+        });\n         error = true;\n     }\n "}, {"sha": "33292e871b11cdb0b52593d86f4cc94802c43567", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -478,10 +478,7 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n         self.obligations.extend(obligations.into_iter());\n     }\n \n-    pub fn register_predicates(\n-        &mut self,\n-        obligations: impl IntoIterator<Item = impl ToPredicate<'tcx>>,\n-    ) {\n+    pub fn register_predicates(&mut self, obligations: impl IntoIterator<Item: ToPredicate<'tcx>>) {\n         self.obligations.extend(obligations.into_iter().map(|to_pred| {\n             Obligation::new(self.infcx.tcx, self.trace.cause.clone(), self.param_env, to_pred)\n         }))\n@@ -814,10 +811,7 @@ pub trait ObligationEmittingRelation<'tcx>: TypeRelation<'tcx> {\n     /// Register predicates that must hold in order for this relation to hold. Uses\n     /// a default obligation cause, [`ObligationEmittingRelation::register_obligations`] should\n     /// be used if control over the obligaton causes is required.\n-    fn register_predicates(\n-        &mut self,\n-        obligations: impl IntoIterator<Item = impl ToPredicate<'tcx>>,\n-    );\n+    fn register_predicates(&mut self, obligations: impl IntoIterator<Item: ToPredicate<'tcx>>);\n \n     /// Register an obligation that both constants must be equal to each other.\n     ///"}, {"sha": "54a62326ef7bdce1107032e67166fb08bba3b5cd", "filename": "compiler/rustc_infer/src/infer/equate.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -201,10 +201,7 @@ impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {\n }\n \n impl<'tcx> ObligationEmittingRelation<'tcx> for Equate<'_, '_, 'tcx> {\n-    fn register_predicates(\n-        &mut self,\n-        obligations: impl IntoIterator<Item = impl ty::ToPredicate<'tcx>>,\n-    ) {\n+    fn register_predicates(&mut self, obligations: impl IntoIterator<Item: ty::ToPredicate<'tcx>>) {\n         self.fields.register_predicates(obligations);\n     }\n "}, {"sha": "49df393d83b3efec5418086a592a121524a8894c", "filename": "compiler/rustc_infer/src/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -148,10 +148,7 @@ impl<'combine, 'infcx, 'tcx> LatticeDir<'infcx, 'tcx> for Glb<'combine, 'infcx,\n }\n \n impl<'tcx> ObligationEmittingRelation<'tcx> for Glb<'_, '_, 'tcx> {\n-    fn register_predicates(\n-        &mut self,\n-        obligations: impl IntoIterator<Item = impl ty::ToPredicate<'tcx>>,\n-    ) {\n+    fn register_predicates(&mut self, obligations: impl IntoIterator<Item: ty::ToPredicate<'tcx>>) {\n         self.fields.register_predicates(obligations);\n     }\n "}, {"sha": "c871ccb21f8de6a3a4d1790d9e64f04f9c6a67a9", "filename": "compiler/rustc_infer/src/infer/lub.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -148,10 +148,7 @@ impl<'combine, 'infcx, 'tcx> LatticeDir<'infcx, 'tcx> for Lub<'combine, 'infcx,\n }\n \n impl<'tcx> ObligationEmittingRelation<'tcx> for Lub<'_, '_, 'tcx> {\n-    fn register_predicates(\n-        &mut self,\n-        obligations: impl IntoIterator<Item = impl ty::ToPredicate<'tcx>>,\n-    ) {\n+    fn register_predicates(&mut self, obligations: impl IntoIterator<Item: ty::ToPredicate<'tcx>>) {\n         self.fields.register_predicates(obligations);\n     }\n "}, {"sha": "6e413a7f41287a273f64d974c682a684cb2954d3", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -763,10 +763,7 @@ impl<'tcx, D> ObligationEmittingRelation<'tcx> for TypeRelating<'_, 'tcx, D>\n where\n     D: TypeRelatingDelegate<'tcx>,\n {\n-    fn register_predicates(\n-        &mut self,\n-        obligations: impl IntoIterator<Item = impl ty::ToPredicate<'tcx>>,\n-    ) {\n+    fn register_predicates(&mut self, obligations: impl IntoIterator<Item: ty::ToPredicate<'tcx>>) {\n         self.delegate.register_obligations(\n             obligations\n                 .into_iter()"}, {"sha": "4c003789a4ebe9aedb1d996118da37cc1c20347e", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -228,10 +228,7 @@ impl<'tcx> TypeRelation<'tcx> for Sub<'_, '_, 'tcx> {\n }\n \n impl<'tcx> ObligationEmittingRelation<'tcx> for Sub<'_, '_, 'tcx> {\n-    fn register_predicates(\n-        &mut self,\n-        obligations: impl IntoIterator<Item = impl ty::ToPredicate<'tcx>>,\n-    ) {\n+    fn register_predicates(&mut self, obligations: impl IntoIterator<Item: ty::ToPredicate<'tcx>>) {\n         self.fields.register_predicates(obligations);\n     }\n "}, {"sha": "bdc313c2141467d332dc2869842408f7dc4e5c55", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -13,6 +13,7 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(associated_type_bounds)]\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(extend_one)]"}, {"sha": "6bf54fa5417fffabedb2103059039ce78179a7a6", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -1856,7 +1856,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn mk_fn_def(\n         self,\n         def_id: DefId,\n-        substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n+        substs: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n     ) -> Ty<'tcx> {\n         let substs = self.check_substs(def_id, substs);\n         self.mk_ty(FnDef(def_id, substs))\n@@ -1866,7 +1866,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     fn check_substs(\n         self,\n         _def_id: DefId,\n-        substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n+        substs: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n     ) -> SubstsRef<'tcx> {\n         let substs = substs.into_iter().map(Into::into);\n         #[cfg(debug_assertions)]\n@@ -1901,7 +1901,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn mk_projection(\n         self,\n         item_def_id: DefId,\n-        substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n+        substs: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n     ) -> Ty<'tcx> {\n         self.mk_alias(ty::Projection, self.mk_alias_ty(item_def_id, substs))\n     }\n@@ -2293,7 +2293,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn mk_trait_ref(\n         self,\n         trait_def_id: DefId,\n-        substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n+        substs: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n     ) -> ty::TraitRef<'tcx> {\n         let substs = self.check_substs(trait_def_id, substs);\n         ty::TraitRef { def_id: trait_def_id, substs, _use_mk_trait_ref_instead: () }\n@@ -2302,7 +2302,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn mk_alias_ty(\n         self,\n         def_id: DefId,\n-        substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n+        substs: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n     ) -> ty::AliasTy<'tcx> {\n         let substs = self.check_substs(def_id, substs);\n         ty::AliasTy { def_id, substs, _use_mk_alias_ty_instead: () }\n@@ -2472,7 +2472,7 @@ impl<'tcx> TyCtxtAt<'tcx> {\n     pub fn mk_trait_ref(\n         self,\n         trait_lang_item: LangItem,\n-        substs: impl IntoIterator<Item = impl Into<ty::GenericArg<'tcx>>>,\n+        substs: impl IntoIterator<Item: Into<ty::GenericArg<'tcx>>>,\n     ) -> ty::TraitRef<'tcx> {\n         let trait_def_id = self.require_lang_item(trait_lang_item, Some(self.span));\n         self.tcx.mk_trait_ref(trait_def_id, substs)"}, {"sha": "658f09a850d554335540099b96138b89759e9219", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -568,7 +568,7 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n         self,\n         def_id: DefId,\n         tcx: TyCtxt<'tcx>,\n-    ) -> impl Iterator<Item = impl Iterator<Item = Ty<'tcx>> + Captures<'tcx>> {\n+    ) -> impl Iterator<Item: Iterator<Item = Ty<'tcx>> + Captures<'tcx>> {\n         let layout = tcx.generator_layout(def_id).unwrap();\n         layout.variant_fields.iter().map(move |variant| {\n             variant.iter().map(move |field| {"}, {"sha": "2de89f67dfdc74c001b6c37417fd74ef784790fa", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -832,7 +832,7 @@ fn trait_method<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     trait_def_id: DefId,\n     method_name: Symbol,\n-    substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n+    substs: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n ) -> ConstantKind<'tcx> {\n     // The unhygienic comparison here is acceptable because this is only\n     // used on known traits."}, {"sha": "49ded10ba1fed68122234a02337d8671d1524a3e", "filename": "compiler/rustc_mir_transform/src/dataflow_const_prop.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -122,7 +122,10 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'_, 'tcx> {\n     ) {\n         match rvalue {\n             Rvalue::Aggregate(kind, operands) => {\n-                state.flood_with(target.as_ref(), self.map(), FlatSet::Bottom);\n+                // If we assign `target = Enum::Variant#0(operand)`,\n+                // we must make sure that all `target as Variant#i` are `Top`.\n+                state.flood(target.as_ref(), self.map());\n+\n                 if let Some(target_idx) = self.map().find(target.as_ref()) {\n                     let (variant_target, variant_index) = match **kind {\n                         AggregateKind::Tuple | AggregateKind::Closure(..) => {\n@@ -131,18 +134,21 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'_, 'tcx> {\n                         AggregateKind::Adt(def_id, variant_index, ..) => {\n                             match self.tcx.def_kind(def_id) {\n                                 DefKind::Struct => (Some(target_idx), None),\n-                                DefKind::Enum => (Some(target_idx), Some(variant_index)),\n+                                DefKind::Enum => (\n+                                    self.map.apply(target_idx, TrackElem::Variant(variant_index)),\n+                                    Some(variant_index),\n+                                ),\n                                 _ => (None, None),\n                             }\n                         }\n                         _ => (None, None),\n                     };\n-                    if let Some(target) = variant_target {\n+                    if let Some(variant_target_idx) = variant_target {\n                         for (field_index, operand) in operands.iter().enumerate() {\n-                            if let Some(field) = self\n-                                .map()\n-                                .apply(target, TrackElem::Field(Field::from_usize(field_index)))\n-                            {\n+                            if let Some(field) = self.map().apply(\n+                                variant_target_idx,\n+                                TrackElem::Field(Field::from_usize(field_index)),\n+                            ) {\n                                 let result = self.handle_operand(operand, state);\n                                 state.insert_idx(field, result, self.map());\n                             }\n@@ -151,6 +157,11 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'_, 'tcx> {\n                     if let Some(variant_index) = variant_index\n                         && let Some(discr_idx) = self.map().apply(target_idx, TrackElem::Discriminant)\n                     {\n+                        // We are assigning the discriminant as part of an aggregate.\n+                        // This discriminant can only alias a variant field's value if the operand\n+                        // had an invalid value for that type.\n+                        // Using invalid values is UB, so we are allowed to perform the assignment\n+                        // without extra flooding.\n                         let enum_ty = target.ty(self.local_decls, self.tcx).ty;\n                         if let Some(discr_val) = self.eval_discriminant(enum_ty, variant_index) {\n                             state.insert_value_idx(discr_idx, FlatSet::Elem(discr_val), &self.map);"}, {"sha": "9b47c7299bb7b2678a121a2c96f10300814b9b8d", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -42,7 +42,7 @@ pub trait InferCtxtExt<'tcx> {\n     fn type_implements_trait(\n         &self,\n         trait_def_id: DefId,\n-        params: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n+        params: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> traits::EvaluationResult;\n }\n@@ -82,7 +82,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n     fn type_implements_trait(\n         &self,\n         trait_def_id: DefId,\n-        params: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n+        params: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> traits::EvaluationResult {\n         let trait_ref = self.tcx.mk_trait_ref(trait_def_id, params);"}, {"sha": "1174efdbfa8fab5efdc17dfa5792db035ea8d252", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/method_chain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -98,7 +98,7 @@ impl<'tcx> ObligationEmittingRelation<'tcx> for CollectAllMismatches<'_, 'tcx> {\n \n     fn register_predicates(\n         &mut self,\n-        _obligations: impl IntoIterator<Item = impl ty::ToPredicate<'tcx>>,\n+        _obligations: impl IntoIterator<Item: ty::ToPredicate<'tcx>>,\n     ) {\n         // FIXME(deferred_projection_equality)\n     }"}, {"sha": "638a6592c088d9b23a688f65aef25cee45e06f53", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -239,7 +239,7 @@ pub fn predicate_for_trait_def<'tcx>(\n     cause: ObligationCause<'tcx>,\n     trait_def_id: DefId,\n     recursion_depth: usize,\n-    params: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n+    params: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n ) -> PredicateObligation<'tcx> {\n     let trait_ref = tcx.mk_trait_ref(trait_def_id, params);\n     predicate_for_trait_ref(tcx, cause, param_env, trait_ref, recursion_depth)"}, {"sha": "30356fa851985da1536584c6866d0dc2ee02f1ff", "filename": "library/std/src/sys/windows/args.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -270,7 +270,7 @@ pub(crate) fn make_bat_command_line(\n     // It is necessary to surround the command in an extra pair of quotes,\n     // hence the trailing quote here. It will be closed after all arguments\n     // have been added.\n-    let mut cmd: Vec<u16> = \"cmd.exe /c \\\"\".encode_utf16().collect();\n+    let mut cmd: Vec<u16> = \"cmd.exe /d /c \\\"\".encode_utf16().collect();\n \n     // Push the script name surrounded by its quote pair.\n     cmd.push(b'\"' as u16);\n@@ -290,6 +290,15 @@ pub(crate) fn make_bat_command_line(\n     // reconstructed by the batch script by default.\n     for arg in args {\n         cmd.push(' ' as u16);\n+        // Make sure to always quote special command prompt characters, including:\n+        // * Characters `cmd /?` says require quotes.\n+        // * `%` for environment variables, as in `%TMP%`.\n+        // * `|<>` pipe/redirect characters.\n+        const SPECIAL: &[u8] = b\"\\t &()[]{}^=;!'+,`~%|<>\";\n+        let force_quotes = match arg {\n+            Arg::Regular(arg) if !force_quotes => arg.bytes().iter().any(|c| SPECIAL.contains(c)),\n+            _ => force_quotes,\n+        };\n         append_arg(&mut cmd, arg, force_quotes)?;\n     }\n "}, {"sha": "648423e1289b949659e9b0d186b8054383e72127", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -77,7 +77,7 @@ pub(crate) fn clean_doc_module<'tcx>(doc: &DocModule<'tcx>, cx: &mut DocContext<\n     // This covers the case where somebody does an import which should pull in an item,\n     // but there's already an item with the same namespace and same name. Rust gives\n     // priority to the not-imported one, so we should, too.\n-    items.extend(doc.items.iter().flat_map(|(item, renamed, import_id)| {\n+    items.extend(doc.items.values().flat_map(|(item, renamed, import_id)| {\n         // First, lower everything other than imports.\n         if matches!(item.kind, hir::ItemKind::Use(_, hir::UseKind::Glob)) {\n             return Vec::new();\n@@ -90,7 +90,7 @@ pub(crate) fn clean_doc_module<'tcx>(doc: &DocModule<'tcx>, cx: &mut DocContext<\n         }\n         v\n     }));\n-    items.extend(doc.items.iter().flat_map(|(item, renamed, _)| {\n+    items.extend(doc.items.values().flat_map(|(item, renamed, _)| {\n         // Now we actually lower the imports, skipping everything else.\n         if let hir::ItemKind::Use(path, hir::UseKind::Glob) = item.kind {\n             let name = renamed.unwrap_or_else(|| cx.tcx.hir().name(item.hir_id()));"}, {"sha": "277201e4de978376955a6e65ecbd35bf2eb10949", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -1,7 +1,7 @@\n //! The Rust AST Visitor. Extracts useful information and massages it into a form\n //! usable for `clean`.\n \n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId, LocalDefIdSet};\n@@ -26,8 +26,12 @@ pub(crate) struct Module<'hir> {\n     pub(crate) where_inner: Span,\n     pub(crate) mods: Vec<Module<'hir>>,\n     pub(crate) def_id: LocalDefId,\n-    // (item, renamed, import_id)\n-    pub(crate) items: Vec<(&'hir hir::Item<'hir>, Option<Symbol>, Option<LocalDefId>)>,\n+    /// The key is the item `ItemId` and the value is: (item, renamed, import_id).\n+    /// We use `FxIndexMap` to keep the insert order.\n+    pub(crate) items: FxIndexMap<\n+        (LocalDefId, Option<Symbol>),\n+        (&'hir hir::Item<'hir>, Option<Symbol>, Option<LocalDefId>),\n+    >,\n     pub(crate) foreigns: Vec<(&'hir hir::ForeignItem<'hir>, Option<Symbol>)>,\n }\n \n@@ -38,7 +42,7 @@ impl Module<'_> {\n             def_id,\n             where_inner,\n             mods: Vec::new(),\n-            items: Vec::new(),\n+            items: FxIndexMap::default(),\n             foreigns: Vec::new(),\n         }\n     }\n@@ -136,7 +140,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 inserted.insert(def_id)\n             {\n                     let item = self.cx.tcx.hir().expect_item(local_def_id);\n-                    top_level_module.items.push((item, None, None));\n+                    top_level_module.items.insert((local_def_id, Some(item.ident.name)), (item, None, None));\n             }\n         }\n \n@@ -294,7 +298,11 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         renamed: Option<Symbol>,\n         parent_id: Option<LocalDefId>,\n     ) {\n-        self.modules.last_mut().unwrap().items.push((item, renamed, parent_id))\n+        self.modules\n+            .last_mut()\n+            .unwrap()\n+            .items\n+            .insert((item.owner_id.def_id, renamed), (item, renamed, parent_id));\n     }\n \n     fn visit_item_inner("}, {"sha": "a1f675a3b40f650af97bcafd8f48a684196b18d9", "filename": "src/tools/jsondoclint/src/validator.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -71,6 +71,19 @@ impl<'a> Validator<'a> {\n         }\n     }\n \n+    fn check_items(&mut self, id: &Id, items: &[Id]) {\n+        let mut visited_ids = HashSet::with_capacity(items.len());\n+\n+        for item in items {\n+            if !visited_ids.insert(item) {\n+                self.fail(\n+                    id,\n+                    ErrorKind::Custom(format!(\"Duplicated entry in `items` field: `{item:?}`\")),\n+                );\n+            }\n+        }\n+    }\n+\n     fn check_item(&mut self, id: &'a Id) {\n         if let Some(item) = &self.krate.index.get(id) {\n             item.links.values().for_each(|id| self.add_any_id(id));\n@@ -83,9 +96,9 @@ impl<'a> Validator<'a> {\n                 ItemEnum::Enum(x) => self.check_enum(x),\n                 ItemEnum::Variant(x) => self.check_variant(x, id),\n                 ItemEnum::Function(x) => self.check_function(x),\n-                ItemEnum::Trait(x) => self.check_trait(x),\n+                ItemEnum::Trait(x) => self.check_trait(x, id),\n                 ItemEnum::TraitAlias(x) => self.check_trait_alias(x),\n-                ItemEnum::Impl(x) => self.check_impl(x),\n+                ItemEnum::Impl(x) => self.check_impl(x, id),\n                 ItemEnum::Typedef(x) => self.check_typedef(x),\n                 ItemEnum::OpaqueTy(x) => self.check_opaque_ty(x),\n                 ItemEnum::Constant(x) => self.check_constant(x),\n@@ -94,7 +107,7 @@ impl<'a> Validator<'a> {\n                 ItemEnum::Macro(x) => self.check_macro(x),\n                 ItemEnum::ProcMacro(x) => self.check_proc_macro(x),\n                 ItemEnum::Primitive(x) => self.check_primitive_type(x),\n-                ItemEnum::Module(x) => self.check_module(x),\n+                ItemEnum::Module(x) => self.check_module(x, id),\n                 // FIXME: Why don't these have their own structs?\n                 ItemEnum::ExternCrate { .. } => {}\n                 ItemEnum::AssocConst { type_, default: _ } => self.check_type(type_),\n@@ -112,7 +125,8 @@ impl<'a> Validator<'a> {\n     }\n \n     // Core checkers\n-    fn check_module(&mut self, module: &'a Module) {\n+    fn check_module(&mut self, module: &'a Module, id: &Id) {\n+        self.check_items(id, &module.items);\n         module.items.iter().for_each(|i| self.add_mod_item_id(i));\n     }\n \n@@ -181,7 +195,8 @@ impl<'a> Validator<'a> {\n         self.check_fn_decl(&x.decl);\n     }\n \n-    fn check_trait(&mut self, x: &'a Trait) {\n+    fn check_trait(&mut self, x: &'a Trait, id: &Id) {\n+        self.check_items(id, &x.items);\n         self.check_generics(&x.generics);\n         x.items.iter().for_each(|i| self.add_trait_item_id(i));\n         x.bounds.iter().for_each(|i| self.check_generic_bound(i));\n@@ -193,7 +208,8 @@ impl<'a> Validator<'a> {\n         x.params.iter().for_each(|i| self.check_generic_bound(i));\n     }\n \n-    fn check_impl(&mut self, x: &'a Impl) {\n+    fn check_impl(&mut self, x: &'a Impl, id: &Id) {\n+        self.check_items(id, &x.items);\n         self.check_generics(&x.generics);\n         if let Some(path) = &x.trait_ {\n             self.check_path(path, PathKind::Trait);"}, {"sha": "c4002d65e5db57c7c0981d1b1a5c7b237819b754", "filename": "tests/mir-opt/dataflow-const-prop/enum.multiple.DataflowConstProp.diff", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.multiple.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.multiple.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.multiple.DataflowConstProp.diff?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -0,0 +1,82 @@\n+- // MIR for `multiple` before DataflowConstProp\n++ // MIR for `multiple` after DataflowConstProp\n+  \n+  fn multiple(_1: bool, _2: u8) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/enum.rs:+0:13: +0:14\n+      debug i => _2;                       // in scope 0 at $DIR/enum.rs:+0:22: +0:23\n+      let mut _0: ();                      // return place in scope 0 at $DIR/enum.rs:+0:29: +0:29\n+      let _3: std::option::Option<u8>;     // in scope 0 at $DIR/enum.rs:+1:9: +1:10\n+      let mut _4: bool;                    // in scope 0 at $DIR/enum.rs:+1:16: +1:17\n+      let mut _5: u8;                      // in scope 0 at $DIR/enum.rs:+2:14: +2:15\n+      let mut _7: isize;                   // in scope 0 at $DIR/enum.rs:+9:23: +9:30\n+      scope 1 {\n+          debug e => _3;                   // in scope 1 at $DIR/enum.rs:+1:9: +1:10\n+          let _6: u8;                      // in scope 1 at $DIR/enum.rs:+9:9: +9:10\n+          let _8: u8;                      // in scope 1 at $DIR/enum.rs:+9:28: +9:29\n+          scope 2 {\n+              debug x => _6;               // in scope 2 at $DIR/enum.rs:+9:9: +9:10\n+              let _9: u8;                  // in scope 2 at $DIR/enum.rs:+11:9: +11:10\n+              scope 4 {\n+                  debug y => _9;           // in scope 4 at $DIR/enum.rs:+11:9: +11:10\n+              }\n+          }\n+          scope 3 {\n+              debug i => _8;               // in scope 3 at $DIR/enum.rs:+9:28: +9:29\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/enum.rs:+1:9: +1:10\n+          StorageLive(_4);                 // scope 0 at $DIR/enum.rs:+1:16: +1:17\n+          _4 = _1;                         // scope 0 at $DIR/enum.rs:+1:16: +1:17\n+          switchInt(move _4) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/enum.rs:+1:16: +1:17\n+      }\n+  \n+      bb1: {\n+          StorageLive(_5);                 // scope 0 at $DIR/enum.rs:+2:14: +2:15\n+          _5 = _2;                         // scope 0 at $DIR/enum.rs:+2:14: +2:15\n+          _3 = Option::<u8>::Some(move _5); // scope 0 at $DIR/enum.rs:+2:9: +2:16\n+          StorageDead(_5);                 // scope 0 at $DIR/enum.rs:+2:15: +2:16\n+          goto -> bb3;                     // scope 0 at $DIR/enum.rs:+1:13: +5:6\n+      }\n+  \n+      bb2: {\n+          _3 = Option::<u8>::None;         // scope 0 at $DIR/enum.rs:+4:9: +4:13\n+          goto -> bb3;                     // scope 0 at $DIR/enum.rs:+1:13: +5:6\n+      }\n+  \n+      bb3: {\n+          StorageDead(_4);                 // scope 0 at $DIR/enum.rs:+5:5: +5:6\n+          StorageLive(_6);                 // scope 1 at $DIR/enum.rs:+9:9: +9:10\n+          _7 = discriminant(_3);           // scope 1 at $DIR/enum.rs:+9:19: +9:20\n+          switchInt(move _7) -> [0: bb4, 1: bb6, otherwise: bb5]; // scope 1 at $DIR/enum.rs:+9:13: +9:20\n+      }\n+  \n+      bb4: {\n+          _6 = const 0_u8;                 // scope 1 at $DIR/enum.rs:+9:45: +9:46\n+          goto -> bb7;                     // scope 1 at $DIR/enum.rs:+9:45: +9:46\n+      }\n+  \n+      bb5: {\n+          unreachable;                     // scope 1 at $DIR/enum.rs:+9:19: +9:20\n+      }\n+  \n+      bb6: {\n+          StorageLive(_8);                 // scope 1 at $DIR/enum.rs:+9:28: +9:29\n+          _8 = ((_3 as Some).0: u8);       // scope 1 at $DIR/enum.rs:+9:28: +9:29\n+          _6 = _8;                         // scope 3 at $DIR/enum.rs:+9:34: +9:35\n+          StorageDead(_8);                 // scope 1 at $DIR/enum.rs:+9:34: +9:35\n+          goto -> bb7;                     // scope 1 at $DIR/enum.rs:+9:34: +9:35\n+      }\n+  \n+      bb7: {\n+          StorageLive(_9);                 // scope 2 at $DIR/enum.rs:+11:9: +11:10\n+          _9 = _6;                         // scope 2 at $DIR/enum.rs:+11:13: +11:14\n+          _0 = const ();                   // scope 0 at $DIR/enum.rs:+0:29: +12:2\n+          StorageDead(_9);                 // scope 2 at $DIR/enum.rs:+12:1: +12:2\n+          StorageDead(_6);                 // scope 1 at $DIR/enum.rs:+12:1: +12:2\n+          StorageDead(_3);                 // scope 0 at $DIR/enum.rs:+12:1: +12:2\n+          return;                          // scope 0 at $DIR/enum.rs:+12:2: +12:2\n+      }\n+  }\n+  "}, {"sha": "79a20d7ef457dc09058ed54f19e1ee67ffa2462d", "filename": "tests/mir-opt/dataflow-const-prop/enum.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -46,7 +46,23 @@ fn mutate_discriminant() -> u8 {\n     )\n }\n \n+// EMIT_MIR enum.multiple.DataflowConstProp.diff\n+fn multiple(x: bool, i: u8) {\n+    let e = if x {\n+        Some(i)\n+    } else {\n+        None\n+    };\n+    // The dataflow state must have:\n+    //   discriminant(e) => Top\n+    //   (e as Some).0 => Top\n+    let x = match e { Some(i) => i, None => 0 };\n+    // Therefore, `x` should be `Top` here, and no replacement shall happen.\n+    let y = x;\n+}\n+\n fn main() {\n     simple();\n     mutate_discriminant();\n+    multiple(false, 5);\n }"}, {"sha": "22bdc35d694c1168a71a0ab12063b289418866b8", "filename": "tests/mir-opt/dataflow-const-prop/enum.simple.DataflowConstProp.diff", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.simple.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.simple.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.simple.DataflowConstProp.diff?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -45,8 +45,10 @@\n   \n       bb3: {\n           StorageLive(_4);                 // scope 1 at $DIR/enum.rs:+2:29: +2:30\n-          _4 = ((_1 as V1).0: i32);        // scope 1 at $DIR/enum.rs:+2:29: +2:30\n-          _2 = _4;                         // scope 3 at $DIR/enum.rs:+2:35: +2:36\n+-         _4 = ((_1 as V1).0: i32);        // scope 1 at $DIR/enum.rs:+2:29: +2:30\n+-         _2 = _4;                         // scope 3 at $DIR/enum.rs:+2:35: +2:36\n++         _4 = const 0_i32;                // scope 1 at $DIR/enum.rs:+2:29: +2:30\n++         _2 = const 0_i32;                // scope 3 at $DIR/enum.rs:+2:35: +2:36\n           StorageDead(_4);                 // scope 1 at $DIR/enum.rs:+2:35: +2:36\n           goto -> bb4;                     // scope 1 at $DIR/enum.rs:+2:35: +2:36\n       }"}, {"sha": "fe6f1b38ca620d46234e9957b06da2dfb37f2a96", "filename": "tests/rustdoc/reexports-of-same-name.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Frustdoc%2Freexports-of-same-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Frustdoc%2Freexports-of-same-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Freexports-of-same-name.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -0,0 +1,26 @@\n+// This test ensures that there are 4 imports as expected:\n+// * 2 for `Foo`\n+// * 2 for `Bar`\n+\n+#![crate_name = \"foo\"]\n+\n+// @has 'foo/index.html'\n+\n+pub mod nested {\n+    /// Foo the struct\n+    pub struct Foo {}\n+\n+    #[allow(non_snake_case)]\n+    /// Foo the function\n+    pub fn Foo() {}\n+}\n+\n+// @count - '//*[@id=\"main-content\"]//code' 'pub use nested::Foo;' 2\n+// @has - '//*[@id=\"reexport.Foo\"]//a[@href=\"nested/struct.Foo.html\"]' 'Foo'\n+// @has - '//*[@id=\"reexport.Foo-1\"]//a[@href=\"nested/fn.Foo.html\"]' 'Foo'\n+pub use nested::Foo;\n+\n+// @count - '//*[@id=\"main-content\"]//code' 'pub use Foo as Bar;' 2\n+// @has - '//*[@id=\"reexport.Bar\"]//a[@href=\"nested/struct.Foo.html\"]' 'Foo'\n+// @has - '//*[@id=\"reexport.Bar-1\"]//a[@href=\"nested/fn.Foo.html\"]' 'Foo'\n+pub use Foo as Bar;"}, {"sha": "bbafc55dac3a044099f967dffee6c3c9d9725c61", "filename": "tests/ui/associated-consts/issue-105330.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fassociated-consts%2Fissue-105330.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fassociated-consts%2Fissue-105330.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-consts%2Fissue-105330.stderr?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -33,7 +33,7 @@ LL | fn main<A: TraitWAssocConst<A=32>>() {\n    = note: see issue #92827 <https://github.com/rust-lang/rust/issues/92827> for more information\n    = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl header\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl headers\n   --> $DIR/issue-105330.rs:6:27\n    |\n LL | impl TraitWAssocConst for impl Demo {"}, {"sha": "8cab1f66c2709348b1ec2ef4c3c56b8bfee22278", "filename": "tests/ui/associated-type-bounds/bad-universal-in-dyn-in-where-clause.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-dyn-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-dyn-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-dyn-in-where-clause.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -0,0 +1,14 @@\n+#![feature(associated_type_bounds)]\n+\n+trait B {\n+    type AssocType;\n+}\n+\n+fn f()\n+where\n+    dyn for<'j> B<AssocType: 'j>:,\n+    //~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n+{\n+}\n+\n+fn main() {}"}, {"sha": "6fa266d23d49b04883d632220518c01c1e294b4d", "filename": "tests/ui/associated-type-bounds/bad-universal-in-dyn-in-where-clause.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-dyn-in-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-dyn-in-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-dyn-in-where-clause.stderr?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -0,0 +1,8 @@\n+error: associated type bounds are only allowed in where clauses and function signatures, not in bounds\n+  --> $DIR/bad-universal-in-dyn-in-where-clause.rs:9:19\n+   |\n+LL |     dyn for<'j> B<AssocType: 'j>:,\n+   |                   ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "1d5d181efcc01009851a6ab5f7b19757f6690b7a", "filename": "tests/ui/associated-type-bounds/bad-universal-in-impl-sig.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-impl-sig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-impl-sig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-impl-sig.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -0,0 +1,13 @@\n+#![feature(associated_type_bounds)]\n+\n+trait Trait {\n+    type Item;\n+}\n+\n+trait Trait2 {}\n+\n+// It's not possible to insert a universal `impl Trait` here!\n+impl dyn Trait<Item: Trait2> {}\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n+\n+fn main() {}"}, {"sha": "8b66627d57fe2fe7c5882281731554cc33c3b0de", "filename": "tests/ui/associated-type-bounds/bad-universal-in-impl-sig.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-impl-sig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-impl-sig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-impl-sig.stderr?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -0,0 +1,8 @@\n+error: associated type bounds are only allowed in where clauses and function signatures, not in impl headers\n+  --> $DIR/bad-universal-in-impl-sig.rs:10:16\n+   |\n+LL | impl dyn Trait<Item: Trait2> {}\n+   |                ^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "057966941dc099ee8feea40befc2ab4e7be1d1ab", "filename": "tests/ui/associated-type-bounds/inside-adt.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -3,28 +3,24 @@\n use std::mem::ManuallyDrop;\n \n struct S1 { f: dyn Iterator<Item: Copy> }\n-//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n struct S2 { f: Box<dyn Iterator<Item: Copy>> }\n-//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n struct S3 { f: dyn Iterator<Item: 'static> }\n-//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n \n enum E1 { V(dyn Iterator<Item: Copy>) }\n-//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n-//~| ERROR the size for values of type `(dyn Iterator<Item = impl Copy> + 'static)`\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n enum E2 { V(Box<dyn Iterator<Item: Copy>>) }\n-//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n enum E3 { V(dyn Iterator<Item: 'static>) }\n-//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n-//~| ERROR the size for values of type `(dyn Iterator<Item = impl Sized + 'static> + 'static)`\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n \n union U1 { f: ManuallyDrop<dyn Iterator<Item: Copy>> }\n-//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n-//~| ERROR the size for values of type `(dyn Iterator<Item = impl Copy> + 'static)`\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n union U2 { f: ManuallyDrop<Box<dyn Iterator<Item: Copy>>> }\n-//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n union U3 { f: ManuallyDrop<dyn Iterator<Item: 'static>> }\n-//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n-//~| ERROR the size for values of type `(dyn Iterator<Item = impl Sized + 'static> + 'static)`\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n \n fn main() {}"}, {"sha": "f848bd798ee0abbb15b1bbfa50e51c637fd407d2", "filename": "tests/ui/associated-type-bounds/inside-adt.stderr", "status": "modified", "additions": 15, "deletions": 90, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -1,131 +1,56 @@\n-error: associated type bounds are not allowed within structs, enums, or unions\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field types\n   --> $DIR/inside-adt.rs:5:29\n    |\n LL | struct S1 { f: dyn Iterator<Item: Copy> }\n    |                             ^^^^^^^^^^\n \n-error: associated type bounds are not allowed within structs, enums, or unions\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field types\n   --> $DIR/inside-adt.rs:7:33\n    |\n LL | struct S2 { f: Box<dyn Iterator<Item: Copy>> }\n    |                                 ^^^^^^^^^^\n \n-error: associated type bounds are not allowed within structs, enums, or unions\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field types\n   --> $DIR/inside-adt.rs:9:29\n    |\n LL | struct S3 { f: dyn Iterator<Item: 'static> }\n    |                             ^^^^^^^^^^^^^\n \n-error: associated type bounds are not allowed within structs, enums, or unions\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field types\n   --> $DIR/inside-adt.rs:12:26\n    |\n LL | enum E1 { V(dyn Iterator<Item: Copy>) }\n    |                          ^^^^^^^^^^\n \n-error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:15:30\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field types\n+  --> $DIR/inside-adt.rs:14:30\n    |\n LL | enum E2 { V(Box<dyn Iterator<Item: Copy>>) }\n    |                              ^^^^^^^^^^\n \n-error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:17:26\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field types\n+  --> $DIR/inside-adt.rs:16:26\n    |\n LL | enum E3 { V(dyn Iterator<Item: 'static>) }\n    |                          ^^^^^^^^^^^^^\n \n-error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:21:41\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field types\n+  --> $DIR/inside-adt.rs:19:41\n    |\n LL | union U1 { f: ManuallyDrop<dyn Iterator<Item: Copy>> }\n    |                                         ^^^^^^^^^^\n \n-error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:24:45\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field types\n+  --> $DIR/inside-adt.rs:21:45\n    |\n LL | union U2 { f: ManuallyDrop<Box<dyn Iterator<Item: Copy>>> }\n    |                                             ^^^^^^^^^^\n \n-error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:26:41\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field types\n+  --> $DIR/inside-adt.rs:23:41\n    |\n LL | union U3 { f: ManuallyDrop<dyn Iterator<Item: 'static>> }\n    |                                         ^^^^^^^^^^^^^\n \n-error[E0277]: the size for values of type `(dyn Iterator<Item = impl Copy> + 'static)` cannot be known at compilation time\n-  --> $DIR/inside-adt.rs:12:13\n-   |\n-LL | enum E1 { V(dyn Iterator<Item: Copy>) }\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n-   |\n-   = help: the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Copy> + 'static)`\n-   = note: no field of an enum variant may have a dynamically sized type\n-   = help: change the field's type to have a statically known size\n-help: borrowed types always have a statically known size\n-   |\n-LL | enum E1 { V(&dyn Iterator<Item: Copy>) }\n-   |             +\n-help: the `Box` type always has a statically known size and allocates its contents in the heap\n-   |\n-LL | enum E1 { V(Box<dyn Iterator<Item: Copy>>) }\n-   |             ++++                        +\n-\n-error[E0277]: the size for values of type `(dyn Iterator<Item = impl Sized + 'static> + 'static)` cannot be known at compilation time\n-  --> $DIR/inside-adt.rs:17:13\n-   |\n-LL | enum E3 { V(dyn Iterator<Item: 'static>) }\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n-   |\n-   = help: the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Sized + 'static> + 'static)`\n-   = note: no field of an enum variant may have a dynamically sized type\n-   = help: change the field's type to have a statically known size\n-help: borrowed types always have a statically known size\n-   |\n-LL | enum E3 { V(&dyn Iterator<Item: 'static>) }\n-   |             +\n-help: the `Box` type always has a statically known size and allocates its contents in the heap\n-   |\n-LL | enum E3 { V(Box<dyn Iterator<Item: 'static>>) }\n-   |             ++++                           +\n-\n-error[E0277]: the size for values of type `(dyn Iterator<Item = impl Copy> + 'static)` cannot be known at compilation time\n-  --> $DIR/inside-adt.rs:21:15\n-   |\n-LL | union U1 { f: ManuallyDrop<dyn Iterator<Item: Copy>> }\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n-   |\n-   = help: within `ManuallyDrop<(dyn Iterator<Item = impl Copy> + 'static)>`, the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Copy> + 'static)`\n-   = note: required because it appears within the type `ManuallyDrop<dyn Iterator<Item = impl Copy>>`\n-   = note: no field of a union may have a dynamically sized type\n-   = help: change the field's type to have a statically known size\n-help: borrowed types always have a statically known size\n-   |\n-LL | union U1 { f: &ManuallyDrop<dyn Iterator<Item: Copy>> }\n-   |               +\n-help: the `Box` type always has a statically known size and allocates its contents in the heap\n-   |\n-LL | union U1 { f: Box<ManuallyDrop<dyn Iterator<Item: Copy>>> }\n-   |               ++++                                      +\n-\n-error[E0277]: the size for values of type `(dyn Iterator<Item = impl Sized + 'static> + 'static)` cannot be known at compilation time\n-  --> $DIR/inside-adt.rs:26:15\n-   |\n-LL | union U3 { f: ManuallyDrop<dyn Iterator<Item: 'static>> }\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n-   |\n-   = help: within `ManuallyDrop<(dyn Iterator<Item = impl Sized + 'static> + 'static)>`, the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Sized + 'static> + 'static)`\n-   = note: required because it appears within the type `ManuallyDrop<dyn Iterator<Item = impl Sized>>`\n-   = note: no field of a union may have a dynamically sized type\n-   = help: change the field's type to have a statically known size\n-help: borrowed types always have a statically known size\n-   |\n-LL | union U3 { f: &ManuallyDrop<dyn Iterator<Item: 'static>> }\n-   |               +\n-help: the `Box` type always has a statically known size and allocates its contents in the heap\n-   |\n-LL | union U3 { f: Box<ManuallyDrop<dyn Iterator<Item: 'static>>> }\n-   |               ++++                                         +\n-\n-error: aborting due to 13 previous errors\n+error: aborting due to 9 previous errors\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "78017429f73d5884359bd4f4d6eb03812f6bc961", "filename": "tests/ui/async-await/in-trait/fn-not-async-err2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -11,7 +11,7 @@ trait MyTrait {\n \n impl MyTrait for i32 {\n     fn foo(&self) -> impl Future<Output = i32> {\n-        //~^ ERROR `impl Trait` only allowed in function and inherent method return types, not in `impl` method return [E0562]\n+        //~^ ERROR `impl Trait` only allowed in function and inherent method return types, not in `impl` method return types\n         async { *self }\n     }\n }"}, {"sha": "37d9669c0124b572f7469ddbbdcc3cb8bc38019e", "filename": "tests/ui/async-await/in-trait/fn-not-async-err2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.stderr?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return types\n   --> $DIR/fn-not-async-err2.rs:13:22\n    |\n LL |     fn foo(&self) -> impl Future<Output = i32> {"}, {"sha": "4233a8af9b6a6a0d18babda2b33c7018c94c0a3f", "filename": "tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -115,19 +115,19 @@ LL |     let _: impl Tr1<As1: Copy> = S1;\n    = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in const type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in const types\n   --> $DIR/feature-gate-associated_type_bounds.rs:55:14\n    |\n LL | const _cdef: impl Tr1<As1: Copy> = S1;\n    |              ^^^^^^^^^^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in const type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in const types\n   --> $DIR/feature-gate-associated_type_bounds.rs:61:15\n    |\n LL | static _sdef: impl Tr1<As1: Copy> = S1;\n    |               ^^^^^^^^^^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/feature-gate-associated_type_bounds.rs:68:12\n    |\n LL |     let _: impl Tr1<As1: Copy> = S1;"}, {"sha": "c8c3e13d7fc5a61326cab98fcf01ea6b182a2f12", "filename": "tests/ui/feature-gates/feature-gate-impl_trait_in_fn_trait_return.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_fn_trait_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_fn_trait_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_fn_trait_return.stderr?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return types\n   --> $DIR/feature-gate-impl_trait_in_fn_trait_return.rs:1:24\n    |\n LL | fn f() -> impl Fn() -> impl Sized { || () }\n@@ -7,7 +7,7 @@ LL | fn f() -> impl Fn() -> impl Sized { || () }\n    = note: see issue #99697 <https://github.com/rust-lang/rust/issues/99697> for more information\n    = help: add `#![feature(impl_trait_in_fn_trait_return)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return types\n   --> $DIR/feature-gate-impl_trait_in_fn_trait_return.rs:3:32\n    |\n LL | fn g() -> &'static dyn Fn() -> impl Sized { &|| () }"}, {"sha": "0082b6fafee8fc8f407ce2fa6ac472e658c47a27", "filename": "tests/ui/feature-gates/feature-gate-return_position_impl_trait_in_trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.stderr?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\n   --> $DIR/feature-gate-return_position_impl_trait_in_trait.rs:8:17\n    |\n LL |     fn bar() -> impl Sized;\n@@ -7,7 +7,7 @@ LL |     fn bar() -> impl Sized;\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n    = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\n   --> $DIR/feature-gate-return_position_impl_trait_in_trait.rs:9:21\n    |\n LL |     fn baz() -> Box<impl std::fmt::Display>;\n@@ -16,7 +16,7 @@ LL |     fn baz() -> Box<impl std::fmt::Display>;\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n    = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\n   --> $DIR/feature-gate-return_position_impl_trait_in_trait.rs:15:23\n    |\n LL |     async fn bar() -> impl Sized;"}, {"sha": "7ef063af952226faa3759357268b2a8aa88c3963", "filename": "tests/ui/impl-trait/issues/issue-54600.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.stderr?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/issue-54600.rs:4:19\n    |\n LL |     let x: Option<impl Debug> = Some(44_u32);"}, {"sha": "1d1316f0e110b6b77a3f2b21da3422697264aa93", "filename": "tests/ui/impl-trait/issues/issue-54840.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.stderr?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/issue-54840.rs:5:13\n    |\n LL |     let j: &impl Add = &i;"}, {"sha": "26ec2a4f9cfe5fdca8a1cecbb7478aff348c7fa5", "filename": "tests/ui/impl-trait/issues/issue-58504.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.stderr?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/issue-58504.rs:10:16\n    |\n LL |     let gens: [impl Generator<Return=!, Yield=()>;2] = [ mk_gen(), mk_gen() ];"}, {"sha": "2b4d0abdffca8f4c5640db91600b812d958d5f5a", "filename": "tests/ui/impl-trait/issues/issue-58956.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.stderr?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -1,10 +1,10 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in const type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in const types\n   --> $DIR/issue-58956.rs:7:11\n    |\n LL | const _A: impl Lam = {\n    |           ^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/issue-58956.rs:9:17\n    |\n LL |     let x: Wrap<impl Lam> = Wrap(B);"}, {"sha": "d066256bfb09d99b98b6eb2d51d188fe4129e96d", "filename": "tests/ui/impl-trait/issues/issue-70971.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.stderr?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/issue-70971.rs:2:14\n    |\n LL |     let x : (impl Copy,) = (true,);"}, {"sha": "580250a62fecda621a339a9161a7a96e4517b2f7", "filename": "tests/ui/impl-trait/issues/issue-79099.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.stderr?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -9,7 +9,7 @@ LL |         let f: impl core::future::Future<Output = u8> = async { 1 };\n    = help: pass `--edition 2021` to `rustc`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/issue-79099.rs:3:16\n    |\n LL |         let f: impl core::future::Future<Output = u8> = async { 1 };"}, {"sha": "656bd04706124df0b6aca87eb33fb5d8bf71db98", "filename": "tests/ui/impl-trait/issues/issue-83929-impl-trait-in-generic-default.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -1,10 +1,10 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n   --> $DIR/issue-83929-impl-trait-in-generic-default.rs:1:16\n    |\n LL | struct Foo<T = impl Copy>(T);\n    |                ^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n   --> $DIR/issue-83929-impl-trait-in-generic-default.rs:4:20\n    |\n LL | type Result<T, E = impl std::error::Error> = std::result::Result<T, E>;"}, {"sha": "36010fdef36c316807054c02cfedbea583038590", "filename": "tests/ui/impl-trait/issues/issue-84919.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.stderr?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/issue-84919.rs:5:13\n    |\n LL |     let _x: impl Trait = ();"}, {"sha": "b6f8a54f35ae89efea4eca0f8e2ceaa1ceb01f8d", "filename": "tests/ui/impl-trait/issues/issue-86642.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.stderr?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in const type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in const types\n   --> $DIR/issue-86642.rs:1:11\n    |\n LL | static x: impl Fn(&str) -> Result<&str, ()> = move |source| {"}, {"sha": "ec59b719c10e1c199d5cf3d762bf65d1d0b1c17a", "filename": "tests/ui/impl-trait/issues/issue-87295.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.stderr?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/issue-87295.rs:16:31\n    |\n LL |     let _do_not_waste: Struct<impl Trait<Output = i32>> = Struct::new(());"}, {"sha": "ffe84b8e86fc4c3f08b3bef5107afbc793af0ecf", "filename": "tests/ui/impl-trait/nested_impl_trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -34,7 +34,7 @@ LL |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                  |         nested `impl Trait` here\n    |                                  outer `impl Trait`\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return types\n   --> $DIR/nested_impl_trait.rs:10:32\n    |\n LL | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}"}, {"sha": "1cae3f77cc563ccabe1e50db1702772882692088", "filename": "tests/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -43,109 +43,109 @@ LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer param\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer params\n   --> $DIR/where-allowed.rs:16:40\n    |\n LL | fn in_fn_parameter_in_parameters(_: fn(impl Debug)) { panic!() }\n    |                                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return types\n   --> $DIR/where-allowed.rs:20:42\n    |\n LL | fn in_fn_return_in_parameters(_: fn() -> impl Debug) { panic!() }\n    |                                          ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer param\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer params\n   --> $DIR/where-allowed.rs:24:38\n    |\n LL | fn in_fn_parameter_in_return() -> fn(impl Debug) { panic!() }\n    |                                      ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return types\n   --> $DIR/where-allowed.rs:28:40\n    |\n LL | fn in_fn_return_in_return() -> fn() -> impl Debug { panic!() }\n    |                                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n   --> $DIR/where-allowed.rs:32:49\n    |\n LL | fn in_dyn_Fn_parameter_in_parameters(_: &dyn Fn(impl Debug)) { panic!() }\n    |                                                 ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return types\n   --> $DIR/where-allowed.rs:36:51\n    |\n LL | fn in_dyn_Fn_return_in_parameters(_: &dyn Fn() -> impl Debug) { panic!() }\n    |                                                   ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n   --> $DIR/where-allowed.rs:40:55\n    |\n LL | fn in_dyn_Fn_parameter_in_return() -> &'static dyn Fn(impl Debug) { panic!() }\n    |                                                       ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n   --> $DIR/where-allowed.rs:47:51\n    |\n LL | fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n    |                                                   ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return types\n   --> $DIR/where-allowed.rs:52:53\n    |\n LL | fn in_impl_Fn_return_in_parameters(_: &impl Fn() -> impl Debug) { panic!() }\n    |                                                     ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n   --> $DIR/where-allowed.rs:56:57\n    |\n LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n    |                                                         ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n   --> $DIR/where-allowed.rs:64:38\n    |\n LL | fn in_Fn_parameter_in_generics<F: Fn(impl Debug)> (_: F) { panic!() }\n    |                                      ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return types\n   --> $DIR/where-allowed.rs:68:40\n    |\n LL | fn in_Fn_return_in_generics<F: Fn() -> impl Debug> (_: F) { panic!() }\n    |                                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field types\n   --> $DIR/where-allowed.rs:81:32\n    |\n LL | struct InBraceStructField { x: impl Debug }\n    |                                ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field types\n   --> $DIR/where-allowed.rs:85:41\n    |\n LL | struct InAdtInBraceStructField { x: Vec<impl Debug> }\n    |                                         ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field types\n   --> $DIR/where-allowed.rs:89:27\n    |\n LL | struct InTupleStructField(impl Debug);\n    |                           ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field types\n   --> $DIR/where-allowed.rs:94:25\n    |\n LL |     InBraceVariant { x: impl Debug },\n    |                         ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field types\n   --> $DIR/where-allowed.rs:96:20\n    |\n LL |     InTupleVariant(impl Debug),\n    |                    ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\n   --> $DIR/where-allowed.rs:107:23\n    |\n LL |     fn in_return() -> impl Debug;\n@@ -154,7 +154,7 @@ LL |     fn in_return() -> impl Debug;\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n    = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return types\n   --> $DIR/where-allowed.rs:124:34\n    |\n LL |     fn in_trait_impl_return() -> impl Debug { () }\n@@ -163,121 +163,121 @@ LL |     fn in_trait_impl_return() -> impl Debug { () }\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n    = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` param\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` params\n   --> $DIR/where-allowed.rs:137:33\n    |\n LL |     fn in_foreign_parameters(_: impl Debug);\n    |                                 ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` return types\n   --> $DIR/where-allowed.rs:140:31\n    |\n LL |     fn in_foreign_return() -> impl Debug;\n    |                               ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return types\n   --> $DIR/where-allowed.rs:156:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in traits\n   --> $DIR/where-allowed.rs:161:16\n    |\n LL | impl PartialEq<impl Debug> for () {\n    |                ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl header\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl headers\n   --> $DIR/where-allowed.rs:166:24\n    |\n LL | impl PartialEq<()> for impl Debug {\n    |                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl header\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl headers\n   --> $DIR/where-allowed.rs:171:6\n    |\n LL | impl impl Debug {\n    |      ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl header\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl headers\n   --> $DIR/where-allowed.rs:177:24\n    |\n LL | impl InInherentImplAdt<impl Debug> {\n    |                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bound\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bounds\n   --> $DIR/where-allowed.rs:183:11\n    |\n LL |     where impl Debug: Debug\n    |           ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bound\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bounds\n   --> $DIR/where-allowed.rs:190:15\n    |\n LL |     where Vec<impl Debug>: Debug\n    |               ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bound\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bounds\n   --> $DIR/where-allowed.rs:197:24\n    |\n LL |     where T: PartialEq<impl Debug>\n    |                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n   --> $DIR/where-allowed.rs:204:17\n    |\n LL |     where T: Fn(impl Debug)\n    |                 ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return types\n   --> $DIR/where-allowed.rs:211:22\n    |\n LL |     where T: Fn() -> impl Debug\n    |                      ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n   --> $DIR/where-allowed.rs:217:40\n    |\n LL | struct InStructGenericParamDefault<T = impl Debug>(T);\n    |                                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n   --> $DIR/where-allowed.rs:221:36\n    |\n LL | enum InEnumGenericParamDefault<T = impl Debug> { Variant(T) }\n    |                                    ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n   --> $DIR/where-allowed.rs:225:38\n    |\n LL | trait InTraitGenericParamDefault<T = impl Debug> {}\n    |                                      ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n   --> $DIR/where-allowed.rs:229:41\n    |\n LL | type InTypeAliasGenericParamDefault<T = impl Debug> = T;\n    |                                         ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n   --> $DIR/where-allowed.rs:233:11\n    |\n LL | impl <T = impl Debug> T {}\n    |           ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n   --> $DIR/where-allowed.rs:240:40\n    |\n LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n    |                                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/where-allowed.rs:246:29\n    |\n LL |     let _in_local_variable: impl Fn() = || {};\n    |                             ^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in closure return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in closure return types\n   --> $DIR/where-allowed.rs:248:46\n    |\n LL |     let _in_return_in_local_variable = || -> impl Fn() { || {} };"}, {"sha": "dadea34b68836b6949f8eaa504502055e2a97cd6", "filename": "tests/ui/issues/issue-47715.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fissues%2Fissue-47715.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Fissues%2Fissue-47715.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-47715.stderr?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -1,22 +1,22 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generics\n   --> $DIR/issue-47715.rs:9:37\n    |\n LL | struct Container<T: Iterable<Item = impl Foo>> {\n    |                                     ^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generics\n   --> $DIR/issue-47715.rs:14:30\n    |\n LL | enum Enum<T: Iterable<Item = impl Foo>> {\n    |                              ^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generics\n   --> $DIR/issue-47715.rs:19:32\n    |\n LL | union Union<T: Iterable<Item = impl Foo> + Copy> {\n    |                                ^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generics\n   --> $DIR/issue-47715.rs:24:30\n    |\n LL | type Type<T: Iterable<Item = impl Foo>> = T;"}, {"sha": "ff375b2ff863fb7a1504f8e97932f6b85b54056d", "filename": "tests/ui/type-alias-impl-trait/type-alias-impl-trait-fn-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.stderr?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return types\n   --> $DIR/type-alias-impl-trait-fn-type.rs:6:20\n    |\n LL | type Foo = fn() -> impl Send;"}, {"sha": "09187d7863a6bcf1d64dccde872850c4e24de615", "filename": "tests/ui/typeck/issue-104513-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Ftypeck%2Fissue-104513-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb909d81464900597b91f3bbf2a6bef10006c9ff/tests%2Fui%2Ftypeck%2Fissue-104513-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-104513-ice.stderr?ref=eb909d81464900597b91f3bbf2a6bef10006c9ff", "patch": "@@ -4,7 +4,7 @@ error[E0405]: cannot find trait `Oops` in this scope\n LL |     let _: S<impl Oops> = S;\n    |                   ^^^^ not found in this scope\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/issue-104513-ice.rs:3:14\n    |\n LL |     let _: S<impl Oops> = S;"}]}