{"sha": "26b157b23c280c92c056f9018187de1798aba88b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2YjE1N2IyM2MyODBjOTJjMDU2ZjkwMTgxODdkZTE3OThhYmE4OGI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-02-07T05:57:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-07T05:57:45Z"}, "message": "Rollup merge of #58193 - mark-i-m:rustc-2018, r=Centril\n\nMove librustc to 2018\n\nr? @Centril\n\nPart of #58099\n\nIt would be great to get this reviewed quickly to avoid merge conflicts...", "tree": {"sha": "91575a6d40e38d1559ef5d9abd98e1acd60819fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91575a6d40e38d1559ef5d9abd98e1acd60819fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26b157b23c280c92c056f9018187de1798aba88b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcW8jaCRBK7hj4Ov3rIwAAdHIIABT+Yip/r+Vx6hZuLK6gr274\ncd+tx6ZhyQRgCw7m/TclzxAm4bLQ6uWJ2TMbrf+O8805tk77xphju+9VEO3W8BEl\nqoixKrrMyozbhIiah3RsxjgH3+6SkRa1AB0jC4QjlECMOshs9s7JCEHI389ttyK8\nloVVi+0bfhcMTg0dPNxu5PTGwZHHYfrzH/4W7t8AzUAiOQl4SU/2vG+uvwigvH+i\nk0f6LREf8dD0k/8Fv82OxACk9idnXhgHgCi3JiUPhyDpfx/eYG3M5G9UAoxFXW/C\nIy6gHXIVyyR3lSTzS1pGoeNZyVyY69rwrfdZ5OUiuw56IpBkisQZeLhyK2vArq8=\n=Rrm6\n-----END PGP SIGNATURE-----\n", "payload": "tree 91575a6d40e38d1559ef5d9abd98e1acd60819fa\nparent 7168eadafeacb50e9de56224c1366290b1c10e22\nparent e957ed9d10ec589bdd523b88b4b44c41b1ecf763\nauthor kennytm <kennytm@gmail.com> 1549519065 +0800\ncommitter GitHub <noreply@github.com> 1549519065 +0800\n\nRollup merge of #58193 - mark-i-m:rustc-2018, r=Centril\n\nMove librustc to 2018\n\nr? @Centril\n\nPart of #58099\n\nIt would be great to get this reviewed quickly to avoid merge conflicts...\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26b157b23c280c92c056f9018187de1798aba88b", "html_url": "https://github.com/rust-lang/rust/commit/26b157b23c280c92c056f9018187de1798aba88b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26b157b23c280c92c056f9018187de1798aba88b/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7168eadafeacb50e9de56224c1366290b1c10e22", "url": "https://api.github.com/repos/rust-lang/rust/commits/7168eadafeacb50e9de56224c1366290b1c10e22", "html_url": "https://github.com/rust-lang/rust/commit/7168eadafeacb50e9de56224c1366290b1c10e22"}, {"sha": "e957ed9d10ec589bdd523b88b4b44c41b1ecf763", "url": "https://api.github.com/repos/rust-lang/rust/commits/e957ed9d10ec589bdd523b88b4b44c41b1ecf763", "html_url": "https://github.com/rust-lang/rust/commit/e957ed9d10ec589bdd523b88b4b44c41b1ecf763"}], "stats": {"total": 2477, "additions": 1234, "deletions": 1243}, "files": [{"sha": "c9a04f4c6834da2f571c2b26f9bc2167dbfeb106", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc\""}, {"sha": "f7ffbe8c65833af10c0a040c39df216296a7cd42", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,11 +1,11 @@\n-use cfg::*;\n-use middle::region;\n+use crate::cfg::*;\n+use crate::middle::region;\n use rustc_data_structures::graph::implementation as graph;\n use syntax::ptr::P;\n-use ty::{self, TyCtxt};\n+use crate::ty::{self, TyCtxt};\n \n-use hir::{self, PatKind};\n-use hir::def_id::DefId;\n+use crate::hir::{self, PatKind};\n+use crate::hir::def_id::DefId;\n \n struct CFGBuilder<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "969c38bd663298142a3501de55325566ca8f999f", "filename": "src/librustc/cfg/graphviz.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fcfg%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fcfg%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fgraphviz.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -4,9 +4,9 @@\n // For clarity, rename the graphviz crate locally to dot.\n use graphviz as dot;\n \n-use cfg;\n-use hir;\n-use ty::TyCtxt;\n+use crate::cfg;\n+use crate::hir;\n+use crate::ty::TyCtxt;\n \n pub type Node<'a> = (cfg::CFGIndex, &'a cfg::CFGNode);\n pub type Edge<'a> = &'a cfg::CFGEdge;"}, {"sha": "345dff88b5f0b14e1b481b9d9ff294ef9527e908", "filename": "src/librustc/cfg/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fcfg%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fcfg%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fmod.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -2,9 +2,9 @@\n //! Uses `Graph` as the underlying representation.\n \n use rustc_data_structures::graph::implementation as graph;\n-use ty::TyCtxt;\n-use hir;\n-use hir::def_id::DefId;\n+use crate::ty::TyCtxt;\n+use crate::hir;\n+use crate::hir::def_id::DefId;\n \n mod construct;\n pub mod graphviz;"}, {"sha": "13f6f9533297340d1b52c052f72cf32977d1e6e2", "filename": "src/librustc/dep_graph/cgu_reuse_tracker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fdep_graph%2Fcgu_reuse_tracker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fdep_graph%2Fcgu_reuse_tracker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fcgu_reuse_tracker.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -2,7 +2,7 @@\n //! compilation. This is used for incremental compilation tests and debug\n //! output.\n \n-use session::Session;\n+use crate::session::Session;\n use rustc_data_structures::fx::FxHashMap;\n use std::sync::{Arc, Mutex};\n use syntax_pos::Span;"}, {"sha": "58087b76266b5c7480bac2e354a355619c3b1c48", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -49,25 +49,25 @@\n //! user of the `DepNode` API of having to know how to compute the expected\n //! fingerprint for a given set of node parameters.\n \n-use mir::interpret::GlobalId;\n-use hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX};\n-use hir::map::DefPathHash;\n-use hir::HirId;\n+use crate::mir::interpret::GlobalId;\n+use crate::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX};\n+use crate::hir::map::DefPathHash;\n+use crate::hir::HirId;\n \n-use ich::{Fingerprint, StableHashingContext};\n+use crate::ich::{Fingerprint, StableHashingContext};\n use rustc_data_structures::stable_hasher::{StableHasher, HashStable};\n use std::fmt;\n use std::hash::Hash;\n use syntax_pos::symbol::InternedString;\n-use traits;\n-use traits::query::{\n+use crate::traits;\n+use crate::traits::query::{\n     CanonicalProjectionGoal, CanonicalTyGoal, CanonicalTypeOpAscribeUserTypeGoal,\n     CanonicalTypeOpEqGoal, CanonicalTypeOpSubtypeGoal, CanonicalPredicateGoal,\n     CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpNormalizeGoal,\n };\n-use ty::{TyCtxt, FnSig, Instance, InstanceDef,\n+use crate::ty::{TyCtxt, FnSig, Instance, InstanceDef,\n          ParamEnv, ParamEnvAnd, Predicate, PolyFnSig, PolyTraitRef, Ty};\n-use ty::subst::Substs;\n+use crate::ty::subst::Substs;\n \n // erase!() just makes tokens go away. It's used to specify which macro argument\n // is repeated (i.e., which sub-expression of the macro we are in) but don't need\n@@ -389,7 +389,7 @@ impl fmt::Debug for DepNode {\n \n         write!(f, \"(\")?;\n \n-        ::ty::tls::with_opt(|opt_tcx| {\n+        crate::ty::tls::with_opt(|opt_tcx| {\n             if let Some(tcx) = opt_tcx {\n                 if let Some(def_id) = self.extract_def_id(tcx) {\n                     write!(f, \"{}\", tcx.def_path_debug_str(def_id))?;\n@@ -825,6 +825,6 @@ impl WorkProductId {\n     }\n }\n \n-impl_stable_hash_for!(struct ::dep_graph::WorkProductId {\n+impl_stable_hash_for!(struct crate::dep_graph::WorkProductId {\n     hash\n });"}, {"sha": "a296a3379c2aca53bd8fe6571f821e7b4ee77688", "filename": "src/librustc/dep_graph/dep_tracking_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -2,7 +2,7 @@ use rustc_data_structures::fx::FxHashMap;\n use std::cell::RefCell;\n use std::hash::Hash;\n use std::marker::PhantomData;\n-use util::common::MemoizationMap;\n+use crate::util::common::MemoizationMap;\n \n use super::{DepKind, DepNodeIndex, DepGraph};\n "}, {"sha": "663c408ac22fd248601277b78508042a471a3571", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,4 +1,4 @@\n-use errors::{Diagnostic, DiagnosticBuilder};\n+use crate::errors::{Diagnostic, DiagnosticBuilder};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n@@ -7,11 +7,11 @@ use rustc_data_structures::sync::{Lrc, Lock, AtomicU32, Ordering};\n use std::env;\n use std::hash::Hash;\n use std::collections::hash_map::Entry;\n-use ty::{self, TyCtxt};\n-use util::common::{ProfileQueriesMsg, profq_msg};\n+use crate::ty::{self, TyCtxt};\n+use crate::util::common::{ProfileQueriesMsg, profq_msg};\n use parking_lot::{Mutex, Condvar};\n \n-use ich::{StableHashingContext, StableHashingContextProvider, Fingerprint};\n+use crate::ich::{StableHashingContext, StableHashingContextProvider, Fingerprint};\n \n use super::debug::EdgeFilter;\n use super::dep_node::{DepNode, DepKind, WorkProductId};\n@@ -669,7 +669,7 @@ impl DepGraph {\n                     // We failed to mark it green, so we try to force the query.\n                     debug!(\"try_mark_previous_green({:?}) --- trying to force \\\n                             dependency {:?}\", dep_node, dep_dep_node);\n-                    if ::ty::query::force_from_dep_node(tcx, dep_dep_node) {\n+                    if crate::ty::query::force_from_dep_node(tcx, dep_dep_node) {\n                         let dep_dep_node_color = data.colors.get(dep_dep_node_index);\n \n                         match dep_dep_node_color {"}, {"sha": "d971690bbe317788f2cd887289fd8fbabcc3c049", "filename": "src/librustc/dep_graph/prev.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fdep_graph%2Fprev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fdep_graph%2Fprev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fprev.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,4 +1,4 @@\n-use ich::Fingerprint;\n+use crate::ich::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use super::dep_node::DepNode;\n use super::serialized::{SerializedDepGraph, SerializedDepNodeIndex};"}, {"sha": "fc767defe9c712b4aed37c0dc8fc89fe71149581", "filename": "src/librustc/dep_graph/safe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fdep_graph%2Fsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fdep_graph%2Fsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fsafe.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,9 +1,9 @@\n //! The `DepGraphSafe` trait\n \n-use hir::BodyId;\n-use hir::def_id::DefId;\n+use crate::hir::BodyId;\n+use crate::hir::def_id::DefId;\n use syntax::ast::NodeId;\n-use ty::TyCtxt;\n+use crate::ty::TyCtxt;\n \n /// The `DepGraphSafe` trait is used to specify what kinds of values\n /// are safe to \"leak\" into a task. The idea is that this should be"}, {"sha": "b64f71ed908d823b079ced68670c3ae55389755a", "filename": "src/librustc/dep_graph/serialized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fserialized.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,7 +1,7 @@\n //! The data that we will serialize and deserialize.\n \n-use dep_graph::DepNode;\n-use ich::Fingerprint;\n+use crate::dep_graph::DepNode;\n+use crate::ich::Fingerprint;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n \n newtype_index! {"}, {"sha": "75710210d7722d112a5a8497dd9cbd3087228bd8", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -5,12 +5,12 @@\n //! item.\n \n \n-use ty::TyCtxt;\n-use ty::query::Providers;\n+use crate::ty::TyCtxt;\n+use crate::ty::query::Providers;\n \n-use hir;\n-use hir::def_id::DefId;\n-use hir::intravisit::{self, Visitor, NestedVisitorMap};\n+use crate::hir;\n+use crate::hir::def_id::DefId;\n+use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use std::fmt::{self, Display};\n use syntax_pos::Span;\n "}, {"sha": "6566c6041b6e5ebd964c752ab4fe4b35e7413262", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,10 +1,10 @@\n-use hir::def_id::DefId;\n-use util::nodemap::{NodeMap, DefIdMap};\n+use crate::hir::def_id::DefId;\n+use crate::util::nodemap::{NodeMap, DefIdMap};\n use syntax::ast;\n use syntax::ext::base::MacroKind;\n use syntax_pos::Span;\n-use hir;\n-use ty;\n+use crate::hir;\n+use crate::ty;\n \n use self::Namespace::*;\n "}, {"sha": "e06f09e21cbf310ad355ad96c5f96a31c393fc26", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,6 +1,6 @@\n-use ty;\n-use ty::TyCtxt;\n-use hir::map::definitions::FIRST_FREE_HIGH_DEF_INDEX;\n+use crate::ty;\n+use crate::ty::TyCtxt;\n+use crate::hir::map::definitions::FIRST_FREE_HIGH_DEF_INDEX;\n use rustc_data_structures::indexed_vec::Idx;\n use serialize;\n use std::fmt;"}, {"sha": "86c3fb9e4fcd7df5a6e623a94f4c502b3fc29b7c", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -33,9 +33,9 @@\n \n use syntax::ast::{NodeId, CRATE_NODE_ID, Ident, Name, Attribute};\n use syntax_pos::Span;\n-use hir::*;\n-use hir::def::Def;\n-use hir::map::Map;\n+use crate::hir::*;\n+use crate::hir::def::Def;\n+use crate::hir::map::Map;\n use super::itemlikevisit::DeepVisitor;\n \n #[derive(Copy, Clone)]"}, {"sha": "d0fd5bd6844b02b9ab5f02c4fcafc1dce589992d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -30,24 +30,24 @@\n //! get confused if the spans from leaf AST nodes occur in multiple places\n //! in the HIR, especially for multiple identifiers.\n \n-use dep_graph::DepGraph;\n-use errors::Applicability;\n-use hir::{self, ParamName};\n-use hir::HirVec;\n-use hir::map::{DefKey, DefPathData, Definitions};\n-use hir::def_id::{DefId, DefIndex, DefIndexAddressSpace, CRATE_DEF_INDEX};\n-use hir::def::{Def, PathResolution, PerNS};\n-use hir::GenericArg;\n-use lint::builtin::{self, PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n+use crate::dep_graph::DepGraph;\n+use crate::errors::Applicability;\n+use crate::hir::{self, ParamName};\n+use crate::hir::HirVec;\n+use crate::hir::map::{DefKey, DefPathData, Definitions};\n+use crate::hir::def_id::{DefId, DefIndex, DefIndexAddressSpace, CRATE_DEF_INDEX};\n+use crate::hir::def::{Def, PathResolution, PerNS};\n+use crate::hir::GenericArg;\n+use crate::lint::builtin::{self, PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n                     ELIDED_LIFETIMES_IN_PATHS};\n-use middle::cstore::CrateStore;\n+use crate::middle::cstore::CrateStore;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::thin_vec::ThinVec;\n-use session::Session;\n-use session::config::nightly_options;\n-use util::common::FN_OUTPUT_NAME;\n-use util::nodemap::{DefIdMap, NodeMap};\n+use crate::session::Session;\n+use crate::session::config::nightly_options;\n+use crate::util::common::FN_OUTPUT_NAME;\n+use crate::util::nodemap::{DefIdMap, NodeMap};\n \n use std::collections::{BTreeSet, BTreeMap};\n use std::fmt::Debug;"}, {"sha": "d5fb578d8d4920fc14fa72061446fa2f7a80f61c", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -11,10 +11,10 @@\n //! nested within a uniquely determined `FnLike`), and users can ask\n //! for the `Code` associated with a particular NodeId.\n \n-use hir as ast;\n-use hir::map;\n-use hir::{Expr, FnDecl, Node};\n-use hir::intravisit::FnKind;\n+use crate::hir as ast;\n+use crate::hir::map;\n+use crate::hir::{Expr, FnDecl, Node};\n+use crate::hir::intravisit::FnKind;\n use syntax::ast::{Attribute, Ident, NodeId};\n use syntax_pos::Span;\n "}, {"sha": "f84bb77e29b27fedb57588e121badb256a39b204", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,19 +1,19 @@\n use super::*;\n-use dep_graph::{DepGraph, DepKind, DepNodeIndex};\n-use hir;\n-use hir::def_id::{LOCAL_CRATE, CrateNum};\n-use hir::intravisit::{Visitor, NestedVisitorMap};\n+use crate::dep_graph::{DepGraph, DepKind, DepNodeIndex};\n+use crate::hir;\n+use crate::hir::def_id::{LOCAL_CRATE, CrateNum};\n+use crate::hir::intravisit::{Visitor, NestedVisitorMap};\n use rustc_data_structures::svh::Svh;\n-use ich::Fingerprint;\n-use middle::cstore::CrateStore;\n-use session::CrateDisambiguator;\n-use session::Session;\n+use crate::ich::Fingerprint;\n+use crate::middle::cstore::CrateStore;\n+use crate::session::CrateDisambiguator;\n+use crate::session::Session;\n use std::iter::repeat;\n use syntax::ast::{NodeId, CRATE_NODE_ID};\n use syntax::source_map::SourceMap;\n use syntax_pos::Span;\n \n-use ich::StableHashingContext;\n+use crate::ich::StableHashingContext;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, StableHasherResult};\n \n /// A Visitor that walks over the HIR and collects Nodes into a HIR map\n@@ -253,7 +253,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n                     None => format!(\"{:?}\", node)\n                 };\n \n-                let forgot_str = if hir_id == ::hir::DUMMY_HIR_ID {\n+                let forgot_str = if hir_id == crate::hir::DUMMY_HIR_ID {\n                     format!(\"\\nMaybe you forgot to lower the node id {:?}?\", id)\n                 } else {\n                     String::new()"}, {"sha": "710170674f7611fdac5ada1d962f53c209d7783c", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,6 +1,6 @@\n-use hir::map::definitions::*;\n-use hir::def_id::{CRATE_DEF_INDEX, DefIndex, DefIndexAddressSpace};\n-use session::CrateDisambiguator;\n+use crate::hir::map::definitions::*;\n+use crate::hir::def_id::{CRATE_DEF_INDEX, DefIndex, DefIndexAddressSpace};\n+use crate::session::CrateDisambiguator;\n \n use syntax::ast::*;\n use syntax::ext::hygiene::Mark;\n@@ -10,7 +10,7 @@ use syntax::symbol::Symbol;\n use syntax::parse::token::{self, Token};\n use syntax_pos::Span;\n \n-use hir::map::{ITEM_LIKE_SPACE, REGULAR_SPACE};\n+use crate::hir::map::{ITEM_LIKE_SPACE, REGULAR_SPACE};\n \n /// Creates def ids for nodes in the AST.\n pub struct DefCollector<'a> {"}, {"sha": "a8193e1d34837ec08ba29435a9800908c82e8da2", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -4,23 +4,23 @@\n //! There are also some rather random cases (like const initializer\n //! expressions) that are mostly just leftovers.\n \n-use hir;\n-use hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE, DefIndexAddressSpace,\n+use crate::hir;\n+use crate::hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE, DefIndexAddressSpace,\n                   CRATE_DEF_INDEX};\n-use ich::Fingerprint;\n+use crate::ich::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::{IndexVec};\n use rustc_data_structures::stable_hasher::StableHasher;\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n-use session::CrateDisambiguator;\n+use crate::session::CrateDisambiguator;\n use std::borrow::Borrow;\n use std::fmt::Write;\n use std::hash::Hash;\n use syntax::ast;\n use syntax::ext::hygiene::Mark;\n use syntax::symbol::{Symbol, InternedString};\n use syntax_pos::{Span, DUMMY_SP};\n-use util::nodemap::NodeMap;\n+use crate::util::nodemap::NodeMap;\n \n /// The DefPathTable maps DefIndexes to DefKeys and vice versa.\n /// Internally the DefPathTable holds a tree of DefKeys, where each DefKey"}, {"sha": "2c3ff4c9b5c05bdd48f40518939a47046ea60147", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,7 +1,7 @@\n-use hir::def_id::{DefId, DefIndex, CRATE_DEF_INDEX};\n-use hir::{self, intravisit, HirId, ItemLocalId};\n+use crate::hir::def_id::{DefId, DefIndex, CRATE_DEF_INDEX};\n+use crate::hir::{self, intravisit, HirId, ItemLocalId};\n use syntax::ast::NodeId;\n-use hir::itemlikevisit::ItemLikeVisitor;\n+use crate::hir::itemlikevisit::ItemLikeVisitor;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{Lock, ParallelIterator, par_iter};\n "}, {"sha": "91fc12639baf5edc8c7ed48f1a460ef3a8aa80dc", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -3,11 +3,11 @@ pub use self::def_collector::{DefCollector, MacroInvocationData};\n pub use self::definitions::{Definitions, DefKey, DefPath, DefPathData,\n                             DisambiguatedDefPathData, DefPathHash};\n \n-use dep_graph::{DepGraph, DepNode, DepKind, DepNodeIndex};\n+use crate::dep_graph::{DepGraph, DepNode, DepKind, DepNodeIndex};\n \n-use hir::def_id::{CRATE_DEF_INDEX, DefId, LocalDefId, DefIndexAddressSpace};\n+use crate::hir::def_id::{CRATE_DEF_INDEX, DefId, LocalDefId, DefIndexAddressSpace};\n \n-use middle::cstore::CrateStoreDyn;\n+use crate::middle::cstore::CrateStoreDyn;\n \n use rustc_target::spec::abi::Abi;\n use rustc_data_structures::svh::Svh;\n@@ -17,15 +17,15 @@ use syntax::source_map::Spanned;\n use syntax::ext::base::MacroKind;\n use syntax_pos::{Span, DUMMY_SP};\n \n-use hir::*;\n-use hir::itemlikevisit::ItemLikeVisitor;\n-use hir::print::Nested;\n-use util::nodemap::FxHashMap;\n-use util::common::time;\n+use crate::hir::*;\n+use crate::hir::itemlikevisit::ItemLikeVisitor;\n+use crate::hir::print::Nested;\n+use crate::util::nodemap::FxHashMap;\n+use crate::util::common::time;\n \n use std::io;\n use std::result::Result::Err;\n-use ty::TyCtxt;\n+use crate::ty::TyCtxt;\n \n pub mod blocks;\n mod collector;\n@@ -1212,13 +1212,13 @@ impl Named for StructField { fn name(&self) -> Name { self.ident.name } }\n impl Named for TraitItem { fn name(&self) -> Name { self.ident.name } }\n impl Named for ImplItem { fn name(&self) -> Name { self.ident.name } }\n \n-pub fn map_crate<'hir>(sess: &::session::Session,\n+pub fn map_crate<'hir>(sess: &crate::session::Session,\n                        cstore: &CrateStoreDyn,\n                        forest: &'hir Forest,\n                        definitions: &'hir Definitions)\n                        -> Map<'hir> {\n     let ((map, crate_hash), hir_to_node_id) = join(|| {\n-        let hcx = ::ich::StableHashingContext::new(sess, &forest.krate, definitions, cstore);\n+        let hcx = crate::ich::StableHashingContext::new(sess, &forest.krate, definitions, cstore);\n \n         let mut collector = NodeCollector::root(sess,\n                                                 &forest.krate,\n@@ -1329,7 +1329,7 @@ fn node_id_to_string(map: &Map<'_>, id: NodeId, include_id: bool) -> String {\n     let path_str = || {\n         // This functionality is used for debugging, try to use TyCtxt to get\n         // the user-friendly path, otherwise fall back to stringifying DefPath.\n-        ::ty::tls::with_opt(|tcx| {\n+        crate::ty::tls::with_opt(|tcx| {\n             if let Some(tcx) = tcx {\n                 tcx.node_path_str(id)\n             } else if let Some(path) = map.def_path_from_id(id) {"}, {"sha": "f8fb2b88e2750dd5784937d3f767906236ee33a0", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -10,11 +10,11 @@ pub use self::PrimTy::*;\n pub use self::UnOp::*;\n pub use self::UnsafeSource::*;\n \n-use errors::FatalError;\n-use hir::def::Def;\n-use hir::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX};\n-use util::nodemap::{NodeMap, FxHashSet};\n-use mir::mono::Linkage;\n+use crate::errors::FatalError;\n+use crate::hir::def::Def;\n+use crate::hir::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX};\n+use crate::util::nodemap::{NodeMap, FxHashSet};\n+use crate::mir::mono::Linkage;\n \n use syntax_pos::{Span, DUMMY_SP, symbol::InternedString};\n use syntax::source_map::Spanned;\n@@ -27,8 +27,8 @@ use syntax::ptr::P;\n use syntax::symbol::{Symbol, keywords};\n use syntax::tokenstream::TokenStream;\n use syntax::util::parser::ExprPrecedence;\n-use ty::AdtKind;\n-use ty::query::Providers;\n+use crate::ty::AdtKind;\n+use crate::ty::query::Providers;\n \n use rustc_data_structures::sync::{ParallelIterator, par_iter, Send, Sync, scope};\n use rustc_data_structures::thin_vec::ThinVec;"}, {"sha": "c92cbc9b96c93c8c000fce236e88c4a47236d49a", "filename": "src/librustc/hir/pat_util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fhir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fhir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fpat_util.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,6 +1,6 @@\n-use hir::def::Def;\n-use hir::def_id::DefId;\n-use hir::{self, HirId, PatKind};\n+use crate::hir::def::Def;\n+use crate::hir::def_id::DefId;\n+use crate::hir::{self, HirId, PatKind};\n use syntax::ast;\n use syntax_pos::Span;\n "}, {"sha": "9b6fcf259be14ba49f0373fbc0a5be44db5c6216", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -11,9 +11,9 @@ use syntax::symbol::keywords;\n use syntax::util::parser::{self, AssocOp, Fixity};\n use syntax_pos::{self, BytePos, FileName};\n \n-use hir;\n-use hir::{PatKind, GenericBound, TraitBoundModifier, RangeEnd};\n-use hir::{GenericParam, GenericParamKind, GenericArg};\n+use crate::hir;\n+use crate::hir::{PatKind, GenericBound, TraitBoundModifier, RangeEnd};\n+use crate::hir::{GenericParam, GenericParamKind, GenericArg};\n \n use std::borrow::Cow;\n use std::cell::Cell;\n@@ -2401,7 +2401,7 @@ fn stmt_ends_with_semi(stmt: &hir::StmtKind) -> bool {\n }\n \n fn bin_op_to_assoc_op(op: hir::BinOpKind) -> AssocOp {\n-    use hir::BinOpKind::*;\n+    use crate::hir::BinOpKind::*;\n     match op {\n         Add => AssocOp::Add,\n         Sub => AssocOp::Subtract,"}, {"sha": "e60fdd62debd1f6249e6e1421db5d6d9f66d909a", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,11 +1,11 @@\n-use hir;\n-use hir::def_id::{DefId, DefIndex};\n-use hir::map::DefPathHash;\n-use hir::map::definitions::Definitions;\n-use ich::{self, CachingSourceMapView, Fingerprint};\n-use middle::cstore::CrateStore;\n-use ty::{TyCtxt, fast_reject};\n-use session::Session;\n+use crate::hir;\n+use crate::hir::def_id::{DefId, DefIndex};\n+use crate::hir::map::DefPathHash;\n+use crate::hir::map::definitions::Definitions;\n+use crate::ich::{self, CachingSourceMapView, Fingerprint};\n+use crate::middle::cstore::CrateStore;\n+use crate::ty::{TyCtxt, fast_reject};\n+use crate::session::Session;\n \n use std::cmp::Ord;\n use std::hash as std_hash;\n@@ -218,7 +218,7 @@ impl<'a> StableHashingContextProvider<'a> for StableHashingContext<'a> {\n     }\n }\n \n-impl<'a> ::dep_graph::DepGraphSafe for StableHashingContext<'a> {\n+impl<'a> crate::dep_graph::DepGraphSafe for StableHashingContext<'a> {\n }\n \n "}, {"sha": "17ed1a79d45e0ae293a3248b1b3d750e0995cdb5", "filename": "src/librustc/ich/impls_cstore.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fich%2Fimpls_cstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fich%2Fimpls_cstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_cstore.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,54 +1,52 @@\n //! This module contains `HashStable` implementations for various data types\n //! from rustc::middle::cstore in no particular order.\n \n-use middle;\n-\n-impl_stable_hash_for!(enum middle::cstore::DepKind {\n+impl_stable_hash_for!(enum crate::middle::cstore::DepKind {\n     UnexportedMacrosOnly,\n     MacrosOnly,\n     Implicit,\n     Explicit\n });\n \n-impl_stable_hash_for!(enum middle::cstore::NativeLibraryKind {\n+impl_stable_hash_for!(enum crate::middle::cstore::NativeLibraryKind {\n     NativeStatic,\n     NativeStaticNobundle,\n     NativeFramework,\n     NativeUnknown\n });\n \n-impl_stable_hash_for!(struct middle::cstore::NativeLibrary {\n+impl_stable_hash_for!(struct crate::middle::cstore::NativeLibrary {\n     kind,\n     name,\n     cfg,\n     foreign_module,\n     wasm_import_module\n });\n \n-impl_stable_hash_for!(struct middle::cstore::ForeignModule {\n+impl_stable_hash_for!(struct crate::middle::cstore::ForeignModule {\n     foreign_items,\n     def_id\n });\n \n-impl_stable_hash_for!(enum middle::cstore::LinkagePreference {\n+impl_stable_hash_for!(enum crate::middle::cstore::LinkagePreference {\n     RequireDynamic,\n     RequireStatic\n });\n \n-impl_stable_hash_for!(struct middle::cstore::ExternCrate {\n+impl_stable_hash_for!(struct crate::middle::cstore::ExternCrate {\n     src,\n     span,\n     path_len,\n     direct\n });\n \n-impl_stable_hash_for!(enum middle::cstore::ExternCrateSource {\n+impl_stable_hash_for!(enum crate::middle::cstore::ExternCrateSource {\n     Extern(def_id),\n     Use,\n     Path,\n });\n \n-impl_stable_hash_for!(struct middle::cstore::CrateSource {\n+impl_stable_hash_for!(struct crate::middle::cstore::CrateSource {\n     dylib,\n     rlib,\n     rmeta"}, {"sha": "2b359428b1fa169df978d561481e86a7a52732aa", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,10 +1,10 @@\n //! This module contains `HashStable` implementations for various HIR data\n //! types in no particular order.\n \n-use hir;\n-use hir::map::DefPathHash;\n-use hir::def_id::{DefId, LocalDefId, CrateNum, CRATE_DEF_INDEX};\n-use ich::{StableHashingContext, NodeIdHashingMode, Fingerprint};\n+use crate::hir;\n+use crate::hir::map::DefPathHash;\n+use crate::hir::def_id::{DefId, LocalDefId, CrateNum, CRATE_DEF_INDEX};\n+use crate::ich::{StableHashingContext, NodeIdHashingMode, Fingerprint};\n use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey,\n                                            StableHasher, StableHasherResult};\n use std::mem;\n@@ -619,7 +619,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::MatchSource {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use hir::MatchSource;\n+        use crate::hir::MatchSource;\n \n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match *self {\n@@ -1116,20 +1116,20 @@ impl_stable_hash_for!(struct hir::def::Export {\n     span\n });\n \n-impl_stable_hash_for!(struct ::middle::lib_features::LibFeatures {\n+impl_stable_hash_for!(struct crate::middle::lib_features::LibFeatures {\n     stable,\n     unstable\n });\n \n-impl<'a> HashStable<StableHashingContext<'a>> for ::middle::lang_items::LangItem {\n+impl<'a> HashStable<StableHashingContext<'a>> for crate::middle::lang_items::LangItem {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           _: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n         ::std::hash::Hash::hash(self, hasher);\n     }\n }\n \n-impl_stable_hash_for!(struct ::middle::lang_items::LanguageItems {\n+impl_stable_hash_for!(struct crate::middle::lang_items::LanguageItems {\n     items,\n     missing\n });"}, {"sha": "51fc78ffc866999844ffae550ed852d3d3de437d", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,8 +1,8 @@\n //! This module contains `HashStable` implementations for various MIR data\n //! types in no particular order.\n \n-use ich::StableHashingContext;\n-use mir;\n+use crate::ich::StableHashingContext;\n+use crate::mir;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n                                            StableHasherResult};\n use std::mem;"}, {"sha": "8a388fafce5e8201717ca6262683abdb7dcc3f3d", "filename": "src/librustc/ich/impls_misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fich%2Fimpls_misc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fich%2Fimpls_misc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_misc.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,7 +1,7 @@\n //! This module contains `HashStable` implementations for various data types\n //! that don't fit into any of the other impls_xxx modules.\n \n-impl_stable_hash_for!(enum ::session::search_paths::PathKind {\n+impl_stable_hash_for!(enum crate::session::search_paths::PathKind {\n     Native,\n     Crate,\n     Dependency,"}, {"sha": "f34423ccca655b065b3fe1a3eb706106646ed355", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,7 +1,7 @@\n //! This module contains `HashStable` implementations for various data types\n //! from libsyntax in no particular order.\n \n-use ich::StableHashingContext;\n+use crate::ich::StableHashingContext;\n \n use std::hash as std_hash;\n use std::mem;\n@@ -13,7 +13,7 @@ use syntax::symbol::{InternedString, LocalInternedString};\n use syntax::tokenstream;\n use syntax_pos::SourceFile;\n \n-use hir::def_id::{DefId, CrateNum, CRATE_DEF_INDEX};\n+use crate::hir::def_id::{DefId, CrateNum, CRATE_DEF_INDEX};\n \n use smallvec::SmallVec;\n use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey,"}, {"sha": "1e1dbd0b621ec2fbd303de733a5401227ed7a887", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,18 +1,18 @@\n //! This module contains `HashStable` implementations for various data types\n //! from rustc::ty in no particular order.\n \n-use ich::{Fingerprint, StableHashingContext, NodeIdHashingMode};\n+use crate::ich::{Fingerprint, StableHashingContext, NodeIdHashingMode};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey,\n                                            StableHasher, StableHasherResult};\n use std::cell::RefCell;\n use std::hash as std_hash;\n use std::mem;\n-use middle::region;\n-use infer;\n-use traits;\n-use ty;\n-use mir;\n+use crate::middle::region;\n+use crate::infer;\n+use crate::traits;\n+use crate::ty;\n+use crate::mir;\n \n impl<'a, 'gcx, T> HashStable<StableHashingContext<'a>>\n for &'gcx ty::List<T>\n@@ -306,7 +306,7 @@ impl_stable_hash_for!(\n         ByRef(id, alloc, offset),\n     }\n );\n-impl_stable_hash_for!(struct ::mir::interpret::RawConst<'tcx> {\n+impl_stable_hash_for!(struct crate::mir::interpret::RawConst<'tcx> {\n     alloc_id,\n     ty,\n });\n@@ -512,20 +512,22 @@ impl_stable_hash_for!(enum ty::GenericParamDefKind {\n });\n \n impl_stable_hash_for!(\n-    impl<T> for enum ::middle::resolve_lifetime::Set1<T> [ ::middle::resolve_lifetime::Set1 ] {\n+    impl<T> for enum crate::middle::resolve_lifetime::Set1<T>\n+        [ crate::middle::resolve_lifetime::Set1 ]\n+    {\n         Empty,\n         Many,\n         One(value),\n     }\n );\n \n-impl_stable_hash_for!(enum ::middle::resolve_lifetime::LifetimeDefOrigin {\n+impl_stable_hash_for!(enum crate::middle::resolve_lifetime::LifetimeDefOrigin {\n     ExplicitOrElided,\n     InBand,\n     Error,\n });\n \n-impl_stable_hash_for!(enum ::middle::resolve_lifetime::Region {\n+impl_stable_hash_for!(enum crate::middle::resolve_lifetime::Region {\n     Static,\n     EarlyBound(index, decl, is_in_band),\n     LateBound(db_index, decl, is_in_band),\n@@ -547,9 +549,9 @@ impl_stable_hash_for!(enum ty::cast::CastKind {\n     FnPtrAddrCast\n });\n \n-impl_stable_hash_for!(struct ::middle::region::Scope { id, data });\n+impl_stable_hash_for!(struct crate::middle::region::Scope { id, data });\n \n-impl_stable_hash_for!(enum ::middle::region::ScopeData {\n+impl_stable_hash_for!(enum crate::middle::region::ScopeData {\n     Node,\n     CallSite,\n     Arguments,\n@@ -588,7 +590,7 @@ for ty::TyKind<'gcx>\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use ty::TyKind::*;\n+        use crate::ty::TyKind::*;\n \n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match *self {\n@@ -882,20 +884,20 @@ impl_stable_hash_for!(enum traits::Reveal {\n     All\n });\n \n-impl_stable_hash_for!(enum ::middle::privacy::AccessLevel {\n+impl_stable_hash_for!(enum crate::middle::privacy::AccessLevel {\n     ReachableFromImplTrait,\n     Reachable,\n     Exported,\n     Public\n });\n \n impl<'a> HashStable<StableHashingContext<'a>>\n-for ::middle::privacy::AccessLevels {\n+for crate::middle::privacy::AccessLevels {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n         hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n-            let ::middle::privacy::AccessLevels {\n+            let crate::middle::privacy::AccessLevels {\n                 ref map\n             } = *self;\n \n@@ -908,14 +910,14 @@ impl_stable_hash_for!(struct ty::CrateInherentImpls {\n     inherent_impls\n });\n \n-impl_stable_hash_for!(enum ::session::CompileIncomplete {\n+impl_stable_hash_for!(enum crate::session::CompileIncomplete {\n     Stopped,\n     Errored(error_reported)\n });\n \n-impl_stable_hash_for!(struct ::util::common::ErrorReported {});\n+impl_stable_hash_for!(struct crate::util::common::ErrorReported {});\n \n-impl_stable_hash_for!(tuple_struct ::middle::reachable::ReachableSet {\n+impl_stable_hash_for!(tuple_struct crate::middle::reachable::ReachableSet {\n     reachable_set\n });\n \n@@ -924,7 +926,7 @@ for traits::Vtable<'gcx, N> where N: HashStable<StableHashingContext<'a>> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use traits::Vtable::*;\n+        use crate::traits::Vtable::*;\n \n         mem::discriminant(self).hash_stable(hcx, hasher);\n \n@@ -1105,7 +1107,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for traits::WhereClause<'tcx\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use traits::WhereClause::*;\n+        use crate::traits::WhereClause::*;\n \n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match self {\n@@ -1121,7 +1123,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for traits::WellFormed<'tcx>\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use traits::WellFormed::*;\n+        use crate::traits::WellFormed::*;\n \n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match self {\n@@ -1135,7 +1137,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for traits::FromEnv<'tcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use traits::FromEnv::*;\n+        use crate::traits::FromEnv::*;\n \n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match self {\n@@ -1149,7 +1151,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for traits::DomainGoal<'tcx>\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use traits::DomainGoal::*;\n+        use crate::traits::DomainGoal::*;\n \n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match self {\n@@ -1165,7 +1167,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for traits::Goal<'tcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use traits::GoalKind::*;\n+        use crate::traits::GoalKind::*;\n \n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match self {\n@@ -1208,7 +1210,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for traits::Clause<'tcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use traits::Clause::*;\n+        use crate::traits::Clause::*;\n \n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match self {"}, {"sha": "7b2b1184a633673aea7d4a9fa6af40addf5ba52b", "filename": "src/librustc/infer/at.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fat.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -27,7 +27,7 @@\n \n use super::*;\n \n-use ty::relate::{Relate, TypeRelation};\n+use crate::ty::relate::{Relate, TypeRelation};\n \n pub struct At<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     pub infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,"}, {"sha": "4e1c797a2c72a9de2fbb7b8879bb4c6625aea86a", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -5,15 +5,15 @@\n //!\n //! [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html\n \n-use infer::canonical::{\n+use crate::infer::canonical::{\n     Canonical, CanonicalTyVarKind, CanonicalVarInfo, CanonicalVarKind, Canonicalized,\n     OriginalQueryValues,\n };\n-use infer::InferCtxt;\n+use crate::infer::InferCtxt;\n use std::sync::atomic::Ordering;\n-use ty::fold::{TypeFoldable, TypeFolder};\n-use ty::subst::Kind;\n-use ty::{self, BoundVar, Lift, List, Ty, TyCtxt, TypeFlags};\n+use crate::ty::fold::{TypeFoldable, TypeFolder};\n+use crate::ty::subst::Kind;\n+use crate::ty::{self, BoundVar, Lift, List, Ty, TyCtxt, TypeFlags};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;"}, {"sha": "6f28c0b131f6130bd21e9b8886f31c151354796d", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -21,16 +21,16 @@\n //!\n //! [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html\n \n-use infer::{InferCtxt, RegionVariableOrigin, TypeVariableOrigin};\n+use crate::infer::{InferCtxt, RegionVariableOrigin, TypeVariableOrigin};\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::sync::Lrc;\n use serialize::UseSpecializedDecodable;\n use smallvec::SmallVec;\n use std::ops::Index;\n use syntax::source_map::Span;\n-use ty::fold::TypeFoldable;\n-use ty::subst::Kind;\n-use ty::{self, BoundVar, Lift, List, Region, TyCtxt};\n+use crate::ty::fold::TypeFoldable;\n+use crate::ty::subst::Kind;\n+use crate::ty::{self, BoundVar, Lift, List, Region, TyCtxt};\n \n mod canonicalizer;\n \n@@ -393,14 +393,14 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n }\n \n CloneTypeFoldableAndLiftImpls! {\n-    ::infer::canonical::Certainty,\n-    ::infer::canonical::CanonicalVarInfo,\n-    ::infer::canonical::CanonicalVarKind,\n+    crate::infer::canonical::Certainty,\n+    crate::infer::canonical::CanonicalVarInfo,\n+    crate::infer::canonical::CanonicalVarKind,\n }\n \n CloneTypeFoldableImpls! {\n     for <'tcx> {\n-        ::infer::canonical::CanonicalVarInfos<'tcx>,\n+        crate::infer::canonical::CanonicalVarInfos<'tcx>,\n     }\n }\n \n@@ -431,7 +431,7 @@ impl<'tcx> CanonicalVarValues<'tcx> {\n     /// we'll return a substitution `subst` with:\n     /// `subst.var_values == [Type(^0), Lifetime(^1), Type(^2)]`.\n     pub fn make_identity<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Self {\n-        use ty::subst::UnpackedKind;\n+        use crate::ty::subst::UnpackedKind;\n \n         CanonicalVarValues {\n             var_values: self.var_values.iter()"}, {"sha": "409afca43203dbd532172b495340412acf284093", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -7,26 +7,26 @@\n //!\n //! [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html\n \n-use infer::canonical::substitute::substitute_value;\n-use infer::canonical::{\n+use crate::infer::canonical::substitute::substitute_value;\n+use crate::infer::canonical::{\n     Canonical, CanonicalVarValues, CanonicalizedQueryResponse, Certainty,\n     OriginalQueryValues, QueryRegionConstraint, QueryResponse,\n };\n-use infer::region_constraints::{Constraint, RegionConstraintData};\n-use infer::InferCtxtBuilder;\n-use infer::{InferCtxt, InferOk, InferResult};\n+use crate::infer::region_constraints::{Constraint, RegionConstraintData};\n+use crate::infer::InferCtxtBuilder;\n+use crate::infer::{InferCtxt, InferOk, InferResult};\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::sync::Lrc;\n use std::fmt::Debug;\n use syntax_pos::DUMMY_SP;\n-use traits::query::{Fallible, NoSolution};\n-use traits::TraitEngine;\n-use traits::{Obligation, ObligationCause, PredicateObligation};\n-use ty::fold::TypeFoldable;\n-use ty::subst::{Kind, UnpackedKind};\n-use ty::{self, BoundVar, Lift, Ty, TyCtxt};\n-use util::captures::Captures;\n+use crate::traits::query::{Fallible, NoSolution};\n+use crate::traits::TraitEngine;\n+use crate::traits::{Obligation, ObligationCause, PredicateObligation};\n+use crate::ty::fold::TypeFoldable;\n+use crate::ty::subst::{Kind, UnpackedKind};\n+use crate::ty::{self, BoundVar, Lift, Ty, TyCtxt};\n+use crate::util::captures::Captures;\n \n impl<'cx, 'gcx, 'tcx> InferCtxtBuilder<'cx, 'gcx, 'tcx> {\n     /// The \"main method\" for a canonicalized trait query. Given the"}, {"sha": "5af4e8366818bfee581c52356dba8c459462dd2e", "filename": "src/librustc/infer/canonical/substitute.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -6,10 +6,10 @@\n //!\n //! [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html\n \n-use infer::canonical::{Canonical, CanonicalVarValues};\n-use ty::fold::TypeFoldable;\n-use ty::subst::UnpackedKind;\n-use ty::{self, TyCtxt};\n+use crate::infer::canonical::{Canonical, CanonicalVarValues};\n+use crate::ty::fold::TypeFoldable;\n+use crate::ty::subst::UnpackedKind;\n+use crate::ty::{self, TyCtxt};\n \n impl<'tcx, V> Canonical<'tcx, V> {\n     /// Instantiate the wrapped value, replacing each canonical value"}, {"sha": "7e22521473491029985f06b28454e4eadfbc3f79", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -29,13 +29,13 @@ use super::lub::Lub;\n use super::sub::Sub;\n use super::type_variable::TypeVariableValue;\n \n-use hir::def_id::DefId;\n-use ty::{IntType, UintType};\n-use ty::{self, Ty, TyCtxt};\n-use ty::error::TypeError;\n-use ty::relate::{self, Relate, RelateResult, TypeRelation};\n-use ty::subst::Substs;\n-use traits::{Obligation, PredicateObligations};\n+use crate::hir::def_id::DefId;\n+use crate::ty::{IntType, UintType};\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::error::TypeError;\n+use crate::ty::relate::{self, Relate, RelateResult, TypeRelation};\n+use crate::ty::subst::Substs;\n+use crate::traits::{Obligation, PredicateObligations};\n \n use syntax::ast;\n use syntax_pos::Span;"}, {"sha": "a4b62307a60b861a39b455a43935fe433d137c17", "filename": "src/librustc/infer/equate.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fequate.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,12 +1,12 @@\n use super::combine::{CombineFields, RelationDir};\n use super::{Subtype};\n \n-use hir::def_id::DefId;\n+use crate::hir::def_id::DefId;\n \n-use ty::{self, Ty, TyCtxt};\n-use ty::TyVar;\n-use ty::subst::Substs;\n-use ty::relate::{self, Relate, RelateResult, TypeRelation};\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::TyVar;\n+use crate::ty::subst::Substs;\n+use crate::ty::relate::{self, Relate, RelateResult, TypeRelation};\n \n /// Ensures `a` is made equal to `b`. Returns `a` on success.\n pub struct Equate<'combine, 'infcx: 'combine, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {"}, {"sha": "8510533391287a732d1028080efd64dd04200037", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -48,19 +48,19 @@\n use super::lexical_region_resolve::RegionResolutionError;\n use super::region_constraints::GenericKind;\n use super::{InferCtxt, RegionVariableOrigin, SubregionOrigin, TypeTrace, ValuePairs};\n-use infer::{self, SuppressRegionErrors};\n+use crate::infer::{self, SuppressRegionErrors};\n \n-use errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n-use hir;\n-use hir::def_id::DefId;\n-use hir::Node;\n-use middle::region;\n+use crate::errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n+use crate::hir;\n+use crate::hir::def_id::DefId;\n+use crate::hir::Node;\n+use crate::middle::region;\n use std::{cmp, fmt};\n use syntax::ast::DUMMY_NODE_ID;\n use syntax_pos::{Pos, Span};\n-use traits::{ObligationCause, ObligationCauseCode};\n-use ty::error::TypeError;\n-use ty::{self, subst::Subst, Region, Ty, TyCtxt, TyKind, TypeFoldable};\n+use crate::traits::{ObligationCause, ObligationCauseCode};\n+use crate::ty::error::TypeError;\n+use crate::ty::{self, subst::Subst, Region, Ty, TyCtxt, TyKind, TypeFoldable};\n \n mod note;\n \n@@ -1479,7 +1479,7 @@ enum FailureCode {\n impl<'tcx> ObligationCause<'tcx> {\n     fn as_failure_code(&self, terr: &TypeError<'tcx>) -> FailureCode {\n         use self::FailureCode::*;\n-        use traits::ObligationCauseCode::*;\n+        use crate::traits::ObligationCauseCode::*;\n         match self.code {\n             CompareImplMethodObligation { .. } => Error0308(\"method not compatible with trait\"),\n             MatchExpressionArm { source, .. } => Error0308(match source {\n@@ -1509,7 +1509,7 @@ impl<'tcx> ObligationCause<'tcx> {\n     }\n \n     fn as_requirement_str(&self) -> &'static str {\n-        use traits::ObligationCauseCode::*;\n+        use crate::traits::ObligationCauseCode::*;\n         match self.code {\n             CompareImplMethodObligation { .. } => \"method type is compatible with trait\",\n             ExprAssignable => \"expression is assignable\","}, {"sha": "fac498bd6dd78e7104d793ddf7b9f8fd9fef0bf5", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,11 +1,11 @@\n-use hir::{self, Local, Pat, Body, HirId};\n-use hir::intravisit::{self, Visitor, NestedVisitorMap};\n-use infer::InferCtxt;\n-use infer::type_variable::TypeVariableOrigin;\n-use ty::{self, Ty, Infer, TyVar};\n+use crate::hir::{self, Local, Pat, Body, HirId};\n+use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n+use crate::infer::InferCtxt;\n+use crate::infer::type_variable::TypeVariableOrigin;\n+use crate::ty::{self, Ty, Infer, TyVar};\n use syntax::source_map::CompilerDesugaringKind;\n use syntax_pos::Span;\n-use errors::DiagnosticBuilder;\n+use crate::errors::DiagnosticBuilder;\n \n struct FindLocalByTypeVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,"}, {"sha": "0f4401517792c15de3a6037aa463fa8959ae022e", "filename": "src/librustc/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,9 +1,9 @@\n //! Error Reporting for Anonymous Region Lifetime Errors\n //! where both the regions are anonymous.\n \n-use infer::error_reporting::nice_region_error::NiceRegionError;\n-use infer::error_reporting::nice_region_error::util::AnonymousArgInfo;\n-use util::common::ErrorReported;\n+use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n+use crate::infer::error_reporting::nice_region_error::util::AnonymousArgInfo;\n+use crate::util::common::ErrorReported;\n \n impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n     /// Print the error message for lifetime errors when both the concerned regions are anonymous."}, {"sha": "ea748874fc4e20a13e657fa68a0499119e5e22d1", "filename": "src/librustc/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,9 +1,9 @@\n-use hir;\n-use ty::{self, Region, TyCtxt};\n-use hir::Node;\n-use middle::resolve_lifetime as rl;\n-use hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use infer::error_reporting::nice_region_error::NiceRegionError;\n+use crate::hir;\n+use crate::ty::{self, Region, TyCtxt};\n+use crate::hir::Node;\n+use crate::middle::resolve_lifetime as rl;\n+use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n \n impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n     /// This function calls the `visit_ty` method for the parameters"}, {"sha": "dad1e3ba80da340ddf27a1fa634270f0c2a7dd3c", "filename": "src/librustc/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,9 +1,9 @@\n-use infer::InferCtxt;\n-use infer::lexical_region_resolve::RegionResolutionError;\n-use infer::lexical_region_resolve::RegionResolutionError::*;\n+use crate::infer::InferCtxt;\n+use crate::infer::lexical_region_resolve::RegionResolutionError;\n+use crate::infer::lexical_region_resolve::RegionResolutionError::*;\n use syntax::source_map::Span;\n-use ty::{self, TyCtxt};\n-use util::common::ErrorReported;\n+use crate::ty::{self, TyCtxt};\n+use crate::util::common::ErrorReported;\n \n mod different_lifetimes;\n mod find_anon_type;"}, {"sha": "d66bb274b34cef2b0d328724b2e494106c555571", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,9 +1,9 @@\n //! Error Reporting for Anonymous Region Lifetime Errors\n //! where one region is named and the other is anonymous.\n-use infer::error_reporting::nice_region_error::NiceRegionError;\n-use ty;\n-use util::common::ErrorReported;\n-use errors::Applicability;\n+use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n+use crate::ty;\n+use crate::util::common::ErrorReported;\n+use crate::errors::Applicability;\n \n impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n     /// When given a `ConcreteFailure` for a function with arguments containing a named region and"}, {"sha": "6432780de067032603fc247c36d942345e7c3089", "filename": "src/librustc/infer/error_reporting/nice_region_error/outlives_closure.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,13 +1,13 @@\n //! Error Reporting for Anonymous Region Lifetime Errors\n //! where both the regions are anonymous.\n \n-use infer::error_reporting::nice_region_error::NiceRegionError;\n-use infer::SubregionOrigin;\n-use ty::RegionKind;\n-use hir::{Expr, ExprKind::Closure};\n-use hir::Node;\n-use util::common::ErrorReported;\n-use infer::lexical_region_resolve::RegionResolutionError::SubSupConflict;\n+use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n+use crate::infer::SubregionOrigin;\n+use crate::ty::RegionKind;\n+use crate::hir::{Expr, ExprKind::Closure};\n+use crate::hir::Node;\n+use crate::util::common::ErrorReported;\n+use crate::infer::lexical_region_resolve::RegionResolutionError::SubSupConflict;\n \n impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n     /// Print the error message for lifetime errors when binding escapes a closure."}, {"sha": "6893a1fb168b8bc8cfd4f2d468bc7e86be1b7b5e", "filename": "src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,15 +1,15 @@\n-use errors::DiagnosticBuilder;\n-use hir::def_id::DefId;\n-use infer::error_reporting::nice_region_error::NiceRegionError;\n-use infer::lexical_region_resolve::RegionResolutionError;\n-use infer::ValuePairs;\n-use infer::{SubregionOrigin, TypeTrace};\n-use traits::{ObligationCause, ObligationCauseCode};\n-use ty;\n-use ty::error::ExpectedFound;\n-use ty::subst::Substs;\n-use util::common::ErrorReported;\n-use util::ppaux::RegionHighlightMode;\n+use crate::errors::DiagnosticBuilder;\n+use crate::hir::def_id::DefId;\n+use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n+use crate::infer::lexical_region_resolve::RegionResolutionError;\n+use crate::infer::ValuePairs;\n+use crate::infer::{SubregionOrigin, TypeTrace};\n+use crate::traits::{ObligationCause, ObligationCauseCode};\n+use crate::ty;\n+use crate::ty::error::ExpectedFound;\n+use crate::ty::subst::Substs;\n+use crate::util::common::ErrorReported;\n+use crate::util::ppaux::RegionHighlightMode;\n \n impl NiceRegionError<'me, 'gcx, 'tcx> {\n     /// When given a `ConcreteFailure` for a function with arguments containing a named region and"}, {"sha": "3f0297952278a104bd8639b717b3d084495864ac", "filename": "src/librustc/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,10 +1,10 @@\n //! Error Reporting for static impl Traits.\n \n-use infer::error_reporting::nice_region_error::NiceRegionError;\n-use infer::lexical_region_resolve::RegionResolutionError;\n-use ty::{BoundRegion, FreeRegion, RegionKind};\n-use util::common::ErrorReported;\n-use errors::Applicability;\n+use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n+use crate::infer::lexical_region_resolve::RegionResolutionError;\n+use crate::ty::{BoundRegion, FreeRegion, RegionKind};\n+use crate::util::common::ErrorReported;\n+use crate::errors::Applicability;\n \n impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n     /// Print the error message for lifetime errors when the return type is a static impl Trait."}, {"sha": "f73f8d8bb82be1b546ba8b53bc0418205c82c867", "filename": "src/librustc/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,10 +1,10 @@\n //! Helper functions corresponding to lifetime errors due to\n //! anonymous regions.\n \n-use hir;\n-use infer::error_reporting::nice_region_error::NiceRegionError;\n-use ty::{self, Region, Ty};\n-use hir::def_id::DefId;\n+use crate::hir;\n+use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n+use crate::ty::{self, Region, Ty};\n+use crate::hir::def_id::DefId;\n use syntax_pos::Span;\n \n // The struct contains the information about the anonymous region"}, {"sha": "efd7f3c55e900eff38501715800474feab253cc2", "filename": "src/librustc/infer/error_reporting/note.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,8 +1,8 @@\n-use infer::{self, InferCtxt, SubregionOrigin};\n-use middle::region;\n-use ty::{self, Region};\n-use ty::error::TypeError;\n-use errors::DiagnosticBuilder;\n+use crate::infer::{self, InferCtxt, SubregionOrigin};\n+use crate::middle::region;\n+use crate::ty::{self, Region};\n+use crate::ty::error::TypeError;\n+use crate::errors::DiagnosticBuilder;\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub(super) fn note_region_origin(&self,"}, {"sha": "201717b34ee41abfb18b89a5854c2e6925b26d69", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -31,9 +31,9 @@\n //! variable only once, and it does so as soon as it can, so it is reasonable to ask what the type\n //! inferencer knows \"so far\".\n \n-use ty::{self, Ty, TyCtxt, TypeFoldable};\n-use ty::fold::TypeFolder;\n-use util::nodemap::FxHashMap;\n+use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::fold::TypeFolder;\n+use crate::util::nodemap::FxHashMap;\n \n use std::collections::hash_map::Entry;\n "}, {"sha": "d205cfcf73b7eafca9604dde306ee4aa0dc86203", "filename": "src/librustc/infer/fudge.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffudge.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,6 +1,6 @@\n-use infer::type_variable::TypeVariableMap;\n-use ty::{self, Ty, TyCtxt};\n-use ty::fold::{TypeFoldable, TypeFolder};\n+use crate::infer::type_variable::TypeVariableMap;\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::fold::{TypeFoldable, TypeFolder};\n \n use super::InferCtxt;\n use super::RegionVariableOrigin;"}, {"sha": "910c6571853dc078580721c9068b19672b41b876", "filename": "src/librustc/infer/glb.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fglb.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -3,9 +3,9 @@ use super::InferCtxt;\n use super::lattice::{self, LatticeDir};\n use super::Subtype;\n \n-use traits::ObligationCause;\n-use ty::{self, Ty, TyCtxt};\n-use ty::relate::{Relate, RelateResult, TypeRelation};\n+use crate::traits::ObligationCause;\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::relate::{Relate, RelateResult, TypeRelation};\n \n /// \"Greatest lower bound\" (common subtype)\n pub struct Glb<'combine, 'infcx: 'combine, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {"}, {"sha": "c7fc446b9787b11ae2ad8797ab8ee1b0c4fad4b2", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -4,8 +4,8 @@\n use super::combine::CombineFields;\n use super::{HigherRankedType, InferCtxt, PlaceholderMap};\n \n-use ty::relate::{Relate, RelateResult, TypeRelation};\n-use ty::{self, Binder, TypeFoldable};\n+use crate::ty::relate::{Relate, RelateResult, TypeRelation};\n+use crate::ty::{self, Binder, TypeFoldable};\n \n impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n     pub fn higher_ranked_sub<T>("}, {"sha": "dfa086a64de61e01baae0b6217676760d732efcb", "filename": "src/librustc/infer/lattice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flattice.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -22,10 +22,10 @@\n use super::InferCtxt;\n use super::type_variable::TypeVariableOrigin;\n \n-use traits::ObligationCause;\n-use ty::TyVar;\n-use ty::{self, Ty};\n-use ty::relate::{RelateResult, TypeRelation};\n+use crate::traits::ObligationCause;\n+use crate::ty::TyVar;\n+use crate::ty::{self, Ty};\n+use crate::ty::relate::{RelateResult, TypeRelation};\n \n pub trait LatticeDir<'f, 'gcx: 'f+'tcx, 'tcx: 'f> : TypeRelation<'f, 'gcx, 'tcx> {\n     fn infcx(&self) -> &'f InferCtxt<'f, 'gcx, 'tcx>;"}, {"sha": "073a3f74422c6ff2bdf82ca62f0e3fe2f7b4ecc6", "filename": "src/librustc/infer/lexical_region_resolve/graphviz.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -8,14 +8,14 @@\n /// For clarity, rename the graphviz crate locally to dot.\n use graphviz as dot;\n \n-use hir::def_id::DefIndex;\n-use ty;\n-use middle::free_region::RegionRelations;\n-use middle::region;\n+use crate::hir::def_id::DefIndex;\n+use crate::ty;\n+use crate::middle::free_region::RegionRelations;\n+use crate::middle::region;\n use super::Constraint;\n-use infer::SubregionOrigin;\n-use infer::region_constraints::RegionConstraintData;\n-use util::nodemap::{FxHashMap, FxHashSet};\n+use crate::infer::SubregionOrigin;\n+use crate::infer::region_constraints::RegionConstraintData;\n+use crate::util::nodemap::{FxHashMap, FxHashSet};\n \n use std::borrow::Cow;\n use std::collections::hash_map::Entry::Vacant;"}, {"sha": "7add8a26ede09075a55593ec74a7ac486bb34435", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,13 +1,13 @@\n //! The code to do lexical region resolution.\n \n-use infer::region_constraints::Constraint;\n-use infer::region_constraints::GenericKind;\n-use infer::region_constraints::RegionConstraintData;\n-use infer::region_constraints::VarInfos;\n-use infer::region_constraints::VerifyBound;\n-use infer::RegionVariableOrigin;\n-use infer::SubregionOrigin;\n-use middle::free_region::RegionRelations;\n+use crate::infer::region_constraints::Constraint;\n+use crate::infer::region_constraints::GenericKind;\n+use crate::infer::region_constraints::RegionConstraintData;\n+use crate::infer::region_constraints::VarInfos;\n+use crate::infer::region_constraints::VerifyBound;\n+use crate::infer::RegionVariableOrigin;\n+use crate::infer::SubregionOrigin;\n+use crate::middle::free_region::RegionRelations;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::graph::implementation::{\n     Direction, Graph, NodeIndex, INCOMING, OUTGOING,\n@@ -16,11 +16,11 @@ use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use smallvec::SmallVec;\n use std::fmt;\n use std::u32;\n-use ty::fold::TypeFoldable;\n-use ty::{self, Ty, TyCtxt};\n-use ty::{ReEarlyBound, ReEmpty, ReErased, ReFree, ReStatic};\n-use ty::{ReLateBound, ReScope, RePlaceholder, ReVar};\n-use ty::{Region, RegionVid};\n+use crate::ty::fold::TypeFoldable;\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::{ReEarlyBound, ReEmpty, ReErased, ReFree, ReStatic};\n+use crate::ty::{ReLateBound, ReScope, RePlaceholder, ReVar};\n+use crate::ty::{Region, RegionVid};\n \n mod graphviz;\n "}, {"sha": "f9eb60d82d17b5c38d6aa61e5514dc4f8c0b65a7", "filename": "src/librustc/infer/lub.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flub.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -3,9 +3,9 @@ use super::InferCtxt;\n use super::lattice::{self, LatticeDir};\n use super::Subtype;\n \n-use traits::ObligationCause;\n-use ty::{self, Ty, TyCtxt};\n-use ty::relate::{Relate, RelateResult, TypeRelation};\n+use crate::traits::ObligationCause;\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::relate::{Relate, RelateResult, TypeRelation};\n \n /// \"Least upper bound\" (common supertype)\n pub struct Lub<'combine, 'infcx: 'combine, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {"}, {"sha": "06c94d133344c662ca4407b22d191e7460bc618f", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -5,31 +5,31 @@ pub use self::LateBoundRegionConversionTime::*;\n pub use self::RegionVariableOrigin::*;\n pub use self::SubregionOrigin::*;\n pub use self::ValuePairs::*;\n-pub use ty::IntVarValue;\n+pub use crate::ty::IntVarValue;\n \n use arena::SyncDroplessArena;\n-use errors::DiagnosticBuilder;\n-use hir::def_id::DefId;\n-use infer::canonical::{Canonical, CanonicalVarValues};\n-use middle::free_region::RegionRelations;\n-use middle::lang_items;\n-use middle::region;\n+use crate::errors::DiagnosticBuilder;\n+use crate::hir::def_id::DefId;\n+use crate::infer::canonical::{Canonical, CanonicalVarValues};\n+use crate::middle::free_region::RegionRelations;\n+use crate::middle::lang_items;\n+use crate::middle::region;\n use rustc_data_structures::unify as ut;\n-use session::config::BorrowckMode;\n+use crate::session::config::BorrowckMode;\n use std::cell::{Cell, Ref, RefCell, RefMut};\n use std::collections::BTreeMap;\n use std::fmt;\n use syntax::ast;\n use syntax_pos::symbol::InternedString;\n use syntax_pos::{self, Span};\n-use traits::{self, ObligationCause, PredicateObligations, TraitEngine};\n-use ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n-use ty::fold::TypeFoldable;\n-use ty::relate::RelateResult;\n-use ty::subst::{Kind, Substs};\n-use ty::{self, GenericParamDefKind, Ty, TyCtxt, CtxtInterners};\n-use ty::{FloatVid, IntVid, TyVid};\n-use util::nodemap::FxHashMap;\n+use crate::traits::{self, ObligationCause, PredicateObligations, TraitEngine};\n+use crate::ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n+use crate::ty::fold::TypeFoldable;\n+use crate::ty::relate::RelateResult;\n+use crate::ty::subst::{Kind, Substs};\n+use crate::ty::{self, GenericParamDefKind, Ty, TyCtxt, CtxtInterners};\n+use crate::ty::{FloatVid, IntVid, TyVid};\n+use crate::util::nodemap::FxHashMap;\n \n use self::combine::CombineFields;\n use self::lexical_region_resolve::LexicalRegionResolutions;\n@@ -617,8 +617,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn type_is_unconstrained_numeric(&'a self, ty: Ty<'_>) -> UnconstrainedNumeric {\n-        use ty::error::UnconstrainedNumeric::Neither;\n-        use ty::error::UnconstrainedNumeric::{UnconstrainedFloat, UnconstrainedInt};\n+        use crate::ty::error::UnconstrainedNumeric::Neither;\n+        use crate::ty::error::UnconstrainedNumeric::{UnconstrainedFloat, UnconstrainedInt};\n         match ty.sty {\n             ty::Infer(ty::IntVar(vid)) => {\n                 if self.int_unification_table"}, {"sha": "e28157f05f15f7cb22a23457b5334ab73b0d884b", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,16 +1,16 @@\n-use hir::def_id::DefId;\n-use hir;\n-use hir::Node;\n-use infer::{self, InferCtxt, InferOk, TypeVariableOrigin};\n-use infer::outlives::free_region_map::FreeRegionRelations;\n+use crate::hir::def_id::DefId;\n+use crate::hir;\n+use crate::hir::Node;\n+use crate::infer::{self, InferCtxt, InferOk, TypeVariableOrigin};\n+use crate::infer::outlives::free_region_map::FreeRegionRelations;\n use rustc_data_structures::fx::FxHashMap;\n use syntax::ast;\n-use traits::{self, PredicateObligation};\n-use ty::{self, Ty, TyCtxt, GenericParamDefKind};\n-use ty::fold::{BottomUpFolder, TypeFoldable, TypeFolder};\n-use ty::outlives::Component;\n-use ty::subst::{Kind, Substs, UnpackedKind};\n-use util::nodemap::DefIdMap;\n+use crate::traits::{self, PredicateObligation};\n+use crate::ty::{self, Ty, TyCtxt, GenericParamDefKind};\n+use crate::ty::fold::{BottomUpFolder, TypeFoldable, TypeFolder};\n+use crate::ty::outlives::Component;\n+use crate::ty::subst::{Kind, Substs, UnpackedKind};\n+use crate::util::nodemap::DefIdMap;\n \n pub type OpaqueTypeMap<'tcx> = DefIdMap<OpaqueTypeDecl<'tcx>>;\n "}, {"sha": "20d03f3c6edb57e7c5d2808b461461fba2e17449", "filename": "src/librustc/infer/outlives/env.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,10 +1,10 @@\n-use infer::outlives::free_region_map::FreeRegionMap;\n-use infer::{GenericKind, InferCtxt};\n+use crate::infer::outlives::free_region_map::FreeRegionMap;\n+use crate::infer::{GenericKind, InferCtxt};\n use rustc_data_structures::fx::FxHashMap;\n use syntax::ast;\n use syntax_pos::Span;\n-use traits::query::outlives_bounds::{self, OutlivesBound};\n-use ty::{self, Ty};\n+use crate::traits::query::outlives_bounds::{self, OutlivesBound};\n+use crate::ty::{self, Ty};\n \n /// The `OutlivesEnvironment` collects information about what outlives\n /// what in a given type-checking setting. For example, if we have a"}, {"sha": "7daf6d71980f6dd3d6e5d0525bed4318c5766818", "filename": "src/librustc/infer/outlives/free_region_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,4 +1,4 @@\n-use ty::{self, Lift, TyCtxt, Region};\n+use crate::ty::{self, Lift, TyCtxt, Region};\n use rustc_data_structures::transitive_relation::TransitiveRelation;\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, Default)]"}, {"sha": "884bd58b4023bac3e52b88e36a24cf1d98697816", "filename": "src/librustc/infer/outlives/obligations.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -59,14 +59,14 @@\n //! might later infer `?U` to something like `&'b u32`, which would\n //! imply that `'b: 'a`.\n \n-use infer::outlives::env::RegionBoundPairs;\n-use infer::outlives::verify::VerifyBoundCx;\n-use infer::{self, GenericKind, InferCtxt, RegionObligation, SubregionOrigin, VerifyBound};\n+use crate::infer::outlives::env::RegionBoundPairs;\n+use crate::infer::outlives::verify::VerifyBoundCx;\n+use crate::infer::{self, GenericKind, InferCtxt, RegionObligation, SubregionOrigin, VerifyBound};\n use rustc_data_structures::fx::FxHashMap;\n use syntax::ast;\n-use traits::ObligationCause;\n-use ty::outlives::Component;\n-use ty::{self, Region, Ty, TyCtxt, TypeFoldable};\n+use crate::traits::ObligationCause;\n+use crate::ty::outlives::Component;\n+use crate::ty::{self, Region, Ty, TyCtxt, TypeFoldable};\n \n impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// Registers that the given region obligation must be resolved"}, {"sha": "0457e7179461c2297335354c80be2e17d3507c92", "filename": "src/librustc/infer/outlives/verify.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,10 +1,10 @@\n-use hir::def_id::DefId;\n-use infer::outlives::env::RegionBoundPairs;\n-use infer::{GenericKind, VerifyBound};\n-use traits;\n-use ty::subst::{Subst, Substs};\n-use ty::{self, Ty, TyCtxt};\n-use util::captures::Captures;\n+use crate::hir::def_id::DefId;\n+use crate::infer::outlives::env::RegionBoundPairs;\n+use crate::infer::{GenericKind, VerifyBound};\n+use crate::traits;\n+use crate::ty::subst::{Subst, Substs};\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::util::captures::Captures;\n \n /// The `TypeOutlives` struct has the job of \"lowering\" a `T: 'a`\n /// obligation into a series of `'a: 'b` constraints and \"verifys\", as"}, {"sha": "500497dc011e1a65d1da2374baeda1785af35b90", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -9,10 +9,10 @@ use super::{MiscVariable, RegionVariableOrigin, SubregionOrigin};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::unify as ut;\n-use ty::ReStatic;\n-use ty::{self, Ty, TyCtxt};\n-use ty::{BrFresh, ReLateBound, ReVar};\n-use ty::{Region, RegionVid};\n+use crate::ty::ReStatic;\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::{BrFresh, ReLateBound, ReVar};\n+use crate::ty::{Region, RegionVid};\n \n use std::collections::BTreeMap;\n use std::{cmp, fmt, mem, u32};"}, {"sha": "4a8f0c34ead111381181dc6d756d89bc62c7c713", "filename": "src/librustc/infer/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fresolve.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,6 +1,6 @@\n use super::{InferCtxt, FixupError, FixupResult};\n-use ty::{self, Ty, TyCtxt, TypeFoldable};\n-use ty::fold::{TypeFolder, TypeVisitor};\n+use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::fold::{TypeFolder, TypeVisitor};\n \n ///////////////////////////////////////////////////////////////////////////\n // OPPORTUNISTIC TYPE RESOLVER"}, {"sha": "0cff42742c30a813e74f74abab7da0209306e7c3", "filename": "src/librustc/infer/sub.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fsub.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,11 +1,11 @@\n use super::SubregionOrigin;\n use super::combine::{CombineFields, RelationDir};\n \n-use traits::Obligation;\n-use ty::{self, Ty, TyCtxt};\n-use ty::TyVar;\n-use ty::fold::TypeFoldable;\n-use ty::relate::{Cause, Relate, RelateResult, TypeRelation};\n+use crate::traits::Obligation;\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::TyVar;\n+use crate::ty::fold::TypeFoldable;\n+use crate::ty::relate::{Cause, Relate, RelateResult, TypeRelation};\n use std::mem;\n \n /// Ensures `a` is made a subtype of `b`. Returns `a` on success."}, {"sha": "14f3261bfc20383f48f0012715b1089733ac2c0b", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,6 +1,6 @@\n use syntax::symbol::InternedString;\n use syntax_pos::Span;\n-use ty::{self, Ty};\n+use crate::ty::{self, Ty};\n \n use std::cmp;\n use std::marker::PhantomData;"}, {"sha": "09f800d9f9bfc97d8fce3c80dfacc95279a77928", "filename": "src/librustc/infer/unify_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Funify_key.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,4 +1,4 @@\n-use ty::{self, FloatVarValue, IntVarValue, Ty, TyCtxt};\n+use crate::ty::{self, FloatVarValue, IntVarValue, Ty, TyCtxt};\n use rustc_data_structures::unify::{NoError, EqUnifyValue, UnifyKey, UnifyValue};\n \n pub trait ToType {"}, {"sha": "d19513515201e8c57875a9dc69960aaf5a77e286", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 13, "deletions": 25, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -30,6 +30,9 @@\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n+#![deny(rust_2018_idioms)]\n+#![allow(explicit_outlives_requirements)]\n+\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(core_intrinsics)]\n@@ -64,41 +67,24 @@\n \n #![warn(elided_lifetimes_in_paths)]\n \n-extern crate arena;\n #[macro_use] extern crate bitflags;\n-extern crate core;\n-extern crate fmt_macros;\n extern crate getopts;\n-extern crate graphviz;\n-extern crate num_cpus;\n #[macro_use] extern crate lazy_static;\n #[macro_use] extern crate scoped_tls;\n #[cfg(windows)]\n extern crate libc;\n-extern crate polonius_engine;\n-extern crate rustc_target;\n #[macro_use] extern crate rustc_data_structures;\n-extern crate serialize;\n-extern crate parking_lot;\n-extern crate rustc_errors as errors;\n-extern crate rustc_rayon as rayon;\n-extern crate rustc_rayon_core as rayon_core;\n+\n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n-extern crate syntax_pos;\n-extern crate jobserver;\n-extern crate proc_macro;\n-extern crate chalk_engine;\n-extern crate rustc_fs_util;\n \n-extern crate serialize as rustc_serialize; // used by deriving\n+// FIXME: This import is used by deriving `RustcDecodable` and `RustcEncodable`. Removing this\n+// results in a bunch of \"failed to resolve\" errors. Hopefully, the compiler moves to serde or\n+// something, and we can get rid of this.\n+#[allow(rust_2018_idioms)]\n+extern crate serialize as rustc_serialize;\n \n-extern crate rustc_apfloat;\n-extern crate byteorder;\n-extern crate backtrace;\n-\n-#[macro_use]\n-extern crate smallvec;\n+#[macro_use] extern crate smallvec;\n \n // Note that librustc doesn't actually depend on these crates, see the note in\n // `Cargo.toml` for this crate about why these are here.\n@@ -166,9 +152,11 @@ pub mod util {\n // `libstd` uses the same trick.\n #[doc(hidden)]\n mod rustc {\n-    pub use lint;\n+    pub use crate::lint;\n }\n \n+use rustc_errors as errors;\n+\n // FIXME(#27438): right now the unit tests of librustc don't refer to any actual\n //                functions generated in librustc_data_structures (all\n //                references are through generic functions), but statics are"}, {"sha": "6ae7448645a20d5d0f42006f79d3f22229674369", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -4,9 +4,9 @@\n //! compiler code, rather than using their own custom pass. Those\n //! lints are all available in `rustc_lint::builtin`.\n \n-use errors::{Applicability, DiagnosticBuilder};\n-use lint::{LintPass, LateLintPass, LintArray};\n-use session::Session;\n+use crate::errors::{Applicability, DiagnosticBuilder};\n+use crate::lint::{LintPass, LateLintPass, LintArray};\n+use crate::session::Session;\n use syntax::ast;\n use syntax::source_map::Span;\n "}, {"sha": "27ead805d5dbd6ba92afc71cf9790fcea2d585ab", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -18,26 +18,26 @@ use self::TargetLint::*;\n \n use std::slice;\n use rustc_data_structures::sync::ReadGuard;\n-use lint::{EarlyLintPass, EarlyLintPassObject, LateLintPassObject};\n-use lint::{LintArray, Level, Lint, LintId, LintPass, LintBuffer};\n-use lint::builtin::BuiltinLintDiagnostics;\n-use lint::levels::{LintLevelSets, LintLevelsBuilder};\n-use middle::privacy::AccessLevels;\n-use rustc_serialize::{Decoder, Decodable, Encoder, Encodable};\n-use session::{config, early_error, Session};\n-use ty::{self, TyCtxt, Ty};\n-use ty::layout::{LayoutError, LayoutOf, TyLayout};\n-use util::nodemap::FxHashMap;\n-use util::common::time;\n+use crate::lint::{EarlyLintPass, EarlyLintPassObject, LateLintPassObject};\n+use crate::lint::{LintArray, Level, Lint, LintId, LintPass, LintBuffer};\n+use crate::lint::builtin::BuiltinLintDiagnostics;\n+use crate::lint::levels::{LintLevelSets, LintLevelsBuilder};\n+use crate::middle::privacy::AccessLevels;\n+use crate::rustc_serialize::{Decoder, Decodable, Encoder, Encodable};\n+use crate::session::{config, early_error, Session};\n+use crate::ty::{self, TyCtxt, Ty};\n+use crate::ty::layout::{LayoutError, LayoutOf, TyLayout};\n+use crate::util::nodemap::FxHashMap;\n+use crate::util::common::time;\n \n use std::default::Default as StdDefault;\n use syntax::ast;\n use syntax::edition;\n use syntax_pos::{MultiSpan, Span, symbol::{LocalInternedString, Symbol}};\n-use errors::DiagnosticBuilder;\n-use hir;\n-use hir::def_id::LOCAL_CRATE;\n-use hir::intravisit as hir_visit;\n+use crate::errors::DiagnosticBuilder;\n+use crate::hir;\n+use crate::hir::def_id::LOCAL_CRATE;\n+use crate::hir::intravisit as hir_visit;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::visit as ast_visit;\n "}, {"sha": "62bd54de7c92934d7d52623ec09fb0a284e4c601", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,20 +1,20 @@\n use std::cmp;\n \n-use errors::{Applicability, DiagnosticBuilder};\n-use hir::HirId;\n-use ich::StableHashingContext;\n-use lint::builtin;\n-use lint::context::CheckLintNameResult;\n-use lint::{self, Lint, LintId, Level, LintSource};\n+use crate::errors::{Applicability, DiagnosticBuilder};\n+use crate::hir::HirId;\n+use crate::ich::StableHashingContext;\n+use crate::lint::builtin;\n+use crate::lint::context::CheckLintNameResult;\n+use crate::lint::{self, Lint, LintId, Level, LintSource};\n use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey,\n                                            StableHasher, StableHasherResult};\n-use session::Session;\n+use crate::session::Session;\n use syntax::ast;\n use syntax::attr;\n use syntax::feature_gate;\n use syntax::source_map::MultiSpan;\n use syntax::symbol::Symbol;\n-use util::nodemap::FxHashMap;\n+use crate::util::nodemap::FxHashMap;\n \n pub struct LintLevelSets {\n     list: Vec<LintSet>,"}, {"sha": "4e6bf753b01aa4af75889d07746be18842f2ab74", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -23,25 +23,25 @@ pub use self::LintSource::*;\n \n use rustc_data_structures::sync::{self, Lrc};\n \n-use errors::{DiagnosticBuilder, DiagnosticId};\n-use hir::def_id::{CrateNum, LOCAL_CRATE};\n-use hir::intravisit;\n-use hir;\n-use lint::builtin::BuiltinLintDiagnostics;\n-use lint::builtin::parser::{QUESTION_MARK_MACRO_SEP, ILL_FORMED_ATTRIBUTE_INPUT};\n-use session::{Session, DiagnosticMessageId};\n+use crate::errors::{DiagnosticBuilder, DiagnosticId};\n+use crate::hir::def_id::{CrateNum, LOCAL_CRATE};\n+use crate::hir::intravisit;\n+use crate::hir;\n+use crate::lint::builtin::BuiltinLintDiagnostics;\n+use crate::lint::builtin::parser::{QUESTION_MARK_MACRO_SEP, ILL_FORMED_ATTRIBUTE_INPUT};\n+use crate::session::{Session, DiagnosticMessageId};\n use std::{hash, ptr};\n use syntax::ast;\n use syntax::source_map::{MultiSpan, ExpnFormat};\n use syntax::early_buffered_lints::BufferedEarlyLintId;\n use syntax::edition::Edition;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n-use ty::TyCtxt;\n-use ty::query::Providers;\n-use util::nodemap::NodeMap;\n+use crate::ty::TyCtxt;\n+use crate::ty::query::Providers;\n+use crate::util::nodemap::NodeMap;\n \n-pub use lint::context::{LateContext, EarlyContext, LintContext, LintStore,\n+pub use crate::lint::context::{LateContext, EarlyContext, LintContext, LintStore,\n                         check_crate, check_ast_crate, CheckLintNameResult,\n                         FutureIncompatibleInfo, BufferedEarlyLint};\n \n@@ -678,7 +678,7 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n             \"this was previously accepted by the compiler but is being phased out; \\\n              it will become a hard error\";\n \n-        let explanation = if lint_id == LintId::of(::lint::builtin::UNSTABLE_NAME_COLLISIONS) {\n+        let explanation = if lint_id == LintId::of(crate::lint::builtin::UNSTABLE_NAME_COLLISIONS) {\n             \"once this method is added to the standard library, \\\n              the ambiguity may cause an error or change in behavior!\"\n                 .to_owned()"}, {"sha": "2799f9424d9190e6d11ba028bdd96070ae786b1e", "filename": "src/librustc/middle/borrowck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,6 +1,6 @@\n-use ich::StableHashingContext;\n-use hir::HirId;\n-use util::nodemap::FxHashSet;\n+use crate::ich::StableHashingContext;\n+use crate::hir::HirId;\n+use crate::util::nodemap::FxHashSet;\n \n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n                                            StableHasherResult};"}, {"sha": "6e9552a1e920916038a4c0f652eae7a70887f746", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -2,13 +2,13 @@\n //! are *mostly* used as a part of that interface, but these should\n //! probably get a better home if someone can find one.\n \n-use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-use hir::map as hir_map;\n-use hir::map::definitions::{DefKey, DefPathTable};\n+use crate::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use crate::hir::map as hir_map;\n+use crate::hir::map::definitions::{DefKey, DefPathTable};\n use rustc_data_structures::svh::Svh;\n-use ty::{self, TyCtxt};\n-use session::{Session, CrateDisambiguator};\n-use session::search_paths::PathKind;\n+use crate::ty::{self, TyCtxt};\n+use crate::session::{Session, CrateDisambiguator};\n+use crate::session::search_paths::PathKind;\n \n use std::any::Any;\n use std::path::{Path, PathBuf};"}, {"sha": "6dffe8efba612a0d14cc3355eda403f50d64abd0", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -2,18 +2,18 @@\n // closely. The idea is that all reachable symbols are live, codes called\n // from live codes are live, and everything else is dead.\n \n-use hir::Node;\n-use hir::{self, PatKind};\n-use hir::intravisit::{self, Visitor, NestedVisitorMap};\n-use hir::itemlikevisit::ItemLikeVisitor;\n-\n-use hir::def::Def;\n-use hir::CodegenFnAttrFlags;\n-use hir::def_id::{DefId, LOCAL_CRATE};\n-use lint;\n-use middle::privacy;\n-use ty::{self, TyCtxt};\n-use util::nodemap::FxHashSet;\n+use crate::hir::Node;\n+use crate::hir::{self, PatKind};\n+use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n+use crate::hir::itemlikevisit::ItemLikeVisitor;\n+\n+use crate::hir::def::Def;\n+use crate::hir::CodegenFnAttrFlags;\n+use crate::hir::def_id::{DefId, LOCAL_CRATE};\n+use crate::lint;\n+use crate::middle::privacy;\n+use crate::ty::{self, TyCtxt};\n+use crate::util::nodemap::FxHashSet;\n \n use rustc_data_structures::fx::FxHashMap;\n "}, {"sha": "a24d25cba118453d49758cd0376e26d1f59841c0", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -51,13 +51,13 @@\n //! Additionally, the algorithm is geared towards finding *any* solution rather\n //! than finding a number of solutions (there are normally quite a few).\n \n-use hir::def_id::CrateNum;\n+use crate::hir::def_id::CrateNum;\n \n-use session::config;\n-use ty::TyCtxt;\n-use middle::cstore::{self, DepKind};\n-use middle::cstore::LinkagePreference::{self, RequireStatic, RequireDynamic};\n-use util::nodemap::FxHashMap;\n+use crate::session::config;\n+use crate::ty::TyCtxt;\n+use crate::middle::cstore::{self, DepKind};\n+use crate::middle::cstore::LinkagePreference::{self, RequireStatic, RequireDynamic};\n+use crate::util::nodemap::FxHashMap;\n use rustc_target::spec::PanicStrategy;\n \n /// A list of dependencies for a certain crate type."}, {"sha": "2d0e6c3917bb84822fa6c060941dd968dfd85c31", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,15 +1,15 @@\n-use hir::map as hir_map;\n-use hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n-use session::{config, Session};\n-use session::config::EntryFnType;\n+use crate::hir::map as hir_map;\n+use crate::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n+use crate::session::{config, Session};\n+use crate::session::config::EntryFnType;\n use syntax::ast::NodeId;\n use syntax::attr;\n use syntax::entry::EntryPointType;\n use syntax_pos::Span;\n-use hir::{Item, ItemKind, ImplItem, TraitItem};\n-use hir::itemlikevisit::ItemLikeVisitor;\n-use ty::TyCtxt;\n-use ty::query::Providers;\n+use crate::hir::{Item, ItemKind, ImplItem, TraitItem};\n+use crate::hir::itemlikevisit::ItemLikeVisitor;\n+use crate::ty::TyCtxt;\n+use crate::ty::query::Providers;\n \n struct EntryContext<'a, 'tcx: 'a> {\n     session: &'a Session,"}, {"sha": "6c43068a227728428957817b188e2900b9c6f02c", "filename": "src/librustc/middle/exported_symbols.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,11 +1,11 @@\n-use hir::def_id::{DefId, LOCAL_CRATE};\n-use ich::StableHashingContext;\n+use crate::hir::def_id::{DefId, LOCAL_CRATE};\n+use crate::ich::StableHashingContext;\n use rustc_data_structures::stable_hasher::{StableHasher, HashStable,\n                                            StableHasherResult};\n use std::cmp;\n use std::mem;\n-use ty;\n-use ty::subst::Substs;\n+use crate::ty;\n+use crate::ty::subst::Substs;\n \n /// The SymbolExportLevel of a symbols specifies from which kinds of crates\n /// the symbol will be exported. `C` symbols will be exported from any"}, {"sha": "0939f07f43bb3bea6ef9f44e9aa86effd158a6aa", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -9,20 +9,20 @@ pub use self::MatchMode::*;\n use self::TrackMatchMode::*;\n use self::OverloadedCallType::*;\n \n-use hir::def::Def;\n-use hir::def_id::DefId;\n-use infer::InferCtxt;\n-use middle::mem_categorization as mc;\n-use middle::region;\n-use ty::{self, TyCtxt, adjustment};\n-\n-use hir::{self, PatKind};\n+use crate::hir::def::Def;\n+use crate::hir::def_id::DefId;\n+use crate::infer::InferCtxt;\n+use crate::middle::mem_categorization as mc;\n+use crate::middle::region;\n+use crate::ty::{self, TyCtxt, adjustment};\n+\n+use crate::hir::{self, PatKind};\n use rustc_data_structures::sync::Lrc;\n use std::rc::Rc;\n use syntax::ast;\n use syntax::ptr::P;\n use syntax_pos::Span;\n-use util::nodemap::ItemLocalSet;\n+use crate::util::nodemap::ItemLocalSet;\n \n ///////////////////////////////////////////////////////////////////////////\n // The Delegate trait"}, {"sha": "e752643e842aa530aa1b1a6c00fd1b081a1523b3", "filename": "src/librustc/middle/free_region.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffree_region.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -5,10 +5,10 @@\n //! `TransitiveRelation` type and use that to decide when one free\n //! region outlives another and so forth.\n \n-use infer::outlives::free_region_map::{FreeRegionMap, FreeRegionRelations};\n-use hir::def_id::DefId;\n-use middle::region;\n-use ty::{self, TyCtxt, Region};\n+use crate::infer::outlives::free_region_map::{FreeRegionMap, FreeRegionRelations};\n+use crate::hir::def_id::DefId;\n+use crate::middle::region;\n+use crate::ty::{self, TyCtxt, Region};\n \n /// Combines a `region::ScopeTree` (which governs relationships between\n /// scopes) and a `FreeRegionMap` (which governs relationships between"}, {"sha": "ee361e9776313048cc2295a387020035514b8fc6", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,14 +1,14 @@\n-use hir::def::Def;\n-use hir::def_id::DefId;\n-use ty::{self, Ty, TyCtxt};\n-use ty::layout::{LayoutError, Pointer, SizeSkeleton, VariantIdx};\n-use ty::query::Providers;\n+use crate::hir::def::Def;\n+use crate::hir::def_id::DefId;\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::layout::{LayoutError, Pointer, SizeSkeleton, VariantIdx};\n+use crate::ty::query::Providers;\n \n use rustc_target::spec::abi::Abi::RustIntrinsic;\n use rustc_data_structures::indexed_vec::Idx;\n use syntax_pos::Span;\n-use hir::intravisit::{self, Visitor, NestedVisitorMap};\n-use hir;\n+use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n+use crate::hir;\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     for &module in tcx.hir().krate().modules.keys() {"}, {"sha": "3f9230ab551d55b82ae9a5002cd6cc1bd8ae117a", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -11,17 +11,17 @@\n \n pub use self::LangItem::*;\n \n-use hir::def_id::DefId;\n-use hir::check_attr::Target;\n-use ty::{self, TyCtxt};\n-use middle::weak_lang_items;\n-use util::nodemap::FxHashMap;\n+use crate::hir::def_id::DefId;\n+use crate::hir::check_attr::Target;\n+use crate::ty::{self, TyCtxt};\n+use crate::middle::weak_lang_items;\n+use crate::util::nodemap::FxHashMap;\n \n use syntax::ast;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n-use hir::itemlikevisit::ItemLikeVisitor;\n-use hir;\n+use crate::hir::itemlikevisit::ItemLikeVisitor;\n+use crate::hir;\n \n // The actual lang items defined come at the end of this file in one handy table.\n // So you probably just want to nip down to the end."}, {"sha": "45095d9bc986b392df5cee9c11213b7cc99fccaf", "filename": "src/librustc/middle/lib_features.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flib_features.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -4,13 +4,13 @@\n // and `#[unstable (..)]`), but are not declared in one single location\n // (unlike lang features), which means we need to collect them instead.\n \n-use ty::TyCtxt;\n+use crate::ty::TyCtxt;\n use syntax::symbol::Symbol;\n use syntax::ast::{Attribute, MetaItem, MetaItemKind};\n use syntax_pos::Span;\n-use hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n-use errors::DiagnosticId;\n+use crate::errors::DiagnosticId;\n \n pub struct LibFeatures {\n     // A map from feature to stabilisation version."}, {"sha": "ce4a0f69c2864b5ce1b1bff37ae5e5f91aaff5ae", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -97,13 +97,13 @@ use self::LoopKind::*;\n use self::LiveNodeKind::*;\n use self::VarKind::*;\n \n-use hir::def::*;\n-use hir::Node;\n-use ty::{self, TyCtxt};\n-use ty::query::Providers;\n-use lint;\n-use errors::Applicability;\n-use util::nodemap::{NodeMap, HirIdMap, HirIdSet};\n+use crate::hir::def::*;\n+use crate::hir::Node;\n+use crate::ty::{self, TyCtxt};\n+use crate::ty::query::Providers;\n+use crate::lint;\n+use crate::errors::Applicability;\n+use crate::util::nodemap::{NodeMap, HirIdMap, HirIdSet};\n \n use std::collections::{BTreeMap, VecDeque};\n use std::{fmt, u32};\n@@ -115,10 +115,10 @@ use syntax::ptr::P;\n use syntax::symbol::keywords;\n use syntax_pos::Span;\n \n-use hir;\n-use hir::{Expr, HirId};\n-use hir::def_id::DefId;\n-use hir::intravisit::{self, Visitor, FnKind, NestedVisitorMap};\n+use crate::hir;\n+use crate::hir::{Expr, HirId};\n+use crate::hir::def_id::DefId;\n+use crate::hir::intravisit::{self, Visitor, FnKind, NestedVisitorMap};\n \n /// For use with `propagate_through_loop`.\n enum LoopKind<'a> {\n@@ -406,7 +406,7 @@ fn add_from_pat<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, pat: &P<hir::Pat>) {\n     let mut pats = VecDeque::new();\n     pats.push_back(pat);\n     while let Some(pat) = pats.pop_front() {\n-        use hir::PatKind::*;\n+        use crate::hir::PatKind::*;\n         match pat.node {\n             Binding(_, _, _, _, ref inner_pat) => {\n                 pats.extend(inner_pat.iter());"}, {"sha": "04e4a0b39a2cabbb915f75972b60105fd4325b5e", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -58,19 +58,19 @@ pub use self::Note::*;\n \n use self::Aliasability::*;\n \n-use middle::region;\n-use hir::def_id::{DefId, LocalDefId};\n-use hir::Node;\n-use infer::InferCtxt;\n-use hir::def::{Def, CtorKind};\n-use ty::adjustment;\n-use ty::{self, Ty, TyCtxt};\n-use ty::fold::TypeFoldable;\n-use ty::layout::VariantIdx;\n-\n-use hir::{MutImmutable, MutMutable, PatKind};\n-use hir::pat_util::EnumerateAndAdjustIterator;\n-use hir;\n+use crate::middle::region;\n+use crate::hir::def_id::{DefId, LocalDefId};\n+use crate::hir::Node;\n+use crate::infer::InferCtxt;\n+use crate::hir::def::{Def, CtorKind};\n+use crate::ty::adjustment;\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::fold::TypeFoldable;\n+use crate::ty::layout::VariantIdx;\n+\n+use crate::hir::{MutImmutable, MutMutable, PatKind};\n+use crate::hir::pat_util::EnumerateAndAdjustIterator;\n+use crate::hir;\n use syntax::ast::{self, Name};\n use syntax_pos::Span;\n \n@@ -80,7 +80,7 @@ use std::hash::{Hash, Hasher};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::indexed_vec::Idx;\n use std::rc::Rc;\n-use util::nodemap::ItemLocalSet;\n+use crate::util::nodemap::ItemLocalSet;\n \n #[derive(Clone, Debug, PartialEq)]\n pub enum Categorization<'tcx> {"}, {"sha": "1655d8356a5a7804755f3e4ea8181de00dbf5edd", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -2,7 +2,7 @@\n //! outside their scopes. This pass will also generate a set of exported items\n //! which are available for use externally when compiled as a library.\n \n-use util::nodemap::{DefIdSet, FxHashMap};\n+use crate::util::nodemap::{DefIdSet, FxHashMap};\n \n use std::hash::Hash;\n use std::fmt;"}, {"sha": "73ba47d4119158cf592cc87206eed6702829391f", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -5,24 +5,24 @@\n // makes all other generics or inline functions that it references\n // reachable as well.\n \n-use hir::{CodegenFnAttrs, CodegenFnAttrFlags};\n-use hir::Node;\n-use hir::def::Def;\n-use hir::def_id::{DefId, CrateNum};\n+use crate::hir::{CodegenFnAttrs, CodegenFnAttrFlags};\n+use crate::hir::Node;\n+use crate::hir::def::Def;\n+use crate::hir::def_id::{DefId, CrateNum};\n use rustc_data_structures::sync::Lrc;\n-use ty::{self, TyCtxt};\n-use ty::query::Providers;\n-use middle::privacy;\n-use session::config;\n-use util::nodemap::{NodeSet, FxHashSet};\n+use crate::ty::{self, TyCtxt};\n+use crate::ty::query::Providers;\n+use crate::middle::privacy;\n+use crate::session::config;\n+use crate::util::nodemap::{NodeSet, FxHashSet};\n \n use rustc_target::spec::abi::Abi;\n use syntax::ast;\n-use hir;\n-use hir::def_id::LOCAL_CRATE;\n-use hir::intravisit::{Visitor, NestedVisitorMap};\n-use hir::itemlikevisit::ItemLikeVisitor;\n-use hir::intravisit;\n+use crate::hir;\n+use crate::hir::def_id::LOCAL_CRATE;\n+use crate::hir::intravisit::{Visitor, NestedVisitorMap};\n+use crate::hir::itemlikevisit::ItemLikeVisitor;\n+use crate::hir::intravisit;\n \n // Returns true if the given item must be inlined because it may be\n // monomorphized or it was marked with `#[inline]`. This will only return"}, {"sha": "ea077220e0be37680a22a8957b0951a733ef94d7", "filename": "src/librustc/middle/recursion_limit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -5,7 +5,7 @@\n // this via an attribute on the crate like `#![recursion_limit=\"22\"]`. This pass\n // just peeks and looks for that attribute.\n \n-use session::Session;\n+use crate::session::Session;\n use syntax::ast;\n \n use rustc_data_structures::sync::Once;"}, {"sha": "788d2185d6da26b621fabf9ebc8c9d6dcd6f8d66", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -6,24 +6,24 @@\n //!\n //! [rustc guide]: https://rust-lang.github.io/rustc-guide/mir/borrowck.html\n \n-use ich::{StableHashingContext, NodeIdHashingMode};\n-use util::nodemap::{FxHashMap, FxHashSet};\n-use ty;\n+use crate::ich::{StableHashingContext, NodeIdHashingMode};\n+use crate::util::nodemap::{FxHashMap, FxHashSet};\n+use crate::ty;\n \n use std::mem;\n use std::fmt;\n use rustc_data_structures::sync::Lrc;\n use syntax::source_map;\n use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};\n-use ty::TyCtxt;\n-use ty::query::Providers;\n-\n-use hir;\n-use hir::Node;\n-use hir::def_id::DefId;\n-use hir::intravisit::{self, Visitor, NestedVisitorMap};\n-use hir::{Block, Arm, Pat, PatKind, Stmt, Expr, Local};\n+use crate::ty::TyCtxt;\n+use crate::ty::query::Providers;\n+\n+use crate::hir;\n+use crate::hir::Node;\n+use crate::hir::def_id::DefId;\n+use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n+use crate::hir::{Block, Arm, Pat, PatKind, Stmt, Expr, Local};\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n                                            StableHasherResult};\n@@ -154,7 +154,7 @@ newtype_index! {\n     pub struct FirstStatementIndex { .. }\n }\n \n-impl_stable_hash_for!(struct ::middle::region::FirstStatementIndex { private });\n+impl_stable_hash_for!(struct crate::middle::region::FirstStatementIndex { private });\n \n // compilation error if size of `ScopeData` is not the same as a `u32`\n static_assert!(ASSERT_SCOPE_DATA: mem::size_of::<ScopeData>() == 4);"}, {"sha": "f7cd241236498e8cb66b11385d58050074509a58", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -5,16 +5,16 @@\n //! used between functions, and they operate in a purely top-down\n //! way. Therefore we break lifetime name resolution into a separate pass.\n \n-use hir::def::Def;\n-use hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n-use hir::map::Map;\n-use hir::{GenericArg, GenericParam, ItemLocalId, LifetimeName, Node, ParamName};\n-use ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n-\n-use errors::{Applicability, DiagnosticBuilder};\n-use rustc::lint;\n+use crate::hir::def::Def;\n+use crate::hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n+use crate::hir::map::Map;\n+use crate::hir::{GenericArg, GenericParam, ItemLocalId, LifetimeName, Node, ParamName};\n+use crate::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n+\n+use crate::errors::{Applicability, DiagnosticBuilder};\n+use crate::rustc::lint;\n use rustc_data_structures::sync::Lrc;\n-use session::Session;\n+use crate::session::Session;\n use std::borrow::Cow;\n use std::cell::Cell;\n use std::mem::replace;\n@@ -23,10 +23,10 @@ use syntax::attr;\n use syntax::ptr::P;\n use syntax::symbol::keywords;\n use syntax_pos::Span;\n-use util::nodemap::{DefIdMap, FxHashMap, FxHashSet, NodeMap, NodeSet};\n+use crate::util::nodemap::{DefIdMap, FxHashMap, FxHashSet, NodeMap, NodeSet};\n \n-use hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use hir::{self, GenericParamKind, LifetimeParamKind};\n+use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use crate::hir::{self, GenericParamKind, LifetimeParamKind};\n \n /// The origin of a named lifetime definition.\n ///\n@@ -216,7 +216,7 @@ pub struct ResolveLifetimes {\n         FxHashMap<LocalDefId, Lrc<FxHashMap<ItemLocalId, Lrc<Vec<ObjectLifetimeDefault>>>>>,\n }\n \n-impl_stable_hash_for!(struct ::middle::resolve_lifetime::ResolveLifetimes {\n+impl_stable_hash_for!(struct crate::middle::resolve_lifetime::ResolveLifetimes {\n     defs,\n     late_bound,\n     object_lifetime_defaults"}, {"sha": "34c77d08f5a7e1166daa967b17fdddba437d2008", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -3,23 +3,23 @@\n \n pub use self::StabilityLevel::*;\n \n-use lint::{self, Lint};\n-use hir::{self, Item, Generics, StructField, Variant, HirId};\n-use hir::def::Def;\n-use hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n-use hir::intravisit::{self, Visitor, NestedVisitorMap};\n-use ty::query::Providers;\n-use middle::privacy::AccessLevels;\n-use session::{DiagnosticMessageId, Session};\n+use crate::lint::{self, Lint};\n+use crate::hir::{self, Item, Generics, StructField, Variant, HirId};\n+use crate::hir::def::Def;\n+use crate::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n+use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n+use crate::ty::query::Providers;\n+use crate::middle::privacy::AccessLevels;\n+use crate::session::{DiagnosticMessageId, Session};\n use syntax::symbol::Symbol;\n use syntax_pos::{Span, MultiSpan};\n use syntax::ast;\n use syntax::ast::{NodeId, Attribute};\n use syntax::errors::Applicability;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::attr::{self, Stability, Deprecation};\n-use ty::{self, TyCtxt};\n-use util::nodemap::{FxHashSet, FxHashMap};\n+use crate::ty::{self, TyCtxt};\n+use crate::util::nodemap::{FxHashSet, FxHashMap};\n \n use std::mem::replace;\n use std::cmp::Ordering;"}, {"sha": "119e855c58551cf616dda2e2eeeef0faeeb69052", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,18 +1,18 @@\n //! Validity checking for weak lang items\n \n-use session::config;\n-use middle::lang_items;\n+use crate::session::config;\n+use crate::middle::lang_items;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_target::spec::PanicStrategy;\n use syntax::ast;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n-use hir::def_id::DefId;\n-use hir::intravisit::{Visitor, NestedVisitorMap};\n-use hir::intravisit;\n-use hir;\n-use ty::TyCtxt;\n+use crate::hir::def_id::DefId;\n+use crate::hir::intravisit::{Visitor, NestedVisitorMap};\n+use crate::hir::intravisit;\n+use crate::hir;\n+use crate::ty::TyCtxt;\n \n macro_rules! weak_lang_items {\n     ($($name:ident, $item:ident, $sym:ident;)*) => ("}, {"sha": "1cc927b1f720f3a549493b8d7b906f55fb97c349", "filename": "src/librustc/mir/cache.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmir%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmir%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fcache.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -2,10 +2,10 @@ use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::sync::{RwLock, MappedReadGuard, ReadGuard};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n                                            StableHasherResult};\n-use ich::StableHashingContext;\n-use mir::{Mir, BasicBlock};\n+use crate::ich::StableHashingContext;\n+use crate::mir::{Mir, BasicBlock};\n \n-use rustc_serialize as serialize;\n+use crate::rustc_serialize as serialize;\n \n #[derive(Clone, Debug)]\n pub struct Cache {"}, {"sha": "7761e1fdafac55ce711afa6a47dd68ddb832dd2e", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -5,10 +5,10 @@ use super::{\n     truncate,\n };\n \n-use ty::layout::{Size, Align};\n+use crate::ty::layout::{Size, Align};\n use syntax::ast::Mutability;\n use std::iter;\n-use mir;\n+use crate::mir;\n use std::ops::{Deref, DerefMut};\n use rustc_data_structures::sorted_map::SortedMap;\n use rustc_target::abi::HasDataLayout;"}, {"sha": "870a51f95df1c7103bb5f1847f9e9a80d0a57312", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,17 +1,17 @@\n use std::{fmt, env};\n \n-use hir::map::definitions::DefPathData;\n-use mir;\n-use ty::{self, Ty, layout};\n-use ty::layout::{Size, Align, LayoutError};\n+use crate::hir::map::definitions::DefPathData;\n+use crate::mir;\n+use crate::ty::{self, Ty, layout};\n+use crate::ty::layout::{Size, Align, LayoutError};\n use rustc_target::spec::abi::Abi;\n \n use super::{RawConst, Pointer, InboundsCheck, ScalarMaybeUndef};\n \n use backtrace::Backtrace;\n \n-use ty::query::TyCtxtAt;\n-use errors::DiagnosticBuilder;\n+use crate::ty::query::TyCtxtAt;\n+use crate::errors::DiagnosticBuilder;\n \n use syntax_pos::{Pos, Span};\n use syntax::ast;\n@@ -42,7 +42,7 @@ pub type ConstEvalResult<'tcx> = Result<ty::Const<'tcx>, ErrorHandled>;\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct ConstEvalErr<'tcx> {\n     pub span: Span,\n-    pub error: ::mir::interpret::EvalErrorKind<'tcx, u64>,\n+    pub error: crate::mir::interpret::EvalErrorKind<'tcx, u64>,\n     pub stacktrace: Vec<FrameInfo<'tcx>>,\n }\n \n@@ -136,7 +136,7 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n                 .next()\n                 .unwrap_or(lint_root);\n             tcx.struct_span_lint_node(\n-                ::rustc::lint::builtin::CONST_ERR,\n+                crate::rustc::lint::builtin::CONST_ERR,\n                 node_id,\n                 tcx.span,\n                 message,"}, {"sha": "efd233f1f3854ea05ffbe35368e43bb4c6cf310e", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -25,17 +25,17 @@ pub use self::allocation::{\n pub use self::pointer::{Pointer, PointerArithmetic};\n \n use std::fmt;\n-use mir;\n-use hir::def_id::DefId;\n-use ty::{self, TyCtxt, Instance};\n-use ty::layout::{self, Size};\n+use crate::mir;\n+use crate::hir::def_id::DefId;\n+use crate::ty::{self, TyCtxt, Instance};\n+use crate::ty::layout::{self, Size};\n use std::io;\n-use rustc_serialize::{Encoder, Decodable, Encodable};\n+use crate::rustc_serialize::{Encoder, Decodable, Encodable};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{Lock as Mutex, HashMapExt};\n use rustc_data_structures::tiny_list::TinyList;\n use byteorder::{WriteBytesExt, ReadBytesExt, LittleEndian, BigEndian};\n-use ty::codec::TyDecoder;\n+use crate::ty::codec::TyDecoder;\n use std::sync::atomic::{AtomicU32, Ordering};\n use std::num::NonZeroU32;\n \n@@ -53,8 +53,8 @@ pub struct GlobalId<'tcx> {\n #[derive(Copy, Clone, Eq, Hash, Ord, PartialEq, PartialOrd, Debug)]\n pub struct AllocId(pub u64);\n \n-impl ::rustc_serialize::UseSpecializedEncodable for AllocId {}\n-impl ::rustc_serialize::UseSpecializedDecodable for AllocId {}\n+impl crate::rustc_serialize::UseSpecializedEncodable for AllocId {}\n+impl crate::rustc_serialize::UseSpecializedDecodable for AllocId {}\n \n #[derive(RustcDecodable, RustcEncodable)]\n enum AllocDiscriminant {"}, {"sha": "551e7b2fd41ecd61053779c4eb12478a2f07b915", "filename": "src/librustc/mir/interpret/pointer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,5 +1,5 @@\n-use mir;\n-use ty::layout::{self, HasDataLayout, Size};\n+use crate::mir;\n+use crate::ty::layout::{self, HasDataLayout, Size};\n \n use super::{\n     AllocId, EvalResult, InboundsCheck,"}, {"sha": "73917342814de59dba17b5a803d4ee1ae07c6289", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -515,7 +515,7 @@ impl<'tcx, Tag> ScalarMaybeUndef<Tag> {\n     }\n }\n \n-impl_stable_hash_for!(enum ::mir::interpret::ScalarMaybeUndef {\n+impl_stable_hash_for!(enum crate::mir::interpret::ScalarMaybeUndef {\n     Scalar(v),\n     Undef\n });"}, {"sha": "009997bfcf2c48d038518fe8e99144a26e765aa4", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -2,11 +2,11 @@\n //!\n //! [rustc guide]: https://rust-lang.github.io/rustc-guide/mir/index.html\n \n-use hir::def::CtorKind;\n-use hir::def_id::DefId;\n-use hir::{self, HirId, InlineAsm};\n-use mir::interpret::{ConstValue, EvalErrorKind, Scalar};\n-use mir::visit::MirVisitable;\n+use crate::hir::def::CtorKind;\n+use crate::hir::def_id::DefId;\n+use crate::hir::{self, HirId, InlineAsm};\n+use crate::mir::interpret::{ConstValue, EvalErrorKind, Scalar};\n+use crate::mir::visit::MirVisitable;\n use rustc_apfloat::ieee::{Double, Single};\n use rustc_apfloat::Float;\n use rustc_data_structures::fx::FxHashSet;\n@@ -15,7 +15,7 @@ use rustc_data_structures::graph::{self, GraphPredecessors, GraphSuccessors};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::sync::MappedReadGuard;\n-use rustc_serialize::{self as serialize};\n+use crate::rustc_serialize::{self as serialize};\n use smallvec::SmallVec;\n use std::borrow::Cow;\n use std::fmt::{self, Debug, Formatter, Write};\n@@ -26,16 +26,16 @@ use std::{iter, mem, option, u32};\n use syntax::ast::{self, Name};\n use syntax::symbol::InternedString;\n use syntax_pos::{Span, DUMMY_SP};\n-use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n-use ty::subst::{Subst, Substs};\n-use ty::layout::VariantIdx;\n-use ty::{\n+use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n+use crate::ty::subst::{Subst, Substs};\n+use crate::ty::layout::VariantIdx;\n+use crate::ty::{\n     self, AdtDef, CanonicalUserTypeAnnotations, ClosureSubsts, GeneratorSubsts, Region, Ty, TyCtxt,\n     UserTypeAnnotationIndex,\n };\n-use util::ppaux;\n+use crate::util::ppaux;\n \n-pub use mir::interpret::AssertMessage;\n+pub use crate::mir::interpret::AssertMessage;\n \n mod cache;\n pub mod interpret;\n@@ -676,7 +676,7 @@ impl_stable_hash_for!(enum self::MirPhase {\n });\n \n mod binding_form_impl {\n-    use ich::StableHashingContext;\n+    use crate::ich::StableHashingContext;\n     use rustc_data_structures::stable_hasher::{HashStable, StableHasher, StableHasherResult};\n \n     impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for super::BindingForm<'tcx> {\n@@ -2625,7 +2625,7 @@ CloneTypeFoldableAndLiftImpls! { ProjectionKind<'tcx>, }\n \n impl<'tcx> TypeFoldable<'tcx> for UserTypeProjection<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        use mir::ProjectionElem::*;\n+        use crate::mir::ProjectionElem::*;\n \n         let base = self.base.fold_with(folder);\n         let projs: Vec<_> = self.projs\n@@ -2671,7 +2671,7 @@ pub fn fmt_lazy_const_val(f: &mut impl Write, const_val: &ty::LazyConst<'_>) ->\n \n /// Write a `ConstValue` in a way closer to the original source code than the `Debug` output.\n pub fn fmt_const_val(f: &mut impl Write, const_val: ty::Const<'_>) -> fmt::Result {\n-    use ty::TyKind::*;\n+    use crate::ty::TyKind::*;\n     let value = const_val.val;\n     let ty = const_val.ty;\n     // print some primitives\n@@ -3116,7 +3116,7 @@ EnumTypeFoldableImpl! {\n \n impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        use mir::TerminatorKind::*;\n+        use crate::mir::TerminatorKind::*;\n \n         let kind = match self.kind {\n             Goto { target } => Goto { target },\n@@ -3229,7 +3229,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        use mir::TerminatorKind::*;\n+        use crate::mir::TerminatorKind::*;\n \n         match self.kind {\n             SwitchInt {\n@@ -3301,7 +3301,7 @@ impl<'tcx> TypeFoldable<'tcx> for Place<'tcx> {\n \n impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        use mir::Rvalue::*;\n+        use crate::mir::Rvalue::*;\n         match *self {\n             Use(ref op) => Use(op.fold_with(folder)),\n             Repeat(ref op, len) => Repeat(op.fold_with(folder), len),\n@@ -3343,7 +3343,7 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        use mir::Rvalue::*;\n+        use crate::mir::Rvalue::*;\n         match *self {\n             Use(ref op) => op.visit_with(visitor),\n             Repeat(ref op, _) => op.visit_with(visitor),\n@@ -3395,7 +3395,7 @@ where\n     T: TypeFoldable<'tcx>,\n {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        use mir::ProjectionElem::*;\n+        use crate::mir::ProjectionElem::*;\n \n         let base = self.base.fold_with(folder);\n         let elem = match self.elem {\n@@ -3409,7 +3409,7 @@ where\n     }\n \n     fn super_visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> bool {\n-        use mir::ProjectionElem::*;\n+        use crate::mir::ProjectionElem::*;\n \n         self.base.visit_with(visitor) || match self.elem {\n             Field(_, ref ty) => ty.visit_with(visitor),"}, {"sha": "affa9f9fdd4d7181524225ad5b4cbe6b66383ff5", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,12 +1,12 @@\n-use hir::def_id::{DefId, CrateNum, LOCAL_CRATE};\n+use crate::hir::def_id::{DefId, CrateNum, LOCAL_CRATE};\n use syntax::ast::NodeId;\n use syntax::symbol::{Symbol, InternedString};\n-use ty::{Instance, TyCtxt};\n-use util::nodemap::FxHashMap;\n+use crate::ty::{Instance, TyCtxt};\n+use crate::util::nodemap::FxHashMap;\n use rustc_data_structures::base_n;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasherResult,\n                                            StableHasher};\n-use ich::{Fingerprint, StableHashingContext, NodeIdHashingMode};\n+use crate::ich::{Fingerprint, StableHashingContext, NodeIdHashingMode};\n use std::fmt;\n use std::hash::Hash;\n "}, {"sha": "ac3a97898b405816ec004bb87c4b8a572c6617b3", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -3,12 +3,12 @@\n  * building is complete.\n  */\n \n-use mir::*;\n-use ty::subst::{Subst, Substs};\n-use ty::{self, AdtDef, Ty, TyCtxt};\n-use ty::layout::VariantIdx;\n-use hir;\n-use ty::util::IntTypeExt;\n+use crate::mir::*;\n+use crate::ty::subst::{Subst, Substs};\n+use crate::ty::{self, AdtDef, Ty, TyCtxt};\n+use crate::ty::layout::VariantIdx;\n+use crate::hir;\n+use crate::ty::util::IntTypeExt;\n \n #[derive(Copy, Clone, Debug)]\n pub enum PlaceTy<'tcx> {"}, {"sha": "0180256661630d4cd7d6b3b1d90361ac083f2469", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,7 +1,7 @@\n-use hir::def_id::DefId;\n-use ty::subst::Substs;\n-use ty::{CanonicalUserTypeAnnotation, ClosureSubsts, GeneratorSubsts, Region, Ty};\n-use mir::*;\n+use crate::hir::def_id::DefId;\n+use crate::ty::subst::Substs;\n+use crate::ty::{CanonicalUserTypeAnnotation, ClosureSubsts, GeneratorSubsts, Region, Ty};\n+use crate::mir::*;\n use syntax_pos::Span;\n \n // # The MIR Visitor\n@@ -567,7 +567,7 @@ macro_rules! make_mir_visitor {\n             fn super_assert_message(&mut self,\n                                     msg: & $($mutability)* AssertMessage<'tcx>,\n                                     location: Location) {\n-                use mir::interpret::EvalErrorKind::*;\n+                use crate::mir::interpret::EvalErrorKind::*;\n                 if let BoundsCheck {\n                         ref $($mutability)* len,\n                         ref $($mutability)* index"}, {"sha": "1a92f2c0f7aa1604620ebcde75132338f3d5f8d0", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -3,13 +3,13 @@\n \n use std::str::FromStr;\n \n-use session::{early_error, early_warn, Session};\n-use session::search_paths::SearchPath;\n+use crate::session::{early_error, early_warn, Session};\n+use crate::session::search_paths::SearchPath;\n \n use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelroLevel};\n use rustc_target::spec::{Target, TargetTriple};\n-use lint;\n-use middle::cstore;\n+use crate::lint;\n+use crate::middle::cstore;\n \n use syntax::ast::{self, IntTy, UintTy, MetaItemKind};\n use syntax::source_map::{FileName, FilePathMapping};\n@@ -19,7 +19,7 @@ use syntax::parse;\n use syntax::symbol::Symbol;\n use syntax::feature_gate::UnstableFeatures;\n \n-use errors::{ColorConfig, FatalError, Handler};\n+use crate::errors::{ColorConfig, FatalError, Handler};\n \n use getopts;\n use std::collections::{BTreeMap, BTreeSet};\n@@ -2344,7 +2344,7 @@ pub mod nightly_options {\n     use getopts;\n     use syntax::feature_gate::UnstableFeatures;\n     use super::{ErrorOutputType, OptionStability, RustcOptGroup};\n-    use session::early_error;\n+    use crate::session::early_error;\n \n     pub fn is_unstable_enabled(matches: &getopts::Matches) -> bool {\n         is_nightly_build()\n@@ -2433,8 +2433,8 @@ impl fmt::Display for CrateType {\n /// we have an opt-in scheme here, so one is hopefully forced to think about\n /// how the hash should be calculated when adding a new command-line argument.\n mod dep_tracking {\n-    use lint;\n-    use middle::cstore;\n+    use crate::lint;\n+    use crate::middle::cstore;\n     use std::collections::BTreeMap;\n     use std::hash::Hash;\n     use std::path::PathBuf;\n@@ -2567,14 +2567,14 @@ mod dep_tracking {\n \n #[cfg(test)]\n mod tests {\n-    use errors;\n+    use crate::errors;\n     use getopts;\n-    use lint;\n-    use middle::cstore;\n-    use session::config::{build_configuration, build_session_options_and_crate_config};\n-    use session::config::{LtoCli, CrossLangLto};\n-    use session::build_session;\n-    use session::search_paths::SearchPath;\n+    use crate::lint;\n+    use crate::middle::cstore;\n+    use crate::session::config::{build_configuration, build_session_options_and_crate_config};\n+    use crate::session::config::{LtoCli, CrossLangLto};\n+    use crate::session::build_session;\n+    use crate::session::search_paths::SearchPath;\n     use std::collections::{BTreeMap, BTreeSet};\n     use std::iter::FromIterator;\n     use std::path::PathBuf;"}, {"sha": "77f190e281229bb314cc46a14151dc410f900102", "filename": "src/librustc/session/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Ffilesearch.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -7,7 +7,7 @@ use std::env;\n use std::fs;\n use std::path::{Path, PathBuf};\n \n-use session::search_paths::{SearchPath, PathKind};\n+use crate::session::search_paths::{SearchPath, PathKind};\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n \n #[derive(Copy, Clone)]"}, {"sha": "d2beb64b3886146001c860b42cc91671d611358b", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,36 +1,36 @@\n pub use self::code_stats::{DataTypeKind, SizeKind, FieldInfo, VariantInfo};\n use self::code_stats::CodeStats;\n \n-use dep_graph::cgu_reuse_tracker::CguReuseTracker;\n-use hir::def_id::CrateNum;\n+use crate::dep_graph::cgu_reuse_tracker::CguReuseTracker;\n+use crate::hir::def_id::CrateNum;\n use rustc_data_structures::fingerprint::Fingerprint;\n \n-use lint;\n-use lint::builtin::BuiltinLintDiagnostics;\n-use middle::allocator::AllocatorKind;\n-use middle::dependency_format;\n-use session::config::{OutputType, Lto};\n-use session::search_paths::{PathKind, SearchPath};\n-use util::nodemap::{FxHashMap, FxHashSet};\n-use util::common::{duration_to_secs_str, ErrorReported};\n-use util::common::ProfileQueriesMsg;\n+use crate::lint;\n+use crate::lint::builtin::BuiltinLintDiagnostics;\n+use crate::middle::allocator::AllocatorKind;\n+use crate::middle::dependency_format;\n+use crate::session::config::{OutputType, Lto};\n+use crate::session::search_paths::{PathKind, SearchPath};\n+use crate::util::nodemap::{FxHashMap, FxHashSet};\n+use crate::util::common::{duration_to_secs_str, ErrorReported};\n+use crate::util::common::ProfileQueriesMsg;\n \n use rustc_data_structures::base_n;\n use rustc_data_structures::sync::{\n     self, Lrc, Lock, OneThread, Once, RwLock, AtomicU64, AtomicUsize, Ordering,\n     Ordering::SeqCst,\n };\n \n-use errors::{self, DiagnosticBuilder, DiagnosticId, Applicability};\n-use errors::emitter::{Emitter, EmitterWriter};\n+use crate::errors::{self, DiagnosticBuilder, DiagnosticId, Applicability};\n+use crate::errors::emitter::{Emitter, EmitterWriter};\n use syntax::ast::{self, NodeId};\n use syntax::edition::Edition;\n use syntax::feature_gate::{self, AttributeType};\n use syntax::json::JsonEmitter;\n use syntax::source_map;\n use syntax::parse::{self, ParseSess};\n use syntax_pos::{MultiSpan, Span};\n-use util::profiling::SelfProfiler;\n+use crate::util::profiling::SelfProfiler;\n \n use rustc_target::spec::{PanicStrategy, RelroLevel, Target, TargetTriple};\n use rustc_data_structures::flock;"}, {"sha": "a950258cefd0cb90d82b684bac801d776eec9931", "filename": "src/librustc/session/search_paths.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fsearch_paths.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,6 +1,6 @@\n use std::path::{Path, PathBuf};\n-use session::{early_error, config};\n-use session::filesearch::make_target_lib_path;\n+use crate::session::{early_error, config};\n+use crate::session::filesearch::make_target_lib_path;\n \n #[derive(Clone, Debug)]\n pub struct SearchPath {"}, {"sha": "d1db49e05f1905d1d24001e7fdb2ac6511bd6c1a", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -6,12 +6,12 @@ use super::*;\n use std::collections::hash_map::Entry;\n use std::collections::VecDeque;\n \n-use infer::region_constraints::{Constraint, RegionConstraintData};\n-use infer::InferCtxt;\n+use crate::infer::region_constraints::{Constraint, RegionConstraintData};\n+use crate::infer::InferCtxt;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n \n-use ty::fold::TypeFolder;\n-use ty::{Region, RegionVid};\n+use crate::ty::fold::TypeFolder;\n+use crate::ty::{Region, RegionVid};\n \n // FIXME(twk): this is obviously not nice to duplicate like that\n #[derive(Eq, PartialEq, Hash, Copy, Clone, Debug)]"}, {"sha": "d9eb6d8157dfbdd3590af1e35eecd1fe10eb9510", "filename": "src/librustc/traits/chalk_fulfill.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fchalk_fulfill.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,4 +1,4 @@\n-use traits::{\n+use crate::traits::{\n     Environment,\n     InEnvironment,\n     TraitEngine,\n@@ -8,10 +8,10 @@ use traits::{\n     FulfillmentErrorCode,\n     SelectionError,\n };\n-use traits::query::NoSolution;\n-use infer::InferCtxt;\n-use infer::canonical::{Canonical, OriginalQueryValues};\n-use ty::{self, Ty};\n+use crate::traits::query::NoSolution;\n+use crate::infer::InferCtxt;\n+use crate::infer::canonical::{Canonical, OriginalQueryValues};\n+use crate::ty::{self, Ty};\n use rustc_data_structures::fx::FxHashSet;\n \n pub type CanonicalGoal<'tcx> = Canonical<'tcx, InEnvironment<'tcx, ty::Predicate<'tcx>>>;"}, {"sha": "eed9345afae169ea3c9c5c45a41b117c8fe25fea", "filename": "src/librustc/traits/codegen/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fcodegen%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fcodegen%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcodegen%2Fmod.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -3,16 +3,16 @@\n // seems likely that they should eventually be merged into more\n // general routines.\n \n-use dep_graph::{DepKind, DepTrackingMapConfig};\n+use crate::dep_graph::{DepKind, DepTrackingMapConfig};\n use std::marker::PhantomData;\n use syntax_pos::DUMMY_SP;\n-use infer::InferCtxt;\n+use crate::infer::InferCtxt;\n use syntax_pos::Span;\n-use traits::{FulfillmentContext, Obligation, ObligationCause, SelectionContext,\n+use crate::traits::{FulfillmentContext, Obligation, ObligationCause, SelectionContext,\n              TraitEngine, Vtable};\n-use ty::{self, Ty, TyCtxt};\n-use ty::subst::{Subst, Substs};\n-use ty::fold::TypeFoldable;\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::subst::{Subst, Substs};\n+use crate::ty::fold::TypeFoldable;\n \n /// Attempts to resolve an obligation to a vtable.. The result is\n /// a shallow vtable resolution -- meaning that we do not"}, {"sha": "4fe7a1507f737081bee3c721ed3d3accc62f4c27", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -4,17 +4,17 @@\n //! [trait-resolution]: https://rust-lang.github.io/rustc-guide/traits/resolution.html\n //! [trait-specialization]: https://rust-lang.github.io/rustc-guide/traits/specialization.html\n \n-use infer::CombinedSnapshot;\n-use hir::def_id::{DefId, LOCAL_CRATE};\n+use crate::infer::CombinedSnapshot;\n+use crate::hir::def_id::{DefId, LOCAL_CRATE};\n use syntax_pos::DUMMY_SP;\n-use traits::{self, Normalized, SelectionContext, Obligation, ObligationCause};\n-use traits::IntercrateMode;\n-use traits::select::IntercrateAmbiguityCause;\n-use ty::{self, Ty, TyCtxt};\n-use ty::fold::TypeFoldable;\n-use ty::subst::Subst;\n+use crate::traits::{self, Normalized, SelectionContext, Obligation, ObligationCause};\n+use crate::traits::IntercrateMode;\n+use crate::traits::select::IntercrateAmbiguityCause;\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::fold::TypeFoldable;\n+use crate::ty::subst::Subst;\n \n-use infer::{InferOk};\n+use crate::infer::{InferOk};\n \n /// Whether we do the orphan check relative to this crate or\n /// to some remote crate.\n@@ -39,7 +39,7 @@ pub struct OverlapResult<'tcx> {\n     pub involves_placeholder: bool,\n }\n \n-pub fn add_placeholder_note(err: &mut ::errors::DiagnosticBuilder<'_>) {\n+pub fn add_placeholder_note(err: &mut crate::errors::DiagnosticBuilder<'_>) {\n     err.note(&format!(\n         \"this behavior recently changed as a result of a bug fix; \\\n          see rust-lang/rust#56105 for details\""}, {"sha": "2f019d823ff5d2a7a5f3b6d02684d58ad502bd9b", "filename": "src/librustc/traits/engine.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fengine.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,7 +1,7 @@\n-use infer::InferCtxt;\n-use ty::{self, Ty, TyCtxt, ToPredicate};\n-use traits::Obligation;\n-use hir::def_id::DefId;\n+use crate::infer::InferCtxt;\n+use crate::ty::{self, Ty, TyCtxt, ToPredicate};\n+use crate::traits::Obligation;\n+use crate::hir::def_id::DefId;\n \n use super::{ChalkFulfillmentContext, FulfillmentContext, FulfillmentError};\n use super::{ObligationCause, PredicateObligation};"}, {"sha": "79afc593a4676126f2fa78f204f7b62786b29c2c", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -17,23 +17,23 @@ use super::{\n     Overflow,\n };\n \n-use errors::{Applicability, DiagnosticBuilder};\n-use hir;\n-use hir::Node;\n-use hir::def_id::DefId;\n-use infer::{self, InferCtxt};\n-use infer::type_variable::TypeVariableOrigin;\n+use crate::errors::{Applicability, DiagnosticBuilder};\n+use crate::hir;\n+use crate::hir::Node;\n+use crate::hir::def_id::DefId;\n+use crate::infer::{self, InferCtxt};\n+use crate::infer::type_variable::TypeVariableOrigin;\n use std::fmt;\n use syntax::ast;\n-use session::DiagnosticMessageId;\n-use ty::{self, AdtKind, ToPredicate, ToPolyTraitRef, Ty, TyCtxt, TypeFoldable};\n-use ty::GenericParamDefKind;\n-use ty::error::ExpectedFound;\n-use ty::fast_reject;\n-use ty::fold::TypeFolder;\n-use ty::subst::Subst;\n-use ty::SubtypePredicate;\n-use util::nodemap::{FxHashMap, FxHashSet};\n+use crate::session::DiagnosticMessageId;\n+use crate::ty::{self, AdtKind, ToPredicate, ToPolyTraitRef, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::GenericParamDefKind;\n+use crate::ty::error::ExpectedFound;\n+use crate::ty::fast_reject;\n+use crate::ty::fold::TypeFolder;\n+use crate::ty::subst::Subst;\n+use crate::ty::SubtypePredicate;\n+use crate::util::nodemap::{FxHashMap, FxHashSet};\n \n use syntax_pos::{DUMMY_SP, Span, ExpnInfo, ExpnFormat};\n "}, {"sha": "98784bccb6f820ed6606f3fb08268c99933c70f7", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,7 +1,7 @@\n-use infer::InferCtxt;\n-use mir::interpret::{GlobalId, ErrorHandled};\n-use ty::{self, Ty, TypeFoldable, ToPolyTraitRef};\n-use ty::error::ExpectedFound;\n+use crate::infer::InferCtxt;\n+use crate::mir::interpret::{GlobalId, ErrorHandled};\n+use crate::ty::{self, Ty, TypeFoldable, ToPolyTraitRef};\n+use crate::ty::error::ExpectedFound;\n use rustc_data_structures::obligation_forest::{DoCompleted, Error, ForestObligation};\n use rustc_data_structures::obligation_forest::{ObligationForest, ObligationProcessor};\n use rustc_data_structures::obligation_forest::{ProcessResult};"}, {"sha": "d1be8d377a84de747c7d66cef752a0be5f47a3ba", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -20,20 +20,20 @@ mod util;\n pub mod query;\n \n use chalk_engine;\n-use hir;\n-use hir::def_id::DefId;\n-use infer::{InferCtxt, SuppressRegionErrors};\n-use infer::outlives::env::OutlivesEnvironment;\n-use middle::region;\n-use mir::interpret::ErrorHandled;\n+use crate::hir;\n+use crate::hir::def_id::DefId;\n+use crate::infer::{InferCtxt, SuppressRegionErrors};\n+use crate::infer::outlives::env::OutlivesEnvironment;\n+use crate::middle::region;\n+use crate::mir::interpret::ErrorHandled;\n use rustc_data_structures::sync::Lrc;\n use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};\n-use ty::subst::Substs;\n-use ty::{self, AdtKind, List, Ty, TyCtxt, GenericParamDefKind, ToPredicate};\n-use ty::error::{ExpectedFound, TypeError};\n-use ty::fold::{TypeFolder, TypeFoldable, TypeVisitor};\n-use util::common::ErrorReported;\n+use crate::ty::subst::Substs;\n+use crate::ty::{self, AdtKind, List, Ty, TyCtxt, GenericParamDefKind, ToPredicate};\n+use crate::ty::error::{ExpectedFound, TypeError};\n+use crate::ty::fold::{TypeFolder, TypeFoldable, TypeVisitor};\n+use crate::util::common::ErrorReported;\n \n use std::fmt::Debug;\n use std::rc::Rc;"}, {"sha": "75eaa67e767c2d9bafcbec5e44ca85c67dda3a77", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -10,11 +10,11 @@\n \n use super::elaborate_predicates;\n \n-use hir::def_id::DefId;\n-use lint;\n-use traits::{self, Obligation, ObligationCause};\n-use ty::{self, Ty, TyCtxt, TypeFoldable, Predicate, ToPredicate};\n-use ty::subst::{Subst, Substs};\n+use crate::hir::def_id::DefId;\n+use crate::lint;\n+use crate::traits::{self, Obligation, ObligationCause};\n+use crate::ty::{self, Ty, TyCtxt, TypeFoldable, Predicate, ToPredicate};\n+use crate::ty::subst::{Subst, Substs};\n use std::borrow::Cow;\n use std::iter::{self};\n use syntax::ast::{self, Name};\n@@ -341,7 +341,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n             } else {\n                 // sanity check to make sure the receiver actually has the layout of a pointer\n \n-                use ty::layout::Abi;\n+                use crate::ty::layout::Abi;\n \n                 let param_env = self.param_env(method.def_id);\n "}, {"sha": "f61c32614cc931847700973c160074ef25b08314", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,9 +1,9 @@\n use fmt_macros::{Parser, Piece, Position};\n \n-use hir::def_id::DefId;\n-use ty::{self, TyCtxt, GenericParamDefKind};\n-use util::common::ErrorReported;\n-use util::nodemap::FxHashMap;\n+use crate::hir::def_id::DefId;\n+use crate::ty::{self, TyCtxt, GenericParamDefKind};\n+use crate::util::common::ErrorReported;\n+use crate::util::nodemap::FxHashMap;\n \n use syntax::ast::{MetaItem, NestedMetaItem};\n use syntax::attr;"}, {"sha": "99107a1a6d4e1e3944421d568cdd8ede788bbafd", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -12,16 +12,16 @@ use super::SelectionError;\n use super::{VtableImplData, VtableClosureData, VtableGeneratorData, VtableFnPointerData};\n use super::util;\n \n-use hir::def_id::DefId;\n-use infer::{InferCtxt, InferOk, LateBoundRegionConversionTime};\n-use infer::type_variable::TypeVariableOrigin;\n-use mir::interpret::{GlobalId};\n+use crate::hir::def_id::DefId;\n+use crate::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime};\n+use crate::infer::type_variable::TypeVariableOrigin;\n+use crate::mir::interpret::{GlobalId};\n use rustc_data_structures::snapshot_map::{Snapshot, SnapshotMap};\n use syntax::ast::Ident;\n-use ty::subst::{Subst, Substs};\n-use ty::{self, ToPredicate, ToPolyTraitRef, Ty, TyCtxt};\n-use ty::fold::{TypeFoldable, TypeFolder};\n-use util::common::FN_OUTPUT_NAME;\n+use crate::ty::subst::{Subst, Substs};\n+use crate::ty::{self, ToPredicate, ToPolyTraitRef, Ty, TyCtxt};\n+use crate::ty::fold::{TypeFoldable, TypeFolder};\n+use crate::util::common::FN_OUTPUT_NAME;\n \n /// Depending on the stage of compilation, we want projection to be\n /// more or less conservative."}, {"sha": "47ca416e6b5aae9a27526d804be8a18644537222", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,10 +1,10 @@\n-use infer::at::At;\n-use infer::InferOk;\n-use infer::canonical::OriginalQueryValues;\n+use crate::infer::at::At;\n+use crate::infer::InferOk;\n+use crate::infer::canonical::OriginalQueryValues;\n use std::iter::FromIterator;\n use syntax::source_map::Span;\n-use ty::subst::Kind;\n-use ty::{self, Ty, TyCtxt};\n+use crate::ty::subst::Kind;\n+use crate::ty::{self, Ty, TyCtxt};\n \n impl<'cx, 'gcx, 'tcx> At<'cx, 'gcx, 'tcx> {\n     /// Given a type `ty` of some value being dropped, computes a set"}, {"sha": "d5230f15c256536bf36d8a80333fa7eee52770a0", "filename": "src/librustc/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,6 +1,6 @@\n-use infer::InferCtxt;\n-use infer::canonical::OriginalQueryValues;\n-use traits::{EvaluationResult, PredicateObligation, SelectionContext,\n+use crate::infer::InferCtxt;\n+use crate::infer::canonical::OriginalQueryValues;\n+use crate::traits::{EvaluationResult, PredicateObligation, SelectionContext,\n              TraitQueryMode, OverflowError};\n \n impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {"}, {"sha": "6b9bdfd63f4d0a9e28b62e5fcabe7ee65eb38565", "filename": "src/librustc/traits/query/method_autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Fmethod_autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Fmethod_autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fmethod_autoderef.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,6 +1,6 @@\n use rustc_data_structures::sync::Lrc;\n-use infer::canonical::{Canonical, QueryResponse};\n-use ty::Ty;\n+use crate::infer::canonical::{Canonical, QueryResponse};\n+use crate::ty::Ty;\n \n #[derive(Debug)]\n pub struct CandidateStep<'tcx> {"}, {"sha": "112a1d0e09c944e0b4281ebd34e3b1a51a4e8cd9", "filename": "src/librustc/traits/query/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -5,9 +5,9 @@\n //! The providers for the queries defined here can be found in\n //! `librustc_traits`.\n \n-use infer::canonical::Canonical;\n-use ty::error::TypeError;\n-use ty::{self, Ty};\n+use crate::infer::canonical::Canonical;\n+use crate::ty::error::TypeError;\n+use crate::ty::{self, Ty};\n \n pub mod dropck_outlives;\n pub mod evaluate_obligation;"}, {"sha": "f477f161bbb323f760edf08e3c1d63da023bb1f8", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -2,15 +2,15 @@\n //! which folds deeply, invoking the underlying\n //! `normalize_projection_ty` query when it encounters projections.\n \n-use infer::at::At;\n-use infer::canonical::OriginalQueryValues;\n-use infer::{InferCtxt, InferOk};\n-use mir::interpret::GlobalId;\n-use traits::project::Normalized;\n-use traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n-use ty::fold::{TypeFoldable, TypeFolder};\n-use ty::subst::{Subst, Substs};\n-use ty::{self, Ty, TyCtxt};\n+use crate::infer::at::At;\n+use crate::infer::canonical::OriginalQueryValues;\n+use crate::infer::{InferCtxt, InferOk};\n+use crate::mir::interpret::GlobalId;\n+use crate::traits::project::Normalized;\n+use crate::traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n+use crate::ty::fold::{TypeFoldable, TypeFolder};\n+use crate::ty::subst::{Subst, Substs};\n+use crate::ty::{self, Ty, TyCtxt};\n \n use super::NoSolution;\n "}, {"sha": "4fc61077e268a9d3216b4d2b130dd94a671372d2", "filename": "src/librustc/traits/query/normalize_erasing_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize_erasing_regions.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -7,8 +7,8 @@\n //! `normalize_ty_after_erasing_regions` query for each type found\n //! within. (This underlying query is what is cached.)\n \n-use ty::{self, Ty, TyCtxt};\n-use ty::fold::{TypeFoldable, TypeFolder};\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::fold::{TypeFoldable, TypeFolder};\n \n impl<'cx, 'tcx> TyCtxt<'cx, 'tcx, 'tcx> {\n     /// Erase the regions in `value` and then fully normalize all the"}, {"sha": "e57236b999babe2cddb71dcd39458cd9e6ba6612", "filename": "src/librustc/traits/query/outlives_bounds.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,12 +1,12 @@\n-use infer::InferCtxt;\n-use infer::canonical::OriginalQueryValues;\n+use crate::infer::InferCtxt;\n+use crate::infer::canonical::OriginalQueryValues;\n use syntax::ast;\n use syntax::source_map::Span;\n-use traits::{FulfillmentContext, ObligationCause, TraitEngine, TraitEngineExt};\n-use traits::query::NoSolution;\n-use ty::{self, Ty, TyCtxt};\n+use crate::traits::{FulfillmentContext, ObligationCause, TraitEngine, TraitEngineExt};\n+use crate::traits::query::NoSolution;\n+use crate::ty::{self, Ty, TyCtxt};\n \n-use ich::StableHashingContext;\n+use crate::ich::StableHashingContext;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n                                            StableHasherResult};\n use std::mem;"}, {"sha": "d9f573eb7e291a3d4987db36c7b981c211eec989", "filename": "src/librustc/traits/query/type_op/ascribe_user_type.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,8 +1,8 @@\n-use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n-use traits::query::Fallible;\n-use hir::def_id::DefId;\n-use ty::{ParamEnvAnd, Ty, TyCtxt};\n-use ty::subst::UserSubsts;\n+use crate::infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n+use crate::traits::query::Fallible;\n+use crate::hir::def_id::DefId;\n+use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n+use crate::ty::subst::UserSubsts;\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n pub struct AscribeUserType<'tcx> {"}, {"sha": "7e38282cc1adcd2d1d19dd4196f76cb7fb99f3c3", "filename": "src/librustc/traits/query/type_op/custom.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,12 +1,12 @@\n-use infer::{InferCtxt, InferOk};\n+use crate::infer::{InferCtxt, InferOk};\n use std::fmt;\n-use traits::query::Fallible;\n+use crate::traits::query::Fallible;\n \n-use infer::canonical::query_response;\n-use infer::canonical::QueryRegionConstraint;\n+use crate::infer::canonical::query_response;\n+use crate::infer::canonical::QueryRegionConstraint;\n use std::rc::Rc;\n use syntax::source_map::DUMMY_SP;\n-use traits::{ObligationCause, TraitEngine, TraitEngineExt};\n+use crate::traits::{ObligationCause, TraitEngine, TraitEngineExt};\n \n pub struct CustomTypeOp<F, G> {\n     closure: F,"}, {"sha": "5c3ccc9a995371c182437077ca8a5f080bcfe34b", "filename": "src/librustc/traits/query/type_op/eq.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,6 +1,6 @@\n-use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n-use traits::query::Fallible;\n-use ty::{ParamEnvAnd, Ty, TyCtxt};\n+use crate::infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n+use crate::traits::query::Fallible;\n+use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n pub struct Eq<'tcx> {"}, {"sha": "c48ca33b13fbcb02624db51e624de2b28208f7e7", "filename": "src/librustc/traits/query/type_op/implied_outlives_bounds.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,7 +1,7 @@\n-use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n-use traits::query::outlives_bounds::OutlivesBound;\n-use traits::query::Fallible;\n-use ty::{ParamEnvAnd, Ty, TyCtxt};\n+use crate::infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n+use crate::traits::query::outlives_bounds::OutlivesBound;\n+use crate::traits::query::Fallible;\n+use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n pub struct ImpliedOutlivesBounds<'tcx> {"}, {"sha": "fd13acc7796f87906c1b4ba5c46971b1a0c0a7d6", "filename": "src/librustc/traits/query/type_op/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,14 +1,14 @@\n-use infer::canonical::{\n+use crate::infer::canonical::{\n     Canonical, Canonicalized, CanonicalizedQueryResponse, OriginalQueryValues,\n     QueryRegionConstraint, QueryResponse,\n };\n-use infer::{InferCtxt, InferOk};\n+use crate::infer::{InferCtxt, InferOk};\n use std::fmt;\n use std::rc::Rc;\n-use traits::query::Fallible;\n-use traits::ObligationCause;\n-use ty::fold::TypeFoldable;\n-use ty::{Lift, ParamEnvAnd, TyCtxt};\n+use crate::traits::query::Fallible;\n+use crate::traits::ObligationCause;\n+use crate::ty::fold::TypeFoldable;\n+use crate::ty::{Lift, ParamEnvAnd, TyCtxt};\n \n pub mod ascribe_user_type;\n pub mod custom;"}, {"sha": "346c18516234cc131215f498d1889da1c09fbe3b", "filename": "src/librustc/traits/query/type_op/normalize.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,8 +1,8 @@\n-use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n+use crate::infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n use std::fmt;\n-use traits::query::Fallible;\n-use ty::fold::TypeFoldable;\n-use ty::{self, Lift, ParamEnvAnd, Ty, TyCtxt};\n+use crate::traits::query::Fallible;\n+use crate::ty::fold::TypeFoldable;\n+use crate::ty::{self, Lift, ParamEnvAnd, Ty, TyCtxt};\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n pub struct Normalize<T> {"}, {"sha": "fc0c1c022fc80a1c01725c74d0d732c65e9f25c0", "filename": "src/librustc/traits/query/type_op/outlives.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,8 +1,8 @@\n-use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n-use traits::query::dropck_outlives::trivial_dropck_outlives;\n-use traits::query::dropck_outlives::DropckOutlivesResult;\n-use traits::query::Fallible;\n-use ty::{ParamEnvAnd, Ty, TyCtxt};\n+use crate::infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n+use crate::traits::query::dropck_outlives::trivial_dropck_outlives;\n+use crate::traits::query::dropck_outlives::DropckOutlivesResult;\n+use crate::traits::query::Fallible;\n+use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n #[derive(Copy, Clone, Debug)]\n pub struct DropckOutlives<'tcx> {"}, {"sha": "50dedf6e87f40d59f508915860cdb1415ea1e587", "filename": "src/librustc/traits/query/type_op/prove_predicate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,6 +1,6 @@\n-use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n-use traits::query::Fallible;\n-use ty::{ParamEnvAnd, Predicate, TyCtxt};\n+use crate::infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n+use crate::traits::query::Fallible;\n+use crate::ty::{ParamEnvAnd, Predicate, TyCtxt};\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n pub struct ProvePredicate<'tcx> {"}, {"sha": "c45fb06313e1600d13e8486b2f8d45bb83a40429", "filename": "src/librustc/traits/query/type_op/subtype.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,6 +1,6 @@\n-use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n-use traits::query::Fallible;\n-use ty::{ParamEnvAnd, Ty, TyCtxt};\n+use crate::infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n+use crate::traits::query::Fallible;\n+use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n pub struct Subtype<'tcx> {"}, {"sha": "1e4cd145e17605786feab891f64b1208f3c6257f", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -27,25 +27,25 @@ use super::{\n     VtableGeneratorData, VtableImplData, VtableObjectData, VtableTraitAliasData,\n };\n \n-use dep_graph::{DepKind, DepNodeIndex};\n-use hir::def_id::DefId;\n-use infer::{InferCtxt, InferOk, TypeFreshener};\n-use middle::lang_items;\n-use mir::interpret::GlobalId;\n-use ty::fast_reject;\n-use ty::relate::TypeRelation;\n-use ty::subst::{Subst, Substs};\n-use ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable};\n-\n-use hir;\n+use crate::dep_graph::{DepKind, DepNodeIndex};\n+use crate::hir::def_id::DefId;\n+use crate::infer::{InferCtxt, InferOk, TypeFreshener};\n+use crate::middle::lang_items;\n+use crate::mir::interpret::GlobalId;\n+use crate::ty::fast_reject;\n+use crate::ty::relate::TypeRelation;\n+use crate::ty::subst::{Subst, Substs};\n+use crate::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+\n+use crate::hir;\n use rustc_data_structures::bit_set::GrowableBitSet;\n use rustc_data_structures::sync::Lock;\n use rustc_target::spec::abi::Abi;\n use std::cmp;\n use std::fmt::{self, Display};\n use std::iter;\n use std::rc::Rc;\n-use util::nodemap::{FxHashMap, FxHashSet};\n+use crate::util::nodemap::{FxHashMap, FxHashSet};\n \n pub struct SelectionContext<'cx, 'gcx: 'cx + 'tcx, 'tcx: 'cx> {\n     infcx: &'cx InferCtxt<'cx, 'gcx, 'tcx>,\n@@ -103,7 +103,7 @@ impl IntercrateAmbiguityCause {\n     /// See #23980 for details.\n     pub fn add_intercrate_ambiguity_hint<'a, 'tcx>(\n         &self,\n-        err: &mut ::errors::DiagnosticBuilder<'_>,\n+        err: &mut crate::errors::DiagnosticBuilder<'_>,\n     ) {\n         err.note(&self.intercrate_ambiguity_hint());\n     }"}, {"sha": "e7187005c132a17c98d029953ab9bb15e4173d55", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -11,16 +11,16 @@\n \n pub mod specialization_graph;\n \n-use hir::def_id::DefId;\n-use infer::{InferCtxt, InferOk};\n-use lint;\n-use traits::{self, coherence, FutureCompatOverlapErrorKind, ObligationCause, TraitEngine};\n+use crate::hir::def_id::DefId;\n+use crate::infer::{InferCtxt, InferOk};\n+use crate::lint;\n+use crate::traits::{self, coherence, FutureCompatOverlapErrorKind, ObligationCause, TraitEngine};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n use syntax_pos::DUMMY_SP;\n-use traits::select::IntercrateAmbiguityCause;\n-use ty::{self, TyCtxt, TypeFoldable};\n-use ty::subst::{Subst, Substs};\n+use crate::traits::select::IntercrateAmbiguityCause;\n+use crate::ty::{self, TyCtxt, TypeFoldable};\n+use crate::ty::subst::{Subst, Substs};\n \n use super::{SelectionContext, FulfillmentContext};\n use super::util::impl_trait_ref_and_oblig;"}, {"sha": "010555744b6c316875c4e67060c55e5c0ee88708", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,16 +1,16 @@\n use super::OverlapError;\n \n-use hir::def_id::DefId;\n-use ich::{self, StableHashingContext};\n+use crate::hir::def_id::DefId;\n+use crate::ich::{self, StableHashingContext};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n                                            StableHasherResult};\n-use traits;\n-use ty::{self, TyCtxt, TypeFoldable};\n-use ty::fast_reject::{self, SimplifiedType};\n+use crate::traits;\n+use crate::ty::{self, TyCtxt, TypeFoldable};\n+use crate::ty::fast_reject::{self, SimplifiedType};\n use rustc_data_structures::sync::Lrc;\n use syntax::ast::Ident;\n-use util::captures::Captures;\n-use util::nodemap::{DefIdMap, FxHashMap};\n+use crate::util::captures::Captures;\n+use crate::util::nodemap::{DefIdMap, FxHashMap};\n \n /// A per-trait graph of impls in specialization order. At the moment, this\n /// graph forms a tree rooted with the trait itself, with all other nodes\n@@ -489,7 +489,7 @@ impl<'a, 'gcx, 'tcx> Ancestors {\n         trait_def_id: DefId,\n     ) -> impl Iterator<Item = NodeItem<ty::AssociatedItem>> + Captures<'gcx> + Captures<'tcx> + 'a {\n         self.flat_map(move |node| {\n-            use ty::AssociatedKind::*;\n+            use crate::ty::AssociatedKind::*;\n             node.items(tcx).filter(move |impl_item| match (trait_item_kind, impl_item.kind) {\n                 | (Const, Const)\n                 | (Method, Method)"}, {"sha": "c5cc9e8b401822907b339e0bdd5fdc7d864705bb", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,9 +1,9 @@\n use chalk_engine;\n use smallvec::SmallVec;\n-use traits;\n-use traits::project::Normalized;\n-use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n-use ty::{self, Lift, TyCtxt};\n+use crate::traits;\n+use crate::traits::project::Normalized;\n+use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n+use crate::ty::{self, Lift, TyCtxt};\n use syntax::symbol::InternedString;\n \n use std::fmt;\n@@ -163,7 +163,7 @@ impl<'tcx> fmt::Debug for traits::MismatchedProjectionTypes<'tcx> {\n \n impl<'tcx> fmt::Display for traits::WhereClause<'tcx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use traits::WhereClause::*;\n+        use crate::traits::WhereClause::*;\n \n         // Bypass ppaux because it does not print out anonymous regions.\n         fn write_region_name<'tcx>(\n@@ -206,7 +206,7 @@ impl<'tcx> fmt::Display for traits::WhereClause<'tcx> {\n \n impl<'tcx> fmt::Display for traits::WellFormed<'tcx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use traits::WellFormed::*;\n+        use crate::traits::WellFormed::*;\n \n         match self {\n             Trait(trait_ref) => write!(fmt, \"WellFormed({})\", trait_ref),\n@@ -217,7 +217,7 @@ impl<'tcx> fmt::Display for traits::WellFormed<'tcx> {\n \n impl<'tcx> fmt::Display for traits::FromEnv<'tcx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use traits::FromEnv::*;\n+        use crate::traits::FromEnv::*;\n \n         match self {\n             Trait(trait_ref) => write!(fmt, \"FromEnv({})\", trait_ref),\n@@ -228,7 +228,7 @@ impl<'tcx> fmt::Display for traits::FromEnv<'tcx> {\n \n impl<'tcx> fmt::Display for traits::DomainGoal<'tcx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use traits::DomainGoal::*;\n+        use crate::traits::DomainGoal::*;\n \n         match self {\n             Holds(wc) => write!(fmt, \"{}\", wc),\n@@ -246,7 +246,7 @@ impl<'tcx> fmt::Display for traits::DomainGoal<'tcx> {\n \n impl fmt::Display for traits::QuantifierKind {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use traits::QuantifierKind::*;\n+        use crate::traits::QuantifierKind::*;\n \n         match self {\n             Universal => write!(fmt, \"forall\"),\n@@ -361,7 +361,7 @@ impl<'tcx> TypeVisitor<'tcx> for BoundNamesCollector {\n \n impl<'tcx> fmt::Display for traits::Goal<'tcx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use traits::GoalKind::*;\n+        use crate::traits::GoalKind::*;\n \n         match self {\n             Implies(hypotheses, goal) => {\n@@ -420,7 +420,7 @@ impl<'tcx> fmt::Display for traits::ProgramClause<'tcx> {\n \n impl<'tcx> fmt::Display for traits::Clause<'tcx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use traits::Clause::*;\n+        use crate::traits::Clause::*;\n \n         match self {\n             Implies(clause) => write!(fmt, \"{}\", clause),"}, {"sha": "67c919ac91610d3171d31186c73e5a14693998ee", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,10 +1,10 @@\n-use hir;\n-use hir::def_id::DefId;\n-use traits::specialize::specialization_graph::NodeItem;\n-use ty::{self, Ty, TyCtxt, ToPredicate, ToPolyTraitRef};\n-use ty::outlives::Component;\n-use ty::subst::{Kind, Subst, Substs};\n-use util::nodemap::FxHashSet;\n+use crate::hir;\n+use crate::hir::def_id::DefId;\n+use crate::traits::specialize::specialization_graph::NodeItem;\n+use crate::ty::{self, Ty, TyCtxt, ToPredicate, ToPolyTraitRef};\n+use crate::ty::outlives::Component;\n+use crate::ty::subst::{Kind, Subst, Substs};\n+use crate::util::nodemap::FxHashSet;\n \n use super::{Obligation, ObligationCause, PredicateObligation, SelectionContext, Normalized};\n "}, {"sha": "07fa441bb8076e3cce51f434ef33e1e98a2ce14a", "filename": "src/librustc/ty/_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2F_match.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,6 +1,6 @@\n-use ty::{self, Ty, TyCtxt};\n-use ty::error::TypeError;\n-use ty::relate::{self, Relate, TypeRelation, RelateResult};\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::error::TypeError;\n+use crate::ty::relate::{self, Relate, TypeRelation, RelateResult};\n \n /// A type \"A\" *matches* \"B\" if the fresh types in B could be\n /// substituted with values so as to make it equal to A. Matching is"}, {"sha": "68e7bd6e16abec7e1557dc0d946ae2e57c84676a", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,7 +1,7 @@\n-use hir;\n-use hir::def_id::DefId;\n-use ty::{self, Ty, TyCtxt};\n-use ty::subst::Substs;\n+use crate::hir;\n+use crate::hir::def_id::DefId;\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::subst::Substs;\n \n \n /// Represents coercing a value to a different type of value."}, {"sha": "1290141b0a6b03314f3651a1dfd791bd12950845", "filename": "src/librustc/ty/binding.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fbinding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fbinding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fbinding.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,6 +1,6 @@\n-use hir::BindingAnnotation::*;\n-use hir::BindingAnnotation;\n-use hir::Mutability;\n+use crate::hir::BindingAnnotation::*;\n+use crate::hir::BindingAnnotation;\n+use crate::hir::Mutability;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum BindingMode {"}, {"sha": "0b2112f42d5955af0d6667bddada424807d6fbac", "filename": "src/librustc/ty/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcast.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,7 +1,7 @@\n // Helpers for handling cast expressions, used in both\n // typeck and codegen.\n \n-use ty::{self, Ty};\n+use crate::ty::{self, Ty};\n \n use syntax::ast;\n "}, {"sha": "c9775b102931538b1d56d7ab1749b08c008efee6", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -6,15 +6,15 @@\n // The functionality in here is shared between persisting to crate metadata and\n // persisting to incr. comp. caches.\n \n-use hir::def_id::{DefId, CrateNum};\n-use infer::canonical::{CanonicalVarInfo, CanonicalVarInfos};\n+use crate::hir::def_id::{DefId, CrateNum};\n+use crate::infer::canonical::{CanonicalVarInfo, CanonicalVarInfos};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_serialize::{Decodable, Decoder, Encoder, Encodable, opaque};\n+use crate::rustc_serialize::{Decodable, Decoder, Encoder, Encodable, opaque};\n use std::hash::Hash;\n use std::intrinsics;\n-use ty::{self, Ty, TyCtxt};\n-use ty::subst::Substs;\n-use mir::interpret::Allocation;\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::subst::Substs;\n+use crate::mir::interpret::Allocation;\n \n /// The shorthand encoding uses an enum's variant index `usize`\n /// and is offset by this value so it never matches a real variant.\n@@ -283,7 +283,7 @@ macro_rules! implement_ty_decoder {\n             use $crate::ty::codec::*;\n             use $crate::ty::subst::Substs;\n             use $crate::hir::def_id::{CrateNum};\n-            use rustc_serialize::{Decoder, SpecializedDecoder};\n+            use crate::rustc_serialize::{Decoder, SpecializedDecoder};\n             use std::borrow::Cow;\n \n             impl<$($typaram ),*> Decoder for $DecoderName<$($typaram),*> {"}, {"sha": "1bb63867289179d5b89f68ade81ea7ff492d3477", "filename": "src/librustc/ty/constness.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fconstness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fconstness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fconstness.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,9 +1,9 @@\n-use ty::query::Providers;\n-use hir::def_id::DefId;\n-use hir;\n-use ty::TyCtxt;\n+use crate::ty::query::Providers;\n+use crate::hir::def_id::DefId;\n+use crate::hir;\n+use crate::ty::TyCtxt;\n use syntax_pos::symbol::Symbol;\n-use hir::map::blocks::FnLikeNode;\n+use crate::hir::map::blocks::FnLikeNode;\n use syntax::attr;\n \n impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {"}, {"sha": "140c772256d3f3f5f13eec34deba997ecc6235d3", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,48 +1,48 @@\n //! type context book-keeping\n \n-use dep_graph::DepGraph;\n-use dep_graph::{DepNode, DepConstructor};\n-use errors::DiagnosticBuilder;\n-use session::Session;\n-use session::config::{BorrowckMode, OutputFilenames};\n-use session::config::CrateType;\n-use middle;\n-use hir::{TraitCandidate, HirId, ItemKind, ItemLocalId, Node};\n-use hir::def::{Def, Export};\n-use hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n-use hir::map as hir_map;\n-use hir::map::DefPathHash;\n-use lint::{self, Lint};\n-use ich::{StableHashingContext, NodeIdHashingMode};\n-use infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarInfos};\n-use infer::outlives::free_region_map::FreeRegionMap;\n-use middle::cstore::CrateStoreDyn;\n-use middle::cstore::EncodedMetadata;\n-use middle::lang_items;\n-use middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n-use middle::stability;\n-use mir::{self, Mir, interpret, ProjectionKind};\n-use mir::interpret::Allocation;\n-use ty::subst::{Kind, Substs, Subst};\n-use ty::ReprOptions;\n-use traits;\n-use traits::{Clause, Clauses, GoalKind, Goal, Goals};\n-use ty::{self, Ty, TypeAndMut};\n-use ty::{TyS, TyKind, List};\n-use ty::{AdtKind, AdtDef, ClosureSubsts, GeneratorSubsts, Region, Const, LazyConst};\n-use ty::{PolyFnSig, InferTy, ParamTy, ProjectionTy, ExistentialPredicate, Predicate};\n-use ty::RegionKind;\n-use ty::{TyVar, TyVid, IntVar, IntVid, FloatVar, FloatVid};\n-use ty::TyKind::*;\n-use ty::GenericParamDefKind;\n-use ty::layout::{LayoutDetails, TargetDataLayout, VariantIdx};\n-use ty::query;\n-use ty::steal::Steal;\n-use ty::subst::{UserSubsts, UnpackedKind};\n-use ty::{BoundVar, BindingMode};\n-use ty::CanonicalPolyFnSig;\n-use util::nodemap::{DefIdMap, DefIdSet, ItemLocalMap};\n-use util::nodemap::{FxHashMap, FxHashSet};\n+use crate::dep_graph::DepGraph;\n+use crate::dep_graph::{DepNode, DepConstructor};\n+use crate::errors::DiagnosticBuilder;\n+use crate::session::Session;\n+use crate::session::config::{BorrowckMode, OutputFilenames};\n+use crate::session::config::CrateType;\n+use crate::middle;\n+use crate::hir::{TraitCandidate, HirId, ItemKind, ItemLocalId, Node};\n+use crate::hir::def::{Def, Export};\n+use crate::hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n+use crate::hir::map as hir_map;\n+use crate::hir::map::DefPathHash;\n+use crate::lint::{self, Lint};\n+use crate::ich::{StableHashingContext, NodeIdHashingMode};\n+use crate::infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarInfos};\n+use crate::infer::outlives::free_region_map::FreeRegionMap;\n+use crate::middle::cstore::CrateStoreDyn;\n+use crate::middle::cstore::EncodedMetadata;\n+use crate::middle::lang_items;\n+use crate::middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n+use crate::middle::stability;\n+use crate::mir::{self, Mir, interpret, ProjectionKind};\n+use crate::mir::interpret::Allocation;\n+use crate::ty::subst::{Kind, Substs, Subst};\n+use crate::ty::ReprOptions;\n+use crate::traits;\n+use crate::traits::{Clause, Clauses, GoalKind, Goal, Goals};\n+use crate::ty::{self, Ty, TypeAndMut};\n+use crate::ty::{TyS, TyKind, List};\n+use crate::ty::{AdtKind, AdtDef, ClosureSubsts, GeneratorSubsts, Region, Const, LazyConst};\n+use crate::ty::{PolyFnSig, InferTy, ParamTy, ProjectionTy, ExistentialPredicate, Predicate};\n+use crate::ty::RegionKind;\n+use crate::ty::{TyVar, TyVid, IntVar, IntVid, FloatVar, FloatVid};\n+use crate::ty::TyKind::*;\n+use crate::ty::GenericParamDefKind;\n+use crate::ty::layout::{LayoutDetails, TargetDataLayout, VariantIdx};\n+use crate::ty::query;\n+use crate::ty::steal::Steal;\n+use crate::ty::subst::{UserSubsts, UnpackedKind};\n+use crate::ty::{BoundVar, BindingMode};\n+use crate::ty::CanonicalPolyFnSig;\n+use crate::util::nodemap::{DefIdMap, DefIdSet, ItemLocalMap};\n+use crate::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::interner::HashInterner;\n use smallvec::SmallVec;\n use rustc_data_structures::stable_hasher::{HashStable, hash_stable_hashmap,\n@@ -73,7 +73,7 @@ use syntax::feature_gate;\n use syntax::symbol::{Symbol, keywords, InternedString};\n use syntax_pos::Span;\n \n-use hir;\n+use crate::hir;\n \n pub struct AllArenas<'tcx> {\n     pub global: WorkerLocal<GlobalArenas<'tcx>>,\n@@ -1822,18 +1822,18 @@ pub mod tls {\n     use std::marker::PhantomData;\n     use std::ptr;\n     use syntax_pos;\n-    use ty::query;\n-    use errors::{Diagnostic, TRACK_DIAGNOSTICS};\n+    use crate::ty::query;\n+    use crate::errors::{Diagnostic, TRACK_DIAGNOSTICS};\n     use rustc_data_structures::OnDrop;\n     use rustc_data_structures::sync::{self, Lrc, Lock};\n     use rustc_data_structures::thin_vec::ThinVec;\n-    use dep_graph::TaskDeps;\n+    use crate::dep_graph::TaskDeps;\n \n     #[cfg(not(parallel_compiler))]\n     use std::cell::Cell;\n \n     #[cfg(parallel_compiler)]\n-    use rayon_core;\n+    use rustc_rayon_core as rayon_core;\n \n     /// This is the implicit state of rustc. It contains the current\n     /// TyCtxt and query. It is updated when creating a local interner or\n@@ -2114,8 +2114,8 @@ macro_rules! sty_debug_print {\n         // variable names.\n         #[allow(non_snake_case)]\n         mod inner {\n-            use ty::{self, TyCtxt};\n-            use ty::context::Interned;\n+            use crate::ty::{self, TyCtxt};\n+            use crate::ty::context::Interned;\n \n             #[derive(Copy, Clone)]\n             struct DebugStat {"}, {"sha": "0431afcc76c9e4250417d37cdc11b1e4fe32d5b1", "filename": "src/librustc/ty/erase_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferase_regions.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,5 +1,5 @@\n-use ty::{self, Ty, TyCtxt, TypeFlags};\n-use ty::fold::{TypeFolder, TypeFoldable};\n+use crate::ty::{self, Ty, TyCtxt, TypeFlags};\n+use crate::ty::fold::{TypeFolder, TypeFoldable};\n \n pub(super) fn provide(providers: &mut ty::query::Providers<'_>) {\n     *providers = ty::query::Providers {"}, {"sha": "d0c9677ea6ecb8d3b845a042303b17c7908affbf", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,13 +1,13 @@\n-use hir::def_id::DefId;\n-use ty::{self, Region, Ty, TyCtxt};\n+use crate::hir::def_id::DefId;\n+use crate::ty::{self, Region, Ty, TyCtxt};\n use std::borrow::Cow;\n use std::fmt;\n use rustc_target::spec::abi;\n use syntax::ast;\n-use errors::{Applicability, DiagnosticBuilder};\n+use crate::errors::{Applicability, DiagnosticBuilder};\n use syntax_pos::Span;\n \n-use hir;\n+use crate::hir;\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq)]\n pub struct ExpectedFound<T> {"}, {"sha": "59ab4561f2c8778811f567b6118e6b566aeed585", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,12 +1,12 @@\n-use hir::def_id::DefId;\n-use ich::StableHashingContext;\n+use crate::hir::def_id::DefId;\n+use crate::ich::StableHashingContext;\n use rustc_data_structures::stable_hasher::{StableHasher, StableHasherResult,\n                                            HashStable};\n use std::fmt::Debug;\n use std::hash::Hash;\n use std::mem;\n use syntax::ast;\n-use ty::{self, Ty, TyCtxt};\n+use crate::ty::{self, Ty, TyCtxt};\n \n use self::SimplifiedTypeGen::*;\n "}, {"sha": "25ec3e49cdf67361f2ccf2f56166f36a17632992", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,5 +1,5 @@\n-use ty::subst::Substs;\n-use ty::{self, Ty, TypeFlags, TypeFoldable};\n+use crate::ty::subst::Substs;\n+use crate::ty::{self, Ty, TypeFlags, TypeFoldable};\n \n #[derive(Debug)]\n pub struct FlagComputation {"}, {"sha": "306c69666e596b4bbf913e15b79102f9189f75d4", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -29,12 +29,12 @@\n //! These methods return true to indicate that the visitor has found what it is looking for\n //! and does not need to visit anything else.\n \n-use hir::def_id::DefId;\n-use ty::{self, Binder, Ty, TyCtxt, TypeFlags};\n+use crate::hir::def_id::DefId;\n+use crate::ty::{self, Binder, Ty, TyCtxt, TypeFlags};\n \n use std::collections::BTreeMap;\n use std::fmt;\n-use util::nodemap::FxHashSet;\n+use crate::util::nodemap::FxHashSet;\n \n /// The TypeFoldable trait is implemented for every type that can be folded.\n /// Basically, every type that has a corresponding method in TypeFolder."}, {"sha": "73b7d74d9dafe79ba76b5029cb3dc6c6a825217a", "filename": "src/librustc/ty/inhabitedness/def_id_forest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,8 +1,8 @@\n use std::mem;\n use smallvec::SmallVec;\n use syntax::ast::CRATE_NODE_ID;\n-use ty::context::TyCtxt;\n-use ty::{DefId, DefIdTree};\n+use crate::ty::context::TyCtxt;\n+use crate::ty::{DefId, DefIdTree};\n \n /// Represents a forest of DefIds closed under the ancestor relation. That is,\n /// if a DefId representing a module is contained in the forest then all"}, {"sha": "601ffe70eec18ce07a711c7bdac02e560a3f623b", "filename": "src/librustc/ty/inhabitedness/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,8 +1,8 @@\n-use ty::context::TyCtxt;\n-use ty::{AdtDef, VariantDef, FieldDef, Ty, TyS};\n-use ty::{self, DefId, Substs};\n-use ty::{AdtKind, Visibility};\n-use ty::TyKind::*;\n+use crate::ty::context::TyCtxt;\n+use crate::ty::{AdtDef, VariantDef, FieldDef, Ty, TyS};\n+use crate::ty::{self, DefId, Substs};\n+use crate::ty::{AdtKind, Visibility};\n+use crate::ty::TyKind::*;\n \n pub use self::def_id_forest::DefIdForest;\n "}, {"sha": "e4fe93d5deaeac812ed8955f5246419afb9a7ec4", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,9 +1,9 @@\n-use hir::Unsafety;\n-use hir::def_id::DefId;\n-use ty::{self, Ty, PolyFnSig, TypeFoldable, Substs, TyCtxt};\n-use traits;\n+use crate::hir::Unsafety;\n+use crate::hir::def_id::DefId;\n+use crate::ty::{self, Ty, PolyFnSig, TypeFoldable, Substs, TyCtxt};\n+use crate::traits;\n use rustc_target::spec::abi::Abi;\n-use util::ppaux;\n+use crate::util::ppaux;\n \n use std::fmt;\n use std::iter;\n@@ -141,7 +141,7 @@ impl<'tcx> InstanceDef<'tcx> {\n         &self,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>\n     ) -> bool {\n-        use hir::map::DefPathData;\n+        use crate::hir::map::DefPathData;\n         let def_id = match *self {\n             ty::InstanceDef::Item(def_id) => def_id,\n             ty::InstanceDef::DropGlue(_, Some(_)) => return false,"}, {"sha": "f89e50d696945bda60e8c7c2cae0d7350de2ccb8", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,8 +1,8 @@\n-use hir;\n-use hir::map::DefPathData;\n-use hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use ty::{self, DefIdTree, Ty, TyCtxt};\n-use middle::cstore::{ExternCrate, ExternCrateSource};\n+use crate::hir;\n+use crate::hir::map::DefPathData;\n+use crate::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use crate::ty::{self, DefIdTree, Ty, TyCtxt};\n+use crate::middle::cstore::{ExternCrate, ExternCrateSource};\n use syntax::ast;\n use syntax::symbol::{keywords, LocalInternedString, Symbol};\n "}, {"sha": "8401d0861cad2f1e537ba94fa607e2d7272739fe", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,5 +1,5 @@\n-use session::{self, DataTypeKind};\n-use ty::{self, Ty, TyCtxt, TypeFoldable, ReprOptions};\n+use crate::session::{self, DataTypeKind};\n+use crate::ty::{self, Ty, TyCtxt, TypeFoldable, ReprOptions};\n \n use syntax::ast::{self, Ident, IntTy, UintTy};\n use syntax::attr;\n@@ -12,7 +12,7 @@ use std::iter;\n use std::mem;\n use std::ops::Bound;\n \n-use ich::StableHashingContext;\n+use crate::ich::StableHashingContext;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n                                            StableHasherResult};\n@@ -1872,7 +1872,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for Variants {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use ty::layout::Variants::*;\n+        use crate::ty::layout::Variants::*;\n         mem::discriminant(self).hash_stable(hcx, hasher);\n \n         match *self {\n@@ -1908,7 +1908,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for FieldPlacement {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use ty::layout::FieldPlacement::*;\n+        use crate::ty::layout::FieldPlacement::*;\n         mem::discriminant(self).hash_stable(hcx, hasher);\n \n         match *self {\n@@ -1941,7 +1941,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for Abi {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use ty::layout::Abi::*;\n+        use crate::ty::layout::Abi::*;\n         mem::discriminant(self).hash_stable(hcx, hasher);\n \n         match *self {\n@@ -1975,29 +1975,29 @@ impl<'a> HashStable<StableHashingContext<'a>> for Scalar {\n     }\n }\n \n-impl_stable_hash_for!(struct ::ty::layout::LayoutDetails {\n+impl_stable_hash_for!(struct crate::ty::layout::LayoutDetails {\n     variants,\n     fields,\n     abi,\n     size,\n     align\n });\n \n-impl_stable_hash_for!(enum ::ty::layout::Integer {\n+impl_stable_hash_for!(enum crate::ty::layout::Integer {\n     I8,\n     I16,\n     I32,\n     I64,\n     I128\n });\n \n-impl_stable_hash_for!(enum ::ty::layout::Primitive {\n+impl_stable_hash_for!(enum crate::ty::layout::Primitive {\n     Int(integer, signed),\n     Float(fty),\n     Pointer\n });\n \n-impl_stable_hash_for!(struct ::ty::layout::AbiAndPrefAlign {\n+impl_stable_hash_for!(struct crate::ty::layout::AbiAndPrefAlign {\n     abi,\n     pref\n });\n@@ -2023,7 +2023,7 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for LayoutError<'gcx>\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use ty::layout::LayoutError::*;\n+        use crate::ty::layout::LayoutError::*;\n         mem::discriminant(self).hash_stable(hcx, hasher);\n \n         match *self {"}, {"sha": "60e3ac673a0a0c0d20420afed63234faaf4556f5", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -4,31 +4,31 @@ pub use self::BorrowKind::*;\n pub use self::IntVarValue::*;\n pub use self::fold::TypeFoldable;\n \n-use hir::{map as hir_map, FreevarMap, GlobMap, TraitMap};\n-use hir::Node;\n-use hir::def::{Def, CtorKind, ExportMap};\n-use hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use hir::map::DefPathData;\n+use crate::hir::{map as hir_map, FreevarMap, GlobMap, TraitMap};\n+use crate::hir::Node;\n+use crate::hir::def::{Def, CtorKind, ExportMap};\n+use crate::hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use crate::hir::map::DefPathData;\n use rustc_data_structures::svh::Svh;\n-use ich::Fingerprint;\n-use ich::StableHashingContext;\n-use infer::canonical::Canonical;\n-use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n-use middle::resolve_lifetime::ObjectLifetimeDefault;\n-use mir::Mir;\n-use mir::interpret::{GlobalId, ErrorHandled};\n-use mir::GeneratorLayout;\n-use session::CrateDisambiguator;\n-use traits::{self, Reveal};\n-use ty;\n-use ty::layout::VariantIdx;\n-use ty::subst::{Subst, Substs};\n-use ty::util::{IntTypeExt, Discr};\n-use ty::walk::TypeWalker;\n-use util::captures::Captures;\n-use util::nodemap::{NodeSet, DefIdMap, FxHashMap};\n+use crate::ich::Fingerprint;\n+use crate::ich::StableHashingContext;\n+use crate::infer::canonical::Canonical;\n+use crate::middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n+use crate::middle::resolve_lifetime::ObjectLifetimeDefault;\n+use crate::mir::Mir;\n+use crate::mir::interpret::{GlobalId, ErrorHandled};\n+use crate::mir::GeneratorLayout;\n+use crate::session::CrateDisambiguator;\n+use crate::traits::{self, Reveal};\n+use crate::ty;\n+use crate::ty::layout::VariantIdx;\n+use crate::ty::subst::{Subst, Substs};\n+use crate::ty::util::{IntTypeExt, Discr};\n+use crate::ty::walk::TypeWalker;\n+use crate::util::captures::Captures;\n+use crate::util::nodemap::{NodeSet, DefIdMap, FxHashMap};\n use arena::SyncDroplessArena;\n-use session::DataTypeKind;\n+use crate::session::DataTypeKind;\n \n use serialize::{self, Encodable, Encoder};\n use std::cell::RefCell;\n@@ -50,7 +50,7 @@ use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::stable_hasher::{StableHasher, StableHasherResult,\n                                            HashStable};\n \n-use hir;\n+use crate::hir;\n \n pub use self::sty::{Binder, BoundTy, BoundTyKind, BoundVar, DebruijnIndex, INNERMOST};\n pub use self::sty::{FnSig, GenSig, CanonicalPolyFnSig, PolyFnSig, PolyGenSig};\n@@ -2277,7 +2277,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                     })\n                 } else {\n                     info!(\"invalid enum discriminant: {:#?}\", val);\n-                    ::mir::interpret::struct_error(\n+                    crate::mir::interpret::struct_error(\n                         tcx.at(tcx.def_span(expr_did)),\n                         \"constant evaluation of enum discriminant resulted in non-integer\",\n                     ).emit();"}, {"sha": "5b21ed5abd77b0b425045fb1e308158324be12a8", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -3,7 +3,7 @@\n // RFC for reference.\n \n use smallvec::SmallVec;\n-use ty::{self, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n \n #[derive(Debug)]\n pub enum Component<'tcx> {"}, {"sha": "255e39eaccd6d72b7e92a79007adc2821fc096d7", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,27 +1,27 @@\n-use dep_graph::SerializedDepNodeIndex;\n-use dep_graph::DepNode;\n-use hir::def_id::{CrateNum, DefId, DefIndex};\n-use mir::interpret::GlobalId;\n-use traits;\n-use traits::query::{\n+use crate::dep_graph::SerializedDepNodeIndex;\n+use crate::dep_graph::DepNode;\n+use crate::hir::def_id::{CrateNum, DefId, DefIndex};\n+use crate::mir::interpret::GlobalId;\n+use crate::traits;\n+use crate::traits::query::{\n     CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal,\n     CanonicalTypeOpAscribeUserTypeGoal, CanonicalTypeOpEqGoal, CanonicalTypeOpNormalizeGoal,\n     CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpSubtypeGoal,\n };\n-use ty::{self, ParamEnvAnd, Ty, TyCtxt};\n-use ty::subst::Substs;\n-use ty::query::queries;\n-use ty::query::Query;\n-use ty::query::QueryCache;\n-use util::profiling::ProfileCategory;\n+use crate::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n+use crate::ty::subst::Substs;\n+use crate::ty::query::queries;\n+use crate::ty::query::Query;\n+use crate::ty::query::QueryCache;\n+use crate::util::profiling::ProfileCategory;\n \n use std::borrow::Cow;\n use std::hash::Hash;\n use std::fmt::Debug;\n use syntax_pos::symbol::InternedString;\n use rustc_data_structures::sync::Lock;\n use rustc_data_structures::stable_hasher::HashStable;\n-use ich::StableHashingContext;\n+use crate::ich::StableHashingContext;\n \n // Query configuration and description traits.\n \n@@ -901,7 +901,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::optimized_mir<'tcx> {\n     fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                               id: SerializedDepNodeIndex)\n                               -> Option<Self::Value> {\n-        let mir: Option<::mir::Mir<'tcx>> = tcx.queries.on_disk_cache\n+        let mir: Option<crate::mir::Mir<'tcx>> = tcx.queries.on_disk_cache\n                                                .try_load_query_result(tcx, id);\n         mir.map(|x| tcx.alloc_mir(x))\n     }"}, {"sha": "0793366e6d479cd80792cfb586068ee3867b8539", "filename": "src/librustc/ty/query/job.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,25 +1,27 @@\n #![allow(warnings)]\n \n use std::mem;\n+use std::process;\n+use std::{fmt, ptr};\n+\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{Lock, LockGuard, Lrc, Weak};\n use rustc_data_structures::OnDrop;\n use syntax_pos::Span;\n-use ty::tls;\n-use ty::query::Query;\n-use ty::query::plumbing::CycleError;\n+\n+use crate::ty::tls;\n+use crate::ty::query::Query;\n+use crate::ty::query::plumbing::CycleError;\n #[cfg(not(parallel_compiler))]\n-use ty::query::{\n+use crate::ty::query::{\n     plumbing::TryGetJob,\n     config::QueryDescription,\n };\n-use ty::context::TyCtxt;\n-use std::process;\n-use std::{fmt, ptr};\n+use crate::ty::context::TyCtxt;\n \n #[cfg(parallel_compiler)]\n use {\n-    rayon_core,\n+    rustc_rayon_core as rayon_core,\n     parking_lot::{Mutex, Condvar},\n     std::sync::atomic::Ordering,\n     std::thread,\n@@ -89,7 +91,7 @@ impl<'tcx> QueryJob<'tcx> {\n     /// For single threaded rustc there's no concurrent jobs running, so if we are waiting for any\n     /// query that means that there is a query cycle, thus this always running a cycle error.\n     #[cfg(parallel_compiler)]\n-    pub(super) fn await<'lcx>(\n+    pub(super) fn r#await<'lcx>(\n         &self,\n         tcx: TyCtxt<'_, 'tcx, 'lcx>,\n         span: Span,\n@@ -101,7 +103,7 @@ impl<'tcx> QueryJob<'tcx> {\n                 cycle: Lock::new(None),\n                 condvar: Condvar::new(),\n             });\n-            self.latch.await(&waiter);\n+            self.latch.r#await(&waiter);\n             // FIXME: Get rid of this lock. We have ownership of the QueryWaiter\n             // although another thread may still have a Lrc reference so we cannot\n             // use Lrc::get_mut\n@@ -200,7 +202,7 @@ impl<'tcx> QueryLatch<'tcx> {\n     }\n \n     /// Awaits the caller on this latch by blocking the current thread.\n-    fn await(&self, waiter: &Lrc<QueryWaiter<'tcx>>) {\n+    fn r#await(&self, waiter: &Lrc<QueryWaiter<'tcx>>) {\n         let mut info = self.info.lock();\n         if !info.complete {\n             // We push the waiter on to the `waiters` list. It can be accessed inside"}, {"sha": "f5eb7374cc19b445739a3b7f5d23bba044eeb49e", "filename": "src/librustc/ty/query/keys.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,12 +1,12 @@\n //! Defines the set of legal keys that can be used in queries.\n \n-use infer::canonical::Canonical;\n-use hir::def_id::{CrateNum, DefId, LOCAL_CRATE, DefIndex};\n-use traits;\n-use ty::{self, Ty, TyCtxt};\n-use ty::subst::Substs;\n-use ty::fast_reject::SimplifiedType;\n-use mir;\n+use crate::infer::canonical::Canonical;\n+use crate::hir::def_id::{CrateNum, DefId, LOCAL_CRATE, DefIndex};\n+use crate::traits;\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::subst::Substs;\n+use crate::ty::fast_reject::SimplifiedType;\n+use crate::mir;\n \n use std::fmt::Debug;\n use std::hash::Hash;"}, {"sha": "20a700bb58dd16197884d98e16a083f67cf097f5", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,48 +1,48 @@\n-use dep_graph::{DepConstructor, DepNode};\n-use errors::DiagnosticBuilder;\n-use hir::def_id::{CrateNum, DefId, DefIndex};\n-use hir::def::{Def, Export};\n-use hir::{self, TraitCandidate, ItemLocalId, CodegenFnAttrs};\n+use crate::dep_graph::{DepConstructor, DepNode};\n+use crate::errors::DiagnosticBuilder;\n+use crate::hir::def_id::{CrateNum, DefId, DefIndex};\n+use crate::hir::def::{Def, Export};\n+use crate::hir::{self, TraitCandidate, ItemLocalId, CodegenFnAttrs};\n use rustc_data_structures::svh::Svh;\n-use infer::canonical::{self, Canonical};\n-use lint;\n-use middle::borrowck::BorrowCheckResult;\n-use middle::cstore::{ExternCrate, LinkagePreference, NativeLibrary, ForeignModule};\n-use middle::cstore::{NativeLibraryKind, DepKind, CrateSource};\n-use middle::privacy::AccessLevels;\n-use middle::reachable::ReachableSet;\n-use middle::region;\n-use middle::resolve_lifetime::{ResolveLifetimes, Region, ObjectLifetimeDefault};\n-use middle::stability::{self, DeprecationEntry};\n-use middle::lib_features::LibFeatures;\n-use middle::lang_items::{LanguageItems, LangItem};\n-use middle::exported_symbols::{SymbolExportLevel, ExportedSymbol};\n-use mir::interpret::{ConstEvalRawResult, ConstEvalResult};\n-use mir::mono::CodegenUnit;\n-use mir;\n-use mir::interpret::GlobalId;\n-use session::{CompileResult, CrateDisambiguator};\n-use session::config::{EntryFnType, OutputFilenames, OptLevel};\n-use traits::{self, Vtable};\n-use traits::query::{\n+use crate::infer::canonical::{self, Canonical};\n+use crate::lint;\n+use crate::middle::borrowck::BorrowCheckResult;\n+use crate::middle::cstore::{ExternCrate, LinkagePreference, NativeLibrary, ForeignModule};\n+use crate::middle::cstore::{NativeLibraryKind, DepKind, CrateSource};\n+use crate::middle::privacy::AccessLevels;\n+use crate::middle::reachable::ReachableSet;\n+use crate::middle::region;\n+use crate::middle::resolve_lifetime::{ResolveLifetimes, Region, ObjectLifetimeDefault};\n+use crate::middle::stability::{self, DeprecationEntry};\n+use crate::middle::lib_features::LibFeatures;\n+use crate::middle::lang_items::{LanguageItems, LangItem};\n+use crate::middle::exported_symbols::{SymbolExportLevel, ExportedSymbol};\n+use crate::mir::interpret::{ConstEvalRawResult, ConstEvalResult};\n+use crate::mir::mono::CodegenUnit;\n+use crate::mir;\n+use crate::mir::interpret::GlobalId;\n+use crate::session::{CompileResult, CrateDisambiguator};\n+use crate::session::config::{EntryFnType, OutputFilenames, OptLevel};\n+use crate::traits::{self, Vtable};\n+use crate::traits::query::{\n     CanonicalPredicateGoal, CanonicalProjectionGoal,\n     CanonicalTyGoal, CanonicalTypeOpAscribeUserTypeGoal,\n     CanonicalTypeOpEqGoal, CanonicalTypeOpSubtypeGoal, CanonicalTypeOpProvePredicateGoal,\n     CanonicalTypeOpNormalizeGoal, NoSolution,\n };\n-use traits::query::method_autoderef::MethodAutoderefStepsResult;\n-use traits::query::dropck_outlives::{DtorckConstraint, DropckOutlivesResult};\n-use traits::query::normalize::NormalizationResult;\n-use traits::query::outlives_bounds::OutlivesBound;\n-use traits::specialization_graph;\n-use traits::Clauses;\n-use ty::{self, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n-use ty::steal::Steal;\n-use ty::subst::Substs;\n-use util::nodemap::{DefIdSet, DefIdMap, ItemLocalSet};\n-use util::common::{ErrorReported};\n-use util::profiling::ProfileCategory::*;\n-use session::Session;\n+use crate::traits::query::method_autoderef::MethodAutoderefStepsResult;\n+use crate::traits::query::dropck_outlives::{DtorckConstraint, DropckOutlivesResult};\n+use crate::traits::query::normalize::NormalizationResult;\n+use crate::traits::query::outlives_bounds::OutlivesBound;\n+use crate::traits::specialization_graph;\n+use crate::traits::Clauses;\n+use crate::ty::{self, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n+use crate::ty::steal::Steal;\n+use crate::ty::subst::Substs;\n+use crate::util::nodemap::{DefIdSet, DefIdMap, ItemLocalSet};\n+use crate::util::common::{ErrorReported};\n+use crate::util::profiling::ProfileCategory::*;\n+use crate::session::Session;\n \n use rustc_data_structures::bit_set::BitSet;\n use rustc_data_structures::indexed_vec::IndexVec;"}, {"sha": "9c9bc0f6aa11c1cd788b3b2d805ea9af6d32efc8", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,28 +1,28 @@\n-use dep_graph::{DepNodeIndex, SerializedDepNodeIndex};\n-use errors::Diagnostic;\n-use hir;\n-use hir::def_id::{CrateNum, DefIndex, DefId, LocalDefId, LOCAL_CRATE};\n-use hir::map::definitions::DefPathHash;\n-use ich::{CachingSourceMapView, Fingerprint};\n-use mir::{self, interpret};\n-use mir::interpret::{AllocDecodingSession, AllocDecodingState};\n+use crate::dep_graph::{DepNodeIndex, SerializedDepNodeIndex};\n+use crate::errors::Diagnostic;\n+use crate::hir;\n+use crate::hir::def_id::{CrateNum, DefIndex, DefId, LocalDefId, LOCAL_CRATE};\n+use crate::hir::map::definitions::DefPathHash;\n+use crate::ich::{CachingSourceMapView, Fingerprint};\n+use crate::mir::{self, interpret};\n+use crate::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_data_structures::sync::{Lrc, Lock, HashMapExt, Once};\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n-use rustc_serialize::{Decodable, Decoder, Encodable, Encoder, opaque,\n+use crate::rustc_serialize::{Decodable, Decoder, Encodable, Encoder, opaque,\n                       SpecializedDecoder, SpecializedEncoder,\n                       UseSpecializedDecodable, UseSpecializedEncodable};\n-use session::{CrateDisambiguator, Session};\n+use crate::session::{CrateDisambiguator, Session};\n use std::mem;\n use syntax::ast::NodeId;\n use syntax::source_map::{SourceMap, StableSourceFileId};\n use syntax_pos::{BytePos, Span, DUMMY_SP, SourceFile};\n use syntax_pos::hygiene::{Mark, SyntaxContext, ExpnInfo};\n-use ty;\n-use ty::codec::{self as ty_codec, TyDecoder, TyEncoder};\n-use ty::context::TyCtxt;\n-use util::common::time;\n+use crate::ty;\n+use crate::ty::codec::{self as ty_codec, TyDecoder, TyEncoder};\n+use crate::ty::context::TyCtxt;\n+use crate::util::common::time;\n \n const TAG_FILE_FOOTER: u128 = 0xC0FFEE_C0FFEE_C0FFEE_C0FFEE_C0FFEE;\n \n@@ -202,7 +202,7 @@ impl<'sess> OnDiskCache<'sess> {\n             let mut query_result_index = EncodedQueryResultIndex::new();\n \n             time(tcx.sess, \"encode query results\", || {\n-                use ty::query::queries::*;\n+                use crate::ty::query::queries::*;\n                 let enc = &mut encoder;\n                 let qri = &mut query_result_index;\n \n@@ -225,11 +225,11 @@ impl<'sess> OnDiskCache<'sess> {\n                 encode_query_results::<specialization_graph_of<'_>, _>(tcx, enc, qri)?;\n \n                 // const eval is special, it only encodes successfully evaluated constants\n-                use ty::query::QueryAccessors;\n+                use crate::ty::query::QueryAccessors;\n                 let cache = const_eval::query_cache(tcx).borrow();\n                 assert!(cache.active.is_empty());\n                 for (key, entry) in cache.results.iter() {\n-                    use ty::query::config::QueryDescription;\n+                    use crate::ty::query::config::QueryDescription;\n                     if const_eval::cache_on_disk(tcx, key.clone()) {\n                         if let Ok(ref value) = entry.value {\n                             let dep_node = SerializedDepNodeIndex::new(entry.index.index());\n@@ -777,7 +777,7 @@ impl<'enc, 'a, 'tcx, E> CacheEncoder<'enc, 'a, 'tcx, E>\n                                                  value: &V)\n                                                  -> Result<(), E::Error>\n     {\n-        use ty::codec::TyEncoder;\n+        use crate::ty::codec::TyEncoder;\n         let start_pos = self.position();\n \n         tag.encode(self)?;"}, {"sha": "a26b21a1059fe4cfb2a209931c9eaec21293b2c4", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -2,19 +2,19 @@\n //! that generate the actual methods on tcx which find and execute the\n //! provider, manage the caches, and so forth.\n \n-use dep_graph::{DepNodeIndex, DepNode, DepKind, SerializedDepNodeIndex};\n-use errors::DiagnosticBuilder;\n-use errors::Level;\n-use errors::Diagnostic;\n-use errors::FatalError;\n-use ty::tls;\n-use ty::{TyCtxt};\n-use ty::query::Query;\n-use ty::query::config::{QueryConfig, QueryDescription};\n-use ty::query::job::{QueryJob, QueryResult, QueryInfo};\n-use ty::item_path;\n-\n-use util::common::{profq_msg, ProfileQueriesMsg, QueryMsg};\n+use crate::dep_graph::{DepNodeIndex, DepNode, DepKind, SerializedDepNodeIndex};\n+use crate::errors::DiagnosticBuilder;\n+use crate::errors::Level;\n+use crate::errors::Diagnostic;\n+use crate::errors::FatalError;\n+use crate::ty::tls;\n+use crate::ty::{TyCtxt};\n+use crate::ty::query::Query;\n+use crate::ty::query::config::{QueryConfig, QueryDescription};\n+use crate::ty::query::job::{QueryJob, QueryResult, QueryInfo};\n+use crate::ty::item_path;\n+\n+use crate::util::common::{profq_msg, ProfileQueriesMsg, QueryMsg};\n \n use rustc_data_structures::fx::{FxHashMap};\n use rustc_data_structures::sync::{Lrc, Lock};\n@@ -160,7 +160,7 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n             // thread\n             #[cfg(parallel_compiler)]\n             {\n-                if let Err(cycle) = job.await(tcx, span) {\n+                if let Err(cycle) = job.r#await(tcx, span) {\n                     return TryGetJob::JobCompleted(Err(cycle));\n                 }\n             }\n@@ -367,7 +367,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         // Fast path for when incr. comp. is off. `to_dep_node` is\n         // expensive for some DepKinds.\n         if !self.dep_graph.is_fully_enabled() {\n-            let null_dep_node = DepNode::new_no_params(::dep_graph::DepKind::Null);\n+            let null_dep_node = DepNode::new_no_params(crate::dep_graph::DepKind::Null);\n             return Ok(self.force_query_with_job::<Q>(key, job, null_dep_node).0);\n         }\n \n@@ -500,7 +500,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         dep_node_index: DepNodeIndex,\n     ) {\n         use rustc_data_structures::stable_hasher::{StableHasher, HashStable};\n-        use ich::Fingerprint;\n+        use crate::ich::Fingerprint;\n \n         assert!(Some(self.dep_graph.fingerprint_of(dep_node_index)) ==\n                 self.dep_graph.prev_fingerprint_of(dep_node),\n@@ -566,7 +566,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             self.dep_graph.mark_loaded_from_cache(dep_node_index, false);\n         }\n \n-        if dep_node.kind != ::dep_graph::DepKind::Null {\n+        if dep_node.kind != crate::dep_graph::DepKind::Null {\n             if unlikely!(!diagnostics.is_empty()) {\n                 self.queries.on_disk_cache\n                     .store_diagnostics(dep_node_index, diagnostics);\n@@ -698,13 +698,13 @@ macro_rules! define_queries_inner {\n         #[cfg(parallel_compiler)]\n         use ty::query::job::QueryResult;\n         use rustc_data_structures::sync::Lock;\n-        use {\n+        use crate::{\n             rustc_data_structures::stable_hasher::HashStable,\n             rustc_data_structures::stable_hasher::StableHasherResult,\n             rustc_data_structures::stable_hasher::StableHasher,\n             ich::StableHashingContext\n         };\n-        use util::profiling::ProfileCategory;\n+        use crate::util::profiling::ProfileCategory;\n \n         define_queries_struct! {\n             tcx: $tcx,\n@@ -947,7 +947,7 @@ macro_rules! define_queries_inner {\n             #[allow(unused)]\n             #[inline(always)]\n             fn to_dep_node(tcx: TyCtxt<'_, $tcx, '_>, key: &Self::Key) -> DepNode {\n-                use dep_graph::DepConstructor::*;\n+                use crate::dep_graph::DepConstructor::*;\n \n                 DepNode::new(tcx, $node(*key))\n             }\n@@ -1127,7 +1127,7 @@ macro_rules! define_provider_struct {\n pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n                                            dep_node: &DepNode)\n                                            -> bool {\n-    use hir::def_id::LOCAL_CRATE;\n+    use crate::hir::def_id::LOCAL_CRATE;\n \n     // We must avoid ever having to call force_from_dep_node() for a\n     // DepNode::CodegenUnit:\n@@ -1167,7 +1167,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n     macro_rules! force {\n         ($query:ident, $key:expr) => {\n             {\n-                tcx.force_query::<::ty::query::queries::$query<'_>>($key, DUMMY_SP, *dep_node);\n+                tcx.force_query::<crate::ty::query::queries::$query<'_>>($key, DUMMY_SP, *dep_node);\n             }\n         }\n     };\n@@ -1437,8 +1437,8 @@ macro_rules! impl_load_from_cache {\n             // Check whether the query invocation corresponding to the given\n             // DepNode is eligible for on-disk-caching.\n             pub fn cache_on_disk(&self, tcx: TyCtxt<'_, '_, '_>) -> bool {\n-                use ty::query::queries;\n-                use ty::query::QueryDescription;\n+                use crate::ty::query::queries;\n+                use crate::ty::query::QueryDescription;\n \n                 match self.kind {\n                     $(DepKind::$dep_kind => {"}, {"sha": "11f55208d6e48ba1ed762cd0945290fe4362db7d", "filename": "src/librustc/ty/query/values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fquery%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fquery%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fvalues.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,4 +1,4 @@\n-use ty::{self, Ty, TyCtxt};\n+use crate::ty::{self, Ty, TyCtxt};\n \n use syntax::symbol::Symbol;\n "}, {"sha": "3dbd0dc1d97f7dbd86280f3e58f7bb15a4a54fa2", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -4,18 +4,18 @@\n //! types or regions but can be other things. Examples of type relations are\n //! subtyping, type equality, etc.\n \n-use hir::def_id::DefId;\n-use ty::subst::{Kind, UnpackedKind, Substs};\n-use ty::{self, Ty, TyCtxt, TypeFoldable};\n-use ty::error::{ExpectedFound, TypeError};\n-use mir::interpret::GlobalId;\n-use util::common::ErrorReported;\n+use crate::hir::def_id::DefId;\n+use crate::ty::subst::{Kind, UnpackedKind, Substs};\n+use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::error::{ExpectedFound, TypeError};\n+use crate::mir::interpret::GlobalId;\n+use crate::util::common::ErrorReported;\n use syntax_pos::DUMMY_SP;\n use std::rc::Rc;\n use std::iter;\n use rustc_target::spec::abi;\n-use hir as ast;\n-use traits;\n+use crate::hir as ast;\n+use crate::traits;\n \n pub type RelateResult<'tcx, T> = Result<T, TypeError<'tcx>>;\n \n@@ -588,7 +588,7 @@ impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::ExistentialPredicate<'tcx>> {\n \n         let tcx = relation.tcx();\n         let v = a.iter().zip(b.iter()).map(|(ep_a, ep_b)| {\n-            use ty::ExistentialPredicate::*;\n+            use crate::ty::ExistentialPredicate::*;\n             match (*ep_a, *ep_b) {\n                 (Trait(ref a), Trait(ref b)) => Ok(Trait(relation.relate(a, b)?)),\n                 (Projection(ref a), Projection(ref b)) => Ok(Projection(relation.relate(a, b)?)),\n@@ -746,7 +746,7 @@ impl<'tcx> Relate<'tcx> for traits::WhereClause<'tcx> {\n     ) -> RelateResult<'tcx, traits::WhereClause<'tcx>>\n         where R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'tcx, 'tcx: 'a\n     {\n-        use traits::WhereClause::*;\n+        use crate::traits::WhereClause::*;\n         match (a, b) {\n             (Implemented(a_pred), Implemented(b_pred)) => {\n                 Ok(Implemented(relation.relate(a_pred, b_pred)?))\n@@ -783,7 +783,7 @@ impl<'tcx> Relate<'tcx> for traits::WellFormed<'tcx> {\n     ) -> RelateResult<'tcx, traits::WellFormed<'tcx>>\n         where R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'tcx, 'tcx: 'a\n     {\n-        use traits::WellFormed::*;\n+        use crate::traits::WellFormed::*;\n         match (a, b) {\n             (Trait(a_pred), Trait(b_pred)) => Ok(Trait(relation.relate(a_pred, b_pred)?)),\n             (Ty(a_ty), Ty(b_ty)) => Ok(Ty(relation.relate(a_ty, b_ty)?)),\n@@ -800,7 +800,7 @@ impl<'tcx> Relate<'tcx> for traits::FromEnv<'tcx> {\n     ) -> RelateResult<'tcx, traits::FromEnv<'tcx>>\n         where R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'tcx, 'tcx: 'a\n     {\n-        use traits::FromEnv::*;\n+        use crate::traits::FromEnv::*;\n         match (a, b) {\n             (Trait(a_pred), Trait(b_pred)) => Ok(Trait(relation.relate(a_pred, b_pred)?)),\n             (Ty(a_ty), Ty(b_ty)) => Ok(Ty(relation.relate(a_ty, b_ty)?)),\n@@ -817,7 +817,7 @@ impl<'tcx> Relate<'tcx> for traits::DomainGoal<'tcx> {\n     ) -> RelateResult<'tcx, traits::DomainGoal<'tcx>>\n         where R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'tcx, 'tcx: 'a\n     {\n-        use traits::DomainGoal::*;\n+        use crate::traits::DomainGoal::*;\n         match (a, b) {\n             (Holds(a_wc), Holds(b_wc)) => Ok(Holds(relation.relate(a_wc, b_wc)?)),\n             (WellFormed(a_wf), WellFormed(b_wf)) => Ok(WellFormed(relation.relate(a_wf, b_wf)?)),\n@@ -840,7 +840,7 @@ impl<'tcx> Relate<'tcx> for traits::Goal<'tcx> {\n     ) -> RelateResult<'tcx, traits::Goal<'tcx>>\n         where R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'tcx, 'tcx: 'a\n     {\n-        use traits::GoalKind::*;\n+        use crate::traits::GoalKind::*;\n         match (a, b) {\n             (Implies(a_clauses, a_goal), Implies(b_clauses, b_goal)) => {\n                 let clauses = relation.relate(a_clauses, b_clauses)?;\n@@ -904,7 +904,7 @@ impl<'tcx> Relate<'tcx> for traits::Clause<'tcx> {\n     ) -> RelateResult<'tcx, traits::Clause<'tcx>>\n         where R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'tcx, 'tcx: 'a\n     {\n-        use traits::Clause::*;\n+        use crate::traits::Clause::*;\n         match (a, b) {\n             (Implies(a_clause), Implies(b_clause)) => {\n                 let clause = relation.relate(a_clause, b_clause)?;"}, {"sha": "62a49238ebf3d71f0b2504a7a3e6ce1aeff2fa89", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -3,13 +3,13 @@\n //! hand, though we've recently added some macros (e.g.,\n //! `BraceStructLiftImpl!`) to help with the tedium.\n \n-use mir::ProjectionKind;\n-use mir::interpret::ConstValue;\n-use ty::{self, Lift, Ty, TyCtxt};\n-use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n+use crate::mir::ProjectionKind;\n+use crate::mir::interpret::ConstValue;\n+use crate::ty::{self, Lift, Ty, TyCtxt};\n+use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use smallvec::SmallVec;\n-use mir::interpret;\n+use crate::mir::interpret;\n \n use std::rc::Rc;\n \n@@ -23,35 +23,35 @@ CloneTypeFoldableAndLiftImpls! {\n     (),\n     bool,\n     usize,\n-    ::ty::layout::VariantIdx,\n+    crate::ty::layout::VariantIdx,\n     u64,\n     String,\n-    ::middle::region::Scope,\n+    crate::middle::region::Scope,\n     ::syntax::ast::FloatTy,\n     ::syntax::ast::NodeId,\n     ::syntax_pos::symbol::Symbol,\n-    ::hir::def::Def,\n-    ::hir::def_id::DefId,\n-    ::hir::InlineAsm,\n-    ::hir::MatchSource,\n-    ::hir::Mutability,\n-    ::hir::Unsafety,\n+    crate::hir::def::Def,\n+    crate::hir::def_id::DefId,\n+    crate::hir::InlineAsm,\n+    crate::hir::MatchSource,\n+    crate::hir::Mutability,\n+    crate::hir::Unsafety,\n     ::rustc_target::spec::abi::Abi,\n-    ::mir::Local,\n-    ::mir::Promoted,\n-    ::traits::Reveal,\n-    ::ty::adjustment::AutoBorrowMutability,\n-    ::ty::AdtKind,\n+    crate::mir::Local,\n+    crate::mir::Promoted,\n+    crate::traits::Reveal,\n+    crate::ty::adjustment::AutoBorrowMutability,\n+    crate::ty::AdtKind,\n     // Including `BoundRegion` is a *bit* dubious, but direct\n     // references to bound region appear in `ty::Error`, and aren't\n     // really meant to be folded. In general, we can only fold a fully\n     // general `Region`.\n-    ::ty::BoundRegion,\n-    ::ty::ClosureKind,\n-    ::ty::IntVarValue,\n-    ::ty::ParamTy,\n-    ::ty::UniverseIndex,\n-    ::ty::Variance,\n+    crate::ty::BoundRegion,\n+    crate::ty::ClosureKind,\n+    crate::ty::IntVarValue,\n+    crate::ty::ParamTy,\n+    crate::ty::UniverseIndex,\n+    crate::ty::Variance,\n     ::syntax_pos::Span,\n }\n \n@@ -421,7 +421,7 @@ impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for ty::error::ExpectedFound<T> {\n impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n     type Lifted = ty::error::TypeError<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n-        use ty::error::TypeError::*;\n+        use crate::ty::error::TypeError::*;\n \n         Some(match *self {\n             Mismatch => Mismatch,\n@@ -651,7 +651,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ProjectionKind<'tcx>> {\n \n impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        use ty::InstanceDef::*;\n+        use crate::ty::InstanceDef::*;\n         Self {\n             substs: self.substs.fold_with(folder),\n             def: match self.def {\n@@ -682,7 +682,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        use ty::InstanceDef::*;\n+        use crate::ty::InstanceDef::*;\n         self.substs.visit_with(visitor) ||\n         match self.def {\n             Item(did) | VtableShim(did) | Intrinsic(did) | Virtual(did, _) => {"}, {"sha": "790cc15ca17b68281a6a91960e7b219bb032c8ad", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,17 +1,17 @@\n //! This module contains `TyKind` and its major components.\n \n-use hir;\n-use hir::def_id::DefId;\n-use infer::canonical::Canonical;\n-use mir::interpret::ConstValue;\n-use middle::region;\n+use crate::hir;\n+use crate::hir::def_id::DefId;\n+use crate::infer::canonical::Canonical;\n+use crate::mir::interpret::ConstValue;\n+use crate::middle::region;\n use polonius_engine::Atom;\n use rustc_data_structures::indexed_vec::Idx;\n-use ty::subst::{Substs, Subst, Kind, UnpackedKind};\n-use ty::{self, AdtDef, TypeFlags, Ty, TyCtxt, TypeFoldable};\n-use ty::{List, TyS, ParamEnvAnd, ParamEnv};\n-use util::captures::Captures;\n-use mir::interpret::{Scalar, Pointer};\n+use crate::ty::subst::{Substs, Subst, Kind, UnpackedKind};\n+use crate::ty::{self, AdtDef, TypeFlags, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{List, TyS, ParamEnvAnd, ParamEnv};\n+use crate::util::captures::Captures;\n+use crate::mir::interpret::{Scalar, Pointer};\n \n use smallvec::SmallVec;\n use std::iter;\n@@ -550,7 +550,7 @@ impl<'a, 'gcx, 'tcx> ExistentialPredicate<'tcx> {\n impl<'a, 'gcx, 'tcx> Binder<ExistentialPredicate<'tcx>> {\n     pub fn with_self_ty(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, self_ty: Ty<'tcx>)\n         -> ty::Predicate<'tcx> {\n-        use ty::ToPredicate;\n+        use crate::ty::ToPredicate;\n         match *self.skip_binder() {\n             ExistentialPredicate::Trait(tr) => Binder(tr).with_self_ty(tcx, self_ty).to_predicate(),\n             ExistentialPredicate::Projection(p) =>"}, {"sha": "d7c322d0f840285c127e81dba83fb64c5895286c", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,9 +1,9 @@\n // Type substitutions.\n \n-use hir::def_id::DefId;\n-use infer::canonical::Canonical;\n-use ty::{self, Lift, List, Ty, TyCtxt};\n-use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n+use crate::hir::def_id::DefId;\n+use crate::infer::canonical::Canonical;\n+use crate::ty::{self, Lift, List, Ty, TyCtxt};\n+use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n \n use serialize::{self, Encodable, Encoder, Decodable, Decoder};\n use syntax_pos::{Span, DUMMY_SP};"}, {"sha": "5429a2504b97b24113dfb5fb596c6ab83951abd0", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,11 +1,11 @@\n-use hir;\n-use hir::def_id::DefId;\n-use hir::map::DefPathHash;\n-use ich::{self, StableHashingContext};\n-use traits::specialization_graph;\n-use ty::fast_reject;\n-use ty::fold::TypeFoldable;\n-use ty::{Ty, TyCtxt};\n+use crate::hir;\n+use crate::hir::def_id::DefId;\n+use crate::hir::map::DefPathHash;\n+use crate::ich::{self, StableHashingContext};\n+use crate::traits::specialization_graph;\n+use crate::ty::fast_reject;\n+use crate::ty::fold::TypeFoldable;\n+use crate::ty::{Ty, TyCtxt};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,"}, {"sha": "61544932b4329570abb5903c3ca47d297cd4f1d6", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,18 +1,18 @@\n //! misc. type-system utilities too small to deserve their own file\n \n-use hir::def::Def;\n-use hir::def_id::DefId;\n-use hir::map::DefPathData;\n-use hir::{self, Node};\n-use ich::NodeIdHashingMode;\n-use traits::{self, ObligationCause};\n-use ty::{self, Ty, TyCtxt, GenericParamDefKind, TypeFoldable};\n-use ty::subst::{Subst, Substs, UnpackedKind};\n-use ty::query::TyCtxtAt;\n-use ty::TyKind::*;\n-use ty::layout::{Integer, IntegerExt};\n-use util::common::ErrorReported;\n-use middle::lang_items;\n+use crate::hir::def::Def;\n+use crate::hir::def_id::DefId;\n+use crate::hir::map::DefPathData;\n+use crate::hir::{self, Node};\n+use crate::ich::NodeIdHashingMode;\n+use crate::traits::{self, ObligationCause};\n+use crate::ty::{self, Ty, TyCtxt, GenericParamDefKind, TypeFoldable};\n+use crate::ty::subst::{Subst, Substs, UnpackedKind};\n+use crate::ty::query::TyCtxtAt;\n+use crate::ty::TyKind::*;\n+use crate::ty::layout::{Integer, IntegerExt};\n+use crate::util::common::ErrorReported;\n+use crate::middle::lang_items;\n \n use rustc_data_structures::stable_hasher::{StableHasher, HashStable};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};"}, {"sha": "126f5290af51389f55921de490e7c458051b869c", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,7 +1,7 @@\n //! An iterator over the type substructure.\n //! WARNING: this does not keep track of the region depth.\n \n-use ty::{self, Ty};\n+use crate::ty::{self, Ty};\n use smallvec::{self, SmallVec};\n \n // The TypeWalker's stack is hot enough that it's worth going to some effort to"}, {"sha": "2aae953c1c40a7c35e18e54a98b1b8b80004043c", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,12 +1,12 @@\n-use hir::def_id::DefId;\n-use infer::InferCtxt;\n-use ty::subst::Substs;\n-use traits;\n-use ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use crate::hir::def_id::DefId;\n+use crate::infer::InferCtxt;\n+use crate::ty::subst::Substs;\n+use crate::traits;\n+use crate::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use std::iter::once;\n use syntax::ast;\n use syntax_pos::Span;\n-use middle::lang_items;\n+use crate::middle::lang_items;\n \n /// Returns the set of obligations needed to make `ty` well-formed.\n /// If `ty` contains unresolved inference variables, this may include"}, {"sha": "02ddfab6d826e44c5030c669c7aba8fcd83d2a0d", "filename": "src/librustc/util/bug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Futil%2Fbug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Futil%2Fbug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fbug.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,6 +1,6 @@\n // These functions are used by macro expansion for bug! and span_bug!\n \n-use ty::tls;\n+use crate::ty::tls;\n use std::fmt;\n use syntax_pos::{Span, MultiSpan};\n "}, {"sha": "f6743ed75d92ea0507293a1f6899471e9f4ceafc", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -12,10 +12,10 @@ use std::time::{Duration, Instant};\n \n use std::sync::mpsc::{Sender};\n use syntax_pos::{SpanData};\n-use ty::TyCtxt;\n-use dep_graph::{DepNode};\n+use crate::ty::TyCtxt;\n+use crate::dep_graph::{DepNode};\n use lazy_static;\n-use session::Session;\n+use crate::session::Session;\n \n // The name of the associated type for `Fn` return types\n pub const FN_OUTPUT_NAME: &str = \"Output\";"}, {"sha": "6969b2f872ade293b0d0a57266bf7eddb58dc8c3", "filename": "src/librustc/util/nodemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Futil%2Fnodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Futil%2Fnodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fnodemap.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,7 +1,7 @@\n //! An efficient hash map for node IDs\n \n-use hir::def_id::DefId;\n-use hir::{HirId, ItemLocalId};\n+use crate::hir::def_id::DefId;\n+use crate::hir::{HirId, ItemLocalId};\n use syntax::ast;\n \n pub use rustc_data_structures::fx::FxHashMap;"}, {"sha": "2cd82d44af3aa863ac7793277e8516a88f07af66", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,15 +1,15 @@\n-use hir::def_id::DefId;\n-use hir::map::definitions::DefPathData;\n-use middle::region;\n-use ty::subst::{self, Subst};\n-use ty::{BrAnon, BrEnv, BrFresh, BrNamed};\n-use ty::{Bool, Char, Adt};\n-use ty::{Error, Str, Array, Slice, Float, FnDef, FnPtr};\n-use ty::{Param, Bound, RawPtr, Ref, Never, Tuple};\n-use ty::{Closure, Generator, GeneratorWitness, Foreign, Projection, Opaque};\n-use ty::{Placeholder, UnnormalizedProjection, Dynamic, Int, Uint, Infer};\n-use ty::{self, Ty, TyCtxt, TypeFoldable, GenericParamCount, GenericParamDefKind};\n-use util::nodemap::FxHashSet;\n+use crate::hir::def_id::DefId;\n+use crate::hir::map::definitions::DefPathData;\n+use crate::middle::region;\n+use crate::ty::subst::{self, Subst};\n+use crate::ty::{BrAnon, BrEnv, BrFresh, BrNamed};\n+use crate::ty::{Bool, Char, Adt};\n+use crate::ty::{Error, Str, Array, Slice, Float, FnDef, FnPtr};\n+use crate::ty::{Param, Bound, RawPtr, Ref, Never, Tuple};\n+use crate::ty::{Closure, Generator, GeneratorWitness, Foreign, Projection, Opaque};\n+use crate::ty::{Placeholder, UnnormalizedProjection, Dynamic, Int, Uint, Infer};\n+use crate::ty::{self, Ty, TyCtxt, TypeFoldable, GenericParamCount, GenericParamDefKind};\n+use crate::util::nodemap::FxHashSet;\n \n use std::cell::Cell;\n use std::fmt;\n@@ -18,7 +18,7 @@ use std::usize;\n use rustc_target::spec::abi::Abi;\n use syntax::ast::CRATE_NODE_ID;\n use syntax::symbol::{Symbol, InternedString};\n-use hir;\n+use crate::hir;\n \n /// The \"region highlights\" are used to control region printing during\n /// specific error messages. When a \"region highlight\" is enabled, it"}, {"sha": "0e03946f82a5cafd4feb24495cc4fa694a658ee0", "filename": "src/librustc/util/profiling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Futil%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b157b23c280c92c056f9018187de1798aba88b/src%2Flibrustc%2Futil%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fprofiling.rs?ref=26b157b23c280c92c056f9018187de1798aba88b", "patch": "@@ -1,4 +1,4 @@\n-use session::config::Options;\n+use crate::session::config::Options;\n \n use std::fs;\n use std::io::{self, StderrLock, Write};"}]}