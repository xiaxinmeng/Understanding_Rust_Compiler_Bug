{"sha": "1cbed5ca3501e139babeaedf54cdc609cfbc9e02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjYmVkNWNhMzUwMWUxMzliYWJlYWVkZjU0Y2RjNjA5Y2ZiYzllMDI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-24T13:07:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-24T13:07:22Z"}, "message": "Merge pull request #483 from apoelstra/2018-10-readme\n\nimprove README instructions for using `rustup` and for compiling separate crates", "tree": {"sha": "d40e633931d56d3d230350ae9a02aad096e96035", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d40e633931d56d3d230350ae9a02aad096e96035"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cbed5ca3501e139babeaedf54cdc609cfbc9e02", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb0G6KCRBK7hj4Ov3rIwAAdHIIAJmxar86PM10e0MAyX/zgfGM\nbAoG76RijT0kqyRadj2aKnhsIgduozr+JysXlzwAaTbAULIr/gQRIM3lTItrAWTF\nufOelIZiQA2M8Ow/rNw3wf/GK3Fx3co1SxyI0lZ2nyySCzMGQkb2mkbBwd7EcdO0\nruX4TKt/66ee68uhvjiI87oCcGjH1sP8vzCMXWDc6COrmTQFWVTRBQGMv7KtmJXR\nyminl1+ewGF08Xxd3Ex7iaTVG0ZZEtNn0WaQcH830pDgQdO2NnV2esFzsoVnP1rQ\nVcs2biFeqCXgPJ/Nz8b9boFLj8aQgMCi5SpZ60+pFIhzAZZG39M+5neDdJE2LEM=\n=VYMH\n-----END PGP SIGNATURE-----\n", "payload": "tree d40e633931d56d3d230350ae9a02aad096e96035\nparent 25d7e1937ee1f9d90c9a8e643785dc2dc06d9658\nparent 5347411a2deb9a34a5b680c8186fb7eec8e9c02e\nauthor Ralf Jung <post@ralfj.de> 1540386442 +0200\ncommitter GitHub <noreply@github.com> 1540386442 +0200\n\nMerge pull request #483 from apoelstra/2018-10-readme\n\nimprove README instructions for using `rustup` and for compiling separate crates"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cbed5ca3501e139babeaedf54cdc609cfbc9e02", "html_url": "https://github.com/rust-lang/rust/commit/1cbed5ca3501e139babeaedf54cdc609cfbc9e02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cbed5ca3501e139babeaedf54cdc609cfbc9e02/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25d7e1937ee1f9d90c9a8e643785dc2dc06d9658", "url": "https://api.github.com/repos/rust-lang/rust/commits/25d7e1937ee1f9d90c9a8e643785dc2dc06d9658", "html_url": "https://github.com/rust-lang/rust/commit/25d7e1937ee1f9d90c9a8e643785dc2dc06d9658"}, {"sha": "5347411a2deb9a34a5b680c8186fb7eec8e9c02e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5347411a2deb9a34a5b680c8186fb7eec8e9c02e", "html_url": "https://github.com/rust-lang/rust/commit/5347411a2deb9a34a5b680c8186fb7eec8e9c02e"}], "stats": {"total": 61, "additions": 44, "deletions": 17}, "files": [{"sha": "095af11627fac47e7647f2b5cd4b5a2f70a46a59", "filename": ".travis.yml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1cbed5ca3501e139babeaedf54cdc609cfbc9e02/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/1cbed5ca3501e139babeaedf54cdc609cfbc9e02/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=1cbed5ca3501e139babeaedf54cdc609cfbc9e02", "patch": "@@ -18,9 +18,8 @@ before_script:\n   if [ \"$TRAVIS_EVENT_TYPE\" = cron ]; then\n     RUST_TOOLCHAIN=nightly\n   else\n-    RUST_TOOLCHAIN=$(cat rust-toolchain)\n+    RUST_TOOLCHAIN=$(cat rust-version)\n   fi\n-- rm rust-toolchain\n # install Rust\n - curl https://build.travis-ci.org/files/rustup-init.sh -sSf | sh -s -- -y --default-toolchain \"$RUST_TOOLCHAIN\"\n - export PATH=$HOME/.cargo/bin:$PATH"}, {"sha": "7597c9a0e11bd7716d9327593c8a0351f367036a", "filename": "README.md", "status": "modified", "additions": 42, "deletions": 14, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1cbed5ca3501e139babeaedf54cdc609cfbc9e02/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/1cbed5ca3501e139babeaedf54cdc609cfbc9e02/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=1cbed5ca3501e139babeaedf54cdc609cfbc9e02", "patch": "@@ -8,17 +8,19 @@ undergraduate research course at the [University of Saskatchewan][usask].\n ## Building Miri\n \n I recommend that you install [rustup][rustup] to obtain Rust.  Miri comes with a\n-`rust-toolchain` file so rustup will automatically pick a suitable nightly\n-version.  Then all you have to do is:\n+`rust-version` file describing the latest supported nightly version of the Rust\n+compiler toolchain. Then all you have to do is:\n \n ```sh\n-cargo build\n+cargo +nightly build\n ```\n \n+with `+nightly` replaced with the appropriate nightly version of Rust.\n+\n ## Running Miri\n \n ```sh\n-cargo run tests/run-pass/vecs.rs # Or whatever test you like.\n+cargo +nightly run tests/run-pass/vecs.rs # Or whatever test you like.\n ```\n \n ## Running Miri with full libstd\n@@ -28,15 +30,15 @@ Miri hits a call to such a function, execution terminates. To fix this, it is\n possible to compile libstd with full MIR:\n \n ```sh\n-rustup component add rust-src\n-cargo install xargo\n-xargo/build.sh\n+rustup component add --toolchain nightly rust-src\n+cargo +nightly install xargo\n+rustup run nightly xargo/build.sh\n ```\n \n Now you can run Miri against the libstd compiled by xargo:\n \n ```sh\n-MIRI_SYSROOT=~/.xargo/HOST cargo run tests/run-pass-fullmir/hashmap.rs\n+MIRI_SYSROOT=~/.xargo/HOST cargo +nightly run tests/run-pass-fullmir/hashmap.rs\n ```\n \n Notice that you will have to re-run the last step of the preparations above when\n@@ -47,13 +49,39 @@ You can also set `-Zmiri-start-fn` to make Miri start evaluation with the\n \n ## Running Miri on your own project('s test suite)\n \n-Install Miri as a cargo subcommand with `cargo install --all-features`, and install\n-a full libstd as described above.\n+Install Miri as a cargo subcommand with `cargo install +nightly --all-features --path .`.\n+\n+Compile your project and its dependencies against a MIR-enabled libstd as described\n+above:\n+\n+1. Run `cargo clean` to eliminate any cached dependencies that were built against\n+the non-MIR `libstd`.\n+2. To run all tests in your project through, Miri, use\n+`MIRI_SYSROOT=~/.xargo/HOST cargo +nightly miri test`.\n+3. If you have a binary project, you can run it through Miri using\n+`MIRI_SYSROOT=~/.xargo/HOST cargo +nightly miri`.\n+\n+### Common Problems\n+\n+When using the above instructions, you may encounter a number of confusing compiler\n+errors.\n+\n+#### \"constant evaluation error: no mir for `<function>`\"\n+\n+You may have forgotten to set `MIRI_SYSROOT` when calling `cargo miri`, and\n+your program called into `std` or `core`. Be sure to set `MIRI_SYSROOT=~/.xargo/HOST`.\n+\n+#### \"found possibly newer version of crate `std` which `<dependency>` depends on\"\n+\n+Your build directory may contain artifacts from an earlier build that did/did not\n+have `MIRI_SYSROOT` set. Run `cargo clean` before switching from non-Miri to Miri\n+builds and vice-versa.\n+\n+#### \"found crate `std` compiled by an incompatible version of rustc\"\n \n-Then, inside your own project, use `MIRI_SYSROOT=~/.xargo/HOST cargo +nightly\n-miri` to run your project, if it is a bin project, or run\n-`MIRI_SYSROOT=~/.xargo/HOST cargo +nightly miri test` to run all tests in your\n-project through Miri.\n+You may be running `cargo miri` with a different compiler version than the one\n+used to build the MIR-enabled `std`. Be sure to consistently use the same toolchain,\n+which should be the toolchain specified in the `rust-version` file.\n \n ## Miri `-Z` flags\n "}, {"sha": "cf578120c9ddf5937f1cd90db3362743c97b80dc", "filename": "appveyor.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cbed5ca3501e139babeaedf54cdc609cfbc9e02/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/1cbed5ca3501e139babeaedf54cdc609cfbc9e02/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=1cbed5ca3501e139babeaedf54cdc609cfbc9e02", "patch": "@@ -16,7 +16,7 @@ branches:\n install:\n     # install Rust\n     - set PATH=C:\\Program Files\\Git\\mingw64\\bin;C:\\msys64\\mingw%MSYS2_BITS%\\bin;%PATH%\n-    - set /p RUST_TOOLCHAIN=<rust-toolchain\n+    - set /p RUST_TOOLCHAIN=<rust-version\n     - curl -sSf -o rustup-init.exe https://win.rustup.rs/\n     - rustup-init.exe -y --default-host %TARGET% --default-toolchain %RUST_TOOLCHAIN%\n     - set PATH=%USERPROFILE%\\.cargo\\bin;%PATH%"}, {"sha": "cc0787f877e6f8f180f944ad750a0d5f7ece4ff7", "filename": "rust-version", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1cbed5ca3501e139babeaedf54cdc609cfbc9e02/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/1cbed5ca3501e139babeaedf54cdc609cfbc9e02/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=1cbed5ca3501e139babeaedf54cdc609cfbc9e02", "previous_filename": "rust-toolchain"}]}