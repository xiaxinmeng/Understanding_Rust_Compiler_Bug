{"sha": "9248d90d20601e9d489a4a1c21df9de686b9fd82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNDhkOTBkMjA2MDFlOWQ0ODlhNGExYzIxZGY5ZGU2ODZiOWZkODI=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-06-22T00:55:06Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-07-03T01:02:57Z"}, "message": "[mir-opt] Prevent mis-optimization when SimplifyArmIdentity runs\n\nIf temporaries are used beyond just the temporary chain, then we can't\noptimize out the reads and writes.", "tree": {"sha": "8b81670b8dea43158681dd4b7e5a7f4aeb1f167c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b81670b8dea43158681dd4b7e5a7f4aeb1f167c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9248d90d20601e9d489a4a1c21df9de686b9fd82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9248d90d20601e9d489a4a1c21df9de686b9fd82", "html_url": "https://github.com/rust-lang/rust/commit/9248d90d20601e9d489a4a1c21df9de686b9fd82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9248d90d20601e9d489a4a1c21df9de686b9fd82/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3f599c15cceb38159a5690a21befbe7f36f5914", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3f599c15cceb38159a5690a21befbe7f36f5914", "html_url": "https://github.com/rust-lang/rust/commit/e3f599c15cceb38159a5690a21befbe7f36f5914"}], "stats": {"total": 289, "additions": 192, "deletions": 97}, "files": [{"sha": "0abaa2175e1410070d50a874fe0cfade125f4785", "filename": "src/librustc_mir/transform/simplify_try.rs", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9248d90d20601e9d489a4a1c21df9de686b9fd82/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9248d90d20601e9d489a4a1c21df9de686b9fd82/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs?ref=9248d90d20601e9d489a4a1c21df9de686b9fd82", "patch": "@@ -12,6 +12,7 @@\n use crate::transform::{simplify, MirPass, MirSource};\n use itertools::Itertools as _;\n use rustc_index::vec::IndexVec;\n+use rustc_middle::mir::visit::{PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::{Ty, TyCtxt};\n use rustc_target::abi::VariantIdx;\n@@ -75,7 +76,9 @@ struct ArmIdentityInfo<'tcx> {\n     stmts_to_remove: Vec<usize>,\n }\n \n-fn get_arm_identity_info<'a, 'tcx>(stmts: &'a [Statement<'tcx>]) -> Option<ArmIdentityInfo<'tcx>> {\n+fn get_arm_identity_info<'a, 'tcx>(\n+    stmts: &'a [Statement<'tcx>],\n+) -> Option<ArmIdentityInfo<'tcx>> {\n     // This can't possibly match unless there are at least 3 statements in the block\n     // so fail fast on tiny blocks.\n     if stmts.len() < 3 {\n@@ -249,6 +252,7 @@ fn get_arm_identity_info<'a, 'tcx>(stmts: &'a [Statement<'tcx>]) -> Option<ArmId\n fn optimization_applies<'tcx>(\n     opt_info: &ArmIdentityInfo<'tcx>,\n     local_decls: &IndexVec<Local, LocalDecl<'tcx>>,\n+    local_uses: &IndexVec<Local, usize>,\n ) -> bool {\n     trace!(\"testing if optimization applies...\");\n \n@@ -285,6 +289,26 @@ fn optimization_applies<'tcx>(\n         last_assigned_to = *l;\n     }\n \n+    // Check that the first and last used locals are only used twice\n+    // since they are of the form:\n+    //\n+    // ```\n+    // _first = ((_x as Variant).n: ty);\n+    // _n = _first;\n+    // ...\n+    // ((_y as Variant).n: ty) = _n;\n+    // discriminant(_y) = z;\n+    // ```\n+    for (l, r) in &opt_info.field_tmp_assignments {\n+        if local_uses[*l] != 2 {\n+            warn!(\"NO: FAILED assignment chain local {:?} was used more than twice\", l);\n+            return false;\n+        } else if local_uses[*r] != 2 {\n+            warn!(\"NO: FAILED assignment chain local {:?} was used more than twice\", r);\n+            return false;\n+        }\n+    }\n+\n     if source_local != opt_info.local_temp_0 {\n         trace!(\n             \"NO: start of assignment chain does not match enum variant temp: {:?} != {:?}\",\n@@ -312,11 +336,12 @@ impl<'tcx> MirPass<'tcx> for SimplifyArmIdentity {\n         }\n \n         trace!(\"running SimplifyArmIdentity on {:?}\", source);\n+        let local_uses = LocalUseCounter::get_local_uses(body);\n         let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n         for bb in basic_blocks {\n             if let Some(opt_info) = get_arm_identity_info(&bb.statements) {\n                 trace!(\"got opt_info = {:#?}\", opt_info);\n-                if !optimization_applies(&opt_info, local_decls) {\n+                if !optimization_applies(&opt_info, local_decls, &local_uses) {\n                     debug!(\"optimization skipped for {:?}\", source);\n                     continue;\n                 }\n@@ -358,6 +383,28 @@ impl<'tcx> MirPass<'tcx> for SimplifyArmIdentity {\n     }\n }\n \n+struct LocalUseCounter {\n+    local_uses: IndexVec<Local, usize>,\n+}\n+\n+impl LocalUseCounter {\n+    fn get_local_uses<'tcx>(body: &Body<'tcx>) -> IndexVec<Local, usize> {\n+        let mut counter = LocalUseCounter { local_uses: IndexVec::from_elem(0, &body.local_decls) };\n+        counter.visit_body(body);\n+        counter.local_uses\n+    }\n+}\n+\n+impl<'tcx> Visitor<'tcx> for LocalUseCounter {\n+    fn visit_local(&mut self, local: &Local, context: PlaceContext, _location: Location) {\n+        if context.is_storage_marker() {\n+            return;\n+        }\n+\n+        self.local_uses[*local] += 1;\n+    }\n+}\n+\n /// Match on:\n /// ```rust\n /// _LOCAL_INTO = ((_LOCAL_FROM as Variant).FIELD: TY);"}, {"sha": "59c00e1b96f9669368f6f9e7df9c099834570ca8", "filename": "src/test/mir-opt/issue-73223/32bit/rustc.main.PreCodegen.diff", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9248d90d20601e9d489a4a1c21df9de686b9fd82/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.PreCodegen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9248d90d20601e9d489a4a1c21df9de686b9fd82/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.PreCodegen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.PreCodegen.diff?ref=9248d90d20601e9d489a4a1c21df9de686b9fd82", "patch": "@@ -3,9 +3,9 @@\n   \n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/issue-73223.rs:1:11: 1:11\n-      let _1: i32;                         // in scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n-      let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n-      let _3: i32;                         // in scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+      let mut _1: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+      let _2: i32;                         // in scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+      let mut _4: i32;                     // in scope 0 at $DIR/issue-73223.rs:7:22: 7:27\n       let mut _5: (&i32, &i32);            // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n       let mut _6: &i32;                    // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n       let mut _9: bool;                    // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n@@ -28,10 +28,10 @@\n       let mut _28: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n       let mut _29: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n       scope 1 {\n-          debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n-          let _4: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n+          debug split => _2;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n+          let _3: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n           scope 3 {\n-              debug _prev => _4;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n+              debug _prev => _3;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n               let _7: &i32;                // in scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n               let _8: &i32;                // in scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n               scope 4 {\n@@ -64,30 +64,34 @@\n           }\n       }\n       scope 2 {\n-          debug v => _3;                   // in scope 2 at $DIR/issue-73223.rs:3:14: 3:15\n+          debug v => _2;                   // in scope 2 at $DIR/issue-73223.rs:3:14: 3:15\n       }\n       scope 7 {\n       }\n       scope 9 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n-          StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n-          ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          ((_1 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000001))\n                                            // mir::Constant\n                                            // + span: $DIR/issue-73223.rs:2:28: 2:29\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-          discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n-          _4 = move _2;                    // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n-          StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n-          StorageLive(_4);                 // scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n+          discriminant(_1) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          _2 = ((_1 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n+          StorageLive(_3);                 // scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n+          StorageLive(_4);                 // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          _4 = _2;                         // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          ((_3 as Some).0: i32) = move _4; // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n+          discriminant(_3) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n+          StorageDead(_4);                 // scope 1 at $DIR/issue-73223.rs:7:27: 7:28\n           StorageLive(_5);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           StorageLive(_6);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n-          _6 = &_1;                        // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _6 = &_2;                        // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           (_5.0: &i32) = move _6;          // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           (_5.1: &i32) = const main::promoted[1]; // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n                                            // ty::Const\n@@ -127,8 +131,7 @@\n                                            // mir::Constant\n                                            // + span: $DIR/issue-73223.rs:1:11: 9:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_4);                 // scope 1 at $DIR/issue-73223.rs:9:1: 9:2\n-          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n+          StorageDead(_3);                 // scope 1 at $DIR/issue-73223.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n       }\n   "}, {"sha": "e5b4a0328808f45fbc6247a1e28825c75367d404", "filename": "src/test/mir-opt/issue-73223/32bit/rustc.main.SimplifyArmIdentity.diff", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9248d90d20601e9d489a4a1c21df9de686b9fd82/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9248d90d20601e9d489a4a1c21df9de686b9fd82/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.SimplifyArmIdentity.diff?ref=9248d90d20601e9d489a4a1c21df9de686b9fd82", "patch": "@@ -134,18 +134,17 @@\n       }\n   \n       bb2: {\n--         StorageLive(_4);                 // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n--         _4 = ((_2 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n--         _1 = _4;                         // scope 2 at $DIR/issue-73223.rs:3:20: 3:21\n--         StorageDead(_4);                 // scope 0 at $DIR/issue-73223.rs:3:21: 3:22\n-+         _6 = move _2;                    // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n+          StorageLive(_4);                 // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+          _4 = ((_2 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+          _1 = _4;                         // scope 2 at $DIR/issue-73223.rs:3:20: 3:21\n+          StorageDead(_4);                 // scope 0 at $DIR/issue-73223.rs:3:21: 3:22\n           StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n           StorageLive(_6);                 // scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n--         StorageLive(_7);                 // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n--         _7 = _1;                         // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n--         ((_6 as Some).0: i32) = move _7; // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n--         discriminant(_6) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n--         StorageDead(_7);                 // scope 1 at $DIR/issue-73223.rs:7:27: 7:28\n+          StorageLive(_7);                 // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          _7 = _1;                         // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          ((_6 as Some).0: i32) = move _7; // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n+          discriminant(_6) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n+          StorageDead(_7);                 // scope 1 at $DIR/issue-73223.rs:7:27: 7:28\n           StorageLive(_8);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           StorageLive(_9);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           StorageLive(_10);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL"}, {"sha": "59c00e1b96f9669368f6f9e7df9c099834570ca8", "filename": "src/test/mir-opt/issue-73223/64bit/rustc.main.PreCodegen.diff", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9248d90d20601e9d489a4a1c21df9de686b9fd82/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.PreCodegen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9248d90d20601e9d489a4a1c21df9de686b9fd82/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.PreCodegen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.PreCodegen.diff?ref=9248d90d20601e9d489a4a1c21df9de686b9fd82", "patch": "@@ -3,9 +3,9 @@\n   \n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/issue-73223.rs:1:11: 1:11\n-      let _1: i32;                         // in scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n-      let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n-      let _3: i32;                         // in scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+      let mut _1: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+      let _2: i32;                         // in scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+      let mut _4: i32;                     // in scope 0 at $DIR/issue-73223.rs:7:22: 7:27\n       let mut _5: (&i32, &i32);            // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n       let mut _6: &i32;                    // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n       let mut _9: bool;                    // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n@@ -28,10 +28,10 @@\n       let mut _28: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n       let mut _29: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n       scope 1 {\n-          debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n-          let _4: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n+          debug split => _2;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n+          let _3: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n           scope 3 {\n-              debug _prev => _4;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n+              debug _prev => _3;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n               let _7: &i32;                // in scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n               let _8: &i32;                // in scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n               scope 4 {\n@@ -64,30 +64,34 @@\n           }\n       }\n       scope 2 {\n-          debug v => _3;                   // in scope 2 at $DIR/issue-73223.rs:3:14: 3:15\n+          debug v => _2;                   // in scope 2 at $DIR/issue-73223.rs:3:14: 3:15\n       }\n       scope 7 {\n       }\n       scope 9 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n-          StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n-          ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          ((_1 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000001))\n                                            // mir::Constant\n                                            // + span: $DIR/issue-73223.rs:2:28: 2:29\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-          discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n-          _4 = move _2;                    // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n-          StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n-          StorageLive(_4);                 // scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n+          discriminant(_1) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          _2 = ((_1 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n+          StorageLive(_3);                 // scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n+          StorageLive(_4);                 // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          _4 = _2;                         // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          ((_3 as Some).0: i32) = move _4; // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n+          discriminant(_3) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n+          StorageDead(_4);                 // scope 1 at $DIR/issue-73223.rs:7:27: 7:28\n           StorageLive(_5);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           StorageLive(_6);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n-          _6 = &_1;                        // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _6 = &_2;                        // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           (_5.0: &i32) = move _6;          // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           (_5.1: &i32) = const main::promoted[1]; // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n                                            // ty::Const\n@@ -127,8 +131,7 @@\n                                            // mir::Constant\n                                            // + span: $DIR/issue-73223.rs:1:11: 9:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_4);                 // scope 1 at $DIR/issue-73223.rs:9:1: 9:2\n-          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n+          StorageDead(_3);                 // scope 1 at $DIR/issue-73223.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n       }\n   "}, {"sha": "0c2651dc3c68d21e4b5881bf7f6b29ba228cddce", "filename": "src/test/mir-opt/issue-73223/64bit/rustc.main.SimplifyArmIdentity.diff", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9248d90d20601e9d489a4a1c21df9de686b9fd82/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9248d90d20601e9d489a4a1c21df9de686b9fd82/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.SimplifyArmIdentity.diff?ref=9248d90d20601e9d489a4a1c21df9de686b9fd82", "patch": "@@ -134,18 +134,17 @@\n       }\n   \n       bb2: {\n--         StorageLive(_4);                 // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n--         _4 = ((_2 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n--         _1 = _4;                         // scope 2 at $DIR/issue-73223.rs:3:20: 3:21\n--         StorageDead(_4);                 // scope 0 at $DIR/issue-73223.rs:3:21: 3:22\n-+         _6 = move _2;                    // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n+          StorageLive(_4);                 // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+          _4 = ((_2 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+          _1 = _4;                         // scope 2 at $DIR/issue-73223.rs:3:20: 3:21\n+          StorageDead(_4);                 // scope 0 at $DIR/issue-73223.rs:3:21: 3:22\n           StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n           StorageLive(_6);                 // scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n--         StorageLive(_7);                 // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n--         _7 = _1;                         // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n--         ((_6 as Some).0: i32) = move _7; // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n--         discriminant(_6) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n--         StorageDead(_7);                 // scope 1 at $DIR/issue-73223.rs:7:27: 7:28\n+          StorageLive(_7);                 // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          _7 = _1;                         // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          ((_6 as Some).0: i32) = move _7; // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n+          discriminant(_6) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n+          StorageDead(_7);                 // scope 1 at $DIR/issue-73223.rs:7:27: 7:28\n           StorageLive(_8);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           StorageLive(_9);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           StorageLive(_10);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL"}, {"sha": "318b1b3f72a08ed750af7b5426ad25ac4739f14e", "filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads/32bit/rustc.map.SimplifyLocals.diff", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9248d90d20601e9d489a4a1c21df9de686b9fd82/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F32bit%2Frustc.map.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9248d90d20601e9d489a4a1c21df9de686b9fd82/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F32bit%2Frustc.map.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F32bit%2Frustc.map.SimplifyLocals.diff?ref=9248d90d20601e9d489a4a1c21df9de686b9fd82", "patch": "@@ -19,7 +19,9 @@\n       }\n   \n       bb1: {\n-          _0 = move _1;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:20: 4:27\n+          _3 = move ((_1 as Some).0: std::boxed::Box<()>); // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n+          ((_0 as Some).0: std::boxed::Box<()>) = move _3; // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:20: 4:27\n+          discriminant(_0) = 1;            // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:20: 4:27\n           goto -> bb3;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:2:5: 5:6\n       }\n   "}, {"sha": "ace471aaa3c820caaba79852c28ee7d5bc667d96", "filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads/64bit/rustc.map.SimplifyLocals.diff", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9248d90d20601e9d489a4a1c21df9de686b9fd82/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F64bit%2Frustc.map.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9248d90d20601e9d489a4a1c21df9de686b9fd82/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F64bit%2Frustc.map.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F64bit%2Frustc.map.SimplifyLocals.diff?ref=9248d90d20601e9d489a4a1c21df9de686b9fd82", "patch": "@@ -19,7 +19,9 @@\n       }\n   \n       bb1: {\n-          _0 = move _1;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:20: 4:27\n+          _3 = move ((_1 as Some).0: std::boxed::Box<()>); // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n+          ((_0 as Some).0: std::boxed::Box<()>) = move _3; // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:20: 4:27\n+          discriminant(_0) = 1;            // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:20: 4:27\n           goto -> bb3;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:2:5: 5:6\n       }\n   "}, {"sha": "2caff43bfb582053dd75fd326595d4a89c80eafc", "filename": "src/test/mir-opt/simplify_try/rustc.try_identity.SimplifyArmIdentity.diff", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9248d90d20601e9d489a4a1c21df9de686b9fd82/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9248d90d20601e9d489a4a1c21df9de686b9fd82/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyArmIdentity.diff?ref=9248d90d20601e9d489a4a1c21df9de686b9fd82", "patch": "@@ -50,37 +50,35 @@\n       }\n   \n       bb1: {\n--         StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n--         _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n--         _2 = _10;                        // scope 5 at $DIR/simplify_try.rs:6:13: 6:15\n--         StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-+         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n+          StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n+          _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n+          _2 = _10;                        // scope 5 at $DIR/simplify_try.rs:6:13: 6:15\n+          StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n           StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:6:15: 6:16\n--         StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:7:8: 7:9\n--         _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:7:8: 7:9\n--         ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n--         discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n--         StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:7:9: 7:10\n+          StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:7:8: 7:9\n+          _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:7:8: 7:9\n+          ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n+          discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n+          StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:7:9: 7:10\n           StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:8:1: 8:2\n           goto -> bb3;                     // scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n       }\n   \n       bb2: {\n--         StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n--         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n--         StorageLive(_8);                 // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n--         StorageLive(_9);                 // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n--         _9 = _6;                         // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n--         _8 = move _9;                    // scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n--         StorageDead(_9);                 // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n--         StorageLive(_12);                // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n--         _12 = move _8;                   // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n--         ((_0 as Err).0: i32) = move _12; // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n--         discriminant(_0) = 1;            // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n--         StorageDead(_12);                // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n--         StorageDead(_8);                 // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n--         StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-+         _0 = move _3;                    // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+          StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+          _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+          StorageLive(_8);                 // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n+          StorageLive(_9);                 // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n+          _9 = _6;                         // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n+          _8 = move _9;                    // scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+          StorageDead(_9);                 // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n+          StorageLive(_12);                // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+          _12 = move _8;                   // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+          ((_0 as Err).0: i32) = move _12; // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+          discriminant(_0) = 1;            // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+          StorageDead(_12);                // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+          StorageDead(_8);                 // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n+          StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n           StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:6:15: 6:16\n           StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:8:1: 8:2\n           goto -> bb3;                     // scope 0 at $DIR/simplify_try.rs:6:14: 6:15"}, {"sha": "5000a1ec36cc8c9db132a175de982ea40104dcfe", "filename": "src/test/mir-opt/simplify_try/rustc.try_identity.SimplifyBranchSame.after.mir", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9248d90d20601e9d489a4a1c21df9de686b9fd82/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyBranchSame.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9248d90d20601e9d489a4a1c21df9de686b9fd82/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyBranchSame.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyBranchSame.after.mir?ref=9248d90d20601e9d489a4a1c21df9de686b9fd82", "patch": "@@ -45,17 +45,45 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n         _3 = move _4;                    // scope 6 at $SRC_DIR/libcore/result.rs:LL:COL\n         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n         _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-        goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+        switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n     }\n \n     bb1: {\n-        _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n+        StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n+        _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n+        _2 = _10;                        // scope 5 at $DIR/simplify_try.rs:6:13: 6:15\n+        StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n         StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:6:15: 6:16\n+        StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:7:8: 7:9\n+        _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:7:8: 7:9\n+        ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n+        discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n+        StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:7:9: 7:10\n         StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:8:1: 8:2\n-        goto -> bb2;                     // scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n+        goto -> bb3;                     // scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n     }\n \n     bb2: {\n+        StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+        _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+        StorageLive(_8);                 // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n+        StorageLive(_9);                 // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n+        _9 = _6;                         // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n+        _8 = move _9;                    // scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+        StorageDead(_9);                 // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n+        StorageLive(_12);                // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+        _12 = move _8;                   // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+        ((_0 as Err).0: i32) = move _12; // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+        discriminant(_0) = 1;            // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+        StorageDead(_12);                // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+        StorageDead(_8);                 // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n+        StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+        StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:6:15: 6:16\n+        StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:8:1: 8:2\n+        goto -> bb3;                     // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+    }\n+\n+    bb3: {\n         return;                          // scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n     }\n }"}, {"sha": "77804c12691ee2ace9325a7578277378ac19b15d", "filename": "src/test/mir-opt/simplify_try/rustc.try_identity.SimplifyLocals.after.mir", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9248d90d20601e9d489a4a1c21df9de686b9fd82/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9248d90d20601e9d489a4a1c21df9de686b9fd82/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyLocals.after.mir?ref=9248d90d20601e9d489a4a1c21df9de686b9fd82", "patch": "@@ -3,27 +3,25 @@\n fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n     debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:5:17: 5:18\n     let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:5:41: 5:57\n-    let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:6:9: 6:10\n+    let mut _2: isize;                   // in scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n     let _3: i32;                         // in scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-    let mut _4: i32;                     // in scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-    let mut _5: i32;                     // in scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-    let _6: u32;                         // in scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n+    let _4: u32;                         // in scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n     scope 1 {\n-        debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n+        debug y => _4;                   // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n     }\n     scope 2 {\n         debug err => _3;                 // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n         scope 3 {\n             scope 7 {\n-                debug t => _5;           // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+                debug t => _3;           // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n             }\n             scope 8 {\n-                debug v => _4;           // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+                debug v => _3;           // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n             }\n         }\n     }\n     scope 4 {\n-        debug val => _6;                 // in scope 4 at $DIR/simplify_try.rs:6:13: 6:15\n+        debug val => _4;                 // in scope 4 at $DIR/simplify_try.rs:6:13: 6:15\n         scope 5 {\n         }\n     }\n@@ -32,9 +30,25 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:6:9: 6:10\n-        _0 = move _1;                    // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n-        StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:8:1: 8:2\n+        _2 = discriminant(_1);           // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+        switchInt(move _2) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+    }\n+\n+    bb1: {\n+        _4 = ((_1 as Ok).0: u32);        // scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n+        ((_0 as Ok).0: u32) = move _4;   // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n+        discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n+        goto -> bb3;                     // scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n+    }\n+\n+    bb2: {\n+        _3 = ((_1 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+        ((_0 as Err).0: i32) = move _3;  // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+        discriminant(_0) = 1;            // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+        goto -> bb3;                     // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+    }\n+\n+    bb3: {\n         return;                          // scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n     }\n }"}]}