{"sha": "f0bbc782ac11de6001eeec63e347427dbc639c04", "node_id": "C_kwDOAAsO6NoAKGYwYmJjNzgyYWMxMWRlNjAwMWVlZWM2M2UzNDc0MjdkYmM2MzljMDQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-26T03:14:38Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-26T22:15:05Z"}, "message": "Avoid producing `NoDelim` values in `TokenCursorFrame`.", "tree": {"sha": "4e46d615c4e2e18a7fc1ff654aebab3bbc874a22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e46d615c4e2e18a7fc1ff654aebab3bbc874a22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0bbc782ac11de6001eeec63e347427dbc639c04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0bbc782ac11de6001eeec63e347427dbc639c04", "html_url": "https://github.com/rust-lang/rust/commit/f0bbc782ac11de6001eeec63e347427dbc639c04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0bbc782ac11de6001eeec63e347427dbc639c04/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18b53cefdf7456bf68937b08e377b7e622a115c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/18b53cefdf7456bf68937b08e377b7e622a115c2", "html_url": "https://github.com/rust-lang/rust/commit/18b53cefdf7456bf68937b08e377b7e622a115c2"}], "stats": {"total": 37, "additions": 15, "deletions": 22}, "files": [{"sha": "e4370809ebc24023052bbf180083e56d5965c30b", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0bbc782ac11de6001eeec63e347427dbc639c04/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0bbc782ac11de6001eeec63e347427dbc639c04/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=f0bbc782ac11de6001eeec63e347427dbc639c04", "patch": "@@ -2043,7 +2043,8 @@ impl<'a> Parser<'a> {\n             self.sess.gated_spans.gate(sym::async_closure, span);\n         }\n \n-        if self.token.kind == TokenKind::Semi && self.token_cursor.frame.delim == DelimToken::Paren\n+        if self.token.kind == TokenKind::Semi\n+            && matches!(self.token_cursor.frame.delim_sp, Some((DelimToken::Paren, _)))\n         {\n             // It is likely that the closure body is a block but where the\n             // braces have been removed. We will recover and eat the next"}, {"sha": "dfe758d0cdf019406876e2f018699dd736c7a774", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f0bbc782ac11de6001eeec63e347427dbc639c04/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0bbc782ac11de6001eeec63e347427dbc639c04/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=f0bbc782ac11de6001eeec63e347427dbc639c04", "patch": "@@ -244,14 +244,13 @@ struct TokenCursor {\n \n #[derive(Clone)]\n struct TokenCursorFrame {\n-    delim: token::DelimToken,\n-    span: DelimSpan,\n+    delim_sp: Option<(DelimToken, DelimSpan)>,\n     tree_cursor: tokenstream::Cursor,\n }\n \n impl TokenCursorFrame {\n-    fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {\n-        TokenCursorFrame { delim, span, tree_cursor: tts.into_trees() }\n+    fn new(delim_sp: Option<(DelimToken, DelimSpan)>, tts: TokenStream) -> Self {\n+        TokenCursorFrame { delim_sp, tree_cursor: tts.into_trees() }\n     }\n }\n \n@@ -266,7 +265,7 @@ impl TokenCursor {\n         loop {\n             // FIXME: we currently don't return `NoDelim` open/close delims. To fix #67062 we will\n             // need to, whereupon the `delim != DelimToken::NoDelim` conditions below can be\n-            // removed, as well as the loop.\n+            // removed.\n             if let Some((tree, spacing)) = self.frame.tree_cursor.next_with_spacing_ref() {\n                 match tree {\n                     &TokenTree::Token(ref token) => match (desugar_doc_comments, token) {\n@@ -277,7 +276,7 @@ impl TokenCursor {\n                     },\n                     &TokenTree::Delimited(sp, delim, ref tts) => {\n                         // Set `open_delim` to true here because we deal with it immediately.\n-                        let frame = TokenCursorFrame::new(sp, delim, tts.clone());\n+                        let frame = TokenCursorFrame::new(Some((delim, sp)), tts.clone());\n                         self.stack.push(mem::replace(&mut self.frame, frame));\n                         if delim != DelimToken::NoDelim {\n                             return (Token::new(token::OpenDelim(delim), sp.open), Spacing::Alone);\n@@ -286,12 +285,11 @@ impl TokenCursor {\n                     }\n                 };\n             } else if let Some(frame) = self.stack.pop() {\n-                let delim = self.frame.delim;\n-                let span = self.frame.span;\n-                self.frame = frame;\n-                if delim != DelimToken::NoDelim {\n+                if let Some((delim, span)) = self.frame.delim_sp && delim != DelimToken::NoDelim {\n+                    self.frame = frame;\n                     return (Token::new(token::CloseDelim(delim), span.close), Spacing::Alone);\n                 }\n+                self.frame = frame;\n                 // No close delimiter to return; continue on to the next iteration.\n             } else {\n                 return (Token::new(token::Eof, DUMMY_SP), Spacing::Alone);\n@@ -330,8 +328,7 @@ impl TokenCursor {\n         self.stack.push(mem::replace(\n             &mut self.frame,\n             TokenCursorFrame::new(\n-                delim_span,\n-                token::NoDelim,\n+                None,\n                 if attr_style == AttrStyle::Inner {\n                     [TokenTree::token(token::Pound, span), TokenTree::token(token::Not, span), body]\n                         .iter()\n@@ -431,10 +428,6 @@ impl<'a> Parser<'a> {\n         desugar_doc_comments: bool,\n         subparser_name: Option<&'static str>,\n     ) -> Self {\n-        // Note: because of the way `TokenCursor::inlined_next` is structured, the `span` and\n-        // `delim` arguments here are never used.\n-        let start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);\n-\n         let mut parser = Parser {\n             sess,\n             token: Token::dummy(),\n@@ -444,7 +437,7 @@ impl<'a> Parser<'a> {\n             restrictions: Restrictions::empty(),\n             expected_tokens: Vec::new(),\n             token_cursor: TokenCursor {\n-                frame: start_frame,\n+                frame: TokenCursorFrame::new(None, tokens),\n                 stack: Vec::new(),\n                 num_next_calls: 0,\n                 desugar_doc_comments,\n@@ -1025,7 +1018,7 @@ impl<'a> Parser<'a> {\n         }\n \n         let frame = &self.token_cursor.frame;\n-        if frame.delim != DelimToken::NoDelim {\n+        if let Some((delim, span)) = frame.delim_sp && delim != DelimToken::NoDelim {\n             let all_normal = (0..dist).all(|i| {\n                 let token = frame.tree_cursor.look_ahead(i);\n                 !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))\n@@ -1038,7 +1031,7 @@ impl<'a> Parser<'a> {\n                             looker(&Token::new(token::OpenDelim(*delim), dspan.open))\n                         }\n                     },\n-                    None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),\n+                    None => looker(&Token::new(token::CloseDelim(delim), span.close)),\n                 };\n             }\n         }\n@@ -1198,8 +1191,7 @@ impl<'a> Parser<'a> {\n                 // Grab the tokens from this frame.\n                 let frame = &self.token_cursor.frame;\n                 let stream = frame.tree_cursor.stream.clone();\n-                let span = frame.span;\n-                let delim = frame.delim;\n+                let (delim, span) = frame.delim_sp.unwrap();\n \n                 // Advance the token cursor through the entire delimited\n                 // sequence. After getting the `OpenDelim` we are *within* the"}]}