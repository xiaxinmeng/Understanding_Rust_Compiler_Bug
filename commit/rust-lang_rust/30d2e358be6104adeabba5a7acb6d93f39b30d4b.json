{"sha": "30d2e358be6104adeabba5a7acb6d93f39b30d4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwZDJlMzU4YmU2MTA0YWRlYWJiYTVhN2FjYjZkOTNmMzliMzBkNGI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-29T11:31:44Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-29T12:03:24Z"}, "message": "Replace obj dtors with resources in stdlib and rustc", "tree": {"sha": "ba54cc6506d9bf85e28c84922bbcc64af87eda34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba54cc6506d9bf85e28c84922bbcc64af87eda34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30d2e358be6104adeabba5a7acb6d93f39b30d4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30d2e358be6104adeabba5a7acb6d93f39b30d4b", "html_url": "https://github.com/rust-lang/rust/commit/30d2e358be6104adeabba5a7acb6d93f39b30d4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30d2e358be6104adeabba5a7acb6d93f39b30d4b/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae46c154f09deb57018579bb00fa3fcac9a93770", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae46c154f09deb57018579bb00fa3fcac9a93770", "html_url": "https://github.com/rust-lang/rust/commit/ae46c154f09deb57018579bb00fa3fcac9a93770"}], "stats": {"total": 151, "additions": 82, "deletions": 69}, "files": [{"sha": "9f08bbb9476ff9841f17ac785b4800ebec4769e5", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 28, "deletions": 21, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/30d2e358be6104adeabba5a7acb6d93f39b30d4b/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30d2e358be6104adeabba5a7acb6d93f39b30d4b/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=30d2e358be6104adeabba5a7acb6d93f39b30d4b", "patch": "@@ -889,9 +889,13 @@ native \"cdecl\" mod llvm = \"rustllvm\" {\n  * it's attached to.\n  */\n \n-// FIXME: Do we want to support mutable object fields?\n-obj builder(B: BuilderRef, terminated: @mutable bool) {\n+resource BuilderRef_res(B: BuilderRef) {\n+    llvm::LLVMDisposeBuilder(B);\n+}\n \n+obj builder(B: BuilderRef, terminated: @mutable bool,\n+            // Stored twice so that we don't have to constantly deref\n+            res: @BuilderRef_res) {\n     /* Terminators */\n     fn RetVoid() -> ValueRef {\n         assert (!*terminated);\n@@ -1396,9 +1400,12 @@ obj builder(B: BuilderRef, terminated: @mutable bool) {\n     fn is_terminated() -> bool {\n         ret *terminated;\n     }\n-    drop {\n-         llvm::LLVMDisposeBuilder(B);\n-    }\n+}\n+\n+fn new_builder(llbb: BasicBlockRef) -> builder {\n+    let llbuild: BuilderRef = llvm::LLVMCreateBuilder();\n+    llvm::LLVMPositionBuilderAtEnd(llbuild, llbb);\n+    ret builder(llbuild, @mutable false, @BuilderRef_res(llbuild));\n }\n \n /* Memory-managed object interface to type handles. */\n@@ -1554,54 +1561,54 @@ fn fn_ty_param_tys(fn_ty: TypeRef) -> TypeRef[] {\n \n /* Memory-managed interface to target data. */\n \n-obj target_data_dtor(TD: TargetDataRef) {\n-    drop { llvm::LLVMDisposeTargetData(TD); }\n+resource target_data_res(TD: TargetDataRef) {\n+    llvm::LLVMDisposeTargetData(TD);\n }\n \n-type target_data = {lltd: TargetDataRef, dtor: target_data_dtor};\n+type target_data = {lltd: TargetDataRef, dtor: @target_data_res};\n \n fn mk_target_data(string_rep: str) -> target_data {\n     let lltd = llvm::LLVMCreateTargetData(str::buf(string_rep));\n-    ret {lltd: lltd, dtor: target_data_dtor(lltd)};\n+    ret {lltd: lltd, dtor: @target_data_res(lltd)};\n }\n \n /* Memory-managed interface to pass managers. */\n \n-obj pass_manager_dtor(PM: PassManagerRef) {\n-    drop { llvm::LLVMDisposePassManager(PM); }\n+resource pass_manager_res(PM: PassManagerRef) {\n+    llvm::LLVMDisposePassManager(PM);\n }\n \n-type pass_manager = {llpm: PassManagerRef, dtor: pass_manager_dtor};\n+type pass_manager = {llpm: PassManagerRef, dtor: @pass_manager_res};\n \n fn mk_pass_manager() -> pass_manager {\n     let llpm = llvm::LLVMCreatePassManager();\n-    ret {llpm: llpm, dtor: pass_manager_dtor(llpm)};\n+    ret {llpm: llpm, dtor: @pass_manager_res(llpm)};\n }\n \n /* Memory-managed interface to object files. */\n \n-obj object_file_dtor(ObjectFile: ObjectFileRef) {\n-    drop { llvm::LLVMDisposeObjectFile(ObjectFile); }\n+resource object_file_res(ObjectFile: ObjectFileRef) {\n+    llvm::LLVMDisposeObjectFile(ObjectFile);\n }\n \n-type object_file = {llof: ObjectFileRef, dtor: object_file_dtor};\n+type object_file = {llof: ObjectFileRef, dtor: @object_file_res};\n \n fn mk_object_file(llmb: MemoryBufferRef) -> object_file {\n     let llof = llvm::LLVMCreateObjectFile(llmb);\n-    ret {llof: llof, dtor: object_file_dtor(llof)};\n+    ret {llof: llof, dtor: @object_file_res(llof)};\n }\n \n /* Memory-managed interface to section iterators. */\n \n-obj section_iter_dtor(SI: SectionIteratorRef) {\n-    drop { llvm::LLVMDisposeSectionIterator(SI); }\n+resource section_iter_res(SI: SectionIteratorRef) {\n+    llvm::LLVMDisposeSectionIterator(SI);\n }\n \n-type section_iter = {llsi: SectionIteratorRef, dtor: section_iter_dtor};\n+type section_iter = {llsi: SectionIteratorRef, dtor: @section_iter_res};\n \n fn mk_section_iter(llof: ObjectFileRef) -> section_iter {\n     let llsi = llvm::LLVMGetSections(llof);\n-    ret {llsi: llsi, dtor: section_iter_dtor(llsi)};\n+    ret {llsi: llsi, dtor: @section_iter_res(llsi)};\n }\n \n //"}, {"sha": "c1504fb9b6080e2adf9c36aeaabf6180332e8d4f", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30d2e358be6104adeabba5a7acb6d93f39b30d4b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30d2e358be6104adeabba5a7acb6d93f39b30d4b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=30d2e358be6104adeabba5a7acb6d93f39b30d4b", "patch": "@@ -41,6 +41,7 @@ import std::map::new_str_hash;\n import syntax::codemap::span;\n import lib::llvm::llvm;\n import lib::llvm::builder;\n+import lib::llvm::new_builder;\n import lib::llvm::target_data;\n import lib::llvm::type_names;\n import lib::llvm::mk_target_data;\n@@ -5934,13 +5935,6 @@ fn trans_stmt(cx: &@block_ctxt, s: &ast::stmt) -> result {\n     ret rslt(bcx, C_nil());\n }\n \n-fn new_builder(llbb: BasicBlockRef) -> builder {\n-    let llbuild: BuilderRef = llvm::LLVMCreateBuilder();\n-    llvm::LLVMPositionBuilderAtEnd(llbuild, llbb);\n-    ret builder(llbuild, @mutable false);\n-}\n-\n-\n // You probably don't want to use this one. See the\n // next three functions instead.\n fn new_block_ctxt(cx: &@fn_ctxt, parent: &block_parent, kind: block_kind,"}, {"sha": "a4b2891770cb93aaf4cd89a736393fce0c1d6529", "filename": "src/lib/io.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/30d2e358be6104adeabba5a7acb6d93f39b30d4b/src%2Flib%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30d2e358be6104adeabba5a7acb6d93f39b30d4b/src%2Flib%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fio.rs?ref=30d2e358be6104adeabba5a7acb6d93f39b30d4b", "patch": "@@ -255,7 +255,11 @@ obj FILE_writer(f: os::libc::FILE, res: option::t[@FILE_res]) {\n     }\n }\n \n-obj fd_buf_writer(fd: int, must_close: bool) {\n+resource fd_res(fd: int) {\n+    os::libc::close(fd);\n+}\n+\n+obj fd_buf_writer(fd: int, res: option::t[@fd_res]) {\n     fn write(v: vec[u8]) {\n         let len = vec::len[u8](v);\n         let count = 0u;\n@@ -279,7 +283,6 @@ obj fd_buf_writer(fd: int, must_close: bool) {\n         log_err \"need 64-bit native calls for tell, sorry\";\n         fail;\n     }\n-    drop { if must_close { os::libc::close(fd); } }\n }\n \n fn file_buf_writer(path: str, flags: vec[fileflag]) -> buf_writer {\n@@ -302,7 +305,7 @@ fn file_buf_writer(path: str, flags: vec[fileflag]) -> buf_writer {\n         log_err sys::rustrt::last_os_error();\n         fail;\n     }\n-    ret fd_buf_writer(fd, true);\n+    ret fd_buf_writer(fd, option::some(@fd_res(fd)));\n }\n \n type writer =\n@@ -379,9 +382,9 @@ fn buffered_file_buf_writer(path: str) -> buf_writer {\n \n \n // FIXME it would be great if this could be a const\n-fn stdout() -> writer { ret new_writer(fd_buf_writer(1, false)); }\n+fn stdout() -> writer { ret new_writer(fd_buf_writer(1, option::none)); }\n \n-fn stderr() -> writer { ret new_writer(fd_buf_writer(2, false)); }\n+fn stderr() -> writer { ret new_writer(fd_buf_writer(2, option::none)); }\n \n type str_writer =\n     obj {"}, {"sha": "cae0c27787c08db2e83bf3cede8c190edb103b02", "filename": "src/lib/ioivec.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/30d2e358be6104adeabba5a7acb6d93f39b30d4b/src%2Flib%2Fioivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30d2e358be6104adeabba5a7acb6d93f39b30d4b/src%2Flib%2Fioivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fioivec.rs?ref=30d2e358be6104adeabba5a7acb6d93f39b30d4b", "patch": "@@ -55,7 +55,11 @@ fn convert_whence(whence: seek_style) -> int {\n     ret alt whence { seek_set. { 0 } seek_cur. { 1 } seek_end. { 2 } };\n }\n \n-obj FILE_buf_reader(f: os::libc::FILE, must_close: bool) {\n+resource FILE_res(f: os::libc::FILE) {\n+    os::libc::fclose(f);\n+}\n+\n+obj FILE_buf_reader(f: os::libc::FILE, res: option::t[@FILE_res]) {\n     fn read(len: uint) -> u8[] {\n         let buf = ~[];\n         ivec::reserve[u8](buf, len);\n@@ -72,7 +76,6 @@ obj FILE_buf_reader(f: os::libc::FILE, must_close: bool) {\n     fn tell() -> uint {\n         ret os::libc::ftell(f) as uint;\n     }\n-    drop { if must_close { os::libc::fclose(f); } }\n }\n \n \n@@ -172,13 +175,13 @@ obj new_reader(rdr: buf_reader) {\n }\n \n fn stdin() -> reader {\n-    ret new_reader(FILE_buf_reader(rustrt::rust_get_stdin(), false));\n+    ret new_reader(FILE_buf_reader(rustrt::rust_get_stdin(), option::none));\n }\n \n fn file_reader(path: str) -> reader {\n     let f = os::libc::fopen(str::buf(path), str::buf(\"r\"));\n     if f as uint == 0u { log_err \"error opening \" + path; fail; }\n-    ret new_reader(FILE_buf_reader(f, true));\n+    ret new_reader(FILE_buf_reader(f, option::some(@FILE_res(f))));\n }\n \n \n@@ -240,7 +243,7 @@ type buf_writer =\n         fn tell() -> uint ;\n     };\n \n-obj FILE_writer(f: os::libc::FILE, must_close: bool) {\n+obj FILE_writer(f: os::libc::FILE, res: option::t[@FILE_res]) {\n     fn write(v: &u8[]) {\n         let len = ivec::len[u8](v);\n         let vbuf = ivec::to_ptr[u8](v);\n@@ -253,10 +256,13 @@ obj FILE_writer(f: os::libc::FILE, must_close: bool) {\n     fn tell() -> uint {\n         ret os::libc::ftell(f) as uint;\n     }\n-    drop { if must_close { os::libc::fclose(f); } }\n }\n \n-obj fd_buf_writer(fd: int, must_close: bool) {\n+resource fd_res(fd: int) {\n+    os::libc::close(fd);\n+}\n+\n+obj fd_buf_writer(fd: int, res: option::t[@fd_res]) {\n     fn write(v: &u8[]) {\n         let len = ivec::len[u8](v);\n         let count = 0u;\n@@ -280,7 +286,6 @@ obj fd_buf_writer(fd: int, must_close: bool) {\n         log_err \"need 64-bit native calls for tell, sorry\";\n         fail;\n     }\n-    drop { if must_close { os::libc::close(fd); } }\n }\n \n fn file_buf_writer(path: str, flags: &fileflag[]) -> buf_writer {\n@@ -303,7 +308,7 @@ fn file_buf_writer(path: str, flags: &fileflag[]) -> buf_writer {\n         log_err sys::rustrt::last_os_error();\n         fail;\n     }\n-    ret fd_buf_writer(fd, true);\n+    ret fd_buf_writer(fd, option::some(@fd_res(fd)));\n }\n \n type writer =\n@@ -377,12 +382,12 @@ fn file_writer(path: str, flags: &fileflag[]) -> writer {\n fn buffered_file_buf_writer(path: str) -> buf_writer {\n     let f = os::libc::fopen(str::buf(path), str::buf(\"w\"));\n     if f as uint == 0u { log_err \"error opening \" + path; fail; }\n-    ret FILE_writer(f, true);\n+    ret FILE_writer(f, option::some(@FILE_res(f)));\n }\n \n \n // FIXME it would be great if this could be a const\n-fn stdout() -> writer { ret new_writer(fd_buf_writer(1, false)); }\n+fn stdout() -> writer { ret new_writer(fd_buf_writer(1, option::none)); }\n \n type str_writer =\n     obj {"}, {"sha": "7b47311b04ba07d5b5a26b104a6922cdd785379a", "filename": "src/lib/rand.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/30d2e358be6104adeabba5a7acb6d93f39b30d4b/src%2Flib%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30d2e358be6104adeabba5a7acb6d93f39b30d4b/src%2Flib%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Frand.rs?ref=30d2e358be6104adeabba5a7acb6d93f39b30d4b", "patch": "@@ -11,19 +11,19 @@ native \"rust\" mod rustrt {\n     fn rand_free(c: rctx);\n }\n \n-type rng =\n-    obj {\n-        fn next() -> u32 ;\n-    };\n+type rng = obj { fn next() -> u32; };\n+\n+resource rand_res(c: rustrt::rctx) {\n+    rustrt::rand_free(c);\n+}\n \n fn mk_rng() -> rng {\n-    obj rt_rng(c: rustrt::rctx) {\n+    obj rt_rng(c: @rand_res) {\n         fn next() -> u32 {\n-            ret rustrt::rand_next(c);\n+            ret rustrt::rand_next(**c);\n         }\n-        drop { rustrt::rand_free(c); }\n     }\n-    ret rt_rng(rustrt::rand_new());\n+    ret rt_rng(@rand_res(rustrt::rand_new()));\n }\n // Local Variables:\n // mode: rust;"}, {"sha": "f2dd128005945e8b165dd78384347df3a31734fd", "filename": "src/lib/run_program.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/30d2e358be6104adeabba5a7acb6d93f39b30d4b/src%2Flib%2Frun_program.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30d2e358be6104adeabba5a7acb6d93f39b30d4b/src%2Flib%2Frun_program.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Frun_program.rs?ref=30d2e358be6104adeabba5a7acb6d93f39b30d4b", "patch": "@@ -35,15 +35,20 @@ fn run_program(prog: str, args: vec[str]) -> int {\n \n type program =\n     obj {\n-        fn get_id() -> int ;\n-        fn input() -> io::writer ;\n-        fn output() -> io::reader ;\n-        fn err() -> io::reader ;\n-        fn close_input() ;\n-        fn finish() -> int ;\n+        fn get_id() -> int;\n+        fn input() -> io::writer;\n+        fn output() -> io::reader;\n+        fn err() -> io::reader;\n+        fn close_input();\n+        fn finish() -> int;\n+        fn destroy();\n     };\n \n-fn start_program(prog: str, args: vec[str]) -> @program {\n+resource program_res(p: program) {\n+    p.destroy();\n+}\n+\n+fn start_program(prog: str, args: vec[str]) -> @program_res {\n     let pipe_input = os::pipe();\n     let pipe_output = os::pipe();\n     let pipe_err = os::pipe();\n@@ -61,7 +66,7 @@ fn start_program(prog: str, args: vec[str]) -> @program {\n                     mutable finished: bool) {\n         fn get_id() -> int { ret pid; }\n         fn input() -> io::writer {\n-            ret io::new_writer(io::fd_buf_writer(in_fd, false));\n+            ret io::new_writer(io::fd_buf_writer(in_fd, option::none));\n         }\n         fn output() -> io::reader {\n             ret io::new_reader(io::FILE_buf_reader(out_file, option::none));\n@@ -82,18 +87,17 @@ fn start_program(prog: str, args: vec[str]) -> @program {\n             self.close_input();\n             ret os::waitpid(pid);\n         }\n-        drop {\n-            self.close_input();\n-            if !finished { os::waitpid(pid); }\n+        fn destroy() {\n+            self.finish();\n             os::libc::fclose(out_file);\n             os::libc::fclose(err_file);\n         }\n     }\n-    ret @new_program(pid,\n-                     pipe_input.out,\n-                     os::fd_FILE(pipe_output.in),\n-                     os::fd_FILE(pipe_err.in),\n-                     false);\n+    ret @program_res(new_program(pid,\n+                                 pipe_input.out,\n+                                 os::fd_FILE(pipe_output.in),\n+                                 os::fd_FILE(pipe_err.in),\n+                                 false));\n }\n \n fn read_all(rd: &io::reader) -> str {"}, {"sha": "1f5e49134148dbd36e8f2dfa26d68aa53e4c096d", "filename": "src/test/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30d2e358be6104adeabba5a7acb6d93f39b30d4b/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30d2e358be6104adeabba5a7acb6d93f39b30d4b/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fcompiletest.rs?ref=30d2e358be6104adeabba5a7acb6d93f39b30d4b", "patch": "@@ -668,7 +668,7 @@ mod procsrv {\n     fn readclose(fd: int) -> str {\n         // Copied from run::program_output\n         let file = os::fd_FILE(fd);\n-        let reader = io::new_reader(io::FILE_buf_reader(file, false));\n+        let reader = io::new_reader(io::FILE_buf_reader(file, option::none));\n         let buf = \"\";\n         while !reader.eof() {\n             let bytes = reader.read_bytes(4096u);"}]}