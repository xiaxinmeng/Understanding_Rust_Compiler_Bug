{"sha": "7878fa70d6ddac3528d6523ac732fade6e5ae93b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NzhmYTcwZDZkZGFjMzUyOGQ2NTIzYWM3MzJmYWRlNmU1YWU5M2I=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-31T10:01:49Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-15T18:32:29Z"}, "message": "Fix E0657.", "tree": {"sha": "40f9d68a0cbc7b940bc55fb14b2d9eb151b05dbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40f9d68a0cbc7b940bc55fb14b2d9eb151b05dbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7878fa70d6ddac3528d6523ac732fade6e5ae93b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7878fa70d6ddac3528d6523ac732fade6e5ae93b", "html_url": "https://github.com/rust-lang/rust/commit/7878fa70d6ddac3528d6523ac732fade6e5ae93b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7878fa70d6ddac3528d6523ac732fade6e5ae93b/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "html_url": "https://github.com/rust-lang/rust/commit/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "c0e4a1bdf07a47040ee5e143e438e6c585c40a97", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7878fa70d6ddac3528d6523ac732fade6e5ae93b/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7878fa70d6ddac3528d6523ac732fade6e5ae93b/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=7878fa70d6ddac3528d6523ac732fade6e5ae93b", "patch": "@@ -632,24 +632,32 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                                 let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n                                 // Ensure that the parent of the def is an item, not HRTB\n                                 let parent_id = self.tcx.hir().get_parent_node(hir_id);\n-                                let parent_item_id =\n-                                    hir::ItemId { def_id: parent_id.expect_owner() };\n-                                let parent_impl_id =\n-                                    hir::ImplItemId { def_id: parent_id.expect_owner() };\n-                                let parent_trait_id =\n-                                    hir::TraitItemId { def_id: parent_id.expect_owner() };\n-                                let krate = self.tcx.hir().krate();\n-\n-                                if !(krate.items.contains_key(&parent_item_id)\n-                                    || krate.impl_items.contains_key(&parent_impl_id)\n-                                    || krate.trait_items.contains_key(&parent_trait_id))\n+                                let parent_is_item = if let Some(parent_def_id) =\n+                                    parent_id.as_owner()\n                                 {\n+                                    let parent_item_id = hir::ItemId { def_id: parent_def_id };\n+                                    let parent_impl_id = hir::ImplItemId { def_id: parent_def_id };\n+                                    let parent_trait_id =\n+                                        hir::TraitItemId { def_id: parent_def_id };\n+                                    let parent_foreign_id =\n+                                        hir::ForeignItemId { def_id: parent_def_id };\n+                                    let krate = self.tcx.hir().krate();\n+\n+                                    krate.items.contains_key(&parent_item_id)\n+                                        || krate.impl_items.contains_key(&parent_impl_id)\n+                                        || krate.trait_items.contains_key(&parent_trait_id)\n+                                        || krate.foreign_items.contains_key(&parent_foreign_id)\n+                                } else {\n+                                    false\n+                                };\n+\n+                                if !parent_is_item {\n                                     struct_span_err!(\n                                         self.tcx.sess,\n                                         lifetime.span,\n                                         E0657,\n                                         \"`impl Trait` can only capture lifetimes \\\n-                                         bound at the fn or impl level\"\n+                                             bound at the fn or impl level\"\n                                     )\n                                     .emit();\n                                     self.uninsert_lifetime_on_error(lifetime, def.unwrap());"}]}