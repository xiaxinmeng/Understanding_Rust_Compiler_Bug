{"sha": "853254f467e26ee1d5d46b7079c96c4f53f072a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MzI1NGY0NjdlMjZlZTFkNWQ0NmI3MDc5Yzk2YzRmNTNmMDcyYTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-24T15:50:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-24T15:50:51Z"}, "message": "Auto merge of #1675 - hyd-dev:proc-macro-unit-test, r=RalfJung\n\n [cargo-miri] Skip unit tests of `proc-macro` crates\n\nFixes #1660.", "tree": {"sha": "75b05042c1ceec5e93b6a52970778807a737ab81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75b05042c1ceec5e93b6a52970778807a737ab81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/853254f467e26ee1d5d46b7079c96c4f53f072a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/853254f467e26ee1d5d46b7079c96c4f53f072a1", "html_url": "https://github.com/rust-lang/rust/commit/853254f467e26ee1d5d46b7079c96c4f53f072a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/853254f467e26ee1d5d46b7079c96c4f53f072a1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c26fa8321ad58c88734e42746d065bc2fb33d1dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c26fa8321ad58c88734e42746d065bc2fb33d1dd", "html_url": "https://github.com/rust-lang/rust/commit/c26fa8321ad58c88734e42746d065bc2fb33d1dd"}, {"sha": "28577924e7de574ae41f7bd99591da280cb57a15", "url": "https://api.github.com/repos/rust-lang/rust/commits/28577924e7de574ae41f7bd99591da280cb57a15", "html_url": "https://github.com/rust-lang/rust/commit/28577924e7de574ae41f7bd99591da280cb57a15"}], "stats": {"total": 146, "additions": 106, "deletions": 40}, "files": [{"sha": "21a6b68c619787839d38a4819e0843a127fabb3e", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 98, "deletions": 39, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/853254f467e26ee1d5d46b7079c96c4f53f072a1/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853254f467e26ee1d5d46b7079c96c4f53f072a1/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=853254f467e26ee1d5d46b7079c96c4f53f072a1", "patch": "@@ -2,6 +2,7 @@ use std::env;\n use std::ffi::OsString;\n use std::fs::{self, File};\n use std::io::{self, BufRead, BufReader, BufWriter, Write};\n+use std::iter::TakeWhile;\n use std::ops::Not;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n@@ -36,9 +37,9 @@ enum MiriCommand {\n     Setup,\n }\n \n-/// The inforamtion Miri needs to run a crate. Stored as JSON when the crate is \"compiled\".\n+/// The information to run a crate with the given environment.\n #[derive(Serialize, Deserialize)]\n-struct CrateRunInfo {\n+struct CrateRunEnv {\n     /// The command-line arguments.\n     args: Vec<String>,\n     /// The environment.\n@@ -47,13 +48,22 @@ struct CrateRunInfo {\n     current_dir: OsString,\n }\n \n+/// The information Miri needs to run a crate. Stored as JSON when the crate is \"compiled\".\n+#[derive(Serialize, Deserialize)]\n+enum CrateRunInfo {\n+    /// Run it with the given environment.\n+    RunWith(CrateRunEnv),\n+    /// Skip it as Miri does not support interpreting such kind of crates.\n+    SkipProcMacroTest,\n+}\n+\n impl CrateRunInfo {\n     /// Gather all the information we need.\n     fn collect(args: env::Args) -> Self {\n         let args = args.collect();\n         let env = env::vars_os().collect();\n         let current_dir = env::current_dir().unwrap().into_os_string();\n-        CrateRunInfo { args, env, current_dir }\n+        Self::RunWith(CrateRunEnv { args, env, current_dir })\n     }\n \n     fn store(&self, filename: &Path) {\n@@ -89,31 +99,50 @@ fn has_arg_flag(name: &str) -> bool {\n     args.any(|val| val == name)\n }\n \n-/// Gets the value of a `--flag`.\n-fn get_arg_flag_value(name: &str) -> Option<String> {\n-    // Stop searching at `--`.\n-    let mut args = std::env::args().take_while(|val| val != \"--\");\n-    loop {\n-        let arg = match args.next() {\n-            Some(arg) => arg,\n-            None => return None,\n-        };\n-        if !arg.starts_with(name) {\n-            continue;\n+/// Yields all values of command line flag `name`.\n+struct ArgFlagValueIter<'a> {\n+    args: TakeWhile<env::Args, fn(&String) -> bool>,\n+    name: &'a str,\n+}\n+\n+impl<'a> ArgFlagValueIter<'a> {\n+    fn new(name: &'a str) -> Self {\n+        Self {\n+            // Stop searching at `--`.\n+            args: env::args().take_while(|val| val != \"--\"),\n+            name,\n         }\n-        // Strip leading `name`.\n-        let suffix = &arg[name.len()..];\n-        if suffix.is_empty() {\n-            // This argument is exactly `name`; the next one is the value.\n-            return args.next();\n-        } else if suffix.starts_with('=') {\n-            // This argument is `name=value`; get the value.\n-            // Strip leading `=`.\n-            return Some(suffix[1..].to_owned());\n+    }\n+}\n+\n+impl Iterator for ArgFlagValueIter<'_> {\n+    type Item = String;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        loop {\n+            let arg = self.args.next()?;\n+            if !arg.starts_with(self.name) {\n+                continue;\n+            }\n+            // Strip leading `name`.\n+            let suffix = &arg[self.name.len()..];\n+            if suffix.is_empty() {\n+                // This argument is exactly `name`; the next one is the value.\n+                return self.args.next();\n+            } else if suffix.starts_with('=') {\n+                // This argument is `name=value`; get the value.\n+                // Strip leading `=`.\n+                return Some(suffix[1..].to_owned());\n+            }\n         }\n     }\n }\n \n+/// Gets the value of a `--flag`.\n+fn get_arg_flag_value(name: &str) -> Option<String> {\n+    ArgFlagValueIter::new(name).next()\n+}\n+\n /// Returns the path to the `miri` binary\n fn find_miri() -> PathBuf {\n     if let Some(path) = env::var_os(\"MIRI\") {\n@@ -436,14 +465,15 @@ fn phase_cargo_miri(mut args: env::Args) {\n     // This is needed to make the `CARGO_TARGET_*_RUNNER` env var do something,\n     // and it later helps us detect which crates are proc-macro/build-script\n     // (host crates) and which crates are needed for the program itself.\n-    let target = if let Some(target) = get_arg_flag_value(\"--target\") {\n+    let host = version_info().host;\n+    let target = get_arg_flag_value(\"--target\");\n+    let target = if let Some(ref target) = target {\n         target\n     } else {\n         // No target given. Pick default and tell cargo about it.\n-        let host = version_info().host;\n         cmd.arg(\"--target\");\n         cmd.arg(&host);\n-        host\n+        &host\n     };\n \n     // Forward all further arguments. We do some processing here because we want to\n@@ -495,17 +525,27 @@ fn phase_cargo_miri(mut args: env::Args) {\n     }\n     cmd.env(\"RUSTC_WRAPPER\", &cargo_miri_path);\n \n-    // Set the runner for the current target to us as well, so we can interpret the binaries.\n-    let runner_env_name = format!(\"CARGO_TARGET_{}_RUNNER\", target.to_uppercase().replace('-', \"_\"));\n-    cmd.env(&runner_env_name, &cargo_miri_path);\n+    let runner_env_name = |triple: &str| {\n+        format!(\"CARGO_TARGET_{}_RUNNER\", triple.to_uppercase().replace('-', \"_\"))\n+    };\n+    let host_runner_env_name = runner_env_name(&host);\n+    let target_runner_env_name = runner_env_name(target);\n+    // Set the target runner to us, so we can interpret the binaries.\n+    cmd.env(&target_runner_env_name, &cargo_miri_path);\n+    // Unit tests of `proc-macro` crates are run on the host, so we set the host runner to\n+    // us in order to skip them.\n+    cmd.env(&host_runner_env_name, &cargo_miri_path);\n \n     // Set rustdoc to us as well, so we can make it do nothing (see issue #584).\n     cmd.env(\"RUSTDOC\", &cargo_miri_path);\n \n     // Run cargo.\n     if verbose {\n         eprintln!(\"[cargo-miri miri] RUSTC_WRAPPER={:?}\", cargo_miri_path);\n-        eprintln!(\"[cargo-miri miri] {}={:?}\", runner_env_name, cargo_miri_path);\n+        eprintln!(\"[cargo-miri miri] {}={:?}\", target_runner_env_name, cargo_miri_path);\n+        if *target != host {\n+            eprintln!(\"[cargo-miri miri] {}={:?}\", host_runner_env_name, cargo_miri_path);\n+        }\n         eprintln!(\"[cargo-miri miri] RUSTDOC={:?}\", cargo_miri_path);\n         eprintln!(\"[cargo-miri miri] {:?}\", cmd);\n         cmd.env(\"MIRI_VERBOSE\", \"\"); // This makes the other phases verbose.\n@@ -568,23 +608,34 @@ fn phase_cargo_rustc(args: env::Args) {\n         _ => {},\n     }\n \n-    if !print && target_crate && is_runnable_crate() {\n-        // This is the binary or test crate that we want to interpret under Miri.\n-        // But we cannot run it here, as cargo invoked us as a compiler -- our stdin and stdout are not\n-        // like we want them.\n-        // Instead of compiling, we write JSON into the output file with all the relevant command-line flags\n-        // and environment variables; this is used when cargo calls us again in the CARGO_TARGET_RUNNER phase.\n-        let info = CrateRunInfo::collect(args);\n+    let store_json = |info: CrateRunInfo| {\n         let filename = out_filename(\"\", \"\");\n         if verbose {\n             eprintln!(\"[cargo-miri rustc] writing run info to `{}`\", filename.display());\n         }\n-\n         info.store(&filename);\n         // For Windows, do the same thing again with `.exe` appended to the filename.\n         // (Need to do this here as cargo moves that \"binary\" to a different place before running it.)\n         info.store(&out_filename(\"\", \".exe\"));\n+    };\n+\n+    let runnable_crate = !print && is_runnable_crate();\n \n+    if runnable_crate && target_crate {\n+        // This is the binary or test crate that we want to interpret under Miri.\n+        // But we cannot run it here, as cargo invoked us as a compiler -- our stdin and stdout are not\n+        // like we want them.\n+        // Instead of compiling, we write JSON into the output file with all the relevant command-line flags\n+        // and environment variables; this is used when cargo calls us again in the CARGO_TARGET_RUNNER phase.\n+        store_json(CrateRunInfo::collect(args));\n+        return;\n+    }\n+\n+    if runnable_crate && ArgFlagValueIter::new(\"--extern\").any(|krate| krate == \"proc_macro\") {\n+        // This is a \"runnable\" `proc-macro` crate (unit tests). We do not support\n+        // interpreting that under Miri now, so we write a JSON file to (display a\n+        // helpful message and) skip it in the runner phase.\n+        store_json(CrateRunInfo::SkipProcMacroTest);\n         return;\n     }\n \n@@ -652,8 +703,16 @@ fn phase_cargo_runner(binary: &Path, binary_args: env::Args) {\n     let file = File::open(&binary)\n         .unwrap_or_else(|_| show_error(format!(\"file {:?} not found or `cargo-miri` invoked incorrectly; please only invoke this binary through `cargo miri`\", binary)));\n     let file = BufReader::new(file);\n-    let info: CrateRunInfo = serde_json::from_reader(file)\n+\n+    let info = serde_json::from_reader(file)\n         .unwrap_or_else(|_| show_error(format!(\"file {:?} contains outdated or invalid JSON; try `cargo clean`\", binary)));\n+    let info = match info {\n+        CrateRunInfo::RunWith(info) => info,\n+        CrateRunInfo::SkipProcMacroTest => {\n+            eprintln!(\"Running unit tests of `proc-macro` crates is not currently supported by Miri.\");\n+            return;\n+        }\n+    };\n \n     let mut cmd = miri();\n "}, {"sha": "8edd947c3b0faf3a38546303d1bd43e9cb6e97c9", "filename": "test-cargo-miri/run-test.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853254f467e26ee1d5d46b7079c96c4f53f072a1/test-cargo-miri%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/853254f467e26ee1d5d46b7079c96c4f53f072a1/test-cargo-miri%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Frun-test.py?ref=853254f467e26ee1d5d46b7079c96c4f53f072a1", "patch": "@@ -102,7 +102,7 @@ def test_cargo_miri_test():\n     )\n     test(\"`cargo miri test` (subcrate, no isolation)\",\n         cargo_miri(\"test\") + [\"-p\", \"subcrate\"],\n-        \"test.subcrate.stdout.ref\", \"test.stderr-empty.ref\",\n+        \"test.subcrate.stdout.ref\", \"test.stderr-proc-macro.ref\",\n         env={'MIRIFLAGS': \"-Zmiri-disable-isolation\"},\n     )\n "}, {"sha": "ea2936d52a054aaafae549958dd2a0d7935fdeef", "filename": "test-cargo-miri/subcrate/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/853254f467e26ee1d5d46b7079c96c4f53f072a1/test-cargo-miri%2Fsubcrate%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/853254f467e26ee1d5d46b7079c96c4f53f072a1/test-cargo-miri%2Fsubcrate%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fsubcrate%2FCargo.toml?ref=853254f467e26ee1d5d46b7079c96c4f53f072a1", "patch": "@@ -4,6 +4,10 @@ version = \"0.1.0\"\n authors = [\"Miri Team\"]\n edition = \"2018\"\n \n+[lib]\n+proc-macro = true\n+doctest = false\n+\n [[bin]]\n name = \"subcrate\"\n path = \"main.rs\""}, {"sha": "706e368017c0e628843efa8d7f8c4080cabc7466", "filename": "test-cargo-miri/subcrate/src/lib.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853254f467e26ee1d5d46b7079c96c4f53f072a1/test-cargo-miri%2Fsubcrate%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853254f467e26ee1d5d46b7079c96c4f53f072a1/test-cargo-miri%2Fsubcrate%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fsubcrate%2Fsrc%2Flib.rs?ref=853254f467e26ee1d5d46b7079c96c4f53f072a1", "patch": "@@ -0,0 +1,2 @@\n+#[cfg(test)]\n+compile_error!(\"Miri should not touch me\");"}, {"sha": "4983250917b596eb0a0bd74144262b7c5ca00428", "filename": "test-cargo-miri/test.stderr-proc-macro.ref", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/853254f467e26ee1d5d46b7079c96c4f53f072a1/test-cargo-miri%2Ftest.stderr-proc-macro.ref", "raw_url": "https://github.com/rust-lang/rust/raw/853254f467e26ee1d5d46b7079c96c4f53f072a1/test-cargo-miri%2Ftest.stderr-proc-macro.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.stderr-proc-macro.ref?ref=853254f467e26ee1d5d46b7079c96c4f53f072a1", "patch": "@@ -0,0 +1 @@\n+Running unit tests of `proc-macro` crates is not currently supported by Miri."}]}