{"sha": "f933dd243ac4422660baecb9c2e3ac26522e59bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MzNkZDI0M2FjNDQyMjY2MGJhZWNiOWMyZTNhYzI2NTIyZTU5YmQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-28T11:15:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-28T11:15:27Z"}, "message": "Rollup merge of #48266 - pietroalbini:report-compiler-flags-on-ice, r=michaelwoerister\n\nReport non-standard compile flags on ICE\n\nSome ICEs (such as the recent #48248) only happens when a non-standard compiler flag is provided to rustc, but users don't always report the used flags. This can slow down reproducing the issue, so this PR shows all the non-standard compiler flags in the ICE error message.\n\nFor example, the output of #48248 with this PR is:\n\n```\nerror: internal compiler error: [...]\n\nthread 'rustc' panicked at [...]\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: [...]\n\nnote: rustc 1.25.0-dev running on x86_64-unknown-linux-gnu\n\nnote: compiler flags: -C link-dead-code\n```\n\n### Open questions\n\n* At the moment, only `-C` and `-Z` flags are shown by default, and all the ones provided by cargo in a standard build are ignored: I did this to only show the flags that probably caused the ICE, and to remove some noise from the message. This removed flags like `opt-level` and `debuginfo` though, could those be useful for reproducing ICEs?", "tree": {"sha": "0d8a1d498fad4e02a574883b725f58912a492768", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d8a1d498fad4e02a574883b725f58912a492768"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f933dd243ac4422660baecb9c2e3ac26522e59bd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJalo9PCRBK7hj4Ov3rIwAAdHIIAJTz2TIuM32EOPwkUvRREH7J\nK2npr7TAoTxaxtvmGJmB3Rl5kCArUPQBLN4JGm1BgbhihYnvn9jEhFRvAjebHBRU\nECkmImbZduWQrUx2c9JDJ1vgjrNK5hmDToqXriP51ycZzFIdOR5svpbe9NIH2Sgj\nWPedTJASY/Y+3mtJ1hI92RGnN5BG0Yh8/xc+wPL0lmJSpxpLAFoMoNF50je80zUZ\n2Wjw+tzqPLdrOGzg7QoruBrrBaDfdh+8tvuLsQ3201glrGWkkPifMY7mqqCWR7ug\n9y/fY5ZVCo0DL1lQiBpKHUZE90mltvIR4gC+AUD0pleQfl/k3LYMbYGp1etG8AQ=\n=V/BT\n-----END PGP SIGNATURE-----\n", "payload": "tree 0d8a1d498fad4e02a574883b725f58912a492768\nparent ddab91a5debadfda47c057117c8b498a31abaae7\nparent 2985a1abfb48adeb848386377a8c6a3560c17910\nauthor kennytm <kennytm@gmail.com> 1519816527 +0800\ncommitter GitHub <noreply@github.com> 1519816527 +0800\n\nRollup merge of #48266 - pietroalbini:report-compiler-flags-on-ice, r=michaelwoerister\n\nReport non-standard compile flags on ICE\n\nSome ICEs (such as the recent #48248) only happens when a non-standard compiler flag is provided to rustc, but users don't always report the used flags. This can slow down reproducing the issue, so this PR shows all the non-standard compiler flags in the ICE error message.\n\nFor example, the output of #48248 with this PR is:\n\n```\nerror: internal compiler error: [...]\n\nthread 'rustc' panicked at [...]\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: [...]\n\nnote: rustc 1.25.0-dev running on x86_64-unknown-linux-gnu\n\nnote: compiler flags: -C link-dead-code\n```\n\n### Open questions\n\n* At the moment, only `-C` and `-Z` flags are shown by default, and all the ones provided by cargo in a standard build are ignored: I did this to only show the flags that probably caused the ICE, and to remove some noise from the message. This removed flags like `opt-level` and `debuginfo` though, could those be useful for reproducing ICEs?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f933dd243ac4422660baecb9c2e3ac26522e59bd", "html_url": "https://github.com/rust-lang/rust/commit/f933dd243ac4422660baecb9c2e3ac26522e59bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f933dd243ac4422660baecb9c2e3ac26522e59bd/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddab91a5debadfda47c057117c8b498a31abaae7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddab91a5debadfda47c057117c8b498a31abaae7", "html_url": "https://github.com/rust-lang/rust/commit/ddab91a5debadfda47c057117c8b498a31abaae7"}, {"sha": "2985a1abfb48adeb848386377a8c6a3560c17910", "url": "https://api.github.com/repos/rust-lang/rust/commits/2985a1abfb48adeb848386377a8c6a3560c17910", "html_url": "https://github.com/rust-lang/rust/commit/2985a1abfb48adeb848386377a8c6a3560c17910"}], "stats": {"total": 85, "additions": 80, "deletions": 5}, "files": [{"sha": "6af7a23f66d73919c344d4ea214ee9e07048f571", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 80, "deletions": 5, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/f933dd243ac4422660baecb9c2e3ac26522e59bd/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f933dd243ac4422660baecb9c2e3ac26522e59bd/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=f933dd243ac4422660baecb9c2e3ac26522e59bd", "patch": "@@ -139,6 +139,19 @@ pub mod target_features {\n const BUG_REPORT_URL: &'static str = \"https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.\\\n                                       md#bug-reports\";\n \n+const ICE_REPORT_COMPILER_FLAGS: &'static [&'static str] = &[\n+    \"Z\",\n+    \"C\",\n+    \"crate-type\",\n+];\n+const ICE_REPORT_COMPILER_FLAGS_EXCLUDE: &'static [&'static str] = &[\n+    \"metadata\",\n+    \"extra-filename\",\n+];\n+const ICE_REPORT_COMPILER_FLAGS_STRIP_VALUE: &'static [&'static str] = &[\n+    \"incremental\",\n+];\n+\n pub fn abort_on_err<T>(result: Result<T, CompileIncomplete>, sess: &Session) -> T {\n     match result {\n         Err(CompileIncomplete::Errored(ErrorReported)) => {\n@@ -1431,6 +1444,57 @@ pub fn in_rustc_thread<F, R>(f: F) -> Result<R, Box<Any + Send>>\n     thread.unwrap().join()\n }\n \n+/// Get a list of extra command-line flags provided by the user, as strings.\n+///\n+/// This function is used during ICEs to show more information useful for\n+/// debugging, since some ICEs only happens with non-default compiler flags\n+/// (and the users don't always report them).\n+fn extra_compiler_flags() -> Option<(Vec<String>, bool)> {\n+    let mut args = Vec::new();\n+    for arg in env::args_os() {\n+        args.push(arg.to_string_lossy().to_string());\n+    }\n+\n+    let matches = if let Some(matches) = handle_options(&args) {\n+        matches\n+    } else {\n+        return None;\n+    };\n+\n+    let mut result = Vec::new();\n+    let mut excluded_cargo_defaults = false;\n+    for flag in ICE_REPORT_COMPILER_FLAGS {\n+        let prefix = if flag.len() == 1 { \"-\" } else { \"--\" };\n+\n+        for content in &matches.opt_strs(flag) {\n+            // Split always returns the first element\n+            let name = if let Some(first) = content.split('=').next() {\n+                first\n+            } else {\n+                &content\n+            };\n+\n+            let content = if ICE_REPORT_COMPILER_FLAGS_STRIP_VALUE.contains(&name) {\n+                name\n+            } else {\n+                content\n+            };\n+\n+            if !ICE_REPORT_COMPILER_FLAGS_EXCLUDE.contains(&name) {\n+                result.push(format!(\"{}{} {}\", prefix, flag, content));\n+            } else {\n+                excluded_cargo_defaults = true;\n+            }\n+        }\n+    }\n+\n+    if result.len() > 0 {\n+        Some((result, excluded_cargo_defaults))\n+    } else {\n+        None\n+    }\n+}\n+\n /// Run a procedure which will detect panics in the compiler and print nicer\n /// error messages rather than just failing the test.\n ///\n@@ -1462,11 +1526,22 @@ pub fn monitor<F: FnOnce() + Send + 'static>(f: F) {\n                              errors::Level::Bug);\n             }\n \n-            let xs = [\"the compiler unexpectedly panicked. this is a bug.\".to_string(),\n-                      format!(\"we would appreciate a bug report: {}\", BUG_REPORT_URL),\n-                      format!(\"rustc {} running on {}\",\n-                              option_env!(\"CFG_VERSION\").unwrap_or(\"unknown_version\"),\n-                              config::host_triple())];\n+            let mut xs = vec![\n+                \"the compiler unexpectedly panicked. this is a bug.\".to_string(),\n+                format!(\"we would appreciate a bug report: {}\", BUG_REPORT_URL),\n+                format!(\"rustc {} running on {}\",\n+                        option_env!(\"CFG_VERSION\").unwrap_or(\"unknown_version\"),\n+                        config::host_triple()),\n+            ];\n+\n+            if let Some((flags, excluded_cargo_defaults)) = extra_compiler_flags() {\n+                xs.push(format!(\"compiler flags: {}\", flags.join(\" \")));\n+\n+                if excluded_cargo_defaults {\n+                    xs.push(\"some of the compiler flags provided by cargo are hidden\".to_string());\n+                }\n+            }\n+\n             for note in &xs {\n                 handler.emit(&MultiSpan::new(),\n                              &note,"}]}