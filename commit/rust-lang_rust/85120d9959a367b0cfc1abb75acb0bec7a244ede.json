{"sha": "85120d9959a367b0cfc1abb75acb0bec7a244ede", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MTIwZDk5NTlhMzY3YjBjZmMxYWJiNzVhY2IwYmVjN2EyNDRlZGU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-14T01:46:16Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-14T01:46:44Z"}, "message": "rustc: Look types up in the side table", "tree": {"sha": "a954d3ee1d6f013c86a6bac5701a3915f55546cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a954d3ee1d6f013c86a6bac5701a3915f55546cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85120d9959a367b0cfc1abb75acb0bec7a244ede", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85120d9959a367b0cfc1abb75acb0bec7a244ede", "html_url": "https://github.com/rust-lang/rust/commit/85120d9959a367b0cfc1abb75acb0bec7a244ede", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85120d9959a367b0cfc1abb75acb0bec7a244ede/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6997adf76342b7a6fe03c4bc370ce5fc5082a869", "url": "https://api.github.com/repos/rust-lang/rust/commits/6997adf76342b7a6fe03c4bc370ce5fc5082a869", "html_url": "https://github.com/rust-lang/rust/commit/6997adf76342b7a6fe03c4bc370ce5fc5082a869"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "599b3b213a0e3b4a77f90254fe59cca1ab54570b", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/85120d9959a367b0cfc1abb75acb0bec7a244ede/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85120d9959a367b0cfc1abb75acb0bec7a244ede/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=85120d9959a367b0cfc1abb75acb0bec7a244ede", "patch": "@@ -1444,13 +1444,13 @@ fn eq_ty(&t a, &t b) -> bool { ret a == b; }\n \n fn ann_to_ty_param_substs_opt_and_ty(&node_type_table ntt, &ast::ann ann)\n         -> ty_param_substs_opt_and_ty {\n-    alt (ann) {\n-        case (ast::ann_none(_)) {\n-            log_err \"ann_to_ty_param_substs_opt_and_ty() called on a node \" +\n-                \"with no type params\";\n+    alt (ntt.(ast::ann_tag(ann))) {\n+        case (none[ty::ty_param_substs_opt_and_ty]) {\n+            log_err \"ann_to_ty_param_substs_opt_and_ty() called on an \" +\n+                \"untyped node\";\n             fail;\n         }\n-        case (ast::ann_type(_, ?t, ?tps, _)) { ret tup(tps, t); }\n+        case (some[ty::ty_param_substs_opt_and_ty](?tpot)) { ret tpot; }\n     }\n }\n "}, {"sha": "7f69b96f263abf25d1ef91b7a8499bdd07a5a996", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/85120d9959a367b0cfc1abb75acb0bec7a244ede/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85120d9959a367b0cfc1abb75acb0bec7a244ede/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=85120d9959a367b0cfc1abb75acb0bec7a244ede", "patch": "@@ -377,7 +377,7 @@ fn write_type(&node_type_table ntt, uint node_id,\n               &ty_param_substs_opt_and_ty tpot) {\n     _vec::grow_set[option::t[ty::ty_param_substs_opt_and_ty]]\n         (*ntt,\n-         0u,\n+         node_id,\n          none[ty_param_substs_opt_and_ty],\n          some[ty_param_substs_opt_and_ty](tpot));\n }\n@@ -1745,6 +1745,9 @@ fn replace_expr_type(&node_type_table ntt,\n         new_tps = none[vec[ty::t]];\n     }\n \n+    write_type(ntt, ast::ann_tag(ty::expr_ann(expr)),\n+               tup(new_tps, new_tyt._1));\n+\n     fn mkann_fn(ty::t tyt, option::t[vec[ty::t]] tps, &ast::ann old_ann)\n             -> ast::ann {\n         ret ast::ann_type(ast::ann_tag(old_ann), tyt, tps, none[@ts_ann]);\n@@ -2134,12 +2137,12 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) -> @ast::expr {\n \n             if (ty::def_has_ty_params(defn)) {\n                 auto path_tpot = instantiate_path(fcx, pth, tpt, expr.span);\n+                write_type(fcx.ccx.node_types, ast::ann_tag(old_ann),\n+                           path_tpot);\n                 ret @fold::respan[ast::expr_](expr.span,\n                     ast::expr_path(pth,\n                         ast::ann_type(ast::ann_tag(old_ann), path_tpot._1,\n                                       path_tpot._0, none[@ts_ann])));\n-                    write_type(fcx.ccx.node_types, ast::ann_tag(old_ann),\n-                               path_tpot);\n             }\n \n             // The definition doesn't take type parameters. If the programmer"}]}