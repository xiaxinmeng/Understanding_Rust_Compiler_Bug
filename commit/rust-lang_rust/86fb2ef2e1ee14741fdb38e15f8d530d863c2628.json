{"sha": "86fb2ef2e1ee14741fdb38e15f8d530d863c2628", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ZmIyZWYyZTFlZTE0NzQxZmRiMzhlMTVmOGQ1MzBkODYzYzI2Mjg=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-30T14:36:41Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-12-04T16:43:20Z"}, "message": "Clarify handling of `exhaustive_patterns` in `all_constructors`\n\nThis is logically equivalent to the previous code.", "tree": {"sha": "aa4692f771734ddb2dbd608e87f21cf0d27a3423", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa4692f771734ddb2dbd608e87f21cf0d27a3423"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86fb2ef2e1ee14741fdb38e15f8d530d863c2628", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86fb2ef2e1ee14741fdb38e15f8d530d863c2628", "html_url": "https://github.com/rust-lang/rust/commit/86fb2ef2e1ee14741fdb38e15f8d530d863c2628", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86fb2ef2e1ee14741fdb38e15f8d530d863c2628/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fa046534e944193cc47b795b9396a7fcf411d9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fa046534e944193cc47b795b9396a7fcf411d9f", "html_url": "https://github.com/rust-lang/rust/commit/7fa046534e944193cc47b795b9396a7fcf411d9f"}], "stats": {"total": 70, "additions": 39, "deletions": 31}, "files": [{"sha": "8ee942e53e091ad15f765593881f598d57bf68e9", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 39, "deletions": 31, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/86fb2ef2e1ee14741fdb38e15f8d530d863c2628/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86fb2ef2e1ee14741fdb38e15f8d530d863c2628/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=86fb2ef2e1ee14741fdb38e15f8d530d863c2628", "patch": "@@ -1235,43 +1235,51 @@ fn all_constructors<'a, 'tcx>(\n             vec![Slice(Slice { array_len: None, kind })]\n         }\n         ty::Adt(def, substs) if def.is_enum() => {\n-            let ctors: Vec<_> = def\n-                .variants\n-                .iter()\n-                .filter(|v| {\n-                    !cx.tcx.features().exhaustive_patterns\n-                        || !v\n-                            .uninhabited_from(cx.tcx, substs, def.adt_kind())\n+            let ctors: Vec<_> = if cx.tcx.features().exhaustive_patterns {\n+                // If `exhaustive_patterns` is enabled, we exclude variants known to be\n+                // uninhabited.\n+                def.variants\n+                    .iter()\n+                    .filter(|v| {\n+                        !v.uninhabited_from(cx.tcx, substs, def.adt_kind())\n                             .contains(cx.tcx, cx.module)\n-                })\n-                .map(|v| Variant(v.def_id))\n-                .collect();\n-\n-            // If our scrutinee is *privately* an empty enum, we must treat it as though it had an\n-            // \"unknown\" constructor (in that case, all other patterns obviously can't be variants)\n-            // to avoid exposing its emptyness. See the `match_privately_empty` test for details.\n-            // FIXME: currently the only way I know of something can be a privately-empty enum is\n-            // when the exhaustive_patterns feature flag is not present, so this is only needed for\n-            // that case.\n-            let is_privately_empty = ctors.is_empty() && !cx.is_uninhabited(pcx.ty);\n+                    })\n+                    .map(|v| Variant(v.def_id))\n+                    .collect()\n+            } else {\n+                def.variants.iter().map(|v| Variant(v.def_id)).collect()\n+            };\n+\n             // If the enum is declared as `#[non_exhaustive]`, we treat it as if it had an\n-            // additionnal \"unknown\" constructor.\n+            // additional \"unknown\" constructor.\n+            // There is no point in enumerating all possible variants, because the user can't\n+            // actually match against them all themselves. So we always return only the fictitious\n+            // constructor.\n+            // E.g., in an example like:\n+            // ```\n+            //     let err: io::ErrorKind = ...;\n+            //     match err {\n+            //         io::ErrorKind::NotFound => {},\n+            //     }\n+            // ```\n+            // we don't want to show every possible IO error, but instead have only `_` as the\n+            // witness.\n             let is_declared_nonexhaustive =\n                 def.is_variant_list_non_exhaustive() && !cx.is_local(pcx.ty);\n \n+            // If our scrutinee is *privately* an empty enum, we must treat it as though it had\n+            // an \"unknown\" constructor (in that case, all other patterns obviously can't be\n+            // variants) to avoid exposing its emptyness. See the `match_privately_empty` test\n+            // for details.\n+            let is_privately_empty = if cx.tcx.features().exhaustive_patterns {\n+                // This cannot happen because we have already filtered out uninhabited variants.\n+                false\n+            } else {\n+                // FIXME: this is fishy\n+                def.variants.is_empty()\n+            };\n+\n             if is_privately_empty || is_declared_nonexhaustive {\n-                // There is no point in enumerating all possible variants, because the user can't\n-                // actually match against them themselves. So we return only the fictitious\n-                // constructor.\n-                // E.g., in an example like:\n-                // ```\n-                //     let err: io::ErrorKind = ...;\n-                //     match err {\n-                //         io::ErrorKind::NotFound => {},\n-                //     }\n-                // ```\n-                // we don't want to show every possible IO error, but instead have only `_` as the\n-                // witness.\n                 vec![NonExhaustive]\n             } else {\n                 ctors"}]}