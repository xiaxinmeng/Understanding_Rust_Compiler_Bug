{"sha": "6aef5e3b2e1112c78aa20ab687959a4025529138", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhZWY1ZTNiMmUxMTEyYzc4YWEyMGFiNjg3OTU5YTQwMjU1MjkxMzg=", "commit": {"author": {"name": "Ralph Giles", "email": "giles@mozilla.com", "date": "2017-11-30T19:20:11Z"}, "committer": {"name": "Ralph Giles", "email": "giles@mozilla.com", "date": "2017-12-02T18:41:08Z"}, "message": "Mark ascii methods on primitive types stable in 1.23.0.\n\nThe ascii_methods_on_intrinsics feature stabilization\ndidn't land in time for 1.21.0. Update the annotation\nso the documentation is correct about when these\nmethods became available.", "tree": {"sha": "0e75c8ab73ef68dc66ba6a4791ef37895eb8cd73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e75c8ab73ef68dc66ba6a4791ef37895eb8cd73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6aef5e3b2e1112c78aa20ab687959a4025529138", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6aef5e3b2e1112c78aa20ab687959a4025529138", "html_url": "https://github.com/rust-lang/rust/commit/6aef5e3b2e1112c78aa20ab687959a4025529138", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6aef5e3b2e1112c78aa20ab687959a4025529138/comments", "author": {"login": "rillian", "id": 225102, "node_id": "MDQ6VXNlcjIyNTEwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/225102?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rillian", "html_url": "https://github.com/rillian", "followers_url": "https://api.github.com/users/rillian/followers", "following_url": "https://api.github.com/users/rillian/following{/other_user}", "gists_url": "https://api.github.com/users/rillian/gists{/gist_id}", "starred_url": "https://api.github.com/users/rillian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rillian/subscriptions", "organizations_url": "https://api.github.com/users/rillian/orgs", "repos_url": "https://api.github.com/users/rillian/repos", "events_url": "https://api.github.com/users/rillian/events{/privacy}", "received_events_url": "https://api.github.com/users/rillian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rillian", "id": 225102, "node_id": "MDQ6VXNlcjIyNTEwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/225102?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rillian", "html_url": "https://github.com/rillian", "followers_url": "https://api.github.com/users/rillian/followers", "following_url": "https://api.github.com/users/rillian/following{/other_user}", "gists_url": "https://api.github.com/users/rillian/gists{/gist_id}", "starred_url": "https://api.github.com/users/rillian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rillian/subscriptions", "organizations_url": "https://api.github.com/users/rillian/orgs", "repos_url": "https://api.github.com/users/rillian/repos", "events_url": "https://api.github.com/users/rillian/events{/privacy}", "received_events_url": "https://api.github.com/users/rillian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9053fdd411e81910a86b68f0a1c3b3ca084bff62", "url": "https://api.github.com/repos/rust-lang/rust/commits/9053fdd411e81910a86b68f0a1c3b3ca084bff62", "html_url": "https://github.com/rust-lang/rust/commit/9053fdd411e81910a86b68f0a1c3b3ca084bff62"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "18bb13d847a8750bc4fe1f056fe7b446c85252a0", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6aef5e3b2e1112c78aa20ab687959a4025529138/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aef5e3b2e1112c78aa20ab687959a4025529138/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=6aef5e3b2e1112c78aa20ab687959a4025529138", "patch": "@@ -1630,7 +1630,7 @@ impl<T> [T] {\n #[cfg(not(test))]\n impl [u8] {\n     /// Checks if all bytes in this slice are within the ASCII range.\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn is_ascii(&self) -> bool {\n         self.iter().all(|b| b.is_ascii())\n@@ -1645,7 +1645,7 @@ impl [u8] {\n     /// To uppercase the value in-place, use [`make_ascii_uppercase`].\n     ///\n     /// [`make_ascii_uppercase`]: #method.make_ascii_uppercase\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_uppercase(&self) -> Vec<u8> {\n         let mut me = self.to_vec();\n@@ -1662,7 +1662,7 @@ impl [u8] {\n     /// To lowercase the value in-place, use [`make_ascii_lowercase`].\n     ///\n     /// [`make_ascii_lowercase`]: #method.make_ascii_lowercase\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_lowercase(&self) -> Vec<u8> {\n         let mut me = self.to_vec();\n@@ -1674,7 +1674,7 @@ impl [u8] {\n     ///\n     /// Same as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\n     /// but without allocating and copying temporaries.\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn eq_ignore_ascii_case(&self, other: &[u8]) -> bool {\n         self.len() == other.len() &&\n@@ -1692,7 +1692,7 @@ impl [u8] {\n     /// [`to_ascii_uppercase`].\n     ///\n     /// [`to_ascii_uppercase`]: #method.to_ascii_uppercase\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn make_ascii_uppercase(&mut self) {\n         for byte in self {\n@@ -1709,7 +1709,7 @@ impl [u8] {\n     /// [`to_ascii_lowercase`].\n     ///\n     /// [`to_ascii_lowercase`]: #method.to_ascii_lowercase\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn make_ascii_lowercase(&mut self) {\n         for byte in self {"}, {"sha": "7fa872f4ded573457450156ef277f259a6b2dde8", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6aef5e3b2e1112c78aa20ab687959a4025529138/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aef5e3b2e1112c78aa20ab687959a4025529138/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=6aef5e3b2e1112c78aa20ab687959a4025529138", "patch": "@@ -2078,7 +2078,7 @@ impl str {\n     /// assert!(ascii.is_ascii());\n     /// assert!(!non_ascii.is_ascii());\n     /// ```\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn is_ascii(&self) -> bool {\n         // We can treat each byte as character here: all multibyte characters\n@@ -2108,7 +2108,7 @@ impl str {\n     ///\n     /// [`make_ascii_uppercase`]: #method.make_ascii_uppercase\n     /// [`to_uppercase`]: #method.to_uppercase\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_uppercase(&self) -> String {\n         let mut bytes = self.as_bytes().to_vec();\n@@ -2138,7 +2138,7 @@ impl str {\n     ///\n     /// [`make_ascii_lowercase`]: #method.make_ascii_lowercase\n     /// [`to_lowercase`]: #method.to_lowercase\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_lowercase(&self) -> String {\n         let mut bytes = self.as_bytes().to_vec();\n@@ -2159,7 +2159,7 @@ impl str {\n     /// assert!(\"Ferr\u00f6s\".eq_ignore_ascii_case(\"FERR\u00f6S\"));\n     /// assert!(!\"Ferr\u00f6s\".eq_ignore_ascii_case(\"FERR\u00d6S\"));\n     /// ```\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn eq_ignore_ascii_case(&self, other: &str) -> bool {\n         self.as_bytes().eq_ignore_ascii_case(other.as_bytes())\n@@ -2174,7 +2174,7 @@ impl str {\n     /// [`to_ascii_uppercase`].\n     ///\n     /// [`to_ascii_uppercase`]: #method.to_ascii_uppercase\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     pub fn make_ascii_uppercase(&mut self) {\n         let me = unsafe { self.as_bytes_mut() };\n         me.make_ascii_uppercase()\n@@ -2189,7 +2189,7 @@ impl str {\n     /// [`to_ascii_lowercase`].\n     ///\n     /// [`to_ascii_lowercase`]: #method.to_ascii_lowercase\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     pub fn make_ascii_lowercase(&mut self) {\n         let me = unsafe { self.as_bytes_mut() };\n         me.make_ascii_lowercase()"}, {"sha": "0aad354a87299d0fcb5f2c119e6fe921bceed498", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6aef5e3b2e1112c78aa20ab687959a4025529138/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aef5e3b2e1112c78aa20ab687959a4025529138/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=6aef5e3b2e1112c78aa20ab687959a4025529138", "patch": "@@ -2286,7 +2286,7 @@ impl u8 {\n     /// assert!(ascii.is_ascii());\n     /// assert!(!non_ascii.is_ascii());\n     /// ```\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn is_ascii(&self) -> bool {\n         *self & 128 == 0\n@@ -2308,7 +2308,7 @@ impl u8 {\n     /// ```\n     ///\n     /// [`make_ascii_uppercase`]: #method.make_ascii_uppercase\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_uppercase(&self) -> u8 {\n         ASCII_UPPERCASE_MAP[*self as usize]\n@@ -2330,7 +2330,7 @@ impl u8 {\n     /// ```\n     ///\n     /// [`make_ascii_lowercase`]: #method.make_ascii_lowercase\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_lowercase(&self) -> u8 {\n         ASCII_LOWERCASE_MAP[*self as usize]\n@@ -2348,7 +2348,7 @@ impl u8 {\n     ///\n     /// assert!(lowercase_a.eq_ignore_ascii_case(&uppercase_a));\n     /// ```\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn eq_ignore_ascii_case(&self, other: &u8) -> bool {\n         self.to_ascii_lowercase() == other.to_ascii_lowercase()\n@@ -2373,7 +2373,7 @@ impl u8 {\n     /// ```\n     ///\n     /// [`to_ascii_uppercase`]: #method.to_ascii_uppercase\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn make_ascii_uppercase(&mut self) {\n         *self = self.to_ascii_uppercase();\n@@ -2398,7 +2398,7 @@ impl u8 {\n     /// ```\n     ///\n     /// [`to_ascii_lowercase`]: #method.to_ascii_lowercase\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn make_ascii_lowercase(&mut self) {\n         *self = self.to_ascii_lowercase();"}, {"sha": "ef11fb694ab01918f90bd37563b256aa4960806d", "filename": "src/libstd_unicode/char.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6aef5e3b2e1112c78aa20ab687959a4025529138/src%2Flibstd_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aef5e3b2e1112c78aa20ab687959a4025529138/src%2Flibstd_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Fchar.rs?ref=6aef5e3b2e1112c78aa20ab687959a4025529138", "patch": "@@ -938,7 +938,7 @@ impl char {\n     /// assert!(ascii.is_ascii());\n     /// assert!(!non_ascii.is_ascii());\n     /// ```\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn is_ascii(&self) -> bool {\n         *self as u32 <= 0x7F\n@@ -966,7 +966,7 @@ impl char {\n     ///\n     /// [`make_ascii_uppercase`]: #method.make_ascii_uppercase\n     /// [`to_uppercase`]: #method.to_uppercase\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_uppercase(&self) -> char {\n         if self.is_ascii() {\n@@ -998,7 +998,7 @@ impl char {\n     ///\n     /// [`make_ascii_lowercase`]: #method.make_ascii_lowercase\n     /// [`to_lowercase`]: #method.to_lowercase\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_lowercase(&self) -> char {\n         if self.is_ascii() {\n@@ -1023,7 +1023,7 @@ impl char {\n     /// assert!(upper_a.eq_ignore_ascii_case(&upper_a));\n     /// assert!(!upper_a.eq_ignore_ascii_case(&lower_z));\n     /// ```\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn eq_ignore_ascii_case(&self, other: &char) -> bool {\n         self.to_ascii_lowercase() == other.to_ascii_lowercase()\n@@ -1048,7 +1048,7 @@ impl char {\n     /// ```\n     ///\n     /// [`to_ascii_uppercase`]: #method.to_ascii_uppercase\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn make_ascii_uppercase(&mut self) {\n         *self = self.to_ascii_uppercase();\n@@ -1073,7 +1073,7 @@ impl char {\n     /// ```\n     ///\n     /// [`to_ascii_lowercase`]: #method.to_ascii_lowercase\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn make_ascii_lowercase(&mut self) {\n         *self = self.to_ascii_lowercase();"}]}