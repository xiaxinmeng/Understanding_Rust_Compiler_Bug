{"sha": "24f0778341691661121d093d4767a937fdb8ebed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ZjA3NzgzNDE2OTE2NjExMjFkMDkzZDQ3NjdhOTM3ZmRiOGViZWQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-05T01:59:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-05T01:59:45Z"}, "message": "Rollup merge of #64120 - nnethercote:move-path-parsing-earlier, r=petrochenkov\n\nMove path parsing earlier\n\nIt's a hot enough path that moving it slightly earlier gives a tiny but easy speedup.\n\nr? @petrochenkov", "tree": {"sha": "8ac126aa7ee59304a3477c7067aaa3caef23cac6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ac126aa7ee59304a3477c7067aaa3caef23cac6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24f0778341691661121d093d4767a937fdb8ebed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdcGwSCRBK7hj4Ov3rIwAAdHIIAK0Wt0eChqJhpy+TEApX0xoZ\ny2hqdDkoBXoC06qkQcr645IGPKKS2dphvQIPm0TA2Iy3bUV6mO1h3bjGJChGGTmS\nSz2mEvYgOp8STZBjgY2uB3bx/bzBj67lqL0tcQTY/X9E4cMZ3l1sWcafxMCPy7zM\nO9GBohSbDAL7bYgsTsUgAWkyhyXPhIWzsSLo5Qazd98QGk9N6u6oE8yoPaJPgDbb\neFPgYQKSynyPX4yYq6I/v5Xj68w5eZx0sRnlpvbJjIGnQe4R9cn97kWMj4PMFnvZ\nZ8igguFL6P7VoCHv18jIVMZB+gb5yvhsRXveMlCXLomgcqSzJaEVjlTiCyvMk9A=\n=QjBy\n-----END PGP SIGNATURE-----\n", "payload": "tree 8ac126aa7ee59304a3477c7067aaa3caef23cac6\nparent 8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3\nparent 8c74eb77902dc5c4fdf853e9159dd5fadd00601d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567648785 +0200\ncommitter GitHub <noreply@github.com> 1567648785 +0200\n\nRollup merge of #64120 - nnethercote:move-path-parsing-earlier, r=petrochenkov\n\nMove path parsing earlier\n\nIt's a hot enough path that moving it slightly earlier gives a tiny but easy speedup.\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24f0778341691661121d093d4767a937fdb8ebed", "html_url": "https://github.com/rust-lang/rust/commit/24f0778341691661121d093d4767a937fdb8ebed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24f0778341691661121d093d4767a937fdb8ebed/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "html_url": "https://github.com/rust-lang/rust/commit/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3"}, {"sha": "8c74eb77902dc5c4fdf853e9159dd5fadd00601d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c74eb77902dc5c4fdf853e9159dd5fadd00601d", "html_url": "https://github.com/rust-lang/rust/commit/8c74eb77902dc5c4fdf853e9159dd5fadd00601d"}], "stats": {"total": 56, "additions": 30, "deletions": 26}, "files": [{"sha": "e502a08f4b253a879fa46a583b424fb2f3e716ef", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 30, "deletions": 26, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/24f0778341691661121d093d4767a937fdb8ebed/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f0778341691661121d093d4767a937fdb8ebed/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=24f0778341691661121d093d4767a937fdb8ebed", "patch": "@@ -889,6 +889,36 @@ impl<'a> Parser<'a> {\n                     hi = path.span;\n                     return Ok(self.mk_expr(lo.to(hi), ExprKind::Path(Some(qself), path), attrs));\n                 }\n+                if self.token.is_path_start() {\n+                    let path = self.parse_path(PathStyle::Expr)?;\n+\n+                    // `!`, as an operator, is prefix, so we know this isn't that\n+                    if self.eat(&token::Not) {\n+                        // MACRO INVOCATION expression\n+                        let (delim, tts) = self.expect_delimited_token_tree()?;\n+                        hi = self.prev_span;\n+                        ex = ExprKind::Mac(Mac {\n+                            path,\n+                            tts,\n+                            delim,\n+                            span: lo.to(hi),\n+                            prior_type_ascription: self.last_type_ascription,\n+                        });\n+                    } else if self.check(&token::OpenDelim(token::Brace)) {\n+                        if let Some(expr) = self.maybe_parse_struct_expr(lo, &path, &attrs) {\n+                            return expr;\n+                        } else {\n+                            hi = path.span;\n+                            ex = ExprKind::Path(None, path);\n+                        }\n+                    } else {\n+                        hi = path.span;\n+                        ex = ExprKind::Path(None, path);\n+                    }\n+\n+                    let expr = self.mk_expr(lo.to(hi), ex, attrs);\n+                    return self.maybe_recover_from_bad_qpath(expr, true);\n+                }\n                 if self.check_keyword(kw::Move) || self.check_keyword(kw::Static) {\n                     return self.parse_lambda_expr(attrs);\n                 }\n@@ -1007,32 +1037,6 @@ impl<'a> Parser<'a> {\n                     let (await_hi, e_kind) = self.parse_incorrect_await_syntax(lo, self.prev_span)?;\n                     hi = await_hi;\n                     ex = e_kind;\n-                } else if self.token.is_path_start() {\n-                    let path = self.parse_path(PathStyle::Expr)?;\n-\n-                    // `!`, as an operator, is prefix, so we know this isn't that\n-                    if self.eat(&token::Not) {\n-                        // MACRO INVOCATION expression\n-                        let (delim, tts) = self.expect_delimited_token_tree()?;\n-                        hi = self.prev_span;\n-                        ex = ExprKind::Mac(Mac {\n-                            path,\n-                            tts,\n-                            delim,\n-                            span: lo.to(hi),\n-                            prior_type_ascription: self.last_type_ascription,\n-                        });\n-                    } else if self.check(&token::OpenDelim(token::Brace)) {\n-                        if let Some(expr) = self.maybe_parse_struct_expr(lo, &path, &attrs) {\n-                            return expr;\n-                        } else {\n-                            hi = path.span;\n-                            ex = ExprKind::Path(None, path);\n-                        }\n-                    } else {\n-                        hi = path.span;\n-                        ex = ExprKind::Path(None, path);\n-                    }\n                 } else {\n                     if !self.unclosed_delims.is_empty() && self.check(&token::Semi) {\n                         // Don't complain about bare semicolons after unclosed braces"}]}