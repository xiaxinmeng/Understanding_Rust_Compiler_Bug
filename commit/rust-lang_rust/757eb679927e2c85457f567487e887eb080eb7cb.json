{"sha": "757eb679927e2c85457f567487e887eb080eb7cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1N2ViNjc5OTI3ZTJjODU0NTdmNTY3NDg3ZTg4N2ViMDgwZWI3Y2I=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-19T20:17:25Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-19T20:17:25Z"}, "message": "review comments", "tree": {"sha": "b50c36252f34f8ec34afbc0668d3a1601014f219", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b50c36252f34f8ec34afbc0668d3a1601014f219"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/757eb679927e2c85457f567487e887eb080eb7cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/757eb679927e2c85457f567487e887eb080eb7cb", "html_url": "https://github.com/rust-lang/rust/commit/757eb679927e2c85457f567487e887eb080eb7cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/757eb679927e2c85457f567487e887eb080eb7cb/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6007e6f649feac9a0cb39270444033f8dbfa9259", "url": "https://api.github.com/repos/rust-lang/rust/commits/6007e6f649feac9a0cb39270444033f8dbfa9259", "html_url": "https://github.com/rust-lang/rust/commit/6007e6f649feac9a0cb39270444033f8dbfa9259"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "51d91cc562f6821d6cd8081e0b35d8e11fa0dfb2", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757eb679927e2c85457f567487e887eb080eb7cb/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757eb679927e2c85457f567487e887eb080eb7cb/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=757eb679927e2c85457f567487e887eb080eb7cb", "patch": "@@ -2173,7 +2173,7 @@ impl StructField {\n /// Id of the whole struct lives in `Item`.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub enum VariantData {\n-    Struct(HirVec<StructField>, HirId, bool),\n+    Struct(HirVec<StructField>, HirId, /* recovered */ bool),\n     Tuple(HirVec<StructField>, HirId),\n     Unit(HirId),\n }"}, {"sha": "2cbd2dfeb25d6372d9fb58b283f3055126736e45", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757eb679927e2c85457f567487e887eb080eb7cb/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757eb679927e2c85457f567487e887eb080eb7cb/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=757eb679927e2c85457f567487e887eb080eb7cb", "patch": "@@ -620,7 +620,7 @@ pub enum PatKind {\n \n     /// A struct or struct variant pattern (e.g., `Variant {x, y, ..}`).\n     /// The `bool` is `true` in the presence of a `..`.\n-    Struct(Path, Vec<Spanned<FieldPat>>, bool),\n+    Struct(Path, Vec<Spanned<FieldPat>>, /* recovered */ bool),\n \n     /// A tuple struct/variant pattern (`Variant(x, y, .., z)`).\n     /// If the `..` pattern fragment is present, then `Option<usize>` denotes its position."}, {"sha": "361ecce5bc4388467b444fb27914525069eb39c2", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/757eb679927e2c85457f567487e887eb080eb7cb/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757eb679927e2c85457f567487e887eb080eb7cb/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=757eb679927e2c85457f567487e887eb080eb7cb", "patch": "@@ -6902,7 +6902,9 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    fn parse_record_struct_body(&mut self) -> PResult<'a, (Vec<StructField>, bool)> {\n+    fn parse_record_struct_body(\n+        &mut self,\n+    ) -> PResult<'a, (Vec<StructField>, /* recovered */ bool)> {\n         let mut fields = Vec::new();\n         let mut recovered = false;\n         if self.eat(&token::OpenDelim(token::Brace)) {"}]}