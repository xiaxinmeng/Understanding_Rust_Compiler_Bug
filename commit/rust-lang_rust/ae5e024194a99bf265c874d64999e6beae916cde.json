{"sha": "ae5e024194a99bf265c874d64999e6beae916cde", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNWUwMjQxOTRhOTliZjI2NWM4NzRkNjQ5OTllNmJlYWU5MTZjZGU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-02T12:23:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-02T12:23:14Z"}, "message": "Rollup merge of #82376 - tmiasko:inline-options, r=oli-obk\n\nAdd option to enable MIR inlining independently of mir-opt-level\n\nAdd `-Zinline-mir` option that enables MIR inlining independently of the\ncurrent MIR opt level. The primary use-case is enabling MIR inlining on the\ndefault MIR opt level.\n\nTurn inlining thresholds into optional values to make it possible to configure\ndifferent defaults depending on the current mir-opt-level (although thresholds\nare yet to be used in such a manner).", "tree": {"sha": "b89ae2d6ce5019e09da56b5bb6fe44d468ce0f96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b89ae2d6ce5019e09da56b5bb6fe44d468ce0f96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae5e024194a99bf265c874d64999e6beae916cde", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPi4zCRBK7hj4Ov3rIwAAdHIIAAxlYbqLYEdm4PNQ6xWSf9Gc\nI1yiw7mJWhI0OQbos2lm156lWdaN5I1HAvDxeBFsm3JazqM9pdXtPhtLw9tPt6AA\nuG2esTAiOg6n+e8R3n90NQCLn5foQS5P3lBWcb9enRvQZ7leNmYQuKf7rz6cy+4k\nocPsedzAusHZu+ErBbwTxAh5zuzxzuD0y+/yzgg2qB02GFmqZR02kLXuGu4ynSsr\ne8hKrWZ5bO3Glngh5aRig8l0ycCRp1wvljbO39quA9maWQ+4haJsUbs1b9wXTQli\nPs9k7CvyIdtSIWjdMVpp5yTh7/CKZjyQreRASRbeNcDqMUDxfvlILH3vqNLPXJQ=\n=GeoL\n-----END PGP SIGNATURE-----\n", "payload": "tree b89ae2d6ce5019e09da56b5bb6fe44d468ce0f96\nparent a9339ed531d888fbc9d68d117cf7fc905926649e\nparent 500aeccc5b3135cc5a400faa3b739abaed87d722\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1614687794 +0900\ncommitter GitHub <noreply@github.com> 1614687794 +0900\n\nRollup merge of #82376 - tmiasko:inline-options, r=oli-obk\n\nAdd option to enable MIR inlining independently of mir-opt-level\n\nAdd `-Zinline-mir` option that enables MIR inlining independently of the\ncurrent MIR opt level. The primary use-case is enabling MIR inlining on the\ndefault MIR opt level.\n\nTurn inlining thresholds into optional values to make it possible to configure\ndifferent defaults depending on the current mir-opt-level (although thresholds\nare yet to be used in such a manner).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae5e024194a99bf265c874d64999e6beae916cde", "html_url": "https://github.com/rust-lang/rust/commit/ae5e024194a99bf265c874d64999e6beae916cde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae5e024194a99bf265c874d64999e6beae916cde/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9339ed531d888fbc9d68d117cf7fc905926649e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9339ed531d888fbc9d68d117cf7fc905926649e", "html_url": "https://github.com/rust-lang/rust/commit/a9339ed531d888fbc9d68d117cf7fc905926649e"}, {"sha": "500aeccc5b3135cc5a400faa3b739abaed87d722", "url": "https://api.github.com/repos/rust-lang/rust/commits/500aeccc5b3135cc5a400faa3b739abaed87d722", "html_url": "https://github.com/rust-lang/rust/commit/500aeccc5b3135cc5a400faa3b739abaed87d722"}], "stats": {"total": 50, "additions": 29, "deletions": 21}, "files": [{"sha": "9a11b53488786a15fe591e09e454e3b137991d9b", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae5e024194a99bf265c874d64999e6beae916cde/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae5e024194a99bf265c874d64999e6beae916cde/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=ae5e024194a99bf265c874d64999e6beae916cde", "patch": "@@ -557,8 +557,9 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(function_sections, Some(false));\n     tracked!(human_readable_cgu_names, true);\n     tracked!(inline_in_all_cgus, Some(true));\n-    tracked!(inline_mir_threshold, 123);\n-    tracked!(inline_mir_hint_threshold, 123);\n+    tracked!(inline_mir, Some(true));\n+    tracked!(inline_mir_threshold, Some(123));\n+    tracked!(inline_mir_hint_threshold, Some(123));\n     tracked!(insert_sideeffect, true);\n     tracked!(instrument_coverage, true);\n     tracked!(instrument_mcount, true);"}, {"sha": "16410175bd25b1d9569d06e517c6f8d29f4a7d4c", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ae5e024194a99bf265c874d64999e6beae916cde/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae5e024194a99bf265c874d64999e6beae916cde/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=ae5e024194a99bf265c874d64999e6beae916cde", "patch": "@@ -37,21 +37,27 @@ struct CallSite<'tcx> {\n     source_info: SourceInfo,\n }\n \n+/// Returns true if MIR inlining is enabled in the current compilation session.\n+crate fn is_enabled(tcx: TyCtxt<'_>) -> bool {\n+    if tcx.sess.opts.debugging_opts.instrument_coverage {\n+        // Since `Inline` happens after `InstrumentCoverage`, the function-specific coverage\n+        // counters can be invalidated, such as by merging coverage counter statements from\n+        // a pre-inlined function into a different function. This kind of change is invalid,\n+        // so inlining must be skipped. Note: This check is performed here so inlining can\n+        // be disabled without preventing other optimizations (regardless of `mir_opt_level`).\n+        return false;\n+    }\n+\n+    if let Some(enabled) = tcx.sess.opts.debugging_opts.inline_mir {\n+        return enabled;\n+    }\n+\n+    tcx.sess.opts.debugging_opts.mir_opt_level >= 2\n+}\n+\n impl<'tcx> MirPass<'tcx> for Inline {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        // If you change this optimization level, also change the level in\n-        // `mir_drops_elaborated_and_const_checked` for the call to `mir_inliner_callees`.\n-        // Otherwise you will get an ICE about stolen MIR.\n-        if tcx.sess.opts.debugging_opts.mir_opt_level < 2 {\n-            return;\n-        }\n-\n-        if tcx.sess.opts.debugging_opts.instrument_coverage {\n-            // Since `Inline` happens after `InstrumentCoverage`, the function-specific coverage\n-            // counters can be invalidated, such as by merging coverage counter statements from\n-            // a pre-inlined function into a different function. This kind of change is invalid,\n-            // so inlining must be skipped. Note: This check is performed here so inlining can\n-            // be disabled without preventing other optimizations (regardless of `mir_opt_level`).\n+        if !is_enabled(tcx) {\n             return;\n         }\n \n@@ -343,9 +349,9 @@ impl Inliner<'tcx> {\n         let tcx = self.tcx;\n \n         let mut threshold = if callee_attrs.requests_inline() {\n-            self.tcx.sess.opts.debugging_opts.inline_mir_hint_threshold\n+            self.tcx.sess.opts.debugging_opts.inline_mir_hint_threshold.unwrap_or(100)\n         } else {\n-            self.tcx.sess.opts.debugging_opts.inline_mir_threshold\n+            self.tcx.sess.opts.debugging_opts.inline_mir_threshold.unwrap_or(50)\n         };\n \n         // Give a bonus functions with a small number of blocks,"}, {"sha": "9cb8abf75c424cbab028689a2fab79947ff48fa6", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ae5e024194a99bf265c874d64999e6beae916cde/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae5e024194a99bf265c874d64999e6beae916cde/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=ae5e024194a99bf265c874d64999e6beae916cde", "patch": "@@ -430,8 +430,7 @@ fn mir_drops_elaborated_and_const_checked<'tcx>(\n         let def = ty::WithOptConstParam::unknown(did);\n \n         // Do not compute the mir call graph without said call graph actually being used.\n-        // Keep this in sync with the mir inliner's optimization level.\n-        if tcx.sess.opts.debugging_opts.mir_opt_level >= 2 {\n+        if inline::is_enabled(tcx) {\n             let _ = tcx.mir_inliner_callees(ty::InstanceDef::Item(def));\n         }\n     }"}, {"sha": "e2b6b1dc2437b40cb8e58a169c98471bbdacfc11", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae5e024194a99bf265c874d64999e6beae916cde/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae5e024194a99bf265c874d64999e6beae916cde/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=ae5e024194a99bf265c874d64999e6beae916cde", "patch": "@@ -957,9 +957,11 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         (default: no)\"),\n     incremental_verify_ich: bool = (false, parse_bool, [UNTRACKED],\n         \"verify incr. comp. hashes of green query instances (default: no)\"),\n-    inline_mir_threshold: usize = (50, parse_uint, [TRACKED],\n+    inline_mir: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"enable MIR inlining (default: no)\"),\n+    inline_mir_threshold: Option<usize> = (None, parse_opt_uint, [TRACKED],\n         \"a default MIR inlining threshold (default: 50)\"),\n-    inline_mir_hint_threshold: usize = (100, parse_uint, [TRACKED],\n+    inline_mir_hint_threshold: Option<usize> = (None, parse_opt_uint, [TRACKED],\n         \"inlining threshold for functions with inline hint (default: 100)\"),\n     inline_in_all_cgus: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"control whether `#[inline]` functions are in all CGUs\"),"}]}