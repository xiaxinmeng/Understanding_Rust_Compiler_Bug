{"sha": "801725a77b17a0641fcf40a310f491d71b059d80", "node_id": "C_kwDOAAsO6NoAKDgwMTcyNWE3N2IxN2EwNjQxZmNmNDBhMzEwZjQ5MWQ3MWIwNTlkODA", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-06-14T05:58:46Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-06-14T05:58:46Z"}, "message": "suggest adding a `#[macro_export]` to a private macro", "tree": {"sha": "a0fb1adcf9c110f3ff2db5fbf8198b3bdf6d3d4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0fb1adcf9c110f3ff2db5fbf8198b3bdf6d3d4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/801725a77b17a0641fcf40a310f491d71b059d80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/801725a77b17a0641fcf40a310f491d71b059d80", "html_url": "https://github.com/rust-lang/rust/commit/801725a77b17a0641fcf40a310f491d71b059d80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/801725a77b17a0641fcf40a310f491d71b059d80/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "083721a1a7365d3afe1521cd2661b2201aac0450", "url": "https://api.github.com/repos/rust-lang/rust/commits/083721a1a7365d3afe1521cd2661b2201aac0450", "html_url": "https://github.com/rust-lang/rust/commit/083721a1a7365d3afe1521cd2661b2201aac0450"}], "stats": {"total": 72, "additions": 62, "deletions": 10}, "files": [{"sha": "a457169c74b7f0cede7dfb9bf541e8a10e75bd22", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/801725a77b17a0641fcf40a310f491d71b059d80/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/801725a77b17a0641fcf40a310f491d71b059d80/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=801725a77b17a0641fcf40a310f491d71b059d80", "patch": "@@ -12,7 +12,7 @@ use rustc_ast::NodeId;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::intern::Interned;\n use rustc_errors::{pluralize, struct_span_err, Applicability, MultiSpan};\n-use rustc_hir::def::{self, PartialRes};\n+use rustc_hir::def::{self, DefKind, PartialRes};\n use rustc_middle::metadata::ModChild;\n use rustc_middle::span_bug;\n use rustc_middle::ty;\n@@ -922,11 +922,35 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                         .note(&format!(\"consider declaring type or module `{}` with `pub`\", ident))\n                         .emit();\n                 } else {\n-                    let note_msg =\n-                        format!(\"consider marking `{}` as `pub` in the imported module\", ident);\n-                    struct_span_err!(self.r.session, import.span, E0364, \"{}\", error_msg)\n-                        .span_note(import.span, &note_msg)\n-                        .emit();\n+                    let mut err =\n+                        struct_span_err!(self.r.session, import.span, E0364, \"{error_msg}\");\n+                    match binding.kind {\n+                        NameBindingKind::Res(Res::Def(DefKind::Macro(_), _def_id), _)\n+                            // exclude decl_macro\n+                            if !self.r.session.features_untracked().decl_macro\n+                                || !self\n+                                    .r\n+                                    .session\n+                                    .source_map()\n+                                    .span_to_snippet(binding.span)\n+                                    .map(|snippet| snippet.starts_with(\"macro \"))\n+                                    .unwrap_or(true) =>\n+                        {\n+                            err.span_help(\n+                                binding.span,\n+                                \"consider adding a `#[macro_export]` to the macro in the imported module\",\n+                            );\n+                        }\n+                        _ => {\n+                            err.span_note(\n+                                import.span,\n+                                &format!(\n+                                    \"consider marking `{ident}` as `pub` in the imported module\"\n+                                ),\n+                            );\n+                        }\n+                    }\n+                    err.emit();\n                 }\n             }\n         }"}, {"sha": "5b53a861d25b5524e1216cfd854ebc8703581812", "filename": "src/test/ui/privacy/macro-private-reexport.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/801725a77b17a0641fcf40a310f491d71b059d80/src%2Ftest%2Fui%2Fprivacy%2Fmacro-private-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/801725a77b17a0641fcf40a310f491d71b059d80/src%2Ftest%2Fui%2Fprivacy%2Fmacro-private-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fmacro-private-reexport.rs?ref=801725a77b17a0641fcf40a310f491d71b059d80", "patch": "@@ -0,0 +1,11 @@\n+// edition:2018\n+\n+mod foo {\n+    macro_rules! bar {\n+        () => {};\n+    }\n+\n+    pub use bar as _; //~ ERROR `bar` is only public within the crate, and cannot be re-exported outside\n+}\n+\n+fn main() {}"}, {"sha": "af85cbcf3f2e34aa9d83b6ab287e9aaccc946364", "filename": "src/test/ui/privacy/macro-private-reexport.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/801725a77b17a0641fcf40a310f491d71b059d80/src%2Ftest%2Fui%2Fprivacy%2Fmacro-private-reexport.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/801725a77b17a0641fcf40a310f491d71b059d80/src%2Ftest%2Fui%2Fprivacy%2Fmacro-private-reexport.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fmacro-private-reexport.stderr?ref=801725a77b17a0641fcf40a310f491d71b059d80", "patch": "@@ -0,0 +1,17 @@\n+error[E0364]: `bar` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/macro-private-reexport.rs:8:13\n+   |\n+LL |     pub use bar as _;\n+   |             ^^^^^^^^\n+   |\n+help: consider adding a `#[macro_export]` to the macro in the imported module\n+  --> $DIR/macro-private-reexport.rs:4:5\n+   |\n+LL | /     macro_rules! bar {\n+LL | |         () => {};\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0364`."}, {"sha": "9f8c928c32c04dd96cdeedc02ca64d3193677484", "filename": "src/test/ui/rust-2018/uniform-paths/macro-rules.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/801725a77b17a0641fcf40a310f491d71b059d80/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/801725a77b17a0641fcf40a310f491d71b059d80/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.stderr?ref=801725a77b17a0641fcf40a310f491d71b059d80", "patch": "@@ -4,11 +4,11 @@ error[E0364]: `legacy_macro` is only public within the crate, and cannot be re-e\n LL |     pub use legacy_macro as _;\n    |             ^^^^^^^^^^^^^^^^^\n    |\n-note: consider marking `legacy_macro` as `pub` in the imported module\n-  --> $DIR/macro-rules.rs:11:13\n+help: consider adding a `#[macro_export]` to the macro in the imported module\n+  --> $DIR/macro-rules.rs:7:5\n    |\n-LL |     pub use legacy_macro as _;\n-   |             ^^^^^^^^^^^^^^^^^\n+LL |     macro_rules! legacy_macro { () => () }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0659]: `legacy_macro` is ambiguous\n   --> $DIR/macro-rules.rs:31:13"}]}