{"sha": "5f3dfe6c5195baa6f05e7e4dddc113037055a599", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmM2RmZTZjNTE5NWJhYTZmMDVlN2U0ZGRkYzExMzAzNzA1NWE1OTk=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-03-11T14:18:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-11T14:18:43Z"}, "message": "Format the if expression at the end of the block in a single line (#3338)", "tree": {"sha": "9ac90688d0649d1287b7d17a87aecb60d8baf3fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ac90688d0649d1287b7d17a87aecb60d8baf3fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f3dfe6c5195baa6f05e7e4dddc113037055a599", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJchm5DCRBK7hj4Ov3rIwAAdHIIAEse7pqc41lx0ccY3+8KWcJh\nVl24zH2jFiJh6SHlx+PmGQIepnw9pfR3LSS47VP/Jjwuba29YeEQmOjlyVbwwl/I\nEsMrwJLslP937NAZxIehjG/iVY7xUrswa1FyWTpbJlucdii+5fuo9MvpVMP/ZV5L\njfgK9zzgCo8EHwCI1UQTRJnaqamfyu48/Ina3VCRtSBJ4//VYeDoMnnG1tx/4sPL\n/vX9PON0dNM3QtckQw83bEDJq8oKk1m7V6IxIwoZyL1FM7iDxeO2WkowEb4T/MKn\nN54Ar3/S/yYfdcZeFeQqcZSw7m0KShaUnHIyqBAX55Cn9Oc2LZP0M2pJlsslyok=\n=QXsV\n-----END PGP SIGNATURE-----\n", "payload": "tree 9ac90688d0649d1287b7d17a87aecb60d8baf3fb\nparent 4f3a353278109b71d9bb15d125190e8d7e23e7b6\nauthor Seiichi Uchida <seuchida@gmail.com> 1552313923 +0900\ncommitter GitHub <noreply@github.com> 1552313923 +0900\n\nFormat the if expression at the end of the block in a single line (#3338)\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f3dfe6c5195baa6f05e7e4dddc113037055a599", "html_url": "https://github.com/rust-lang/rust/commit/5f3dfe6c5195baa6f05e7e4dddc113037055a599", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f3dfe6c5195baa6f05e7e4dddc113037055a599/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f3a353278109b71d9bb15d125190e8d7e23e7b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f3a353278109b71d9bb15d125190e8d7e23e7b6", "html_url": "https://github.com/rust-lang/rust/commit/4f3a353278109b71d9bb15d125190e8d7e23e7b6"}], "stats": {"total": 209, "additions": 199, "deletions": 10}, "files": [{"sha": "068b8f7fed6bc556e56068cff9d399cd936f07ae", "filename": "src/expr.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5f3dfe6c5195baa6f05e7e4dddc113037055a599/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3dfe6c5195baa6f05e7e4dddc113037055a599/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=5f3dfe6c5195baa6f05e7e4dddc113037055a599", "patch": "@@ -664,11 +664,7 @@ fn to_control_flow(expr: &ast::Expr, expr_type: ExprType) -> Option<ControlFlow<\n }\n \n fn choose_matcher(pats: &[&ast::Pat]) -> &'static str {\n-    if pats.is_empty() {\n-        \"\"\n-    } else {\n-        \"let\"\n-    }\n+    if pats.is_empty() { \"\" } else { \"let\" }\n }\n \n impl<'a> ControlFlow<'a> {\n@@ -1182,6 +1178,16 @@ pub fn stmt_is_expr(stmt: &ast::Stmt) -> bool {\n     }\n }\n \n+pub(crate) fn stmt_is_if(stmt: &ast::Stmt) -> bool {\n+    match stmt.node {\n+        ast::StmtKind::Expr(ref e) => match e.node {\n+            ast::ExprKind::If(..) => true,\n+            _ => false,\n+        },\n+        _ => false,\n+    }\n+}\n+\n pub fn is_unsafe_block(block: &ast::Block) -> bool {\n     if let ast::BlockCheckMode::Unsafe(..) = block.rules {\n         true"}, {"sha": "e1a440f3441218f0d0ba5a468573ed57aed13c84", "filename": "src/visitor.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5f3dfe6c5195baa6f05e7e4dddc113037055a599/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3dfe6c5195baa6f05e7e4dddc113037055a599/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=5f3dfe6c5195baa6f05e7e4dddc113037055a599", "patch": "@@ -6,7 +6,8 @@ use syntax::{ast, visit};\n \n use crate::attr::*;\n use crate::comment::{CodeCharKind, CommentCodeSlices, FindUncommented};\n-use crate::config::{BraceStyle, Config};\n+use crate::config::{BraceStyle, Config, Version};\n+use crate::expr::{format_expr, ExprType};\n use crate::items::{\n     format_impl, format_trait, format_trait_alias, is_mod_decl, is_use_item,\n     rewrite_associated_impl_type, rewrite_associated_type, rewrite_existential_impl_type,\n@@ -20,7 +21,7 @@ use crate::source_map::{LineRangeUtils, SpanUtils};\n use crate::spanned::Spanned;\n use crate::utils::{\n     self, contains_skip, count_newlines, inner_attributes, mk_sp, ptr_vec_to_ref_vec,\n-    rewrite_ident, DEPR_SKIP_ANNOTATION,\n+    rewrite_ident, stmt_expr, DEPR_SKIP_ANNOTATION,\n };\n use crate::{ErrorKind, FormatReport, FormattingError};\n \n@@ -177,7 +178,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         self.walk_block_stmts(b);\n \n         if !b.stmts.is_empty() {\n-            if let Some(expr) = utils::stmt_expr(&b.stmts[b.stmts.len() - 1]) {\n+            if let Some(expr) = stmt_expr(&b.stmts[b.stmts.len() - 1]) {\n                 if utils::semicolon_for_expr(&self.get_context(), expr) {\n                     self.push_str(\";\");\n                 }\n@@ -694,8 +695,22 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             .collect();\n \n         if items.is_empty() {\n-            self.visit_stmt(&stmts[0]);\n-            self.walk_stmts(&stmts[1..]);\n+            // The `if` expression at the end of the block should be formatted in a single\n+            // line if possible.\n+            if self.config.version() == Version::Two\n+                && stmts.len() == 1\n+                && crate::expr::stmt_is_if(&stmts[0])\n+                && !contains_skip(get_attrs_from_stmt(&stmts[0]))\n+            {\n+                let shape = self.shape();\n+                let rewrite = self.with_context(|ctx| {\n+                    format_expr(stmt_expr(&stmts[0])?, ExprType::SubExpression, ctx, shape)\n+                });\n+                self.push_rewrite(stmts[0].span(), rewrite);\n+            } else {\n+                self.visit_stmt(&stmts[0]);\n+                self.walk_stmts(&stmts[1..]);\n+            }\n         } else {\n             self.visit_items_with_reordering(&items);\n             self.walk_stmts(&stmts[items.len()..]);"}, {"sha": "d3dcbe6787a11b6bb489bb7e83d45b85cc00df30", "filename": "tests/source/one_line_if_v1.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5f3dfe6c5195baa6f05e7e4dddc113037055a599/tests%2Fsource%2Fone_line_if_v1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3dfe6c5195baa6f05e7e4dddc113037055a599/tests%2Fsource%2Fone_line_if_v1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fone_line_if_v1.rs?ref=5f3dfe6c5195baa6f05e7e4dddc113037055a599", "patch": "@@ -0,0 +1,42 @@\n+// rustfmt-version: One\n+\n+fn plain_if(x: bool) -> u8 {\n+    if x {\n+        0\n+    } else {\n+        1\n+    }\n+}\n+\n+fn paren_if(x: bool) -> u8 {\n+    (if x { 0 } else { 1 })\n+}\n+\n+fn let_if(x: bool) -> u8 {\n+    let x = if x {\n+        foo()\n+    } else {\n+        bar()\n+    };\n+    x\n+}\n+\n+fn return_if(x: bool) -> u8 {\n+    return if x {\n+        0\n+    } else {\n+        1\n+    };\n+}\n+\n+fn multi_if() {\n+    use std::io;\n+    if x { foo() } else { bar() }\n+    if x { foo() } else { bar() }\n+}\n+\n+fn middle_if() {\n+    use std::io;\n+    if x { foo() } else { bar() }\n+    let x = 1;\n+}"}, {"sha": "40c834959f90e796e24e411d4d493bbadcf2edbb", "filename": "tests/source/one_line_if_v2.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5f3dfe6c5195baa6f05e7e4dddc113037055a599/tests%2Fsource%2Fone_line_if_v2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3dfe6c5195baa6f05e7e4dddc113037055a599/tests%2Fsource%2Fone_line_if_v2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fone_line_if_v2.rs?ref=5f3dfe6c5195baa6f05e7e4dddc113037055a599", "patch": "@@ -0,0 +1,42 @@\n+// rustfmt-version: Two\n+\n+fn plain_if(x: bool) -> u8 {\n+    if x {\n+        0\n+    } else {\n+        1\n+    }\n+}\n+\n+fn paren_if(x: bool) -> u8 {\n+    (if x { 0 } else { 1 })\n+}\n+\n+fn let_if(x: bool) -> u8 {\n+    let x = if x {\n+        foo()\n+    } else {\n+        bar()\n+    };\n+    x\n+}\n+\n+fn return_if(x: bool) -> u8 {\n+    return if x {\n+        0\n+    } else {\n+        1\n+    };\n+}\n+\n+fn multi_if() {\n+    use std::io;\n+    if x { foo() } else { bar() }\n+    if x { foo() } else { bar() }\n+}\n+\n+fn middle_if() {\n+    use std::io;\n+    if x { foo() } else { bar() }\n+    let x = 1;\n+}"}, {"sha": "b3c6c4cbeb203361197de4a43397a5b265f9671c", "filename": "tests/target/one_line_if_v1.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5f3dfe6c5195baa6f05e7e4dddc113037055a599/tests%2Ftarget%2Fone_line_if_v1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3dfe6c5195baa6f05e7e4dddc113037055a599/tests%2Ftarget%2Fone_line_if_v1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fone_line_if_v1.rs?ref=5f3dfe6c5195baa6f05e7e4dddc113037055a599", "patch": "@@ -0,0 +1,46 @@\n+// rustfmt-version: One\n+\n+fn plain_if(x: bool) -> u8 {\n+    if x {\n+        0\n+    } else {\n+        1\n+    }\n+}\n+\n+fn paren_if(x: bool) -> u8 {\n+    (if x { 0 } else { 1 })\n+}\n+\n+fn let_if(x: bool) -> u8 {\n+    let x = if x { foo() } else { bar() };\n+    x\n+}\n+\n+fn return_if(x: bool) -> u8 {\n+    return if x { 0 } else { 1 };\n+}\n+\n+fn multi_if() {\n+    use std::io;\n+    if x {\n+        foo()\n+    } else {\n+        bar()\n+    }\n+    if x {\n+        foo()\n+    } else {\n+        bar()\n+    }\n+}\n+\n+fn middle_if() {\n+    use std::io;\n+    if x {\n+        foo()\n+    } else {\n+        bar()\n+    }\n+    let x = 1;\n+}"}, {"sha": "81ca4c8b8b47327069f01a14946f3edd5b5a81f7", "filename": "tests/target/one_line_if_v2.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5f3dfe6c5195baa6f05e7e4dddc113037055a599/tests%2Ftarget%2Fone_line_if_v2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3dfe6c5195baa6f05e7e4dddc113037055a599/tests%2Ftarget%2Fone_line_if_v2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fone_line_if_v2.rs?ref=5f3dfe6c5195baa6f05e7e4dddc113037055a599", "patch": "@@ -0,0 +1,38 @@\n+// rustfmt-version: Two\n+\n+fn plain_if(x: bool) -> u8 {\n+    if x { 0 } else { 1 }\n+}\n+\n+fn paren_if(x: bool) -> u8 {\n+    (if x { 0 } else { 1 })\n+}\n+\n+fn let_if(x: bool) -> u8 {\n+    let x = if x { foo() } else { bar() };\n+    x\n+}\n+\n+fn return_if(x: bool) -> u8 {\n+    return if x { 0 } else { 1 };\n+}\n+\n+fn multi_if() {\n+    use std::io;\n+    if x {\n+        foo()\n+    } else {\n+        bar()\n+    }\n+    if x { foo() } else { bar() }\n+}\n+\n+fn middle_if() {\n+    use std::io;\n+    if x {\n+        foo()\n+    } else {\n+        bar()\n+    }\n+    let x = 1;\n+}"}]}