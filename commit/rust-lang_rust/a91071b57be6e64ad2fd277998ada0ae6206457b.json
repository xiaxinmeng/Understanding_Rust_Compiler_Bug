{"sha": "a91071b57be6e64ad2fd277998ada0ae6206457b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MTA3MWI1N2JlNmU2NGFkMmZkMjc3OTk4YWRhMGFlNjIwNjQ1N2I=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-14T10:27:11Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-14T14:45:17Z"}, "message": "internal: cut deps between assists and diagnostics", "tree": {"sha": "7b9bdf5cba78b6b4fd87d197a851c3d764b45e01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b9bdf5cba78b6b4fd87d197a851c3d764b45e01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a91071b57be6e64ad2fd277998ada0ae6206457b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a91071b57be6e64ad2fd277998ada0ae6206457b", "html_url": "https://github.com/rust-lang/rust/commit/a91071b57be6e64ad2fd277998ada0ae6206457b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a91071b57be6e64ad2fd277998ada0ae6206457b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e8dab631b4ab429eeade7f5302e8de9dcd0b398", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e8dab631b4ab429eeade7f5302e8de9dcd0b398", "html_url": "https://github.com/rust-lang/rust/commit/2e8dab631b4ab429eeade7f5302e8de9dcd0b398"}], "stats": {"total": 287, "additions": 147, "deletions": 140}, "files": [{"sha": "847277118387355de4f52cc016007a7de5722151", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a91071b57be6e64ad2fd277998ada0ae6206457b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a91071b57be6e64ad2fd277998ada0ae6206457b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a91071b57be6e64ad2fd277998ada0ae6206457b", "patch": "@@ -678,7 +678,6 @@ dependencies = [\n  \"either\",\n  \"expect-test\",\n  \"hir\",\n- \"ide_assists\",\n  \"ide_db\",\n  \"itertools\",\n  \"profile\","}, {"sha": "fa378a622dc2e6f5e9fab0fc0d58dcb9890bce66", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 4, "deletions": 127, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/a91071b57be6e64ad2fd277998ada0ae6206457b/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a91071b57be6e64ad2fd277998ada0ae6206457b/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=a91071b57be6e64ad2fd277998ada0ae6206457b", "patch": "@@ -17,139 +17,16 @@ mod tests;\n pub mod utils;\n pub mod path_transform;\n \n-use std::str::FromStr;\n-\n use hir::Semantics;\n-use ide_db::{base_db::FileRange, label::Label, source_change::SourceChange, RootDatabase};\n+use ide_db::{base_db::FileRange, RootDatabase};\n use syntax::TextRange;\n \n pub(crate) use crate::assist_context::{AssistContext, Assists};\n \n pub use assist_config::AssistConfig;\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n-pub enum AssistKind {\n-    // FIXME: does the None variant make sense? Probably not.\n-    None,\n-\n-    QuickFix,\n-    Generate,\n-    Refactor,\n-    RefactorExtract,\n-    RefactorInline,\n-    RefactorRewrite,\n-}\n-\n-impl AssistKind {\n-    pub fn contains(self, other: AssistKind) -> bool {\n-        if self == other {\n-            return true;\n-        }\n-\n-        match self {\n-            AssistKind::None | AssistKind::Generate => true,\n-            AssistKind::Refactor => match other {\n-                AssistKind::RefactorExtract\n-                | AssistKind::RefactorInline\n-                | AssistKind::RefactorRewrite => true,\n-                _ => false,\n-            },\n-            _ => false,\n-        }\n-    }\n-\n-    pub fn name(&self) -> &str {\n-        match self {\n-            AssistKind::None => \"None\",\n-            AssistKind::QuickFix => \"QuickFix\",\n-            AssistKind::Generate => \"Generate\",\n-            AssistKind::Refactor => \"Refactor\",\n-            AssistKind::RefactorExtract => \"RefactorExtract\",\n-            AssistKind::RefactorInline => \"RefactorInline\",\n-            AssistKind::RefactorRewrite => \"RefactorRewrite\",\n-        }\n-    }\n-}\n-\n-impl FromStr for AssistKind {\n-    type Err = String;\n-\n-    fn from_str(s: &str) -> Result<Self, Self::Err> {\n-        match s {\n-            \"None\" => Ok(AssistKind::None),\n-            \"QuickFix\" => Ok(AssistKind::QuickFix),\n-            \"Generate\" => Ok(AssistKind::Generate),\n-            \"Refactor\" => Ok(AssistKind::Refactor),\n-            \"RefactorExtract\" => Ok(AssistKind::RefactorExtract),\n-            \"RefactorInline\" => Ok(AssistKind::RefactorInline),\n-            \"RefactorRewrite\" => Ok(AssistKind::RefactorRewrite),\n-            unknown => Err(format!(\"Unknown AssistKind: '{}'\", unknown)),\n-        }\n-    }\n-}\n-\n-/// Unique identifier of the assist, should not be shown to the user\n-/// directly.\n-#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n-pub struct AssistId(pub &'static str, pub AssistKind);\n-\n-/// A way to control how many asssist to resolve during the assist resolution.\n-/// When an assist is resolved, its edits are calculated that might be costly to always do by default.\n-#[derive(Debug)]\n-pub enum AssistResolveStrategy {\n-    /// No assists should be resolved.\n-    None,\n-    /// All assists should be resolved.\n-    All,\n-    /// Only a certain assist should be resolved.\n-    Single(SingleResolve),\n-}\n-\n-/// Hold the [`AssistId`] data of a certain assist to resolve.\n-/// The original id object cannot be used due to a `'static` lifetime\n-/// and the requirement to construct this struct dynamically during the resolve handling.\n-#[derive(Debug)]\n-pub struct SingleResolve {\n-    /// The id of the assist.\n-    pub assist_id: String,\n-    // The kind of the assist.\n-    pub assist_kind: AssistKind,\n-}\n-\n-impl AssistResolveStrategy {\n-    pub fn should_resolve(&self, id: &AssistId) -> bool {\n-        match self {\n-            AssistResolveStrategy::None => false,\n-            AssistResolveStrategy::All => true,\n-            AssistResolveStrategy::Single(single_resolve) => {\n-                single_resolve.assist_id == id.0 && single_resolve.assist_kind == id.1\n-            }\n-        }\n-    }\n-}\n-\n-#[derive(Clone, Debug)]\n-pub struct GroupLabel(pub String);\n-\n-#[derive(Debug, Clone)]\n-pub struct Assist {\n-    pub id: AssistId,\n-    /// Short description of the assist, as shown in the UI.\n-    pub label: Label,\n-    pub group: Option<GroupLabel>,\n-    /// Target ranges are used to sort assists: the smaller the target range,\n-    /// the more specific assist is, and so it should be sorted first.\n-    pub target: TextRange,\n-    /// Computing source change sometimes is much more costly then computing the\n-    /// other fields. Additionally, the actual change is not required to show\n-    /// the lightbulb UI, it only is needed when the user tries to apply an\n-    /// assist. So, we compute it lazily: the API allow requesting assists with\n-    /// or without source change. We could (and in fact, used to) distinguish\n-    /// between resolved and unresolved assists at the type level, but this is\n-    /// cumbersome, especially if you want to embed an assist into another data\n-    /// structure, such as a diagnostic.\n-    pub source_change: Option<SourceChange>,\n-}\n+pub use ide_db::assists::{\n+    Assist, AssistId, AssistKind, AssistResolveStrategy, GroupLabel, SingleResolve,\n+};\n \n /// Return all the assists applicable at the given position.\n pub fn assists("}, {"sha": "7881d83691ba1ef494f893bd1897bbf670f99743", "filename": "crates/ide_db/src/assists.rs", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/a91071b57be6e64ad2fd277998ada0ae6206457b/crates%2Fide_db%2Fsrc%2Fassists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a91071b57be6e64ad2fd277998ada0ae6206457b/crates%2Fide_db%2Fsrc%2Fassists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fassists.rs?ref=a91071b57be6e64ad2fd277998ada0ae6206457b", "patch": "@@ -0,0 +1,136 @@\n+//! This module defines the `Assist` data structure. The actual assist live in\n+//! the `ide_assists` downstream crate. We want to define the data structures in\n+//! this low-level crate though, because `ide_diagnostics` also need them\n+//! (fixits for diagnostics and assists are the same thing under the hood). We\n+//! want to compile `ide_assists` and `ide_diagnostics` in parallel though, so\n+//! we pull the common definitions upstream, to this crate.\n+\n+use std::str::FromStr;\n+\n+use syntax::TextRange;\n+\n+use crate::{label::Label, source_change::SourceChange};\n+\n+#[derive(Debug, Clone)]\n+pub struct Assist {\n+    pub id: AssistId,\n+    /// Short description of the assist, as shown in the UI.\n+    pub label: Label,\n+    pub group: Option<GroupLabel>,\n+    /// Target ranges are used to sort assists: the smaller the target range,\n+    /// the more specific assist is, and so it should be sorted first.\n+    pub target: TextRange,\n+    /// Computing source change sometimes is much more costly then computing the\n+    /// other fields. Additionally, the actual change is not required to show\n+    /// the lightbulb UI, it only is needed when the user tries to apply an\n+    /// assist. So, we compute it lazily: the API allow requesting assists with\n+    /// or without source change. We could (and in fact, used to) distinguish\n+    /// between resolved and unresolved assists at the type level, but this is\n+    /// cumbersome, especially if you want to embed an assist into another data\n+    /// structure, such as a diagnostic.\n+    pub source_change: Option<SourceChange>,\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n+pub enum AssistKind {\n+    // FIXME: does the None variant make sense? Probably not.\n+    None,\n+\n+    QuickFix,\n+    Generate,\n+    Refactor,\n+    RefactorExtract,\n+    RefactorInline,\n+    RefactorRewrite,\n+}\n+\n+impl AssistKind {\n+    pub fn contains(self, other: AssistKind) -> bool {\n+        if self == other {\n+            return true;\n+        }\n+\n+        match self {\n+            AssistKind::None | AssistKind::Generate => true,\n+            AssistKind::Refactor => match other {\n+                AssistKind::RefactorExtract\n+                | AssistKind::RefactorInline\n+                | AssistKind::RefactorRewrite => true,\n+                _ => false,\n+            },\n+            _ => false,\n+        }\n+    }\n+\n+    pub fn name(&self) -> &str {\n+        match self {\n+            AssistKind::None => \"None\",\n+            AssistKind::QuickFix => \"QuickFix\",\n+            AssistKind::Generate => \"Generate\",\n+            AssistKind::Refactor => \"Refactor\",\n+            AssistKind::RefactorExtract => \"RefactorExtract\",\n+            AssistKind::RefactorInline => \"RefactorInline\",\n+            AssistKind::RefactorRewrite => \"RefactorRewrite\",\n+        }\n+    }\n+}\n+\n+impl FromStr for AssistKind {\n+    type Err = String;\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        match s {\n+            \"None\" => Ok(AssistKind::None),\n+            \"QuickFix\" => Ok(AssistKind::QuickFix),\n+            \"Generate\" => Ok(AssistKind::Generate),\n+            \"Refactor\" => Ok(AssistKind::Refactor),\n+            \"RefactorExtract\" => Ok(AssistKind::RefactorExtract),\n+            \"RefactorInline\" => Ok(AssistKind::RefactorInline),\n+            \"RefactorRewrite\" => Ok(AssistKind::RefactorRewrite),\n+            unknown => Err(format!(\"Unknown AssistKind: '{}'\", unknown)),\n+        }\n+    }\n+}\n+\n+/// Unique identifier of the assist, should not be shown to the user\n+/// directly.\n+#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n+pub struct AssistId(pub &'static str, pub AssistKind);\n+\n+/// A way to control how many asssist to resolve during the assist resolution.\n+/// When an assist is resolved, its edits are calculated that might be costly to always do by default.\n+#[derive(Debug)]\n+pub enum AssistResolveStrategy {\n+    /// No assists should be resolved.\n+    None,\n+    /// All assists should be resolved.\n+    All,\n+    /// Only a certain assist should be resolved.\n+    Single(SingleResolve),\n+}\n+\n+/// Hold the [`AssistId`] data of a certain assist to resolve.\n+/// The original id object cannot be used due to a `'static` lifetime\n+/// and the requirement to construct this struct dynamically during the resolve handling.\n+#[derive(Debug)]\n+pub struct SingleResolve {\n+    /// The id of the assist.\n+    pub assist_id: String,\n+    // The kind of the assist.\n+    pub assist_kind: AssistKind,\n+}\n+\n+impl AssistResolveStrategy {\n+    pub fn should_resolve(&self, id: &AssistId) -> bool {\n+        match self {\n+            AssistResolveStrategy::None => false,\n+            AssistResolveStrategy::All => true,\n+            AssistResolveStrategy::Single(single_resolve) => {\n+                single_resolve.assist_id == id.0 && single_resolve.assist_kind == id.1\n+            }\n+        }\n+    }\n+}\n+\n+#[derive(Clone, Debug)]\n+pub struct GroupLabel(pub String);"}, {"sha": "2ac215c0668314884c55974cedc3e23c6de5e815", "filename": "crates/ide_db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a91071b57be6e64ad2fd277998ada0ae6206457b/crates%2Fide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a91071b57be6e64ad2fd277998ada0ae6206457b/crates%2Fide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Flib.rs?ref=a91071b57be6e64ad2fd277998ada0ae6206457b", "patch": "@@ -3,6 +3,7 @@\n //! It is mainly a `HirDatabase` for semantic analysis, plus a `SymbolsDatabase`, for fuzzy search.\n \n mod apply_change;\n+pub mod assists;\n pub mod label;\n pub mod line_index;\n pub mod symbol_index;"}, {"sha": "fa2adf212295c55334e4fb5f891d5b1a5ef35072", "filename": "crates/ide_diagnostics/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a91071b57be6e64ad2fd277998ada0ae6206457b/crates%2Fide_diagnostics%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a91071b57be6e64ad2fd277998ada0ae6206457b/crates%2Fide_diagnostics%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2FCargo.toml?ref=a91071b57be6e64ad2fd277998ada0ae6206457b", "patch": "@@ -22,7 +22,6 @@ text_edit = { path = \"../text_edit\", version = \"0.0.0\" }\n cfg = { path = \"../cfg\", version = \"0.0.0\" }\n hir = { path = \"../hir\", version = \"0.0.0\" }\n ide_db = { path = \"../ide_db\", version = \"0.0.0\" }\n-ide_assists = { path = \"../ide_assists\", version = \"0.0.0\" }\n \n [dev-dependencies]\n expect-test = \"1.1\""}, {"sha": "8e1a93aa71f1fa75e35d452719d9f0a8f15329e5", "filename": "crates/ide_diagnostics/src/incorrect_case.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a91071b57be6e64ad2fd277998ada0ae6206457b/crates%2Fide_diagnostics%2Fsrc%2Fincorrect_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a91071b57be6e64ad2fd277998ada0ae6206457b/crates%2Fide_diagnostics%2Fsrc%2Fincorrect_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fincorrect_case.rs?ref=a91071b57be6e64ad2fd277998ada0ae6206457b", "patch": "@@ -1,6 +1,5 @@\n use hir::{db::AstDatabase, InFile};\n-use ide_assists::Assist;\n-use ide_db::base_db::FilePosition;\n+use ide_db::{assists::Assist, base_db::FilePosition};\n use syntax::AstNode;\n \n use crate::{"}, {"sha": "2a16c73a8b2e01c2aa0847f300943c65a14d718f", "filename": "crates/ide_diagnostics/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a91071b57be6e64ad2fd277998ada0ae6206457b/crates%2Fide_diagnostics%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a91071b57be6e64ad2fd277998ada0ae6206457b/crates%2Fide_diagnostics%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Flib.rs?ref=a91071b57be6e64ad2fd277998ada0ae6206457b", "patch": "@@ -28,6 +28,7 @@ mod field_shorthand;\n \n use hir::{diagnostics::AnyDiagnostic, Semantics};\n use ide_db::{\n+    assists::{Assist, AssistId, AssistKind, AssistResolveStrategy},\n     base_db::{FileId, SourceDatabase},\n     label::Label,\n     source_change::SourceChange,\n@@ -42,8 +43,6 @@ use syntax::{\n use text_edit::TextEdit;\n use unlinked_file::UnlinkedFile;\n \n-use ide_assists::{Assist, AssistId, AssistKind, AssistResolveStrategy};\n-\n #[derive(Copy, Clone, Debug, PartialEq)]\n pub struct DiagnosticCode(pub &'static str);\n \n@@ -265,8 +264,8 @@ fn unresolved_fix(id: &'static str, label: &str, target: TextRange) -> Assist {\n #[cfg(test)]\n mod tests {\n     use expect_test::Expect;\n-    use ide_assists::AssistResolveStrategy;\n     use ide_db::{\n+        assists::AssistResolveStrategy,\n         base_db::{fixture::WithFixture, SourceDatabaseExt},\n         RootDatabase,\n     };"}, {"sha": "5af67f461c75f7ad3661aec13febb3c9d59b879a", "filename": "crates/ide_diagnostics/src/missing_fields.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a91071b57be6e64ad2fd277998ada0ae6206457b/crates%2Fide_diagnostics%2Fsrc%2Fmissing_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a91071b57be6e64ad2fd277998ada0ae6206457b/crates%2Fide_diagnostics%2Fsrc%2Fmissing_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fmissing_fields.rs?ref=a91071b57be6e64ad2fd277998ada0ae6206457b", "patch": "@@ -1,7 +1,6 @@\n use either::Either;\n use hir::{db::AstDatabase, InFile};\n-use ide_assists::Assist;\n-use ide_db::source_change::SourceChange;\n+use ide_db::{assists::Assist, source_change::SourceChange};\n use stdx::format_to;\n use syntax::{algo, ast::make, AstNode, SyntaxNodePtr};\n use text_edit::TextEdit;"}, {"sha": "01c79b6f507a679041532bc55f984f4b89d01ab3", "filename": "crates/ide_diagnostics/src/missing_ok_or_some_in_tail_expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a91071b57be6e64ad2fd277998ada0ae6206457b/crates%2Fide_diagnostics%2Fsrc%2Fmissing_ok_or_some_in_tail_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a91071b57be6e64ad2fd277998ada0ae6206457b/crates%2Fide_diagnostics%2Fsrc%2Fmissing_ok_or_some_in_tail_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fmissing_ok_or_some_in_tail_expr.rs?ref=a91071b57be6e64ad2fd277998ada0ae6206457b", "patch": "@@ -1,6 +1,5 @@\n use hir::db::AstDatabase;\n-use ide_assists::Assist;\n-use ide_db::source_change::SourceChange;\n+use ide_db::{assists::Assist, source_change::SourceChange};\n use syntax::AstNode;\n use text_edit::TextEdit;\n "}, {"sha": "5aa9dae179a466e366d3f845e91971308ba2d7af", "filename": "crates/ide_diagnostics/src/unresolved_module.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a91071b57be6e64ad2fd277998ada0ae6206457b/crates%2Fide_diagnostics%2Fsrc%2Funresolved_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a91071b57be6e64ad2fd277998ada0ae6206457b/crates%2Fide_diagnostics%2Fsrc%2Funresolved_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Funresolved_module.rs?ref=a91071b57be6e64ad2fd277998ada0ae6206457b", "patch": "@@ -1,6 +1,5 @@\n use hir::db::AstDatabase;\n-use ide_assists::Assist;\n-use ide_db::{base_db::AnchoredPathBuf, source_change::FileSystemEdit};\n+use ide_db::{assists::Assist, base_db::AnchoredPathBuf, source_change::FileSystemEdit};\n use syntax::AstNode;\n \n use crate::{fix, Diagnostic, DiagnosticsContext};"}]}