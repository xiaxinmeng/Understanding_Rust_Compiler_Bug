{"sha": "cbd325707bc44c08f60ee3312af815cfb96ee86a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiZDMyNTcwN2JjNDRjMDhmNjBlZTMzMTJhZjgxNWNmYjk2ZWU4NmE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-20T23:59:45Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-21T00:02:01Z"}, "message": "Track labels in scopes", "tree": {"sha": "c1e37d5fe66d723041a6a1682125a04a88a88d19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1e37d5fe66d723041a6a1682125a04a88a88d19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbd325707bc44c08f60ee3312af815cfb96ee86a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbd325707bc44c08f60ee3312af815cfb96ee86a", "html_url": "https://github.com/rust-lang/rust/commit/cbd325707bc44c08f60ee3312af815cfb96ee86a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbd325707bc44c08f60ee3312af815cfb96ee86a/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "090e013161ab5b1679554ddd53683e81e3fe845a", "url": "https://api.github.com/repos/rust-lang/rust/commits/090e013161ab5b1679554ddd53683e81e3fe845a", "html_url": "https://github.com/rust-lang/rust/commit/090e013161ab5b1679554ddd53683e81e3fe845a"}], "stats": {"total": 68, "additions": 57, "deletions": 11}, "files": [{"sha": "e34be7e42f1999af1830a6f78ef3b3fcfa1cf065", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbd325707bc44c08f60ee3312af815cfb96ee86a/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd325707bc44c08f60ee3312af815cfb96ee86a/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=cbd325707bc44c08f60ee3312af815cfb96ee86a", "patch": "@@ -2199,6 +2199,7 @@ pub enum ScopeDef {\n     ImplSelfType(Impl),\n     AdtSelfType(Adt),\n     Local(Local),\n+    Label(Label),\n     Unknown,\n }\n "}, {"sha": "1198e3f0be5ffc1a4de8e88ebc4a73e90806640e", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbd325707bc44c08f60ee3312af815cfb96ee86a/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd325707bc44c08f60ee3312af815cfb96ee86a/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=cbd325707bc44c08f60ee3312af815cfb96ee86a", "patch": "@@ -839,6 +839,10 @@ impl<'a> SemanticsScope<'a> {\n                     let parent = resolver.body_owner().unwrap();\n                     ScopeDef::Local(Local { parent, pat_id })\n                 }\n+                resolver::ScopeDef::Label(label_id) => {\n+                    let parent = resolver.body_owner().unwrap();\n+                    ScopeDef::Label(Label { parent, label_id })\n+                }\n             };\n             f(name, def)\n         })"}, {"sha": "7f0d8f9159d5d21e34e8fe7409237b0e4da08084", "filename": "crates/hir_def/src/body/scope.rs", "status": "modified", "additions": 47, "deletions": 10, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/cbd325707bc44c08f60ee3312af815cfb96ee86a/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd325707bc44c08f60ee3312af815cfb96ee86a/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs?ref=cbd325707bc44c08f60ee3312af815cfb96ee86a", "patch": "@@ -8,7 +8,7 @@ use rustc_hash::FxHashMap;\n use crate::{\n     body::Body,\n     db::DefDatabase,\n-    expr::{Expr, ExprId, Pat, PatId, Statement},\n+    expr::{Expr, ExprId, LabelId, Pat, PatId, Statement},\n     BlockId, DefWithBodyId,\n };\n \n@@ -40,6 +40,7 @@ impl ScopeEntry {\n pub struct ScopeData {\n     parent: Option<ScopeId>,\n     block: Option<BlockId>,\n+    label: Option<(LabelId, Name)>,\n     entries: Vec<ScopeEntry>,\n }\n \n@@ -67,6 +68,11 @@ impl ExprScopes {\n         self.scopes[scope].block\n     }\n \n+    /// If `scope` refers to a labeled expression scope, returns the corresponding `Label`.\n+    pub fn label(&self, scope: ScopeId) -> Option<(LabelId, Name)> {\n+        self.scopes[scope].label.clone()\n+    }\n+\n     pub fn scope_chain(&self, scope: Option<ScopeId>) -> impl Iterator<Item = ScopeId> + '_ {\n         std::iter::successors(scope, move |&scope| self.scopes[scope].parent)\n     }\n@@ -85,15 +91,34 @@ impl ExprScopes {\n     }\n \n     fn root_scope(&mut self) -> ScopeId {\n-        self.scopes.alloc(ScopeData { parent: None, block: None, entries: vec![] })\n+        self.scopes.alloc(ScopeData { parent: None, block: None, label: None, entries: vec![] })\n     }\n \n     fn new_scope(&mut self, parent: ScopeId) -> ScopeId {\n-        self.scopes.alloc(ScopeData { parent: Some(parent), block: None, entries: vec![] })\n+        self.scopes.alloc(ScopeData {\n+            parent: Some(parent),\n+            block: None,\n+            label: None,\n+            entries: vec![],\n+        })\n     }\n \n-    fn new_block_scope(&mut self, parent: ScopeId, block: BlockId) -> ScopeId {\n-        self.scopes.alloc(ScopeData { parent: Some(parent), block: Some(block), entries: vec![] })\n+    fn new_labeled_scope(&mut self, parent: ScopeId, label: Option<(LabelId, Name)>) -> ScopeId {\n+        self.scopes.alloc(ScopeData { parent: Some(parent), block: None, label, entries: vec![] })\n+    }\n+\n+    fn new_block_scope(\n+        &mut self,\n+        parent: ScopeId,\n+        block: BlockId,\n+        label: Option<(LabelId, Name)>,\n+    ) -> ScopeId {\n+        self.scopes.alloc(ScopeData {\n+            parent: Some(parent),\n+            block: Some(block),\n+            label,\n+            entries: vec![],\n+        })\n     }\n \n     fn add_bindings(&mut self, body: &Body, scope: ScopeId, pat: PatId) {\n@@ -144,21 +169,33 @@ fn compute_block_scopes(\n }\n \n fn compute_expr_scopes(expr: ExprId, body: &Body, scopes: &mut ExprScopes, scope: ScopeId) {\n+    let make_label =\n+        |label: &Option<_>| label.map(|label| (label, body.labels[label].name.clone()));\n+\n     scopes.set_scope(expr, scope);\n     match &body[expr] {\n-        Expr::Block { statements, tail, id, .. } => {\n-            let scope = scopes.new_block_scope(scope, *id);\n+        Expr::Block { statements, tail, id, label } => {\n+            let scope = scopes.new_block_scope(scope, *id, make_label(label));\n             // Overwrite the old scope for the block expr, so that every block scope can be found\n             // via the block itself (important for blocks that only contain items, no expressions).\n             scopes.set_scope(expr, scope);\n-            compute_block_scopes(&statements, *tail, body, scopes, scope);\n+            compute_block_scopes(statements, *tail, body, scopes, scope);\n         }\n-        Expr::For { iterable, pat, body: body_expr, .. } => {\n+        Expr::For { iterable, pat, body: body_expr, label } => {\n             compute_expr_scopes(*iterable, body, scopes, scope);\n-            let scope = scopes.new_scope(scope);\n+            let scope = scopes.new_labeled_scope(scope, make_label(label));\n             scopes.add_bindings(body, scope, *pat);\n             compute_expr_scopes(*body_expr, body, scopes, scope);\n         }\n+        Expr::While { condition, body: body_expr, label } => {\n+            compute_expr_scopes(*condition, body, scopes, scope);\n+            let scope = scopes.new_labeled_scope(scope, make_label(label));\n+            compute_expr_scopes(*body_expr, body, scopes, scope);\n+        }\n+        Expr::Loop { body: body_expr, label } => {\n+            let scope = scopes.new_labeled_scope(scope, make_label(label));\n+            compute_expr_scopes(*body_expr, body, scopes, scope);\n+        }\n         Expr::Lambda { args, body: body_expr, .. } => {\n             let scope = scopes.new_scope(scope);\n             scopes.add_params_bindings(body, scope, &args);"}, {"sha": "4a2d1c08752d3c0a1b7defaec31457132a8e49bf", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cbd325707bc44c08f60ee3312af815cfb96ee86a/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd325707bc44c08f60ee3312af815cfb96ee86a/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=cbd325707bc44c08f60ee3312af815cfb96ee86a", "patch": "@@ -12,7 +12,7 @@ use crate::{\n     body::scope::{ExprScopes, ScopeId},\n     builtin_type::BuiltinType,\n     db::DefDatabase,\n-    expr::{ExprId, PatId},\n+    expr::{ExprId, LabelId, PatId},\n     generics::GenericParams,\n     item_scope::{BuiltinShadowMode, BUILTIN_SCOPE},\n     nameres::DefMap,\n@@ -409,6 +409,7 @@ pub enum ScopeDef {\n     AdtSelfType(AdtId),\n     GenericParam(GenericParamId),\n     Local(PatId),\n+    Label(LabelId),\n }\n \n impl Scope {\n@@ -470,6 +471,9 @@ impl Scope {\n                 f(name![Self], ScopeDef::AdtSelfType(*i));\n             }\n             Scope::ExprScope(scope) => {\n+                if let Some((label, name)) = scope.expr_scopes.label(scope.scope_id) {\n+                    f(name.clone(), ScopeDef::Label(label))\n+                }\n                 scope.expr_scopes.entries(scope.scope_id).iter().for_each(|e| {\n                     f(e.name().clone(), ScopeDef::Local(e.pat()));\n                 });"}]}