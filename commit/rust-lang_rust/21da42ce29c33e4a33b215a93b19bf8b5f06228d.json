{"sha": "21da42ce29c33e4a33b215a93b19bf8b5f06228d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZGE0MmNlMjljMzNlNGEzM2IyMTVhOTNiMTliZjhiNWYwNjIyOGQ=", "commit": {"author": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-08-22T15:27:18Z"}, "committer": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-08-22T15:27:18Z"}, "message": "Fix more \u201ca\u201d/\u201can\u201d typos", "tree": {"sha": "75b361bb92e454783d440d24c79420a11ad8d8e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75b361bb92e454783d440d24c79420a11ad8d8e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21da42ce29c33e4a33b215a93b19bf8b5f06228d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21da42ce29c33e4a33b215a93b19bf8b5f06228d", "html_url": "https://github.com/rust-lang/rust/commit/21da42ce29c33e4a33b215a93b19bf8b5f06228d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21da42ce29c33e4a33b215a93b19bf8b5f06228d/comments", "author": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c86071898f76d0807cc9d9ac78a7aa4aff0688ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/c86071898f76d0807cc9d9ac78a7aa4aff0688ae", "html_url": "https://github.com/rust-lang/rust/commit/c86071898f76d0807cc9d9ac78a7aa4aff0688ae"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "4dd0ffe77ea49fbff542b3c20a48ad053aa94650", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21da42ce29c33e4a33b215a93b19bf8b5f06228d/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21da42ce29c33e4a33b215a93b19bf8b5f06228d/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=21da42ce29c33e4a33b215a93b19bf8b5f06228d", "patch": "@@ -164,7 +164,7 @@ fn check_unop(cx: &EarlyContext<'_>, expr: &Expr) {\n         if !differing_macro_contexts(lhs.span, rhs.span) && !lhs.span.from_expansion();\n         // span between BinOp LHS and RHS\n         let binop_span = lhs.span.between(rhs.span);\n-        // if RHS is a UnOp\n+        // if RHS is an UnOp\n         if let ExprKind::Unary(op, ref un_rhs) = rhs.kind;\n         // from UnOp operator to UnOp operand\n         let unop_operand_span = rhs.span.until(un_rhs.span);"}, {"sha": "3f9110295fc6bcb4abe594e0fd6ec6dea2f17ee1", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21da42ce29c33e4a33b215a93b19bf8b5f06228d/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21da42ce29c33e4a33b215a93b19bf8b5f06228d/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=21da42ce29c33e4a33b215a93b19bf8b5f06228d", "patch": "@@ -122,7 +122,7 @@ fn is_unfrozen<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n     // Ignore types whose layout is unknown since `is_freeze` reports every generic types as `!Freeze`,\n     // making it indistinguishable from `UnsafeCell`. i.e. it isn't a tool to prove a type is\n     // 'unfrozen'. However, this code causes a false negative in which\n-    // a type contains a layout-unknown type, but also a unsafe cell like `const CELL: Cell<T>`.\n+    // a type contains a layout-unknown type, but also an unsafe cell like `const CELL: Cell<T>`.\n     // Yet, it's better than `ty.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_PROJECTION)`\n     // since it works when a pointer indirection involves (`Cell<*const T>`).\n     // Making up a `ParamEnv` where every generic params and assoc types are `Freeze`is another option;\n@@ -266,7 +266,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n                 // in other words, lint consts whose value *could* be unfrozen, not definitely is.\n                 // This feels inconsistent with how the lint treats generic types,\n                 // which avoids linting types which potentially become unfrozen.\n-                // One could check whether a unfrozen type have a *frozen variant*\n+                // One could check whether an unfrozen type have a *frozen variant*\n                 // (like `body_id_opt.map_or_else(|| !has_frozen_variant(...), ...)`),\n                 // and do the same as the case of generic types at impl items.\n                 // Note that it isn't sufficient to check if it has an enum"}]}