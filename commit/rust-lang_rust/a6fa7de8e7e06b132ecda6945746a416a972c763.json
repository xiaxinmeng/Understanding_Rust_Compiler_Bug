{"sha": "a6fa7de8e7e06b132ecda6945746a416a972c763", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ZmE3ZGU4ZTdlMDZiMTMyZWNkYTY5NDU3NDZhNDE2YTk3MmM3NjM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-25T00:37:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-25T00:37:03Z"}, "message": "Rollup merge of #57865 - Aaron1011:fix/debug-ice, r=estebank\n\nDon't ICE when logging unusual types\n\nMonoItemExt#to_string is used for both debug logging and LLVM symbol\nname generation. When debugging, we want to print out any type we\nencounter, even if it's something weird like GeneratorWitness. However,\nduring codegen, we still want to error if we encounter an unexpected\ntype when generating a name.\n\nTo resolve this issue, this commit introduces a new 'debug' parameter to\nthe relevant methods. When set to 'true', it allows any type to be\nprinted - when set to 'false', it 'bug!'s when encountering an\nunexpected type.\n\nThis prevents an ICE when enabling debug logging (via RUST_LOG) while\nrunning rustc on generator-related code.", "tree": {"sha": "ed703bb2e268afcba45781c78f06fce045a0c086", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed703bb2e268afcba45781c78f06fce045a0c086"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6fa7de8e7e06b132ecda6945746a416a972c763", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcSlovCRBK7hj4Ov3rIwAAdHIIAIuycdFs5T3DnZINwpm7pBx4\ncTlsIdg/fpEedrsS5GKGBu4EnQIlWKZXVFfwwgyjMqZsY69+uVg4gg1kc2iYr5nZ\nBqtUn+gNDWPY/4wqZpNiz822NEKwiTh+oLr7LSS1D79T+42L7N1nh/8WFoC9Fisb\nasmNWiSiF00gXFYF2R8vfLdEkqbqQLU+TqoF9+4w4Shxw8T+Matkon+5cIW0NMPk\nn4aMyXBRG1eK2+gFZZ24PxKrYsxRmCU0K0zkCgpXKtp+78cHFUwyO6jCW2qUZmok\n6zdy2d1MN5pyODqB/gZNoEl5dQO4D+KxfKYdUQT5GBG+Jh/ULXoMGnu0mPW5PXw=\n=5VgG\n-----END PGP SIGNATURE-----\n", "payload": "tree ed703bb2e268afcba45781c78f06fce045a0c086\nparent a9950f6a459b88ea7424724849f79ce3720e94e4\nparent fc0c8839f7a4b5a4f8ee4c9c8177fb0ecfb0e5de\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1548376623 +0100\ncommitter GitHub <noreply@github.com> 1548376623 +0100\n\nRollup merge of #57865 - Aaron1011:fix/debug-ice, r=estebank\n\nDon't ICE when logging unusual types\n\nMonoItemExt#to_string is used for both debug logging and LLVM symbol\nname generation. When debugging, we want to print out any type we\nencounter, even if it's something weird like GeneratorWitness. However,\nduring codegen, we still want to error if we encounter an unexpected\ntype when generating a name.\n\nTo resolve this issue, this commit introduces a new 'debug' parameter to\nthe relevant methods. When set to 'true', it allows any type to be\nprinted - when set to 'false', it 'bug!'s when encountering an\nunexpected type.\n\nThis prevents an ICE when enabling debug logging (via RUST_LOG) while\nrunning rustc on generator-related code.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6fa7de8e7e06b132ecda6945746a416a972c763", "html_url": "https://github.com/rust-lang/rust/commit/a6fa7de8e7e06b132ecda6945746a416a972c763", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6fa7de8e7e06b132ecda6945746a416a972c763/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9950f6a459b88ea7424724849f79ce3720e94e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9950f6a459b88ea7424724849f79ce3720e94e4", "html_url": "https://github.com/rust-lang/rust/commit/a9950f6a459b88ea7424724849f79ce3720e94e4"}, {"sha": "fc0c8839f7a4b5a4f8ee4c9c8177fb0ecfb0e5de", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc0c8839f7a4b5a4f8ee4c9c8177fb0ecfb0e5de", "html_url": "https://github.com/rust-lang/rust/commit/fc0c8839f7a4b5a4f8ee4c9c8177fb0ecfb0e5de"}], "stats": {"total": 74, "additions": 44, "deletions": 30}, "files": [{"sha": "afaeb352cd9926fbcf90f85cf403f64ec15e9e77", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa7de8e7e06b132ecda6945746a416a972c763/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa7de8e7e06b132ecda6945746a416a972c763/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=a6fa7de8e7e06b132ecda6945746a416a972c763", "patch": "@@ -55,7 +55,7 @@ fn uncached_llvm_type<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         ty::Str => {\n             let mut name = String::with_capacity(32);\n             let printer = DefPathBasedNames::new(cx.tcx, true, true);\n-            printer.push_type_name(layout.ty, &mut name);\n+            printer.push_type_name(layout.ty, &mut name, false);\n             if let (&ty::Adt(def, _), &layout::Variants::Single { index })\n                  = (&layout.ty.sty, &layout.variants)\n             {"}, {"sha": "8488ab2ae862f7f8970aee4d73f0f05a8d502edf", "filename": "src/librustc_codegen_ssa/mono_item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa7de8e7e06b132ecda6945746a416a972c763/src%2Flibrustc_codegen_ssa%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa7de8e7e06b132ecda6945746a416a972c763/src%2Flibrustc_codegen_ssa%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmono_item.rs?ref=a6fa7de8e7e06b132ecda6945746a416a972c763", "patch": "@@ -13,7 +13,7 @@ pub use rustc_mir::monomorphize::item::MonoItemExt as BaseMonoItemExt;\n pub trait MonoItemExt<'a, 'tcx: 'a>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n     fn define<Bx: BuilderMethods<'a, 'tcx>>(&self, cx: &'a Bx::CodegenCx) {\n         debug!(\"BEGIN IMPLEMENTING '{} ({})' in cgu {}\",\n-               self.to_string(cx.tcx()),\n+               self.to_string(cx.tcx(), true),\n                self.to_raw_string(),\n                cx.codegen_unit().name());\n \n@@ -45,7 +45,7 @@ pub trait MonoItemExt<'a, 'tcx: 'a>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n         }\n \n         debug!(\"END IMPLEMENTING '{} ({})' in cgu {}\",\n-               self.to_string(cx.tcx()),\n+               self.to_string(cx.tcx(), true),\n                self.to_raw_string(),\n                cx.codegen_unit().name());\n     }\n@@ -57,7 +57,7 @@ pub trait MonoItemExt<'a, 'tcx: 'a>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n         visibility: Visibility\n     ) {\n         debug!(\"BEGIN PREDEFINING '{} ({})' in cgu {}\",\n-               self.to_string(cx.tcx()),\n+               self.to_string(cx.tcx(), true),\n                self.to_raw_string(),\n                cx.codegen_unit().name());\n \n@@ -76,7 +76,7 @@ pub trait MonoItemExt<'a, 'tcx: 'a>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n         }\n \n         debug!(\"END PREDEFINING '{} ({})' in cgu {}\",\n-               self.to_string(cx.tcx()),\n+               self.to_string(cx.tcx(), true),\n                self.to_raw_string(),\n                cx.codegen_unit().name());\n     }"}, {"sha": "bc63f8b6ac854a460261d99fd5e53061c4cdd86f", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa7de8e7e06b132ecda6945746a416a972c763/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa7de8e7e06b132ecda6945746a416a972c763/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=a6fa7de8e7e06b132ecda6945746a416a972c763", "patch": "@@ -355,7 +355,7 @@ fn collect_items_rec<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // We've been here already, no need to search again.\n         return;\n     }\n-    debug!(\"BEGIN collect_items_rec({})\", starting_point.to_string(tcx));\n+    debug!(\"BEGIN collect_items_rec({})\", starting_point.to_string(tcx, true));\n \n     let mut neighbors = Vec::new();\n     let recursion_depth_reset;\n@@ -409,7 +409,7 @@ fn collect_items_rec<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         recursion_depths.insert(def_id, depth);\n     }\n \n-    debug!(\"END collect_items_rec({})\", starting_point.to_string(tcx));\n+    debug!(\"END collect_items_rec({})\", starting_point.to_string(tcx, true));\n }\n \n fn record_accesses<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "431cc0d52b4c8b4d6aa629ae761c5ba1cce4c26b", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 35, "deletions": 21, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa7de8e7e06b132ecda6945746a416a972c763/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa7de8e7e06b132ecda6945746a416a972c763/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=a6fa7de8e7e06b132ecda6945746a416a972c763", "patch": "@@ -159,14 +159,14 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n         tcx.substitute_normalize_and_test_predicates((def_id, &substs))\n     }\n \n-    fn to_string(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> String {\n+    fn to_string(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, debug: bool) -> String {\n         return match *self.as_mono_item() {\n             MonoItem::Fn(instance) => {\n-                to_string_internal(tcx, \"fn \", instance)\n+                to_string_internal(tcx, \"fn \", instance, debug)\n             },\n             MonoItem::Static(def_id) => {\n                 let instance = Instance::new(def_id, tcx.intern_substs(&[]));\n-                to_string_internal(tcx, \"static \", instance)\n+                to_string_internal(tcx, \"static \", instance, debug)\n             },\n             MonoItem::GlobalAsm(..) => {\n                 \"global_asm\".to_string()\n@@ -175,12 +175,13 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n \n         fn to_string_internal<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                         prefix: &str,\n-                                        instance: Instance<'tcx>)\n+                                        instance: Instance<'tcx>,\n+                                        debug: bool)\n                                         -> String {\n             let mut result = String::with_capacity(32);\n             result.push_str(prefix);\n             let printer = DefPathBasedNames::new(tcx, false, false);\n-            printer.push_instance_as_string(instance, &mut result);\n+            printer.push_instance_as_string(instance, &mut result, debug);\n             result\n         }\n     }\n@@ -238,7 +239,13 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n         }\n     }\n \n-    pub fn push_type_name(&self, t: Ty<'tcx>, output: &mut String) {\n+    // Pushes the type name of the specified type to the provided string.\n+    // If 'debug' is true, printing normally unprintable types is allowed\n+    // (e.g. ty::GeneratorWitness). This parameter should only be set when\n+    // this method is being used for logging purposes (e.g. with debug! or info!)\n+    // When being used for codegen purposes, 'debug' should be set to 'false'\n+    // in order to catch unexpected types that should never end up in a type name\n+    pub fn push_type_name(&self, t: Ty<'tcx>, output: &mut String, debug: bool) {\n         match t.sty {\n             ty::Bool              => output.push_str(\"bool\"),\n             ty::Char              => output.push_str(\"char\"),\n@@ -260,12 +267,12 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n             ty::Float(ast::FloatTy::F64) => output.push_str(\"f64\"),\n             ty::Adt(adt_def, substs) => {\n                 self.push_def_path(adt_def.did, output);\n-                self.push_type_params(substs, iter::empty(), output);\n+                self.push_type_params(substs, iter::empty(), output, debug);\n             },\n             ty::Tuple(component_types) => {\n                 output.push('(');\n                 for &component_type in component_types {\n-                    self.push_type_name(component_type, output);\n+                    self.push_type_name(component_type, output, debug);\n                     output.push_str(\", \");\n                 }\n                 if !component_types.is_empty() {\n@@ -281,25 +288,25 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n                     hir::MutMutable => output.push_str(\"mut \"),\n                 }\n \n-                self.push_type_name(inner_type, output);\n+                self.push_type_name(inner_type, output, debug);\n             },\n             ty::Ref(_, inner_type, mutbl) => {\n                 output.push('&');\n                 if mutbl == hir::MutMutable {\n                     output.push_str(\"mut \");\n                 }\n \n-                self.push_type_name(inner_type, output);\n+                self.push_type_name(inner_type, output, debug);\n             },\n             ty::Array(inner_type, len) => {\n                 output.push('[');\n-                self.push_type_name(inner_type, output);\n+                self.push_type_name(inner_type, output, debug);\n                 write!(output, \"; {}\", len.unwrap_usize(self.tcx)).unwrap();\n                 output.push(']');\n             },\n             ty::Slice(inner_type) => {\n                 output.push('[');\n-                self.push_type_name(inner_type, output);\n+                self.push_type_name(inner_type, output, debug);\n                 output.push(']');\n             },\n             ty::Dynamic(ref trait_data, ..) => {\n@@ -309,6 +316,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n                         principal.skip_binder().substs,\n                         trait_data.projection_bounds(),\n                         output,\n+                        debug\n                     );\n                 } else {\n                     output.push_str(\"dyn '_\");\n@@ -338,7 +346,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n \n                 if !sig.inputs().is_empty() {\n                     for &parameter_type in sig.inputs() {\n-                        self.push_type_name(parameter_type, output);\n+                        self.push_type_name(parameter_type, output, debug);\n                         output.push_str(\", \");\n                     }\n                     output.pop();\n@@ -357,15 +365,15 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n \n                 if !sig.output().is_unit() {\n                     output.push_str(\" -> \");\n-                    self.push_type_name(sig.output(), output);\n+                    self.push_type_name(sig.output(), output, debug);\n                 }\n             },\n             ty::Generator(def_id, GeneratorSubsts { ref substs }, _) |\n             ty::Closure(def_id, ClosureSubsts { ref substs }) => {\n                 self.push_def_path(def_id, output);\n                 let generics = self.tcx.generics_of(self.tcx.closure_base_def_id(def_id));\n                 let substs = substs.truncate_to(self.tcx, generics);\n-                self.push_type_params(substs, iter::empty(), output);\n+                self.push_type_params(substs, iter::empty(), output, debug);\n             }\n             ty::Error |\n             ty::Bound(..) |\n@@ -376,8 +384,12 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n             ty::Param(_) |\n             ty::GeneratorWitness(_) |\n             ty::Opaque(..) => {\n-                bug!(\"DefPathBasedNames: Trying to create type name for \\\n+                if debug {\n+                    output.push_str(&format!(\"`{:?}`\", t));\n+                } else {\n+                    bug!(\"DefPathBasedNames: Trying to create type name for \\\n                                          unexpected type: {:?}\", t);\n+                }\n             }\n         }\n     }\n@@ -412,7 +424,8 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n     fn push_type_params<I>(&self,\n                             substs: &Substs<'tcx>,\n                             projections: I,\n-                            output: &mut String)\n+                            output: &mut String,\n+                            debug: bool)\n         where I: Iterator<Item=ty::PolyExistentialProjection<'tcx>>\n     {\n         let mut projections = projections.peekable();\n@@ -423,7 +436,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n         output.push('<');\n \n         for type_parameter in substs.types() {\n-            self.push_type_name(type_parameter, output);\n+            self.push_type_name(type_parameter, output, debug);\n             output.push_str(\", \");\n         }\n \n@@ -432,7 +445,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n             let name = &self.tcx.associated_item(projection.item_def_id).ident.as_str();\n             output.push_str(name);\n             output.push_str(\"=\");\n-            self.push_type_name(projection.ty, output);\n+            self.push_type_name(projection.ty, output, debug);\n             output.push_str(\", \");\n         }\n \n@@ -444,8 +457,9 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n \n     pub fn push_instance_as_string(&self,\n                                    instance: Instance<'tcx>,\n-                                   output: &mut String) {\n+                                   output: &mut String,\n+                                   debug: bool) {\n         self.push_def_path(instance.def_id(), output);\n-        self.push_type_params(instance.substs, iter::empty(), output);\n+        self.push_type_params(instance.substs, iter::empty(), output, debug);\n     }\n }"}, {"sha": "569e4c828f6014ef845b3a4fd1a3910a07805b0a", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6fa7de8e7e06b132ecda6945746a416a972c763/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fa7de8e7e06b132ecda6945746a416a972c763/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=a6fa7de8e7e06b132ecda6945746a416a972c763", "patch": "@@ -879,7 +879,7 @@ fn debug_dump<'a, 'b, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                    .unwrap_or(\"<no hash>\");\n \n                 debug!(\" - {} [{:?}] [{}]\",\n-                       mono_item.to_string(tcx),\n+                       mono_item.to_string(tcx, true),\n                        linkage,\n                        symbol_hash);\n             }\n@@ -971,7 +971,7 @@ fn collect_and_partition_mono_items<'a, 'tcx>(\n         let mut item_keys: Vec<_> = items\n             .iter()\n             .map(|i| {\n-                let mut output = i.to_string(tcx);\n+                let mut output = i.to_string(tcx, false);\n                 output.push_str(\" @@\");\n                 let mut empty = Vec::new();\n                 let cgus = item_to_cgus.get_mut(i).unwrap_or(&mut empty);"}]}