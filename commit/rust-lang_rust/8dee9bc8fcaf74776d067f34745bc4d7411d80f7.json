{"sha": "8dee9bc8fcaf74776d067f34745bc4d7411d80f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkZWU5YmM4ZmNhZjc0Nzc2ZDA2N2YzNDc0NWJjNGQ3NDExZDgwZjc=", "commit": {"author": {"name": "lrh2000", "email": "lrh2000@pku.edu.cn", "date": "2021-05-16T03:10:05Z"}, "committer": {"name": "lrh2000", "email": "lrh2000@pku.edu.cn", "date": "2021-06-26T15:09:43Z"}, "message": "Reserve prefixed identifiers and string literals (RFC 3101)\n\nThis commit denies any identifiers immediately followed by\none of three tokens `\"`, `'` or `#`, which is stricter than\nthe requirements of RFC 3101 but may be necessary according\nto the discussion at [Zulip].\n\n[Zulip]: https://rust-lang.zulipchat.com/#narrow/stream/268952-edition-2021/topic/reserved.20prefixes/near/238470099", "tree": {"sha": "eab3a0117f3ae89f6f7248124821a922016f8048", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eab3a0117f3ae89f6f7248124821a922016f8048"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dee9bc8fcaf74776d067f34745bc4d7411d80f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dee9bc8fcaf74776d067f34745bc4d7411d80f7", "html_url": "https://github.com/rust-lang/rust/commit/8dee9bc8fcaf74776d067f34745bc4d7411d80f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dee9bc8fcaf74776d067f34745bc4d7411d80f7/comments", "author": {"login": "lrh2000", "id": 41988959, "node_id": "MDQ6VXNlcjQxOTg4OTU5", "avatar_url": "https://avatars.githubusercontent.com/u/41988959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lrh2000", "html_url": "https://github.com/lrh2000", "followers_url": "https://api.github.com/users/lrh2000/followers", "following_url": "https://api.github.com/users/lrh2000/following{/other_user}", "gists_url": "https://api.github.com/users/lrh2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/lrh2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lrh2000/subscriptions", "organizations_url": "https://api.github.com/users/lrh2000/orgs", "repos_url": "https://api.github.com/users/lrh2000/repos", "events_url": "https://api.github.com/users/lrh2000/events{/privacy}", "received_events_url": "https://api.github.com/users/lrh2000/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lrh2000", "id": 41988959, "node_id": "MDQ6VXNlcjQxOTg4OTU5", "avatar_url": "https://avatars.githubusercontent.com/u/41988959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lrh2000", "html_url": "https://github.com/lrh2000", "followers_url": "https://api.github.com/users/lrh2000/followers", "following_url": "https://api.github.com/users/lrh2000/following{/other_user}", "gists_url": "https://api.github.com/users/lrh2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/lrh2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lrh2000/subscriptions", "organizations_url": "https://api.github.com/users/lrh2000/orgs", "repos_url": "https://api.github.com/users/lrh2000/repos", "events_url": "https://api.github.com/users/lrh2000/events{/privacy}", "received_events_url": "https://api.github.com/users/lrh2000/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "831ae3c1364b7b033bd1da430bc1cb86d93ad186", "url": "https://api.github.com/repos/rust-lang/rust/commits/831ae3c1364b7b033bd1da430bc1cb86d93ad186", "html_url": "https://github.com/rust-lang/rust/commit/831ae3c1364b7b033bd1da430bc1cb86d93ad186"}], "stats": {"total": 179, "additions": 172, "deletions": 7}, "files": [{"sha": "5f3e245bf997371b152e6ca275d1cee11ac14e53", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8dee9bc8fcaf74776d067f34745bc4d7411d80f7/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dee9bc8fcaf74776d067f34745bc4d7411d80f7/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=8dee9bc8fcaf74776d067f34745bc4d7411d80f7", "patch": "@@ -66,6 +66,8 @@ pub enum TokenKind {\n     Ident,\n     /// \"r#ident\"\n     RawIdent,\n+    /// `foo#`, `foo'`, `foo\"`. Note the tailer is not included.\n+    BadPrefix,\n     /// \"12_u8\", \"1.0e-40\", \"b\"123\"\". See `LiteralKind` for more details.\n     Literal { kind: LiteralKind, suffix_start: usize },\n     /// \"'a\"\n@@ -323,7 +325,7 @@ impl Cursor<'_> {\n                     let kind = RawStr { n_hashes, err };\n                     Literal { kind, suffix_start }\n                 }\n-                _ => self.ident(),\n+                _ => self.ident_or_bad_prefix(),\n             },\n \n             // Byte literal, byte string literal, raw byte string literal or identifier.\n@@ -358,12 +360,12 @@ impl Cursor<'_> {\n                     let kind = RawByteStr { n_hashes, err };\n                     Literal { kind, suffix_start }\n                 }\n-                _ => self.ident(),\n+                _ => self.ident_or_bad_prefix(),\n             },\n \n             // Identifier (this should be checked after other variant that can\n             // start as identifier).\n-            c if is_id_start(c) => self.ident(),\n+            c if is_id_start(c) => self.ident_or_bad_prefix(),\n \n             // Numeric literal.\n             c @ '0'..='9' => {\n@@ -487,11 +489,16 @@ impl Cursor<'_> {\n         RawIdent\n     }\n \n-    fn ident(&mut self) -> TokenKind {\n+    fn ident_or_bad_prefix(&mut self) -> TokenKind {\n         debug_assert!(is_id_start(self.prev()));\n         // Start is already eaten, eat the rest of identifier.\n         self.eat_while(is_id_continue);\n-        Ident\n+        // Good prefixes must have been handled eariler. So if\n+        // we see a prefix here, it is definitely a bad prefix.\n+        match self.first() {\n+            '#' | '\"' | '\\'' => BadPrefix,\n+            _ => Ident,\n+        }\n     }\n \n     fn number(&mut self, first_digit: char) -> LiteralKind {"}, {"sha": "5710c386e3ba20d02833f828d1cb10483eb7e95b", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8dee9bc8fcaf74776d067f34745bc4d7411d80f7/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dee9bc8fcaf74776d067f34745bc4d7411d80f7/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=8dee9bc8fcaf74776d067f34745bc4d7411d80f7", "patch": "@@ -5,6 +5,7 @@ use rustc_errors::{error_code, Applicability, DiagnosticBuilder, FatalError, PRe\n use rustc_lexer::unescape::{self, Mode};\n use rustc_lexer::{Base, DocStyle, RawStrError};\n use rustc_session::parse::ParseSess;\n+use rustc_span::edition::Edition;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{BytePos, Pos, Span};\n \n@@ -166,12 +167,18 @@ impl<'a> StringReader<'a> {\n                 self.cook_doc_comment(content_start, content, CommentKind::Block, doc_style)\n             }\n             rustc_lexer::TokenKind::Whitespace => return None,\n-            rustc_lexer::TokenKind::Ident | rustc_lexer::TokenKind::RawIdent => {\n+            rustc_lexer::TokenKind::Ident\n+            | rustc_lexer::TokenKind::RawIdent\n+            | rustc_lexer::TokenKind::BadPrefix => {\n                 let is_raw_ident = token == rustc_lexer::TokenKind::RawIdent;\n+                let is_bad_prefix = token == rustc_lexer::TokenKind::BadPrefix;\n                 let mut ident_start = start;\n                 if is_raw_ident {\n                     ident_start = ident_start + BytePos(2);\n                 }\n+                if is_bad_prefix {\n+                    self.report_reserved_prefix(start);\n+                }\n                 let sym = nfc_normalize(self.str_from(ident_start));\n                 let span = self.mk_sp(start, self.pos);\n                 self.sess.symbol_gallery.insert(sym, span);\n@@ -491,6 +498,29 @@ impl<'a> StringReader<'a> {\n         FatalError.raise()\n     }\n \n+    fn report_reserved_prefix(&self, start: BytePos) {\n+        // See RFC 3101.\n+        if self.sess.edition < Edition::Edition2021 {\n+            return;\n+        }\n+\n+        let mut err = self.sess.span_diagnostic.struct_span_err(\n+            self.mk_sp(start, self.pos),\n+            &format!(\"prefix `{}` is unknown\", self.str_from_to(start, self.pos)),\n+        );\n+        err.span_label(self.mk_sp(start, self.pos), \"unknown prefix\");\n+        err.span_label(\n+            self.mk_sp(self.pos, self.pos),\n+            &format!(\n+                \"help: consider inserting a whitespace before this `{}`\",\n+                self.str_from_to(self.pos, self.pos + BytePos(1)),\n+            ),\n+        );\n+        err.note(\"prefixed identifiers and string literals are reserved since Rust 2021\");\n+\n+        err.emit();\n+    }\n+\n     /// Note: It was decided to not add a test case, because it would be too big.\n     /// <https://github.com/rust-lang/rust/pull/50296#issuecomment-392135180>\n     fn report_too_many_hashes(&self, start: BytePos, found: usize) -> ! {"}, {"sha": "36e4a240f14eb11ed9a3ab9bc4b03523432783ad", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dee9bc8fcaf74776d067f34745bc4d7411d80f7/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dee9bc8fcaf74776d067f34745bc4d7411d80f7/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=8dee9bc8fcaf74776d067f34745bc4d7411d80f7", "patch": "@@ -413,7 +413,7 @@ impl<'a> Classifier<'a> {\n                 },\n                 c => c,\n             },\n-            TokenKind::RawIdent => Class::Ident,\n+            TokenKind::RawIdent | TokenKind::BadPrefix => Class::Ident,\n             TokenKind::Lifetime { .. } => Class::Lifetime,\n         };\n         // Anything that didn't return above is the simple case where we the"}, {"sha": "5882c7d83d8bebf5d54eb73f39a8e2f194863861", "filename": "src/test/ui/rust-2021/reserved-prefixes.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8dee9bc8fcaf74776d067f34745bc4d7411d80f7/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dee9bc8fcaf74776d067f34745bc4d7411d80f7/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes.rs?ref=8dee9bc8fcaf74776d067f34745bc4d7411d80f7", "patch": "@@ -0,0 +1,36 @@\n+// compile-flags: -Z unstable-options --edition 2021\n+\n+macro_rules! demo2 {\n+    ( $a:tt $b:tt ) => { println!(\"two tokens\") };\n+}\n+\n+macro_rules! demo3 {\n+    ( $a:tt $b:tt $c:tt ) => { println!(\"three tokens\") };\n+}\n+\n+macro_rules! demo4 {\n+    ( $a:tt $b:tt $c:tt $d:tt ) => { println!(\"four tokens\") };\n+}\n+\n+fn main() {\n+    demo3!(foo#bar);   //~ ERROR prefix `foo` is unknown\n+    demo2!(foo\"bar\");  //~ ERROR prefix `foo` is unknown\n+    demo2!(foo'b');    //~ ERROR prefix `foo` is unknown\n+\n+    demo2!(foo'b);     //~ ERROR prefix `foo` is unknown\n+    demo3!(foo# bar);  //~ ERROR prefix `foo` is unknown\n+    demo4!(foo#! bar); //~ ERROR prefix `foo` is unknown\n+    demo4!(foo## bar); //~ ERROR prefix `foo` is unknown\n+\n+    demo4!(foo#bar#);\n+    //~^ ERROR prefix `foo` is unknown\n+    //~| ERROR prefix `bar` is unknown\n+\n+    demo3!(foo # bar);\n+    demo3!(foo #bar);\n+    demo4!(foo!#bar);\n+    demo4!(foo ##bar);\n+\n+    demo3!(r\"foo\"#bar);\n+    demo3!(r#foo#bar);\n+}"}, {"sha": "ffaad31520224810e4ffa9e059b87586360540bf", "filename": "src/test/ui/rust-2021/reserved-prefixes.stderr", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/8dee9bc8fcaf74776d067f34745bc4d7411d80f7/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8dee9bc8fcaf74776d067f34745bc4d7411d80f7/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes.stderr?ref=8dee9bc8fcaf74776d067f34745bc4d7411d80f7", "patch": "@@ -0,0 +1,92 @@\n+error: prefix `foo` is unknown\n+  --> $DIR/reserved-prefixes.rs:16:12\n+   |\n+LL |     demo3!(foo#bar);\n+   |            ^^^- help: consider inserting a whitespace before this `#`\n+   |            |\n+   |            unknown prefix\n+   |\n+   = note: prefixed identifiers and string literals are reserved since Rust 2021\n+\n+error: prefix `foo` is unknown\n+  --> $DIR/reserved-prefixes.rs:17:12\n+   |\n+LL |     demo2!(foo\"bar\");\n+   |            ^^^- help: consider inserting a whitespace before this `\"`\n+   |            |\n+   |            unknown prefix\n+   |\n+   = note: prefixed identifiers and string literals are reserved since Rust 2021\n+\n+error: prefix `foo` is unknown\n+  --> $DIR/reserved-prefixes.rs:18:12\n+   |\n+LL |     demo2!(foo'b');\n+   |            ^^^- help: consider inserting a whitespace before this `'`\n+   |            |\n+   |            unknown prefix\n+   |\n+   = note: prefixed identifiers and string literals are reserved since Rust 2021\n+\n+error: prefix `foo` is unknown\n+  --> $DIR/reserved-prefixes.rs:20:12\n+   |\n+LL |     demo2!(foo'b);\n+   |            ^^^- help: consider inserting a whitespace before this `'`\n+   |            |\n+   |            unknown prefix\n+   |\n+   = note: prefixed identifiers and string literals are reserved since Rust 2021\n+\n+error: prefix `foo` is unknown\n+  --> $DIR/reserved-prefixes.rs:21:12\n+   |\n+LL |     demo3!(foo# bar);\n+   |            ^^^- help: consider inserting a whitespace before this `#`\n+   |            |\n+   |            unknown prefix\n+   |\n+   = note: prefixed identifiers and string literals are reserved since Rust 2021\n+\n+error: prefix `foo` is unknown\n+  --> $DIR/reserved-prefixes.rs:22:12\n+   |\n+LL |     demo4!(foo#! bar);\n+   |            ^^^- help: consider inserting a whitespace before this `#`\n+   |            |\n+   |            unknown prefix\n+   |\n+   = note: prefixed identifiers and string literals are reserved since Rust 2021\n+\n+error: prefix `foo` is unknown\n+  --> $DIR/reserved-prefixes.rs:23:12\n+   |\n+LL |     demo4!(foo## bar);\n+   |            ^^^- help: consider inserting a whitespace before this `#`\n+   |            |\n+   |            unknown prefix\n+   |\n+   = note: prefixed identifiers and string literals are reserved since Rust 2021\n+\n+error: prefix `foo` is unknown\n+  --> $DIR/reserved-prefixes.rs:25:12\n+   |\n+LL |     demo4!(foo#bar#);\n+   |            ^^^- help: consider inserting a whitespace before this `#`\n+   |            |\n+   |            unknown prefix\n+   |\n+   = note: prefixed identifiers and string literals are reserved since Rust 2021\n+\n+error: prefix `bar` is unknown\n+  --> $DIR/reserved-prefixes.rs:25:16\n+   |\n+LL |     demo4!(foo#bar#);\n+   |                ^^^- help: consider inserting a whitespace before this `#`\n+   |                |\n+   |                unknown prefix\n+   |\n+   = note: prefixed identifiers and string literals are reserved since Rust 2021\n+\n+error: aborting due to 9 previous errors\n+"}]}