{"sha": "bde5a842ce286508e503694b2cac0251600e25be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZTVhODQyY2UyODY1MDhlNTAzNjk0YjJjYWMwMjUxNjAwZTI1YmU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-27T19:35:04Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-27T23:45:54Z"}, "message": "parser: Make parse_value_path use parse_value_ident", "tree": {"sha": "30b936892b866ef16dc61b49bb0a8cc48fc5afe9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30b936892b866ef16dc61b49bb0a8cc48fc5afe9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bde5a842ce286508e503694b2cac0251600e25be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bde5a842ce286508e503694b2cac0251600e25be", "html_url": "https://github.com/rust-lang/rust/commit/bde5a842ce286508e503694b2cac0251600e25be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bde5a842ce286508e503694b2cac0251600e25be/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ab9efe262d20be8efc90535aeaf4ed9af47f400", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ab9efe262d20be8efc90535aeaf4ed9af47f400", "html_url": "https://github.com/rust-lang/rust/commit/8ab9efe262d20be8efc90535aeaf4ed9af47f400"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "8731af4ca60b38a3f5dbdc3e7396138c25e4e758", "filename": "src/librustsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bde5a842ce286508e503694b2cac0251600e25be/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bde5a842ce286508e503694b2cac0251600e25be/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fparser.rs?ref=bde5a842ce286508e503694b2cac0251600e25be", "patch": "@@ -508,6 +508,13 @@ fn parse_lit(p: parser) -> ast::lit {\n }\n \n fn parse_path_without_tps(p: parser) -> @ast::path {\n+    parse_path_without_tps_(p, parse_ident, parse_ident)\n+}\n+\n+fn parse_path_without_tps_(\n+    p: parser, parse_ident: fn(parser) -> ast::ident,\n+    parse_last_ident: fn(parser) -> ast::ident) -> @ast::path {\n+\n     let lo = p.span.lo;\n     let global = eat(p, token::MOD_SEP);\n     let mut ids = [];\n@@ -516,10 +523,11 @@ fn parse_path_without_tps(p: parser) -> @ast::path {\n             p.look_ahead(2u) != token::LT\n             && p.look_ahead(1u) == token::MOD_SEP;\n \n-        ids += [parse_ident(p)];\n         if is_not_last {\n+            ids += [parse_ident(p)];\n             expect(p, token::MOD_SEP);\n         } else {\n+            ids += [parse_last_ident(p)];\n             break;\n         }\n     }\n@@ -528,12 +536,7 @@ fn parse_path_without_tps(p: parser) -> @ast::path {\n }\n \n fn parse_value_path(p: parser) -> @ast::path {\n-    let pt = parse_path_without_tps(p);\n-    let last_word = vec::last(pt.idents);\n-    if is_restricted_keyword(p, last_word) {\n-        p.fatal(\"found \" + last_word + \" in expression position\");\n-    }\n-    pt\n+    parse_path_without_tps_(p, parse_ident, parse_value_ident)\n }\n \n fn parse_path_with_tps(p: parser, colons: bool) -> @ast::path {"}]}