{"sha": "439afcd9747808fb187b0676d63af5375a677e3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzOWFmY2Q5NzQ3ODA4ZmIxODdiMDY3NmQ2M2FmNTM3NWE2NzdlM2Q=", "commit": {"author": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-09-01T00:48:26Z"}, "committer": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-09-01T00:48:26Z"}, "message": "Update error message for lifetime of borrowed values", "tree": {"sha": "8b487481ae156fbd08525633a790ef527675a91b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b487481ae156fbd08525633a790ef527675a91b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/439afcd9747808fb187b0676d63af5375a677e3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/439afcd9747808fb187b0676d63af5375a677e3d", "html_url": "https://github.com/rust-lang/rust/commit/439afcd9747808fb187b0676d63af5375a677e3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/439afcd9747808fb187b0676d63af5375a677e3d/comments", "author": null, "committer": null, "parents": [{"sha": "86dde9bbda92c02c61282b5df5d38338a798ef3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/86dde9bbda92c02c61282b5df5d38338a798ef3b", "html_url": "https://github.com/rust-lang/rust/commit/86dde9bbda92c02c61282b5df5d38338a798ef3b"}], "stats": {"total": 73, "additions": 44, "deletions": 29}, "files": [{"sha": "ac8cfa7f4370992ee6229a03bb357d490719c869", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/439afcd9747808fb187b0676d63af5375a677e3d/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afcd9747808fb187b0676d63af5375a677e3d/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=439afcd9747808fb187b0676d63af5375a677e3d", "patch": "@@ -1029,6 +1029,12 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             }\n \n             err_out_of_scope(super_scope, sub_scope, cause) => {\n+                let (value_kind, value_msg) = match err.cmt.cat {\n+                    mc::Categorization::Rvalue(_) =>\n+                        (\"temporary value\", \"temporary value created here\"),\n+                    _ =>\n+                        (\"borrowed value\", \"does not live long enough\")\n+                };\n                 match cause {\n                     euv::ClosureCapture(s) => {\n                         // The primary span starts out as the closure creation point.\n@@ -1039,13 +1045,13 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                             Some(primary) => {\n                                 db.span = MultiSpan::from_span(s);\n                                 db.span_label(primary, &format!(\"capture occurs here\"));\n-                                db.span_label(s, &format!(\"does not live long enough\"));\n+                                db.span_label(s, &value_msg);\n                             }\n                             None => ()\n                         }\n                     }\n                     _ => {\n-                        db.span_label(error_span, &format!(\"does not live long enough\"));\n+                        db.span_label(error_span, &value_msg);\n                     }\n                 }\n \n@@ -1054,14 +1060,15 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n \n                 match (sub_span, super_span) {\n                     (Some(s1), Some(s2)) if s1 == s2 => {\n-                        db.span_label(s1, &\"borrowed value dropped before borrower\");\n+                        db.span_label(s1, &format!(\"{} dropped before borrower\", value_kind));\n                         db.note(\"values in a scope are dropped in the opposite order \\\n                                 they are created\");\n                     }\n                     _ => {\n                         match sub_span {\n                             Some(s) => {\n-                                db.span_label(s, &\"borrowed value must be valid until here\");\n+                                db.span_label(s, &format!(\"{} needs to live until here\",\n+                                                          value_kind));\n                             }\n                             None => {\n                                 self.tcx.note_and_explain_region(\n@@ -1073,7 +1080,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                         }\n                         match super_span {\n                             Some(s) => {\n-                                db.span_label(s, &\"borrowed value only valid until here\");\n+                                db.span_label(s, &format!(\"{} only lives until here\", value_kind));\n                             }\n                             None => {\n                                 self.tcx.note_and_explain_region(\n@@ -1086,9 +1093,8 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     }\n                 }\n \n-                if let Some(span) = statement_scope_span(self.tcx, super_scope) {\n-                    db.span_help(span,\n-                                 \"consider using a `let` binding to increase its lifetime\");\n+                if let Some(_) = statement_scope_span(self.tcx, super_scope) {\n+                    db.note(\"consider using a `let` binding to increase its lifetime\");\n                 }\n             }\n "}, {"sha": "95c74348e788bd1c7bebe746c21038d24347fdc2", "filename": "src/test/compile-fail/borrowck/borrowck-let-suggestion-suffixes.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/439afcd9747808fb187b0676d63af5375a677e3d/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-let-suggestion-suffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afcd9747808fb187b0676d63af5375a677e3d/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-let-suggestion-suffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-let-suggestion-suffixes.rs?ref=439afcd9747808fb187b0676d63af5375a677e3d", "patch": "@@ -25,36 +25,36 @@ fn f() {\n \n     v3.push(&'x');           // statement 6\n     //~^ ERROR borrowed value does not live long enough\n-    //~| NOTE does not live long enough\n-    //~| NOTE borrowed value only valid until here\n-    //~| HELP consider using a `let` binding to increase its lifetime\n+    //~| NOTE temporary value created here\n+    //~| NOTE temporary value only lives until here\n+    //~| NOTE consider using a `let` binding to increase its lifetime\n \n     {\n \n         let mut v4 = Vec::new(); // (sub) statement 0\n \n         v4.push(&'y');\n         //~^ ERROR borrowed value does not live long enough\n-        //~| NOTE does not live long enough\n-        //~| NOTE borrowed value only valid until here\n-        //~| HELP consider using a `let` binding to increase its lifetime\n+        //~| NOTE temporary value created here\n+        //~| NOTE temporary value only lives until here\n+        //~| NOTE consider using a `let` binding to increase its lifetime\n \n     }                       // (statement 7)\n-    //~^ NOTE borrowed value must be valid until here\n+    //~^ NOTE temporary value needs to live until here\n \n     let mut v5 = Vec::new(); // statement 8\n \n     v5.push(&'z');\n     //~^ ERROR borrowed value does not live long enough\n-    //~| NOTE does not live long enough\n-    //~| NOTE borrowed value only valid until here\n-    //~| HELP consider using a `let` binding to increase its lifetime\n+    //~| NOTE temporary value created here\n+    //~| NOTE temporary value only lives until here\n+    //~| NOTE consider using a `let` binding to increase its lifetime\n \n     v1.push(&old[0]);\n }\n //~^ NOTE borrowed value dropped before borrower\n-//~| NOTE borrowed value must be valid until here\n-//~| NOTE borrowed value must be valid until here\n+//~| NOTE temporary value needs to live until here\n+//~| NOTE temporary value needs to live until here\n \n fn main() {\n     f();"}, {"sha": "f5ea7a2108e79b207539a967dea677fdcea92b9a", "filename": "src/test/compile-fail/regions-escape-loop-via-vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/439afcd9747808fb187b0676d63af5375a677e3d/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afcd9747808fb187b0676d63af5375a677e3d/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs?ref=439afcd9747808fb187b0676d63af5375a677e3d", "patch": "@@ -24,8 +24,8 @@ fn broken() {\n         x += 1; //~ ERROR cannot assign\n         //~^ NOTE assignment to borrowed `x` occurs here\n     }\n-    //~^ NOTE borrowed value only valid until here\n+    //~^ NOTE borrowed value only lives until here\n }\n-//~^ NOTE borrowed value must be valid until here\n+//~^ NOTE borrowed value needs to live until here\n \n fn main() { }"}, {"sha": "eeafaab44c62007efc8ba12c1114f1d50e9d00fb", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.rs", "status": "renamed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/439afcd9747808fb187b0676d63af5375a677e3d/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afcd9747808fb187b0676d63af5375a677e3d/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.rs?ref=439afcd9747808fb187b0676d63af5375a677e3d", "patch": "@@ -10,12 +10,7 @@\n \n fn f() {\n     let x = [1].iter();\n-    //~^ ERROR borrowed value does not live long enough\n-    //~| NOTE does not live long enough\n-    //~| NOTE borrowed value only valid until here\n-    //~| HELP consider using a `let` binding to increase its lifetime\n }\n-//~^ borrowed value must be valid until here\n \n fn main() {\n     f();", "previous_filename": "src/test/compile-fail/borrowck/borrowck-let-suggestion.rs"}, {"sha": "91600340019c3c0c9c5758986173fbbb7802f1f9", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/439afcd9747808fb187b0676d63af5375a677e3d/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/439afcd9747808fb187b0676d63af5375a677e3d/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr?ref=439afcd9747808fb187b0676d63af5375a677e3d", "patch": "@@ -0,0 +1,14 @@\n+error: borrowed value does not live long enough\n+  --> $DIR/borrowck-let-suggestion.rs:12:13\n+   |\n+12 |     let x = [1].iter();\n+   |             ^^^       - temporary value only lives until here\n+   |             |\n+   |             temporary value created here\n+13 | }\n+   | - temporary value needs to live until here\n+   |\n+   = note: consider using a `let` binding to increase its lifetime\n+\n+error: aborting due to previous error\n+"}, {"sha": "3fedb2884bc58c8cd3c52f469c3f19f3cdf5d224", "filename": "src/test/ui/span/issue-11925.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/439afcd9747808fb187b0676d63af5375a677e3d/src%2Ftest%2Fui%2Fspan%2Fissue-11925.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/439afcd9747808fb187b0676d63af5375a677e3d/src%2Ftest%2Fui%2Fspan%2Fissue-11925.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-11925.stderr?ref=439afcd9747808fb187b0676d63af5375a677e3d", "patch": "@@ -5,10 +5,10 @@ error: `x` does not live long enough\n    |                                    ^\n    |                                    |\n    |                                    does not live long enough\n-   |                                    borrowed value only valid until here\n+   |                                    borrowed value only lives until here\n ...\n 23 | }\n-   | - borrowed value must be valid until here\n+   | - borrowed value needs to live until here\n \n error: aborting due to previous error\n "}]}