{"sha": "30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "node_id": "C_kwDOAAsO6NoAKDMwY2Y3YTNmNTFkNmEyNTAwNjA3N2QzZTllYzMyMjJkZTMxMDRiOGQ", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-02-03T23:21:56Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-02-09T10:26:49Z"}, "message": "Introduce `ReError`\n\nCC #69314", "tree": {"sha": "a5b0608d63e5e93341bb84afb3bf9030c1c0d6df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5b0608d63e5e93341bb84afb3bf9030c1c0d6df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "html_url": "https://github.com/rust-lang/rust/commit/30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c40919b7a75f93ed7ef040361e82c656d246d41e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c40919b7a75f93ed7ef040361e82c656d246d41e", "html_url": "https://github.com/rust-lang/rust/commit/c40919b7a75f93ed7ef040361e82c656d246d41e"}], "stats": {"total": 419, "additions": 208, "deletions": 211}, "files": [{"sha": "d56ca1981ae2f60cf0171ad05e2c683c39bb429c", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -343,11 +343,11 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                     let note = match closure_kind_ty.to_opt_closure_kind() {\n                         Some(ty::ClosureKind::Fn) => {\n                             \"closure implements `Fn`, so references to captured variables \\\n-                                can't escape the closure\"\n+                             can't escape the closure\"\n                         }\n                         Some(ty::ClosureKind::FnMut) => {\n                             \"closure implements `FnMut`, so references to captured variables \\\n-                                can't escape the closure\"\n+                             can't escape the closure\"\n                         }\n                         Some(ty::ClosureKind::FnOnce) => {\n                             bug!(\"BrEnv in a `FnOnce` closure\");\n@@ -364,7 +364,11 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                 ty::BoundRegionKind::BrAnon(..) => None,\n             },\n \n-            ty::ReLateBound(..) | ty::ReVar(..) | ty::RePlaceholder(..) | ty::ReErased => None,\n+            ty::ReLateBound(..)\n+            | ty::ReVar(..)\n+            | ty::RePlaceholder(..)\n+            | ty::ReErased\n+            | ty::ReError => None,\n         }\n     }\n "}, {"sha": "e598b70d12ae78e7cfb9b2d3b9a2a27d3e1bcfdd", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -95,7 +95,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                             concrete_type.span,\n                             \"opaque type with non-universal region substs\",\n                         );\n-                        infcx.tcx.lifetimes.re_static\n+                        infcx.tcx.lifetimes.re_error\n                     }\n                 }\n             };"}, {"sha": "6680c57b0c96e06af098c8a5846ed1d17d5baa89", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -821,6 +821,8 @@ impl<'tcx> UniversalRegionIndices<'tcx> {\n     pub fn to_region_vid(&self, r: ty::Region<'tcx>) -> RegionVid {\n         if let ty::ReVar(..) = *r {\n             r.to_region_vid()\n+        } else if let ty::ReError = *r {\n+            RegionVid::new(0)\n         } else {\n             *self\n                 .indices"}, {"sha": "a1f5782fbd56421385ec6e80df44a2c57a64a664", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -264,10 +264,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     // reported an error in this case -- but if\n                     // not, let's error out.\n                     tcx.sess.delay_span_bug(lifetime.ident.span, \"unelided lifetime in signature\");\n-\n-                    // Supply some dummy value. We don't have an\n-                    // `re_error`, annoyingly, so use `'static`.\n-                    tcx.lifetimes.re_static\n+                    tcx.lifetimes.re_error\n                 })\n             }\n         }\n@@ -482,10 +479,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n                             // This indicates an illegal lifetime in a non-assoc-trait position\n                             tcx.sess.delay_span_bug(self.span, \"unelided lifetime in signature\");\n-\n-                            // Supply some dummy value. We don't have an\n-                            // `re_error`, annoyingly, so use `'static`.\n-                            tcx.lifetimes.re_static\n+                            tcx.lifetimes.re_error\n                         })\n                         .into(),\n                     GenericParamDefKind::Type { has_default, .. } => {\n@@ -1629,7 +1623,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         } else {\n                             err.emit();\n                         }\n-                        tcx.lifetimes.re_static\n+                        tcx.lifetimes.re_error\n                     })\n                 }\n             })"}, {"sha": "facfc4313f4274d56065276e3ddfd44b1feb18db", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -792,7 +792,7 @@ pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n                                 return_span,\n                                 \"expected ReFree to map to ReEarlyBound\"\n                             );\n-                        return tcx.lifetimes.re_static;\n+                        return tcx.lifetimes.re_error;\n                     };\n                     tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n                         def_id: e.def_id,"}, {"sha": "e80ff89623a35fbe15e284944eab440f2d699d32", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -928,7 +928,7 @@ fn infer_placeholder_type<'a>(\n \n     // Typeck doesn't expect erased regions to be returned from `type_of`.\n     tcx.fold_regions(ty, |r, _| match *r {\n-        ty::ReErased => tcx.lifetimes.re_static,\n+        ty::ReErased | ty::ReError => tcx.lifetimes.re_static,\n         _ => r,\n     })\n }"}, {"sha": "bca385f6bdca7ae9131ab6b98600a1900e43e46a", "filename": "compiler/rustc_hir_analysis/src/outlives/utils.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Futils.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -170,6 +170,8 @@ fn is_free_region(region: Region<'_>) -> bool {\n         // ignore it. We can't put it on the struct header anyway.\n         ty::ReLateBound(..) => false,\n \n+        ty::ReError => false,\n+\n         // These regions don't appear in types from type declarations:\n         ty::ReErased | ty::ReVar(..) | ty::RePlaceholder(..) | ty::ReFree(..) => {\n             bug!(\"unexpected region in outlives inference: {:?}\", region);"}, {"sha": "06a4a5d366f6dad6ba2e6bdc01e9dae4a71a10d6", "filename": "compiler/rustc_hir_analysis/src/variance/constraints.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -409,6 +409,8 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 // way early-bound regions do, so we skip them here.\n             }\n \n+            ty::ReError => {}\n+\n             ty::ReFree(..) | ty::ReVar(..) | ty::RePlaceholder(..) | ty::ReErased => {\n                 // We don't expect to see anything but 'static or bound\n                 // regions when visiting member types or method types."}, {"sha": "b51a85977e71767709a8f02e4ba266cbba820dd5", "filename": "compiler/rustc_infer/src/errors/note_and_explain.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -31,6 +31,8 @@ impl<'a> DescriptionCtx<'a> {\n \n             ty::RePlaceholder(_) => return None,\n \n+            ty::ReError => return None,\n+\n             // FIXME(#13998) RePlaceholder should probably print like\n             // ReFree rather than dumping Debug output on the user.\n             //"}, {"sha": "78a86b4e267aa635e2df737e764303df69b855b6", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -371,6 +371,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n \n             ty::ReStatic\n             | ty::ReEarlyBound(..)\n+            | ty::ReError\n             | ty::ReFree(_)\n             | ty::RePlaceholder(..)\n             | ty::ReErased => self.canonicalize_mode.canonicalize_free_region(self, r),"}, {"sha": "a7684ea1ff6d5e80746d370c204108e2c220b64e", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -705,6 +705,10 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                 return Ok(r);\n             }\n \n+            ty::ReError => {\n+                return Ok(r);\n+            }\n+\n             ty::RePlaceholder(..)\n             | ty::ReVar(..)\n             | ty::ReStatic\n@@ -861,7 +865,7 @@ impl<'tcx> FallibleTypeFolder<'tcx> for ConstInferUnifier<'_, 'tcx> {\n         match *r {\n             // Never make variables for regions bound within the type itself,\n             // nor for erased regions.\n-            ty::ReLateBound(..) | ty::ReErased => {\n+            ty::ReLateBound(..) | ty::ReErased | ty::ReError => {\n                 return Ok(r);\n             }\n "}, {"sha": "ceaa58257bbf0ca729cdc1a517a611f8b8be8520", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -134,6 +134,8 @@ pub(super) fn note_and_explain_region<'tcx>(\n \n         ty::RePlaceholder(_) => return,\n \n+        ty::ReError => return,\n+\n         // FIXME(#13998) RePlaceholder should probably print like\n         // ReFree rather than dumping Debug output on the user.\n         //\n@@ -313,6 +315,9 @@ pub fn unexpected_hidden_region_diagnostic<'tcx>(\n                 )\n             }\n         }\n+        ty::ReError => {\n+            err.delay_as_bug();\n+        }\n         _ => {\n             // Ugh. This is a painful case: the hidden region is not one\n             // that we can easily summarize or explain. This can happen\n@@ -2546,7 +2551,11 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             );\n \n             err.note_expected_found(&\"\", sup_expected, &\"\", sup_found);\n-            err.emit();\n+            if sub_region.is_error() | sup_region.is_error() {\n+                err.delay_as_bug();\n+            } else {\n+                err.emit();\n+            }\n             return;\n         }\n \n@@ -2562,7 +2571,11 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         );\n \n         self.note_region_origin(&mut err, &sub_origin);\n-        err.emit();\n+        if sub_region.is_error() | sup_region.is_error() {\n+            err.delay_as_bug();\n+        } else {\n+            err.emit();\n+        }\n     }\n \n     /// Determine whether an error associated with the given span and definition"}, {"sha": "bdd09a995dc23a96b53b2a8f584b25821baa7132", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -78,7 +78,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         sub: Region<'tcx>,\n         sup: Region<'tcx>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        match origin {\n+        let mut err = match origin {\n             infer::Subtype(box trace) => {\n                 let terr = TypeError::RegionsDoesNotOutlive(sup, sub);\n                 let mut err = self.report_and_explain_type_error(trace, terr);\n@@ -299,7 +299,11 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 );\n                 err\n             }\n+        };\n+        if sub.is_error() || sup.is_error() {\n+            err.delay_as_bug();\n         }\n+        err\n     }\n \n     pub fn suggest_copy_trait_method_bounds("}, {"sha": "33cd29d26fe315b52c2695ae0747810a5cc457bc", "filename": "compiler/rustc_infer/src/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -126,6 +126,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n             | ty::ReFree(_)\n             | ty::ReVar(_)\n             | ty::RePlaceholder(..)\n+            | ty::ReError\n             | ty::ReErased => {\n                 // replace all free regions with 'erased\n                 self.tcx().lifetimes.re_erased"}, {"sha": "c79ef9802825d07ae56c0ec63811b03cf5020f95", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -17,7 +17,7 @@ use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::PlaceholderRegion;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n-use rustc_middle::ty::{ReEarlyBound, ReErased, ReFree, ReStatic};\n+use rustc_middle::ty::{ReEarlyBound, ReErased, ReError, ReFree, ReStatic};\n use rustc_middle::ty::{ReLateBound, RePlaceholder, ReVar};\n use rustc_middle::ty::{Region, RegionVid};\n use rustc_span::Span;\n@@ -211,7 +211,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 );\n             }\n \n-            ReStatic => {\n+            ReStatic | ReError => {\n                 // nothing lives longer than `'static`\n                 Ok(self.tcx().lifetimes.re_static)\n             }\n@@ -436,7 +436,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             }\n             (VarValue::Value(a), VarValue::Empty(_)) => {\n                 match *a {\n-                    ReLateBound(..) | ReErased => {\n+                    ReLateBound(..) | ReErased | ReError => {\n                         bug!(\"cannot relate region: {:?}\", a);\n                     }\n \n@@ -465,7 +465,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             }\n             (VarValue::Empty(a_ui), VarValue::Value(b)) => {\n                 match *b {\n-                    ReLateBound(..) | ReErased => {\n+                    ReLateBound(..) | ReErased | ReError => {\n                         bug!(\"cannot relate region: {:?}\", b);\n                     }\n \n@@ -546,6 +546,8 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 );\n             }\n \n+            (ReError, _) | (_, ReError) => self.tcx().lifetimes.re_error,\n+\n             (ReStatic, _) | (_, ReStatic) => {\n                 // nothing lives longer than `'static`\n                 self.tcx().lifetimes.re_static\n@@ -1040,7 +1042,7 @@ impl<'tcx> LexicalRegionResolutions<'tcx> {\n             ty::ReVar(rid) => match self.values[rid] {\n                 VarValue::Empty(_) => r,\n                 VarValue::Value(r) => r,\n-                VarValue::ErrorValue => tcx.lifetimes.re_static,\n+                VarValue::ErrorValue => tcx.lifetimes.re_error,\n             },\n             _ => r,\n         };"}, {"sha": "f7b5129b49f0320a287a9924bb18da660c81e543", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -696,7 +696,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n \n     pub fn universe(&self, region: Region<'tcx>) -> ty::UniverseIndex {\n         match *region {\n-            ty::ReStatic | ty::ReErased | ty::ReFree(..) | ty::ReEarlyBound(..) => {\n+            ty::ReStatic | ty::ReErased | ty::ReFree(..) | ty::ReEarlyBound(..) | ty::ReError => {\n                 ty::UniverseIndex::ROOT\n             }\n             ty::RePlaceholder(placeholder) => placeholder.universe,"}, {"sha": "948675ebc37fb7846287477f4d1ce44a1d10731b", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -275,6 +275,9 @@ pub struct CommonLifetimes<'tcx> {\n \n     /// Erased region, used outside of type inference.\n     pub re_erased: Region<'tcx>,\n+\n+    /// Error region, used only for error reporting.\n+    pub re_error: Region<'tcx>,\n }\n \n pub struct CommonConsts<'tcx> {\n@@ -324,7 +327,11 @@ impl<'tcx> CommonLifetimes<'tcx> {\n             ))\n         };\n \n-        CommonLifetimes { re_static: mk(ty::ReStatic), re_erased: mk(ty::ReErased) }\n+        CommonLifetimes {\n+            re_static: mk(ty::ReStatic),\n+            re_erased: mk(ty::ReErased),\n+            re_error: mk(ty::ReError),\n+        }\n     }\n }\n "}, {"sha": "7cbf7994be00f149f16e95a9fdaaf3e75a0a740d", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -100,7 +100,7 @@ impl GenericParamDef {\n         preceding_substs: &[ty::GenericArg<'tcx>],\n     ) -> ty::GenericArg<'tcx> {\n         match &self.kind {\n-            ty::GenericParamDefKind::Lifetime => tcx.lifetimes.re_static.into(),\n+            ty::GenericParamDefKind::Lifetime => tcx.lifetimes.re_error.into(),\n             ty::GenericParamDefKind::Type { .. } => tcx.ty_error().into(),\n             ty::GenericParamDefKind::Const { .. } => {\n                 tcx.const_error(tcx.bound_type_of(self.def_id).subst(tcx, preceding_substs)).into()"}, {"sha": "576cccc09d579d9ef9855b29629a41b3e1bf09dd", "filename": "compiler/rustc_middle/src/ty/opaque_types.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -109,6 +109,8 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n             // them.\n             ty::ReErased => return r,\n \n+            ty::ReError => return r,\n+\n             // The regions that we expect from borrow checking.\n             ty::ReEarlyBound(_) | ty::ReFree(_) => {}\n \n@@ -132,13 +134,13 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                         self.span,\n                         format!(\n                             \"lifetime `{}` is part of concrete type but not used in \\\n-                                 parameter list of the `impl Trait` type alias\",\n+                             parameter list of the `impl Trait` type alias\",\n                             r\n                         ),\n                     )\n                     .emit();\n \n-                self.tcx().lifetimes.re_static\n+                self.tcx().lifetimes.re_error\n             }\n         }\n     }"}, {"sha": "228827bcbf48f22cde61c1381f4c8bf3c334b4d5", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -2114,7 +2114,7 @@ impl<'tcx> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx> {\n \n             ty::ReVar(_) if identify_regions => true,\n \n-            ty::ReVar(_) | ty::ReErased => false,\n+            ty::ReVar(_) | ty::ReErased | ty::ReError => false,\n \n             ty::ReStatic => true,\n         }\n@@ -2194,6 +2194,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n             }\n             ty::ReVar(_) => {}\n             ty::ReErased => {}\n+            ty::ReError => {}\n             ty::ReStatic => {\n                 p!(\"'static\");\n                 return Ok(self);"}, {"sha": "beadb9a2f0f14e2e6bcb6adaf14828be5989cf57", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -1623,9 +1623,15 @@ impl<'tcx> Region<'tcx> {\n             ty::ReVar(..) => false,\n             ty::RePlaceholder(placeholder) => placeholder.name.is_named(),\n             ty::ReErased => false,\n+            ty::ReError => false,\n         }\n     }\n \n+    #[inline]\n+    pub fn is_error(self) -> bool {\n+        matches!(*self, ty::ReError)\n+    }\n+\n     #[inline]\n     pub fn is_static(self) -> bool {\n         matches!(*self, ty::ReStatic)\n@@ -1686,6 +1692,7 @@ impl<'tcx> Region<'tcx> {\n             ty::ReErased => {\n                 flags = flags | TypeFlags::HAS_RE_ERASED;\n             }\n+            ty::ReError => {}\n         }\n \n         debug!(\"type_flags({:?}) = {:?}\", self, flags);"}, {"sha": "b28aee40b16c2cd45dd773b6636c332cb7581a74", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -1725,7 +1725,6 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                             !segment.has_generic_args,\n                             elided_lifetime_span,\n                         );\n-                        err.note(\"assuming a `'static` lifetime...\");\n                         err.emit();\n                         should_lint = false;\n "}, {"sha": "4d58ff921e382034937083393467c0db5f4bc87e", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -299,6 +299,7 @@ fn encode_region<'tcx>(\n         RegionKind::ReEarlyBound(..)\n         | RegionKind::ReFree(..)\n         | RegionKind::ReStatic\n+        | RegionKind::ReError\n         | RegionKind::ReVar(..)\n         | RegionKind::RePlaceholder(..) => {\n             bug!(\"encode_region: unexpected `{:?}`\", region.kind());"}, {"sha": "05b201b9f99322ef80f773f8239b100f715ad9a1", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -493,6 +493,9 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Lifetime<RustInterner<'tcx>>> for Region<'t\n             ty::ReEarlyBound(_) => {\n                 panic!(\"Should have already been substituted.\");\n             }\n+            ty::ReError => {\n+                panic!(\"Error lifetime should not have already been lowered.\");\n+            }\n             ty::ReLateBound(db, br) => chalk_ir::LifetimeData::BoundVar(chalk_ir::BoundVar::new(\n                 chalk_ir::DebruijnIndex::new(db.as_u32()),\n                 br.var.as_usize(),"}, {"sha": "0b573f96bf7a211babdae4470d04db8a03eaef74", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -960,6 +960,9 @@ pub enum RegionKind<I: Interner> {\n \n     /// Erased region, used by trait selection, in MIR and during codegen.\n     ReErased,\n+\n+    /// A region that resulted from some other error. Used exclusively for diagnostics.\n+    ReError,\n }\n \n // This is manually implemented for `RegionKind` because `std::mem::discriminant`\n@@ -974,6 +977,7 @@ const fn regionkind_discriminant<I: Interner>(value: &RegionKind<I>) -> usize {\n         ReVar(_) => 4,\n         RePlaceholder(_) => 5,\n         ReErased => 6,\n+        ReError => 7,\n     }\n }\n \n@@ -999,6 +1003,7 @@ impl<I: Interner> Clone for RegionKind<I> {\n             ReVar(r) => ReVar(r.clone()),\n             RePlaceholder(r) => RePlaceholder(r.clone()),\n             ReErased => ReErased,\n+            ReError => ReError,\n         }\n     }\n }\n@@ -1077,6 +1082,7 @@ impl<I: Interner> hash::Hash for RegionKind<I> {\n             ReVar(r) => r.hash(state),\n             RePlaceholder(r) => r.hash(state),\n             ReErased => (),\n+            ReError => (),\n         }\n     }\n }\n@@ -1100,6 +1106,8 @@ impl<I: Interner> fmt::Debug for RegionKind<I> {\n             RePlaceholder(placeholder) => write!(f, \"RePlaceholder({placeholder:?})\"),\n \n             ReErased => f.write_str(\"ReErased\"),\n+\n+            ReError => f.write_str(\"ReError\"),\n         }\n     }\n }\n@@ -1134,6 +1142,7 @@ where\n                 a.encode(e);\n             }),\n             ReErased => e.emit_enum_variant(disc, |_| {}),\n+            ReError => e.emit_enum_variant(disc, |_| {}),\n         }\n     }\n }\n@@ -1156,6 +1165,7 @@ where\n             4 => ReVar(Decodable::decode(d)),\n             5 => RePlaceholder(Decodable::decode(d)),\n             6 => ReErased,\n+            7 => ReError,\n             _ => panic!(\n                 \"{}\",\n                 format!(\n@@ -1184,7 +1194,7 @@ where\n     ) {\n         std::mem::discriminant(self).hash_stable(hcx, hasher);\n         match self {\n-            ReErased | ReStatic => {\n+            ReErased | ReStatic | ReError => {\n                 // No variant fields to hash for these ...\n             }\n             ReLateBound(d, r) => {"}, {"sha": "8a493478e9cb3f503a27420696efef4b1f7b5934", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -242,6 +242,7 @@ pub(crate) fn clean_middle_region<'tcx>(region: ty::Region<'tcx>) -> Option<Life\n         ty::ReLateBound(..)\n         | ty::ReFree(..)\n         | ty::ReVar(..)\n+        | ty::ReError\n         | ty::RePlaceholder(..)\n         | ty::ReErased => {\n             debug!(\"cannot clean region {:?}\", region);"}, {"sha": "cc10bbcc0b500aec1d2b404d39e802009d9dbada", "filename": "tests/ui/associated-type-bounds/elision.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fassociated-type-bounds%2Felision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fassociated-type-bounds%2Felision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Felision.stderr?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -16,10 +16,10 @@ error[E0308]: mismatched types\n LL | fn f(x: &mut dyn Iterator<Item: Iterator<Item = &'_ ()>>) -> Option<&'_ ()> { x.next() }\n    |                           -----------------------------      --------------   ^^^^^^^^ expected `Option<&()>`, found `Option<impl Iterator<Item = &'_ ()>>`\n    |                           |                                  |\n-   |                           |                                  expected `Option<&'static ()>` because of return type\n+   |                           |                                  expected `Option<&()>` because of return type\n    |                           this type parameter\n    |\n-   = note: expected enum `Option<&'static ()>`\n+   = note: expected enum `Option<&()>`\n               found enum `Option<impl Iterator<Item = &'_ ()>>`\n \n error: aborting due to 2 previous errors"}, {"sha": "224198653dc572bb6bd6f2b3f02c519fb6aa2875", "filename": "tests/ui/async-await/async-fn-path-elision.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fasync-await%2Fasync-fn-path-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fasync-await%2Fasync-fn-path-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-fn-path-elision.stderr?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -4,7 +4,6 @@ error[E0726]: implicit elided lifetime not allowed here\n LL | async fn error(lt: HasLifetime) {\n    |                    ^^^^^^^^^^^ expected lifetime parameter\n    |\n-   = note: assuming a `'static` lifetime...\n help: indicate the anonymous lifetime\n    |\n LL | async fn error(lt: HasLifetime<'_>) {"}, {"sha": "656bc29466f23d622d48bc744585bc31b6ffc7d1", "filename": "tests/ui/const-generics/const-param-elided-lifetime.min.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.min.stderr?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -28,7 +28,7 @@ error[E0637]: `&` without an explicit lifetime name cannot be used here\n LL | fn bar<const N: &u8>() {}\n    |                 ^ explicit lifetime name needed here\n \n-error: `&'static u8` is forbidden as the type of a const generic parameter\n+error: `&u8` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-elided-lifetime.rs:9:19\n    |\n LL | struct A<const N: &u8>;\n@@ -37,7 +37,7 @@ LL | struct A<const N: &u8>;\n    = note: the only supported types are integers, `bool` and `char`\n    = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n-error: `&'static u8` is forbidden as the type of a const generic parameter\n+error: `&u8` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-elided-lifetime.rs:14:15\n    |\n LL | impl<const N: &u8> A<N> {\n@@ -46,7 +46,7 @@ LL | impl<const N: &u8> A<N> {\n    = note: the only supported types are integers, `bool` and `char`\n    = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n-error: `&'static u8` is forbidden as the type of a const generic parameter\n+error: `&u8` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-elided-lifetime.rs:22:15\n    |\n LL | impl<const N: &u8> B for A<N> {}\n@@ -55,7 +55,7 @@ LL | impl<const N: &u8> B for A<N> {}\n    = note: the only supported types are integers, `bool` and `char`\n    = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n-error: `&'static u8` is forbidden as the type of a const generic parameter\n+error: `&u8` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-elided-lifetime.rs:26:17\n    |\n LL | fn bar<const N: &u8>() {}\n@@ -64,7 +64,7 @@ LL | fn bar<const N: &u8>() {}\n    = note: the only supported types are integers, `bool` and `char`\n    = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n-error: `&'static u8` is forbidden as the type of a const generic parameter\n+error: `&u8` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-elided-lifetime.rs:17:21\n    |\n LL |     fn foo<const M: &u8>(&self) {}"}, {"sha": "45611d6bf5f3def8fd5576fc2c1335229f0521de", "filename": "tests/ui/const-generics/const-param-elided-lifetime.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -8,23 +8,23 @@\n \n struct A<const N: &u8>;\n //~^ ERROR `&` without an explicit lifetime name cannot be used here\n-//[min]~^^ ERROR `&'static u8` is forbidden\n+//[min]~^^ ERROR `&u8` is forbidden\n trait B {}\n \n impl<const N: &u8> A<N> {\n //~^ ERROR `&` without an explicit lifetime name cannot be used here\n-//[min]~^^ ERROR `&'static u8` is forbidden\n+//[min]~^^ ERROR `&u8` is forbidden\n     fn foo<const M: &u8>(&self) {}\n     //~^ ERROR `&` without an explicit lifetime name cannot be used here\n-    //[min]~^^ ERROR `&'static u8` is forbidden\n+    //[min]~^^ ERROR `&u8` is forbidden\n }\n \n impl<const N: &u8> B for A<N> {}\n //~^ ERROR `&` without an explicit lifetime name cannot be used here\n-//[min]~^^ ERROR `&'static u8` is forbidden\n+//[min]~^^ ERROR `&u8` is forbidden\n \n fn bar<const N: &u8>() {}\n //~^ ERROR `&` without an explicit lifetime name cannot be used here\n-//[min]~^^ ERROR `&'static u8` is forbidden\n+//[min]~^^ ERROR `&u8` is forbidden\n \n fn main() {}"}, {"sha": "9f88013416244c03f048f649d8b8a7ebe6bc4537", "filename": "tests/ui/const-generics/issues/issue-56445-1.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.min.stderr?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -6,7 +6,7 @@ LL | struct Bug<'a, const S: &'a str>(PhantomData<&'a ()>);\n    |\n    = note: for more information, see issue #74052 <https://github.com/rust-lang/rust/issues/74052>\n \n-error: `&'static str` is forbidden as the type of a const generic parameter\n+error: `&str` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-56445-1.rs:9:25\n    |\n LL | struct Bug<'a, const S: &'a str>(PhantomData<&'a ()>);"}, {"sha": "0741c3796ada48dcc1b943a252dcecf49f0dfc19", "filename": "tests/ui/const-generics/issues/issue-56445-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -8,6 +8,6 @@ use std::marker::PhantomData;\n \n struct Bug<'a, const S: &'a str>(PhantomData<&'a ()>);\n //~^ ERROR: use of non-static lifetime `'a` in const generic\n-//[min]~| ERROR: `&'static str` is forbidden as the type of a const generic parameter\n+//[min]~| ERROR: `&str` is forbidden as the type of a const generic parameter\n \n impl Bug<'_, \"\"> {}"}, {"sha": "54b483f53d4cba42064837b786cef3d42d12db8f", "filename": "tests/ui/generics/issue-65285-incorrect-explicit-lifetime-name-needed.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fgenerics%2Fissue-65285-incorrect-explicit-lifetime-name-needed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fgenerics%2Fissue-65285-incorrect-explicit-lifetime-name-needed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fissue-65285-incorrect-explicit-lifetime-name-needed.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -8,7 +8,6 @@ fn should_error<T>() where T : Into<&u32> {}\n trait X<'a, K: 'a> {\n     fn foo<'b, L: X<&'b Nested<K>>>();\n     //~^ ERROR missing lifetime specifier [E0106]\n-    //~| ERROR the type `&'b Nested<K>` does not fulfill the required lifetime\n }\n \n fn bar<'b, L: X<&'b Nested<i32>>>(){}"}, {"sha": "faf4c9eb872755be3c49821e55e114ac8ff48ade", "filename": "tests/ui/generics/issue-65285-incorrect-explicit-lifetime-name-needed.stderr", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fgenerics%2Fissue-65285-incorrect-explicit-lifetime-name-needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fgenerics%2Fissue-65285-incorrect-explicit-lifetime-name-needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fissue-65285-incorrect-explicit-lifetime-name-needed.stderr?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -29,7 +29,7 @@ LL |     fn foo<'b, L: X<'lifetime, &'b Nested<K>>>();\n    |                     ++++++++++\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-65285-incorrect-explicit-lifetime-name-needed.rs:14:16\n+  --> $DIR/issue-65285-incorrect-explicit-lifetime-name-needed.rs:13:16\n    |\n LL | fn bar<'b, L: X<&'b Nested<i32>>>(){}\n    |                ^ expected named lifetime parameter\n@@ -39,19 +39,7 @@ help: consider using the `'b` lifetime\n LL | fn bar<'b, L: X<'b, &'b Nested<i32>>>(){}\n    |                 +++\n \n-error[E0477]: the type `&'b Nested<K>` does not fulfill the required lifetime\n-  --> $DIR/issue-65285-incorrect-explicit-lifetime-name-needed.rs:9:19\n-   |\n-LL |     fn foo<'b, L: X<&'b Nested<K>>>();\n-   |                   ^^^^^^^^^^^^^^^^\n-   |\n-note: type must satisfy the static lifetime as required by this binding\n-  --> $DIR/issue-65285-incorrect-explicit-lifetime-name-needed.rs:8:16\n-   |\n-LL | trait X<'a, K: 'a> {\n-   |                ^^\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0106, E0477, E0637.\n+Some errors have detailed explanations: E0106, E0637.\n For more information about an error, try `rustc --explain E0106`."}, {"sha": "18e4c618dba99f492727c55b8140eef3783e51a5", "filename": "tests/ui/impl-header-lifetime-elision/path-elided.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fimpl-header-lifetime-elision%2Fpath-elided.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fimpl-header-lifetime-elision%2Fpath-elided.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-header-lifetime-elision%2Fpath-elided.stderr?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -4,7 +4,6 @@ error[E0726]: implicit elided lifetime not allowed here\n LL | impl MyTrait for Foo {\n    |                  ^^^ expected lifetime parameter\n    |\n-   = note: assuming a `'static` lifetime...\n help: indicate the anonymous lifetime\n    |\n LL | impl MyTrait for Foo<'_> {"}, {"sha": "74631a0378601213168cfd4f5834a93586c1d2be", "filename": "tests/ui/impl-header-lifetime-elision/trait-elided.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fimpl-header-lifetime-elision%2Ftrait-elided.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fimpl-header-lifetime-elision%2Ftrait-elided.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-header-lifetime-elision%2Ftrait-elided.stderr?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -4,7 +4,6 @@ error[E0726]: implicit elided lifetime not allowed here\n LL | impl MyTrait for u32 {}\n    |      ^^^^^^^ expected lifetime parameter\n    |\n-   = note: assuming a `'static` lifetime...\n help: indicate the anonymous lifetime\n    |\n LL | impl MyTrait<'_> for u32 {}"}, {"sha": "c4fcaabe4461907b642ebe77eb2ca24d1da7bac1", "filename": "tests/ui/impl-trait/in-trait/signature-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.stderr?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -2,12 +2,12 @@ error: `impl` item signature doesn't match `trait` item signature\n   --> $DIR/signature-mismatch.rs:15:5\n    |\n LL |     fn async_fn(&self, buff: &[u8]) -> impl Future<Output = Vec<u8>>;\n-   |     ----------------------------------------------------------------- expected `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + 'static`\n+   |     ----------------------------------------------------------------- expected `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + '3`\n ...\n LL |     fn async_fn<'a>(&self, buff: &'a [u8]) -> impl Future<Output = Vec<u8>> + 'a {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + '2`\n    |\n-   = note: expected signature `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + 'static`\n+   = note: expected signature `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + '3`\n               found signature `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + '2`\n    = help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n    = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output"}, {"sha": "a22e12c6d885b08a6f38c304d0445a32ac2b957e", "filename": "tests/ui/inference/issue-107090.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Finference%2Fissue-107090.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Finference%2Fissue-107090.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fissue-107090.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -2,9 +2,7 @@ use std::marker::PhantomData;\n struct Foo<'a, 'b, T>(PhantomData<(&'a (), &'b (), T)>)\n where\n     Foo<'short, 'out, T>: Convert<'a, 'b>;\n-    //~^ ERROR mismatched types\n-    //~^^ ERROR mismatched types\n-    //~^^^ ERROR use of undeclared lifetime name\n+    //~^ ERROR use of undeclared lifetime name\n     //~| ERROR use of undeclared lifetime name `'out`\n \n trait Convert<'a, 'b>: Sized {\n@@ -13,19 +11,15 @@ trait Convert<'a, 'b>: Sized {\n impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n     //~^ ERROR use of undeclared lifetime name\n     //~^^ ERROR use of undeclared lifetime name `'out`\n-    //~| ERROR cannot infer an appropriate lifetime for lifetime parameter\n     fn cast(&'long self) -> &'short Foo<'short, 'out, T> {\n         //~^ ERROR use of undeclared lifetime name\n-        //~| ERROR cannot infer an appropriate lifetime for lifetime parameter\n         self\n     }\n }\n \n fn badboi<'in_, 'out, T>(x: Foo<'in_, 'out, T>, sadness: &'in_ Foo<'short, 'out, T>) -> &'out T {\n     //~^ ERROR use of undeclared lifetime name\n-    //~^^ ERROR incompatible lifetime on type\n-    //~| ERROR `x` has lifetime `'in_` but it needs to satisfy a `'static` lifetime requirement\n-    sadness.cast()\n+    sadness.cast() //~ ERROR mismatched types\n }\n \n fn main() {}"}, {"sha": "6233b629ad6c6d50e5b85582a246b86678583a13", "filename": "tests/ui/inference/issue-107090.stderr", "status": "modified", "additions": 13, "deletions": 102, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Finference%2Fissue-107090.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Finference%2Fissue-107090.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fissue-107090.stderr?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -30,21 +30,21 @@ LL | struct Foo<'out, 'a, 'b, T>(PhantomData<(&'a (), &'b (), T)>)\n    |            +++++\n \n error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/issue-107090.rs:13:47\n+  --> $DIR/issue-107090.rs:11:47\n    |\n LL | impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n    |      -                                        ^^ undeclared lifetime\n    |      |\n    |      help: consider introducing lifetime `'b` here: `'b,`\n \n error[E0261]: use of undeclared lifetime name `'out`\n-  --> $DIR/issue-107090.rs:13:67\n+  --> $DIR/issue-107090.rs:11:67\n    |\n LL | impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n    |      - help: consider introducing lifetime `'out` here: `'out,`   ^^^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'out`\n-  --> $DIR/issue-107090.rs:17:49\n+  --> $DIR/issue-107090.rs:14:49\n    |\n LL |     fn cast(&'long self) -> &'short Foo<'short, 'out, T> {\n    |                                                 ^^^^ undeclared lifetime\n@@ -59,115 +59,26 @@ LL | impl<'out, 'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'ou\n    |      +++++\n \n error[E0261]: use of undeclared lifetime name `'short`\n-  --> $DIR/issue-107090.rs:24:68\n+  --> $DIR/issue-107090.rs:20:68\n    |\n LL | fn badboi<'in_, 'out, T>(x: Foo<'in_, 'out, T>, sadness: &'in_ Foo<'short, 'out, T>) -> &'out T {\n    |           -                                                        ^^^^^^ undeclared lifetime\n    |           |\n    |           help: consider introducing lifetime `'short` here: `'short,`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-107090.rs:4:27\n-   |\n-LL |     Foo<'short, 'out, T>: Convert<'a, 'b>;\n-   |                           ^^^^^^^^^^^^^^^ lifetime mismatch\n-   |\n-   = note: expected trait `Convert<'static, 'static>`\n-              found trait `Convert<'a, 'b>`\n-note: the lifetime `'a` as defined here...\n-  --> $DIR/issue-107090.rs:2:12\n-   |\n-LL | struct Foo<'a, 'b, T>(PhantomData<(&'a (), &'b (), T)>)\n-   |            ^^\n-   = note: ...does not necessarily outlive the static lifetime\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-107090.rs:4:27\n-   |\n-LL |     Foo<'short, 'out, T>: Convert<'a, 'b>;\n-   |                           ^^^^^^^^^^^^^^^ lifetime mismatch\n-   |\n-   = note: expected trait `Convert<'static, 'static>`\n-              found trait `Convert<'a, 'b>`\n-note: the lifetime `'b` as defined here...\n-  --> $DIR/issue-107090.rs:2:16\n-   |\n-LL | struct Foo<'a, 'b, T>(PhantomData<(&'a (), &'b (), T)>)\n-   |                ^^\n-   = note: ...does not necessarily outlive the static lifetime\n-\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'long` due to conflicting requirements\n-  --> $DIR/issue-107090.rs:13:55\n-   |\n-LL | impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n-   |                                                       ^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: first, the lifetime cannot outlive the lifetime `'short` as defined here...\n-  --> $DIR/issue-107090.rs:13:21\n-   |\n-LL | impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n-   |                     ^^^^^^\n-   = note: ...but the lifetime must also be valid for the static lifetime...\n-note: ...so that the types are compatible\n-  --> $DIR/issue-107090.rs:13:55\n-   |\n-LL | impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n-   |                                                       ^^^^^^^^^^^^^^^^^^^^\n-   = note: expected `Convert<'short, 'static>`\n-              found `Convert<'_, 'static>`\n-\n-error: incompatible lifetime on type\n-  --> $DIR/issue-107090.rs:24:29\n-   |\n-LL | fn badboi<'in_, 'out, T>(x: Foo<'in_, 'out, T>, sadness: &'in_ Foo<'short, 'out, T>) -> &'out T {\n-   |                             ^^^^^^^^^^^^^^^^^^\n-   |\n-note: because this has an unmet lifetime requirement\n-  --> $DIR/issue-107090.rs:4:27\n-   |\n-LL |     Foo<'short, 'out, T>: Convert<'a, 'b>;\n-   |                           ^^^^^^^^^^^^^^^ introduces a `'static` lifetime requirement\n-note: the lifetime `'out` as defined here...\n-  --> $DIR/issue-107090.rs:24:17\n-   |\n-LL | fn badboi<'in_, 'out, T>(x: Foo<'in_, 'out, T>, sadness: &'in_ Foo<'short, 'out, T>) -> &'out T {\n-   |                 ^^^^\n-note: ...does not necessarily outlive the static lifetime introduced by the compatible `impl`\n-  --> $DIR/issue-107090.rs:13:1\n-   |\n-LL | impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0759]: `x` has lifetime `'in_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/issue-107090.rs:24:29\n+  --> $DIR/issue-107090.rs:22:5\n    |\n LL | fn badboi<'in_, 'out, T>(x: Foo<'in_, 'out, T>, sadness: &'in_ Foo<'short, 'out, T>) -> &'out T {\n-   |                             ^^^^^^^^^^^^^^^^^^\n-   |                             |\n-   |                             this data with lifetime `'in_`...\n-   |                             ...is used and required to live as long as `'static` here\n-\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'long` due to conflicting requirements\n-  --> $DIR/issue-107090.rs:17:13\n-   |\n-LL |     fn cast(&'long self) -> &'short Foo<'short, 'out, T> {\n-   |             ^^^^^^^^^^^\n+   |                       - this type parameter                                             ------- expected `&'out T` because of return type\n+LL |\n+LL |     sadness.cast()\n+   |     ^^^^^^^^^^^^^^ expected `&T`, found `&Foo<'_, '_, T>`\n    |\n-note: first, the lifetime cannot outlive the lifetime `'short` as defined here...\n-  --> $DIR/issue-107090.rs:13:21\n-   |\n-LL | impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n-   |                     ^^^^^^\n-   = note: ...but the lifetime must also be valid for the static lifetime...\n-note: ...so that the types are compatible\n-  --> $DIR/issue-107090.rs:17:13\n-   |\n-LL |     fn cast(&'long self) -> &'short Foo<'short, 'out, T> {\n-   |             ^^^^^^^^^^^\n-   = note: expected `Convert<'short, 'static>`\n-              found `Convert<'_, 'static>`\n+   = note: expected reference `&'out T`\n+              found reference `&Foo<'_, '_, T>`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 7 previous errors\n \n-Some errors have detailed explanations: E0261, E0308, E0495, E0759.\n+Some errors have detailed explanations: E0261, E0308.\n For more information about an error, try `rustc --explain E0261`."}, {"sha": "26666782d2abc301ef424e205e0eebef5368d572", "filename": "tests/ui/issues/issue-10412.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fissues%2Fissue-10412.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fissues%2Fissue-10412.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-10412.stderr?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -46,7 +46,6 @@ error[E0726]: implicit elided lifetime not allowed here\n LL | impl<'self> Serializable<str> for &'self str {\n    |             ^^^^^^^^^^^^^^^^^ expected lifetime parameter\n    |\n-   = note: assuming a `'static` lifetime...\n help: indicate the anonymous lifetime\n    |\n LL | impl<'self> Serializable<'_, str> for &'self str {"}, {"sha": "30afcecf827e5562bda0267177bdba05a0813435", "filename": "tests/ui/lifetimes/issue-26638.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Flifetimes%2Fissue-26638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Flifetimes%2Fissue-26638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-26638.stderr?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -40,9 +40,9 @@ error[E0308]: mismatched types\n LL | fn parse_type(iter: Box<dyn Iterator<Item=&str>+'static>) -> &str { iter.next() }\n    |                                                              ----   ^^^^^^^^^^^ expected `&str`, found `Option<&str>`\n    |                                                              |\n-   |                                                              expected `&'static str` because of return type\n+   |                                                              expected `&str` because of return type\n    |\n-   = note: expected reference `&'static str`\n+   = note: expected reference `&str`\n                    found enum `Option<&str>`\n \n error[E0061]: this function takes 1 argument but 0 arguments were supplied"}, {"sha": "41116d4ea617037000c074a6fd8cbdc95559fc8e", "filename": "tests/ui/lifetimes/issue-69314.fixed", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Flifetimes%2Fissue-69314.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Flifetimes%2Fissue-69314.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-69314.fixed?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -0,0 +1,22 @@\n+// run-rustfix\n+// edition:2021\n+#![allow(dead_code, unused_mut, unused_variables)]\n+struct A {}\n+struct Msg<'a> {\n+    s: &'a [i32],\n+}\n+impl A {\n+    async fn g(buf: &[i32]) -> Msg<'_> {\n+        Msg { s: &buf[0..1] }\n+    }\n+    async fn f() {\n+        let mut buf = [0; 512];\n+        let m2 = &buf[..]; //~ ERROR `buf` does not live long enough\n+        let m = Self::g(m2).await;\n+        Self::f2(m).await;\n+    }\n+    async fn f2(m: Msg<'_>) {}\n+    //~^ ERROR implicit elided lifetime not allowed here\n+}\n+\n+fn main() {}"}, {"sha": "17445341eb689a4429d7cfc0ee13b2434af2f5b3", "filename": "tests/ui/lifetimes/issue-69314.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Flifetimes%2Fissue-69314.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Flifetimes%2Fissue-69314.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-69314.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -0,0 +1,22 @@\n+// run-rustfix\n+// edition:2021\n+#![allow(dead_code, unused_mut, unused_variables)]\n+struct A {}\n+struct Msg<'a> {\n+    s: &'a [i32],\n+}\n+impl A {\n+    async fn g(buf: &[i32]) -> Msg<'_> {\n+        Msg { s: &buf[0..1] }\n+    }\n+    async fn f() {\n+        let mut buf = [0; 512];\n+        let m2 = &buf[..]; //~ ERROR `buf` does not live long enough\n+        let m = Self::g(m2).await;\n+        Self::f2(m).await;\n+    }\n+    async fn f2(m: Msg) {}\n+    //~^ ERROR implicit elided lifetime not allowed here\n+}\n+\n+fn main() {}"}, {"sha": "7ae6789285baa9f7f3b5ca7fd3baab41456c309d", "filename": "tests/ui/lifetimes/issue-69314.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Flifetimes%2Fissue-69314.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Flifetimes%2Fissue-69314.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-69314.stderr?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -0,0 +1,26 @@\n+error[E0726]: implicit elided lifetime not allowed here\n+  --> $DIR/issue-69314.rs:18:20\n+   |\n+LL |     async fn f2(m: Msg) {}\n+   |                    ^^^ expected lifetime parameter\n+   |\n+help: indicate the anonymous lifetime\n+   |\n+LL |     async fn f2(m: Msg<'_>) {}\n+   |                       ++++\n+\n+error[E0597]: `buf` does not live long enough\n+  --> $DIR/issue-69314.rs:14:19\n+   |\n+LL |         let m2 = &buf[..];\n+   |                   ^^^ borrowed value does not live long enough\n+LL |         let m = Self::g(m2).await;\n+   |                 ----------- argument requires that `buf` is borrowed for `'static`\n+LL |         Self::f2(m).await;\n+LL |     }\n+   |     - `buf` dropped here while still borrowed\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0597, E0726.\n+For more information about an error, try `rustc --explain E0597`."}, {"sha": "1c122f42e592262824839e4eac17f6801b59eb04", "filename": "tests/ui/lifetimes/unusual-rib-combinations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -23,6 +23,6 @@ fn c<T = u8()>() {}\n // Elided lifetime in path in ConstGeneric\n fn d<const C: S>() {}\n //~^ ERROR missing lifetime specifier\n-//~| ERROR `S<'static>` is forbidden as the type of a const generic parameter\n+//~| ERROR `S<'_>` is forbidden as the type of a const generic parameter\n \n fn main() {}"}, {"sha": "68f4fce0178e09feed686968f6e4111c4036a9d9", "filename": "tests/ui/lifetimes/unusual-rib-combinations.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.stderr?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -46,7 +46,7 @@ LL | fn a() -> [u8; foo::()] {\n    = note: expected type `usize`\n            found fn item `fn() {foo}`\n \n-error: `S<'static>` is forbidden as the type of a const generic parameter\n+error: `S<'_>` is forbidden as the type of a const generic parameter\n   --> $DIR/unusual-rib-combinations.rs:24:15\n    |\n LL | fn d<const C: S>() {}"}, {"sha": "b523182309959dba1864c0a83917aeb1f98ac91b", "filename": "tests/ui/mismatched_types/issue-74918-missing-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fmismatched_types%2Fissue-74918-missing-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fmismatched_types%2Fissue-74918-missing-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fissue-74918-missing-lifetime.stderr?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -16,9 +16,9 @@ LL |     fn next(&mut self) -> Option<IteratorChunk<T, S>> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&'1 mut ChunkingIterator<T, S>) -> Option<IteratorChunk<'1, T, S>>`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n-   = note: expected `fn(&'1 mut ChunkingIterator<T, S>) -> Option<IteratorChunk<'static, T, S>>`\n+   = note: expected `fn(&'1 mut ChunkingIterator<T, S>) -> Option<IteratorChunk<'2, T, S>>`\n    |\n-   = note: expected signature `fn(&'1 mut ChunkingIterator<T, S>) -> Option<IteratorChunk<'static, T, S>>`\n+   = note: expected signature `fn(&'1 mut ChunkingIterator<T, S>) -> Option<IteratorChunk<'2, T, S>>`\n               found signature `fn(&'1 mut ChunkingIterator<T, S>) -> Option<IteratorChunk<'1, T, S>>`\n    = help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n    = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output"}, {"sha": "cdd8f6f1976a5b527cc9120a254ad68720f08d1e", "filename": "tests/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -4,7 +4,7 @@ fn main() {\n     let y = 42;\n     let x = wrong_generic(&y);\n     let z: i32 = x;\n-    //~^ ERROR expected generic type parameter, found `&'static i32\n+    //~^ ERROR expected generic type parameter, found `&i32`\n }\n \n type WrongGeneric<T> = impl 'static;"}, {"sha": "fa79e51e9f79f158a96edf23aefba794d00fd5bb", "filename": "tests/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -4,7 +4,7 @@ error: at least one trait must be specified\n LL | type WrongGeneric<T> = impl 'static;\n    |                        ^^^^^^^^^^^^\n \n-error[E0792]: expected generic type parameter, found `&'static i32`\n+error[E0792]: expected generic type parameter, found `&i32`\n   --> $DIR/generic_type_does_not_live_long_enough.rs:6:18\n    |\n LL |     let z: i32 = x;"}, {"sha": "0be5127dcc4daa89ef16a3f76fe9eb38aa441097", "filename": "tests/ui/wf/wf-in-foreign-fn-decls-issue-80468.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.rs?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -13,5 +13,5 @@ pub struct Ref<'a>(&'a u8);\n impl Trait for Ref {} //~ ERROR:  implicit elided lifetime not allowed here\n \n extern \"C\" {\n-    pub fn repro(_: Wrapper<Ref>); //~ ERROR: incompatible lifetime on type\n+    pub fn repro(_: Wrapper<Ref>);\n }"}, {"sha": "b10856571a61cbad6811e0ab535f236e6e62dbe3", "filename": "tests/ui/wf/wf-in-foreign-fn-decls-issue-80468.stderr", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30cf7a3f51d6a25006077d3e9ec3222de3104b8d/tests%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.stderr?ref=30cf7a3f51d6a25006077d3e9ec3222de3104b8d", "patch": "@@ -4,34 +4,11 @@ error[E0726]: implicit elided lifetime not allowed here\n LL | impl Trait for Ref {}\n    |                ^^^ expected lifetime parameter\n    |\n-   = note: assuming a `'static` lifetime...\n help: indicate the anonymous lifetime\n    |\n LL | impl Trait for Ref<'_> {}\n    |                   ++++\n \n-error: incompatible lifetime on type\n-  --> $DIR/wf-in-foreign-fn-decls-issue-80468.rs:16:21\n-   |\n-LL |     pub fn repro(_: Wrapper<Ref>);\n-   |                     ^^^^^^^^^^^^\n-   |\n-note: because this has an unmet lifetime requirement\n-  --> $DIR/wf-in-foreign-fn-decls-issue-80468.rs:8:23\n-   |\n-LL | pub struct Wrapper<T: Trait>(T);\n-   |                       ^^^^^ introduces a `'static` lifetime requirement\n-note: the anonymous lifetime as defined here...\n-  --> $DIR/wf-in-foreign-fn-decls-issue-80468.rs:16:29\n-   |\n-LL |     pub fn repro(_: Wrapper<Ref>);\n-   |                             ^^^\n-note: ...does not necessarily outlive the static lifetime introduced by the compatible `impl`\n-  --> $DIR/wf-in-foreign-fn-decls-issue-80468.rs:13:1\n-   |\n-LL | impl Trait for Ref {}\n-   | ^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0726`."}]}