{"sha": "f2b11f30b2946119c23594bc2b3bec3c38d3ae9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyYjExZjMwYjI5NDYxMTljMjM1OTRiYzJiM2JlYzNjMzhkM2FlOWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-03T18:01:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-03T18:01:29Z"}, "message": "Auto merge of #46393 - kennytm:45861-step-2-3-make-tools-job-not-fail-fast, r=alexcrichton\n\n[auto-toolstate][2+3/8] Move external tools tests into its own job with --no-fail-fast\n\nThis PR performs these  things:\n\n1. The `aux` job now performs \"cargotest\" and \"pretty\" tests. The clippy/rustfmt/rls/miri tests are moved into its own job.\n2. These tests are run with `--no-fail-fast`, so that we can get the maximum number of failures of all tools from a single CI run.\n3. The test results are stored into a JSON file, ready to be uploaded in the future.\n\nThis is step 2 and 3/8 of automatic management of broken tools #45861.", "tree": {"sha": "5bc77268063c3d70c43655e3e3ecc5dea1ccd12f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bc77268063c3d70c43655e3e3ecc5dea1ccd12f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a", "html_url": "https://github.com/rust-lang/rust/commit/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d11e519931ba6ac8feec02724fa60eabb77eb2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d11e519931ba6ac8feec02724fa60eabb77eb2d", "html_url": "https://github.com/rust-lang/rust/commit/0d11e519931ba6ac8feec02724fa60eabb77eb2d"}, {"sha": "183964505bf6775c90da5d034cc8951cd46d7c10", "url": "https://api.github.com/repos/rust-lang/rust/commits/183964505bf6775c90da5d034cc8951cd46d7c10", "html_url": "https://github.com/rust-lang/rust/commit/183964505bf6775c90da5d034cc8951cd46d7c10"}], "stats": {"total": 152, "additions": 124, "deletions": 28}, "files": [{"sha": "40122df2d9441bcea51f7e0fee4cc9e85b6479ce", "filename": ".travis.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=f2b11f30b2946119c23594bc2b3bec3c38d3ae9a", "patch": "@@ -168,7 +168,7 @@ matrix:\n       if: branch = auto\n     - env: IMAGE=x86_64-gnu-aux\n       if: branch = auto\n-    - env: IMAGE=x86_64-gnu-cargotest\n+    - env: IMAGE=x86_64-gnu-tools\n       if: branch = auto\n     - env: IMAGE=x86_64-gnu-debug\n       if: branch = auto"}, {"sha": "b8fd479d0f149b4415e3453b9a0e7cace775113b", "filename": "appveyor.yml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=f2b11f30b2946119c23594bc2b3bec3c38d3ae9a", "patch": "@@ -25,10 +25,10 @@ environment:\n     RUST_CHECK_TARGET: check-aux\n     RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc\n \n-  # MSVC cargotest\n+  # MSVC tools tests\n   - MSYS_BITS: 64\n-    SCRIPT: python x.py test src/tools/cargotest\n-    RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc\n+    SCRIPT: src/ci/docker/x86_64-gnu-tools/checktools.sh x.py toolstates.json\n+    RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --save-toolstates=toolstates.json\n \n   # 32/64-bit MinGW builds.\n   #"}, {"sha": "18c1f160c03d28eb1cc1cbea804e89551fef51cd", "filename": "config.toml.example", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=f2b11f30b2946119c23594bc2b3bec3c38d3ae9a", "patch": "@@ -301,6 +301,10 @@\n # As a side-effect also generates MIR for all libraries.\n #test-miri = false\n \n+# After building or testing extended tools (e.g. clippy and rustfmt), append the\n+# result (broken, compiling, testing) into this JSON file.\n+#save-toolstates = \"/path/to/toolstates.json\"\n+\n # =============================================================================\n # Options for specific targets\n #"}, {"sha": "8f3133bc9d81bd5222fa6be1df1d0697fcd01015", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=f2b11f30b2946119c23594bc2b3bec3c38d3ae9a", "patch": "@@ -65,19 +65,21 @@ impl fmt::Display for TestKind {\n     }\n }\n \n-fn try_run_expecting(build: &Build, cmd: &mut Command, expect: BuildExpectation) {\n+fn try_run_expecting(build: &Build, cmd: &mut Command, expect: BuildExpectation) -> bool {\n     if !build.fail_fast {\n         if !build.try_run(cmd, expect) {\n             let mut failures = build.delayed_failures.borrow_mut();\n             failures.push(format!(\"{:?}\", cmd));\n+            return false;\n         }\n     } else {\n         build.run_expecting(cmd, expect);\n     }\n+    true\n }\n \n fn try_run(build: &Build, cmd: &mut Command) {\n-    try_run_expecting(build, cmd, BuildExpectation::None)\n+    try_run_expecting(build, cmd, BuildExpectation::None);\n }\n \n fn try_run_quiet(build: &Build, cmd: &mut Command) {\n@@ -257,11 +259,13 @@ impl Step for Rls {\n \n         builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-        try_run_expecting(\n+        if try_run_expecting(\n             build,\n             &mut cargo,\n             builder.build.config.toolstate.rls.passes(ToolState::Testing),\n-        );\n+        ) {\n+            build.save_toolstate(\"rls\", ToolState::Testing);\n+        }\n     }\n }\n \n@@ -305,11 +309,13 @@ impl Step for Rustfmt {\n \n         builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-        try_run_expecting(\n+        if try_run_expecting(\n             build,\n             &mut cargo,\n             builder.build.config.toolstate.rustfmt.passes(ToolState::Testing),\n-        );\n+        ) {\n+            build.save_toolstate(\"rustfmt\", ToolState::Testing);\n+        }\n     }\n }\n \n@@ -354,11 +360,13 @@ impl Step for Miri {\n \n             builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-            try_run_expecting(\n+            if try_run_expecting(\n                 build,\n                 &mut cargo,\n                 builder.build.config.toolstate.miri.passes(ToolState::Testing),\n-            );\n+            ) {\n+                build.save_toolstate(\"miri\", ToolState::Testing);\n+            }\n         } else {\n             eprintln!(\"failed to test miri: could not build\");\n         }\n@@ -411,11 +419,13 @@ impl Step for Clippy {\n \n             builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-            try_run_expecting(\n+            if try_run_expecting(\n                 build,\n                 &mut cargo,\n                 builder.build.config.toolstate.clippy.passes(ToolState::Testing),\n-            );\n+            ) {\n+                build.save_toolstate(\"clippy-driver\", ToolState::Testing);\n+            }\n         } else {\n             eprintln!(\"failed to test clippy: could not build\");\n         }"}, {"sha": "9dd37d8e4560cd8681576d5a62c84e280f697a70", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=f2b11f30b2946119c23594bc2b3bec3c38d3ae9a", "patch": "@@ -112,6 +112,8 @@ pub struct Config {\n     pub channel: String,\n     pub quiet_tests: bool,\n     pub test_miri: bool,\n+    pub save_toolstates: Option<PathBuf>,\n+\n     // Fallback musl-root for all targets\n     pub musl_root: Option<PathBuf>,\n     pub prefix: Option<PathBuf>,\n@@ -279,6 +281,7 @@ struct Rust {\n     dist_src: Option<bool>,\n     quiet_tests: Option<bool>,\n     test_miri: Option<bool>,\n+    save_toolstates: Option<String>,\n }\n \n /// TOML representation of how each build target is configured.\n@@ -473,6 +476,7 @@ impl Config {\n             set(&mut config.test_miri, rust.test_miri);\n             config.rustc_default_linker = rust.default_linker.clone();\n             config.musl_root = rust.musl_root.clone().map(PathBuf::from);\n+            config.save_toolstates = rust.save_toolstates.clone().map(PathBuf::from);\n \n             match rust.codegen_units {\n                 Some(0) => config.rust_codegen_units = Some(num_cpus::get() as u32),"}, {"sha": "48ca2838e4febd9001244ef7231174420043bb9b", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=f2b11f30b2946119c23594bc2b3bec3c38d3ae9a", "patch": "@@ -77,6 +77,7 @@ def v(*args):\n o(\"debuginfo-lines\", \"rust.debuginfo-lines\", \"build with line number debugger metadata\")\n o(\"debuginfo-only-std\", \"rust.debuginfo-only-std\", \"build only libstd with debugging information\")\n o(\"debug-jemalloc\", \"rust.debug-jemalloc\", \"build jemalloc with --enable-debug --enable-fill\")\n+v(\"save-toolstates\", \"rust.save-toolstates\", \"save build and test status of external tools into this file\")\n \n v(\"prefix\", \"install.prefix\", \"set installation prefix\")\n v(\"localstatedir\", \"install.localstatedir\", \"local state directory\")"}, {"sha": "2f00c313a0c30268067b50fff2fc66cc572bb3a9", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=f2b11f30b2946119c23594bc2b3bec3c38d3ae9a", "patch": "@@ -190,6 +190,7 @@ mod job {\n pub use config::Config;\n use flags::Subcommand;\n use cache::{Interned, INTERNER};\n+use toolstate::ToolState;\n \n /// A structure representing a Rust compiler.\n ///\n@@ -874,6 +875,30 @@ impl Build {\n         }\n     }\n \n+    /// Updates the actual toolstate of a tool.\n+    ///\n+    /// The toolstates are saved to the file specified by the key\n+    /// `rust.save-toolstates` in `config.toml`. If unspecified, nothing will be\n+    /// done. The file is updated immediately after this function completes.\n+    pub fn save_toolstate(&self, tool: &str, state: ToolState) {\n+        use std::io::{Seek, SeekFrom};\n+\n+        if let Some(ref path) = self.config.save_toolstates {\n+            let mut file = t!(fs::OpenOptions::new()\n+                .create(true)\n+                .read(true)\n+                .write(true)\n+                .open(path));\n+\n+            let mut current_toolstates: HashMap<Box<str>, ToolState> =\n+                serde_json::from_reader(&mut file).unwrap_or_default();\n+            current_toolstates.insert(tool.into(), state);\n+            t!(file.seek(SeekFrom::Start(0)));\n+            t!(file.set_len(0));\n+            t!(serde_json::to_writer(file, &current_toolstates));\n+        }\n+    }\n+\n     /// Get a list of crates from a root crate.\n     ///\n     /// Returns Vec<(crate, path to crate, is_root_crate)>"}, {"sha": "925a361f0b22e010eb0e4fc034330c44806ac83c", "filename": "src/bootstrap/mk/Makefile.in", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/src%2Fbootstrap%2Fmk%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/src%2Fbootstrap%2Fmk%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmk%2FMakefile.in?ref=f2b11f30b2946119c23594bc2b3bec3c38d3ae9a", "patch": "@@ -53,9 +53,7 @@ check:\n check-aux:\n \t$(Q)$(BOOTSTRAP) test \\\n \t\tsrc/tools/cargo \\\n-\t\tsrc/tools/rls \\\n-\t\tsrc/tools/rustfmt \\\n-\t\tsrc/tools/miri \\\n+\t\tsrc/tools/cargotest \\\n \t\tsrc/test/pretty \\\n \t\tsrc/test/run-pass/pretty \\\n \t\tsrc/test/run-fail/pretty \\"}, {"sha": "fa9bdc43c378cb69c3346a3c4df278c421f8b5c8", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=f2b11f30b2946119c23594bc2b3bec3c38d3ae9a", "patch": "@@ -115,7 +115,19 @@ impl Step for ToolBuild {\n         println!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target);\n \n         let mut cargo = prepare_tool_cargo(builder, compiler, target, \"build\", path);\n-        if !build.try_run(&mut cargo, expectation) {\n+        let is_expected = build.try_run(&mut cargo, expectation);\n+        // If the expectation is \"Failing\", `try_run` returning true actually\n+        // means a build-failure is successfully observed, i.e. the tool is\n+        // broken. Thus the XOR here.\n+        // Sorry for the complicated logic, but we can remove this expectation\n+        // logic after #45861 is fully fixed.\n+        build.save_toolstate(tool, if is_expected ^ (expectation == BuildExpectation::Failing) {\n+            ToolState::Compiling\n+        } else {\n+            ToolState::Broken\n+        });\n+\n+        if !is_expected {\n             if expectation == BuildExpectation::None {\n                 exit(1);\n             } else {"}, {"sha": "00dbcc86af4d18c3b1ee3bfedcf2a2cecf929aa2", "filename": "src/bootstrap/toolstate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/src%2Fbootstrap%2Ftoolstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/src%2Fbootstrap%2Ftoolstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftoolstate.rs?ref=f2b11f30b2946119c23594bc2b3bec3c38d3ae9a", "patch": "@@ -10,7 +10,7 @@\n \n use build_helper::BuildExpectation;\n \n-#[derive(Copy, Clone, Debug, Deserialize, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, Deserialize, Serialize, PartialEq, Eq)]\n /// Whether a tool can be compiled, tested or neither\n pub enum ToolState {\n     /// The tool compiles successfully, but the test suite fails"}, {"sha": "62c55f480673430e9eacde547a071275d2a2c448", "filename": "src/ci/docker/x86_64-gnu-aux/Dockerfile", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile?ref=f2b11f30b2946119c23594bc2b3bec3c38d3ae9a", "patch": "@@ -12,7 +12,11 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   libssl-dev \\\n   sudo \\\n   xz-utils \\\n-  pkg-config\n+  pkg-config \\\n+  libgl1-mesa-dev \\\n+  llvm-dev \\\n+  libfreetype6-dev \\\n+  libexpat1-dev\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh"}, {"sha": "fffad1c42dfd80d9ac34de825a55b0bc4c08de50", "filename": "src/ci/docker/x86_64-gnu-tools/Dockerfile", "status": "renamed", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2FDockerfile?ref=f2b11f30b2946119c23594bc2b3bec3c38d3ae9a", "patch": "@@ -12,14 +12,12 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   libssl-dev \\\n   sudo \\\n   xz-utils \\\n-  pkg-config \\\n-  libgl1-mesa-dev \\\n-  llvm-dev \\\n-  libfreetype6-dev \\\n-  libexpat1-dev\n+  pkg-config\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n-ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu\n-ENV SCRIPT python2.7 ../x.py test src/tools/cargotest\n+COPY x86_64-gnu-tools/checktools.sh /tmp/\n+\n+ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu --save-toolstates=/tmp/toolstates.json\n+ENV SCRIPT /tmp/checktools.sh ../x.py /tmp/toolstates.json", "previous_filename": "src/ci/docker/x86_64-gnu-cargotest/Dockerfile"}, {"sha": "bf39bc28a67eac2e293a03143458ea172b7ef86f", "filename": "src/ci/docker/x86_64-gnu-tools/checktools.sh", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh", "raw_url": "https://github.com/rust-lang/rust/raw/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh?ref=f2b11f30b2946119c23594bc2b3bec3c38d3ae9a", "patch": "@@ -0,0 +1,39 @@\n+#!/bin/sh\n+\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -eu\n+\n+X_PY=\"$1\"\n+TOOLSTATE_FILE=\"$2\"\n+\n+touch \"$TOOLSTATE_FILE\"\n+\n+set +e\n+python2.7 \"$X_PY\" test --no-fail-fast \\\n+    src/tools/rls \\\n+    src/tools/rustfmt \\\n+    src/tools/miri \\\n+    src/tools/clippy\n+TEST_RESULT=$?\n+set -e\n+\n+# FIXME: Upload this file to the repository.\n+cat \"$TOOLSTATE_FILE\"\n+\n+# FIXME: After we can properly inform dev-tool maintainers about failure,\n+#        comment out the `exit 0` below.\n+if [ \"$RUST_RELEASE_CHANNEL\" = nightly ]; then\n+    # exit 0\n+    true\n+fi\n+\n+exit $TEST_RESULT"}, {"sha": "dab385c09649cd5a4b54cff972b93b1b2ff8ab0f", "filename": "src/ci/run.sh", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=f2b11f30b2946119c23594bc2b3bec3c38d3ae9a", "patch": "@@ -42,8 +42,9 @@ fi\n #\n # FIXME: need a scheme for changing this `nightly` value to `beta` and `stable`\n #        either automatically or manually.\n+export RUST_RELEASE_CHANNEL=nightly\n if [ \"$DEPLOY$DEPLOY_ALT\" != \"\" ]; then\n-  RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --release-channel=nightly\"\n+  RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --release-channel=$RUST_RELEASE_CHANNEL\"\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-llvm-static-stdcpp\"\n \n   if [ \"$NO_LLVM_ASSERTIONS\" = \"1\" ]; then"}]}