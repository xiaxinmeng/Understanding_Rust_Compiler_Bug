{"sha": "6afbe3eca92da175a197cdd3d75cf9c623bf53eb", "node_id": "C_kwDOAAsO6NoAKDZhZmJlM2VjYTkyZGExNzVhMTk3Y2RkM2Q3NWNmOWM2MjNiZjUzZWI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-10T13:26:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-10T13:26:09Z"}, "message": "Rollup merge of #101631 - rust-lang:notriddle/duplicate-module, r=GuillaumeGomez\n\nrustdoc: avoid cleaning modules with duplicate names\n\nFixes #83375", "tree": {"sha": "eaf4c9d7abde9b9787aad0b782ced4697d03a2c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eaf4c9d7abde9b9787aad0b782ced4697d03a2c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6afbe3eca92da175a197cdd3d75cf9c623bf53eb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjHJBxCRBK7hj4Ov3rIwAArCEIAJ2AUmLsnIDxJs6gQuP8jklI\neNojdMMMMqlaqialwQhorXEbFSe5Sty+hXPyaDYTttTVVDwGM3EyxuPptmjpQktz\n9uvYFOYYnfrmmGIpfvWBBHZlrAq9R5Esx0yAFdPv5BP1hG+2gl8yM3bDgu4S0cZd\nxzt4Mjh1/1a2TpbORSkIWqLSfmi/pDXeIMlC5hfDs8DGfefluUJd36Zukn7mCSQl\nnvkd98fkCiDEE+yVe5uB9hClpePI1RlA9KYAhCoS4UpFls/1uQBjMTQhSEraRHCD\nZAZANaKZuo1SkcCDlIyM4JPQwH8+zaL1WNzICuKcc5Znna7FRlHjA2eHIuxmsYE=\n=hlAZ\n-----END PGP SIGNATURE-----\n", "payload": "tree eaf4c9d7abde9b9787aad0b782ced4697d03a2c8\nparent f1412a665f6c3f04fba0f192d9de4c12d823f9f3\nparent d92d642707c845b88a0618135ad993723a30c7e2\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1662816369 +0530\ncommitter GitHub <noreply@github.com> 1662816369 +0530\n\nRollup merge of #101631 - rust-lang:notriddle/duplicate-module, r=GuillaumeGomez\n\nrustdoc: avoid cleaning modules with duplicate names\n\nFixes #83375\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6afbe3eca92da175a197cdd3d75cf9c623bf53eb", "html_url": "https://github.com/rust-lang/rust/commit/6afbe3eca92da175a197cdd3d75cf9c623bf53eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6afbe3eca92da175a197cdd3d75cf9c623bf53eb/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1412a665f6c3f04fba0f192d9de4c12d823f9f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1412a665f6c3f04fba0f192d9de4c12d823f9f3", "html_url": "https://github.com/rust-lang/rust/commit/f1412a665f6c3f04fba0f192d9de4c12d823f9f3"}, {"sha": "d92d642707c845b88a0618135ad993723a30c7e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d92d642707c845b88a0618135ad993723a30c7e2", "html_url": "https://github.com/rust-lang/rust/commit/d92d642707c845b88a0618135ad993723a30c7e2"}], "stats": {"total": 169, "additions": 164, "deletions": 5}, "files": [{"sha": "bca3f4db4a85460c0f686fa3baf3b7f24726365d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6afbe3eca92da175a197cdd3d75cf9c623bf53eb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6afbe3eca92da175a197cdd3d75cf9c623bf53eb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6afbe3eca92da175a197cdd3d75cf9c623bf53eb", "patch": "@@ -50,14 +50,23 @@ pub(crate) fn clean_doc_module<'tcx>(doc: &DocModule<'tcx>, cx: &mut DocContext<\n     let mut inserted = FxHashSet::default();\n     items.extend(doc.foreigns.iter().map(|(item, renamed)| {\n         let item = clean_maybe_renamed_foreign_item(cx, item, *renamed);\n-        if let Some(name) = item.name {\n+        if let Some(name) = item.name && !item.attrs.lists(sym::doc).has_word(sym::hidden) {\n             inserted.insert((item.type_(), name));\n         }\n         item\n     }));\n-    items.extend(doc.mods.iter().map(|x| {\n-        inserted.insert((ItemType::Module, x.name));\n-        clean_doc_module(x, cx)\n+    items.extend(doc.mods.iter().filter_map(|x| {\n+        if !inserted.insert((ItemType::Module, x.name)) {\n+            return None;\n+        }\n+        let item = clean_doc_module(x, cx);\n+        if item.attrs.lists(sym::doc).has_word(sym::hidden) {\n+            // Hidden modules are stripped at a later stage.\n+            // If a hidden module has the same name as a visible one, we want\n+            // to keep both of them around.\n+            inserted.remove(&(ItemType::Module, x.name));\n+        }\n+        Some(item)\n     }));\n \n     // Split up imports from all other items.\n@@ -72,7 +81,7 @@ pub(crate) fn clean_doc_module<'tcx>(doc: &DocModule<'tcx>, cx: &mut DocContext<\n         }\n         let v = clean_maybe_renamed_item(cx, item, *renamed);\n         for item in &v {\n-            if let Some(name) = item.name {\n+            if let Some(name) = item.name && !item.attrs.lists(sym::doc).has_word(sym::hidden) {\n                 inserted.insert((item.type_(), name));\n             }\n         }"}, {"sha": "c27ac0ac40e1dbe200e196510df111b12522da1e", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6afbe3eca92da175a197cdd3d75cf9c623bf53eb/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6afbe3eca92da175a197cdd3d75cf9c623bf53eb/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=6afbe3eca92da175a197cdd3d75cf9c623bf53eb", "patch": "@@ -164,8 +164,20 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         self.inside_public_path &= self.cx.tcx.visibility(def_id).is_public();\n         for &i in m.item_ids {\n             let item = self.cx.tcx.hir().item(i);\n+            if matches!(item.kind, hir::ItemKind::Use(_, hir::UseKind::Glob)) {\n+                continue;\n+            }\n             self.visit_item(item, None, &mut om);\n         }\n+        for &i in m.item_ids {\n+            let item = self.cx.tcx.hir().item(i);\n+            // To match the way import precedence works, visit glob imports last.\n+            // Later passes in rustdoc will de-duplicate by name and kind, so if glob-\n+            // imported items appear last, then they'll be the ones that get discarded.\n+            if matches!(item.kind, hir::ItemKind::Use(_, hir::UseKind::Glob)) {\n+                self.visit_item(item, None, &mut om);\n+            }\n+        }\n         self.inside_public_path = orig_inside_public_path;\n         om\n     }"}, {"sha": "5b786cf53f2987d5e5ead342f6f1af895b2e133a", "filename": "src/test/rustdoc/glob-shadowing-const.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6afbe3eca92da175a197cdd3d75cf9c623bf53eb/src%2Ftest%2Frustdoc%2Fglob-shadowing-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6afbe3eca92da175a197cdd3d75cf9c623bf53eb/src%2Ftest%2Frustdoc%2Fglob-shadowing-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fglob-shadowing-const.rs?ref=6afbe3eca92da175a197cdd3d75cf9c623bf53eb", "patch": "@@ -0,0 +1,20 @@\n+// https://github.com/rust-lang/rust/pull/83872#issuecomment-820101008\n+#![crate_name=\"foo\"]\n+\n+mod sub4 {\n+    /// 0\n+    pub const X: usize = 0;\n+    pub mod inner {\n+        pub use super::*;\n+        /// 1\n+        pub const X: usize = 1;\n+    }\n+}\n+\n+#[doc(inline)]\n+pub use sub4::inner::*;\n+\n+// @has 'foo/index.html'\n+// @has - '//div[@class=\"item-right docblock-short\"]' '1'\n+// @!has - '//div[@class=\"item-right docblock-short\"]' '0'\n+fn main() { assert_eq!(X, 1); }"}, {"sha": "66a31c42bcfc7732b52c30387c2cc108eb8154c9", "filename": "src/test/rustdoc/glob-shadowing.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/6afbe3eca92da175a197cdd3d75cf9c623bf53eb/src%2Ftest%2Frustdoc%2Fglob-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6afbe3eca92da175a197cdd3d75cf9c623bf53eb/src%2Ftest%2Frustdoc%2Fglob-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fglob-shadowing.rs?ref=6afbe3eca92da175a197cdd3d75cf9c623bf53eb", "patch": "@@ -0,0 +1,86 @@\n+// @has 'glob_shadowing/index.html'\n+// @count - '//div[@class=\"item-left module-item\"]' 6\n+// @!has - '//div[@class=\"item-right docblock-short\"]' 'sub1::describe'\n+// @has - '//div[@class=\"item-right docblock-short\"]' 'sub2::describe'\n+\n+// @!has - '//div[@class=\"item-right docblock-short\"]' 'sub1::describe2'\n+\n+// @!has - '//div[@class=\"item-right docblock-short\"]' 'sub1::prelude'\n+// @has - '//div[@class=\"item-right docblock-short\"]' 'mod::prelude'\n+\n+// @has - '//div[@class=\"item-right docblock-short\"]' 'sub1::Foo (struct)'\n+// @has - '//div[@class=\"item-right docblock-short\"]' 'mod::Foo (function)'\n+\n+// @has - '//div[@class=\"item-right docblock-short\"]' 'sub4::inner::X'\n+\n+// @has 'glob_shadowing/fn.describe.html'\n+// @has - '//div[@class=\"docblock\"]' 'sub2::describe'\n+\n+mod sub1 {\n+    // this should be shadowed by sub2::describe\n+    /// sub1::describe\n+    pub fn describe() -> &'static str {\n+        \"sub1::describe\"\n+    }\n+\n+    // this should be shadowed by mod::prelude\n+    /// sub1::prelude\n+    pub mod prelude {\n+    }\n+\n+    // this should *not* be shadowed, because sub1::Foo and mod::Foo are in different namespaces\n+    /// sub1::Foo (struct)\n+    pub struct Foo;\n+\n+    // this should be shadowed,\n+    // because both sub1::describe2 and sub3::describe2 are from glob reexport\n+    /// sub1::describe2\n+    pub fn describe2() -> &'static str {\n+        \"sub1::describe2\"\n+    }\n+}\n+\n+mod sub2 {\n+    /// sub2::describe\n+    pub fn describe() -> &'static str {\n+        \"sub2::describe\"\n+    }\n+}\n+\n+mod sub3 {\n+    // this should be shadowed\n+    // because both sub1::describe2 and sub3::describe2 are from glob reexport\n+    /// sub3::describe2\n+    pub fn describe2() -> &'static str {\n+        \"sub3::describe2\"\n+    }\n+}\n+\n+mod sub4 {\n+    // this should be shadowed by sub4::inner::X\n+    /// sub4::X\n+    pub const X: usize = 0;\n+    pub mod inner {\n+        pub use super::*;\n+        /// sub4::inner::X\n+        pub const X: usize = 1;\n+    }\n+}\n+\n+/// mod::Foo (function)\n+pub fn Foo() {}\n+\n+#[doc(inline)]\n+pub use sub2::describe;\n+\n+#[doc(inline)]\n+pub use sub1::*;\n+\n+#[doc(inline)]\n+pub use sub3::*;\n+\n+#[doc(inline)]\n+pub use sub4::inner::*;\n+\n+/// mod::prelude\n+pub mod prelude {}"}, {"sha": "d3a7a870b580a29d47a4bd3f927962744fad3344", "filename": "src/test/rustdoc/issue-83375-multiple-mods-w-same-name-doc-inline-last-item.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6afbe3eca92da175a197cdd3d75cf9c623bf53eb/src%2Ftest%2Frustdoc%2Fissue-83375-multiple-mods-w-same-name-doc-inline-last-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6afbe3eca92da175a197cdd3d75cf9c623bf53eb/src%2Ftest%2Frustdoc%2Fissue-83375-multiple-mods-w-same-name-doc-inline-last-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-83375-multiple-mods-w-same-name-doc-inline-last-item.rs?ref=6afbe3eca92da175a197cdd3d75cf9c623bf53eb", "patch": "@@ -0,0 +1,16 @@\n+#![crate_name = \"foo\"]\n+\n+pub mod sub {\n+    pub struct Item;\n+\n+    pub mod prelude {\n+        pub use super::Item;\n+    }\n+}\n+\n+#[doc(inline)]\n+pub use sub::*;\n+\n+// @count foo/index.html '//a[@class=\"mod\"][@title=\"foo::prelude mod\"]' 1\n+// @count foo/prelude/index.html '//div[@class=\"item-row\"]' 0\n+pub mod prelude {}"}, {"sha": "b836925099364598de36ee0cc1b0ebeb93abc234", "filename": "src/test/rustdoc/issue-83375-multiple-mods-w-same-name-doc-inline.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6afbe3eca92da175a197cdd3d75cf9c623bf53eb/src%2Ftest%2Frustdoc%2Fissue-83375-multiple-mods-w-same-name-doc-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6afbe3eca92da175a197cdd3d75cf9c623bf53eb/src%2Ftest%2Frustdoc%2Fissue-83375-multiple-mods-w-same-name-doc-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-83375-multiple-mods-w-same-name-doc-inline.rs?ref=6afbe3eca92da175a197cdd3d75cf9c623bf53eb", "patch": "@@ -0,0 +1,16 @@\n+#![crate_name = \"foo\"]\n+\n+pub mod sub {\n+    pub struct Item;\n+\n+    pub mod prelude {\n+        pub use super::Item;\n+    }\n+}\n+\n+// @count foo/index.html '//a[@class=\"mod\"][@title=\"foo::prelude mod\"]' 1\n+// @count foo/prelude/index.html '//div[@class=\"item-row\"]' 0\n+pub mod prelude {}\n+\n+#[doc(inline)]\n+pub use sub::*;"}]}