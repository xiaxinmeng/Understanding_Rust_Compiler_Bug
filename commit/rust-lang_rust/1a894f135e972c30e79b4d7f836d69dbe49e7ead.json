{"sha": "1a894f135e972c30e79b4d7f836d69dbe49e7ead", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhODk0ZjEzNWU5NzJjMzBlNzliNGQ3ZjgzNmQ2OWRiZTQ5ZTdlYWQ=", "commit": {"author": {"name": "Jethro Beekman", "email": "jethro@fortanix.com", "date": "2018-09-17T23:22:59Z"}, "committer": {"name": "Jethro Beekman", "email": "jethro@fortanix.com", "date": "2018-12-07T05:56:51Z"}, "message": "SGX target: implement streams", "tree": {"sha": "a4ce9e705c1fd543c12f5726bc01a3a74e35e810", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4ce9e705c1fd543c12f5726bc01a3a74e35e810"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a894f135e972c30e79b4d7f836d69dbe49e7ead", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a894f135e972c30e79b4d7f836d69dbe49e7ead", "html_url": "https://github.com/rust-lang/rust/commit/1a894f135e972c30e79b4d7f836d69dbe49e7ead", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a894f135e972c30e79b4d7f836d69dbe49e7ead/comments", "author": null, "committer": null, "parents": [{"sha": "8d6edc9f8f71075c55fad3c5ca5a7e28b5e01400", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d6edc9f8f71075c55fad3c5ca5a7e28b5e01400", "html_url": "https://github.com/rust-lang/rust/commit/8d6edc9f8f71075c55fad3c5ca5a7e28b5e01400"}], "stats": {"total": 162, "additions": 134, "deletions": 28}, "files": [{"sha": "b8d739f4d2fa13ef2c1dc176acd9047025d989e7", "filename": "src/libstd/sys/sgx/abi/usercalls/mod.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1a894f135e972c30e79b4d7f836d69dbe49e7ead/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a894f135e972c30e79b4d7f836d69dbe49e7ead/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs?ref=1a894f135e972c30e79b4d7f836d69dbe49e7ead", "patch": "@@ -12,10 +12,49 @@ pub use fortanix_sgx_abi::*;\n \n use io::{Error as IoError, Result as IoResult};\n \n-mod alloc;\n+pub mod alloc;\n #[macro_use]\n mod raw;\n \n+pub(crate) fn copy_user_buffer(buf: &alloc::UserRef<ByteBuffer>) -> Vec<u8> {\n+    unsafe {\n+        let buf = buf.to_enclave();\n+        alloc::User::from_raw_parts(buf.data as _, buf.len).to_enclave()\n+    }\n+}\n+\n+pub fn read(fd: Fd, buf: &mut [u8]) -> IoResult<usize> {\n+    unsafe {\n+        let mut userbuf = alloc::User::<[u8]>::uninitialized(buf.len());\n+        let len = raw::read(fd, userbuf.as_mut_ptr(), userbuf.len()).from_sgx_result()?;\n+        userbuf[..len].copy_to_enclave(&mut buf[..len]);\n+        Ok(len)\n+    }\n+}\n+\n+pub fn read_alloc(fd: Fd) -> IoResult<Vec<u8>> {\n+    unsafe {\n+        let mut userbuf = alloc::User::<ByteBuffer>::uninitialized();\n+        raw::read_alloc(fd, userbuf.as_raw_mut_ptr()).from_sgx_result()?;\n+        Ok(copy_user_buffer(&userbuf))\n+    }\n+}\n+\n+pub fn write(fd: Fd, buf: &[u8]) -> IoResult<usize> {\n+    unsafe {\n+        let userbuf = alloc::User::new_from_enclave(buf);\n+        raw::write(fd, userbuf.as_ptr(), userbuf.len()).from_sgx_result()\n+    }\n+}\n+\n+pub fn flush(fd: Fd) -> IoResult<()> {\n+    unsafe { raw::flush(fd).from_sgx_result() }\n+}\n+\n+pub fn close(fd: Fd) {\n+    unsafe { raw::close(fd) }\n+}\n+\n pub fn launch_thread() -> IoResult<()> {\n     unsafe { raw::launch_thread().from_sgx_result() }\n }"}, {"sha": "31c4199c6cda1138b442517c06fb1d49f35914f7", "filename": "src/libstd/sys/sgx/fd.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1a894f135e972c30e79b4d7f836d69dbe49e7ead/src%2Flibstd%2Fsys%2Fsgx%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a894f135e972c30e79b4d7f836d69dbe49e7ead/src%2Flibstd%2Fsys%2Fsgx%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Ffd.rs?ref=1a894f135e972c30e79b4d7f836d69dbe49e7ead", "patch": "@@ -0,0 +1,58 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use fortanix_sgx_abi::Fd;\n+\n+use io;\n+use mem;\n+use sys_common::AsInner;\n+use super::abi::usercalls;\n+\n+#[derive(Debug)]\n+pub struct FileDesc {\n+    fd: Fd,\n+}\n+\n+impl FileDesc {\n+    pub fn new(fd: Fd) -> FileDesc {\n+        FileDesc { fd: fd }\n+    }\n+\n+    pub fn raw(&self) -> Fd { self.fd }\n+\n+    /// Extracts the actual filedescriptor without closing it.\n+    pub fn into_raw(self) -> Fd {\n+        let fd = self.fd;\n+        mem::forget(self);\n+        fd\n+    }\n+\n+    pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {\n+        usercalls::read(self.fd, buf)\n+    }\n+\n+    pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n+        usercalls::write(self.fd, buf)\n+    }\n+\n+    pub fn flush(&self) -> io::Result<()> {\n+        usercalls::flush(self.fd)\n+    }\n+}\n+\n+impl AsInner<Fd> for FileDesc {\n+    fn as_inner(&self) -> &Fd { &self.fd }\n+}\n+\n+impl Drop for FileDesc {\n+    fn drop(&mut self) {\n+        usercalls::close(self.fd)\n+    }\n+}"}, {"sha": "dd6862e908e06950224afca1451053a8da18f113", "filename": "src/libstd/sys/sgx/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a894f135e972c30e79b4d7f836d69dbe49e7ead/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a894f135e972c30e79b4d7f836d69dbe49e7ead/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs?ref=1a894f135e972c30e79b4d7f836d69dbe49e7ead", "patch": "@@ -27,6 +27,7 @@ pub mod backtrace;\n pub mod cmath;\n pub mod condvar;\n pub mod env;\n+pub mod fd;\n pub mod fs;\n pub mod memchr;\n pub mod mutex;"}, {"sha": "13c9119556929eedc08b62f9bc94bfb7a02a8951", "filename": "src/libstd/sys/sgx/stdio.rs", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/1a894f135e972c30e79b4d7f836d69dbe49e7ead/src%2Flibstd%2Fsys%2Fsgx%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a894f135e972c30e79b4d7f836d69dbe49e7ead/src%2Flibstd%2Fsys%2Fsgx%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fstdio.rs?ref=1a894f135e972c30e79b4d7f836d69dbe49e7ead", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,64 +8,72 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use fortanix_sgx_abi as abi;\n+\n use io;\n-use sys::unsupported;\n+use sys::fd::FileDesc;\n+\n+pub struct Stdin(());\n+pub struct Stdout(());\n+pub struct Stderr(());\n \n-pub struct Stdin;\n-pub struct Stdout;\n-pub struct Stderr;\n+fn with_std_fd<F: FnOnce(&FileDesc) -> R, R>(fd: abi::Fd, f: F) -> R {\n+    let fd = FileDesc::new(fd);\n+    let ret = f(&fd);\n+    fd.into_raw();\n+    ret\n+}\n \n impl Stdin {\n-    pub fn new() -> io::Result<Stdin> {\n-        Ok(Stdin)\n-    }\n+    pub fn new() -> io::Result<Stdin> { Ok(Stdin(())) }\n \n-    pub fn read(&self, _data: &mut [u8]) -> io::Result<usize> {\n-        unsupported()\n+    pub fn read(&self, data: &mut [u8]) -> io::Result<usize> {\n+        with_std_fd(abi::FD_STDIN, |fd| fd.read(data))\n     }\n }\n \n impl Stdout {\n-    pub fn new() -> io::Result<Stdout> {\n-        Ok(Stdout)\n-    }\n+    pub fn new() -> io::Result<Stdout> { Ok(Stdout(())) }\n \n-    pub fn write(&self, _data: &[u8]) -> io::Result<usize> {\n-        unsupported()\n+    pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n+        with_std_fd(abi::FD_STDOUT, |fd| fd.write(data))\n     }\n \n     pub fn flush(&self) -> io::Result<()> {\n-        Ok(())\n+        with_std_fd(abi::FD_STDOUT, |fd| fd.flush())\n     }\n }\n \n impl Stderr {\n-    pub fn new() -> io::Result<Stderr> {\n-        Ok(Stderr)\n-    }\n+    pub fn new() -> io::Result<Stderr> { Ok(Stderr(())) }\n \n-    pub fn write(&self, _data: &[u8]) -> io::Result<usize> {\n-        unsupported()\n+    pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n+        with_std_fd(abi::FD_STDERR, |fd| fd.write(data))\n     }\n \n     pub fn flush(&self) -> io::Result<()> {\n-        Ok(())\n+        with_std_fd(abi::FD_STDERR, |fd| fd.flush())\n     }\n }\n \n+// FIXME: right now this raw stderr handle is used in a few places because\n+//        std::io::stderr_raw isn't exposed, but once that's exposed this impl\n+//        should go away\n impl io::Write for Stderr {\n     fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n-        (&*self).write(data)\n+        Stderr::write(self, data)\n     }\n+\n     fn flush(&mut self) -> io::Result<()> {\n-        (&*self).flush()\n+        Stderr::flush(self)\n     }\n }\n \n-pub const STDIN_BUF_SIZE: usize = 0;\n+pub const STDIN_BUF_SIZE: usize = ::sys_common::io::DEFAULT_BUF_SIZE;\n \n-pub fn is_ebadf(_err: &io::Error) -> bool {\n-    true\n+pub fn is_ebadf(err: &io::Error) -> bool {\n+    // FIXME: Rust normally maps Unix EBADF to `Other`\n+    err.raw_os_error() == Some(abi::Error::BrokenPipe as _)\n }\n \n pub fn panic_output() -> Option<impl io::Write> {"}]}