{"sha": "a8dfa3757cddd958c7dcadeeafd62721c45a487e", "node_id": "C_kwDOAAsO6NoAKGE4ZGZhMzc1N2NkZGQ5NThjN2RjYWRlZWFmZDYyNzIxYzQ1YTQ4N2U", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2022-01-24T11:23:14Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2022-01-24T11:23:14Z"}, "message": "rustc_errors: only box the `diagnostic` field in `DiagnosticBuilder`.", "tree": {"sha": "61658a523fceb2765d48c30cfcf2019e8a5e7b9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61658a523fceb2765d48c30cfcf2019e8a5e7b9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8dfa3757cddd958c7dcadeeafd62721c45a487e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8dfa3757cddd958c7dcadeeafd62721c45a487e", "html_url": "https://github.com/rust-lang/rust/commit/a8dfa3757cddd958c7dcadeeafd62721c45a487e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8dfa3757cddd958c7dcadeeafd62721c45a487e/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68fa81baa3acf3a93ce4b41c8366039229926fc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/68fa81baa3acf3a93ce4b41c8366039229926fc2", "html_url": "https://github.com/rust-lang/rust/commit/68fa81baa3acf3a93ce4b41c8366039229926fc2"}], "stats": {"total": 56, "additions": 25, "deletions": 31}, "files": [{"sha": "3c8751a7a3586850ee9839d08aa94126adc53730", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a8dfa3757cddd958c7dcadeeafd62721c45a487e/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dfa3757cddd958c7dcadeeafd62721c45a487e/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=a8dfa3757cddd958c7dcadeeafd62721c45a487e", "patch": "@@ -15,20 +15,14 @@ use tracing::debug;\n /// extending `HandlerFlags`, accessed via `self.handler.flags`.\n #[must_use]\n #[derive(Clone)]\n-pub struct DiagnosticBuilder<'a>(Box<DiagnosticBuilderInner<'a>>);\n-\n-/// This is a large type, and often used as a return value, especially within\n-/// the frequently-used `PResult` type. In theory, return value optimization\n-/// (RVO) should avoid unnecessary copying. In practice, it does not (at the\n-/// time of writing). The split between `DiagnosticBuilder` and\n-/// `DiagnosticBuilderInner` exists to avoid many `memcpy` calls.\n-// FIXME(eddyb) try having two pointers in `DiagnosticBuilder`, by only boxing\n-// `Diagnostic` (i.e. `struct DiagnosticBuilder(&Handler, Box<Diagnostic>);`).\n-#[must_use]\n-#[derive(Clone)]\n-struct DiagnosticBuilderInner<'a> {\n+pub struct DiagnosticBuilder<'a> {\n     handler: &'a Handler,\n-    diagnostic: Diagnostic,\n+\n+    /// `Diagnostic` is a large type, and `DiagnosticBuilder` is often used as a\n+    /// return value, especially within the frequently-used `PResult` type.\n+    /// In theory, return value optimization (RVO) should avoid unnecessary\n+    /// copying. In practice, it does not (at the time of writing).\n+    diagnostic: Box<Diagnostic>,\n }\n \n /// In general, the `DiagnosticBuilder` uses deref to allow access to\n@@ -61,7 +55,7 @@ macro_rules! forward {\n         $(#[$attrs])*\n         #[doc = concat!(\"See [`Diagnostic::\", stringify!($n), \"()`].\")]\n         pub fn $n(&mut self, $($name: $ty),*) -> &mut Self {\n-            self.0.diagnostic.$n($($name),*);\n+            self.diagnostic.$n($($name),*);\n             self\n         }\n     };\n@@ -78,7 +72,7 @@ macro_rules! forward {\n         $(#[$attrs])*\n         #[doc = concat!(\"See [`Diagnostic::\", stringify!($n), \"()`].\")]\n         pub fn $n<$($generic: $bound),*>(&mut self, $($name: $ty),*) -> &mut Self {\n-            self.0.diagnostic.$n($($name),*);\n+            self.diagnostic.$n($($name),*);\n             self\n         }\n     };\n@@ -88,20 +82,20 @@ impl<'a> Deref for DiagnosticBuilder<'a> {\n     type Target = Diagnostic;\n \n     fn deref(&self) -> &Diagnostic {\n-        &self.0.diagnostic\n+        &self.diagnostic\n     }\n }\n \n impl<'a> DerefMut for DiagnosticBuilder<'a> {\n     fn deref_mut(&mut self) -> &mut Diagnostic {\n-        &mut self.0.diagnostic\n+        &mut self.diagnostic\n     }\n }\n \n impl<'a> DiagnosticBuilder<'a> {\n     /// Emit the diagnostic.\n     pub fn emit(&mut self) {\n-        self.0.handler.emit_diagnostic(&self);\n+        self.handler.emit_diagnostic(&self);\n         self.cancel();\n     }\n \n@@ -131,19 +125,19 @@ impl<'a> DiagnosticBuilder<'a> {\n     /// Converts the builder to a `Diagnostic` for later emission,\n     /// unless handler has disabled such buffering.\n     pub fn into_diagnostic(mut self) -> Option<(Diagnostic, &'a Handler)> {\n-        if self.0.handler.flags.dont_buffer_diagnostics\n-            || self.0.handler.flags.treat_err_as_bug.is_some()\n+        if self.handler.flags.dont_buffer_diagnostics\n+            || self.handler.flags.treat_err_as_bug.is_some()\n         {\n             self.emit();\n             return None;\n         }\n \n-        let handler = self.0.handler;\n+        let handler = self.handler;\n \n         // We must use `Level::Cancelled` for `dummy` to avoid an ICE about an\n         // unused diagnostic.\n         let dummy = Diagnostic::new(Level::Cancelled, \"\");\n-        let diagnostic = std::mem::replace(&mut self.0.diagnostic, dummy);\n+        let diagnostic = std::mem::replace(&mut *self.diagnostic, dummy);\n \n         // Logging here is useful to help track down where in logs an error was\n         // actually emitted.\n@@ -170,7 +164,7 @@ impl<'a> DiagnosticBuilder<'a> {\n     /// locally in whichever way makes the most sense.\n     pub fn delay_as_bug(&mut self) {\n         self.level = Level::Bug;\n-        self.0.handler.delay_as_bug(self.0.diagnostic.clone());\n+        self.handler.delay_as_bug((*self.diagnostic).clone());\n         self.cancel();\n     }\n \n@@ -187,7 +181,7 @@ impl<'a> DiagnosticBuilder<'a> {\n     /// [\"primary span\"][`MultiSpan`]; only the `Span` supplied when creating the diagnostic is\n     /// primary.\n     pub fn span_label(&mut self, span: Span, label: impl Into<String>) -> &mut Self {\n-        self.0.diagnostic.span_label(span, label);\n+        self.diagnostic.span_label(span, label);\n         self\n     }\n \n@@ -200,7 +194,7 @@ impl<'a> DiagnosticBuilder<'a> {\n     ) -> &mut Self {\n         let label = label.as_ref();\n         for span in spans {\n-            self.0.diagnostic.span_label(span, label);\n+            self.diagnostic.span_label(span, label);\n         }\n         self\n     }\n@@ -340,13 +334,13 @@ impl<'a> DiagnosticBuilder<'a> {\n     /// diagnostic.\n     crate fn new_diagnostic(handler: &'a Handler, diagnostic: Diagnostic) -> DiagnosticBuilder<'a> {\n         debug!(\"Created new diagnostic\");\n-        DiagnosticBuilder(Box::new(DiagnosticBuilderInner { handler, diagnostic }))\n+        DiagnosticBuilder { handler, diagnostic: Box::new(diagnostic) }\n     }\n }\n \n impl<'a> Debug for DiagnosticBuilder<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        self.0.diagnostic.fmt(f)\n+        self.diagnostic.fmt(f)\n     }\n }\n \n@@ -356,7 +350,7 @@ impl<'a> Drop for DiagnosticBuilder<'a> {\n     fn drop(&mut self) {\n         if !panicking() && !self.cancelled() {\n             let mut db = DiagnosticBuilder::new(\n-                self.0.handler,\n+                self.handler,\n                 Level::Bug,\n                 \"the following error was constructed but not emitted\",\n             );"}, {"sha": "180e1aca693a740e9cc16fdcdfda6e8015664f38", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8dfa3757cddd958c7dcadeeafd62721c45a487e/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dfa3757cddd958c7dcadeeafd62721c45a487e/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=a8dfa3757cddd958c7dcadeeafd62721c45a487e", "patch": "@@ -54,9 +54,9 @@ pub use snippet::Style;\n pub type PResult<'a, T> = Result<T, DiagnosticBuilder<'a>>;\n \n // `PResult` is used a lot. Make sure it doesn't unintentionally get bigger.\n-// (See also the comment on `DiagnosticBuilderInner`.)\n+// (See also the comment on `DiagnosticBuilder`'s `diagnostic` field.)\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(PResult<'_, bool>, 16);\n+rustc_data_structures::static_assert_size!(PResult<'_, bool>, 24);\n \n #[derive(Debug, PartialEq, Eq, Clone, Copy, Hash, Encodable, Decodable)]\n pub enum SuggestionStyle {"}, {"sha": "7fc3778376cd0901336236bd614f945b514facdd", "filename": "src/tools/rustfmt/src/parse/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8dfa3757cddd958c7dcadeeafd62721c45a487e/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dfa3757cddd958c7dcadeeafd62721c45a487e/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs?ref=a8dfa3757cddd958c7dcadeeafd62721c45a487e", "patch": "@@ -315,7 +315,7 @@ mod tests {\n                 code: None,\n                 message: vec![],\n                 children: vec![],\n-                suggestions: vec![],\n+                suggestions: Ok(vec![]),\n                 span: span.unwrap_or_else(MultiSpan::new),\n                 sort_span: DUMMY_SP,\n                 is_lint: false,"}]}