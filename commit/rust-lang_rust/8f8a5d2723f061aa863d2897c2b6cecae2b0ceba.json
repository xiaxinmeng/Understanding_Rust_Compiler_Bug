{"sha": "8f8a5d2723f061aa863d2897c2b6cecae2b0ceba", "node_id": "C_kwDOAAsO6NoAKDhmOGE1ZDI3MjNmMDYxYWE4NjNkMjg5N2MyYjZjZWNhZTJiMGNlYmE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-01T19:37:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-01T19:37:20Z"}, "message": "Rollup merge of #101279 - GuillaumeGomez:doc_auto_cfg_nested_impl, r=notriddle\n\nFix doc_auto_cfg for impl blocks in different modules with different `cfg`\n\nFixes #101129.\n\nJust like reexports, impl blocks don't necessarily share the same \"space\" as the item they implement so we need to merge attributes from its parents as well.\n\nr? `@notriddle`", "tree": {"sha": "1a8bd41b8e0eb912e8eb57a764fbcf055ee03c70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a8bd41b8e0eb912e8eb57a764fbcf055ee03c70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f8a5d2723f061aa863d2897c2b6cecae2b0ceba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjEQnwCRBK7hj4Ov3rIwAA6CIIAElcujspE3CIfaFIwMOuXFo4\nxCSMxnwyeGT8j9k7U9NfKWs6+SUY5p2SUy8v7mWdOWP5DuRBSEsvmgCmzgRFzvpg\nu6UepIbloNAefQLVVL6U20LvF9OZquwDDcwVclFEmyIy2zjhGJUnOETttUVpw18F\ntCo2O+ul3jJyX7+E0ob+cS/E000qsbXjdYYtZEyUN5dASP4XX1vUGv04ppchp2bP\nQurd+4aR+3b0ycwlpwCqs7KMCyxAd0lQdgCVLIJJeDQDxzU1V9lFRNDaKlDJp0ns\nCqUBiCdFizsztGTX68o/oUV8/3Qm68jBlpYuQSiEndrWtHhORBOlOCqnG61tS20=\n=dGaK\n-----END PGP SIGNATURE-----\n", "payload": "tree 1a8bd41b8e0eb912e8eb57a764fbcf055ee03c70\nparent e9df5ddda26702e8c2ce21558a9a332153362931\nparent 68d0094305b4bebb96ef9d4c111fca256c1b0b4f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1662061040 +0200\ncommitter GitHub <noreply@github.com> 1662061040 +0200\n\nRollup merge of #101279 - GuillaumeGomez:doc_auto_cfg_nested_impl, r=notriddle\n\nFix doc_auto_cfg for impl blocks in different modules with different `cfg`\n\nFixes #101129.\n\nJust like reexports, impl blocks don't necessarily share the same \"space\" as the item they implement so we need to merge attributes from its parents as well.\n\nr? `@notriddle`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f8a5d2723f061aa863d2897c2b6cecae2b0ceba", "html_url": "https://github.com/rust-lang/rust/commit/8f8a5d2723f061aa863d2897c2b6cecae2b0ceba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f8a5d2723f061aa863d2897c2b6cecae2b0ceba/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9df5ddda26702e8c2ce21558a9a332153362931", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9df5ddda26702e8c2ce21558a9a332153362931", "html_url": "https://github.com/rust-lang/rust/commit/e9df5ddda26702e8c2ce21558a9a332153362931"}, {"sha": "68d0094305b4bebb96ef9d4c111fca256c1b0b4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/68d0094305b4bebb96ef9d4c111fca256c1b0b4f", "html_url": "https://github.com/rust-lang/rust/commit/68d0094305b4bebb96ef9d4c111fca256c1b0b4f"}], "stats": {"total": 84, "additions": 64, "deletions": 20}, "files": [{"sha": "765f7c61bd392dc433d5e2e5aa2c55ea95828992", "filename": "src/librustdoc/passes/propagate_doc_cfg.rs", "status": "modified", "additions": 40, "deletions": 20, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8f8a5d2723f061aa863d2897c2b6cecae2b0ceba/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f8a5d2723f061aa863d2897c2b6cecae2b0ceba/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs?ref=8f8a5d2723f061aa863d2897c2b6cecae2b0ceba", "patch": "@@ -3,7 +3,7 @@ use std::sync::Arc;\n \n use crate::clean::cfg::Cfg;\n use crate::clean::inline::{load_attrs, merge_attrs};\n-use crate::clean::{Crate, Item};\n+use crate::clean::{Crate, Item, ItemKind};\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n use crate::passes::Pass;\n@@ -26,30 +26,50 @@ struct CfgPropagator<'a, 'tcx> {\n     cx: &'a mut DocContext<'tcx>,\n }\n \n-impl<'a, 'tcx> DocFolder for CfgPropagator<'a, 'tcx> {\n-    fn fold_item(&mut self, mut item: Item) -> Option<Item> {\n-        let old_parent_cfg = self.parent_cfg.clone();\n+impl<'a, 'tcx> CfgPropagator<'a, 'tcx> {\n+    // Some items need to merge their attributes with their parents' otherwise a few of them\n+    // (mostly `cfg` ones) will be missing.\n+    fn merge_with_parent_attributes(&mut self, item: &mut Item) {\n+        let check_parent = match &*item.kind {\n+            // impl blocks can be in different modules with different cfg and we need to get them\n+            // as well.\n+            ItemKind::ImplItem(_) => false,\n+            kind if kind.is_non_assoc() => true,\n+            _ => return,\n+        };\n \n-        if item.kind.is_non_assoc() &&\n-            let Some(def_id) = item.item_id.as_def_id().and_then(|def_id| def_id.as_local()) {\n-            let hir = self.cx.tcx.hir();\n-            let hir_id = hir.local_def_id_to_hir_id(def_id);\n+        let Some(def_id) = item.item_id.as_def_id().and_then(|def_id| def_id.as_local())\n+            else { return };\n+\n+        let hir = self.cx.tcx.hir();\n+        let hir_id = hir.local_def_id_to_hir_id(def_id);\n+\n+        if check_parent {\n             let expected_parent = hir.get_parent_item(hir_id);\n+            // If parents are different, it means that `item` is a reexport and we need\n+            // to compute the actual `cfg` by iterating through its \"real\" parents.\n+            if self.parent == Some(expected_parent) {\n+                return;\n+            }\n+        }\n \n-            // If parents are different, it means that `item` is a reexport and we need to compute\n-            // the actual `cfg` by iterating through its \"real\" parents.\n-            if self.parent != Some(expected_parent) {\n-                let mut attrs = Vec::new();\n-                for (parent_hir_id, _) in hir.parent_iter(hir_id) {\n-                    if let Some(def_id) = hir.opt_local_def_id(parent_hir_id) {\n-                        attrs.extend_from_slice(load_attrs(self.cx, def_id.to_def_id()));\n-                    }\n-                }\n-                let (_, cfg) =\n-                    merge_attrs(self.cx, None, item.attrs.other_attrs.as_slice(), Some(&attrs));\n-                item.cfg = cfg;\n+        let mut attrs = Vec::new();\n+        for (parent_hir_id, _) in hir.parent_iter(hir_id) {\n+            if let Some(def_id) = hir.opt_local_def_id(parent_hir_id) {\n+                attrs.extend_from_slice(load_attrs(self.cx, def_id.to_def_id()));\n             }\n         }\n+        let (_, cfg) = merge_attrs(self.cx, None, item.attrs.other_attrs.as_slice(), Some(&attrs));\n+        item.cfg = cfg;\n+    }\n+}\n+\n+impl<'a, 'tcx> DocFolder for CfgPropagator<'a, 'tcx> {\n+    fn fold_item(&mut self, mut item: Item) -> Option<Item> {\n+        let old_parent_cfg = self.parent_cfg.clone();\n+\n+        self.merge_with_parent_attributes(&mut item);\n+\n         let new_cfg = match (self.parent_cfg.take(), item.cfg.take()) {\n             (None, None) => None,\n             (Some(rc), None) | (None, Some(rc)) => Some(rc),"}, {"sha": "4d73e0d829ad53bd1e14e124efa13a8c9bc11e76", "filename": "src/test/rustdoc/doc_auto_cfg_nested_impl.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8f8a5d2723f061aa863d2897c2b6cecae2b0ceba/src%2Ftest%2Frustdoc%2Fdoc_auto_cfg_nested_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f8a5d2723f061aa863d2897c2b6cecae2b0ceba/src%2Ftest%2Frustdoc%2Fdoc_auto_cfg_nested_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc_auto_cfg_nested_impl.rs?ref=8f8a5d2723f061aa863d2897c2b6cecae2b0ceba", "patch": "@@ -0,0 +1,24 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/101129>.\n+\n+#![feature(doc_auto_cfg)]\n+#![crate_type = \"lib\"]\n+#![crate_name = \"foo\"]\n+\n+pub struct S;\n+pub trait MyTrait1 {}\n+pub trait MyTrait2 {}\n+\n+// @has foo/struct.S.html\n+// @has - '//*[@id=\"impl-MyTrait1-for-S\"]//*[@class=\"stab portability\"]' \\\n+//        'Available on non-crate feature coolstuff only.'\n+#[cfg(not(feature = \"coolstuff\"))]\n+impl MyTrait1 for S {}\n+\n+#[cfg(not(feature = \"coolstuff\"))]\n+mod submod {\n+    use crate::{S, MyTrait2};\n+    // This impl should also have the `not(feature = \"coolstuff\")`.\n+    // @has - '//*[@id=\"impl-MyTrait2-for-S\"]//*[@class=\"stab portability\"]' \\\n+    //        'Available on non-crate feature coolstuff only.'\n+    impl MyTrait2 for S {}\n+}"}]}