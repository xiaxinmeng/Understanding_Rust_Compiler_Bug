{"sha": "396f9119256c7f675bd6cc58aaa4defb36c09760", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NmY5MTE5MjU2YzdmNjc1YmQ2Y2M1OGFhYTRkZWZiMzZjMDk3NjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-19T06:06:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-19T06:06:33Z"}, "message": "auto merge of #5017 : catamorphism/rust/less-copy, r=catamorphism", "tree": {"sha": "414f2a7f4c1e84c83f02e771f9322be64dc337e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/414f2a7f4c1e84c83f02e771f9322be64dc337e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/396f9119256c7f675bd6cc58aaa4defb36c09760", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/396f9119256c7f675bd6cc58aaa4defb36c09760", "html_url": "https://github.com/rust-lang/rust/commit/396f9119256c7f675bd6cc58aaa4defb36c09760", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/396f9119256c7f675bd6cc58aaa4defb36c09760/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e40314bbf9c6e810e836296018de082c0e15d12", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e40314bbf9c6e810e836296018de082c0e15d12", "html_url": "https://github.com/rust-lang/rust/commit/6e40314bbf9c6e810e836296018de082c0e15d12"}, {"sha": "43dc67b74a9b2599a38a59cc572e74f91213672f", "url": "https://api.github.com/repos/rust-lang/rust/commits/43dc67b74a9b2599a38a59cc572e74f91213672f", "html_url": "https://github.com/rust-lang/rust/commit/43dc67b74a9b2599a38a59cc572e74f91213672f"}], "stats": {"total": 55, "additions": 28, "deletions": 27}, "files": [{"sha": "8204c7982788b6430c024a262400591941b57376", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/396f9119256c7f675bd6cc58aaa4defb36c09760/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/396f9119256c7f675bd6cc58aaa4defb36c09760/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=396f9119256c7f675bd6cc58aaa4defb36c09760", "patch": "@@ -456,7 +456,6 @@ pub fn set_glue_inlining(f: ValueRef, t: ty::t) {\n // Double-check that we never ask LLVM to declare the same symbol twice. It\n // silently mangles such symbols, breaking our linkage model.\n pub fn note_unique_llvm_symbol(ccx: @crate_ctxt, +sym: ~str) {\n-    // XXX: Bad copy.\n     if ccx.all_llvm_symbols.contains_key(&sym) {\n         ccx.sess.bug(~\"duplicate LLVM symbol: \" + sym);\n     }\n@@ -628,7 +627,10 @@ pub fn iter_structural_ty(cx: block, av: ValueRef, t: ty::t,\n             for vec::each(fn_ty.sig.inputs) |a| {\n                 let llfldp_a = GEP_enum(cx, a_tup, tid, v_id,\n                                         /*bad*/copy tps, j);\n-                // XXX: Is \"None\" right here?\n+                // This assumes the self type is absent (it passes\n+                // None for the self_ty_opt arg of substs_tps).\n+                // I think that's ok since you can't have an enum\n+                // inside a trait.\n                 let ty_subst = ty::subst_tps(ccx.tcx, tps, None, a.ty);\n                 cx = f(cx, llfldp_a, ty_subst);\n                 j += 1u;\n@@ -1038,8 +1040,7 @@ pub fn load_if_immediate(cx: block, v: ValueRef, t: ty::t) -> ValueRef {\n pub fn trans_trace(bcx: block, sp_opt: Option<span>, +trace_str: ~str) {\n     if !bcx.sess().trace() { return; }\n     let _icx = bcx.insn_ctxt(\"trans_trace\");\n-    // XXX: Bad copy.\n-    add_comment(bcx, copy trace_str);\n+    add_comment(bcx, trace_str);\n     let V_trace_str = C_cstr(bcx.ccx(), trace_str);\n     let {V_filename, V_line} = match sp_opt {\n       Some(sp) => {\n@@ -1551,7 +1552,7 @@ pub fn new_fn_ctxt_w_id(ccx: @crate_ctxt,\n                         llfndecl: ValueRef,\n                         id: ast::node_id,\n                         impl_id: Option<ast::def_id>,\n-                        +param_substs: Option<param_substs>,\n+                        param_substs: Option<@param_substs>,\n                         sp: Option<span>) -> fn_ctxt {\n     let llbbs = mk_standard_basic_blocks(llfndecl);\n     return @fn_ctxt_ {\n@@ -1740,7 +1741,7 @@ pub fn trans_closure(ccx: @crate_ctxt,\n                      body: &ast::blk,\n                      llfndecl: ValueRef,\n                      ty_self: self_arg,\n-                     +param_substs: Option<param_substs>,\n+                     param_substs: Option<@param_substs>,\n                      id: ast::node_id,\n                      impl_id: Option<ast::def_id>,\n                      maybe_load_env: fn(fn_ctxt),\n@@ -1804,7 +1805,7 @@ pub fn trans_fn(ccx: @crate_ctxt,\n                 body: &ast::blk,\n                 llfndecl: ValueRef,\n                 ty_self: self_arg,\n-                +param_substs: Option<param_substs>,\n+                param_substs: Option<@param_substs>,\n                 id: ast::node_id,\n                 impl_id: Option<ast::def_id>) {\n     let do_time = ccx.sess.trans_stats();\n@@ -1813,8 +1814,8 @@ pub fn trans_fn(ccx: @crate_ctxt,\n     debug!(\"trans_fn(ty_self=%?)\", ty_self);\n     let _icx = ccx.insn_ctxt(\"trans_fn\");\n     ccx.stats.n_fns += 1;\n-    // XXX: Bad copy of `path`.\n-    trans_closure(ccx, copy path, decl, body, llfndecl, ty_self,\n+    let the_path_str = path_str(ccx.sess, path);\n+    trans_closure(ccx, path, decl, body, llfndecl, ty_self,\n                   param_substs, id, impl_id,\n                   |fcx| {\n                       if ccx.sess.opts.extra_debuginfo {\n@@ -1824,7 +1825,7 @@ pub fn trans_fn(ccx: @crate_ctxt,\n                   |_bcx| { });\n     if do_time {\n         let end = time::get_time();\n-        log_fn_time(ccx, path_str(ccx.sess, path), start, end);\n+        log_fn_time(ccx, the_path_str, start, end);\n     }\n }\n \n@@ -1834,7 +1835,7 @@ pub fn trans_enum_variant(ccx: @crate_ctxt,\n                           args: ~[ast::variant_arg],\n                           disr: int,\n                           is_degen: bool,\n-                          +param_substs: Option<param_substs>,\n+                          param_substs: Option<@param_substs>,\n                           llfndecl: ValueRef) {\n     let _icx = ccx.insn_ctxt(\"trans_enum_variant\");\n     // Translate variant arguments to function arguments.\n@@ -1850,9 +1851,8 @@ pub fn trans_enum_variant(ccx: @crate_ctxt,\n             id: varg.id,\n         }\n     };\n-    // XXX: Bad copy of `param_substs`.\n     let fcx = new_fn_ctxt_w_id(ccx, ~[], llfndecl, variant.node.id, None,\n-                               copy param_substs, None);\n+                               param_substs, None);\n     // XXX: Bad copy.\n     let raw_llargs = create_llargs_for_fn_args(fcx, no_self, copy fn_args);\n     let ty_param_substs = match param_substs {\n@@ -1897,7 +1897,7 @@ pub fn trans_enum_variant(ccx: @crate_ctxt,\n pub fn trans_tuple_struct(ccx: @crate_ctxt,\n                           fields: ~[@ast::struct_field],\n                           ctor_id: ast::node_id,\n-                          +param_substs: Option<param_substs>,\n+                          param_substs: Option<@param_substs>,\n                           llfndecl: ValueRef) {\n     let _icx = ccx.insn_ctxt(\"trans_tuple_struct\");\n \n@@ -1951,7 +1951,7 @@ pub fn trans_struct_dtor(ccx: @crate_ctxt,\n                          +path: path,\n                          body: &ast::blk,\n                          dtor_id: ast::node_id,\n-                         +psubsts: Option<param_substs>,\n+                         psubsts: Option<@param_substs>,\n                          hash_id: Option<mono_id>,\n                          parent_id: ast::def_id)\n                       -> ValueRef {\n@@ -1968,7 +1968,7 @@ pub fn trans_struct_dtor(ccx: @crate_ctxt,\n   let lldty = type_of_dtor(ccx, class_ty);\n \n   // XXX: Bad copies.\n-  let s = get_dtor_symbol(ccx, copy path, dtor_id, copy psubsts);\n+  let s = get_dtor_symbol(ccx, copy path, dtor_id, psubsts);\n \n   /* Register the dtor as a function. It has external linkage */\n   let lldecl = decl_internal_cdecl_fn(ccx.llmod, s, lldty);\n@@ -2296,7 +2296,7 @@ pub fn item_path(ccx: @crate_ctxt, i: @ast::item) -> path {\n pub fn get_dtor_symbol(ccx: @crate_ctxt,\n                        +path: path,\n                        id: ast::node_id,\n-                       +substs: Option<param_substs>)\n+                       substs: Option<@param_substs>)\n                     -> ~str {\n   let t = ty::node_id_to_type(ccx.tcx, id);\n   match ccx.item_symbols.find(&id) {"}, {"sha": "da9dcc7c9afdbaedf0671c9fb7d4691f3d7b3ea8", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/396f9119256c7f675bd6cc58aaa4defb36c09760/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/396f9119256c7f675bd6cc58aaa4defb36c09760/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=396f9119256c7f675bd6cc58aaa4defb36c09760", "patch": "@@ -834,7 +834,7 @@ pub fn add_span_comment(bcx: block, sp: span, text: ~str) {\n     }\n }\n \n-pub fn add_comment(bcx: block, text: ~str) {\n+pub fn add_comment(bcx: block, text: &str) {\n     unsafe {\n         let ccx = bcx.ccx();\n         if !ccx.sess.no_asm_comments() {"}, {"sha": "82c510031bf3ee66db554e84dfec8294592a226e", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/396f9119256c7f675bd6cc58aaa4defb36c09760/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/396f9119256c7f675bd6cc58aaa4defb36c09760/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=396f9119256c7f675bd6cc58aaa4defb36c09760", "patch": "@@ -311,7 +311,7 @@ pub struct fn_ctxt_ {\n \n     // If this function is being monomorphized, this contains the type\n     // substitutions used.\n-    param_substs: Option<param_substs>,\n+    param_substs: Option<@param_substs>,\n \n     // The source span and nesting context where this function comes from, for\n     // error reporting and symbol generation.\n@@ -1395,7 +1395,7 @@ pub fn resolve_vtable_in_fn_ctxt(fcx: fn_ctxt, +vt: typeck::vtable_origin)\n         }\n         typeck::vtable_param(n_param, n_bound) => {\n             match fcx.param_substs {\n-                Some(ref substs) => {\n+                Some(substs) => {\n                     find_vtable(tcx, substs, n_param, n_bound)\n                 }\n                 _ => {"}, {"sha": "206ee50111fd076ff42ffc57d4d8d17576d1e64f", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/396f9119256c7f675bd6cc58aaa4defb36c09760/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/396f9119256c7f675bd6cc58aaa4defb36c09760/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=396f9119256c7f675bd6cc58aaa4defb36c09760", "patch": "@@ -524,7 +524,8 @@ pub impl Datum {\n         if bcx.sess().trace() {\n             trans_trace(\n                 bcx, None,\n-                fmt!(\"preserving until end of scope %d\", root_info.scope));\n+                fmt!(\"preserving until end of scope %d\",\n+                     root_info.scope));\n         }\n \n         let scratch = scratch_datum(bcx, self.ty, true);"}, {"sha": "92852930a6641f637f24cfb61dc5bc29405a1453", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/396f9119256c7f675bd6cc58aaa4defb36c09760/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/396f9119256c7f675bd6cc58aaa4defb36c09760/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=396f9119256c7f675bd6cc58aaa4defb36c09760", "patch": "@@ -332,7 +332,7 @@ pub fn trans_intrinsic(ccx: @crate_ctxt,\n                        decl: ValueRef,\n                        item: @ast::foreign_item,\n                        +path: ast_map::path,\n-                       +substs: param_substs,\n+                       substs: @param_substs,\n                        ref_id: Option<ast::node_id>) {\n     debug!(\"trans_intrinsic(item.ident=%s)\", ccx.sess.str_of(item.ident));\n "}, {"sha": "b28362dfbd619155aa4e9959480c862fc791beac", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/396f9119256c7f675bd6cc58aaa4defb36c09760/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/396f9119256c7f675bd6cc58aaa4defb36c09760/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=396f9119256c7f675bd6cc58aaa4defb36c09760", "patch": "@@ -66,7 +66,7 @@ pub fn trans_impl(ccx: @crate_ctxt, +path: path, name: ast::ident,\n             match self_ty {\n                 None => param_substs_opt = None,\n                 Some(self_ty) => {\n-                    param_substs_opt = Some(param_substs {\n+                    param_substs_opt = Some(@param_substs {\n                         tys: ~[],\n                         vtables: None,\n                         bounds: @~[],\n@@ -99,7 +99,7 @@ Translates a (possibly monomorphized) method body.\n pub fn trans_method(ccx: @crate_ctxt,\n                     +path: path,\n                     method: &ast::method,\n-                    +param_substs: Option<param_substs>,\n+                    param_substs: Option<@param_substs>,\n                     base_self_ty: Option<ty::t>,\n                     llfn: ValueRef,\n                     impl_id: ast::def_id) {\n@@ -118,7 +118,7 @@ pub fn trans_method(ccx: @crate_ctxt,\n         }\n         let self_ty = match param_substs {\n             None => self_ty,\n-            Some(param_substs {tys: ref tys, _}) => {\n+            Some(@param_substs {tys: ref tys, _}) => {\n                 ty::subst_tps(ccx.tcx, *tys, None, self_ty)\n             }\n         };\n@@ -247,7 +247,7 @@ pub fn trans_method_callee(bcx: block,\n             bound_num: b\n         }) => {\n             match bcx.fcx.param_substs {\n-                Some(ref substs) => {\n+                Some(substs) => {\n                     let vtbl = find_vtable(bcx.tcx(), substs, p, b);\n                     trans_monomorphized_callee(bcx, callee_id, self, mentry,\n                                                trait_id, off, vtbl)"}, {"sha": "bb289eec33eeffb432c19fd48ade89e6d7a4363a", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/396f9119256c7f675bd6cc58aaa4defb36c09760/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/396f9119256c7f675bd6cc58aaa4defb36c09760/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=396f9119256c7f675bd6cc58aaa4defb36c09760", "patch": "@@ -156,7 +156,7 @@ pub fn monomorphic_fn(ccx: @crate_ctxt,\n         lldecl\n     };\n \n-    let psubsts = Some(param_substs {\n+    let psubsts = Some(@param_substs {\n         tys: substs,\n         vtables: vtables,\n         bounds: tpt.bounds,"}]}