{"sha": "308460400bbab1383a61e1e61238a9c730d30ed9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwODQ2MDQwMGJiYWIxMzgzYTYxZTFlNjEyMzhhOWM3MzBkMzBlZDk=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-06T00:39:57Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-14T01:16:34Z"}, "message": "libcollections: convert `TrieSet` binops to by value", "tree": {"sha": "bee627d423d2334842dedd7b83bed22cb26ba654", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bee627d423d2334842dedd7b83bed22cb26ba654"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/308460400bbab1383a61e1e61238a9c730d30ed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/308460400bbab1383a61e1e61238a9c730d30ed9", "html_url": "https://github.com/rust-lang/rust/commit/308460400bbab1383a61e1e61238a9c730d30ed9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/308460400bbab1383a61e1e61238a9c730d30ed9/comments", "author": null, "committer": null, "parents": [{"sha": "dff2b395d21e8e6f322a3de2e68d20451afc08f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/dff2b395d21e8e6f322a3de2e68d20451afc08f3", "html_url": "https://github.com/rust-lang/rust/commit/dff2b395d21e8e6f322a3de2e68d20451afc08f3"}], "stats": {"total": 104, "additions": 100, "deletions": 4}, "files": [{"sha": "7b7b4d8280b786148895ff685040f6b9ea49fa5e", "filename": "src/libcollections/trie/set.rs", "status": "modified", "additions": 100, "deletions": 4, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/308460400bbab1383a61e1e61238a9c730d30ed9/src%2Flibcollections%2Ftrie%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308460400bbab1383a61e1e61238a9c730d30ed9/src%2Flibcollections%2Ftrie%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie%2Fset.rs?ref=308460400bbab1383a61e1e61238a9c730d30ed9", "patch": "@@ -462,6 +462,8 @@ impl Extend<uint> for TrieSet {\n     }\n }\n \n+// NOTE(stage0): Remove impl after a snapshot\n+#[cfg(stage0)]\n #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n impl BitOr<TrieSet, TrieSet> for TrieSet {\n     /// Returns the union of `self` and `rhs` as a new `TrieSet`.\n@@ -483,6 +485,30 @@ impl BitOr<TrieSet, TrieSet> for TrieSet {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+#[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+impl<'a, 'b> BitOr<&'b TrieSet, TrieSet> for &'a TrieSet {\n+    /// Returns the union of `self` and `rhs` as a new `TrieSet`.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::TrieSet;\n+    ///\n+    /// let a: TrieSet = vec![1, 2, 3].into_iter().collect();\n+    /// let b: TrieSet = vec![3, 4, 5].into_iter().collect();\n+    ///\n+    /// let set: TrieSet = &a | &b;\n+    /// let v: Vec<uint> = set.iter().collect();\n+    /// assert_eq!(v, vec![1u, 2, 3, 4, 5]);\n+    /// ```\n+    fn bitor(self, rhs: &TrieSet) -> TrieSet {\n+        self.union(rhs).collect()\n+    }\n+}\n+\n+// NOTE(stage0): Remove impl after a snapshot\n+#[cfg(stage0)]\n #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n impl BitAnd<TrieSet, TrieSet> for TrieSet {\n     /// Returns the intersection of `self` and `rhs` as a new `TrieSet`.\n@@ -504,6 +530,30 @@ impl BitAnd<TrieSet, TrieSet> for TrieSet {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+#[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+impl<'a, 'b> BitAnd<&'b TrieSet, TrieSet> for &'a TrieSet {\n+    /// Returns the intersection of `self` and `rhs` as a new `TrieSet`.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::TrieSet;\n+    ///\n+    /// let a: TrieSet = vec![1, 2, 3].into_iter().collect();\n+    /// let b: TrieSet = vec![2, 3, 4].into_iter().collect();\n+    ///\n+    /// let set: TrieSet = &a & &b;\n+    /// let v: Vec<uint> = set.iter().collect();\n+    /// assert_eq!(v, vec![2u, 3]);\n+    /// ```\n+    fn bitand(self, rhs: &TrieSet) -> TrieSet {\n+        self.intersection(rhs).collect()\n+    }\n+}\n+\n+// NOTE(stage0): Remove impl after a snapshot\n+#[cfg(stage0)]\n #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n impl BitXor<TrieSet, TrieSet> for TrieSet {\n     /// Returns the symmetric difference of `self` and `rhs` as a new `TrieSet`.\n@@ -525,6 +575,30 @@ impl BitXor<TrieSet, TrieSet> for TrieSet {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+#[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+impl<'a, 'b> BitXor<&'b TrieSet, TrieSet> for &'a TrieSet {\n+    /// Returns the symmetric difference of `self` and `rhs` as a new `TrieSet`.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::TrieSet;\n+    ///\n+    /// let a: TrieSet = vec![1, 2, 3].into_iter().collect();\n+    /// let b: TrieSet = vec![3, 4, 5].into_iter().collect();\n+    ///\n+    /// let set: TrieSet = &a ^ &b;\n+    /// let v: Vec<uint> = set.iter().collect();\n+    /// assert_eq!(v, vec![1u, 2, 4, 5]);\n+    /// ```\n+    fn bitxor(self, rhs: &TrieSet) -> TrieSet {\n+        self.symmetric_difference(rhs).collect()\n+    }\n+}\n+\n+// NOTE(stage0): Remove impl after a snapshot\n+#[cfg(stage0)]\n #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n impl Sub<TrieSet, TrieSet> for TrieSet {\n     /// Returns the difference of `self` and `rhs` as a new `TrieSet`.\n@@ -546,6 +620,28 @@ impl Sub<TrieSet, TrieSet> for TrieSet {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+#[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+impl<'a, 'b> Sub<&'b TrieSet, TrieSet> for &'a TrieSet {\n+    /// Returns the difference of `self` and `rhs` as a new `TrieSet`.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::TrieSet;\n+    ///\n+    /// let a: TrieSet = vec![1, 2, 3].into_iter().collect();\n+    /// let b: TrieSet = vec![3, 4, 5].into_iter().collect();\n+    ///\n+    /// let set: TrieSet = &a - &b;\n+    /// let v: Vec<uint> = set.iter().collect();\n+    /// assert_eq!(v, vec![1u, 2]);\n+    /// ```\n+    fn sub(self, rhs: &TrieSet) -> TrieSet {\n+        self.difference(rhs).collect()\n+    }\n+}\n+\n /// A forward iterator over a set.\n pub struct SetItems<'a> {\n     iter: Entries<'a, ()>\n@@ -837,7 +933,7 @@ mod test {\n         let a: TrieSet = vec![1, 2, 3].into_iter().collect();\n         let b: TrieSet = vec![3, 4, 5].into_iter().collect();\n \n-        let set: TrieSet = a | b;\n+        let set: TrieSet = &a | &b;\n         let v: Vec<uint> = set.iter().collect();\n         assert_eq!(v, vec![1u, 2, 3, 4, 5]);\n     }\n@@ -847,7 +943,7 @@ mod test {\n         let a: TrieSet = vec![1, 2, 3].into_iter().collect();\n         let b: TrieSet = vec![2, 3, 4].into_iter().collect();\n \n-        let set: TrieSet = a & b;\n+        let set: TrieSet = &a & &b;\n         let v: Vec<uint> = set.iter().collect();\n         assert_eq!(v, vec![2u, 3]);\n     }\n@@ -857,7 +953,7 @@ mod test {\n         let a: TrieSet = vec![1, 2, 3].into_iter().collect();\n         let b: TrieSet = vec![3, 4, 5].into_iter().collect();\n \n-        let set: TrieSet = a ^ b;\n+        let set: TrieSet = &a ^ &b;\n         let v: Vec<uint> = set.iter().collect();\n         assert_eq!(v, vec![1u, 2, 4, 5]);\n     }\n@@ -867,7 +963,7 @@ mod test {\n         let a: TrieSet = vec![1, 2, 3].into_iter().collect();\n         let b: TrieSet = vec![3, 4, 5].into_iter().collect();\n \n-        let set: TrieSet = a - b;\n+        let set: TrieSet = &a - &b;\n         let v: Vec<uint> = set.iter().collect();\n         assert_eq!(v, vec![1u, 2]);\n     }"}]}