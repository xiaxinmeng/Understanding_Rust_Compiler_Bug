{"sha": "f95f835470f1c5b295d2486259e745eb8e859344", "node_id": "C_kwDOAAsO6NoAKGY5NWY4MzU0NzBmMWM1YjI5NWQyNDg2MjU5ZTc0NWViOGU4NTkzNDQ", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-01-31T02:46:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-31T02:46:25Z"}, "message": "Rollup merge of #107479 - compiler-errors:probe-can-call-ocx, r=BoxyUwU\n\nUse `ObligationCtxt::new_in_snapshot` in `satisfied_from_param_env`\n\nWe can evaluate nested `ConstEvaluatable` obligations in an evaluation probe, which will ICE if we use `ObligationCtxt::new`.\n\nFixes #107474\nFixes #106666\n\nr? `@BoxyUwU` but feel free to reassign\ncc `@JulianKnodt` who i think added this assertion code\n\nNot sure if the rustdoc test is needed, but can't hurt. They're the same root cause, though.", "tree": {"sha": "9b745562e3fba358ced07abe7b0b214d1f594a0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b745562e3fba358ced07abe7b0b214d1f594a0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f95f835470f1c5b295d2486259e745eb8e859344", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj2IEBCRBK7hj4Ov3rIwAAVV0IACGBK0SQyVmOCwxi1l/FKF1v\njvVVHyffqUVVK666746QIakP6ap6CIMFTAh06H8Ud70OPDKwhekEuzxOqXptCYlk\nPe3uuYkQe3ckCS6aGdqcw4sE44yAKKpvocWGAcJSVjZAs7JiuXHkPnrqBgaLOEQd\nK/L3kKYChbRCahdCxVkYddqh4rQAcIZ5IfMTVD2pGcuZk1xpeU5FQsS0cjrYyjOe\nZs6YHeljVzvY+HBvegtQ12KCsb3ewSL+32D6g2k53Ok53wj7W2un6OY7ofSQb3RC\n3/qYtNy4Of9xw218W1FJpSs1Yyot1uiQwaKKFFUr+qZkBlaA9KqN3tXzwAUss+w=\n=mdFX\n-----END PGP SIGNATURE-----\n", "payload": "tree 9b745562e3fba358ced07abe7b0b214d1f594a0a\nparent fbcaf046cc49b8fcb7af96b64293301be6936fad\nparent 343a359109a48f4ece657831bf0331e22d108800\nauthor Yuki Okushi <jtitor@2k36.org> 1675133185 +0900\ncommitter GitHub <noreply@github.com> 1675133185 +0900\n\nRollup merge of #107479 - compiler-errors:probe-can-call-ocx, r=BoxyUwU\n\nUse `ObligationCtxt::new_in_snapshot` in `satisfied_from_param_env`\n\nWe can evaluate nested `ConstEvaluatable` obligations in an evaluation probe, which will ICE if we use `ObligationCtxt::new`.\n\nFixes #107474\nFixes #106666\n\nr? `@BoxyUwU` but feel free to reassign\ncc `@JulianKnodt` who i think added this assertion code\n\nNot sure if the rustdoc test is needed, but can't hurt. They're the same root cause, though.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f95f835470f1c5b295d2486259e745eb8e859344", "html_url": "https://github.com/rust-lang/rust/commit/f95f835470f1c5b295d2486259e745eb8e859344", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f95f835470f1c5b295d2486259e745eb8e859344/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbcaf046cc49b8fcb7af96b64293301be6936fad", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbcaf046cc49b8fcb7af96b64293301be6936fad", "html_url": "https://github.com/rust-lang/rust/commit/fbcaf046cc49b8fcb7af96b64293301be6936fad"}, {"sha": "343a359109a48f4ece657831bf0331e22d108800", "url": "https://api.github.com/repos/rust-lang/rust/commits/343a359109a48f4ece657831bf0331e22d108800", "html_url": "https://github.com/rust-lang/rust/commit/343a359109a48f4ece657831bf0331e22d108800"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "786473457ae43c27d9805256d2b478a0ae88ec45", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f95f835470f1c5b295d2486259e745eb8e859344/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f95f835470f1c5b295d2486259e745eb8e859344/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=f95f835470f1c5b295d2486259e745eb8e859344", "patch": "@@ -219,7 +219,7 @@ fn satisfied_from_param_env<'tcx>(\n     }\n \n     if let Some(Ok(c)) = single_match {\n-        let ocx = ObligationCtxt::new(infcx);\n+        let ocx = ObligationCtxt::new_in_snapshot(infcx);\n         assert!(ocx.eq(&ObligationCause::dummy(), param_env, c.ty(), ct.ty()).is_ok());\n         assert!(ocx.eq(&ObligationCause::dummy(), param_env, c, ct).is_ok());\n         assert!(ocx.select_all_or_error().is_empty());"}, {"sha": "c9408ef3360b420de00d3aeb814db1de0433543c", "filename": "tests/rustdoc/document-item-with-associated-const-in-where-clause.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f95f835470f1c5b295d2486259e745eb8e859344/tests%2Frustdoc%2Fdocument-item-with-associated-const-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f95f835470f1c5b295d2486259e745eb8e859344/tests%2Frustdoc%2Fdocument-item-with-associated-const-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fdocument-item-with-associated-const-in-where-clause.rs?ref=f95f835470f1c5b295d2486259e745eb8e859344", "patch": "@@ -0,0 +1,17 @@\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+pub trait Enumerable {\n+    const N: usize;\n+}\n+\n+#[derive(Clone)]\n+pub struct SymmetricGroup<S>\n+where\n+    S: Enumerable,\n+    [(); S::N]: Sized,\n+{\n+    _phantom: std::marker::PhantomData<S>,\n+}\n+\n+fn main() {}"}, {"sha": "0ba0c5a72efbd8f9adfbeb3e656d30d588c75fac", "filename": "tests/ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f95f835470f1c5b295d2486259e745eb8e859344/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsingle-satisfied-ConstEvaluatable-in-probe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f95f835470f1c5b295d2486259e745eb8e859344/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsingle-satisfied-ConstEvaluatable-in-probe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsingle-satisfied-ConstEvaluatable-in-probe.rs?ref=f95f835470f1c5b295d2486259e745eb8e859344", "patch": "@@ -0,0 +1,39 @@\n+// check-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(generic_const_exprs)]\n+\n+use std::marker::PhantomData;\n+\n+pub trait Bytes {\n+    const BYTES: usize;\n+}\n+\n+#[derive(Clone, Debug)]\n+pub struct Conster<OT>\n+where\n+    OT: Bytes,\n+    [(); OT::BYTES]: Sized,\n+{\n+    _offset_type: PhantomData<fn(OT) -> OT>,\n+}\n+\n+impl<OT> Conster<OT>\n+where\n+    OT: Bytes,\n+    [(); OT::BYTES]: Sized,\n+{\n+    pub fn new() -> Self {\n+        Conster { _offset_type: PhantomData }\n+    }\n+}\n+\n+pub fn make_conster<COT>() -> Conster<COT>\n+where\n+    COT: Bytes,\n+    [(); COT::BYTES]: Sized,\n+{\n+    Conster::new()\n+}\n+\n+fn main() {}"}]}