{"sha": "11b1439380d2e7e915207cb708e78a9060af82b8", "node_id": "C_kwDOAAsO6NoAKDExYjE0MzkzODBkMmU3ZTkxNTIwN2NiNzA4ZTc4YTkwNjBhZjgyYjg", "commit": {"author": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2022-10-07T16:08:56Z"}, "committer": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2022-10-27T22:58:54Z"}, "message": "Update tests based on feedback", "tree": {"sha": "cf690ca9131665f06ea5db1660d2ab9d73ebadfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf690ca9131665f06ea5db1660d2ab9d73ebadfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11b1439380d2e7e915207cb708e78a9060af82b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11b1439380d2e7e915207cb708e78a9060af82b8", "html_url": "https://github.com/rust-lang/rust/commit/11b1439380d2e7e915207cb708e78a9060af82b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11b1439380d2e7e915207cb708e78a9060af82b8/comments", "author": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a0ebca97eabaed14a36d90aa25327dcec2fa8b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a0ebca97eabaed14a36d90aa25327dcec2fa8b1", "html_url": "https://github.com/rust-lang/rust/commit/8a0ebca97eabaed14a36d90aa25327dcec2fa8b1"}], "stats": {"total": 81, "additions": 48, "deletions": 33}, "files": [{"sha": "a6f928f3b1bac653f2f95d4156331b090b30f3dc", "filename": "src/test/ui/async-await/in-trait/async-associated-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11b1439380d2e7e915207cb708e78a9060af82b8/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b1439380d2e7e915207cb708e78a9060af82b8/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.rs?ref=11b1439380d2e7e915207cb708e78a9060af82b8", "patch": "@@ -1,3 +1,5 @@\n+// check-fail\n+// known-bug: #102682\n // edition: 2021\n \n #![feature(async_fn_in_trait)]\n@@ -18,7 +20,5 @@ impl<'a, 'b, T: Debug + Sized + 'b, U: 'a> MyTrait<'a, 'b, T> for U {\n         (self, key)\n     }\n }\n-//~^^^^ ERROR cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-//~| ERROR cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n \n fn main() {}"}, {"sha": "0985150eee0decc8fa070500d0e94fa030e875e6", "filename": "src/test/ui/async-await/in-trait/async-associated-types.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/11b1439380d2e7e915207cb708e78a9060af82b8/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11b1439380d2e7e915207cb708e78a9060af82b8/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.stderr?ref=11b1439380d2e7e915207cb708e78a9060af82b8", "patch": "@@ -1,51 +1,51 @@\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/async-associated-types.rs:17:43\n+  --> $DIR/async-associated-types.rs:19:43\n    |\n LL |     async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n    |                                           ^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n-  --> $DIR/async-associated-types.rs:14:6\n+  --> $DIR/async-associated-types.rs:16:6\n    |\n LL | impl<'a, 'b, T: Debug + Sized + 'b, U: 'a> MyTrait<'a, 'b, T> for U {\n    |      ^^\n note: ...so that the types are compatible\n-  --> $DIR/async-associated-types.rs:17:43\n+  --> $DIR/async-associated-types.rs:19:43\n    |\n LL |     async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n    |                                           ^^^^^^^^^^^^^^\n    = note: expected `(&'a U, &'b T)`\n               found `(&U, &T)`\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that the types are compatible\n-  --> $DIR/async-associated-types.rs:17:43\n+  --> $DIR/async-associated-types.rs:19:43\n    |\n LL |     async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n    |                                           ^^^^^^^^^^^^^^\n    = note: expected `MyTrait<'static, 'static, T>`\n               found `MyTrait<'_, '_, T>`\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n-  --> $DIR/async-associated-types.rs:17:43\n+  --> $DIR/async-associated-types.rs:19:43\n    |\n LL |     async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n    |                                           ^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'b` as defined here...\n-  --> $DIR/async-associated-types.rs:14:10\n+  --> $DIR/async-associated-types.rs:16:10\n    |\n LL | impl<'a, 'b, T: Debug + Sized + 'b, U: 'a> MyTrait<'a, 'b, T> for U {\n    |          ^^\n note: ...so that the types are compatible\n-  --> $DIR/async-associated-types.rs:17:43\n+  --> $DIR/async-associated-types.rs:19:43\n    |\n LL |     async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n    |                                           ^^^^^^^^^^^^^^\n    = note: expected `(&'a U, &'b T)`\n               found `(&U, &T)`\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that the types are compatible\n-  --> $DIR/async-associated-types.rs:17:43\n+  --> $DIR/async-associated-types.rs:19:43\n    |\n LL |     async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n    |                                           ^^^^^^^^^^^^^^"}, {"sha": "10387f09f0e9d056bdaa74faef9d9efbf5a6aa26", "filename": "src/test/ui/async-await/in-trait/async-example.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/11b1439380d2e7e915207cb708e78a9060af82b8/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b1439380d2e7e915207cb708e78a9060af82b8/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example.rs?ref=11b1439380d2e7e915207cb708e78a9060af82b8", "patch": "@@ -6,12 +6,27 @@\n \n trait MyTrait {\n     async fn foo(&self) -> i32;\n+    async fn bar(&self) -> i32;\n }\n \n impl MyTrait for i32 {\n     async fn foo(&self) -> i32 {\n         *self\n     }\n+\n+    async fn bar(&self) -> i32 {\n+        self.foo().await\n+    }\n }\n \n-fn main() {}\n+fn main() {\n+    let x = 5;\n+    // Calling from non-async context\n+    let _ = x.foo();\n+    let _ = x.bar();\n+    // Calling from async block in non-async context\n+    async {\n+        let _ = x.foo();\n+        let _ = x.bar();\n+    };\n+}"}, {"sha": "a73d55adfeced13a9f9d9becb8e16d500ef4ae09", "filename": "src/test/ui/async-await/in-trait/async-generics-and-bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11b1439380d2e7e915207cb708e78a9060af82b8/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b1439380d2e7e915207cb708e78a9060af82b8/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.rs?ref=11b1439380d2e7e915207cb708e78a9060af82b8", "patch": "@@ -1,3 +1,5 @@\n+// check-fail\n+// known-bug: #102682\n // edition: 2021\n \n #![feature(async_fn_in_trait)]\n@@ -9,8 +11,6 @@ use std::hash::Hash;\n trait MyTrait<T, U> {\n     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n }\n-//~^^ ERROR the parameter type `U` may not live long enough\n-//~| ERROR the parameter type `T` may not live long enough\n \n impl<T, U> MyTrait<T, U> for (T, U) {\n     async fn foo(&self) -> &(T, U) {"}, {"sha": "5c8d64fc6cb4c858810b1ea013dc2b3a2cb5f855", "filename": "src/test/ui/async-await/in-trait/async-generics-and-bounds.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11b1439380d2e7e915207cb708e78a9060af82b8/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11b1439380d2e7e915207cb708e78a9060af82b8/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.stderr?ref=11b1439380d2e7e915207cb708e78a9060af82b8", "patch": "@@ -1,33 +1,33 @@\n error[E0311]: the parameter type `U` may not live long enough\n-  --> $DIR/async-generics-and-bounds.rs:10:28\n+  --> $DIR/async-generics-and-bounds.rs:12:28\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                            ^^^^^^^\n    |\n note: the parameter type `U` must be valid for the anonymous lifetime as defined here...\n-  --> $DIR/async-generics-and-bounds.rs:10:18\n+  --> $DIR/async-generics-and-bounds.rs:12:18\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                  ^\n note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n-  --> $DIR/async-generics-and-bounds.rs:10:28\n+  --> $DIR/async-generics-and-bounds.rs:12:28\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                            ^^^^^^^\n \n error[E0311]: the parameter type `T` may not live long enough\n-  --> $DIR/async-generics-and-bounds.rs:10:28\n+  --> $DIR/async-generics-and-bounds.rs:12:28\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                            ^^^^^^^\n    |\n note: the parameter type `T` must be valid for the anonymous lifetime as defined here...\n-  --> $DIR/async-generics-and-bounds.rs:10:18\n+  --> $DIR/async-generics-and-bounds.rs:12:18\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                  ^\n note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n-  --> $DIR/async-generics-and-bounds.rs:10:28\n+  --> $DIR/async-generics-and-bounds.rs:12:28\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                            ^^^^^^^"}, {"sha": "67000e5770ee8c2c5fa4641103777a3c52a259d6", "filename": "src/test/ui/async-await/in-trait/async-generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11b1439380d2e7e915207cb708e78a9060af82b8/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b1439380d2e7e915207cb708e78a9060af82b8/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.rs?ref=11b1439380d2e7e915207cb708e78a9060af82b8", "patch": "@@ -1,3 +1,5 @@\n+// check-fail\n+// known-bug: #102682\n // edition: 2021\n \n #![feature(async_fn_in_trait)]\n@@ -6,8 +8,6 @@\n trait MyTrait<T, U> {\n     async fn foo(&self) -> &(T, U);\n }\n-//~^^ ERROR the parameter type `U` may not live long enough\n-//~| ERROR the parameter type `T` may not live long enough\n \n impl<T, U> MyTrait<T, U> for (T, U) {\n     async fn foo(&self) -> &(T, U) {"}, {"sha": "6ae73d9e3a60175029633c5aac78ef88e8c281da", "filename": "src/test/ui/async-await/in-trait/async-generics.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11b1439380d2e7e915207cb708e78a9060af82b8/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11b1439380d2e7e915207cb708e78a9060af82b8/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.stderr?ref=11b1439380d2e7e915207cb708e78a9060af82b8", "patch": "@@ -1,33 +1,33 @@\n error[E0311]: the parameter type `U` may not live long enough\n-  --> $DIR/async-generics.rs:7:28\n+  --> $DIR/async-generics.rs:9:28\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                            ^^^^^^^\n    |\n note: the parameter type `U` must be valid for the anonymous lifetime as defined here...\n-  --> $DIR/async-generics.rs:7:18\n+  --> $DIR/async-generics.rs:9:18\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                  ^\n note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n-  --> $DIR/async-generics.rs:7:28\n+  --> $DIR/async-generics.rs:9:28\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                            ^^^^^^^\n \n error[E0311]: the parameter type `T` may not live long enough\n-  --> $DIR/async-generics.rs:7:28\n+  --> $DIR/async-generics.rs:9:28\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                            ^^^^^^^\n    |\n note: the parameter type `T` must be valid for the anonymous lifetime as defined here...\n-  --> $DIR/async-generics.rs:7:18\n+  --> $DIR/async-generics.rs:9:18\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                  ^\n note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n-  --> $DIR/async-generics.rs:7:28\n+  --> $DIR/async-generics.rs:9:28\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                            ^^^^^^^"}, {"sha": "3f7448cecd157fa006043471198734e2d5c56184", "filename": "src/test/ui/async-await/in-trait/async-lifetimes-and-bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11b1439380d2e7e915207cb708e78a9060af82b8/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b1439380d2e7e915207cb708e78a9060af82b8/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.rs?ref=11b1439380d2e7e915207cb708e78a9060af82b8", "patch": "@@ -1,3 +1,5 @@\n+// check-fail\n+// known-bug: #102682\n // edition: 2021\n \n #![feature(async_fn_in_trait)]\n@@ -8,8 +10,6 @@ use std::fmt::Debug;\n trait MyTrait<'a, 'b, T> {\n     async fn foo(&'a self, key: &'b T) -> (&'a Self, &'b T) where T: Debug + Sized;\n }\n-//~^^ ERROR  the parameter type `Self` may not live long enough\n-//~| ERROR the parameter type `T` may not live long enough\n \n impl<'a, 'b, T, U> MyTrait<'a, 'b, T> for U {\n     async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {"}, {"sha": "0f02420274333badbcbc3d84b3c0fd159a8bdcd6", "filename": "src/test/ui/async-await/in-trait/async-lifetimes-and-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11b1439380d2e7e915207cb708e78a9060af82b8/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11b1439380d2e7e915207cb708e78a9060af82b8/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.stderr?ref=11b1439380d2e7e915207cb708e78a9060af82b8", "patch": "@@ -1,5 +1,5 @@\n error[E0309]: the parameter type `Self` may not live long enough\n-  --> $DIR/async-lifetimes-and-bounds.rs:9:43\n+  --> $DIR/async-lifetimes-and-bounds.rs:11:43\n    |\n LL |     async fn foo(&'a self, key: &'b T) -> (&'a Self, &'b T) where T: Debug + Sized;\n    |                                           ^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     async fn foo(&'a self, key: &'b T) -> (&'a Self, &'b T) where T: Debug\n    = note: ...so that the reference type `&'a Self` does not outlive the data it points at\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/async-lifetimes-and-bounds.rs:9:43\n+  --> $DIR/async-lifetimes-and-bounds.rs:11:43\n    |\n LL |     async fn foo(&'a self, key: &'b T) -> (&'a Self, &'b T) where T: Debug + Sized;\n    |                                           ^^^^^^^^^^^^^^^^^ ...so that the reference type `&'b T` does not outlive the data it points at"}, {"sha": "5dc1672da68fe4505d9e8c52c16a635c819a5811", "filename": "src/test/ui/async-await/in-trait/async-lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11b1439380d2e7e915207cb708e78a9060af82b8/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b1439380d2e7e915207cb708e78a9060af82b8/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes.rs?ref=11b1439380d2e7e915207cb708e78a9060af82b8", "patch": "@@ -5,9 +5,9 @@\n \n trait MyTrait<'a, 'b, T> {\n     async fn foo(&'a self, key: &'b T) -> (&'a Self, &'b T);\n+    //~^ ERROR the parameter type `Self` may not live long enough\n+    //~| ERROR the parameter type `T` may not live long enough\n }\n-//~^^ ERROR the parameter type `Self` may not live long enough\n-//~| ERROR the parameter type `T` may not live long enough\n \n impl<'a, 'b, T, U> MyTrait<'a, 'b, T> for U {\n     async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {"}]}