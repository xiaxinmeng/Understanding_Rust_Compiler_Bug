{"sha": "883145f75d105abc32911f536738f66d74d32f4f", "node_id": "C_kwDOAAsO6NoAKDg4MzE0NWY3NWQxMDVhYmMzMjkxMWY1MzY3MzhmNjZkNzRkMzJmNGY", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-30T05:55:20Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-30T05:55:20Z"}, "message": "fix `TraitItemKind::expect_type` docs", "tree": {"sha": "1ff62c45325fc48c5d9b478f1d8b4f226a3655a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ff62c45325fc48c5d9b478f1d8b4f226a3655a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/883145f75d105abc32911f536738f66d74d32f4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/883145f75d105abc32911f536738f66d74d32f4f", "html_url": "https://github.com/rust-lang/rust/commit/883145f75d105abc32911f536738f66d74d32f4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/883145f75d105abc32911f536738f66d74d32f4f/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2ef837b6c52d1cb0977c7fc1e62af5ee546827e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2ef837b6c52d1cb0977c7fc1e62af5ee546827e", "html_url": "https://github.com/rust-lang/rust/commit/b2ef837b6c52d1cb0977c7fc1e62af5ee546827e"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "95422f74120d4a75e2cd81aed874b7d4ca99077f", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/883145f75d105abc32911f536738f66d74d32f4f/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883145f75d105abc32911f536738f66d74d32f4f/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=883145f75d105abc32911f536738f66d74d32f4f", "patch": "@@ -2288,7 +2288,7 @@ impl<'hir> TraitItem<'hir> {\n         (ty, trfn)\n     }\n \n-    /// Expect an [`TraitItemKind::ExternCrate`] or panic.\n+    /// Expect an [`TraitItemKind::Type`] or panic.\n     #[track_caller]\n     pub fn expect_type(&self) -> (GenericBounds<'hir>, Option<&'hir Ty<'hir>>) {\n         let TraitItemKind::Type(bounds, ty) = self.kind else { self.expect_failed(\"a type\") };"}]}