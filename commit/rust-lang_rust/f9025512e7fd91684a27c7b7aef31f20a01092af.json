{"sha": "f9025512e7fd91684a27c7b7aef31f20a01092af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MDI1NTEyZTdmZDkxNjg0YTI3YzdiN2FlZjMxZjIwYTAxMDkyYWY=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-12-07T23:55:00Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-01-28T13:51:43Z"}, "message": "Add `SEMICOLON_IN_EXPRESSIONS_FROM_MACROS` lint\n\ncc #79813\n\nThis PR adds an allow-by-default future-compatibility lint\n`SEMICOLON_IN_EXPRESSIONS_FROM_MACROS`. It fires when a trailing semicolon in a\nmacro body is ignored due to the macro being used in expression\nposition:\n\n```rust\nmacro_rules! foo {\n    () => {\n        true; // WARN\n    }\n}\n\nfn main() {\n    let val = match true {\n        true => false,\n        _ => foo!()\n    };\n}\n```\n\nThe lint takes its level from the macro call site, and\ncan be allowed for a particular macro by adding\n`#[allow(semicolon_in_expressions_from_macros)]`.\n\nThe lint is set to warn for all internal rustc crates (when being built\nby a stage1 compiler). After the next beta bump, we can enable\nthe lint for the bootstrap compiler as well.", "tree": {"sha": "569a94a5b18a0fc7d6e1daf0d6476623c7cf2cc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/569a94a5b18a0fc7d6e1daf0d6476623c7cf2cc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9025512e7fd91684a27c7b7aef31f20a01092af", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmASwYwACgkQtAh+UQ6Y\nsWQ2bBAAlWf96I4iNRjs8B65Xmbp7yN1UWN0eI7th6XRPypVH+RXRHlE1iBXq0xj\nQRvpsRHXC22vdPA+4mVVSiv265JfRm7SKcy4XN9z15PT9iJE8T5byxi4QYufuKWQ\ne2R3rbF2V9fyR+lZJMHlVUwq5TUp5lH3d3pG5FghSt0UuNrVdx5pKiyLg1jWFLmn\niNd1VobdOEJu7DYz7GwG/YTt1cD8z6B1LqwYKv1KjW7W3rrf0K6IdUkhLRF+UZqf\ntoQVTk2uiyup8TVxD5bBMP2FkTkhyN5QnLq4uVGtlYlr9quDYqq2wqkUrfNAZ8je\nyZ8cMk030/dbHIFrw/9X4onSng4YNdIV12QbVVf0LdWivKLt/2zBgnwkC4qe1DcD\n+62JPnAT0aOACqCSuBcr71BtR9mhc/hIiGdK7JNV79cbWL/4QFLcp/cVJ7GUPbrQ\nWAHiYBEjG1uoNDVjE55hrCQ34tMAWnj/tre0qAjgCBK2a8UTGs4qXNvm4kClKUzT\nrcETsFglcT5b0XpiECqgOKcgeNdv/37Vci6ZgJt7k5FXXG4RuG8iAo9iUR07anty\nmuohilfJQbafdnnaFxORcVlFTN3DocemzWZN7qAz/NdkuD6rCmZBbubxgekmmyVS\nDKjren/b2XpaHqPe8Akg1hTDRYXdZFug1Gi8xfpHr097w+VMRgU=\n=bzE1\n-----END PGP SIGNATURE-----", "payload": "tree 569a94a5b18a0fc7d6e1daf0d6476623c7cf2cc6\nparent 0e190206e2ff0c13d64701d9b4145bf89a2d0cab\nauthor Aaron Hill <aa1ronham@gmail.com> 1607385300 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1611841903 -0500\n\nAdd `SEMICOLON_IN_EXPRESSIONS_FROM_MACROS` lint\n\ncc #79813\n\nThis PR adds an allow-by-default future-compatibility lint\n`SEMICOLON_IN_EXPRESSIONS_FROM_MACROS`. It fires when a trailing semicolon in a\nmacro body is ignored due to the macro being used in expression\nposition:\n\n```rust\nmacro_rules! foo {\n    () => {\n        true; // WARN\n    }\n}\n\nfn main() {\n    let val = match true {\n        true => false,\n        _ => foo!()\n    };\n}\n```\n\nThe lint takes its level from the macro call site, and\ncan be allowed for a particular macro by adding\n`#[allow(semicolon_in_expressions_from_macros)]`.\n\nThe lint is set to warn for all internal rustc crates (when being built\nby a stage1 compiler). After the next beta bump, we can enable\nthe lint for the bootstrap compiler as well.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9025512e7fd91684a27c7b7aef31f20a01092af", "html_url": "https://github.com/rust-lang/rust/commit/f9025512e7fd91684a27c7b7aef31f20a01092af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9025512e7fd91684a27c7b7aef31f20a01092af/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e190206e2ff0c13d64701d9b4145bf89a2d0cab", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e190206e2ff0c13d64701d9b4145bf89a2d0cab", "html_url": "https://github.com/rust-lang/rust/commit/0e190206e2ff0c13d64701d9b4145bf89a2d0cab"}], "stats": {"total": 151, "additions": 150, "deletions": 1}, "files": [{"sha": "992ebdb801af7c4c599f4f5f9dd6d550e54b9dfa", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9025512e7fd91684a27c7b7aef31f20a01092af/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f9025512e7fd91684a27c7b7aef31f20a01092af/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f9025512e7fd91684a27c7b7aef31f20a01092af", "patch": "@@ -3746,6 +3746,7 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_feature\",\n  \"rustc_lexer\",\n+ \"rustc_lint_defs\",\n  \"rustc_macros\",\n  \"rustc_parse\",\n  \"rustc_serialize\","}, {"sha": "7413b0d9431f954cbb3c5d7382ad00fe9b1bed89", "filename": "compiler/rustc_expand/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9025512e7fd91684a27c7b7aef31f20a01092af/compiler%2Frustc_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f9025512e7fd91684a27c7b7aef31f20a01092af/compiler%2Frustc_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2FCargo.toml?ref=f9025512e7fd91684a27c7b7aef31f20a01092af", "patch": "@@ -18,6 +18,7 @@ rustc_attr = { path = \"../rustc_attr\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n rustc_feature = { path = \"../rustc_feature\" }\n+rustc_lint_defs = { path = \"../rustc_lint_defs\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_lexer = { path = \"../rustc_lexer\" }\n rustc_parse = { path = \"../rustc_parse\" }"}, {"sha": "73fbde70bda9fcccfad032403ed8b1bf981e22fc", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f9025512e7fd91684a27c7b7aef31f20a01092af/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9025512e7fd91684a27c7b7aef31f20a01092af/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=f9025512e7fd91684a27c7b7aef31f20a01092af", "patch": "@@ -11,12 +11,14 @@ use crate::mbe::transcribe::transcribe;\n use rustc_ast as ast;\n use rustc_ast::token::{self, NonterminalKind, NtTT, Token, TokenKind::*};\n use rustc_ast::tokenstream::{DelimSpan, TokenStream};\n+use rustc_ast::NodeId;\n use rustc_ast_pretty::pprust;\n use rustc_attr::{self as attr, TransparencyError};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_feature::Features;\n+use rustc_lint_defs::builtin::SEMICOLON_IN_EXPRESSIONS_FROM_MACROS;\n use rustc_parse::parser::Parser;\n use rustc_session::parse::ParseSess;\n use rustc_session::Session;\n@@ -37,6 +39,7 @@ crate struct ParserAnyMacro<'a> {\n     site_span: Span,\n     /// The ident of the macro we're parsing\n     macro_ident: Ident,\n+    lint_node_id: NodeId,\n     arm_span: Span,\n }\n \n@@ -110,7 +113,8 @@ fn emit_frag_parse_err(\n \n impl<'a> ParserAnyMacro<'a> {\n     crate fn make(mut self: Box<ParserAnyMacro<'a>>, kind: AstFragmentKind) -> AstFragment {\n-        let ParserAnyMacro { site_span, macro_ident, ref mut parser, arm_span } = *self;\n+        let ParserAnyMacro { site_span, macro_ident, ref mut parser, lint_node_id, arm_span } =\n+            *self;\n         let snapshot = &mut parser.clone();\n         let fragment = match parse_ast_fragment(parser, kind) {\n             Ok(f) => f,\n@@ -124,6 +128,12 @@ impl<'a> ParserAnyMacro<'a> {\n         // `macro_rules! m { () => { panic!(); } }` isn't parsed by `.parse_expr()`,\n         // but `m!()` is allowed in expression positions (cf. issue #34706).\n         if kind == AstFragmentKind::Expr && parser.token == token::Semi {\n+            parser.sess.buffer_lint(\n+                SEMICOLON_IN_EXPRESSIONS_FROM_MACROS,\n+                parser.token.span,\n+                lint_node_id,\n+                \"trailing semicolon in macro used in expression position\",\n+            );\n             parser.bump();\n         }\n \n@@ -276,6 +286,7 @@ fn generic_extension<'cx>(\n \n                 let mut p = Parser::new(sess, tts, false, None);\n                 p.last_type_ascription = cx.current_expansion.prior_type_ascription;\n+                let lint_node_id = cx.resolver.lint_node_id(cx.current_expansion.id);\n \n                 // Let the context choose how to interpret the result.\n                 // Weird, but useful for X-macros.\n@@ -287,6 +298,7 @@ fn generic_extension<'cx>(\n                     // macro leaves unparsed tokens.\n                     site_span: sp,\n                     macro_ident: name,\n+                    lint_node_id,\n                     arm_span,\n                 });\n             }"}, {"sha": "a8bf1ce51bb74e589bfa295230ed7d458bcdeb80", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f9025512e7fd91684a27c7b7aef31f20a01092af/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9025512e7fd91684a27c7b7aef31f20a01092af/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=f9025512e7fd91684a27c7b7aef31f20a01092af", "patch": "@@ -1,3 +1,4 @@\n+// ignore-tidy-filelength\n //! Some lints that are built in to the compiler.\n //!\n //! These are the built-in lints that are emitted direct in the main\n@@ -2833,6 +2834,52 @@ declare_lint! {\n     \"detects `#[unstable]` on stable trait implementations for stable types\"\n }\n \n+declare_lint! {\n+    /// The `semicolon_in_expressions_from_macros` lint detects trailing semicolons\n+    /// in macro bodies when the macro is invoked in expression position.\n+    /// This was previous accepted, but is being phased out.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// #![deny(semicolon_in_expressions_from_macros)]\n+    /// macro_rules! foo {\n+    ///     () => { true; }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     let val = match true {\n+    ///         true => false,\n+    ///         _ => foo!()\n+    ///     };\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Previous, Rust ignored trailing semicolon in a macro\n+    /// body when a macro was invoked in expression position.\n+    /// However, this makes the treatment of semicolons in the language\n+    /// inconsistent, and could lead to unexpected runtime behavior\n+    /// in some circumstances (e.g. if the macro author expects\n+    /// a value to be dropped).\n+    ///\n+    /// This is a [future-incompatible] lint to transition this\n+    /// to a hard error in the future. See [issue #79813] for more details.\n+    ///\n+    /// [issue #79813]: https://github.com/rust-lang/rust/issues/79813\n+    /// [future-incompatible]: ../index.md#future-incompatible-lints\n+    pub SEMICOLON_IN_EXPRESSIONS_FROM_MACROS,\n+    Allow,\n+    \"trailing semicolon in macro body used as expression\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #79813 <https://github.com/rust-lang/rust/issues/79813>\",\n+        edition: None,\n+    };\n+}\n+\n declare_lint_pass! {\n     /// Does nothing as a lint pass, but registers some `Lint`s\n     /// that are used by other parts of the compiler.\n@@ -2920,6 +2967,7 @@ declare_lint_pass! {\n         USELESS_DEPRECATED,\n         UNSUPPORTED_NAKED_FUNCTIONS,\n         MISSING_ABI,\n+        SEMICOLON_IN_EXPRESSIONS_FROM_MACROS,\n     ]\n }\n "}, {"sha": "d0adee2429d9aecb48de0e1c576e0132544eef90", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9025512e7fd91684a27c7b7aef31f20a01092af/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9025512e7fd91684a27c7b7aef31f20a01092af/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=f9025512e7fd91684a27c7b7aef31f20a01092af", "patch": "@@ -344,6 +344,8 @@ impl<'a> ResolverExpand for Resolver<'a> {\n     }\n \n     fn lint_node_id(&mut self, expn_id: ExpnId) -> NodeId {\n+        // FIXME - make this more precise. This currently returns the NodeId of the\n+        // nearest closing item - we should try to return the closest parent of the ExpnId\n         self.invocation_parents\n             .get(&expn_id)\n             .map_or(ast::CRATE_NODE_ID, |id| self.def_id_to_node_id[*id])"}, {"sha": "8576f57959a6f078c02572dba2576aa97f8e4f4e", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9025512e7fd91684a27c7b7aef31f20a01092af/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/f9025512e7fd91684a27c7b7aef31f20a01092af/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=f9025512e7fd91684a27c7b7aef31f20a01092af", "patch": "@@ -833,6 +833,7 @@ def build_bootstrap(self):\n         target_linker = self.get_toml(\"linker\", build_section)\n         if target_linker is not None:\n             env[\"RUSTFLAGS\"] += \" -C linker=\" + target_linker\n+        # cfg(bootstrap): Add `-Wsemicolon_in_expressions_from_macros` after the next beta bump\n         env[\"RUSTFLAGS\"] += \" -Wrust_2018_idioms -Wunused_lifetimes\"\n         if self.get_toml(\"deny-warnings\", \"rust\") != \"false\":\n             env[\"RUSTFLAGS\"] += \" -Dwarnings\""}, {"sha": "4b58e609f1560835e12e66523d802fb2f9cf17ec", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9025512e7fd91684a27c7b7aef31f20a01092af/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9025512e7fd91684a27c7b7aef31f20a01092af/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=f9025512e7fd91684a27c7b7aef31f20a01092af", "patch": "@@ -1250,6 +1250,12 @@ impl<'a> Builder<'a> {\n             // some code doesn't go through this `rustc` wrapper.\n             lint_flags.push(\"-Wrust_2018_idioms\");\n             lint_flags.push(\"-Wunused_lifetimes\");\n+            // cfg(bootstrap): unconditionally enable this warning after the next beta bump\n+            // This is currently disabled for the stage1 libstd, since build scripts\n+            // will end up using the bootstrap compiler (which doesn't yet support this lint)\n+            if compiler.stage != 0 && mode != Mode::Std {\n+                lint_flags.push(\"-Wsemicolon_in_expressions_from_macros\");\n+            }\n \n             if self.config.deny_warnings {\n                 lint_flags.push(\"-Dwarnings\");"}, {"sha": "6f9e6ec0a57ff0c17d87b33c10084e202c2bfe39", "filename": "src/test/ui/lint/semicolon-in-expressions-from-macros/allow-semicolon-in-expressions-from-macros.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f9025512e7fd91684a27c7b7aef31f20a01092af/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fallow-semicolon-in-expressions-from-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9025512e7fd91684a27c7b7aef31f20a01092af/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fallow-semicolon-in-expressions-from-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fallow-semicolon-in-expressions-from-macros.rs?ref=f9025512e7fd91684a27c7b7aef31f20a01092af", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+// Ensure that trailing semicolons are allowed by default\n+\n+macro_rules! foo {\n+    () => {\n+        true;\n+    }\n+}\n+\n+fn main() {\n+    let val = match true {\n+        true => false,\n+        _ => foo!()\n+    };\n+}"}, {"sha": "605d5a0309cfcf1fb33f6a64c2a92ec092ace3ca", "filename": "src/test/ui/lint/semicolon-in-expressions-from-macros/semicolon-in-expressions-from-macros.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f9025512e7fd91684a27c7b7aef31f20a01092af/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9025512e7fd91684a27c7b7aef31f20a01092af/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.rs?ref=f9025512e7fd91684a27c7b7aef31f20a01092af", "patch": "@@ -0,0 +1,30 @@\n+// check-pass\n+#![warn(semicolon_in_expressions_from_macros)]\n+\n+#[allow(dead_code)]\n+macro_rules! foo {\n+    ($val:ident) => {\n+        true; //~ WARN trailing\n+              //~| WARN this was previously\n+              //~| WARN trailing\n+              //~| WARN this was previously\n+    }\n+}\n+\n+fn main() {\n+    // This `allow` doesn't work\n+    #[allow(semicolon_in_expressions_from_macros)]\n+    let _ = {\n+        foo!(first)\n+    };\n+\n+    // This 'allow' doesn't work either\n+    #[allow(semicolon_in_expressions_from_macros)]\n+    let _ = foo!(second);\n+\n+    // But this 'allow' does\n+    #[allow(semicolon_in_expressions_from_macros)]\n+    fn inner() {\n+        let _ = foo!(third);\n+    }\n+}"}, {"sha": "6f9f879661a41062654376c6945b8f967d9aa6aa", "filename": "src/test/ui/lint/semicolon-in-expressions-from-macros/semicolon-in-expressions-from-macros.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f9025512e7fd91684a27c7b7aef31f20a01092af/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9025512e7fd91684a27c7b7aef31f20a01092af/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.stderr?ref=f9025512e7fd91684a27c7b7aef31f20a01092af", "patch": "@@ -0,0 +1,33 @@\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:7:13\n+   |\n+LL |         true;\n+   |             ^\n+...\n+LL |         foo!(first)\n+   |         ----------- in this macro invocation\n+   |\n+note: the lint level is defined here\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:2:9\n+   |\n+LL | #![warn(semicolon_in_expressions_from_macros)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:7:13\n+   |\n+LL |         true;\n+   |             ^\n+...\n+LL |     let _ = foo!(second);\n+   |             ------------ in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+warning: 2 warnings emitted\n+"}]}