{"sha": "5c1be4a4ba6c56394545a95e92e4ad6f62c3605f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMWJlNGE0YmE2YzU2Mzk0NTQ1YTk1ZTkyZTRhZDZmNjJjMzYwNWY=", "commit": {"author": {"name": "Karim Snj", "email": "karim.snj@gmail.com", "date": "2018-02-25T17:25:31Z"}, "committer": {"name": "Karim Snj", "email": "karim.snj@gmail.com", "date": "2018-02-25T17:25:31Z"}, "message": "lint: immutable only vars in while condition", "tree": {"sha": "26567aac82ce339a3279e74485fbdcf7bf34a3b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26567aac82ce339a3279e74485fbdcf7bf34a3b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c1be4a4ba6c56394545a95e92e4ad6f62c3605f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c1be4a4ba6c56394545a95e92e4ad6f62c3605f", "html_url": "https://github.com/rust-lang/rust/commit/5c1be4a4ba6c56394545a95e92e4ad6f62c3605f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c1be4a4ba6c56394545a95e92e4ad6f62c3605f/comments", "author": {"login": "kimsnj", "id": 302132, "node_id": "MDQ6VXNlcjMwMjEzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/302132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kimsnj", "html_url": "https://github.com/kimsnj", "followers_url": "https://api.github.com/users/kimsnj/followers", "following_url": "https://api.github.com/users/kimsnj/following{/other_user}", "gists_url": "https://api.github.com/users/kimsnj/gists{/gist_id}", "starred_url": "https://api.github.com/users/kimsnj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kimsnj/subscriptions", "organizations_url": "https://api.github.com/users/kimsnj/orgs", "repos_url": "https://api.github.com/users/kimsnj/repos", "events_url": "https://api.github.com/users/kimsnj/events{/privacy}", "received_events_url": "https://api.github.com/users/kimsnj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kimsnj", "id": 302132, "node_id": "MDQ6VXNlcjMwMjEzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/302132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kimsnj", "html_url": "https://github.com/kimsnj", "followers_url": "https://api.github.com/users/kimsnj/followers", "following_url": "https://api.github.com/users/kimsnj/following{/other_user}", "gists_url": "https://api.github.com/users/kimsnj/gists{/gist_id}", "starred_url": "https://api.github.com/users/kimsnj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kimsnj/subscriptions", "organizations_url": "https://api.github.com/users/kimsnj/orgs", "repos_url": "https://api.github.com/users/kimsnj/repos", "events_url": "https://api.github.com/users/kimsnj/events{/privacy}", "received_events_url": "https://api.github.com/users/kimsnj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5e233a720495c52af25d8f6dcc9e55e1193beb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5e233a720495c52af25d8f6dcc9e55e1193beb9", "html_url": "https://github.com/rust-lang/rust/commit/d5e233a720495c52af25d8f6dcc9e55e1193beb9"}], "stats": {"total": 183, "additions": 181, "deletions": 2}, "files": [{"sha": "fbfa598e77dd56859d2d6829dc062df818bc7a82", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c1be4a4ba6c56394545a95e92e4ad6f62c3605f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c1be4a4ba6c56394545a95e92e4ad6f62c3605f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=5c1be4a4ba6c56394545a95e92e4ad6f62c3605f", "patch": "@@ -521,6 +521,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         loops::UNUSED_COLLECT,\n         loops::WHILE_LET_LOOP,\n         loops::WHILE_LET_ON_ITERATOR,\n+        loops::WHILE_IMMUTABLE_CONDITION,\n         map_clone::MAP_CLONE,\n         matches::MATCH_AS_REF,\n         matches::MATCH_BOOL,"}, {"sha": "d70d32f2306753c3a2612e7f32c24faeab8f3277", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/5c1be4a4ba6c56394545a95e92e4ad6f62c3605f/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c1be4a4ba6c56394545a95e92e4ad6f62c3605f/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=5c1be4a4ba6c56394545a95e92e4ad6f62c3605f", "patch": "@@ -343,6 +343,27 @@ declare_lint! {\n     \"for loop over a range where one of the bounds is a mutable variable\"\n }\n \n+/// **What it does:** Checks whether variables used within while loop condition\n+/// can be (and are) mutated in the body.\n+///\n+/// **Why is this bad?** If the condition is unchanged, entering the body of the loop\n+/// will lead to an infinite loop.\n+///\n+/// **Known problems:** None\n+///\n+/// **Example:**\n+/// ```rust\n+/// let i = 0;\n+/// while i > 10 {\n+///    println!(\"let me loop forever!\");\n+/// }\n+/// ```\n+declare_lint! {\n+    pub WHILE_IMMUTABLE_CONDITION,\n+    Warn,\n+    \"variables used within while expression are not mutated in the body\"\n+}\n+\n #[derive(Copy, Clone)]\n pub struct Pass;\n \n@@ -364,7 +385,8 @@ impl LintPass for Pass {\n             WHILE_LET_ON_ITERATOR,\n             FOR_KV_MAP,\n             NEVER_LOOP,\n-            MUT_RANGE_BOUND\n+            MUT_RANGE_BOUND,\n+            WHILE_IMMUTABLE_CONDITION,\n         )\n     }\n }\n@@ -469,6 +491,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                 }\n             }\n         }\n+\n+        // check for while loops which conditions never change\n+        if let ExprWhile(ref cond, ref block, _) = expr.node {\n+            check_infinite_loop(cx, cond, block, expr);\n+        }\n     }\n \n     fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx Stmt) {\n@@ -662,6 +689,46 @@ fn check_for_loop<'a, 'tcx>(\n     detect_manual_memcpy(cx, pat, arg, body, expr);\n }\n \n+fn search_mutable_vars<'a, 'tcx> (\n+    cx: &LateContext<'a, 'tcx>,\n+    ex: &'tcx Expr,\n+    acc: &mut Vec<NodeId>,\n+) -> bool {\n+    match ex.node {\n+        ExprBinary(_, ref a, ref b) =>\n+            search_mutable_vars(cx, a, acc) && search_mutable_vars(cx, b, acc),\n+\n+        ExprUnary(_, ref a) => search_mutable_vars(cx, a, acc),\n+        ExprPath(_) => {\n+            if let Some(node_id) = check_for_mutability(cx, &ex) {\n+                acc.push(node_id);\n+            }\n+            true\n+        }\n+        ExprLit(_) => true,\n+\n+        // Skip if any method or function call is encountered\n+        _ => false\n+    }\n+}\n+\n+fn check_infinite_loop<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    cond: &'tcx Expr,\n+    _block: &'tcx Block,\n+    _expr: &'tcx Expr,\n+) {\n+    let mut mutable_vars = Vec::new();\n+    if search_mutable_vars(cx, cond, &mut mutable_vars) && mutable_vars.len() == 0 {\n+        span_lint(\n+            cx,\n+            WHILE_IMMUTABLE_CONDITION,\n+            cond.span,\n+            \"all variables in condition are immutable. This might lead to infinite loops.\"\n+        )\n+    }\n+}\n+\n fn same_var<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &Expr, var: ast::NodeId) -> bool {\n     if_chain! {\n         if let ExprPath(ref qpath) = expr.node;"}, {"sha": "e6078a8ef98ed6bfbd0afdde0e0e64964f6ba209", "filename": "tests/ui/infinite_loop.rs", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/5c1be4a4ba6c56394545a95e92e4ad6f62c3605f/tests%2Fui%2Finfinite_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c1be4a4ba6c56394545a95e92e4ad6f62c3605f/tests%2Fui%2Finfinite_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.rs?ref=5c1be4a4ba6c56394545a95e92e4ad6f62c3605f", "patch": "@@ -0,0 +1,89 @@\n+fn fn_val(i: i32) -> i32 { unimplemented!() }\n+fn fn_constref(i: &i32) -> i32 { unimplemented!() }\n+fn fn_mutref(i: &mut i32) { unimplemented!() }\n+fn foo() -> i32 { unimplemented!() }\n+\n+fn immutable_condition() {\n+    // Should warn when all vars mentionned are immutable\n+    let y = 0;\n+    while y < 10 {\n+        println!(\"KO - y is immutable\");\n+    }\n+\n+    let x = 0;\n+    while y < 10 && x < 3 {\n+        println!(\"KO - x and y immutable\");\n+    }\n+\n+    let cond = false;\n+    while !cond {\n+        println!(\"KO - cond immutable\");\n+    }\n+\n+    let mut i = 0;\n+    while y < 10 && i < 3 {\n+        i += 1;\n+        println!(\"OK - i is mutable\");\n+    }\n+\n+    let mut mut_cond = false;\n+    while !mut_cond || cond {\n+        mut_cond = true;\n+        println!(\"OK - mut_cond is mutable\");\n+    }\n+\n+    while foo() < x {\n+        println!(\"OK - Fn call results may vary\");\n+    }\n+\n+}\n+\n+fn unused_var() {\n+    // Should warn when a (mutable) var is not used in while body\n+    let (mut i, mut j) = (0, 0);\n+\n+    while i < 3 {\n+        j = 3;\n+        println!(\"KO - i not mentionned\");\n+    }\n+\n+    while i < 3 && j > 0 {\n+        println!(\"KO - i and j not mentionned\");\n+    }\n+\n+    while i < 3 {\n+        let mut i = 5;\n+        fn_mutref(&mut i);\n+        println!(\"KO - shadowed\");\n+    }\n+\n+    while i < 3 && j > 0 {\n+        i = 5;\n+        println!(\"OK - i in cond and mentionned\");\n+    }\n+}\n+\n+fn used_immutable() {\n+    let mut i = 0;\n+\n+    while i < 3 {\n+        fn_constref(&i);\n+        println!(\"KO - const reference\");\n+    }\n+\n+    while i < 3 {\n+        fn_val(i);\n+        println!(\"KO - passed by value\");\n+    }\n+\n+    while i < 3 {\n+        fn_mutref(&mut i);\n+        println!(\"OK - passed by mutable reference\");\n+    }\n+}\n+\n+fn main() {\n+    immutable_condition();\n+    unused_var();\n+    used_immutable();\n+}"}, {"sha": "ddc556f426cc67bb7ce55402e4b854f3f3a911d2", "filename": "tests/ui/infinite_loop.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5c1be4a4ba6c56394545a95e92e4ad6f62c3605f/tests%2Fui%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c1be4a4ba6c56394545a95e92e4ad6f62c3605f/tests%2Fui%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.stderr?ref=5c1be4a4ba6c56394545a95e92e4ad6f62c3605f", "patch": "@@ -0,0 +1,22 @@\n+error: all variables in condition are immutable. This might lead to infinite loops.\n+ --> $DIR/infinite_loop.rs:9:11\n+  |\n+9 |     while y < 10 {\n+  |           ^^^^^^\n+  |\n+  = note: `-D while-immutable-condition` implied by `-D warnings`\n+\n+error: all variables in condition are immutable. This might lead to infinite loops.\n+  --> $DIR/infinite_loop.rs:14:11\n+   |\n+14 |     while y < 10 && x < 3 {\n+   |           ^^^^^^^^^^^^^^^\n+\n+error: all variables in condition are immutable. This might lead to infinite loops.\n+  --> $DIR/infinite_loop.rs:19:11\n+   |\n+19 |     while !cond {\n+   |           ^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "2050012666207d7f3f7d641c03b65c4f06f1b86e", "filename": "tests/ui/never_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c1be4a4ba6c56394545a95e92e4ad6f62c3605f/tests%2Fui%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c1be4a4ba6c56394545a95e92e4ad6f62c3605f/tests%2Fui%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_loop.rs?ref=5c1be4a4ba6c56394545a95e92e4ad6f62c3605f", "patch": "@@ -1,6 +1,6 @@\n \n \n-#![allow(single_match, unused_assignments, unused_variables)]\n+#![allow(single_match, unused_assignments, unused_variables, while_immutable_condition)]\n \n fn test1() {\n     let mut x = 0;"}]}