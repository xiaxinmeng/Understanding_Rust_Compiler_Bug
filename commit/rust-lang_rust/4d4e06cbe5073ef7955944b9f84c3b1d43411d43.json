{"sha": "4d4e06cbe5073ef7955944b9f84c3b1d43411d43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNGUwNmNiZTUwNzNlZjc5NTU5NDRiOWY4NGMzYjFkNDM0MTFkNDM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-06T19:34:57Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-06T20:09:35Z"}, "message": "Fix atomic intrinsics", "tree": {"sha": "372ec793a8c24e2293fee9c23e2dd0ae54264066", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/372ec793a8c24e2293fee9c23e2dd0ae54264066"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d4e06cbe5073ef7955944b9f84c3b1d43411d43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d4e06cbe5073ef7955944b9f84c3b1d43411d43", "html_url": "https://github.com/rust-lang/rust/commit/4d4e06cbe5073ef7955944b9f84c3b1d43411d43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d4e06cbe5073ef7955944b9f84c3b1d43411d43/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "354eb0da9f15950ac2c53a0f69d102cc4ba6597f", "url": "https://api.github.com/repos/rust-lang/rust/commits/354eb0da9f15950ac2c53a0f69d102cc4ba6597f", "html_url": "https://github.com/rust-lang/rust/commit/354eb0da9f15950ac2c53a0f69d102cc4ba6597f"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "821f7858c902580ecd035bedaf8660cb23bc9a29", "filename": "src/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d4e06cbe5073ef7955944b9f84c3b1d43411d43/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4e06cbe5073ef7955944b9f84c3b1d43411d43/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=4d4e06cbe5073ef7955944b9f84c3b1d43411d43", "patch": "@@ -63,7 +63,7 @@ macro_rules! atomic_binop_return_old {\n     ($fx:expr, $op:ident<$T:ident>($ptr:ident, $src:ident) -> $ret:ident) => {\n         let clif_ty = $fx.clif_type($T).unwrap();\n         let old = $fx.bcx.ins().load(clif_ty, MemFlags::new(), $ptr, 0);\n-        let new = $fx.bcx.ins().band(old, $src);\n+        let new = $fx.bcx.ins().$op(old, $src);\n         $fx.bcx.ins().store(MemFlags::new(), new, $ptr, 0);\n         $ret.write_cvalue($fx, CValue::ByVal(old, $fx.layout_of($T)));\n     };\n@@ -440,7 +440,7 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             atomic_binop_return_old! (fx, band<T>(ptr, src) -> ret);\n         };\n         _ if intrinsic.starts_with(\"atomic_nand\"), <T> (v ptr, v src) {\n-            atomic_binop_return_old! (fx, bnand<T>(ptr, src) -> ret);\n+            atomic_binop_return_old! (fx, band_not<T>(ptr, src) -> ret);\n         };\n         _ if intrinsic.starts_with(\"atomic_or\"), <T> (v ptr, v src) {\n             atomic_binop_return_old! (fx, bor<T>(ptr, src) -> ret);"}]}