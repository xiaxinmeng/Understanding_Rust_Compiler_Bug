{"sha": "56a3da3bd0e2f6b5963913e998c74266cf7cff7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2YTNkYTNiZDBlMmY2YjU5NjM5MTNlOTk4Yzc0MjY2Y2Y3Y2ZmN2I=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-02-29T00:56:37Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-02-29T10:36:18Z"}, "message": "simplify boolean expressions", "tree": {"sha": "7f962fdd09085c6b5007964e623de9dcd4f1d00e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f962fdd09085c6b5007964e623de9dcd4f1d00e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56a3da3bd0e2f6b5963913e998c74266cf7cff7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56a3da3bd0e2f6b5963913e998c74266cf7cff7b", "html_url": "https://github.com/rust-lang/rust/commit/56a3da3bd0e2f6b5963913e998c74266cf7cff7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56a3da3bd0e2f6b5963913e998c74266cf7cff7b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0eb878d2aa6e3a1cb315f3f328681b26bb4bffdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0eb878d2aa6e3a1cb315f3f328681b26bb4bffdb", "html_url": "https://github.com/rust-lang/rust/commit/0eb878d2aa6e3a1cb315f3f328681b26bb4bffdb"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "9908a3049763a1eca04e6b8fbf3b3cf191e6b0e2", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56a3da3bd0e2f6b5963913e998c74266cf7cff7b/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a3da3bd0e2f6b5963913e998c74266cf7cff7b/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=56a3da3bd0e2f6b5963913e998c74266cf7cff7b", "patch": "@@ -536,7 +536,7 @@ impl<T: Ord> BinaryHeap<T> {\n             while child < end {\n                 let right = child + 1;\n                 // compare with the greater of the two children\n-                if right < end && !(hole.get(child) > hole.get(right)) {\n+                if right < end && hole.get(child) <= hole.get(right) {\n                     child = right;\n                 }\n                 // if we are already in order, stop.\n@@ -568,7 +568,7 @@ impl<T: Ord> BinaryHeap<T> {\n             while child < end {\n                 let right = child + 1;\n                 // compare with the greater of the two children\n-                if right < end && !(hole.get(child) > hole.get(right)) {\n+                if right < end && hole.get(child) <= hole.get(right) {\n                     child = right;\n                 }\n                 hole.move_to(child);"}, {"sha": "ab024a0265031f312172ad35293a66d210899729", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56a3da3bd0e2f6b5963913e998c74266cf7cff7b/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a3da3bd0e2f6b5963913e998c74266cf7cff7b/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=56a3da3bd0e2f6b5963913e998c74266cf7cff7b", "patch": "@@ -2135,7 +2135,7 @@ fn set_members_of_composite_type(\n /// Computes the type parameters for a type, if any, for the given metadata.\n fn compute_type_parameters(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>) -> Option<&'ll DIArray> {\n     if let ty::Adt(def, substs) = ty.kind {\n-        if !substs.types().next().is_none() {\n+        if substs.types().next().is_some() {\n             let generics = cx.tcx.generics_of(def.did);\n             let names = get_parameter_names(cx, generics);\n             let template_params: Vec<_> = substs"}, {"sha": "2dc1405f4e438358c000b67973b98e8ff243c39b", "filename": "src/librustc_codegen_ssa/mir/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56a3da3bd0e2f6b5963913e998c74266cf7cff7b/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a3da3bd0e2f6b5963913e998c74266cf7cff7b/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs?ref=56a3da3bd0e2f6b5963913e998c74266cf7cff7b", "patch": "@@ -48,7 +48,7 @@ pub struct DebugScope<D> {\n \n impl<D> DebugScope<D> {\n     pub fn is_valid(&self) -> bool {\n-        !self.scope_metadata.is_none()\n+        self.scope_metadata.is_some()\n     }\n }\n \n@@ -304,7 +304,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     ) -> Option<IndexVec<mir::Local, Vec<PerLocalVarDebugInfo<'tcx, Bx::DIVariable>>>> {\n         let full_debug_info = self.cx.sess().opts.debuginfo == DebugInfo::Full;\n \n-        if !(full_debug_info || !self.cx.sess().fewer_names()) {\n+        if !full_debug_info && self.cx.sess().fewer_names() {\n             return None;\n         }\n "}, {"sha": "f7141c56199d79e0401c179334fd4bb4c125256e", "filename": "src/librustc_infer/infer/freshen.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56a3da3bd0e2f6b5963913e998c74266cf7cff7b/src%2Flibrustc_infer%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a3da3bd0e2f6b5963913e998c74266cf7cff7b/src%2Flibrustc_infer%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ffreshen.rs?ref=56a3da3bd0e2f6b5963913e998c74266cf7cff7b", "patch": "@@ -143,9 +143,9 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n     }\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-        if !t.needs_infer()\n-            && !t.has_erasable_regions()\n-            && !(t.has_closure_types() && self.infcx.in_progress_tables.is_some())\n+        if !(t.needs_infer()\n+            || t.has_erasable_regions()\n+            || (t.has_closure_types() && self.infcx.in_progress_tables.is_some()))\n         {\n             return t;\n         }"}, {"sha": "766de56913217ef78f3029de2aefb1b4db4d4a3e", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56a3da3bd0e2f6b5963913e998c74266cf7cff7b/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a3da3bd0e2f6b5963913e998c74266cf7cff7b/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=56a3da3bd0e2f6b5963913e998c74266cf7cff7b", "patch": "@@ -1484,7 +1484,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         // Even if the type may have no inference variables, during\n         // type-checking closure types are in local tables only.\n-        if !self.in_progress_tables.is_some() || !ty.has_closure_types() {\n+        if self.in_progress_tables.is_none() || !ty.has_closure_types() {\n             if !(param_env, ty).has_local_value() {\n                 return ty.is_copy_modulo_regions(self.tcx, param_env, span);\n             }"}, {"sha": "bab468493df53ff962001aa145498e762d96e2bc", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56a3da3bd0e2f6b5963913e998c74266cf7cff7b/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a3da3bd0e2f6b5963913e998c74266cf7cff7b/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=56a3da3bd0e2f6b5963913e998c74266cf7cff7b", "patch": "@@ -551,7 +551,7 @@ impl Visitor<'tcx> for Checker<'tcx> {\n                     .emit();\n                 } else {\n                     let param_env = self.tcx.param_env(def_id);\n-                    if !can_type_implement_copy(self.tcx, param_env, ty).is_ok() {\n+                    if can_type_implement_copy(self.tcx, param_env, ty).is_err() {\n                         feature_err(\n                             &self.tcx.sess.parse_sess,\n                             sym::untagged_unions,"}, {"sha": "8a07a6fe8c9ac5e0d11efc714e970c0dcb8fd8df", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56a3da3bd0e2f6b5963913e998c74266cf7cff7b/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a3da3bd0e2f6b5963913e998c74266cf7cff7b/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=56a3da3bd0e2f6b5963913e998c74266cf7cff7b", "patch": "@@ -313,9 +313,9 @@ impl<'a> Resolver<'a> {\n                             }\n                         }\n \n-                        if !self.is_accessible_from(binding.vis, parent_scope.module) &&\n+                        if !(self.is_accessible_from(binding.vis, parent_scope.module) ||\n                        // Remove this together with `PUB_USE_OF_PRIVATE_EXTERN_CRATE`\n-                       !(self.last_import_segment && binding.is_extern_crate())\n+                       (self.last_import_segment && binding.is_extern_crate()))\n                         {\n                             self.privacy_errors.push(PrivacyError {\n                                 ident,"}, {"sha": "3f38ee5471081afeac9354c8c89dff56abd45876", "filename": "src/libstd/net/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56a3da3bd0e2f6b5963913e998c74266cf7cff7b/src%2Flibstd%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a3da3bd0e2f6b5963913e998c74266cf7cff7b/src%2Flibstd%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fparser.rs?ref=56a3da3bd0e2f6b5963913e998c74266cf7cff7b", "patch": "@@ -206,7 +206,7 @@ impl<'a> Parser<'a> {\n         }\n \n         // read `::` if previous code parsed less than 8 groups\n-        if !self.read_given_char(':').is_some() || !self.read_given_char(':').is_some() {\n+        if self.read_given_char(':').is_none() || self.read_given_char(':').is_none() {\n             return None;\n         }\n "}]}