{"sha": "02bf1ce9cc617979478aac09a95486696f2c4b36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYmYxY2U5Y2M2MTc5Nzk0NzhhYWMwOWE5NTQ4NjY5NmYyYzRiMzY=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-12-05T20:48:53Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-12-06T06:58:56Z"}, "message": "vec: More specialization for Extend<&T> for vec\n\nSpecialize to use copy_from_slice when extending a Vec with &[T] where\nT: Copy.", "tree": {"sha": "1e55a0c981baa4dd6159e3f5b687ee2d53d37683", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e55a0c981baa4dd6159e3f5b687ee2d53d37683"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02bf1ce9cc617979478aac09a95486696f2c4b36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02bf1ce9cc617979478aac09a95486696f2c4b36", "html_url": "https://github.com/rust-lang/rust/commit/02bf1ce9cc617979478aac09a95486696f2c4b36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02bf1ce9cc617979478aac09a95486696f2c4b36/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d14d74d5f7d39d1e2583bca231c26bbc0d4ee9a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d14d74d5f7d39d1e2583bca231c26bbc0d4ee9a0", "html_url": "https://github.com/rust-lang/rust/commit/d14d74d5f7d39d1e2583bca231c26bbc0d4ee9a0"}], "stats": {"total": 39, "additions": 33, "deletions": 6}, "files": [{"sha": "c9f9e513ef3d6f7a34e789eb1d839af1916ebb9e", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/02bf1ce9cc617979478aac09a95486696f2c4b36/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02bf1ce9cc617979478aac09a95486696f2c4b36/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=02bf1ce9cc617979478aac09a95486696f2c4b36", "patch": "@@ -1244,7 +1244,7 @@ impl<T: Clone> Vec<T> {\n     /// ```\n     #[stable(feature = \"vec_extend_from_slice\", since = \"1.6.0\")]\n     pub fn extend_from_slice(&mut self, other: &[T]) {\n-        self.extend(other.iter().cloned())\n+        self.spec_extend(other.iter())\n     }\n }\n \n@@ -1499,7 +1499,7 @@ impl<T> ops::DerefMut for Vec<T> {\n impl<T> FromIterator<T> for Vec<T> {\n     #[inline]\n     fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {\n-        <Self as SpecExtend<_>>::from_iter(iter.into_iter())\n+        <Self as SpecExtend<_, _>>::from_iter(iter.into_iter())\n     }\n }\n \n@@ -1572,12 +1572,12 @@ impl<T> Extend<T> for Vec<T> {\n }\n \n // Specialization trait used for Vec::from_iter and Vec::extend\n-trait SpecExtend<I> {\n+trait SpecExtend<T, I> {\n     fn from_iter(iter: I) -> Self;\n     fn spec_extend(&mut self, iter: I);\n }\n \n-impl<I, T> SpecExtend<I> for Vec<T>\n+impl<T, I> SpecExtend<T, I> for Vec<T>\n     where I: Iterator<Item=T>,\n {\n     default fn from_iter(mut iterator: I) -> Self {\n@@ -1607,7 +1607,7 @@ impl<I, T> SpecExtend<I> for Vec<T>\n     }\n }\n \n-impl<I, T> SpecExtend<I> for Vec<T>\n+impl<T, I> SpecExtend<T, I> for Vec<T>\n     where I: TrustedLen<Item=T>,\n {\n     fn from_iter(iterator: I) -> Self {\n@@ -1642,6 +1642,33 @@ impl<I, T> SpecExtend<I> for Vec<T>\n     }\n }\n \n+impl<'a, T: 'a, I> SpecExtend<&'a T, I> for Vec<T>\n+    where I: Iterator<Item=&'a T>,\n+          T: Clone,\n+{\n+    default fn from_iter(iterator: I) -> Self {\n+        SpecExtend::from_iter(iterator.cloned())\n+    }\n+\n+    default fn spec_extend(&mut self, iterator: I) {\n+        self.spec_extend(iterator.cloned())\n+    }\n+}\n+\n+impl<'a, T: 'a> SpecExtend<&'a T, slice::Iter<'a, T>> for Vec<T>\n+    where T: Copy,\n+{\n+    fn spec_extend(&mut self, iterator: slice::Iter<'a, T>) {\n+        let slice = iterator.as_slice();\n+        self.reserve(slice.len());\n+        unsafe {\n+            let len = self.len();\n+            self.set_len(len + slice.len());\n+            self.get_unchecked_mut(len..).copy_from_slice(slice);\n+        }\n+    }\n+}\n+\n impl<T> Vec<T> {\n     fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {\n         // This is the case for a general iterator.\n@@ -1669,7 +1696,7 @@ impl<T> Vec<T> {\n #[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n impl<'a, T: 'a + Copy> Extend<&'a T> for Vec<T> {\n     fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {\n-        self.extend(iter.into_iter().map(|&x| x))\n+        self.spec_extend(iter.into_iter())\n     }\n }\n "}]}