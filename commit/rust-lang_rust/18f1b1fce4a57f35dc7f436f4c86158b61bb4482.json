{"sha": "18f1b1fce4a57f35dc7f436f4c86158b61bb4482", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ZjFiMWZjZTRhNTdmMzVkYzdmNDM2ZjRjODYxNThiNjFiYjQ0ODI=", "commit": {"author": {"name": "djzin", "email": "noreply@github.com", "date": "2016-12-23T23:51:00Z"}, "committer": {"name": "djzin", "email": "noreply@github.com", "date": "2017-01-14T16:51:50Z"}, "message": "change argument for btree_range", "tree": {"sha": "db22198ee4f3a4fae0e1f5e955aa88808ffb21d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db22198ee4f3a4fae0e1f5e955aa88808ffb21d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18f1b1fce4a57f35dc7f436f4c86158b61bb4482", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18f1b1fce4a57f35dc7f436f4c86158b61bb4482", "html_url": "https://github.com/rust-lang/rust/commit/18f1b1fce4a57f35dc7f436f4c86158b61bb4482", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18f1b1fce4a57f35dc7f436f4c86158b61bb4482/comments", "author": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3711d2f9029126bfc5410fc273ff9f9f66d6e0a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3711d2f9029126bfc5410fc273ff9f9f66d6e0a5", "html_url": "https://github.com/rust-lang/rust/commit/3711d2f9029126bfc5410fc273ff9f9f66d6e0a5"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "e588c99d16913f2a5eebd40e5ac089e7d5c16e3b", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/18f1b1fce4a57f35dc7f436f4c86158b61bb4482/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18f1b1fce4a57f35dc7f436f4c86158b61bb4482/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=18f1b1fce4a57f35dc7f436f4c86158b61bb4482", "patch": "@@ -18,6 +18,7 @@ use core::{fmt, intrinsics, mem, ptr};\n \n use borrow::Borrow;\n use Bound::{self, Excluded, Included, Unbounded};\n+use range::RangeArgument;\n \n use super::node::{self, Handle, NodeRef, marker};\n use super::search;\n@@ -681,12 +682,11 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     #[unstable(feature = \"btree_range\",\n                reason = \"matches collection reform specification, waiting for dust to settle\",\n                issue = \"27787\")]\n-    pub fn range<Min: ?Sized + Ord, Max: ?Sized + Ord>(&self,\n-                                                       min: Bound<&Min>,\n-                                                       max: Bound<&Max>)\n-                                                       -> Range<K, V>\n-        where K: Borrow<Min> + Borrow<Max>\n+    pub fn range<T: ?Sized, R>(&self, range: R) -> Range<K, V>\n+        where T: Ord, K: Borrow<T>, R: RangeArgument<T>\n     {\n+        let min = range.start();\n+        let max = range.end();\n         let front = match min {\n             Included(key) => {\n                 match search::search_tree(self.root.as_ref(), key) {"}, {"sha": "f941b40dcf75dd34eacec4227a0ef956a7c0bf6f", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18f1b1fce4a57f35dc7f436f4c86158b61bb4482/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18f1b1fce4a57f35dc7f436f4c86158b61bb4482/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=18f1b1fce4a57f35dc7f436f4c86158b61bb4482", "patch": "@@ -21,7 +21,7 @@ use core::ops::{BitOr, BitAnd, BitXor, Sub};\n use borrow::Borrow;\n use btree_map::{BTreeMap, Keys};\n use super::Recover;\n-use Bound;\n+use range::RangeArgument;\n \n // FIXME(conventions): implement bounded iterators\n \n@@ -232,13 +232,10 @@ impl<T: Ord> BTreeSet<T> {\n     #[unstable(feature = \"btree_range\",\n                reason = \"matches collection reform specification, waiting for dust to settle\",\n                issue = \"27787\")]\n-    pub fn range<'a, Min: ?Sized + Ord, Max: ?Sized + Ord>(&'a self,\n-                                                           min: Bound<&Min>,\n-                                                           max: Bound<&Max>)\n-                                                           -> Range<'a, T>\n-        where T: Borrow<Min> + Borrow<Max>\n+    pub fn range<K: ?Sized, R>(&self, range: R) -> Range<T>\n+        where K: Ord, T: Borrow<K>, R: RangeArgument<K>\n     {\n-        Range { iter: self.map.range(min, max) }\n+        Range { iter: self.map.range(range) }\n     }\n }\n "}]}