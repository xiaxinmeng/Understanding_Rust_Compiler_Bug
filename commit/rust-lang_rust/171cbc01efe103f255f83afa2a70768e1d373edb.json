{"sha": "171cbc01efe103f255f83afa2a70768e1d373edb", "node_id": "C_kwDOAAsO6NoAKDE3MWNiYzAxZWZlMTAzZjI1NWY4M2FmYTJhNzA3NjhlMWQzNzNlZGI", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-10-17T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-10-18T18:51:22Z"}, "message": "Rename `needs_drop` to `needs_non_const_drop`", "tree": {"sha": "57c3806ee1c2146db40d41ef72ebd0aa173d3d6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57c3806ee1c2146db40d41ef72ebd0aa173d3d6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/171cbc01efe103f255f83afa2a70768e1d373edb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/171cbc01efe103f255f83afa2a70768e1d373edb", "html_url": "https://github.com/rust-lang/rust/commit/171cbc01efe103f255f83afa2a70768e1d373edb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/171cbc01efe103f255f83afa2a70768e1d373edb/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dab47dcd8267b8769421b46532414ec36d625e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dab47dcd8267b8769421b46532414ec36d625e3", "html_url": "https://github.com/rust-lang/rust/commit/5dab47dcd8267b8769421b46532414ec36d625e3"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "8cd75dd8e2841c5bc2c5322b674e21c83cec0ba1", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/171cbc01efe103f255f83afa2a70768e1d373edb/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/171cbc01efe103f255f83afa2a70768e1d373edb/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=171cbc01efe103f255f83afa2a70768e1d373edb", "patch": "@@ -39,7 +39,7 @@ type QualifResults<'mir, 'tcx, Q> =\n #[derive(Default)]\n pub struct Qualifs<'mir, 'tcx> {\n     has_mut_interior: Option<QualifResults<'mir, 'tcx, HasMutInterior>>,\n-    needs_drop: Option<QualifResults<'mir, 'tcx, NeedsNonConstDrop>>,\n+    needs_non_const_drop: Option<QualifResults<'mir, 'tcx, NeedsNonConstDrop>>,\n     indirectly_mutable: Option<IndirectlyMutableResults<'mir, 'tcx>>,\n }\n \n@@ -70,10 +70,10 @@ impl Qualifs<'mir, 'tcx> {\n         indirectly_mutable.get().contains(local)\n     }\n \n-    /// Returns `true` if `local` is `NeedsDrop` at the given `Location`.\n+    /// Returns `true` if `local` is `NeedsNonConstDrop` at the given `Location`.\n     ///\n     /// Only updates the cursor if absolutely necessary\n-    pub fn needs_drop(\n+    pub fn needs_non_const_drop(\n         &mut self,\n         ccx: &'mir ConstCx<'mir, 'tcx>,\n         local: Local,\n@@ -84,7 +84,7 @@ impl Qualifs<'mir, 'tcx> {\n             return false;\n         }\n \n-        let needs_drop = self.needs_drop.get_or_insert_with(|| {\n+        let needs_non_const_drop = self.needs_non_const_drop.get_or_insert_with(|| {\n             let ConstCx { tcx, body, .. } = *ccx;\n \n             FlowSensitiveAnalysis::new(NeedsNonConstDrop, ccx)\n@@ -93,8 +93,8 @@ impl Qualifs<'mir, 'tcx> {\n                 .into_results_cursor(&body)\n         });\n \n-        needs_drop.seek_before_primary_effect(location);\n-        needs_drop.get().contains(local) || self.indirectly_mutable(ccx, local, location)\n+        needs_non_const_drop.seek_before_primary_effect(location);\n+        needs_non_const_drop.get().contains(local) || self.indirectly_mutable(ccx, local, location)\n     }\n \n     /// Returns `true` if `local` is `HasMutInterior` at the given `Location`.\n@@ -172,7 +172,7 @@ impl Qualifs<'mir, 'tcx> {\n         };\n \n         ConstQualifs {\n-            needs_drop: self.needs_drop(ccx, RETURN_PLACE, return_loc),\n+            needs_non_const_drop: self.needs_non_const_drop(ccx, RETURN_PLACE, return_loc),\n             has_mut_interior: self.has_mut_interior(ccx, RETURN_PLACE, return_loc),\n             custom_eq,\n             error_occured,\n@@ -999,7 +999,7 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n             }\n \n             // Forbid all `Drop` terminators unless the place being dropped is a local with no\n-            // projections that cannot be `NeedsDrop`.\n+            // projections that cannot be `NeedsNonConstDrop`.\n             TerminatorKind::Drop { place: dropped_place, .. }\n             | TerminatorKind::DropAndReplace { place: dropped_place, .. } => {\n                 // If we are checking live drops after drop-elaboration, don't emit duplicate\n@@ -1019,15 +1019,15 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                     return;\n                 }\n \n-                let needs_drop = if let Some(local) = dropped_place.as_local() {\n+                let needs_non_const_drop = if let Some(local) = dropped_place.as_local() {\n                     // Use the span where the local was declared as the span of the drop error.\n                     err_span = self.body.local_decls[local].source_info.span;\n-                    self.qualifs.needs_drop(self.ccx, local, location)\n+                    self.qualifs.needs_non_const_drop(self.ccx, local, location)\n                 } else {\n                     true\n                 };\n \n-                if needs_drop {\n+                if needs_non_const_drop {\n                     self.check_op_spanned(\n                         ops::LiveDrop { dropped_at: Some(terminator.source_info.span) },\n                         err_span,"}, {"sha": "7a2be3c3bad329c8675c500b61fa3288218cce9b", "filename": "compiler/rustc_const_eval/src/transform/check_consts/post_drop_elaboration.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/171cbc01efe103f255f83afa2a70768e1d373edb/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/171cbc01efe103f255f83afa2a70768e1d373edb/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs?ref=171cbc01efe103f255f83afa2a70768e1d373edb", "patch": "@@ -97,7 +97,7 @@ impl Visitor<'tcx> for CheckLiveDrops<'mir, 'tcx> {\n                 // `src/test/ui/consts/control-flow/drop-pass.rs`; e.g., when an `Option<Vec<T>>` is\n                 // initialized with `None` and never changed, it still emits drop glue.\n                 // Hence we additionally check the qualifs here to allow more code to pass.\n-                if self.qualifs.needs_drop(self.ccx, dropped_place.local, location) {\n+                if self.qualifs.needs_non_const_drop(self.ccx, dropped_place.local, location) {\n                     // Use the span where the dropped local was declared for the error.\n                     let span = self.body.local_decls[dropped_place.local].source_info.span;\n                     self.check_live_drop(span);"}, {"sha": "689aa0993711f6c3e1a918c132cac8a8bb928300", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/171cbc01efe103f255f83afa2a70768e1d373edb/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/171cbc01efe103f255f83afa2a70768e1d373edb/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=171cbc01efe103f255f83afa2a70768e1d373edb", "patch": "@@ -21,7 +21,7 @@ pub fn in_any_value_of_ty(\n ) -> ConstQualifs {\n     ConstQualifs {\n         has_mut_interior: HasMutInterior::in_any_value_of_ty(cx, ty),\n-        needs_drop: NeedsNonConstDrop::in_any_value_of_ty(cx, ty),\n+        needs_non_const_drop: NeedsNonConstDrop::in_any_value_of_ty(cx, ty),\n         custom_eq: CustomEq::in_any_value_of_ty(cx, ty),\n         error_occured,\n     }\n@@ -108,7 +108,7 @@ impl Qualif for NeedsNonConstDrop {\n     const IS_CLEARED_ON_MOVE: bool = true;\n \n     fn in_qualifs(qualifs: &ConstQualifs) -> bool {\n-        qualifs.needs_drop\n+        qualifs.needs_non_const_drop\n     }\n \n     fn in_any_value_of_ty(cx: &ConstCx<'_, 'tcx>, mut ty: Ty<'tcx>) -> bool {"}, {"sha": "98f116a16e2b24041267cb48e48748c5b3fa2bc4", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/171cbc01efe103f255f83afa2a70768e1d373edb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/171cbc01efe103f255f83afa2a70768e1d373edb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=171cbc01efe103f255f83afa2a70768e1d373edb", "patch": "@@ -224,7 +224,7 @@ pub struct BorrowCheckResult<'tcx> {\n #[derive(Clone, Copy, Debug, Default, TyEncodable, TyDecodable, HashStable)]\n pub struct ConstQualifs {\n     pub has_mut_interior: bool,\n-    pub needs_drop: bool,\n+    pub needs_non_const_drop: bool,\n     pub custom_eq: bool,\n     pub error_occured: Option<ErrorReported>,\n }"}]}