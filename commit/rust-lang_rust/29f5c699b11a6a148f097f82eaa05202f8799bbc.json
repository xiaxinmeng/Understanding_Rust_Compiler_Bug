{"sha": "29f5c699b11a6a148f097f82eaa05202f8799bbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZjVjNjk5YjExYTZhMTQ4ZjA5N2Y4MmVhYTA1MjAyZjg3OTliYmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-27T00:29:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-27T00:29:50Z"}, "message": "Auto merge of #48449 - petrochenkov:uidiff, r=nikomatsakis\n\nAnonymize some line numbers in UI test output\n\nNew unstable flag `-Z ui-testing` is introduced. This flag changes diagnostic output of the compiler *in some way* making it more suitable for UI testing (this is intentionally vague).\nAt the moment this flag anonymizes line numbers at line starts thus solving the largest issue with UI test diffs. If diffs continue to be too noisy, some other tweaks could be applied (e.g. anonymizing lines/columns in `--> $DIR/file.rs:line:column`), but this needs some time and experience (we shouldn't diverge too much from the actual output in general).\n\nIf comment `// disable-ui-testing-normalization` is added to an UI test, then `-Z ui-testing` is not passed.\n\nCloses https://github.com/rust-lang/rust/issues/46643", "tree": {"sha": "5af1b0a10be866a44a3d7e510962aafdc6af5445", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5af1b0a10be866a44a3d7e510962aafdc6af5445"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29f5c699b11a6a148f097f82eaa05202f8799bbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29f5c699b11a6a148f097f82eaa05202f8799bbc", "html_url": "https://github.com/rust-lang/rust/commit/29f5c699b11a6a148f097f82eaa05202f8799bbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29f5c699b11a6a148f097f82eaa05202f8799bbc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bedbad61195d2eae69b43eca49c6d3e2aee8f208", "url": "https://api.github.com/repos/rust-lang/rust/commits/bedbad61195d2eae69b43eca49c6d3e2aee8f208", "html_url": "https://github.com/rust-lang/rust/commit/bedbad61195d2eae69b43eca49c6d3e2aee8f208"}, {"sha": "9f9183d34d411cf51645b91487de4a5191442b1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f9183d34d411cf51645b91487de4a5191442b1a", "html_url": "https://github.com/rust-lang/rust/commit/9f9183d34d411cf51645b91487de4a5191442b1a"}], "stats": {"total": 13586, "additions": 6878, "deletions": 6708}, "files": [{"sha": "919badfa4aa5efbe0bc9f72a9ec38c79f20a42a7", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1322,6 +1322,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n          epoch). Crates compiled with different epochs can be linked together.\"),\n     run_dsymutil: Option<bool> = (None, parse_opt_bool, [TRACKED],\n           \"run `dsymutil` and delete intermediate object files\"),\n+    ui_testing: bool = (false, parse_bool, [UNTRACKED],\n+          \"format compiler diagnostics in a way that's better suitable for UI testing\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "939154fac7ab0041cbfefdcca531fb93598e733d", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -909,21 +909,24 @@ pub fn build_session_with_codemap(sopts: config::Options,\n \n     let emitter: Box<Emitter> = match (sopts.error_format, emitter_dest) {\n         (config::ErrorOutputType::HumanReadable(color_config), None) => {\n-            Box::new(EmitterWriter::stderr(color_config,\n-                                           Some(codemap.clone()),\n-                                           false,\n-                                           sopts.debugging_opts.teach))\n+            Box::new(EmitterWriter::stderr(color_config, Some(codemap.clone()),\n+                     false, sopts.debugging_opts.teach)\n+                     .ui_testing(sopts.debugging_opts.ui_testing))\n         }\n         (config::ErrorOutputType::HumanReadable(_), Some(dst)) => {\n-            Box::new(EmitterWriter::new(dst, Some(codemap.clone()), false, false))\n+            Box::new(EmitterWriter::new(dst, Some(codemap.clone()),\n+                     false, false)\n+                     .ui_testing(sopts.debugging_opts.ui_testing))\n         }\n         (config::ErrorOutputType::Json(pretty), None) => {\n             Box::new(JsonEmitter::stderr(Some(registry), codemap.clone(),\n-                     pretty, sopts.debugging_opts.approximate_suggestions))\n+                     pretty, sopts.debugging_opts.approximate_suggestions)\n+                     .ui_testing(sopts.debugging_opts.ui_testing))\n         }\n         (config::ErrorOutputType::Json(pretty), Some(dst)) => {\n             Box::new(JsonEmitter::new(dst, Some(registry), codemap.clone(),\n-                     pretty, sopts.debugging_opts.approximate_suggestions))\n+                     pretty, sopts.debugging_opts.approximate_suggestions)\n+                     .ui_testing(sopts.debugging_opts.ui_testing))\n         }\n         (config::ErrorOutputType::Short(color_config), None) => {\n             Box::new(EmitterWriter::stderr(color_config, Some(codemap.clone()), true, false))"}, {"sha": "0bd9b7268cb3a3d87c3e9f86cc68a486fa746bdc", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -25,6 +25,8 @@ use std::collections::{HashMap, HashSet};\n use std::cmp::min;\n use unicode_width;\n \n+const ANONYMIZED_LINE_NUM: &str = \"LL\";\n+\n /// Emitter trait for emitting errors.\n pub trait Emitter {\n     /// Emit a structured diagnostic.\n@@ -108,6 +110,7 @@ pub struct EmitterWriter {\n     short_message: bool,\n     teach: bool,\n     error_codes: HashSet<String>,\n+    ui_testing: bool,\n }\n \n struct FileWithAnnotatedLines {\n@@ -157,6 +160,7 @@ impl EmitterWriter {\n                 short_message,\n                 teach,\n                 error_codes: HashSet::new(),\n+                ui_testing: false,\n             }\n         } else {\n             EmitterWriter {\n@@ -165,6 +169,7 @@ impl EmitterWriter {\n                 short_message,\n                 teach,\n                 error_codes: HashSet::new(),\n+                ui_testing: false,\n             }\n         }\n     }\n@@ -180,6 +185,20 @@ impl EmitterWriter {\n             short_message,\n             teach,\n             error_codes: HashSet::new(),\n+            ui_testing: false,\n+        }\n+    }\n+\n+    pub fn ui_testing(mut self, ui_testing: bool) -> Self {\n+        self.ui_testing = ui_testing;\n+        self\n+    }\n+\n+    fn maybe_anonymized(&self, line_num: usize) -> String {\n+        if self.ui_testing {\n+            ANONYMIZED_LINE_NUM.to_string()\n+        } else {\n+            line_num.to_string()\n         }\n     }\n \n@@ -336,7 +355,7 @@ impl EmitterWriter {\n         buffer.puts(line_offset, code_offset, &source_string, Style::Quotation);\n         buffer.puts(line_offset,\n                     0,\n-                    &(line.line_index.to_string()),\n+                    &self.maybe_anonymized(line.line_index),\n                     Style::LineNumber);\n \n         draw_col_separator(buffer, line_offset, width_offset - 2);\n@@ -1159,8 +1178,8 @@ impl EmitterWriter {\n \n                             buffer.puts(last_buffer_line_num,\n                                         0,\n-                                        &(annotated_file.lines[line_idx + 1].line_index - 1)\n-                                            .to_string(),\n+                                        &self.maybe_anonymized(annotated_file.lines[line_idx + 1]\n+                                                                             .line_index - 1),\n                                         Style::LineNumber);\n                             draw_col_separator(&mut buffer,\n                                                last_buffer_line_num,\n@@ -1235,7 +1254,7 @@ impl EmitterWriter {\n                     // Print the span column to avoid confusion\n                     buffer.puts(row_num,\n                                 0,\n-                                &((line_start + line_pos).to_string()),\n+                                &self.maybe_anonymized(line_start + line_pos),\n                                 Style::LineNumber);\n                     // print the suggestion\n                     draw_col_separator(&mut buffer, row_num, max_line_num_len + 1);\n@@ -1288,8 +1307,11 @@ impl EmitterWriter {\n                              span: &MultiSpan,\n                              children: &Vec<SubDiagnostic>,\n                              suggestions: &[CodeSuggestion]) {\n-        let max_line_num = self.get_max_line_num(span, children);\n-        let max_line_num_len = max_line_num.to_string().len();\n+        let max_line_num_len = if self.ui_testing {\n+            ANONYMIZED_LINE_NUM.len()\n+        } else {\n+            self.get_max_line_num(span, children).to_string().len()\n+        };\n \n         match self.emit_message_default(span,\n                                         message,"}, {"sha": "57f07ff33f5ca9d8266c38ff4d992d5a9223d9f4", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -40,6 +40,7 @@ pub struct JsonEmitter {\n     pretty: bool,\n     /// Whether \"approximate suggestions\" are enabled in the config\n     approximate_suggestions: bool,\n+    ui_testing: bool,\n }\n \n impl JsonEmitter {\n@@ -53,6 +54,7 @@ impl JsonEmitter {\n             cm: code_map,\n             pretty,\n             approximate_suggestions,\n+            ui_testing: false,\n         }\n     }\n \n@@ -73,8 +75,13 @@ impl JsonEmitter {\n             cm: code_map,\n             pretty,\n             approximate_suggestions,\n+            ui_testing: false,\n         }\n     }\n+\n+    pub fn ui_testing(self, ui_testing: bool) -> Self {\n+        Self { ui_testing, ..self }\n+    }\n }\n \n impl Emitter for JsonEmitter {\n@@ -199,7 +206,8 @@ impl Diagnostic {\n         }\n         let buf = BufWriter::default();\n         let output = buf.clone();\n-        EmitterWriter::new(Box::new(buf), Some(je.cm.clone()), false, false).emit(db);\n+        EmitterWriter::new(Box::new(buf), Some(je.cm.clone()), false, false)\n+            .ui_testing(je.ui_testing).emit(db);\n         let output = Arc::try_unwrap(output.0).unwrap().into_inner().unwrap();\n         let output = String::from_utf8(output).unwrap();\n "}, {"sha": "b082999a8978dc6978b1afd8a430b84e28226a1a", "filename": "src/test/ui-fulldeps/custom-derive/issue-36935.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fissue-36935.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fissue-36935.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fissue-36935.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error: proc-macro derive panicked\n   --> $DIR/issue-36935.rs:18:15\n    |\n-18 | #[derive(Foo, Bar)] //~ ERROR proc-macro derive panicked\n+LL | #[derive(Foo, Bar)] //~ ERROR proc-macro derive panicked\n    |               ^^^\n    |\n    = help: message: lolnope"}, {"sha": "df4bd7f752c1e7496eada26737843156f2ded571", "filename": "src/test/ui-fulldeps/deprecated-derive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui-fulldeps%2Fdeprecated-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui-fulldeps%2Fdeprecated-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fdeprecated-derive.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,6 +1,6 @@\n warning: derive(Encodable) is deprecated in favor of derive(RustcEncodable)\n   --> $DIR/deprecated-derive.rs:18:10\n    |\n-18 | #[derive(Encodable)]\n+LL | #[derive(Encodable)]\n    |          ^^^^^^^^^\n "}, {"sha": "80a309f27e165446b2dcd6767d246e11a0e891e0", "filename": "src/test/ui-fulldeps/lint-group-plugin.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,15 +1,15 @@\n warning: item is named 'lintme'\n   --> $DIR/lint-group-plugin.rs:18:1\n    |\n-18 | fn lintme() { } //~ WARNING item is named 'lintme'\n+LL | fn lintme() { } //~ WARNING item is named 'lintme'\n    | ^^^^^^^^^^^^^^^\n    |\n    = note: #[warn(test_lint)] on by default\n \n warning: item is named 'pleaselintme'\n   --> $DIR/lint-group-plugin.rs:19:1\n    |\n-19 | fn pleaselintme() { } //~ WARNING item is named 'pleaselintme'\n+LL | fn pleaselintme() { } //~ WARNING item is named 'pleaselintme'\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: #[warn(please_lint)] on by default"}, {"sha": "cda6ea8bb903b8a591c0cf7294963c8dce60234a", "filename": "src/test/ui-fulldeps/lint-plugin-cmdline-allow.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-allow.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,13 +1,13 @@\n warning: function is never used: `lintme`\n   --> $DIR/lint-plugin-cmdline-allow.rs:20:1\n    |\n-20 | fn lintme() { }\n+LL | fn lintme() { }\n    | ^^^^^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/lint-plugin-cmdline-allow.rs:17:9\n    |\n-17 | #![warn(unused)]\n+LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: #[warn(dead_code)] implied by #[warn(unused)]\n "}, {"sha": "33c690a2d9f3ee0101d1d06c139b392e8af5d476", "filename": "src/test/ui-fulldeps/lint-plugin-cmdline-load.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n warning: item is named 'lintme'\n   --> $DIR/lint-plugin-cmdline-load.rs:18:1\n    |\n-18 | fn lintme() { } //~ WARNING item is named 'lintme'\n+LL | fn lintme() { } //~ WARNING item is named 'lintme'\n    | ^^^^^^^^^^^^^^^\n    |\n    = note: #[warn(test_lint)] on by default"}, {"sha": "ac26b5212ecbb9768ed820e4fe2f402c90b4b3d3", "filename": "src/test/ui-fulldeps/lint-plugin-forbid-attrs.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,22 +1,22 @@\n error: item is named 'lintme'\n   --> $DIR/lint-plugin-forbid-attrs.rs:18:1\n    |\n-18 | fn lintme() { } //~ ERROR item is named 'lintme'\n+LL | fn lintme() { } //~ ERROR item is named 'lintme'\n    | ^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/lint-plugin-forbid-attrs.rs:16:11\n    |\n-16 | #![forbid(test_lint)]\n+LL | #![forbid(test_lint)]\n    |           ^^^^^^^^^\n \n error[E0453]: allow(test_lint) overruled by outer forbid(test_lint)\n   --> $DIR/lint-plugin-forbid-attrs.rs:20:9\n    |\n-16 | #![forbid(test_lint)]\n+LL | #![forbid(test_lint)]\n    |           --------- `forbid` level set here\n ...\n-20 | #[allow(test_lint)]\n+LL | #[allow(test_lint)]\n    |         ^^^^^^^^^ overruled by previous forbid\n \n error: aborting due to 2 previous errors"}, {"sha": "4a3140925c86772fbc00e9534e00c81215139817", "filename": "src/test/ui-fulldeps/lint-plugin.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui-fulldeps%2Flint-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui-fulldeps%2Flint-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n warning: item is named 'lintme'\n   --> $DIR/lint-plugin.rs:18:1\n    |\n-18 | fn lintme() { } //~ WARNING item is named 'lintme'\n+LL | fn lintme() { } //~ WARNING item is named 'lintme'\n    | ^^^^^^^^^^^^^^^\n    |\n    = note: #[warn(test_lint)] on by default"}, {"sha": "edfd134469cda7056686d619190752d26bac7908", "filename": "src/test/ui-fulldeps/proc-macro/load-panic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fload-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fload-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fload-panic.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error: proc-macro derive panicked\n   --> $DIR/load-panic.rs:17:10\n    |\n-17 | #[derive(A)]\n+LL | #[derive(A)]\n    |          ^\n    |\n    = help: message: nope!"}, {"sha": "0442c4f6ce71f313d51a2aae24c94f81e6cd744a", "filename": "src/test/ui-fulldeps/proc-macro/parent-source-spans.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fparent-source-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fparent-source-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fparent-source-spans.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,127 +1,127 @@\n error: first final: \"hello\"\n   --> $DIR/parent-source-spans.rs:27:12\n    |\n-27 |     three!($a, $b);\n+LL |     three!($a, $b);\n    |            ^^\n ...\n-44 |     one!(\"hello\", \"world\");\n+LL |     one!(\"hello\", \"world\");\n    |     ----------------------- in this macro invocation\n \n error: second final: \"world\"\n   --> $DIR/parent-source-spans.rs:27:16\n    |\n-27 |     three!($a, $b);\n+LL |     three!($a, $b);\n    |                ^^\n ...\n-44 |     one!(\"hello\", \"world\");\n+LL |     one!(\"hello\", \"world\");\n    |     ----------------------- in this macro invocation\n \n error: first parent: \"hello\"\n   --> $DIR/parent-source-spans.rs:21:5\n    |\n-21 |     two!($a, $b);\n+LL |     two!($a, $b);\n    |     ^^^^^^^^^^^^^\n ...\n-44 |     one!(\"hello\", \"world\");\n+LL |     one!(\"hello\", \"world\");\n    |     ----------------------- in this macro invocation\n \n error: second parent: \"world\"\n   --> $DIR/parent-source-spans.rs:21:5\n    |\n-21 |     two!($a, $b);\n+LL |     two!($a, $b);\n    |     ^^^^^^^^^^^^^\n ...\n-44 |     one!(\"hello\", \"world\");\n+LL |     one!(\"hello\", \"world\");\n    |     ----------------------- in this macro invocation\n \n error: first grandparent: \"hello\"\n   --> $DIR/parent-source-spans.rs:44:5\n    |\n-44 |     one!(\"hello\", \"world\");\n+LL |     one!(\"hello\", \"world\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: second grandparent: \"world\"\n   --> $DIR/parent-source-spans.rs:44:5\n    |\n-44 |     one!(\"hello\", \"world\");\n+LL |     one!(\"hello\", \"world\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: first source: \"hello\"\n   --> $DIR/parent-source-spans.rs:44:5\n    |\n-44 |     one!(\"hello\", \"world\");\n+LL |     one!(\"hello\", \"world\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: second source: \"world\"\n   --> $DIR/parent-source-spans.rs:44:5\n    |\n-44 |     one!(\"hello\", \"world\");\n+LL |     one!(\"hello\", \"world\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: first final: \"yay\"\n   --> $DIR/parent-source-spans.rs:27:12\n    |\n-27 |     three!($a, $b);\n+LL |     three!($a, $b);\n    |            ^^\n ...\n-50 |     two!(\"yay\", \"rust\");\n+LL |     two!(\"yay\", \"rust\");\n    |     -------------------- in this macro invocation\n \n error: second final: \"rust\"\n   --> $DIR/parent-source-spans.rs:27:16\n    |\n-27 |     three!($a, $b);\n+LL |     three!($a, $b);\n    |                ^^\n ...\n-50 |     two!(\"yay\", \"rust\");\n+LL |     two!(\"yay\", \"rust\");\n    |     -------------------- in this macro invocation\n \n error: first parent: \"yay\"\n   --> $DIR/parent-source-spans.rs:50:5\n    |\n-50 |     two!(\"yay\", \"rust\");\n+LL |     two!(\"yay\", \"rust\");\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: second parent: \"rust\"\n   --> $DIR/parent-source-spans.rs:50:5\n    |\n-50 |     two!(\"yay\", \"rust\");\n+LL |     two!(\"yay\", \"rust\");\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: first source: \"yay\"\n   --> $DIR/parent-source-spans.rs:50:5\n    |\n-50 |     two!(\"yay\", \"rust\");\n+LL |     two!(\"yay\", \"rust\");\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: second source: \"rust\"\n   --> $DIR/parent-source-spans.rs:50:5\n    |\n-50 |     two!(\"yay\", \"rust\");\n+LL |     two!(\"yay\", \"rust\");\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: first final: \"hip\"\n   --> $DIR/parent-source-spans.rs:56:12\n    |\n-56 |     three!(\"hip\", \"hop\");\n+LL |     three!(\"hip\", \"hop\");\n    |            ^^^^^\n \n error: second final: \"hop\"\n   --> $DIR/parent-source-spans.rs:56:19\n    |\n-56 |     three!(\"hip\", \"hop\");\n+LL |     three!(\"hip\", \"hop\");\n    |                   ^^^^^\n \n error: first source: \"hip\"\n   --> $DIR/parent-source-spans.rs:56:12\n    |\n-56 |     three!(\"hip\", \"hop\");\n+LL |     three!(\"hip\", \"hop\");\n    |            ^^^^^\n \n error: second source: \"hop\"\n   --> $DIR/parent-source-spans.rs:56:19\n    |\n-56 |     three!(\"hip\", \"hop\");\n+LL |     three!(\"hip\", \"hop\");\n    |                   ^^^^^\n \n error: aborting due to 18 previous errors"}, {"sha": "dad403ccf3a6462600a75b295147a7d98cdc65a0", "filename": "src/test/ui-fulldeps/proc-macro/signature.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fsignature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fsignature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fsignature.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0308]: mismatched types\n   --> $DIR/signature.rs:17:1\n    |\n-17 | / pub unsafe extern fn foo(a: i32, b: u32) -> u32 {\n-18 | |     //~^ ERROR: mismatched types\n-19 | |     loop {}\n-20 | | }\n+LL | / pub unsafe extern fn foo(a: i32, b: u32) -> u32 {\n+LL | |     //~^ ERROR: mismatched types\n+LL | |     loop {}\n+LL | | }\n    | |_^ expected normal fn, found unsafe fn\n    |\n    = note: expected type `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`"}, {"sha": "1a0337f93f9acffec96aaa506647a564f202d587", "filename": "src/test/ui-fulldeps/proc-macro/three-equals.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fthree-equals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fthree-equals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fthree-equals.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,46 +1,46 @@\n error: found 2 equal signs, need exactly 3\n   --> $DIR/three-equals.rs:25:5\n    |\n-25 |     three_equals!(==); //~ ERROR found 2 equal signs, need exactly 3\n+LL |     three_equals!(==); //~ ERROR found 2 equal signs, need exactly 3\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: input must be: `===`\n \n error: expected EOF, found `=`.\n   --> $DIR/three-equals.rs:28:21\n    |\n-28 |     three_equals!(=====); //~ ERROR expected EOF\n+LL |     three_equals!(=====); //~ ERROR expected EOF\n    |                     ^^\n    |\n note: last good input was here\n   --> $DIR/three-equals.rs:28:21\n    |\n-28 |     three_equals!(=====); //~ ERROR expected EOF\n+LL |     three_equals!(=====); //~ ERROR expected EOF\n    |                     ^^\n    = help: input must be: `===`\n \n error: expected `=`, found `abc`.\n   --> $DIR/three-equals.rs:31:19\n    |\n-31 |     three_equals!(abc); //~ ERROR expected `=`\n+LL |     three_equals!(abc); //~ ERROR expected `=`\n    |                   ^^^\n \n error: expected `=`, found `!`.\n   --> $DIR/three-equals.rs:34:19\n    |\n-34 |     three_equals!(!!); //~ ERROR expected `=`\n+LL |     three_equals!(!!); //~ ERROR expected `=`\n    |                   ^\n \n error: expected EOF, found `a`.\n   --> $DIR/three-equals.rs:37:22\n    |\n-37 |     three_equals!(===a); //~ ERROR expected EOF\n+LL |     three_equals!(===a); //~ ERROR expected EOF\n    |                      ^\n    |\n note: last good input was here\n   --> $DIR/three-equals.rs:37:21\n    |\n-37 |     three_equals!(===a); //~ ERROR expected EOF\n+LL |     three_equals!(===a); //~ ERROR expected EOF\n    |                     ^\n    = help: input must be: `===`\n "}, {"sha": "e19ec9e6f803caba63b24c657f5224316b8317e3", "filename": "src/test/ui-fulldeps/resolve-error.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui-fulldeps%2Fresolve-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui-fulldeps%2Fresolve-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fresolve-error.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,61 +1,61 @@\n error: cannot find derive macro `FooWithLongNan` in this scope\n   --> $DIR/resolve-error.rs:37:10\n    |\n-37 | #[derive(FooWithLongNan)]\n+LL | #[derive(FooWithLongNan)]\n    |          ^^^^^^^^^^^^^^ help: try: `FooWithLongName`\n \n error: cannot find attribute macro `attr_proc_macra` in this scope\n   --> $DIR/resolve-error.rs:41:3\n    |\n-41 | #[attr_proc_macra]\n+LL | #[attr_proc_macra]\n    |   ^^^^^^^^^^^^^^^ help: try: `attr_proc_macro`\n \n error: cannot find attribute macro `FooWithLongNan` in this scope\n   --> $DIR/resolve-error.rs:45:3\n    |\n-45 | #[FooWithLongNan]\n+LL | #[FooWithLongNan]\n    |   ^^^^^^^^^^^^^^\n \n error: cannot find derive macro `Dlone` in this scope\n   --> $DIR/resolve-error.rs:49:10\n    |\n-49 | #[derive(Dlone)]\n+LL | #[derive(Dlone)]\n    |          ^^^^^ help: try: `Clone`\n \n error: cannot find derive macro `Dlona` in this scope\n   --> $DIR/resolve-error.rs:53:10\n    |\n-53 | #[derive(Dlona)]\n+LL | #[derive(Dlona)]\n    |          ^^^^^ help: try: `Clona`\n \n error: cannot find derive macro `attr_proc_macra` in this scope\n   --> $DIR/resolve-error.rs:57:10\n    |\n-57 | #[derive(attr_proc_macra)]\n+LL | #[derive(attr_proc_macra)]\n    |          ^^^^^^^^^^^^^^^\n \n error: cannot find macro `FooWithLongNama!` in this scope\n   --> $DIR/resolve-error.rs:62:5\n    |\n-62 |     FooWithLongNama!();\n+LL |     FooWithLongNama!();\n    |     ^^^^^^^^^^^^^^^ help: you could try the macro: `FooWithLongNam`\n \n error: cannot find macro `attr_proc_macra!` in this scope\n   --> $DIR/resolve-error.rs:65:5\n    |\n-65 |     attr_proc_macra!();\n+LL |     attr_proc_macra!();\n    |     ^^^^^^^^^^^^^^^ help: you could try the macro: `attr_proc_mac`\n \n error: cannot find macro `Dlona!` in this scope\n   --> $DIR/resolve-error.rs:68:5\n    |\n-68 |     Dlona!();\n+LL |     Dlona!();\n    |     ^^^^^\n \n error: cannot find macro `bang_proc_macrp!` in this scope\n   --> $DIR/resolve-error.rs:71:5\n    |\n-71 |     bang_proc_macrp!();\n+LL |     bang_proc_macrp!();\n    |     ^^^^^^^^^^^^^^^ help: you could try the macro: `bang_proc_macro`\n \n error: aborting due to 10 previous errors"}, {"sha": "ff31595ee9ba8038995315cb7977bcb732739267", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,155 +1,155 @@\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n    |\n-12 |     f1(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     f1(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r, 's> fn(&'r (), &'s ()) -> _`\n    |\n note: required by `f1`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:26:1\n    |\n-26 | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n+LL | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:13:5\n    |\n-13 |     f2(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     f2(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'a, 'r> fn(&'a (), &'r ()) -> _`\n    |\n note: required by `f2`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:27:1\n    |\n-27 | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n+LL | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:14:5\n    |\n-14 |     f3(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     f3(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&(), &'r ()) -> _`\n    |\n note: required by `f3`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:28:1\n    |\n-28 | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n+LL | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:15:5\n    |\n-15 |     f4(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     f4(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'s, 'r> fn(&'s (), &'r ()) -> _`\n    |\n note: required by `f4`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:29:1\n    |\n-29 | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n+LL | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:16:5\n    |\n-16 |     f5(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     f5(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), &'r ()) -> _`\n    |\n note: required by `f5`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:30:1\n    |\n-30 | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n+LL | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:17:5\n    |\n-17 |     g1(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     g1(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), std::boxed::Box<for<'s> std::ops::Fn(&'s ()) + 'static>) -> _`\n    |\n note: required by `g1`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:33:1\n    |\n-33 | fn g1<F>(_: F) where F: Fn(&(), Box<Fn(&())>) {}\n+LL | fn g1<F>(_: F) where F: Fn(&(), Box<Fn(&())>) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:18:5\n    |\n-18 |     g2(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     g2(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), for<'s> fn(&'s ())) -> _`\n    |\n note: required by `g2`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:34:1\n    |\n-34 | fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n+LL | fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:19:5\n    |\n-19 |     g3(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     g3(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'s> fn(&'s (), std::boxed::Box<for<'r> std::ops::Fn(&'r ()) + 'static>) -> _`\n    |\n note: required by `g3`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:35:1\n    |\n-35 | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<Fn(&())>) {}\n+LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<Fn(&())>) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:20:5\n    |\n-20 |     g4(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     g4(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'s> fn(&'s (), for<'r> fn(&'r ())) -> _`\n    |\n note: required by `g4`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:36:1\n    |\n-36 | fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n+LL | fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:21:5\n    |\n-21 |     h1(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     h1(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n    |     |\n    |     expected signature of `for<'r, 's> fn(&'r (), std::boxed::Box<for<'t0> std::ops::Fn(&'t0 ()) + 'static>, &'s (), for<'t0, 't1> fn(&'t0 (), &'t1 ())) -> _`\n    |\n note: required by `h1`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:39:1\n    |\n-39 | fn h1<F>(_: F) where F: Fn(&(), Box<Fn(&())>, &(), fn(&(), &())) {}\n+LL | fn h1<F>(_: F) where F: Fn(&(), Box<Fn(&())>, &(), fn(&(), &())) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:22:5\n    |\n-22 |     h2(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     h2(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n    |     |\n    |     expected signature of `for<'r, 't0> fn(&'r (), std::boxed::Box<for<'s> std::ops::Fn(&'s ()) + 'static>, &'t0 (), for<'s, 't1> fn(&'s (), &'t1 ())) -> _`\n    |\n note: required by `h2`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:40:1\n    |\n-40 | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<Fn(&())>, &'t0 (), fn(&(), &())) {}\n+LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<Fn(&())>, &'t0 (), fn(&(), &())) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 11 previous errors"}, {"sha": "ba240c8d511584cbbf64e47441546864252f1fc5", "filename": "src/test/ui/arbitrary-self-types-not-object-safe.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,15 +1,15 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/arbitrary-self-types-not-object-safe.rs:40:33\n    |\n-40 |     let x = Box::new(5usize) as Box<Foo>;\n+LL |     let x = Box::new(5usize) as Box<Foo>;\n    |                                 ^^^^^^^^ the trait `Foo` cannot be made into an object\n    |\n    = note: method `foo` has a non-standard `self` type\n \n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/arbitrary-self-types-not-object-safe.rs:40:13\n    |\n-40 |     let x = Box::new(5usize) as Box<Foo>;\n+LL |     let x = Box::new(5usize) as Box<Foo>;\n    |             ^^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n    |\n    = note: method `foo` has a non-standard `self` type"}, {"sha": "16df627578e9c0c29d16f06cb4f8b92c0e52bf10", "filename": "src/test/ui/asm-out-assign-imm.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fasm-out-assign-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fasm-out-assign-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm-out-assign-imm.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0384]: cannot assign twice to immutable variable `x`\n   --> $DIR/asm-out-assign-imm.rs:29:9\n    |\n-26 |     x = 1;\n+LL |     x = 1;\n    |     ----- first assignment to `x`\n ...\n-29 |         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5));\n+LL |         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n \n error: aborting due to previous error"}, {"sha": "e0a9653423fbdd272ab1b9352a828f3173e1ccea", "filename": "src/test/ui/associated-const-impl-wrong-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,15 +1,15 @@\n error[E0308]: mismatched types\n   --> $DIR/associated-const-impl-wrong-lifetime.rs:18:5\n    |\n-18 |     const NAME: &'a str = \"unit\";\n+LL |     const NAME: &'a str = \"unit\";\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `&'static str`\n               found type `&'a str`\n note: the lifetime 'a as defined on the impl at 17:1...\n   --> $DIR/associated-const-impl-wrong-lifetime.rs:17:1\n    |\n-17 | impl<'a> Foo for &'a () {\n+LL | impl<'a> Foo for &'a () {\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...does not necessarily outlive the static lifetime\n "}, {"sha": "6c2f2600acc3eced4acf65f1d806e007231c6df8", "filename": "src/test/ui/associated-const-impl-wrong-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-type.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0326]: implemented const `BAR` has an incompatible type for trait\n   --> $DIR/associated-const-impl-wrong-type.rs:19:16\n    |\n-13 |     const BAR: u32;\n+LL |     const BAR: u32;\n    |                --- type in trait\n ...\n-19 |     const BAR: i32 = -1;\n+LL |     const BAR: i32 = -1;\n    |                ^^^ expected u32, found i32\n \n error: aborting due to previous error"}, {"sha": "3b732ed39331dd26cd3ee8b510665bdf710e1e25", "filename": "src/test/ui/associated-type-projection-from-multiple-supertraits.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fassociated-type-projection-from-multiple-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fassociated-type-projection-from-multiple-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-projection-from-multiple-supertraits.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,43 +1,43 @@\n error[E0221]: ambiguous associated type `Color` in bounds of `C`\n   --> $DIR/associated-type-projection-from-multiple-supertraits.rs:29:32\n    |\n-15 |     type Color;\n+LL |     type Color;\n    |     ----------- ambiguous `Color` from `Vehicle`\n ...\n-21 |     type Color;\n+LL |     type Color;\n    |     ----------- ambiguous `Color` from `Box`\n ...\n-29 | fn dent<C:BoxCar>(c: C, color: C::Color) {\n+LL | fn dent<C:BoxCar>(c: C, color: C::Color) {\n    |                                ^^^^^^^^ ambiguous associated type `Color`\n \n error[E0221]: ambiguous associated type `Color` in bounds of `BoxCar`\n   --> $DIR/associated-type-projection-from-multiple-supertraits.rs:33:33\n    |\n-15 |     type Color;\n+LL |     type Color;\n    |     ----------- ambiguous `Color` from `Vehicle`\n ...\n-21 |     type Color;\n+LL |     type Color;\n    |     ----------- ambiguous `Color` from `Box`\n ...\n-33 | fn dent_object<COLOR>(c: BoxCar<Color=COLOR>) {\n+LL | fn dent_object<COLOR>(c: BoxCar<Color=COLOR>) {\n    |                                 ^^^^^^^^^^^ ambiguous associated type `Color`\n \n error[E0191]: the value of the associated type `Color` (from the trait `Vehicle`) must be specified\n   --> $DIR/associated-type-projection-from-multiple-supertraits.rs:33:26\n    |\n-33 | fn dent_object<COLOR>(c: BoxCar<Color=COLOR>) {\n+LL | fn dent_object<COLOR>(c: BoxCar<Color=COLOR>) {\n    |                          ^^^^^^^^^^^^^^^^^^^ missing associated type `Color` value\n \n error[E0221]: ambiguous associated type `Color` in bounds of `C`\n   --> $DIR/associated-type-projection-from-multiple-supertraits.rs:38:29\n    |\n-15 |     type Color;\n+LL |     type Color;\n    |     ----------- ambiguous `Color` from `Vehicle`\n ...\n-21 |     type Color;\n+LL |     type Color;\n    |     ----------- ambiguous `Color` from `Box`\n ...\n-38 | fn paint<C:BoxCar>(c: C, d: C::Color) {\n+LL | fn paint<C:BoxCar>(c: C, d: C::Color) {\n    |                             ^^^^^^^^ ambiguous associated type `Color`\n \n error: aborting due to 4 previous errors"}, {"sha": "f69b0af71f6245e9dee480e48850c275b8fd41a8", "filename": "src/test/ui/associated-types-ICE-when-projecting-out-of-err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: the trait bound `(): Add<A>` is not satisfied\n   --> $DIR/associated-types-ICE-when-projecting-out-of-err.rs:33:11\n    |\n-33 |     r = r + a;\n+LL |     r = r + a;\n    |           ^ the trait `Add<A>` is not implemented for `()`\n \n error: aborting due to previous error"}, {"sha": "ff5c45e797e58d5a83d0f71840847b540e336405", "filename": "src/test/ui/associated-types-in-ambiguous-context.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fassociated-types-in-ambiguous-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fassociated-types-in-ambiguous-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types-in-ambiguous-context.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,23 +1,23 @@\n error[E0223]: ambiguous associated type\n   --> $DIR/associated-types-in-ambiguous-context.rs:16:36\n    |\n-16 | fn get<T:Get,U:Get>(x: T, y: U) -> Get::Value {}\n+LL | fn get<T:Get,U:Get>(x: T, y: U) -> Get::Value {}\n    |                                    ^^^^^^^^^^ ambiguous associated type\n    |\n    = note: specify the type using the syntax `<Type as Get>::Value`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/associated-types-in-ambiguous-context.rs:25:10\n    |\n-25 | type X = std::ops::Deref::Target;\n+LL | type X = std::ops::Deref::Target;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type\n    |\n    = note: specify the type using the syntax `<Type as std::ops::Deref>::Target`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/associated-types-in-ambiguous-context.rs:21:23\n    |\n-21 |     fn grab(&self) -> Grab::Value;\n+LL |     fn grab(&self) -> Grab::Value;\n    |                       ^^^^^^^^^^^ ambiguous associated type\n    |\n    = note: specify the type using the syntax `<Type as Grab>::Value`"}, {"sha": "03c6f599b6c7ff0876e5a481294233fb5bd3f5c5", "filename": "src/test/ui/attr-usage-repr.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fattr-usage-repr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fattr-usage-repr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-usage-repr.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,41 +1,41 @@\n error[E0517]: attribute should be applied to struct, enum or union\n   --> $DIR/attr-usage-repr.rs:14:8\n    |\n-14 | #[repr(C)] //~ ERROR: attribute should be applied to struct, enum or union\n+LL | #[repr(C)] //~ ERROR: attribute should be applied to struct, enum or union\n    |        ^\n-15 | fn f() {}\n+LL | fn f() {}\n    | --------- not a struct, enum or union\n \n error[E0517]: attribute should be applied to enum\n   --> $DIR/attr-usage-repr.rs:26:8\n    |\n-26 | #[repr(i8)] //~ ERROR: attribute should be applied to enum\n+LL | #[repr(i8)] //~ ERROR: attribute should be applied to enum\n    |        ^^\n-27 | struct SInt(f64, f64);\n+LL | struct SInt(f64, f64);\n    | ---------------------- not an enum\n \n error[E0517]: attribute should be applied to struct or union\n   --> $DIR/attr-usage-repr.rs:32:8\n    |\n-32 | #[repr(align(8))] //~ ERROR: attribute should be applied to struct\n+LL | #[repr(align(8))] //~ ERROR: attribute should be applied to struct\n    |        ^^^^^^^^\n-33 | enum EAlign { A, B }\n+LL | enum EAlign { A, B }\n    | -------------------- not a struct or union\n \n error[E0517]: attribute should be applied to struct or union\n   --> $DIR/attr-usage-repr.rs:35:8\n    |\n-35 | #[repr(packed)] //~ ERROR: attribute should be applied to struct\n+LL | #[repr(packed)] //~ ERROR: attribute should be applied to struct\n    |        ^^^^^^\n-36 | enum EPacked { A, B }\n+LL | enum EPacked { A, B }\n    | --------------------- not a struct or union\n \n error[E0517]: attribute should be applied to struct\n   --> $DIR/attr-usage-repr.rs:38:8\n    |\n-38 | #[repr(simd)] //~ ERROR: attribute should be applied to struct\n+LL | #[repr(simd)] //~ ERROR: attribute should be applied to struct\n    |        ^^^^\n-39 | enum ESimd { A, B }\n+LL | enum ESimd { A, B }\n    | ------------------- not a struct\n \n error: aborting due to 5 previous errors"}, {"sha": "e04dc2f72a3076a4dd9a4ef8e9b15272582ba584", "filename": "src/test/ui/augmented-assignments.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Faugmented-assignments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Faugmented-assignments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faugmented-assignments.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,19 +1,19 @@\n error[E0596]: cannot borrow immutable local variable `y` as mutable\n   --> $DIR/augmented-assignments.rs:30:5\n    |\n-28 |     let y = Int(2);\n+LL |     let y = Int(2);\n    |         - consider changing this to `mut y`\n-29 |     //~^ consider changing this to `mut y`\n-30 |     y   //~ error: cannot borrow immutable local variable `y` as mutable\n+LL |     //~^ consider changing this to `mut y`\n+LL |     y   //~ error: cannot borrow immutable local variable `y` as mutable\n    |     ^ cannot borrow mutably\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/augmented-assignments.rs:23:5\n    |\n-23 |     x   //~ error: use of moved value: `x`\n+LL |     x   //~ error: use of moved value: `x`\n    |     ^ value used here after move\n ...\n-26 |     x;  //~ value moved here\n+LL |     x;  //~ value moved here\n    |     - value moved here\n    |\n    = note: move occurs because `x` has type `Int`, which does not implement the `Copy` trait"}, {"sha": "b6c502b90b58c20b0669e6ab63140d75659994c5", "filename": "src/test/ui/binary-op-on-double-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0369]: binary operation `%` cannot be applied to type `&&{integer}`\n   --> $DIR/binary-op-on-double-ref.rs:14:9\n    |\n-14 |         x % 2 == 0\n+LL |         x % 2 == 0\n    |         ^^^^^\n    |\n    = note: this is a reference to a type that `%` can be applied to; you need to dereference this variable once for this operation to work"}, {"sha": "f02dd6b3e98fa481c0a33415fc5fe02824db8113", "filename": "src/test/ui/blind-item-item-shadow.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fblind-item-item-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fblind-item-item-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblind-item-item-shadow.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,16 +1,16 @@\n error[E0255]: the name `foo` is defined multiple times\n   --> $DIR/blind-item-item-shadow.rs:13:5\n    |\n-11 | mod foo { pub mod foo {  } }\n+LL | mod foo { pub mod foo {  } }\n    | ------- previous definition of the module `foo` here\n-12 | \n-13 | use foo::foo;\n+LL | \n+LL | use foo::foo;\n    |     ^^^^^^^^ `foo` reimported here\n    |\n    = note: `foo` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-13 | use foo::foo as other_foo;\n+LL | use foo::foo as other_foo;\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "242906ca5cb4f2fcb1aa174a107d26ed94b93f06", "filename": "src/test/ui/block-result/block-must-not-have-result-do.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-do.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-do.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-do.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/block-must-not-have-result-do.rs:13:9\n    |\n-13 |         true //~  ERROR mismatched types\n+LL |         true //~  ERROR mismatched types\n    |         ^^^^ expected (), found bool\n    |\n    = note: expected type `()`"}, {"sha": "ca730927c880c24cb8e58783da653a304d0abb5a", "filename": "src/test/ui/block-result/block-must-not-have-result-res.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,9 +1,9 @@\n error[E0308]: mismatched types\n   --> $DIR/block-must-not-have-result-res.rs:15:9\n    |\n-14 |     fn drop(&mut self) {\n+LL |     fn drop(&mut self) {\n    |                        - expected `()` because of default return type\n-15 |         true //~  ERROR mismatched types\n+LL |         true //~  ERROR mismatched types\n    |         ^^^^ expected (), found bool\n    |\n    = note: expected type `()`"}, {"sha": "1a4852a4541a945e7a63e7cd15edc64b6929b404", "filename": "src/test/ui/block-result/block-must-not-have-result-while.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/block-must-not-have-result-while.rs:13:9\n    |\n-13 |         true //~  ERROR mismatched types\n+LL |         true //~  ERROR mismatched types\n    |         ^^^^ expected (), found bool\n    |\n    = note: expected type `()`"}, {"sha": "6fa892e10e75a52b404144ef4465515a585f29e9", "filename": "src/test/ui/block-result/consider-removing-last-semi.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,12 +1,12 @@\n error[E0308]: mismatched types\n   --> $DIR/consider-removing-last-semi.rs:11:18\n    |\n-11 |   fn f() -> String {  //~ ERROR mismatched types\n+LL |   fn f() -> String {  //~ ERROR mismatched types\n    |  __________________^\n-12 | |     0u8;\n-13 | |     \"bla\".to_string();\n+LL | |     0u8;\n+LL | |     \"bla\".to_string();\n    | |                      - help: consider removing this semicolon\n-14 | | }\n+LL | | }\n    | |_^ expected struct `std::string::String`, found ()\n    |\n    = note: expected type `std::string::String`\n@@ -15,12 +15,12 @@ error[E0308]: mismatched types\n error[E0308]: mismatched types\n   --> $DIR/consider-removing-last-semi.rs:16:18\n    |\n-16 |   fn g() -> String {  //~ ERROR mismatched types\n+LL |   fn g() -> String {  //~ ERROR mismatched types\n    |  __________________^\n-17 | |     \"this won't work\".to_string();\n-18 | |     \"removeme\".to_string();\n+LL | |     \"this won't work\".to_string();\n+LL | |     \"removeme\".to_string();\n    | |                           - help: consider removing this semicolon\n-19 | | }\n+LL | | }\n    | |_^ expected struct `std::string::String`, found ()\n    |\n    = note: expected type `std::string::String`"}, {"sha": "8fad1c4de4a161ad56aa054a66e399e947d3e43e", "filename": "src/test/ui/block-result/issue-11714.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-11714.rs:11:18\n    |\n-11 |   fn blah() -> i32 { //~ ERROR mismatched types\n+LL |   fn blah() -> i32 { //~ ERROR mismatched types\n    |  __________________^\n-12 | |     1\n-13 | |\n-14 | |     ;\n+LL | |     1\n+LL | |\n+LL | |     ;\n    | |     - help: consider removing this semicolon\n-15 | | }\n+LL | | }\n    | |_^ expected i32, found ()\n    |\n    = note: expected type `i32`"}, {"sha": "7f39f53d6f9979cf69d8c00d8b77e16562380ea3", "filename": "src/test/ui/block-result/issue-13428.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,15 +1,15 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-13428.rs:13:20\n    |\n-13 |   fn foo() -> String {  //~ ERROR mismatched types\n+LL |   fn foo() -> String {  //~ ERROR mismatched types\n    |  ____________________^\n-14 | |     format!(\"Hello {}\",\n-15 | |             \"world\")\n-16 | |     // Put the trailing semicolon on its own line to test that the\n-17 | |     // note message gets the offending semicolon exactly\n-18 | |     ;\n+LL | |     format!(\"Hello {}\",\n+LL | |             \"world\")\n+LL | |     // Put the trailing semicolon on its own line to test that the\n+LL | |     // note message gets the offending semicolon exactly\n+LL | |     ;\n    | |     - help: consider removing this semicolon\n-19 | | }\n+LL | | }\n    | |_^ expected struct `std::string::String`, found ()\n    |\n    = note: expected type `std::string::String`\n@@ -18,12 +18,12 @@ error[E0308]: mismatched types\n error[E0308]: mismatched types\n   --> $DIR/issue-13428.rs:21:20\n    |\n-21 |   fn bar() -> String {  //~ ERROR mismatched types\n+LL |   fn bar() -> String {  //~ ERROR mismatched types\n    |  ____________________^\n-22 | |     \"foobar\".to_string()\n-23 | |     ;\n+LL | |     \"foobar\".to_string()\n+LL | |     ;\n    | |     - help: consider removing this semicolon\n-24 | | }\n+LL | | }\n    | |_^ expected struct `std::string::String`, found ()\n    |\n    = note: expected type `std::string::String`"}, {"sha": "0df7cf43c351a5d71d2b4b9c796ae413ee3b9fb3", "filename": "src/test/ui/block-result/issue-13624.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,9 +1,9 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-13624.rs:17:5\n    |\n-16 |   pub fn get_enum_struct_variant() -> () {\n+LL |   pub fn get_enum_struct_variant() -> () {\n    |                                       -- expected `()` because of return type\n-17 |     Enum::EnumStructVariant { x: 1, y: 2, z: 3 }\n+LL |     Enum::EnumStructVariant { x: 1, y: 2, z: 3 }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found enum `a::Enum`\n    |\n    = note: expected type `()`\n@@ -12,7 +12,7 @@ error[E0308]: mismatched types\n error[E0308]: mismatched types\n   --> $DIR/issue-13624.rs:32:9\n    |\n-32 |         a::Enum::EnumStructVariant { x, y, z } => {\n+LL |         a::Enum::EnumStructVariant { x, y, z } => {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found enum `a::Enum`\n    |\n    = note: expected type `()`"}, {"sha": "238edb765ac11ca4145f121ccf635b13298fc7d6", "filename": "src/test/ui/block-result/issue-20862.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,9 +1,9 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-20862.rs:12:5\n    |\n-11 | fn foo(x: i32) {\n+LL | fn foo(x: i32) {\n    |                - possibly return type missing here?\n-12 |     |y| x + y\n+LL |     |y| x + y\n    |     ^^^^^^^^^ expected (), found closure\n    |\n    = note: expected type `()`\n@@ -12,7 +12,7 @@ error[E0308]: mismatched types\n error[E0618]: expected function, found `()`\n   --> $DIR/issue-20862.rs:17:13\n    |\n-17 |     let x = foo(5)(2);\n+LL |     let x = foo(5)(2);\n    |             ^^^^^^^^^ not a function\n \n error: aborting due to 2 previous errors"}, {"sha": "03d9d03371ee876a4289ae66efe9860921b33755", "filename": "src/test/ui/block-result/issue-22645.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: the trait bound `{integer}: Scalar` is not satisfied\n   --> $DIR/issue-22645.rs:25:5\n    |\n-25 |   b + 3 //~ ERROR E0277\n+LL |   b + 3 //~ ERROR E0277\n    |     ^ the trait `Scalar` is not implemented for `{integer}`\n    |\n    = help: the following implementations were found:\n@@ -11,10 +11,10 @@ error[E0277]: the trait bound `{integer}: Scalar` is not satisfied\n error[E0308]: mismatched types\n   --> $DIR/issue-22645.rs:25:3\n    |\n-23 | fn main() {\n+LL | fn main() {\n    |           - expected `()` because of default return type\n-24 |   let b = Bob + 3.5;\n-25 |   b + 3 //~ ERROR E0277\n+LL |   let b = Bob + 3.5;\n+LL |   b + 3 //~ ERROR E0277\n    |   ^^^^^ expected (), found struct `Bob`\n    |\n    = note: expected type `()`"}, {"sha": "af0e25ab18a90d1e50a90003d69a80db6b175fe4", "filename": "src/test/ui/block-result/issue-3563.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fblock-result%2Fissue-3563.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fblock-result%2Fissue-3563.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-3563.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0599]: no method named `b` found for type `&Self` in the current scope\n   --> $DIR/issue-3563.rs:13:17\n    |\n-13 |         || self.b()\n+LL |         || self.b()\n    |                 ^\n    |\n    = help: did you mean `a`?"}, {"sha": "74379809de0d50f676505c47437a8cd4c63a1c55", "filename": "src/test/ui/block-result/issue-5500.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,9 +1,9 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-5500.rs:12:5\n    |\n-11 | fn main() {\n+LL | fn main() {\n    |           - expected `()` because of default return type\n-12 |     &panic!()\n+LL |     &panic!()\n    |     ^^^^^^^^^ expected (), found reference\n    |\n    = note: expected type `()`"}, {"sha": "10a8814a7e54f2cd6226d98e4d7422b26173b52b", "filename": "src/test/ui/block-result/unexpected-return-on-unit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,18 +1,18 @@\n error[E0308]: mismatched types\n   --> $DIR/unexpected-return-on-unit.rs:19:5\n    |\n-19 |     foo() //~ ERROR mismatched types\n+LL |     foo() //~ ERROR mismatched types\n    |     ^^^^^ expected (), found usize\n    |\n    = note: expected type `()`\n               found type `usize`\n help: try adding a semicolon\n    |\n-19 |     foo(); //~ ERROR mismatched types\n+LL |     foo(); //~ ERROR mismatched types\n    |          ^\n help: try adding a return type\n    |\n-18 | fn bar() -> usize {\n+LL | fn bar() -> usize {\n    |          ^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "76284f3b71b63297a111eff6a805e52361a2cca7", "filename": "src/test/ui/bogus-tag.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fbogus-tag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fbogus-tag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbogus-tag.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0599]: no variant named `hsl` found for type `color` in the current scope\n   --> $DIR/bogus-tag.rs:18:7\n    |\n-12 | enum color { rgb(isize, isize, isize), rgba(isize, isize, isize, isize), }\n+LL | enum color { rgb(isize, isize, isize), rgba(isize, isize, isize, isize), }\n    | ---------- variant `hsl` not found here\n ...\n-18 |       color::hsl(h, s, l) => { println!(\"hsl\"); }\n+LL |       color::hsl(h, s, l) => { println!(\"hsl\"); }\n    |       ^^^^^^^^^^^^^^^^^^^ variant not found in `color`\n \n error: aborting due to previous error"}, {"sha": "7bea41b2209e49be77449ba727b07cdbd5fc40c2", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.stderr", "status": "modified", "additions": 89, "deletions": 89, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,163 +1,163 @@\n error[E0382]: use of moved value: `a`\n   --> $DIR/borrowck-box-insensitivity.rs:37:9\n    |\n-35 |     let _x = a.x;\n+LL |     let _x = a.x;\n    |         -- value moved here\n-36 |     //~^ value moved here\n-37 |     let _y = a.y; //~ ERROR use of moved\n+LL |     //~^ value moved here\n+LL |     let _y = a.y; //~ ERROR use of moved\n    |         ^^ value used here after move\n    |\n    = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n   --> $DIR/borrowck-box-insensitivity.rs:46:9\n    |\n-44 |     let _x = a.x;\n+LL |     let _x = a.x;\n    |         -- value moved here\n-45 |     //~^ value moved here\n-46 |     let _y = a.y; //~ ERROR use of moved\n+LL |     //~^ value moved here\n+LL |     let _y = a.y; //~ ERROR use of moved\n    |         ^^ value used here after move\n    |\n    = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n   --> $DIR/borrowck-box-insensitivity.rs:55:15\n    |\n-53 |     let _x = a.x;\n+LL |     let _x = a.x;\n    |         -- value moved here\n-54 |     //~^ value moved here\n-55 |     let _y = &a.y; //~ ERROR use of moved\n+LL |     //~^ value moved here\n+LL |     let _y = &a.y; //~ ERROR use of moved\n    |               ^^^ value used here after move\n    |\n    = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error[E0505]: cannot move out of `a.y` because it is borrowed\n   --> $DIR/borrowck-box-insensitivity.rs:63:9\n    |\n-62 |     let _x = &a.x;\n+LL |     let _x = &a.x;\n    |               --- borrow of `a.x` occurs here\n-63 |     let _y = a.y;\n+LL |     let _y = a.y;\n    |         ^^ move out of `a.y` occurs here\n \n error[E0503]: cannot use `a.y` because it was mutably borrowed\n   --> $DIR/borrowck-box-insensitivity.rs:71:9\n    |\n-70 |     let _x = &mut a.x;\n+LL |     let _x = &mut a.x;\n    |                   --- borrow of `a.x` occurs here\n-71 |     let _y = a.y; //~ ERROR cannot use\n+LL |     let _y = a.y; //~ ERROR cannot use\n    |         ^^ use of borrowed `a.x`\n \n error[E0505]: cannot move out of `a.y` because it is borrowed\n   --> $DIR/borrowck-box-insensitivity.rs:77:9\n    |\n-76 |     let _x = &mut a.x;\n+LL |     let _x = &mut a.x;\n    |                   --- borrow of `a.x` occurs here\n-77 |     let _y = a.y;\n+LL |     let _y = a.y;\n    |         ^^ move out of `a.y` occurs here\n \n error[E0502]: cannot borrow `a` (via `a.y`) as immutable because `a` is also borrowed as mutable (via `a.x`)\n   --> $DIR/borrowck-box-insensitivity.rs:85:15\n    |\n-84 |     let _x = &mut a.x;\n+LL |     let _x = &mut a.x;\n    |                   --- mutable borrow occurs here (via `a.x`)\n-85 |     let _y = &a.y; //~ ERROR cannot borrow\n+LL |     let _y = &a.y; //~ ERROR cannot borrow\n    |               ^^^ immutable borrow occurs here (via `a.y`)\n-86 |     //~^ immutable borrow occurs here (via `a.y`)\n-87 | }\n+LL |     //~^ immutable borrow occurs here (via `a.y`)\n+LL | }\n    | - mutable borrow ends here\n \n error[E0502]: cannot borrow `a` (via `a.y`) as mutable because `a` is also borrowed as immutable (via `a.x`)\n   --> $DIR/borrowck-box-insensitivity.rs:92:19\n    |\n-91 |     let _x = &a.x;\n+LL |     let _x = &a.x;\n    |               --- immutable borrow occurs here (via `a.x`)\n-92 |     let _y = &mut a.y; //~ ERROR cannot borrow\n+LL |     let _y = &mut a.y; //~ ERROR cannot borrow\n    |                   ^^^ mutable borrow occurs here (via `a.y`)\n-93 |     //~^ mutable borrow occurs here (via `a.y`)\n-94 | }\n+LL |     //~^ mutable borrow occurs here (via `a.y`)\n+LL | }\n    | - immutable borrow ends here\n \n error[E0382]: use of collaterally moved value: `a.y`\n-   --> $DIR/borrowck-box-insensitivity.rs:100:9\n-    |\n-98  |     let _x = a.x.x;\n-    |         -- value moved here\n-99  |     //~^ value moved here\n-100 |     let _y = a.y; //~ ERROR use of collaterally moved\n-    |         ^^ value used here after move\n-    |\n-    = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+  --> $DIR/borrowck-box-insensitivity.rs:100:9\n+   |\n+LL |     let _x = a.x.x;\n+   |         -- value moved here\n+LL |     //~^ value moved here\n+LL |     let _y = a.y; //~ ERROR use of collaterally moved\n+   |         ^^ value used here after move\n+   |\n+   = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error[E0382]: use of collaterally moved value: `a.y`\n-   --> $DIR/borrowck-box-insensitivity.rs:108:9\n-    |\n-106 |     let _x = a.x.x;\n-    |         -- value moved here\n-107 |     //~^ value moved here\n-108 |     let _y = a.y; //~ ERROR use of collaterally moved\n-    |         ^^ value used here after move\n-    |\n-    = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+  --> $DIR/borrowck-box-insensitivity.rs:108:9\n+   |\n+LL |     let _x = a.x.x;\n+   |         -- value moved here\n+LL |     //~^ value moved here\n+LL |     let _y = a.y; //~ ERROR use of collaterally moved\n+   |         ^^ value used here after move\n+   |\n+   = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error[E0382]: use of collaterally moved value: `a.y`\n-   --> $DIR/borrowck-box-insensitivity.rs:116:15\n-    |\n-114 |     let _x = a.x.x;\n-    |         -- value moved here\n-115 |     //~^ value moved here\n-116 |     let _y = &a.y; //~ ERROR use of collaterally moved\n-    |               ^^^ value used here after move\n-    |\n-    = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+  --> $DIR/borrowck-box-insensitivity.rs:116:15\n+   |\n+LL |     let _x = a.x.x;\n+   |         -- value moved here\n+LL |     //~^ value moved here\n+LL |     let _y = &a.y; //~ ERROR use of collaterally moved\n+   |               ^^^ value used here after move\n+   |\n+   = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error[E0505]: cannot move out of `a.y` because it is borrowed\n-   --> $DIR/borrowck-box-insensitivity.rs:124:9\n-    |\n-122 |     let _x = &a.x.x;\n-    |               ----- borrow of `a.x.x` occurs here\n-123 |     //~^ borrow of `a.x.x` occurs here\n-124 |     let _y = a.y;\n-    |         ^^ move out of `a.y` occurs here\n+  --> $DIR/borrowck-box-insensitivity.rs:124:9\n+   |\n+LL |     let _x = &a.x.x;\n+   |               ----- borrow of `a.x.x` occurs here\n+LL |     //~^ borrow of `a.x.x` occurs here\n+LL |     let _y = a.y;\n+   |         ^^ move out of `a.y` occurs here\n \n error[E0503]: cannot use `a.y` because it was mutably borrowed\n-   --> $DIR/borrowck-box-insensitivity.rs:132:9\n-    |\n-131 |     let _x = &mut a.x.x;\n-    |                   ----- borrow of `a.x.x` occurs here\n-132 |     let _y = a.y; //~ ERROR cannot use\n-    |         ^^ use of borrowed `a.x.x`\n+  --> $DIR/borrowck-box-insensitivity.rs:132:9\n+   |\n+LL |     let _x = &mut a.x.x;\n+   |                   ----- borrow of `a.x.x` occurs here\n+LL |     let _y = a.y; //~ ERROR cannot use\n+   |         ^^ use of borrowed `a.x.x`\n \n error[E0505]: cannot move out of `a.y` because it is borrowed\n-   --> $DIR/borrowck-box-insensitivity.rs:138:9\n-    |\n-137 |     let _x = &mut a.x.x;\n-    |                   ----- borrow of `a.x.x` occurs here\n-138 |     let _y = a.y;\n-    |         ^^ move out of `a.y` occurs here\n+  --> $DIR/borrowck-box-insensitivity.rs:138:9\n+   |\n+LL |     let _x = &mut a.x.x;\n+   |                   ----- borrow of `a.x.x` occurs here\n+LL |     let _y = a.y;\n+   |         ^^ move out of `a.y` occurs here\n \n error[E0502]: cannot borrow `a.y` as immutable because `a.x.x` is also borrowed as mutable\n-   --> $DIR/borrowck-box-insensitivity.rs:147:15\n-    |\n-145 |     let _x = &mut a.x.x;\n-    |                   ----- mutable borrow occurs here\n-146 |     //~^ mutable borrow occurs here\n-147 |     let _y = &a.y; //~ ERROR cannot borrow\n-    |               ^^^ immutable borrow occurs here\n-148 |     //~^ immutable borrow occurs here\n-149 | }\n-    | - mutable borrow ends here\n+  --> $DIR/borrowck-box-insensitivity.rs:147:15\n+   |\n+LL |     let _x = &mut a.x.x;\n+   |                   ----- mutable borrow occurs here\n+LL |     //~^ mutable borrow occurs here\n+LL |     let _y = &a.y; //~ ERROR cannot borrow\n+   |               ^^^ immutable borrow occurs here\n+LL |     //~^ immutable borrow occurs here\n+LL | }\n+   | - mutable borrow ends here\n \n error[E0502]: cannot borrow `a.y` as mutable because `a.x.x` is also borrowed as immutable\n-   --> $DIR/borrowck-box-insensitivity.rs:155:19\n-    |\n-153 |     let _x = &a.x.x;\n-    |               ----- immutable borrow occurs here\n-154 |     //~^ immutable borrow occurs here\n-155 |     let _y = &mut a.y; //~ ERROR cannot borrow\n-    |                   ^^^ mutable borrow occurs here\n-156 |     //~^ mutable borrow occurs here\n-157 | }\n-    | - immutable borrow ends here\n+  --> $DIR/borrowck-box-insensitivity.rs:155:19\n+   |\n+LL |     let _x = &a.x.x;\n+   |               ----- immutable borrow occurs here\n+LL |     //~^ immutable borrow occurs here\n+LL |     let _y = &mut a.y; //~ ERROR cannot borrow\n+   |                   ^^^ mutable borrow occurs here\n+LL |     //~^ mutable borrow occurs here\n+LL | }\n+   | - immutable borrow ends here\n \n error: aborting due to 16 previous errors\n "}, {"sha": "7205b48399a293dd82d8f317e75eb56ba766ca3a", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut.stderr", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,151 +1,151 @@\n error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n   --> $DIR/borrowck-closures-two-mut.rs:24:24\n    |\n-23 |     let c1 = to_fn_mut(|| x = 4);\n+LL |     let c1 = to_fn_mut(|| x = 4);\n    |                        -- - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-24 |     let c2 = to_fn_mut(|| x = 5); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| x = 5); //~ ERROR cannot borrow `x` as mutable more than once\n    |                        ^^ - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-25 |     //~| ERROR cannot borrow `x` as mutable more than once\n-26 | }\n+LL |     //~| ERROR cannot borrow `x` as mutable more than once\n+LL | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n   --> $DIR/borrowck-closures-two-mut.rs:35:24\n    |\n-34 |     let c1 = to_fn_mut(|| set(&mut x));\n+LL |     let c1 = to_fn_mut(|| set(&mut x));\n    |                        --          - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-35 |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n    |                        ^^          - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-36 |     //~| ERROR cannot borrow `x` as mutable more than once\n-37 | }\n+LL |     //~| ERROR cannot borrow `x` as mutable more than once\n+LL | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n   --> $DIR/borrowck-closures-two-mut.rs:42:24\n    |\n-41 |     let c1 = to_fn_mut(|| x = 5);\n+LL |     let c1 = to_fn_mut(|| x = 5);\n    |                        -- - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-42 |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n    |                        ^^          - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-43 |     //~| ERROR cannot borrow `x` as mutable more than once\n-44 | }\n+LL |     //~| ERROR cannot borrow `x` as mutable more than once\n+LL | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n   --> $DIR/borrowck-closures-two-mut.rs:49:24\n    |\n-48 |     let c1 = to_fn_mut(|| x = 5);\n+LL |     let c1 = to_fn_mut(|| x = 5);\n    |                        -- - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-49 |     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nested closure)\n+LL |     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nested closure)\n    |                        ^^                                  - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n ...\n-52 | }\n+LL | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n   --> $DIR/borrowck-closures-two-mut.rs:61:24\n    |\n-60 |     let c1 = to_fn_mut(|| set(&mut *x.f));\n+LL |     let c1 = to_fn_mut(|| set(&mut *x.f));\n    |                        --           - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-61 |     let c2 = to_fn_mut(|| set(&mut *x.f));\n+LL |     let c2 = to_fn_mut(|| set(&mut *x.f));\n    |                        ^^           - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n ...\n-64 | }\n+LL | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n   --> $DIR/borrowck-closures-two-mut.rs:24:24\n    |\n-23 |     let c1 = to_fn_mut(|| x = 4);\n+LL |     let c1 = to_fn_mut(|| x = 4);\n    |                        -- - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-24 |     let c2 = to_fn_mut(|| x = 5); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| x = 5); //~ ERROR cannot borrow `x` as mutable more than once\n    |                        ^^ - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-25 |     //~| ERROR cannot borrow `x` as mutable more than once\n-26 | }\n+LL |     //~| ERROR cannot borrow `x` as mutable more than once\n+LL | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n   --> $DIR/borrowck-closures-two-mut.rs:35:24\n    |\n-34 |     let c1 = to_fn_mut(|| set(&mut x));\n+LL |     let c1 = to_fn_mut(|| set(&mut x));\n    |                        --          - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-35 |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n    |                        ^^          - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-36 |     //~| ERROR cannot borrow `x` as mutable more than once\n-37 | }\n+LL |     //~| ERROR cannot borrow `x` as mutable more than once\n+LL | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n   --> $DIR/borrowck-closures-two-mut.rs:42:24\n    |\n-41 |     let c1 = to_fn_mut(|| x = 5);\n+LL |     let c1 = to_fn_mut(|| x = 5);\n    |                        -- - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-42 |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n    |                        ^^          - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-43 |     //~| ERROR cannot borrow `x` as mutable more than once\n-44 | }\n+LL |     //~| ERROR cannot borrow `x` as mutable more than once\n+LL | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n   --> $DIR/borrowck-closures-two-mut.rs:49:24\n    |\n-48 |     let c1 = to_fn_mut(|| x = 5);\n+LL |     let c1 = to_fn_mut(|| x = 5);\n    |                        -- - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-49 |     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nested closure)\n+LL |     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nested closure)\n    |                        ^^                                  - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n ...\n-52 | }\n+LL | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n   --> $DIR/borrowck-closures-two-mut.rs:61:24\n    |\n-60 |     let c1 = to_fn_mut(|| set(&mut *x.f));\n+LL |     let c1 = to_fn_mut(|| set(&mut *x.f));\n    |                        --           - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-61 |     let c2 = to_fn_mut(|| set(&mut *x.f));\n+LL |     let c2 = to_fn_mut(|| set(&mut *x.f));\n    |                        ^^           - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n ...\n-64 | }\n+LL | }\n    | - first borrow ends here\n \n error: aborting due to 10 previous errors"}, {"sha": "98176cce508a3d0de06af9cf694353507b531042", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,13 +1,13 @@\n error[E0373]: closure may outlive the current function, but it borrows `books`, which is owned by the current function\n   --> $DIR/borrowck-escaping-closure-error-1.rs:23:11\n    |\n-23 |     spawn(|| books.push(4));\n+LL |     spawn(|| books.push(4));\n    |           ^^ ----- `books` is borrowed here\n    |           |\n    |           may outlive borrowed value `books`\n help: to force the closure to take ownership of `books` (and any other referenced variables), use the `move` keyword\n    |\n-23 |     spawn(move || books.push(4));\n+LL |     spawn(move || books.push(4));\n    |           ^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "5de31c3ac3578596bf74457c10bce5e9392be7bb", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,13 +1,13 @@\n error[E0373]: closure may outlive the current function, but it borrows `books`, which is owned by the current function\n   --> $DIR/borrowck-escaping-closure-error-2.rs:21:14\n    |\n-21 |     Box::new(|| books.push(4))\n+LL |     Box::new(|| books.push(4))\n    |              ^^ ----- `books` is borrowed here\n    |              |\n    |              may outlive borrowed value `books`\n help: to force the closure to take ownership of `books` (and any other referenced variables), use the `move` keyword\n    |\n-21 |     Box::new(move || books.push(4))\n+LL |     Box::new(move || books.push(4))\n    |              ^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "989322662e868177a38b720da5791cf6454d541e", "filename": "src/test/ui/borrowck/borrowck-in-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,9 +1,9 @@\n error[E0507]: cannot move out of captured outer variable in an `Fn` closure\n   --> $DIR/borrowck-in-static.rs:15:17\n    |\n-14 |     let x = Box::new(0);\n+LL |     let x = Box::new(0);\n    |         - captured outer variable\n-15 |     Box::new(|| x) //~ ERROR cannot move out of captured outer variable\n+LL |     Box::new(|| x) //~ ERROR cannot move out of captured outer variable\n    |                 ^ cannot move out of captured outer variable in an `Fn` closure\n \n error: aborting due to previous error"}, {"sha": "acc78f4ab32953e5e25440b848abc884186bc5e2", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,35 +1,35 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-move-error-with-note.rs:21:11\n    |\n-21 |     match *f {             //~ ERROR cannot move out of\n+LL |     match *f {             //~ ERROR cannot move out of\n    |           ^^ cannot move out of borrowed content\n-22 |                            //~| cannot move out\n-23 |         Foo::Foo1(num1,\n+LL |                            //~| cannot move out\n+LL |         Foo::Foo1(num1,\n    |                   ---- hint: to prevent move, use `ref num1` or `ref mut num1`\n-24 |                   num2) => (),\n+LL |                   num2) => (),\n    |                   ---- ...and here (use `ref num2` or `ref mut num2`)\n-25 |         Foo::Foo2(num) => (),\n+LL |         Foo::Foo2(num) => (),\n    |                   --- ...and here (use `ref num` or `ref mut num`)\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n   --> $DIR/borrowck-move-error-with-note.rs:40:9\n    |\n-40 | /         S {         //~ ERROR cannot move out of type `S`, which implements the `Drop` trait\n-41 | |         //~| cannot move out of here\n-42 | |             f: _s,\n+LL | /         S {         //~ ERROR cannot move out of type `S`, which implements the `Drop` trait\n+LL | |         //~| cannot move out of here\n+LL | |             f: _s,\n    | |                -- hint: to prevent move, use `ref _s` or `ref mut _s`\n-43 | |             g: _t\n+LL | |             g: _t\n    | |                -- ...and here (use `ref _t` or `ref mut _t`)\n-44 | |         } => {}\n+LL | |         } => {}\n    | |_________^ cannot move out of here\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-move-error-with-note.rs:57:11\n    |\n-57 |     match a.a {           //~ ERROR cannot move out of\n+LL |     match a.a {           //~ ERROR cannot move out of\n    |           ^ cannot move out of borrowed content\n-58 |                           //~| cannot move out\n-59 |         n => {\n+LL |                           //~| cannot move out\n+LL |         n => {\n    |         - hint: to prevent move, use `ref n` or `ref mut n`\n \n error: aborting due to 3 previous errors"}, {"sha": "49d5daa543bbad9415c571de62cf943461e0d6bb", "filename": "src/test/ui/borrowck/borrowck-move-out-of-vec-tail.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,14 +1,14 @@\n error[E0508]: cannot move out of type `[Foo]`, a non-copy slice\n   --> $DIR/borrowck-move-out-of-vec-tail.rs:30:18\n    |\n-30 |                   &[Foo { string: a },\n+LL |                   &[Foo { string: a },\n    |                    ^              - hint: to prevent move, use `ref a` or `ref mut a`\n    |  __________________|\n    | |\n-31 | |                 //~^ ERROR cannot move out of type `[Foo]`\n-32 | |                 //~| cannot move out\n-33 | |                 //~| to prevent move\n-34 | |                   Foo { string: b }] => {\n+LL | |                 //~^ ERROR cannot move out of type `[Foo]`\n+LL | |                 //~| cannot move out\n+LL | |                 //~| to prevent move\n+LL | |                   Foo { string: b }] => {\n    | |_________________________________-__^ cannot move out of here\n    |                                   |\n    |                                   ...and here (use `ref b` or `ref mut b`)"}, {"sha": "a2fbe5ab9cd5a46960868160bb4a18c8d05336c8", "filename": "src/test/ui/borrowck/borrowck-reinit.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,19 +1,19 @@\n error[E0382]: use of moved value: `x` (Ast)\n   --> $DIR/borrowck-reinit.rs:18:16\n    |\n-17 |     drop(x);\n+LL |     drop(x);\n    |          - value moved here\n-18 |     let _ = (1,x); //~ ERROR use of moved value: `x` (Ast)\n+LL |     let _ = (1,x); //~ ERROR use of moved value: `x` (Ast)\n    |                ^ value used here after move\n    |\n    = note: move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `x` (Mir)\n   --> $DIR/borrowck-reinit.rs:18:16\n    |\n-17 |     drop(x);\n+LL |     drop(x);\n    |          - value moved here\n-18 |     let _ = (1,x); //~ ERROR use of moved value: `x` (Ast)\n+LL |     let _ = (1,x); //~ ERROR use of moved value: `x` (Ast)\n    |                ^ value used here after move\n    |\n    = note: move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait"}, {"sha": "01899446f48f723ce503691ec0466a7ecc83e533", "filename": "src/test/ui/borrowck/borrowck-report-with-custom-diagnostic.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,37 +1,37 @@\n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-report-with-custom-diagnostic.rs:17:14\n    |\n-15 |     let y = &mut x;\n+LL |     let y = &mut x;\n    |                  - mutable borrow occurs here\n-16 |     //~^ mutable borrow occurs here\n-17 |     let z = &x; //~ ERROR cannot borrow\n+LL |     //~^ mutable borrow occurs here\n+LL |     let z = &x; //~ ERROR cannot borrow\n    |              ^ immutable borrow occurs here\n-18 |     //~^ immutable borrow occurs here\n-19 | }\n+LL |     //~^ immutable borrow occurs here\n+LL | }\n    | - mutable borrow ends here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-report-with-custom-diagnostic.rs:28:26\n    |\n-26 |             let y = &x;\n+LL |             let y = &x;\n    |                      - immutable borrow occurs here\n-27 |             //~^ immutable borrow occurs here\n-28 |             let z = &mut x; //~ ERROR cannot borrow\n+LL |             //~^ immutable borrow occurs here\n+LL |             let z = &mut x; //~ ERROR cannot borrow\n    |                          ^ mutable borrow occurs here\n-29 |             //~^ mutable borrow occurs here\n-30 |         }\n+LL |             //~^ mutable borrow occurs here\n+LL |         }\n    |         - immutable borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-report-with-custom-diagnostic.rs:41:22\n    |\n-39 |         let y = &mut x;\n+LL |         let y = &mut x;\n    |                      - first mutable borrow occurs here\n-40 |         //~^ first mutable borrow occurs here\n-41 |         let z = &mut x; //~ ERROR cannot borrow\n+LL |         //~^ first mutable borrow occurs here\n+LL |         let z = &mut x; //~ ERROR cannot borrow\n    |                      ^ second mutable borrow occurs here\n-42 |         //~^ second mutable borrow occurs here\n-43 |     };\n+LL |         //~^ second mutable borrow occurs here\n+LL |     };\n    |     - first borrow ends here\n \n error: aborting due to 3 previous errors"}, {"sha": "3d9fbc800385f3a957c7ff1a7863ccfaccc2fa28", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,38 +1,38 @@\n error[E0506]: cannot assign to `vec[..]` because it is borrowed\n   --> $DIR/borrowck-vec-pattern-nesting.rs:21:13\n    |\n-19 |         [box ref _a, _, _] => {\n+LL |         [box ref _a, _, _] => {\n    |              ------ borrow of `vec[..]` occurs here\n-20 |         //~^ borrow of `vec[..]` occurs here\n-21 |             vec[0] = box 4; //~ ERROR cannot assign\n+LL |         //~^ borrow of `vec[..]` occurs here\n+LL |             vec[0] = box 4; //~ ERROR cannot assign\n    |             ^^^^^^^^^^^^^^ assignment to borrowed `vec[..]` occurs here\n \n error[E0506]: cannot assign to `vec[..]` because it is borrowed\n   --> $DIR/borrowck-vec-pattern-nesting.rs:33:13\n    |\n-31 |         &mut [ref _b..] => {\n+LL |         &mut [ref _b..] => {\n    |               ------ borrow of `vec[..]` occurs here\n-32 |         //~^ borrow of `vec[..]` occurs here\n-33 |             vec[0] = box 4; //~ ERROR cannot assign\n+LL |         //~^ borrow of `vec[..]` occurs here\n+LL |             vec[0] = box 4; //~ ERROR cannot assign\n    |             ^^^^^^^^^^^^^^ assignment to borrowed `vec[..]` occurs here\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:43:14\n    |\n-43 |           &mut [_a, //~ ERROR cannot move out\n+LL |           &mut [_a, //~ ERROR cannot move out\n    |                ^-- hint: to prevent move, use `ref _a` or `ref mut _a`\n    |  ______________|\n    | |\n-44 | |             //~| cannot move out\n-45 | |             //~| to prevent move\n-46 | |             ..\n-47 | |         ] => {\n+LL | |             //~| cannot move out\n+LL | |             //~| to prevent move\n+LL | |             ..\n+LL | |         ] => {\n    | |_________^ cannot move out of here\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:56:13\n    |\n-56 |     let a = vec[0]; //~ ERROR cannot move out\n+LL |     let a = vec[0]; //~ ERROR cannot move out\n    |             ^^^^^^\n    |             |\n    |             cannot move out of here\n@@ -41,18 +41,18 @@ error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy sli\n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:64:14\n    |\n-64 |           &mut [ //~ ERROR cannot move out\n+LL |           &mut [ //~ ERROR cannot move out\n    |  ______________^\n-65 | |         //~^ cannot move out\n-66 | |          _b] => {}\n+LL | |         //~^ cannot move out\n+LL | |          _b] => {}\n    | |__________--^ cannot move out of here\n    |            |\n    |            hint: to prevent move, use `ref _b` or `ref mut _b`\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:69:13\n    |\n-69 |     let a = vec[0]; //~ ERROR cannot move out\n+LL |     let a = vec[0]; //~ ERROR cannot move out\n    |             ^^^^^^\n    |             |\n    |             cannot move out of here\n@@ -61,7 +61,7 @@ error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy sli\n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:77:14\n    |\n-77 |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n+LL |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n    |              ^--^^--^^--^\n    |              ||   |   |\n    |              ||   |   ...and here (use `ref _c` or `ref mut _c`)\n@@ -72,7 +72,7 @@ error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy sli\n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:81:13\n    |\n-81 |     let a = vec[0]; //~ ERROR cannot move out\n+LL |     let a = vec[0]; //~ ERROR cannot move out\n    |             ^^^^^^\n    |             |\n    |             cannot move out of here"}, {"sha": "34de3ca19a3c2e6790c318f37ec1519913a12f83", "filename": "src/test/ui/borrowck/immutable-arg.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fimmutable-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fimmutable-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fimmutable-arg.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,17 +1,17 @@\n error[E0384]: cannot assign twice to immutable variable `_x` (Ast)\n   --> $DIR/immutable-arg.rs:14:5\n    |\n-13 | fn foo(_x: u32) {\n+LL | fn foo(_x: u32) {\n    |        -- first assignment to `_x`\n-14 |     _x = 4;\n+LL |     _x = 4;\n    |     ^^^^^^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign to immutable argument `_x` (Mir)\n   --> $DIR/immutable-arg.rs:14:5\n    |\n-13 | fn foo(_x: u32) {\n+LL | fn foo(_x: u32) {\n    |        -- argument not declared as `mut`\n-14 |     _x = 4;\n+LL |     _x = 4;\n    |     ^^^^^^ cannot assign to immutable argument\n \n error: aborting due to 2 previous errors"}, {"sha": "f0ee6b31f7369e7a7be4acaf6ee16326302c8652", "filename": "src/test/ui/borrowck/issue-41962.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0382]: use of partially moved value: `maybe` (Ast)\n   --> $DIR/issue-41962.rs:17:30\n    |\n-17 |         if let Some(thing) = maybe {\n+LL |         if let Some(thing) = maybe {\n    |                     -----    ^^^^^ value used here after move\n    |                     |\n    |                     value moved here\n@@ -11,32 +11,32 @@ error[E0382]: use of partially moved value: `maybe` (Ast)\n error[E0382]: use of moved value: `(maybe as std::prelude::v1::Some).0` (Ast)\n   --> $DIR/issue-41962.rs:17:21\n    |\n-17 |         if let Some(thing) = maybe {\n+LL |         if let Some(thing) = maybe {\n    |                     ^^^^^ value moved here in previous iteration of loop\n    |\n    = note: move occurs because the value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `maybe` (Mir)\n   --> $DIR/issue-41962.rs:17:9\n    |\n-17 |           if let Some(thing) = maybe {\n+LL |           if let Some(thing) = maybe {\n    |           ^           ----- value moved here\n    |  _________|\n    | |\n-18 | |         //~^ ERROR use of partially moved value: `maybe` (Ast) [E0382]\n-19 | |         //~| ERROR use of moved value: `(maybe as std::prelude::v1::Some).0` (Ast) [E0382]\n-20 | |         //~| ERROR use of moved value: `maybe` (Mir) [E0382]\n-21 | |         //~| ERROR use of moved value: `maybe` (Mir) [E0382]\n-22 | |         //~| ERROR use of moved value: `maybe.0` (Mir) [E0382]\n-23 | |         }\n+LL | |         //~^ ERROR use of partially moved value: `maybe` (Ast) [E0382]\n+LL | |         //~| ERROR use of moved value: `(maybe as std::prelude::v1::Some).0` (Ast) [E0382]\n+LL | |         //~| ERROR use of moved value: `maybe` (Mir) [E0382]\n+LL | |         //~| ERROR use of moved value: `maybe` (Mir) [E0382]\n+LL | |         //~| ERROR use of moved value: `maybe.0` (Mir) [E0382]\n+LL | |         }\n    | |_________^ value used here after move\n    |\n    = note: move occurs because `maybe` has type `std::option::Option<std::vec::Vec<bool>>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `maybe` (Mir)\n   --> $DIR/issue-41962.rs:17:16\n    |\n-17 |         if let Some(thing) = maybe {\n+LL |         if let Some(thing) = maybe {\n    |                ^^^^^-----^\n    |                |    |\n    |                |    value moved here\n@@ -47,7 +47,7 @@ error[E0382]: use of moved value: `maybe` (Mir)\n error[E0382]: use of moved value: `maybe.0` (Mir)\n   --> $DIR/issue-41962.rs:17:21\n    |\n-17 |         if let Some(thing) = maybe {\n+LL |         if let Some(thing) = maybe {\n    |                     ^^^^^ value moved here in previous iteration of loop\n    |\n    = note: move occurs because `maybe.0` has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait"}, {"sha": "7625b9e76186a17684eeada8e71c035bbae65b8e", "filename": "src/test/ui/borrowck/issue-45983.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,9 +1,9 @@\n error: borrowed data cannot be stored outside of its closure\n   --> $DIR/issue-45983.rs:17:27\n    |\n-16 |     let x = None;\n+LL |     let x = None;\n    |         - borrowed data cannot be stored into here...\n-17 |     give_any(|y| x = Some(y));\n+LL |     give_any(|y| x = Some(y));\n    |              ---          ^ cannot be stored outside of its closure\n    |              |\n    |              ...because it cannot outlive this closure"}, {"sha": "41a804adfe36916b71f92e90e0dca88ea6da7a7e", "filename": "src/test/ui/borrowck/issue-7573.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,15 +1,15 @@\n error: borrowed data cannot be stored outside of its closure\n   --> $DIR/issue-7573.rs:32:27\n    |\n-27 |     let mut lines_to_use: Vec<&CrateId> = Vec::new();\n+LL |     let mut lines_to_use: Vec<&CrateId> = Vec::new();\n    |                               - cannot infer an appropriate lifetime...\n-28 |         //~^ NOTE cannot infer an appropriate lifetime\n-29 |     let push_id = |installed_id: &CrateId| {\n+LL |         //~^ NOTE cannot infer an appropriate lifetime\n+LL |     let push_id = |installed_id: &CrateId| {\n    |         -------   ------------------------ borrowed data cannot outlive this closure\n    |         |\n    |         ...so that variable is valid at time of its declaration\n ...\n-32 |         lines_to_use.push(installed_id);\n+LL |         lines_to_use.push(installed_id);\n    |                           ^^^^^^^^^^^^ cannot be stored outside of its closure\n \n error: aborting due to previous error"}, {"sha": "9b777246861fab500856332b6c95064bb28f7f2f", "filename": "src/test/ui/borrowck/mut-borrow-in-loop.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,28 +1,28 @@\n error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n   --> $DIR/mut-borrow-in-loop.rs:20:25\n    |\n-20 |             (self.func)(arg) //~ ERROR cannot borrow\n+LL |             (self.func)(arg) //~ ERROR cannot borrow\n    |                         ^^^ mutable borrow starts here in previous iteration of loop\n-21 |         }\n-22 |     }\n+LL |         }\n+LL |     }\n    |     - mutable borrow ends here\n \n error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n   --> $DIR/mut-borrow-in-loop.rs:26:25\n    |\n-26 |             (self.func)(arg) //~ ERROR cannot borrow\n+LL |             (self.func)(arg) //~ ERROR cannot borrow\n    |                         ^^^ mutable borrow starts here in previous iteration of loop\n-27 |         }\n-28 |     }\n+LL |         }\n+LL |     }\n    |     - mutable borrow ends here\n \n error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n   --> $DIR/mut-borrow-in-loop.rs:33:25\n    |\n-33 |             (self.func)(arg) //~ ERROR cannot borrow\n+LL |             (self.func)(arg) //~ ERROR cannot borrow\n    |                         ^^^ mutable borrow starts here in previous iteration of loop\n-34 |         }\n-35 |     }\n+LL |         }\n+LL |     }\n    |     - mutable borrow ends here\n \n error: aborting due to 3 previous errors"}, {"sha": "583f97b6cdfd6fb647437059a5e63fc10705df5f", "filename": "src/test/ui/borrowck/mut-borrow-outside-loop.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,22 +1,22 @@\n error[E0499]: cannot borrow `void` as mutable more than once at a time\n   --> $DIR/mut-borrow-outside-loop.rs:17:23\n    |\n-16 |     let first = &mut void;\n+LL |     let first = &mut void;\n    |                      ---- first mutable borrow occurs here\n-17 |     let second = &mut void; //~ ERROR cannot borrow\n+LL |     let second = &mut void; //~ ERROR cannot borrow\n    |                       ^^^^ second mutable borrow occurs here\n ...\n-25 | }\n+LL | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `inner_void` as mutable more than once at a time\n   --> $DIR/mut-borrow-outside-loop.rs:23:33\n    |\n-22 |         let inner_first = &mut inner_void;\n+LL |         let inner_first = &mut inner_void;\n    |                                ---------- first mutable borrow occurs here\n-23 |         let inner_second = &mut inner_void; //~ ERROR cannot borrow\n+LL |         let inner_second = &mut inner_void; //~ ERROR cannot borrow\n    |                                 ^^^^^^^^^^ second mutable borrow occurs here\n-24 |     }\n+LL |     }\n    |     - first borrow ends here\n \n error: aborting due to 2 previous errors"}, {"sha": "2fe3a45b76d4194226b2e7c4668166b6b5e6bab8", "filename": "src/test/ui/borrowck/regions-bound-missing-bound-in-impl.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,47 +1,47 @@\n error[E0195]: lifetime parameters or bounds on method `no_bound` do not match the trait declaration\n   --> $DIR/regions-bound-missing-bound-in-impl.rs:28:5\n    |\n-20 |     fn no_bound<'b>(self, b: Inv<'b>);\n+LL |     fn no_bound<'b>(self, b: Inv<'b>);\n    |     ---------------------------------- lifetimes in impl do not match this method in trait\n ...\n-28 |     fn no_bound<'b:'a>(self, b: Inv<'b>) {\n+LL |     fn no_bound<'b:'a>(self, b: Inv<'b>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetimes do not match method in trait\n \n error[E0195]: lifetime parameters or bounds on method `has_bound` do not match the trait declaration\n   --> $DIR/regions-bound-missing-bound-in-impl.rs:32:5\n    |\n-21 |     fn has_bound<'b:'a>(self, b: Inv<'b>);\n+LL |     fn has_bound<'b:'a>(self, b: Inv<'b>);\n    |     -------------------------------------- lifetimes in impl do not match this method in trait\n ...\n-32 |     fn has_bound<'b>(self, b: Inv<'b>) {\n+LL |     fn has_bound<'b>(self, b: Inv<'b>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetimes do not match method in trait\n \n error[E0308]: method not compatible with trait\n   --> $DIR/regions-bound-missing-bound-in-impl.rs:36:5\n    |\n-36 |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n+LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `fn(&'a isize, Inv<'c>, Inv<'c>, Inv<'d>)`\n               found type `fn(&'a isize, Inv<'_>, Inv<'c>, Inv<'d>)`\n note: the lifetime 'c as defined on the method body at 36:5...\n   --> $DIR/regions-bound-missing-bound-in-impl.rs:36:5\n    |\n-36 |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n+LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...does not necessarily outlive the lifetime 'c as defined on the method body at 36:5\n   --> $DIR/regions-bound-missing-bound-in-impl.rs:36:5\n    |\n-36 |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n+LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/regions-bound-missing-bound-in-impl.rs:53:5\n    |\n-24 |     fn another_bound<'x: 'a>(self, x: Inv<'x>, y: Inv<'t>);\n+LL |     fn another_bound<'x: 'a>(self, x: Inv<'x>, y: Inv<'t>);\n    |     ------------------------------------------------------- definition of `another_bound` from trait\n ...\n-53 |     fn another_bound<'x: 't>(self, x: Inv<'x>, y: Inv<'t>) {\n+LL |     fn another_bound<'x: 't>(self, x: Inv<'x>, y: Inv<'t>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `'x: 't`\n \n error: aborting due to 4 previous errors"}, {"sha": "05654a93564841d1d584641eefbe001428bf4205", "filename": "src/test/ui/borrowck/regions-escape-bound-fn-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,9 +1,9 @@\n error: borrowed data cannot be stored outside of its closure\n   --> $DIR/regions-escape-bound-fn-2.rs:18:27\n    |\n-17 |     let mut x = None;\n+LL |     let mut x = None;\n    |         ----- borrowed data cannot be stored into here...\n-18 |     with_int(|y| x = Some(y));\n+LL |     with_int(|y| x = Some(y));\n    |              ---          ^ cannot be stored outside of its closure\n    |              |\n    |              ...because it cannot outlive this closure"}, {"sha": "5f05ee90d072c448b394d99718def9bc13834798", "filename": "src/test/ui/borrowck/regions-escape-bound-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,9 +1,9 @@\n error: borrowed data cannot be stored outside of its closure\n   --> $DIR/regions-escape-bound-fn.rs:18:27\n    |\n-17 |     let mut x: Option<&isize> = None;\n+LL |     let mut x: Option<&isize> = None;\n    |         ----- borrowed data cannot be stored into here...\n-18 |     with_int(|y| x = Some(y));\n+LL |     with_int(|y| x = Some(y));\n    |              ---          ^ cannot be stored outside of its closure\n    |              |\n    |              ...because it cannot outlive this closure"}, {"sha": "c90dd2417d0e0e8bd95b51d1dfda992c99ee2841", "filename": "src/test/ui/borrowck/regions-escape-unboxed-closure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,9 +1,9 @@\n error: borrowed data cannot be stored outside of its closure\n   --> $DIR/regions-escape-unboxed-closure.rs:16:32\n    |\n-15 |     let mut x: Option<&isize> = None;\n+LL |     let mut x: Option<&isize> = None;\n    |         ----- borrowed data cannot be stored into here...\n-16 |     with_int(&mut |y| x = Some(y));\n+LL |     with_int(&mut |y| x = Some(y));\n    |                   ---          ^ cannot be stored outside of its closure\n    |                   |\n    |                   ...because it cannot outlive this closure"}, {"sha": "d07bdab087cbce489111a5ae1ab49a52285f261d", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0507]: cannot move out of captured outer variable in an `Fn` closure\n   --> $DIR/unboxed-closures-move-upvar-from-non-once-ref-closure.rs:21:9\n    |\n-19 |     let y = vec![format!(\"World\")];\n+LL |     let y = vec![format!(\"World\")];\n    |         - captured outer variable\n-20 |     call(|| {\n-21 |         y.into_iter();\n+LL |     call(|| {\n+LL |         y.into_iter();\n    |         ^ cannot move out of captured outer variable in an `Fn` closure\n \n error: aborting due to previous error"}, {"sha": "1c60bc44d90f6c20f6ae622b630015130404c3d5", "filename": "src/test/ui/cast-as-bool.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcast-as-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcast-as-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast-as-bool.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0054]: cannot cast as `bool`\n   --> $DIR/cast-as-bool.rs:12:13\n    |\n-12 |     let u = 5 as bool;\n+LL |     let u = 5 as bool;\n    |             ^^^^^^^^^ unsupported cast\n    |\n    = help: compare with zero instead"}, {"sha": "3418472feafce5d079e8e398a4944ba902857383", "filename": "src/test/ui/cast-errors-issue-43825.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcast-errors-issue-43825.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcast-errors-issue-43825.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast-errors-issue-43825.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0425]: cannot find value `error` in this scope\n   --> $DIR/cast-errors-issue-43825.rs:12:17\n    |\n-12 |     let error = error; //~ ERROR cannot find value `error`\n+LL |     let error = error; //~ ERROR cannot find value `error`\n    |                 ^^^^^ not found in this scope\n \n error: aborting due to previous error"}, {"sha": "e0c39d84c1932550d3726e32a4a3caa6674d45b3", "filename": "src/test/ui/cast-rfc0401-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcast-rfc0401-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcast-rfc0401-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast-rfc0401-2.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0054]: cannot cast as `bool`\n   --> $DIR/cast-rfc0401-2.rs:16:13\n    |\n-16 |     let _ = 3 as bool;\n+LL |     let _ = 3 as bool;\n    |             ^^^^^^^^^ unsupported cast\n    |\n    = help: compare with zero instead"}, {"sha": "b2497dfeb2879a00db43b1c59a5bcb3c5744526b", "filename": "src/test/ui/cast-to-unsized-trait-object-suggestion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcast-to-unsized-trait-object-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcast-to-unsized-trait-object-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast-to-unsized-trait-object-suggestion.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,15 +1,15 @@\n error[E0620]: cast to unsized type: `&{integer}` as `std::marker::Send`\n   --> $DIR/cast-to-unsized-trait-object-suggestion.rs:12:5\n    |\n-12 |     &1 as Send; //~ ERROR cast to unsized\n+LL |     &1 as Send; //~ ERROR cast to unsized\n    |     ^^^^^^----\n    |           |\n    |           help: try casting to a reference instead: `&Send`\n \n error[E0620]: cast to unsized type: `std::boxed::Box<{integer}>` as `std::marker::Send`\n   --> $DIR/cast-to-unsized-trait-object-suggestion.rs:13:5\n    |\n-13 |     Box::new(1) as Send; //~ ERROR cast to unsized\n+LL |     Box::new(1) as Send; //~ ERROR cast to unsized\n    |     ^^^^^^^^^^^^^^^----\n    |                    |\n    |                    help: try casting to a `Box` instead: `Box<Send>`"}, {"sha": "481715fd9ce39b1ca9307e3dee521d75101dc9f2", "filename": "src/test/ui/cast_char.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcast_char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcast_char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast_char.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,19 +1,19 @@\n error: only u8 can be casted into char\n   --> $DIR/cast_char.rs:14:23\n    |\n-14 |     const XYZ: char = 0x1F888 as char;\n+LL |     const XYZ: char = 0x1F888 as char;\n    |                       ^^^^^^^^^^^^^^^ help: use a char literal instead: `'/u{1F888}'`\n    |\n note: lint level defined here\n   --> $DIR/cast_char.rs:11:9\n    |\n-11 | #![deny(overflowing_literals)]\n+LL | #![deny(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: only u8 can be casted into char\n   --> $DIR/cast_char.rs:16:22\n    |\n-16 |     const XY: char = 129160 as char;\n+LL |     const XY: char = 129160 as char;\n    |                      ^^^^^^^^^^^^^^ help: use a char literal instead: `'/u{1F888}'`\n \n error: aborting due to 2 previous errors"}, {"sha": "c5fbbbc0e9eb595bb56d8a29e82bdefea1d40ce9", "filename": "src/test/ui/casts-differing-anon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcasts-differing-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcasts-differing-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcasts-differing-anon.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0606]: casting `*mut impl std::fmt::Debug+?Sized` as `*mut impl std::fmt::Debug+?Sized` is invalid\n   --> $DIR/casts-differing-anon.rs:33:13\n    |\n-33 |     b_raw = f_raw as *mut _; //~ ERROR is invalid\n+LL |     b_raw = f_raw as *mut _; //~ ERROR is invalid\n    |             ^^^^^^^^^^^^^^^\n    |\n    = note: vtable kinds may not match"}, {"sha": "138388f29765f82227653d1f7d467e28f48e8874", "filename": "src/test/ui/casts-issue-46365.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcasts-issue-46365.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcasts-issue-46365.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcasts-issue-46365.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0412]: cannot find type `Ipsum` in this scope\n   --> $DIR/casts-issue-46365.rs:12:12\n    |\n-12 |     ipsum: Ipsum //~ ERROR cannot find type `Ipsum`\n+LL |     ipsum: Ipsum //~ ERROR cannot find type `Ipsum`\n    |            ^^^^^ not found in this scope\n \n error: aborting due to previous error"}, {"sha": "436335aa917d9fc8c883bbc0d47578c193b91956", "filename": "src/test/ui/changing-crates.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fchanging-crates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fchanging-crates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchanging-crates.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0460]: found possibly newer version of crate `a` which `b` depends on\n   --> $DIR/changing-crates.rs:20:1\n    |\n-20 | extern crate b; //~ ERROR: found possibly newer version of crate `a` which `b` depends on\n+LL | extern crate b; //~ ERROR: found possibly newer version of crate `a` which `b` depends on\n    | ^^^^^^^^^^^^^^^\n    |\n    = note: perhaps that crate needs to be recompiled?"}, {"sha": "3768d5782e76857ab47e98702df85a5b72090307", "filename": "src/test/ui/check_match/issue-35609.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcheck_match%2Fissue-35609.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcheck_match%2Fissue-35609.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck_match%2Fissue-35609.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,49 +1,49 @@\n error[E0004]: non-exhaustive patterns: `(B, _)`, `(C, _)`, `(D, _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:20:11\n    |\n-20 |     match (A, ()) { //~ ERROR non-exhaustive\n+LL |     match (A, ()) { //~ ERROR non-exhaustive\n    |           ^^^^^^^ patterns `(B, _)`, `(C, _)`, `(D, _)` and 2 more not covered\n \n error[E0004]: non-exhaustive patterns: `(_, B)`, `(_, C)`, `(_, D)` and 2 more not covered\n   --> $DIR/issue-35609.rs:24:11\n    |\n-24 |     match (A, A) { //~ ERROR non-exhaustive\n+LL |     match (A, A) { //~ ERROR non-exhaustive\n    |           ^^^^^^ patterns `(_, B)`, `(_, C)`, `(_, D)` and 2 more not covered\n \n error[E0004]: non-exhaustive patterns: `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:28:11\n    |\n-28 |     match ((A, ()), ()) { //~ ERROR non-exhaustive\n+LL |     match ((A, ()), ()) { //~ ERROR non-exhaustive\n    |           ^^^^^^^^^^^^^ patterns `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n \n error[E0004]: non-exhaustive patterns: `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:32:11\n    |\n-32 |     match ((A, ()), A) { //~ ERROR non-exhaustive\n+LL |     match ((A, ()), A) { //~ ERROR non-exhaustive\n    |           ^^^^^^^^^^^^ patterns `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n \n error[E0004]: non-exhaustive patterns: `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:36:11\n    |\n-36 |     match ((A, ()), ()) { //~ ERROR non-exhaustive\n+LL |     match ((A, ()), ()) { //~ ERROR non-exhaustive\n    |           ^^^^^^^^^^^^^ patterns `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n \n error[E0004]: non-exhaustive patterns: `S(B, _)`, `S(C, _)`, `S(D, _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:41:11\n    |\n-41 |     match S(A, ()) { //~ ERROR non-exhaustive\n+LL |     match S(A, ()) { //~ ERROR non-exhaustive\n    |           ^^^^^^^^ patterns `S(B, _)`, `S(C, _)`, `S(D, _)` and 2 more not covered\n \n error[E0004]: non-exhaustive patterns: `Sd { x: B, .. }`, `Sd { x: C, .. }`, `Sd { x: D, .. }` and 2 more not covered\n   --> $DIR/issue-35609.rs:45:11\n    |\n-45 |     match (Sd { x: A, y: () }) { //~ ERROR non-exhaustive\n+LL |     match (Sd { x: A, y: () }) { //~ ERROR non-exhaustive\n    |           ^^^^^^^^^^^^^^^^^^^^ patterns `Sd { x: B, .. }`, `Sd { x: C, .. }`, `Sd { x: D, .. }` and 2 more not covered\n \n error[E0004]: non-exhaustive patterns: `Some(B)`, `Some(C)`, `Some(D)` and 2 more not covered\n   --> $DIR/issue-35609.rs:49:11\n    |\n-49 |     match Some(A) { //~ ERROR non-exhaustive\n+LL |     match Some(A) { //~ ERROR non-exhaustive\n    |           ^^^^^^^ patterns `Some(B)`, `Some(C)`, `Some(D)` and 2 more not covered\n \n error: aborting due to 8 previous errors"}, {"sha": "111f4e44ee9c1192621e38cce53775bcfe24f6a9", "filename": "src/test/ui/check_match/issue-43253.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcheck_match%2Fissue-43253.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcheck_match%2Fissue-43253.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck_match%2Fissue-43253.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,24 +1,24 @@\n warning: unreachable pattern\n   --> $DIR/issue-43253.rs:39:9\n    |\n-39 |         9 => {},\n+LL |         9 => {},\n    |         ^\n    |\n note: lint level defined here\n   --> $DIR/issue-43253.rs:14:9\n    |\n-14 | #![warn(unreachable_patterns)]\n+LL | #![warn(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n warning: unreachable pattern\n   --> $DIR/issue-43253.rs:45:9\n    |\n-45 |         8...9 => {},\n+LL |         8...9 => {},\n    |         ^^^^^\n \n warning: unreachable pattern\n   --> $DIR/issue-43253.rs:51:9\n    |\n-51 |         9...9 => {},\n+LL |         9...9 => {},\n    |         ^^^^^\n "}, {"sha": "20661cae5ca29ba96f45cf2240a9f2b7a7cdbf31", "filename": "src/test/ui/closure-expected-type/expect-region-supply-region.stderr", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,85 +1,85 @@\n error: borrowed data cannot be stored outside of its closure\n   --> $DIR/expect-region-supply-region.rs:28:18\n    |\n-26 |     let mut f: Option<&u32> = None;\n+LL |     let mut f: Option<&u32> = None;\n    |         ----- borrowed data cannot be stored into here...\n-27 |     closure_expecting_bound(|x| {\n+LL |     closure_expecting_bound(|x| {\n    |                             --- ...because it cannot outlive this closure\n-28 |         f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure\n+LL |         f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure\n    |                  ^ cannot be stored outside of its closure\n \n error: borrowed data cannot be stored outside of its closure\n   --> $DIR/expect-region-supply-region.rs:38:18\n    |\n-36 |     let mut f: Option<&u32> = None;\n+LL |     let mut f: Option<&u32> = None;\n    |         ----- borrowed data cannot be stored into here...\n-37 |     closure_expecting_bound(|x: &u32| {\n+LL |     closure_expecting_bound(|x: &u32| {\n    |                             --------- ...because it cannot outlive this closure\n-38 |         f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure\n+LL |         f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure\n    |                  ^ cannot be stored outside of its closure\n \n error[E0308]: mismatched types\n   --> $DIR/expect-region-supply-region.rs:47:33\n    |\n-47 |     closure_expecting_bound(|x: &'x u32| {\n+LL |     closure_expecting_bound(|x: &'x u32| {\n    |                                 ^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `&u32`\n               found type `&'x u32`\n note: the anonymous lifetime #2 defined on the body at 47:29...\n   --> $DIR/expect-region-supply-region.rs:47:29\n    |\n-47 |       closure_expecting_bound(|x: &'x u32| {\n+LL |       closure_expecting_bound(|x: &'x u32| {\n    |  _____________________________^\n-48 | |         //~^ ERROR mismatched types\n-49 | |         //~| ERROR mismatched types\n-50 | |\n+LL | |         //~^ ERROR mismatched types\n+LL | |         //~| ERROR mismatched types\n+LL | |\n ...  |\n-53 | |         //~^ ERROR borrowed data cannot be stored outside of its closure\n-54 | |     });\n+LL | |         //~^ ERROR borrowed data cannot be stored outside of its closure\n+LL | |     });\n    | |_____^\n note: ...does not necessarily outlive the lifetime 'x as defined on the function body at 42:1\n   --> $DIR/expect-region-supply-region.rs:42:1\n    |\n-42 | fn expect_bound_supply_named<'x>() {\n+LL | fn expect_bound_supply_named<'x>() {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/expect-region-supply-region.rs:47:33\n    |\n-47 |     closure_expecting_bound(|x: &'x u32| {\n+LL |     closure_expecting_bound(|x: &'x u32| {\n    |                                 ^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `&u32`\n               found type `&'x u32`\n note: the lifetime 'x as defined on the function body at 42:1...\n   --> $DIR/expect-region-supply-region.rs:42:1\n    |\n-42 | fn expect_bound_supply_named<'x>() {\n+LL | fn expect_bound_supply_named<'x>() {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...does not necessarily outlive the anonymous lifetime #2 defined on the body at 47:29\n   --> $DIR/expect-region-supply-region.rs:47:29\n    |\n-47 |       closure_expecting_bound(|x: &'x u32| {\n+LL |       closure_expecting_bound(|x: &'x u32| {\n    |  _____________________________^\n-48 | |         //~^ ERROR mismatched types\n-49 | |         //~| ERROR mismatched types\n-50 | |\n+LL | |         //~^ ERROR mismatched types\n+LL | |         //~| ERROR mismatched types\n+LL | |\n ...  |\n-53 | |         //~^ ERROR borrowed data cannot be stored outside of its closure\n-54 | |     });\n+LL | |         //~^ ERROR borrowed data cannot be stored outside of its closure\n+LL | |     });\n    | |_____^\n \n error: borrowed data cannot be stored outside of its closure\n   --> $DIR/expect-region-supply-region.rs:52:18\n    |\n-43 |     let mut f: Option<&u32> = None;\n+LL |     let mut f: Option<&u32> = None;\n    |         ----- borrowed data cannot be stored into here...\n ...\n-47 |     closure_expecting_bound(|x: &'x u32| {\n+LL |     closure_expecting_bound(|x: &'x u32| {\n    |                             ------------ ...because it cannot outlive this closure\n ...\n-52 |         f = Some(x);\n+LL |         f = Some(x);\n    |                  ^ cannot be stored outside of its closure\n \n error: aborting due to 5 previous errors"}, {"sha": "9cc0f1bf9df733a9b733d50dae59a00d28b11d1e", "filename": "src/test/ui/closure_context/issue-26046-fn-mut.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,12 +1,12 @@\n error[E0525]: expected a closure that implements the `Fn` trait, but this closure only implements `FnMut`\n   --> $DIR/issue-26046-fn-mut.rs:14:19\n    |\n-14 |     let closure = || { //~ ERROR expected a closure that\n+LL |     let closure = || { //~ ERROR expected a closure that\n    |                   ^^ this closure implements `FnMut`, not `Fn`\n-15 |         num += 1;\n+LL |         num += 1;\n    |         --- closure is `FnMut` because it mutates the variable `num` here\n ...\n-18 |     Box::new(closure)\n+LL |     Box::new(closure)\n    |     ----------------- the requirement to implement `Fn` derives from here\n \n error: aborting due to previous error"}, {"sha": "0facdaf3c70a0fbcd673e615253f0542802cc683", "filename": "src/test/ui/closure_context/issue-26046-fn-once.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,12 +1,12 @@\n error[E0525]: expected a closure that implements the `Fn` trait, but this closure only implements `FnOnce`\n   --> $DIR/issue-26046-fn-once.rs:14:19\n    |\n-14 |     let closure = move || { //~ ERROR expected a closure\n+LL |     let closure = move || { //~ ERROR expected a closure\n    |                   ^^^^^^^ this closure implements `FnOnce`, not `Fn`\n-15 |         vec\n+LL |         vec\n    |         --- closure is `FnOnce` because it moves the variable `vec` out of its environment\n ...\n-18 |     Box::new(closure)\n+LL |     Box::new(closure)\n    |     ----------------- the requirement to implement `Fn` derives from here\n \n error: aborting due to previous error"}, {"sha": "fdbec34ca7edda484dae3f4ed427ef7591ffde19", "filename": "src/test/ui/closure_context/issue-42065.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,15 +1,15 @@\n error[E0382]: use of moved value: `debug_dump_dict`\n   --> $DIR/issue-42065.rs:21:5\n    |\n-20 |     debug_dump_dict();\n+LL |     debug_dump_dict();\n    |     --------------- value moved here\n-21 |     debug_dump_dict();\n+LL |     debug_dump_dict();\n    |     ^^^^^^^^^^^^^^^ value used here after move\n    |\n note: closure cannot be invoked more than once because it moves the variable `dict` out of its environment\n   --> $DIR/issue-42065.rs:16:29\n    |\n-16 |         for (key, value) in dict {\n+LL |         for (key, value) in dict {\n    |                             ^^^^\n \n error: aborting due to previous error"}, {"sha": "5414557ddc2897c1ef223f2ad5946ed962a08980", "filename": "src/test/ui/codemap_tests/bad-format-args.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,23 +1,23 @@\n error: requires at least a format string argument\n   --> $DIR/bad-format-args.rs:12:5\n    |\n-12 |     format!();\n+LL |     format!();\n    |     ^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: expected token: `,`\n   --> $DIR/bad-format-args.rs:13:5\n    |\n-13 |     format!(\"\" 1);\n+LL |     format!(\"\" 1);\n    |     ^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: expected token: `,`\n   --> $DIR/bad-format-args.rs:14:5\n    |\n-14 |     format!(\"\", 1 1);\n+LL |     format!(\"\", 1 1);\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)"}, {"sha": "6531e3b8f8b7827cb296d46cc55a285ca901e49e", "filename": "src/test/ui/codemap_tests/coherence-overlapping-inherent-impl-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,9 +1,9 @@\n error[E0592]: duplicate definitions with name `f`\n   --> $DIR/coherence-overlapping-inherent-impl-trait.rs:14:10\n    |\n-14 | impl C { fn f() {} } //~ ERROR duplicate\n+LL | impl C { fn f() {} } //~ ERROR duplicate\n    |          ^^^^^^^^^ duplicate definitions for `f`\n-15 | impl C { fn f() {} }\n+LL | impl C { fn f() {} }\n    |          --------- other definition for `f`\n \n error: aborting due to previous error"}, {"sha": "63b19c9e0c6abe85dc741555f9acb299ed19d7d4", "filename": "src/test/ui/codemap_tests/empty_span.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `&'static main::Foo`\n   --> $DIR/empty_span.rs:17:5\n    |\n-17 |     unsafe impl Send for &'static Foo { } //~ ERROR cross-crate traits with a default impl\n+LL |     unsafe impl Send for &'static Foo { } //~ ERROR cross-crate traits with a default impl\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "2fdd6906a564e5a9f0f7c380466b425cfe753a86", "filename": "src/test/ui/codemap_tests/huge_multispan_highlight.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,11 +1,11 @@\n error[E0596]: cannot borrow immutable local variable `x` as mutable\n-   --> $DIR/huge_multispan_highlight.rs:100:18\n-    |\n-12  |     let x = \"foo\";\n-    |         - consider changing this to `mut x`\n+  --> $DIR/huge_multispan_highlight.rs:100:18\n+   |\n+LL |     let x = \"foo\";\n+   |         - consider changing this to `mut x`\n ...\n-100 |     let y = &mut x; //~ ERROR cannot borrow\n-    |                  ^ cannot borrow mutably\n+LL |     let y = &mut x; //~ ERROR cannot borrow\n+   |                  ^ cannot borrow mutably\n \n error: aborting due to previous error\n "}, {"sha": "d44dac0d5376f309400b620839e358b0a95be016", "filename": "src/test/ui/codemap_tests/issue-11715.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,12 +1,12 @@\n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-   --> $DIR/issue-11715.rs:100:18\n-    |\n-99  |     let y = &mut x;\n-    |                  - first mutable borrow occurs here\n-100 |     let z = &mut x; //~ ERROR cannot borrow\n-    |                  ^ second mutable borrow occurs here\n-101 | }\n-    | - first borrow ends here\n+  --> $DIR/issue-11715.rs:100:18\n+   |\n+LL |     let y = &mut x;\n+   |                  - first mutable borrow occurs here\n+LL |     let z = &mut x; //~ ERROR cannot borrow\n+   |                  ^ second mutable borrow occurs here\n+LL | }\n+   | - first borrow ends here\n \n error: aborting due to previous error\n "}, {"sha": "947c8142e31fc1bb849a66c4bc562a8b178edf0a", "filename": "src/test/ui/codemap_tests/issue-28308.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0600]: cannot apply unary operator `!` to type `&'static str`\n   --> $DIR/issue-28308.rs:12:5\n    |\n-12 |     assert!(\"foo\");\n+LL |     assert!(\"foo\");\n    |     ^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)"}, {"sha": "a31a5318b41e5734895b4b39df731111629cd786", "filename": "src/test/ui/codemap_tests/one_line.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0499]: cannot borrow `v` as mutable more than once at a time\n   --> $DIR/one_line.rs:13:12\n    |\n-13 |     v.push(v.pop().unwrap()); //~ ERROR cannot borrow\n+LL |     v.push(v.pop().unwrap()); //~ ERROR cannot borrow\n    |     -      ^               - first borrow ends here\n    |     |      |\n    |     |      second mutable borrow occurs here"}, {"sha": "d11ac5463f031f74b083c4707db5ad3258c8c06f", "filename": "src/test/ui/codemap_tests/overlapping_inherent_impls.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_inherent_impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_inherent_impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_inherent_impls.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,28 +1,28 @@\n error[E0592]: duplicate definitions with name `id`\n   --> $DIR/overlapping_inherent_impls.rs:19:5\n    |\n-19 |     fn id() {} //~ ERROR duplicate definitions\n+LL |     fn id() {} //~ ERROR duplicate definitions\n    |     ^^^^^^^^^^ duplicate definitions for `id`\n ...\n-23 |     fn id() {}\n+LL |     fn id() {}\n    |     ---------- other definition for `id`\n \n error[E0592]: duplicate definitions with name `bar`\n   --> $DIR/overlapping_inherent_impls.rs:29:5\n    |\n-29 |     fn bar(&self) {} //~ ERROR duplicate definitions\n+LL |     fn bar(&self) {} //~ ERROR duplicate definitions\n    |     ^^^^^^^^^^^^^^^^ duplicate definitions for `bar`\n ...\n-33 |     fn bar(&self) {}\n+LL |     fn bar(&self) {}\n    |     ---------------- other definition for `bar`\n \n error[E0592]: duplicate definitions with name `baz`\n   --> $DIR/overlapping_inherent_impls.rs:39:5\n    |\n-39 |     fn baz(&self) {} //~ ERROR duplicate definitions\n+LL |     fn baz(&self) {} //~ ERROR duplicate definitions\n    |     ^^^^^^^^^^^^^^^^ duplicate definitions for `baz`\n ...\n-43 |     fn baz(&self) {}\n+LL |     fn baz(&self) {}\n    |     ---------------- other definition for `baz`\n    |\n    = note: upstream crates may add new impl of trait `std::marker::Copy` for type `std::vec::Vec<_>` in future versions"}, {"sha": "c585964a5274189606a570fae1e100dcf8762d5e", "filename": "src/test/ui/codemap_tests/overlapping_spans.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n   --> $DIR/overlapping_spans.rs:21:9\n    |\n-21 |         S {f:_s} => {} //~ ERROR cannot move out\n+LL |         S {f:_s} => {} //~ ERROR cannot move out\n    |         ^^^^^--^\n    |         |    |\n    |         |    hint: to prevent move, use `ref _s` or `ref mut _s`"}, {"sha": "0f683bd68415fdc78d4dcc25a8c73a501533093c", "filename": "src/test/ui/codemap_tests/tab.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,15 +1,15 @@\n error[E0425]: cannot find value `bar` in this scope\n   --> $DIR/tab.rs:14:2\n    |\n-14 |     bar; //~ ERROR cannot find value `bar`\n+LL |     bar; //~ ERROR cannot find value `bar`\n    |     ^^^ not found in this scope\n \n error[E0308]: mismatched types\n   --> $DIR/tab.rs:18:2\n    |\n-17 | fn foo() {\n+LL | fn foo() {\n    |          - help: try adding a return type: `-> &'static str`\n-18 |     \"bar            boo\" //~ ERROR mismatched types\n+LL |     \"bar            boo\" //~ ERROR mismatched types\n    |     ^^^^^^^^^^^^^^^^^^^^ expected (), found reference\n    |\n    = note: expected type `()`"}, {"sha": "d8ad5955caeaa7f050d46835a7d6c2b462d18957", "filename": "src/test/ui/codemap_tests/tab_2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_2.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,9 +1,9 @@\n error: unterminated double quote string\n   --> $DIR/tab_2.rs:14:7\n    |\n-14 |                   \"\"\"; //~ ERROR unterminated double quote\n+LL |                   \"\"\"; //~ ERROR unterminated double quote\n    |  ___________________^\n-15 | | }\n+LL | | }\n    | |__^\n \n error: aborting due to previous error"}, {"sha": "c2826359e08045b945f276ec594380751e6ca1bf", "filename": "src/test/ui/codemap_tests/tab_3.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0382]: use of moved value: `some_vec`\n   --> $DIR/tab_3.rs:17:20\n    |\n-15 |     some_vec.into_iter();\n+LL |     some_vec.into_iter();\n    |     -------- value moved here\n-16 |     {\n-17 |         println!(\"{:?}\", some_vec); //~ ERROR use of moved\n+LL |     {\n+LL |         println!(\"{:?}\", some_vec); //~ ERROR use of moved\n    |                          ^^^^^^^^ value used here after move\n    |\n    = note: move occurs because `some_vec` has type `std::vec::Vec<&str>`, which does not implement the `Copy` trait"}, {"sha": "a7fa82a0ba15f3122b48c06f24a9ce6f7fc80e76", "filename": "src/test/ui/codemap_tests/two_files.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0404]: expected trait, found type alias `Bar`\n   --> $DIR/two_files.rs:15:6\n    |\n-15 | impl Bar for Baz { } //~ ERROR expected trait, found type alias\n+LL | impl Bar for Baz { } //~ ERROR expected trait, found type alias\n    |      ^^^ type aliases cannot be used for traits\n \n error: cannot continue compilation due to previous error"}, {"sha": "b9b03c9b9ec6224219220fbbfeab29cab562bf68", "filename": "src/test/ui/codemap_tests/unicode.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error: invalid ABI: expected one of [cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, Rust, C, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted], found `\u8def\u6feb\u72fc\u00e1\u0301\u0301`\n   --> $DIR/unicode.rs:11:8\n    |\n-11 | extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {} //~ ERROR invalid ABI\n+LL | extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {} //~ ERROR invalid ABI\n    |        ^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "b75245589b028e196e577a0b668b7ecabd8d3d9a", "filename": "src/test/ui/codemap_tests/unicode_2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_2.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,23 +1,23 @@\n error: invalid width `7` for integer literal\n   --> $DIR/unicode_2.rs:14:25\n    |\n-14 |     let _ = (\"a\u0310e\u0301o\u0308\u0332\", 0u7); //~ ERROR invalid width\n+LL |     let _ = (\"a\u0310e\u0301o\u0308\u0332\", 0u7); //~ ERROR invalid width\n    |                     ^^^\n    |\n    = help: valid widths are 8, 16, 32, 64 and 128\n \n error: invalid width `42` for integer literal\n   --> $DIR/unicode_2.rs:15:20\n    |\n-15 |     let _ = (\"\uc544\u3042\", 1i42); //~ ERROR invalid width\n+LL |     let _ = (\"\uc544\u3042\", 1i42); //~ ERROR invalid width\n    |                      ^^^^\n    |\n    = help: valid widths are 8, 16, 32, 64 and 128\n \n error[E0425]: cannot find value `a\u0310e\u0301` in this scope\n   --> $DIR/unicode_2.rs:16:13\n    |\n-16 |     let _ = a\u0310e\u0301; //~ ERROR cannot find\n+LL |     let _ = a\u0310e\u0301; //~ ERROR cannot find\n    |             ^^ not found in this scope\n \n error: aborting due to 3 previous errors"}, {"sha": "1a44d39aa27a2e929aaee6049f44c9148516b9f9", "filename": "src/test/ui/codemap_tests/unicode_3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_3.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n warning: denote infinite loops with `loop { ... }`\n   --> $DIR/unicode_3.rs:14:45\n    |\n-14 |     let s = \"Z\u0368A\u0351\u0366\u0352\u034b\u0364\u0351\u031aL\u0304\u0351\u034bG\u0302\u0368\u0365\u033f\u0352\u033d\u0344O\u0365\u035b\u036d!\u030f\"; while true { break; }\n+LL |     let s = \"Z\u0368A\u0351\u0366\u0352\u034b\u0364\u0351\u031aL\u0304\u0351\u034bG\u0302\u0368\u0365\u033f\u0352\u033d\u0344O\u0365\u035b\u036d!\u030f\"; while true { break; }\n    |                       ^^^^^^^^^^ help: use `loop`\n    |\n    = note: #[warn(while_true)] on by default"}, {"sha": "74b6f083f38d646d3b07c144deeddd7bbb7f458e", "filename": "src/test/ui/coercion-missing-tail-expected-type.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,11 +1,11 @@\n error[E0308]: mismatched types\n   --> $DIR/coercion-missing-tail-expected-type.rs:13:28\n    |\n-13 |   fn plus_one(x: i32) -> i32 { //~ ERROR mismatched types\n+LL |   fn plus_one(x: i32) -> i32 { //~ ERROR mismatched types\n    |  ____________________________^\n-14 | |     x + 1;\n+LL | |     x + 1;\n    | |          - help: consider removing this semicolon\n-15 | | }\n+LL | | }\n    | |_^ expected i32, found ()\n    |\n    = note: expected type `i32`\n@@ -14,11 +14,11 @@ error[E0308]: mismatched types\n error[E0308]: mismatched types\n   --> $DIR/coercion-missing-tail-expected-type.rs:17:29\n    |\n-17 |   fn foo() -> Result<u8, u64> { //~ ERROR mismatched types\n+LL |   fn foo() -> Result<u8, u64> { //~ ERROR mismatched types\n    |  _____________________________^\n-18 | |     Ok(1);\n+LL | |     Ok(1);\n    | |          - help: consider removing this semicolon\n-19 | | }\n+LL | | }\n    | |_^ expected enum `std::result::Result`, found ()\n    |\n    = note: expected type `std::result::Result<u8, u64>`"}, {"sha": "e195e9452e5a359e86a2425d4a88159de53eabea", "filename": "src/test/ui/coherence-error-suppression.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcoherence-error-suppression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcoherence-error-suppression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-error-suppression.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0412]: cannot find type `DoesNotExist` in this scope\n   --> $DIR/coherence-error-suppression.rs:19:14\n    |\n-19 | impl Foo for DoesNotExist {} //~ ERROR cannot find type `DoesNotExist` in this scope\n+LL | impl Foo for DoesNotExist {} //~ ERROR cannot find type `DoesNotExist` in this scope\n    |              ^^^^^^^^^^^^ not found in this scope\n \n error: aborting due to previous error"}, {"sha": "029b04789525ce8dae4b6ff3a32e24bf0e6fb8ca", "filename": "src/test/ui/coherence-impls-copy.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcoherence-impls-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcoherence-impls-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-impls-copy.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,37 +1,37 @@\n error[E0206]: the trait `Copy` may not be implemented for this type\n   --> $DIR/coherence-impls-copy.rs:29:15\n    |\n-29 | impl Copy for &'static mut MyType {}\n+LL | impl Copy for &'static mut MyType {}\n    |               ^^^^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n \n error[E0206]: the trait `Copy` may not be implemented for this type\n   --> $DIR/coherence-impls-copy.rs:33:15\n    |\n-33 | impl Copy for (MyType, MyType) {}\n+LL | impl Copy for (MyType, MyType) {}\n    |               ^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n \n error[E0206]: the trait `Copy` may not be implemented for this type\n   --> $DIR/coherence-impls-copy.rs:37:15\n    |\n-37 | impl Copy for &'static NotSync {}\n+LL | impl Copy for &'static NotSync {}\n    |               ^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n \n error[E0206]: the trait `Copy` may not be implemented for this type\n   --> $DIR/coherence-impls-copy.rs:40:15\n    |\n-40 | impl Copy for [MyType] {}\n+LL | impl Copy for [MyType] {}\n    |               ^^^^^^^^ type is not a structure or enumeration\n \n error[E0206]: the trait `Copy` may not be implemented for this type\n   --> $DIR/coherence-impls-copy.rs:44:15\n    |\n-44 | impl Copy for &'static [NotSync] {}\n+LL | impl Copy for &'static [NotSync] {}\n    |               ^^^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impls-copy.rs:33:1\n    |\n-33 | impl Copy for (MyType, MyType) {}\n+LL | impl Copy for (MyType, MyType) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate\n@@ -40,7 +40,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impls-copy.rs:40:1\n    |\n-40 | impl Copy for [MyType] {}\n+LL | impl Copy for [MyType] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate\n@@ -49,7 +49,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impls-copy.rs:44:1\n    |\n-44 | impl Copy for &'static [NotSync] {}\n+LL | impl Copy for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate"}, {"sha": "ec315d897ac1507870d762b59f85b2a72b261a92", "filename": "src/test/ui/coherence-overlap-downstream-inherent.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcoherence-overlap-downstream-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcoherence-overlap-downstream-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-downstream-inherent.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,19 +1,19 @@\n error[E0592]: duplicate definitions with name `dummy`\n   --> $DIR/coherence-overlap-downstream-inherent.rs:17:26\n    |\n-17 | impl<T:Sugar> Sweet<T> { fn dummy(&self) { } }\n+LL | impl<T:Sugar> Sweet<T> { fn dummy(&self) { } }\n    |                          ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n-18 | //~^ ERROR E0592\n-19 | impl<T:Fruit> Sweet<T> { fn dummy(&self) { } }\n+LL | //~^ ERROR E0592\n+LL | impl<T:Fruit> Sweet<T> { fn dummy(&self) { } }\n    |                          ------------------- other definition for `dummy`\n \n error[E0592]: duplicate definitions with name `f`\n   --> $DIR/coherence-overlap-downstream-inherent.rs:23:38\n    |\n-23 | impl<X, T> A<T, X> where T: Bar<X> { fn f(&self) {} }\n+LL | impl<X, T> A<T, X> where T: Bar<X> { fn f(&self) {} }\n    |                                      ^^^^^^^^^^^^^^ duplicate definitions for `f`\n-24 | //~^ ERROR E0592\n-25 | impl<X> A<i32, X> { fn f(&self) {} }\n+LL | //~^ ERROR E0592\n+LL | impl<X> A<i32, X> { fn f(&self) {} }\n    |                     -------------- other definition for `f`\n    |\n    = note: downstream crates may implement trait `Bar<_>` for type `i32`"}, {"sha": "1fac596ed30059dcd1269a8686f63a54f0962eae", "filename": "src/test/ui/coherence-overlap-downstream.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcoherence-overlap-downstream.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcoherence-overlap-downstream.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-downstream.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,17 +1,17 @@\n error[E0119]: conflicting implementations of trait `Sweet`:\n   --> $DIR/coherence-overlap-downstream.rs:18:1\n    |\n-17 | impl<T:Sugar> Sweet for T { }\n+LL | impl<T:Sugar> Sweet for T { }\n    | ------------------------- first implementation here\n-18 | impl<T:Fruit> Sweet for T { }\n+LL | impl<T:Fruit> Sweet for T { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n \n error[E0119]: conflicting implementations of trait `Foo<_>` for type `i32`:\n   --> $DIR/coherence-overlap-downstream.rs:24:1\n    |\n-23 | impl<X, T> Foo<X> for T where T: Bar<X> {}\n+LL | impl<X, T> Foo<X> for T where T: Bar<X> {}\n    | --------------------------------------- first implementation here\n-24 | impl<X> Foo<X> for i32 {}\n+LL | impl<X> Foo<X> for i32 {}\n    | ^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n    |\n    = note: downstream crates may implement trait `Bar<_>` for type `i32`"}, {"sha": "6bb73e6d383382a43c657ad4462ffe866abaa26b", "filename": "src/test/ui/coherence-overlap-issue-23516-inherent.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516-inherent.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0592]: duplicate definitions with name `dummy`\n   --> $DIR/coherence-overlap-issue-23516-inherent.rs:19:25\n    |\n-19 | impl<T:Sugar> Cake<T> { fn dummy(&self) { } }\n+LL | impl<T:Sugar> Cake<T> { fn dummy(&self) { } }\n    |                         ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n-20 | //~^ ERROR E0592\n-21 | impl<U:Sugar> Cake<Box<U>> { fn dummy(&self) { } }\n+LL | //~^ ERROR E0592\n+LL | impl<U:Sugar> Cake<Box<U>> { fn dummy(&self) { } }\n    |                              ------------------- other definition for `dummy`\n    |\n    = note: downstream crates may implement trait `Sugar` for type `std::boxed::Box<_>`"}, {"sha": "fe4e7cf34873a0d4e41b1a3b9d9e0e95fd3cef87", "filename": "src/test/ui/coherence-overlap-issue-23516.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,9 +1,9 @@\n error[E0119]: conflicting implementations of trait `Sweet` for type `std::boxed::Box<_>`:\n   --> $DIR/coherence-overlap-issue-23516.rs:18:1\n    |\n-17 | impl<T:Sugar> Sweet for T { }\n+LL | impl<T:Sugar> Sweet for T { }\n    | ------------------------- first implementation here\n-18 | impl<U:Sugar> Sweet for Box<U> { }\n+LL | impl<U:Sugar> Sweet for Box<U> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::boxed::Box<_>`\n    |\n    = note: downstream crates may implement trait `Sugar` for type `std::boxed::Box<_>`"}, {"sha": "a7a6003b06c861acd5fe033ab2b3392e1b38fd0a", "filename": "src/test/ui/coherence-overlap-upstream-inherent.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcoherence-overlap-upstream-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcoherence-overlap-upstream-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-upstream-inherent.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0592]: duplicate definitions with name `dummy`\n   --> $DIR/coherence-overlap-upstream-inherent.rs:21:32\n    |\n-21 | impl<T> A<T> where T: Remote { fn dummy(&self) { } }\n+LL | impl<T> A<T> where T: Remote { fn dummy(&self) { } }\n    |                                ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n-22 | //~^ ERROR E0592\n-23 | impl A<i16> { fn dummy(&self) { } }\n+LL | //~^ ERROR E0592\n+LL | impl A<i16> { fn dummy(&self) { } }\n    |               ------------------- other definition for `dummy`\n    |\n    = note: upstream crates may add new impl of trait `coherence_lib::Remote` for type `i16` in future versions"}, {"sha": "cc199548f0622440a49eea9058f042dfda60e8d5", "filename": "src/test/ui/coherence-overlap-upstream.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcoherence-overlap-upstream.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcoherence-overlap-upstream.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-upstream.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,9 +1,9 @@\n error[E0119]: conflicting implementations of trait `Foo` for type `i16`:\n   --> $DIR/coherence-overlap-upstream.rs:22:1\n    |\n-21 | impl<T> Foo for T where T: Remote {}\n+LL | impl<T> Foo for T where T: Remote {}\n    | --------------------------------- first implementation here\n-22 | impl Foo for i16 {}\n+LL | impl Foo for i16 {}\n    | ^^^^^^^^^^^^^^^^ conflicting implementation for `i16`\n    |\n    = note: upstream crates may add new impl of trait `coherence_lib::Remote` for type `i16` in future versions"}, {"sha": "9e9e03373e8850cf6b15ee97b0c4492f625e45f8", "filename": "src/test/ui/command-line-diagnostics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcommand-line-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcommand-line-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand-line-diagnostics.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,9 +1,9 @@\n error[E0384]: cannot assign twice to immutable variable `x`\n   --> $DIR/command-line-diagnostics.rs:16:5\n    |\n-15 |     let x = 42;\n+LL |     let x = 42;\n    |         - first assignment to `x`\n-16 |     x = 43;\n+LL |     x = 43;\n    |     ^^^^^^ cannot assign twice to immutable variable\n \n error: aborting due to previous error"}, {"sha": "9abecb2e03c843549807c722db79f1aa5380c853", "filename": "src/test/ui/compare-method/proj-outlives-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/proj-outlives-region.rs:19:5\n    |\n-14 |     fn foo() where T: 'a;\n+LL |     fn foo() where T: 'a;\n    |     --------------------- definition of `foo` from trait\n ...\n-19 |     fn foo() where U: 'a { } //~ ERROR E0276\n+LL |     fn foo() where U: 'a { } //~ ERROR E0276\n    |     ^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `U: 'a`\n \n error: aborting due to previous error"}, {"sha": "32d7024db35dc0b4595ed9acee31439cf428726e", "filename": "src/test/ui/compare-method/region-extra-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/region-extra-2.rs:19:5\n    |\n-15 |     fn renew<'b: 'a>(self) -> &'b mut [T];\n+LL |     fn renew<'b: 'a>(self) -> &'b mut [T];\n    |     -------------------------------------- definition of `renew` from trait\n ...\n-19 |     fn renew<'b: 'a>(self) -> &'b mut [T] where 'a: 'b {\n+LL |     fn renew<'b: 'a>(self) -> &'b mut [T] where 'a: 'b {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `'a: 'b`\n \n error: aborting due to previous error"}, {"sha": "ce62cc62e222d538419b40cc3f3c0f204bdc1b1c", "filename": "src/test/ui/compare-method/region-extra.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/region-extra.rs:19:5\n    |\n-15 |     fn foo();\n+LL |     fn foo();\n    |     --------- definition of `foo` from trait\n ...\n-19 |     fn foo() where 'a: 'b { } //~ ERROR impl has stricter\n+LL |     fn foo() where 'a: 'b { } //~ ERROR impl has stricter\n    |     ^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `'a: 'b`\n \n error: aborting due to previous error"}, {"sha": "2026dd1f1ccc09cb25aa2000e936a63909fff182", "filename": "src/test/ui/compare-method/region-unrelated.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/region-unrelated.rs:19:5\n    |\n-14 |     fn foo() where T: 'a;\n+LL |     fn foo() where T: 'a;\n    |     --------------------- definition of `foo` from trait\n ...\n-19 |     fn foo() where V: 'a { }\n+LL |     fn foo() where V: 'a { }\n    |     ^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `V: 'a`\n \n error: aborting due to previous error"}, {"sha": "8f0744fa56db5cccab2e3c841ed7484b568fd57c", "filename": "src/test/ui/compare-method/reordered-type-param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0053]: method `b` has an incompatible type for trait\n   --> $DIR/reordered-type-param.rs:26:30\n    |\n-17 |   fn b<C:Clone,D>(&self, x: C) -> C;\n+LL |   fn b<C:Clone,D>(&self, x: C) -> C;\n    |                             - type in trait\n ...\n-26 |   fn b<F:Clone,G>(&self, _x: G) -> G { panic!() } //~ ERROR method `b` has an incompatible type\n+LL |   fn b<F:Clone,G>(&self, _x: G) -> G { panic!() } //~ ERROR method `b` has an incompatible type\n    |                              ^ expected type parameter, found a different type parameter\n    |\n    = note: expected type `fn(&E, F) -> F`"}, {"sha": "53aced771ccbf4e5ce55eb99e52bd70f6df5e82c", "filename": "src/test/ui/compare-method/trait-bound-on-type-parameter.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcompare-method%2Ftrait-bound-on-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcompare-method%2Ftrait-bound-on-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Ftrait-bound-on-type-parameter.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/trait-bound-on-type-parameter.rs:25:5\n    |\n-17 |   fn b<C,D>(&self, x: C) -> C;\n+LL |   fn b<C,D>(&self, x: C) -> C;\n    |   ---------------------------- definition of `b` from trait\n ...\n-25 |     fn b<F: Sync, G>(&self, _x: F) -> F { panic!() } //~ ERROR E0276\n+LL |     fn b<F: Sync, G>(&self, _x: F) -> F { panic!() } //~ ERROR E0276\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `F: std::marker::Sync`\n \n error: aborting due to previous error"}, {"sha": "a0c333c3a53f9ee4ebb783ea2b6441915d505397", "filename": "src/test/ui/compare-method/traits-misc-mismatch-1.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-1.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,64 +1,64 @@\n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/traits-misc-mismatch-1.rs:36:5\n    |\n-23 |     fn test_error1_fn<T: Eq>(&self);\n+LL |     fn test_error1_fn<T: Eq>(&self);\n    |     -------------------------------- definition of `test_error1_fn` from trait\n ...\n-36 |     fn test_error1_fn<T: Ord>(&self) {}\n+LL |     fn test_error1_fn<T: Ord>(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: std::cmp::Ord`\n \n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/traits-misc-mismatch-1.rs:40:5\n    |\n-24 |     fn test_error2_fn<T: Eq + Ord>(&self);\n+LL |     fn test_error2_fn<T: Eq + Ord>(&self);\n    |     -------------------------------------- definition of `test_error2_fn` from trait\n ...\n-40 |     fn test_error2_fn<T: Eq + B>(&self) {}\n+LL |     fn test_error2_fn<T: Eq + B>(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: B`\n \n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/traits-misc-mismatch-1.rs:44:5\n    |\n-25 |     fn test_error3_fn<T: Eq + Ord>(&self);\n+LL |     fn test_error3_fn<T: Eq + Ord>(&self);\n    |     -------------------------------------- definition of `test_error3_fn` from trait\n ...\n-44 |     fn test_error3_fn<T: B + Eq>(&self) {}\n+LL |     fn test_error3_fn<T: B + Eq>(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: B`\n \n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/traits-misc-mismatch-1.rs:54:5\n    |\n-28 |     fn test_error5_fn<T: A>(&self);\n+LL |     fn test_error5_fn<T: A>(&self);\n    |     ------------------------------- definition of `test_error5_fn` from trait\n ...\n-54 |     fn test_error5_fn<T: B>(&self) {}\n+LL |     fn test_error5_fn<T: B>(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: B`\n \n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/traits-misc-mismatch-1.rs:60:5\n    |\n-30 |     fn test_error7_fn<T: A>(&self);\n+LL |     fn test_error7_fn<T: A>(&self);\n    |     ------------------------------- definition of `test_error7_fn` from trait\n ...\n-60 |     fn test_error7_fn<T: A + Eq>(&self) {}\n+LL |     fn test_error7_fn<T: A + Eq>(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: std::cmp::Eq`\n \n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/traits-misc-mismatch-1.rs:63:5\n    |\n-31 |     fn test_error8_fn<T: B>(&self);\n+LL |     fn test_error8_fn<T: B>(&self);\n    |     ------------------------------- definition of `test_error8_fn` from trait\n ...\n-63 |     fn test_error8_fn<T: C>(&self) {}\n+LL |     fn test_error8_fn<T: C>(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: C`\n \n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/traits-misc-mismatch-1.rs:76:5\n    |\n-72 |     fn method<G:Getter<isize>>(&self);\n+LL |     fn method<G:Getter<isize>>(&self);\n    |     ---------------------------------- definition of `method` from trait\n ...\n-76 |     fn method<G: Getter<usize>>(&self) {}\n+LL |     fn method<G: Getter<usize>>(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `G: Getter<usize>`\n \n error: aborting due to 7 previous errors"}, {"sha": "921b0e5d1c49408bf0b64efebff1e71207ed5961", "filename": "src/test/ui/compare-method/traits-misc-mismatch-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-2.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/traits-misc-mismatch-2.rs:23:5\n    |\n-19 |     fn zip<B, U: Iterator<U>>(self, other: U) -> ZipIterator<Self, U>;\n+LL |     fn zip<B, U: Iterator<U>>(self, other: U) -> ZipIterator<Self, U>;\n    |     ------------------------------------------------------------------ definition of `zip` from trait\n ...\n-23 |     fn zip<B, U: Iterator<B>>(self, other: U) -> ZipIterator<T, U> {\n+LL |     fn zip<B, U: Iterator<B>>(self, other: U) -> ZipIterator<T, U> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `U: Iterator<B>`\n \n error: aborting due to previous error"}, {"sha": "8a80802c52cabe22c8a02f7e6627c7239935b10e", "filename": "src/test/ui/const-deref-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fconst-deref-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fconst-deref-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-deref-ptr.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0396]: raw pointers cannot be dereferenced in statics\n   --> $DIR/const-deref-ptr.rs:14:29\n    |\n-14 |     static C: u64 = unsafe {*(0xdeadbeef as *const u64)}; //~ ERROR E0396\n+LL |     static C: u64 = unsafe {*(0xdeadbeef as *const u64)}; //~ ERROR E0396\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer in constant\n \n error: aborting due to previous error"}, {"sha": "05a286d4e7eb377f7681ca448ea9fb86ba6f7d6d", "filename": "src/test/ui/const-eval-overflow-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fconst-eval-overflow-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fconst-eval-overflow-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval-overflow-2.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,13 +1,13 @@\n error[E0080]: constant evaluation error\n   --> $DIR/const-eval-overflow-2.rs:21:25\n    |\n-21 | const NEG_NEG_128: i8 = -NEG_128;\n+LL | const NEG_NEG_128: i8 = -NEG_128;\n    |                         ^^^^^^^^ attempt to negate with overflow\n    |\n note: for pattern here\n   --> $DIR/const-eval-overflow-2.rs:27:9\n    |\n-27 |         NEG_NEG_128 => println!(\"A\"),\n+LL |         NEG_NEG_128 => println!(\"A\"),\n    |         ^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "b907a47afb96345a0751c80a455b14c793bcbc65", "filename": "src/test/ui/const-eval-overflow-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fconst-eval-overflow-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fconst-eval-overflow-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval-overflow-4.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,15 +1,15 @@\n warning: constant evaluation error: attempt to add with overflow\n   --> $DIR/const-eval-overflow-4.rs:23:13\n    |\n-23 |     : [u32; (i8::MAX as i8 + 1i8) as usize]\n+LL |     : [u32; (i8::MAX as i8 + 1i8) as usize]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: #[warn(const_err)] on by default\n \n error[E0080]: constant evaluation error\n   --> $DIR/const-eval-overflow-4.rs:23:13\n    |\n-23 |     : [u32; (i8::MAX as i8 + 1i8) as usize]\n+LL |     : [u32; (i8::MAX as i8 + 1i8) as usize]\n    |             ^^^^^^^^^^^^^^^^^^^^^ attempt to add with overflow\n \n error: aborting due to previous error"}, {"sha": "e3c28cafc628356a6bb7568792c8e10a89bd8c57", "filename": "src/test/ui/const-eval-span.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fconst-eval-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fconst-eval-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval-span.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/const-eval-span.rs:19:9\n    |\n-19 |     V = CONSTANT,\n+LL |     V = CONSTANT,\n    |         ^^^^^^^^ expected isize, found struct `S`\n    |\n    = note: expected type `isize`"}, {"sha": "c523b749d376f619a08b8bf5fa8bf0b01360e631", "filename": "src/test/ui/const-eval/issue-43197.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,27 +1,27 @@\n warning: constant evaluation error: attempt to subtract with overflow\n   --> $DIR/issue-43197.rs:18:20\n    |\n-18 |     const X: u32 = 0-1; //~ ERROR constant evaluation error\n+LL |     const X: u32 = 0-1; //~ ERROR constant evaluation error\n    |                    ^^^\n    |\n    = note: #[warn(const_err)] on by default\n \n warning: constant evaluation error: attempt to subtract with overflow\n   --> $DIR/issue-43197.rs:20:20\n    |\n-20 |     const Y: u32 = foo(0-1); //~ ERROR constant evaluation error\n+LL |     const Y: u32 = foo(0-1); //~ ERROR constant evaluation error\n    |                    ^^^^^^^^\n \n error[E0080]: constant evaluation error\n   --> $DIR/issue-43197.rs:18:20\n    |\n-18 |     const X: u32 = 0-1; //~ ERROR constant evaluation error\n+LL |     const X: u32 = 0-1; //~ ERROR constant evaluation error\n    |                    ^^^ attempt to subtract with overflow\n \n error[E0080]: constant evaluation error\n   --> $DIR/issue-43197.rs:20:24\n    |\n-20 |     const Y: u32 = foo(0-1); //~ ERROR constant evaluation error\n+LL |     const Y: u32 = foo(0-1); //~ ERROR constant evaluation error\n    |                        ^^^ attempt to subtract with overflow\n \n error: aborting due to 2 previous errors"}, {"sha": "bd86f270f319cb8c6bbdb5644c4c30b1ad9c9a0e", "filename": "src/test/ui/const-expr-addr-operator.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fconst-expr-addr-operator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fconst-expr-addr-operator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-expr-addr-operator.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,13 +1,13 @@\n error[E0080]: constant evaluation error\n   --> $DIR/const-expr-addr-operator.rs:15:29\n    |\n-15 |     const X: &'static u32 = &22; //~ ERROR constant evaluation error\n+LL |     const X: &'static u32 = &22; //~ ERROR constant evaluation error\n    |                             ^^^ unimplemented constant expression: address operator\n    |\n note: for pattern here\n   --> $DIR/const-expr-addr-operator.rs:17:9\n    |\n-17 |         X => 0,\n+LL |         X => 0,\n    |         ^\n \n error: aborting due to previous error"}, {"sha": "e738a5e4ff308f72a90b6b9317d5a3aded0161bf", "filename": "src/test/ui/const-fn-error.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-error.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,39 +1,39 @@\n warning: constant evaluation error: non-constant path in constant expression\n   --> $DIR/const-fn-error.rs:27:19\n    |\n-27 |     let a : [i32; f(X)];\n+LL |     let a : [i32; f(X)];\n    |                   ^^^^\n    |\n    = note: #[warn(const_err)] on by default\n \n error[E0016]: blocks in constant functions are limited to items and tail expressions\n   --> $DIR/const-fn-error.rs:16:19\n    |\n-16 |     let mut sum = 0; //~ ERROR blocks in constant functions are limited\n+LL |     let mut sum = 0; //~ ERROR blocks in constant functions are limited\n    |                   ^\n \n error[E0015]: calls in constant functions are limited to constant functions, struct and enum constructors\n   --> $DIR/const-fn-error.rs:17:14\n    |\n-17 |     for i in 0..x { //~ ERROR calls in constant functions\n+LL |     for i in 0..x { //~ ERROR calls in constant functions\n    |              ^^^^\n \n error[E0019]: constant function contains unimplemented expression type\n   --> $DIR/const-fn-error.rs:17:14\n    |\n-17 |     for i in 0..x { //~ ERROR calls in constant functions\n+LL |     for i in 0..x { //~ ERROR calls in constant functions\n    |              ^^^^\n \n error[E0080]: constant evaluation error\n   --> $DIR/const-fn-error.rs:21:5\n    |\n-21 |     sum //~ ERROR E0080\n+LL |     sum //~ ERROR E0080\n    |     ^^^ non-constant path in constant expression\n    |\n note: for constant expression here\n   --> $DIR/const-fn-error.rs:27:13\n    |\n-27 |     let a : [i32; f(X)];\n+LL |     let a : [i32; f(X)];\n    |             ^^^^^^^^^^^\n \n error: aborting due to 4 previous errors"}, {"sha": "efbf701120d250777b0d37a4f4c115a0dd6e9ecb", "filename": "src/test/ui/const-fn-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fconst-fn-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fconst-fn-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-mismatch.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0379]: trait fns cannot be declared const\n   --> $DIR/const-fn-mismatch.rs:23:5\n    |\n-23 |     const fn f() -> u32 { 22 }\n+LL |     const fn f() -> u32 { 22 }\n    |     ^^^^^ trait fns cannot be const\n \n error: aborting due to previous error"}, {"sha": "4a77862c312268021f2d205717cf12a59470b52f", "filename": "src/test/ui/const-fn-not-in-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fconst-fn-not-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fconst-fn-not-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-not-in-trait.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,13 +1,13 @@\n error[E0379]: trait fns cannot be declared const\n   --> $DIR/const-fn-not-in-trait.rs:17:5\n    |\n-17 |     const fn f() -> u32;\n+LL |     const fn f() -> u32;\n    |     ^^^^^ trait fns cannot be const\n \n error[E0379]: trait fns cannot be declared const\n   --> $DIR/const-fn-not-in-trait.rs:19:5\n    |\n-19 |     const fn g() -> u32 { 0 }\n+LL |     const fn g() -> u32 { 0 }\n    |     ^^^^^ trait fns cannot be const\n \n error: aborting due to 2 previous errors"}, {"sha": "6391433ebaf1e5a9c2bfc4b6bb1400a96c3555b1", "filename": "src/test/ui/const-len-underflow-separate-spans.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,21 +1,21 @@\n warning: constant evaluation error: attempt to subtract with overflow\n   --> $DIR/const-len-underflow-separate-spans.rs:17:20\n    |\n-17 | const LEN: usize = ONE - TWO;\n+LL | const LEN: usize = ONE - TWO;\n    |                    ^^^^^^^^^\n    |\n    = note: #[warn(const_err)] on by default\n \n error[E0080]: constant evaluation error\n   --> $DIR/const-len-underflow-separate-spans.rs:17:20\n    |\n-17 | const LEN: usize = ONE - TWO;\n+LL | const LEN: usize = ONE - TWO;\n    |                    ^^^^^^^^^ attempt to subtract with overflow\n    |\n note: for constant expression here\n   --> $DIR/const-len-underflow-separate-spans.rs:22:12\n    |\n-22 |     let a: [i8; LEN] = unimplemented!();\n+LL |     let a: [i8; LEN] = unimplemented!();\n    |            ^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "9a05d4c76c49a0c01bbe42e13e924b7298b297b1", "filename": "src/test/ui/const-pattern-irrefutable.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fconst-pattern-irrefutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fconst-pattern-irrefutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-pattern-irrefutable.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,19 +1,19 @@\n error[E0005]: refutable pattern in local binding: `_` not covered\n   --> $DIR/const-pattern-irrefutable.rs:22:9\n    |\n-22 |     let a = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n+LL |     let a = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n    |         ^ interpreted as a constant pattern, not new variable\n \n error[E0005]: refutable pattern in local binding: `_` not covered\n   --> $DIR/const-pattern-irrefutable.rs:23:9\n    |\n-23 |     let c = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n+LL |     let c = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n    |         ^ interpreted as a constant pattern, not new variable\n \n error[E0005]: refutable pattern in local binding: `_` not covered\n   --> $DIR/const-pattern-irrefutable.rs:24:9\n    |\n-24 |     let d = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n+LL |     let d = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n    |         ^ interpreted as a constant pattern, not new variable\n \n error: aborting due to 3 previous errors"}, {"sha": "74677c7f117a87bf0dfd2c5e19b03398a8ce6dc8", "filename": "src/test/ui/const-pattern-not-const-evaluable.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fconst-pattern-not-const-evaluable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fconst-pattern-not-const-evaluable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-pattern-not-const-evaluable.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,13 +1,13 @@\n error[E0080]: constant evaluation error\n   --> $DIR/const-pattern-not-const-evaluable.rs:22:31\n    |\n-22 | const BOO: Pair<Cake, Cake> = Pair(Marmor, BlackForest);\n+LL | const BOO: Pair<Cake, Cake> = Pair(Marmor, BlackForest);\n    |                               ^^^^ unimplemented constant expression: tuple struct constructors\n    |\n note: for pattern here\n   --> $DIR/const-pattern-not-const-evaluable.rs:37:9\n    |\n-37 |         FOO => println!(\"hi\"),\n+LL |         FOO => println!(\"hi\"),\n    |         ^^^\n \n error: aborting due to previous error"}, {"sha": "478539c88eac7bbc4958dd42ae90bfa41199e7a2", "filename": "src/test/ui/const-unsized.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fconst-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fconst-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-unsized.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: the trait bound `std::fmt::Debug + std::marker::Sync + 'static: std::marker::Sized` is not satisfied\n   --> $DIR/const-unsized.rs:13:29\n    |\n-13 | const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n+LL | const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^ `std::fmt::Debug + std::marker::Sync + 'static` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `std::fmt::Debug + std::marker::Sync + 'static`\n@@ -10,7 +10,7 @@ error[E0277]: the trait bound `std::fmt::Debug + std::marker::Sync + 'static: st\n error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n   --> $DIR/const-unsized.rs:16:24\n    |\n-16 | const CONST_FOO: str = *\"foo\";\n+LL | const CONST_FOO: str = *\"foo\";\n    |                        ^^^^^^ `str` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n@@ -19,7 +19,7 @@ error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n error[E0277]: the trait bound `std::fmt::Debug + std::marker::Sync + 'static: std::marker::Sized` is not satisfied\n   --> $DIR/const-unsized.rs:19:31\n    |\n-19 | static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n+LL | static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n    |                               ^^^^^^^^^^^^^^^^^^^^^^ `std::fmt::Debug + std::marker::Sync + 'static` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `std::fmt::Debug + std::marker::Sync + 'static`\n@@ -28,7 +28,7 @@ error[E0277]: the trait bound `std::fmt::Debug + std::marker::Sync + 'static: st\n error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n   --> $DIR/const-unsized.rs:22:26\n    |\n-22 | static STATIC_BAR: str = *\"bar\";\n+LL | static STATIC_BAR: str = *\"bar\";\n    |                          ^^^^^^ `str` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`"}, {"sha": "ab447d07241815b28474c59218a2f0942f04a3d6", "filename": "src/test/ui/cross-crate-macro-backtrace/main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error: 1 positional argument in format string, but no arguments were given\n   --> $DIR/main.rs:18:5\n    |\n-18 |     myprintln!(\"{}\");\n+LL |     myprintln!(\"{}\");\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)"}, {"sha": "9eeea28be8fecb8ac2cd700769497a4bbf017d3e", "filename": "src/test/ui/cross-file-errors/main.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcross-file-errors%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcross-file-errors%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-file-errors%2Fmain.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,11 +1,11 @@\n error: expected expression, found `_`\n   --> $DIR/underscore.rs:18:9\n    |\n-18 |         _\n+LL |         _\n    |         ^\n    | \n   ::: $DIR/main.rs:15:5\n    |\n-15 |     underscore!();\n+LL |     underscore!();\n    |     -------------- in this macro invocation\n "}, {"sha": "388da3f860e0a471e5b46831bc7ebbba2a37e831", "filename": "src/test/ui/cycle-trait-supertrait-indirect.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcycle-trait-supertrait-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fcycle-trait-supertrait-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcycle-trait-supertrait-indirect.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,18 +1,18 @@\n error[E0391]: cyclic dependency detected\n   --> $DIR/cycle-trait-supertrait-indirect.rs:20:1\n    |\n-20 | trait C: B { }\n+LL | trait C: B { }\n    | ^^^^^^^^^^ cyclic reference\n    |\n note: the cycle begins when computing the supertraits of `B`...\n   --> $DIR/cycle-trait-supertrait-indirect.rs:14:1\n    |\n-14 | trait A: B {\n+LL | trait A: B {\n    | ^^^^^^^^^^\n note: ...which then requires computing the supertraits of `C`...\n   --> $DIR/cycle-trait-supertrait-indirect.rs:17:1\n    |\n-17 | trait B: C {\n+LL | trait B: C {\n    | ^^^^^^^^^^\n    = note: ...which then again requires computing the supertraits of `B`, completing the cycle.\n "}, {"sha": "56c083837979d2b7afc1d80df27bca7f38b32f69", "filename": "src/test/ui/deprecated-macro_escape-inner.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdeprecated-macro_escape-inner.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdeprecated-macro_escape-inner.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecated-macro_escape-inner.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n warning: macro_escape is a deprecated synonym for macro_use\n   --> $DIR/deprecated-macro_escape-inner.rs:14:5\n    |\n-14 |     #![macro_escape] //~ WARNING macro_escape is a deprecated synonym for macro_use\n+LL |     #![macro_escape] //~ WARNING macro_escape is a deprecated synonym for macro_use\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = help: consider an outer attribute, #[macro_use] mod ..."}, {"sha": "09ff32857403a99f14631d901b76b4efac8b25ec", "filename": "src/test/ui/deprecated-macro_escape.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdeprecated-macro_escape.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdeprecated-macro_escape.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecated-macro_escape.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,6 +1,6 @@\n warning: macro_escape is a deprecated synonym for macro_use\n   --> $DIR/deprecated-macro_escape.rs:13:1\n    |\n-13 | #[macro_escape] //~ WARNING macro_escape is a deprecated synonym for macro_use\n+LL | #[macro_escape] //~ WARNING macro_escape is a deprecated synonym for macro_use\n    | ^^^^^^^^^^^^^^^\n "}, {"sha": "620cbd9d33646acb53a3ac7013f67f0bdc1593ff", "filename": "src/test/ui/deref-suggestion.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-suggestion.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:18:9\n    |\n-18 |     foo(s); //~ ERROR mismatched types\n+LL |     foo(s); //~ ERROR mismatched types\n    |         ^\n    |         |\n    |         expected struct `std::string::String`, found reference\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:23:10\n    |\n-23 |     foo3(u); //~ ERROR mismatched types\n+LL |     foo3(u); //~ ERROR mismatched types\n    |          ^\n    |          |\n    |          expected u32, found &u32\n@@ -25,7 +25,7 @@ error[E0308]: mismatched types\n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:30:9\n    |\n-30 |     foo(&\"aaa\".to_owned()); //~ ERROR mismatched types\n+LL |     foo(&\"aaa\".to_owned()); //~ ERROR mismatched types\n    |         ^^^^^^^^^^^^^^^^^\n    |         |\n    |         expected struct `std::string::String`, found reference\n@@ -37,7 +37,7 @@ error[E0308]: mismatched types\n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:31:9\n    |\n-31 |     foo(&mut \"aaa\".to_owned()); //~ ERROR mismatched types\n+LL |     foo(&mut \"aaa\".to_owned()); //~ ERROR mismatched types\n    |         ^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         expected struct `std::string::String`, found mutable reference\n@@ -49,10 +49,10 @@ error[E0308]: mismatched types\n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:12:20\n    |\n-12 |     ($x:expr) => { &$x } //~ ERROR mismatched types\n+LL |     ($x:expr) => { &$x } //~ ERROR mismatched types\n    |                    ^^^ expected u32, found &{integer}\n ...\n-32 |     foo3(borrow!(0));\n+LL |     foo3(borrow!(0));\n    |          ---------- in this macro invocation\n    |\n    = note: expected type `u32`"}, {"sha": "92c025046a22ad3fb1a6cae8f067489a049bd6b7", "filename": "src/test/ui/derived-errors/issue-31997-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fderived-errors%2Fissue-31997-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fderived-errors%2Fissue-31997-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderived-errors%2Fissue-31997-1.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0433]: failed to resolve. Use of undeclared type or module `HashMap`\n   --> $DIR/issue-31997-1.rs:30:19\n    |\n-30 |     let mut map = HashMap::new();\n+LL |     let mut map = HashMap::new();\n    |                   ^^^^^^^ Use of undeclared type or module `HashMap`\n \n error: aborting due to previous error"}, {"sha": "f5532f7c56119146e432871431a31dd1490a3199", "filename": "src/test/ui/deriving-meta-empty-trait-list.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fderiving-meta-empty-trait-list.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fderiving-meta-empty-trait-list.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving-meta-empty-trait-list.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,12 +1,12 @@\n warning: empty trait list in `derive`\n   --> $DIR/deriving-meta-empty-trait-list.rs:15:1\n    |\n-15 | #[derive]   //~ WARNING empty trait list in `derive`\n+LL | #[derive]   //~ WARNING empty trait list in `derive`\n    | ^^^^^^^^^\n \n warning: empty trait list in `derive`\n   --> $DIR/deriving-meta-empty-trait-list.rs:18:1\n    |\n-18 | #[derive()] //~ WARNING empty trait list in `derive`\n+LL | #[derive()] //~ WARNING empty trait list in `derive`\n    | ^^^^^^^^^^^\n "}, {"sha": "64aefbcd5df6332cbe9751453de56dab1f9f82a1", "filename": "src/test/ui/deriving-with-repr-packed.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fderiving-with-repr-packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fderiving-with-repr-packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving-with-repr-packed.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,21 +1,21 @@\n error: #[derive] can't be used on a #[repr(packed)] struct with type parameters (error E0133)\n   --> $DIR/deriving-with-repr-packed.rs:18:16\n    |\n-18 | #[derive(Copy, Clone, PartialEq, Eq)]\n+LL | #[derive(Copy, Clone, PartialEq, Eq)]\n    |                ^^^^^\n    |\n note: lint level defined here\n   --> $DIR/deriving-with-repr-packed.rs:11:9\n    |\n-11 | #![deny(safe_packed_borrows)]\n+LL | #![deny(safe_packed_borrows)]\n    |         ^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n \n error: #[derive] can't be used on a #[repr(packed)] struct with type parameters (error E0133)\n   --> $DIR/deriving-with-repr-packed.rs:18:23\n    |\n-18 | #[derive(Copy, Clone, PartialEq, Eq)]\n+LL | #[derive(Copy, Clone, PartialEq, Eq)]\n    |                       ^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -24,7 +24,7 @@ error: #[derive] can't be used on a #[repr(packed)] struct with type parameters\n error: #[derive] can't be used on a non-Copy #[repr(packed)] struct (error E0133)\n   --> $DIR/deriving-with-repr-packed.rs:26:10\n    |\n-26 | #[derive(PartialEq, Eq)]\n+LL | #[derive(PartialEq, Eq)]\n    |          ^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -33,7 +33,7 @@ error: #[derive] can't be used on a non-Copy #[repr(packed)] struct (error E0133\n error: #[derive] can't be used on a non-Copy #[repr(packed)] struct (error E0133)\n   --> $DIR/deriving-with-repr-packed.rs:35:10\n    |\n-35 | #[derive(PartialEq)]\n+LL | #[derive(PartialEq)]\n    |          ^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "293cf7444f4ad07b74ebe2f93df4429feb079c95", "filename": "src/test/ui/did_you_mean/E0178.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,25 +1,25 @@\n error[E0178]: expected a path on the left-hand side of `+`, not `&'a Foo`\n   --> $DIR/E0178.rs:14:8\n    |\n-14 |     w: &'a Foo + Copy, //~ ERROR expected a path\n+LL |     w: &'a Foo + Copy, //~ ERROR expected a path\n    |        ^^^^^^^^^^^^^^ help: try adding parentheses: `&'a (Foo + Copy)`\n \n error[E0178]: expected a path on the left-hand side of `+`, not `&'a Foo`\n   --> $DIR/E0178.rs:15:8\n    |\n-15 |     x: &'a Foo + 'a, //~ ERROR expected a path\n+LL |     x: &'a Foo + 'a, //~ ERROR expected a path\n    |        ^^^^^^^^^^^^ help: try adding parentheses: `&'a (Foo + 'a)`\n \n error[E0178]: expected a path on the left-hand side of `+`, not `&'a mut Foo`\n   --> $DIR/E0178.rs:16:8\n    |\n-16 |     y: &'a mut Foo + 'a, //~ ERROR expected a path\n+LL |     y: &'a mut Foo + 'a, //~ ERROR expected a path\n    |        ^^^^^^^^^^^^^^^^ help: try adding parentheses: `&'a mut (Foo + 'a)`\n \n error[E0178]: expected a path on the left-hand side of `+`, not `fn() -> Foo`\n   --> $DIR/E0178.rs:17:8\n    |\n-17 |     z: fn() -> Foo + 'a, //~ ERROR expected a path\n+LL |     z: fn() -> Foo + 'a, //~ ERROR expected a path\n    |        ^^^^^^^^^^^^^^^^ perhaps you forgot parentheses?\n \n error: aborting due to 4 previous errors"}, {"sha": "c4f7e47c61b260532ae4023081c750bbe51a4fee", "filename": "src/test/ui/did_you_mean/bad-assoc-expr.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,37 +1,37 @@\n error: missing angle brackets in associated item path\n   --> $DIR/bad-assoc-expr.rs:13:5\n    |\n-13 |     [i32; 4]::clone(&a);\n+LL |     [i32; 4]::clone(&a);\n    |     ^^^^^^^^^^^^^^^ help: try: `<[i32; 4]>::clone`\n \n error: missing angle brackets in associated item path\n   --> $DIR/bad-assoc-expr.rs:16:5\n    |\n-16 |     [i32]::as_ref(&a);\n+LL |     [i32]::as_ref(&a);\n    |     ^^^^^^^^^^^^^ help: try: `<[i32]>::as_ref`\n \n error: missing angle brackets in associated item path\n   --> $DIR/bad-assoc-expr.rs:19:5\n    |\n-19 |     (u8)::clone(&0);\n+LL |     (u8)::clone(&0);\n    |     ^^^^^^^^^^^ help: try: `<(u8)>::clone`\n \n error: missing angle brackets in associated item path\n   --> $DIR/bad-assoc-expr.rs:22:5\n    |\n-22 |     (u8, u8)::clone(&(0, 0));\n+LL |     (u8, u8)::clone(&(0, 0));\n    |     ^^^^^^^^^^^^^^^ help: try: `<(u8, u8)>::clone`\n \n error: missing angle brackets in associated item path\n   --> $DIR/bad-assoc-expr.rs:25:6\n    |\n-25 |     &(u8)::clone(&0);\n+LL |     &(u8)::clone(&0);\n    |      ^^^^^^^^^^^ help: try: `<(u8)>::clone`\n \n error: missing angle brackets in associated item path\n   --> $DIR/bad-assoc-expr.rs:28:10\n    |\n-28 |     10 + (u8)::clone(&0);\n+LL |     10 + (u8)::clone(&0);\n    |          ^^^^^^^^^^^ help: try: `<(u8)>::clone`\n \n error: aborting due to 6 previous errors"}, {"sha": "80caa86fde553a2ba31eb07a997a498cb7f4bf73", "filename": "src/test/ui/did_you_mean/bad-assoc-pat.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,49 +1,49 @@\n error: missing angle brackets in associated item path\n   --> $DIR/bad-assoc-pat.rs:13:9\n    |\n-13 |         [u8]::AssocItem => {}\n+LL |         [u8]::AssocItem => {}\n    |         ^^^^^^^^^^^^^^^ help: try: `<[u8]>::AssocItem`\n \n error: missing angle brackets in associated item path\n   --> $DIR/bad-assoc-pat.rs:16:9\n    |\n-16 |         (u8, u8)::AssocItem => {}\n+LL |         (u8, u8)::AssocItem => {}\n    |         ^^^^^^^^^^^^^^^^^^^ help: try: `<(u8, u8)>::AssocItem`\n \n error: missing angle brackets in associated item path\n   --> $DIR/bad-assoc-pat.rs:19:9\n    |\n-19 |         _::AssocItem => {}\n+LL |         _::AssocItem => {}\n    |         ^^^^^^^^^^^^ help: try: `<_>::AssocItem`\n \n error: missing angle brackets in associated item path\n   --> $DIR/bad-assoc-pat.rs:24:10\n    |\n-24 |         &(u8,)::AssocItem => {}\n+LL |         &(u8,)::AssocItem => {}\n    |          ^^^^^^^^^^^^^^^^ help: try: `<(u8,)>::AssocItem`\n \n error[E0599]: no associated item named `AssocItem` found for type `[u8]` in the current scope\n   --> $DIR/bad-assoc-pat.rs:13:9\n    |\n-13 |         [u8]::AssocItem => {}\n+LL |         [u8]::AssocItem => {}\n    |         ^^^^^^^^^^^^^^^ associated item not found in `[u8]`\n \n error[E0599]: no associated item named `AssocItem` found for type `(u8, u8)` in the current scope\n   --> $DIR/bad-assoc-pat.rs:16:9\n    |\n-16 |         (u8, u8)::AssocItem => {}\n+LL |         (u8, u8)::AssocItem => {}\n    |         ^^^^^^^^^^^^^^^^^^^ associated item not found in `(u8, u8)`\n \n error[E0599]: no associated item named `AssocItem` found for type `_` in the current scope\n   --> $DIR/bad-assoc-pat.rs:19:9\n    |\n-19 |         _::AssocItem => {}\n+LL |         _::AssocItem => {}\n    |         ^^^^^^^^^^^^ associated item not found in `_`\n \n error[E0599]: no associated item named `AssocItem` found for type `(u8,)` in the current scope\n   --> $DIR/bad-assoc-pat.rs:24:10\n    |\n-24 |         &(u8,)::AssocItem => {}\n+LL |         &(u8,)::AssocItem => {}\n    |          ^^^^^^^^^^^^^^^^ associated item not found in `(u8,)`\n \n error: aborting due to 8 previous errors"}, {"sha": "b584fa16988ef3e323ac07821ae079a68104fff8", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,103 +1,103 @@\n error: missing angle brackets in associated item path\n   --> $DIR/bad-assoc-ty.rs:11:10\n    |\n-11 | type A = [u8; 4]::AssocTy;\n+LL | type A = [u8; 4]::AssocTy;\n    |          ^^^^^^^^^^^^^^^^ help: try: `<[u8; 4]>::AssocTy`\n \n error: missing angle brackets in associated item path\n   --> $DIR/bad-assoc-ty.rs:15:10\n    |\n-15 | type B = [u8]::AssocTy;\n+LL | type B = [u8]::AssocTy;\n    |          ^^^^^^^^^^^^^ help: try: `<[u8]>::AssocTy`\n \n error: missing angle brackets in associated item path\n   --> $DIR/bad-assoc-ty.rs:19:10\n    |\n-19 | type C = (u8)::AssocTy;\n+LL | type C = (u8)::AssocTy;\n    |          ^^^^^^^^^^^^^ help: try: `<(u8)>::AssocTy`\n \n error: missing angle brackets in associated item path\n   --> $DIR/bad-assoc-ty.rs:23:10\n    |\n-23 | type D = (u8, u8)::AssocTy;\n+LL | type D = (u8, u8)::AssocTy;\n    |          ^^^^^^^^^^^^^^^^^ help: try: `<(u8, u8)>::AssocTy`\n \n error: missing angle brackets in associated item path\n   --> $DIR/bad-assoc-ty.rs:27:10\n    |\n-27 | type E = _::AssocTy;\n+LL | type E = _::AssocTy;\n    |          ^^^^^^^^^^ help: try: `<_>::AssocTy`\n \n error: missing angle brackets in associated item path\n   --> $DIR/bad-assoc-ty.rs:31:19\n    |\n-31 | type F = &'static (u8)::AssocTy;\n+LL | type F = &'static (u8)::AssocTy;\n    |                   ^^^^^^^^^^^^^ help: try: `<(u8)>::AssocTy`\n \n error: missing angle brackets in associated item path\n   --> $DIR/bad-assoc-ty.rs:37:10\n    |\n-37 | type G = 'static + (Send)::AssocTy;\n+LL | type G = 'static + (Send)::AssocTy;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `<'static + Send>::AssocTy`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:11:10\n    |\n-11 | type A = [u8; 4]::AssocTy;\n+LL | type A = [u8; 4]::AssocTy;\n    |          ^^^^^^^^^^^^^^^^ ambiguous associated type\n    |\n    = note: specify the type using the syntax `<[u8; <unevaluated[]>] as Trait>::AssocTy`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:15:10\n    |\n-15 | type B = [u8]::AssocTy;\n+LL | type B = [u8]::AssocTy;\n    |          ^^^^^^^^^^^^^ ambiguous associated type\n    |\n    = note: specify the type using the syntax `<[u8] as Trait>::AssocTy`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:19:10\n    |\n-19 | type C = (u8)::AssocTy;\n+LL | type C = (u8)::AssocTy;\n    |          ^^^^^^^^^^^^^ ambiguous associated type\n    |\n    = note: specify the type using the syntax `<u8 as Trait>::AssocTy`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:23:10\n    |\n-23 | type D = (u8, u8)::AssocTy;\n+LL | type D = (u8, u8)::AssocTy;\n    |          ^^^^^^^^^^^^^^^^^ ambiguous associated type\n    |\n    = note: specify the type using the syntax `<(u8, u8) as Trait>::AssocTy`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/bad-assoc-ty.rs:27:10\n    |\n-27 | type E = _::AssocTy;\n+LL | type E = _::AssocTy;\n    |          ^ not allowed in type signatures\n \n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:31:19\n    |\n-31 | type F = &'static (u8)::AssocTy;\n+LL | type F = &'static (u8)::AssocTy;\n    |                   ^^^^^^^^^^^^^ ambiguous associated type\n    |\n    = note: specify the type using the syntax `<u8 as Trait>::AssocTy`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:37:10\n    |\n-37 | type G = 'static + (Send)::AssocTy;\n+LL | type G = 'static + (Send)::AssocTy;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type\n    |\n    = note: specify the type using the syntax `<std::marker::Send + 'static as Trait>::AssocTy`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:43:10\n    |\n-43 | type H = Fn(u8) -> (u8)::Output;\n+LL | type H = Fn(u8) -> (u8)::Output;\n    |          ^^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type\n    |\n    = note: specify the type using the syntax `<std::ops::Fn(u8) -> u8 + 'static as Trait>::Output`"}, {"sha": "5290b388e4762f6c2bcfb5b6e341adf1eee58d85", "filename": "src/test/ui/did_you_mean/issue-21659-show-relevant-trait-impls-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: the trait bound `Bar: Foo<usize>` is not satisfied\n   --> $DIR/issue-21659-show-relevant-trait-impls-1.rs:34:8\n    |\n-34 |     f1.foo(1usize);\n+LL |     f1.foo(1usize);\n    |        ^^^ the trait `Foo<usize>` is not implemented for `Bar`\n    |\n    = help: the following implementations were found:"}, {"sha": "d1b3b2031f6c1bd02bacaa8b0c389ce66c4fb8c5", "filename": "src/test/ui/did_you_mean/issue-21659-show-relevant-trait-impls-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: the trait bound `Bar: Foo<usize>` is not satisfied\n   --> $DIR/issue-21659-show-relevant-trait-impls-2.rs:38:8\n    |\n-38 |     f1.foo(1usize);\n+LL |     f1.foo(1usize);\n    |        ^^^ the trait `Foo<usize>` is not implemented for `Bar`\n    |\n    = help: the following implementations were found:"}, {"sha": "eb2659e1fcaadf0f0f15602c3b4bd38bceba3d1b", "filename": "src/test/ui/did_you_mean/issue-31424.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0596]: cannot borrow immutable argument `self` as mutable\n   --> $DIR/issue-31424.rs:17:15\n    |\n-17 |         (&mut self).bar(); //~ ERROR cannot borrow\n+LL |         (&mut self).bar(); //~ ERROR cannot borrow\n    |               ^^^^\n    |               |\n    |               cannot reborrow mutably\n@@ -10,9 +10,9 @@ error[E0596]: cannot borrow immutable argument `self` as mutable\n error[E0596]: cannot borrow immutable argument `self` as mutable\n   --> $DIR/issue-31424.rs:23:15\n    |\n-22 |     fn bar(self: &mut Self) {\n+LL |     fn bar(self: &mut Self) {\n    |            --------------- consider changing this to `mut self: &mut Self`\n-23 |         (&mut self).bar(); //~ ERROR cannot borrow\n+LL |         (&mut self).bar(); //~ ERROR cannot borrow\n    |               ^^^^ cannot borrow mutably\n \n error: aborting due to 2 previous errors"}, {"sha": "b99b1b54d538180ba8633059dc23adb7fa4cc86a", "filename": "src/test/ui/did_you_mean/issue-34126.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0596]: cannot borrow immutable argument `self` as mutable\n   --> $DIR/issue-34126.rs:16:23\n    |\n-16 |         self.run(&mut self); //~ ERROR cannot borrow\n+LL |         self.run(&mut self); //~ ERROR cannot borrow\n    |                       ^^^^\n    |                       |\n    |                       cannot reborrow mutably"}, {"sha": "3b73132423d4d4f1b17d8642ddadc726659a12ee", "filename": "src/test/ui/did_you_mean/issue-34337.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0596]: cannot borrow immutable local variable `key` as mutable\n   --> $DIR/issue-34337.rs:16:14\n    |\n-16 |     get(&mut key); //~ ERROR cannot borrow\n+LL |     get(&mut key); //~ ERROR cannot borrow\n    |              ^^^\n    |              |\n    |              cannot reborrow mutably"}, {"sha": "7894ca208818eaf7814bdfbfac67bad63eab72ed", "filename": "src/test/ui/did_you_mean/issue-35937.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,25 +1,25 @@\n error[E0596]: cannot borrow field `f.v` of immutable binding as mutable\n   --> $DIR/issue-35937.rs:17:5\n    |\n-16 |     let f = Foo { v: Vec::new() };\n+LL |     let f = Foo { v: Vec::new() };\n    |         - consider changing this to `mut f`\n-17 |     f.v.push(\"cat\".to_string()); //~ ERROR cannot borrow\n+LL |     f.v.push(\"cat\".to_string()); //~ ERROR cannot borrow\n    |     ^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to field `s.x` of immutable binding\n   --> $DIR/issue-35937.rs:26:5\n    |\n-25 |     let s = S { x: 42 };\n+LL |     let s = S { x: 42 };\n    |         - consider changing this to `mut s`\n-26 |     s.x += 1; //~ ERROR cannot assign\n+LL |     s.x += 1; //~ ERROR cannot assign\n    |     ^^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to field `s.x` of immutable binding\n   --> $DIR/issue-35937.rs:30:5\n    |\n-29 | fn bar(s: S) {\n+LL | fn bar(s: S) {\n    |        - consider changing this to `mut s`\n-30 |     s.x += 1; //~ ERROR cannot assign\n+LL |     s.x += 1; //~ ERROR cannot assign\n    |     ^^^^^^^^ cannot mutably borrow field of immutable binding\n \n error: aborting due to 3 previous errors"}, {"sha": "100f93d2e31c9e9871cc9c46add5b360e8034154", "filename": "src/test/ui/did_you_mean/issue-36798.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0609]: no field `baz` on type `Foo`\n   --> $DIR/issue-36798.rs:17:7\n    |\n-17 |     f.baz; //~ ERROR no field\n+LL |     f.baz; //~ ERROR no field\n    |       ^^^ did you mean `bar`?\n \n error: aborting due to previous error"}, {"sha": "4bbadf3a790698bd70d8b4d885a67ec3cf4a2a55", "filename": "src/test/ui/did_you_mean/issue-36798_unknown_field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0609]: no field `zz` on type `Foo`\n   --> $DIR/issue-36798_unknown_field.rs:17:7\n    |\n-17 |     f.zz; //~ ERROR no field\n+LL |     f.zz; //~ ERROR no field\n    |       ^^ unknown field\n    |\n    = note: available fields are: `bar`"}, {"sha": "9d918964ce6cb0bf2f18d099ddb2c83045a2a039", "filename": "src/test/ui/did_you_mean/issue-37139.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0596]: cannot borrow immutable local variable `x` as mutable\n   --> $DIR/issue-37139.rs:22:23\n    |\n-22 |             test(&mut x); //~ ERROR cannot borrow immutable\n+LL |             test(&mut x); //~ ERROR cannot borrow immutable\n    |                       ^\n    |                       |\n    |                       cannot reborrow mutably"}, {"sha": "5a9fbafb8eb5dd3676d19ccb094708ae5def44cd", "filename": "src/test/ui/did_you_mean/issue-38054-do-not-show-unresolved-names.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38054-do-not-show-unresolved-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38054-do-not-show-unresolved-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38054-do-not-show-unresolved-names.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,13 +1,13 @@\n error[E0432]: unresolved import `Foo`\n   --> $DIR/issue-38054-do-not-show-unresolved-names.rs:11:5\n    |\n-11 | use Foo; //~ ERROR unresolved\n+LL | use Foo; //~ ERROR unresolved\n    |     ^^^ no `Foo` in the root\n \n error[E0432]: unresolved import `Foo1`\n   --> $DIR/issue-38054-do-not-show-unresolved-names.rs:13:5\n    |\n-13 | use Foo1; //~ ERROR unresolved\n+LL | use Foo1; //~ ERROR unresolved\n    |     ^^^^ no `Foo1` in the root\n \n error: aborting due to 2 previous errors"}, {"sha": "ca842b396465a4425289bb73eddf721aca621e30", "filename": "src/test/ui/did_you_mean/issue-38147-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,9 +1,9 @@\n error[E0389]: cannot borrow data mutably in a `&` reference\n   --> $DIR/issue-38147-1.rs:27:9\n    |\n-26 |     fn f(&self) {\n+LL |     fn f(&self) {\n    |          ----- use `&mut self` here to make mutable\n-27 |         self.s.push('x'); //~ ERROR cannot borrow data mutably\n+LL |         self.s.push('x'); //~ ERROR cannot borrow data mutably\n    |         ^^^^^^ assignment into an immutable reference\n \n error: aborting due to previous error"}, {"sha": "606f1dd522323820bddf7d8ffd7f1b9f3be7759d", "filename": "src/test/ui/did_you_mean/issue-38147-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0596]: cannot borrow borrowed content `*self.s` of immutable binding as mutable\n   --> $DIR/issue-38147-2.rs:17:9\n    |\n-12 |     s: &'a String\n+LL |     s: &'a String\n    |        ---------- use `&'a mut String` here to make mutable\n ...\n-17 |         self.s.push('x');\n+LL |         self.s.push('x');\n    |         ^^^^^^ cannot borrow as mutable\n \n error: aborting due to previous error"}, {"sha": "cf075204e8b795e14090717bdff9bf5fb7af80a7", "filename": "src/test/ui/did_you_mean/issue-38147-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0596]: cannot borrow borrowed content `*self.s` of immutable binding as mutable\n   --> $DIR/issue-38147-3.rs:17:9\n    |\n-12 |     s: &'a String\n+LL |     s: &'a String\n    |        ---------- use `&'a mut String` here to make mutable\n ...\n-17 |         self.s.push('x');\n+LL |         self.s.push('x');\n    |         ^^^^^^ cannot borrow as mutable\n \n error: aborting due to previous error"}, {"sha": "a10acf1460dc0dac2d8975601c96e3a931426862", "filename": "src/test/ui/did_you_mean/issue-38147-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,9 +1,9 @@\n error[E0389]: cannot borrow data mutably in a `&` reference\n   --> $DIR/issue-38147-4.rs:16:5\n    |\n-15 | fn f(x: usize, f: &Foo) {\n+LL | fn f(x: usize, f: &Foo) {\n    |                   ---- use `&mut Foo` here to make mutable\n-16 |     f.s.push('x'); //~ ERROR cannot borrow data mutably\n+LL |     f.s.push('x'); //~ ERROR cannot borrow data mutably\n    |     ^^^ assignment into an immutable reference\n \n error: aborting due to previous error"}, {"sha": "a05b70b2eb869c5f919a0ca8a4452864e19de830", "filename": "src/test/ui/did_you_mean/issue-39544.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,99 +1,99 @@\n error[E0596]: cannot borrow field `z.x` of immutable binding as mutable\n   --> $DIR/issue-39544.rs:21:18\n    |\n-20 |     let z = Z { x: X::Y };\n+LL |     let z = Z { x: X::Y };\n    |         - consider changing this to `mut z`\n-21 |     let _ = &mut z.x; //~ ERROR cannot borrow\n+LL |     let _ = &mut z.x; //~ ERROR cannot borrow\n    |                  ^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow field `self.x` of immutable binding as mutable\n   --> $DIR/issue-39544.rs:26:22\n    |\n-25 |     fn foo<'z>(&'z self) {\n+LL |     fn foo<'z>(&'z self) {\n    |                -------- use `&'z mut self` here to make mutable\n-26 |         let _ = &mut self.x; //~ ERROR cannot borrow\n+LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                      ^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow field `self.x` of immutable binding as mutable\n   --> $DIR/issue-39544.rs:30:22\n    |\n-29 |     fn foo1(&self, other: &Z) {\n+LL |     fn foo1(&self, other: &Z) {\n    |             ----- use `&mut self` here to make mutable\n-30 |         let _ = &mut self.x; //~ ERROR cannot borrow\n+LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                      ^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow field `other.x` of immutable binding as mutable\n   --> $DIR/issue-39544.rs:31:22\n    |\n-29 |     fn foo1(&self, other: &Z) {\n+LL |     fn foo1(&self, other: &Z) {\n    |                           -- use `&mut Z` here to make mutable\n-30 |         let _ = &mut self.x; //~ ERROR cannot borrow\n-31 |         let _ = &mut other.x; //~ ERROR cannot borrow\n+LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n+LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n    |                      ^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow field `self.x` of immutable binding as mutable\n   --> $DIR/issue-39544.rs:35:22\n    |\n-34 |     fn foo2<'a>(&'a self, other: &Z) {\n+LL |     fn foo2<'a>(&'a self, other: &Z) {\n    |                 -------- use `&'a mut self` here to make mutable\n-35 |         let _ = &mut self.x; //~ ERROR cannot borrow\n+LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                      ^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow field `other.x` of immutable binding as mutable\n   --> $DIR/issue-39544.rs:36:22\n    |\n-34 |     fn foo2<'a>(&'a self, other: &Z) {\n+LL |     fn foo2<'a>(&'a self, other: &Z) {\n    |                                  -- use `&mut Z` here to make mutable\n-35 |         let _ = &mut self.x; //~ ERROR cannot borrow\n-36 |         let _ = &mut other.x; //~ ERROR cannot borrow\n+LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n+LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n    |                      ^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow field `self.x` of immutable binding as mutable\n   --> $DIR/issue-39544.rs:40:22\n    |\n-39 |     fn foo3<'a>(self: &'a Self, other: &Z) {\n+LL |     fn foo3<'a>(self: &'a Self, other: &Z) {\n    |                       -------- use `&'a mut Self` here to make mutable\n-40 |         let _ = &mut self.x; //~ ERROR cannot borrow\n+LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                      ^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow field `other.x` of immutable binding as mutable\n   --> $DIR/issue-39544.rs:41:22\n    |\n-39 |     fn foo3<'a>(self: &'a Self, other: &Z) {\n+LL |     fn foo3<'a>(self: &'a Self, other: &Z) {\n    |                                        -- use `&mut Z` here to make mutable\n-40 |         let _ = &mut self.x; //~ ERROR cannot borrow\n-41 |         let _ = &mut other.x; //~ ERROR cannot borrow\n+LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n+LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n    |                      ^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow field `other.x` of immutable binding as mutable\n   --> $DIR/issue-39544.rs:45:22\n    |\n-44 |     fn foo4(other: &Z) {\n+LL |     fn foo4(other: &Z) {\n    |                    -- use `&mut Z` here to make mutable\n-45 |         let _ = &mut other.x; //~ ERROR cannot borrow\n+LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n    |                      ^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow field `z.x` of immutable binding as mutable\n   --> $DIR/issue-39544.rs:51:18\n    |\n-50 | pub fn with_arg(z: Z, w: &Z) {\n+LL | pub fn with_arg(z: Z, w: &Z) {\n    |                 - consider changing this to `mut z`\n-51 |     let _ = &mut z.x; //~ ERROR cannot borrow\n+LL |     let _ = &mut z.x; //~ ERROR cannot borrow\n    |                  ^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow field `w.x` of immutable binding as mutable\n   --> $DIR/issue-39544.rs:52:18\n    |\n-50 | pub fn with_arg(z: Z, w: &Z) {\n+LL | pub fn with_arg(z: Z, w: &Z) {\n    |                          -- use `&mut Z` here to make mutable\n-51 |     let _ = &mut z.x; //~ ERROR cannot borrow\n-52 |     let _ = &mut w.x; //~ ERROR cannot borrow\n+LL |     let _ = &mut z.x; //~ ERROR cannot borrow\n+LL |     let _ = &mut w.x; //~ ERROR cannot borrow\n    |                  ^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to borrowed content `*x.0` of immutable binding\n   --> $DIR/issue-39544.rs:58:5\n    |\n-58 |     *x.0 = 1;\n+LL |     *x.0 = 1;\n    |     ^^^^^^^^ cannot borrow as mutable\n \n error: aborting due to 12 previous errors"}, {"sha": "c08ee4247c7b89ef4cfb0aa91c01df7793efcf19", "filename": "src/test/ui/did_you_mean/issue-39802-show-5-trait-impls.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: the trait bound `i8: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:34:5\n    |\n-34 |     Foo::<i32>::bar(&1i8); //~ ERROR is not satisfied\n+LL |     Foo::<i32>::bar(&1i8); //~ ERROR is not satisfied\n    |     ^^^^^^^^^^^^^^^ the trait `Foo<i32>` is not implemented for `i8`\n    |\n    = help: the following implementations were found:\n@@ -13,13 +13,13 @@ error[E0277]: the trait bound `i8: Foo<i32>` is not satisfied\n note: required by `Foo::bar`\n   --> $DIR/issue-39802-show-5-trait-impls.rs:12:5\n    |\n-12 |     fn bar(&self){}\n+LL |     fn bar(&self){}\n    |     ^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `u8: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:35:5\n    |\n-35 |     Foo::<i32>::bar(&1u8); //~ ERROR is not satisfied\n+LL |     Foo::<i32>::bar(&1u8); //~ ERROR is not satisfied\n    |     ^^^^^^^^^^^^^^^ the trait `Foo<i32>` is not implemented for `u8`\n    |\n    = help: the following implementations were found:\n@@ -30,13 +30,13 @@ error[E0277]: the trait bound `u8: Foo<i32>` is not satisfied\n note: required by `Foo::bar`\n   --> $DIR/issue-39802-show-5-trait-impls.rs:12:5\n    |\n-12 |     fn bar(&self){}\n+LL |     fn bar(&self){}\n    |     ^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `bool: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:36:5\n    |\n-36 |     Foo::<i32>::bar(&true); //~ ERROR is not satisfied\n+LL |     Foo::<i32>::bar(&true); //~ ERROR is not satisfied\n    |     ^^^^^^^^^^^^^^^ the trait `Foo<i32>` is not implemented for `bool`\n    |\n    = help: the following implementations were found:\n@@ -48,7 +48,7 @@ error[E0277]: the trait bound `bool: Foo<i32>` is not satisfied\n note: required by `Foo::bar`\n   --> $DIR/issue-39802-show-5-trait-impls.rs:12:5\n    |\n-12 |     fn bar(&self){}\n+LL |     fn bar(&self){}\n    |     ^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors"}, {"sha": "301441c5622f901361b64c9f8a72656d6c1f10f0", "filename": "src/test/ui/did_you_mean/issue-40006.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,65 +1,65 @@\n error: missing `fn`, `type`, or `const` for impl-item declaration\n   --> $DIR/issue-40006.rs:11:9\n    |\n-11 |   impl X { //~ ERROR cannot be made into an object\n+LL |   impl X { //~ ERROR cannot be made into an object\n    |  _________^\n-12 | | //~^ ERROR missing\n-13 | |     Y\n+LL | | //~^ ERROR missing\n+LL | |     Y\n    | |____^ missing `fn`, `type`, or `const`\n \n error: missing `fn`, `type`, or `const` for trait-item declaration\n   --> $DIR/issue-40006.rs:18:10\n    |\n-18 |   trait X { //~ ERROR missing\n+LL |   trait X { //~ ERROR missing\n    |  __________^\n-19 | |     X() {}\n+LL | |     X() {}\n    | |____^ missing `fn`, `type`, or `const`\n \n error: expected `[`, found `#`\n   --> $DIR/issue-40006.rs:20:17\n    |\n-20 |     fn xxx() { ### } //~ ERROR missing\n+LL |     fn xxx() { ### } //~ ERROR missing\n    |                 ^\n \n error: missing `fn`, `type`, or `const` for trait-item declaration\n   --> $DIR/issue-40006.rs:20:21\n    |\n-20 |       fn xxx() { ### } //~ ERROR missing\n+LL |       fn xxx() { ### } //~ ERROR missing\n    |  _____________________^\n-21 | |     //~^ ERROR expected\n-22 | |     L = M; //~ ERROR missing\n+LL | |     //~^ ERROR expected\n+LL | |     L = M; //~ ERROR missing\n    | |____^ missing `fn`, `type`, or `const`\n \n error: missing `fn`, `type`, or `const` for trait-item declaration\n   --> $DIR/issue-40006.rs:22:11\n    |\n-22 |       L = M; //~ ERROR missing\n+LL |       L = M; //~ ERROR missing\n    |  ___________^\n-23 | |     Z = { 2 + 3 }; //~ ERROR expected one of\n+LL | |     Z = { 2 + 3 }; //~ ERROR expected one of\n    | |____^ missing `fn`, `type`, or `const`\n \n error: expected one of `const`, `extern`, `fn`, `type`, `unsafe`, or `}`, found `;`\n   --> $DIR/issue-40006.rs:23:18\n    |\n-23 |     Z = { 2 + 3 }; //~ ERROR expected one of\n+LL |     Z = { 2 + 3 }; //~ ERROR expected one of\n    |                  ^ expected one of `const`, `extern`, `fn`, `type`, `unsafe`, or `}` here\n \n error: expected one of `!` or `::`, found `(`\n   --> $DIR/issue-40006.rs:24:9\n    |\n-24 |     ::Y (); //~ ERROR expected one of\n+LL |     ::Y (); //~ ERROR expected one of\n    |         ^ expected one of `!` or `::` here\n \n error: missing `fn`, `type`, or `const` for impl-item declaration\n   --> $DIR/issue-40006.rs:28:8\n    |\n-28 |     pub hello_method(&self) { //~ ERROR missing\n+LL |     pub hello_method(&self) { //~ ERROR missing\n    |        ^ missing `fn`, `type`, or `const`\n \n error[E0038]: the trait `X` cannot be made into an object\n   --> $DIR/issue-40006.rs:11:6\n    |\n-11 | impl X { //~ ERROR cannot be made into an object\n+LL | impl X { //~ ERROR cannot be made into an object\n    |      ^ the trait `X` cannot be made into an object\n    |\n    = note: method `xxx` has no receiver"}, {"sha": "219fd45665a94f1ae09d16d784d71f6033ceccb8", "filename": "src/test/ui/did_you_mean/issue-40396.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error: chained comparison operators require parentheses\n   --> $DIR/issue-40396.rs:12:37\n    |\n-12 |     println!(\"{:?}\", (0..13).collect<Vec<i32>>()); //~ ERROR chained comparison\n+LL |     println!(\"{:?}\", (0..13).collect<Vec<i32>>()); //~ ERROR chained comparison\n    |                                     ^^^^^^^^\n    |\n    = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n@@ -10,7 +10,7 @@ error: chained comparison operators require parentheses\n error: chained comparison operators require parentheses\n   --> $DIR/issue-40396.rs:16:25\n    |\n-16 |     println!(\"{:?}\", Vec<i32>::new()); //~ ERROR chained comparison\n+LL |     println!(\"{:?}\", Vec<i32>::new()); //~ ERROR chained comparison\n    |                         ^^^^^^^\n    |\n    = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n@@ -19,7 +19,7 @@ error: chained comparison operators require parentheses\n error: chained comparison operators require parentheses\n   --> $DIR/issue-40396.rs:20:37\n    |\n-20 |     println!(\"{:?}\", (0..13).collect<Vec<i32>()); //~ ERROR chained comparison\n+LL |     println!(\"{:?}\", (0..13).collect<Vec<i32>()); //~ ERROR chained comparison\n    |                                     ^^^^^^^^\n    |\n    = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n@@ -28,7 +28,7 @@ error: chained comparison operators require parentheses\n error: chained comparison operators require parentheses\n   --> $DIR/issue-40396.rs:20:41\n    |\n-20 |     println!(\"{:?}\", (0..13).collect<Vec<i32>()); //~ ERROR chained comparison\n+LL |     println!(\"{:?}\", (0..13).collect<Vec<i32>()); //~ ERROR chained comparison\n    |                                         ^^^^^^\n    |\n    = help: use `::<...>` instead of `<...>` if you meant to specify type arguments"}, {"sha": "3aece9908a9c88872cd798dab1070c3734bcb465", "filename": "src/test/ui/did_you_mean/issue-40823.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0596]: cannot borrow immutable borrowed content `*buf` as mutable\n   --> $DIR/issue-40823.rs:13:5\n    |\n-13 |     buf.iter_mut(); //~ ERROR cannot borrow immutable borrowed content\n+LL |     buf.iter_mut(); //~ ERROR cannot borrow immutable borrowed content\n    |     ^^^ cannot borrow as mutable\n \n error: aborting due to previous error"}, {"sha": "c17812fc0cb9dc5719423ac82d05f8dd10c0e107", "filename": "src/test/ui/did_you_mean/issue-41679.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error: `~` can not be used as a unary operator\n   --> $DIR/issue-41679.rs:12:13\n    |\n-12 |     let x = ~1; //~ ERROR can not be used as a unary operator\n+LL |     let x = ~1; //~ ERROR can not be used as a unary operator\n    |             ^ did you mean `!`?\n    |\n    = help: use `!` instead of `~` if you meant to perform bitwise negation"}, {"sha": "64c20ff8e07856ac72858fa3672ea7c78b14b1c8", "filename": "src/test/ui/did_you_mean/issue-42599_available_fields_note.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,27 +1,27 @@\n error[E0560]: struct `submodule::Demo` has no field named `inocently_mispellable`\n   --> $DIR/issue-42599_available_fields_note.rs:26:39\n    |\n-26 |             Self { secret_integer: 2, inocently_mispellable: () }\n+LL |             Self { secret_integer: 2, inocently_mispellable: () }\n    |                                       ^^^^^^^^^^^^^^^^^^^^^ field does not exist - did you mean `innocently_misspellable`?\n \n error[E0560]: struct `submodule::Demo` has no field named `egregiously_nonexistent_field`\n   --> $DIR/issue-42599_available_fields_note.rs:31:39\n    |\n-31 |             Self { secret_integer: 3, egregiously_nonexistent_field: () }\n+LL |             Self { secret_integer: 3, egregiously_nonexistent_field: () }\n    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `submodule::Demo` does not have this field\n    |\n    = note: available fields are: `favorite_integer`, `secret_integer`, `innocently_misspellable`, `another_field`, `yet_another_field` ... and 2 others\n \n error[E0609]: no field `inocently_mispellable` on type `submodule::Demo`\n   --> $DIR/issue-42599_available_fields_note.rs:42:41\n    |\n-42 |     let innocent_field_misaccess = demo.inocently_mispellable;\n+LL |     let innocent_field_misaccess = demo.inocently_mispellable;\n    |                                         ^^^^^^^^^^^^^^^^^^^^^ did you mean `innocently_misspellable`?\n \n error[E0609]: no field `egregiously_nonexistent_field` on type `submodule::Demo`\n   --> $DIR/issue-42599_available_fields_note.rs:45:42\n    |\n-45 |     let egregious_field_misaccess = demo.egregiously_nonexistent_field;\n+LL |     let egregious_field_misaccess = demo.egregiously_nonexistent_field;\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field\n    |\n    = note: available fields are: `favorite_integer`, `innocently_misspellable`"}, {"sha": "390b214e62e0b7bd0ed13719f3657100efcaf679", "filename": "src/test/ui/did_you_mean/issue-42764.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,16 +1,16 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-42764.rs:21:43\n    |\n-21 |     this_function_expects_a_double_option(n);\n+LL |     this_function_expects_a_double_option(n);\n    |                                           ^ expected enum `DoubleOption`, found usize\n    |\n    = note: expected type `DoubleOption<_>`\n               found type `usize`\n help: try using a variant of the expected type\n    |\n-21 |     this_function_expects_a_double_option(DoubleOption::FirstSome(n));\n+LL |     this_function_expects_a_double_option(DoubleOption::FirstSome(n));\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-21 |     this_function_expects_a_double_option(DoubleOption::AlternativeSome(n));\n+LL |     this_function_expects_a_double_option(DoubleOption::AlternativeSome(n));\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "1f653c908866e99d7b06d7df1bc645b06b1d96fd", "filename": "src/test/ui/did_you_mean/issue-43871-enum-instead-of-variant.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0423]: expected function, found enum `Option`\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:14:13\n    |\n-14 |     let x = Option(1); //~ ERROR expected function, found enum\n+LL |     let x = Option(1); //~ ERROR expected function, found enum\n    |             ^^^^^^\n    |\n    = note: did you mean to use one of the following variants?\n@@ -11,7 +11,7 @@ error[E0423]: expected function, found enum `Option`\n error[E0532]: expected tuple struct/variant, found enum `Option`\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:16:12\n    |\n-16 |     if let Option(_) = x { //~ ERROR expected tuple struct/variant, found enum\n+LL |     if let Option(_) = x { //~ ERROR expected tuple struct/variant, found enum\n    |            ^^^^^^\n    |\n    = note: did you mean to use one of the following variants?\n@@ -21,7 +21,7 @@ error[E0532]: expected tuple struct/variant, found enum `Option`\n error[E0532]: expected tuple struct/variant, found enum `Example`\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:22:12\n    |\n-22 |     if let Example(_) = y { //~ ERROR expected tuple struct/variant, found enum\n+LL |     if let Example(_) = y { //~ ERROR expected tuple struct/variant, found enum\n    |            ^^^^^^^\n    |\n    = note: did you mean to use one of the following variants?"}, {"sha": "d73e6287f12c930313b8b27aead08d3df1d0e5f3", "filename": "src/test/ui/did_you_mean/issue-46718-struct-pattern-dotdotdot.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-46718-struct-pattern-dotdotdot.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-46718-struct-pattern-dotdotdot.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-46718-struct-pattern-dotdotdot.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error: expected field pattern, found `...`\n   --> $DIR/issue-46718-struct-pattern-dotdotdot.rs:21:55\n    |\n-21 |             PersonalityInventory { expressivity: exp, ... } => exp\n+LL |             PersonalityInventory { expressivity: exp, ... } => exp\n    |                                                       ^^^ help: to omit remaining fields, use one fewer `.`: `..`\n \n error: aborting due to previous error"}, {"sha": "c3a706d5901fb0974344707dd6bf93c82f5534e7", "filename": "src/test/ui/did_you_mean/multiple-pattern-typo.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fmultiple-pattern-typo.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Fmultiple-pattern-typo.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fmultiple-pattern-typo.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error: unexpected token `||` after pattern\n   --> $DIR/multiple-pattern-typo.rs:14:15\n    |\n-14 |         1 | 2 || 3 => (), //~ ERROR unexpected token `||` after pattern\n+LL |         1 | 2 || 3 => (), //~ ERROR unexpected token `||` after pattern\n    |               ^^ help: use a single `|` to specify multiple patterns: `|`\n \n error: aborting due to previous error"}, {"sha": "8b34c533d8b477036f0420ad02efedc399738fe4", "filename": "src/test/ui/did_you_mean/recursion_limit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0275]: overflow evaluating the requirement `K: std::marker::Send`\n   --> $DIR/recursion_limit.rs:44:5\n    |\n-44 |     is_send::<A>(); //~ ERROR overflow evaluating the requirement\n+LL |     is_send::<A>(); //~ ERROR overflow evaluating the requirement\n    |     ^^^^^^^^^^^^\n    |\n    = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate\n@@ -18,7 +18,7 @@ error[E0275]: overflow evaluating the requirement `K: std::marker::Send`\n note: required by `is_send`\n   --> $DIR/recursion_limit.rs:41:1\n    |\n-41 | fn is_send<T:Send>() { }\n+LL | fn is_send<T:Send>() { }\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "a4048fbfb265ff2bc8af67eeac064cdb863b75bd", "filename": "src/test/ui/did_you_mean/recursion_limit_deref.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,19 +1,19 @@\n error[E0055]: reached the recursion limit while auto-dereferencing I\n   --> $DIR/recursion_limit_deref.rs:62:22\n    |\n-62 |     let x: &Bottom = &t; //~ ERROR mismatched types\n+LL |     let x: &Bottom = &t; //~ ERROR mismatched types\n    |                      ^^ deref recursion limit reached\n    |\n    = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate\n \n error[E0055]: reached the recursion limit while auto-dereferencing I\n-  |\n-  = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate\n+   |\n+   = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate\n \n error[E0308]: mismatched types\n   --> $DIR/recursion_limit_deref.rs:62:22\n    |\n-62 |     let x: &Bottom = &t; //~ ERROR mismatched types\n+LL |     let x: &Bottom = &t; //~ ERROR mismatched types\n    |                      ^^ expected struct `Bottom`, found struct `Top`\n    |\n    = note: expected type `&Bottom`"}, {"sha": "f6bce55528c7dad42405ebb7a3a349f235a80f8f", "filename": "src/test/ui/did_you_mean/recursion_limit_macro.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error: recursion limit reached while expanding the macro `recurse`\n   --> $DIR/recursion_limit_macro.rs:20:31\n    |\n-20 |     ($t:tt $($tail:tt)*) => { recurse!($($tail)*) }; //~ ERROR recursion limit\n+LL |     ($t:tt $($tail:tt)*) => { recurse!($($tail)*) }; //~ ERROR recursion limit\n    |                               ^^^^^^^^^^^^^^^^^^^\n ...\n-24 |     recurse!(0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9);\n+LL |     recurse!(0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9);\n    |     -------------------------------------------------- in this macro invocation\n    |\n    = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate"}, {"sha": "fcfa80e1c9d8416525d4b74f88f35396d65df271", "filename": "src/test/ui/did_you_mean/trait-object-reference-without-parens-suggestion.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,19 +1,19 @@\n error[E0178]: expected a path on the left-hand side of `+`, not `&Copy`\n   --> $DIR/trait-object-reference-without-parens-suggestion.rs:12:12\n    |\n-12 |     let _: &Copy + 'static; //~ ERROR expected a path\n+LL |     let _: &Copy + 'static; //~ ERROR expected a path\n    |            ^^^^^^^^^^^^^^^ help: try adding parentheses: `&(Copy + 'static)`\n \n error[E0178]: expected a path on the left-hand side of `+`, not `&'static Copy`\n   --> $DIR/trait-object-reference-without-parens-suggestion.rs:14:12\n    |\n-14 |     let _: &'static Copy + 'static; //~ ERROR expected a path\n+LL |     let _: &'static Copy + 'static; //~ ERROR expected a path\n    |            ^^^^^^^^^^^^^^^^^^^^^^^ help: try adding parentheses: `&'static (Copy + 'static)`\n \n error[E0038]: the trait `std::marker::Copy` cannot be made into an object\n   --> $DIR/trait-object-reference-without-parens-suggestion.rs:12:12\n    |\n-12 |     let _: &Copy + 'static; //~ ERROR expected a path\n+LL |     let _: &Copy + 'static; //~ ERROR expected a path\n    |            ^^^^^ the trait `std::marker::Copy` cannot be made into an object\n    |\n    = note: the trait cannot require that `Self : Sized`"}, {"sha": "1facda94cd6e691ad4944e2094e22d43e7db5ee7", "filename": "src/test/ui/discrim-overflow-2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdiscrim-overflow-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdiscrim-overflow-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim-overflow-2.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,63 +1,63 @@\n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow-2.rs:27:9\n    |\n-27 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n    |         ^^^^ overflowed on value after 127i8\n    |\n    = note: explicitly set `OhNo = -128i8` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow-2.rs:36:9\n    |\n-36 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n    |         ^^^^ overflowed on value after 255u8\n    |\n    = note: explicitly set `OhNo = 0u8` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow-2.rs:45:9\n    |\n-45 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n    |         ^^^^ overflowed on value after 32767i16\n    |\n    = note: explicitly set `OhNo = -32768i16` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow-2.rs:54:9\n    |\n-54 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n    |         ^^^^ overflowed on value after 65535u16\n    |\n    = note: explicitly set `OhNo = 0u16` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow-2.rs:63:9\n    |\n-63 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n    |         ^^^^ overflowed on value after 2147483647i32\n    |\n    = note: explicitly set `OhNo = -2147483648i32` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow-2.rs:72:9\n    |\n-72 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n    |         ^^^^ overflowed on value after 4294967295u32\n    |\n    = note: explicitly set `OhNo = 0u32` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow-2.rs:81:9\n    |\n-81 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n    |         ^^^^ overflowed on value after 9223372036854775807i64\n    |\n    = note: explicitly set `OhNo = -9223372036854775808i64` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow-2.rs:90:9\n    |\n-90 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n    |         ^^^^ overflowed on value after 18446744073709551615u64\n    |\n    = note: explicitly set `OhNo = 0u64` if that is desired outcome"}, {"sha": "43c032b12a6c430600a52de5662ff9fffbd4e024", "filename": "src/test/ui/discrim-overflow.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdiscrim-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdiscrim-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim-overflow.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,66 +1,66 @@\n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow.rs:25:9\n    |\n-25 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n    |         ^^^^ overflowed on value after 127i8\n    |\n    = note: explicitly set `OhNo = -128i8` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow.rs:36:9\n    |\n-36 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n    |         ^^^^ overflowed on value after 255u8\n    |\n    = note: explicitly set `OhNo = 0u8` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow.rs:47:9\n    |\n-47 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n    |         ^^^^ overflowed on value after 32767i16\n    |\n    = note: explicitly set `OhNo = -32768i16` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow.rs:58:9\n    |\n-58 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n    |         ^^^^ overflowed on value after 65535u16\n    |\n    = note: explicitly set `OhNo = 0u16` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow.rs:70:9\n    |\n-70 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n    |         ^^^^ overflowed on value after 2147483647i32\n    |\n    = note: explicitly set `OhNo = -2147483648i32` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow.rs:82:9\n    |\n-82 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n    |         ^^^^ overflowed on value after 4294967295u32\n    |\n    = note: explicitly set `OhNo = 0u32` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow.rs:94:9\n    |\n-94 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n    |         ^^^^ overflowed on value after 9223372036854775807i64\n    |\n    = note: explicitly set `OhNo = -9223372036854775808i64` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-   --> $DIR/discrim-overflow.rs:106:9\n-    |\n-106 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-    |         ^^^^ overflowed on value after 18446744073709551615u64\n-    |\n-    = note: explicitly set `OhNo = 0u64` if that is desired outcome\n+  --> $DIR/discrim-overflow.rs:106:9\n+   |\n+LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 18446744073709551615u64\n+   |\n+   = note: explicitly set `OhNo = 0u64` if that is desired outcome\n \n error: aborting due to 8 previous errors\n "}, {"sha": "ceddff4047b19cf2cebe23ec0f383682818f7c21", "filename": "src/test/ui/double-import.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdouble-import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdouble-import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdouble-import.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,15 +1,15 @@\n error[E0252]: the name `foo` is defined multiple times\n   --> $DIR/double-import.rs:23:5\n    |\n-22 | use sub1::foo;\n+LL | use sub1::foo;\n    |     --------- previous import of the value `foo` here\n-23 | use sub2::foo; //~ ERROR the name `foo` is defined multiple times\n+LL | use sub2::foo; //~ ERROR the name `foo` is defined multiple times\n    |     ^^^^^^^^^ `foo` reimported here\n    |\n    = note: `foo` must be defined only once in the value namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-23 | use sub2::foo as other_foo; //~ ERROR the name `foo` is defined multiple times\n+LL | use sub2::foo as other_foo; //~ ERROR the name `foo` is defined multiple times\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "454ee6afe24b9da017afd0cc0b07015834a1cd8f", "filename": "src/test/ui/dropck/dropck-eyepatch-extern-crate.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,43 +1,43 @@\n error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch-extern-crate.rs:39:20\n    |\n-39 |     dt = Dt(\"dt\", &c);\n+LL |     dt = Dt(\"dt\", &c);\n    |                    ^ borrowed value does not live long enough\n ...\n-59 | }\n+LL | }\n    | - `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch-extern-crate.rs:41:20\n    |\n-41 |     dr = Dr(\"dr\", &c);\n+LL |     dr = Dr(\"dr\", &c);\n    |                    ^ borrowed value does not live long enough\n ...\n-59 | }\n+LL | }\n    | - `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch-extern-crate.rs:49:29\n    |\n-49 |     pt = Pt(\"pt\", &c_long, &c);\n+LL |     pt = Pt(\"pt\", &c_long, &c);\n    |                             ^ borrowed value does not live long enough\n ...\n-59 | }\n+LL | }\n    | - `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch-extern-crate.rs:51:29\n    |\n-51 |     pr = Pr(\"pr\", &c_long, &c);\n+LL |     pr = Pr(\"pr\", &c_long, &c);\n    |                             ^ borrowed value does not live long enough\n ...\n-59 | }\n+LL | }\n    | - `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created"}, {"sha": "d5b4e85ce5e4b66c1a8dfe6f90993a97f99dc5b9", "filename": "src/test/ui/dropck/dropck-eyepatch-implies-unsafe-impl.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,23 +1,23 @@\n error[E0569]: requires an `unsafe impl` declaration due to `#[may_dangle]` attribute\n   --> $DIR/dropck-eyepatch-implies-unsafe-impl.rs:32:1\n    |\n-32 | / impl<#[may_dangle] A, B: fmt::Debug> Drop for Pt<A, B> {\n-33 | |     //~^ ERROR requires an `unsafe impl` declaration due to `#[may_dangle]` attribute\n-34 | |\n-35 | |     // (unsafe to access self.1  due to #[may_dangle] on A)\n-36 | |     fn drop(&mut self) { println!(\"drop {} {:?}\", self.0, self.2); }\n-37 | | }\n+LL | / impl<#[may_dangle] A, B: fmt::Debug> Drop for Pt<A, B> {\n+LL | |     //~^ ERROR requires an `unsafe impl` declaration due to `#[may_dangle]` attribute\n+LL | |\n+LL | |     // (unsafe to access self.1  due to #[may_dangle] on A)\n+LL | |     fn drop(&mut self) { println!(\"drop {} {:?}\", self.0, self.2); }\n+LL | | }\n    | |_^\n \n error[E0569]: requires an `unsafe impl` declaration due to `#[may_dangle]` attribute\n   --> $DIR/dropck-eyepatch-implies-unsafe-impl.rs:38:1\n    |\n-38 | / impl<#[may_dangle] 'a, 'b, B: fmt::Debug> Drop for Pr<'a, 'b, B> {\n-39 | |     //~^ ERROR requires an `unsafe impl` declaration due to `#[may_dangle]` attribute\n-40 | |\n-41 | |     // (unsafe to access self.1 due to #[may_dangle] on 'a)\n-42 | |     fn drop(&mut self) { println!(\"drop {} {:?}\", self.0, self.2); }\n-43 | | }\n+LL | / impl<#[may_dangle] 'a, 'b, B: fmt::Debug> Drop for Pr<'a, 'b, B> {\n+LL | |     //~^ ERROR requires an `unsafe impl` declaration due to `#[may_dangle]` attribute\n+LL | |\n+LL | |     // (unsafe to access self.1 due to #[may_dangle] on 'a)\n+LL | |     fn drop(&mut self) { println!(\"drop {} {:?}\", self.0, self.2); }\n+LL | | }\n    | |_^\n \n error: aborting due to 2 previous errors"}, {"sha": "6fac358e21af6ae6c8e666d9b563a0fed7bf7420", "filename": "src/test/ui/dropck/dropck-eyepatch-reorder.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,43 +1,43 @@\n error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch-reorder.rs:57:20\n    |\n-57 |     dt = Dt(\"dt\", &c);\n+LL |     dt = Dt(\"dt\", &c);\n    |                    ^ borrowed value does not live long enough\n ...\n-77 | }\n+LL | }\n    | - `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch-reorder.rs:59:20\n    |\n-59 |     dr = Dr(\"dr\", &c);\n+LL |     dr = Dr(\"dr\", &c);\n    |                    ^ borrowed value does not live long enough\n ...\n-77 | }\n+LL | }\n    | - `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch-reorder.rs:67:29\n    |\n-67 |     pt = Pt(\"pt\", &c_long, &c);\n+LL |     pt = Pt(\"pt\", &c_long, &c);\n    |                             ^ borrowed value does not live long enough\n ...\n-77 | }\n+LL | }\n    | - `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch-reorder.rs:69:29\n    |\n-69 |     pr = Pr(\"pr\", &c_long, &c);\n+LL |     pr = Pr(\"pr\", &c_long, &c);\n    |                             ^ borrowed value does not live long enough\n ...\n-77 | }\n+LL | }\n    | - `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created"}, {"sha": "d8cc5bf2373092feadb1fcd9b11ac986474b5eb5", "filename": "src/test/ui/dropck/dropck-eyepatch.stderr", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,46 +1,46 @@\n error[E0597]: `c` does not live long enough\n-   --> $DIR/dropck-eyepatch.rs:80:20\n-    |\n-80  |     dt = Dt(\"dt\", &c);\n-    |                    ^ borrowed value does not live long enough\n+  --> $DIR/dropck-eyepatch.rs:80:20\n+   |\n+LL |     dt = Dt(\"dt\", &c);\n+   |                    ^ borrowed value does not live long enough\n ...\n-100 | }\n-    | - `c` dropped here while still borrowed\n-    |\n-    = note: values in a scope are dropped in the opposite order they are created\n+LL | }\n+   | - `c` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n-   --> $DIR/dropck-eyepatch.rs:82:20\n-    |\n-82  |     dr = Dr(\"dr\", &c);\n-    |                    ^ borrowed value does not live long enough\n+  --> $DIR/dropck-eyepatch.rs:82:20\n+   |\n+LL |     dr = Dr(\"dr\", &c);\n+   |                    ^ borrowed value does not live long enough\n ...\n-100 | }\n-    | - `c` dropped here while still borrowed\n-    |\n-    = note: values in a scope are dropped in the opposite order they are created\n+LL | }\n+   | - `c` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n-   --> $DIR/dropck-eyepatch.rs:90:29\n-    |\n-90  |     pt = Pt(\"pt\", &c_long, &c);\n-    |                             ^ borrowed value does not live long enough\n+  --> $DIR/dropck-eyepatch.rs:90:29\n+   |\n+LL |     pt = Pt(\"pt\", &c_long, &c);\n+   |                             ^ borrowed value does not live long enough\n ...\n-100 | }\n-    | - `c` dropped here while still borrowed\n-    |\n-    = note: values in a scope are dropped in the opposite order they are created\n+LL | }\n+   | - `c` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n-   --> $DIR/dropck-eyepatch.rs:92:29\n-    |\n-92  |     pr = Pr(\"pr\", &c_long, &c);\n-    |                             ^ borrowed value does not live long enough\n+  --> $DIR/dropck-eyepatch.rs:92:29\n+   |\n+LL |     pr = Pr(\"pr\", &c_long, &c);\n+   |                             ^ borrowed value does not live long enough\n ...\n-100 | }\n-    | - `c` dropped here while still borrowed\n-    |\n-    = note: values in a scope are dropped in the opposite order they are created\n+LL | }\n+   | - `c` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n \n error: aborting due to 4 previous errors\n "}, {"sha": "6d3bb669df975bb84292f1953118bcaa4e1c019c", "filename": "src/test/ui/duplicate-check-macro-exports.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fduplicate-check-macro-exports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fduplicate-check-macro-exports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate-check-macro-exports.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,13 +1,13 @@\n error: a macro named `panic` has already been exported\n   --> $DIR/duplicate-check-macro-exports.rs:16:1\n    |\n-16 | macro_rules! panic { () => {} } //~ ERROR a macro named `panic` has already been exported\n+LL | macro_rules! panic { () => {} } //~ ERROR a macro named `panic` has already been exported\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `panic` already exported\n    |\n note: previous macro export here\n   --> $DIR/duplicate-check-macro-exports.rs:13:9\n    |\n-13 | pub use std::panic;\n+LL | pub use std::panic;\n    |         ^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "b268c755404526631ce214a7ce3ac28167ef1de2", "filename": "src/test/ui/e0119/complex-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fe0119%2Fcomplex-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fe0119%2Fcomplex-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fcomplex-impl.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0119]: conflicting implementations of trait `complex_impl_support::External` for type `(Q, complex_impl_support::M<'_, '_, '_, std::boxed::Box<_>, _, _>)`:\n   --> $DIR/complex-impl.rs:19:1\n    |\n-19 | impl<R> External for (Q, R) {} //~ ERROR must be used\n+LL | impl<R> External for (Q, R) {} //~ ERROR must be used\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `complex_impl_support`:\n@@ -11,7 +11,7 @@ error[E0119]: conflicting implementations of trait `complex_impl_support::Extern\n error[E0210]: type parameter `R` must be used as the type parameter for some local type (e.g. `MyStruct<T>`); only traits defined in the current crate can be implemented for a type parameter\n   --> $DIR/complex-impl.rs:19:1\n    |\n-19 | impl<R> External for (Q, R) {} //~ ERROR must be used\n+LL | impl<R> External for (Q, R) {} //~ ERROR must be used\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "ff17643f121063f09492ebce333f90fd1798df69", "filename": "src/test/ui/e0119/conflict-with-std.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0119]: conflicting implementations of trait `std::convert::AsRef<Q>` for type `std::boxed::Box<Q>`:\n   --> $DIR/conflict-with-std.rs:17:1\n    |\n-17 | impl AsRef<Q> for Box<Q> { //~ ERROR conflicting implementations\n+LL | impl AsRef<Q> for Box<Q> { //~ ERROR conflicting implementations\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `alloc`:\n@@ -11,7 +11,7 @@ error[E0119]: conflicting implementations of trait `std::convert::AsRef<Q>` for\n error[E0119]: conflicting implementations of trait `std::convert::From<S>` for type `S`:\n   --> $DIR/conflict-with-std.rs:24:1\n    |\n-24 | impl From<S> for S { //~ ERROR conflicting implementations\n+LL | impl From<S> for S { //~ ERROR conflicting implementations\n    | ^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `core`:\n@@ -20,7 +20,7 @@ error[E0119]: conflicting implementations of trait `std::convert::From<S>` for t\n error[E0119]: conflicting implementations of trait `std::convert::TryFrom<X>` for type `X`:\n   --> $DIR/conflict-with-std.rs:31:1\n    |\n-31 | impl TryFrom<X> for X { //~ ERROR conflicting implementations\n+LL | impl TryFrom<X> for X { //~ ERROR conflicting implementations\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `core`:"}, {"sha": "9ad866253446d16d2bebeafcc5111779f5186bc4", "filename": "src/test/ui/e0119/issue-23563.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fe0119%2Fissue-23563.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fe0119%2Fissue-23563.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fissue-23563.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0119]: conflicting implementations of trait `a::LolFrom<&[_]>` for type `LocalType<_>`:\n   --> $DIR/issue-23563.rs:23:1\n    |\n-23 | impl<'a, T> LolFrom<&'a [T]> for LocalType<T> { //~ ERROR conflicting implementations of trait\n+LL | impl<'a, T> LolFrom<&'a [T]> for LocalType<T> { //~ ERROR conflicting implementations of trait\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `issue_23563_a`:"}, {"sha": "4f4a9e97d6bb6d330d35da3b954764507fcdb467", "filename": "src/test/ui/e0119/issue-27403.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fe0119%2Fissue-27403.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fe0119%2Fissue-27403.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fissue-27403.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0119]: conflicting implementations of trait `std::convert::Into<_>` for type `GenX<_>`:\n   --> $DIR/issue-27403.rs:15:1\n    |\n-15 | impl<S> Into<S> for GenX<S> { //~ ERROR conflicting implementations\n+LL | impl<S> Into<S> for GenX<S> { //~ ERROR conflicting implementations\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `core`:"}, {"sha": "b1ec1111ede91698ce57611d3145dab97fd8bc5e", "filename": "src/test/ui/e0119/issue-28981.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0119]: conflicting implementations of trait `std::ops::Deref` for type `&_`:\n   --> $DIR/issue-28981.rs:15:1\n    |\n-15 | impl<Foo> Deref for Foo { } //~ ERROR must be used\n+LL | impl<Foo> Deref for Foo { } //~ ERROR must be used\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `core`:\n@@ -11,7 +11,7 @@ error[E0119]: conflicting implementations of trait `std::ops::Deref` for type `&\n error[E0210]: type parameter `Foo` must be used as the type parameter for some local type (e.g. `MyStruct<T>`); only traits defined in the current crate can be implemented for a type parameter\n   --> $DIR/issue-28981.rs:15:1\n    |\n-15 | impl<Foo> Deref for Foo { } //~ ERROR must be used\n+LL | impl<Foo> Deref for Foo { } //~ ERROR must be used\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "8be27adc4a2fa77513d55046ed9938b239381540", "filename": "src/test/ui/e0119/so-37347311.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fe0119%2Fso-37347311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fe0119%2Fso-37347311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fso-37347311.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0119]: conflicting implementations of trait `std::convert::From<MyError<_>>` for type `MyError<_>`:\n   --> $DIR/so-37347311.rs:21:1\n    |\n-21 | impl<S: Storage> From<S::Error> for MyError<S> { //~ ERROR conflicting implementations\n+LL | impl<S: Storage> From<S::Error> for MyError<S> { //~ ERROR conflicting implementations\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `core`:"}, {"sha": "e64f383f91b9de18640d7e443e48617c014a8f73", "filename": "src/test/ui/empty-struct-unit-expr.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fempty-struct-unit-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fempty-struct-unit-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty-struct-unit-expr.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,39 +1,39 @@\n error[E0618]: expected function, found `Empty2`\n   --> $DIR/empty-struct-unit-expr.rs:25:14\n    |\n-18 | struct Empty2;\n+LL | struct Empty2;\n    | -------------- `Empty2` defined here\n ...\n-25 |     let e2 = Empty2(); //~ ERROR expected function, found `Empty2`\n+LL |     let e2 = Empty2(); //~ ERROR expected function, found `Empty2`\n    |              ^^^^^^^^ not a function\n \n error[E0618]: expected function, found enum variant `E::Empty4`\n   --> $DIR/empty-struct-unit-expr.rs:26:14\n    |\n-21 |     Empty4\n+LL |     Empty4\n    |     ------ `E::Empty4` defined here\n ...\n-26 |     let e4 = E::Empty4();\n+LL |     let e4 = E::Empty4();\n    |              ^^^^^^^^^^^ not a function\n help: `E::Empty4` is a unit variant, you need to write it without the parenthesis\n    |\n-26 |     let e4 = E::Empty4;\n+LL |     let e4 = E::Empty4;\n    |              ^^^^^^^^^\n \n error[E0618]: expected function, found `empty_struct::XEmpty2`\n   --> $DIR/empty-struct-unit-expr.rs:28:15\n    |\n-28 |     let xe2 = XEmpty2(); //~ ERROR expected function, found `empty_struct::XEmpty2`\n+LL |     let xe2 = XEmpty2(); //~ ERROR expected function, found `empty_struct::XEmpty2`\n    |               ^^^^^^^^^ not a function\n \n error[E0618]: expected function, found enum variant `XE::XEmpty4`\n   --> $DIR/empty-struct-unit-expr.rs:29:15\n    |\n-29 |     let xe4 = XE::XEmpty4();\n+LL |     let xe4 = XE::XEmpty4();\n    |               ^^^^^^^^^^^^^ not a function\n help: `XE::XEmpty4` is a unit variant, you need to write it without the parenthesis\n    |\n-29 |     let xe4 = XE::XEmpty4;\n+LL |     let xe4 = XE::XEmpty4;\n    |               ^^^^^^^^^^^\n \n error: aborting due to 4 previous errors"}, {"sha": "86f7ee5bb0e534fb95129ac96ee8cda6ab3d5e1d", "filename": "src/test/ui/enum-and-module-in-same-scope.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fenum-and-module-in-same-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fenum-and-module-in-same-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-and-module-in-same-scope.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0428]: the name `Foo` is defined multiple times\n   --> $DIR/enum-and-module-in-same-scope.rs:15:1\n    |\n-11 | enum Foo {\n+LL | enum Foo {\n    | -------- previous definition of the type `Foo` here\n ...\n-15 | mod Foo { //~ ERROR the name `Foo` is defined multiple times\n+LL | mod Foo { //~ ERROR the name `Foo` is defined multiple times\n    | ^^^^^^^ `Foo` redefined here\n    |\n    = note: `Foo` must be defined only once in the type namespace of this module"}, {"sha": "f6df65b1d9da781f489dbca0d7b486b3d365027e", "filename": "src/test/ui/enum-size-variance.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fenum-size-variance.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Fenum-size-variance.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-size-variance.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,12 +1,12 @@\n warning: enum variant is more than three times larger (32 bytes) than the next largest\n   --> $DIR/enum-size-variance.rs:28:5\n    |\n-28 |     L(i64, i64, i64, i64), //~ WARNING three times larger\n+LL |     L(i64, i64, i64, i64), //~ WARNING three times larger\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/enum-size-variance.rs:13:9\n    |\n-13 | #![warn(variant_size_differences)]\n+LL | #![warn(variant_size_differences)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n "}, {"sha": "af67a438f52fa1c89d7d0b00a6abc99fd9f1aa61", "filename": "src/test/ui/error-codes/E0001.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0001.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0001.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0001.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,13 +1,13 @@\n error: unreachable pattern\n   --> $DIR/E0001.rs:18:9\n    |\n-18 |         _ => {/* ... */} //~ ERROR unreachable pattern\n+LL |         _ => {/* ... */} //~ ERROR unreachable pattern\n    |         ^\n    |\n note: lint level defined here\n   --> $DIR/E0001.rs:11:9\n    |\n-11 | #![deny(unreachable_patterns)]\n+LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "c3412e73599b357800e0602ff4afa94e42a56a06", "filename": "src/test/ui/error-codes/E0004-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,13 +1,13 @@\n error[E0004]: non-exhaustive patterns: type std::option::Option<i32> is non-empty\n   --> $DIR/E0004-2.rs:14:11\n    |\n-14 |     match x { } //~ ERROR E0004\n+LL |     match x { } //~ ERROR E0004\n    |           ^\n    |\n help: Please ensure that all possible cases are being handled; possibly adding wildcards or more match arms.\n   --> $DIR/E0004-2.rs:14:11\n    |\n-14 |     match x { } //~ ERROR E0004\n+LL |     match x { } //~ ERROR E0004\n    |           ^\n \n error: aborting due to previous error"}, {"sha": "56351f80f9d256d61b8b55d3405758f7139f63e0", "filename": "src/test/ui/error-codes/E0004.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0004.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0004.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0004]: non-exhaustive patterns: `HastaLaVistaBaby` not covered\n   --> $DIR/E0004.rs:19:11\n    |\n-19 |     match x { //~ ERROR E0004\n+LL |     match x { //~ ERROR E0004\n    |           ^ pattern `HastaLaVistaBaby` not covered\n \n error: aborting due to previous error"}, {"sha": "d02817a66755d11eccfec9241da30f432561951a", "filename": "src/test/ui/error-codes/E0005.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0005]: refutable pattern in local binding: `None` not covered\n   --> $DIR/E0005.rs:13:9\n    |\n-13 |     let Some(y) = x; //~ ERROR E0005\n+LL |     let Some(y) = x; //~ ERROR E0005\n    |         ^^^^^^^ pattern `None` not covered\n \n error: aborting due to previous error"}, {"sha": "c5cf140bab507709d14eb68feaced422c7a82ca9", "filename": "src/test/ui/error-codes/E0007.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0007.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0007.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0007.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,13 +1,13 @@\n error[E0007]: cannot bind by-move with sub-bindings\n   --> $DIR/E0007.rs:14:9\n    |\n-14 |         op_string @ Some(s) => {},\n+LL |         op_string @ Some(s) => {},\n    |         ^^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0303]: pattern bindings are not allowed after an `@`\n   --> $DIR/E0007.rs:14:26\n    |\n-14 |         op_string @ Some(s) => {},\n+LL |         op_string @ Some(s) => {},\n    |                          ^ not allowed after `@`\n \n error: aborting due to 2 previous errors"}, {"sha": "cdf6eff0fabb85fd81b100acc02c754e0c618f1b", "filename": "src/test/ui/error-codes/E0008.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0008.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0008.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0008.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0008]: cannot bind by-move into a pattern guard\n   --> $DIR/E0008.rs:13:14\n    |\n-13 |         Some(s) if s.len() == 0 => {},\n+LL |         Some(s) if s.len() == 0 => {},\n    |              ^ moves value into pattern guard\n \n error: aborting due to previous error"}, {"sha": "ac6c2ace1f8d28e54c65063a35be0bc767a880b4", "filename": "src/test/ui/error-codes/E0009.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0009.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0009.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0009.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0009]: cannot bind by-move and by-ref in the same pattern\n   --> $DIR/E0009.rs:15:15\n    |\n-15 |         Some((y, ref z)) => {},\n+LL |         Some((y, ref z)) => {},\n    |               ^  ----- both by-ref and by-move used\n    |               |\n    |               by-move pattern here"}, {"sha": "0d97a56b1b429105d52f421a4d39cfe5f4e7b182", "filename": "src/test/ui/error-codes/E0010-teach.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0010]: allocations are not allowed in constants\n   --> $DIR/E0010-teach.rs:16:24\n    |\n-16 | const CON : Box<i32> = box 0; //~ ERROR E0010\n+LL | const CON : Box<i32> = box 0; //~ ERROR E0010\n    |                        ^^^^^ allocation not allowed in constants\n    |\n    = note: The value of statics and constants must be known at compile time, and they live for the entire lifetime of a program. Creating a boxed value allocates memory on the heap at runtime, and therefore cannot be done at compile time."}, {"sha": "0d8b0800b0893fb6acdef14840d1f047eb90a21a", "filename": "src/test/ui/error-codes/E0010.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0010.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0010]: allocations are not allowed in constants\n   --> $DIR/E0010.rs:14:24\n    |\n-14 | const CON : Box<i32> = box 0; //~ ERROR E0010\n+LL | const CON : Box<i32> = box 0; //~ ERROR E0010\n    |                        ^^^^^ allocation not allowed in constants\n \n error: aborting due to previous error"}, {"sha": "540d76a6d450bc49a355599c2fc04e39ea3ea214", "filename": "src/test/ui/error-codes/E0017.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,25 +1,25 @@\n error[E0017]: references in constants may only refer to immutable values\n   --> $DIR/E0017.rs:14:30\n    |\n-14 | const CR: &'static mut i32 = &mut C; //~ ERROR E0017\n+LL | const CR: &'static mut i32 = &mut C; //~ ERROR E0017\n    |                              ^^^^^^ constants require immutable values\n \n error[E0017]: references in statics may only refer to immutable values\n   --> $DIR/E0017.rs:15:39\n    |\n-15 | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n+LL | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n    |                                       ^^^^^^ statics require immutable values\n \n error[E0596]: cannot borrow immutable static item as mutable\n   --> $DIR/E0017.rs:15:44\n    |\n-15 | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n+LL | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n    |                                            ^\n \n error[E0017]: references in statics may only refer to immutable values\n   --> $DIR/E0017.rs:17:38\n    |\n-17 | static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0017\n+LL | static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0017\n    |                                      ^^^^^^ statics require immutable values\n \n error: aborting due to 4 previous errors"}, {"sha": "2f69db3e7ef15aa934e62d8ae3c22ee39c674549", "filename": "src/test/ui/error-codes/E0023.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,19 +1,19 @@\n error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 2 fields\n   --> $DIR/E0023.rs:20:9\n    |\n-20 |         Fruit::Apple(a) => {}, //~ ERROR E0023\n+LL |         Fruit::Apple(a) => {}, //~ ERROR E0023\n    |         ^^^^^^^^^^^^^^^ expected 2 fields, found 1\n \n error[E0023]: this pattern has 3 fields, but the corresponding tuple variant has 2 fields\n   --> $DIR/E0023.rs:21:9\n    |\n-21 |         Fruit::Apple(a, b, c) => {}, //~ ERROR E0023\n+LL |         Fruit::Apple(a, b, c) => {}, //~ ERROR E0023\n    |         ^^^^^^^^^^^^^^^^^^^^^ expected 2 fields, found 3\n \n error[E0023]: this pattern has 2 fields, but the corresponding tuple variant has 1 field\n   --> $DIR/E0023.rs:22:9\n    |\n-22 |         Fruit::Pear(1, 2) => {}, //~ ERROR E0023\n+LL |         Fruit::Pear(1, 2) => {}, //~ ERROR E0023\n    |         ^^^^^^^^^^^^^^^^^ expected 1 field, found 2\n \n error: aborting due to 3 previous errors"}, {"sha": "2e32ccab0dd3502541efd416efbd85c1679a288e", "filename": "src/test/ui/error-codes/E0025.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0025.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0025.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0025.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0025]: field `a` bound multiple times in the pattern\n   --> $DIR/E0025.rs:18:21\n    |\n-18 |     let Foo { a: x, a: y, b: 0 } = x;\n+LL |     let Foo { a: x, a: y, b: 0 } = x;\n    |               ----  ^^^^ multiple uses of `a` in pattern\n    |               |\n    |               first use of `a`"}, {"sha": "e7ab3fbf307fb4aa168f999a45e1a2adeeae8825", "filename": "src/test/ui/error-codes/E0026-teach.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0026-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0026-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0026-teach.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0026]: struct `Thing` does not have a field named `z`\n   --> $DIR/E0026-teach.rs:21:23\n    |\n-21 |         Thing { x, y, z } => {}\n+LL |         Thing { x, y, z } => {}\n    |                       ^ struct `Thing` does not have field `z`\n    |\n    = note: This error indicates that a struct pattern attempted to extract a non-existent field from a struct. Struct fields are identified by the name used before the colon : so struct patterns should resemble the declaration of the struct type being matched."}, {"sha": "9415da2a819f96e44268418ef23788a9ca76cf7e", "filename": "src/test/ui/error-codes/E0026.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0026.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0026.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0026.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0026]: struct `Thing` does not have a field named `z`\n   --> $DIR/E0026.rs:19:23\n    |\n-19 |         Thing { x, y, z } => {}\n+LL |         Thing { x, y, z } => {}\n    |                       ^ struct `Thing` does not have field `z`\n \n error: aborting due to previous error"}, {"sha": "d9c6a865dad81e2b7448c500b5c9265864c78ea5", "filename": "src/test/ui/error-codes/E0027-teach.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0027-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0027-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0027-teach.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0027]: pattern does not mention field `name`\n   --> $DIR/E0027-teach.rs:22:9\n    |\n-22 |         Dog { age: x } => {}\n+LL |         Dog { age: x } => {}\n    |         ^^^^^^^^^^^^^^ missing field `name`\n    |\n    = note: This error indicates that a pattern for a struct fails to specify a sub-pattern for every one of the struct's fields. Ensure that each field from the struct's definition is mentioned in the pattern, or use `..` to ignore unwanted fields."}, {"sha": "6959324ccdec0115af463b82586e80dcdd672219", "filename": "src/test/ui/error-codes/E0027.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0027.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0027.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0027.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0027]: pattern does not mention field `name`\n   --> $DIR/E0027.rs:20:9\n    |\n-20 |         Dog { age: x } => {}\n+LL |         Dog { age: x } => {}\n    |         ^^^^^^^^^^^^^^ missing field `name`\n \n error: aborting due to previous error"}, {"sha": "d4e9a1c304004320f1acc055766554d45e464508", "filename": "src/test/ui/error-codes/E0029-teach.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,15 +1,15 @@\n error[E0658]: non-reference pattern used to match a reference (see issue #42640)\n   --> $DIR/E0029-teach.rs:17:9\n    |\n-17 |         \"hello\" ... \"world\" => {}\n+LL |         \"hello\" ... \"world\" => {}\n    |         ^^^^^^^^^^^^^^^^^^^ help: consider using a reference: `&\"hello\" ... \"world\"`\n    |\n    = help: add #![feature(match_default_bindings)] to the crate attributes to enable\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/E0029-teach.rs:17:9\n    |\n-17 |         \"hello\" ... \"world\" => {}\n+LL |         \"hello\" ... \"world\" => {}\n    |         ^^^^^^^^^^^^^^^^^^^ ranges require char or numeric types\n    |\n    = note: start type: &'static str"}, {"sha": "ab1fa321dbde3d4989ff27abee760808712afdd1", "filename": "src/test/ui/error-codes/E0029.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0029.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0029.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0029.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,15 +1,15 @@\n error[E0658]: non-reference pattern used to match a reference (see issue #42640)\n   --> $DIR/E0029.rs:15:9\n    |\n-15 |         \"hello\" ... \"world\" => {}\n+LL |         \"hello\" ... \"world\" => {}\n    |         ^^^^^^^^^^^^^^^^^^^ help: consider using a reference: `&\"hello\" ... \"world\"`\n    |\n    = help: add #![feature(match_default_bindings)] to the crate attributes to enable\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/E0029.rs:15:9\n    |\n-15 |         \"hello\" ... \"world\" => {}\n+LL |         \"hello\" ... \"world\" => {}\n    |         ^^^^^^^^^^^^^^^^^^^ ranges require char or numeric types\n    |\n    = note: start type: &'static str"}, {"sha": "e23bf89be29bf6bb267ae6383e654c79bbeb3494", "filename": "src/test/ui/error-codes/E0030-teach.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0030-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0030-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0030-teach.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0030]: lower range bound must be less than or equal to upper\n   --> $DIR/E0030-teach.rs:15:9\n    |\n-15 |         1000 ... 5 => {}\n+LL |         1000 ... 5 => {}\n    |         ^^^^ lower bound larger than upper bound\n    |\n    = note: When matching against a range, the compiler verifies that the range is non-empty. Range patterns include both end-points, so this is equivalent to requiring the start of the range to be less than or equal to the end of the range."}, {"sha": "9d4352888cb865353439dc57640f03daaf7f7165", "filename": "src/test/ui/error-codes/E0030.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0030.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0030.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0030.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0030]: lower range bound must be less than or equal to upper\n   --> $DIR/E0030.rs:14:9\n    |\n-14 |         1000 ... 5 => {}\n+LL |         1000 ... 5 => {}\n    |         ^^^^ lower bound larger than upper bound\n \n error: aborting due to previous error"}, {"sha": "9f2a9595b390c87cf524c9fa41bdfb99af7a5b03", "filename": "src/test/ui/error-codes/E0033-teach.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,21 +1,21 @@\n error[E0423]: expected value, found trait `SomeTrait`\n   --> $DIR/E0033-teach.rs:18:33\n    |\n-18 |     let trait_obj: &SomeTrait = SomeTrait;\n+LL |     let trait_obj: &SomeTrait = SomeTrait;\n    |                                 ^^^^^^^^^ not a value\n \n error[E0038]: the trait `SomeTrait` cannot be made into an object\n   --> $DIR/E0033-teach.rs:18:20\n    |\n-18 |     let trait_obj: &SomeTrait = SomeTrait;\n+LL |     let trait_obj: &SomeTrait = SomeTrait;\n    |                    ^^^^^^^^^^ the trait `SomeTrait` cannot be made into an object\n    |\n    = note: method `foo` has no receiver\n \n error[E0033]: type `&SomeTrait` cannot be dereferenced\n   --> $DIR/E0033-teach.rs:23:9\n    |\n-23 |     let &invalid = trait_obj;\n+LL |     let &invalid = trait_obj;\n    |         ^^^^^^^^ type `&SomeTrait` cannot be dereferenced\n    |\n    = note: This error indicates that a pointer to a trait type cannot be implicitly dereferenced by a pattern. Every trait defines a type, but because the size of trait implementors isn't fixed, this type has no compile-time size. Therefore, all accesses to trait types must be through pointers. If you encounter this error you should try to avoid dereferencing the pointer."}, {"sha": "a0d73c074f82c9e5b2a1e49c5cf243e6b412e569", "filename": "src/test/ui/error-codes/E0033.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,21 +1,21 @@\n error[E0423]: expected value, found trait `SomeTrait`\n   --> $DIR/E0033.rs:16:33\n    |\n-16 |     let trait_obj: &SomeTrait = SomeTrait;\n+LL |     let trait_obj: &SomeTrait = SomeTrait;\n    |                                 ^^^^^^^^^ not a value\n \n error[E0038]: the trait `SomeTrait` cannot be made into an object\n   --> $DIR/E0033.rs:16:20\n    |\n-16 |     let trait_obj: &SomeTrait = SomeTrait;\n+LL |     let trait_obj: &SomeTrait = SomeTrait;\n    |                    ^^^^^^^^^^ the trait `SomeTrait` cannot be made into an object\n    |\n    = note: method `foo` has no receiver\n \n error[E0033]: type `&SomeTrait` cannot be dereferenced\n   --> $DIR/E0033.rs:21:9\n    |\n-21 |     let &invalid = trait_obj;\n+LL |     let &invalid = trait_obj;\n    |         ^^^^^^^^ type `&SomeTrait` cannot be dereferenced\n \n error: aborting due to 3 previous errors"}, {"sha": "f457dfded7cd4dd2f5230e9da24e218b62137ca6", "filename": "src/test/ui/error-codes/E0034.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0034.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0034.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0034.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,18 +1,18 @@\n error[E0034]: multiple applicable items in scope\n   --> $DIR/E0034.rs:30:5\n    |\n-30 |     Test::foo() //~ ERROR multiple applicable items in scope\n+LL |     Test::foo() //~ ERROR multiple applicable items in scope\n    |     ^^^^^^^^^ multiple `foo` found\n    |\n note: candidate #1 is defined in an impl of the trait `Trait1` for the type `Test`\n   --> $DIR/E0034.rs:22:5\n    |\n-22 |     fn foo() {}\n+LL |     fn foo() {}\n    |     ^^^^^^^^\n note: candidate #2 is defined in an impl of the trait `Trait2` for the type `Test`\n   --> $DIR/E0034.rs:26:5\n    |\n-26 |     fn foo() {}\n+LL |     fn foo() {}\n    |     ^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "b3f3ea57a346780793afbc874f4ea4142cfe6299", "filename": "src/test/ui/error-codes/E0038.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/E0038.rs:15:1\n    |\n-15 | fn call_foo(x: Box<Trait>) {\n+LL | fn call_foo(x: Box<Trait>) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n    |\n    = note: method `foo` references the `Self` type in its arguments or return type"}, {"sha": "a2f6174e91854bf25b974767acba654bfae27b04", "filename": "src/test/ui/error-codes/E0040.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0040.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0040.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0040.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0040]: explicit use of destructor method\n   --> $DIR/E0040.rs:23:7\n    |\n-23 |     x.drop();\n+LL |     x.drop();\n    |       ^^^^ explicit destructor calls not allowed\n \n error: aborting due to previous error"}, {"sha": "b823f3717b3561ce6b807c5fe7d1abb892594592", "filename": "src/test/ui/error-codes/E0044.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0044.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0044.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0044.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,13 +1,13 @@\n error[E0044]: foreign items may not have type parameters\n   --> $DIR/E0044.rs:11:10\n    |\n-11 | extern { fn some_func<T>(x: T); } //~ ERROR E0044\n+LL | extern { fn some_func<T>(x: T); } //~ ERROR E0044\n    |          ^^^^^^^^^^^^^^^^^^^^^^\n    |\n help: consider using specialization instead of type parameters\n   --> $DIR/E0044.rs:11:10\n    |\n-11 | extern { fn some_func<T>(x: T); } //~ ERROR E0044\n+LL | extern { fn some_func<T>(x: T); } //~ ERROR E0044\n    |          ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "e79965aeff7811a14c128ba2fd274621c8664975", "filename": "src/test/ui/error-codes/E0045.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0045.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0045.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0045.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0045]: variadic function must have C or cdecl calling convention\n   --> $DIR/E0045.rs:11:17\n    |\n-11 | extern \"Rust\" { fn foo(x: u8, ...); }   //~ ERROR E0045\n+LL | extern \"Rust\" { fn foo(x: u8, ...); }   //~ ERROR E0045\n    |                 ^^^^^^^^^^^^^^^^^^^ variadics require C or cdecl calling convention\n \n error: aborting due to previous error"}, {"sha": "cdc936df2704c66f59d85f1fbbb55ddd3929a396", "filename": "src/test/ui/error-codes/E0049.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0049.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0049.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0049.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0049]: method `foo` has 0 type parameters but its trait declaration has 1 type parameter\n   --> $DIR/E0049.rs:18:5\n    |\n-12 |     fn foo<T: Default>(x: T) -> Self;\n+LL |     fn foo<T: Default>(x: T) -> Self;\n    |     --------------------------------- expected 1 type parameter\n ...\n-18 |     fn foo(x: bool) -> Self { Bar } //~ ERROR E0049\n+LL |     fn foo(x: bool) -> Self { Bar } //~ ERROR E0049\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ found 0 type parameters\n \n error: aborting due to previous error"}, {"sha": "d5d1677f43f4444c38ae27d1be1ea1fa1e561783", "filename": "src/test/ui/error-codes/E0050.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0050.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0050.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0050.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,28 +1,28 @@\n error[E0050]: method `foo` has 1 parameter but the declaration in trait `Foo::foo` has 2\n   --> $DIR/E0050.rs:20:12\n    |\n-12 |     fn foo(&self, x: u8) -> bool;\n+LL |     fn foo(&self, x: u8) -> bool;\n    |                      -- trait requires 2 parameters\n ...\n-20 |     fn foo(&self) -> bool { true } //~ ERROR E0050\n+LL |     fn foo(&self) -> bool { true } //~ ERROR E0050\n    |            ^^^^^ expected 2 parameters, found 1\n \n error[E0050]: method `bar` has 1 parameter but the declaration in trait `Foo::bar` has 4\n   --> $DIR/E0050.rs:21:12\n    |\n-13 |     fn bar(&self, x: u8, y: u8, z: u8);\n+LL |     fn bar(&self, x: u8, y: u8, z: u8);\n    |                                    -- trait requires 4 parameters\n ...\n-21 |     fn bar(&self) { } //~ ERROR E0050\n+LL |     fn bar(&self) { } //~ ERROR E0050\n    |            ^^^^^ expected 4 parameters, found 1\n \n error[E0050]: method `less` has 4 parameters but the declaration in trait `Foo::less` has 1\n   --> $DIR/E0050.rs:22:37\n    |\n-14 |     fn less(&self);\n+LL |     fn less(&self);\n    |             ----- trait requires 1 parameter\n ...\n-22 |     fn less(&self, x: u8, y: u8, z: u8) { } //~ ERROR E0050\n+LL |     fn less(&self, x: u8, y: u8, z: u8) { } //~ ERROR E0050\n    |                                     ^^ expected 1 parameter, found 4\n \n error: aborting due to 3 previous errors"}, {"sha": "ed82704e661109a8619657b60de4e470b757da0b", "filename": "src/test/ui/error-codes/E0054.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0054.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0054.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0054.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0054]: cannot cast as `bool`\n   --> $DIR/E0054.rs:13:24\n    |\n-13 |     let x_is_nonzero = x as bool; //~ ERROR E0054\n+LL |     let x_is_nonzero = x as bool; //~ ERROR E0054\n    |                        ^^^^^^^^^ unsupported cast\n    |\n    = help: compare with zero instead"}, {"sha": "3d13b1441062a62b0361e015240aa27273a50725", "filename": "src/test/ui/error-codes/E0055.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0055.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0055.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0055.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0055]: reached the recursion limit while auto-dereferencing Foo\n   --> $DIR/E0055.rs:21:13\n    |\n-21 |     ref_foo.foo();\n+LL |     ref_foo.foo();\n    |             ^^^ deref recursion limit reached\n    |\n    = help: consider adding a `#![recursion_limit=\"4\"]` attribute to your crate"}, {"sha": "0d6cd77de0701d5df65c77112a3b56874dde1415", "filename": "src/test/ui/error-codes/E0057.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0057.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,13 +1,13 @@\n error[E0057]: this function takes 1 parameter but 0 parameters were supplied\n   --> $DIR/E0057.rs:13:13\n    |\n-13 |     let a = f(); //~ ERROR E0057\n+LL |     let a = f(); //~ ERROR E0057\n    |             ^^^ expected 1 parameter\n \n error[E0057]: this function takes 1 parameter but 2 parameters were supplied\n   --> $DIR/E0057.rs:15:13\n    |\n-15 |     let c = f(2, 3); //~ ERROR E0057\n+LL |     let c = f(2, 3); //~ ERROR E0057\n    |             ^^^^^^^ expected 1 parameter\n \n error: aborting due to 2 previous errors"}, {"sha": "5e2907eed6920c62fa7cccb598949c41f86268ef", "filename": "src/test/ui/error-codes/E0059.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0059.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0059.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0059.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0059]: cannot use call notation; the first type parameter for the function trait is neither a tuple nor unit\n   --> $DIR/E0059.rs:13:41\n    |\n-13 | fn foo<F: Fn<i32>>(f: F) -> F::Output { f(3) } //~ ERROR E0059\n+LL | fn foo<F: Fn<i32>>(f: F) -> F::Output { f(3) } //~ ERROR E0059\n    |                                         ^^^^\n \n error: aborting due to previous error"}, {"sha": "0493015cc7653a6a4568a4356c97b8e0a4108087", "filename": "src/test/ui/error-codes/E0060.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0060.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0060]: this function takes at least 1 parameter but 0 parameters were supplied\n   --> $DIR/E0060.rs:16:14\n    |\n-12 |     fn printf(_: *const u8, ...) -> u32;\n+LL |     fn printf(_: *const u8, ...) -> u32;\n    |     ------------------------------------ defined here\n ...\n-16 |     unsafe { printf(); }\n+LL |     unsafe { printf(); }\n    |              ^^^^^^^^ expected at least 1 parameter\n \n error: aborting due to previous error"}, {"sha": "6ddd4be9d8e24d304b45064ee5b0d1a9a29ea3a0", "filename": "src/test/ui/error-codes/E0061.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0061.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0061.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0061.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,19 +1,19 @@\n error[E0061]: this function takes 2 parameters but 1 parameter was supplied\n   --> $DIR/E0061.rs:16:5\n    |\n-11 | fn f(a: u16, b: &str) {}\n+LL | fn f(a: u16, b: &str) {}\n    | --------------------- defined here\n ...\n-16 |     f(0);\n+LL |     f(0);\n    |     ^^^^ expected 2 parameters\n \n error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n   --> $DIR/E0061.rs:20:5\n    |\n-13 | fn f2(a: u16) {}\n+LL | fn f2(a: u16) {}\n    | ------------- defined here\n ...\n-20 |     f2();\n+LL |     f2();\n    |     ^^^^ expected 1 parameter\n \n error: aborting due to 2 previous errors"}, {"sha": "a24c5e05914712548ef489afe033f5732d8b2458", "filename": "src/test/ui/error-codes/E0062.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0062.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0062.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0062.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,9 +1,9 @@\n error[E0062]: field `x` specified more than once\n   --> $DIR/E0062.rs:18:9\n    |\n-17 |         x: 0,\n+LL |         x: 0,\n    |         ---- first use of `x`\n-18 |         x: 0,\n+LL |         x: 0,\n    |         ^ used more than once\n \n error: aborting due to previous error"}, {"sha": "7f33223a7ea1e14e4449c696be002f13943cb94d", "filename": "src/test/ui/error-codes/E0063.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0063.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0063.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0063.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,25 +1,25 @@\n error[E0063]: missing field `x` in initializer of `SingleFoo`\n   --> $DIR/E0063.rs:42:13\n    |\n-42 |     let w = SingleFoo { };\n+LL |     let w = SingleFoo { };\n    |             ^^^^^^^^^ missing `x`\n \n error[E0063]: missing fields `y`, `z` in initializer of `PluralFoo`\n   --> $DIR/E0063.rs:44:13\n    |\n-44 |     let x = PluralFoo {x: 1};\n+LL |     let x = PluralFoo {x: 1};\n    |             ^^^^^^^^^ missing `y`, `z`\n \n error[E0063]: missing fields `a`, `b`, `y` and 1 other field in initializer of `TruncatedFoo`\n   --> $DIR/E0063.rs:46:13\n    |\n-46 |     let y = TruncatedFoo{x:1};\n+LL |     let y = TruncatedFoo{x:1};\n    |             ^^^^^^^^^^^^ missing `a`, `b`, `y` and 1 other field\n \n error[E0063]: missing fields `a`, `b`, `c` and 2 other fields in initializer of `TruncatedPluralFoo`\n   --> $DIR/E0063.rs:48:13\n    |\n-48 |     let z = TruncatedPluralFoo{x:1};\n+LL |     let z = TruncatedPluralFoo{x:1};\n    |             ^^^^^^^^^^^^^^^^^^ missing `a`, `b`, `c` and 2 other fields\n \n error: aborting due to 4 previous errors"}, {"sha": "b964b9dffc1f3e19f1e336fa760815a43e048b20", "filename": "src/test/ui/error-codes/E0067.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0067.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0067.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0067.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,15 +1,15 @@\n error[E0368]: binary assignment operation `+=` cannot be applied to type `std::collections::LinkedList<_>`\n   --> $DIR/E0067.rs:14:5\n    |\n-14 |     LinkedList::new() += 1; //~ ERROR E0368\n+LL |     LinkedList::new() += 1; //~ ERROR E0368\n    |     -----------------^^^^^\n    |     |\n    |     cannot use `+=` on type `std::collections::LinkedList<_>`\n \n error[E0067]: invalid left-hand side expression\n   --> $DIR/E0067.rs:14:5\n    |\n-14 |     LinkedList::new() += 1; //~ ERROR E0368\n+LL |     LinkedList::new() += 1; //~ ERROR E0368\n    |     ^^^^^^^^^^^^^^^^^ invalid expression for left-hand side\n \n error: aborting due to 2 previous errors"}, {"sha": "8a5b5984c33dd7efcd72feb6ff83dbf1e9000fca", "filename": "src/test/ui/error-codes/E0069.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0069.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0069.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0069.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0069]: `return;` in a function whose return type is not `()`\n   --> $DIR/E0069.rs:12:5\n    |\n-12 |     return;\n+LL |     return;\n    |     ^^^^^^ return type is not ()\n \n error: aborting due to previous error"}, {"sha": "33da9030c41df76810f9e232147da40c97123f0a", "filename": "src/test/ui/error-codes/E0070.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,19 +1,19 @@\n error[E0070]: invalid left-hand side expression\n   --> $DIR/E0070.rs:16:5\n    |\n-16 |     SOME_CONST = 14; //~ ERROR E0070\n+LL |     SOME_CONST = 14; //~ ERROR E0070\n    |     ^^^^^^^^^^^^^^^ left-hand of expression not valid\n \n error[E0070]: invalid left-hand side expression\n   --> $DIR/E0070.rs:17:5\n    |\n-17 |     1 = 3; //~ ERROR E0070\n+LL |     1 = 3; //~ ERROR E0070\n    |     ^^^^^ left-hand of expression not valid\n \n error[E0308]: mismatched types\n   --> $DIR/E0070.rs:18:25\n    |\n-18 |     some_other_func() = 4; //~ ERROR E0070\n+LL |     some_other_func() = 4; //~ ERROR E0070\n    |                         ^ expected (), found integral variable\n    |\n    = note: expected type `()`\n@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n error[E0070]: invalid left-hand side expression\n   --> $DIR/E0070.rs:18:5\n    |\n-18 |     some_other_func() = 4; //~ ERROR E0070\n+LL |     some_other_func() = 4; //~ ERROR E0070\n    |     ^^^^^^^^^^^^^^^^^^^^^ left-hand of expression not valid\n \n error: aborting due to 4 previous errors"}, {"sha": "b28dcf90c82fa77112c87a434ead670c93138b89", "filename": "src/test/ui/error-codes/E0071.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0071.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0071.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0071.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0071]: expected struct, variant or union type, found enum `Foo`\n   --> $DIR/E0071.rs:15:13\n    |\n-15 |     let u = FooAlias { value: 0 };\n+LL |     let u = FooAlias { value: 0 };\n    |             ^^^^^^^^ not a struct\n \n error: aborting due to previous error"}, {"sha": "4fd5b65f4a9c64169a7ca8e00fe5e95293f31d8e", "filename": "src/test/ui/error-codes/E0075.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0075.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0075.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0075.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0075]: SIMD vector cannot be empty\n   --> $DIR/E0075.rs:14:1\n    |\n-14 | struct Bad; //~ ERROR E0075\n+LL | struct Bad; //~ ERROR E0075\n    | ^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "3cee6f4527cbb48663e7256595bee658abd81ff4", "filename": "src/test/ui/error-codes/E0076.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0076.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0076]: SIMD vector should be homogeneous\n   --> $DIR/E0076.rs:14:1\n    |\n-14 | struct Bad(u16, u32, u32);\n+LL | struct Bad(u16, u32, u32);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ SIMD elements must have the same type\n \n error: aborting due to previous error"}, {"sha": "822efe9628bce7d447e549ef46ad51b6ed7f3442", "filename": "src/test/ui/error-codes/E0077.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0077.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0077.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0077.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0077]: SIMD vector element type should be machine type\n   --> $DIR/E0077.rs:14:1\n    |\n-14 | struct Bad(String); //~ ERROR E0077\n+LL | struct Bad(String); //~ ERROR E0077\n    | ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "01cfa0c375bb1be1d2202cc34b6a1e754dbe3563", "filename": "src/test/ui/error-codes/E0080.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0080.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0080.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0080.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,27 +1,27 @@\n warning: constant evaluation error: attempt to shift left with overflow\n   --> $DIR/E0080.rs:12:9\n    |\n-12 |     X = (1 << 500), //~ ERROR E0080\n+LL |     X = (1 << 500), //~ ERROR E0080\n    |         ^^^^^^^^^^\n    |\n    = note: #[warn(const_err)] on by default\n \n error[E0080]: constant evaluation error\n   --> $DIR/E0080.rs:12:9\n    |\n-12 |     X = (1 << 500), //~ ERROR E0080\n+LL |     X = (1 << 500), //~ ERROR E0080\n    |         ^^^^^^^^^^ attempt to shift left with overflow\n \n warning: constant evaluation error: attempt to divide by zero\n   --> $DIR/E0080.rs:14:9\n    |\n-14 |     Y = (1 / 0) //~ ERROR E0080\n+LL |     Y = (1 / 0) //~ ERROR E0080\n    |         ^^^^^^^\n \n error[E0080]: constant evaluation error\n   --> $DIR/E0080.rs:14:9\n    |\n-14 |     Y = (1 / 0) //~ ERROR E0080\n+LL |     Y = (1 / 0) //~ ERROR E0080\n    |         ^^^^^^^ attempt to divide by zero\n \n error: aborting due to 2 previous errors"}, {"sha": "42d0769bb5701af6d47ffa4c9d11e58663b93b5f", "filename": "src/test/ui/error-codes/E0081.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0081.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0081.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0081.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,9 +1,9 @@\n error[E0081]: discriminant value `3isize` already exists\n   --> $DIR/E0081.rs:13:9\n    |\n-12 |     P = 3,\n+LL |     P = 3,\n    |         - first use of `3isize`\n-13 |     X = 3,\n+LL |     X = 3,\n    |         ^ enum already has `3isize`\n \n error: aborting due to previous error"}, {"sha": "5ebe03090a0af95e3bcfe2616f572f36d2478a6b", "filename": "src/test/ui/error-codes/E0084.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0084.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0084.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0084.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,9 +1,9 @@\n error[E0084]: unsupported representation for zero-variant enum\n   --> $DIR/E0084.rs:11:1\n    |\n-11 | #[repr(i32)] //~ ERROR: E0084\n+LL | #[repr(i32)] //~ ERROR: E0084\n    | ^^^^^^^^^^^^\n-12 | enum Foo {}\n+LL | enum Foo {}\n    | ----------- zero-variant enum\n \n error: aborting due to previous error"}, {"sha": "b1ff92d8c2763368396a0c288ac229064b461164", "filename": "src/test/ui/error-codes/E0087.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0087.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0087.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0087.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,13 +1,13 @@\n error[E0087]: too many type parameters provided: expected at most 0 type parameters, found 1 type parameter\n   --> $DIR/E0087.rs:15:11\n    |\n-15 |     foo::<f64>(); //~ ERROR expected at most 0 type parameters, found 1 type parameter [E0087]\n+LL |     foo::<f64>(); //~ ERROR expected at most 0 type parameters, found 1 type parameter [E0087]\n    |           ^^^ expected 0 type parameters\n \n error[E0087]: too many type parameters provided: expected at most 1 type parameter, found 2 type parameters\n   --> $DIR/E0087.rs:17:16\n    |\n-17 |     bar::<f64, u64>(); //~ ERROR expected at most 1 type parameter, found 2 type parameters [E0087]\n+LL |     bar::<f64, u64>(); //~ ERROR expected at most 1 type parameter, found 2 type parameters [E0087]\n    |                ^^^ expected 1 type parameter\n \n error: aborting due to 2 previous errors"}, {"sha": "5497eb028d86e6310d5ba527376aba2d53417f16", "filename": "src/test/ui/error-codes/E0088.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0088.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0088.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0088.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,13 +1,13 @@\n error[E0088]: too many lifetime parameters provided: expected at most 0 lifetime parameters, found 1 lifetime parameter\n   --> $DIR/E0088.rs:15:9\n    |\n-15 |     f::<'static>(); //~ ERROR E0088\n+LL |     f::<'static>(); //~ ERROR E0088\n    |         ^^^^^^^ expected 0 lifetime parameters\n \n error[E0088]: too many lifetime parameters provided: expected at most 1 lifetime parameter, found 2 lifetime parameters\n   --> $DIR/E0088.rs:16:18\n    |\n-16 |     g::<'static, 'static>(); //~ ERROR E0088\n+LL |     g::<'static, 'static>(); //~ ERROR E0088\n    |                  ^^^^^^^ expected 1 lifetime parameter\n \n error: aborting due to 2 previous errors"}, {"sha": "3a3990879433dee2d2b3380aee1a10d197565267", "filename": "src/test/ui/error-codes/E0089.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0089.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0089.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0089.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0089]: too few type parameters provided: expected 2 type parameters, found 1 type parameter\n   --> $DIR/E0089.rs:14:5\n    |\n-14 |     foo::<f64>(); //~ ERROR expected 2 type parameters, found 1 type parameter [E0089]\n+LL |     foo::<f64>(); //~ ERROR expected 2 type parameters, found 1 type parameter [E0089]\n    |     ^^^^^^^^^^ expected 2 type parameters\n \n error: aborting due to previous error"}, {"sha": "82e8eaf69ea2254f7f085f1d47a92175409eae47", "filename": "src/test/ui/error-codes/E0090.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0090.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0090.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0090.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0090]: too few lifetime parameters provided: expected 2 lifetime parameters, found 1 lifetime parameter\n   --> $DIR/E0090.rs:14:5\n    |\n-14 |     foo::<'static>(); //~ ERROR expected 2 lifetime parameters, found 1 lifetime parameter [E0090]\n+LL |     foo::<'static>(); //~ ERROR expected 2 lifetime parameters, found 1 lifetime parameter [E0090]\n    |     ^^^^^^^^^^^^^^ expected 2 lifetime parameters\n \n error: aborting due to previous error"}, {"sha": "003e9e7efcd10c79208db5b77b764fb7579a4f28", "filename": "src/test/ui/error-codes/E0091.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0091.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0091.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0091.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,13 +1,13 @@\n error[E0091]: type parameter `T` is unused\n   --> $DIR/E0091.rs:11:10\n    |\n-11 | type Foo<T> = u32; //~ ERROR E0091\n+LL | type Foo<T> = u32; //~ ERROR E0091\n    |          ^ unused type parameter\n \n error[E0091]: type parameter `B` is unused\n   --> $DIR/E0091.rs:12:14\n    |\n-12 | type Foo2<A, B> = Box<A>; //~ ERROR E0091\n+LL | type Foo2<A, B> = Box<A>; //~ ERROR E0091\n    |              ^ unused type parameter\n \n error: aborting due to 2 previous errors"}, {"sha": "8b53a029c35d5053675789ca50c434233414df2b", "filename": "src/test/ui/error-codes/E0092.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0092.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0092]: unrecognized atomic operation function: `foo`\n   --> $DIR/E0092.rs:13:5\n    |\n-13 |     fn atomic_foo(); //~ ERROR E0092\n+LL |     fn atomic_foo(); //~ ERROR E0092\n    |     ^^^^^^^^^^^^^^^^ unrecognized atomic operation\n \n error: aborting due to previous error"}, {"sha": "4e2016508376c4cc4d816e2e1c78664d3d561b9c", "filename": "src/test/ui/error-codes/E0093.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0093.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0093.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0093.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0093]: unrecognized intrinsic function: `foo`\n   --> $DIR/E0093.rs:13:5\n    |\n-13 |     fn foo();\n+LL |     fn foo();\n    |     ^^^^^^^^^ unrecognized intrinsic\n \n error: aborting due to previous error"}, {"sha": "7a2dfaae279ec428c23cc77a57871650c2dfe3af", "filename": "src/test/ui/error-codes/E0094.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0094.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0094.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0094.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0094]: intrinsic has wrong number of type parameters: found 2, expected 1\n   --> $DIR/E0094.rs:13:15\n    |\n-13 |     fn size_of<T, U>() -> usize; //~ ERROR E0094\n+LL |     fn size_of<T, U>() -> usize; //~ ERROR E0094\n    |               ^^^^^^ expected 1 type parameter\n \n error: aborting due to previous error"}, {"sha": "645414ca1ea3d16562cda010df5f3120e740222e", "filename": "src/test/ui/error-codes/E0106.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,31 +1,31 @@\n error[E0106]: missing lifetime specifier\n   --> $DIR/E0106.rs:12:8\n    |\n-12 |     x: &bool,\n+LL |     x: &bool,\n    |        ^ expected lifetime parameter\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/E0106.rs:17:7\n    |\n-17 |     B(&bool),\n+LL |     B(&bool),\n    |       ^ expected lifetime parameter\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/E0106.rs:20:14\n    |\n-20 | type MyStr = &str;\n+LL | type MyStr = &str;\n    |              ^ expected lifetime parameter\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/E0106.rs:27:10\n    |\n-27 |     baz: Baz,\n+LL |     baz: Baz,\n    |          ^^^ expected lifetime parameter\n \n error[E0106]: missing lifetime specifiers\n   --> $DIR/E0106.rs:30:11\n    |\n-30 |     buzz: Buzz,\n+LL |     buzz: Buzz,\n    |           ^^^^ expected 2 lifetime parameters\n \n error: aborting due to 5 previous errors"}, {"sha": "a695a593429a2a33a56f10d2350139d553a40ae4", "filename": "src/test/ui/error-codes/E0107.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,19 +1,19 @@\n error[E0107]: wrong number of lifetime parameters: expected 2, found 1\n   --> $DIR/E0107.rs:21:11\n    |\n-21 |     buzz: Buzz<'a>,\n+LL |     buzz: Buzz<'a>,\n    |           ^^^^^^^^ expected 2 lifetime parameters\n \n error[E0107]: wrong number of lifetime parameters: expected 0, found 1\n   --> $DIR/E0107.rs:24:10\n    |\n-24 |     bar: Bar<'a>,\n+LL |     bar: Bar<'a>,\n    |          ^^^^^^^ unexpected lifetime parameter\n \n error[E0107]: wrong number of lifetime parameters: expected 1, found 3\n   --> $DIR/E0107.rs:27:11\n    |\n-27 |     foo2: Foo<'a, 'b, 'c>,\n+LL |     foo2: Foo<'a, 'b, 'c>,\n    |           ^^^^^^^^^^^^^^^ 2 unexpected lifetime parameters\n \n error: aborting due to 3 previous errors"}, {"sha": "89f3154fb48b922a7388b9d550668d3b5d3fa5f3", "filename": "src/test/ui/error-codes/E0109.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0109]: type parameters are not allowed on this type\n   --> $DIR/E0109.rs:11:14\n    |\n-11 | type X = u32<i32>; //~ ERROR E0109\n+LL | type X = u32<i32>; //~ ERROR E0109\n    |              ^^^ type parameter not allowed\n \n error: aborting due to previous error"}, {"sha": "3f4d525b6e5064fff5c960dd0740d81135ab21ef", "filename": "src/test/ui/error-codes/E0110.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0110]: lifetime parameters are not allowed on this type\n   --> $DIR/E0110.rs:11:14\n    |\n-11 | type X = u32<'static>; //~ ERROR E0110\n+LL | type X = u32<'static>; //~ ERROR E0110\n    |              ^^^^^^^ lifetime parameter not allowed on this type\n \n error: aborting due to previous error"}, {"sha": "88954b906c465ef50f50d54d7314cb1f4e76cb0c", "filename": "src/test/ui/error-codes/E0116.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0116.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0116.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0116.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0116]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n   --> $DIR/E0116.rs:11:1\n    |\n-11 | impl Vec<u8> {}\n+LL | impl Vec<u8> {}\n    | ^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n    |\n    = note: define and implement a trait or new type instead"}, {"sha": "240aa4240cc6f8113161e49b9f4bd5aaa284a7e5", "filename": "src/test/ui/error-codes/E0117.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,13 +1,13 @@\n error[E0120]: the Drop trait may only be implemented on structures\n   --> $DIR/E0117.rs:11:15\n    |\n-11 | impl Drop for u32 {} //~ ERROR E0117\n+LL | impl Drop for u32 {} //~ ERROR E0117\n    |               ^^^ implementing Drop requires a struct\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/E0117.rs:11:1\n    |\n-11 | impl Drop for u32 {} //~ ERROR E0117\n+LL | impl Drop for u32 {} //~ ERROR E0117\n    | ^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate"}, {"sha": "bb811ab6345e76052b57177a08d9676f6a15cf54", "filename": "src/test/ui/error-codes/E0118.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0118.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0118.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0118.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0118]: no base type found for inherent implementation\n   --> $DIR/E0118.rs:11:6\n    |\n-11 | impl (u8, u8) { //~ ERROR E0118\n+LL | impl (u8, u8) { //~ ERROR E0118\n    |      ^^^^^^^^ impl requires a base type\n    |\n    = note: either implement a trait on it or create a newtype to wrap it instead"}, {"sha": "55ca8c5a77969539337dc53d12d9503ef7bdc1fa", "filename": "src/test/ui/error-codes/E0119.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0119.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0119.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0119.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0119]: conflicting implementations of trait `MyTrait` for type `Foo`:\n   --> $DIR/E0119.rs:23:1\n    |\n-15 | impl<T> MyTrait for T {\n+LL | impl<T> MyTrait for T {\n    | --------------------- first implementation here\n ...\n-23 | impl MyTrait for Foo { //~ ERROR E0119\n+LL | impl MyTrait for Foo { //~ ERROR E0119\n    | ^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `Foo`\n \n error: aborting due to previous error"}, {"sha": "cd69b8d67bf9afedae61539e0f718306187cf73d", "filename": "src/test/ui/error-codes/E0120.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0120.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0120.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0120.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0120]: the Drop trait may only be implemented on structures\n   --> $DIR/E0120.rs:13:15\n    |\n-13 | impl Drop for MyTrait {\n+LL | impl Drop for MyTrait {\n    |               ^^^^^^^ implementing Drop requires a struct\n \n error: aborting due to previous error"}, {"sha": "ca9557cdcdc4dbf4ad2f58219082bbb44d3ecce8", "filename": "src/test/ui/error-codes/E0121.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,13 +1,13 @@\n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/E0121.rs:11:13\n    |\n-11 | fn foo() -> _ { 5 } //~ ERROR E0121\n+LL | fn foo() -> _ { 5 } //~ ERROR E0121\n    |             ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/E0121.rs:13:13\n    |\n-13 | static BAR: _ = \"test\"; //~ ERROR E0121\n+LL | static BAR: _ = \"test\"; //~ ERROR E0121\n    |             ^ not allowed in type signatures\n \n error: aborting due to 2 previous errors"}, {"sha": "1f4b4ce0efaeac8f3a1abb3fa5a6e07535cf2757", "filename": "src/test/ui/error-codes/E0124.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0124.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0124.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0124.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,9 +1,9 @@\n error[E0124]: field `field1` is already declared\n   --> $DIR/E0124.rs:13:5\n    |\n-12 |     field1: i32,\n+LL |     field1: i32,\n    |     ----------- `field1` first declared here\n-13 |     field1: i32,\n+LL |     field1: i32,\n    |     ^^^^^^^^^^^ field already declared\n \n error: aborting due to previous error"}, {"sha": "632b11967232af3637d4657e2d790de447e843ea", "filename": "src/test/ui/error-codes/E0128.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0128.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0128]: type parameters with a default cannot use forward declared identifiers\n   --> $DIR/E0128.rs:11:14\n    |\n-11 | struct Foo<T=U, U=()> { //~ ERROR E0128\n+LL | struct Foo<T=U, U=()> { //~ ERROR E0128\n    |              ^ defaulted type parameters cannot be forward declared\n \n error: aborting due to previous error"}, {"sha": "3e00909109b56ba2883eb6c1d0518cbcde0b2718", "filename": "src/test/ui/error-codes/E0130.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0130.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0130.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0130.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0130]: patterns aren't allowed in foreign function declarations\n   --> $DIR/E0130.rs:12:12\n    |\n-12 |     fn foo((a, b): (u32, u32));\n+LL |     fn foo((a, b): (u32, u32));\n    |            ^^^^^^ pattern not allowed in foreign function\n \n error: aborting due to previous error"}, {"sha": "b9caca22aeb1339b11702258eff928b078928e70", "filename": "src/test/ui/error-codes/E0131.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0131.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0131.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0131.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0131]: main function is not allowed to have type parameters\n   --> $DIR/E0131.rs:11:8\n    |\n-11 | fn main<T>() {\n+LL | fn main<T>() {\n    |        ^^^ main cannot have type parameters\n \n error: aborting due to previous error"}, {"sha": "ce22a99e66c87e054391ff14119b52d789085a29", "filename": "src/test/ui/error-codes/E0132.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0132.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0132.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0132.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0132]: start function is not allowed to have type parameters\n   --> $DIR/E0132.rs:14:5\n    |\n-14 | fn f< T >() {} //~ ERROR E0132\n+LL | fn f< T >() {} //~ ERROR E0132\n    |     ^^^^^ start function cannot have type parameters\n \n error: aborting due to previous error"}, {"sha": "d703ce6203ef9967ff8b2987917bf6b6f1593f75", "filename": "src/test/ui/error-codes/E0133.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0133.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0133.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0133.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0133]: call to unsafe function requires unsafe function or block\n   --> $DIR/E0133.rs:14:5\n    |\n-14 |     f();\n+LL |     f();\n    |     ^^^ call to unsafe function\n \n error: aborting due to previous error"}, {"sha": "4a5b4f6da86a88958cb647c46378bfcaccac3ca2", "filename": "src/test/ui/error-codes/E0137.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0137.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0137.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0137.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0137]: multiple functions with a #[main] attribute\n   --> $DIR/E0137.rs:17:1\n    |\n-14 | fn foo() {}\n+LL | fn foo() {}\n    | ----------- first #[main] function\n ...\n-17 | fn f() {}\n+LL | fn f() {}\n    | ^^^^^^^^^ additional #[main] function\n \n error: aborting due to previous error"}, {"sha": "40b476afb9af56ec13db49e423f0bcd71bf67f08", "filename": "src/test/ui/error-codes/E0138.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0138.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0138.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0138.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0138]: multiple 'start' functions\n   --> $DIR/E0138.rs:17:1\n    |\n-14 | fn foo(argc: isize, argv: *const *const u8) -> isize { 0 }\n+LL | fn foo(argc: isize, argv: *const *const u8) -> isize { 0 }\n    | ---------------------------------------------------------- previous `start` function here\n ...\n-17 | fn f(argc: isize, argv: *const *const u8) -> isize { 0 }\n+LL | fn f(argc: isize, argv: *const *const u8) -> isize { 0 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ multiple `start` functions\n \n error: aborting due to previous error"}, {"sha": "99a9b85f41e2fcffd8a13fff67b0874f077c15c5", "filename": "src/test/ui/error-codes/E0152.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0152]: duplicate lang item found: `panic_fmt`.\n   --> $DIR/E0152.rs:14:1\n    |\n-14 | struct Foo; //~ ERROR E0152\n+LL | struct Foo; //~ ERROR E0152\n    | ^^^^^^^^^^^\n    |\n    = note: first defined in crate `std`."}, {"sha": "fb8f3e0e1683d84df44fc290c24f45e66a57ad77", "filename": "src/test/ui/error-codes/E0161.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0161.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0161.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,13 +1,13 @@\n error[E0161]: cannot move a value of type str: the size of str cannot be statically determined\n   --> $DIR/E0161.rs:14:28\n    |\n-14 |     let _x: Box<str> = box *\"hello\"; //~ ERROR E0161\n+LL |     let _x: Box<str> = box *\"hello\"; //~ ERROR E0161\n    |                            ^^^^^^^^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/E0161.rs:14:28\n    |\n-14 |     let _x: Box<str> = box *\"hello\"; //~ ERROR E0161\n+LL |     let _x: Box<str> = box *\"hello\"; //~ ERROR E0161\n    |                            ^^^^^^^^ cannot move out of borrowed content\n \n error: aborting due to 2 previous errors"}, {"sha": "e9a7b18fcdd9541fa6df448987d6985f6784daea", "filename": "src/test/ui/error-codes/E0162.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0162.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0162.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0162.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0162]: irrefutable if-let pattern\n   --> $DIR/E0162.rs:15:12\n    |\n-15 |     if let Irrefutable(x) = irr { //~ ERROR E0162\n+LL |     if let Irrefutable(x) = irr { //~ ERROR E0162\n    |            ^^^^^^^^^^^^^^ irrefutable pattern\n \n error: aborting due to previous error"}, {"sha": "ec91d9b52a95a19b5caa8ea21f1abd3c8ba94c80", "filename": "src/test/ui/error-codes/E0164.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0164.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0164]: expected tuple struct/variant, found associated constant `<Foo>::B`\n   --> $DIR/E0164.rs:20:9\n    |\n-20 |         Foo::B(i) => i, //~ ERROR E0164\n+LL |         Foo::B(i) => i, //~ ERROR E0164\n    |         ^^^^^^^^^ not a tuple variant or struct\n \n error: aborting due to previous error"}, {"sha": "ac6a88483ec57b42860d732be74393c30d353224", "filename": "src/test/ui/error-codes/E0165.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0165.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0165.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0165.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0165]: irrefutable while-let pattern\n   --> $DIR/E0165.rs:15:15\n    |\n-15 |     while let Irrefutable(x) = irr { //~ ERROR E0165\n+LL |     while let Irrefutable(x) = irr { //~ ERROR E0165\n    |               ^^^^^^^^^^^^^^ irrefutable pattern\n \n error: aborting due to previous error"}, {"sha": "bd67ed110646fd40b7195ef68541b933f0b41526", "filename": "src/test/ui/error-codes/E0184.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0184.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0184.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0184.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0184]: the trait `Copy` may not be implemented for this type; the type has a destructor\n   --> $DIR/E0184.rs:11:10\n    |\n-11 | #[derive(Copy)] //~ ERROR E0184\n+LL | #[derive(Copy)] //~ ERROR E0184\n    |          ^^^^ Copy not allowed on types with destructors\n \n error: aborting due to previous error"}, {"sha": "12ecf25811e9ce688f260dbb919540f926b521eb", "filename": "src/test/ui/error-codes/E0185.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0185.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0185.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0185.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0185]: method `foo` has a `&self` declaration in the impl, but not in the trait\n   --> $DIR/E0185.rs:19:5\n    |\n-12 |     fn foo();\n+LL |     fn foo();\n    |     --------- trait method declared without `&self`\n ...\n-19 |     fn foo(&self) {}\n+LL |     fn foo(&self) {}\n    |     ^^^^^^^^^^^^^ `&self` used in impl\n \n error: aborting due to previous error"}, {"sha": "015c6e5d0bc850f5be45e6bbeb0fe9ee9391e264", "filename": "src/test/ui/error-codes/E0186.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0186.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0186.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0186.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0186]: method `foo` has a `&self` declaration in the trait, but not in the impl\n   --> $DIR/E0186.rs:18:5\n    |\n-12 |     fn foo(&self); //~ `&self` used in trait\n+LL |     fn foo(&self); //~ `&self` used in trait\n    |     -------------- `&self` used in trait\n ...\n-18 |     fn foo() {} //~ ERROR E0186\n+LL |     fn foo() {} //~ ERROR E0186\n    |     ^^^^^^^^ expected `&self` in impl\n \n error: aborting due to previous error"}, {"sha": "14ae4469f12a88c19b74cf6ef522149e5e08045c", "filename": "src/test/ui/error-codes/E0191.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0191.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0191.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0191.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0191]: the value of the associated type `Bar` (from the trait `Trait`) must be specified\n   --> $DIR/E0191.rs:15:12\n    |\n-15 | type Foo = Trait; //~ ERROR E0191\n+LL | type Foo = Trait; //~ ERROR E0191\n    |            ^^^^^ missing associated type `Bar` value\n \n error: aborting due to previous error"}, {"sha": "1b2d6eb0285f846051b30072bd43cc3c7c07f1b2", "filename": "src/test/ui/error-codes/E0192.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0192.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0192.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0192.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0192]: negative impls are only allowed for auto traits (e.g., `Send` and `Sync`)\n   --> $DIR/E0192.rs:19:1\n    |\n-19 | impl !Trait for Foo { } //~ ERROR E0192\n+LL | impl !Trait for Foo { } //~ ERROR E0192\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "9447b90355e99e6466c4c575804ad7a5c4e6f0ef", "filename": "src/test/ui/error-codes/E0194.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0194.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0194.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0194.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0194]: type parameter `T` shadows another type parameter of the same name\n   --> $DIR/E0194.rs:13:26\n    |\n-11 | trait Foo<T> {\n+LL | trait Foo<T> {\n    |           - first `T` declared here\n-12 |     fn do_something(&self) -> T;\n-13 |     fn do_something_else<T: Clone>(&self, bar: T);\n+LL |     fn do_something(&self) -> T;\n+LL |     fn do_something_else<T: Clone>(&self, bar: T);\n    |                          ^ shadows another type parameter\n \n error: aborting due to previous error"}, {"sha": "735aa4283ec3ca04589c257350e2872b81ce8f24", "filename": "src/test/ui/error-codes/E0195.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0195.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0195.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0195.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0195]: lifetime parameters or bounds on method `bar` do not match the trait declaration\n   --> $DIR/E0195.rs:19:5\n    |\n-12 |     fn bar<'a,'b:'a>(x: &'a str, y: &'b str);\n+LL |     fn bar<'a,'b:'a>(x: &'a str, y: &'b str);\n    |     ----------------------------------------- lifetimes in impl do not match this method in trait\n ...\n-19 |     fn bar<'a,'b>(x: &'a str, y: &'b str) { //~ ERROR E0195\n+LL |     fn bar<'a,'b>(x: &'a str, y: &'b str) { //~ ERROR E0195\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetimes do not match method in trait\n \n error: aborting due to previous error"}, {"sha": "250101929eec9c861957b21078cf46b20118fca1", "filename": "src/test/ui/error-codes/E0197.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0197.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0197]: inherent impls cannot be unsafe\n   --> $DIR/E0197.rs:13:1\n    |\n-13 | unsafe impl Foo { } //~ ERROR E0197\n+LL | unsafe impl Foo { } //~ ERROR E0197\n    | ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "12120658d61111a976dc302370c0882c37f75cb9", "filename": "src/test/ui/error-codes/E0198.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0198.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0198.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0198.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0198]: negative impls cannot be unsafe\n   --> $DIR/E0198.rs:15:1\n    |\n-15 | unsafe impl !Send for Foo { } //~ ERROR E0198\n+LL | unsafe impl !Send for Foo { } //~ ERROR E0198\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "826d13a7a0eccdfd05e0e7f4930f4032f762c74f", "filename": "src/test/ui/error-codes/E0199.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0199.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0199.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0199.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0199]: implementing the trait `Bar` is not unsafe\n   --> $DIR/E0199.rs:16:1\n    |\n-16 | unsafe impl Bar for Foo { } //~ ERROR implementing the trait `Bar` is not unsafe [E0199]\n+LL | unsafe impl Bar for Foo { } //~ ERROR implementing the trait `Bar` is not unsafe [E0199]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "30731712045a354eb658b587c5dbcdb1141feae1", "filename": "src/test/ui/error-codes/E0200.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0200.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0200.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0200.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0200]: the trait `Bar` requires an `unsafe impl` declaration\n   --> $DIR/E0200.rs:15:1\n    |\n-15 | impl Bar for Foo { } //~ ERROR E0200\n+LL | impl Bar for Foo { } //~ ERROR E0200\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "730453c416e5075f157dc601120bf5a9a6e95fa7", "filename": "src/test/ui/error-codes/E0201.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0201.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0201.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0201.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,26 +1,26 @@\n error[E0201]: duplicate definitions with name `bar`:\n   --> $DIR/E0201.rs:15:5\n    |\n-14 |     fn bar(&self) -> bool { self.0 > 5 }\n+LL |     fn bar(&self) -> bool { self.0 > 5 }\n    |     ------------------------------------ previous definition of `bar` here\n-15 |     fn bar() {} //~ ERROR E0201\n+LL |     fn bar() {} //~ ERROR E0201\n    |     ^^^^^^^^^^^ duplicate definition\n \n error[E0201]: duplicate definitions with name `baz`:\n   --> $DIR/E0201.rs:27:5\n    |\n-26 |     fn baz(&self) -> bool { true }\n+LL |     fn baz(&self) -> bool { true }\n    |     ------------------------------ previous definition of `baz` here\n-27 |     fn baz(&self) -> bool { self.0 > 5 } //~ ERROR E0201\n+LL |     fn baz(&self) -> bool { self.0 > 5 } //~ ERROR E0201\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definition\n \n error[E0201]: duplicate definitions with name `Quux`:\n   --> $DIR/E0201.rs:28:5\n    |\n-24 |     type Quux = u32;\n+LL |     type Quux = u32;\n    |     ---------------- previous definition of `Quux` here\n ...\n-28 |     type Quux = u32; //~ ERROR E0201\n+LL |     type Quux = u32; //~ ERROR E0201\n    |     ^^^^^^^^^^^^^^^^ duplicate definition\n \n error: aborting due to 3 previous errors"}, {"sha": "0cd22a454e1229ab2fe7f75aa862176b550e07d7", "filename": "src/test/ui/error-codes/E0206.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,19 +1,19 @@\n error[E0206]: the trait `Copy` may not be implemented for this type\n   --> $DIR/E0206.rs:13:15\n    |\n-13 | impl Copy for Foo { }\n+LL | impl Copy for Foo { }\n    |               ^^^ type is not a structure or enumeration\n \n error[E0206]: the trait `Copy` may not be implemented for this type\n   --> $DIR/E0206.rs:20:15\n    |\n-20 | impl Copy for &'static Bar { }\n+LL | impl Copy for &'static Bar { }\n    |               ^^^^^^^^^^^^ type is not a structure or enumeration\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/E0206.rs:13:1\n    |\n-13 | impl Copy for Foo { }\n+LL | impl Copy for Foo { }\n    | ^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate"}, {"sha": "e1f8a68583fa2ae21351ceadd695163f29b1bcde", "filename": "src/test/ui/error-codes/E0207.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0207.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0207.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0207.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n   --> $DIR/E0207.rs:13:6\n    |\n-13 | impl<T: Default> Foo { //~ ERROR E0207\n+LL | impl<T: Default> Foo { //~ ERROR E0207\n    |      ^ unconstrained type parameter\n \n error: aborting due to previous error"}, {"sha": "5fd3278dc8834061c2eccb7e7928257250835c78", "filename": "src/test/ui/error-codes/E0214.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0214]: parenthesized parameters may only be used with a trait\n   --> $DIR/E0214.rs:12:15\n    |\n-12 |     let v: Vec(&str) = vec![\"foo\"];\n+LL |     let v: Vec(&str) = vec![\"foo\"];\n    |               ^^^^^^ only traits may use parentheses\n \n error: aborting due to previous error"}, {"sha": "7a4f730c725aca4094915597af187ece9c8cb3cc", "filename": "src/test/ui/error-codes/E0220.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0220.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0220.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0220.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,13 +1,13 @@\n error[E0220]: associated type `F` not found for `Trait`\n   --> $DIR/E0220.rs:15:18\n    |\n-15 | type Foo = Trait<F=i32>; //~ ERROR E0220\n+LL | type Foo = Trait<F=i32>; //~ ERROR E0220\n    |                  ^^^^^ associated type `F` not found\n \n error[E0191]: the value of the associated type `Bar` (from the trait `Trait`) must be specified\n   --> $DIR/E0220.rs:15:12\n    |\n-15 | type Foo = Trait<F=i32>; //~ ERROR E0220\n+LL | type Foo = Trait<F=i32>; //~ ERROR E0220\n    |            ^^^^^^^^^^^^ missing associated type `Bar` value\n \n error: aborting due to 2 previous errors"}, {"sha": "07ce53e3b58c4317a527d7ee150680ffdbe29bb8", "filename": "src/test/ui/error-codes/E0221.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0221.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0221.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0221.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,28 +1,28 @@\n error[E0221]: ambiguous associated type `A` in bounds of `Self`\n   --> $DIR/E0221.rs:21:16\n    |\n-15 |     type A: T1;\n+LL |     type A: T1;\n    |     ----------- ambiguous `A` from `Foo`\n ...\n-19 |     type A: T2;\n+LL |     type A: T2;\n    |     ----------- ambiguous `A` from `Bar`\n-20 |     fn do_something() {\n-21 |         let _: Self::A;\n+LL |     fn do_something() {\n+LL |         let _: Self::A;\n    |                ^^^^^^^ ambiguous associated type `A`\n \n error[E0221]: ambiguous associated type `Err` in bounds of `Self`\n   --> $DIR/E0221.rs:31:16\n    |\n-29 |     type Err: T3;\n+LL |     type Err: T3;\n    |     ------------- ambiguous `Err` from `My`\n-30 |     fn test() {\n-31 |         let _: Self::Err;\n+LL |     fn test() {\n+LL |         let _: Self::Err;\n    |                ^^^^^^^^^ ambiguous associated type `Err`\n    |\n note: associated type `Self` could derive from `std::str::FromStr`\n   --> $DIR/E0221.rs:31:16\n    |\n-31 |         let _: Self::Err;\n+LL |         let _: Self::Err;\n    |                ^^^^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "9df8c8975e551d32db9e4030b14dfd7410ab4adc", "filename": "src/test/ui/error-codes/E0223.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0223.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0223.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0223.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0223]: ambiguous associated type\n   --> $DIR/E0223.rs:14:14\n    |\n-14 |     let foo: MyTrait::X;\n+LL |     let foo: MyTrait::X;\n    |              ^^^^^^^^^^ ambiguous associated type\n    |\n    = note: specify the type using the syntax `<Type as MyTrait>::X`"}, {"sha": "8894791a2db6a874e7e4f1b21a85f8cf93f45553", "filename": "src/test/ui/error-codes/E0225.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0225.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0225]: only auto traits can be used as additional traits in a trait object\n   --> $DIR/E0225.rs:12:32\n    |\n-12 |     let _: Box<std::io::Read + std::io::Write>;\n+LL |     let _: Box<std::io::Read + std::io::Write>;\n    |                                ^^^^^^^^^^^^^^ non-auto additional trait\n \n error: aborting due to previous error"}, {"sha": "202007a6c7cb329fb54e43616a824557596458e7", "filename": "src/test/ui/error-codes/E0229.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0229.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0229.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0229.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0229]: associated type bindings are not allowed here\n   --> $DIR/E0229.rs:23:25\n    |\n-23 | fn baz<I>(x: &<I as Foo<A=Bar>>::A) {}\n+LL | fn baz<I>(x: &<I as Foo<A=Bar>>::A) {}\n    |                         ^^^^^ associated type not allowed here\n \n error: aborting due to previous error"}, {"sha": "84f5e45bff78e78ede53f5f613ed8482543d0f55", "filename": "src/test/ui/error-codes/E0232.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0232.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0232.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0232.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0232]: `#[rustc_on_unimplemented]` requires a value\n   --> $DIR/E0232.rs:13:1\n    |\n-13 | #[rustc_on_unimplemented]\n+LL | #[rustc_on_unimplemented]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ value required here\n    |\n    = note: eg `#[rustc_on_unimplemented = \"foo\"]`"}, {"sha": "26c19707fa8ef9ede6ccf31642324f84e24ead7b", "filename": "src/test/ui/error-codes/E0243.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0243.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0243.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0243.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0243]: wrong number of type arguments: expected 1, found 0\n   --> $DIR/E0243.rs:12:17\n    |\n-12 | struct Bar { x: Foo }\n+LL | struct Bar { x: Foo }\n    |                 ^^^ expected 1 type argument\n \n error: aborting due to previous error"}, {"sha": "078c8e59261539343ebc38ce42a1831d9f11a448", "filename": "src/test/ui/error-codes/E0244.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0244.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0244.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0244.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0244]: wrong number of type arguments: expected 0, found 2\n   --> $DIR/E0244.rs:12:23\n    |\n-12 | struct Bar<S, T> { x: Foo<S, T> }\n+LL | struct Bar<S, T> { x: Foo<S, T> }\n    |                       ^^^^^^^^^ expected no type arguments\n \n error: aborting due to previous error"}, {"sha": "8186c4590f08ad01798ed6ed014b8520f2f3b39f", "filename": "src/test/ui/error-codes/E0252.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0252.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,15 +1,15 @@\n error[E0252]: the name `baz` is defined multiple times\n   --> $DIR/E0252.rs:12:5\n    |\n-11 | use foo::baz;\n+LL | use foo::baz;\n    |     -------- previous import of the type `baz` here\n-12 | use bar::baz; //~ ERROR E0252\n+LL | use bar::baz; //~ ERROR E0252\n    |     ^^^^^^^^ `baz` reimported here\n    |\n    = note: `baz` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-12 | use bar::baz as other_baz; //~ ERROR E0252\n+LL | use bar::baz as other_baz; //~ ERROR E0252\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "74e17e2aa957dfb707c7ec4a99efa6106392d3d5", "filename": "src/test/ui/error-codes/E0253.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0253.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0253.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0253.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0253]: `do_something` is not directly importable\n   --> $DIR/E0253.rs:17:5\n    |\n-17 | use foo::MyTrait::do_something;\n+LL | use foo::MyTrait::do_something;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot be imported directly\n \n error: aborting due to previous error"}, {"sha": "f1e1b56a790d8d14e7424b7e4d426b8311d6652f", "filename": "src/test/ui/error-codes/E0254.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0254.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0254.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0254.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,16 +1,16 @@\n error[E0254]: the name `alloc` is defined multiple times\n   --> $DIR/E0254.rs:22:5\n    |\n-14 | extern crate alloc;\n+LL | extern crate alloc;\n    | ------------------- previous import of the extern crate `alloc` here\n ...\n-22 | use foo::alloc;\n+LL | use foo::alloc;\n    |     ^^^^^^^^^^ `alloc` reimported here\n    |\n    = note: `alloc` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-22 | use foo::alloc as other_alloc;\n+LL | use foo::alloc as other_alloc;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "4d4053b1fb69b67baf18221790cf1997c906df38", "filename": "src/test/ui/error-codes/E0255.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0255.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,16 +1,16 @@\n error[E0255]: the name `foo` is defined multiple times\n   --> $DIR/E0255.rs:13:1\n    |\n-11 | use bar::foo;\n+LL | use bar::foo;\n    |     -------- previous import of the value `foo` here\n-12 | \n-13 | fn foo() {} //~ ERROR E0255\n+LL | \n+LL | fn foo() {} //~ ERROR E0255\n    | ^^^^^^^^ `foo` redefined here\n    |\n    = note: `foo` must be defined only once in the value namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-11 | use bar::foo as other_foo;\n+LL | use bar::foo as other_foo;\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "2cdd9aa66835d48cf3153062a09bff15384c4e20", "filename": "src/test/ui/error-codes/E0259.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0259.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0259.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0259.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0259]: the name `alloc` is defined multiple times\n   --> $DIR/E0259.rs:16:1\n    |\n-14 | extern crate alloc;\n+LL | extern crate alloc;\n    | ------------------- previous import of the extern crate `alloc` here\n-15 | \n-16 | extern crate libc as alloc;\n+LL | \n+LL | extern crate libc as alloc;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    | |\n    | `alloc` reimported here"}, {"sha": "a249c80ea2c60474ce89a1bb2a372dc0cb805ed2", "filename": "src/test/ui/error-codes/E0260.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0260.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0260.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0260.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,16 +1,16 @@\n error[E0260]: the name `alloc` is defined multiple times\n   --> $DIR/E0260.rs:16:1\n    |\n-14 | extern crate alloc;\n+LL | extern crate alloc;\n    | ------------------- previous import of the extern crate `alloc` here\n-15 | \n-16 | mod alloc {\n+LL | \n+LL | mod alloc {\n    | ^^^^^^^^^ `alloc` redefined here\n    |\n    = note: `alloc` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-14 | extern crate alloc as other_alloc;\n+LL | extern crate alloc as other_alloc;\n    |\n \n error: aborting due to previous error"}, {"sha": "a12878ab8964e3df1050806ff6a85ffbb9efbfa8", "filename": "src/test/ui/error-codes/E0261.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0261.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,13 +1,13 @@\n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/E0261.rs:11:12\n    |\n-11 | fn foo(x: &'a str) { } //~ ERROR E0261\n+LL | fn foo(x: &'a str) { } //~ ERROR E0261\n    |            ^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/E0261.rs:15:9\n    |\n-15 |     x: &'a str, //~ ERROR E0261\n+LL |     x: &'a str, //~ ERROR E0261\n    |         ^^ undeclared lifetime\n \n error: aborting due to 2 previous errors"}, {"sha": "8e9327b29f7b20be025513919033eebe206e3fff", "filename": "src/test/ui/error-codes/E0262.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0262.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0262.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0262.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0262]: invalid lifetime parameter name: `'static`\n   --> $DIR/E0262.rs:11:8\n    |\n-11 | fn foo<'static>(x: &'static str) { } //~ ERROR E0262\n+LL | fn foo<'static>(x: &'static str) { } //~ ERROR E0262\n    |        ^^^^^^^ 'static is a reserved lifetime name\n \n error: aborting due to previous error"}, {"sha": "9cd41bed984577bb35c2165f6e7d30572a5b7a55", "filename": "src/test/ui/error-codes/E0263.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0263.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0263.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0263.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0263]: lifetime name `'a` declared twice in the same scope\n   --> $DIR/E0263.rs:11:16\n    |\n-11 | fn foo<'a, 'b, 'a>(x: &'a str, y: &'b str) {\n+LL | fn foo<'a, 'b, 'a>(x: &'a str, y: &'b str) {\n    |        --      ^^ declared twice\n    |        |\n    |        previous declaration here"}, {"sha": "aad8002fc4647fbf084ccea0f87d91298874134f", "filename": "src/test/ui/error-codes/E0264.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0264.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0264]: unknown external lang item: `cake`\n   --> $DIR/E0264.rs:15:5\n    |\n-15 |     fn cake(); //~ ERROR E0264\n+LL |     fn cake(); //~ ERROR E0264\n    |     ^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "fbd7364d966bc775945240cf0dad5aefaf33ebcc", "filename": "src/test/ui/error-codes/E0267.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0267.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0267.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0267.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0267]: `break` inside of a closure\n   --> $DIR/E0267.rs:12:18\n    |\n-12 |     let w = || { break; }; //~ ERROR E0267\n+LL |     let w = || { break; }; //~ ERROR E0267\n    |                  ^^^^^ cannot break inside of a closure\n \n error: aborting due to previous error"}, {"sha": "377ec21c1dd2f99aa3f384093ae6ee26075c142d", "filename": "src/test/ui/error-codes/E0268.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0268.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0268.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0268.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0268]: `break` outside of loop\n   --> $DIR/E0268.rs:12:5\n    |\n-12 |     break; //~ ERROR E0268\n+LL |     break; //~ ERROR E0268\n    |     ^^^^^ cannot break outside of a loop\n \n error: aborting due to previous error"}, {"sha": "1a99afd6a9b0eaab1de858b3c281a377a4af757a", "filename": "src/test/ui/error-codes/E0271.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,15 +1,15 @@\n error[E0271]: type mismatch resolving `<i8 as Trait>::AssociatedType == u32`\n   --> $DIR/E0271.rs:20:5\n    |\n-20 |     foo(3_i8); //~ ERROR E0271\n+LL |     foo(3_i8); //~ ERROR E0271\n    |     ^^^ expected reference, found u32\n    |\n    = note: expected type `&'static str`\n               found type `u32`\n note: required by `foo`\n   --> $DIR/E0271.rs:13:1\n    |\n-13 | fn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n+LL | fn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "11ec85a5d09c1ccbfea298b343622e2a6f2f73ed", "filename": "src/test/ui/error-codes/E0275.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0275]: overflow evaluating the requirement `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: std::marker::Sized`\n   --> $DIR/E0275.rs:15:1\n    |\n-15 | impl<T> Foo for T where Bar<T>: Foo {} //~ ERROR E0275\n+LL | impl<T> Foo for T where Bar<T>: Foo {} //~ ERROR E0275\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding a `#![recursion_limit=\"128\"]` attribute to your crate\n@@ -72,7 +72,7 @@ error[E0275]: overflow evaluating the requirement `Bar<Bar<Bar<Bar<Bar<Bar<Bar<B\n note: required by `Foo`\n   --> $DIR/E0275.rs:11:1\n    |\n-11 | trait Foo {}\n+LL | trait Foo {}\n    | ^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "849e2aafd5a4aba1910644e869421442479f76a7", "filename": "src/test/ui/error-codes/E0276.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0276.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0276.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0276.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,10 +1,10 @@\n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/E0276.rs:16:5\n    |\n-12 |     fn foo<T>(x: T);\n+LL |     fn foo<T>(x: T);\n    |     ---------------- definition of `foo` from trait\n ...\n-16 |     fn foo<T>(x: T) where T: Copy {} //~ ERROR E0276\n+LL |     fn foo<T>(x: T) where T: Copy {} //~ ERROR E0276\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: std::marker::Copy`\n \n error: aborting due to previous error"}, {"sha": "987bb94bb958e2ffa5f03df7e63f29de3eb7f3a6", "filename": "src/test/ui/error-codes/E0277-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: the trait bound `*const u8: std::marker::Send` is not satisfied in `Foo`\n   --> $DIR/E0277-2.rs:26:5\n    |\n-26 |     is_send::<Foo>();\n+LL |     is_send::<Foo>();\n    |     ^^^^^^^^^^^^^^ `*const u8` cannot be sent between threads safely\n    |\n    = help: within `Foo`, the trait `std::marker::Send` is not implemented for `*const u8`\n@@ -11,7 +11,7 @@ error[E0277]: the trait bound `*const u8: std::marker::Send` is not satisfied in\n note: required by `is_send`\n   --> $DIR/E0277-2.rs:23:1\n    |\n-23 | fn is_send<T: Send>() { }\n+LL | fn is_send<T: Send>() { }\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "7541e161670f90c3874741d767cf3e23502ba5e1", "filename": "src/test/ui/error-codes/E0277.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c699b11a6a148f097f82eaa05202f8799bbc/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr?ref=29f5c699b11a6a148f097f82eaa05202f8799bbc", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: the trait bound `[u8]: std::marker::Sized` is not satisfied in `std::path::Path`\n   --> $DIR/E0277.rs:23:6\n    |\n-23 | fn f(p: Path) { }\n+LL | fn f(p: Path) { }\n    |      ^ `[u8]` does not have a constant size known at compile-time\n    |\n    = help: within `std::path::Path`, the trait `std::marker::Sized` is not implemented for `[u8]`\n@@ -11,13 +11,13 @@ error[E0277]: the trait bound `[u8]: std::marker::Sized` is not satisfied in `st\n error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/E0277.rs:27:5\n    |\n-27 |     some_func(5i32);\n+LL |     some_func(5i32);\n    |     ^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n    |\n note: required by `some_func`\n   --> $DIR/E0277.rs:19:1\n    |\n-19 | fn some_func<T: Foo>(foo: T) {\n+LL | fn some_func<T: Foo>(foo: T) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors"}]}