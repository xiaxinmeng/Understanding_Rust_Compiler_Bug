{"sha": "06ab83de2c72ebaf87b33133007a0dd0e79962db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2YWI4M2RlMmM3MmViYWY4N2IzMzEzMzAwN2EwZGQwZTc5OTYyZGI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-27T06:07:14Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-27T06:07:14Z"}, "message": "rustdoc: Prune undocumented resources", "tree": {"sha": "5fb07b4ca8ccfa46f94e9449598033f8b66f029b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fb07b4ca8ccfa46f94e9449598033f8b66f029b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06ab83de2c72ebaf87b33133007a0dd0e79962db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06ab83de2c72ebaf87b33133007a0dd0e79962db", "html_url": "https://github.com/rust-lang/rust/commit/06ab83de2c72ebaf87b33133007a0dd0e79962db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06ab83de2c72ebaf87b33133007a0dd0e79962db/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce7d1504934ce27560dbb54ece342c2443469468", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce7d1504934ce27560dbb54ece342c2443469468", "html_url": "https://github.com/rust-lang/rust/commit/ce7d1504934ce27560dbb54ece342c2443469468"}], "stats": {"total": 68, "additions": 67, "deletions": 1}, "files": [{"sha": "6f20870691e825acb1c9756223d55e23734fef26", "filename": "src/rustdoc/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06ab83de2c72ebaf87b33133007a0dd0e79962db/src%2Frustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ab83de2c72ebaf87b33133007a0dd0e79962db/src%2Frustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ffold.rs?ref=06ab83de2c72ebaf87b33133007a0dd0e79962db", "patch": "@@ -9,6 +9,7 @@ export default_seq_fold_mod;\n export default_seq_fold_fn;\n export default_seq_fold_const;\n export default_seq_fold_enum;\n+export default_seq_fold_res;\n export default_seq_fold_fnlist;\n \n enum fold<T> = t<T>;"}, {"sha": "11be00eea85abaca3e26be7878bad914a3ea2cb1", "filename": "src/rustdoc/prune_undoc_pass.rs", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/06ab83de2c72ebaf87b33133007a0dd0e79962db/src%2Frustdoc%2Fprune_undoc_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ab83de2c72ebaf87b33133007a0dd0e79962db/src%2Frustdoc%2Fprune_undoc_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_undoc_pass.rs?ref=06ab83de2c72ebaf87b33133007a0dd0e79962db", "patch": "@@ -22,10 +22,12 @@ fn run(\n         fold_fn: fold_fn,\n         fold_const: fold_const,\n         fold_enum: fold_enum,\n+        fold_res: fold_res,\n         fold_modlist: fold_modlist,\n         fold_fnlist: fold_fnlist,\n         fold_constlist: fold_constlist,\n-        fold_enumlist: fold_enumlist\n+        fold_enumlist: fold_enumlist,\n+        fold_reslist: fold_reslist\n         with *fold::default_seq_fold(ctxt)\n     });\n     fold.fold_crate(fold, doc)\n@@ -280,3 +282,66 @@ fn should_not_elide_enums_with_documented_variants() {\n     let doc = run(srv, doc);\n     assert vec::is_not_empty(*doc.topmod.enums);\n }\n+\n+fn fold_res(fold: fold::fold<ctxt>, doc: doc::resdoc) -> doc::resdoc {\n+    let doc = ~{\n+        args: vec::filter_map(doc.args) {|arg|\n+            if arg.desc != none {\n+                some(arg)\n+            } else {\n+                none\n+            }\n+        }\n+        with *fold::default_seq_fold_res(fold, doc)\n+    };\n+    fold.ctxt.have_docs =\n+        doc.brief != none\n+        || doc.desc != none\n+        || vec::is_not_empty(doc.args);\n+    ret doc;\n+}\n+\n+fn fold_reslist(\n+    fold: fold::fold<ctxt>,\n+    list: doc::reslist\n+) -> doc::reslist {\n+    doc::reslist(vec::filter_map(*list) {|doc|\n+        let doc = fold.fold_res(fold, doc);\n+        if fold.ctxt.have_docs {\n+            some(doc)\n+        } else {\n+            none\n+        }\n+    })\n+}\n+\n+#[test]\n+fn should_elide_undocumented_resources() {\n+    let source = \"resource r(a: bool) { }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = run(srv, doc);\n+    assert vec::is_empty(*doc.topmod.resources);\n+}\n+\n+#[test]\n+fn should_elide_undocumented_resource_args() {\n+    let source = \"#[doc = \\\"drunk\\\"]\\\n+                  resource r(a: bool) { }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = run(srv, doc);\n+    assert vec::is_empty(doc.topmod.resources[0].args);\n+}\n+\n+#[test]\n+fn should_not_elide_resources_with_documented_args() {\n+    let source = \"#[doc(args(a = \\\"drunk\\\"))]\\\n+                  resource r(a: bool) { }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = run(srv, doc);\n+    assert vec::is_not_empty(*doc.topmod.resources);\n+}"}]}