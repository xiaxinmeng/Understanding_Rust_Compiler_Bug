{"sha": "1390220ff25d61a36795eacdab3ea104dac6d957", "node_id": "C_kwDOAAsO6NoAKDEzOTAyMjBmZjI1ZDYxYTM2Nzk1ZWFjZGFiM2VhMTA0ZGFjNmQ5NTc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-26T01:37:06Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-26T01:48:34Z"}, "message": "Use impl generics when suggesting fix on copy impl", "tree": {"sha": "de3d9cc841370e2f008435833659e77b844ee56c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de3d9cc841370e2f008435833659e77b844ee56c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1390220ff25d61a36795eacdab3ea104dac6d957", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1390220ff25d61a36795eacdab3ea104dac6d957", "html_url": "https://github.com/rust-lang/rust/commit/1390220ff25d61a36795eacdab3ea104dac6d957", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1390220ff25d61a36795eacdab3ea104dac6d957/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dbae3ad19309bb541d9e76638e6aa4b5449f29a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dbae3ad19309bb541d9e76638e6aa4b5449f29a", "html_url": "https://github.com/rust-lang/rust/commit/6dbae3ad19309bb541d9e76638e6aa4b5449f29a"}], "stats": {"total": 121, "additions": 103, "deletions": 18}, "files": [{"sha": "c9138bcdab24677aa1ce5b0630353b972a013cc8", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1390220ff25d61a36795eacdab3ea104dac6d957/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1390220ff25d61a36795eacdab3ea104dac6d957/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=1390220ff25d61a36795eacdab3ea104dac6d957", "patch": "@@ -94,14 +94,6 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n \n             // We'll try to suggest constraining type parameters to fulfill the requirements of\n             // their `Copy` implementation.\n-            let mut generics = None;\n-            if let ty::Adt(def, _substs) = self_type.kind() {\n-                let self_def_id = def.did();\n-                if let Some(local) = self_def_id.as_local() {\n-                    let self_item = tcx.hir().expect_item(local);\n-                    generics = self_item.kind.generics();\n-                }\n-            }\n             let mut errors: BTreeMap<_, Vec<_>> = Default::default();\n             let mut bounds = vec![];\n \n@@ -163,16 +155,14 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n                     &format!(\"the `Copy` impl for `{}` requires that `{}`\", ty, error_predicate),\n                 );\n             }\n-            if let Some(generics) = generics {\n-                suggest_constraining_type_params(\n-                    tcx,\n-                    generics,\n-                    &mut err,\n-                    bounds.iter().map(|(param, constraint, def_id)| {\n-                        (param.as_str(), constraint.as_str(), *def_id)\n-                    }),\n-                );\n-            }\n+            suggest_constraining_type_params(\n+                tcx,\n+                tcx.hir().get_generics(impl_did).expect(\"impls always have generics\"),\n+                &mut err,\n+                bounds.iter().map(|(param, constraint, def_id)| {\n+                    (param.as_str(), constraint.as_str(), *def_id)\n+                }),\n+            );\n             err.emit();\n         }\n         Err(CopyImplementationError::NotAnAdt) => {"}, {"sha": "691e7553a0952ef5e1bf8807ffb975130d0056ca", "filename": "src/test/ui/suggestions/missing-bound-in-manual-copy-impl-2.fixed", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1390220ff25d61a36795eacdab3ea104dac6d957/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1390220ff25d61a36795eacdab3ea104dac6d957/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.fixed?ref=1390220ff25d61a36795eacdab3ea104dac6d957", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+\n+#[derive(Clone)]\n+struct Wrapper<T>(T);\n+\n+struct OnlyCopyIfDisplay<T>(std::marker::PhantomData<T>);\n+\n+impl<T: std::fmt::Display> Clone for OnlyCopyIfDisplay<T> {\n+    fn clone(&self) -> Self {\n+        OnlyCopyIfDisplay(std::marker::PhantomData)\n+    }\n+}\n+\n+impl<T: std::fmt::Display> Copy for OnlyCopyIfDisplay<T> {}\n+\n+impl<S: std::fmt::Display> Copy for Wrapper<OnlyCopyIfDisplay<S>> {}\n+//~^ ERROR the trait `Copy` may not be implemented for this type\n+\n+fn main() {}"}, {"sha": "e3185e7eff8551677d1da311b70b6c7a9f311544", "filename": "src/test/ui/suggestions/missing-bound-in-manual-copy-impl-2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1390220ff25d61a36795eacdab3ea104dac6d957/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1390220ff25d61a36795eacdab3ea104dac6d957/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.rs?ref=1390220ff25d61a36795eacdab3ea104dac6d957", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+\n+#[derive(Clone)]\n+struct Wrapper<T>(T);\n+\n+struct OnlyCopyIfDisplay<T>(std::marker::PhantomData<T>);\n+\n+impl<T: std::fmt::Display> Clone for OnlyCopyIfDisplay<T> {\n+    fn clone(&self) -> Self {\n+        OnlyCopyIfDisplay(std::marker::PhantomData)\n+    }\n+}\n+\n+impl<T: std::fmt::Display> Copy for OnlyCopyIfDisplay<T> {}\n+\n+impl<S> Copy for Wrapper<OnlyCopyIfDisplay<S>> {}\n+//~^ ERROR the trait `Copy` may not be implemented for this type\n+\n+fn main() {}"}, {"sha": "e0f405eedfa6947009c26f4000e653b4eaf22225", "filename": "src/test/ui/suggestions/missing-bound-in-manual-copy-impl-2.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1390220ff25d61a36795eacdab3ea104dac6d957/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1390220ff25d61a36795eacdab3ea104dac6d957/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.stderr?ref=1390220ff25d61a36795eacdab3ea104dac6d957", "patch": "@@ -0,0 +1,22 @@\n+error[E0204]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/missing-bound-in-manual-copy-impl-2.rs:16:9\n+   |\n+LL | struct Wrapper<T>(T);\n+   |                   - this field does not implement `Copy`\n+...\n+LL | impl<S> Copy for Wrapper<OnlyCopyIfDisplay<S>> {}\n+   |         ^^^^\n+   |\n+note: the `Copy` impl for `OnlyCopyIfDisplay<S>` requires that `S: std::fmt::Display`\n+  --> $DIR/missing-bound-in-manual-copy-impl-2.rs:4:19\n+   |\n+LL | struct Wrapper<T>(T);\n+   |                   ^\n+help: consider restricting type parameter `S`\n+   |\n+LL | impl<S: std::fmt::Display> Copy for Wrapper<OnlyCopyIfDisplay<S>> {}\n+   |       +++++++++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0204`."}, {"sha": "32a7215c5bdc3ef0ecaff5f10762ce8e420f8024", "filename": "src/test/ui/suggestions/missing-bound-in-manual-copy-impl.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1390220ff25d61a36795eacdab3ea104dac6d957/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1390220ff25d61a36795eacdab3ea104dac6d957/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.fixed?ref=1390220ff25d61a36795eacdab3ea104dac6d957", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+\n+#[derive(Clone)]\n+struct Wrapper<T>(T);\n+\n+impl<S: Copy> Copy for Wrapper<S> {}\n+//~^ ERROR the trait `Copy` may not be implemented for this type\n+\n+fn main() {}"}, {"sha": "c688f4d41ee9b3ee232d4d26848f7df8f0abac04", "filename": "src/test/ui/suggestions/missing-bound-in-manual-copy-impl.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1390220ff25d61a36795eacdab3ea104dac6d957/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1390220ff25d61a36795eacdab3ea104dac6d957/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.rs?ref=1390220ff25d61a36795eacdab3ea104dac6d957", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+\n+#[derive(Clone)]\n+struct Wrapper<T>(T);\n+\n+impl<S> Copy for Wrapper<S> {}\n+//~^ ERROR the trait `Copy` may not be implemented for this type\n+\n+fn main() {}"}, {"sha": "218988511dbc34f98a45130334f013b95f31eb29", "filename": "src/test/ui/suggestions/missing-bound-in-manual-copy-impl.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1390220ff25d61a36795eacdab3ea104dac6d957/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1390220ff25d61a36795eacdab3ea104dac6d957/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.stderr?ref=1390220ff25d61a36795eacdab3ea104dac6d957", "patch": "@@ -0,0 +1,17 @@\n+error[E0204]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/missing-bound-in-manual-copy-impl.rs:6:9\n+   |\n+LL | struct Wrapper<T>(T);\n+   |                   - this field does not implement `Copy`\n+LL |\n+LL | impl<S> Copy for Wrapper<S> {}\n+   |         ^^^^\n+   |\n+help: consider restricting type parameter `S`\n+   |\n+LL | impl<S: Copy> Copy for Wrapper<S> {}\n+   |       ++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0204`."}]}