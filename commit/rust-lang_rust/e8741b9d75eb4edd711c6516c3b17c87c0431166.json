{"sha": "e8741b9d75eb4edd711c6516c3b17c87c0431166", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NzQxYjlkNzVlYjRlZGQ3MTFjNjUxNmMzYjE3Yzg3YzA0MzExNjY=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-03T17:49:41Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-04T17:38:20Z"}, "message": "Use new expansion feature in goto_definition", "tree": {"sha": "49c2f6a78a35fcf7399a40b96805caa68aec6172", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49c2f6a78a35fcf7399a40b96805caa68aec6172"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8741b9d75eb4edd711c6516c3b17c87c0431166", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8741b9d75eb4edd711c6516c3b17c87c0431166", "html_url": "https://github.com/rust-lang/rust/commit/e8741b9d75eb4edd711c6516c3b17c87c0431166", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8741b9d75eb4edd711c6516c3b17c87c0431166/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67226ebc8288b9489867ea2454f9d976b65ff15e", "url": "https://api.github.com/repos/rust-lang/rust/commits/67226ebc8288b9489867ea2454f9d976b65ff15e", "html_url": "https://github.com/rust-lang/rust/commit/67226ebc8288b9489867ea2454f9d976b65ff15e"}], "stats": {"total": 159, "additions": 114, "deletions": 45}, "files": [{"sha": "0c3e25ce67c922fde5ce09226c36da84f1e14866", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 90, "deletions": 32, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/e8741b9d75eb4edd711c6516c3b17c87c0431166/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8741b9d75eb4edd711c6516c3b17c87c0431166/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=e8741b9d75eb4edd711c6516c3b17c87c0431166", "patch": "@@ -29,6 +29,20 @@ pub struct NavigationTarget {\n     docs: Option<String>,\n }\n \n+fn find_range_from_node(\n+    db: &RootDatabase,\n+    src: hir::HirFileId,\n+    node: &SyntaxNode,\n+) -> (FileId, TextRange) {\n+    let text_range = node.text_range();\n+    let (file_id, text_range) = src\n+        .parent_expansion(db)\n+        .and_then(|(files, expansion_info)| expansion_info.find_range(text_range, files))\n+        .unwrap_or((src, text_range));\n+\n+    (file_id.original_file(db), text_range)\n+}\n+\n impl NavigationTarget {\n     /// When `focus_range` is specified, returns it. otherwise\n     /// returns `full_range`\n@@ -72,8 +86,12 @@ impl NavigationTarget {\n         self.focus_range\n     }\n \n-    pub(crate) fn from_bind_pat(file_id: FileId, pat: &ast::BindPat) -> NavigationTarget {\n-        NavigationTarget::from_named(file_id, pat, None, None)\n+    pub(crate) fn from_bind_pat(\n+        db: &RootDatabase,\n+        file_id: FileId,\n+        pat: &ast::BindPat,\n+    ) -> NavigationTarget {\n+        NavigationTarget::from_named(db, file_id.into(), pat, None, None)\n     }\n \n     pub(crate) fn from_symbol(db: &RootDatabase, symbol: FileSymbol) -> NavigationTarget {\n@@ -96,7 +114,7 @@ impl NavigationTarget {\n     ) -> NavigationTarget {\n         let parse = db.parse(file_id);\n         let pat = pat.to_node(parse.tree().syntax());\n-        NavigationTarget::from_bind_pat(file_id, &pat)\n+        NavigationTarget::from_bind_pat(db, file_id, &pat)\n     }\n \n     pub(crate) fn from_self_param(\n@@ -119,31 +137,47 @@ impl NavigationTarget {\n \n     pub(crate) fn from_module(db: &RootDatabase, module: hir::Module) -> NavigationTarget {\n         let src = module.definition_source(db);\n-        let file_id = src.file_id.original_file(db);\n         let name = module.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n+\n         match src.ast {\n             ModuleSource::SourceFile(node) => {\n-                NavigationTarget::from_syntax(file_id, name, None, node.syntax(), None, None)\n+                let (file_id, text_range) = find_range_from_node(db, src.file_id, node.syntax());\n+\n+                NavigationTarget::from_syntax(\n+                    file_id,\n+                    name,\n+                    None,\n+                    text_range,\n+                    node.syntax(),\n+                    None,\n+                    None,\n+                )\n+            }\n+            ModuleSource::Module(node) => {\n+                let (file_id, text_range) = find_range_from_node(db, src.file_id, node.syntax());\n+\n+                NavigationTarget::from_syntax(\n+                    file_id,\n+                    name,\n+                    None,\n+                    text_range,\n+                    node.syntax(),\n+                    node.doc_comment_text(),\n+                    node.short_label(),\n+                )\n             }\n-            ModuleSource::Module(node) => NavigationTarget::from_syntax(\n-                file_id,\n-                name,\n-                None,\n-                node.syntax(),\n-                node.doc_comment_text(),\n-                node.short_label(),\n-            ),\n         }\n     }\n \n     pub(crate) fn from_module_to_decl(db: &RootDatabase, module: hir::Module) -> NavigationTarget {\n         let name = module.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n         if let Some(src) = module.declaration_source(db) {\n-            let file_id = src.file_id.original_file(db);\n+            let (file_id, text_range) = find_range_from_node(db, src.file_id, src.ast.syntax());\n             return NavigationTarget::from_syntax(\n                 file_id,\n                 name,\n                 None,\n+                text_range,\n                 src.ast.syntax(),\n                 src.ast.doc_comment_text(),\n                 src.ast.short_label(),\n@@ -154,13 +188,25 @@ impl NavigationTarget {\n \n     pub(crate) fn from_field(db: &RootDatabase, field: hir::StructField) -> NavigationTarget {\n         let src = field.source(db);\n-        let file_id = src.file_id.original_file(db);\n         match src.ast {\n-            FieldSource::Named(it) => {\n-                NavigationTarget::from_named(file_id, &it, it.doc_comment_text(), it.short_label())\n-            }\n+            FieldSource::Named(it) => NavigationTarget::from_named(\n+                db,\n+                src.file_id,\n+                &it,\n+                it.doc_comment_text(),\n+                it.short_label(),\n+            ),\n             FieldSource::Pos(it) => {\n-                NavigationTarget::from_syntax(file_id, \"\".into(), None, it.syntax(), None, None)\n+                let (file_id, text_range) = find_range_from_node(db, src.file_id, it.syntax());\n+                NavigationTarget::from_syntax(\n+                    file_id,\n+                    \"\".into(),\n+                    None,\n+                    text_range,\n+                    it.syntax(),\n+                    None,\n+                    None,\n+                )\n             }\n         }\n     }\n@@ -172,7 +218,8 @@ impl NavigationTarget {\n     {\n         let src = def.source(db);\n         NavigationTarget::from_named(\n-            src.file_id.original_file(db),\n+            db,\n+            src.file_id,\n             &src.ast,\n             src.ast.doc_comment_text(),\n             src.ast.short_label(),\n@@ -212,10 +259,13 @@ impl NavigationTarget {\n         impl_block: hir::ImplBlock,\n     ) -> NavigationTarget {\n         let src = impl_block.source(db);\n+        let (file_id, text_range) = find_range_from_node(db, src.file_id, src.ast.syntax());\n+\n         NavigationTarget::from_syntax(\n-            src.file_id.original_file(db),\n+            file_id,\n             \"impl\".into(),\n             None,\n+            text_range,\n             src.ast.syntax(),\n             None,\n             None,\n@@ -236,12 +286,7 @@ impl NavigationTarget {\n     pub(crate) fn from_macro_def(db: &RootDatabase, macro_call: hir::MacroDef) -> NavigationTarget {\n         let src = macro_call.source(db);\n         log::debug!(\"nav target {:#?}\", src.ast.syntax());\n-        NavigationTarget::from_named(\n-            src.file_id.original_file(db),\n-            &src.ast,\n-            src.ast.doc_comment_text(),\n-            None,\n-        )\n+        NavigationTarget::from_named(db, src.file_id, &src.ast, src.ast.doc_comment_text(), None)\n     }\n \n     #[cfg(test)]\n@@ -270,21 +315,35 @@ impl NavigationTarget {\n \n     /// Allows `NavigationTarget` to be created from a `NameOwner`\n     pub(crate) fn from_named(\n-        file_id: FileId,\n+        db: &RootDatabase,\n+        file_id: hir::HirFileId,\n         node: &impl ast::NameOwner,\n         docs: Option<String>,\n         description: Option<String>,\n     ) -> NavigationTarget {\n         //FIXME: use `_` instead of empty string\n         let name = node.name().map(|it| it.text().clone()).unwrap_or_default();\n-        let focus_range = node.name().map(|it| it.syntax().text_range());\n-        NavigationTarget::from_syntax(file_id, name, focus_range, node.syntax(), docs, description)\n+\n+        let focus_range = node.name().map(|it| find_range_from_node(db, file_id, it.syntax()).1);\n+\n+        let (file_id, full_range) = find_range_from_node(db, file_id, node.syntax());\n+\n+        NavigationTarget::from_syntax(\n+            file_id,\n+            name,\n+            focus_range,\n+            full_range,\n+            node.syntax(),\n+            docs,\n+            description,\n+        )\n     }\n \n     fn from_syntax(\n         file_id: FileId,\n         name: SmolStr,\n         focus_range: Option<TextRange>,\n+        full_range: TextRange,\n         node: &SyntaxNode,\n         docs: Option<String>,\n         description: Option<String>,\n@@ -293,9 +352,8 @@ impl NavigationTarget {\n             file_id,\n             name,\n             kind: node.kind(),\n-            full_range: node.text_range(),\n+            full_range,\n             focus_range,\n-            // ptr: Some(LocalSyntaxPtr::new(node)),\n             container_name: None,\n             description,\n             docs,"}, {"sha": "97127706f3c3cfa8c222544ef92a058094ff9e4c", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e8741b9d75eb4edd711c6516c3b17c87c0431166/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8741b9d75eb4edd711c6516c3b17c87c0431166/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=e8741b9d75eb4edd711c6516c3b17c87c0431166", "patch": "@@ -101,99 +101,110 @@ pub(crate) fn name_definition(\n         }\n     }\n \n-    if let Some(nav) = named_target(file_id, &parent) {\n+    if let Some(nav) = named_target(db, file_id, &parent) {\n         return Some(vec![nav]);\n     }\n \n     None\n }\n \n-fn named_target(file_id: FileId, node: &SyntaxNode) -> Option<NavigationTarget> {\n+fn named_target(db: &RootDatabase, file_id: FileId, node: &SyntaxNode) -> Option<NavigationTarget> {\n     match_ast! {\n         match node {\n             ast::StructDef(it) => {\n                 Some(NavigationTarget::from_named(\n-                    file_id,\n+                    db,\n+                    file_id.into(),\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::EnumDef(it) => {\n                 Some(NavigationTarget::from_named(\n-                    file_id,\n+                    db,\n+                    file_id.into(),\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::EnumVariant(it) => {\n                 Some(NavigationTarget::from_named(\n-                    file_id,\n+                    db,\n+                    file_id.into(),\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::FnDef(it) => {\n                 Some(NavigationTarget::from_named(\n-                    file_id,\n+                    db,\n+                    file_id.into(),\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::TypeAliasDef(it) => {\n                 Some(NavigationTarget::from_named(\n-                    file_id,\n+                    db,\n+                    file_id.into(),\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::ConstDef(it) => {\n                 Some(NavigationTarget::from_named(\n-                    file_id,\n+                    db,\n+                    file_id.into(),\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::StaticDef(it) => {\n                 Some(NavigationTarget::from_named(\n-                    file_id,\n+                    db,\n+                    file_id.into(),\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::TraitDef(it) => {\n                 Some(NavigationTarget::from_named(\n-                    file_id,\n+                    db,\n+                    file_id.into(),\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::RecordFieldDef(it) => {\n                 Some(NavigationTarget::from_named(\n-                    file_id,\n+                    db,\n+                    file_id.into(),\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::Module(it) => {\n                 Some(NavigationTarget::from_named(\n-                    file_id,\n+                    db,\n+                    file_id.into(),\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::MacroCall(it) => {\n                 Some(NavigationTarget::from_named(\n-                    file_id,\n+                    db,\n+                    file_id.into(),\n                     &it,\n                     it.doc_comment_text(),\n                     None,"}]}