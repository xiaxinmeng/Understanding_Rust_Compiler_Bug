{"sha": "b052fbb54b09f4bf5e428929758671419de87a63", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNTJmYmI1NGIwOWY0YmY1ZTQyODkyOTc1ODY3MTQxOWRlODdhNjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-09T16:10:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-09T16:10:22Z"}, "message": "Apply suggestions from code review\n\nCo-Authored-By: Mazdak Farrokhzad <twingoow@gmail.com>", "tree": {"sha": "6fad477877152bc78178d4ea137fec613790feea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fad477877152bc78178d4ea137fec613790feea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b052fbb54b09f4bf5e428929758671419de87a63", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdJLxuCRBK7hj4Ov3rIwAAdHIIAJXuXAYOGHh/yfO+CTrz3SvO\n23CROJ9ZvnCePVMbE9XbBodZw6pTrQ1J1TrB7P7hg+br7PP4LK/F5asfVuffh8IA\nDGVaiRZviE9L+a4oYVjnTriTNBhqsf2lbqQF0e+dmbmu908IEpa+PrlkhZuKlv1H\njeSabtkWWTzVoJJ01UIAvut/++DR5qgkJSN07VTp7I5/MtL4h4IyuJ1T5tbpYdWt\n+McXgOX9iCEA2Vac65u+isTasjl41px5z9lIkJrcRVmdJHZB/dq/srnOQauhpbHr\nEP6PgKRNBLzf/dgZS58EWIJK87j+yCST25KJyXH3aGWDL0Jb9eky2MPYfdx8uVs=\n=bTJB\n-----END PGP SIGNATURE-----\n", "payload": "tree 6fad477877152bc78178d4ea137fec613790feea\nparent 8175a1f905d1bf8ffd33c1be48476161d30b885e\nauthor Aleksey Kladov <aleksey.kladov@gmail.com> 1562688622 +0300\ncommitter GitHub <noreply@github.com> 1562688622 +0300\n\nApply suggestions from code review\n\nCo-Authored-By: Mazdak Farrokhzad <twingoow@gmail.com>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b052fbb54b09f4bf5e428929758671419de87a63", "html_url": "https://github.com/rust-lang/rust/commit/b052fbb54b09f4bf5e428929758671419de87a63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b052fbb54b09f4bf5e428929758671419de87a63/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8175a1f905d1bf8ffd33c1be48476161d30b885e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8175a1f905d1bf8ffd33c1be48476161d30b885e", "html_url": "https://github.com/rust-lang/rust/commit/8175a1f905d1bf8ffd33c1be48476161d30b885e"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "2e999a0682b402d04002111bd0be5adb13aaf9cf", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b052fbb54b09f4bf5e428929758671419de87a63/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b052fbb54b09f4bf5e428929758671419de87a63/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=b052fbb54b09f4bf5e428929758671419de87a63", "patch": "@@ -149,7 +149,7 @@ macro_rules! assert_ne {\n /// `debug_assert!` statements unless `-C debug-assertions` is passed to the\n /// compiler. This makes `debug_assert!` useful for checks that are too\n /// expensive to be present in a release build but may be helpful during\n-/// development. `debug_assert!` statements are always type checked.\n+/// development. The result of expanding `debug_assert!` is always type checked.\n ///\n /// An unchecked assertion allows a program in an inconsistent state to keep\n /// running, which might have unexpected consequences but does not introduce\n@@ -194,7 +194,7 @@ macro_rules! debug_assert {\n /// `debug_assert_eq!` statements unless `-C debug-assertions` is passed to the\n /// compiler. This makes `debug_assert_eq!` useful for checks that are too\n /// expensive to be present in a release build but may be helpful during\n-/// development. `debug_assert_eq!` statements are always type checked.\n+/// development. The result of expanding `debug_assert_eq!` is always type checked.\n ///\n /// [`assert_eq!`]: ../std/macro.assert_eq.html\n ///\n@@ -221,7 +221,7 @@ macro_rules! debug_assert_eq {\n /// `debug_assert_ne!` statements unless `-C debug-assertions` is passed to the\n /// compiler. This makes `debug_assert_ne!` useful for checks that are too\n /// expensive to be present in a release build but may be helpful during\n-/// development. `debug_assert_ne!` statements are always type checked.\n+/// development. The result of expanding `debug_assert_ne!` is always type checked.\n ///\n /// [`assert_ne!`]: ../std/macro.assert_ne.html\n ///"}]}