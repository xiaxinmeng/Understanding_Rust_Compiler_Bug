{"sha": "1308d99cacd68057a20a933b8cb223210da6b9c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMDhkOTljYWNkNjgwNTdhMjBhOTMzYjhjYjIyMzIxMGRhNmI5YzI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-30T17:18:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-30T17:18:37Z"}, "message": "Rollup merge of #50312 - Pazzaz:master, r=GuillaumeGomez\n\nAdd more links in panic docs\n\nFixes #48695 by adding a link to `AssertUnwindSafe`. Also added some other links in the module's docs to make things clearer.", "tree": {"sha": "f662681aa31459a2a53979544ed22c3352d022cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f662681aa31459a2a53979544ed22c3352d022cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1308d99cacd68057a20a933b8cb223210da6b9c2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa50/tCRBK7hj4Ov3rIwAAdHIIAJcE9musaf9B7EXWJahpi9A3\niHX4PFi4ZoI00fMVKfXpnXR7L1iZB23ZD38gafcT82/uOlcGwClha5m05oQ7rw2f\nIzT29+I2t5lhxyZqy2jDc7hzbysAWUXPRzoSbj1PLiXl9+eBGmDvnWCHZvX1u/gt\n27Yxt3Ppr1WLl4cXVQbB9YOKRq0xW+mPi9tU+vgnyeskNQH9QRQTcZKSo+L6zmCB\nr/atxzwRDi609XYquKnXpta9fxxTxKVb56uO6BSkbjKa8bw62EFPq8X7vGm2dOA8\nMeCfaSLwO31Cz2pM3FxM1d/Dy3BIzZuQHw4ootc/0+pQ7uUuemNnsNAU268F/IU=\n=F8NK\n-----END PGP SIGNATURE-----\n", "payload": "tree f662681aa31459a2a53979544ed22c3352d022cf\nparent b88c152784f36825a2a75b062db6cc55ff02297f\nparent 368fe37c226c6e067ba4fa93cab0bbd5b1c09e6c\nauthor kennytm <kennytm@gmail.com> 1525108717 +0800\ncommitter GitHub <noreply@github.com> 1525108717 +0800\n\nRollup merge of #50312 - Pazzaz:master, r=GuillaumeGomez\n\nAdd more links in panic docs\n\nFixes #48695 by adding a link to `AssertUnwindSafe`. Also added some other links in the module's docs to make things clearer.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1308d99cacd68057a20a933b8cb223210da6b9c2", "html_url": "https://github.com/rust-lang/rust/commit/1308d99cacd68057a20a933b8cb223210da6b9c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1308d99cacd68057a20a933b8cb223210da6b9c2/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b88c152784f36825a2a75b062db6cc55ff02297f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b88c152784f36825a2a75b062db6cc55ff02297f", "html_url": "https://github.com/rust-lang/rust/commit/b88c152784f36825a2a75b062db6cc55ff02297f"}, {"sha": "368fe37c226c6e067ba4fa93cab0bbd5b1c09e6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/368fe37c226c6e067ba4fa93cab0bbd5b1c09e6c", "html_url": "https://github.com/rust-lang/rust/commit/368fe37c226c6e067ba4fa93cab0bbd5b1c09e6c"}], "stats": {"total": 59, "additions": 40, "deletions": 19}, "files": [{"sha": "229034eb7790b029c30b087b733212441fb4c581", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 33, "deletions": 18, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1308d99cacd68057a20a933b8cb223210da6b9c2/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1308d99cacd68057a20a933b8cb223210da6b9c2/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=1308d99cacd68057a20a933b8cb223210da6b9c2", "patch": "@@ -31,10 +31,14 @@ pub use core::panic::{PanicInfo, Location};\n /// A marker trait which represents \"panic safe\" types in Rust.\n ///\n /// This trait is implemented by default for many types and behaves similarly in\n-/// terms of inference of implementation to the `Send` and `Sync` traits. The\n-/// purpose of this trait is to encode what types are safe to cross a `catch_unwind`\n+/// terms of inference of implementation to the [`Send`] and [`Sync`] traits. The\n+/// purpose of this trait is to encode what types are safe to cross a [`catch_unwind`]\n /// boundary with no fear of unwind safety.\n ///\n+/// [`Send`]: ../marker/trait.Send.html\n+/// [`Sync`]: ../marker/trait.Sync.html\n+/// [`catch_unwind`]: ./fn.catch_unwind.html\n+///\n /// ## What is unwind safety?\n ///\n /// In Rust a function can \"return\" early if it either panics or calls a\n@@ -95,12 +99,13 @@ pub use core::panic::{PanicInfo, Location};\n ///\n /// ## When should `UnwindSafe` be used?\n ///\n-/// Is not intended that most types or functions need to worry about this trait.\n-/// It is only used as a bound on the `catch_unwind` function and as mentioned above,\n-/// the lack of `unsafe` means it is mostly an advisory. The `AssertUnwindSafe`\n-/// wrapper struct in this module can be used to force this trait to be\n-/// implemented for any closed over variables passed to the `catch_unwind` function\n-/// (more on this below).\n+/// It is not intended that most types or functions need to worry about this trait.\n+/// It is only used as a bound on the `catch_unwind` function and as mentioned\n+/// above, the lack of `unsafe` means it is mostly an advisory. The\n+/// [`AssertUnwindSafe`] wrapper struct can be used to force this trait to be\n+/// implemented for any closed over variables passed to `catch_unwind`.\n+///\n+/// [`AssertUnwindSafe`]: ./struct.AssertUnwindSafe.html\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n #[rustc_on_unimplemented = \"the type {Self} may not be safely transferred \\\n                             across an unwind boundary\"]\n@@ -109,11 +114,14 @@ pub auto trait UnwindSafe {}\n /// A marker trait representing types where a shared reference is considered\n /// unwind safe.\n ///\n-/// This trait is namely not implemented by `UnsafeCell`, the root of all\n+/// This trait is namely not implemented by [`UnsafeCell`], the root of all\n /// interior mutability.\n ///\n /// This is a \"helper marker trait\" used to provide impl blocks for the\n-/// `UnwindSafe` trait, for more information see that documentation.\n+/// [`UnwindSafe`] trait, for more information see that documentation.\n+///\n+/// [`UnsafeCell`]: ../cell/struct.UnsafeCell.html\n+/// [`UnwindSafe`]: ./trait.UnwindSafe.html\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n #[rustc_on_unimplemented = \"the type {Self} may contain interior mutability \\\n                             and a reference may not be safely transferrable \\\n@@ -122,14 +130,15 @@ pub auto trait RefUnwindSafe {}\n \n /// A simple wrapper around a type to assert that it is unwind safe.\n ///\n-/// When using `catch_unwind` it may be the case that some of the closed over\n+/// When using [`catch_unwind`] it may be the case that some of the closed over\n /// variables are not unwind safe. For example if `&mut T` is captured the\n /// compiler will generate a warning indicating that it is not unwind safe. It\n /// may not be the case, however, that this is actually a problem due to the\n-/// specific usage of `catch_unwind` if unwind safety is specifically taken into\n+/// specific usage of [`catch_unwind`] if unwind safety is specifically taken into\n /// account. This wrapper struct is useful for a quick and lightweight\n /// annotation that a variable is indeed unwind safe.\n ///\n+/// [`catch_unwind`]: ./fn.catch_unwind.html\n /// # Examples\n ///\n /// One way to use `AssertUnwindSafe` is to assert that the entire closure\n@@ -318,18 +327,22 @@ impl<T: fmt::Debug> fmt::Debug for AssertUnwindSafe<T> {\n /// panic and allowing a graceful handling of the error.\n ///\n /// It is **not** recommended to use this function for a general try/catch\n-/// mechanism. The `Result` type is more appropriate to use for functions that\n+/// mechanism. The [`Result`] type is more appropriate to use for functions that\n /// can fail on a regular basis. Additionally, this function is not guaranteed\n /// to catch all panics, see the \"Notes\" section below.\n ///\n-/// The closure provided is required to adhere to the `UnwindSafe` trait to ensure\n+/// [`Result`]: ../result/enum.Result.html\n+///\n+/// The closure provided is required to adhere to the [`UnwindSafe`] trait to ensure\n /// that all captured variables are safe to cross this boundary. The purpose of\n /// this bound is to encode the concept of [exception safety][rfc] in the type\n /// system. Most usage of this function should not need to worry about this\n /// bound as programs are naturally unwind safe without `unsafe` code. If it\n-/// becomes a problem the associated `AssertUnwindSafe` wrapper type in this\n-/// module can be used to quickly assert that the usage here is indeed unwind\n-/// safe.\n+/// becomes a problem the [`AssertUnwindSafe`] wrapper struct can be used to quickly\n+/// assert that the usage here is indeed unwind safe.\n+///\n+/// [`AssertUnwindSafe`]: ./struct.AssertUnwindSafe.html\n+/// [`UnwindSafe`]: ./trait.UnwindSafe.html\n ///\n /// [rfc]: https://github.com/rust-lang/rfcs/blob/master/text/1236-stabilize-catch-panic.md\n ///\n@@ -364,9 +377,11 @@ pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {\n \n /// Triggers a panic without invoking the panic hook.\n ///\n-/// This is designed to be used in conjunction with `catch_unwind` to, for\n+/// This is designed to be used in conjunction with [`catch_unwind`] to, for\n /// example, carry a panic across a layer of C code.\n ///\n+/// [`catch_unwind`]: ./fn.catch_unwind.html\n+///\n /// # Notes\n ///\n /// Note that panics in Rust are not always implemented via unwinding, but they"}, {"sha": "403056240bf57c3e7d917a9dcd1bb7f58ce34b23", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1308d99cacd68057a20a933b8cb223210da6b9c2/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1308d99cacd68057a20a933b8cb223210da6b9c2/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=1308d99cacd68057a20a933b8cb223210da6b9c2", "patch": "@@ -76,7 +76,9 @@ static mut HOOK: Hook = Hook::Default;\n /// is invoked. As such, the hook will run with both the aborting and unwinding\n /// runtimes. The default hook prints a message to standard error and generates\n /// a backtrace if requested, but this behavior can be customized with the\n-/// `set_hook` and `take_hook` functions.\n+/// `set_hook` and [`take_hook`] functions.\n+///\n+/// [`take_hook`]: ./fn.take_hook.html\n ///\n /// The hook is provided with a `PanicInfo` struct which contains information\n /// about the origin of the panic, including the payload passed to `panic!` and\n@@ -121,6 +123,10 @@ pub fn set_hook(hook: Box<Fn(&PanicInfo) + 'static + Sync + Send>) {\n \n /// Unregisters the current panic hook, returning it.\n ///\n+/// *See also the function [`set_hook`].*\n+///\n+/// [`set_hook`]: ./fn.set_hook.html\n+///\n /// If no custom hook is registered, the default hook will be returned.\n ///\n /// # Panics"}]}