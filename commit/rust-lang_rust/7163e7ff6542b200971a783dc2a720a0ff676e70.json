{"sha": "7163e7ff6542b200971a783dc2a720a0ff676e70", "node_id": "C_kwDOAAsO6NoAKDcxNjNlN2ZmNjU0MmIyMDA5NzFhNzgzZGMyYTcyMGEwZmY2NzZlNzA", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-18T20:11:21Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-18T20:13:29Z"}, "message": "Suggest a fix for `NonZero*` <- `*` coercion error", "tree": {"sha": "85aae057c49d08df0371acf9a704f1b3243f4adc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85aae057c49d08df0371acf9a704f1b3243f4adc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7163e7ff6542b200971a783dc2a720a0ff676e70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7163e7ff6542b200971a783dc2a720a0ff676e70", "html_url": "https://github.com/rust-lang/rust/commit/7163e7ff6542b200971a783dc2a720a0ff676e70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7163e7ff6542b200971a783dc2a720a0ff676e70/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37c21d6fc714748bb41bb1b9a53152632849a3f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/37c21d6fc714748bb41bb1b9a53152632849a3f3", "html_url": "https://github.com/rust-lang/rust/commit/37c21d6fc714748bb41bb1b9a53152632849a3f3"}], "stats": {"total": 105, "additions": 105, "deletions": 0}, "files": [{"sha": "6ddcfbb05dc70ddf1c11aa7766debd18350e1f88", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7163e7ff6542b200971a783dc2a720a0ff676e70/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7163e7ff6542b200971a783dc2a720a0ff676e70/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=7163e7ff6542b200971a783dc2a720a0ff676e70", "patch": "@@ -223,6 +223,16 @@ symbols! {\n         LintPass,\n         Mutex,\n         N,\n+        NonZeroI128,\n+        NonZeroI16,\n+        NonZeroI32,\n+        NonZeroI64,\n+        NonZeroI8,\n+        NonZeroU128,\n+        NonZeroU16,\n+        NonZeroU32,\n+        NonZeroU64,\n+        NonZeroU8,\n         None,\n         Ok,\n         Option,"}, {"sha": "31da5cfe7fa66e1714dcd7ba7298603f97749c19", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7163e7ff6542b200971a783dc2a720a0ff676e70/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7163e7ff6542b200971a783dc2a720a0ff676e70/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=7163e7ff6542b200971a783dc2a720a0ff676e70", "patch": "@@ -34,6 +34,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.annotate_expected_due_to_let_ty(err, expr, error);\n         self.suggest_deref_ref_or_into(err, expr, expected, expr_ty, expected_ty_expr);\n         self.suggest_compatible_variants(err, expr, expected, expr_ty);\n+        self.suggest_non_zero_new_unwrap(err, expr, expected, expr_ty);\n         if self.suggest_calling_boxed_future_when_appropriate(err, expr, expected, expr_ty) {\n             return;\n         }\n@@ -418,6 +419,59 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn suggest_non_zero_new_unwrap(\n+        &self,\n+        err: &mut Diagnostic,\n+        expr: &hir::Expr<'_>,\n+        expected: Ty<'tcx>,\n+        expr_ty: Ty<'tcx>,\n+    ) {\n+        let tcx = self.tcx;\n+        let (adt, unwrap) = match expected.kind() {\n+            // In case Option<NonZero*> is wanted, but * is provided, suggest calling new\n+            ty::Adt(adt, substs) if tcx.is_diagnostic_item(sym::Option, adt.did()) => {\n+                // Unwrap option\n+                let Some(fst) = substs.first() else { return };\n+                let ty::Adt(adt, _) = fst.expect_ty().kind() else { return };\n+\n+                (adt, \"\")\n+            }\n+            // In case NonZero* is wanted, but * is provided also add `.unwrap()` to satisfy types\n+            ty::Adt(adt, _) => (adt, \".unwrap()\"),\n+            _ => return,\n+        };\n+\n+        let map = [\n+            (sym::NonZeroU8, tcx.types.u8),\n+            (sym::NonZeroU16, tcx.types.u16),\n+            (sym::NonZeroU32, tcx.types.u32),\n+            (sym::NonZeroU64, tcx.types.u64),\n+            (sym::NonZeroU128, tcx.types.u128),\n+            (sym::NonZeroI8, tcx.types.i8),\n+            (sym::NonZeroI16, tcx.types.i16),\n+            (sym::NonZeroI32, tcx.types.i32),\n+            (sym::NonZeroI64, tcx.types.i64),\n+            (sym::NonZeroI128, tcx.types.i128),\n+        ];\n+\n+        let Some((s, _)) = map\n+            .iter()\n+            .find(|&&(s, _)| self.tcx.is_diagnostic_item(s, adt.did()))\n+            .filter(|&&(_, t)| { self.can_coerce(expr_ty, t) })\n+            else { return };\n+\n+        let path = self.tcx.def_path_str(adt.non_enum_variant().def_id);\n+\n+        err.multipart_suggestion(\n+            format!(\"consider calling `{s}::new`\"),\n+            vec![\n+                (expr.span.shrink_to_lo(), format!(\"{path}::new(\")),\n+                (expr.span.shrink_to_hi(), format!(\"){unwrap}\")),\n+            ],\n+            Applicability::MaybeIncorrect,\n+        );\n+    }\n+\n     pub fn get_conversion_methods(\n         &self,\n         span: Span,"}, {"sha": "4de0a0cf564c576928718c32ed85fa2f623d01f4", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7163e7ff6542b200971a783dc2a720a0ff676e70/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7163e7ff6542b200971a783dc2a720a0ff676e70/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=7163e7ff6542b200971a783dc2a720a0ff676e70", "patch": "@@ -39,6 +39,7 @@ macro_rules! nonzero_integers {\n             #[repr(transparent)]\n             #[rustc_layout_scalar_valid_range_start(1)]\n             #[rustc_nonnull_optimization_guaranteed]\n+            #[rustc_diagnostic_item = stringify!($Ty)]\n             pub struct $Ty($Int);\n \n             impl $Ty {"}, {"sha": "d2adbe01c18286f11a66787f469f0d0664a8d479", "filename": "src/test/ui/mismatched_types/non_zero_assigned_something.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7163e7ff6542b200971a783dc2a720a0ff676e70/src%2Ftest%2Fui%2Fmismatched_types%2Fnon_zero_assigned_something.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7163e7ff6542b200971a783dc2a720a0ff676e70/src%2Ftest%2Fui%2Fmismatched_types%2Fnon_zero_assigned_something.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fnon_zero_assigned_something.rs?ref=7163e7ff6542b200971a783dc2a720a0ff676e70", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    let _: std::num::NonZeroU64 = 1;\n+    //~^ ERROR mismatched types\n+    //~| HELP  consider calling `NonZeroU64::new`\n+\n+    let _: Option<std::num::NonZeroU64> = 1;\n+    //~^ ERROR mismatched types\n+    //~| HELP  consider calling `NonZeroU64::new`\n+}"}, {"sha": "d4b2c902f9b2ed4e275dc4c902a4d4acb8f1267d", "filename": "src/test/ui/mismatched_types/non_zero_assigned_something.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7163e7ff6542b200971a783dc2a720a0ff676e70/src%2Ftest%2Fui%2Fmismatched_types%2Fnon_zero_assigned_something.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7163e7ff6542b200971a783dc2a720a0ff676e70/src%2Ftest%2Fui%2Fmismatched_types%2Fnon_zero_assigned_something.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fnon_zero_assigned_something.stderr?ref=7163e7ff6542b200971a783dc2a720a0ff676e70", "patch": "@@ -0,0 +1,31 @@\n+error[E0308]: mismatched types\n+  --> $DIR/non_zero_assigned_something.rs:2:35\n+   |\n+LL |     let _: std::num::NonZeroU64 = 1;\n+   |            --------------------   ^ expected struct `NonZeroU64`, found integer\n+   |            |\n+   |            expected due to this\n+   |\n+help: consider calling `NonZeroU64::new`\n+   |\n+LL |     let _: std::num::NonZeroU64 = NonZeroU64::new(1).unwrap();\n+   |                                   ++++++++++++++++ ++++++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/non_zero_assigned_something.rs:6:43\n+   |\n+LL |     let _: Option<std::num::NonZeroU64> = 1;\n+   |            ----------------------------   ^ expected enum `Option`, found integer\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected enum `Option<NonZeroU64>`\n+              found type `{integer}`\n+help: consider calling `NonZeroU64::new`\n+   |\n+LL |     let _: Option<std::num::NonZeroU64> = NonZeroU64::new(1);\n+   |                                           ++++++++++++++++ +\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}