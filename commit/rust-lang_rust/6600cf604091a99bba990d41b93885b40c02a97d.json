{"sha": "6600cf604091a99bba990d41b93885b40c02a97d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2MDBjZjYwNDA5MWE5OWJiYTk5MGQ0MWI5Mzg4NWI0MGMwMmE5N2Q=", "commit": {"author": {"name": "Jake Goulding", "email": "jake.goulding@gmail.com", "date": "2019-10-22T16:48:52Z"}, "committer": {"name": "Jake Goulding", "email": "jake.goulding@gmail.com", "date": "2019-10-25T15:25:52Z"}, "message": "Add {String,Vec}::into_raw_parts", "tree": {"sha": "53532045ef05b19d5dd34f08575ee645329ae6ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53532045ef05b19d5dd34f08575ee645329ae6ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6600cf604091a99bba990d41b93885b40c02a97d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6600cf604091a99bba990d41b93885b40c02a97d", "html_url": "https://github.com/rust-lang/rust/commit/6600cf604091a99bba990d41b93885b40c02a97d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6600cf604091a99bba990d41b93885b40c02a97d/comments", "author": {"login": "shepmaster", "id": 174509, "node_id": "MDQ6VXNlcjE3NDUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/174509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shepmaster", "html_url": "https://github.com/shepmaster", "followers_url": "https://api.github.com/users/shepmaster/followers", "following_url": "https://api.github.com/users/shepmaster/following{/other_user}", "gists_url": "https://api.github.com/users/shepmaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/shepmaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shepmaster/subscriptions", "organizations_url": "https://api.github.com/users/shepmaster/orgs", "repos_url": "https://api.github.com/users/shepmaster/repos", "events_url": "https://api.github.com/users/shepmaster/events{/privacy}", "received_events_url": "https://api.github.com/users/shepmaster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "shepmaster", "id": 174509, "node_id": "MDQ6VXNlcjE3NDUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/174509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shepmaster", "html_url": "https://github.com/shepmaster", "followers_url": "https://api.github.com/users/shepmaster/followers", "following_url": "https://api.github.com/users/shepmaster/following{/other_user}", "gists_url": "https://api.github.com/users/shepmaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/shepmaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shepmaster/subscriptions", "organizations_url": "https://api.github.com/users/shepmaster/orgs", "repos_url": "https://api.github.com/users/shepmaster/repos", "events_url": "https://api.github.com/users/shepmaster/events{/privacy}", "received_events_url": "https://api.github.com/users/shepmaster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dce8fabc62ed393152c53c65c492c8f3ae324eda", "url": "https://api.github.com/repos/rust-lang/rust/commits/dce8fabc62ed393152c53c65c492c8f3ae324eda", "html_url": "https://github.com/rust-lang/rust/commit/dce8fabc62ed393152c53c65c492c8f3ae324eda"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "d9927c642b2d8528cc012de950ace36fdbcdafa6", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6600cf604091a99bba990d41b93885b40c02a97d/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6600cf604091a99bba990d41b93885b40c02a97d/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=6600cf604091a99bba990d41b93885b40c02a97d", "patch": "@@ -196,6 +196,7 @@ use crate::vec::Vec;\n ///\n /// let story = String::from(\"Once upon a time...\");\n ///\n+// FIXME Update this when vec_into_raw_parts is stabilized\n /// // Prevent automatically dropping the String's data\n /// let mut story = mem::ManuallyDrop::new(story);\n ///\n@@ -647,6 +648,37 @@ impl String {\n         decode_utf16(v.iter().cloned()).map(|r| r.unwrap_or(REPLACEMENT_CHARACTER)).collect()\n     }\n \n+    /// Decomposes a `String` into its raw components.\n+    ///\n+    /// Returns the raw pointer to the underlying data, the length of\n+    /// the string (in bytes), and the allocated capacity of the data\n+    /// (in bytes). These are the same arguments in the same order as\n+    /// the arguments to [`from_raw_parts`].\n+    ///\n+    /// After calling this function, the caller is responsible for the\n+    /// memory previously managed by the `String`. The only way to do\n+    /// this is to convert the raw pointer, length, and capacity back\n+    /// into a `String` with the [`from_raw_parts`] function, allowing\n+    /// the destructor to perform the cleanup.\n+    ///\n+    /// [`from_raw_parts`]: #method.from_raw_parts\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(vec_into_raw_parts)]\n+    /// let s = String::from(\"hello\");\n+    ///\n+    /// let (ptr, len, cap) = s.into_raw_parts();\n+    ///\n+    /// let rebuilt = unsafe { String::from_raw_parts(ptr, len, cap) };\n+    /// assert_eq!(rebuilt, \"hello\");\n+    /// ```\n+    #[unstable(feature = \"vec_into_raw_parts\", reason = \"new API\", issue = \"65816\")]\n+    pub fn into_raw_parts(self) -> (*mut u8, usize, usize) {\n+        self.vec.into_raw_parts()\n+    }\n+\n     /// Creates a new `String` from a length, capacity, and pointer.\n     ///\n     /// # Safety\n@@ -678,6 +710,7 @@ impl String {\n     /// unsafe {\n     ///     let s = String::from(\"hello\");\n     ///\n+    // FIXME Update this when vec_into_raw_parts is stabilized\n     ///     // Prevent automatically dropping the String's data\n     ///     let mut s = mem::ManuallyDrop::new(s);\n     ///"}, {"sha": "641f9eafa8d23fa55a047204cac29b989d544880", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6600cf604091a99bba990d41b93885b40c02a97d/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6600cf604091a99bba990d41b93885b40c02a97d/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=6600cf604091a99bba990d41b93885b40c02a97d", "patch": "@@ -358,6 +358,44 @@ impl<T> Vec<T> {\n         }\n     }\n \n+    /// Decomposes a `Vec<T>` into its raw components.\n+    ///\n+    /// Returns the raw pointer to the underlying data, the length of\n+    /// the vector (in elements), and the allocated capacity of the\n+    /// data (in elements). These are the same arguments in the same\n+    /// order as the arguments to [`from_raw_parts`].\n+    ///\n+    /// After calling this function, the caller is responsible for the\n+    /// memory previously managed by the `Vec`. The only way to do\n+    /// this is to convert the raw pointer, length, and capacity back\n+    /// into a `Vec` with the [`from_raw_parts`] function, allowing\n+    /// the destructor to perform the cleanup.\n+    ///\n+    /// [`from_raw_parts`]: #method.from_raw_parts\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(vec_into_raw_parts)]\n+    /// let v: Vec<i32> = vec![-1, 0, 1];\n+    ///\n+    /// let (ptr, len, cap) = v.into_raw_parts();\n+    ///\n+    /// let rebuilt = unsafe {\n+    ///     // We can now make changes to the components, such as\n+    ///     // transmuting the raw pointer to a compatible type.\n+    ///     let ptr = ptr as *mut u32;\n+    ///\n+    ///     Vec::from_raw_parts(ptr, len, cap)\n+    /// };\n+    /// assert_eq!(rebuilt, [4294967295, 0, 1]);\n+    /// ```\n+    #[unstable(feature = \"vec_into_raw_parts\", reason = \"new API\", issue = \"65816\")]\n+    pub fn into_raw_parts(self) -> (*mut T, usize, usize) {\n+        let mut me = mem::ManuallyDrop::new(self);\n+        (me.as_mut_ptr(), me.len(), me.capacity())\n+    }\n+\n     /// Creates a `Vec<T>` directly from the raw components of another vector.\n     ///\n     /// # Safety\n@@ -391,6 +429,7 @@ impl<T> Vec<T> {\n     ///\n     /// let v = vec![1, 2, 3];\n     ///\n+    // FIXME Update this when vec_into_raw_parts is stabilized\n     /// // Prevent running `v`'s destructor so we are in complete control\n     /// // of the allocation.\n     /// let mut v = mem::ManuallyDrop::new(v);"}, {"sha": "4655d39fb8f1fd187bf1222e7a21163014eeb53f", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6600cf604091a99bba990d41b93885b40c02a97d/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6600cf604091a99bba990d41b93885b40c02a97d/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=6600cf604091a99bba990d41b93885b40c02a97d", "patch": "@@ -874,6 +874,7 @@ extern \"rust-intrinsic\" {\n     /// // the original inner type (`&i32`) to the converted inner type\n     /// // (`Option<&i32>`), so read the nomicon pages linked above.\n     /// let v_from_raw = unsafe {\n+    // FIXME Update this when vec_into_raw_parts is stabilized\n     ///     // Ensure the original vector is not dropped.\n     ///     let mut v_clone = std::mem::ManuallyDrop::new(v_clone);\n     ///     Vec::from_raw_parts(v_clone.as_mut_ptr() as *mut Option<&i32>,"}]}