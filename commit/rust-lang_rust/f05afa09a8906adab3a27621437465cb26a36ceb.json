{"sha": "f05afa09a8906adab3a27621437465cb26a36ceb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNWFmYTA5YTg5MDZhZGFiM2EyNzYyMTQzNzQ2NWNiMjZhMzZjZWI=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-06-16T04:32:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-16T04:32:44Z"}, "message": "Rollup merge of #42654 - GuillaumeGomez:error-codes-new, r=QuietMisdreavus\n\nError codes new\n\nPart of #42229.\n\ncc @Susurrus @frewsxcv @QuietMisdreavus", "tree": {"sha": "42732148f59544dbc27feb23a61e1501af24dc4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42732148f59544dbc27feb23a61e1501af24dc4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f05afa09a8906adab3a27621437465cb26a36ceb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f05afa09a8906adab3a27621437465cb26a36ceb", "html_url": "https://github.com/rust-lang/rust/commit/f05afa09a8906adab3a27621437465cb26a36ceb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f05afa09a8906adab3a27621437465cb26a36ceb/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5926115b42143b842889cc9fb94f00ad3c9c17d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5926115b42143b842889cc9fb94f00ad3c9c17d", "html_url": "https://github.com/rust-lang/rust/commit/a5926115b42143b842889cc9fb94f00ad3c9c17d"}, {"sha": "f720e972cfaadcd26a552953b1a876f1f0437ace", "url": "https://api.github.com/repos/rust-lang/rust/commits/f720e972cfaadcd26a552953b1a876f1f0437ace", "html_url": "https://github.com/rust-lang/rust/commit/f720e972cfaadcd26a552953b1a876f1f0437ace"}], "stats": {"total": 73, "additions": 60, "deletions": 13}, "files": [{"sha": "385ed7eb0e3842c750999ba88f79f1e0614103ae", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f05afa09a8906adab3a27621437465cb26a36ceb/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05afa09a8906adab3a27621437465cb26a36ceb/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=f05afa09a8906adab3a27621437465cb26a36ceb", "patch": "@@ -15,7 +15,7 @@ use super::method::MethodCallee;\n use hir::def::Def;\n use hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::{infer, traits};\n-use rustc::ty::{self, TyCtxt, LvaluePreference, Ty};\n+use rustc::ty::{self, TyCtxt, TypeFoldable, LvaluePreference, Ty};\n use rustc::ty::subst::Subst;\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow};\n use syntax::abi;\n@@ -209,17 +209,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         }\n                     }\n                 }\n-                let mut err = if let Some(path) = unit_variant {\n-                    let mut err = self.type_error_struct(call_expr.span, |_| {\n-                        format!(\"`{}` is being called, but it is not a function\", path)\n-                    }, callee_ty);\n+                let mut err = type_error_struct!(self.tcx.sess, call_expr.span, callee_ty, E0618,\n+                                                 \"expected function, found `{}`\",\n+                                                 if let Some(ref path) = unit_variant {\n+                                                     path.to_string()\n+                                                 } else {\n+                                                     callee_ty.to_string()\n+                                                 });\n+                if let Some(path) = unit_variant {\n                     err.help(&format!(\"did you mean to write `{}`?\", path));\n-                    err\n-                } else {\n-                    self.type_error_struct(call_expr.span, |actual| {\n-                        format!(\"expected function, found `{}`\", actual)\n-                    }, callee_ty)\n-                };\n+                }\n \n                 if let hir::ExprCall(ref expr, _) = call_expr.node {\n                     let def = if let hir::ExprPath(ref qpath) = expr.node {"}, {"sha": "f72af2084f02201dbbc023a86ba3193124f18929", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f05afa09a8906adab3a27621437465cb26a36ceb/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05afa09a8906adab3a27621437465cb26a36ceb/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=f05afa09a8906adab3a27621437465cb26a36ceb", "patch": "@@ -4195,6 +4195,34 @@ as possible. For better explanations, see The Rust Book:\n https://doc.rust-lang.org/book/\n \"##,\n \n+E0618: r##\"\n+Attempted to call something which isn't a function nor a method.\n+\n+Erroneous code examples:\n+\n+```compile_fail,E0618\n+enum X {\n+    Entry,\n+}\n+\n+X::Entry(); // error: expected function, found `X::Entry`\n+\n+// Or even simpler:\n+let x = 0i32;\n+x(); // error: expected function, found `i32`\n+```\n+\n+Only functions and methods can be called using `()`. Example:\n+\n+```\n+// We declare a function:\n+fn i_am_a_function() {}\n+\n+// And we call it:\n+i_am_a_function();\n+```\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "1ba2e8e2e56139ace7fa9a53369e63feae8a16de", "filename": "src/test/compile-fail/E0618.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f05afa09a8906adab3a27621437465cb26a36ceb/src%2Ftest%2Fcompile-fail%2FE0618.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05afa09a8906adab3a27621437465cb26a36ceb/src%2Ftest%2Fcompile-fail%2FE0618.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0618.rs?ref=f05afa09a8906adab3a27621437465cb26a36ceb", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum X {\n+    Entry,\n+}\n+\n+fn main() {\n+    X::Entry(); //~ ERROR expected function, found `X::Entry` [E0618]\n+                //~| HELP did you mean to write `X::Entry`?\n+    let x = 0i32;\n+    x(); //~ ERROR expected function, found `i32` [E0618]\n+}"}, {"sha": "9655007604de6e79d8c81644af01708e618335f1", "filename": "src/test/compile-fail/empty-struct-unit-expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f05afa09a8906adab3a27621437465cb26a36ceb/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05afa09a8906adab3a27621437465cb26a36ceb/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-expr.rs?ref=f05afa09a8906adab3a27621437465cb26a36ceb", "patch": "@@ -24,10 +24,10 @@ enum E {\n fn main() {\n     let e2 = Empty2(); //~ ERROR expected function, found `Empty2`\n     let e4 = E::Empty4();\n-    //~^ ERROR `E::Empty4` is being called, but it is not a function\n+    //~^ ERROR expected function, found `E::Empty4` [E0618]\n     //~| HELP did you mean to write `E::Empty4`?\n     let xe2 = XEmpty2(); //~ ERROR expected function, found `empty_struct::XEmpty2`\n     let xe4 = XE::XEmpty4();\n-    //~^ ERROR `XE::XEmpty4` is being called, but it is not a function\n+    //~^ ERROR expected function, found `XE::XEmpty4` [E0618]\n     //~| HELP did you mean to write `XE::XEmpty4`?\n }"}]}