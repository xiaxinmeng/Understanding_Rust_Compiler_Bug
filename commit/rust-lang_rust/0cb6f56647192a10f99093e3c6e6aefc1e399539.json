{"sha": "0cb6f56647192a10f99093e3c6e6aefc1e399539", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjYjZmNTY2NDcxOTJhMTBmOTkwOTNlM2M2ZTZhZWZjMWUzOTk1Mzk=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-19T21:25:37Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-19T21:26:19Z"}, "message": "Block formatting for arrays\n\nFixes #1331", "tree": {"sha": "8e2c24b040261e4672befd7e0eb00bde04a3206d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e2c24b040261e4672befd7e0eb00bde04a3206d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cb6f56647192a10f99093e3c6e6aefc1e399539", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cb6f56647192a10f99093e3c6e6aefc1e399539", "html_url": "https://github.com/rust-lang/rust/commit/0cb6f56647192a10f99093e3c6e6aefc1e399539", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cb6f56647192a10f99093e3c6e6aefc1e399539/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c93e7dacf7e34df8b873fae747b56a619d1bf67", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c93e7dacf7e34df8b873fae747b56a619d1bf67", "html_url": "https://github.com/rust-lang/rust/commit/0c93e7dacf7e34df8b873fae747b56a619d1bf67"}], "stats": {"total": 259, "additions": 248, "deletions": 11}, "files": [{"sha": "4206392d7a77ccb66f298a85500cde1f35abf437", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cb6f56647192a10f99093e3c6e6aefc1e399539/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb6f56647192a10f99093e3c6e6aefc1e399539/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=0cb6f56647192a10f99093e3c6e6aefc1e399539", "patch": "@@ -364,6 +364,7 @@ create_config! {\n     fn_args_layout: FnArgLayoutStyle, FnArgLayoutStyle::Visual,\n         \"Layout of function arguments and tuple structs\";\n     fn_arg_indent: BlockIndentStyle, BlockIndentStyle::Visual, \"Indent on function arguments\";\n+    array_layout: FnArgLayoutStyle, FnArgLayoutStyle::Visual, \"Indent on arrays\";\n     type_punctuation_density: TypeDensity, TypeDensity::Wide,\n         \"Determines if '+' or '=' are wrapped in spaces in the punctuation of types\";\n     where_style: Style, Style::Default, \"Overall strategy for where clauses\";"}, {"sha": "7e85ca4ee3441dc4877c9bef4caddb8d559c2fb4", "filename": "src/expr.rs", "status": "modified", "additions": 49, "deletions": 11, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0cb6f56647192a10f99093e3c6e6aefc1e399539/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb6f56647192a10f99093e3c6e6aefc1e399539/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=0cb6f56647192a10f99093e3c6e6aefc1e399539", "patch": "@@ -24,7 +24,7 @@ use string::{StringFormat, rewrite_string};\n use utils::{extra_offset, last_line_width, wrap_str, binary_search, first_line_width,\n             semicolon_for_stmt, trimmed_last_line_width, left_most_sub_expr, stmt_expr};\n use visitor::FmtVisitor;\n-use config::{Config, StructLitStyle, MultilineStyle, ControlBraceStyle};\n+use config::{Config, StructLitStyle, MultilineStyle, ControlBraceStyle, FnArgLayoutStyle};\n use comment::{FindUncommented, rewrite_comment, contains_comment, recover_comment_removed};\n use types::{rewrite_path, PathContext};\n use items::{span_lo_for_arg, span_hi_for_arg};\n@@ -329,7 +329,15 @@ pub fn rewrite_array<'a, I>(expr_iter: I,\n     } else {\n         1 // \"[\"\n     };\n-    let nested_shape = try_opt!(shape.visual_indent(bracket_size).sub_width(bracket_size * 2));\n+\n+    let nested_shape = match context.config.array_layout {\n+        FnArgLayoutStyle::Block |\n+        FnArgLayoutStyle::BlockAlways => shape.block().block_indent(context.config.tab_spaces),\n+        FnArgLayoutStyle::Visual => {\n+            try_opt!(shape.visual_indent(bracket_size).sub_width(bracket_size * 2))\n+        }\n+    };\n+\n     let items = itemize_list(context.codemap,\n                              expr_iter,\n                              \"]\",\n@@ -340,15 +348,35 @@ pub fn rewrite_array<'a, I>(expr_iter: I,\n                              span.hi)\n             .collect::<Vec<_>>();\n \n+    if items.is_empty() {\n+        if context.config.spaces_within_square_brackets {\n+            return Some(\"[ ]\".to_string());\n+        } else {\n+            return Some(\"[]\".to_string());\n+        }\n+    }\n+\n     let has_long_item = try_opt!(items.iter()\n                                      .map(|li| li.item.as_ref().map(|s| s.len() > 10))\n                                      .fold(Some(false),\n                                            |acc, x| acc.and_then(|y| x.map(|x| x || y))));\n \n-    let tactic = if has_long_item || items.iter().any(ListItem::is_multiline) {\n-        definitive_tactic(&items, ListTactic::HorizontalVertical, nested_shape.width)\n-    } else {\n-        DefinitiveListTactic::Mixed\n+    let tactic = match context.config.array_layout {\n+        FnArgLayoutStyle::Block => {\n+            // TODO wrong shape in one-line case\n+            match shape.width.checked_sub(2 * bracket_size) {\n+                Some(width) => definitive_tactic(&items, ListTactic::HorizontalVertical, width),\n+                None => DefinitiveListTactic::Vertical,\n+            }\n+        }\n+        FnArgLayoutStyle::BlockAlways => DefinitiveListTactic::Vertical,\n+        FnArgLayoutStyle::Visual => {\n+            if has_long_item || items.iter().any(ListItem::is_multiline) {\n+                definitive_tactic(&items, ListTactic::HorizontalVertical, nested_shape.width)\n+            } else {\n+                DefinitiveListTactic::Mixed\n+            }\n+        }\n     };\n \n     let fmt = ListFormatting {\n@@ -361,11 +389,21 @@ pub fn rewrite_array<'a, I>(expr_iter: I,\n     };\n     let list_str = try_opt!(write_list(&items, &fmt));\n \n-    Some(if context.config.spaces_within_square_brackets && list_str.len() > 0 {\n-             format!(\"[ {} ]\", list_str)\n-         } else {\n-             format!(\"[{}]\", list_str)\n-         })\n+    let result = if context.config.array_layout == FnArgLayoutStyle::Visual ||\n+                    tactic != DefinitiveListTactic::Vertical {\n+        if context.config.spaces_within_square_brackets && list_str.len() > 0 {\n+            format!(\"[ {} ]\", list_str)\n+        } else {\n+            format!(\"[{}]\", list_str)\n+        }\n+    } else {\n+        format!(\"[\\n{}{},\\n{}]\",\n+                nested_shape.indent.to_string(context.config),\n+                list_str,\n+                shape.block().indent.to_string(context.config))\n+    };\n+\n+    Some(result)\n }\n \n // This functions is pretty messy because of the rules around closures and blocks:"}, {"sha": "5e120b8604cf552e3b7465f4fba3cd09e7727aab", "filename": "tests/source/expr-block.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/0cb6f56647192a10f99093e3c6e6aefc1e399539/tests%2Fsource%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb6f56647192a10f99093e3c6e6aefc1e399539/tests%2Fsource%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr-block.rs?ref=0cb6f56647192a10f99093e3c6e6aefc1e399539", "patch": "@@ -0,0 +1,78 @@\n+// rustfmt-array_layout: Block\n+// Test expressions with block formatting.\n+\n+fn arrays() {\n+    [      ];\n+    let empty = [];\n+\n+    let foo = [a_long_name, a_very_lng_name, a_long_name, a_very_lng_name, a_long_name];\n+\n+    let foo = [a_long_name, a_very_lng_name, a_long_name, a_very_lng_name, a_long_name, a_very_lng_name, a_long_name, a_very_lng_name];\n+\n+    vec![a_long_name, a_very_lng_name, a_long_name, a_very_lng_name, a_long_name, a_very_lng_name, a_very_lng_name];\n+\n+    [a_long_name, a_very_lng_name, a_long_name, a_very_lng_name, a_long_name, a_very_lng_name, a_very_lng_name]\n+}\n+\n+fn arrays() {\n+    let x = [0,\n+         1,\n+         2,\n+         3,\n+         4,\n+         5,\n+         6,\n+         7,\n+         8,\n+         9,\n+         0,\n+         1,\n+         2,\n+         3,\n+         4,\n+         5,\n+         6,\n+         7,\n+         8,\n+         9,\n+         0,\n+         7,\n+         8,\n+         9,\n+         0,\n+         1,\n+         2,\n+         3,\n+         4,\n+         5,\n+         6,\n+         7,\n+         8,\n+         9,\n+         0];\n+\n+    let y = [/* comment */ 1, 2 /* post comment */, 3];\n+\n+    let xy =    [ strukt  { test123: value_one_two_three_four, turbo: coolio(), } , /* comment  */   1 ];\n+\n+        let a =WeightedChoice::new(&mut [Weighted {\n+            weight: x,\n+            item: 0,\n+        },\n+                                  Weighted {\n+            weight: 1,\n+            item: 1,\n+        },\n+                                  Weighted {\n+            weight: x,\n+            item: 2,\n+        },\n+                                  Weighted {\n+            weight: 1,\n+            item: 3,\n+        }]);\n+\n+    let z = [xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyyyyyyyyyyy, zzzzzzzzzzzzzzzzz, q];\n+\n+    [ 1 +   3, 4 ,  5, 6, 7, 7, fncall::<Vec<_>>(3-1)]\n+}"}, {"sha": "0daa8ff91d60cf86f5eba6447ab1aeb54bc43d2e", "filename": "tests/target/expr-block.rs", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/0cb6f56647192a10f99093e3c6e6aefc1e399539/tests%2Ftarget%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb6f56647192a10f99093e3c6e6aefc1e399539/tests%2Ftarget%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr-block.rs?ref=0cb6f56647192a10f99093e3c6e6aefc1e399539", "patch": "@@ -0,0 +1,120 @@\n+// rustfmt-array_layout: Block\n+// Test expressions with block formatting.\n+\n+fn arrays() {\n+    [];\n+    let empty = [];\n+\n+    let foo = [a_long_name, a_very_lng_name, a_long_name, a_very_lng_name, a_long_name];\n+\n+    let foo = [\n+        a_long_name,\n+        a_very_lng_name,\n+        a_long_name,\n+        a_very_lng_name,\n+        a_long_name,\n+        a_very_lng_name,\n+        a_long_name,\n+        a_very_lng_name,\n+    ];\n+\n+    vec![\n+        a_long_name,\n+        a_very_lng_name,\n+        a_long_name,\n+        a_very_lng_name,\n+        a_long_name,\n+        a_very_lng_name,\n+        a_very_lng_name,\n+    ];\n+\n+    [\n+        a_long_name,\n+        a_very_lng_name,\n+        a_long_name,\n+        a_very_lng_name,\n+        a_long_name,\n+        a_very_lng_name,\n+        a_very_lng_name,\n+    ]\n+}\n+\n+fn arrays() {\n+    let x = [\n+        0,\n+        1,\n+        2,\n+        3,\n+        4,\n+        5,\n+        6,\n+        7,\n+        8,\n+        9,\n+        0,\n+        1,\n+        2,\n+        3,\n+        4,\n+        5,\n+        6,\n+        7,\n+        8,\n+        9,\n+        0,\n+        7,\n+        8,\n+        9,\n+        0,\n+        1,\n+        2,\n+        3,\n+        4,\n+        5,\n+        6,\n+        7,\n+        8,\n+        9,\n+        0,\n+    ];\n+\n+    let y = [\n+        /* comment */\n+        1,\n+        2, /* post comment */\n+        3,\n+    ];\n+\n+    let xy = [\n+        strukt {\n+            test123: value_one_two_three_four,\n+            turbo: coolio(),\n+        },\n+        /* comment  */\n+        1,\n+    ];\n+\n+    let a = WeightedChoice::new(&mut [\n+        Weighted {\n+            weight: x,\n+            item: 0,\n+        },\n+        Weighted {\n+            weight: 1,\n+            item: 1,\n+        },\n+        Weighted {\n+            weight: x,\n+            item: 2,\n+        },\n+        Weighted {\n+            weight: 1,\n+            item: 3,\n+        },\n+    ]);\n+\n+    let z =\n+        [xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyyyyyyyyyyy, zzzzzzzzzzzzzzzzz, q];\n+\n+    [1 + 3, 4, 5, 6, 7, 7, fncall::<Vec<_>>(3 - 1)]\n+}"}]}