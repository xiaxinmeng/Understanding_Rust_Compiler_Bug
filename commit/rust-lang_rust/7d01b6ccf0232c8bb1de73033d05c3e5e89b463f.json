{"sha": "7d01b6ccf0232c8bb1de73033d05c3e5e89b463f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMDFiNmNjZjAyMzJjOGJiMWRlNzMwMzNkMDVjM2U1ZTg5YjQ2M2Y=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-25T16:29:32Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-25T17:13:35Z"}, "message": "Simplify early exits.", "tree": {"sha": "48f82f8c362067c6a1784386e3bc2a9bc6e43123", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48f82f8c362067c6a1784386e3bc2a9bc6e43123"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d01b6ccf0232c8bb1de73033d05c3e5e89b463f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d01b6ccf0232c8bb1de73033d05c3e5e89b463f", "html_url": "https://github.com/rust-lang/rust/commit/7d01b6ccf0232c8bb1de73033d05c3e5e89b463f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d01b6ccf0232c8bb1de73033d05c3e5e89b463f/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea1b8039ada203a50342fda342f905c932cd4eef", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea1b8039ada203a50342fda342f905c932cd4eef", "html_url": "https://github.com/rust-lang/rust/commit/ea1b8039ada203a50342fda342f905c932cd4eef"}], "stats": {"total": 25, "additions": 9, "deletions": 16}, "files": [{"sha": "7cafc05e390899b0a789c33cb43a4d0d39bff38c", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7d01b6ccf0232c8bb1de73033d05c3e5e89b463f/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d01b6ccf0232c8bb1de73033d05c3e5e89b463f/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=7d01b6ccf0232c8bb1de73033d05c3e5e89b463f", "patch": "@@ -284,6 +284,7 @@ pub fn run_compiler(\n         }\n \n         let linker = compiler.enter(|queries| {\n+            let early_exit = || sess.compile_status().map(|_| None);\n             queries.parse()?;\n \n             if let Some(ppm) = &sess.opts.pretty {\n@@ -309,20 +310,17 @@ pub fn run_compiler(\n                         compiler.output_file().as_ref().map(|p| &**p),\n                     );\n                 }\n-                sess.compile_status()?;\n-                return Ok(None);\n+                return early_exit();\n             }\n \n             if callbacks.after_parsing(compiler) == Compilation::Stop {\n-                sess.compile_status()?;\n-                return Ok(None);\n+                return early_exit();\n             }\n \n             if sess.opts.debugging_opts.parse_only ||\n                sess.opts.debugging_opts.show_span.is_some() ||\n                sess.opts.debugging_opts.ast_json_noexpand {\n-                sess.compile_status()?;\n-                return Ok(None);\n+               return early_exit();\n             }\n \n             {\n@@ -331,32 +329,28 @@ pub fn run_compiler(\n                 // Lint plugins are registered; now we can process command line flags.\n                 if sess.opts.describe_lints {\n                     describe_lints(&sess, &lint_store, true);\n-                    sess.compile_status()?;\n-                    return Ok(None);\n+                    return early_exit();\n                 }\n             }\n \n             queries.expansion()?;\n             if callbacks.after_expansion(compiler) == Compilation::Stop {\n-                sess.compile_status()?;\n-                return Ok(None);\n+                return early_exit();\n             }\n \n             queries.prepare_outputs()?;\n \n             if sess.opts.output_types.contains_key(&OutputType::DepInfo)\n                 && sess.opts.output_types.len() == 1\n             {\n-                sess.compile_status()?;\n-                return Ok(None);\n+                return early_exit();\n             }\n \n             queries.global_ctxt()?;\n \n             if sess.opts.debugging_opts.no_analysis ||\n                sess.opts.debugging_opts.ast_json {\n-                sess.compile_status()?;\n-                return Ok(None);\n+                   return early_exit();\n             }\n \n             if sess.opts.debugging_opts.save_analysis {\n@@ -390,8 +384,7 @@ pub fn run_compiler(\n             queries.global_ctxt()?.peek_mut().enter(|tcx| tcx.analysis(LOCAL_CRATE))?;\n \n             if callbacks.after_analysis(compiler) == Compilation::Stop {\n-                sess.compile_status()?;\n-                return Ok(None);\n+                return early_exit();\n             }\n \n             if sess.opts.debugging_opts.save_analysis {"}]}