{"sha": "ef500863bd7a701506d275289af23f62eb931b40", "node_id": "C_kwDOAAsO6NoAKGVmNTAwODYzYmQ3YTcwMTUwNmQyNzUyODlhZjIzZjYyZWI5MzFiNDA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-02T18:34:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-02T18:34:05Z"}, "message": "Rollup merge of #93571 - compiler-errors:better-where-suggestion, r=lcnr\n\nbetter suggestion for duplicated `where` clause\n\nfixes #93567", "tree": {"sha": "8e3314a5194e147f6476a7954c822720a0d4235b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e3314a5194e147f6476a7954c822720a0d4235b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef500863bd7a701506d275289af23f62eb931b40", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh+s6dCRBK7hj4Ov3rIwAAxwAIAGxcmmb+wzIPX5OXHeXZ8RFH\njkMXwO940lLYqbYZj920EHNu+eCpmJA2sfj/J9yuIaYBKmOCzxtmBPHcoghWZppU\nCMaiLdK4G/imzej723oKlknYYMeDLYBd1rMdtwr4ZEetJ8mODeGKSasMsw7vuTnC\nXF2X3lNaOjl6vpBxjFVVSFZk9hkKNP08r5ys1YDAUBFunz0jarYKnM/CrMHQaE7v\nzyZSY1K825jT20xZmop0IL8Uw8dA5K+zgBiPPXK953pIIw7pciCjEQN0rT6Syneg\n3IgDXYjOenhpy4f4GeEQSTcLLnHtRNGMyCD/kXdxFeNkTM/tVtOZKKK6YCGAguY=\n=sqJw\n-----END PGP SIGNATURE-----\n", "payload": "tree 8e3314a5194e147f6476a7954c822720a0d4235b\nparent b53eaf7ce5f791c4af127468ffef78fe3fa313b4\nparent f35d43cdf01f8405009ee6167ac2afe4e02ba51c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643826845 +0100\ncommitter GitHub <noreply@github.com> 1643826845 +0100\n\nRollup merge of #93571 - compiler-errors:better-where-suggestion, r=lcnr\n\nbetter suggestion for duplicated `where` clause\n\nfixes #93567\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef500863bd7a701506d275289af23f62eb931b40", "html_url": "https://github.com/rust-lang/rust/commit/ef500863bd7a701506d275289af23f62eb931b40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef500863bd7a701506d275289af23f62eb931b40/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b53eaf7ce5f791c4af127468ffef78fe3fa313b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b53eaf7ce5f791c4af127468ffef78fe3fa313b4", "html_url": "https://github.com/rust-lang/rust/commit/b53eaf7ce5f791c4af127468ffef78fe3fa313b4"}, {"sha": "f35d43cdf01f8405009ee6167ac2afe4e02ba51c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f35d43cdf01f8405009ee6167ac2afe4e02ba51c", "html_url": "https://github.com/rust-lang/rust/commit/f35d43cdf01f8405009ee6167ac2afe4e02ba51c"}], "stats": {"total": 156, "additions": 147, "deletions": 9}, "files": [{"sha": "62ed104aef37c0cd65fede734171721973fbab31", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ef500863bd7a701506d275289af23f62eb931b40/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef500863bd7a701506d275289af23f62eb931b40/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=ef500863bd7a701506d275289af23f62eb931b40", "patch": "@@ -4,7 +4,7 @@ use rustc_ast::token;\n use rustc_ast::{\n     self as ast, Attribute, GenericBounds, GenericParam, GenericParamKind, WhereClause,\n };\n-use rustc_errors::PResult;\n+use rustc_errors::{Applicability, PResult};\n use rustc_span::symbol::kw;\n \n impl<'a> Parser<'a> {\n@@ -256,7 +256,21 @@ impl<'a> Parser<'a> {\n                 break;\n             }\n \n-            if !self.eat(&token::Comma) {\n+            let prev_token = self.prev_token.span;\n+            let ate_comma = self.eat(&token::Comma);\n+\n+            if self.eat_keyword_noexpect(kw::Where) {\n+                let msg = &format!(\"cannot define duplicate `where` clauses on an item\");\n+                let mut err = self.struct_span_err(self.token.span, msg);\n+                err.span_label(lo, \"previous `where` clause starts here\");\n+                err.span_suggestion_verbose(\n+                    prev_token.shrink_to_hi().to(self.prev_token.span),\n+                    \"consider joining the two `where` clauses into one\",\n+                    \",\".to_owned(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+                err.emit();\n+            } else if !ate_comma {\n                 break;\n             }\n         }"}, {"sha": "93f5d79c0db1338ce60405269b7c57fa44c71f86", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ef500863bd7a701506d275289af23f62eb931b40/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef500863bd7a701506d275289af23f62eb931b40/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=ef500863bd7a701506d275289af23f62eb931b40", "patch": "@@ -1221,7 +1221,7 @@ impl<'a> Parser<'a> {\n \n                 let struct_def = if this.check(&token::OpenDelim(token::Brace)) {\n                     // Parse a struct variant.\n-                    let (fields, recovered) = this.parse_record_struct_body(\"struct\")?;\n+                    let (fields, recovered) = this.parse_record_struct_body(\"struct\", false)?;\n                     VariantData::Struct(fields, recovered)\n                 } else if this.check(&token::OpenDelim(token::Paren)) {\n                     VariantData::Tuple(this.parse_tuple_struct_body()?, DUMMY_NODE_ID)\n@@ -1275,15 +1275,17 @@ impl<'a> Parser<'a> {\n                 VariantData::Unit(DUMMY_NODE_ID)\n             } else {\n                 // If we see: `struct Foo<T> where T: Copy { ... }`\n-                let (fields, recovered) = self.parse_record_struct_body(\"struct\")?;\n+                let (fields, recovered) =\n+                    self.parse_record_struct_body(\"struct\", generics.where_clause.has_where_token)?;\n                 VariantData::Struct(fields, recovered)\n             }\n         // No `where` so: `struct Foo<T>;`\n         } else if self.eat(&token::Semi) {\n             VariantData::Unit(DUMMY_NODE_ID)\n         // Record-style struct definition\n         } else if self.token == token::OpenDelim(token::Brace) {\n-            let (fields, recovered) = self.parse_record_struct_body(\"struct\")?;\n+            let (fields, recovered) =\n+                self.parse_record_struct_body(\"struct\", generics.where_clause.has_where_token)?;\n             VariantData::Struct(fields, recovered)\n         // Tuple-style struct definition with optional where-clause.\n         } else if self.token == token::OpenDelim(token::Paren) {\n@@ -1313,10 +1315,12 @@ impl<'a> Parser<'a> {\n \n         let vdata = if self.token.is_keyword(kw::Where) {\n             generics.where_clause = self.parse_where_clause()?;\n-            let (fields, recovered) = self.parse_record_struct_body(\"union\")?;\n+            let (fields, recovered) =\n+                self.parse_record_struct_body(\"union\", generics.where_clause.has_where_token)?;\n             VariantData::Struct(fields, recovered)\n         } else if self.token == token::OpenDelim(token::Brace) {\n-            let (fields, recovered) = self.parse_record_struct_body(\"union\")?;\n+            let (fields, recovered) =\n+                self.parse_record_struct_body(\"union\", generics.where_clause.has_where_token)?;\n             VariantData::Struct(fields, recovered)\n         } else {\n             let token_str = super::token_descr(&self.token);\n@@ -1332,6 +1336,7 @@ impl<'a> Parser<'a> {\n     fn parse_record_struct_body(\n         &mut self,\n         adt_ty: &str,\n+        parsed_where: bool,\n     ) -> PResult<'a, (Vec<FieldDef>, /* recovered */ bool)> {\n         let mut fields = Vec::new();\n         let mut recovered = false;\n@@ -1353,9 +1358,19 @@ impl<'a> Parser<'a> {\n             self.eat(&token::CloseDelim(token::Brace));\n         } else {\n             let token_str = super::token_descr(&self.token);\n-            let msg = &format!(\"expected `where`, or `{{` after struct name, found {}\", token_str);\n+            let msg = &format!(\n+                \"expected {}`{{` after struct name, found {}\",\n+                if parsed_where { \"\" } else { \"`where`, or \" },\n+                token_str\n+            );\n             let mut err = self.struct_span_err(self.token.span, msg);\n-            err.span_label(self.token.span, \"expected `where`, or `{` after struct name\");\n+            err.span_label(\n+                self.token.span,\n+                format!(\n+                    \"expected {}`{{` after struct name\",\n+                    if parsed_where { \"\" } else { \"`where`, or \" }\n+                ),\n+            );\n             return Err(err);\n         }\n "}, {"sha": "823880b1b42c615a2f6090843f36352117b3a582", "filename": "src/test/ui/parser/bad-struct-following-where.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef500863bd7a701506d275289af23f62eb931b40/src%2Ftest%2Fui%2Fparser%2Fbad-struct-following-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef500863bd7a701506d275289af23f62eb931b40/src%2Ftest%2Fui%2Fparser%2Fbad-struct-following-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-struct-following-where.rs?ref=ef500863bd7a701506d275289af23f62eb931b40", "patch": "@@ -0,0 +1,2 @@\n+struct A where T: Sized !\n+//~^ ERROR expected `{` after struct name, found"}, {"sha": "bb79776dc8459ba550559320579c634fb6ce9dbb", "filename": "src/test/ui/parser/bad-struct-following-where.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef500863bd7a701506d275289af23f62eb931b40/src%2Ftest%2Fui%2Fparser%2Fbad-struct-following-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef500863bd7a701506d275289af23f62eb931b40/src%2Ftest%2Fui%2Fparser%2Fbad-struct-following-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-struct-following-where.stderr?ref=ef500863bd7a701506d275289af23f62eb931b40", "patch": "@@ -0,0 +1,8 @@\n+error: expected `{` after struct name, found `!`\n+  --> $DIR/bad-struct-following-where.rs:1:25\n+   |\n+LL | struct A where T: Sized !\n+   |                         ^ expected `{` after struct name\n+\n+error: aborting due to previous error\n+"}, {"sha": "9eb2ffb06f02da872d1693c3a424e911bf9abc6b", "filename": "src/test/ui/parser/duplicate-where-clauses.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ef500863bd7a701506d275289af23f62eb931b40/src%2Ftest%2Fui%2Fparser%2Fduplicate-where-clauses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef500863bd7a701506d275289af23f62eb931b40/src%2Ftest%2Fui%2Fparser%2Fduplicate-where-clauses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-where-clauses.rs?ref=ef500863bd7a701506d275289af23f62eb931b40", "patch": "@@ -0,0 +1,19 @@\n+struct A where (): Sized where (): Sized {}\n+//~^ ERROR cannot define duplicate `where` clauses on an item\n+\n+fn b() where (): Sized where (): Sized {}\n+//~^ ERROR cannot define duplicate `where` clauses on an item\n+\n+enum C where (): Sized where (): Sized {}\n+//~^ ERROR cannot define duplicate `where` clauses on an item\n+\n+struct D where (): Sized, where (): Sized {}\n+//~^ ERROR cannot define duplicate `where` clauses on an item\n+\n+fn e() where (): Sized, where (): Sized {}\n+//~^ ERROR cannot define duplicate `where` clauses on an item\n+\n+enum F where (): Sized, where (): Sized {}\n+//~^ ERROR cannot define duplicate `where` clauses on an item\n+\n+fn main() {}"}, {"sha": "8250d4f1e056842c19c05f8c761c7398ad91ab6c", "filename": "src/test/ui/parser/duplicate-where-clauses.stderr", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/ef500863bd7a701506d275289af23f62eb931b40/src%2Ftest%2Fui%2Fparser%2Fduplicate-where-clauses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef500863bd7a701506d275289af23f62eb931b40/src%2Ftest%2Fui%2Fparser%2Fduplicate-where-clauses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-where-clauses.stderr?ref=ef500863bd7a701506d275289af23f62eb931b40", "patch": "@@ -0,0 +1,80 @@\n+error: cannot define duplicate `where` clauses on an item\n+  --> $DIR/duplicate-where-clauses.rs:1:32\n+   |\n+LL | struct A where (): Sized where (): Sized {}\n+   |                -               ^\n+   |                |\n+   |                previous `where` clause starts here\n+   |\n+help: consider joining the two `where` clauses into one\n+   |\n+LL | struct A where (): Sized, (): Sized {}\n+   |                         ~\n+\n+error: cannot define duplicate `where` clauses on an item\n+  --> $DIR/duplicate-where-clauses.rs:4:30\n+   |\n+LL | fn b() where (): Sized where (): Sized {}\n+   |              -               ^\n+   |              |\n+   |              previous `where` clause starts here\n+   |\n+help: consider joining the two `where` clauses into one\n+   |\n+LL | fn b() where (): Sized, (): Sized {}\n+   |                       ~\n+\n+error: cannot define duplicate `where` clauses on an item\n+  --> $DIR/duplicate-where-clauses.rs:7:30\n+   |\n+LL | enum C where (): Sized where (): Sized {}\n+   |              -               ^\n+   |              |\n+   |              previous `where` clause starts here\n+   |\n+help: consider joining the two `where` clauses into one\n+   |\n+LL | enum C where (): Sized, (): Sized {}\n+   |                       ~\n+\n+error: cannot define duplicate `where` clauses on an item\n+  --> $DIR/duplicate-where-clauses.rs:10:33\n+   |\n+LL | struct D where (): Sized, where (): Sized {}\n+   |                -                ^\n+   |                |\n+   |                previous `where` clause starts here\n+   |\n+help: consider joining the two `where` clauses into one\n+   |\n+LL | struct D where (): Sized, (): Sized {}\n+   |                         ~\n+\n+error: cannot define duplicate `where` clauses on an item\n+  --> $DIR/duplicate-where-clauses.rs:13:31\n+   |\n+LL | fn e() where (): Sized, where (): Sized {}\n+   |              -                ^\n+   |              |\n+   |              previous `where` clause starts here\n+   |\n+help: consider joining the two `where` clauses into one\n+   |\n+LL | fn e() where (): Sized, (): Sized {}\n+   |                       ~\n+\n+error: cannot define duplicate `where` clauses on an item\n+  --> $DIR/duplicate-where-clauses.rs:16:31\n+   |\n+LL | enum F where (): Sized, where (): Sized {}\n+   |              -                ^\n+   |              |\n+   |              previous `where` clause starts here\n+   |\n+help: consider joining the two `where` clauses into one\n+   |\n+LL | enum F where (): Sized, (): Sized {}\n+   |                       ~\n+\n+error: aborting due to 6 previous errors\n+"}]}