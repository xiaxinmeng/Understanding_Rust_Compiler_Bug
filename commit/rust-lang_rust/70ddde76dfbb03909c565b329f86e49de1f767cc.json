{"sha": "70ddde76dfbb03909c565b329f86e49de1f767cc", "node_id": "C_kwDOAAsO6NoAKDcwZGRkZTc2ZGZiYjAzOTA5YzU2NWIzMjlmODZlNDlkZTFmNzY3Y2M", "commit": {"author": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "liehr.exchange@gmx.net", "date": "2023-01-06T16:47:21Z"}, "committer": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "liehr.exchange@gmx.net", "date": "2023-01-11T16:54:48Z"}, "message": "parser: recover from where clauses placed before tuple struct bodies", "tree": {"sha": "70f3b7a49c33c052749413d30547e52dd913a7b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70f3b7a49c33c052749413d30547e52dd913a7b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70ddde76dfbb03909c565b329f86e49de1f767cc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE/neO4LLiv/pSFQJbzXXjHOLP19kFAmO+6doACgkQzXXjHOLP\n19koEA//Yt9//B9/l+tWiZWHiZJe3gLavhRPG1PAFQMrYzr+XQ9mojEoZYQb7Yuf\nnSWfSqEMuWNkE8w9Usvnu+KzKuKe+DOwF7tdoDe5zJJk+RfvPcdgaPBPBuNW6+Ic\nJKwdLQfdElZfB39STfukPg9EtGxf/ffqzNl7/9oZnm0nh6GYjz6X1wbpU0eFCqs7\n4i71BRTzxBY5Nj0hqN4mHQt22Z60ArHVwHzsnZGkLpJ4fz06/rDVzWomaQVxBr1o\nXqM90p6k32M9oK5tPNiY8bCQUYB35BaliBQlg0ZuOHaBRYxcUE0chlFYfVjTsmIm\nOsZMCzBzQIkiPM5JI9cVq0j3nRoJM+wu1DmU5eTyTCXeM2rBRRcQcC2C/BBWTV7+\njaNaKYhN5GWG5qdCgAPiVt0ORIQ5VsQb/801T+r9ANBjIypXZXx5ZBOsswd+PNAu\nV7IhX6t3bJMxPcDBR0OxSLrFMkopcjnqnJc+/BzB73S2pPVhFma+mlbC8GarrT13\n5Er8ec5kp+I5AEiWZrCXygrkc2LwtcBtDzu4hDuaEu82sEyBtXdumI3u3QIyNGU+\nBDhuUYTFMIsKmklc7Gfw8yLFn+0mhgOdXNhwJaCkArvjGD0oGJZHXuQiptAIqbWb\ngB3srL+F4UkWV4gwt4ghBS5to6TxePlIg54QrRJtvJCs417+Wss=\n=g9yh\n-----END PGP SIGNATURE-----", "payload": "tree 70f3b7a49c33c052749413d30547e52dd913a7b2\nparent b22c152958eade17a71d899b29a2d39bcc77aa48\nauthor Le\u00f3n Orell Valerian Liehr <liehr.exchange@gmx.net> 1673023641 +0100\ncommitter Le\u00f3n Orell Valerian Liehr <liehr.exchange@gmx.net> 1673456088 +0100\n\nparser: recover from where clauses placed before tuple struct bodies\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70ddde76dfbb03909c565b329f86e49de1f767cc", "html_url": "https://github.com/rust-lang/rust/commit/70ddde76dfbb03909c565b329f86e49de1f767cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70ddde76dfbb03909c565b329f86e49de1f767cc/comments", "author": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b22c152958eade17a71d899b29a2d39bcc77aa48", "url": "https://api.github.com/repos/rust-lang/rust/commits/b22c152958eade17a71d899b29a2d39bcc77aa48", "html_url": "https://github.com/rust-lang/rust/commit/b22c152958eade17a71d899b29a2d39bcc77aa48"}], "stats": {"total": 283, "additions": 266, "deletions": 17}, "files": [{"sha": "ecb05162f95ed8be80d81143ea39bb2fa47c899b", "filename": "compiler/rustc_error_messages/locales/en-US/parse.ftl", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70ddde76dfbb03909c565b329f86e49de1f767cc/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/70ddde76dfbb03909c565b329f86e49de1f767cc/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl?ref=70ddde76dfbb03909c565b329f86e49de1f767cc", "patch": "@@ -368,3 +368,9 @@ parse_maybe_fn_typo_with_impl = you might have meant to write `impl` instead of\n \n parse_expected_fn_path_found_fn_keyword = expected identifier, found keyword `fn`\n     .suggestion = use `Fn` to refer to the trait\n+\n+parse_where_clause_before_tuple_struct_body = where clauses are not allowed before tuple struct bodies\n+    .label = unexpected where clause\n+    .name_label = while parsing this tuple struct\n+    .body_label = the struct body\n+    .suggestion = move the body before the where clause"}, {"sha": "3fdb2177ab0e04c7a02ee05d2b04940896dd46e7", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/70ddde76dfbb03909c565b329f86e49de1f767cc/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ddde76dfbb03909c565b329f86e49de1f767cc/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=70ddde76dfbb03909c565b329f86e49de1f767cc", "patch": "@@ -1237,3 +1237,27 @@ pub(crate) struct ExpectedFnPathFoundFnKeyword {\n     #[suggestion(applicability = \"machine-applicable\", code = \"Fn\", style = \"verbose\")]\n     pub fn_token_span: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(parse_where_clause_before_tuple_struct_body)]\n+pub(crate) struct WhereClauseBeforeTupleStructBody {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    #[label(name_label)]\n+    pub name: Span,\n+    #[label(body_label)]\n+    pub body: Span,\n+    #[subdiagnostic]\n+    pub sugg: Option<WhereClauseBeforeTupleStructBodySugg>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[multipart_suggestion(suggestion, applicability = \"machine-applicable\")]\n+pub(crate) struct WhereClauseBeforeTupleStructBodySugg {\n+    #[suggestion_part(code = \"{snippet}\")]\n+    pub left: Span,\n+    pub snippet: String,\n+    #[suggestion_part(code = \"\")]\n+    pub right: Span,\n+}"}, {"sha": "8ba811715d80db6dc9bbf88837990d629e721a29", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 108, "deletions": 10, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/70ddde76dfbb03909c565b329f86e49de1f767cc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ddde76dfbb03909c565b329f86e49de1f767cc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=70ddde76dfbb03909c565b329f86e49de1f767cc", "patch": "@@ -1,11 +1,20 @@\n+use crate::errors::{WhereClauseBeforeTupleStructBody, WhereClauseBeforeTupleStructBodySugg};\n+\n use super::{ForceCollect, Parser, TrailingToken};\n \n+use ast::token::Delimiter;\n use rustc_ast::token;\n use rustc_ast::{\n     self as ast, AttrVec, GenericBounds, GenericParam, GenericParamKind, TyKind, WhereClause,\n };\n use rustc_errors::{Applicability, PResult};\n-use rustc_span::symbol::kw;\n+use rustc_span::symbol::{kw, Ident};\n+use rustc_span::Span;\n+\n+enum PredicateOrStructBody {\n+    Predicate(ast::WherePredicate),\n+    StructBody(Vec<ast::FieldDef>),\n+}\n \n impl<'a> Parser<'a> {\n     /// Parses bounds of a lifetime parameter `BOUND + BOUND + BOUND`, possibly with trailing `+`.\n@@ -240,23 +249,39 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    /// Parses an optional where-clause and places it in `generics`.\n+    /// Parses an optional where-clause.\n     ///\n     /// ```ignore (only-for-syntax-highlight)\n     /// where T : Trait<U, V> + 'b, 'a : 'b\n     /// ```\n     pub(super) fn parse_where_clause(&mut self) -> PResult<'a, WhereClause> {\n+        self.parse_where_clause_common(None).map(|(clause, _)| clause)\n+    }\n+\n+    pub(super) fn parse_struct_where_clause(\n+        &mut self,\n+        struct_name: Ident,\n+        body_insertion_point: Span,\n+    ) -> PResult<'a, (WhereClause, Option<Vec<ast::FieldDef>>)> {\n+        self.parse_where_clause_common(Some((struct_name, body_insertion_point)))\n+    }\n+\n+    fn parse_where_clause_common(\n+        &mut self,\n+        struct_: Option<(Ident, Span)>,\n+    ) -> PResult<'a, (WhereClause, Option<Vec<ast::FieldDef>>)> {\n         let mut where_clause = WhereClause {\n             has_where_token: false,\n             predicates: Vec::new(),\n             span: self.prev_token.span.shrink_to_hi(),\n         };\n+        let mut tuple_struct_body = None;\n \n         if !self.eat_keyword(kw::Where) {\n-            return Ok(where_clause);\n+            return Ok((where_clause, None));\n         }\n         where_clause.has_where_token = true;\n-        let lo = self.prev_token.span;\n+        let where_lo = self.prev_token.span;\n \n         // We are considering adding generics to the `where` keyword as an alternative higher-rank\n         // parameter syntax (as in `where<'a>` or `where<T>`. To avoid that being a breaking\n@@ -272,21 +297,30 @@ impl<'a> Parser<'a> {\n         }\n \n         loop {\n-            let lo = self.token.span;\n+            let where_sp = where_lo.to(self.prev_token.span);\n+            let pred_lo = self.token.span;\n             if self.check_lifetime() && self.look_ahead(1, |t| !t.is_like_plus()) {\n                 let lifetime = self.expect_lifetime();\n                 // Bounds starting with a colon are mandatory, but possibly empty.\n                 self.expect(&token::Colon)?;\n                 let bounds = self.parse_lt_param_bounds();\n                 where_clause.predicates.push(ast::WherePredicate::RegionPredicate(\n                     ast::WhereRegionPredicate {\n-                        span: lo.to(self.prev_token.span),\n+                        span: pred_lo.to(self.prev_token.span),\n                         lifetime,\n                         bounds,\n                     },\n                 ));\n             } else if self.check_type() {\n-                where_clause.predicates.push(self.parse_ty_where_predicate()?);\n+                match self.parse_ty_where_predicate_or_recover_tuple_struct_body(\n+                    struct_, pred_lo, where_sp,\n+                )? {\n+                    PredicateOrStructBody::Predicate(pred) => where_clause.predicates.push(pred),\n+                    PredicateOrStructBody::StructBody(body) => {\n+                        tuple_struct_body = Some(body);\n+                        break;\n+                    }\n+                }\n             } else {\n                 break;\n             }\n@@ -297,7 +331,7 @@ impl<'a> Parser<'a> {\n             if self.eat_keyword_noexpect(kw::Where) {\n                 let msg = \"cannot define duplicate `where` clauses on an item\";\n                 let mut err = self.struct_span_err(self.token.span, msg);\n-                err.span_label(lo, \"previous `where` clause starts here\");\n+                err.span_label(pred_lo, \"previous `where` clause starts here\");\n                 err.span_suggestion_verbose(\n                     prev_token.shrink_to_hi().to(self.prev_token.span),\n                     \"consider joining the two `where` clauses into one\",\n@@ -310,8 +344,72 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        where_clause.span = lo.to(self.prev_token.span);\n-        Ok(where_clause)\n+        where_clause.span = where_lo.to(self.prev_token.span);\n+        Ok((where_clause, tuple_struct_body))\n+    }\n+\n+    fn parse_ty_where_predicate_or_recover_tuple_struct_body(\n+        &mut self,\n+        struct_: Option<(Ident, Span)>,\n+        pred_lo: Span,\n+        where_sp: Span,\n+    ) -> PResult<'a, PredicateOrStructBody> {\n+        let mut snapshot = None;\n+\n+        if let Some(struct_) = struct_\n+            && self.may_recover()\n+            && self.token.kind == token::OpenDelim(Delimiter::Parenthesis)\n+        {\n+            snapshot = Some((struct_, self.create_snapshot_for_diagnostic()));\n+        };\n+\n+        match self.parse_ty_where_predicate() {\n+            Ok(pred) => Ok(PredicateOrStructBody::Predicate(pred)),\n+            Err(type_err) => {\n+                let Some(((struct_name, body_insertion_point), mut snapshot)) = snapshot else {\n+                    return Err(type_err);\n+                };\n+\n+                // Check if we might have encountered an out of place tuple struct body.\n+                match snapshot.parse_tuple_struct_body() {\n+                    // Since we don't know the exact reason why we failed to parse the\n+                    // predicate (we might have stumbled upon something bogus like `(T): ?`),\n+                    // employ a simple heuristic to weed out some pathological cases:\n+                    // Look for a semicolon (strong indicator) or anything that might mark\n+                    // the end of the item (weak indicator) following the body.\n+                    Ok(body)\n+                        if matches!(snapshot.token.kind, token::Semi | token::Eof)\n+                            || snapshot.token.can_begin_item() =>\n+                    {\n+                        type_err.cancel();\n+\n+                        let body_sp = pred_lo.to(snapshot.prev_token.span);\n+                        let map = self.sess.source_map();\n+\n+                        self.sess.emit_err(WhereClauseBeforeTupleStructBody {\n+                            span: where_sp,\n+                            name: struct_name.span,\n+                            body: body_sp,\n+                            sugg: map.span_to_snippet(body_sp).ok().map(|body| {\n+                                WhereClauseBeforeTupleStructBodySugg {\n+                                    left: body_insertion_point.shrink_to_hi(),\n+                                    snippet: body,\n+                                    right: map.end_point(where_sp).to(body_sp),\n+                                }\n+                            }),\n+                        });\n+\n+                        self.restore_snapshot(snapshot);\n+                        Ok(PredicateOrStructBody::StructBody(body))\n+                    }\n+                    Ok(_) => Err(type_err),\n+                    Err(body_err) => {\n+                        body_err.cancel();\n+                        Err(type_err)\n+                    }\n+                }\n+            }\n+        }\n     }\n \n     fn parse_ty_where_predicate(&mut self) -> PResult<'a, ast::WherePredicate> {"}, {"sha": "5c6650acd8a14ea49fa474d19f10eb2a39491112", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/70ddde76dfbb03909c565b329f86e49de1f767cc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ddde76dfbb03909c565b329f86e49de1f767cc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=70ddde76dfbb03909c565b329f86e49de1f767cc", "patch": "@@ -1454,8 +1454,16 @@ impl<'a> Parser<'a> {\n         // struct.\n \n         let vdata = if self.token.is_keyword(kw::Where) {\n-            generics.where_clause = self.parse_where_clause()?;\n-            if self.eat(&token::Semi) {\n+            let tuple_struct_body;\n+            (generics.where_clause, tuple_struct_body) =\n+                self.parse_struct_where_clause(class_name, generics.span)?;\n+\n+            if let Some(body) = tuple_struct_body {\n+                // If we see a misplaced tuple struct body: `struct Foo<T> where T: Copy, (T);`\n+                let body = VariantData::Tuple(body, DUMMY_NODE_ID);\n+                self.expect_semi()?;\n+                body\n+            } else if self.eat(&token::Semi) {\n                 // If we see a: `struct Foo<T> where T: Copy;` style decl.\n                 VariantData::Unit(DUMMY_NODE_ID)\n             } else {\n@@ -1575,7 +1583,7 @@ impl<'a> Parser<'a> {\n         Ok((fields, recovered))\n     }\n \n-    fn parse_tuple_struct_body(&mut self) -> PResult<'a, Vec<FieldDef>> {\n+    pub(super) fn parse_tuple_struct_body(&mut self) -> PResult<'a, Vec<FieldDef>> {\n         // This is the case where we find `struct Foo<T>(T) where T: Copy;`\n         // Unit like structs are handled in parse_item_struct function\n         self.parse_paren_comma_seq(|p| {"}, {"sha": "020fb41c22738b4bd9436589dea88e73212964fc", "filename": "tests/ui/parser/issues/issue-17904.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70ddde76dfbb03909c565b329f86e49de1f767cc/tests%2Fui%2Fparser%2Fissues%2Fissue-17904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ddde76dfbb03909c565b329f86e49de1f767cc/tests%2Fui%2Fparser%2Fissues%2Fissue-17904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-17904.rs?ref=70ddde76dfbb03909c565b329f86e49de1f767cc", "patch": "@@ -1,6 +1,8 @@\n+// compile-flags: -Zparse-only\n+\n struct Baz<U> where U: Eq(U); //This is parsed as the new Fn* style parenthesis syntax.\n struct Baz<U> where U: Eq(U) -> R; // Notice this parses as well.\n struct Baz<U>(U) where U: Eq; // This rightfully signals no error as well.\n-struct Foo<T> where T: Copy, (T); //~ ERROR expected one of `:`, `==`, or `=`, found `;`\n+struct Foo<T> where T: Copy, (T); //~ ERROR where clauses are not allowed before tuple struct bodies\n \n fn main() {}"}, {"sha": "aa343975dcac5aff8ae1d6d501038c90fb78342e", "filename": "tests/ui/parser/issues/issue-17904.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/70ddde76dfbb03909c565b329f86e49de1f767cc/tests%2Fui%2Fparser%2Fissues%2Fissue-17904.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70ddde76dfbb03909c565b329f86e49de1f767cc/tests%2Fui%2Fparser%2Fissues%2Fissue-17904.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-17904.stderr?ref=70ddde76dfbb03909c565b329f86e49de1f767cc", "patch": "@@ -1,8 +1,17 @@\n-error: expected one of `:`, `==`, or `=`, found `;`\n-  --> $DIR/issue-17904.rs:4:33\n+error: where clauses are not allowed before tuple struct bodies\n+  --> $DIR/issue-17904.rs:6:15\n    |\n LL | struct Foo<T> where T: Copy, (T);\n-   |                                 ^ expected one of `:`, `==`, or `=`\n+   |        ---    ^^^^^^^^^^^^^^ --- the struct body\n+   |        |      |\n+   |        |      unexpected where clause\n+   |        while parsing this tuple struct\n+   |\n+help: move the body before the where clause\n+   |\n+LL - struct Foo<T> where T: Copy, (T);\n+LL + struct Foo<T>(T) where T: Copy;\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "227c40e97c0a3d5c89c6c77fb4a8ff8c94e185b1", "filename": "tests/ui/parser/recover-where-clause-before-tuple-struct-body-0.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/70ddde76dfbb03909c565b329f86e49de1f767cc/tests%2Fui%2Fparser%2Frecover-where-clause-before-tuple-struct-body-0.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70ddde76dfbb03909c565b329f86e49de1f767cc/tests%2Fui%2Fparser%2Frecover-where-clause-before-tuple-struct-body-0.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Frecover-where-clause-before-tuple-struct-body-0.fixed?ref=70ddde76dfbb03909c565b329f86e49de1f767cc", "patch": "@@ -0,0 +1,15 @@\n+// Regression test for issues #100790 and #106439.\n+// run-rustfix\n+\n+pub struct Example(usize)\n+where\n+    (): Sized;\n+//~^^^ ERROR where clauses are not allowed before tuple struct bodies\n+\n+struct _Demo(pub usize, usize)\n+where\n+    (): Sized,\n+    String: Clone;\n+//~^^^^ ERROR where clauses are not allowed before tuple struct bodies\n+\n+fn main() {}"}, {"sha": "3699e6fe5723fd76c5f777d5bc73c5a9df05650d", "filename": "tests/ui/parser/recover-where-clause-before-tuple-struct-body-0.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/70ddde76dfbb03909c565b329f86e49de1f767cc/tests%2Fui%2Fparser%2Frecover-where-clause-before-tuple-struct-body-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ddde76dfbb03909c565b329f86e49de1f767cc/tests%2Fui%2Fparser%2Frecover-where-clause-before-tuple-struct-body-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Frecover-where-clause-before-tuple-struct-body-0.rs?ref=70ddde76dfbb03909c565b329f86e49de1f767cc", "patch": "@@ -0,0 +1,17 @@\n+// Regression test for issues #100790 and #106439.\n+// run-rustfix\n+\n+pub struct Example\n+where\n+    (): Sized,\n+(usize);\n+//~^^^ ERROR where clauses are not allowed before tuple struct bodies\n+\n+struct _Demo\n+where\n+    (): Sized,\n+    String: Clone,\n+(pub usize, usize);\n+//~^^^^ ERROR where clauses are not allowed before tuple struct bodies\n+\n+fn main() {}"}, {"sha": "18aa5fadb6bc7cfddc509de33e19a800d7d7428f", "filename": "tests/ui/parser/recover-where-clause-before-tuple-struct-body-0.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/70ddde76dfbb03909c565b329f86e49de1f767cc/tests%2Fui%2Fparser%2Frecover-where-clause-before-tuple-struct-body-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70ddde76dfbb03909c565b329f86e49de1f767cc/tests%2Fui%2Fparser%2Frecover-where-clause-before-tuple-struct-body-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Frecover-where-clause-before-tuple-struct-body-0.stderr?ref=70ddde76dfbb03909c565b329f86e49de1f767cc", "patch": "@@ -0,0 +1,40 @@\n+error: where clauses are not allowed before tuple struct bodies\n+  --> $DIR/recover-where-clause-before-tuple-struct-body-0.rs:5:1\n+   |\n+LL |   pub struct Example\n+   |              ------- while parsing this tuple struct\n+LL | / where\n+LL | |     (): Sized,\n+   | |______________^ unexpected where clause\n+LL |   (usize);\n+   |   ------- the struct body\n+   |\n+help: move the body before the where clause\n+   |\n+LL ~ pub struct Example(usize)\n+LL | where\n+LL ~     (): Sized;\n+   |\n+\n+error: where clauses are not allowed before tuple struct bodies\n+  --> $DIR/recover-where-clause-before-tuple-struct-body-0.rs:11:1\n+   |\n+LL |   struct _Demo\n+   |          ----- while parsing this tuple struct\n+LL | / where\n+LL | |     (): Sized,\n+LL | |     String: Clone,\n+   | |__________________^ unexpected where clause\n+LL |   (pub usize, usize);\n+   |   ------------------ the struct body\n+   |\n+help: move the body before the where clause\n+   |\n+LL ~ struct _Demo(pub usize, usize)\n+LL | where\n+LL |     (): Sized,\n+LL ~     String: Clone;\n+   |\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "f515ae81e510692b16414229551cfea922c52504", "filename": "tests/ui/parser/recover-where-clause-before-tuple-struct-body-1.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70ddde76dfbb03909c565b329f86e49de1f767cc/tests%2Fui%2Fparser%2Frecover-where-clause-before-tuple-struct-body-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ddde76dfbb03909c565b329f86e49de1f767cc/tests%2Fui%2Fparser%2Frecover-where-clause-before-tuple-struct-body-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Frecover-where-clause-before-tuple-struct-body-1.rs?ref=70ddde76dfbb03909c565b329f86e49de1f767cc", "patch": "@@ -0,0 +1,7 @@\n+// Regression test for issues #100790 and #106439.\n+\n+// Make sure that we still show a helpful error message even if the trailing semicolon is missing.\n+\n+struct Foo<T> where T: MyTrait, (T)\n+//~^ ERROR where clauses are not allowed before tuple struct bodies\n+//~| ERROR expected `;`, found `<eof>`"}, {"sha": "2219c2a731630dd95e9f70ffc9fd1cb0c38261f6", "filename": "tests/ui/parser/recover-where-clause-before-tuple-struct-body-1.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/70ddde76dfbb03909c565b329f86e49de1f767cc/tests%2Fui%2Fparser%2Frecover-where-clause-before-tuple-struct-body-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70ddde76dfbb03909c565b329f86e49de1f767cc/tests%2Fui%2Fparser%2Frecover-where-clause-before-tuple-struct-body-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Frecover-where-clause-before-tuple-struct-body-1.stderr?ref=70ddde76dfbb03909c565b329f86e49de1f767cc", "patch": "@@ -0,0 +1,23 @@\n+error: where clauses are not allowed before tuple struct bodies\n+  --> $DIR/recover-where-clause-before-tuple-struct-body-1.rs:5:15\n+   |\n+LL | struct Foo<T> where T: MyTrait, (T)\n+   |        ---    ^^^^^^^^^^^^^^^^^ --- the struct body\n+   |        |      |\n+   |        |      unexpected where clause\n+   |        while parsing this tuple struct\n+   |\n+help: move the body before the where clause\n+   |\n+LL - struct Foo<T> where T: MyTrait, (T)\n+LL + struct Foo<T>(T) where T: MyTrait\n+   |\n+\n+error: expected `;`, found `<eof>`\n+  --> $DIR/recover-where-clause-before-tuple-struct-body-1.rs:5:35\n+   |\n+LL | struct Foo<T> where T: MyTrait, (T)\n+   |                                   ^ expected `;`\n+\n+error: aborting due to 2 previous errors\n+"}]}