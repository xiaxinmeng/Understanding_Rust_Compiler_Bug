{"sha": "a2ccc81f4be5e8df81a72f5cc6c10ca267b0fc08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyY2NjODFmNGJlNWU4ZGY4MWE3MmY1Y2M2YzEwY2EyNjdiMGZjMDg=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-16T19:50:24Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-17T03:50:16Z"}, "message": "remove example usage of from_str in error docs\n\nFixes #24185", "tree": {"sha": "d16bb03920a360fe7e5584ced18bda51d1cd2d8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d16bb03920a360fe7e5584ced18bda51d1cd2d8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2ccc81f4be5e8df81a72f5cc6c10ca267b0fc08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2ccc81f4be5e8df81a72f5cc6c10ca267b0fc08", "html_url": "https://github.com/rust-lang/rust/commit/a2ccc81f4be5e8df81a72f5cc6c10ca267b0fc08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2ccc81f4be5e8df81a72f5cc6c10ca267b0fc08/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ca83a79bf6fcd019ab53e1b10a83663c6b3a34d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ca83a79bf6fcd019ab53e1b10a83663c6b3a34d", "html_url": "https://github.com/rust-lang/rust/commit/3ca83a79bf6fcd019ab53e1b10a83663c6b3a34d"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "e261eb01dba3e90faf7371c931f1c17d056ab549", "filename": "src/doc/trpl/error-handling.md", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a2ccc81f4be5e8df81a72f5cc6c10ca267b0fc08/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/a2ccc81f4be5e8df81a72f5cc6c10ca267b0fc08/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ferror-handling.md?ref=a2ccc81f4be5e8df81a72f5cc6c10ca267b0fc08", "patch": "@@ -20,18 +20,18 @@ panic. A *failure* is an error that can be recovered from in some way. A\n *panic* is an error that cannot be recovered from.\n \n What do we mean by \"recover\"? Well, in most cases, the possibility of an error\n-is expected. For example, consider the `from_str` function:\n+is expected. For example, consider the `parse` function:\n \n-```{rust,ignore}\n-from_str(\"5\");\n+```ignore\n+\"5\".parse();\n ```\n \n-This function takes a string argument and converts it into another type. But\n-because it's a string, you can't be sure that the conversion actually works.\n-For example, what should this convert to?\n+This method converts a string into another type. But because it's a string, you\n+can't be sure that the conversion actually works. For example, what should this\n+convert to?\n \n-```{rust,ignore}\n-from_str(\"hello5world\");\n+```ignore\n+\"hello5world\".parse();\n ```\n \n This won't work. So we know that this function will only work properly for some\n@@ -40,7 +40,8 @@ inputs. It's expected behavior. We call this kind of error a *failure*.\n On the other hand, sometimes, there are errors that are unexpected, or which\n we cannot recover from. A classic example is an `assert!`:\n \n-```{rust,ignore}\n+```rust\n+# let x = 5;\n assert!(x == 5);\n ```\n \n@@ -119,17 +120,19 @@ Rust calls these sorts of errors *panics*.\n # Handling errors with `Option` and `Result`\n \n The simplest way to indicate that a function may fail is to use the `Option<T>`\n-type. Remember our `from_str()` example? Here's its type signature:\n+type. For example, the `find` method on strings attempts to find a pattern\n+in a string, and returns an `Option`:\n \n-```{rust,ignore}\n-pub fn from_str<A: FromStr>(s: &str) -> Option<A>\n+```rust\n+let s = \"foo\";\n+\n+assert_eq!(s.find('f'), Some(0));\n+assert_eq!(s.find('z'), None);\n ```\n \n-`from_str()` returns an `Option<A>`. If the conversion succeeds, it will return\n-`Some(value)`, and if it fails, it will return `None`.\n \n This is appropriate for the simplest of cases, but doesn't give us a lot of\n-information in the failure case. What if we wanted to know _why_ the conversion\n+information in the failure case. What if we wanted to know _why_ the function\n failed? For this, we can use the `Result<T, E>` type. It looks like this:\n \n ```rust"}]}