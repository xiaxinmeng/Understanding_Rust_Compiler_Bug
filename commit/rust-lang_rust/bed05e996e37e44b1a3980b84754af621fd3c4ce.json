{"sha": "bed05e996e37e44b1a3980b84754af621fd3c4ce", "node_id": "C_kwDOAAsO6NoAKGJlZDA1ZTk5NmUzN2U0NGIxYTM5ODBiODQ3NTRhZjYyMWZkM2M0Y2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-02T18:57:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-02T18:57:32Z"}, "message": "Auto merge of #96578 - tmiasko:chunked-bit-set-fmt, r=nnethercote\n\nFix -Zdump-mir-dataflow by implementing DebugWithContext for ChunkedBitSet\n\n`DebugWithContext` is used to format changes to dataflow state along with MIR\nin graphviz dot files. In the case of `ChunkedBitSet` it was left unimplemented,\nso attempts to use `-Zdump-mir-dataflow -Zdump-mir=all` resulted in an ICE:\n\n> thread 'rustc' panicked at 'not implemented: implement when/if needed',\n\nProvide the missing implementation.\n\nr? `@nnethercote`", "tree": {"sha": "bde7085b0bf14ccf6e263d41525591e113974848", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bde7085b0bf14ccf6e263d41525591e113974848"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bed05e996e37e44b1a3980b84754af621fd3c4ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bed05e996e37e44b1a3980b84754af621fd3c4ce", "html_url": "https://github.com/rust-lang/rust/commit/bed05e996e37e44b1a3980b84754af621fd3c4ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bed05e996e37e44b1a3980b84754af621fd3c4ce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24c898504379252fafedc218074af49126da41ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/24c898504379252fafedc218074af49126da41ec", "html_url": "https://github.com/rust-lang/rust/commit/24c898504379252fafedc218074af49126da41ec"}, {"sha": "0e7d54c9e71aa7b5de88f91e821999b829c08661", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e7d54c9e71aa7b5de88f91e821999b829c08661", "html_url": "https://github.com/rust-lang/rust/commit/0e7d54c9e71aa7b5de88f91e821999b829c08661"}], "stats": {"total": 180, "additions": 144, "deletions": 36}, "files": [{"sha": "059755a743b6676f9db2cba0b79fb3acd13329e6", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/bed05e996e37e44b1a3980b84754af621fd3c4ce/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bed05e996e37e44b1a3980b84754af621fd3c4ce/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=bed05e996e37e44b1a3980b84754af621fd3c4ce", "patch": "@@ -479,6 +479,11 @@ impl<T: Idx> ChunkedBitSet<T> {\n         }\n     }\n \n+    #[inline]\n+    pub fn iter(&self) -> ChunkedBitIter<'_, T> {\n+        ChunkedBitIter::new(self)\n+    }\n+\n     /// Insert `elem`. Returns whether the set has changed.\n     pub fn insert(&mut self, elem: T) -> bool {\n         assert!(elem.index() < self.domain_size);\n@@ -697,6 +702,49 @@ impl<T> Clone for ChunkedBitSet<T> {\n     }\n }\n \n+pub struct ChunkedBitIter<'a, T: Idx> {\n+    index: usize,\n+    bitset: &'a ChunkedBitSet<T>,\n+}\n+\n+impl<'a, T: Idx> ChunkedBitIter<'a, T> {\n+    #[inline]\n+    fn new(bitset: &'a ChunkedBitSet<T>) -> ChunkedBitIter<'a, T> {\n+        ChunkedBitIter { index: 0, bitset }\n+    }\n+}\n+\n+impl<'a, T: Idx> Iterator for ChunkedBitIter<'a, T> {\n+    type Item = T;\n+    fn next(&mut self) -> Option<T> {\n+        while self.index < self.bitset.domain_size() {\n+            let elem = T::new(self.index);\n+            let chunk = &self.bitset.chunks[chunk_index(elem)];\n+            match &chunk {\n+                Zeros(chunk_domain_size) => {\n+                    self.index += *chunk_domain_size as usize;\n+                }\n+                Ones(_chunk_domain_size) => {\n+                    self.index += 1;\n+                    return Some(elem);\n+                }\n+                Mixed(_chunk_domain_size, _, words) => loop {\n+                    let elem = T::new(self.index);\n+                    self.index += 1;\n+                    let (word_index, mask) = chunk_word_index_and_mask(elem);\n+                    if (words[word_index] & mask) != 0 {\n+                        return Some(elem);\n+                    }\n+                    if self.index % CHUNK_BITS == 0 {\n+                        break;\n+                    }\n+                },\n+            }\n+        }\n+        None\n+    }\n+}\n+\n impl Chunk {\n     #[cfg(test)]\n     fn assert_valid(&self) {"}, {"sha": "cfc891e97a32bbf4f79b041b794834686f67de96", "filename": "compiler/rustc_index/src/bit_set/tests.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bed05e996e37e44b1a3980b84754af621fd3c4ce/compiler%2Frustc_index%2Fsrc%2Fbit_set%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bed05e996e37e44b1a3980b84754af621fd3c4ce/compiler%2Frustc_index%2Fsrc%2Fbit_set%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set%2Ftests.rs?ref=bed05e996e37e44b1a3980b84754af621fd3c4ce", "patch": "@@ -342,6 +342,40 @@ fn chunked_bitset() {\n     b10000b.assert_valid();\n }\n \n+#[test]\n+fn chunked_bitset_iter() {\n+    fn with_elements(elements: &[usize], domain_size: usize) -> ChunkedBitSet<usize> {\n+        let mut s = ChunkedBitSet::new_empty(domain_size);\n+        for &e in elements {\n+            s.insert(e);\n+        }\n+        s\n+    }\n+\n+    // Empty\n+    let vec: Vec<usize> = Vec::new();\n+    let bit = with_elements(&vec, 9000);\n+    assert_eq!(vec, bit.iter().collect::<Vec<_>>());\n+\n+    // Filled\n+    let n = 10000;\n+    let vec: Vec<usize> = (0..n).collect();\n+    let bit = with_elements(&vec, n);\n+    assert_eq!(vec, bit.iter().collect::<Vec<_>>());\n+\n+    // Filled with trailing zeros\n+    let n = 10000;\n+    let vec: Vec<usize> = (0..n).collect();\n+    let bit = with_elements(&vec, 2 * n);\n+    assert_eq!(vec, bit.iter().collect::<Vec<_>>());\n+\n+    // Mixed\n+    let n = 12345;\n+    let vec: Vec<usize> = vec![0, 1, 2, 2010, 2047, 2099, 6000, 6002, 6004];\n+    let bit = with_elements(&vec, n);\n+    assert_eq!(vec, bit.iter().collect::<Vec<_>>());\n+}\n+\n #[test]\n fn grow() {\n     let mut set: GrowableBitSet<usize> = GrowableBitSet::with_capacity(65);"}, {"sha": "209e6f7ac9fe41c98c605de5e70388e67f2d3306", "filename": "compiler/rustc_mir_dataflow/src/framework/fmt.rs", "status": "modified", "additions": 62, "deletions": 36, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/bed05e996e37e44b1a3980b84754af621fd3c4ce/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bed05e996e37e44b1a3980b84754af621fd3c4ce/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ffmt.rs?ref=bed05e996e37e44b1a3980b84754af621fd3c4ce", "patch": "@@ -93,57 +93,83 @@ where\n             };\n         }\n \n-        let mut first = true;\n-        for idx in set_in_self.iter() {\n-            let delim = if first {\n-                \"\\u{001f}+\"\n-            } else if f.alternate() {\n-                \"\\n\\u{001f}+\"\n-            } else {\n-                \", \"\n-            };\n+        fmt_diff(&set_in_self, &cleared_in_self, ctxt, f)\n+    }\n+}\n \n-            write!(f, \"{}\", delim)?;\n-            idx.fmt_with(ctxt, f)?;\n-            first = false;\n-        }\n+impl<T, C> DebugWithContext<C> for ChunkedBitSet<T>\n+where\n+    T: Idx + DebugWithContext<C>,\n+{\n+    fn fmt_with(&self, ctxt: &C, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_set().entries(self.iter().map(|i| DebugWithAdapter { this: i, ctxt })).finish()\n+    }\n \n-        if !f.alternate() {\n-            first = true;\n-            if !set_in_self.is_empty() && !cleared_in_self.is_empty() {\n-                write!(f, \"\\t\")?;\n-            }\n-        }\n+    fn fmt_diff_with(&self, old: &Self, ctxt: &C, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let size = self.domain_size();\n+        assert_eq!(size, old.domain_size());\n \n-        for idx in cleared_in_self.iter() {\n-            let delim = if first {\n-                \"\\u{001f}-\"\n-            } else if f.alternate() {\n-                \"\\n\\u{001f}-\"\n-            } else {\n-                \", \"\n-            };\n+        let mut set_in_self = HybridBitSet::new_empty(size);\n+        let mut cleared_in_self = HybridBitSet::new_empty(size);\n \n-            write!(f, \"{}\", delim)?;\n-            idx.fmt_with(ctxt, f)?;\n-            first = false;\n+        for i in (0..size).map(T::new) {\n+            match (self.contains(i), old.contains(i)) {\n+                (true, false) => set_in_self.insert(i),\n+                (false, true) => cleared_in_self.insert(i),\n+                _ => continue,\n+            };\n         }\n \n-        Ok(())\n+        fmt_diff(&set_in_self, &cleared_in_self, ctxt, f)\n     }\n }\n \n-impl<T, C> DebugWithContext<C> for ChunkedBitSet<T>\n+fn fmt_diff<T, C>(\n+    inserted: &HybridBitSet<T>,\n+    removed: &HybridBitSet<T>,\n+    ctxt: &C,\n+    f: &mut fmt::Formatter<'_>,\n+) -> fmt::Result\n where\n     T: Idx + DebugWithContext<C>,\n {\n-    fn fmt_with(&self, _ctxt: &C, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        unimplemented!(\"implement when/if needed\");\n+    let mut first = true;\n+    for idx in inserted.iter() {\n+        let delim = if first {\n+            \"\\u{001f}+\"\n+        } else if f.alternate() {\n+            \"\\n\\u{001f}+\"\n+        } else {\n+            \", \"\n+        };\n+\n+        write!(f, \"{}\", delim)?;\n+        idx.fmt_with(ctxt, f)?;\n+        first = false;\n+    }\n+\n+    if !f.alternate() {\n+        first = true;\n+        if !inserted.is_empty() && !removed.is_empty() {\n+            write!(f, \"\\t\")?;\n+        }\n     }\n \n-    fn fmt_diff_with(&self, _old: &Self, _ctxt: &C, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        unimplemented!(\"implement when/if needed\");\n+    for idx in removed.iter() {\n+        let delim = if first {\n+            \"\\u{001f}-\"\n+        } else if f.alternate() {\n+            \"\\n\\u{001f}-\"\n+        } else {\n+            \", \"\n+        };\n+\n+        write!(f, \"{}\", delim)?;\n+        idx.fmt_with(ctxt, f)?;\n+        first = false;\n     }\n+\n+    Ok(())\n }\n \n impl<T, C> DebugWithContext<C> for &'_ T"}]}