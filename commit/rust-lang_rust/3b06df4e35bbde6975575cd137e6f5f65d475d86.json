{"sha": "3b06df4e35bbde6975575cd137e6f5f65d475d86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMDZkZjRlMzViYmRlNjk3NTU3NWNkMTM3ZTZmNWY2NWQ0NzVkODY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-07-08T15:27:07Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-07-19T05:55:25Z"}, "message": "debuginfo: Added support for struct-style enums.", "tree": {"sha": "6a9d57f1faa4bb24366b83fa4bdacbbb5d1727d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a9d57f1faa4bb24366b83fa4bdacbbb5d1727d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b06df4e35bbde6975575cd137e6f5f65d475d86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b06df4e35bbde6975575cd137e6f5f65d475d86", "html_url": "https://github.com/rust-lang/rust/commit/3b06df4e35bbde6975575cd137e6f5f65d475d86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b06df4e35bbde6975575cd137e6f5f65d475d86/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cf0aac6cf2435e068c4bd62cd34e06f8ef0bd91", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cf0aac6cf2435e068c4bd62cd34e06f8ef0bd91", "html_url": "https://github.com/rust-lang/rust/commit/7cf0aac6cf2435e068c4bd62cd34e06f8ef0bd91"}], "stats": {"total": 237, "additions": 161, "deletions": 76}, "files": [{"sha": "e748ae89a9dc7662e9c5e02eb75b2fa3f7a27959", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3b06df4e35bbde6975575cd137e6f5f65d475d86/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b06df4e35bbde6975575cd137e6f5f65d475d86/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=3b06df4e35bbde6975575cd137e6f5f65d475d86", "patch": "@@ -753,11 +753,16 @@ pub fn get_enum_variants(intr: @ident_interner, cdata: cmd, id: ast::node_id,\n           Some(val) => { disr_val = val; }\n           _         => { /* empty */ }\n         }\n-        infos.push(@ty::VariantInfo_{args: arg_tys,\n-                       ctor_ty: ctor_ty, name: name,\n-                  // I'm not even sure if we encode visibility\n-                  // for variants -- TEST -- tjc\n-                  id: *did, disr_val: disr_val, vis: ast::inherited});\n+        infos.push(@ty::VariantInfo_{\n+            args: arg_tys,\n+            arg_names: None,\n+            ctor_ty: ctor_ty,\n+            name: name,\n+            // I'm not even sure if we encode visibility\n+            // for variants -- TEST -- tjc\n+            id: *did,\n+            disr_val: disr_val,\n+            vis: ast::inherited});\n         disr_val += 1;\n     }\n     return infos;"}, {"sha": "3c163e149d2db159c3c703458931389eb841a724", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b06df4e35bbde6975575cd137e6f5f65d475d86/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b06df4e35bbde6975575cd137e6f5f65d475d86/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=3b06df4e35bbde6975575cd137e6f5f65d475d86", "patch": "@@ -612,9 +612,13 @@ fn create_enum_md(cx: &mut CrateContext,\n \n         let raw_types : &[ty::t] = vi.args;\n         let arg_types = do raw_types.map |&raw_type| { ty::subst(cx.tcx, substs, raw_type) };\n-        \n+\n         let mut arg_llvm_types = do arg_types.map |&ty| { type_of::type_of(cx, ty) };\n-        let mut arg_names = arg_types.map(|_| ~\"\");\n+        let mut arg_names = match vi.arg_names {\n+            Some(ref names) => do names.map |ident| { cx.sess.str_of(*ident).to_owned() },\n+            None => do arg_types.map |_| { ~\"\" }\n+        };\n+\n         let mut arg_md = do arg_types.map |&ty| { get_or_create_type(cx, ty, span) };\n \n         if !is_univariant {"}, {"sha": "0bf0a522a655f3c39b81392466e14292848aa4f6", "filename": "src/librustc/middle/trans/machine.rs", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3b06df4e35bbde6975575cd137e6f5f65d475d86/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b06df4e35bbde6975575cd137e6f5f65d475d86/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs?ref=3b06df4e35bbde6975575cd137e6f5f65d475d86", "patch": "@@ -119,42 +119,3 @@ pub fn llelement_offset(cx: &CrateContext, struct_ty: Type, element: uint) -> ui\n         return llvm::LLVMOffsetOfElement(cx.td.lltd, struct_ty.to_ref(), element as u32) as uint;\n     }\n }\n-\n-// Computes the size of the data part of an enum.\n-pub fn static_size_of_enum(cx: &mut CrateContext, t: ty::t) -> uint {\n-    if cx.enum_sizes.contains_key(&t) {\n-        return cx.enum_sizes.get_copy(&t);\n-    }\n-\n-    debug!(\"static_size_of_enum %s\", ty_to_str(cx.tcx, t));\n-\n-    match ty::get(t).sty {\n-        ty::ty_enum(tid, ref substs) => {\n-            // Compute max(variant sizes).\n-            let mut max_size = 0;\n-            let variants = ty::enum_variants(cx.tcx, tid);\n-            for variants.iter().advance |variant| {\n-                if variant.args.len() == 0 {\n-                    loop;\n-                }\n-\n-                let lltypes = variant.args.map(|&variant_arg| {\n-                    let substituted = ty::subst(cx.tcx, substs, variant_arg);\n-                    type_of::sizing_type_of(cx, substituted)\n-                });\n-\n-                debug!(\"static_size_of_enum: variant %s type %s\",\n-                       cx.tcx.sess.str_of(variant.name),\n-                       cx.tn.type_to_str(Type::struct_(lltypes, false)));\n-\n-                let this_size = llsize_of_real(cx, Type::struct_(lltypes, false));\n-                if max_size < this_size {\n-                    max_size = this_size;\n-                }\n-            }\n-            cx.enum_sizes.insert(t, max_size);\n-            return max_size;\n-        }\n-        _ => cx.sess.bug(\"static_size_of_enum called on non-enum\")\n-    }\n-}"}, {"sha": "9438d60a48004c385a035a8bc1a8c3476468a977", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3b06df4e35bbde6975575cd137e6f5f65d475d86/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b06df4e35bbde6975575cd137e6f5f65d475d86/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=3b06df4e35bbde6975575cd137e6f5f65d475d86", "patch": "@@ -3694,6 +3694,7 @@ fn struct_ctor_id(cx: ctxt, struct_did: ast::def_id) -> Option<ast::def_id> {\n #[deriving(Clone)]\n pub struct VariantInfo_ {\n     args: ~[t],\n+    arg_names: Option<~[ast::ident]>,\n     ctor_ty: t,\n     name: ast::ident,\n     id: ast::def_id,\n@@ -3875,6 +3876,7 @@ pub fn enum_variants(cx: ctxt, id: ast::def_id) -> @~[VariantInfo] {\n                         }\n                         @VariantInfo_{\n                             args: arg_tys,\n+                            arg_names: None,\n                             ctor_ty: ctor_ty,\n                             name: variant.node.name,\n                             id: ast_util::local_def(variant.node.id),\n@@ -3883,20 +3885,29 @@ pub fn enum_variants(cx: ctxt, id: ast::def_id) -> @~[VariantInfo] {\n                          }\n                     },\n                     ast::struct_variant_kind(struct_def) => {\n-                        let arg_tys =\n-                            // Is this check needed for structs too, or are they always guaranteed\n-                            // to have a valid constructor function?\n-                            if struct_def.fields.len() > 0 {\n-                                ty_fn_args(ctor_ty).map(|a| *a)\n+\n+                        let fields : &[@struct_field] = struct_def.fields;\n+\n+                        let (arg_tys, arg_names) =\n+                            if fields.len() > 0 {\n+                                let arg_tys = ty_fn_args(ctor_ty).map(|a| *a);\n+                                let arg_names = do fields.map |field| { match field.node.kind {\n+                                    named_field(ident, _visibility) => ident,\n+                                    unnamed_field => cx.sess.bug(\n+                                        \"enum_variants: all fields in struct must have a name\")\n+                                }};\n+\n+                                (arg_tys, Some(arg_names))\n                             } else {\n-                                ~[]\n+                                (~[], None)\n                             };\n \n                         assert!(variant.node.disr_expr.is_none());\n                         disr_val += 1;\n \n                         @VariantInfo_{\n                             args: arg_tys,\n+                            arg_names: arg_names,\n                             ctor_ty: ctor_ty,\n                             name: variant.node.name,\n                             id: ast_util::local_def(variant.node.id),"}, {"sha": "0e1f8e617ff7e5450b402e223169a7d898533205", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3b06df4e35bbde6975575cd137e6f5f65d475d86/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b06df4e35bbde6975575cd137e6f5f65d475d86/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=3b06df4e35bbde6975575cd137e6f5f65d475d86", "patch": "@@ -3177,29 +3177,34 @@ pub fn check_enum_variants(ccx: @mut CrateCtxt,\n             let this_disr_val = *disr_val;\n             *disr_val += 1;\n \n-            let arg_tys = match v.node.kind {\n+            let (arg_tys, arg_names) = match v.node.kind {\n                 ast::tuple_variant_kind(ref args) if args.len() > 0u => {\n-                    Some(ty::ty_fn_args(ctor_ty).map(|a| *a))\n+                    (ty::ty_fn_args(ctor_ty).map(|a| *a), None)\n                 }\n                 ast::tuple_variant_kind(_) => {\n-                    Some(~[])\n+                    (~[], None)\n                 }\n-                ast::struct_variant_kind(_) => {\n-                    Some(ty::lookup_struct_fields(\n-                        ccx.tcx, local_def(v.node.id)).map(|cf|\n-                            ty::node_id_to_type(ccx.tcx, cf.id.node)))\n+                ast::struct_variant_kind(struct_def) => {\n+                    let tys = ty::ty_fn_args(ctor_ty).map(|a| *a);\n+                    let names = do struct_def.fields.map |field| { match field.node.kind {\n+                        ast::named_field(ident, _visibility) => ident,\n+                        ast::unnamed_field => ccx.tcx.sess.bug(\n+                            \"enum_variants: all fields in struct must have a name\")\n+                    }};\n+\n+                    (tys, Some(names))\n                 }\n             };\n \n-            match arg_tys {\n-                None => {}\n-                Some(arg_tys) => {\n-                    variants.push(\n-                        @VariantInfo_{args: arg_tys, ctor_ty: ctor_ty,\n-                          name: v.node.name, id: local_def(v.node.id),\n-                          disr_val: this_disr_val, vis: v.node.vis});\n-                }\n-            }\n+            variants.push(@VariantInfo_{\n+                    args: arg_tys,\n+                    arg_names: arg_names,\n+                    ctor_ty: ctor_ty,\n+                    name: v.node.name,\n+                    id: local_def(v.node.id),\n+                    disr_val: this_disr_val,\n+                    vis: v.node.vis\n+            });\n         }\n     }\n "}, {"sha": "2be15e0f80f2efb7106b82211d3650d0ec8a574f", "filename": "src/test/debug-info/struct-style-enum.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/3b06df4e35bbde6975575cd137e6f5f65d475d86/src%2Ftest%2Fdebug-info%2Fstruct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b06df4e35bbde6975575cd137e6f5f65d475d86/src%2Ftest%2Fdebug-info%2Fstruct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct-style-enum.rs?ref=3b06df4e35bbde6975575cd137e6f5f65d475d86", "patch": "@@ -0,0 +1,71 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:set print union on\n+// debugger:break zzz\n+// debugger:run\n+// debugger:finish\n+\n+// debugger:print case1\n+// check:$1 = {{Case1, a = 0, b = 31868, c = 31868, d = 31868, e = 31868}, {Case1, a = 0, b = 2088533116, c = 2088533116}, {Case1, a = 0, b = 8970181431921507452}}\n+\n+// debugger:print case2\n+// check:$2 = {{Case2, a = 0, b = 4369, c = 4369, d = 4369, e = 4369}, {Case2, a = 0, b = 286331153, c = 286331153}, {Case2, a = 0, b = 1229782938247303441}}\n+\n+// debugger:print case3\n+// check:$3 = {{Case3, a = 0, b = 22873, c = 22873, d = 22873, e = 22873}, {Case3, a = 0, b = 1499027801, c = 1499027801}, {Case3, a = 0, b = 6438275382588823897}}\n+\n+// debugger:print univariant\n+// check:$4 = {{a = -1}}\n+\n+// The first element is to ensure proper alignment, irrespective of the machines word size. Since\n+// the size of the discriminant value is machine dependent, this has be taken into account when\n+// datatype layout should be predictable as in this case.\n+enum Regular {\n+    Case1 { a: u64, b: u16, c: u16, d: u16, e: u16},\n+    Case2 { a: u64, b: u32, c: u32},\n+    Case3 { a: u64, b: u64 }\n+}\n+\n+enum Univariant {\n+    TheOnlyCase { a: i64 }\n+}\n+\n+fn main() {\n+\n+    // In order to avoid endianess trouble all of the following test values consist of a single\n+    // repeated byte. This way each interpretation of the union should look the same, no matter if\n+    // this is a big or little endian machine.\n+\n+    // 0b0111110001111100011111000111110001111100011111000111110001111100 = 8970181431921507452\n+    // 0b01111100011111000111110001111100 = 2088533116\n+    // 0b0111110001111100 = 31868\n+    // 0b01111100 = 124\n+    let case1 = Case1 { a: 0, b: 31868, c: 31868, d: 31868, e: 31868 };\n+\n+    // 0b0001000100010001000100010001000100010001000100010001000100010001 = 1229782938247303441\n+    // 0b00010001000100010001000100010001 = 286331153\n+    // 0b0001000100010001 = 4369\n+    // 0b00010001 = 17\n+    let case2 = Case2 { a: 0, b: 286331153, c: 286331153 };\n+\n+    // 0b0101100101011001010110010101100101011001010110010101100101011001 = 6438275382588823897\n+    // 0b01011001010110010101100101011001 = 1499027801\n+    // 0b0101100101011001 = 22873\n+    // 0b01011001 = 89\n+    let case3 = Case3 { a: 0, b: 6438275382588823897 };\n+\n+    let univariant = TheOnlyCase { a: -1 };\n+\n+    zzz();\n+}\n+\n+fn zzz() {()}\n\\ No newline at end of file"}, {"sha": "43b97a9bbfc4c7a359a92d7bb2c18ef44dfe663b", "filename": "src/test/debug-info/tuple-style-enum.rs", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3b06df4e35bbde6975575cd137e6f5f65d475d86/src%2Ftest%2Fdebug-info%2Ftuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b06df4e35bbde6975575cd137e6f5f65d475d86/src%2Ftest%2Fdebug-info%2Ftuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftuple-style-enum.rs?ref=3b06df4e35bbde6975575cd137e6f5f65d475d86", "patch": "@@ -14,16 +14,25 @@\n // debugger:run\n // debugger:finish\n \n-// d ebugger:print case2\n-// c heck:$1 = {Case1, 0, 1}\n+// debugger:print case1\n+// check:$1 = {{Case1, 0, 31868, 31868, 31868, 31868}, {Case1, 0, 2088533116, 2088533116}, {Case1, 0, 8970181431921507452}}\n \n-// debugger:print univariant\n-// check:$1 = {{-1}}\n+// debugger:print case2\n+// check:$2 = {{Case2, 0, 4369, 4369, 4369, 4369}, {Case2, 0, 286331153, 286331153}, {Case2, 0, 1229782938247303441}}\n+\n+// debugger:print case3\n+// check:$3 = {{Case3, 0, 22873, 22873, 22873, 22873}, {Case3, 0, 1499027801, 1499027801}, {Case3, 0, 6438275382588823897}}\n \n+// debugger:print univariant\n+// check:$4 = {{-1}}\n \n+// The first element is to ensure proper alignment, irrespective of the machines word size. Since\n+// the size of the discriminant value is machine dependent, this has be taken into account when\n+// datatype layout should be predictable as in this case.\n enum Regular {\n-    Case1(i32, i64),\n-    Case2(bool, i16, i32)\n+    Case1(u64, u16, u16, u16, u16),\n+    Case2(u64, u32, u32),\n+    Case3(u64, u64)\n }\n \n enum Univariant {\n@@ -32,8 +41,27 @@ enum Univariant {\n \n fn main() {\n \n-    let case1 = Case1(110, 220);\n-    let case2 = Case2(false, 2, 3);\n+    // In order to avoid endianess trouble all of the following test values consist of a single\n+    // repeated byte. This way each interpretation of the union should look the same, no matter if\n+    // this is a big or little endian machine.\n+\n+    // 0b0111110001111100011111000111110001111100011111000111110001111100 = 8970181431921507452\n+    // 0b01111100011111000111110001111100 = 2088533116\n+    // 0b0111110001111100 = 31868\n+    // 0b01111100 = 124\n+    let case1 = Case1(0, 31868, 31868, 31868, 31868);\n+\n+    // 0b0001000100010001000100010001000100010001000100010001000100010001 = 1229782938247303441\n+    // 0b00010001000100010001000100010001 = 286331153\n+    // 0b0001000100010001 = 4369\n+    // 0b00010001 = 17\n+    let case2 = Case2(0, 286331153, 286331153);\n+\n+    // 0b0101100101011001010110010101100101011001010110010101100101011001 = 6438275382588823897\n+    // 0b01011001010110010101100101011001 = 1499027801\n+    // 0b0101100101011001 = 22873\n+    // 0b01011001 = 89\n+    let case3 = Case3(0, 6438275382588823897);\n \n     let univariant = TheOnlyCase(-1);\n "}]}