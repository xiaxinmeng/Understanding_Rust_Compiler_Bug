{"sha": "f22a22b28658dc55e69d1aeb978c384493fdb6ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMmEyMmIyODY1OGRjNTVlNjlkMWFlYjk3OGMzODQ0OTNmZGI2ZWU=", "commit": {"author": {"name": "Austin Hicks", "email": "camlorn@camlorn.net", "date": "2016-12-16T17:06:12Z"}, "committer": {"name": "Austin Hicks", "email": "camlorn@camlorn.net", "date": "2016-12-16T17:06:12Z"}, "message": "Incorporate review comments.", "tree": {"sha": "87590a355a2f0b6700d1f799e3512515737bf17e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87590a355a2f0b6700d1f799e3512515737bf17e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f22a22b28658dc55e69d1aeb978c384493fdb6ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f22a22b28658dc55e69d1aeb978c384493fdb6ee", "html_url": "https://github.com/rust-lang/rust/commit/f22a22b28658dc55e69d1aeb978c384493fdb6ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f22a22b28658dc55e69d1aeb978c384493fdb6ee/comments", "author": {"login": "ahicks92", "id": 6968705, "node_id": "MDQ6VXNlcjY5Njg3MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6968705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahicks92", "html_url": "https://github.com/ahicks92", "followers_url": "https://api.github.com/users/ahicks92/followers", "following_url": "https://api.github.com/users/ahicks92/following{/other_user}", "gists_url": "https://api.github.com/users/ahicks92/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahicks92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahicks92/subscriptions", "organizations_url": "https://api.github.com/users/ahicks92/orgs", "repos_url": "https://api.github.com/users/ahicks92/repos", "events_url": "https://api.github.com/users/ahicks92/events{/privacy}", "received_events_url": "https://api.github.com/users/ahicks92/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahicks92", "id": 6968705, "node_id": "MDQ6VXNlcjY5Njg3MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6968705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahicks92", "html_url": "https://github.com/ahicks92", "followers_url": "https://api.github.com/users/ahicks92/followers", "following_url": "https://api.github.com/users/ahicks92/following{/other_user}", "gists_url": "https://api.github.com/users/ahicks92/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahicks92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahicks92/subscriptions", "organizations_url": "https://api.github.com/users/ahicks92/orgs", "repos_url": "https://api.github.com/users/ahicks92/repos", "events_url": "https://api.github.com/users/ahicks92/events{/privacy}", "received_events_url": "https://api.github.com/users/ahicks92/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79c35bbd8cbab76e0ba2e51970e2fc2c35cdcc45", "url": "https://api.github.com/repos/rust-lang/rust/commits/79c35bbd8cbab76e0ba2e51970e2fc2c35cdcc45", "html_url": "https://github.com/rust-lang/rust/commit/79c35bbd8cbab76e0ba2e51970e2fc2c35cdcc45"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "53ed103ad914106c27847f2277b867c7d2bb91c8", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f22a22b28658dc55e69d1aeb978c384493fdb6ee/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22a22b28658dc55e69d1aeb978c384493fdb6ee/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=f22a22b28658dc55e69d1aeb978c384493fdb6ee", "patch": "@@ -557,8 +557,6 @@ impl<'a, 'gcx, 'tcx> Struct {\n             min_size: Size::from_bytes(0),\n         };\n \n-        if fields.len() == 0 {return Ok(ret)};\n-\n         // Anything with ReprExtern or ReprPacked doesn't optimize.\n         // Neither do  1-member and 2-member structs.\n         // In addition, code in trans assume that 2-element structs can become pairs.\n@@ -590,9 +588,9 @@ impl<'a, 'gcx, 'tcx> Struct {\n         let mut inverse_memory_index: Vec<u32> = (0..fields.len() as u32).collect();\n \n         if optimize {\n-            let start = if let StructKind::EnumVariant = kind {1} else {0};\n+            let start = if let StructKind::EnumVariant = kind { 1 } else { 0 };\n             let end = if let StructKind::MaybeUnsizedUnivariant = kind {\n-                fields.len()-1\n+                fields.len() - 1\n             } else {\n                 fields.len()\n             };\n@@ -717,12 +715,12 @@ impl<'a, 'gcx, 'tcx> Struct {\n \n     /// Find the path leading to a non-zero leaf field, starting from\n     /// the given type and recursing through aggregates.\n-    /// The tuple is `(path, source_path)1,\n+    /// The tuple is `(path, source_path)`,\n     /// where `path` is in memory order and `source_path` in source order.\n     // FIXME(eddyb) track value ranges and traverse already optimized enums.\n     fn non_zero_field_in_type(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n-                                  ty: Ty<'gcx>)\n-                                  -> Result<Option<(FieldPath, FieldPath)>, LayoutError<'gcx>> {\n+                               ty: Ty<'gcx>)\n+                               -> Result<Option<(FieldPath, FieldPath)>, LayoutError<'gcx>> {\n         let tcx = infcx.tcx.global_tcx();\n         match (ty.layout(infcx)?, &ty.sty) {\n             (&Scalar { non_zero: true, .. }, _) |\n@@ -792,7 +790,7 @@ impl<'a, 'gcx, 'tcx> Struct {\n \n     /// Find the path leading to a non-zero leaf field, starting from\n     /// the given set of fields and recursing through aggregates.\n-    // / Returns Some((path, source_path)) on success.\n+    /// Returns Some((path, source_path)) on success.\n     /// `path` is translated to memory order. `source_path` is not.\n     fn non_zero_field_paths<I>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n                                   fields: I,\n@@ -1363,7 +1361,7 @@ impl<'a, 'gcx, 'tcx> Layout {\n                         for i in variant.offsets.iter_mut() {\n                             // The first field is the discrimminant, at offset 0.\n                             // These aren't in order, and we need to skip it.\n-                            if *i <= old_ity_size && *i > Size::from_bytes(0){\n+                            if *i <= old_ity_size && *i > Size::from_bytes(0) {\n                                 *i = new_ity_size;\n                             }\n                         }"}, {"sha": "dc89caf02016c7745d33229180f9846379d288b7", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f22a22b28658dc55e69d1aeb978c384493fdb6ee/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22a22b28658dc55e69d1aeb978c384493fdb6ee/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=f22a22b28658dc55e69d1aeb978c384493fdb6ee", "patch": "@@ -1309,7 +1309,7 @@ impl<'tcx> EnumMemberDescriptionFactory<'tcx> {\n // Creates MemberDescriptions for the fields of a single enum variant.\n struct VariantMemberDescriptionFactory<'tcx> {\n     // Cloned from the layout::Struct describing the variant.\n-    offsets: Vec<layout::Size>,\n+    offsets: &'tcx [layout::Size],\n     args: Vec<(String, Ty<'tcx>)>,\n     discriminant_type_metadata: Option<DIType>,\n     span: Span,\n@@ -1346,7 +1346,7 @@ enum EnumDiscriminantInfo {\n // full RecursiveTypeDescription.\n fn describe_enum_variant<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                    enum_type: Ty<'tcx>,\n-                                   struct_def: &layout::Struct,\n+                                   struct_def: &'tcx layout::Struct,\n                                    variant: &'tcx ty::VariantDef,\n                                    discriminant_info: EnumDiscriminantInfo,\n                                    containing_scope: DIScope,\n@@ -1430,7 +1430,7 @@ fn describe_enum_variant<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n     let member_description_factory =\n         VariantMDF(VariantMemberDescriptionFactory {\n-            offsets: struct_def.offsets.clone(),\n+            offsets: &struct_def.offsets[..],\n             args: args,\n             discriminant_type_metadata: match discriminant_info {\n                 RegularDiscriminant(discriminant_type_metadata) => {"}]}