{"sha": "ba4b026e80c6278b6d0d8d4b4bf66daf4f49ed09", "node_id": "C_kwDOAAsO6NoAKGJhNGIwMjZlODBjNjI3OGI2ZDBkOGQ0YjRiZjY2ZGFmNGY0OWVkMDk", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-02-14T05:57:28Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-02-14T05:57:28Z"}, "message": "rustdoc: add more tooltips to intra-doc links\n\nThis commit makes intra-doc link tooltips consistent with generated\nlinks in function signatures and item tables, with the format\n`itemtype foo::bar::baz`. This way, you can tell if a link points at\na trait or a type (for example) by mousing over it.\n\nSee also fce944d4e79b3a87ddf511206724edf33acfd704", "tree": {"sha": "a332a25d9b386d146215e62bd471c367227c2ba6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a332a25d9b386d146215e62bd471c367227c2ba6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba4b026e80c6278b6d0d8d4b4bf66daf4f49ed09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba4b026e80c6278b6d0d8d4b4bf66daf4f49ed09", "html_url": "https://github.com/rust-lang/rust/commit/ba4b026e80c6278b6d0d8d4b4bf66daf4f49ed09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba4b026e80c6278b6d0d8d4b4bf66daf4f49ed09/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3c9eede5d50be0231f229bf28a271cd509861a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3c9eede5d50be0231f229bf28a271cd509861a3", "html_url": "https://github.com/rust-lang/rust/commit/a3c9eede5d50be0231f229bf28a271cd509861a3"}], "stats": {"total": 61, "additions": 52, "deletions": 9}, "files": [{"sha": "b00cefdddb5242508072de5cf7facc4a5d597b90", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ba4b026e80c6278b6d0d8d4b4bf66daf4f49ed09/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba4b026e80c6278b6d0d8d4b4bf66daf4f49ed09/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=ba4b026e80c6278b6d0d8d4b4bf66daf4f49ed09", "patch": "@@ -482,23 +482,24 @@ impl Item {\n     }\n \n     pub(crate) fn links(&self, cx: &Context<'_>) -> Vec<RenderedLink> {\n-        use crate::html::format::href;\n+        use crate::html::format::{href, link_tooltip};\n \n         cx.cache()\n             .intra_doc_links\n             .get(&self.item_id)\n             .map_or(&[][..], |v| v.as_slice())\n             .iter()\n-            .filter_map(|ItemLink { link: s, link_text, page_id: did, ref fragment }| {\n-                debug!(?did);\n-                if let Ok((mut href, ..)) = href(*did, cx) {\n+            .filter_map(|ItemLink { link: s, link_text, page_id: id, ref fragment }| {\n+                debug!(?id);\n+                if let Ok((mut href, ..)) = href(*id, cx) {\n                     debug!(?href);\n                     if let Some(ref fragment) = *fragment {\n                         fragment.render(&mut href, cx.tcx())\n                     }\n                     Some(RenderedLink {\n                         original_text: s.clone(),\n                         new_text: link_text.clone(),\n+                        tooltip: link_tooltip(*id, fragment, cx),\n                         href,\n                     })\n                 } else {\n@@ -523,6 +524,7 @@ impl Item {\n                 original_text: s.clone(),\n                 new_text: link_text.clone(),\n                 href: String::new(),\n+                tooltip: String::new(),\n             })\n             .collect()\n     }\n@@ -1040,6 +1042,8 @@ pub struct RenderedLink {\n     pub(crate) new_text: String,\n     /// The URL to put in the `href`\n     pub(crate) href: String,\n+    /// The tooltip.\n+    pub(crate) tooltip: String,\n }\n \n /// The attributes on an [`Item`], including attributes like `#[derive(...)]` and `#[inline]`,"}, {"sha": "314f061224940d6e6fe715cf1cd7431dc23eda4f", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ba4b026e80c6278b6d0d8d4b4bf66daf4f49ed09/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba4b026e80c6278b6d0d8d4b4bf66daf4f49ed09/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=ba4b026e80c6278b6d0d8d4b4bf66daf4f49ed09", "patch": "@@ -34,6 +34,7 @@ use crate::clean::{\n use crate::formats::item_type::ItemType;\n use crate::html::escape::Escape;\n use crate::html::render::Context;\n+use crate::passes::collect_intra_doc_links::UrlFragment;\n \n use super::url_parts_builder::estimate_item_path_byte_length;\n use super::url_parts_builder::UrlPartsBuilder;\n@@ -768,6 +769,21 @@ pub(crate) fn href_relative_parts<'fqp>(\n     }\n }\n \n+pub(crate) fn link_tooltip(did: DefId, fragment: &Option<UrlFragment>, cx: &Context<'_>) -> String {\n+    let cache = cx.cache();\n+    let Some((fqp, shortty)) = cache.paths.get(&did)\n+        .or_else(|| cache.external_paths.get(&did))\n+        else { return String::new() };\n+    let fqp = fqp.iter().map(|sym| sym.as_str()).join(\"::\");\n+    if let &Some(UrlFragment::Item(id)) = fragment {\n+        let name = cx.tcx().item_name(id);\n+        let descr = cx.tcx().def_kind(id).descr(id);\n+        format!(\"{descr} {fqp}::{name}\")\n+    } else {\n+        format!(\"{shortty} {fqp}\")\n+    }\n+}\n+\n /// Used to render a [`clean::Path`].\n fn resolved_path<'cx>(\n     w: &mut fmt::Formatter<'_>,"}, {"sha": "e4adee6ae4dfb5f8fbd8e3f49e1b12bfaa07d6e0", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ba4b026e80c6278b6d0d8d4b4bf66daf4f49ed09/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba4b026e80c6278b6d0d8d4b4bf66daf4f49ed09/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=ba4b026e80c6278b6d0d8d4b4bf66daf4f49ed09", "patch": "@@ -360,6 +360,9 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for LinkReplacer<'a, I> {\n                     trace!(\"it matched\");\n                     assert!(self.shortcut_link.is_none(), \"shortcut links cannot be nested\");\n                     self.shortcut_link = Some(link);\n+                    if title.is_empty() && !link.tooltip.is_empty() {\n+                        *title = CowStr::Borrowed(link.tooltip.as_ref());\n+                    }\n                 }\n             }\n             // Now that we're done with the shortcut link, don't replace any more text.\n@@ -410,9 +413,12 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for LinkReplacer<'a, I> {\n             }\n             // If this is a link, but not a shortcut link,\n             // replace the URL, since the broken_link_callback was not called.\n-            Some(Event::Start(Tag::Link(_, dest, _))) => {\n+            Some(Event::Start(Tag::Link(_, dest, title))) => {\n                 if let Some(link) = self.links.iter().find(|&link| *link.original_text == **dest) {\n                     *dest = CowStr::Borrowed(link.href.as_ref());\n+                    if title.is_empty() && !link.tooltip.is_empty() {\n+                        *title = CowStr::Borrowed(link.tooltip.as_ref());\n+                    }\n                 }\n             }\n             // Anything else couldn't have been a valid Rust path, so no need to replace the text.\n@@ -976,7 +982,7 @@ impl Markdown<'_> {\n             links\n                 .iter()\n                 .find(|link| link.original_text.as_str() == &*broken_link.reference)\n-                .map(|link| (link.href.as_str().into(), link.new_text.as_str().into()))\n+                .map(|link| (link.href.as_str().into(), link.tooltip.as_str().into()))\n         };\n \n         let p = Parser::new_with_broken_link_callback(md, main_body_opts(), Some(&mut replacer));\n@@ -1059,7 +1065,7 @@ impl MarkdownSummaryLine<'_> {\n             links\n                 .iter()\n                 .find(|link| link.original_text.as_str() == &*broken_link.reference)\n-                .map(|link| (link.href.as_str().into(), link.new_text.as_str().into()))\n+                .map(|link| (link.href.as_str().into(), link.tooltip.as_str().into()))\n         };\n \n         let p = Parser::new_with_broken_link_callback(md, summary_opts(), Some(&mut replacer))\n@@ -1106,7 +1112,7 @@ fn markdown_summary_with_limit(\n         link_names\n             .iter()\n             .find(|link| link.original_text.as_str() == &*broken_link.reference)\n-            .map(|link| (link.href.as_str().into(), link.new_text.as_str().into()))\n+            .map(|link| (link.href.as_str().into(), link.tooltip.as_str().into()))\n     };\n \n     let p = Parser::new_with_broken_link_callback(md, summary_opts(), Some(&mut replacer));\n@@ -1187,7 +1193,7 @@ pub(crate) fn plain_text_summary(md: &str, link_names: &[RenderedLink]) -> Strin\n         link_names\n             .iter()\n             .find(|link| link.original_text.as_str() == &*broken_link.reference)\n-            .map(|link| (link.href.as_str().into(), link.new_text.as_str().into()))\n+            .map(|link| (link.href.as_str().into(), link.tooltip.as_str().into()))\n     };\n \n     let p = Parser::new_with_broken_link_callback(md, summary_opts(), Some(&mut replacer));"}, {"sha": "e2d3ef425cb45f41d62a2db979ae67106f1879e5", "filename": "tests/rustdoc/intra-doc/basic.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ba4b026e80c6278b6d0d8d4b4bf66daf4f49ed09/tests%2Frustdoc%2Fintra-doc%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba4b026e80c6278b6d0d8d4b4bf66daf4f49ed09/tests%2Frustdoc%2Fintra-doc%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fintra-doc%2Fbasic.rs?ref=ba4b026e80c6278b6d0d8d4b4bf66daf4f49ed09", "patch": "@@ -1,21 +1,38 @@\n // @has basic/index.html\n // @has - '//a/@href' 'struct.ThisType.html'\n+// @has - '//a/@title' 'struct basic::ThisType'\n // @has - '//a/@href' 'struct.ThisType.html#method.this_method'\n+// @has - '//a/@title' 'associated function basic::ThisType::this_method'\n // @has - '//a/@href' 'enum.ThisEnum.html'\n+// @has - '//a/@title' 'enum basic::ThisEnum'\n // @has - '//a/@href' 'enum.ThisEnum.html#variant.ThisVariant'\n+// @has - '//a/@title' 'variant basic::ThisEnum::ThisVariant'\n // @has - '//a/@href' 'trait.ThisTrait.html'\n+// @has - '//a/@title' 'trait basic::ThisTrait'\n // @has - '//a/@href' 'trait.ThisTrait.html#tymethod.this_associated_method'\n+// @has - '//a/@title' 'associated function basic::ThisTrait::this_associated_method'\n // @has - '//a/@href' 'trait.ThisTrait.html#associatedtype.ThisAssociatedType'\n+// @has - '//a/@title' 'associated type basic::ThisTrait::ThisAssociatedType'\n // @has - '//a/@href' 'trait.ThisTrait.html#associatedconstant.THIS_ASSOCIATED_CONST'\n+// @has - '//a/@title' 'associated constant basic::ThisTrait::THIS_ASSOCIATED_CONST'\n // @has - '//a/@href' 'trait.ThisTrait.html'\n+// @has - '//a/@title' 'trait basic::ThisTrait'\n // @has - '//a/@href' 'type.ThisAlias.html'\n+// @has - '//a/@title' 'type basic::ThisAlias'\n // @has - '//a/@href' 'union.ThisUnion.html'\n+// @has - '//a/@title' 'union basic::ThisUnion'\n // @has - '//a/@href' 'fn.this_function.html'\n+// @has - '//a/@title' 'fn basic::this_function'\n // @has - '//a/@href' 'constant.THIS_CONST.html'\n+// @has - '//a/@title' 'constant basic::THIS_CONST'\n // @has - '//a/@href' 'static.THIS_STATIC.html'\n+// @has - '//a/@title' 'static basic::THIS_STATIC'\n // @has - '//a/@href' 'macro.this_macro.html'\n+// @has - '//a/@title' 'macro basic::this_macro'\n // @has - '//a/@href' 'trait.SoAmbiguous.html'\n+// @has - '//a/@title' 'trait basic::SoAmbiguous'\n // @has - '//a/@href' 'fn.SoAmbiguous.html'\n+// @has - '//a/@title' 'fn basic::SoAmbiguous'\n //! In this crate we would like to link to:\n //!\n //! * [`ThisType`](ThisType)"}]}