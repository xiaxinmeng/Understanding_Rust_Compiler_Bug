{"sha": "80fc9b0ecb29050d45b17c64af004200afd3cfc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwZmM5YjBlY2IyOTA1MGQ0NWIxN2M2NGFmMDA0MjAwYWZkM2NmYzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-02T19:29:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-02T19:29:27Z"}, "message": "Auto merge of #76160 - scileo:format-recovery, r=petrochenkov\n\nImprove recovery on malformed format call\n\nThe token following a format expression should be a comma. However, when it is replaced with a similar token (such as a dot), then the corresponding error is emitted, but the token is treated as a comma, and the parsing step continues.\n\nr? @petrochenkov", "tree": {"sha": "3d0269d8f9ecb027bd59a942462003ed9e01e4ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d0269d8f9ecb027bd59a942462003ed9e01e4ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80fc9b0ecb29050d45b17c64af004200afd3cfc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80fc9b0ecb29050d45b17c64af004200afd3cfc2", "html_url": "https://github.com/rust-lang/rust/commit/80fc9b0ecb29050d45b17c64af004200afd3cfc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80fc9b0ecb29050d45b17c64af004200afd3cfc2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a167485e279be8a11c9c09d0dddaf1d7c5724f1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a167485e279be8a11c9c09d0dddaf1d7c5724f1c", "html_url": "https://github.com/rust-lang/rust/commit/a167485e279be8a11c9c09d0dddaf1d7c5724f1c"}, {"sha": "3524c3ef4371d0bf4dd03568a004039f18c154f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3524c3ef4371d0bf4dd03568a004039f18c154f7", "html_url": "https://github.com/rust-lang/rust/commit/3524c3ef4371d0bf4dd03568a004039f18c154f7"}], "stats": {"total": 141, "additions": 88, "deletions": 53}, "files": [{"sha": "5d6f791f1371935efc298b714e85c54363e7e496", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/80fc9b0ecb29050d45b17c64af004200afd3cfc2/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80fc9b0ecb29050d45b17c64af004200afd3cfc2/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=80fc9b0ecb29050d45b17c64af004200afd3cfc2", "patch": "@@ -161,14 +161,26 @@ fn parse_args<'a>(\n     while p.token != token::Eof {\n         if !p.eat(&token::Comma) {\n             if first {\n-                // After `format!(\"\"` we always expect *only* a comma...\n-                let mut err = ecx.struct_span_err(p.token.span, \"expected token: `,`\");\n-                err.span_label(p.token.span, \"expected `,`\");\n-                p.maybe_annotate_with_ascription(&mut err, false);\n-                return Err(err);\n-            } else {\n-                // ...after that delegate to `expect` to also include the other expected tokens.\n-                let _ = p.expect(&token::Comma)?;\n+                p.clear_expected_tokens();\n+            }\n+\n+            // `Parser::expect` tries to recover using the\n+            // `Parser::unexpected_try_recover` function. This function is able\n+            // to recover if the expected token is a closing delimiter.\n+            //\n+            // As `,` is not a closing delimiter, it will always return an `Err`\n+            // variant.\n+            let mut err = p.expect(&token::Comma).unwrap_err();\n+\n+            match token::TokenKind::Comma.similar_tokens() {\n+                Some(tks) if tks.contains(&p.token.kind) => {\n+                    // If a similar token is found, then it may be a typo. We\n+                    // consider it as a comma, and continue parsing.\n+                    err.emit();\n+                    p.bump();\n+                }\n+                // Otherwise stop the parsing and return the error.\n+                _ => return Err(err),\n             }\n         }\n         first = false;"}, {"sha": "84edfecad192fdbccc83accc02578d01eb155396", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/80fc9b0ecb29050d45b17c64af004200afd3cfc2/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80fc9b0ecb29050d45b17c64af004200afd3cfc2/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=80fc9b0ecb29050d45b17c64af004200afd3cfc2", "patch": "@@ -1234,6 +1234,10 @@ impl<'a> Parser<'a> {\n                 *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)\n             })\n     }\n+\n+    pub fn clear_expected_tokens(&mut self) {\n+        self.expected_tokens.clear();\n+    }\n }\n \n crate fn make_unclosed_delims_error("}, {"sha": "e89a45a84f5ceed59162be28d054e45b38c2a17f", "filename": "src/test/ui/codemap_tests/bad-format-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80fc9b0ecb29050d45b17c64af004200afd3cfc2/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80fc9b0ecb29050d45b17c64af004200afd3cfc2/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.rs?ref=80fc9b0ecb29050d45b17c64af004200afd3cfc2", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     format!(); //~ ERROR requires at least a format string argument\n-    format!(\"\" 1); //~ ERROR expected token: `,`\n+    format!(\"\" 1); //~ ERROR expected `,`, found `1`\n     format!(\"\", 1 1); //~ ERROR expected one of\n }"}, {"sha": "5ed023e1f213454735f919902048e91cc05ab4bf", "filename": "src/test/ui/codemap_tests/bad-format-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80fc9b0ecb29050d45b17c64af004200afd3cfc2/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80fc9b0ecb29050d45b17c64af004200afd3cfc2/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr?ref=80fc9b0ecb29050d45b17c64af004200afd3cfc2", "patch": "@@ -6,7 +6,7 @@ LL |     format!();\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: expected token: `,`\n+error: expected `,`, found `1`\n   --> $DIR/bad-format-args.rs:3:16\n    |\n LL |     format!(\"\" 1);"}, {"sha": "60d2a82855e898393d0ab16ba8d70c70da1505d9", "filename": "src/test/ui/fmt/incorrect-first-separator.stderr", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a167485e279be8a11c9c09d0dddaf1d7c5724f1c/src%2Ftest%2Fui%2Ffmt%2Fincorrect-first-separator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a167485e279be8a11c9c09d0dddaf1d7c5724f1c/src%2Ftest%2Fui%2Ffmt%2Fincorrect-first-separator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fincorrect-first-separator.stderr?ref=a167485e279be8a11c9c09d0dddaf1d7c5724f1c", "patch": "@@ -1,32 +0,0 @@\n-error: unknown start of token: \\u{326}\n-  --> $DIR/incorrect-first-separator.rs:19:28\n-   |\n-LL |     format!(\"A number: {}\" \u0326 iter::once(42).next().unwrap());\n-   |                            ^\n-\n-error: expected token: `,`\n-  --> $DIR/incorrect-first-separator.rs:7:27\n-   |\n-LL |     format!(\"A number: {}\". iter::once(42).next().unwrap());\n-   |                           ^ expected `,`\n-\n-error: expected token: `,`\n-  --> $DIR/incorrect-first-separator.rs:12:28\n-   |\n-LL |     format!(\"A number: {}\" / iter::once(42).next().unwrap());\n-   |                            ^ expected `,`\n-\n-error: expected token: `,`\n-  --> $DIR/incorrect-first-separator.rs:15:27\n-   |\n-LL |     format!(\"A number: {}\"; iter::once(42).next().unwrap());\n-   |                           ^ expected `,`\n-\n-error: expected token: `,`\n-  --> $DIR/incorrect-first-separator.rs:19:30\n-   |\n-LL |     format!(\"A number: {}\" \u0326 iter::once(42).next().unwrap());\n-   |                             ^^^^ expected `,`\n-\n-error: aborting due to 5 previous errors\n-"}, {"sha": "b8d2e4a3473b6527efdc6be528c0aff3bb8b4551", "filename": "src/test/ui/fmt/incorrect-separator.rs", "status": "renamed", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/80fc9b0ecb29050d45b17c64af004200afd3cfc2/src%2Ftest%2Fui%2Ffmt%2Fincorrect-separator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80fc9b0ecb29050d45b17c64af004200afd3cfc2/src%2Ftest%2Fui%2Ffmt%2Fincorrect-separator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fincorrect-separator.rs?ref=80fc9b0ecb29050d45b17c64af004200afd3cfc2", "patch": "@@ -5,18 +5,25 @@ use std::iter;\n \n fn main() {\n     format!(\"A number: {}\". iter::once(42).next().unwrap());\n-    //~^ ERROR expected token: `,`\n+    //~^ ERROR expected `,`, found `.`\n \n     // Other kind of types are also checked:\n \n     format!(\"A number: {}\" / iter::once(42).next().unwrap());\n-    //~^ ERROR expected token: `,`\n+    //~^ ERROR expected `,`, found `/`\n \n     format!(\"A number: {}\"; iter::once(42).next().unwrap());\n-    //~^ ERROR expected token: `,`\n+    //~^ ERROR expected `,`, found `;`\n \n     // Note: this character is an COMBINING COMMA BELOW unicode char\n     format!(\"A number: {}\" \u0326 iter::once(42).next().unwrap());\n-    //~^ ERROR expected token: `,`\n+    //~^ ERROR expected `,`, found `iter`\n     //~^^ ERROR unknown start of token: \\u{326}\n+\n+    // Here recovery is tested.\n+    // If the `compile_error!` is emitted, then the parser is able to recover\n+    // from the incorrect first separator.\n+    format!(\"{}\". compile_error!(\"fail\"));\n+    //~^ ERROR expected `,`, found `.`\n+    //~^^ ERROR fail\n }", "previous_filename": "src/test/ui/fmt/incorrect-first-separator.rs"}, {"sha": "5a3e5515bb939cfb73e8d17648a807acb3227749", "filename": "src/test/ui/fmt/incorrect-separator.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/80fc9b0ecb29050d45b17c64af004200afd3cfc2/src%2Ftest%2Fui%2Ffmt%2Fincorrect-separator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80fc9b0ecb29050d45b17c64af004200afd3cfc2/src%2Ftest%2Fui%2Ffmt%2Fincorrect-separator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fincorrect-separator.stderr?ref=80fc9b0ecb29050d45b17c64af004200afd3cfc2", "patch": "@@ -0,0 +1,44 @@\n+error: unknown start of token: \\u{326}\n+  --> $DIR/incorrect-separator.rs:19:28\n+   |\n+LL |     format!(\"A number: {}\" \u0326 iter::once(42).next().unwrap());\n+   |                            ^\n+\n+error: expected `,`, found `.`\n+  --> $DIR/incorrect-separator.rs:7:27\n+   |\n+LL |     format!(\"A number: {}\". iter::once(42).next().unwrap());\n+   |                           ^ expected `,`\n+\n+error: expected `,`, found `/`\n+  --> $DIR/incorrect-separator.rs:12:28\n+   |\n+LL |     format!(\"A number: {}\" / iter::once(42).next().unwrap());\n+   |                            ^ expected `,`\n+\n+error: expected `,`, found `;`\n+  --> $DIR/incorrect-separator.rs:15:27\n+   |\n+LL |     format!(\"A number: {}\"; iter::once(42).next().unwrap());\n+   |                           ^ expected `,`\n+\n+error: expected `,`, found `iter`\n+  --> $DIR/incorrect-separator.rs:19:30\n+   |\n+LL |     format!(\"A number: {}\" \u0326 iter::once(42).next().unwrap());\n+   |                             ^^^^ expected `,`\n+\n+error: expected `,`, found `.`\n+  --> $DIR/incorrect-separator.rs:26:17\n+   |\n+LL |     format!(\"{}\". compile_error!(\"fail\"));\n+   |                 ^ expected `,`\n+\n+error: fail\n+  --> $DIR/incorrect-separator.rs:26:19\n+   |\n+LL |     format!(\"{}\". compile_error!(\"fail\"));\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "92f8a779505836a4efe7be72e1b015071b7d3d74", "filename": "src/test/ui/macros/missing-comma.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80fc9b0ecb29050d45b17c64af004200afd3cfc2/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80fc9b0ecb29050d45b17c64af004200afd3cfc2/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.rs?ref=80fc9b0ecb29050d45b17c64af004200afd3cfc2", "patch": "@@ -17,7 +17,7 @@ macro_rules! check {\n \n fn main() {\n     println!(\"{}\" a);\n-    //~^ ERROR expected token: `,`\n+    //~^ ERROR expected `,`, found `a`\n     foo!(a b);\n     //~^ ERROR no rules expected the token `b`\n     foo!(a, b, c, d e);"}, {"sha": "6da92bdea19e039d1705f41ede59fec61157cef0", "filename": "src/test/ui/macros/missing-comma.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80fc9b0ecb29050d45b17c64af004200afd3cfc2/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80fc9b0ecb29050d45b17c64af004200afd3cfc2/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr?ref=80fc9b0ecb29050d45b17c64af004200afd3cfc2", "patch": "@@ -1,4 +1,4 @@\n-error: expected token: `,`\n+error: expected `,`, found `a`\n   --> $DIR/missing-comma.rs:19:19\n    |\n LL |     println!(\"{}\" a);"}, {"sha": "eeaea3628bbe5bb8acd5f98484301d975661e2e9", "filename": "src/test/ui/parser/unicode-quote-chars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80fc9b0ecb29050d45b17c64af004200afd3cfc2/src%2Ftest%2Fui%2Fparser%2Funicode-quote-chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80fc9b0ecb29050d45b17c64af004200afd3cfc2/src%2Ftest%2Fui%2Fparser%2Funicode-quote-chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funicode-quote-chars.rs?ref=80fc9b0ecb29050d45b17c64af004200afd3cfc2", "patch": "@@ -6,5 +6,5 @@ fn main() {\n     //~^^ HELP Unicode characters '\u201c' (Left Double Quotation Mark) and '\u201d' (Right Double Quotation Mark) look like '\"' (Quotation Mark), but are not\n     //~^^^ ERROR unknown start of token: \\u{201d}\n     //~^^^^ HELP Unicode character '\u201d' (Right Double Quotation Mark) looks like '\"' (Quotation Mark), but it is not\n-    //~^^^^^ ERROR expected token: `,`\n+    //~^^^^^ ERROR expected `,`, found `world`\n }"}, {"sha": "d9ec92b3f8a83e85ff967230684f141932d9a93b", "filename": "src/test/ui/parser/unicode-quote-chars.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80fc9b0ecb29050d45b17c64af004200afd3cfc2/src%2Ftest%2Fui%2Fparser%2Funicode-quote-chars.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80fc9b0ecb29050d45b17c64af004200afd3cfc2/src%2Ftest%2Fui%2Fparser%2Funicode-quote-chars.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funicode-quote-chars.stderr?ref=80fc9b0ecb29050d45b17c64af004200afd3cfc2", "patch": "@@ -20,7 +20,7 @@ help: Unicode character '\u201d' (Right Double Quotation Mark) looks like '\"' (Quot\n LL |     println!(\u201chello world\");\n    |                          ^\n \n-error: expected token: `,`\n+error: expected `,`, found `world`\n   --> $DIR/unicode-quote-chars.rs:4:21\n    |\n LL |     println!(\u201chello world\u201d);"}, {"sha": "586d13647d15eb94fe5cc580eb497794e01bb62a", "filename": "src/tools/clippy/tests/ui/issue-3145.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80fc9b0ecb29050d45b17c64af004200afd3cfc2/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue-3145.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80fc9b0ecb29050d45b17c64af004200afd3cfc2/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue-3145.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue-3145.rs?ref=80fc9b0ecb29050d45b17c64af004200afd3cfc2", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    println!(\"{}\" a); //~ERROR expected token: `,`\n+    println!(\"{}\" a); //~ERROR expected `,`, found `a`\n }"}, {"sha": "a35032aa150dc96238b656957921e6688c55cbff", "filename": "src/tools/clippy/tests/ui/issue-3145.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/80fc9b0ecb29050d45b17c64af004200afd3cfc2/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue-3145.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80fc9b0ecb29050d45b17c64af004200afd3cfc2/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue-3145.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue-3145.stderr?ref=80fc9b0ecb29050d45b17c64af004200afd3cfc2", "patch": "@@ -1,7 +1,7 @@\n-error: expected token: `,`\n+error: expected `,`, found `a`\n   --> $DIR/issue-3145.rs:2:19\n    |\n-LL |     println!(\"{}\" a); //~ERROR expected token: `,`\n+LL |     println!(\"{}\" a); //~ERROR expected `,`, found `a`\n    |                   ^ expected `,`\n \n error: aborting due to previous error"}]}