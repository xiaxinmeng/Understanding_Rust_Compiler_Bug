{"sha": "ca075d268d2ce315964e1dd195cfe837b8a53f4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMDc1ZDI2OGQyY2UzMTU5NjRlMWRkMTk1Y2ZlODM3YjhhNTNmNGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-28T20:35:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-28T20:35:17Z"}, "message": "Auto merge of #83386 - mark-i-m:stabilize-pat2015, r=nikomatsakis\n\nStabilize `:pat_param` and remove `:pat2021`\n\nBlocked on #83384\n\ncc `@rust-lang/lang` #79278\n\nIf I understand `@nikomatsakis` in  https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/or.20patterns/near/231133873, another FCP is not needed.\n\nr? `@nikomatsakis`", "tree": {"sha": "4129a237b61f9a4e21394269c0381274e5d1e216", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4129a237b61f9a4e21394269c0381274e5d1e216"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca075d268d2ce315964e1dd195cfe837b8a53f4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca075d268d2ce315964e1dd195cfe837b8a53f4d", "html_url": "https://github.com/rust-lang/rust/commit/ca075d268d2ce315964e1dd195cfe837b8a53f4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca075d268d2ce315964e1dd195cfe837b8a53f4d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da43ee8d821999bf92d9ce8c81f8979ecea2c80d", "url": "https://api.github.com/repos/rust-lang/rust/commits/da43ee8d821999bf92d9ce8c81f8979ecea2c80d", "html_url": "https://github.com/rust-lang/rust/commit/da43ee8d821999bf92d9ce8c81f8979ecea2c80d"}, {"sha": "2a9db919ffb30ca09a015877b6ab2ffab5633249", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a9db919ffb30ca09a015877b6ab2ffab5633249", "html_url": "https://github.com/rust-lang/rust/commit/2a9db919ffb30ca09a015877b6ab2ffab5633249"}], "stats": {"total": 187, "additions": 66, "deletions": 121}, "files": [{"sha": "15f46ef5d7fe54bf473a22e43f319670bc9bb448", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ca075d268d2ce315964e1dd195cfe837b8a53f4d/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca075d268d2ce315964e1dd195cfe837b8a53f4d/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=ca075d268d2ce315964e1dd195cfe837b8a53f4d", "patch": "@@ -688,16 +688,12 @@ pub enum NonterminalKind {\n     Item,\n     Block,\n     Stmt,\n-    Pat2015 {\n-        /// Keep track of whether the user used `:pat2015` or `:pat` and we inferred it from the\n-        /// edition of the span. This is used for diagnostics.\n-        inferred: bool,\n-    },\n-    Pat2021 {\n-        /// Keep track of whether the user used `:pat2015` or `:pat` and we inferred it from the\n+    PatParam {\n+        /// Keep track of whether the user used `:pat_param` or `:pat` and we inferred it from the\n         /// edition of the span. This is used for diagnostics.\n         inferred: bool,\n     },\n+    PatWithOr,\n     Expr,\n     Ty,\n     Ident,\n@@ -722,12 +718,11 @@ impl NonterminalKind {\n             sym::stmt => NonterminalKind::Stmt,\n             sym::pat => match edition() {\n                 Edition::Edition2015 | Edition::Edition2018 => {\n-                    NonterminalKind::Pat2015 { inferred: true }\n+                    NonterminalKind::PatParam { inferred: true }\n                 }\n-                Edition::Edition2021 => NonterminalKind::Pat2021 { inferred: true },\n+                Edition::Edition2021 => NonterminalKind::PatWithOr,\n             },\n-            sym::pat2015 => NonterminalKind::Pat2015 { inferred: false },\n-            sym::pat2021 => NonterminalKind::Pat2021 { inferred: false },\n+            sym::pat_param => NonterminalKind::PatParam { inferred: false },\n             sym::expr => NonterminalKind::Expr,\n             sym::ty => NonterminalKind::Ty,\n             sym::ident => NonterminalKind::Ident,\n@@ -745,10 +740,8 @@ impl NonterminalKind {\n             NonterminalKind::Item => sym::item,\n             NonterminalKind::Block => sym::block,\n             NonterminalKind::Stmt => sym::stmt,\n-            NonterminalKind::Pat2015 { inferred: false } => sym::pat2015,\n-            NonterminalKind::Pat2021 { inferred: false } => sym::pat2021,\n-            NonterminalKind::Pat2015 { inferred: true }\n-            | NonterminalKind::Pat2021 { inferred: true } => sym::pat,\n+            NonterminalKind::PatParam { inferred: false } => sym::pat_param,\n+            NonterminalKind::PatParam { inferred: true } | NonterminalKind::PatWithOr => sym::pat,\n             NonterminalKind::Expr => sym::expr,\n             NonterminalKind::Ty => sym::ty,\n             NonterminalKind::Ident => sym::ident,"}, {"sha": "91d4a0f0d6581190759147e526ca3355369c0739", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca075d268d2ce315964e1dd195cfe837b8a53f4d/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca075d268d2ce315964e1dd195cfe837b8a53f4d/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=ca075d268d2ce315964e1dd195cfe837b8a53f4d", "patch": "@@ -955,15 +955,15 @@ fn check_matcher_core(\n             if let TokenTree::MetaVarDecl(span, name, Some(kind)) = *token {\n                 for next_token in &suffix_first.tokens {\n                     // Check if the old pat is used and the next token is `|`.\n-                    if let NonterminalKind::Pat2015 { inferred: true } = kind {\n+                    if let NonterminalKind::PatParam { inferred: true } = kind {\n                         if let TokenTree::Token(token) = next_token {\n                             if let BinOp(token) = token.kind {\n                                 if let token::BinOpToken::Or = token {\n-                                    // It is suggestion to use pat2015, for example: $x:pat -> $x:pat2015.\n+                                    // It is suggestion to use pat_param, for example: $x:pat -> $x:pat_param.\n                                     let suggestion = quoted_tt_to_string(&TokenTree::MetaVarDecl(\n                                         span,\n                                         name,\n-                                        Some(NonterminalKind::Pat2015 { inferred: false }),\n+                                        Some(NonterminalKind::PatParam { inferred: false }),\n                                     ));\n                                     sess.buffer_lint_with_diagnostic(\n                                         &OR_PATTERNS_BACK_COMPAT,\n@@ -1105,7 +1105,7 @@ fn is_in_follow(tok: &mbe::TokenTree, kind: NonterminalKind) -> IsInFollow {\n                     _ => IsInFollow::No(TOKENS),\n                 }\n             }\n-            NonterminalKind::Pat2015 { .. } => {\n+            NonterminalKind::PatParam { .. } => {\n                 const TOKENS: &[&str] = &[\"`=>`\", \"`,`\", \"`=`\", \"`|`\", \"`if`\", \"`in`\"];\n                 match tok {\n                     TokenTree::Token(token) => match token.kind {\n@@ -1116,7 +1116,7 @@ fn is_in_follow(tok: &mbe::TokenTree, kind: NonterminalKind) -> IsInFollow {\n                     _ => IsInFollow::No(TOKENS),\n                 }\n             }\n-            NonterminalKind::Pat2021 { .. } => {\n+            NonterminalKind::PatWithOr { .. } => {\n                 const TOKENS: &[&str] = &[\"`=>`\", \"`,`\", \"`=`\", \"`if`\", \"`in`\"];\n                 match tok {\n                     TokenTree::Token(token) => match token.kind {"}, {"sha": "aca02ef93f8b5ab571578748c73bf532b3dc9597", "filename": "compiler/rustc_expand/src/mbe/quoted.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ca075d268d2ce315964e1dd195cfe837b8a53f4d/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca075d268d2ce315964e1dd195cfe837b8a53f4d/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs?ref=ca075d268d2ce315964e1dd195cfe837b8a53f4d", "patch": "@@ -6,8 +6,8 @@ use rustc_ast::tokenstream;\n use rustc_ast::{NodeId, DUMMY_NODE_ID};\n use rustc_ast_pretty::pprust;\n use rustc_feature::Features;\n-use rustc_session::parse::{feature_err, ParseSess};\n-use rustc_span::symbol::{kw, sym, Ident};\n+use rustc_session::parse::ParseSess;\n+use rustc_span::symbol::{kw, Ident};\n \n use rustc_span::Span;\n \n@@ -62,21 +62,6 @@ pub(super) fn parse(\n                                 Some((frag, _)) => {\n                                     let span = token.span.with_lo(start_sp.lo());\n \n-                                    match frag.name {\n-                                        sym::pat2015 | sym::pat2021 => {\n-                                            if !features.edition_macro_pats {\n-                                                feature_err(\n-                                                    sess,\n-                                                    sym::edition_macro_pats,\n-                                                    frag.span,\n-                                                    \"`pat2015` and `pat2021` are unstable.\",\n-                                                )\n-                                                .emit();\n-                                            }\n-                                        }\n-                                        _ => {}\n-                                    }\n-\n                                     let kind =\n                                         token::NonterminalKind::from_symbol(frag.name, || {\n                                             span.edition()"}, {"sha": "2492db5b6340ddfef96e11806e8d42ffa6aaa327", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca075d268d2ce315964e1dd195cfe837b8a53f4d/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca075d268d2ce315964e1dd195cfe837b8a53f4d/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=ca075d268d2ce315964e1dd195cfe837b8a53f4d", "patch": "@@ -607,9 +607,6 @@ declare_features! (\n     /// Allows arbitrary expressions in key-value attributes at parse time.\n     (active, extended_key_value_attributes, \"1.50.0\", Some(78835), None),\n \n-    /// `:pat2015` and `:pat2021` macro matchers.\n-    (active, edition_macro_pats, \"1.51.0\", Some(54883), None),\n-\n     /// Allows const generics to have default values (e.g. `struct Foo<const N: usize = 3>(...);`).\n     (active, const_generics_defaults, \"1.51.0\", Some(44580), None),\n "}, {"sha": "c1d6a4f1de1ffa4789e366d57de329e711b81dde", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca075d268d2ce315964e1dd195cfe837b8a53f4d/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca075d268d2ce315964e1dd195cfe837b8a53f4d/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=ca075d268d2ce315964e1dd195cfe837b8a53f4d", "patch": "@@ -710,7 +710,7 @@ pub trait LintContext: Sized {\n                     db.note(&note);\n                 }\n                 BuiltinLintDiagnostics::OrPatternsBackCompat(span,suggestion) => {\n-                    db.span_suggestion(span, \"use pat2015 to preserve semantics\", suggestion, Applicability::MachineApplicable);\n+                    db.span_suggestion(span, \"use pat_param to preserve semantics\", suggestion, Applicability::MachineApplicable);\n                 }\n             }\n             // Rewrap `db`, and pass control to the user."}, {"sha": "0c43e304f1ee278e693ac98db56e4f58e149ece7", "filename": "compiler/rustc_parse/src/parser/nonterminal.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ca075d268d2ce315964e1dd195cfe837b8a53f4d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca075d268d2ce315964e1dd195cfe837b8a53f4d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs?ref=ca075d268d2ce315964e1dd195cfe837b8a53f4d", "patch": "@@ -61,7 +61,8 @@ impl<'a> Parser<'a> {\n                 },\n                 _ => false,\n             },\n-            NonterminalKind::Pat2015 { .. } | NonterminalKind::Pat2021 { .. } => match token.kind {\n+            NonterminalKind::PatParam { .. } | NonterminalKind::PatWithOr { .. } => {\n+                match token.kind {\n                 token::Ident(..) |                  // box, ref, mut, and other identifiers (can stricten)\n                 token::OpenDelim(token::Paren) |    // tuple pattern\n                 token::OpenDelim(token::Bracket) |  // slice pattern\n@@ -75,10 +76,11 @@ impl<'a> Parser<'a> {\n                 token::Lt |                         // path (UFCS constant)\n                 token::BinOp(token::Shl) => true,   // path (double UFCS)\n                 // leading vert `|` or-pattern\n-                token::BinOp(token::Or) =>  matches!(kind, NonterminalKind::Pat2021 {..}),\n+                token::BinOp(token::Or) =>  matches!(kind, NonterminalKind::PatWithOr {..}),\n                 token::Interpolated(ref nt) => may_be_ident(nt),\n                 _ => false,\n-            },\n+            }\n+            }\n             NonterminalKind::Lifetime => match token.kind {\n                 token::Lifetime(_) => true,\n                 token::Interpolated(ref nt) => {\n@@ -118,10 +120,10 @@ impl<'a> Parser<'a> {\n                     return Err(self.struct_span_err(self.token.span, \"expected a statement\"));\n                 }\n             },\n-            NonterminalKind::Pat2015 { .. } | NonterminalKind::Pat2021 { .. } => {\n+            NonterminalKind::PatParam { .. } | NonterminalKind::PatWithOr { .. } => {\n                 token::NtPat(self.collect_tokens_no_attrs(|this| match kind {\n-                    NonterminalKind::Pat2015 { .. } => this.parse_pat_no_top_alt(None),\n-                    NonterminalKind::Pat2021 { .. } => {\n+                    NonterminalKind::PatParam { .. } => this.parse_pat_no_top_alt(None),\n+                    NonterminalKind::PatWithOr { .. } => {\n                         this.parse_pat_allow_top_alt(None, RecoverComma::No)\n                     }\n                     _ => unreachable!(),"}, {"sha": "ca3df07571ada052b696394a6068974e02dfdd9f", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca075d268d2ce315964e1dd195cfe837b8a53f4d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca075d268d2ce315964e1dd195cfe837b8a53f4d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=ca075d268d2ce315964e1dd195cfe837b8a53f4d", "patch": "@@ -853,8 +853,7 @@ symbols! {\n         partial_ord,\n         passes,\n         pat,\n-        pat2015,\n-        pat2021,\n+        pat_param,\n         path,\n         pattern_parentheses,\n         phantom_data,"}, {"sha": "430a9437cee34e2b717a0a954194ea2dbfbfe0b3", "filename": "src/test/ui/feature-gates/feature-gate-edition_macro_pats.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da43ee8d821999bf92d9ce8c81f8979ecea2c80d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-edition_macro_pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da43ee8d821999bf92d9ce8c81f8979ecea2c80d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-edition_macro_pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-edition_macro_pats.rs?ref=da43ee8d821999bf92d9ce8c81f8979ecea2c80d", "patch": "@@ -1,8 +0,0 @@\n-// Feature gate test for `edition_macro_pats` feature.\n-\n-macro_rules! foo {\n-    ($x:pat2015) => {}; //~ERROR `pat2015` and `pat2021` are unstable\n-    ($x:pat2021) => {}; //~ERROR `pat2015` and `pat2021` are unstable\n-}\n-\n-fn main() {}"}, {"sha": "d25bcaf929bcddfcb5a6fc309e402b1b0350716f", "filename": "src/test/ui/feature-gates/feature-gate-edition_macro_pats.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/da43ee8d821999bf92d9ce8c81f8979ecea2c80d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-edition_macro_pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da43ee8d821999bf92d9ce8c81f8979ecea2c80d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-edition_macro_pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-edition_macro_pats.stderr?ref=da43ee8d821999bf92d9ce8c81f8979ecea2c80d", "patch": "@@ -1,21 +0,0 @@\n-error[E0658]: `pat2015` and `pat2021` are unstable.\n-  --> $DIR/feature-gate-edition_macro_pats.rs:4:9\n-   |\n-LL |     ($x:pat2015) => {};\n-   |         ^^^^^^^\n-   |\n-   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n-   = help: add `#![feature(edition_macro_pats)]` to the crate attributes to enable\n-\n-error[E0658]: `pat2015` and `pat2021` are unstable.\n-  --> $DIR/feature-gate-edition_macro_pats.rs:5:9\n-   |\n-LL |     ($x:pat2021) => {};\n-   |         ^^^^^^^\n-   |\n-   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n-   = help: add `#![feature(edition_macro_pats)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "040894712a8caecfe9ccdc24df68f22d0724feae", "filename": "src/test/ui/macros/edition-macro-pats.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca075d268d2ce315964e1dd195cfe837b8a53f4d/src%2Ftest%2Fui%2Fmacros%2Fedition-macro-pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca075d268d2ce315964e1dd195cfe837b8a53f4d/src%2Ftest%2Fui%2Fmacros%2Fedition-macro-pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fedition-macro-pats.rs?ref=ca075d268d2ce315964e1dd195cfe837b8a53f4d", "patch": "@@ -1,10 +1,9 @@\n // run-pass\n-\n-#![feature(edition_macro_pats)]\n+// edition:2021\n \n macro_rules! foo {\n-    (a $x:pat2015) => {};\n-    (b $x:pat2021) => {};\n+    (a $x:pat_param) => {};\n+    (b $x:pat) => {};\n }\n \n fn main() {"}, {"sha": "f829129d516b2247ff39aa5b9533bc6f91e5ea5a", "filename": "src/test/ui/macros/macro-or-patterns-back-compat.fixed", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ca075d268d2ce315964e1dd195cfe837b8a53f4d/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ca075d268d2ce315964e1dd195cfe837b8a53f4d/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.fixed?ref=ca075d268d2ce315964e1dd195cfe837b8a53f4d", "patch": "@@ -1,15 +1,14 @@\n // run-rustfix\n \n-#![feature(edition_macro_pats)]\n #![deny(or_patterns_back_compat)]\n #![allow(unused_macros)]\n-macro_rules! foo { ($x:pat2015 | $y:pat) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-macro_rules! bar { ($($x:pat2015)+ | $($y:pat)+) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-macro_rules! baz { ($x:pat2015 | $y:pat2015) => {} } // should be ok\n-macro_rules! qux { ($x:pat2015 | $y:pat) => {} } // should be ok\n-macro_rules! ogg { ($x:pat2015 | $y:pat2015) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n+macro_rules! foo { ($x:pat_param | $y:pat) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n+macro_rules! bar { ($($x:pat_param)+ | $($y:pat)+) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n+macro_rules! baz { ($x:pat_param | $y:pat_param) => {} } // should be ok\n+macro_rules! qux { ($x:pat_param | $y:pat) => {} } // should be ok\n+macro_rules! ogg { ($x:pat_param | $y:pat_param) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n macro_rules! match_any {\n-    ( $expr:expr , $( $( $pat:pat2015 )|+ => $expr_arm:expr ),+ ) => { //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n+    ( $expr:expr , $( $( $pat:pat_param )|+ => $expr_arm:expr ),+ ) => { //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n         match $expr {\n             $(\n                 $( $pat => $expr_arm, )+"}, {"sha": "1cdaa1cd6317bc8d809a7f445c1e51d554df53bb", "filename": "src/test/ui/macros/macro-or-patterns-back-compat.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca075d268d2ce315964e1dd195cfe837b8a53f4d/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca075d268d2ce315964e1dd195cfe837b8a53f4d/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.rs?ref=ca075d268d2ce315964e1dd195cfe837b8a53f4d", "patch": "@@ -1,13 +1,12 @@\n // run-rustfix\n \n-#![feature(edition_macro_pats)]\n #![deny(or_patterns_back_compat)]\n #![allow(unused_macros)]\n macro_rules! foo { ($x:pat | $y:pat) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n macro_rules! bar { ($($x:pat)+ | $($y:pat)+) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-macro_rules! baz { ($x:pat2015 | $y:pat2015) => {} } // should be ok\n-macro_rules! qux { ($x:pat2015 | $y:pat) => {} } // should be ok\n-macro_rules! ogg { ($x:pat | $y:pat2015) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n+macro_rules! baz { ($x:pat_param | $y:pat_param) => {} } // should be ok\n+macro_rules! qux { ($x:pat_param | $y:pat) => {} } // should be ok\n+macro_rules! ogg { ($x:pat | $y:pat_param) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n macro_rules! match_any {\n     ( $expr:expr , $( $( $pat:pat )|+ => $expr_arm:expr ),+ ) => { //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n         match $expr {"}, {"sha": "01d220dd0b11473450c13bb4ba80902339dc83be", "filename": "src/test/ui/macros/macro-or-patterns-back-compat.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ca075d268d2ce315964e1dd195cfe837b8a53f4d/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca075d268d2ce315964e1dd195cfe837b8a53f4d/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.stderr?ref=ca075d268d2ce315964e1dd195cfe837b8a53f4d", "patch": "@@ -1,32 +1,32 @@\n error: the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-  --> $DIR/macro-or-patterns-back-compat.rs:6:21\n+  --> $DIR/macro-or-patterns-back-compat.rs:5:21\n    |\n LL | macro_rules! foo { ($x:pat | $y:pat) => {} }\n-   |                     ^^^^^^ help: use pat2015 to preserve semantics: `$x:pat2015`\n+   |                     ^^^^^^ help: use pat_param to preserve semantics: `$x:pat_param`\n    |\n note: the lint level is defined here\n-  --> $DIR/macro-or-patterns-back-compat.rs:4:9\n+  --> $DIR/macro-or-patterns-back-compat.rs:3:9\n    |\n LL | #![deny(or_patterns_back_compat)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-  --> $DIR/macro-or-patterns-back-compat.rs:7:23\n+  --> $DIR/macro-or-patterns-back-compat.rs:6:23\n    |\n LL | macro_rules! bar { ($($x:pat)+ | $($y:pat)+) => {} }\n-   |                       ^^^^^^ help: use pat2015 to preserve semantics: `$x:pat2015`\n+   |                       ^^^^^^ help: use pat_param to preserve semantics: `$x:pat_param`\n \n error: the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-  --> $DIR/macro-or-patterns-back-compat.rs:10:21\n+  --> $DIR/macro-or-patterns-back-compat.rs:9:21\n    |\n-LL | macro_rules! ogg { ($x:pat | $y:pat2015) => {} }\n-   |                     ^^^^^^ help: use pat2015 to preserve semantics: `$x:pat2015`\n+LL | macro_rules! ogg { ($x:pat | $y:pat_param) => {} }\n+   |                     ^^^^^^ help: use pat_param to preserve semantics: `$x:pat_param`\n \n error: the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-  --> $DIR/macro-or-patterns-back-compat.rs:12:26\n+  --> $DIR/macro-or-patterns-back-compat.rs:11:26\n    |\n LL |     ( $expr:expr , $( $( $pat:pat )|+ => $expr_arm:expr ),+ ) => {\n-   |                          ^^^^^^^^ help: use pat2015 to preserve semantics: `$pat:pat2015`\n+   |                          ^^^^^^^^ help: use pat_param to preserve semantics: `$pat:pat_param`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "b4be03aaddd581c899d7f2d174aaaaa69f20d64f", "filename": "src/test/ui/macros/macro-pat2021-pattern-followed-by-or.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ca075d268d2ce315964e1dd195cfe837b8a53f4d/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat2021-pattern-followed-by-or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca075d268d2ce315964e1dd195cfe837b8a53f4d/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat2021-pattern-followed-by-or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat2021-pattern-followed-by-or.rs?ref=ca075d268d2ce315964e1dd195cfe837b8a53f4d", "patch": "@@ -1,11 +1,12 @@\n-#![feature(edition_macro_pats)]\n+// edition:2021\n+\n #![allow(unused_macros)]\n-macro_rules! foo { ($x:pat2021 | $y:pat2021) => {} } //~ ERROR `$x:pat2021` is followed by `|`, which is not allowed for `pat2021` fragments\n-macro_rules! baz { ($x:pat2015 | $y:pat2015) => {} } // should be ok\n-macro_rules! qux { ($x:pat2015 | $y:pat2021) => {} } // should be ok\n-macro_rules! ogg { ($x:pat2021 | $y:pat2015) => {} } //~ ERROR `$x:pat2021` is followed by `|`, which is not allowed for `pat2021` fragments\n+macro_rules! foo { ($x:pat | $y:pat) => {} } //~ ERROR `$x:pat` is followed by `|`, which is not allowed for `pat` fragments\n+macro_rules! baz { ($x:pat_param | $y:pat_param) => {} } // should be ok\n+macro_rules! qux { ($x:pat_param | $y:pat) => {} } // should be ok\n+macro_rules! ogg { ($x:pat | $y:pat_param) => {} } //~ ERROR `$x:pat` is followed by `|`, which is not allowed for `pat` fragments\n macro_rules! match_any {\n-    ( $expr:expr , $( $( $pat:pat2021 )|+ => $expr_arm:pat2021 ),+ ) => { //~ ERROR  `$pat:pat2021` may be followed by `|`, which is not allowed for `pat2021` fragments\n+    ( $expr:expr , $( $( $pat:pat)|+ => $expr_arm:pat),+ ) => { //~ ERROR  `$pat:pat` may be followed by `|`, which is not allowed for `pat` fragments\n         match $expr {\n             $(\n                 $( $pat => $expr_arm, )+"}, {"sha": "8aebe98515f4d3653cbd47248e3eb03eb8b1643f", "filename": "src/test/ui/macros/macro-pat2021-pattern-followed-by-or.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ca075d268d2ce315964e1dd195cfe837b8a53f4d/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat2021-pattern-followed-by-or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca075d268d2ce315964e1dd195cfe837b8a53f4d/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat2021-pattern-followed-by-or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat2021-pattern-followed-by-or.stderr?ref=ca075d268d2ce315964e1dd195cfe837b8a53f4d", "patch": "@@ -1,24 +1,24 @@\n-error: `$x:pat2021` is followed by `|`, which is not allowed for `pat2021` fragments\n-  --> $DIR/macro-pat2021-pattern-followed-by-or.rs:3:32\n+error: `$x:pat` is followed by `|`, which is not allowed for `pat` fragments\n+  --> $DIR/macro-pat2021-pattern-followed-by-or.rs:4:28\n    |\n-LL | macro_rules! foo { ($x:pat2021 | $y:pat2021) => {} }\n-   |                                ^ not allowed after `pat2021` fragments\n+LL | macro_rules! foo { ($x:pat | $y:pat) => {} }\n+   |                            ^ not allowed after `pat` fragments\n    |\n    = note: allowed there are: `=>`, `,`, `=`, `if` or `in`\n \n-error: `$x:pat2021` is followed by `|`, which is not allowed for `pat2021` fragments\n-  --> $DIR/macro-pat2021-pattern-followed-by-or.rs:6:32\n+error: `$x:pat` is followed by `|`, which is not allowed for `pat` fragments\n+  --> $DIR/macro-pat2021-pattern-followed-by-or.rs:7:28\n    |\n-LL | macro_rules! ogg { ($x:pat2021 | $y:pat2015) => {} }\n-   |                                ^ not allowed after `pat2021` fragments\n+LL | macro_rules! ogg { ($x:pat | $y:pat_param) => {} }\n+   |                            ^ not allowed after `pat` fragments\n    |\n    = note: allowed there are: `=>`, `,`, `=`, `if` or `in`\n \n-error: `$pat:pat2021` may be followed by `|`, which is not allowed for `pat2021` fragments\n-  --> $DIR/macro-pat2021-pattern-followed-by-or.rs:8:40\n+error: `$pat:pat` may be followed by `|`, which is not allowed for `pat` fragments\n+  --> $DIR/macro-pat2021-pattern-followed-by-or.rs:9:35\n    |\n-LL |     ( $expr:expr , $( $( $pat:pat2021 )|+ => $expr_arm:pat2021 ),+ ) => {\n-   |                                        ^ not allowed after `pat2021` fragments\n+LL |     ( $expr:expr , $( $( $pat:pat)|+ => $expr_arm:pat),+ ) => {\n+   |                                   ^ not allowed after `pat` fragments\n    |\n    = note: allowed there are: `=>`, `,`, `=`, `if` or `in`\n "}]}