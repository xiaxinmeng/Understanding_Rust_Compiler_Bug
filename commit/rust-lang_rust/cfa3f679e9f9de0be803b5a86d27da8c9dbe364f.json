{"sha": "cfa3f679e9f9de0be803b5a86d27da8c9dbe364f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmYTNmNjc5ZTlmOWRlMGJlODAzYjVhODZkMjdkYThjOWRiZTM2NGY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-29T15:55:25Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-29T15:55:25Z"}, "message": "internal: don't expose impl details out of hir", "tree": {"sha": "8f28325ec5a633bcb625356cb3359b16681bbe52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f28325ec5a633bcb625356cb3359b16681bbe52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfa3f679e9f9de0be803b5a86d27da8c9dbe364f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfa3f679e9f9de0be803b5a86d27da8c9dbe364f", "html_url": "https://github.com/rust-lang/rust/commit/cfa3f679e9f9de0be803b5a86d27da8c9dbe364f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfa3f679e9f9de0be803b5a86d27da8c9dbe364f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76b60efbfb8cdc94cf14fef1be50c60f250bc293", "url": "https://api.github.com/repos/rust-lang/rust/commits/76b60efbfb8cdc94cf14fef1be50c60f250bc293", "html_url": "https://github.com/rust-lang/rust/commit/76b60efbfb8cdc94cf14fef1be50c60f250bc293"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "544312f6fc32b0618a3a248f0e69cecad2897d01", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cfa3f679e9f9de0be803b5a86d27da8c9dbe364f/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfa3f679e9f9de0be803b5a86d27da8c9dbe364f/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=cfa3f679e9f9de0be803b5a86d27da8c9dbe364f", "patch": "@@ -2564,7 +2564,7 @@ impl Type {\n         krate: Crate,\n         traits_in_scope: &FxHashSet<TraitId>,\n         name: Option<&Name>,\n-        mut callback: impl FnMut(&Ty, Function) -> Option<T>,\n+        mut callback: impl FnMut(Type, Function) -> Option<T>,\n     ) -> Option<T> {\n         let _p = profile::span(\"iterate_method_candidates\");\n         let mut slot = None;\n@@ -2575,7 +2575,7 @@ impl Type {\n             name,\n             &mut |ty, assoc_item_id| match assoc_item_id {\n                 AssocItemId::FunctionId(it) => {\n-                    slot = callback(ty, it.into());\n+                    slot = callback(self.derived(ty.clone()), it.into());\n                     slot.is_some()\n                 }\n                 AssocItemId::ConstId(_) | AssocItemId::TypeAliasId(_) => false,\n@@ -2620,7 +2620,7 @@ impl Type {\n         krate: Crate,\n         traits_in_scope: &FxHashSet<TraitId>,\n         name: Option<&Name>,\n-        mut callback: impl FnMut(&Ty, AssocItem) -> Option<T>,\n+        mut callback: impl FnMut(Type, AssocItem) -> Option<T>,\n     ) -> Option<T> {\n         let _p = profile::span(\"iterate_path_candidates\");\n         let mut slot = None;\n@@ -2630,7 +2630,7 @@ impl Type {\n             traits_in_scope,\n             name,\n             &mut |ty, assoc_item_id| {\n-                slot = callback(ty, assoc_item_id.into());\n+                slot = callback(self.derived(ty.clone()), assoc_item_id.into());\n                 slot.is_some()\n             },\n         );"}, {"sha": "9b789b5fa2fcd4243bb045641ce3fc304a6e2f98", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfa3f679e9f9de0be803b5a86d27da8c9dbe364f/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfa3f679e9f9de0be803b5a86d27da8c9dbe364f/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=cfa3f679e9f9de0be803b5a86d27da8c9dbe364f", "patch": "@@ -410,7 +410,7 @@ pub enum LookupMode {\n // This would be nicer if it just returned an iterator, but that runs into\n // lifetime problems, because we need to borrow temp `CrateImplDefs`.\n // FIXME add a context type here?\n-pub fn  iterate_method_candidates<T>(\n+pub fn iterate_method_candidates<T>(\n     ty: &Canonical<Ty>,\n     db: &dyn HirDatabase,\n     env: Arc<TraitEnvironment>,"}]}