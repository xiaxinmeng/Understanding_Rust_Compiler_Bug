{"sha": "1e2e2ac5550d4f1d89c4958ef35860ffff9ab6ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMmUyYWM1NTUwZDRmMWQ4OWM0OTU4ZWYzNTg2MGZmZmY5YWI2ZWY=", "commit": {"author": {"name": "Damien Radtke", "email": "dradtke@channeliq.com", "date": "2014-09-24T15:25:36Z"}, "committer": {"name": "Damien Radtke", "email": "dradtke@channeliq.com", "date": "2014-09-24T15:25:36Z"}, "message": "Some improvements to the Cargo compiler file.", "tree": {"sha": "5f24b0973d07b9b01d277744adb3178f1778bac1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f24b0973d07b9b01d277744adb3178f1778bac1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e2e2ac5550d4f1d89c4958ef35860ffff9ab6ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e2e2ac5550d4f1d89c4958ef35860ffff9ab6ef", "html_url": "https://github.com/rust-lang/rust/commit/1e2e2ac5550d4f1d89c4958ef35860ffff9ab6ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e2e2ac5550d4f1d89c4958ef35860ffff9ab6ef/comments", "author": null, "committer": null, "parents": [{"sha": "59e750f198a31ef1222dd6048d873391a459abcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/59e750f198a31ef1222dd6048d873391a459abcf", "html_url": "https://github.com/rust-lang/rust/commit/59e750f198a31ef1222dd6048d873391a459abcf"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "d707ae828692d38a89b589cdfdba923960ee4681", "filename": "src/etc/vim/compiler/cargo.vim", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1e2e2ac5550d4f1d89c4958ef35860ffff9ab6ef/src%2Fetc%2Fvim%2Fcompiler%2Fcargo.vim", "raw_url": "https://github.com/rust-lang/rust/raw/1e2e2ac5550d4f1d89c4958ef35860ffff9ab6ef/src%2Fetc%2Fvim%2Fcompiler%2Fcargo.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fcompiler%2Fcargo.vim?ref=1e2e2ac5550d4f1d89c4958ef35860ffff9ab6ef", "patch": "@@ -1,7 +1,7 @@\n \" Vim compiler file\n \" Compiler:         Cargo Compiler\n \" Maintainer:       Damien Radtke <damienradtke@gmail.com>\n-\" Latest Revision:  2014 Sep 18\n+\" Latest Revision:  2014 Sep 24\n \n if exists(\"current_compiler\")\n   finish\n@@ -12,18 +12,18 @@ if exists(\":CompilerSet\") != 2\n     command -nargs=* CompilerSet setlocal <args>\n endif\n \n-CompilerSet errorformat&\n+CompilerSet errorformat=%A%f:%l:%c:\\ %m,%-Z%p^,%-C%.%#\n CompilerSet makeprg=cargo\\ $*\n \n \" Allow a configurable global Cargo.toml name. This makes it easy to\n \" support variations like 'cargo.toml'.\n-if !exists('g:cargo_toml_name')\n-    let g:cargo_toml_name = 'Cargo.toml'\n+if !exists('g:cargo_manifest_name')\n+    let g:cargo_manifest_name = 'Cargo.toml'\n endif\n \n-let s:toml_dir = fnamemodify(findfile(g:cargo_toml_name, '.;'), ':p:h').'/'\n+let s:local_manifest = fnamemodify(findfile(g:cargo_manifest_name, '.;'), ':p:h').'/'\n \n-if s:toml_dir != ''\n+if s:local_manifest != ''\n     augroup cargo\n         au!\n         au QuickfixCmdPost make call s:FixPaths()\n@@ -33,15 +33,25 @@ if s:toml_dir != ''\n     \" to be relative to the current directory instead of Cargo.toml.\n     function! s:FixPaths()\n         let qflist = getqflist()\n+        let manifest = s:local_manifest\n         for qf in qflist\n             if !qf['valid']\n+                let m = matchlist(qf['text'], '\\v.*\\(file://(.*)\\)$')\n+                if len(m) > 0\n+                    let manifest = m[1].'/'\n+                    \" Manually strip another slash if needed; usually just an\n+                    \" issue on Windows.\n+                    if manifest =~ '^/[A-Z]*:/'\n+                        let manifest = manifest[1:]\n+                    endif\n+                endif\n                 continue\n             endif\n             let filename = bufname(qf['bufnr'])\n-            if stridx(filename, s:toml_dir) == -1\n-                let filename = s:toml_dir.filename\n+            if filereadable(filename)\n+                continue\n             endif\n-            let qf['filename'] = simplify(s:toml_dir.bufname(qf['bufnr']))\n+            let qf['filename'] = simplify(manifest.filename)\n             call remove(qf, 'bufnr')\n         endfor\n         call setqflist(qflist, 'r')"}]}