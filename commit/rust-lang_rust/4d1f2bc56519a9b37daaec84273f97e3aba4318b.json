{"sha": "4d1f2bc56519a9b37daaec84273f97e3aba4318b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkMWYyYmM1NjUxOWE5YjM3ZGFhZWM4NDI3M2Y5N2UzYWJhNDMxOGI=", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-17T05:26:27Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-17T15:59:44Z"}, "message": "extract conditions for single_char_pattern into its own module", "tree": {"sha": "25e43f37baddea0d2f94f561dffa2e095774d309", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25e43f37baddea0d2f94f561dffa2e095774d309"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d1f2bc56519a9b37daaec84273f97e3aba4318b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d1f2bc56519a9b37daaec84273f97e3aba4318b", "html_url": "https://github.com/rust-lang/rust/commit/4d1f2bc56519a9b37daaec84273f97e3aba4318b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d1f2bc56519a9b37daaec84273f97e3aba4318b/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a7fcc0eda1d62f44ec374bad3d14226888238ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a7fcc0eda1d62f44ec374bad3d14226888238ad", "html_url": "https://github.com/rust-lang/rust/commit/7a7fcc0eda1d62f44ec374bad3d14226888238ad"}], "stats": {"total": 48, "additions": 25, "deletions": 23}, "files": [{"sha": "b97dee27c520fd6b7375ce8423defeb5ccbefd32", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4d1f2bc56519a9b37daaec84273f97e3aba4318b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d1f2bc56519a9b37daaec84273f97e3aba4318b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=4d1f2bc56519a9b37daaec84273f97e3aba4318b", "patch": "@@ -1787,17 +1787,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 inefficient_to_string::check(cx, expr, method_call.ident.name, args);\n                 single_char_add_str::check(cx, expr, args);\n                 into_iter_on_ref::check(cx, expr, *method_span, method_call.ident.name, args);\n-\n-                match cx.typeck_results().expr_ty_adjusted(&args[0]).kind() {\n-                    ty::Ref(_, ty, _) if *ty.kind() == ty::Str => {\n-                        for &(method, pos) in &PATTERN_METHODS {\n-                            if method_call.ident.name.as_str() == method && args.len() > pos {\n-                                single_char_pattern::check(cx, expr, &args[pos]);\n-                            }\n-                        }\n-                    },\n-                    _ => (),\n-                }\n+                single_char_pattern::check(cx, expr, method_call.ident.name, args);\n             },\n             hir::ExprKind::Binary(op, ref lhs, ref rhs)\n                 if op.node == hir::BinOpKind::Eq || op.node == hir::BinOpKind::Ne =>"}, {"sha": "ae998468c2d9a37d70d2b4c8576732fe06c926ca", "filename": "clippy_lints/src/methods/single_char_pattern.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4d1f2bc56519a9b37daaec84273f97e3aba4318b/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d1f2bc56519a9b37daaec84273f97e3aba4318b/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_pattern.rs?ref=4d1f2bc56519a9b37daaec84273f97e3aba4318b", "patch": "@@ -1,23 +1,35 @@\n use crate::methods::get_hint_if_single_char_arg;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n+use rustc_middle::ty;\n+use rustc_span::symbol::Symbol;\n \n use super::SINGLE_CHAR_PATTERN;\n \n /// lint for length-1 `str`s for methods in `PATTERN_METHODS`\n-pub(super) fn check(cx: &LateContext<'_>, _expr: &hir::Expr<'_>, arg: &hir::Expr<'_>) {\n-    let mut applicability = Applicability::MachineApplicable;\n-    if let Some(hint) = get_hint_if_single_char_arg(cx, arg, &mut applicability) {\n-        span_lint_and_sugg(\n-            cx,\n-            SINGLE_CHAR_PATTERN,\n-            arg.span,\n-            \"single-character string constant used as pattern\",\n-            \"try using a `char` instead\",\n-            hint,\n-            applicability,\n-        );\n+pub(super) fn check(cx: &LateContext<'_>, _expr: &hir::Expr<'_>, method_name: Symbol, args: &[hir::Expr<'_>]) {\n+    for &(method, pos) in &crate::methods::PATTERN_METHODS {\n+        if_chain! {\n+            if let ty::Ref(_, ty, _) = cx.typeck_results().expr_ty_adjusted(&args[0]).kind();\n+            if *ty.kind() == ty::Str;\n+            if method_name.as_str() == method && args.len() > pos;\n+            let arg = &args[pos];\n+            let mut applicability = Applicability::MachineApplicable;\n+            if let Some(hint) = get_hint_if_single_char_arg(cx, arg, &mut applicability);\n+            then {\n+                span_lint_and_sugg(\n+                    cx,\n+                    SINGLE_CHAR_PATTERN,\n+                    arg.span,\n+                    \"single-character string constant used as pattern\",\n+                    \"try using a `char` instead\",\n+                    hint,\n+                    applicability,\n+                );\n+            }\n+        }\n     }\n }"}]}