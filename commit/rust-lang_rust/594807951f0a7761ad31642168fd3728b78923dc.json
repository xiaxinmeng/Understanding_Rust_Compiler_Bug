{"sha": "594807951f0a7761ad31642168fd3728b78923dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NDgwNzk1MWYwYTc3NjFhZDMxNjQyMTY4ZmQzNzI4Yjc4OTIzZGM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-10T22:54:11Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-10T23:12:07Z"}, "message": "rustdoc: Don't show private modules", "tree": {"sha": "2453d4766bb685215843bf8f628724681722d0bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2453d4766bb685215843bf8f628724681722d0bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/594807951f0a7761ad31642168fd3728b78923dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/594807951f0a7761ad31642168fd3728b78923dc", "html_url": "https://github.com/rust-lang/rust/commit/594807951f0a7761ad31642168fd3728b78923dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/594807951f0a7761ad31642168fd3728b78923dc/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79e144ed64866d5a6d2c5f1789cca80d1627578e", "url": "https://api.github.com/repos/rust-lang/rust/commits/79e144ed64866d5a6d2c5f1789cca80d1627578e", "html_url": "https://github.com/rust-lang/rust/commit/79e144ed64866d5a6d2c5f1789cca80d1627578e"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "218d162de84c639f6386f04f9fcc280ebfc03136", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/594807951f0a7761ad31642168fd3728b78923dc/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594807951f0a7761ad31642168fd3728b78923dc/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=594807951f0a7761ad31642168fd3728b78923dc", "patch": "@@ -157,6 +157,7 @@ pub struct Cache {\n     priv stack: ~[~str],\n     priv parent_stack: ~[ast::NodeId],\n     priv search_index: ~[IndexItem],\n+    priv privmod: bool,\n }\n \n /// Helper struct to render all source code to HTML pages\n@@ -241,6 +242,7 @@ pub fn run(mut crate: clean::Crate, dst: Path) {\n         parent_stack: ~[],\n         search_index: ~[],\n         extern_locations: HashMap::new(),\n+        privmod: false,\n     };\n     cache.stack.push(crate.name.clone());\n     crate = cache.fold_crate(crate);\n@@ -455,6 +457,16 @@ impl<'a> SourceCollector<'a> {\n \n impl DocFolder for Cache {\n     fn fold_item(&mut self, item: clean::Item) -> Option<clean::Item> {\n+        // If this is a private module, we don't want it in the search index.\n+        let orig_privmod = match item.inner {\n+            clean::ModuleItem(..) => {\n+                let prev = self.privmod;\n+                self.privmod = prev || item.visibility != Some(ast::public);\n+                prev\n+            }\n+            _ => self.privmod,\n+        };\n+\n         // Register any generics to their corresponding string. This is used\n         // when pretty-printing types\n         match item.inner {\n@@ -530,7 +542,7 @@ impl DocFolder for Cache {\n                     _ => Some((None, self.stack.as_slice()))\n                 };\n                 match parent {\n-                    Some((parent, path)) => {\n+                    Some((parent, path)) if !self.privmod => {\n                         self.search_index.push(IndexItem {\n                             ty: shortty(&item),\n                             name: s.to_owned(),\n@@ -539,7 +551,7 @@ impl DocFolder for Cache {\n                             parent: parent,\n                         });\n                     }\n-                    None => {}\n+                    Some(..) | None => {}\n                 }\n             }\n             None => {}\n@@ -612,8 +624,12 @@ impl DocFolder for Cache {\n                     // Private modules may survive the strip-private pass if\n                     // they contain impls for public types, but those will get\n                     // stripped here\n-                    clean::Item { inner: clean::ModuleItem(ref m), .. }\n-                            if m.items.len() == 0 => None,\n+                    clean::Item { inner: clean::ModuleItem(ref m),\n+                                  visibility, .. }\n+                            if (m.items.len() == 0 &&\n+                                item.doc_value().is_none()) ||\n+                               visibility != Some(ast::public) => None,\n+\n                     i => Some(i),\n                 }\n             }\n@@ -622,6 +638,7 @@ impl DocFolder for Cache {\n \n         if pushed { self.stack.pop(); }\n         if parent_pushed { self.parent_stack.pop(); }\n+        self.privmod = orig_privmod;\n         return ret;\n     }\n }"}]}