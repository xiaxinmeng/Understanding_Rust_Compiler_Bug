{"sha": "b863272899a1bae63c7d9411d0ebff74652bae8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NjMyNzI4OTlhMWJhZTYzYzdkOTQxMWQwZWJmZjc0NjUyYmFlOGU=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-09T20:04:42Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-09T20:04:42Z"}, "message": "Merge #1126\n\n1126: Swithc to native salsa interning r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "f5b95ae6af1ee37545eff70813c8940979e99daf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5b95ae6af1ee37545eff70813c8940979e99daf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b863272899a1bae63c7d9411d0ebff74652bae8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b863272899a1bae63c7d9411d0ebff74652bae8e", "html_url": "https://github.com/rust-lang/rust/commit/b863272899a1bae63c7d9411d0ebff74652bae8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b863272899a1bae63c7d9411d0ebff74652bae8e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "cc284dad30de4990516eeccf60f24e613fd78a2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc284dad30de4990516eeccf60f24e613fd78a2a", "html_url": "https://github.com/rust-lang/rust/commit/cc284dad30de4990516eeccf60f24e613fd78a2a"}, {"sha": "88189c428242d2d65b749d0980eb447e72766e77", "url": "https://api.github.com/repos/rust-lang/rust/commits/88189c428242d2d65b749d0980eb447e72766e77", "html_url": "https://github.com/rust-lang/rust/commit/88189c428242d2d65b749d0980eb447e72766e77"}], "stats": {"total": 329, "additions": 110, "deletions": 219}, "files": [{"sha": "0cafe617dc54f1bcf59825b411c8ba89cc9ff90e", "filename": "crates/ra_batch/src/lib.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b863272899a1bae63c7d9411d0ebff74652bae8e/crates%2Fra_batch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b863272899a1bae63c7d9411d0ebff74652bae8e/crates%2Fra_batch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2Fsrc%2Flib.rs?ref=b863272899a1bae63c7d9411d0ebff74652bae8e", "patch": "@@ -9,7 +9,7 @@ use rustc_hash::FxHashMap;\n use ra_db::{\n     CrateGraph, FileId, SourceRoot, SourceRootId, SourceDatabase, salsa,\n };\n-use ra_hir::{db, HirInterner};\n+use ra_hir::db;\n use ra_project_model::ProjectWorkspace;\n use ra_vfs::{Vfs, VfsChange};\n use vfs_filter::IncludeRustFiles;\n@@ -20,7 +20,6 @@ type Result<T> = std::result::Result<T, failure::Error>;\n #[derive(Debug)]\n pub struct BatchDatabase {\n     runtime: salsa::Runtime<BatchDatabase>,\n-    interner: Arc<HirInterner>,\n }\n \n impl salsa::Database for BatchDatabase {\n@@ -29,12 +28,6 @@ impl salsa::Database for BatchDatabase {\n     }\n }\n \n-impl AsRef<HirInterner> for BatchDatabase {\n-    fn as_ref(&self) -> &HirInterner {\n-        &self.interner\n-    }\n-}\n-\n fn vfs_file_to_id(f: ra_vfs::VfsFile) -> FileId {\n     FileId(f.0.into())\n }\n@@ -44,8 +37,7 @@ fn vfs_root_to_id(r: ra_vfs::VfsRoot) -> SourceRootId {\n \n impl BatchDatabase {\n     pub fn load(crate_graph: CrateGraph, vfs: &mut Vfs) -> BatchDatabase {\n-        let mut db =\n-            BatchDatabase { runtime: salsa::Runtime::default(), interner: Default::default() };\n+        let mut db = BatchDatabase { runtime: salsa::Runtime::default() };\n         db.set_crate_graph(Arc::new(crate_graph));\n \n         // wait until Vfs has loaded all roots"}, {"sha": "1cd400752351739d4bba0d0818f4361a64ad1c90", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b863272899a1bae63c7d9411d0ebff74652bae8e/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b863272899a1bae63c7d9411d0ebff74652bae8e/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=b863272899a1bae63c7d9411d0ebff74652bae8e", "patch": "@@ -1,11 +1,8 @@\n //! ra_db defines basic database traits. The concrete DB is defined by ra_ide_api.\n mod cancellation;\n mod input;\n-mod loc2id;\n \n-use std::{\n-    panic, sync::Arc,\n-};\n+use std::{panic, sync::Arc};\n \n use ra_syntax::{TextUnit, TextRange, SourceFile, TreeArc};\n use relative_path::RelativePathBuf;\n@@ -16,7 +13,6 @@ pub use crate::{\n     input::{\n         FileId, CrateId, SourceRoot, SourceRootId, CrateGraph, Dependency, Edition,\n     },\n-    loc2id::LocationInterner,\n };\n \n pub trait CheckCanceled: panic::RefUnwindSafe {"}, {"sha": "eae64a4ebc664a8398b4cb445d0e9b5475bf10b4", "filename": "crates/ra_db/src/loc2id.rs", "status": "removed", "additions": 0, "deletions": 103, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/cc284dad30de4990516eeccf60f24e613fd78a2a/crates%2Fra_db%2Fsrc%2Floc2id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc284dad30de4990516eeccf60f24e613fd78a2a/crates%2Fra_db%2Fsrc%2Floc2id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Floc2id.rs?ref=cc284dad30de4990516eeccf60f24e613fd78a2a", "patch": "@@ -1,103 +0,0 @@\n-use std::{panic, hash::Hash};\n-\n-use parking_lot::Mutex;\n-use rustc_hash::FxHashMap;\n-use ra_arena::{Arena, ArenaId};\n-\n-/// There are two principle ways to refer to things:\n-///   - by their location (module in foo/bar/baz.rs at line 42)\n-///   - by their numeric id (module `ModuleId(42)`)\n-///\n-/// The first one is more powerful (you can actually find the thing in question\n-/// by id), but the second one is so much more compact.\n-///\n-/// `Loc2IdMap` allows us to have a cake an eat it as well: by maintaining a\n-/// bidirectional mapping between positional and numeric ids, we can use compact\n-/// representation which still allows us to get the actual item.\n-#[derive(Debug)]\n-struct Loc2IdMap<LOC, ID>\n-where\n-    ID: ArenaId + Clone,\n-    LOC: Clone + Eq + Hash,\n-{\n-    id2loc: Arena<ID, LOC>,\n-    loc2id: FxHashMap<LOC, ID>,\n-}\n-\n-impl<LOC, ID> Default for Loc2IdMap<LOC, ID>\n-where\n-    ID: ArenaId + Clone,\n-    LOC: Clone + Eq + Hash,\n-{\n-    fn default() -> Self {\n-        Loc2IdMap { id2loc: Arena::default(), loc2id: FxHashMap::default() }\n-    }\n-}\n-\n-impl<LOC, ID> Loc2IdMap<LOC, ID>\n-where\n-    ID: ArenaId + Clone,\n-    LOC: Clone + Eq + Hash,\n-{\n-    pub fn len(&self) -> usize {\n-        self.id2loc.len()\n-    }\n-\n-    pub fn loc2id(&mut self, loc: &LOC) -> ID {\n-        match self.loc2id.get(loc) {\n-            Some(id) => return id.clone(),\n-            None => (),\n-        }\n-        let id = self.id2loc.alloc(loc.clone());\n-        self.loc2id.insert(loc.clone(), id.clone());\n-        id\n-    }\n-\n-    pub fn id2loc(&self, id: ID) -> LOC {\n-        self.id2loc[id].clone()\n-    }\n-}\n-\n-#[derive(Debug)]\n-pub struct LocationInterner<LOC, ID>\n-where\n-    ID: ArenaId + Clone,\n-    LOC: Clone + Eq + Hash,\n-{\n-    map: Mutex<Loc2IdMap<LOC, ID>>,\n-}\n-\n-impl<LOC, ID> panic::RefUnwindSafe for LocationInterner<LOC, ID>\n-where\n-    ID: ArenaId + Clone,\n-    LOC: Clone + Eq + Hash,\n-    ID: panic::RefUnwindSafe,\n-    LOC: panic::RefUnwindSafe,\n-{\n-}\n-\n-impl<LOC, ID> Default for LocationInterner<LOC, ID>\n-where\n-    ID: ArenaId + Clone,\n-    LOC: Clone + Eq + Hash,\n-{\n-    fn default() -> Self {\n-        LocationInterner { map: Default::default() }\n-    }\n-}\n-\n-impl<LOC, ID> LocationInterner<LOC, ID>\n-where\n-    ID: ArenaId + Clone,\n-    LOC: Clone + Eq + Hash,\n-{\n-    pub fn len(&self) -> usize {\n-        self.map.lock().len()\n-    }\n-    pub fn loc2id(&self, loc: &LOC) -> ID {\n-        self.map.lock().loc2id(loc)\n-    }\n-    pub fn id2loc(&self, id: ID) -> LOC {\n-        self.map.lock().id2loc(id)\n-    }\n-}"}, {"sha": "e23e2bb2bb9945132ecdecbe3a22c840a09c251e", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b863272899a1bae63c7d9411d0ebff74652bae8e/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b863272899a1bae63c7d9411d0ebff74652bae8e/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=b863272899a1bae63c7d9411d0ebff74652bae8e", "patch": "@@ -1,10 +1,10 @@\n use std::sync::Arc;\n \n-use ra_syntax::{SyntaxNode, TreeArc, SourceFile};\n+use ra_syntax::{SyntaxNode, TreeArc, SourceFile, ast};\n use ra_db::{SourceDatabase, salsa};\n \n use crate::{\n-    HirFileId, MacroDefId, AstIdMap, ErasedFileAstId, Crate, Module, HirInterner,\n+    HirFileId, MacroDefId, AstIdMap, ErasedFileAstId, Crate, Module, MacroCallLoc,\n     Function, FnSignature, ExprScopes, TypeAlias,\n     Struct, Enum, StructField,\n     Const, ConstSignature, Static,\n@@ -15,11 +15,29 @@ use crate::{\n     impl_block::{ModuleImplBlocks, ImplSourceMap},\n     generics::{GenericParams, GenericDef},\n     type_ref::TypeRef,\n-    traits::TraitData, Trait, ty::TraitRef\n+    traits::TraitData, Trait, ty::TraitRef,\n+    ids\n };\n \n #[salsa::query_group(DefDatabaseStorage)]\n-pub trait DefDatabase: SourceDatabase + AsRef<HirInterner> {\n+pub trait DefDatabase: SourceDatabase {\n+    #[salsa::interned]\n+    fn intern_macro(&self, macro_call: MacroCallLoc) -> ids::MacroCallId;\n+    #[salsa::interned]\n+    fn intern_function(&self, loc: ids::ItemLoc<ast::FnDef>) -> ids::FunctionId;\n+    #[salsa::interned]\n+    fn intern_struct(&self, loc: ids::ItemLoc<ast::StructDef>) -> ids::StructId;\n+    #[salsa::interned]\n+    fn intern_enum(&self, loc: ids::ItemLoc<ast::EnumDef>) -> ids::EnumId;\n+    #[salsa::interned]\n+    fn intern_const(&self, loc: ids::ItemLoc<ast::ConstDef>) -> ids::ConstId;\n+    #[salsa::interned]\n+    fn intern_static(&self, loc: ids::ItemLoc<ast::StaticDef>) -> ids::StaticId;\n+    #[salsa::interned]\n+    fn intern_trait(&self, loc: ids::ItemLoc<ast::TraitDef>) -> ids::TraitId;\n+    #[salsa::interned]\n+    fn intern_type_alias(&self, loc: ids::ItemLoc<ast::TypeAliasDef>) -> ids::TypeAliasId;\n+\n     #[salsa::invoke(crate::ids::macro_def_query)]\n     fn macro_def(&self, macro_id: MacroDefId) -> Option<Arc<mbe::MacroRules>>;\n "}, {"sha": "f1e6e0f02f379d0a19f7cd4536a13bb17be209c6", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b863272899a1bae63c7d9411d0ebff74652bae8e/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b863272899a1bae63c7d9411d0ebff74652bae8e/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=b863272899a1bae63c7d9411d0ebff74652bae8e", "patch": "@@ -294,9 +294,9 @@ pub struct ReferenceDescriptor {\n \n #[cfg(test)]\n mod tests {\n+    use ra_db::salsa::InternKey;\n     use ra_syntax::{SourceFile, algo::find_node_at_offset};\n     use test_utils::{extract_offset, assert_eq_text};\n-    use ra_arena::ArenaId;\n     use crate::Function;\n \n     use crate::expr::{ExprCollector};\n@@ -316,7 +316,8 @@ mod tests {\n         let file = SourceFile::parse(&code);\n         let marker: &ast::PathExpr = find_node_at_offset(file.syntax(), off).unwrap();\n         let fn_def: &ast::FnDef = find_node_at_offset(file.syntax(), off).unwrap();\n-        let irrelevant_function = Function { id: crate::ids::FunctionId::from_raw(0.into()) };\n+        let irrelevant_function =\n+            Function { id: crate::ids::FunctionId::from_intern_id(0u32.into()) };\n         let (body, source_map) = collect_fn_body_syntax(irrelevant_function, fn_def);\n         let scopes = ExprScopes::new(Arc::new(body));\n         let scopes =\n@@ -421,7 +422,8 @@ mod tests {\n         let fn_def: &ast::FnDef = find_node_at_offset(file.syntax(), off).unwrap();\n         let name_ref: &ast::NameRef = find_node_at_offset(file.syntax(), off).unwrap();\n \n-        let irrelevant_function = Function { id: crate::ids::FunctionId::from_raw(0.into()) };\n+        let irrelevant_function =\n+            Function { id: crate::ids::FunctionId::from_intern_id(0u32.into()) };\n         let (body, source_map) = collect_fn_body_syntax(irrelevant_function, fn_def);\n         let scopes = ExprScopes::new(Arc::new(body));\n         let scopes ="}, {"sha": "141c9072f01847ca56e213edf6f132cb111d78b5", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 77, "deletions": 68, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/b863272899a1bae63c7d9411d0ebff74652bae8e/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b863272899a1bae63c7d9411d0ebff74652bae8e/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=b863272899a1bae63c7d9411d0ebff74652bae8e", "patch": "@@ -3,40 +3,14 @@ use std::{\n     sync::Arc,\n };\n \n-use ra_db::{LocationInterner, FileId};\n+use ra_db::{FileId, salsa};\n use ra_syntax::{TreeArc, SourceFile, AstNode, ast};\n-use ra_arena::{RawId, ArenaId, impl_arena_id};\n use mbe::MacroRules;\n \n use crate::{\n     Module, DefDatabase, AstId, FileAstId,\n };\n \n-#[derive(Debug, Default)]\n-pub struct HirInterner {\n-    macros: LocationInterner<MacroCallLoc, MacroCallId>,\n-    fns: LocationInterner<ItemLoc<ast::FnDef>, FunctionId>,\n-    structs: LocationInterner<ItemLoc<ast::StructDef>, StructId>,\n-    enums: LocationInterner<ItemLoc<ast::EnumDef>, EnumId>,\n-    consts: LocationInterner<ItemLoc<ast::ConstDef>, ConstId>,\n-    statics: LocationInterner<ItemLoc<ast::StaticDef>, StaticId>,\n-    traits: LocationInterner<ItemLoc<ast::TraitDef>, TraitId>,\n-    types: LocationInterner<ItemLoc<ast::TypeAliasDef>, TypeAliasId>,\n-}\n-\n-impl HirInterner {\n-    pub fn len(&self) -> usize {\n-        self.macros.len()\n-            + self.fns.len()\n-            + self.structs.len()\n-            + self.enums.len()\n-            + self.consts.len()\n-            + self.statics.len()\n-            + self.traits.len()\n-            + self.types.len()\n-    }\n-}\n-\n /// hir makes heavy use of ids: integer (u32) handlers to various things. You\n /// can think of id as a pointer (but without a lifetime) or a file descriptor\n /// (but for hir objects).\n@@ -135,11 +109,24 @@ pub(crate) fn macro_def_query(db: &impl DefDatabase, id: MacroDefId) -> Option<A\n     Some(Arc::new(rules))\n }\n \n+macro_rules! impl_intern_key {\n+    ($name:ident) => {\n+        impl salsa::InternKey for $name {\n+            fn from_intern_id(v: salsa::InternId) -> Self {\n+                $name(v)\n+            }\n+            fn as_intern_id(&self) -> salsa::InternId {\n+                self.0\n+            }\n+        }\n+    };\n+}\n+\n /// `MacroCallId` identifies a particular macro invocation, like\n /// `println!(\"Hello, {}\", world)`.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct MacroCallId(RawId);\n-impl_arena_id!(MacroCallId);\n+pub struct MacroCallId(salsa::InternId);\n+impl_intern_key!(MacroCallId);\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MacroCallLoc {\n@@ -148,14 +135,14 @@ pub struct MacroCallLoc {\n }\n \n impl MacroCallId {\n-    pub(crate) fn loc(self, db: &impl AsRef<HirInterner>) -> MacroCallLoc {\n-        db.as_ref().macros.id2loc(self)\n+    pub(crate) fn loc(self, db: &impl DefDatabase) -> MacroCallLoc {\n+        db.lookup_intern_macro(self)\n     }\n }\n \n impl MacroCallLoc {\n-    pub(crate) fn id(&self, db: &impl AsRef<HirInterner>) -> MacroCallId {\n-        db.as_ref().macros.loc2id(&self)\n+    pub(crate) fn id(self, db: &impl DefDatabase) -> MacroCallId {\n+        db.intern_macro(self)\n     }\n }\n \n@@ -204,89 +191,111 @@ impl<'a, DB: DefDatabase> LocationCtx<&'a DB> {\n     }\n }\n \n-pub(crate) trait AstItemDef<N: AstNode>: ArenaId + Clone {\n-    fn interner(interner: &HirInterner) -> &LocationInterner<ItemLoc<N>, Self>;\n+pub(crate) trait AstItemDef<N: AstNode>: salsa::InternKey + Clone {\n+    fn intern(db: &impl DefDatabase, loc: ItemLoc<N>) -> Self;\n+    fn lookup_intern(self, db: &impl DefDatabase) -> ItemLoc<N>;\n+\n     fn from_ast(ctx: LocationCtx<&impl DefDatabase>, ast: &N) -> Self {\n         let items = ctx.db.ast_id_map(ctx.file_id);\n         let item_id = items.ast_id(ast);\n         Self::from_ast_id(ctx, item_id)\n     }\n     fn from_ast_id(ctx: LocationCtx<&impl DefDatabase>, ast_id: FileAstId<N>) -> Self {\n         let loc = ItemLoc { module: ctx.module, ast_id: ast_id.with_file_id(ctx.file_id) };\n-        Self::interner(ctx.db.as_ref()).loc2id(&loc)\n+        Self::intern(ctx.db, loc)\n     }\n     fn source(self, db: &impl DefDatabase) -> (HirFileId, TreeArc<N>) {\n-        let int = Self::interner(db.as_ref());\n-        let loc = int.id2loc(self);\n+        let loc = self.lookup_intern(db);\n         let ast = loc.ast_id.to_node(db);\n         (loc.ast_id.file_id(), ast)\n     }\n     fn module(self, db: &impl DefDatabase) -> Module {\n-        let int = Self::interner(db.as_ref());\n-        let loc = int.id2loc(self);\n+        let loc = self.lookup_intern(db);\n         loc.module\n     }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(crate) struct FunctionId(RawId);\n-impl_arena_id!(FunctionId);\n+pub struct FunctionId(salsa::InternId);\n+impl_intern_key!(FunctionId);\n+\n impl AstItemDef<ast::FnDef> for FunctionId {\n-    fn interner(interner: &HirInterner) -> &LocationInterner<ItemLoc<ast::FnDef>, Self> {\n-        &interner.fns\n+    fn intern(db: &impl DefDatabase, loc: ItemLoc<ast::FnDef>) -> Self {\n+        db.intern_function(loc)\n+    }\n+    fn lookup_intern(self, db: &impl DefDatabase) -> ItemLoc<ast::FnDef> {\n+        db.lookup_intern_function(self)\n     }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(crate) struct StructId(RawId);\n-impl_arena_id!(StructId);\n+pub struct StructId(salsa::InternId);\n+impl_intern_key!(StructId);\n impl AstItemDef<ast::StructDef> for StructId {\n-    fn interner(interner: &HirInterner) -> &LocationInterner<ItemLoc<ast::StructDef>, Self> {\n-        &interner.structs\n+    fn intern(db: &impl DefDatabase, loc: ItemLoc<ast::StructDef>) -> Self {\n+        db.intern_struct(loc)\n+    }\n+    fn lookup_intern(self, db: &impl DefDatabase) -> ItemLoc<ast::StructDef> {\n+        db.lookup_intern_struct(self)\n     }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(crate) struct EnumId(RawId);\n-impl_arena_id!(EnumId);\n+pub struct EnumId(salsa::InternId);\n+impl_intern_key!(EnumId);\n impl AstItemDef<ast::EnumDef> for EnumId {\n-    fn interner(interner: &HirInterner) -> &LocationInterner<ItemLoc<ast::EnumDef>, Self> {\n-        &interner.enums\n+    fn intern(db: &impl DefDatabase, loc: ItemLoc<ast::EnumDef>) -> Self {\n+        db.intern_enum(loc)\n+    }\n+    fn lookup_intern(self, db: &impl DefDatabase) -> ItemLoc<ast::EnumDef> {\n+        db.lookup_intern_enum(self)\n     }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(crate) struct ConstId(RawId);\n-impl_arena_id!(ConstId);\n+pub struct ConstId(salsa::InternId);\n+impl_intern_key!(ConstId);\n impl AstItemDef<ast::ConstDef> for ConstId {\n-    fn interner(interner: &HirInterner) -> &LocationInterner<ItemLoc<ast::ConstDef>, Self> {\n-        &interner.consts\n+    fn intern(db: &impl DefDatabase, loc: ItemLoc<ast::ConstDef>) -> Self {\n+        db.intern_const(loc)\n+    }\n+    fn lookup_intern(self, db: &impl DefDatabase) -> ItemLoc<ast::ConstDef> {\n+        db.lookup_intern_const(self)\n     }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(crate) struct StaticId(RawId);\n-impl_arena_id!(StaticId);\n+pub struct StaticId(salsa::InternId);\n+impl_intern_key!(StaticId);\n impl AstItemDef<ast::StaticDef> for StaticId {\n-    fn interner(interner: &HirInterner) -> &LocationInterner<ItemLoc<ast::StaticDef>, Self> {\n-        &interner.statics\n+    fn intern(db: &impl DefDatabase, loc: ItemLoc<ast::StaticDef>) -> Self {\n+        db.intern_static(loc)\n+    }\n+    fn lookup_intern(self, db: &impl DefDatabase) -> ItemLoc<ast::StaticDef> {\n+        db.lookup_intern_static(self)\n     }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(crate) struct TraitId(RawId);\n-impl_arena_id!(TraitId);\n+pub struct TraitId(salsa::InternId);\n+impl_intern_key!(TraitId);\n impl AstItemDef<ast::TraitDef> for TraitId {\n-    fn interner(interner: &HirInterner) -> &LocationInterner<ItemLoc<ast::TraitDef>, Self> {\n-        &interner.traits\n+    fn intern(db: &impl DefDatabase, loc: ItemLoc<ast::TraitDef>) -> Self {\n+        db.intern_trait(loc)\n+    }\n+    fn lookup_intern(self, db: &impl DefDatabase) -> ItemLoc<ast::TraitDef> {\n+        db.lookup_intern_trait(self)\n     }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(crate) struct TypeAliasId(RawId);\n-impl_arena_id!(TypeAliasId);\n+pub struct TypeAliasId(salsa::InternId);\n+impl_intern_key!(TypeAliasId);\n impl AstItemDef<ast::TypeAliasDef> for TypeAliasId {\n-    fn interner(interner: &HirInterner) -> &LocationInterner<ItemLoc<ast::TypeAliasDef>, Self> {\n-        &interner.types\n+    fn intern(db: &impl DefDatabase, loc: ItemLoc<ast::TypeAliasDef>) -> Self {\n+        db.intern_type_alias(loc)\n+    }\n+    fn lookup_intern(self, db: &impl DefDatabase) -> ItemLoc<ast::TypeAliasDef> {\n+        db.lookup_intern_type_alias(self)\n     }\n }"}, {"sha": "4d337d2e3352500cdce378e4a5581d5e0a28b477", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b863272899a1bae63c7d9411d0ebff74652bae8e/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b863272899a1bae63c7d9411d0ebff74652bae8e/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=b863272899a1bae63c7d9411d0ebff74652bae8e", "patch": "@@ -55,7 +55,7 @@ pub use self::{\n     path::{Path, PathKind},\n     name::Name,\n     source_id::{AstIdMap, ErasedFileAstId},\n-    ids::{HirFileId, MacroDefId, MacroCallId, MacroCallLoc, HirInterner},\n+    ids::{HirFileId, MacroDefId, MacroCallId, MacroCallLoc},\n     nameres::{PerNs, Namespace, ImportId, ImportSource},\n     ty::{Ty, ApplicationTy, TypeCtor, Substs, display::HirDisplay},\n     impl_block::{ImplBlock, ImplItem},"}, {"sha": "fa5882deabbc83cd725716e0f5b4660e58b3b644", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b863272899a1bae63c7d9411d0ebff74652bae8e/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b863272899a1bae63c7d9411d0ebff74652bae8e/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=b863272899a1bae63c7d9411d0ebff74652bae8e", "patch": "@@ -9,7 +9,7 @@ use relative_path::RelativePathBuf;\n use test_utils::{parse_fixture, CURSOR_MARKER, extract_offset};\n use rustc_hash::FxHashMap;\n \n-use crate::{db, HirInterner, diagnostics::DiagnosticSink};\n+use crate::{db, diagnostics::DiagnosticSink};\n \n pub const WORKSPACE: SourceRootId = SourceRootId(0);\n \n@@ -18,7 +18,6 @@ pub const WORKSPACE: SourceRootId = SourceRootId(0);\n pub struct MockDatabase {\n     events: Mutex<Option<Vec<salsa::Event<MockDatabase>>>>,\n     runtime: salsa::Runtime<MockDatabase>,\n-    interner: Arc<HirInterner>,\n     files: FxHashMap<String, FileId>,\n }\n \n@@ -195,7 +194,6 @@ impl Default for MockDatabase {\n         let mut db = MockDatabase {\n             events: Default::default(),\n             runtime: salsa::Runtime::default(),\n-            interner: Default::default(),\n             files: FxHashMap::default(),\n         };\n         db.set_crate_graph(Default::default());\n@@ -208,19 +206,12 @@ impl salsa::ParallelDatabase for MockDatabase {\n         salsa::Snapshot::new(MockDatabase {\n             events: Default::default(),\n             runtime: self.runtime.snapshot(self),\n-            interner: Arc::clone(&self.interner),\n             // only the root database can be used to get file_id by path.\n             files: FxHashMap::default(),\n         })\n     }\n }\n \n-impl AsRef<HirInterner> for MockDatabase {\n-    fn as_ref(&self) -> &HirInterner {\n-        &self.interner\n-    }\n-}\n-\n impl MockDatabase {\n     pub fn log(&self, f: impl FnOnce()) -> Vec<salsa::Event<MockDatabase>> {\n         *self.events.lock() = Some(Vec::new());"}, {"sha": "33d3903bbeef521a5e7c6df8d15978db0751be29", "filename": "crates/ra_ide_api/src/db.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b863272899a1bae63c7d9411d0ebff74652bae8e/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b863272899a1bae63c7d9411d0ebff74652bae8e/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdb.rs?ref=b863272899a1bae63c7d9411d0ebff74652bae8e", "patch": "@@ -20,7 +20,6 @@ use crate::{LineIndex, symbol_index::{self, SymbolsDatabase}};\n #[derive(Debug)]\n pub(crate) struct RootDatabase {\n     runtime: salsa::Runtime<RootDatabase>,\n-    interner: Arc<hir::HirInterner>,\n     pub(crate) last_gc: time::Instant,\n     pub(crate) last_gc_check: time::Instant,\n }\n@@ -38,7 +37,6 @@ impl Default for RootDatabase {\n     fn default() -> RootDatabase {\n         let mut db = RootDatabase {\n             runtime: salsa::Runtime::default(),\n-            interner: Default::default(),\n             last_gc: time::Instant::now(),\n             last_gc_check: time::Instant::now(),\n         };\n@@ -53,19 +51,12 @@ impl salsa::ParallelDatabase for RootDatabase {\n     fn snapshot(&self) -> salsa::Snapshot<RootDatabase> {\n         salsa::Snapshot::new(RootDatabase {\n             runtime: self.runtime.snapshot(self),\n-            interner: Arc::clone(&self.interner),\n             last_gc: self.last_gc.clone(),\n             last_gc_check: self.last_gc_check.clone(),\n         })\n     }\n }\n \n-impl AsRef<hir::HirInterner> for RootDatabase {\n-    fn as_ref(&self) -> &hir::HirInterner {\n-        &self.interner\n-    }\n-}\n-\n #[salsa::query_group(LineIndexDatabaseStorage)]\n pub(crate) trait LineIndexDatabase: ra_db::SourceDatabase + CheckCanceled {\n     fn line_index(&self, file_id: FileId) -> Arc<LineIndex>;"}, {"sha": "d99a4e750277d2d3a7486d969b77567591932ee5", "filename": "crates/ra_ide_api/src/status.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b863272899a1bae63c7d9411d0ebff74652bae8e/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b863272899a1bae63c7d9411d0ebff74652bae8e/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs?ref=b863272899a1bae63c7d9411d0ebff74652bae8e", "patch": "@@ -23,16 +23,11 @@ pub(crate) fn status(db: &RootDatabase) -> String {\n     let files_stats = db.query(FileTextQuery).entries::<FilesStats>();\n     let syntax_tree_stats = syntax_tree_stats(db);\n     let symbols_stats = db.query(LibrarySymbolsQuery).entries::<LibrarySymbolsStats>();\n-    let n_defs = {\n-        let interner: &hir::HirInterner = db.as_ref();\n-        interner.len()\n-    };\n     format!(\n-        \"{}\\n{}\\n{}\\n{} defs\\n\\nmemory:\\n{}\\ngc {:?} seconds ago\",\n+        \"{}\\n{}\\n{}\\n\\n\\nmemory:\\n{}\\ngc {:?} seconds ago\",\n         files_stats,\n         symbols_stats,\n         syntax_tree_stats,\n-        n_defs,\n         MemoryStats::current(),\n         db.last_gc.elapsed().as_secs(),\n     )"}]}