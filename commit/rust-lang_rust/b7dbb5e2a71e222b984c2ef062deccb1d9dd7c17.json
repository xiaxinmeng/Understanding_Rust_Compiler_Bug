{"sha": "b7dbb5e2a71e222b984c2ef062deccb1d9dd7c17", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZGJiNWUyYTcxZTIyMmI5ODRjMmVmMDYyZGVjY2IxZDlkZDdjMTc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-17T09:05:30Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-17T09:05:40Z"}, "message": "also consider boxes like unique references", "tree": {"sha": "bbeef909899cb456ad821909c3d78bd2ffb770b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbeef909899cb456ad821909c3d78bd2ffb770b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7dbb5e2a71e222b984c2ef062deccb1d9dd7c17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7dbb5e2a71e222b984c2ef062deccb1d9dd7c17", "html_url": "https://github.com/rust-lang/rust/commit/b7dbb5e2a71e222b984c2ef062deccb1d9dd7c17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7dbb5e2a71e222b984c2ef062deccb1d9dd7c17/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36b97cd76c478d56820e1e18647841e1d144d852", "url": "https://api.github.com/repos/rust-lang/rust/commits/36b97cd76c478d56820e1e18647841e1d144d852", "html_url": "https://github.com/rust-lang/rust/commit/36b97cd76c478d56820e1e18647841e1d144d852"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "3cf4365e35aa5d28603ba24f94a08e9ea4ea2c1c", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b7dbb5e2a71e222b984c2ef062deccb1d9dd7c17/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dbb5e2a71e222b984c2ef062deccb1d9dd7c17/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=b7dbb5e2a71e222b984c2ef062deccb1d9dd7c17", "patch": "@@ -661,14 +661,14 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for MiriEvalContext<'a, 'mir, 'tcx> {\n             // Primitives of reference type, that is the one thing we are interested in.\n             fn visit_primitive(&mut self, place: MPlaceTy<'tcx, Borrow>) -> EvalResult<'tcx>\n             {\n-                match place.layout.ty.sty {\n-                    ty::Ref(_, _, mutbl) => {\n-                        let val = self.ecx.read_immediate(place.into())?;\n-                        let val = self.ecx.retag_reference(val, mutbl)?;\n-                        self.ecx.write_immediate(val, place.into())?;\n-                    }\n-                    _ => {}, // nothing to do\n-                }\n+                let mutbl = match place.layout.ty.sty {\n+                    ty::Ref(_, _, mutbl) => mutbl,\n+                    ty::Adt(..) if place.layout.ty.is_box() => MutMutable,\n+                    _ => return Ok(()), // nothing to do\n+                };\n+                let val = self.ecx.read_immediate(place.into())?;\n+                let val = self.ecx.retag_reference(val, mutbl)?;\n+                self.ecx.write_immediate(val, place.into())?;\n                 Ok(())\n             }\n         }"}, {"sha": "73631173b932a5e5cd747757d0bc18a82c32b551", "filename": "tests/compile-fail-fullmir/stacked_borrows/box_exclusive_violation1.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b7dbb5e2a71e222b984c2ef062deccb1d9dd7c17/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fbox_exclusive_violation1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dbb5e2a71e222b984c2ef062deccb1d9dd7c17/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fbox_exclusive_violation1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fbox_exclusive_violation1.rs?ref=b7dbb5e2a71e222b984c2ef062deccb1d9dd7c17", "patch": "@@ -0,0 +1,29 @@\n+fn demo_mut_advanced_unique(mut our: Box<i32>) -> i32 {\n+  unknown_code_1(&*our);\n+\n+  // This \"re-asserts\" uniqueness of the reference: After writing, we know\n+  // our tag is at the top of the stack.\n+  *our = 5;\n+\n+  unknown_code_2();\n+\n+  // We know this will return 5\n+  *our //~ ERROR does not exist on the stack\n+}\n+\n+// Now comes the evil context\n+use std::ptr;\n+\n+static mut LEAK: *mut i32 = ptr::null_mut();\n+\n+fn unknown_code_1(x: &i32) { unsafe {\n+    LEAK = x as *const _ as *mut _;\n+} }\n+\n+fn unknown_code_2() { unsafe {\n+    *LEAK = 7;\n+} }\n+\n+fn main() {\n+    assert_eq!(demo_mut_advanced_unique(Box::new(0)), 5);\n+}"}]}