{"sha": "fc09eb553e6097c37bc442ceee0a0223bbce2513", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMDllYjU1M2U2MDk3YzM3YmM0NDJjZWVlMGEwMjIzYmJjZTI1MTM=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-10-06T15:50:11Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-10-06T15:50:11Z"}, "message": "Fix dogfood problem", "tree": {"sha": "0fdf45a3ccf726fa9e6cf1e45f4f499cbc817f7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fdf45a3ccf726fa9e6cf1e45f4f499cbc817f7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc09eb553e6097c37bc442ceee0a0223bbce2513", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJX9nK/AAoJEF5CfHlMukXoX6QP/1cExz1OlzBIAW6JUa9m03ua\nP0+eDqZcR9aewIhpvqju3ziMp9VPPP7Nm+wBy3EnyfIdl/lrQWJp+SyGRQzi7oai\n54jPrindD4JfBvicH6eDSS5z6d8OS1Niy5aD8gNK7SgBFazKaM7l/tZvLChnoKhZ\nFj2IohyfTDKyE0EWTHY0z13BT5r3hW01pOLcLmPCEyE7OpqgQFB4Z7BSAQz9fPgR\nCCa0J06I3Jd8tKXTSsMe1rUjlYnZFH34gLd/4paOq9PJ9JsGGoOQxSMBl7JEgg5T\ntVVPk5QcyKFTxJ5ONMqa65UDijMJHsibRfOpLQR41xRgKWcedRhTW3S68NfhzvHL\n09uMNy5M2k9gD2gXYphVJmivfP9vbd7eHBPq0aWj5+Q7WvhLxuJ+JltXBFNIl3eH\nce8PoMAfemOTupaFAUDdIzPpKZuyM+RaY/ysY0ypvwoAxQv3plDu8iEpO8OrXW2i\nAljNQG5s2Zitc9GuGkD6aeBdWBJABqe/2tSY4L8qEkWTqvGjXUDGVa4Dr4oMnY99\nRO3JdDlVX1wn3mvFdBoPIjpRwigQtUU/67ESrNjZWuJdmlFQeEaGlSPC8dzhv67K\nVqsIELz0eHad3qm+74OcCCFljUDUsuYnlGuPMGWVjGsG/H+KZRgN0u2RAL3spYkV\nf6Dz/lpeVRz57oaA/RYB\n=BYAs\n-----END PGP SIGNATURE-----", "payload": "tree 0fdf45a3ccf726fa9e6cf1e45f4f499cbc817f7e\nparent 0475eae1fa518dbd2f11f870b69507fe13dabe41\nauthor mcarton <cartonmartin+git@gmail.com> 1475769011 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1475769011 +0200\n\nFix dogfood problem\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc09eb553e6097c37bc442ceee0a0223bbce2513", "html_url": "https://github.com/rust-lang/rust/commit/fc09eb553e6097c37bc442ceee0a0223bbce2513", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc09eb553e6097c37bc442ceee0a0223bbce2513/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0475eae1fa518dbd2f11f870b69507fe13dabe41", "url": "https://api.github.com/repos/rust-lang/rust/commits/0475eae1fa518dbd2f11f870b69507fe13dabe41", "html_url": "https://github.com/rust-lang/rust/commit/0475eae1fa518dbd2f11f870b69507fe13dabe41"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "1d262622d1255ecee64838fcc6b011192589f2fa", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc09eb553e6097c37bc442ceee0a0223bbce2513/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc09eb553e6097c37bc442ceee0a0223bbce2513/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=fc09eb553e6097c37bc442ceee0a0223bbce2513", "patch": "@@ -255,7 +255,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box let_if_seq::LetIfSeq);\n     reg.register_late_lint_pass(box eval_order_dependence::EvalOrderDependence);\n     reg.register_late_lint_pass(box missing_doc::MissingDoc::new());\n-    reg.register_late_lint_pass(box ok_if_let::OkIfLetPass);\n+    reg.register_late_lint_pass(box ok_if_let::Pass);\n \n     reg.register_lint_group(\"clippy_restrictions\", vec![\n         arithmetic::FLOAT_ARITHMETIC,"}, {"sha": "8146d5c147788c2a5c40e9ce80444215a1ac3fde", "filename": "clippy_lints/src/ok_if_let.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc09eb553e6097c37bc442ceee0a0223bbce2513/clippy_lints%2Fsrc%2Fok_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc09eb553e6097c37bc442ceee0a0223bbce2513/clippy_lints%2Fsrc%2Fok_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fok_if_let.rs?ref=fc09eb553e6097c37bc442ceee0a0223bbce2513", "patch": "@@ -23,15 +23,15 @@ declare_lint! {\n }\n \n #[derive(Copy, Clone)]\n-pub struct OkIfLetPass;\n+pub struct Pass;\n \n-impl LintPass for OkIfLetPass {\n+impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(IF_LET_SOME_RESULT)\n     }\n }\n \n-impl LateLintPass for OkIfLetPass {\n+impl LateLintPass for Pass {\n     fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n         if_let_chain! {[ //begin checking variables\n             let ExprMatch(ref op, ref body, ref source) = expr.node, //test if expr is a match"}]}