{"sha": "89826a50fc59f271b8b52ae675e145029727aa35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ODI2YTUwZmM1OWYyNzFiOGI1MmFlNjc1ZTE0NTAyOTcyN2FhMzU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-10T14:42:29Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-10T14:42:29Z"}, "message": "don't special case path attr", "tree": {"sha": "edbce072fccea11cc7331f5b5dbdca40f6a4bbb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edbce072fccea11cc7331f5b5dbdca40f6a4bbb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89826a50fc59f271b8b52ae675e145029727aa35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89826a50fc59f271b8b52ae675e145029727aa35", "html_url": "https://github.com/rust-lang/rust/commit/89826a50fc59f271b8b52ae675e145029727aa35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89826a50fc59f271b8b52ae675e145029727aa35/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b36b8970ccefa7c98f827caebf6dda71ff3d99c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b36b8970ccefa7c98f827caebf6dda71ff3d99c4", "html_url": "https://github.com/rust-lang/rust/commit/b36b8970ccefa7c98f827caebf6dda71ff3d99c4"}], "stats": {"total": 65, "additions": 31, "deletions": 34}, "files": [{"sha": "a0a74ab8c3161485f8a5b757f269d1bf5a8d6c4d", "filename": "crates/ra_hir/src/attr.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/89826a50fc59f271b8b52ae675e145029727aa35/crates%2Fra_hir%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89826a50fc59f271b8b52ae675e145029727aa35/crates%2Fra_hir%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fattr.rs?ref=89826a50fc59f271b8b52ae675e145029727aa35", "patch": "@@ -64,13 +64,22 @@ impl Attr {\n     }\n \n     pub(crate) fn as_cfg(&self) -> Option<&Subtree> {\n-        if self.is_simple_atom(\"cfg\") {\n-            match &self.input {\n-                Some(AttrInput::TokenTree(subtree)) => Some(subtree),\n-                _ => None,\n-            }\n-        } else {\n-            None\n+        if !self.is_simple_atom(\"cfg\") {\n+            return None;\n+        }\n+        match &self.input {\n+            Some(AttrInput::TokenTree(subtree)) => Some(subtree),\n+            _ => None,\n+        }\n+    }\n+\n+    pub(crate) fn as_path(&self) -> Option<&SmolStr> {\n+        if !self.is_simple_atom(\"path\") {\n+            return None;\n+        }\n+        match &self.input {\n+            Some(AttrInput::Literal(it)) => Some(it),\n+            _ => None,\n         }\n     }\n "}, {"sha": "54514becc75ca9ef9c13c4972407ddfdf4b1be33", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/89826a50fc59f271b8b52ae675e145029727aa35/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89826a50fc59f271b8b52ae675e145029727aa35/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=89826a50fc59f271b8b52ae675e145029727aa35", "patch": "@@ -2,7 +2,7 @@\n \n use ra_cfg::CfgOptions;\n use ra_db::FileId;\n-use ra_syntax::ast;\n+use ra_syntax::{ast, SmolStr};\n use rustc_hash::FxHashMap;\n use test_utils::tested_by;\n \n@@ -546,7 +546,9 @@ where\n         for item in items {\n             if self.is_cfg_enabled(item.attrs()) {\n                 match item.kind {\n-                    raw::RawItemKind::Module(m) => self.collect_module(&self.raw_items[m]),\n+                    raw::RawItemKind::Module(m) => {\n+                        self.collect_module(&self.raw_items[m], item.attrs())\n+                    }\n                     raw::RawItemKind::Import(import_id) => self\n                         .def_collector\n                         .unresolved_imports\n@@ -558,10 +560,11 @@ where\n         }\n     }\n \n-    fn collect_module(&mut self, module: &raw::ModuleData) {\n+    fn collect_module(&mut self, module: &raw::ModuleData, attrs: &[Attr]) {\n+        let path_attr = self.path_attr(attrs);\n         match module {\n             // inline module, just recurse\n-            raw::ModuleData::Definition { name, items, ast_id, attr_path, is_macro_use } => {\n+            raw::ModuleData::Definition { name, items, ast_id, is_macro_use } => {\n                 let module_id =\n                     self.push_child_module(name.clone(), ast_id.with_file_id(self.file_id), None);\n \n@@ -570,21 +573,21 @@ where\n                     module_id,\n                     file_id: self.file_id,\n                     raw_items: self.raw_items,\n-                    mod_dir: self.mod_dir.descend_into_definition(name, attr_path.as_ref()),\n+                    mod_dir: self.mod_dir.descend_into_definition(name, path_attr),\n                 }\n                 .collect(&*items);\n                 if *is_macro_use {\n                     self.import_all_legacy_macros(module_id);\n                 }\n             }\n             // out of line module, resolve, parse and recurse\n-            raw::ModuleData::Declaration { name, ast_id, attr_path, is_macro_use } => {\n+            raw::ModuleData::Declaration { name, ast_id, is_macro_use } => {\n                 let ast_id = ast_id.with_file_id(self.file_id);\n                 match self.mod_dir.resolve_submodule(\n                     self.def_collector.db,\n                     self.file_id,\n                     name,\n-                    attr_path.as_ref(),\n+                    path_attr,\n                 ) {\n                     Ok((file_id, mod_dir)) => {\n                         let module_id = self.push_child_module(name.clone(), ast_id, Some(file_id));\n@@ -713,6 +716,10 @@ where\n     fn is_cfg_enabled(&self, attrs: &[Attr]) -> bool {\n         attrs.iter().all(|attr| attr.is_cfg_enabled(&self.def_collector.cfg_options) != Some(false))\n     }\n+\n+    fn path_attr<'a>(&self, attrs: &'a [Attr]) -> Option<&'a SmolStr> {\n+        attrs.iter().find_map(|attr| attr.as_path())\n+    }\n }\n \n fn is_macro_rules(path: &Path) -> bool {"}, {"sha": "469fd8ea76efe2b39da555c9c3b528814c44b927", "filename": "crates/ra_hir/src/nameres/raw.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/89826a50fc59f271b8b52ae675e145029727aa35/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89826a50fc59f271b8b52ae675e145029727aa35/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs?ref=89826a50fc59f271b8b52ae675e145029727aa35", "patch": "@@ -5,7 +5,7 @@ use std::{ops::Index, sync::Arc};\n use ra_arena::{impl_arena_id, map::ArenaMap, Arena, RawId};\n use ra_syntax::{\n     ast::{self, AttrsOwner, NameOwner},\n-    AstNode, AstPtr, SmolStr, SourceFile,\n+    AstNode, AstPtr, SourceFile,\n };\n use test_utils::tested_by;\n \n@@ -152,14 +152,12 @@ pub(super) enum ModuleData {\n     Declaration {\n         name: Name,\n         ast_id: FileAstId<ast::Module>,\n-        attr_path: Option<SmolStr>,\n         is_macro_use: bool,\n     },\n     Definition {\n         name: Name,\n         ast_id: FileAstId<ast::Module>,\n         items: Vec<RawItem>,\n-        attr_path: Option<SmolStr>,\n         is_macro_use: bool,\n     },\n }\n@@ -295,24 +293,20 @@ impl<DB: AstDatabase> RawItemsCollector<&DB> {\n         // FIXME: cfg_attr\n         let is_macro_use = module.has_atom_attr(\"macro_use\");\n         if module.has_semi() {\n-            let attr_path = extract_mod_path_attribute(&module);\n             let item = self.raw_items.modules.alloc(ModuleData::Declaration {\n                 name,\n                 ast_id,\n-                attr_path,\n                 is_macro_use,\n             });\n             self.push_item(current_module, attrs, RawItemKind::Module(item));\n             return;\n         }\n \n         if let Some(item_list) = module.item_list() {\n-            let attr_path = extract_mod_path_attribute(&module);\n             let item = self.raw_items.modules.alloc(ModuleData::Definition {\n                 name,\n                 ast_id,\n                 items: Vec::new(),\n-                attr_path,\n                 is_macro_use,\n             });\n             self.process_module(Some(item), item_list);\n@@ -423,16 +417,3 @@ impl<DB: AstDatabase> RawItemsCollector<&DB> {\n         Attr::from_attrs_owner(self.file_id, item, self.db)\n     }\n }\n-\n-fn extract_mod_path_attribute(module: &ast::Module) -> Option<SmolStr> {\n-    module.attrs().into_iter().find_map(|attr| {\n-        attr.as_simple_key_value().and_then(|(name, value)| {\n-            let is_path = name == \"path\";\n-            if is_path {\n-                Some(value)\n-            } else {\n-                None\n-            }\n-        })\n-    })\n-}"}]}