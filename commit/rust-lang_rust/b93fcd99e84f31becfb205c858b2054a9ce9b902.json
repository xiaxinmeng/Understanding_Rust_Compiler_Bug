{"sha": "b93fcd99e84f31becfb205c858b2054a9ce9b902", "node_id": "C_kwDOAAsO6NoAKGI5M2ZjZDk5ZTg0ZjMxYmVjZmIyMDVjODU4YjIwNTRhOWNlOWI5MDI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-23T21:58:20Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-23T22:04:06Z"}, "message": "avoid spurious 'Preparing a sysroot for Miri...' in 'cargo miri setup --print-sysroot'\n\nalso clean up sysroot building printing logic a bit", "tree": {"sha": "f5f5be9db15897bc24649accaaeb239e5ac493e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5f5be9db15897bc24649accaaeb239e5ac493e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b93fcd99e84f31becfb205c858b2054a9ce9b902", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b93fcd99e84f31becfb205c858b2054a9ce9b902", "html_url": "https://github.com/rust-lang/rust/commit/b93fcd99e84f31becfb205c858b2054a9ce9b902", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b93fcd99e84f31becfb205c858b2054a9ce9b902/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e14df0537025b660adf23edeb069954a25a23611", "url": "https://api.github.com/repos/rust-lang/rust/commits/e14df0537025b660adf23edeb069954a25a23611", "html_url": "https://github.com/rust-lang/rust/commit/e14df0537025b660adf23edeb069954a25a23611"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "1b14d4da9cc476a0bbbfa29d6b6822bb17afabf0", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b93fcd99e84f31becfb205c858b2054a9ce9b902/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b93fcd99e84f31becfb205c858b2054a9ce9b902/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=b93fcd99e84f31becfb205c858b2054a9ce9b902", "patch": "@@ -35,6 +35,11 @@ The cargo options are exactly the same as for `cargo run` and `cargo test`, resp\n Examples:\n     cargo miri run\n     cargo miri test -- test-suite-filter\n+\n+    cargo miri setup --print sysroot\n+        This will print the path to the generated sysroot (and nothing else) on stdout.\n+        stderr will still contain progress information about how the build is doing.\n+\n \"#;\n \n #[derive(Clone, Debug)]\n@@ -361,17 +366,15 @@ fn write_to_file(filename: &Path, content: &str) {\n /// done all this already.\n fn setup(subcommand: &MiriCommand) {\n     let only_setup = matches!(subcommand, MiriCommand::Setup);\n+    let ask_user = !only_setup;\n+    let print_sysroot = only_setup && has_arg_flag(\"--print-sysroot\"); // whether we just print the sysroot path\n     if std::env::var_os(\"MIRI_SYSROOT\").is_some() {\n         if only_setup {\n             println!(\"WARNING: MIRI_SYSROOT already set, not doing anything.\")\n         }\n         return;\n     }\n \n-    // Subcommands other than `setup` will do a setup if necessary, but\n-    // interactively confirm first.\n-    let ask_user = !only_setup;\n-\n     // First, we need xargo.\n     if xargo_version().map_or(true, |v| v < XARGO_MIN_VERSION) {\n         if std::env::var_os(\"XARGO_CHECK\").is_some() {\n@@ -507,8 +510,14 @@ path = \"lib.rs\"\n     command.env(\"RUSTFLAGS\", \"-Cdebug-assertions=off -Coverflow-checks=on\");\n     // Manage the output the user sees.\n     if only_setup {\n+        // We want to be explicit.\n         eprintln!(\"Preparing a sysroot for Miri...\");\n+        if print_sysroot {\n+            // Be extra sure there is no noise on stdout.\n+            command.stdout(process::Stdio::null());\n+        }\n     } else {\n+        // We want to be quiet, but still let the user know that something is happening.\n         eprint!(\"Preparing a sysroot for Miri... \");\n         command.stdout(process::Stdio::null());\n         command.stderr(process::Stdio::null());\n@@ -523,22 +532,21 @@ path = \"lib.rs\"\n             ))\n         }\n     }\n-    if !only_setup {\n-        eprintln!(\"done\");\n-    }\n \n     // That should be it! But we need to figure out where xargo built stuff.\n     // Unfortunately, it puts things into a different directory when the\n     // architecture matches the host.\n     let sysroot = if target == &host { dir.join(\"HOST\") } else { PathBuf::from(dir) };\n     std::env::set_var(\"MIRI_SYSROOT\", &sysroot); // pass the env var to the processes we spawn, which will turn it into \"--sysroot\" flags\n     // Figure out what to print.\n-    let print_sysroot = only_setup && has_arg_flag(\"--print-sysroot\"); // whether we just print the sysroot path\n+    if only_setup {\n+        eprintln!(\"A sysroot for Miri is now available in `{}`.\", sysroot.display());\n+    } else {\n+        eprintln!(\"done\");\n+    }\n     if print_sysroot {\n         // Print just the sysroot and nothing else to stdout; this way we do not need any escaping.\n         println!(\"{}\", sysroot.display());\n-    } else if only_setup {\n-        eprintln!(\"A sysroot for Miri is now available in `{}`.\", sysroot.display());\n     }\n }\n "}, {"sha": "8bef9d1291a90eb9da8b7514106487fbdd4cc31a", "filename": "miri", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b93fcd99e84f31becfb205c858b2054a9ce9b902/miri", "raw_url": "https://github.com/rust-lang/rust/raw/b93fcd99e84f31becfb205c858b2054a9ce9b902/miri", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri?ref=b93fcd99e84f31becfb205c858b2054a9ce9b902", "patch": "@@ -131,9 +131,6 @@ export RUSTFLAGS=\"-C link-args=-Wl,-rpath,$LIBDIR $RUSTFLAGS\"\n \n # Build a sysroot and set MIRI_SYSROOT to use it. Arguments are passed to `cargo miri setup`.\n build_sysroot() {\n-    # Build once, for the user to see.\n-    $CARGO run $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml -- miri setup \"$@\"\n-    # Call again, to just set env var.\n     export MIRI_SYSROOT=\"$($CARGO run $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml -q -- miri setup --print-sysroot \"$@\")\"\n }\n "}]}