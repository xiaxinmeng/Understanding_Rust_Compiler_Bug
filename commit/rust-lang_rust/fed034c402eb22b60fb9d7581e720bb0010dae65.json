{"sha": "fed034c402eb22b60fb9d7581e720bb0010dae65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlZDAzNGM0MDJlYjIyYjYwZmI5ZDc1ODFlNzIwYmIwMDEwZGFlNjU=", "commit": {"author": {"name": "Bruno de Oliveira Abinader", "email": "bruno.d@partner.samsung.com", "date": "2014-02-25T03:34:26Z"}, "committer": {"name": "Bruno de Oliveira Abinader", "email": "bruno.d@partner.samsung.com", "date": "2014-02-27T12:35:47Z"}, "message": "Refactored list::head() to be based on List<T>", "tree": {"sha": "e93aa4b8dfac8c0712cdcc650bb68d3a01ef6747", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e93aa4b8dfac8c0712cdcc650bb68d3a01ef6747"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fed034c402eb22b60fb9d7581e720bb0010dae65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fed034c402eb22b60fb9d7581e720bb0010dae65", "html_url": "https://github.com/rust-lang/rust/commit/fed034c402eb22b60fb9d7581e720bb0010dae65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fed034c402eb22b60fb9d7581e720bb0010dae65/comments", "author": {"login": "brunoabinader", "id": 76133, "node_id": "MDQ6VXNlcjc2MTMz", "avatar_url": "https://avatars.githubusercontent.com/u/76133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brunoabinader", "html_url": "https://github.com/brunoabinader", "followers_url": "https://api.github.com/users/brunoabinader/followers", "following_url": "https://api.github.com/users/brunoabinader/following{/other_user}", "gists_url": "https://api.github.com/users/brunoabinader/gists{/gist_id}", "starred_url": "https://api.github.com/users/brunoabinader/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brunoabinader/subscriptions", "organizations_url": "https://api.github.com/users/brunoabinader/orgs", "repos_url": "https://api.github.com/users/brunoabinader/repos", "events_url": "https://api.github.com/users/brunoabinader/events{/privacy}", "received_events_url": "https://api.github.com/users/brunoabinader/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brunoabinader", "id": 76133, "node_id": "MDQ6VXNlcjc2MTMz", "avatar_url": "https://avatars.githubusercontent.com/u/76133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brunoabinader", "html_url": "https://github.com/brunoabinader", "followers_url": "https://api.github.com/users/brunoabinader/followers", "following_url": "https://api.github.com/users/brunoabinader/following{/other_user}", "gists_url": "https://api.github.com/users/brunoabinader/gists{/gist_id}", "starred_url": "https://api.github.com/users/brunoabinader/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brunoabinader/subscriptions", "organizations_url": "https://api.github.com/users/brunoabinader/orgs", "repos_url": "https://api.github.com/users/brunoabinader/repos", "events_url": "https://api.github.com/users/brunoabinader/events{/privacy}", "received_events_url": "https://api.github.com/users/brunoabinader/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45fd63a8b7b1fa0242d864f9592c05d06669b395", "url": "https://api.github.com/repos/rust-lang/rust/commits/45fd63a8b7b1fa0242d864f9592c05d06669b395", "html_url": "https://github.com/rust-lang/rust/commit/45fd63a8b7b1fa0242d864f9592c05d06669b395"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "a922c247b2f650791f7dde76b8d9b113813a7a69", "filename": "src/libcollections/list.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fed034c402eb22b60fb9d7581e720bb0010dae65/src%2Flibcollections%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed034c402eb22b60fb9d7581e720bb0010dae65/src%2Flibcollections%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flist.rs?ref=fed034c402eb22b60fb9d7581e720bb0010dae65", "patch": "@@ -53,6 +53,14 @@ impl<T> List<T> {\n             next: None\n         }\n     }\n+\n+    /// Returns the first element of a list\n+    pub fn head<'a>(&'a self) -> Option<&'a T> {\n+        match *self {\n+          Nil => None,\n+          Cons(ref head, _) => Some(head)\n+        }\n+    }\n }\n \n impl<T> Container for List<T> {\n@@ -78,15 +86,6 @@ pub fn tail<T>(list: @List<T>) -> @List<T> {\n     }\n }\n \n-/// Returns the first element of a list\n-pub fn head<T:Clone>(list: @List<T>) -> T {\n-    match *list {\n-      Cons(ref head, _) => (*head).clone(),\n-      // makes me sad\n-      _ => fail!(\"head invoked on empty list\")\n-    }\n-}\n-\n /// Appends one list to another\n pub fn append<T:Clone + 'static>(list: @List<T>, other: @List<T>) -> @List<T> {\n     match *list {\n@@ -118,7 +117,7 @@ fn push<T:Clone>(ll: &mut @list<T>, vv: T) {\n \n #[cfg(test)]\n mod tests {\n-    use list::{List, Nil, head, tail};\n+    use list::{List, Nil, tail};\n     use list;\n \n     #[test]\n@@ -145,14 +144,13 @@ mod tests {\n     #[test]\n     fn test_from_vec() {\n         let list = @List::from_vec([0, 1, 2]);\n+        assert_eq!(list.head().unwrap(), &0);\n \n-        assert_eq!(head(list), 0);\n-\n-        let tail_l = tail(list);\n-        assert_eq!(head(tail_l), 1);\n+        let mut tail = tail(list);\n+        assert_eq!(tail.head().unwrap(), &1);\n \n-        let tail_tail_l = tail(tail_l);\n-        assert_eq!(head(tail_tail_l), 2);\n+        tail = tail(tail);\n+        assert_eq!(tail.head().unwrap(), &2);\n     }\n \n     #[test]"}, {"sha": "66bb2e702bea3bbb71e5596541129eae425fd09f", "filename": "src/test/run-pass/non-boolean-pure-fns.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fed034c402eb22b60fb9d7581e720bb0010dae65/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed034c402eb22b60fb9d7581e720bb0010dae65/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs?ref=fed034c402eb22b60fb9d7581e720bb0010dae65", "patch": "@@ -14,19 +14,19 @@\n \n extern crate collections;\n \n-use collections::list::{List, Cons, Nil, head};\n+use collections::list::{List, Cons, Nil};\n \n-fn pure_length_go<T:Clone>(ls: @List<T>, acc: uint) -> uint {\n+fn pure_length_go<T>(ls: @List<T>, acc: uint) -> uint {\n     match *ls { Nil => { acc } Cons(_, tl) => { pure_length_go(tl, acc + 1u) } }\n }\n \n-fn pure_length<T:Clone>(ls: @List<T>) -> uint { pure_length_go(ls, 0u) }\n+fn pure_length<T>(ls: @List<T>) -> uint { pure_length_go(ls, 0u) }\n \n-fn nonempty_list<T:Clone>(ls: @List<T>) -> bool { pure_length(ls) > 0u }\n+fn nonempty_list<T>(ls: @List<T>) -> bool { pure_length(ls) > 0u }\n \n fn safe_head<T:Clone>(ls: @List<T>) -> T {\n     assert!(!ls.is_empty());\n-    return head(ls);\n+    return ls.head().unwrap().clone();\n }\n \n pub fn main() {"}]}