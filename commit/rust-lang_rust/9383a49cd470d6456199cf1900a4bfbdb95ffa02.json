{"sha": "9383a49cd470d6456199cf1900a4bfbdb95ffa02", "node_id": "C_kwDOAAsO6NoAKDkzODNhNDljZDQ3MGQ2NDU2MTk5Y2YxOTAwYTRiZmJkYjk1ZmZhMDI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-11T22:31:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-11T22:31:48Z"}, "message": "Rollup merge of #90081 - woppopo:const_write_bytes, r=oli-obk\n\nMake `intrinsics::write_bytes` const\n\nThis is required to constify `MaybeUninit::zeroed` and `(*mut T)::write_bytes`.\n\nTracking issue: #86302", "tree": {"sha": "0b89271c1e86b8714d8e405d1a2c87dbc2e764f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b89271c1e86b8714d8e405d1a2c87dbc2e764f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9383a49cd470d6456199cf1900a4bfbdb95ffa02", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhtSbUCRBK7hj4Ov3rIwAAVN4IAJgPy9WJLt3q2zVVe004Au1j\ngQdFeqKL/WXS0k0rKaLXb8kMOIkkVf3YEno4gOua+BpTDS/2a/ahWgEzg5Z4KxEE\nqMfAz0N4eg98hLQzj1w2YmZjWcHUZr9c5xJCDwtph/EJ8sYOw3Jij+JtymCJvhzf\nSur9jUO+amsVKVFdpdk8Rx+0fhIrUIIuzv8sWqVfV9ZWrsC5yt8gXdNxzaNBYQKq\npG+k0wddeRHYM42+7Z1siEJ/mtaUQICi0Lii/EDTPIvQBUIcQiixTlmH9LdH3MAs\nO0veDlgeh9XdvyqRIW7ZATOWv6Areb4yJE1hzhQY6URFOva3PwnbOqE/5FRx6uw=\n=fRB7\n-----END PGP SIGNATURE-----\n", "payload": "tree 0b89271c1e86b8714d8e405d1a2c87dbc2e764f9\nparent 928783de663bd855a96f14b2d38c1061603587c6\nparent 89b2e0c9d5a4cf87769d2bd51fe6753bbdf6448f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639261908 +0100\ncommitter GitHub <noreply@github.com> 1639261908 +0100\n\nRollup merge of #90081 - woppopo:const_write_bytes, r=oli-obk\n\nMake `intrinsics::write_bytes` const\n\nThis is required to constify `MaybeUninit::zeroed` and `(*mut T)::write_bytes`.\n\nTracking issue: #86302\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9383a49cd470d6456199cf1900a4bfbdb95ffa02", "html_url": "https://github.com/rust-lang/rust/commit/9383a49cd470d6456199cf1900a4bfbdb95ffa02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9383a49cd470d6456199cf1900a4bfbdb95ffa02/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "928783de663bd855a96f14b2d38c1061603587c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/928783de663bd855a96f14b2d38c1061603587c6", "html_url": "https://github.com/rust-lang/rust/commit/928783de663bd855a96f14b2d38c1061603587c6"}, {"sha": "89b2e0c9d5a4cf87769d2bd51fe6753bbdf6448f", "url": "https://api.github.com/repos/rust-lang/rust/commits/89b2e0c9d5a4cf87769d2bd51fe6753bbdf6448f", "html_url": "https://github.com/rust-lang/rust/commit/89b2e0c9d5a4cf87769d2bd51fe6753bbdf6448f"}], "stats": {"total": 74, "additions": 72, "deletions": 2}, "files": [{"sha": "18dde3bc34ef15f9d11f0322572a029aef9dd3d7", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9383a49cd470d6456199cf1900a4bfbdb95ffa02/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9383a49cd470d6456199cf1900a4bfbdb95ffa02/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=9383a49cd470d6456199cf1900a4bfbdb95ffa02", "patch": "@@ -322,6 +322,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             sym::copy => {\n                 self.copy_intrinsic(&args[0], &args[1], &args[2], /*nonoverlapping*/ false)?;\n             }\n+            sym::write_bytes => {\n+                self.write_bytes_intrinsic(&args[0], &args[1], &args[2])?;\n+            }\n             sym::offset => {\n                 let ptr = self.read_pointer(&args[0])?;\n                 let offset_count = self.read_scalar(&args[1])?.to_machine_isize(self)?;\n@@ -567,6 +570,27 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         self.memory.copy(src, align, dst, align, size, nonoverlapping)\n     }\n \n+    pub(crate) fn write_bytes_intrinsic(\n+        &mut self,\n+        dst: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+        byte: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+        count: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+    ) -> InterpResult<'tcx> {\n+        let layout = self.layout_of(dst.layout.ty.builtin_deref(true).unwrap().ty)?;\n+\n+        let dst = self.read_pointer(&dst)?;\n+        let byte = self.read_scalar(&byte)?.to_u8()?;\n+        let count = self.read_scalar(&count)?.to_machine_usize(self)?;\n+\n+        let len = layout\n+            .size\n+            .checked_mul(count, self)\n+            .ok_or_else(|| err_ub_format!(\"overflow computing total size of `write_bytes`\"))?;\n+\n+        let bytes = std::iter::repeat(byte).take(len.bytes_usize());\n+        self.memory.write_bytes(dst, bytes)\n+    }\n+\n     pub(crate) fn raw_eq_intrinsic(\n         &mut self,\n         lhs: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,"}, {"sha": "ad2f6f213dec8a390699707a24e10b83ec3fae8c", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9383a49cd470d6456199cf1900a4bfbdb95ffa02/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9383a49cd470d6456199cf1900a4bfbdb95ffa02/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=9383a49cd470d6456199cf1900a4bfbdb95ffa02", "patch": "@@ -2244,13 +2244,29 @@ pub const unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n /// assert_eq!(*v, 42);\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"86302\")]\n #[inline]\n-pub unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {\n+pub const unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {\n     extern \"rust-intrinsic\" {\n+        #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"86302\")]\n         fn write_bytes<T>(dst: *mut T, val: u8, count: usize);\n     }\n \n-    debug_assert!(is_aligned_and_not_null(dst), \"attempt to write to unaligned or null pointer\");\n+    #[cfg(debug_assertions)]\n+    fn runtime_check<T>(ptr: *mut T) {\n+        debug_assert!(\n+            is_aligned_and_not_null(ptr),\n+            \"attempt to write to unaligned or null pointer\"\n+        );\n+    }\n+    #[cfg(debug_assertions)]\n+    const fn compiletime_check<T>(_ptr: *mut T) {}\n+    #[cfg(debug_assertions)]\n+    // SAFETY: runtime debug-assertions are a best-effort basis; it's fine to\n+    // not do them during compile time\n+    unsafe {\n+        const_eval_select((dst,), compiletime_check, runtime_check);\n+    }\n \n     // SAFETY: the safety contract for `write_bytes` must be upheld by the caller.\n     unsafe { write_bytes(dst, val, count) }"}, {"sha": "84cef53b3584b091da23e53c58688c48fad3d201", "filename": "library/core/tests/intrinsics.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9383a49cd470d6456199cf1900a4bfbdb95ffa02/library%2Fcore%2Ftests%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9383a49cd470d6456199cf1900a4bfbdb95ffa02/library%2Fcore%2Ftests%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fintrinsics.rs?ref=9383a49cd470d6456199cf1900a4bfbdb95ffa02", "patch": "@@ -35,3 +35,33 @@ fn test_assume_can_be_in_const_contexts() {\n     let rs = unsafe { foo(42, 97) };\n     assert_eq!(rs, 0);\n }\n+\n+#[test]\n+#[cfg(not(bootstrap))]\n+const fn test_write_bytes_in_const_contexts() {\n+    use core::intrinsics::write_bytes;\n+\n+    const TEST: [u32; 3] = {\n+        let mut arr = [1u32, 2, 3];\n+        unsafe {\n+            write_bytes(arr.as_mut_ptr(), 0, 2);\n+        }\n+        arr\n+    };\n+\n+    assert!(TEST[0] == 0);\n+    assert!(TEST[1] == 0);\n+    assert!(TEST[2] == 3);\n+\n+    const TEST2: [u32; 3] = {\n+        let mut arr = [1u32, 2, 3];\n+        unsafe {\n+            write_bytes(arr.as_mut_ptr(), 1, 2);\n+        }\n+        arr\n+    };\n+\n+    assert!(TEST2[0] == 16843009);\n+    assert!(TEST2[1] == 16843009);\n+    assert!(TEST2[2] == 3);\n+}"}]}