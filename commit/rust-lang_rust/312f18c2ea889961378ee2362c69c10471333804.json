{"sha": "312f18c2ea889961378ee2362c69c10471333804", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMmYxOGMyZWE4ODk5NjEzNzhlZTIzNjJjNjljMTA0NzEzMzM4MDQ=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-08-01T08:13:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-01T08:13:01Z"}, "message": "Rollup merge of #52883 - estebank:nll-diag-mut, r=oli-obk\n\nInclude lifetime in mutability suggestion in NLL messages\n\nFix #52880.", "tree": {"sha": "5f170ab80602c1cb4e90a223a95f437c704d9bbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f170ab80602c1cb4e90a223a95f437c704d9bbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/312f18c2ea889961378ee2362c69c10471333804", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbYWuNCRBK7hj4Ov3rIwAAdHIIAGV2iywvsdP7Sj5FrVoylLSN\nC8izm/DktJVbCOUpQrgpJ6DSln5CCBenDYq2Z2yFAJ+yH47Td15DO+N/GYCwuwI9\nl/uGhj5z0RF/kkp8ZnVoK9SHkNCmb5B1ykvWMeYw/SHhRaCgmRhklh5Fl6lD6ci+\npsc9dVKcWj6wya9tcqGwbtgvMgn4EbWqZh7WowW/xLIZ/2pOGOR/20EoDKM7GUdM\ngtyqGVeQl5HvBsFDl7kSiuCPA3LdbgdX+0xudY6GO1Y9ApWCuNvSDadzMZO6By9C\nD/2KIpImlwp22QfT6N+osKRwgV7UEYe/4DftYAwb6R6QATCe83ThEQb4Agk0Bz8=\n=qA+v\n-----END PGP SIGNATURE-----\n", "payload": "tree 5f170ab80602c1cb4e90a223a95f437c704d9bbf\nparent 9443dd519dd58314a95e028c6bfdaf3455d2db5e\nparent c883edfbc6b669bea4264f5a79e2bee0e5766c38\nauthor Pietro Albini <pietro@pietroalbini.org> 1533111181 +0200\ncommitter GitHub <noreply@github.com> 1533111181 +0200\n\nRollup merge of #52883 - estebank:nll-diag-mut, r=oli-obk\n\nInclude lifetime in mutability suggestion in NLL messages\n\nFix #52880.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/312f18c2ea889961378ee2362c69c10471333804", "html_url": "https://github.com/rust-lang/rust/commit/312f18c2ea889961378ee2362c69c10471333804", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/312f18c2ea889961378ee2362c69c10471333804/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9443dd519dd58314a95e028c6bfdaf3455d2db5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9443dd519dd58314a95e028c6bfdaf3455d2db5e", "html_url": "https://github.com/rust-lang/rust/commit/9443dd519dd58314a95e028c6bfdaf3455d2db5e"}, {"sha": "c883edfbc6b669bea4264f5a79e2bee0e5766c38", "url": "https://api.github.com/repos/rust-lang/rust/commits/c883edfbc6b669bea4264f5a79e2bee0e5766c38", "html_url": "https://github.com/rust-lang/rust/commit/c883edfbc6b669bea4264f5a79e2bee0e5766c38"}], "stats": {"total": 74, "additions": 53, "deletions": 21}, "files": [{"sha": "cd2de3247cfbada221c2dda044ba974c17be04ab", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 43, "deletions": 11, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/312f18c2ea889961378ee2362c69c10471333804/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/312f18c2ea889961378ee2362c69c10471333804/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=312f18c2ea889961378ee2362c69c10471333804", "patch": "@@ -307,7 +307,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                 let local_decl = &self.mir.local_decls[*local];\n                 let suggestion = match local_decl.is_user_variable.as_ref().unwrap() {\n                     ClearCrossCrate::Set(mir::BindingForm::ImplicitSelf) => {\n-                        Some(suggest_ampmut_self(local_decl))\n+                        Some(suggest_ampmut_self(self.tcx, local_decl))\n                     }\n \n                     ClearCrossCrate::Set(mir::BindingForm::Var(mir::VarBindingForm {\n@@ -418,8 +418,22 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n     }\n }\n \n-fn suggest_ampmut_self<'cx, 'gcx, 'tcx>(local_decl: &mir::LocalDecl<'tcx>) -> (Span, String) {\n-    (local_decl.source_info.span, \"&mut self\".to_string())\n+fn suggest_ampmut_self<'cx, 'gcx, 'tcx>(\n+    tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n+    local_decl: &mir::LocalDecl<'tcx>,\n+) -> (Span, String) {\n+    let sp = local_decl.source_info.span;\n+    (sp, match tcx.sess.codemap().span_to_snippet(sp) {\n+        Ok(snippet) => {\n+            let lt_pos = snippet.find('\\'');\n+            if let Some(lt_pos) = lt_pos {\n+                format!(\"&{}mut self\", &snippet[lt_pos..snippet.len() - 4])\n+            } else {\n+                \"&mut self\".to_string()\n+            }\n+        }\n+        _ => \"&mut self\".to_string()\n+    })\n }\n \n // When we want to suggest a user change a local variable to be a `&mut`, there\n@@ -447,9 +461,15 @@ fn suggest_ampmut<'cx, 'gcx, 'tcx>(\n     let locations = mir.find_assignments(local);\n     if locations.len() > 0 {\n         let assignment_rhs_span = mir.source_info(locations[0]).span;\n-        let snippet = tcx.sess.codemap().span_to_snippet(assignment_rhs_span);\n-        if let Ok(src) = snippet {\n-            if src.starts_with('&') {\n+        if let Ok(src) = tcx.sess.codemap().span_to_snippet(assignment_rhs_span) {\n+            if let (true, Some(ws_pos)) = (\n+                src.starts_with(\"&'\"),\n+                src.find(|c: char| -> bool { c.is_whitespace() }),\n+            ) {\n+                let lt_name = &src[1..ws_pos];\n+                let ty = &src[ws_pos..];\n+                return (assignment_rhs_span, format!(\"&{} mut {}\", lt_name, ty));\n+            } else if src.starts_with('&') {\n                 let borrowed_expr = src[1..].to_string();\n                 return (assignment_rhs_span, format!(\"&mut {}\", borrowed_expr));\n             }\n@@ -466,13 +486,25 @@ fn suggest_ampmut<'cx, 'gcx, 'tcx>(\n         None => local_decl.source_info.span,\n     };\n \n+    if let Ok(src) = tcx.sess.codemap().span_to_snippet(highlight_span) {\n+        if let (true, Some(ws_pos)) = (\n+            src.starts_with(\"&'\"),\n+            src.find(|c: char| -> bool { c.is_whitespace() }),\n+        ) {\n+            let lt_name = &src[1..ws_pos];\n+            let ty = &src[ws_pos..];\n+            return (highlight_span, format!(\"&{} mut{}\", lt_name, ty));\n+        }\n+    }\n+\n     let ty_mut = local_decl.ty.builtin_deref(true).unwrap();\n     assert_eq!(ty_mut.mutbl, hir::MutImmutable);\n-    if local_decl.ty.is_region_ptr() {\n-        (highlight_span, format!(\"&mut {}\", ty_mut.ty))\n-    } else {\n-        (highlight_span, format!(\"*mut {}\", ty_mut.ty))\n-    }\n+    (highlight_span,\n+     if local_decl.ty.is_region_ptr() {\n+         format!(\"&mut {}\", ty_mut.ty)\n+     } else {\n+         format!(\"*mut {}\", ty_mut.ty)\n+     })\n }\n \n fn is_closure_or_generator(ty: ty::Ty) -> bool {"}, {"sha": "8c848b33241ca44ea8e19912e0e91ec53f6f6955", "filename": "src/test/ui/did_you_mean/issue-39544.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/312f18c2ea889961378ee2362c69c10471333804/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/312f18c2ea889961378ee2362c69c10471333804/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.nll.stderr?ref=312f18c2ea889961378ee2362c69c10471333804", "patch": "@@ -10,7 +10,7 @@ error[E0596]: cannot borrow `self.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:26:17\n    |\n LL |     fn foo<'z>(&'z self) {\n-   |                -------- help: consider changing this to be a mutable reference: `&mut self`\n+   |                -------- help: consider changing this to be a mutable reference: `&'z mut self`\n LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n@@ -35,7 +35,7 @@ error[E0596]: cannot borrow `self.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:35:17\n    |\n LL |     fn foo2<'a>(&'a self, other: &Z) {\n-   |                 -------- help: consider changing this to be a mutable reference: `&mut self`\n+   |                 -------- help: consider changing this to be a mutable reference: `&'a mut self`\n LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n@@ -52,7 +52,7 @@ error[E0596]: cannot borrow `self.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:40:17\n    |\n LL |     fn foo3<'a>(self: &'a Self, other: &Z) {\n-   |                       -------- help: consider changing this to be a mutable reference: `&mut Z`\n+   |                       -------- help: consider changing this to be a mutable reference: `&'a mut Self`\n LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n "}, {"sha": "4a693a3b05d4ea1f38770055e1a9857d8b71b25f", "filename": "src/test/ui/span/borrowck-borrow-overloaded-auto-deref-mut.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/312f18c2ea889961378ee2362c69c10471333804/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/312f18c2ea889961378ee2362c69c10471333804/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.nll.stderr?ref=312f18c2ea889961378ee2362c69c10471333804", "patch": "@@ -26,7 +26,7 @@ error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:102:5\n    |\n LL | fn assign_field2<'a>(x: &'a Own<Point>) {\n-   |                         -------------- help: consider changing this to be a mutable reference: `&mut Own<Point>`\n+   |                         -------------- help: consider changing this to be a mutable reference: `&'a mut Own<Point>`\n LL |     x.y = 3; //~ ERROR cannot borrow\n    |     ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n@@ -58,7 +58,7 @@ error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:143:6\n    |\n LL | fn assign_method2<'a>(x: &'a Own<Point>) {\n-   |                          -------------- help: consider changing this to be a mutable reference: `&mut Own<Point>`\n+   |                          -------------- help: consider changing this to be a mutable reference: `&'a mut Own<Point>`\n LL |     *x.y_mut() = 3; //~ ERROR cannot borrow\n    |      ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n "}, {"sha": "44a5062cb4d430f13ab1299268f80c8b6a5bc4f0", "filename": "src/test/ui/span/borrowck-borrow-overloaded-deref-mut.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/312f18c2ea889961378ee2362c69c10471333804/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/312f18c2ea889961378ee2362c69c10471333804/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.nll.stderr?ref=312f18c2ea889961378ee2362c69c10471333804", "patch": "@@ -10,7 +10,7 @@ error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:51:11\n    |\n LL | fn deref_extend_mut1<'a>(x: &'a Own<isize>) -> &'a mut isize {\n-   |                             -------------- help: consider changing this to be a mutable reference: `&mut Own<isize>`\n+   |                             -------------- help: consider changing this to be a mutable reference: `&'a mut Own<isize>`\n LL |     &mut **x //~ ERROR cannot borrow\n    |           ^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n@@ -26,7 +26,7 @@ error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:63:6\n    |\n LL | fn assign2<'a>(x: &'a Own<isize>) {\n-   |                   -------------- help: consider changing this to be a mutable reference: `&mut Own<isize>`\n+   |                   -------------- help: consider changing this to be a mutable reference: `&'a mut Own<isize>`\n LL |     **x = 3; //~ ERROR cannot borrow\n    |      ^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n "}, {"sha": "f42cf6500e2ead35b20b5605e5576c8f670f9106", "filename": "src/test/ui/span/mut-arg-hint.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/312f18c2ea889961378ee2362c69c10471333804/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/312f18c2ea889961378ee2362c69c10471333804/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.nll.stderr?ref=312f18c2ea889961378ee2362c69c10471333804", "patch": "@@ -10,7 +10,7 @@ error[E0596]: cannot borrow `*a` as mutable, as it is behind a `&` reference\n   --> $DIR/mut-arg-hint.rs:18:5\n    |\n LL | pub fn foo<'a>(mut a: &'a String) {\n-   |                       ---------- help: consider changing this to be a mutable reference: `&mut std::string::String`\n+   |                       ---------- help: consider changing this to be a mutable reference: `&'a mut String`\n LL |     a.push_str(\"foo\"); //~ ERROR cannot borrow immutable borrowed content\n    |     ^ `a` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n "}, {"sha": "56897baeb4eff8db1f3c8172531cb8a0f01510a7", "filename": "src/test/ui/trivial-bounds-inconsistent-copy-reborrow.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/312f18c2ea889961378ee2362c69c10471333804/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/312f18c2ea889961378ee2362c69c10471333804/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.nll.stderr?ref=312f18c2ea889961378ee2362c69c10471333804", "patch": "@@ -2,15 +2,15 @@ error[E0596]: cannot borrow `**t` as mutable, as it is behind a `&` reference\n   --> $DIR/trivial-bounds-inconsistent-copy-reborrow.rs:16:5\n    |\n LL | fn reborrow_mut<'a>(t: &'a &'a mut i32) -> &'a mut i32 where &'a mut i32: Copy {\n-   |                        --------------- help: consider changing this to be a mutable reference: `&mut &mut i32`\n+   |                        --------------- help: consider changing this to be a mutable reference: `&'a mut &'a mut i32`\n LL |     *t //~ ERROR\n    |     ^^ `t` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `**t` as mutable, as it is behind a `&` reference\n   --> $DIR/trivial-bounds-inconsistent-copy-reborrow.rs:20:6\n    |\n LL | fn copy_reborrow_mut<'a>(t: &'a &'a mut i32) -> &'a mut i32 where &'a mut i32: Copy {\n-   |                             --------------- help: consider changing this to be a mutable reference: `&mut &mut i32`\n+   |                             --------------- help: consider changing this to be a mutable reference: `&'a mut &'a mut i32`\n LL |     {*t} //~ ERROR\n    |      ^^ `t` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n "}]}