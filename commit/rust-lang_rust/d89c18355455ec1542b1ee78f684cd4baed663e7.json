{"sha": "d89c18355455ec1542b1ee78f684cd4baed663e7", "node_id": "C_kwDOAAsO6NoAKGQ4OWMxODM1NTQ1NWVjMTU0MmIxZWU3OGY2ODRjZDRiYWVkNjYzZTc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-11T20:39:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-11T20:39:05Z"}, "message": "Rollup merge of #99075 - danobi:dup_type_hint_sugg, r=petrochenkov\n\nFix duplicated type annotation suggestion\n\nBefore, there was more or less duplicated suggestions to add type hints.\nFix by clearing more generic suggestions when a more specific suggestion\nis possible.\n\nThis fixes #93506 .", "tree": {"sha": "749017c866db634adedd29b0d636c44c1402af64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/749017c866db634adedd29b0d636c44c1402af64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d89c18355455ec1542b1ee78f684cd4baed663e7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJizIpqCRBK7hj4Ov3rIwAAmJIIAAKZOlfStyq0jANy38tjBZxM\n+H/IMaoqwPPVeycN4lkr9zfKUUo+CTU7h5rp7IEMzArwJpmRxbSHpqJbQtVhPEs/\nGtuZ3kAchmWf6QgvzNj9eBwopgbVsWhB4g18BUcRJxfxMlxQlwL5VbGBGBVyzjWr\n10JVOHhuMs0wj7dQXnTCnIB/ttBFzCo1J6V52006SRiWfj6jMQ9Z8Aj8onyfpTCI\njafsBOqL/SEkRYQxytAKKfGLmssY0FSwfJvjUy4AZkdA3ohQGUN/R6I0OSa4CRj1\nVrbzgiyj0lJQCPJAsCzR2U5pAdyGecmefZtvuDIQVazibnb2AC2uRQOtx/yvHXA=\n=3xRP\n-----END PGP SIGNATURE-----\n", "payload": "tree 749017c866db634adedd29b0d636c44c1402af64\nparent c431e6f15a5446620c199070b7decf5e935f33bb\nparent f0a99f9036ff3038ca5a4a7d317fb98a2e9a87ce\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1657571945 +0200\ncommitter GitHub <noreply@github.com> 1657571945 +0200\n\nRollup merge of #99075 - danobi:dup_type_hint_sugg, r=petrochenkov\n\nFix duplicated type annotation suggestion\n\nBefore, there was more or less duplicated suggestions to add type hints.\nFix by clearing more generic suggestions when a more specific suggestion\nis possible.\n\nThis fixes #93506 .\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d89c18355455ec1542b1ee78f684cd4baed663e7", "html_url": "https://github.com/rust-lang/rust/commit/d89c18355455ec1542b1ee78f684cd4baed663e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d89c18355455ec1542b1ee78f684cd4baed663e7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c431e6f15a5446620c199070b7decf5e935f33bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c431e6f15a5446620c199070b7decf5e935f33bb", "html_url": "https://github.com/rust-lang/rust/commit/c431e6f15a5446620c199070b7decf5e935f33bb"}, {"sha": "f0a99f9036ff3038ca5a4a7d317fb98a2e9a87ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0a99f9036ff3038ca5a4a7d317fb98a2e9a87ce", "html_url": "https://github.com/rust-lang/rust/commit/f0a99f9036ff3038ca5a4a7d317fb98a2e9a87ce"}], "stats": {"total": 38, "additions": 13, "deletions": 25}, "files": [{"sha": "da321c45875090cfcc455ad9ec535e8bbdd7f27a", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d89c18355455ec1542b1ee78f684cd4baed663e7/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d89c18355455ec1542b1ee78f684cd4baed663e7/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=d89c18355455ec1542b1ee78f684cd4baed663e7", "patch": "@@ -614,6 +614,14 @@ impl Diagnostic {\n         self\n     }\n \n+    /// Clear any existing suggestions.\n+    pub fn clear_suggestions(&mut self) -> &mut Self {\n+        if let Ok(suggestions) = &mut self.suggestions {\n+            suggestions.clear();\n+        }\n+        self\n+    }\n+\n     /// Helper for pushing to `self.suggestions`, if available (not disable).\n     fn push_suggestion(&mut self, suggestion: CodeSuggestion) {\n         if let Ok(suggestions) = &mut self.suggestions {"}, {"sha": "99ac6a3546ed69caf2a464faa89819e7db7c7574", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d89c18355455ec1542b1ee78f684cd4baed663e7/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d89c18355455ec1542b1ee78f684cd4baed663e7/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=d89c18355455ec1542b1ee78f684cd4baed663e7", "patch": "@@ -461,6 +461,7 @@ impl<'a, G: EmissionGuarantee> DiagnosticBuilder<'a, G> {\n     forward!(pub fn set_is_lint(&mut self,) -> &mut Self);\n \n     forward!(pub fn disable_suggestions(&mut self,) -> &mut Self);\n+    forward!(pub fn clear_suggestions(&mut self,) -> &mut Self);\n \n     forward!(pub fn multipart_suggestion(\n         &mut self,"}, {"sha": "8d7c6b26ba15266dcca8fba9bb597d3d65e748bc", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d89c18355455ec1542b1ee78f684cd4baed663e7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d89c18355455ec1542b1ee78f684cd4baed663e7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=d89c18355455ec1542b1ee78f684cd4baed663e7", "patch": "@@ -2094,6 +2094,9 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                         //    |\n                         //    = note: cannot satisfy `_: Tt`\n \n+                        // Clear any more general suggestions in favor of our specific one\n+                        err.clear_suggestions();\n+\n                         err.span_suggestion_verbose(\n                             span.shrink_to_hi(),\n                             &format!("}, {"sha": "e282884289db3dba4eba2c6cdb997b82f221c036", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d89c18355455ec1542b1ee78f684cd4baed663e7/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d89c18355455ec1542b1ee78f684cd4baed663e7/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=d89c18355455ec1542b1ee78f684cd4baed663e7", "patch": "@@ -411,7 +411,7 @@ LL | #[derive(SessionDiagnostic)]\n    |\n    = help: normalized in stderr\n note: required by a bound in `DiagnosticBuilder::<'a, G>::set_arg`\n-  --> $COMPILER_DIR/rustc_errors/src/diagnostic_builder.rs:538:19\n+  --> $COMPILER_DIR/rustc_errors/src/diagnostic_builder.rs:539:19\n    |\n LL |         arg: impl IntoDiagnosticArg,\n    |                   ^^^^^^^^^^^^^^^^^ required by this bound in `DiagnosticBuilder::<'a, G>::set_arg`"}, {"sha": "5c52e7bcfab694f5c494fc7a3733be25facadba3", "filename": "src/test/ui/inference/erase-type-params-in-label.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d89c18355455ec1542b1ee78f684cd4baed663e7/src%2Ftest%2Fui%2Finference%2Ferase-type-params-in-label.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d89c18355455ec1542b1ee78f684cd4baed663e7/src%2Ftest%2Fui%2Finference%2Ferase-type-params-in-label.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Ferase-type-params-in-label.stderr?ref=d89c18355455ec1542b1ee78f684cd4baed663e7", "patch": "@@ -10,10 +10,6 @@ note: required by a bound in `foo`\n    |\n LL | fn foo<T, K, W: Default, Z: Default>(t: T, k: K) -> Foo<T, K, W, Z> {\n    |                 ^^^^^^^ required by this bound in `foo`\n-help: consider giving `foo` an explicit type, where the type for type parameter `W` is specified\n-   |\n-LL |     let foo: Foo<i32, &str, W, Z> = foo(1, \"\");\n-   |            ++++++++++++++++++++++\n help: consider specifying the type arguments in the function call\n    |\n LL |     let foo = foo::<T, K, W, Z>(1, \"\");\n@@ -31,10 +27,6 @@ note: required by a bound in `bar`\n    |\n LL | fn bar<T, K, Z: Default>(t: T, k: K) -> Bar<T, K, Z> {\n    |                 ^^^^^^^ required by this bound in `bar`\n-help: consider giving `bar` an explicit type, where the type for type parameter `Z` is specified\n-   |\n-LL |     let bar: Bar<i32, &str, Z> = bar(1, \"\");\n-   |            +++++++++++++++++++\n help: consider specifying the type arguments in the function call\n    |\n LL |     let bar = bar::<T, K, Z>(1, \"\");"}, {"sha": "04673a375cf0176f780abe3d45b33bfe8a97c407", "filename": "src/test/ui/inference/issue-71732.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d89c18355455ec1542b1ee78f684cd4baed663e7/src%2Ftest%2Fui%2Finference%2Fissue-71732.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d89c18355455ec1542b1ee78f684cd4baed663e7/src%2Ftest%2Fui%2Finference%2Fissue-71732.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-71732.stderr?ref=d89c18355455ec1542b1ee78f684cd4baed663e7", "patch": "@@ -13,10 +13,6 @@ note: required by a bound in `HashMap::<K, V, S>::get`\n    |\n LL |         K: Borrow<Q>,\n    |            ^^^^^^^^^ required by this bound in `HashMap::<K, V, S>::get`\n-help: consider specifying the generic argument\n-   |\n-LL |         .get::<Q>(&\"key\".into())\n-   |             +++++\n help: consider specifying the type argument in the function call\n    |\n LL |         .get::<Q>(&\"key\".into())"}, {"sha": "2b832e27c5224ac26a388ed73810dc9a4f6a77b7", "filename": "src/test/ui/traits/issue-77982.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d89c18355455ec1542b1ee78f684cd4baed663e7/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d89c18355455ec1542b1ee78f684cd4baed663e7/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr?ref=d89c18355455ec1542b1ee78f684cd4baed663e7", "patch": "@@ -13,10 +13,6 @@ note: required by a bound in `HashMap::<K, V, S>::get`\n    |\n LL |         K: Borrow<Q>,\n    |            ^^^^^^^^^ required by this bound in `HashMap::<K, V, S>::get`\n-help: consider specifying the generic argument\n-   |\n-LL |     opts.get::<Q>(opt.as_ref());\n-   |             +++++\n help: consider specifying the type argument in the function call\n    |\n LL |     opts.get::<Q>(opt.as_ref());"}, {"sha": "cbec35934214886d693b3d5a6625b1ec0ca16033", "filename": "src/test/ui/traits/multidispatch-convert-ambig-dest.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d89c18355455ec1542b1ee78f684cd4baed663e7/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d89c18355455ec1542b1ee78f684cd4baed663e7/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr?ref=d89c18355455ec1542b1ee78f684cd4baed663e7", "patch": "@@ -30,10 +30,6 @@ LL | fn test<T,U>(_: T, _: U)\n    |    ---- required by a bound in this\n LL | where T : Convert<U>\n    |           ^^^^^^^^^^ required by this bound in `test`\n-help: consider specifying the generic arguments\n-   |\n-LL |     test::<i32, U>(22, std::default::Default::default());\n-   |         ++++++++++\n help: consider specifying the type arguments in the function call\n    |\n LL |     test::<T, U>(22, std::default::Default::default());"}, {"sha": "4af4c22f75166153ab35739f1c1c2fd8ac3869df", "filename": "src/test/ui/type/type-annotation-needed.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d89c18355455ec1542b1ee78f684cd4baed663e7/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d89c18355455ec1542b1ee78f684cd4baed663e7/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr?ref=d89c18355455ec1542b1ee78f684cd4baed663e7", "patch": "@@ -10,10 +10,6 @@ note: required by a bound in `foo`\n    |\n LL | fn foo<T: Into<String>>(x: i32) {}\n    |           ^^^^^^^^^^^^ required by this bound in `foo`\n-help: consider specifying the generic argument\n-   |\n-LL |     foo::<T>(42);\n-   |        +++++\n help: consider specifying the type argument in the function call\n    |\n LL |     foo::<T>(42);"}]}