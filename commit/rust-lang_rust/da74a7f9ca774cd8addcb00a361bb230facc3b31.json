{"sha": "da74a7f9ca774cd8addcb00a361bb230facc3b31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNzRhN2Y5Y2E3NzRjZDhhZGRjYjAwYTM2MWJiMjMwZmFjYzNiMzE=", "commit": {"author": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-02-01T07:20:31Z"}, "committer": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-02-04T03:41:48Z"}, "message": "Make macro arg optional in syntax, again untested.", "tree": {"sha": "56a6c60c5d6825a02e59c8934deba409334f70e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56a6c60c5d6825a02e59c8934deba409334f70e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da74a7f9ca774cd8addcb00a361bb230facc3b31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da74a7f9ca774cd8addcb00a361bb230facc3b31", "html_url": "https://github.com/rust-lang/rust/commit/da74a7f9ca774cd8addcb00a361bb230facc3b31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da74a7f9ca774cd8addcb00a361bb230facc3b31/comments", "author": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ea04c65c151708272b92d00c8448156239affb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ea04c65c151708272b92d00c8448156239affb2", "html_url": "https://github.com/rust-lang/rust/commit/5ea04c65c151708272b92d00c8448156239affb2"}], "stats": {"total": 55, "additions": 41, "deletions": 14}, "files": [{"sha": "576e0ab865a6f866227ee0102937e307f0ff247b", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da74a7f9ca774cd8addcb00a361bb230facc3b31/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da74a7f9ca774cd8addcb00a361bb230facc3b31/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=da74a7f9ca774cd8addcb00a361bb230facc3b31", "patch": "@@ -272,7 +272,7 @@ enum blk_sort {\n \n type mac = spanned<mac_>;\n \n-type mac_arg = @expr;\n+type mac_arg = option::t<@expr>;\n \n type mac_body_ = {span: span};\n type mac_body = option::t<mac_body_>;"}, {"sha": "415c6cb5d9bf7a678c3489411dcf2933f4e1f3c6", "filename": "src/comp/syntax/ext/base.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/da74a7f9ca774cd8addcb00a361bb230facc3b31/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da74a7f9ca774cd8addcb00a361bb230facc3b31/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs?ref=da74a7f9ca774cd8addcb00a361bb230facc3b31", "patch": "@@ -118,6 +118,13 @@ fn make_new_lit(cx: ext_ctxt, sp: codemap::span, lit: ast::lit_) ->\n     ret @{id: cx.next_id(), node: ast::expr_lit(sp_lit), span: sp};\n }\n \n+fn get_mac_arg(cx: ext_ctxt, sp: span, arg: ast::mac_arg) -> @ast::expr {\n+    alt (arg) {\n+      some(expr) {expr}\n+      none {cx.span_fatal(sp, \"missing macro args\")}\n+    }\n+}\n+\n fn get_mac_body(cx: ext_ctxt, sp: span, args: ast::mac_body)\n     -> ast::mac_body_\n {"}, {"sha": "538c40a9d66e5b0fe35ac204a2cbbe25f4623a10", "filename": "src/comp/syntax/ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da74a7f9ca774cd8addcb00a361bb230facc3b31/src%2Fcomp%2Fsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da74a7f9ca774cd8addcb00a361bb230facc3b31/src%2Fcomp%2Fsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fconcat_idents.rs?ref=da74a7f9ca774cd8addcb00a361bb230facc3b31", "patch": "@@ -4,6 +4,7 @@ import syntax::ast;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n                      _body: ast::mac_body) -> @ast::expr {\n+    let arg = get_mac_arg(cx,sp,arg);\n     let args: [@ast::expr] =\n         alt arg.node {\n           ast::expr_vec(elts, _) { elts }"}, {"sha": "b9b42028c0fc5ec6f60fff8ca402ce819dbf6ee7", "filename": "src/comp/syntax/ext/env.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da74a7f9ca774cd8addcb00a361bb230facc3b31/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da74a7f9ca774cd8addcb00a361bb230facc3b31/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs?ref=da74a7f9ca774cd8addcb00a361bb230facc3b31", "patch": "@@ -11,6 +11,7 @@ export expand_syntax_ext;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n                      _body: ast::mac_body) -> @ast::expr {\n+    let arg = get_mac_arg(cx,sp,arg);\n     let args: [@ast::expr] =\n         alt arg.node {\n           ast::expr_vec(elts, _) { elts }"}, {"sha": "b7834175d2f5f2fead0ee029427be2d18ae8e6db", "filename": "src/comp/syntax/ext/fmt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da74a7f9ca774cd8addcb00a361bb230facc3b31/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da74a7f9ca774cd8addcb00a361bb230facc3b31/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs?ref=da74a7f9ca774cd8addcb00a361bb230facc3b31", "patch": "@@ -15,6 +15,7 @@ export expand_syntax_ext;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n                      _body: ast::mac_body) -> @ast::expr {\n+    let arg = get_mac_arg(cx,sp,arg);\n     let args: [@ast::expr] =\n         alt arg.node {\n           ast::expr_vec(elts, _) { elts }"}, {"sha": "9245e5aa6d4fc818d3ce5e1158011f91198a2e97", "filename": "src/comp/syntax/ext/ident_to_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da74a7f9ca774cd8addcb00a361bb230facc3b31/src%2Fcomp%2Fsyntax%2Fext%2Fident_to_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da74a7f9ca774cd8addcb00a361bb230facc3b31/src%2Fcomp%2Fsyntax%2Fext%2Fident_to_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fident_to_str.rs?ref=da74a7f9ca774cd8addcb00a361bb230facc3b31", "patch": "@@ -4,6 +4,7 @@ import syntax::ast;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n                      _body: ast::mac_body) -> @ast::expr {\n+    let arg = get_mac_arg(cx,sp,arg);\n     let args: [@ast::expr] =\n         alt arg.node {\n           ast::expr_vec(elts, _) { elts }"}, {"sha": "911cf9ff2eb60d83e3d888edfd19db95f1e17811", "filename": "src/comp/syntax/ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da74a7f9ca774cd8addcb00a361bb230facc3b31/src%2Fcomp%2Fsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da74a7f9ca774cd8addcb00a361bb230facc3b31/src%2Fcomp%2Fsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Flog_syntax.rs?ref=da74a7f9ca774cd8addcb00a361bb230facc3b31", "patch": "@@ -4,6 +4,7 @@ import std::io::writer_util;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n                      _body: ast::mac_body) -> @ast::expr {\n+    let arg = get_mac_arg(cx,sp,arg);\n     cx.print_backtrace();\n     std::io::stdout().write_line(print::pprust::expr_to_str(arg));\n "}, {"sha": "d8496203e3d9d5c0381eb20f8f34f1982acb217d", "filename": "src/comp/syntax/ext/simplext.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da74a7f9ca774cd8addcb00a361bb230facc3b31/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da74a7f9ca774cd8addcb00a361bb230facc3b31/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs?ref=da74a7f9ca774cd8addcb00a361bb230facc3b31", "patch": "@@ -671,6 +671,7 @@ fn p_t_s_r_actual_vector(cx: ext_ctxt, elts: [@expr], _repeat_after: bool,\n \n fn add_new_extension(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n                      _body: ast::mac_body) -> base::macro_def {\n+    let arg = get_mac_arg(cx,sp,arg);\n     let args: [@ast::expr] =\n         alt arg.node {\n           ast::expr_vec(elts, _) { elts }\n@@ -716,7 +717,7 @@ fn add_new_extension(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n                     }\n                     clauses +=\n                         [@{params: pattern_to_selectors\n-                               (cx, invoc_arg),\n+                               (cx, get_mac_arg(cx,mac.span,invoc_arg)),\n                            body: elts[1u]}];\n \n                     // FIXME: check duplicates (or just simplify\n@@ -757,6 +758,7 @@ fn add_new_extension(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n \n     fn generic_extension(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n                          _body: ast::mac_body, clauses: [@clause]) -> @expr {\n+        let arg = get_mac_arg(cx,sp,arg);\n         for c: @clause in clauses {\n             alt use_selectors_to_bind(c.params, arg) {\n               some(bindings) { ret transcribe(cx, bindings, c.body); }"}, {"sha": "e3a05961bea703233a98564b97042613066ab92f", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/da74a7f9ca774cd8addcb00a361bb230facc3b31/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da74a7f9ca774cd8addcb00a361bb230facc3b31/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=da74a7f9ca774cd8addcb00a361bb230facc3b31", "patch": "@@ -133,7 +133,10 @@ fn fold_mac_(m: mac, fld: ast_fold) -> mac {\n     ret {node:\n              alt m.node {\n                mac_invoc(pth, arg, body) {\n-                 mac_invoc(fld.fold_path(pth), fld.fold_expr(arg), body)\n+                 mac_invoc(fld.fold_path(pth),\n+                           // FIXME: bind should work, but causes a crash\n+                           option::map(arg) {|arg| fld.fold_expr(arg)},\n+                           body)\n                }\n                mac_embed_type(ty) { mac_embed_type(fld.fold_ty(ty)) }\n                mac_embed_block(blk) { mac_embed_block(fld.fold_block(blk)) }"}, {"sha": "291f820df18148b6094f2e501f7e84f425f6ca29", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/da74a7f9ca774cd8addcb00a361bb230facc3b31/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da74a7f9ca774cd8addcb00a361bb230facc3b31/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=da74a7f9ca774cd8addcb00a361bb230facc3b31", "patch": "@@ -985,14 +985,20 @@ fn parse_syntax_ext_naked(p: parser, lo: uint) -> @ast::expr {\n     let pth = parse_path(p);\n     //temporary for a backwards-compatible cycle:\n     let sep = seq_sep(token::COMMA);\n-    let es =\n-        if p.token == token::LPAREN {\n-            parse_seq(token::LPAREN, token::RPAREN, sep, parse_expr, p)\n-        } else {\n-            parse_seq(token::LBRACKET, token::RBRACKET, sep, parse_expr, p)\n-        };\n-    let hi = es.span.hi;\n-    let e = mk_expr(p, es.span.lo, hi, ast::expr_vec(es.node, ast::imm));\n+    let e = none;\n+    if (p.token == token::LPAREN || p.token == token::LBRACKET) {\n+        let es =\n+            if p.token == token::LPAREN {\n+                parse_seq(token::LPAREN, token::RPAREN,\n+                          sep, parse_expr, p)\n+            } else {\n+                parse_seq(token::LBRACKET, token::RBRACKET,\n+                          sep, parse_expr, p)\n+            };\n+        let hi = es.span.hi;\n+        e = some(mk_expr(p, es.span.lo, hi,\n+                         ast::expr_vec(es.node, ast::imm)));\n+    }\n     let b = none;\n     if p.token == token::LBRACE {\n         p.bump();"}, {"sha": "59ea8216c437e38fd21a6b797e18d94fadb9bca7", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/da74a7f9ca774cd8addcb00a361bb230facc3b31/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da74a7f9ca774cd8addcb00a361bb230facc3b31/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=da74a7f9ca774cd8addcb00a361bb230facc3b31", "patch": "@@ -726,8 +726,11 @@ fn print_mac(s: ps, m: ast::mac) {\n       ast::mac_invoc(path, arg, body) {\n         word(s.s, \"#\");\n         print_path(s, path, false);\n-        alt arg.node { ast::expr_vec(_, _) { } _ { word(s.s, \" \"); } }\n-        print_expr(s, arg);\n+        alt arg {\n+          some(@{node: ast::expr_vec(_, _), _}) { }\n+          _ { word(s.s, \" \"); }\n+        }\n+        option::may(arg, bind print_expr(s, _));\n         // FIXME: extension 'body'\n       }\n       ast::mac_embed_type(ty) {"}, {"sha": "50a4f2cfbfa050c2a6268b812cbf00045bd2445e", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da74a7f9ca774cd8addcb00a361bb230facc3b31/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da74a7f9ca774cd8addcb00a361bb230facc3b31/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=da74a7f9ca774cd8addcb00a361bb230facc3b31", "patch": "@@ -273,7 +273,8 @@ fn visit_exprs<E>(exprs: [@expr], e: E, v: vt<E>) {\n \n fn visit_mac<E>(m: mac, e: E, v: vt<E>) {\n     alt m.node {\n-      ast::mac_invoc(pth, arg, body) { visit_expr(arg, e, v); }\n+      ast::mac_invoc(pth, arg, body) {\n+        option::map(arg) {|arg| visit_expr(arg, e, v)}; }\n       ast::mac_embed_type(ty) { v.visit_ty(ty, e, v); }\n       ast::mac_embed_block(blk) { v.visit_block(blk, e, v); }\n       ast::mac_ellipsis { }"}]}