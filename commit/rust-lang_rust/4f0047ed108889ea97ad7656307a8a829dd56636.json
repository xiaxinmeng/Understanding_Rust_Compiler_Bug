{"sha": "4f0047ed108889ea97ad7656307a8a829dd56636", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMDA0N2VkMTA4ODg5ZWE5N2FkNzY1NjMwN2E4YTgyOWRkNTY2MzY=", "commit": {"author": {"name": "Anthony Ramine", "email": "nox@nox.paris", "date": "2020-09-12T16:35:32Z"}, "committer": {"name": "Anthony Ramine", "email": "nox@nox.paris", "date": "2020-09-12T16:35:32Z"}, "message": "Add a comment on is_trivially_sized about obviously !Sized types", "tree": {"sha": "38c98d5fb471b0064f844296b3fe631f2b4ca5f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38c98d5fb471b0064f844296b3fe631f2b4ca5f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f0047ed108889ea97ad7656307a8a829dd56636", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f0047ed108889ea97ad7656307a8a829dd56636", "html_url": "https://github.com/rust-lang/rust/commit/4f0047ed108889ea97ad7656307a8a829dd56636", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f0047ed108889ea97ad7656307a8a829dd56636/comments", "author": {"login": "nox", "id": 123095, "node_id": "MDQ6VXNlcjEyMzA5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/123095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nox", "html_url": "https://github.com/nox", "followers_url": "https://api.github.com/users/nox/followers", "following_url": "https://api.github.com/users/nox/following{/other_user}", "gists_url": "https://api.github.com/users/nox/gists{/gist_id}", "starred_url": "https://api.github.com/users/nox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nox/subscriptions", "organizations_url": "https://api.github.com/users/nox/orgs", "repos_url": "https://api.github.com/users/nox/repos", "events_url": "https://api.github.com/users/nox/events{/privacy}", "received_events_url": "https://api.github.com/users/nox/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nox", "id": 123095, "node_id": "MDQ6VXNlcjEyMzA5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/123095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nox", "html_url": "https://github.com/nox", "followers_url": "https://api.github.com/users/nox/followers", "following_url": "https://api.github.com/users/nox/following{/other_user}", "gists_url": "https://api.github.com/users/nox/gists{/gist_id}", "starred_url": "https://api.github.com/users/nox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nox/subscriptions", "organizations_url": "https://api.github.com/users/nox/orgs", "repos_url": "https://api.github.com/users/nox/repos", "events_url": "https://api.github.com/users/nox/events{/privacy}", "received_events_url": "https://api.github.com/users/nox/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88197214b8a9099bb3da559a3bd7bf4867c10c5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/88197214b8a9099bb3da559a3bd7bf4867c10c5f", "html_url": "https://github.com/rust-lang/rust/commit/88197214b8a9099bb3da559a3bd7bf4867c10c5f"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "825221c22a8c100e5213ef490800cd84d62971fc", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f0047ed108889ea97ad7656307a8a829dd56636/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f0047ed108889ea97ad7656307a8a829dd56636/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=4f0047ed108889ea97ad7656307a8a829dd56636", "patch": "@@ -2280,6 +2280,12 @@ impl<'tcx> TyS<'tcx> {\n     ///\n     /// Returning true means the type is known to be sized. Returning\n     /// `false` means nothing -- could be sized, might not be.\n+    ///\n+    /// Note that we could never rely on the fact that a type such as `[_]` is\n+    /// trivially `!Sized` because we could be in a type environment with a\n+    /// bound such as `[_]: Copy`. A function with such a bound obviously never\n+    /// can be called, but that doesn't mean it shouldn't typecheck. This is why\n+    /// this method doesn't return `Option<bool>`.\n     pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {\n         match self.kind() {\n             ty::Infer(ty::IntVar(_) | ty::FloatVar(_))"}]}