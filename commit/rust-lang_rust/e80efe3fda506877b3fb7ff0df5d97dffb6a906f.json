{"sha": "e80efe3fda506877b3fb7ff0df5d97dffb6a906f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MGVmZTNmZGE1MDY4NzdiM2ZiN2ZmMGRmNWQ5N2RmZmI2YTkwNmY=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-08T23:31:32Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-20T09:08:56Z"}, "message": "Do a task-killed check at the start of task 'timeslices'.", "tree": {"sha": "bd84dc36ca507ed8d3d0e11b0044a8066f302a36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd84dc36ca507ed8d3d0e11b0044a8066f302a36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e80efe3fda506877b3fb7ff0df5d97dffb6a906f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e80efe3fda506877b3fb7ff0df5d97dffb6a906f", "html_url": "https://github.com/rust-lang/rust/commit/e80efe3fda506877b3fb7ff0df5d97dffb6a906f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e80efe3fda506877b3fb7ff0df5d97dffb6a906f/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "629f6e8d68be06bf07f803db64be6a917a66b2cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/629f6e8d68be06bf07f803db64be6a917a66b2cf", "html_url": "https://github.com/rust-lang/rust/commit/629f6e8d68be06bf07f803db64be6a917a66b2cf"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "1ea9c073678e9ef0ccf6e5fd83ccfdb00fe8782f", "filename": "src/libstd/rt/kill.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e80efe3fda506877b3fb7ff0df5d97dffb6a906f/src%2Flibstd%2Frt%2Fkill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80efe3fda506877b3fb7ff0df5d97dffb6a906f/src%2Flibstd%2Frt%2Fkill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fkill.rs?ref=e80efe3fda506877b3fb7ff0df5d97dffb6a906f", "patch": "@@ -15,7 +15,7 @@ use cell::Cell;\n use option::{Option, Some, None};\n use prelude::*;\n use rt::task::Task;\n-use unstable::atomics::{AtomicUint, SeqCst};\n+use unstable::atomics::{AtomicUint, Acquire, SeqCst};\n use unstable::sync::{UnsafeAtomicRcBox, LittleLock};\n use util;\n \n@@ -137,6 +137,16 @@ impl KillHandle {\n         }\n     }\n \n+    #[inline]\n+    pub fn killed(&self) -> bool {\n+        // Called every context switch, so shouldn't report true if the task\n+        // is unkillable with a kill signal pending.\n+        let inner = unsafe { &*self.get() };\n+        let flag  = unsafe { &*inner.killed.get() };\n+        // FIXME(#6598): can use relaxed ordering (i think)\n+        flag.load(Acquire) == KILL_KILLED\n+    }\n+\n     pub fn notify_immediate_failure(&mut self) {\n         // A benign data race may happen here if there are failing sibling\n         // tasks that were also spawned-watched. The refcount's write barriers\n@@ -287,6 +297,22 @@ impl Death {\n         self.unkillable = 0;\n     }\n \n+    /// Fails if a kill signal was received.\n+    #[inline]\n+    pub fn check_killed(&self) {\n+        match self.kill_handle {\n+            Some(ref kill_handle) =>\n+                // The task may be both unkillable and killed if it does some\n+                // synchronization during unwinding or cleanup (for example,\n+                // sending on a notify port). In that case failing won't help.\n+                if self.unkillable == 0 && kill_handle.killed() {\n+                    fail!(KILLED_MSG);\n+                },\n+            // This may happen during task death (see comments in collect_failure).\n+            None => rtassert!(self.unkillable > 0),\n+        }\n+    }\n+\n     /// Enter a possibly-nested unkillable section of code.\n     /// All calls must be paired with a subsequent call to allow_kill.\n     #[inline]"}, {"sha": "4b51508f0a41f0293723bf7464689405c5494585", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e80efe3fda506877b3fb7ff0df5d97dffb6a906f/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80efe3fda506877b3fb7ff0df5d97dffb6a906f/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=e80efe3fda506877b3fb7ff0df5d97dffb6a906f", "patch": "@@ -483,6 +483,11 @@ impl Scheduler {\n \n             // Running tasks may have asked us to do some cleanup\n             (*sched).run_cleanup_job();\n+\n+            // Must happen after running the cleanup job (of course).\n+            // Might not be running in task context; if not, a later call to\n+            // resume_task_immediately will take care of this.\n+            (*sched).current_task.map(|t| t.death.check_killed());\n         }\n     }\n \n@@ -524,6 +529,9 @@ impl Scheduler {\n             // We could be executing in a different thread now\n             let sched = Local::unsafe_borrow::<Scheduler>();\n             (*sched).run_cleanup_job();\n+\n+            // As above, must happen after running the cleanup job.\n+            (*sched).current_task.map(|t| t.death.check_killed());\n         }\n     }\n \n@@ -559,6 +567,9 @@ impl Scheduler {\n             // We could be executing in a different thread now\n             let sched = Local::unsafe_borrow::<Scheduler>();\n             (*sched).run_cleanup_job();\n+\n+            // As above, must happen after running the cleanup job.\n+            (*sched).current_task.map(|t| t.death.check_killed());\n         }\n     }\n "}]}