{"sha": "744442d19a76c4dd39f5fa2a2bbd74638e8569ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NDQ0MmQxOWE3NmM0ZGQzOWY1ZmEyYTJiYmQ3NDYzOGU4NTY5ZWM=", "commit": {"author": {"name": "newpavlov", "email": "newpavlov@gmail.com", "date": "2019-08-20T12:43:34Z"}, "committer": {"name": "newpavlov", "email": "newpavlov@gmail.com", "date": "2019-08-20T12:43:34Z"}, "message": "fix C incompatibilities", "tree": {"sha": "dcee913c86575026793d95a58a648ec4599e3279", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcee913c86575026793d95a58a648ec4599e3279"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/744442d19a76c4dd39f5fa2a2bbd74638e8569ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/744442d19a76c4dd39f5fa2a2bbd74638e8569ec", "html_url": "https://github.com/rust-lang/rust/commit/744442d19a76c4dd39f5fa2a2bbd74638e8569ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/744442d19a76c4dd39f5fa2a2bbd74638e8569ec/comments", "author": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c05237686f994144f2f0bae68dc5b337b06e9a97", "url": "https://api.github.com/repos/rust-lang/rust/commits/c05237686f994144f2f0bae68dc5b337b06e9a97", "html_url": "https://github.com/rust-lang/rust/commit/c05237686f994144f2f0bae68dc5b337b06e9a97"}], "stats": {"total": 69, "additions": 47, "deletions": 22}, "files": [{"sha": "28b49996d1433870169cc11646062e8720f70583", "filename": "src/libstd/sys/wasi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744442d19a76c4dd39f5fa2a2bbd74638e8569ec/src%2Flibstd%2Fsys%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744442d19a76c4dd39f5fa2a2bbd74638e8569ec/src%2Flibstd%2Fsys%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fmod.rs?ref=744442d19a76c4dd39f5fa2a2bbd74638e8569ec", "patch": "@@ -83,7 +83,7 @@ pub unsafe fn strlen(mut s: *const c_char) -> usize {\n }\n \n pub unsafe fn abort_internal() -> ! {\n-    wasi::proc_exit(127)\n+    libc::abort()\n }\n \n pub fn hashmap_random_keys() -> (u64, u64) {"}, {"sha": "dca58179e0c8d161d629f42035535fd31d8d550d", "filename": "src/libstd/sys/wasi/os.rs", "status": "modified", "additions": 46, "deletions": 21, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/744442d19a76c4dd39f5fa2a2bbd74638e8569ec/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744442d19a76c4dd39f5fa2a2bbd74638e8569ec/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs?ref=744442d19a76c4dd39f5fa2a2bbd74638e8569ec", "patch": "@@ -21,11 +21,24 @@ pub unsafe fn env_lock() -> impl Any {\n }\n \n pub fn errno() -> i32 {\n-    0\n+    extern {\n+        #[thread_local]\n+        static errno: libc::c_int;\n+    }\n+\n+    unsafe { errno as i32 }\n }\n \n pub fn error_string(errno: i32) -> String {\n-    wasi::error_string(errno)\n+    let mut buf = [0 as libc::c_char; 1024];\n+\n+    let p = buf.as_mut_ptr();\n+    unsafe {\n+        if libc::strerror_r(errno as libc::c_int, p, buf.len()) < 0 {\n+            panic!(\"strerror_r failure\");\n+        }\n+        str::from_utf8(CStr::from_ptr(p).to_bytes()).unwrap().to_owned()\n+    }\n }\n \n pub fn getcwd() -> io::Result<PathBuf> {\n@@ -73,35 +86,45 @@ impl StdError for JoinPathsError {\n pub fn current_exe() -> io::Result<PathBuf> {\n     unsupported()\n }\n-\n pub struct Env {\n-    iter: vec::IntoIter<Vec<u8>>,\n+    iter: vec::IntoIter<(OsString, OsString)>,\n     _dont_send_or_sync_me: PhantomData<*mut ()>,\n }\n \n impl Iterator for Env {\n     type Item = (OsString, OsString);\n-    fn next(&mut self) -> Option<(OsString, OsString)> {\n-        self.iter.next().and_then(|input| {\n-            // See src/libstd/sys/unix/os.rs, same as that\n-            if input.is_empty() {\n-                return None;\n-            }\n-            let pos = memchr::memchr(b'=', &input[1..]).map(|p| p + 1);\n-            pos.map(|p| (\n-                OsStringExt::from_vec(input[..p].to_vec()),\n-                OsStringExt::from_vec(input[p+1..].to_vec()),\n-            ))\n-        })\n-    }\n+    fn next(&mut self) -> Option<(OsString, OsString)> { self.iter.next() }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }\n }\n \n \n pub fn env() -> Env {\n-    Env {\n-        iter: wasi::get_environ().unwrap_or(Vec::new()).into_iter(),\n-        _dont_send_or_sync_me: PhantomData,\n+    unsafe {\n+        let _guard = env_lock();\n+        let mut environ = libc::environ;\n+        let mut result = Vec::new();\n+        while environ != ptr::null_mut() && *environ != ptr::null_mut() {\n+            if let Some(key_value) = parse(CStr::from_ptr(*environ).to_bytes()) {\n+                result.push(key_value);\n+            }\n+            environ = environ.offset(1);\n+        }\n+        return Env {\n+            iter: result.into_iter(),\n+            _dont_send_or_sync_me: PhantomData,\n+        }\n+    }\n+\n+    // See src/libstd/sys/unix/os.rs, same as that\n+    fn parse(input: &[u8]) -> Option<(OsString, OsString)> {\n+        if input.is_empty() {\n+            return None;\n+        }\n+        let pos = memchr::memchr(b'=', &input[1..]).map(|p| p + 1);\n+        pos.map(|p| (\n+            OsStringExt::from_vec(input[..p].to_vec()),\n+            OsStringExt::from_vec(input[p+1..].to_vec()),\n+        ))\n     }\n }\n \n@@ -147,7 +170,9 @@ pub fn home_dir() -> Option<PathBuf> {\n }\n \n pub fn exit(code: i32) -> ! {\n-    unsafe { wasi::proc_exit(code as u32) }\n+    unsafe {\n+        libc::exit(code)\n+    }\n }\n \n pub fn getpid() -> u32 {"}]}