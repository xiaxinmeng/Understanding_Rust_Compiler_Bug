{"sha": "08ce6bc6d9532191e59a49786811a0735ea35f5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4Y2U2YmM2ZDk1MzIxOTFlNTlhNDk3ODY4MTFhMDczNWVhMzVmNWE=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2019-09-26T01:46:51Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2019-09-26T01:46:51Z"}, "message": "Fix macro expansion in toplevel_ref_arg lint", "tree": {"sha": "cce0481afc9b5ab9cd67c0c5cfc31bd3004e3446", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cce0481afc9b5ab9cd67c0c5cfc31bd3004e3446"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08ce6bc6d9532191e59a49786811a0735ea35f5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08ce6bc6d9532191e59a49786811a0735ea35f5a", "html_url": "https://github.com/rust-lang/rust/commit/08ce6bc6d9532191e59a49786811a0735ea35f5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08ce6bc6d9532191e59a49786811a0735ea35f5a/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b9e5dfda565224e6f007f379ca1cea4623422d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b9e5dfda565224e6f007f379ca1cea4623422d9", "html_url": "https://github.com/rust-lang/rust/commit/3b9e5dfda565224e6f007f379ca1cea4623422d9"}], "stats": {"total": 45, "additions": 29, "deletions": 16}, "files": [{"sha": "980c4caf2c5e9712d81dd01d21d956b59ea2f043", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/08ce6bc6d9532191e59a49786811a0735ea35f5a/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ce6bc6d9532191e59a49786811a0735ea35f5a/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=08ce6bc6d9532191e59a49786811a0735ea35f5a", "patch": "@@ -261,60 +261,65 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n         }\n     }\n \n-    fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, s: &'tcx Stmt) {\n+    fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx Stmt) {\n         if_chain! {\n-            if let StmtKind::Local(ref l) = s.node;\n-            if let PatKind::Binding(an, .., i, None) = l.pat.node;\n-            if let Some(ref init) = l.init;\n+            if let StmtKind::Local(ref local) = stmt.node;\n+            if let PatKind::Binding(an, .., name, None) = local.pat.node;\n+            if let Some(ref init) = local.init;\n             then {\n                 if an == BindingAnnotation::Ref || an == BindingAnnotation::RefMut {\n-                    let sugg_init = Sugg::hir(cx, init, \"..\");\n-                    let (mutopt,initref) = if an == BindingAnnotation::RefMut {\n+                    let sugg_init = if init.span.from_expansion() {\n+                        Sugg::hir_with_macro_callsite(cx, init, \"..\")\n+                    } else {\n+                        Sugg::hir(cx, init, \"..\")\n+                    };\n+                    let (mutopt, initref) = if an == BindingAnnotation::RefMut {\n                         (\"mut \", sugg_init.mut_addr())\n                     } else {\n                         (\"\", sugg_init.addr())\n                     };\n-                    let tyopt = if let Some(ref ty) = l.ty {\n+                    let tyopt = if let Some(ref ty) = local.ty {\n                         format!(\": &{mutopt}{ty}\", mutopt=mutopt, ty=snippet(cx, ty.span, \"_\"))\n                     } else {\n                         String::new()\n                     };\n-                    span_lint_hir_and_then(cx,\n+                    span_lint_hir_and_then(\n+                        cx,\n                         TOPLEVEL_REF_ARG,\n                         init.hir_id,\n-                        l.pat.span,\n+                        local.pat.span,\n                         \"`ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\",\n                         |db| {\n                             db.span_suggestion(\n-                                s.span,\n+                                stmt.span,\n                                 \"try\",\n                                 format!(\n                                     \"let {name}{tyopt} = {initref};\",\n-                                    name=snippet(cx, i.span, \"_\"),\n+                                    name=snippet(cx, name.span, \"_\"),\n                                     tyopt=tyopt,\n                                     initref=initref,\n                                 ),\n-                                Applicability::MachineApplicable, // snippet\n+                                Applicability::MachineApplicable,\n                             );\n                         }\n                     );\n                 }\n             }\n         };\n         if_chain! {\n-            if let StmtKind::Semi(ref expr) = s.node;\n+            if let StmtKind::Semi(ref expr) = stmt.node;\n             if let ExprKind::Binary(ref binop, ref a, ref b) = expr.node;\n             if binop.node == BinOpKind::And || binop.node == BinOpKind::Or;\n             if let Some(sugg) = Sugg::hir_opt(cx, a);\n             then {\n                 span_lint_and_then(cx,\n                     SHORT_CIRCUIT_STATEMENT,\n-                    s.span,\n+                    stmt.span,\n                     \"boolean short circuit operator in statement may be clearer using an explicit test\",\n                     |db| {\n                         let sugg = if binop.node == BinOpKind::Or { !sugg } else { sugg };\n                         db.span_suggestion(\n-                            s.span,\n+                            stmt.span,\n                             \"replace it with\",\n                             format!(\n                                 \"if {} {{ {}; }}\","}, {"sha": "df3c15ed59e65d5823cf4211a000d4cdaed10946", "filename": "tests/ui/toplevel_ref_arg.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08ce6bc6d9532191e59a49786811a0735ea35f5a/tests%2Fui%2Ftoplevel_ref_arg.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/08ce6bc6d9532191e59a49786811a0735ea35f5a/tests%2Fui%2Ftoplevel_ref_arg.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg.fixed?ref=08ce6bc6d9532191e59a49786811a0735ea35f5a", "patch": "@@ -19,6 +19,8 @@ fn main() {\n     let (ref x, _) = (1, 2); // ok, not top level\n     println!(\"The answer is {}.\", x);\n \n+    let x = &vec![1, 2, 3];\n+\n     // Make sure that allowing the lint works\n     #[allow(clippy::toplevel_ref_arg)]\n     let ref mut x = 1_234_543;"}, {"sha": "882e9e558b2228ef7e62c2586a8c8d683895a458", "filename": "tests/ui/toplevel_ref_arg.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/08ce6bc6d9532191e59a49786811a0735ea35f5a/tests%2Fui%2Ftoplevel_ref_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08ce6bc6d9532191e59a49786811a0735ea35f5a/tests%2Fui%2Ftoplevel_ref_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg.stderr?ref=08ce6bc6d9532191e59a49786811a0735ea35f5a", "patch": "@@ -24,5 +24,11 @@ error: `ref` on an entire `let` pattern is discouraged, take a reference with `&\n LL |     let ref mut z = 1 + 2;\n    |     ----^^^^^^^^^--------- help: try: `let z = &mut (1 + 2);`\n \n-error: aborting due to 4 previous errors\n+error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n+  --> $DIR/toplevel_ref_arg.rs:22:9\n+   |\n+LL |     let ref x = vec![1, 2, 3];\n+   |     ----^^^^^----------------- help: try: `let x = &vec![1, 2, 3];`\n+\n+error: aborting due to 5 previous errors\n "}]}