{"sha": "24cbe384236b28512f0b8bc22343fbe4c4481c62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0Y2JlMzg0MjM2YjI4NTEyZjBiOGJjMjIzNDNmYmU0YzQ0ODFjNjI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-09T19:56:37Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-10T00:46:53Z"}, "message": "rustdoc: Correctly classify enums/typedefs\n\nBoth of these items are surfaced as a DefTy, so some extra logic was needed in\nthe decoder module to figure out whether one is actually an enum or whether it's\na typedef.\n\nCloses #14757", "tree": {"sha": "3dd4ce1f637391528482f66ed0e60a8bf65e8e9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dd4ce1f637391528482f66ed0e60a8bf65e8e9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24cbe384236b28512f0b8bc22343fbe4c4481c62", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24cbe384236b28512f0b8bc22343fbe4c4481c62", "html_url": "https://github.com/rust-lang/rust/commit/24cbe384236b28512f0b8bc22343fbe4c4481c62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24cbe384236b28512f0b8bc22343fbe4c4481c62/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14668f2791c4893b84ae4111c52dee07c79faac7", "url": "https://api.github.com/repos/rust-lang/rust/commits/14668f2791c4893b84ae4111c52dee07c79faac7", "html_url": "https://github.com/rust-lang/rust/commit/14668f2791c4893b84ae4111c52dee07c79faac7"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "0a88abd67d9dfffab5e5c96512b81598c23f745c", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/24cbe384236b28512f0b8bc22343fbe4c4481c62/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24cbe384236b28512f0b8bc22343fbe4c4481c62/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=24cbe384236b28512f0b8bc22343fbe4c4481c62", "patch": "@@ -321,3 +321,8 @@ pub fn get_reachable_extern_fns(cstore: &cstore::CStore, cnum: ast::CrateNum)\n     let cdata = cstore.get_crate_data(cnum);\n     decoder::get_reachable_extern_fns(&*cdata)\n }\n+\n+pub fn is_typedef(cstore: &cstore::CStore, did: ast::DefId) -> bool {\n+    let cdata = cstore.get_crate_data(did.krate);\n+    decoder::is_typedef(&*cdata, did.node)\n+}"}, {"sha": "56d6766e1b719f6be681c7f2d0bdb7d820194c2f", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24cbe384236b28512f0b8bc22343fbe4c4481c62/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24cbe384236b28512f0b8bc22343fbe4c4481c62/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=24cbe384236b28512f0b8bc22343fbe4c4481c62", "patch": "@@ -1339,3 +1339,11 @@ pub fn get_reachable_extern_fns(cdata: Cmd) -> Vec<ast::DefId> {\n     });\n     return ret;\n }\n+\n+pub fn is_typedef(cdata: Cmd, id: ast::NodeId) -> bool {\n+    let item_doc = lookup_item(id, cdata.data());\n+    match item_family(item_doc) {\n+        Type => true,\n+        _ => false,\n+    }\n+}"}, {"sha": "d243c61ddaff8ba3d91bdab8fb135e9888352d12", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24cbe384236b28512f0b8bc22343fbe4c4481c62/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24cbe384236b28512f0b8bc22343fbe4c4481c62/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=24cbe384236b28512f0b8bc22343fbe4c4481c62", "patch": "@@ -203,7 +203,7 @@ fn build_struct(tcx: &ty::ctxt, did: ast::DefId) -> clean::Struct {\n fn build_type(tcx: &ty::ctxt, did: ast::DefId) -> clean::ItemEnum {\n     let t = ty::lookup_item_type(tcx, did);\n     match ty::get(t.ty).sty {\n-        ty::ty_enum(edid, _) => {\n+        ty::ty_enum(edid, _) if !csearch::is_typedef(&tcx.sess.cstore, did) => {\n             return clean::EnumItem(clean::Enum {\n                 generics: t.generics.clean(),\n                 variants_stripped: false,"}]}