{"sha": "56888c1e9b4135b511abd2d8e907099003d12281", "node_id": "C_kwDOAAsO6NoAKDU2ODg4YzFlOWI0MTM1YjUxMWFiZDJkOGU5MDcwOTkwMDNkMTIyODE", "commit": {"author": {"name": "Thom Chiovoloni", "email": "thom@shift.click", "date": "2022-11-18T08:05:44Z"}, "committer": {"name": "Thom Chiovoloni", "email": "thom@shift.click", "date": "2022-11-18T08:05:44Z"}, "message": "Handle the case that even the filename array is unaligned.", "tree": {"sha": "ec9d945556c1afcd634e51c6c89b2d0b6fb134ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec9d945556c1afcd634e51c6c89b2d0b6fb134ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56888c1e9b4135b511abd2d8e907099003d12281", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQQszICQ1r0Zqrp7OLPXcz0dendfCgUCY3c82AAKCRDXcz0dendf\nCi7uAQDl6RCnSUcs6BRbV7HZE9iLSblDJmEMstpnZ3summP0RAD9H33dKAQBxBhz\nIDxj9Bwzla6EmpXAabqRZBA56uA6gAs=\n=rsic\n-----END PGP SIGNATURE-----", "payload": "tree ec9d945556c1afcd634e51c6c89b2d0b6fb134ca\nparent b881f66cf9c0882047708c4af34571a27eac28f3\nauthor Thom Chiovoloni <thom@shift.click> 1668758744 -0800\ncommitter Thom Chiovoloni <thom@shift.click> 1668758744 -0800\n\nHandle the case that even the filename array is unaligned.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56888c1e9b4135b511abd2d8e907099003d12281", "html_url": "https://github.com/rust-lang/rust/commit/56888c1e9b4135b511abd2d8e907099003d12281", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56888c1e9b4135b511abd2d8e907099003d12281/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b881f66cf9c0882047708c4af34571a27eac28f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b881f66cf9c0882047708c4af34571a27eac28f3", "html_url": "https://github.com/rust-lang/rust/commit/b881f66cf9c0882047708c4af34571a27eac28f3"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "3780980382879cf0e5199cd3c052721798a7a42b", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/56888c1e9b4135b511abd2d8e907099003d12281/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56888c1e9b4135b511abd2d8e907099003d12281/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=56888c1e9b4135b511abd2d8e907099003d12281", "patch": "@@ -1,5 +1,6 @@\n use crate::os::windows::prelude::*;\n \n+use crate::borrow::Cow;\n use crate::ffi::OsString;\n use crate::fmt;\n use crate::io::{self, BorrowedCursor, Error, IoSlice, IoSliceMut, SeekFrom};\n@@ -719,7 +720,7 @@ impl<'a> DirBuffIter<'a> {\n     }\n }\n impl<'a> Iterator for DirBuffIter<'a> {\n-    type Item = (&'a [u16], bool);\n+    type Item = (Cow<'a, [u16]>, bool);\n     fn next(&mut self) -> Option<Self::Item> {\n         use crate::mem::size_of;\n         let buffer = &self.buffer?[self.cursor..];\n@@ -742,7 +743,7 @@ impl<'a> Iterator for DirBuffIter<'a> {\n             let next_entry = ptr::addr_of!((*info).NextEntryOffset).read_unaligned() as usize;\n             let length = ptr::addr_of!((*info).FileNameLength).read_unaligned() as usize;\n             let attrs = ptr::addr_of!((*info).FileAttributes).read_unaligned();\n-            let name = crate::slice::from_raw_parts(\n+            let name = from_maybe_unaligned(\n                 ptr::addr_of!((*info).FileName).cast::<u16>(),\n                 length / size_of::<u16>(),\n             );\n@@ -759,13 +760,21 @@ impl<'a> Iterator for DirBuffIter<'a> {\n \n         // Skip `.` and `..` pseudo entries.\n         const DOT: u16 = b'.' as u16;\n-        match name {\n+        match &name[..] {\n             [DOT] | [DOT, DOT] => self.next(),\n             _ => Some((name, is_directory)),\n         }\n     }\n }\n \n+unsafe fn from_maybe_unaligned<'a>(p: *const u16, len: usize) -> Cow<'a, [u16]> {\n+    if p.is_aligned() {\n+        Cow::Borrowed(crate::slice::from_raw_parts(p, len))\n+    } else {\n+        Cow::Owned((0..len).map(|i| p.add(i).read_unaligned()).collect())\n+    }\n+}\n+\n /// Open a link relative to the parent directory, ensure no symlinks are followed.\n fn open_link_no_reparse(parent: &File, name: &[u16], access: u32) -> io::Result<File> {\n     // This is implemented using the lower level `NtCreateFile` function as\n@@ -1121,13 +1130,13 @@ fn remove_dir_all_iterative(f: &File, delete: fn(&File) -> io::Result<()>) -> io\n             if is_directory {\n                 let child_dir = open_link_no_reparse(\n                     &dir,\n-                    name,\n+                    &name,\n                     c::SYNCHRONIZE | c::DELETE | c::FILE_LIST_DIRECTORY,\n                 )?;\n                 dirlist.push(child_dir);\n             } else {\n                 for i in 1..=MAX_RETRIES {\n-                    let result = open_link_no_reparse(&dir, name, c::SYNCHRONIZE | c::DELETE);\n+                    let result = open_link_no_reparse(&dir, &name, c::SYNCHRONIZE | c::DELETE);\n                     match result {\n                         Ok(f) => delete(&f)?,\n                         // Already deleted, so skip."}]}