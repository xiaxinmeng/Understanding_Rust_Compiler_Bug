{"sha": "cd159fd7f9f8eec5792e6fd7f1b347ea3e028301", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMTU5ZmQ3ZjlmOGVlYzU3OTJlNmZkN2YxYjM0N2VhM2UwMjgzMDE=", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2020-08-19T10:05:44Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2020-10-01T19:06:33Z"}, "message": "Uplift drop-bounds lint from clippy", "tree": {"sha": "fc363f54da7f1557912253cbf948945dfb513ce3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc363f54da7f1557912253cbf948945dfb513ce3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd159fd7f9f8eec5792e6fd7f1b347ea3e028301", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd159fd7f9f8eec5792e6fd7f1b347ea3e028301", "html_url": "https://github.com/rust-lang/rust/commit/cd159fd7f9f8eec5792e6fd7f1b347ea3e028301", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd159fd7f9f8eec5792e6fd7f1b347ea3e028301/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "782013564efc06ef02614ba35a4e67dee4fcb8e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/782013564efc06ef02614ba35a4e67dee4fcb8e7", "html_url": "https://github.com/rust-lang/rust/commit/782013564efc06ef02614ba35a4e67dee4fcb8e7"}], "stats": {"total": 166, "additions": 166, "deletions": 0}, "files": [{"sha": "49e80f9d8a531741b5d8e1c19cd219a66ee4a080", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd159fd7f9f8eec5792e6fd7f1b347ea3e028301/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd159fd7f9f8eec5792e6fd7f1b347ea3e028301/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=cd159fd7f9f8eec5792e6fd7f1b347ea3e028301", "patch": "@@ -53,6 +53,7 @@ mod non_ascii_idents;\n mod nonstandard_style;\n mod passes;\n mod redundant_semicolon;\n+mod traits;\n mod types;\n mod unused;\n \n@@ -75,6 +76,7 @@ use internal::*;\n use non_ascii_idents::*;\n use nonstandard_style::*;\n use redundant_semicolon::*;\n+use traits::*;\n use types::*;\n use unused::*;\n \n@@ -157,6 +159,7 @@ macro_rules! late_lint_passes {\n                 MissingDebugImplementations: MissingDebugImplementations::default(),\n                 ArrayIntoIter: ArrayIntoIter,\n                 ClashingExternDeclarations: ClashingExternDeclarations::new(),\n+                DropTraitConstraints: DropTraitConstraints,\n             ]\n         );\n     };"}, {"sha": "d4f79036e5a180f92d67d1529b8709041fd73061", "filename": "compiler/rustc_lint/src/traits.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/cd159fd7f9f8eec5792e6fd7f1b347ea3e028301/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd159fd7f9f8eec5792e6fd7f1b347ea3e028301/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs?ref=cd159fd7f9f8eec5792e6fd7f1b347ea3e028301", "patch": "@@ -0,0 +1,79 @@\n+use crate::LateContext;\n+use crate::LateLintPass;\n+use crate::LintContext;\n+use rustc_hir as hir;\n+use rustc_span::symbol::sym;\n+\n+declare_lint! {\n+    /// The `drop_bounds` lint checks for generics with `std::ops::Drop` as\n+    /// bounds.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// fn foo<T: Drop>() {}\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// `Drop` bounds do not really accomplish anything. A type may have\n+    /// compiler-generated drop glue without implementing the `Drop` trait\n+    /// itself. The `Drop` trait also only has one method, `Drop::drop`, and\n+    /// that function is by fiat not callable in user code. So there is really\n+    /// no use case for using `Drop` in trait bounds.\n+    ///\n+    /// The most likely use case of a drop bound is to distinguish between\n+    /// types that have destructors and types that don't. Combined with\n+    /// specialization, a naive coder would write an implementation that\n+    /// assumed a type could be trivially dropped, then write a specialization\n+    /// for `T: Drop` that actually calls the destructor. Except that doing so\n+    /// is not correct; String, for example, doesn't actually implement Drop,\n+    /// but because String contains a Vec, assuming it can be trivially dropped\n+    /// will leak memory.\n+    pub DROP_BOUNDS,\n+    Warn,\n+    \"bounds of the form `T: Drop` are useless\"\n+}\n+\n+declare_lint_pass!(\n+    /// Lint for bounds of the form `T: Drop`, which usually\n+    /// indicate an attempt to emulate `std::mem::needs_drop`.\n+    DropTraitConstraints => [DROP_BOUNDS]\n+);\n+\n+impl<'tcx> LateLintPass<'tcx> for DropTraitConstraints {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'tcx>) {\n+        use rustc_middle::ty::PredicateAtom::*;\n+\n+        let def_id = cx.tcx.hir().local_def_id(item.hir_id);\n+        let predicates = cx.tcx.explicit_predicates_of(def_id);\n+        for &(predicate, span) in predicates.predicates {\n+            let trait_predicate = match predicate.skip_binders() {\n+                Trait(trait_predicate, _constness) => trait_predicate,\n+                _ => continue,\n+            };\n+            let def_id = trait_predicate.trait_ref.def_id;\n+            if cx.tcx.lang_items().drop_trait() == Some(def_id) {\n+                // Explicitly allow `impl Drop`, a drop-guards-as-Voldemort-type pattern.\n+                if trait_predicate.trait_ref.self_ty().is_impl_trait() {\n+                    continue;\n+                }\n+                cx.struct_span_lint(DROP_BOUNDS, span, |lint| {\n+                    let needs_drop = match cx.tcx.get_diagnostic_item(sym::needs_drop) {\n+                        Some(needs_drop) => needs_drop,\n+                        None => return,\n+                    };\n+                    let msg = format!(\n+                        \"bounds on `{}` are useless, consider instead \\\n+                         using `{}` to detect if a type has a destructor\",\n+                        predicate,\n+                        cx.tcx.def_path_str(needs_drop)\n+                    );\n+                    lint.build(&msg).emit()\n+                });\n+            }\n+        }\n+    }\n+}"}, {"sha": "a2c7da6e6958e2c9dacd0d9453ebee368157cf85", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd159fd7f9f8eec5792e6fd7f1b347ea3e028301/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd159fd7f9f8eec5792e6fd7f1b347ea3e028301/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=cd159fd7f9f8eec5792e6fd7f1b347ea3e028301", "patch": "@@ -568,6 +568,7 @@ pub unsafe fn align_of_val_raw<T: ?Sized>(val: *const T) -> usize {\n #[inline]\n #[stable(feature = \"needs_drop\", since = \"1.21.0\")]\n #[rustc_const_stable(feature = \"const_needs_drop\", since = \"1.36.0\")]\n+#[rustc_diagnostic_item = \"needs_drop\"]\n pub const fn needs_drop<T>() -> bool {\n     intrinsics::needs_drop::<T>()\n }"}, {"sha": "063efc7b31abde057f5fcac4778e846d26fe14be", "filename": "src/test/ui/drop-bounds/drop-bounds-impl-drop.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cd159fd7f9f8eec5792e6fd7f1b347ea3e028301/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds-impl-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd159fd7f9f8eec5792e6fd7f1b347ea3e028301/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds-impl-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds-impl-drop.rs?ref=cd159fd7f9f8eec5792e6fd7f1b347ea3e028301", "patch": "@@ -0,0 +1,14 @@\n+// run-pass\n+#![deny(drop_bounds)]\n+// As a special exemption, `impl Drop` in the return position raises no error.\n+// This allows a convenient way to return an unnamed drop guard.\n+fn voldemort_type() -> impl Drop {\n+  struct Voldemort;\n+  impl Drop for Voldemort {\n+    fn drop(&mut self) {}\n+  }\n+  Voldemort\n+}\n+fn main() {\n+  let _ = voldemort_type();\n+}"}, {"sha": "c73538278d3be9cc8cf0637c04d046eca43e6b32", "filename": "src/test/ui/drop-bounds/drop-bounds.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cd159fd7f9f8eec5792e6fd7f1b347ea3e028301/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd159fd7f9f8eec5792e6fd7f1b347ea3e028301/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds.rs?ref=cd159fd7f9f8eec5792e6fd7f1b347ea3e028301", "patch": "@@ -0,0 +1,19 @@\n+#![deny(drop_bounds)]\n+fn foo<T: Drop>() {} //~ ERROR\n+fn bar<U>()\n+where\n+    U: Drop, //~ ERROR\n+{\n+}\n+fn baz(_x: impl Drop) {} //~ ERROR\n+struct Foo<T: Drop> { //~ ERROR\n+  _x: T\n+}\n+struct Bar<U> where U: Drop { //~ ERROR\n+  _x: U\n+}\n+trait Baz: Drop { //~ ERROR\n+}\n+impl<T: Drop> Baz for T { //~ ERROR\n+}\n+fn main() {}"}, {"sha": "15ba4c9a649890476bc906881b0dafc1a14b2a9c", "filename": "src/test/ui/drop-bounds/drop-bounds.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/cd159fd7f9f8eec5792e6fd7f1b347ea3e028301/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd159fd7f9f8eec5792e6fd7f1b347ea3e028301/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds.stderr?ref=cd159fd7f9f8eec5792e6fd7f1b347ea3e028301", "patch": "@@ -0,0 +1,50 @@\n+error: bounds on `T: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+  --> $DIR/drop-bounds.rs:2:11\n+   |\n+LL | fn foo<T: Drop>() {}\n+   |           ^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/drop-bounds.rs:1:9\n+   |\n+LL | #![deny(drop_bounds)]\n+   |         ^^^^^^^^^^^\n+\n+error: bounds on `U: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+  --> $DIR/drop-bounds.rs:5:8\n+   |\n+LL |     U: Drop,\n+   |        ^^^^\n+\n+error: bounds on `impl Drop: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+  --> $DIR/drop-bounds.rs:8:17\n+   |\n+LL | fn baz(_x: impl Drop) {}\n+   |                 ^^^^\n+\n+error: bounds on `T: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+  --> $DIR/drop-bounds.rs:9:15\n+   |\n+LL | struct Foo<T: Drop> {\n+   |               ^^^^\n+\n+error: bounds on `U: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+  --> $DIR/drop-bounds.rs:12:24\n+   |\n+LL | struct Bar<U> where U: Drop {\n+   |                        ^^^^\n+\n+error: bounds on `Self: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+  --> $DIR/drop-bounds.rs:15:12\n+   |\n+LL | trait Baz: Drop {\n+   |            ^^^^\n+\n+error: bounds on `T: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+  --> $DIR/drop-bounds.rs:17:9\n+   |\n+LL | impl<T: Drop> Baz for T {\n+   |         ^^^^\n+\n+error: aborting due to 7 previous errors\n+"}]}