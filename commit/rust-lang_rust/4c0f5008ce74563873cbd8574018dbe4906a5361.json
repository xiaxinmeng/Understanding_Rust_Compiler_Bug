{"sha": "4c0f5008ce74563873cbd8574018dbe4906a5361", "node_id": "C_kwDOAAsO6NoAKDRjMGY1MDA4Y2U3NDU2Mzg3M2NiZDg1NzQwMThkYmU0OTA2YTUzNjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-24T02:29:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-24T02:29:48Z"}, "message": "Auto merge of #109547 - matthiaskrgr:rollup-zczqgdk, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #108629 (rustdoc: add support for type filters in arguments and generics)\n - #108924 (panic_immediate_abort requires abort as a panic strategy)\n - #108961 (Refine error spans for const args in hir typeck)\n - #108986 (sync LVI tests)\n - #109142 (Add block-based mutex unlocking example)\n - #109368 (fix typo in the creation of OpenOption for RustyHermit)\n - #109493 (Return nested obligations from canonical response var unification)\n - #109515 (Add AixLinker to support linking on AIX)\n - #109536 (resolve: Rename some cstore methods to match queries and add comments)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "acf115e2f718cd581562c16cbdae502ec2b906f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acf115e2f718cd581562c16cbdae502ec2b906f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c0f5008ce74563873cbd8574018dbe4906a5361", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c0f5008ce74563873cbd8574018dbe4906a5361", "html_url": "https://github.com/rust-lang/rust/commit/4c0f5008ce74563873cbd8574018dbe4906a5361", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c0f5008ce74563873cbd8574018dbe4906a5361/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf073ec2cbf0b90ded7893f429020b81dd28e6c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf073ec2cbf0b90ded7893f429020b81dd28e6c3", "html_url": "https://github.com/rust-lang/rust/commit/cf073ec2cbf0b90ded7893f429020b81dd28e6c3"}, {"sha": "4d21d302a11b743c141ad4292a3b7fd751a4e733", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d21d302a11b743c141ad4292a3b7fd751a4e733", "html_url": "https://github.com/rust-lang/rust/commit/4d21d302a11b743c141ad4292a3b7fd751a4e733"}], "stats": {"total": 1008, "additions": 718, "deletions": 290}, "files": [{"sha": "dd11768195079edafe620dd3ea7607642559d947", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -133,6 +133,9 @@ pub fn get_linker<'a>(\n         LinkerFlavor::Unix(Cc::No) if sess.target.os == \"l4re\" => {\n             Box::new(L4Bender::new(cmd, sess)) as Box<dyn Linker>\n         }\n+        LinkerFlavor::Unix(Cc::No) if sess.target.os == \"aix\" => {\n+            Box::new(AixLinker::new(cmd, sess)) as Box<dyn Linker>\n+        }\n         LinkerFlavor::WasmLld(Cc::No) => Box::new(WasmLd::new(cmd, sess)) as Box<dyn Linker>,\n         LinkerFlavor::Gnu(cc, _)\n         | LinkerFlavor::Darwin(cc, _)\n@@ -1474,6 +1477,177 @@ impl<'a> L4Bender<'a> {\n     }\n }\n \n+/// Linker for AIX.\n+pub struct AixLinker<'a> {\n+    cmd: Command,\n+    sess: &'a Session,\n+    hinted_static: bool,\n+}\n+\n+impl<'a> AixLinker<'a> {\n+    pub fn new(cmd: Command, sess: &'a Session) -> AixLinker<'a> {\n+        AixLinker { cmd: cmd, sess: sess, hinted_static: false }\n+    }\n+\n+    fn hint_static(&mut self) {\n+        if !self.hinted_static {\n+            self.cmd.arg(\"-bstatic\");\n+            self.hinted_static = true;\n+        }\n+    }\n+\n+    fn hint_dynamic(&mut self) {\n+        if self.hinted_static {\n+            self.cmd.arg(\"-bdynamic\");\n+            self.hinted_static = false;\n+        }\n+    }\n+\n+    fn build_dylib(&mut self, _out_filename: &Path) {\n+        self.cmd.arg(\"-bM:SRE\");\n+        self.cmd.arg(\"-bnoentry\");\n+        // FIXME: Use CreateExportList utility to create export list\n+        // and remove -bexpfull.\n+        self.cmd.arg(\"-bexpfull\");\n+    }\n+}\n+\n+impl<'a> Linker for AixLinker<'a> {\n+    fn link_dylib(&mut self, lib: &str, _verbatim: bool, _as_needed: bool) {\n+        self.hint_dynamic();\n+        self.cmd.arg(format!(\"-l{}\", lib));\n+    }\n+\n+    fn link_staticlib(&mut self, lib: &str, _verbatim: bool) {\n+        self.hint_static();\n+        self.cmd.arg(format!(\"-l{}\", lib));\n+    }\n+\n+    fn link_rlib(&mut self, lib: &Path) {\n+        self.hint_static();\n+        self.cmd.arg(lib);\n+    }\n+\n+    fn include_path(&mut self, path: &Path) {\n+        self.cmd.arg(\"-L\").arg(path);\n+    }\n+\n+    fn framework_path(&mut self, _: &Path) {\n+        bug!(\"frameworks are not supported on AIX\");\n+    }\n+\n+    fn output_filename(&mut self, path: &Path) {\n+        self.cmd.arg(\"-o\").arg(path);\n+    }\n+\n+    fn add_object(&mut self, path: &Path) {\n+        self.cmd.arg(path);\n+    }\n+\n+    fn full_relro(&mut self) {}\n+\n+    fn partial_relro(&mut self) {}\n+\n+    fn no_relro(&mut self) {}\n+\n+    fn cmd(&mut self) -> &mut Command {\n+        &mut self.cmd\n+    }\n+\n+    fn set_output_kind(&mut self, output_kind: LinkOutputKind, out_filename: &Path) {\n+        match output_kind {\n+            LinkOutputKind::DynamicDylib => {\n+                self.hint_dynamic();\n+                self.build_dylib(out_filename);\n+            }\n+            LinkOutputKind::StaticDylib => {\n+                self.hint_static();\n+                self.build_dylib(out_filename);\n+            }\n+            _ => {}\n+        }\n+    }\n+\n+    fn link_rust_dylib(&mut self, lib: &str, _: &Path) {\n+        self.hint_dynamic();\n+        self.cmd.arg(format!(\"-l{}\", lib));\n+    }\n+\n+    fn link_framework(&mut self, _framework: &str, _as_needed: bool) {\n+        bug!(\"frameworks not supported on AIX\");\n+    }\n+\n+    fn link_whole_staticlib(&mut self, lib: &str, verbatim: bool, search_path: &[PathBuf]) {\n+        self.hint_static();\n+        let lib = find_native_static_library(lib, verbatim, search_path, &self.sess);\n+        self.cmd.arg(format!(\"-bkeepfile:{}\", lib.to_str().unwrap()));\n+    }\n+\n+    fn link_whole_rlib(&mut self, lib: &Path) {\n+        self.hint_static();\n+        self.cmd.arg(format!(\"-bkeepfile:{}\", lib.to_str().unwrap()));\n+    }\n+\n+    fn gc_sections(&mut self, _keep_metadata: bool) {\n+        self.cmd.arg(\"-bgc\");\n+    }\n+\n+    fn no_gc_sections(&mut self) {\n+        self.cmd.arg(\"-bnogc\");\n+    }\n+\n+    fn optimize(&mut self) {}\n+\n+    fn pgo_gen(&mut self) {}\n+\n+    fn control_flow_guard(&mut self) {}\n+\n+    fn debuginfo(&mut self, strip: Strip, _: &[PathBuf]) {\n+        match strip {\n+            Strip::None => {}\n+            // FIXME: -s strips the symbol table, line number information\n+            // and relocation information.\n+            Strip::Debuginfo | Strip::Symbols => {\n+                self.cmd.arg(\"-s\");\n+            }\n+        }\n+    }\n+\n+    fn no_crt_objects(&mut self) {}\n+\n+    fn no_default_libraries(&mut self) {}\n+\n+    fn export_symbols(&mut self, tmpdir: &Path, _crate_type: CrateType, symbols: &[String]) {\n+        let path = tmpdir.join(\"list.exp\");\n+        let res: io::Result<()> = try {\n+            let mut f = BufWriter::new(File::create(&path)?);\n+            // TODO: use llvm-nm to generate export list.\n+            for symbol in symbols {\n+                debug!(\"  _{}\", symbol);\n+                writeln!(f, \"  {}\", symbol)?;\n+            }\n+        };\n+        if let Err(e) = res {\n+            self.sess.fatal(&format!(\"failed to write export file: {}\", e));\n+        }\n+        self.cmd.arg(format!(\"-bE:{}\", path.to_str().unwrap()));\n+    }\n+\n+    fn subsystem(&mut self, _subsystem: &str) {}\n+\n+    fn reset_per_library_state(&mut self) {\n+        self.hint_dynamic();\n+    }\n+\n+    fn linker_plugin_lto(&mut self) {}\n+\n+    fn add_eh_frame_header(&mut self) {}\n+\n+    fn add_no_exec(&mut self) {}\n+\n+    fn add_as_needed(&mut self) {}\n+}\n+\n fn for_each_exported_symbols_include_dep<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     crate_type: CrateType,"}, {"sha": "e0ddb90c33b990f0e075f24b71cfaa56830d649d", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::def::Res;\n use rustc_hir::def_id::DefId;\n use rustc_infer::traits::ObligationCauseCode;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor};\n-use rustc_span::{self, Span};\n+use rustc_span::{self, symbol::kw, Span};\n use rustc_trait_selection::traits;\n \n use std::ops::ControlFlow;\n@@ -25,17 +25,28 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let generics = self.tcx.generics_of(def_id);\n         let predicate_substs = match unsubstituted_pred.kind().skip_binder() {\n-            ty::PredicateKind::Clause(ty::Clause::Trait(pred)) => pred.trait_ref.substs,\n-            ty::PredicateKind::Clause(ty::Clause::Projection(pred)) => pred.projection_ty.substs,\n-            _ => ty::List::empty(),\n+            ty::PredicateKind::Clause(ty::Clause::Trait(pred)) => pred.trait_ref.substs.to_vec(),\n+            ty::PredicateKind::Clause(ty::Clause::Projection(pred)) => {\n+                pred.projection_ty.substs.to_vec()\n+            }\n+            ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(arg, ty)) => {\n+                vec![ty.into(), arg.into()]\n+            }\n+            ty::PredicateKind::ConstEvaluatable(e) => vec![e.into()],\n+            _ => return false,\n         };\n \n-        let find_param_matching = |matches: &dyn Fn(&ty::ParamTy) -> bool| {\n-            predicate_substs.types().find_map(|ty| {\n-                ty.walk().find_map(|arg| {\n+        let find_param_matching = |matches: &dyn Fn(ty::ParamTerm) -> bool| {\n+            predicate_substs.iter().find_map(|arg| {\n+                arg.walk().find_map(|arg| {\n                     if let ty::GenericArgKind::Type(ty) = arg.unpack()\n-                        && let ty::Param(param_ty) = ty.kind()\n-                        && matches(param_ty)\n+                        && let ty::Param(param_ty) = *ty.kind()\n+                        && matches(ty::ParamTerm::Ty(param_ty))\n+                    {\n+                        Some(arg)\n+                    } else if let ty::GenericArgKind::Const(ct) = arg.unpack()\n+                        && let ty::ConstKind::Param(param_ct) = ct.kind()\n+                        && matches(ty::ParamTerm::Const(param_ct))\n                     {\n                         Some(arg)\n                     } else {\n@@ -47,21 +58,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Prefer generics that are local to the fn item, since these are likely\n         // to be the cause of the unsatisfied predicate.\n-        let mut param_to_point_at = find_param_matching(&|param_ty| {\n-            self.tcx.parent(generics.type_param(param_ty, self.tcx).def_id) == def_id\n+        let mut param_to_point_at = find_param_matching(&|param_term| {\n+            self.tcx.parent(generics.param_at(param_term.index(), self.tcx).def_id) == def_id\n         });\n         // Fall back to generic that isn't local to the fn item. This will come\n         // from a trait or impl, for example.\n-        let mut fallback_param_to_point_at = find_param_matching(&|param_ty| {\n-            self.tcx.parent(generics.type_param(param_ty, self.tcx).def_id) != def_id\n-                && param_ty.name != rustc_span::symbol::kw::SelfUpper\n+        let mut fallback_param_to_point_at = find_param_matching(&|param_term| {\n+            self.tcx.parent(generics.param_at(param_term.index(), self.tcx).def_id) != def_id\n+                && !matches!(param_term, ty::ParamTerm::Ty(ty) if ty.name == kw::SelfUpper)\n         });\n         // Finally, the `Self` parameter is possibly the reason that the predicate\n         // is unsatisfied. This is less likely to be true for methods, because\n         // method probe means that we already kinda check that the predicates due\n         // to the `Self` type are true.\n-        let mut self_param_to_point_at =\n-            find_param_matching(&|param_ty| param_ty.name == rustc_span::symbol::kw::SelfUpper);\n+        let mut self_param_to_point_at = find_param_matching(\n+            &|param_term| matches!(param_term, ty::ParamTerm::Ty(ty) if ty.name == kw::SelfUpper),\n+        );\n \n         // Finally, for ambiguity-related errors, we actually want to look\n         // for a parameter that is the source of the inference type left\n@@ -225,14 +237,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .own_substs(ty::InternalSubsts::identity_for_item(self.tcx, def_id));\n         let Some((index, _)) = own_substs\n             .iter()\n-            .filter(|arg| matches!(arg.unpack(), ty::GenericArgKind::Type(_)))\n             .enumerate()\n             .find(|(_, arg)| **arg == param_to_point_at) else { return false };\n         let Some(arg) = segment\n             .args()\n             .args\n             .iter()\n-            .filter(|arg| matches!(arg, hir::GenericArg::Type(_)))\n             .nth(index) else { return false; };\n         error.obligation.cause.span = arg\n             .span()"}, {"sha": "06a64f0db0e3232da08399f4b21785f34479d217", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -1041,13 +1041,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         self.root.tables.optimized_mir.get(self, id).is_some()\n     }\n \n-    fn module_expansion(self, id: DefIndex, sess: &Session) -> ExpnId {\n-        match self.def_kind(id) {\n-            DefKind::Mod | DefKind::Enum | DefKind::Trait => self.get_expn_that_defined(id, sess),\n-            _ => panic!(\"Expected module, found {:?}\", self.local_def_id(id)),\n-        }\n-    }\n-\n     fn get_fn_has_self_parameter(self, id: DefIndex, sess: &'a Session) -> bool {\n         self.root\n             .tables"}, {"sha": "3a50d7c93635c58b9aa675084b9029c58c50469d", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -490,6 +490,9 @@ pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n                 .alloc_slice(&CStore::from_tcx(tcx).crate_dependencies_in_postorder(LOCAL_CRATE))\n         },\n         crates: |tcx, ()| {\n+            // The list of loaded crates is now frozen in query cache,\n+            // so make sure cstore is not mutably accessed from here on.\n+            tcx.untracked().cstore.leak();\n             tcx.arena.alloc_from_iter(CStore::from_tcx(tcx).iter_crate_data().map(|(cnum, _)| cnum))\n         },\n         ..*providers\n@@ -537,16 +540,16 @@ impl CStore {\n         )\n     }\n \n-    pub fn get_span_untracked(&self, def_id: DefId, sess: &Session) -> Span {\n+    pub fn def_span_untracked(&self, def_id: DefId, sess: &Session) -> Span {\n         self.get_crate_data(def_id.krate).get_span(def_id.index, sess)\n     }\n \n-    pub fn def_kind(&self, def: DefId) -> DefKind {\n+    pub fn def_kind_untracked(&self, def: DefId) -> DefKind {\n         self.get_crate_data(def.krate).def_kind(def.index)\n     }\n \n-    pub fn module_expansion_untracked(&self, def_id: DefId, sess: &Session) -> ExpnId {\n-        self.get_crate_data(def_id.krate).module_expansion(def_id.index, sess)\n+    pub fn expn_that_defined_untracked(&self, def_id: DefId, sess: &Session) -> ExpnId {\n+        self.get_crate_data(def_id.krate).get_expn_that_defined(def_id.index, sess)\n     }\n \n     /// Only public-facing way to traverse all the definitions in a non-local crate."}, {"sha": "e3cd5cca785aacf4bc6a1adf8b1db48f1b492df4", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -1051,6 +1051,21 @@ impl<'tcx> TermKind<'tcx> {\n     }\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+pub enum ParamTerm {\n+    Ty(ParamTy),\n+    Const(ParamConst),\n+}\n+\n+impl ParamTerm {\n+    pub fn index(self) -> usize {\n+        match self {\n+            ParamTerm::Ty(ty) => ty.index as usize,\n+            ParamTerm::Const(ct) => ct.index as usize,\n+        }\n+    }\n+}\n+\n /// This kind of predicate has no *direct* correspondent in the\n /// syntax, but it roughly corresponds to the syntactic forms:\n ///"}, {"sha": "19ccb3a6484af217e1c9b4309c9987dcbd180267", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -114,13 +114,16 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         }\n \n         if !def_id.is_local() {\n-            let def_kind = self.cstore().def_kind(def_id);\n+            // Query `def_kind` is not used because query system overhead is too expensive here.\n+            let def_kind = self.cstore().def_kind_untracked(def_id);\n             if let DefKind::Mod | DefKind::Enum | DefKind::Trait = def_kind {\n                 let parent = self\n                     .tcx\n                     .opt_parent(def_id)\n                     .map(|parent_id| self.get_nearest_non_block_module(parent_id));\n-                let expn_id = self.cstore().module_expansion_untracked(def_id, &self.tcx.sess);\n+                // Query `expn_that_defined` is not used because\n+                // hashing spans in its result is expensive.\n+                let expn_id = self.cstore().expn_that_defined_untracked(def_id, &self.tcx.sess);\n                 return Some(self.new_module(\n                     parent,\n                     ModuleKind::Def(def_kind, def_id, self.tcx.item_name(def_id)),\n@@ -194,6 +197,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     }\n \n     pub(crate) fn build_reduced_graph_external(&mut self, module: Module<'a>) {\n+        // Query `module_children` is not used because hashing spans in its result is expensive.\n         let children =\n             Vec::from_iter(self.cstore().module_children_untracked(module.def_id(), self.tcx.sess));\n         for child in children {"}, {"sha": "0e84432a5b4bf85ff23fe93ffb824d2d0a81a220", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -1875,7 +1875,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     fn def_span(&self, def_id: DefId) -> Span {\n         match def_id.as_local() {\n             Some(def_id) => self.tcx.source_span(def_id),\n-            None => self.cstore().get_span_untracked(def_id, self.tcx.sess),\n+            // Query `def_span` is not used because hashing its result span is expensive.\n+            None => self.cstore().def_span_untracked(def_id, self.tcx.sess),\n         }\n     }\n "}, {"sha": "efecaf33ef987a9579ab622f09c4d821760952aa", "filename": "compiler/rustc_trait_selection/src/solve/canonical/mod.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonical%2Fmod.rs?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -99,20 +99,20 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         original_values: Vec<ty::GenericArg<'tcx>>,\n         response: CanonicalResponse<'tcx>,\n-    ) -> Result<Certainty, NoSolution> {\n+    ) -> Result<(Certainty, Vec<Goal<'tcx, ty::Predicate<'tcx>>>), NoSolution> {\n         let substitution = self.compute_query_response_substitution(&original_values, &response);\n \n         let Response { var_values, external_constraints, certainty } =\n             response.substitute(self.tcx(), &substitution);\n \n-        self.unify_query_var_values(param_env, &original_values, var_values)?;\n+        let nested_goals = self.unify_query_var_values(param_env, &original_values, var_values)?;\n \n         // FIXME: implement external constraints.\n         let ExternalConstraintsData { region_constraints, opaque_types: _ } =\n             external_constraints.deref();\n         self.register_region_constraints(region_constraints);\n \n-        Ok(certainty)\n+        Ok((certainty, nested_goals))\n     }\n \n     /// This returns the substitutions to instantiate the bound variables of\n@@ -205,21 +205,15 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         original_values: &[ty::GenericArg<'tcx>],\n         var_values: CanonicalVarValues<'tcx>,\n-    ) -> Result<(), NoSolution> {\n+    ) -> Result<Vec<Goal<'tcx, ty::Predicate<'tcx>>>, NoSolution> {\n         assert_eq!(original_values.len(), var_values.len());\n+\n+        let mut nested_goals = vec![];\n         for (&orig, response) in iter::zip(original_values, var_values.var_values) {\n-            // This can fail due to the occurs check, see\n-            // `tests/ui/typeck/lazy-norm/equating-projection-cyclically.rs` for an example\n-            // where that can happen.\n-            //\n-            // FIXME: To deal with #105787 I also expect us to emit nested obligations here at\n-            // some point. We can figure out how to deal with this once we actually have\n-            // an ICE.\n-            let nested_goals = self.eq_and_get_goals(param_env, orig, response)?;\n-            assert!(nested_goals.is_empty(), \"{nested_goals:?}\");\n+            nested_goals.extend(self.eq_and_get_goals(param_env, orig, response)?);\n         }\n \n-        Ok(())\n+        Ok(nested_goals)\n     }\n \n     fn register_region_constraints(&mut self, region_constraints: &QueryRegionConstraints<'tcx>) {"}, {"sha": "e47b5ae21b5afafcc5e155c74bb05c84224193b7", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -70,17 +70,16 @@ pub trait InferCtxtEvalExt<'tcx> {\n     fn evaluate_root_goal(\n         &self,\n         goal: Goal<'tcx, ty::Predicate<'tcx>>,\n-    ) -> Result<(bool, Certainty), NoSolution>;\n+    ) -> Result<(bool, Certainty, Vec<Goal<'tcx, ty::Predicate<'tcx>>>), NoSolution>;\n }\n \n impl<'tcx> InferCtxtEvalExt<'tcx> for InferCtxt<'tcx> {\n     #[instrument(level = \"debug\", skip(self))]\n     fn evaluate_root_goal(\n         &self,\n         goal: Goal<'tcx, ty::Predicate<'tcx>>,\n-    ) -> Result<(bool, Certainty), NoSolution> {\n+    ) -> Result<(bool, Certainty, Vec<Goal<'tcx, ty::Predicate<'tcx>>>), NoSolution> {\n         let mode = if self.intercrate { SolverMode::Coherence } else { SolverMode::Normal };\n-\n         let mut search_graph = search_graph::SearchGraph::new(self.tcx, mode);\n \n         let mut ecx = EvalCtxt {\n@@ -152,13 +151,13 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n         &mut self,\n         is_normalizes_to_hack: IsNormalizesToHack,\n         goal: Goal<'tcx, ty::Predicate<'tcx>>,\n-    ) -> Result<(bool, Certainty), NoSolution> {\n+    ) -> Result<(bool, Certainty, Vec<Goal<'tcx, ty::Predicate<'tcx>>>), NoSolution> {\n         let (orig_values, canonical_goal) = self.canonicalize_goal(goal);\n         let canonical_response =\n             EvalCtxt::evaluate_canonical_goal(self.tcx(), self.search_graph, canonical_goal)?;\n \n         let has_changed = !canonical_response.value.var_values.is_identity();\n-        let certainty = self.instantiate_and_apply_query_response(\n+        let (certainty, nested_goals) = self.instantiate_and_apply_query_response(\n             goal.param_env,\n             orig_values,\n             canonical_response,\n@@ -186,7 +185,7 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n             assert_eq!(certainty, canonical_response.value.certainty);\n         }\n \n-        Ok((has_changed, certainty))\n+        Ok((has_changed, certainty, nested_goals))\n     }\n \n     fn compute_goal(&mut self, goal: Goal<'tcx, ty::Predicate<'tcx>>) -> QueryResult<'tcx> {\n@@ -263,13 +262,14 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n                 let mut has_changed = Err(Certainty::Yes);\n \n                 if let Some(goal) = goals.normalizes_to_hack_goal.take() {\n-                    let (_, certainty) = match this.evaluate_goal(\n+                    let (_, certainty, nested_goals) = match this.evaluate_goal(\n                         IsNormalizesToHack::Yes,\n                         goal.with(this.tcx(), ty::Binder::dummy(goal.predicate)),\n                     ) {\n                         Ok(r) => r,\n                         Err(NoSolution) => return Some(Err(NoSolution)),\n                     };\n+                    new_goals.goals.extend(nested_goals);\n \n                     if goal.predicate.projection_ty\n                         != this.resolve_vars_if_possible(goal.predicate.projection_ty)\n@@ -308,11 +308,12 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n                 }\n \n                 for nested_goal in goals.goals.drain(..) {\n-                    let (changed, certainty) =\n+                    let (changed, certainty, nested_goals) =\n                         match this.evaluate_goal(IsNormalizesToHack::No, nested_goal) {\n                             Ok(result) => result,\n                             Err(NoSolution) => return Some(Err(NoSolution)),\n                         };\n+                    new_goals.goals.extend(nested_goals);\n \n                     if changed {\n                         has_changed = Ok(());"}, {"sha": "76a2a5879114dc9377d15c8d03464bbf5a3657b4", "filename": "compiler/rustc_trait_selection/src/solve/fulfill.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -1,6 +1,7 @@\n use std::mem;\n \n use rustc_infer::infer::InferCtxt;\n+use rustc_infer::traits::Obligation;\n use rustc_infer::traits::{\n     query::NoSolution, FulfillmentError, FulfillmentErrorCode, MismatchedProjectionTypes,\n     PredicateObligation, SelectionError, TraitEngine,\n@@ -61,7 +62,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentCtxt<'tcx> {\n             let mut has_changed = false;\n             for obligation in mem::take(&mut self.obligations) {\n                 let goal = obligation.clone().into();\n-                let (changed, certainty) = match infcx.evaluate_root_goal(goal) {\n+                let (changed, certainty, nested_goals) = match infcx.evaluate_root_goal(goal) {\n                     Ok(result) => result,\n                     Err(NoSolution) => {\n                         errors.push(FulfillmentError {\n@@ -125,7 +126,16 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentCtxt<'tcx> {\n                         continue;\n                     }\n                 };\n-\n+                // Push any nested goals that we get from unifying our canonical response\n+                // with our obligation onto the fulfillment context.\n+                self.obligations.extend(nested_goals.into_iter().map(|goal| {\n+                    Obligation::new(\n+                        infcx.tcx,\n+                        obligation.cause.clone(),\n+                        goal.param_env,\n+                        goal.predicate,\n+                    )\n+                }));\n                 has_changed |= changed;\n                 match certainty {\n                     Certainty::Yes => {}"}, {"sha": "296fd1ed5248f56a114db55a165d0b2a648d39d0", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -1282,10 +1282,20 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     ),\n \n                     ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(ct, ty)) => {\n-                        self.tcx.sess.struct_span_err(\n+                        let mut diag = self.tcx.sess.struct_span_err(\n                             span,\n                             &format!(\"the constant `{}` is not of type `{}`\", ct, ty),\n-                        )\n+                        );\n+                        self.note_type_err(\n+                            &mut diag,\n+                            &obligation.cause,\n+                            None,\n+                            None,\n+                            TypeError::Sorts(ty::error::ExpectedFound::new(true, ty, ct.ty())),\n+                            false,\n+                            false,\n+                        );\n+                        diag\n                     }\n                 }\n             }"}, {"sha": "edbe2de8105e6a2378284dc31b1e71610ed0c85b", "filename": "compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -1,9 +1,8 @@\n-use rustc_middle::traits::solve::{Certainty, Goal, MaybeCause};\n+use rustc_infer::traits::{TraitEngine, TraitEngineExt};\n use rustc_middle::ty;\n \n use crate::infer::canonical::OriginalQueryValues;\n use crate::infer::InferCtxt;\n-use crate::solve::InferCtxtEvalExt;\n use crate::traits::{EvaluationResult, OverflowError, PredicateObligation, SelectionContext};\n \n pub trait InferCtxtExt<'tcx> {\n@@ -81,27 +80,20 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n \n         if self.tcx.trait_solver_next() {\n             self.probe(|snapshot| {\n-                if let Ok((_, certainty)) =\n-                    self.evaluate_root_goal(Goal::new(self.tcx, param_env, obligation.predicate))\n-                {\n-                    match certainty {\n-                        Certainty::Yes => {\n-                            if self.opaque_types_added_in_snapshot(snapshot) {\n-                                Ok(EvaluationResult::EvaluatedToOkModuloOpaqueTypes)\n-                            } else if self.region_constraints_added_in_snapshot(snapshot).is_some()\n-                            {\n-                                Ok(EvaluationResult::EvaluatedToOkModuloRegions)\n-                            } else {\n-                                Ok(EvaluationResult::EvaluatedToOk)\n-                            }\n-                        }\n-                        Certainty::Maybe(MaybeCause::Ambiguity) => {\n-                            Ok(EvaluationResult::EvaluatedToAmbig)\n-                        }\n-                        Certainty::Maybe(MaybeCause::Overflow) => Err(OverflowError::Canonical),\n-                    }\n-                } else {\n+                let mut fulfill_cx = crate::solve::FulfillmentCtxt::new();\n+                fulfill_cx.register_predicate_obligation(self, obligation.clone());\n+                // True errors\n+                // FIXME(-Ztrait-solver=next): Overflows are reported as ambig here, is that OK?\n+                if !fulfill_cx.select_where_possible(self).is_empty() {\n                     Ok(EvaluationResult::EvaluatedToErr)\n+                } else if !fulfill_cx.select_all_or_error(self).is_empty() {\n+                    Ok(EvaluationResult::EvaluatedToAmbig)\n+                } else if self.opaque_types_added_in_snapshot(snapshot) {\n+                    Ok(EvaluationResult::EvaluatedToOkModuloOpaqueTypes)\n+                } else if self.region_constraints_added_in_snapshot(snapshot).is_some() {\n+                    Ok(EvaluationResult::EvaluatedToOkModuloRegions)\n+                } else {\n+                    Ok(EvaluationResult::EvaluatedToOk)\n                 }\n             })\n         } else {"}, {"sha": "4f429f018edf74943edbdf1428bd88768a5eec9f", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -618,6 +618,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let mut fulfill_cx = crate::solve::FulfillmentCtxt::new();\n         fulfill_cx.register_predicate_obligations(self.infcx, predicates);\n         // True errors\n+        // FIXME(-Ztrait-solver=next): Overflows are reported as ambig here, is that OK?\n         if !fulfill_cx.select_where_possible(self.infcx).is_empty() {\n             return Ok(EvaluatedToErr);\n         }"}, {"sha": "35da9151b6f72c5d197615ab0d087e96e028be7b", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -29,6 +29,9 @@\n use crate::fmt;\n use crate::panic::{Location, PanicInfo};\n \n+#[cfg(feature = \"panic_immediate_abort\")]\n+const _: () = assert!(cfg!(panic = \"abort\"), \"panic_immediate_abort requires -C panic=abort\");\n+\n // First we define the two main entry points that all panics go through.\n // In the end both are just convenience wrappers around `panic_impl`.\n "}, {"sha": "b8fec6902a08c2cda716ee04d3c273ecb8f23ece", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -107,8 +107,8 @@ use crate::sys::locks as sys;\n /// *guard += 1;\n /// ```\n ///\n-/// It is sometimes necessary to manually drop the mutex guard to unlock it\n-/// sooner than the end of the enclosing scope.\n+/// To unlock a mutex guard sooner than the end of the enclosing scope,\n+/// either create an inner scope or drop the guard manually.\n ///\n /// ```\n /// use std::sync::{Arc, Mutex};\n@@ -125,11 +125,18 @@ use crate::sys::locks as sys;\n ///     let res_mutex_clone = Arc::clone(&res_mutex);\n ///\n ///     threads.push(thread::spawn(move || {\n-///         let mut data = data_mutex_clone.lock().unwrap();\n-///         // This is the result of some important and long-ish work.\n-///         let result = data.iter().fold(0, |acc, x| acc + x * 2);\n-///         data.push(result);\n-///         drop(data);\n+///         // Here we use a block to limit the lifetime of the lock guard.\n+///         let result = {\n+///             let mut data = data_mutex_clone.lock().unwrap();\n+///             // This is the result of some important and long-ish work.\n+///             let result = data.iter().fold(0, |acc, x| acc + x * 2);\n+///             data.push(result);\n+///             result\n+///             // The mutex guard gets dropped here, together with any other values\n+///             // created in the critical section.\n+///         };\n+///         // The guard created here is a temporary dropped at the end of the statement, i.e.\n+///         // the lock would not remain being held even if the thread did some additional work.\n ///         *res_mutex_clone.lock().unwrap() += result;\n ///     }));\n /// });\n@@ -146,6 +153,8 @@ use crate::sys::locks as sys;\n /// // It's even more important here than in the threads because we `.join` the\n /// // threads after that. If we had not dropped the mutex guard, a thread could\n /// // be waiting forever for it, causing a deadlock.\n+/// // As in the threads, a block could have been used instead of calling the\n+/// // `drop` function.\n /// drop(data);\n /// // Here the mutex guard is not assigned to a variable and so, even if the\n /// // scope does not end after this line, the mutex is still released: there is\n@@ -160,6 +169,7 @@ use crate::sys::locks as sys;\n ///\n /// assert_eq!(*res_mutex.lock().unwrap(), 800);\n /// ```\n+///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"Mutex\")]\n pub struct Mutex<T: ?Sized> {"}, {"sha": "cf0b271761febf0cc139099d7742f86c30f810ca", "filename": "library/std/src/sys/hermit/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -202,7 +202,7 @@ impl OpenOptions {\n             create: false,\n             create_new: false,\n             // system-specific\n-            mode: 0x777,\n+            mode: 0o777,\n         }\n     }\n "}, {"sha": "2957916d56ccb1c5cd00d5e5ad86fb103807f48d", "filename": "src/doc/rustdoc/src/how-to-read-rustdoc.md", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-read-rustdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-read-rustdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-read-rustdoc.md?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -80,13 +80,20 @@ functions, and \"In Return Types\" shows matches in the return types of functions.\n Both are very useful when looking for a function whose name you can't quite\n bring to mind when you know the type you have or want.\n \n-When typing in the search bar, you can prefix your search term with a type\n-followed by a colon (such as `mod:`) to restrict the results to just that\n-kind of item. (The available items are listed in the help popup.)\n-\n-Searching for `println!` will search for a macro named `println`, just like\n+Names in the search interface can be prefixed with an item type followed by a\n+colon (such as `mod:`) to restrict the results to just that kind of item. Also,\n+searching for `println!` will search for a macro named `println`, just like\n searching for `macro:println` does.\n \n+Function signature searches can query generics, wrapped in angle brackets, and\n+traits are normalized like types in the search engine. For example, a function\n+with the signature `fn my_function<I: Iterator<Item=u32>>(input: I) -> usize`\n+can be matched with the following queries:\n+\n+* `Iterator<u32> -> usize`\n+* `trait:Iterator<primitive:u32> -> primitive:usize`\n+* `Iterator -> usize`\n+\n ### Changing displayed theme\n \n You can change the displayed theme by opening the settings menu (the gear"}, {"sha": "840ed8e1080b7a37ba0522ad9f33a85436008d17", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 111, "deletions": 53, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -354,12 +354,15 @@ function initSearch(rawSearchIndex) {\n         if (isInGenerics) {\n             parserState.genericsElems += 1;\n         }\n+        const typeFilter = parserState.typeFilter;\n+        parserState.typeFilter = null;\n         return {\n             name: name,\n             fullPath: pathSegments,\n             pathWithoutLast: pathSegments.slice(0, pathSegments.length - 1),\n             pathLast: pathSegments[pathSegments.length - 1],\n             generics: generics,\n+            typeFilter,\n         };\n     }\n \n@@ -495,6 +498,11 @@ function initSearch(rawSearchIndex) {\n      */\n     function getItemsBefore(query, parserState, elems, endChar) {\n         let foundStopChar = true;\n+        let start = parserState.pos;\n+\n+        // If this is a generic, keep the outer item's type filter around.\n+        const oldTypeFilter = parserState.typeFilter;\n+        parserState.typeFilter = null;\n \n         while (parserState.pos < parserState.length) {\n             const c = parserState.userQuery[parserState.pos];\n@@ -506,7 +514,25 @@ function initSearch(rawSearchIndex) {\n                 continue;\n             } else if (c === \":\" && isPathStart(parserState)) {\n                 throw [\"Unexpected \", \"::\", \": paths cannot start with \", \"::\"];\n-            } else if (c === \":\" || isEndCharacter(c)) {\n+            }  else if (c === \":\") {\n+                if (parserState.typeFilter !== null) {\n+                    throw [\"Unexpected \", \":\"];\n+                }\n+                if (elems.length === 0) {\n+                    throw [\"Expected type filter before \", \":\"];\n+                } else if (query.literalSearch) {\n+                    throw [\"You cannot use quotes on type filter\"];\n+                }\n+                // The type filter doesn't count as an element since it's a modifier.\n+                const typeFilterElem = elems.pop();\n+                checkExtraTypeFilterCharacters(start, parserState);\n+                parserState.typeFilter = typeFilterElem.name;\n+                parserState.pos += 1;\n+                parserState.totalElems -= 1;\n+                query.literalSearch = false;\n+                foundStopChar = true;\n+                continue;\n+            } else if (isEndCharacter(c)) {\n                 let extra = \"\";\n                 if (endChar === \">\") {\n                     extra = \"<\";\n@@ -540,15 +566,10 @@ function initSearch(rawSearchIndex) {\n                 ];\n             }\n             const posBefore = parserState.pos;\n+            start = parserState.pos;\n             getNextElem(query, parserState, elems, endChar === \">\");\n-            if (endChar !== \"\") {\n-                if (parserState.pos >= parserState.length) {\n-                    throw [\"Unclosed \", \"<\"];\n-                }\n-                const c2 = parserState.userQuery[parserState.pos];\n-                if (!isSeparatorCharacter(c2) && c2 !== endChar) {\n-                    throw [\"Expected \", endChar, \", found \", c2];\n-                }\n+            if (endChar !== \"\" && parserState.pos >= parserState.length) {\n+                throw [\"Unclosed \", \"<\"];\n             }\n             // This case can be encountered if `getNextElem` encountered a \"stop character\" right\n             // from the start. For example if you have `,,` or `<>`. In this case, we simply move up\n@@ -564,6 +585,8 @@ function initSearch(rawSearchIndex) {\n         // We are either at the end of the string or on the `endChar` character, let's move forward\n         // in any case.\n         parserState.pos += 1;\n+\n+        parserState.typeFilter = oldTypeFilter;\n     }\n \n     /**\n@@ -572,10 +595,10 @@ function initSearch(rawSearchIndex) {\n      *\n      * @param {ParserState} parserState\n      */\n-    function checkExtraTypeFilterCharacters(parserState) {\n+    function checkExtraTypeFilterCharacters(start, parserState) {\n         const query = parserState.userQuery;\n \n-        for (let pos = 0; pos < parserState.pos; ++pos) {\n+        for (let pos = start; pos < parserState.pos; ++pos) {\n             if (!isIdentCharacter(query[pos]) && !isWhitespaceCharacter(query[pos])) {\n                 throw [\"Unexpected \", query[pos], \" in type filter\"];\n             }\n@@ -591,6 +614,7 @@ function initSearch(rawSearchIndex) {\n      */\n     function parseInput(query, parserState) {\n         let foundStopChar = true;\n+        let start = parserState.pos;\n \n         while (parserState.pos < parserState.length) {\n             const c = parserState.userQuery[parserState.pos];\n@@ -612,16 +636,15 @@ function initSearch(rawSearchIndex) {\n                 }\n                 if (query.elems.length === 0) {\n                     throw [\"Expected type filter before \", \":\"];\n-                } else if (query.elems.length !== 1 || parserState.totalElems !== 1) {\n-                    throw [\"Unexpected \", \":\"];\n                 } else if (query.literalSearch) {\n                     throw [\"You cannot use quotes on type filter\"];\n                 }\n-                checkExtraTypeFilterCharacters(parserState);\n                 // The type filter doesn't count as an element since it's a modifier.\n-                parserState.typeFilter = query.elems.pop().name;\n+                const typeFilterElem = query.elems.pop();\n+                checkExtraTypeFilterCharacters(start, parserState);\n+                parserState.typeFilter = typeFilterElem.name;\n                 parserState.pos += 1;\n-                parserState.totalElems = 0;\n+                parserState.totalElems -= 1;\n                 query.literalSearch = false;\n                 foundStopChar = true;\n                 continue;\n@@ -653,13 +676,17 @@ function initSearch(rawSearchIndex) {\n                 ];\n             }\n             const before = query.elems.length;\n+            start = parserState.pos;\n             getNextElem(query, parserState, query.elems, false);\n             if (query.elems.length === before) {\n                 // Nothing was added, weird... Let's increase the position to not remain stuck.\n                 parserState.pos += 1;\n             }\n             foundStopChar = false;\n         }\n+        if (parserState.typeFilter !== null) {\n+            throw [\"Unexpected \", \":\", \" (expected path after type filter)\"];\n+        }\n         while (parserState.pos < parserState.length) {\n             if (isReturnArrow(parserState)) {\n                 parserState.pos += 2;\n@@ -687,7 +714,6 @@ function initSearch(rawSearchIndex) {\n         return {\n             original: userQuery,\n             userQuery: userQuery.toLowerCase(),\n-            typeFilter: NO_TYPE_FILTER,\n             elems: [],\n             returned: [],\n             // Total number of \"top\" elements (does not include generics).\n@@ -738,8 +764,8 @@ function initSearch(rawSearchIndex) {\n      *\n      * ident = *(ALPHA / DIGIT / \"_\")\n      * path = ident *(DOUBLE-COLON ident) [!]\n-     * arg = path [generics]\n-     * arg-without-generic = path\n+     * arg = [type-filter *WS COLON *WS] path [generics]\n+     * arg-without-generic = [type-filter *WS COLON *WS] path\n      * type-sep = COMMA/WS *(COMMA/WS)\n      * nonempty-arg-list = *(type-sep) arg *(type-sep arg) *(type-sep)\n      * nonempty-arg-list-without-generics = *(type-sep) arg-without-generic\n@@ -749,7 +775,7 @@ function initSearch(rawSearchIndex) {\n      * return-args = RETURN-ARROW *(type-sep) nonempty-arg-list\n      *\n      * exact-search = [type-filter *WS COLON] [ RETURN-ARROW ] *WS QUOTE ident QUOTE [ generics ]\n-     * type-search = [type-filter *WS COLON] [ nonempty-arg-list ] [ return-args ]\n+     * type-search = [ nonempty-arg-list ] [ return-args ]\n      *\n      * query = *WS (exact-search / type-search) *WS\n      *\n@@ -798,6 +824,20 @@ function initSearch(rawSearchIndex) {\n      * @return {ParsedQuery}    - The parsed query\n      */\n     function parseQuery(userQuery) {\n+        function convertTypeFilterOnElem(elem) {\n+            if (elem.typeFilter !== null) {\n+                let typeFilter = elem.typeFilter;\n+                if (typeFilter === \"const\") {\n+                    typeFilter = \"constant\";\n+                }\n+                elem.typeFilter = itemTypeFromName(typeFilter);\n+            } else {\n+                elem.typeFilter = NO_TYPE_FILTER;\n+            }\n+            for (const elem2 of elem.generics) {\n+                convertTypeFilterOnElem(elem2);\n+            }\n+        }\n         userQuery = userQuery.trim();\n         const parserState = {\n             length: userQuery.length,\n@@ -812,17 +852,15 @@ function initSearch(rawSearchIndex) {\n \n         try {\n             parseInput(query, parserState);\n-            if (parserState.typeFilter !== null) {\n-                let typeFilter = parserState.typeFilter;\n-                if (typeFilter === \"const\") {\n-                    typeFilter = \"constant\";\n-                }\n-                query.typeFilter = itemTypeFromName(typeFilter);\n+            for (const elem of query.elems) {\n+                convertTypeFilterOnElem(elem);\n+            }\n+            for (const elem of query.returned) {\n+                convertTypeFilterOnElem(elem);\n             }\n         } catch (err) {\n             query = newParsedQuery(userQuery);\n             query.error = err;\n-            query.typeFilter = -1;\n             return query;\n         }\n \n@@ -1057,32 +1095,30 @@ function initSearch(rawSearchIndex) {\n             }\n             // The names match, but we need to be sure that all generics kinda\n             // match as well.\n-            let elem_name;\n             if (elem.generics.length > 0 && row.generics.length >= elem.generics.length) {\n                 const elems = Object.create(null);\n                 for (const entry of row.generics) {\n-                    elem_name = entry.name;\n-                    if (elem_name === \"\") {\n+                    if (entry.name === \"\") {\n                         // Pure generic, needs to check into it.\n                         if (checkGenerics(entry, elem, maxEditDistance + 1, maxEditDistance)\n                             !== 0) {\n                             return maxEditDistance + 1;\n                         }\n                         continue;\n                     }\n-                    if (elems[elem_name] === undefined) {\n-                        elems[elem_name] = 0;\n+                    if (elems[entry.name] === undefined) {\n+                        elems[entry.name] = [];\n                     }\n-                    elems[elem_name] += 1;\n+                    elems[entry.name].push(entry.ty);\n                 }\n                 // We need to find the type that matches the most to remove it in order\n                 // to move forward.\n-                for (const generic of elem.generics) {\n+                const handleGeneric = generic => {\n                     let match = null;\n                     if (elems[generic.name]) {\n                         match = generic.name;\n                     } else {\n-                        for (elem_name in elems) {\n+                        for (const elem_name in elems) {\n                             if (!hasOwnPropertyRustdoc(elems, elem_name)) {\n                                 continue;\n                             }\n@@ -1093,12 +1129,32 @@ function initSearch(rawSearchIndex) {\n                         }\n                     }\n                     if (match === null) {\n-                        return maxEditDistance + 1;\n+                        return false;\n                     }\n-                    elems[match] -= 1;\n-                    if (elems[match] === 0) {\n+                    const matchIdx = elems[match].findIndex(tmp_elem =>\n+                        typePassesFilter(generic.typeFilter, tmp_elem));\n+                    if (matchIdx === -1) {\n+                        return false;\n+                    }\n+                    elems[match].splice(matchIdx, 1);\n+                    if (elems[match].length === 0) {\n                         delete elems[match];\n                     }\n+                    return true;\n+                };\n+                // To do the right thing with type filters, we first process generics\n+                // that have them, removing matching ones from the \"bag,\" then do the\n+                // ones with no type filter, which can match any entry regardless of its\n+                // own type.\n+                for (const generic of elem.generics) {\n+                    if (generic.typeFilter !== -1 && !handleGeneric(generic)) {\n+                        return maxEditDistance + 1;\n+                    }\n+                }\n+                for (const generic of elem.generics) {\n+                    if (generic.typeFilter === -1 && !handleGeneric(generic)) {\n+                        return maxEditDistance + 1;\n+                    }\n                 }\n                 return 0;\n             }\n@@ -1145,14 +1201,20 @@ function initSearch(rawSearchIndex) {\n                 return maxEditDistance + 1;\n             }\n \n-            let dist = editDistance(row.name, elem.name, maxEditDistance);\n+            let dist;\n+            if (typePassesFilter(elem.typeFilter, row.ty)) {\n+                dist = editDistance(row.name, elem.name, maxEditDistance);\n+            } else {\n+                dist = maxEditDistance + 1;\n+            }\n             if (literalSearch) {\n                 if (dist !== 0) {\n                     // The name didn't match, let's try to check if the generics do.\n                     if (elem.generics.length === 0) {\n                         const checkGeneric = row.generics.length > 0;\n                         if (checkGeneric && row.generics\n-                            .findIndex(tmp_elem => tmp_elem.name === elem.name) !== -1) {\n+                            .findIndex(tmp_elem => tmp_elem.name === elem.name &&\n+                                typePassesFilter(elem.typeFilter, tmp_elem.ty)) !== -1) {\n                             return 0;\n                         }\n                     }\n@@ -1201,22 +1263,21 @@ function initSearch(rawSearchIndex) {\n          *\n          * @param {Row} row\n          * @param {QueryElement} elem    - The element from the parsed query.\n-         * @param {integer} typeFilter\n+         * @param {integer} maxEditDistance\n          * @param {Array<integer>} skipPositions - Do not return one of these positions.\n          *\n          * @return {dist: integer, position: integer} - Returns an edit distance to the best match.\n          *                                              If there is no match, returns\n          *                                              `maxEditDistance + 1` and position: -1.\n          */\n-        function findArg(row, elem, typeFilter, maxEditDistance, skipPositions) {\n+        function findArg(row, elem, maxEditDistance, skipPositions) {\n             let dist = maxEditDistance + 1;\n             let position = -1;\n \n             if (row && row.type && row.type.inputs && row.type.inputs.length > 0) {\n                 let i = 0;\n                 for (const input of row.type.inputs) {\n-                    if (!typePassesFilter(typeFilter, input.ty) ||\n-                        skipPositions.indexOf(i) !== -1) {\n+                    if (skipPositions.indexOf(i) !== -1) {\n                         i += 1;\n                         continue;\n                     }\n@@ -1245,23 +1306,22 @@ function initSearch(rawSearchIndex) {\n          *\n          * @param {Row} row\n          * @param {QueryElement} elem   - The element from the parsed query.\n-         * @param {integer} typeFilter\n+         * @param {integer} maxEditDistance\n          * @param {Array<integer>} skipPositions - Do not return one of these positions.\n          *\n          * @return {dist: integer, position: integer} - Returns an edit distance to the best match.\n          *                                              If there is no match, returns\n          *                                              `maxEditDistance + 1` and position: -1.\n          */\n-        function checkReturned(row, elem, typeFilter, maxEditDistance, skipPositions) {\n+        function checkReturned(row, elem, maxEditDistance, skipPositions) {\n             let dist = maxEditDistance + 1;\n             let position = -1;\n \n             if (row && row.type && row.type.output.length > 0) {\n                 const ret = row.type.output;\n                 let i = 0;\n                 for (const ret_ty of ret) {\n-                    if (!typePassesFilter(typeFilter, ret_ty.ty) ||\n-                        skipPositions.indexOf(i) !== -1) {\n+                    if (skipPositions.indexOf(i) !== -1) {\n                         i += 1;\n                         continue;\n                     }\n@@ -1483,15 +1543,15 @@ function initSearch(rawSearchIndex) {\n             const fullId = row.id;\n             const searchWord = searchWords[pos];\n \n-            const in_args = findArg(row, elem, parsedQuery.typeFilter, maxEditDistance, []);\n-            const returned = checkReturned(row, elem, parsedQuery.typeFilter, maxEditDistance, []);\n+            const in_args = findArg(row, elem, maxEditDistance, []);\n+            const returned = checkReturned(row, elem, maxEditDistance, []);\n \n             // path_dist is 0 because no parent path information is currently stored\n             // in the search index\n             addIntoResults(results_in_args, fullId, pos, -1, in_args.dist, 0, maxEditDistance);\n             addIntoResults(results_returned, fullId, pos, -1, returned.dist, 0, maxEditDistance);\n \n-            if (!typePassesFilter(parsedQuery.typeFilter, row.ty)) {\n+            if (!typePassesFilter(elem.typeFilter, row.ty)) {\n                 return;\n             }\n \n@@ -1568,7 +1628,6 @@ function initSearch(rawSearchIndex) {\n                     const { dist, position } = callback(\n                         row,\n                         elem,\n-                        NO_TYPE_FILTER,\n                         maxEditDistance,\n                         skipPositions\n                     );\n@@ -1632,7 +1691,6 @@ function initSearch(rawSearchIndex) {\n                         in_returned = checkReturned(\n                             row,\n                             elem,\n-                            parsedQuery.typeFilter,\n                             maxEditDistance,\n                             []\n                         );"}, {"sha": "6b9a9b66a7d9e759fb7d5e131fd44357cc4e7ed8", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -79,11 +79,18 @@ function checkNeededFields(fullPath, expected, error_text, queryName, position)\n             \"foundElems\",\n             \"original\",\n             \"returned\",\n-            \"typeFilter\",\n             \"userQuery\",\n             \"error\",\n         ];\n-    } else if (fullPath.endsWith(\"elems\") || fullPath.endsWith(\"generics\")) {\n+    } else if (fullPath.endsWith(\"elems\") || fullPath.endsWith(\"returned\")) {\n+        fieldsToCheck = [\n+            \"name\",\n+            \"fullPath\",\n+            \"pathWithoutLast\",\n+            \"pathLast\",\n+            \"generics\",\n+        ];\n+    } else if (fullPath.endsWith(\"generics\")) {\n         fieldsToCheck = [\n             \"name\",\n             \"fullPath\","}, {"sha": "148d11ee4d68748305d2003434b80fcbd82bd4d7", "filename": "tests/assembly/is_aligned.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Fassembly%2Fis_aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Fassembly%2Fis_aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fassembly%2Fis_aligned.rs?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -1,6 +1,7 @@\n // assembly-output: emit-asm\n // min-llvm-version: 15.0\n // only-x86_64\n+// ignore-sgx\n // revisions: opt-speed opt-size\n // [opt-speed] compile-flags: -Copt-level=1\n // [opt-size] compile-flags: -Copt-level=s"}, {"sha": "24a7c6b5bf101523d71e6d55b669ef76ad0cd78a", "filename": "tests/assembly/strict_provenance.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Fassembly%2Fstrict_provenance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Fassembly%2Fstrict_provenance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fassembly%2Fstrict_provenance.rs?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -1,6 +1,7 @@\n // assembly-output: emit-asm\n // compile-flags: -Copt-level=1\n // only-x86_64\n+// ignore-sgx\n // min-llvm-version: 15.0\n #![crate_type = \"rlib\"]\n "}, {"sha": "0bc6baad47919c5bc78d805d115e0308f1c76cd4", "filename": "tests/assembly/x86_64-floating-point-clamp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Fassembly%2Fx86_64-floating-point-clamp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Fassembly%2Fx86_64-floating-point-clamp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fassembly%2Fx86_64-floating-point-clamp.rs?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -4,6 +4,7 @@\n // assembly-output: emit-asm\n // compile-flags: --crate-type=lib -O -C llvm-args=-x86-asm-syntax=intel\n // only-x86_64\n+// ignore-sgx\n \n // CHECK-LABEL: clamp_demo:\n #[no_mangle]"}, {"sha": "7eb3c6948ac57aa51bd621d1f665521604be1a4d", "filename": "tests/assembly/x86_64-fortanix-unknown-sgx-lvi-generic-load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-generic-load.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-generic-load.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-generic-load.rs?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -11,7 +11,7 @@ pub extern fn plus_one(r: &mut u64) {\n \n // CHECK: plus_one\n // CHECK: lfence\n-// CHECK-NEXT: addq\n+// CHECK-NEXT: incq\n // CHECK: popq [[REGISTER:%[a-z]+]]\n // CHECK-NEXT: lfence\n // CHECK-NEXT: jmpq *[[REGISTER]]"}, {"sha": "4745ebc4fcd44a9aa6f77513e0b85e3279d0bb86", "filename": "tests/assembly/x86_64-fortanix-unknown-sgx-lvi-inline-assembly.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-inline-assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-inline-assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-inline-assembly.rs?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -10,34 +10,25 @@ use std::arch::asm;\n pub extern \"C\" fn get(ptr: *const u64) -> u64 {\n     let value: u64;\n     unsafe {\n-        asm!(\".start_inline_asm:\",\n-            \"mov {}, [{}]\",\n-            \".end_inline_asm:\",\n+        asm!(\"mov {}, [{}]\",\n             out(reg) value,\n             in(reg) ptr);\n     }\n     value\n }\n \n // CHECK: get\n-// CHECK: .start_inline_asm\n-// CHECK-NEXT: movq\n+// CHECK: movq\n // CHECK-NEXT: lfence\n-// CHECK-NEXT: .end_inline_asm\n \n #[no_mangle]\n pub extern \"C\" fn myret() {\n     unsafe {\n-        asm!(\n-            \".start_myret_inline_asm:\",\n-            \"ret\",\n-            \".end_myret_inline_asm:\",\n-        );\n+        asm!(\"ret\");\n     }\n }\n \n // CHECK: myret\n-// CHECK: .start_myret_inline_asm\n-// CHECK-NEXT: shlq $0, (%rsp)\n+// CHECK: shlq $0, (%rsp)\n // CHECK-NEXT: lfence\n // CHECK-NEXT: retq"}, {"sha": "edf4adaad41aa5a95eda9f1e383bf519ee7383c3", "filename": "tests/assembly/x86_64-no-jump-tables.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Fassembly%2Fx86_64-no-jump-tables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Fassembly%2Fx86_64-no-jump-tables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fassembly%2Fx86_64-no-jump-tables.rs?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -6,6 +6,7 @@\n // compile-flags: -O\n // [set] compile-flags: -Zno-jump-tables\n // only-x86_64\n+// ignore-sgx\n \n #![crate_type = \"lib\"]\n "}, {"sha": "c6b71f5fbd49fd7f87c2b2f8e8986e65ee2f4216", "filename": "tests/run-make/issue-36710/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frun-make%2Fissue-36710%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frun-make%2Fissue-36710%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fissue-36710%2FMakefile?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -4,6 +4,7 @@\n # ignore-nvptx64-nvidia-cuda FIXME: can't find crate for `std`\n # ignore-musl FIXME: this makefile needs teaching how to use a musl toolchain\n #                    (see dist-i586-gnu-i586-i686-musl Dockerfile)\n+# ignore-sgx\n \n include ../../run-make-fulldeps/tools.mk\n "}, {"sha": "af9bc8c1d62eeab231297d6e222b87c3ce9b9dfc", "filename": "tests/run-make/x86_64-fortanix-unknown-sgx-lvi/cc_plus_one_asm.checks", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_asm.checks", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_asm.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_asm.checks?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -1,8 +1,7 @@\n CHECK: cc_plus_one_asm\n CHECK-NEXT: movl\n CHECK-NEXT: lfence\n-CHECK-NEXT: inc\n-CHECK-NEXT: notq (%rsp)\n-CHECK-NEXT: notq (%rsp)\n+CHECK-NEXT: incl\n+CHECK-NEXT: shlq $0, (%rsp)\n CHECK-NEXT: lfence\n CHECK-NEXT: retq"}, {"sha": "885bf461bf3d540ba25ab9f65ef8a0ecf81c39cf", "filename": "tests/run-make/x86_64-fortanix-unknown-sgx-lvi/jumpto.checks", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fjumpto.checks", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fjumpto.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fjumpto.checks?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -1,8 +1,24 @@\n-CHECK: libunwind::Registers_x86_64::jumpto\n+CHECK: __libunwind_Registers_x86_64_jumpto\n CHECK:      lfence\n CHECK:      lfence\n CHECK:      lfence\n CHECK:      lfence\n-CHECK:      shlq    $0, (%rsp)\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK-NEXT: popq [[REGISTER:%[a-z]+]]\n+CHECK-NEXT: lfence\n+CHECK-NEXT: popq [[REGISTER:%[a-z]+]]\n CHECK-NEXT: lfence\n-CHECK-NEXT: retq\n+CHECK-NEXT: jmpq *[[REGISTER]]"}, {"sha": "8a5493650a72097abfdcc9337c5f70eb6fcf3a27", "filename": "tests/run-make/x86_64-fortanix-unknown-sgx-lvi/print.checks", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fprint.checks", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fprint.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fprint.checks?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -2,6 +2,5 @@ CHECK: print\n CHECK:      lfence\n CHECK:      lfence\n CHECK:      lfence\n-CHECK:      popq\n CHECK:      callq 0x{{[[:xdigit:]]*}} <_Unwind_Resume>\n CHECK-NEXT: ud2"}, {"sha": "235bb603b842bd91b50b86d7fbaebe2f62c17959", "filename": "tests/run-make/x86_64-fortanix-unknown-sgx-lvi/script.sh", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fscript.sh", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fscript.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fscript.sh?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -20,39 +20,38 @@ function build {\n }\n \n function check {\n-    local func=$1\n+    local func_re=\"$1\"\n     local checks=\"${TEST_DIR}/$2\"\n     local asm=$(mktemp)\n-    local objdump=\"${BUILD_DIR}/x86_64-unknown-linux-gnu/llvm/build/bin/llvm-objdump\"\n-    local filecheck=\"${BUILD_DIR}/x86_64-unknown-linux-gnu/llvm/build/bin/FileCheck\"\n-\n-    ${objdump} --disassemble-symbols=${func} --demangle \\\n-      ${WORK_DIR}/enclave/target/x86_64-fortanix-unknown-sgx/debug/enclave > ${asm}\n+    local objdump=\"${LLVM_BIN_DIR}/llvm-objdump\"\n+    local filecheck=\"${LLVM_BIN_DIR}/FileCheck\"\n+    local enclave=${WORK_DIR}/enclave/target/x86_64-fortanix-unknown-sgx/debug/enclave\n+\n+    func=\"$(${objdump} --syms --demangle ${enclave} | \\\n+            grep --only-matching -E \"[[:blank:]]+${func_re}\\$\" | \\\n+            sed -e 's/^[[:space:]]*//' )\"\n+    ${objdump} --disassemble-symbols=\"${func}\" --demangle \\\n+      ${enclave} > ${asm}\n     ${filecheck} --input-file ${asm} ${checks}\n }\n \n build\n \n-check unw_getcontext unw_getcontext.checks\n-check \"libunwind::Registers_x86_64::jumpto()\" jumpto.checks\n-check \"std::io::stdio::_print::h87f0c238421c45bc\" print.checks\n-check rust_plus_one_global_asm rust_plus_one_global_asm.checks \\\n-  || echo \"warning: module level assembly currently not hardened\"\n+check \"unw_getcontext\" unw_getcontext.checks\n+check \"__libunwind_Registers_x86_64_jumpto\" jumpto.checks\n+check 'std::io::stdio::_print::[[:alnum:]]+' print.checks\n+check rust_plus_one_global_asm rust_plus_one_global_asm.checks\n \n check cc_plus_one_c cc_plus_one_c.checks\n check cc_plus_one_c_asm cc_plus_one_c_asm.checks\n check cc_plus_one_cxx cc_plus_one_cxx.checks\n check cc_plus_one_cxx_asm cc_plus_one_cxx_asm.checks\n-check cc_plus_one_asm cc_plus_one_asm.checks \\\n-  || echo \"warning: the cc crate forwards assembly files to the CC compiler.\" \\\n-           \"Clang uses its own integrated assembler, which does not include the LVI passes.\"\n+check cc_plus_one_asm cc_plus_one_asm.checks\n \n check cmake_plus_one_c cmake_plus_one_c.checks\n check cmake_plus_one_c_asm cmake_plus_one_c_asm.checks\n-check cmake_plus_one_c_global_asm cmake_plus_one_c_global_asm.checks \\\n-  || echo \"warning: module level assembly currently not hardened\"\n+check cmake_plus_one_c_global_asm cmake_plus_one_c_global_asm.checks\n check cmake_plus_one_cxx cmake_plus_one_cxx.checks\n check cmake_plus_one_cxx_asm cmake_plus_one_cxx_asm.checks\n-check cmake_plus_one_cxx_global_asm cmake_plus_one_cxx_global_asm.checks \\\n-  || echo \"warning: module level assembly currently not hardened\"\n+check cmake_plus_one_cxx_global_asm cmake_plus_one_cxx_global_asm.checks\n check cmake_plus_one_asm cmake_plus_one_asm.checks"}, {"sha": "d1aa840ab08a27e98d0d582506f44b9f1637df65", "filename": "tests/rustdoc-js-std/parser-errors.js", "status": "modified", "additions": 13, "deletions": 45, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frustdoc-js-std%2Fparser-errors.js", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frustdoc-js-std%2Fparser-errors.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-errors.js?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -17,6 +17,7 @@ const QUERY = [\n     \"a b:\",\n     \"a (b:\",\n     \"_:\",\n+    \"_:a\",\n     \"a-bb\",\n     \"a>bb\",\n     \"ab'\",\n@@ -48,7 +49,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"<P>\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"<p>\",\n         error: \"Found generics without a path\",\n     },\n@@ -57,7 +57,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"-> <P>\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"-> <p>\",\n         error: \"Found generics without a path\",\n     },\n@@ -66,7 +65,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a<\\\"P\\\">\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a<\\\"p\\\">\",\n         error: \"Unexpected `\\\"` in generics\",\n     },\n@@ -75,7 +73,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"\\\"P\\\" \\\"P\\\"\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"\\\"p\\\" \\\"p\\\"\",\n         error: \"Cannot have more than one literal search element\",\n     },\n@@ -84,7 +81,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"P \\\"P\\\"\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"p \\\"p\\\"\",\n         error: \"Cannot use literal search when there is more than one element\",\n     },\n@@ -93,7 +89,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"\\\"p\\\" p\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"\\\"p\\\" p\",\n         error: \"You cannot have more than one element if you use quotes\",\n     },\n@@ -102,7 +97,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"\\\"const\\\": p\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"\\\"const\\\": p\",\n         error: \"You cannot use quotes on type filter\",\n     },\n@@ -111,16 +105,14 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a<:a>\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a<:a>\",\n-        error: \"Unexpected `:` after `<`\",\n+        error: \"Expected type filter before `:`\",\n     },\n     {\n         elems: [],\n         foundElems: 0,\n         original: \"a<::a>\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a<::a>\",\n         error: \"Unexpected `::`: paths cannot start with `::`\",\n     },\n@@ -129,7 +121,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"((a))\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"((a))\",\n         error: \"Unexpected `(`\",\n     },\n@@ -138,7 +129,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"(p -> p\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"(p -> p\",\n         error: \"Unexpected `(`\",\n     },\n@@ -147,7 +137,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"::a::b\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"::a::b\",\n         error: \"Paths cannot start with `::`\",\n     },\n@@ -156,7 +145,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a::::b\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a::::b\",\n         error: \"Unexpected `::::`\",\n     },\n@@ -165,7 +153,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a::b::\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a::b::\",\n         error: \"Paths cannot end with `::`\",\n     },\n@@ -174,7 +161,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \":a\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \":a\",\n         error: \"Expected type filter before `:`\",\n     },\n@@ -183,16 +169,14 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a b:\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a b:\",\n-        error: \"Unexpected `:`\",\n+        error: \"Unexpected `:` (expected path after type filter)\",\n     },\n     {\n         elems: [],\n         foundElems: 0,\n         original: \"a (b:\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a (b:\",\n         error: \"Unexpected `(`\",\n     },\n@@ -201,16 +185,22 @@ const PARSED = [\n         foundElems: 0,\n         original: \"_:\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"_:\",\n+        error: \"Unexpected `:` (expected path after type filter)\",\n+    },\n+    {\n+        elems: [],\n+        foundElems: 0,\n+        original: \"_:a\",\n+        returned: [],\n+        userQuery: \"_:a\",\n         error: \"Unknown type filter `_`\",\n     },\n     {\n         elems: [],\n         foundElems: 0,\n         original: \"a-bb\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a-bb\",\n         error: \"Unexpected `-` (did you mean `->`?)\",\n     },\n@@ -219,7 +209,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a>bb\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a>bb\",\n         error: \"Unexpected `>` (did you mean `->`?)\",\n     },\n@@ -228,7 +217,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"ab'\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"ab'\",\n         error: \"Unexpected `'`\",\n     },\n@@ -237,7 +225,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a->\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a->\",\n         error: \"Expected at least one item after `->`\",\n     },\n@@ -246,7 +233,6 @@ const PARSED = [\n         foundElems: 0,\n         original: '\"p\" <a>',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: '\"p\" <a>',\n         error: \"Found generics without a path\",\n     },\n@@ -255,7 +241,6 @@ const PARSED = [\n         foundElems: 0,\n         original: '\"p\" a<a>',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: '\"p\" a<a>',\n         error: \"You cannot have more than one element if you use quotes\",\n     },\n@@ -264,7 +249,6 @@ const PARSED = [\n         foundElems: 0,\n         original: 'a,<',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: 'a,<',\n         error: 'Found generics without a path',\n     },\n@@ -273,7 +257,6 @@ const PARSED = [\n         foundElems: 0,\n         original: 'aaaaa<>b',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: 'aaaaa<>b',\n         error: 'Expected `,`, ` `, `:` or `->`, found `b`',\n     },\n@@ -282,16 +265,14 @@ const PARSED = [\n         foundElems: 0,\n         original: 'fn:aaaaa<>b',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: 'fn:aaaaa<>b',\n-        error: 'Expected `,`, ` ` or `->`, found `b`',\n+        error: 'Expected `,`, ` `, `:` or `->`, found `b`',\n     },\n     {\n         elems: [],\n         foundElems: 0,\n         original: '->a<>b',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: '->a<>b',\n         error: 'Expected `,` or ` `, found `b`',\n     },\n@@ -300,7 +281,6 @@ const PARSED = [\n         foundElems: 0,\n         original: 'a<->',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: 'a<->',\n         error: 'Unexpected `-` after `<`',\n     },\n@@ -309,7 +289,6 @@ const PARSED = [\n         foundElems: 0,\n         original: 'a:: a',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: 'a:: a',\n         error: 'Paths cannot end with `::`',\n     },\n@@ -318,7 +297,6 @@ const PARSED = [\n         foundElems: 0,\n         original: 'a ::a',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: 'a ::a',\n         error: 'Paths cannot start with `::`',\n     },\n@@ -327,16 +305,14 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a<a>:\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a<a>:\",\n-        error: 'Unexpected `:`',\n+        error: 'Unexpected `<` in type filter',\n     },\n     {\n         elems: [],\n         foundElems: 0,\n         original: \"a<>:\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a<>:\",\n         error: 'Unexpected `<` in type filter',\n     },\n@@ -345,7 +321,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a,:\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a,:\",\n         error: 'Unexpected `,` in type filter',\n     },\n@@ -354,7 +329,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a<>  :\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a<>  :\",\n         error: 'Unexpected `<` in type filter',\n     },\n@@ -363,7 +337,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"mod : :\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"mod : :\",\n         error: 'Unexpected `:`',\n     },\n@@ -372,7 +345,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a!a\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a!a\",\n         error: 'Unexpected `!`: it can only be at the end of an ident',\n     },\n@@ -381,7 +353,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a!!\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a!!\",\n         error: 'Cannot have more than one `!` in an ident',\n     },\n@@ -390,7 +361,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"mod:a!\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"mod:a!\",\n         error: 'Invalid search type: macro `!` and `mod` both specified',\n     },\n@@ -399,7 +369,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a!::a\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a!::a\",\n         error: 'Cannot have associated items in macros',\n     },\n@@ -408,7 +377,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a<\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a<\",\n         error: \"Unclosed `<`\",\n     },"}, {"sha": "e23447ab75dc4006c1cfd4b6197036d905e793ce", "filename": "tests/rustdoc-js-std/parser-filter.js", "status": "modified", "additions": 88, "deletions": 8, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frustdoc-js-std%2Fparser-filter.js", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frustdoc-js-std%2Fparser-filter.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-filter.js?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -1,4 +1,14 @@\n-const QUERY = ['fn:foo', 'enum : foo', 'macro<f>:foo', 'macro!', 'macro:mac!', 'a::mac!'];\n+const QUERY = [\n+    'fn:foo',\n+    'enum : foo',\n+    'macro<f>:foo',\n+    'macro!',\n+    'macro:mac!',\n+    'a::mac!',\n+    '-> fn:foo',\n+    '-> fn:foo<fn:bar>',\n+    '-> fn:foo<fn:bar, enum : baz::fuzz>',\n+];\n \n const PARSED = [\n     {\n@@ -8,11 +18,11 @@ const PARSED = [\n             pathWithoutLast: [],\n             pathLast: \"foo\",\n             generics: [],\n+            typeFilter: 5,\n         }],\n         foundElems: 1,\n         original: \"fn:foo\",\n         returned: [],\n-        typeFilter: 5,\n         userQuery: \"fn:foo\",\n         error: null,\n     },\n@@ -23,11 +33,11 @@ const PARSED = [\n             pathWithoutLast: [],\n             pathLast: \"foo\",\n             generics: [],\n+            typeFilter: 4,\n         }],\n         foundElems: 1,\n         original: \"enum : foo\",\n         returned: [],\n-        typeFilter: 4,\n         userQuery: \"enum : foo\",\n         error: null,\n     },\n@@ -36,9 +46,8 @@ const PARSED = [\n         foundElems: 0,\n         original: \"macro<f>:foo\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"macro<f>:foo\",\n-        error: \"Unexpected `:`\",\n+        error: \"Unexpected `<` in type filter\",\n     },\n     {\n         elems: [{\n@@ -47,11 +56,11 @@ const PARSED = [\n             pathWithoutLast: [],\n             pathLast: \"macro\",\n             generics: [],\n+            typeFilter: 14,\n         }],\n         foundElems: 1,\n         original: \"macro!\",\n         returned: [],\n-        typeFilter: 14,\n         userQuery: \"macro!\",\n         error: null,\n     },\n@@ -62,11 +71,11 @@ const PARSED = [\n             pathWithoutLast: [],\n             pathLast: \"mac\",\n             generics: [],\n+            typeFilter: 14,\n         }],\n         foundElems: 1,\n         original: \"macro:mac!\",\n         returned: [],\n-        typeFilter: 14,\n         userQuery: \"macro:mac!\",\n         error: null,\n     },\n@@ -77,12 +86,83 @@ const PARSED = [\n             pathWithoutLast: [\"a\"],\n             pathLast: \"mac\",\n             generics: [],\n+            typeFilter: 14,\n         }],\n         foundElems: 1,\n         original: \"a::mac!\",\n         returned: [],\n-        typeFilter: 14,\n         userQuery: \"a::mac!\",\n         error: null,\n     },\n+    {\n+        elems: [],\n+        foundElems: 1,\n+        original: \"-> fn:foo\",\n+        returned: [{\n+            name: \"foo\",\n+            fullPath: [\"foo\"],\n+            pathWithoutLast: [],\n+            pathLast: \"foo\",\n+            generics: [],\n+            typeFilter: 5,\n+        }],\n+        userQuery: \"-> fn:foo\",\n+        error: null,\n+    },\n+    {\n+        elems: [],\n+        foundElems: 1,\n+        original: \"-> fn:foo<fn:bar>\",\n+        returned: [{\n+            name: \"foo\",\n+            fullPath: [\"foo\"],\n+            pathWithoutLast: [],\n+            pathLast: \"foo\",\n+            generics: [\n+                {\n+                    name: \"bar\",\n+                    fullPath: [\"bar\"],\n+                    pathWithoutLast: [],\n+                    pathLast: \"bar\",\n+                    generics: [],\n+                    typeFilter: 5,\n+                }\n+            ],\n+            typeFilter: 5,\n+        }],\n+        userQuery: \"-> fn:foo<fn:bar>\",\n+        error: null,\n+    },\n+    {\n+        elems: [],\n+        foundElems: 1,\n+        original: \"-> fn:foo<fn:bar, enum : baz::fuzz>\",\n+        returned: [{\n+            name: \"foo\",\n+            fullPath: [\"foo\"],\n+            pathWithoutLast: [],\n+            pathLast: \"foo\",\n+            generics: [\n+                {\n+                    name: \"bar\",\n+                    fullPath: [\"bar\"],\n+                    pathWithoutLast: [],\n+                    pathLast: \"bar\",\n+                    generics: [],\n+                    typeFilter: 5,\n+                },\n+                {\n+                    name: \"baz::fuzz\",\n+                    fullPath: [\"baz\", \"fuzz\"],\n+                    pathWithoutLast: [\"baz\"],\n+                    pathLast: \"fuzz\",\n+                    generics: [],\n+                    typeFilter: 4,\n+                },\n+            ],\n+            typeFilter: 5,\n+        }],\n+        userQuery: \"-> fn:foo<fn:bar, enum : baz::fuzz>\",\n+        error: null,\n+    },\n ];"}, {"sha": "c448d845acbdc1b9329bb05f70c9d375e18c7343", "filename": "tests/rustdoc-js-std/parser-generics.js", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frustdoc-js-std%2Fparser-generics.js", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frustdoc-js-std%2Fparser-generics.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-generics.js?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -6,7 +6,6 @@ const PARSED = [\n         foundElems: 0,\n         original: 'A<B<C<D>,  E>',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: 'a<b<c<d>,  e>',\n         error: 'Unexpected `<` after `<`',\n     },\n@@ -18,19 +17,20 @@ const PARSED = [\n                 pathWithoutLast: [],\n                 pathLast: \"p\",\n                 generics: [],\n+                typeFilter: -1,\n             },\n             {\n                 name: \"u8\",\n                 fullPath: [\"u8\"],\n                 pathWithoutLast: [],\n                 pathLast: \"u8\",\n                 generics: [],\n+                typeFilter: -1,\n             },\n         ],\n         foundElems: 2,\n         original: \"p<> u8\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"p<> u8\",\n         error: null,\n     },\n@@ -50,12 +50,12 @@ const PARSED = [\n                         generics: [],\n                     },\n                 ],\n+                typeFilter: -1,\n             },\n         ],\n         foundElems: 1,\n         original: '\"p\"<a>',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: '\"p\"<a>',\n         error: null,\n     },"}, {"sha": "be42b7aa4630714fc82344fd244cc7e13d73795f", "filename": "tests/rustdoc-js-std/parser-ident.js", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frustdoc-js-std%2Fparser-ident.js", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frustdoc-js-std%2Fparser-ident.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-ident.js?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -23,11 +23,11 @@ const PARSED = [\n                     generics: [],\n                 },\n             ],\n+            typeFilter: -1,\n         }],\n         foundElems: 1,\n         original: \"R<!>\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"r<!>\",\n         error: null,\n     },\n@@ -38,11 +38,11 @@ const PARSED = [\n             pathWithoutLast: [],\n             pathLast: \"!\",\n             generics: [],\n+            typeFilter: -1,\n         }],\n         foundElems: 1,\n         original: \"!\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"!\",\n         error: null,\n     },\n@@ -53,11 +53,11 @@ const PARSED = [\n             pathWithoutLast: [],\n             pathLast: \"a\",\n             generics: [],\n+            typeFilter: 14,\n         }],\n         foundElems: 1,\n         original: \"a!\",\n         returned: [],\n-        typeFilter: 14,\n         userQuery: \"a!\",\n         error: null,\n     },\n@@ -66,7 +66,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a!::b\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a!::b\",\n         error: \"Cannot have associated items in macros\",\n     },\n@@ -77,11 +76,11 @@ const PARSED = [\n             pathWithoutLast: [\"!\"],\n             pathLast: \"b\",\n             generics: [],\n+            typeFilter: -1,\n         }],\n         foundElems: 1,\n         original: \"!::b\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"!::b\",\n         error: null,\n     },\n@@ -90,7 +89,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a!::b!\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a!::b!\",\n         error: \"Cannot have associated items in macros\",\n     },"}, {"sha": "3a31d1bddfff5e3cc8ca2d056408b91ba93a6735", "filename": "tests/rustdoc-js-std/parser-literal.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frustdoc-js-std%2Fparser-literal.js", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frustdoc-js-std%2Fparser-literal.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-literal.js?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -16,11 +16,11 @@ const PARSED = [\n                     generics: [],\n                 },\n             ],\n+            typeFilter: -1,\n         }],\n         foundElems: 1,\n         original: \"R<P>\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"r<p>\",\n         error: null,\n     }"}, {"sha": "f3e421f5ffa50a3d6601814561d1106a34ca97cd", "filename": "tests/rustdoc-js-std/parser-paths.js", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frustdoc-js-std%2Fparser-paths.js", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frustdoc-js-std%2Fparser-paths.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-paths.js?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -8,11 +8,11 @@ const PARSED = [\n             pathWithoutLast: [\"a\"],\n             pathLast: \"b\",\n             generics: [],\n+            typeFilter: -1,\n         }],\n         foundElems: 1,\n         original: \"A::B\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a::b\",\n         error: null,\n     },\n@@ -24,19 +24,20 @@ const PARSED = [\n                 pathWithoutLast: [\"a\"],\n                 pathLast: \"b\",\n                 generics: [],\n+                typeFilter: -1,\n             },\n             {\n                 name: \"c\",\n                 fullPath: [\"c\"],\n                 pathWithoutLast: [],\n                 pathLast: \"c\",\n                 generics: [],\n+                typeFilter: -1,\n             },\n         ],\n         foundElems: 2,\n         original: 'A::B,C',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: 'a::b,c',\n         error: null,\n     },\n@@ -56,19 +57,20 @@ const PARSED = [\n                         generics: [],\n                     },\n                 ],\n+                typeFilter: -1,\n             },\n             {\n                 name: \"c\",\n                 fullPath: [\"c\"],\n                 pathWithoutLast: [],\n                 pathLast: \"c\",\n                 generics: [],\n+                typeFilter: -1,\n             },\n         ],\n         foundElems: 2,\n         original: 'A::B<f>,C',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: 'a::b<f>,c',\n         error: null,\n     },\n@@ -79,11 +81,11 @@ const PARSED = [\n             pathWithoutLast: [\"mod\"],\n             pathLast: \"a\",\n             generics: [],\n+            typeFilter: -1,\n         }],\n         foundElems: 1,\n         original: \"mod::a\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"mod::a\",\n         error: null,\n     },"}, {"sha": "d5d67cac892f595fcd8a66c3cacfdcc7d09c514b", "filename": "tests/rustdoc-js-std/parser-quote.js", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frustdoc-js-std%2Fparser-quote.js", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frustdoc-js-std%2Fparser-quote.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-quote.js?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -19,8 +19,8 @@ const PARSED = [\n             pathWithoutLast: [],\n             pathLast: \"p\",\n             generics: [],\n+            typeFilter: -1,\n         }],\n-        typeFilter: -1,\n         userQuery: '-> \"p\"',\n         error: null,\n     },\n@@ -31,11 +31,11 @@ const PARSED = [\n             pathWithoutLast: [],\n             pathLast: \"p\",\n             generics: [],\n+            typeFilter: -1,\n         }],\n         foundElems: 1,\n         original: '\"p\",',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: '\"p\",',\n         error: null,\n     },\n@@ -44,7 +44,6 @@ const PARSED = [\n         foundElems: 0,\n         original: '\"p\" -> a',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: '\"p\" -> a',\n         error: \"You cannot have more than one element if you use quotes\",\n     },\n@@ -53,7 +52,6 @@ const PARSED = [\n         foundElems: 0,\n         original: '\"a\" -> \"p\"',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: '\"a\" -> \"p\"',\n         error: \"Cannot have more than one literal search element\",\n     },\n@@ -62,7 +60,6 @@ const PARSED = [\n         foundElems: 0,\n         original: '->\"-\"',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: '->\"-\"',\n         error: 'Unexpected `-` in a string element',\n     },\n@@ -71,7 +68,6 @@ const PARSED = [\n         foundElems: 0,\n         original: '\"a',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: '\"a',\n         error: 'Unclosed `\"`',\n     },\n@@ -80,7 +76,6 @@ const PARSED = [\n         foundElems: 0,\n         original: '\"\"',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: '\"\"',\n         error: 'Cannot have empty string element',\n     },"}, {"sha": "c2981319055db02a8c10f2017ab1a38a8cefa4e1", "filename": "tests/rustdoc-js-std/parser-returned.js", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frustdoc-js-std%2Fparser-returned.js", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frustdoc-js-std%2Fparser-returned.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-returned.js?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -25,8 +25,8 @@ const PARSED = [\n                     generics: [],\n                 },\n             ],\n+            typeFilter: -1,\n         }],\n-        typeFilter: -1,\n         userQuery: \"-> f<p>\",\n         error: null,\n     },\n@@ -40,8 +40,8 @@ const PARSED = [\n             pathWithoutLast: [],\n             pathLast: \"p\",\n             generics: [],\n+            typeFilter: -1,\n         }],\n-        typeFilter: -1,\n         userQuery: \"-> p\",\n         error: null,\n     },\n@@ -55,8 +55,8 @@ const PARSED = [\n             pathWithoutLast: [],\n             pathLast: \"a\",\n             generics: [],\n+            typeFilter: -1,\n         }],\n-        typeFilter: -1,\n         userQuery: \"->,a\",\n         error: null,\n     },\n@@ -67,6 +67,7 @@ const PARSED = [\n             pathWithoutLast: [],\n             pathLast: \"aaaaa\",\n             generics: [],\n+            typeFilter: -1,\n         }],\n         foundElems: 2,\n         original: \"aaaaa->a\",\n@@ -76,8 +77,8 @@ const PARSED = [\n             pathWithoutLast: [],\n             pathLast: \"a\",\n             generics: [],\n+            typeFilter: -1,\n         }],\n-        typeFilter: -1,\n         userQuery: \"aaaaa->a\",\n         error: null,\n     },\n@@ -91,8 +92,8 @@ const PARSED = [\n             pathWithoutLast: [],\n             pathLast: \"!\",\n             generics: [],\n+            typeFilter: -1,\n         }],\n-        typeFilter: -1,\n         userQuery: \"-> !\",\n         error: null,\n     },"}, {"sha": "fc8c5114c4e963ab3657d007065a5608cf75377d", "filename": "tests/rustdoc-js-std/parser-separators.js", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frustdoc-js-std%2Fparser-separators.js", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frustdoc-js-std%2Fparser-separators.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-separators.js?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -19,19 +19,20 @@ const PARSED = [\n                 pathWithoutLast: [],\n                 pathLast: 'aaaaaa',\n                 generics: [],\n+                typeFilter: -1,\n             },\n             {\n                 name: 'b',\n                 fullPath: ['b'],\n                 pathWithoutLast: [],\n                 pathLast: 'b',\n                 generics: [],\n+                typeFilter: -1,\n             },\n         ],\n         foundElems: 2,\n         original: \"aaaaaa\tb\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"aaaaaa\tb\",\n         error: null,\n     },\n@@ -43,19 +44,20 @@ const PARSED = [\n                 pathWithoutLast: [],\n                 pathLast: 'a',\n                 generics: [],\n+                typeFilter: -1,\n             },\n             {\n                 name: 'b',\n                 fullPath: ['b'],\n                 pathWithoutLast: [],\n                 pathLast: 'b',\n                 generics: [],\n+                typeFilter: -1,\n             },\n         ],\n         foundElems: 2,\n         original: \"a b\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a b\",\n         error: null,\n     },\n@@ -67,19 +69,20 @@ const PARSED = [\n                 pathWithoutLast: [],\n                 pathLast: 'a',\n                 generics: [],\n+                typeFilter: -1,\n             },\n             {\n                 name: 'b',\n                 fullPath: ['b'],\n                 pathWithoutLast: [],\n                 pathLast: 'b',\n                 generics: [],\n+                typeFilter: -1,\n             },\n         ],\n         foundElems: 2,\n         original: \"a,b\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a,b\",\n         error: null,\n     },\n@@ -91,19 +94,20 @@ const PARSED = [\n                 pathWithoutLast: [],\n                 pathLast: 'a',\n                 generics: [],\n+                typeFilter: -1,\n             },\n             {\n                 name: 'b',\n                 fullPath: ['b'],\n                 pathWithoutLast: [],\n                 pathLast: 'b',\n                 generics: [],\n+                typeFilter: -1,\n             },\n         ],\n         foundElems: 2,\n         original: \"a\\tb\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a\\tb\",\n         error: null,\n     },\n@@ -130,12 +134,12 @@ const PARSED = [\n                         generics: [],\n                     },\n                 ],\n+                typeFilter: -1,\n             },\n         ],\n         foundElems: 1,\n         original: \"a<b c>\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a<b c>\",\n         error: null,\n     },\n@@ -162,12 +166,12 @@ const PARSED = [\n                         generics: [],\n                     },\n                 ],\n+                typeFilter: -1,\n             },\n         ],\n         foundElems: 1,\n         original: \"a<b,c>\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a<b,c>\",\n         error: null,\n     },\n@@ -194,12 +198,12 @@ const PARSED = [\n                         generics: [],\n                     },\n                 ],\n+                typeFilter: -1,\n             },\n         ],\n         foundElems: 1,\n         original: \"a<b\\tc>\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a<b\\tc>\",\n         error: null,\n     },"}, {"sha": "dc1049a70bc3882b20a89356f75d0489cc3bc98b", "filename": "tests/rustdoc-js-std/parser-weird-queries.js", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frustdoc-js-std%2Fparser-weird-queries.js", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frustdoc-js-std%2Fparser-weird-queries.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-weird-queries.js?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -20,19 +20,20 @@ const PARSED = [\n                 pathWithoutLast: [],\n                 pathLast: \"a\",\n                 generics: [],\n+                typeFilter: -1,\n             },\n             {\n                 name: \"b\",\n                 fullPath: [\"b\"],\n                 pathWithoutLast: [],\n                 pathLast: \"b\",\n                 generics: [],\n+                typeFilter: -1,\n             },\n         ],\n         foundElems: 2,\n         original: \"a b\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a b\",\n         error: null,\n     },\n@@ -44,19 +45,20 @@ const PARSED = [\n                 pathWithoutLast: [],\n                 pathLast: \"a\",\n                 generics: [],\n+                typeFilter: -1,\n             },\n             {\n                 name: \"b\",\n                 fullPath: [\"b\"],\n                 pathWithoutLast: [],\n                 pathLast: \"b\",\n                 generics: [],\n+                typeFilter: -1,\n             },\n         ],\n         foundElems: 2,\n         original: \"a   b\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a   b\",\n         error: null,\n     },\n@@ -65,7 +67,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a,b(c)\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a,b(c)\",\n         error: \"Unexpected `(`\",\n     },\n@@ -77,19 +78,20 @@ const PARSED = [\n                 pathWithoutLast: [],\n                 pathLast: \"aaa\",\n                 generics: [],\n+                typeFilter: -1,\n             },\n             {\n                 name: \"a\",\n                 fullPath: [\"a\"],\n                 pathWithoutLast: [],\n                 pathLast: \"a\",\n                 generics: [],\n+                typeFilter: -1,\n             },\n         ],\n         foundElems: 2,\n         original: \"aaa,a\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"aaa,a\",\n         error: null,\n     },\n@@ -98,7 +100,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \",,,,\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \",,,,\",\n         error: null,\n     },\n@@ -107,17 +108,15 @@ const PARSED = [\n         foundElems: 0,\n         original: 'mod    :',\n         returned: [],\n-        typeFilter: 0,\n         userQuery: 'mod    :',\n-        error: null,\n+        error: \"Unexpected `:` (expected path after type filter)\",\n     },\n     {\n         elems: [],\n         foundElems: 0,\n         original: 'mod\\t:',\n         returned: [],\n-        typeFilter: 0,\n         userQuery: 'mod\\t:',\n-        error: null,\n+        error: \"Unexpected `:` (expected path after type filter)\",\n     },\n ];"}, {"sha": "5051743bda2d1bada1ad1c593487ffa247ae7667", "filename": "tests/rustdoc-js/generics-impl.js", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frustdoc-js%2Fgenerics-impl.js", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frustdoc-js%2Fgenerics-impl.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fgenerics-impl.js?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -5,6 +5,8 @@ const QUERY = [\n     'Aaaaaaa -> bool',\n     'Aaaaaaa -> usize',\n     'Read -> u64',\n+    'trait:Read -> u64',\n+    'struct:Read -> u64',\n     'bool -> u64',\n     'Ddddddd -> u64',\n     '-> Ddddddd'\n@@ -36,6 +38,17 @@ const EXPECTED = [\n             { 'path': 'generics_impl::Ddddddd', 'name': 'ggggggg' },\n         ],\n     },\n+    {\n+        // trait:Read -> u64\n+        'others': [\n+            { 'path': 'generics_impl::Ddddddd', 'name': 'eeeeeee' },\n+            { 'path': 'generics_impl::Ddddddd', 'name': 'ggggggg' },\n+        ],\n+    },\n+    {\n+        // struct:Read -> u64\n+        'others': [],\n+    },\n     {\n         // bool -> u64\n         'others': ["}, {"sha": "f79c709ad6cf0abb1b811afcdf311424743569f1", "filename": "tests/rustdoc-js/generics.js", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frustdoc-js%2Fgenerics.js", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frustdoc-js%2Fgenerics.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fgenerics.js?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -2,6 +2,8 @@\n \n const QUERY = [\n     'R<P>',\n+    'R<struct:P>',\n+    'R<enum:P>',\n     '\"P\"',\n     'P',\n     'ExtraCreditStructMulti<ExtraCreditInnerMulti, ExtraCreditInnerMulti>',\n@@ -20,6 +22,20 @@ const EXPECTED = [\n             { 'path': 'generics', 'name': 'alpha' },\n         ],\n     },\n+    {\n+        // R<struct:P>\n+        'returned': [\n+            { 'path': 'generics', 'name': 'alef' },\n+        ],\n+        'in_args': [\n+            { 'path': 'generics', 'name': 'alpha' },\n+        ],\n+    },\n+    {\n+        // R<enum:P>\n+        'returned': [],\n+        'in_args': [],\n+    },\n     {\n         // \"P\"\n         'others': ["}, {"sha": "4aec98c34037962586af3848bbaa3ab583629d59", "filename": "tests/rustdoc-js/primitive.js", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frustdoc-js%2Fprimitive.js", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Frustdoc-js%2Fprimitive.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fprimitive.js?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -3,6 +3,8 @@\n const QUERY = [\n     \"i32\",\n     \"str\",\n+    \"primitive:str\",\n+    \"struct:str\",\n     \"TotoIsSomewhere\",\n ];\n \n@@ -17,6 +19,14 @@ const EXPECTED = [\n             { 'path': 'primitive', 'name': 'foo' },\n         ],\n     },\n+    {\n+        'returned': [\n+            { 'path': 'primitive', 'name': 'foo' },\n+        ],\n+    },\n+    {\n+        'returned': [],\n+    },\n     {\n         'others': [],\n         'in_args': [],"}, {"sha": "6b3396a25cf97d6ce679d99b110aa8e0a6bdd974", "filename": "tests/ui/const-generics/generic_const_exprs/cross_crate_predicate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate_predicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate_predicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate_predicate.stderr?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -1,8 +1,8 @@\n error: unconstrained generic constant\n-  --> $DIR/cross_crate_predicate.rs:7:13\n+  --> $DIR/cross_crate_predicate.rs:7:44\n    |\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                            ^\n    |\n    = help: try adding a `where` bound using this expression: `where [(); std::mem::size_of::<T>() - 1]:`\n note: required by a bound in `test1`\n@@ -12,10 +12,10 @@ LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `test1`\n \n error: unconstrained generic constant\n-  --> $DIR/cross_crate_predicate.rs:7:13\n+  --> $DIR/cross_crate_predicate.rs:7:44\n    |\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                            ^\n    |\n    = help: try adding a `where` bound using this expression: `where [(); std::mem::size_of::<T>() - 1]:`\n note: required by a bound in `test1`"}, {"sha": "394dd44d40d3308536ae1da482aa767dad78fce7", "filename": "tests/ui/const-generics/type_mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Fui%2Fconst-generics%2Ftype_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Fui%2Fconst-generics%2Ftype_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ftype_mismatch.stderr?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -1,8 +1,8 @@\n error: the constant `N` is not of type `u8`\n-  --> $DIR/type_mismatch.rs:2:5\n+  --> $DIR/type_mismatch.rs:2:11\n    |\n LL |     bar::<N>()\n-   |     ^^^^^^^^\n+   |           ^ expected `u8`, found `usize`\n    |\n note: required by a bound in `bar`\n   --> $DIR/type_mismatch.rs:6:8"}, {"sha": "83f311efd39d7017ba191b1474e5d121480f06b2", "filename": "tests/ui/specialization/min_specialization/bad-const-wf-doesnt-specialize.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fbad-const-wf-doesnt-specialize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fbad-const-wf-doesnt-specialize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fbad-const-wf-doesnt-specialize.stderr?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -2,7 +2,7 @@ error: the constant `N` is not of type `usize`\n   --> $DIR/bad-const-wf-doesnt-specialize.rs:8:29\n    |\n LL | impl<const N: i32> Copy for S<N> {}\n-   |                             ^^^^\n+   |                             ^^^^ expected `usize`, found `i32`\n    |\n note: required by a bound in `S`\n   --> $DIR/bad-const-wf-doesnt-specialize.rs:6:10"}, {"sha": "4bfb6323a53662b32f8db005a7eb4a8ca5024e94", "filename": "tests/ui/traits/new-solver/alias-eq-in-canonical-response.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Fui%2Ftraits%2Fnew-solver%2Falias-eq-in-canonical-response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Fui%2Ftraits%2Fnew-solver%2Falias-eq-in-canonical-response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Falias-eq-in-canonical-response.rs?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -0,0 +1,40 @@\n+// check-pass\n+// compile-flags: -Ztrait-solver=next\n+\n+trait Foo {\n+    type Gat<'a>\n+    where\n+        Self: 'a;\n+    fn bar(&self) -> Self::Gat<'_>;\n+}\n+\n+enum Option<T> {\n+    Some(T),\n+    None,\n+}\n+\n+impl<T> Option<T> {\n+    fn as_ref(&self) -> Option<&T> {\n+        match self {\n+            Option::Some(t) => Option::Some(t),\n+            Option::None => Option::None,\n+        }\n+    }\n+\n+    fn map<U>(self, f: impl FnOnce(T) -> U) -> Option<U> {\n+        match self {\n+            Option::Some(t) => Option::Some(f(t)),\n+            Option::None => Option::None,\n+        }\n+    }\n+}\n+\n+impl<T: Foo + 'static> Foo for Option<T> {\n+    type Gat<'a> = Option<<T as Foo>::Gat<'a>> where Self: 'a;\n+\n+    fn bar(&self) -> Self::Gat<'_> {\n+        self.as_ref().map(Foo::bar)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "bf947d0ea4a6cfd44fc3f0ccec08c136181c22c5", "filename": "tests/ui/transmutability/issue-101739-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Fui%2Ftransmutability%2Fissue-101739-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f5008ce74563873cbd8574018dbe4906a5361/tests%2Fui%2Ftransmutability%2Fissue-101739-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fissue-101739-1.stderr?ref=4c0f5008ce74563873cbd8574018dbe4906a5361", "patch": "@@ -8,7 +8,7 @@ error: the constant `ASSUME_ALIGNMENT` is not of type `Assume`\n   --> $DIR/issue-101739-1.rs:8:14\n    |\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, ASSUME_ALIGNMENT>,\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Assume`, found `bool`\n    |\n note: required by a bound in `BikeshedIntrinsicFrom`\n   --> $SRC_DIR/core/src/mem/transmutability.rs:LL:COL"}]}