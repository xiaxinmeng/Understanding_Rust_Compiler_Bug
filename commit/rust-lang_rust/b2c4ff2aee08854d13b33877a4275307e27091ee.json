{"sha": "b2c4ff2aee08854d13b33877a4275307e27091ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyYzRmZjJhZWUwODg1NGQxM2IzMzg3N2E0Mjc1MzA3ZTI3MDkxZWU=", "commit": {"author": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2019-12-24T16:53:03Z"}, "committer": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2019-12-25T13:27:50Z"}, "message": "add remanining fields to stat stuct", "tree": {"sha": "6bb68a3f92623ee4b2f0b8811d27a94322f1a704", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bb68a3f92623ee4b2f0b8811d27a94322f1a704"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2c4ff2aee08854d13b33877a4275307e27091ee", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niI4EABYIADYWIQRsB8A/3NrzTlMMjT0nUl7150IKUAUCXgNj1hgcZ2l0QGNocmlz\ndGlhbnBvdmVkYS54eXoACgkQJ1Je9edCClCA+AEAmgpdTqciXd6BDNMAVl4v2R2P\nTWAdSfYHKLmnotPoWEABAPmO9S2E8tlPNpblfd2Vc4R/o9PqT1r1WFIzQ0pL1yQF\n=lmL2\n-----END PGP SIGNATURE-----", "payload": "tree 6bb68a3f92623ee4b2f0b8811d27a94322f1a704\nparent 6177e6df7e212340ad194319d698f321b44bb35a\nauthor Christian Poveda <git@christianpoveda.xyz> 1577206383 -0500\ncommitter Christian Poveda <git@christianpoveda.xyz> 1577280470 -0500\n\nadd remanining fields to stat stuct\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2c4ff2aee08854d13b33877a4275307e27091ee", "html_url": "https://github.com/rust-lang/rust/commit/b2c4ff2aee08854d13b33877a4275307e27091ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2c4ff2aee08854d13b33877a4275307e27091ee/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6177e6df7e212340ad194319d698f321b44bb35a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6177e6df7e212340ad194319d698f321b44bb35a", "html_url": "https://github.com/rust-lang/rust/commit/6177e6df7e212340ad194319d698f321b44bb35a"}], "stats": {"total": 64, "additions": 54, "deletions": 10}, "files": [{"sha": "8b102bf04abf4967cc8bc9ac9f45c0f65dd002e7", "filename": "src/shims/fs.rs", "status": "modified", "additions": 54, "deletions": 10, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/b2c4ff2aee08854d13b33877a4275307e27091ee/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c4ff2aee08854d13b33877a4275307e27091ee/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=b2c4ff2aee08854d13b33877a4275307e27091ee", "patch": "@@ -261,14 +261,58 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.try_unwrap_io_result(result)\n     }\n \n-    fn stat(&mut self,\n-        _path_op: OpTy<'tcx, Tag>,\n+    fn stat(\n+        &mut self,\n+        path_op: OpTy<'tcx, Tag>,\n         buf_op: OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n+        let path_scalar = this.read_scalar(path_op)?.not_undef()?;\n+        let path = this.read_os_str_from_c_str(path_scalar)?;\n+\n         let buf = this.deref_operand(buf_op)?;\n \n+        let metadata = match std::fs::metadata(path) {\n+            Ok(metadata) => metadata,\n+            Err(e) => {\n+                this.set_last_error_from_io_error(e)?;\n+                return Ok(-1);\n+            }\n+        };\n+\n+        let file_type = metadata.file_type();\n+\n+        let mode_name = if file_type.is_file() {\n+            \"S_IFREG\"\n+        } else if file_type.is_dir() {\n+            \"S_IFDIR\"\n+        } else {\n+            \"S_IFLNK\"\n+        };\n+\n+        let mode = this.eval_libc(mode_name)?.to_u32()?;\n+\n+        let size = metadata.len();\n+\n+        let (access_sec, access_nsec) = extract_sec_and_nsec(\n+            metadata.accessed(),\n+            &mut 0,\n+            0,\n+        )?;\n+\n+        let (created_sec, created_nsec) = extract_sec_and_nsec(\n+            metadata.created(),\n+            &mut 0,\n+            0,\n+        )?;\n+\n+        let (modified_sec, modified_nsec) = extract_sec_and_nsec(\n+            metadata.modified(),\n+            &mut 0,\n+            0,\n+        )?;\n+\n         let dev_t_layout = this.libc_ty_layout(\"dev_t\")?;\n         let mode_t_layout = this.libc_ty_layout(\"mode_t\")?;\n         let nlink_t_layout = this.libc_ty_layout(\"nlink_t\")?;\n@@ -284,21 +328,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let imms = [\n             immty_from_uint_checked(0u128, dev_t_layout)?, // st_dev\n-            immty_from_uint_checked(0u128, mode_t_layout)?, // st_mode\n+            immty_from_uint_checked(mode, mode_t_layout)?, // st_mode\n             immty_from_uint_checked(0u128, nlink_t_layout)?, // st_nlink\n             immty_from_uint_checked(0u128, ino_t_layout)?, // st_ino\n             immty_from_uint_checked(0u128, uid_t_layout)?, // st_uid\n             immty_from_uint_checked(0u128, gid_t_layout)?, // st_gid\n             immty_from_uint_checked(0u128, dev_t_layout)?, // st_rdev\n-            immty_from_uint_checked(0u128, time_t_layout)?, // st_atime\n-            immty_from_uint_checked(0u128, long_layout)?, // st_atime_nsec\n-            immty_from_uint_checked(0u128, time_t_layout)?, // st_mtime\n-            immty_from_uint_checked(0u128, long_layout)?, // st_mtime_nsec\n+            immty_from_uint_checked(access_sec, time_t_layout)?, // st_atime\n+            immty_from_uint_checked(access_nsec, long_layout)?, // st_atime_nsec\n+            immty_from_uint_checked(modified_sec, time_t_layout)?, // st_mtime\n+            immty_from_uint_checked(modified_nsec, long_layout)?, // st_mtime_nsec\n             immty_from_uint_checked(0u128, time_t_layout)?, // st_ctime\n             immty_from_uint_checked(0u128, long_layout)?, // st_ctime_nsec\n-            immty_from_uint_checked(0u128, time_t_layout)?, // st_birthtime\n-            immty_from_uint_checked(0u128, long_layout)?, // st_birthtime_nsec\n-            immty_from_uint_checked(0u128, off_t_layout)?, // st_size\n+            immty_from_uint_checked(created_sec, time_t_layout)?, // st_birthtime\n+            immty_from_uint_checked(created_nsec, long_layout)?, // st_birthtime_nsec\n+            immty_from_uint_checked(size, off_t_layout)?, // st_size\n             immty_from_uint_checked(0u128, blkcnt_t_layout)?, // st_blocks\n             immty_from_uint_checked(0u128, blksize_t_layout)?, // st_blksize\n             immty_from_uint_checked(0u128, uint32_t_layout)?, // st_flags"}]}