{"sha": "7aa42073f220895e054987babe6f07148dad92ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhYTQyMDczZjIyMDg5NWUwNTQ5ODdiYWJlNmYwNzE0OGRhZDkyY2U=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-04-28T15:03:47Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-04-28T15:03:47Z"}, "message": "Fix op_ref false positives", "tree": {"sha": "59e894904286b0ec1f79280cf0372fe19342cbbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59e894904286b0ec1f79280cf0372fe19342cbbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7aa42073f220895e054987babe6f07148dad92ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7aa42073f220895e054987babe6f07148dad92ce", "html_url": "https://github.com/rust-lang/rust/commit/7aa42073f220895e054987babe6f07148dad92ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7aa42073f220895e054987babe6f07148dad92ce/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81a55330dccab9e512c446c751e83452e8f86801", "url": "https://api.github.com/repos/rust-lang/rust/commits/81a55330dccab9e512c446c751e83452e8f86801", "html_url": "https://github.com/rust-lang/rust/commit/81a55330dccab9e512c446c751e83452e8f86801"}], "stats": {"total": 169, "additions": 90, "deletions": 79}, "files": [{"sha": "51a11dd9dde65b90d0ddb3a7176783b37ebfce0c", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 89, "deletions": 78, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/7aa42073f220895e054987babe6f07148dad92ce/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aa42073f220895e054987babe6f07148dad92ce/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=7aa42073f220895e054987babe6f07148dad92ce", "patch": "@@ -1,7 +1,6 @@\n use rustc::hir::*;\n use rustc::lint::*;\n-use utils::{SpanlessEq, span_lint, span_lint_and_then, multispan_sugg, snippet, implements_trait};\n-use utils::sugg::Sugg;\n+use utils::{SpanlessEq, span_lint, span_lint_and_then, multispan_sugg, snippet, implements_trait, is_copy};\n \n /// **What it does:** Checks for equal operands to comparison, logical and\n /// bitwise, difference and division binary operators (`==`, `>`, etc., `&&`,\n@@ -59,83 +58,95 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                               EQ_OP,\n                               e.span,\n                               &format!(\"equal expressions as operands to `{}`\", op.node.as_str()));\n-                } else {\n-                    let trait_id = match op.node {\n-                        BiAdd => cx.tcx.lang_items.add_trait(),\n-                        BiSub => cx.tcx.lang_items.sub_trait(),\n-                        BiMul => cx.tcx.lang_items.mul_trait(),\n-                        BiDiv => cx.tcx.lang_items.div_trait(),\n-                        BiRem => cx.tcx.lang_items.rem_trait(),\n-                        BiAnd | BiOr => None,\n-                        BiBitXor => cx.tcx.lang_items.bitxor_trait(),\n-                        BiBitAnd => cx.tcx.lang_items.bitand_trait(),\n-                        BiBitOr => cx.tcx.lang_items.bitor_trait(),\n-                        BiShl => cx.tcx.lang_items.shl_trait(),\n-                        BiShr => cx.tcx.lang_items.shr_trait(),\n-                        BiNe | BiEq => cx.tcx.lang_items.eq_trait(),\n-                        BiLt | BiLe | BiGe | BiGt => cx.tcx.lang_items.ord_trait(),\n-                    };\n-                    if let Some(trait_id) = trait_id {\n-                        #[allow(match_same_arms)]\n-                        match (&left.node, &right.node) {\n-                            // do not suggest to dereference literals\n-                            (&ExprLit(..), _) |\n-                            (_, &ExprLit(..)) => {},\n-                            // &foo == &bar\n-                            (&ExprAddrOf(_, ref l), &ExprAddrOf(_, ref r)) => {\n-                                if implements_trait(cx, cx.tables.expr_ty(l), trait_id, &[cx.tables.expr_ty(r)], None) {\n-                                    span_lint_and_then(cx,\n-                                                       OP_REF,\n-                                                       e.span,\n-                                                       \"taken reference of both operands, which is done automatically \\\n-                                                        by the operator anyway\",\n-                                                       |db| {\n-                                        let lsnip = snippet(cx, l.span, \"...\").to_string();\n-                                        let rsnip = snippet(cx, r.span, \"...\").to_string();\n-                                        multispan_sugg(db,\n-                                                       \"use the values directly\".to_string(),\n-                                                       vec![(left.span, lsnip),\n-                                                            (right.span, rsnip)]);\n-                                    })\n-                                }\n-                            },\n-                            // &foo == bar\n-                            (&ExprAddrOf(_, ref l), _) => {\n-                                if implements_trait(cx,\n-                                                    cx.tables.expr_ty(l),\n-                                                    trait_id,\n-                                                    &[cx.tables.expr_ty(right)],\n-                                                    None) {\n-                                    span_lint_and_then(cx, OP_REF, e.span, \"taken reference of left operand\", |db| {\n-                                        let lsnip = snippet(cx, l.span, \"...\").to_string();\n-                                        let rsnip = Sugg::hir(cx, right, \"...\").deref().to_string();\n-                                        multispan_sugg(db,\n-                                                       \"dereference the right operand instead\".to_string(),\n-                                                       vec![(left.span, lsnip),\n-                                                            (right.span, rsnip)]);\n-                                    })\n-                                }\n-                            },\n-                            // foo == &bar\n-                            (_, &ExprAddrOf(_, ref r)) => {\n-                                if implements_trait(cx,\n-                                                    cx.tables.expr_ty(left),\n-                                                    trait_id,\n-                                                    &[cx.tables.expr_ty(r)],\n-                                                    None) {\n-                                    span_lint_and_then(cx, OP_REF, e.span, \"taken reference of right operand\", |db| {\n-                                        let lsnip = Sugg::hir(cx, left, \"...\").deref().to_string();\n-                                        let rsnip = snippet(cx, r.span, \"...\").to_string();\n-                                        multispan_sugg(db,\n-                                                       \"dereference the left operand instead\".to_string(),\n-                                                       vec![(left.span, lsnip),\n-                                                            (right.span, rsnip)]);\n-                                    })\n-                                }\n-                            },\n-                            _ => {},\n+                    return;\n+                }\n+            }\n+            let (trait_id, requires_ref) = match op.node {\n+                BiAdd => (cx.tcx.lang_items.add_trait(), false),\n+                BiSub => (cx.tcx.lang_items.sub_trait(), false),\n+                BiMul => (cx.tcx.lang_items.mul_trait(), false),\n+                BiDiv => (cx.tcx.lang_items.div_trait(), false),\n+                BiRem => (cx.tcx.lang_items.rem_trait(), false),\n+                // don't lint short circuiting ops\n+                BiAnd | BiOr => return,\n+                BiBitXor => (cx.tcx.lang_items.bitxor_trait(), false),\n+                BiBitAnd => (cx.tcx.lang_items.bitand_trait(), false),\n+                BiBitOr => (cx.tcx.lang_items.bitor_trait(), false),\n+                BiShl => (cx.tcx.lang_items.shl_trait(), false),\n+                BiShr => (cx.tcx.lang_items.shr_trait(), false),\n+                BiNe | BiEq => (cx.tcx.lang_items.eq_trait(), true),\n+                BiLt | BiLe | BiGe | BiGt => (cx.tcx.lang_items.ord_trait(), true),\n+            };\n+            let parent = cx.tcx.hir.get_parent(e.id);\n+            if let Some(trait_id) = trait_id {\n+                #[allow(match_same_arms)]\n+                match (&left.node, &right.node) {\n+                    // do not suggest to dereference literals\n+                    (&ExprLit(..), _) |\n+                    (_, &ExprLit(..)) => {},\n+                    // &foo == &bar\n+                    (&ExprAddrOf(_, ref l), &ExprAddrOf(_, ref r)) => {\n+                        let lty = cx.tables.expr_ty(l);\n+                        let rty = cx.tables.expr_ty(r);\n+                        let lcpy = is_copy(cx, lty, parent);\n+                        let rcpy = is_copy(cx, rty, parent);\n+                        // either operator autorefs or both args are copyable\n+                        if (requires_ref || (lcpy && rcpy)) && implements_trait(cx, lty, trait_id, &[rty], None) {\n+                            span_lint_and_then(cx,\n+                                                OP_REF,\n+                                                e.span,\n+                                                \"needlessly taken reference of both operands\",\n+                                                |db| {\n+                                let lsnip = snippet(cx, l.span, \"...\").to_string();\n+                                let rsnip = snippet(cx, r.span, \"...\").to_string();\n+                                multispan_sugg(db,\n+                                                \"use the values directly\".to_string(),\n+                                                vec![(left.span, lsnip),\n+                                                    (right.span, rsnip)]);\n+                            })\n+                        } else if lcpy && !rcpy && implements_trait(cx, lty, trait_id, &[cx.tables.expr_ty(right)], None) {\n+                            span_lint_and_then(cx,\n+                                                OP_REF,\n+                                                e.span,\n+                                                \"needlessly taken reference of left operand\",\n+                                                |db| {\n+                                let lsnip = snippet(cx, l.span, \"...\").to_string();\n+                                db.span_suggestion(left.span, \"use the left value directly\", lsnip);\n+                            })\n+                        } else if !lcpy && rcpy && implements_trait(cx, cx.tables.expr_ty(left), trait_id, &[rty], None) {\n+                            span_lint_and_then(cx,\n+                                                OP_REF,\n+                                                e.span,\n+                                                \"needlessly taken reference of right operand\",\n+                                                |db| {\n+                                let rsnip = snippet(cx, r.span, \"...\").to_string();\n+                                db.span_suggestion(right.span, \"use the right value directly\", rsnip);\n+                            })\n+                        }\n+                    },\n+                    // &foo == bar\n+                    (&ExprAddrOf(_, ref l), _) => {\n+                        let lty = cx.tables.expr_ty(l);\n+                        let lcpy = is_copy(cx, lty, parent);\n+                        if (requires_ref || lcpy) && implements_trait(cx, lty, trait_id, &[cx.tables.expr_ty(right)], None) {\n+                            span_lint_and_then(cx, OP_REF, e.span, \"needlessly taken reference of left operand\", |db| {\n+                                let lsnip = snippet(cx, l.span, \"...\").to_string();\n+                                db.span_suggestion(left.span, \"use the left value directly\", lsnip);\n+                            })\n+                        }\n+                    },\n+                    // foo == &bar\n+                    (_, &ExprAddrOf(_, ref r)) => {\n+                        let rty = cx.tables.expr_ty(r);\n+                        let rcpy = is_copy(cx, rty, parent);\n+                        if (requires_ref || rcpy) && implements_trait(cx, cx.tables.expr_ty(left), trait_id, &[rty], None) {\n+                            span_lint_and_then(cx, OP_REF, e.span, \"taken reference of right operand\", |db| {\n+                                let rsnip = snippet(cx, r.span, \"...\").to_string();\n+                                db.span_suggestion(left.span, \"use the right value directly\", rsnip);\n+                            })\n                         }\n-                    }\n+                    },\n+                    _ => {},\n                 }\n             }\n         }"}, {"sha": "5448429f16471bab7633db5a3aec63cd71ed4628", "filename": "tests/ui/op_ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7aa42073f220895e054987babe6f07148dad92ce/tests%2Fui%2Fop_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7aa42073f220895e054987babe6f07148dad92ce/tests%2Fui%2Fop_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fop_ref.stderr?ref=7aa42073f220895e054987babe6f07148dad92ce", "patch": "@@ -1,4 +1,4 @@\n-warning: taken reference of both operands, which is done automatically by the operator anyway\n+warning: needlessly taken reference of both operands\n   --> $DIR/op_ref.rs:13:15\n    |\n 13 |     let foo = &5 - &6;"}]}