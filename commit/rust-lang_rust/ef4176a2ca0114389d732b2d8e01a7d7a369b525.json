{"sha": "ef4176a2ca0114389d732b2d8e01a7d7a369b525", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNDE3NmEyY2EwMTE0Mzg5ZDczMmIyZDhlMDFhN2Q3YTM2OWI1MjU=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-11-17T03:45:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-17T03:45:04Z"}, "message": "Merge pull request #3205 from matthiaskrgr/clippy\n\nfix a few clippy warnings", "tree": {"sha": "9e16c1d5d823e2e34d874daa0c4dc4457bbc956d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e16c1d5d823e2e34d874daa0c4dc4457bbc956d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef4176a2ca0114389d732b2d8e01a7d7a369b525", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb747ACRBK7hj4Ov3rIwAAdHIIAHJyGEFLt6wqY8NktuUxpnn/\noomTYssex6Yx3IuA1XQklRwlFoi33mcKGDjUNjvWZCJqNOAzvRfpz6HLBAC5CHzH\ngBf3JYjbDxavF5m87GCak2qDVDEs6O0HLxe4CQiPLi1LJmDI/Cjf+XaPQzdwIBqF\nNxeoAOQboag7693o4PDR7N+ocYz83++ThynPTWmP4KC03jZjRF6epY16QU/AaWad\nhCjoYTb7POoWtcuAmQf29UXQzN1yHvJDTUzoXriuLnCpzihy5CSGVNk62Oh1olGh\nLVUP4EJCwhoIauHhCxRS0Ekkznc9rrTGDlqvO0lbQWbvhtLfyhrnSZ2txS/YSzY=\n=oqcE\n-----END PGP SIGNATURE-----\n", "payload": "tree 9e16c1d5d823e2e34d874daa0c4dc4457bbc956d\nparent fa9fd5cd2ed079ec76c6e27fb4190d57677e1456\nparent 3aa153398aa95c19847fc902f84509b2cb9f9de1\nauthor Nick Cameron <nrc@ncameron.org> 1542426304 +1300\ncommitter GitHub <noreply@github.com> 1542426304 +1300\n\nMerge pull request #3205 from matthiaskrgr/clippy\n\nfix a few clippy warnings"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef4176a2ca0114389d732b2d8e01a7d7a369b525", "html_url": "https://github.com/rust-lang/rust/commit/ef4176a2ca0114389d732b2d8e01a7d7a369b525", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef4176a2ca0114389d732b2d8e01a7d7a369b525/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa9fd5cd2ed079ec76c6e27fb4190d57677e1456", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa9fd5cd2ed079ec76c6e27fb4190d57677e1456", "html_url": "https://github.com/rust-lang/rust/commit/fa9fd5cd2ed079ec76c6e27fb4190d57677e1456"}, {"sha": "3aa153398aa95c19847fc902f84509b2cb9f9de1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3aa153398aa95c19847fc902f84509b2cb9f9de1", "html_url": "https://github.com/rust-lang/rust/commit/3aa153398aa95c19847fc902f84509b2cb9f9de1"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "07df0e32d9c7d0aa0705924d0714b1dd9a2c8846", "filename": "src/config/file_lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef4176a2ca0114389d732b2d8e01a7d7a369b525/src%2Fconfig%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4176a2ca0114389d732b2d8e01a7d7a369b525/src%2Fconfig%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Ffile_lines.rs?ref=ef4176a2ca0114389d732b2d8e01a7d7a369b525", "patch": "@@ -167,7 +167,7 @@ fn normalize_ranges(ranges: &mut HashMap<FileName, Vec<Range>>) {\n         ranges.sort();\n         let mut result = vec![];\n         {\n-            let mut iter = ranges.into_iter().peekable();\n+            let mut iter = ranges.iter_mut().peekable();\n             while let Some(next) = iter.next() {\n                 let mut next = *next;\n                 while let Some(&&mut peek) = iter.peek() {"}, {"sha": "973c72d871f09694d6119c7722a91961df6a15d6", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef4176a2ca0114389d732b2d8e01a7d7a369b525/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4176a2ca0114389d732b2d8e01a7d7a369b525/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=ef4176a2ca0114389d732b2d8e01a7d7a369b525", "patch": "@@ -1584,7 +1584,7 @@ fn rewrite_struct_lit<'a>(\n         )?\n     } else {\n         let field_iter = fields\n-            .into_iter()\n+            .iter()\n             .map(StructLitField::Regular)\n             .chain(base.into_iter().map(StructLitField::Base));\n "}, {"sha": "7dd315fcb9b63a37c31e27d91bfabcacec14484c", "filename": "src/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef4176a2ca0114389d732b2d8e01a7d7a369b525/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4176a2ca0114389d732b2d8e01a7d7a369b525/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=ef4176a2ca0114389d732b2d8e01a7d7a369b525", "patch": "@@ -313,7 +313,7 @@ fn rewrite_tuple_pat(\n     context: &RewriteContext,\n     shape: Shape,\n ) -> Option<String> {\n-    let mut pat_vec: Vec<_> = pats.into_iter().map(|x| TuplePatField::Pat(x)).collect();\n+    let mut pat_vec: Vec<_> = pats.iter().map(|x| TuplePatField::Pat(x)).collect();\n \n     if let Some(pos) = dotdot_pos {\n         let prev = if pos == 0 {"}, {"sha": "599f83cd49ca56ae5f8c8dad82cfe3242e67280f", "filename": "src/test/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef4176a2ca0114389d732b2d8e01a7d7a369b525/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4176a2ca0114389d732b2d8e01a7d7a369b525/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=ef4176a2ca0114389d732b2d8e01a7d7a369b525", "patch": "@@ -114,7 +114,7 @@ fn write_message(msg: &str) {\n fn system_tests() {\n     // Get all files in the tests/source directory.\n     let files = get_test_files(Path::new(\"tests/source\"), true);\n-    let (_reports, count, fails) = check_files(files, None);\n+    let (_reports, count, fails) = check_files(files, &None);\n \n     // Display results.\n     println!(\"Ran {} system tests.\", count);\n@@ -126,7 +126,7 @@ fn system_tests() {\n #[test]\n fn coverage_tests() {\n     let files = get_test_files(Path::new(\"tests/coverage/source\"), true);\n-    let (_reports, count, fails) = check_files(files, None);\n+    let (_reports, count, fails) = check_files(files, &None);\n \n     println!(\"Ran {} tests in coverage mode.\", count);\n     assert_eq!(fails, 0, \"{} tests failed\", fails);\n@@ -230,7 +230,7 @@ fn idempotence_tests() {\n     }\n     // Get all files in the tests/target directory.\n     let files = get_test_files(Path::new(\"tests/target\"), true);\n-    let (_reports, count, fails) = check_files(files, None);\n+    let (_reports, count, fails) = check_files(files, &None);\n \n     // Display results.\n     println!(\"Ran {} idempotent tests.\", count);\n@@ -251,7 +251,7 @@ fn self_tests() {\n     }\n     files.push(PathBuf::from(\"src/lib.rs\"));\n \n-    let (reports, count, fails) = check_files(files, Some(PathBuf::from(\"rustfmt.toml\")));\n+    let (reports, count, fails) = check_files(files, &Some(PathBuf::from(\"rustfmt.toml\")));\n     let mut warnings = 0;\n \n     // Display results.\n@@ -340,7 +340,7 @@ fn format_lines_errors_are_reported_with_tabs() {\n \n // For each file, run rustfmt and collect the output.\n // Returns the number of files checked and the number of failures.\n-fn check_files(files: Vec<PathBuf>, opt_config: Option<PathBuf>) -> (Vec<FormatReport>, u32, u32) {\n+fn check_files(files: Vec<PathBuf>, opt_config: &Option<PathBuf>) -> (Vec<FormatReport>, u32, u32) {\n     let mut count = 0;\n     let mut fails = 0;\n     let mut reports = vec![];"}, {"sha": "f407e44036ff8ca69c0f78d2020c05245dc4040e", "filename": "src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef4176a2ca0114389d732b2d8e01a7d7a369b525/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4176a2ca0114389d732b2d8e01a7d7a369b525/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=ef4176a2ca0114389d732b2d8e01a7d7a369b525", "patch": "@@ -492,7 +492,7 @@ impl Rewrite for ast::GenericBound {\n         match *self {\n             ast::GenericBound::Trait(ref poly_trait_ref, trait_bound_modifier) => {\n                 let snippet = context.snippet(self.span());\n-                let has_paren = snippet.starts_with(\"(\") && snippet.ends_with(\")\");\n+                let has_paren = snippet.starts_with('(') && snippet.ends_with(')');\n                 let rewrite = match trait_bound_modifier {\n                     ast::TraitBoundModifier::None => poly_trait_ref.rewrite(context, shape),\n                     ast::TraitBoundModifier::Maybe => poly_trait_ref"}]}